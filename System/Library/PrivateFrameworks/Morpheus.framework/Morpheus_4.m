void sub_24240F2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(float *)(v34 + 4 * v42) = *(float *)(v33 + 4 * v37) + *(float *)(v34 + 4 * v42);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240F594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v55, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(float *)(v34 + 4 * v42) = *(float *)(v33 + 4 * v37) * *(float *)(v34 + 4 * v42);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_24240F87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  float v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(float *)(v33 + 4 * v37);
          if (*(float *)(v34 + 4 * v42) > v47)
            v47 = *(float *)(v34 + 4 * v42);
          *(float *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240FB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,unsigned int,void mlx::core::dispatch_scatter_inds<float,unsigned int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,unsigned int *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  float v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(unsigned int *)(v20[19] + 4 * v21);
          mlx::core::array::shape(v56, v19);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * v28;
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(float *)(v33 + 4 * v37);
          if (*(float *)(v34 + 4 * v42) < v47)
            v47 = *(float *)(v34 + 4 * v42);
          *(float *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24240FE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(_DWORD *)(v35 + 4 * v43) = *(_DWORD *)(v34 + 4 * v38);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242410144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(float *)(v35 + 4 * v43) = *(float *)(v34 + 4 * v38) + *(float *)(v35 + 4 * v43);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_24241043C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v56, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v30 = 0;
        v31 = (int *)__p;
        v55 = v58 * v57;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v35 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v55 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v55 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v53 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          *(float *)(v35 + 4 * v43) = *(float *)(v34 + 4 * v38) * *(float *)(v35 + 4 * v43);
          ++v30;
        }
        while (v30 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242410734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  float v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v57, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v30 = 0;
        v31 = (int *)__p;
        v56 = v59 * v58;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v35 = *(_QWORD *)(*(_QWORD *)v57 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v56 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v56 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v54 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          v48 = *(float *)(v34 + 4 * v38);
          if (*(float *)(v35 + 4 * v43) > v48)
            v48 = *(float *)(v35 + 4 * v43);
          *(float *)(v35 + 4 * v43) = v48;
          ++v30;
        }
        while (v30 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_242410A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,signed char,void mlx::core::dispatch_scatter_inds<float,signed char>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,signed char *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  ldiv_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  ldiv_t v47;
  float v48;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  mlx::core::array *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  int *v61;
  uint64_t v62;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v52 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v53 = v12;
  __p = 0;
  v61 = 0;
  v62 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v61)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v61);
  }
  if (v53)
  {
    v58 = v14;
    v59 = 0;
    v55 = (v8 >> 4);
    v57 = a2;
    v50 = v5;
    v51 = a4;
    do
    {
      if ((int)v52 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v59;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v59;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(char *)(v20[19] + v21);
          v29 = (int)mlx::core::array::shape(v57, v19);
          if ((int)v28 >= 0)
            v29 = 0;
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v57 + 24) + 8 * v19) * (v29 + v28);
          ++v17;
        }
        while (v17 != v55);
      }
      if (v58)
      {
        v30 = 0;
        v31 = (int *)__p;
        v56 = v59 * v58;
        v32 = *a1;
        v33 = ((unint64_t)((char *)v61 - (_BYTE *)__p) >> 2) - 1;
        v34 = (*a1)[19];
        v54 = *(_QWORD *)v57;
        v35 = *(_QWORD *)(*(_QWORD *)v57 + 152) + 4 * v18;
        do
        {
          if ((v32[21] & 2) != 0)
          {
            v38 = v56 + (int)v30;
          }
          else
          {
            v36 = *v32;
            v37 = (unint64_t)(v32[1] - *v32) >> 2;
            v38 = 0;
            v39 = (v37 - 1);
            if ((int)v37 - 1 >= 0)
            {
              v40 = v32[3];
              v41 = v56 + v30;
              do
              {
                v42 = ldiv(v41, *(int *)(v36 + 4 * v39));
                v41 = v42.quot;
                v38 += *(_QWORD *)(v40 + 8 * v39--) * v42.rem;
              }
              while (v39 != -1);
            }
          }
          v43 = 0;
          if ((v33 & 0x80000000) == 0)
          {
            v44 = *(_QWORD *)(v54 + 24);
            v45 = v33;
            v46 = v30;
            do
            {
              v47 = ldiv(v46, v31[v45]);
              v46 = v47.quot;
              v43 += *(_QWORD *)(v44 + 8 * v45--) * v47.rem;
            }
            while (v45 != -1);
          }
          v48 = *(float *)(v34 + 4 * v38);
          if (*(float *)(v35 + 4 * v43) < v48)
            v48 = *(float *)(v35 + 4 * v43);
          *(float *)(v35 + 4 * v43) = v48;
          ++v30;
        }
        while (v30 != v58);
      }
      ++v59;
      v5 = v50;
      a4 = v51;
    }
    while (v59 != v53);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v61 = v13;
    operator delete(v13);
  }
}

void sub_242410D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) = *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242411014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(float *)(v34 + 4 * v42) = *(float *)(v33 + 4 * v37) + *(float *)(v34 + 4 * v42);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242411304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v55, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(float *)(v34 + 4 * v42) = *(float *)(v33 + 4 * v37) * *(float *)(v34 + 4 * v42);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424115F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  float v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v56, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(float *)(v33 + 4 * v37);
          if (*(float *)(v34 + 4 * v42) > v47)
            v47 = *(float *)(v34 + 4 * v42);
          *(float *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_2424118E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,int,void mlx::core::dispatch_scatter_inds<float,int>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,int *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  float v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(int *)(v20[19] + 4 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (v28 + (int)(mlx::core::array::shape(v56, v19) & ((int)v28 >> 31)));
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(float *)(v33 + 4 * v37);
          if (*(float *)(v34 + 4 * v42) < v47)
            v47 = *(float *)(v34 + 4 * v42);
          *(float *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242411BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#1}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(_DWORD *)(v34 + 4 * v42) = *(_DWORD *)(v33 + 4 * v37);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_242411EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#2}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(float *)(v34 + 4 * v42) = *(float *)(v33 + 4 * v37) + *(float *)(v34 + 4 * v42);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424121BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#3}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  mlx::core::array *v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  int *v59;
  uint64_t v60;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v50 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v51 = v12;
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v59)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v59);
  }
  if (v51)
  {
    v56 = v14;
    v57 = 0;
    v53 = (v8 >> 4);
    v55 = a2;
    v48 = v5;
    v49 = a4;
    do
    {
      if ((int)v50 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v57;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v57;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v55, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v53);
      }
      if (v56)
      {
        v29 = 0;
        v30 = (int *)__p;
        v54 = v57 * v56;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v52 = *(_QWORD *)v55;
        v34 = *(_QWORD *)(*(_QWORD *)v55 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v54 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v54 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v52 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          *(float *)(v34 + 4 * v42) = *(float *)(v33 + 4 * v37) * *(float *)(v34 + 4 * v42);
          ++v29;
        }
        while (v29 != v56);
      }
      ++v57;
      v5 = v48;
      a4 = v49;
    }
    while (v57 != v51);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v59 = v13;
    operator delete(v13);
  }
}

void sub_2424124B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#4}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  float v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v56, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(float *)(v33 + 4 * v37);
          if (*(float *)(v34 + 4 * v42) > v47)
            v47 = *(float *)(v34 + 4 * v42);
          *(float *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_2424127A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::scatter<float,long long,void mlx::core::dispatch_scatter_inds<float,long long>(mlx::core::array &,std::vector<mlx::core::array> const&,mlx::core::array const&,std::vector<int> const&,mlx::core::Scatter::ReduceType)::{lambda(float,long long *)#5}>(uint64_t **a1, mlx::core::array *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int quot;
  ldiv_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  ldiv_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  ldiv_t v46;
  float v47;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  mlx::core::array *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  int *v60;
  uint64_t v61;

  v5 = a3;
  v7 = *a3;
  v8 = a3[1] - *a3;
  v10 = **a1;
  v9 = (*a1)[1];
  v11 = ((v9 - v10) >> 2) - ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2);
  v51 = v8 >> 4;
  if ((v8 >> 4))
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 48);
  else
    v12 = 1;
  v52 = v12;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (const void *)(v10 + 4 * v11), v9, (v9 - (v10 + 4 * v11)) >> 2);
  v13 = (int *)__p;
  v14 = 1;
  if (__p != v60)
  {
    v15 = (int *)__p;
    do
    {
      v16 = *v15++;
      v14 *= v16;
    }
    while (v15 != v60);
  }
  if (v52)
  {
    v57 = v14;
    v58 = 0;
    v54 = (v8 >> 4);
    v56 = a2;
    v49 = v5;
    v50 = a4;
    do
    {
      if ((int)v51 < 1)
      {
        v18 = 0;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        do
        {
          v19 = *(int *)(*a4 + 4 * v17);
          v20 = *(uint64_t **)(*v5 + 16 * v17);
          v21 = v58;
          if ((v20[21] & 2) == 0)
          {
            v22 = *v20;
            v23 = (unint64_t)(v20[1] - *v20) >> 2;
            v21 = 0;
            v24 = (v23 - 1);
            if ((int)v23 - 1 >= 0)
            {
              v25 = v20[3];
              quot = v58;
              do
              {
                v27 = ldiv(quot, *(int *)(v22 + 4 * v24));
                quot = v27.quot;
                v21 += *(_QWORD *)(v25 + 8 * v24--) * v27.rem;
              }
              while (v24 != -1);
            }
          }
          v28 = *(_QWORD *)(v20[19] + 8 * v21);
          v18 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 8 * v19)
               * (((int)mlx::core::array::shape(v56, v19) & (unint64_t)(v28 >> 63)) + v28);
          ++v17;
        }
        while (v17 != v54);
      }
      if (v57)
      {
        v29 = 0;
        v30 = (int *)__p;
        v55 = v58 * v57;
        v31 = *a1;
        v32 = ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1;
        v33 = (*a1)[19];
        v53 = *(_QWORD *)v56;
        v34 = *(_QWORD *)(*(_QWORD *)v56 + 152) + 4 * v18;
        do
        {
          if ((v31[21] & 2) != 0)
          {
            v37 = v55 + (int)v29;
          }
          else
          {
            v35 = *v31;
            v36 = (unint64_t)(v31[1] - *v31) >> 2;
            v37 = 0;
            v38 = (v36 - 1);
            if ((int)v36 - 1 >= 0)
            {
              v39 = v31[3];
              v40 = v55 + v29;
              do
              {
                v41 = ldiv(v40, *(int *)(v35 + 4 * v38));
                v40 = v41.quot;
                v37 += *(_QWORD *)(v39 + 8 * v38--) * v41.rem;
              }
              while (v38 != -1);
            }
          }
          v42 = 0;
          if ((v32 & 0x80000000) == 0)
          {
            v43 = *(_QWORD *)(v53 + 24);
            v44 = v32;
            v45 = v29;
            do
            {
              v46 = ldiv(v45, v30[v44]);
              v45 = v46.quot;
              v42 += *(_QWORD *)(v43 + 8 * v44--) * v46.rem;
            }
            while (v44 != -1);
          }
          v47 = *(float *)(v33 + 4 * v37);
          if (*(float *)(v34 + 4 * v42) < v47)
            v47 = *(float *)(v34 + 4 * v42);
          *(float *)(v34 + 4 * v42) = v47;
          ++v29;
        }
        while (v29 != v57);
      }
      ++v58;
      v5 = v49;
      a4 = v50;
    }
    while (v58 != v52);
    v13 = (int *)__p;
  }
  if (v13)
  {
    v60 = v13;
    operator delete(v13);
  }
}

void sub_242412AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::metal::is_available(mlx::core::metal *this)
{
  return 0;
}

void mlx::core::metal::new_scoped_memory_pool(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 0;
}

void mlx::core::metal::make_task()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[metal::make_task] Cannot make GPU task without metal backend");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242412B10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::metal::make_synchronize_task()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[metal::make_synchronize_task] Cannot synchronize GPU without metal backend");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242412B60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::metal::get_active_memory(mlx::core::metal *this)
{
  return 0;
}

uint64_t mlx::core::metal::get_peak_memory(mlx::core::metal *this)
{
  return 0;
}

uint64_t mlx::core::metal::get_cache_memory(mlx::core::metal *this)
{
  return 0;
}

uint64_t mlx::core::metal::set_memory_limit(mlx::core::metal *this)
{
  return 0;
}

uint64_t mlx::core::metal::set_cache_limit(mlx::core::metal *this)
{
  return 0;
}

void mlx::core::metal::device_info(mlx::core::metal *this)
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[metal::device_info] Cannot get device info without metal backend");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_242412BE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::eval_impl@<X0>(mlx::core *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  mlx::core::metal *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t i;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  mlx::core::array *v29;
  uint64_t v30;
  uint64_t v31;
  mlx::core::array *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  BOOL is_tracer;
  uint64_t v39;
  unsigned int *v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  BOOL v73;
  _DWORD *v74;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  _QWORD *v83;
  uint64_t v84;
  void *v86;
  void *v87;
  _BOOL4 v88;
  std::logic_error *v89;
  std::logic_error *exception;
  __int128 v91;
  uint64_t v92;
  int v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100[3];
  std::__shared_weak_count *v101;
  __int128 v102;
  __int128 v103;
  int v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  void *__p[3];
  _OWORD v109[2];
  int v110;
  uint64_t v111;
  int v112;
  _OWORD v113[2];
  int v114;
  int64x2_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v116 = 0u;
  memset(&v115, 0, 32);
  memset(v113, 0, sizeof(v113));
  v114 = 1065353216;
  v6 = (mlx::core::metal *)mlx::core::default_device(a1);
  v111 = mlx::core::default_stream(v6);
  v112 = v7;
  v8 = *(_QWORD *)a1;
  v9 = *((_QWORD *)a1 + 1);
  if (*(_QWORD *)a1 != v9)
  {
    v10 = *(_QWORD *)a1;
    while (1)
    {
      if (!*(_DWORD *)(*(_QWORD *)v10 + 80))
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 64);
        if (v11)
          break;
      }
      v10 += 16;
      if (v10 == v9)
        goto LABEL_8;
    }
    v111 = *(_QWORD *)(v11 + 8);
    v112 = *(_DWORD *)(v11 + 16);
  }
LABEL_8:
  memset(v109, 0, sizeof(v109));
  v110 = 1065353216;
  memset(__p, 0, sizeof(__p));
  v12 = operator new(0x30uLL);
  v12[2] = 0;
  *v12 = &unk_25134DC60;
  v12[1] = 0;
  v12[4] = v111;
  v12[3] = &unk_25134DCB0;
  *((_DWORD *)v12 + 10) = v112;
  *(_QWORD *)&v107 = v12 + 3;
  *((_QWORD *)&v107 + 1) = v12;
  v117 = 0uLL;
  *(_QWORD *)&v105 = v8;
  *((_QWORD *)&v105 + 1) = v9;
  v106 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  mlx::core::array::array(a3, (__int128 *)__p, 0x100000000, &v107, &v105);
  *(_QWORD *)&v102 = &v105;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)&v117 = *a3;
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v109, (unint64_t *)&v117, &v117);
  mlx::core::Event::Event(&v117, &v111);
  std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__emplace_unique_impl<int &,mlx::core::Event>(v113, (unsigned int *)&v111, (uint64_t)&v117);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
  if (*((_QWORD *)&v118 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v102 = 0u;
  v103 = 0u;
  v104 = 1065353216;
  v118 = 0u;
  v119 = 0u;
  v117 = 0u;
  LODWORD(v100[0]) = 0;
  std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::emplace_back<mlx::core::array&,int>(&v117, (uint64_t)a3, v100);
  for (i = *((_QWORD *)&v119 + 1); *((_QWORD *)&v119 + 1); i = *((_QWORD *)&v119 + 1))
  {
    v23 = i + v119 - 1;
    v24 = *(_QWORD *)(*((_QWORD *)&v117 + 1) + ((v23 >> 5) & 0x7FFFFFFFFFFFFF8));
    v25 = v24 + 16 * v23;
    v28 = *(int *)(v25 + 8);
    v26 = (_DWORD *)(v25 + 8);
    v27 = v28;
    v29 = *(mlx::core::array **)(v24 + 16 * v23);
    v30 = *(_QWORD *)v29;
    v31 = *(_QWORD *)(*(_QWORD *)v29 + 176);
    if (v28 >= (*(_QWORD *)(*(_QWORD *)v29 + 184) - v31) >> 4)
    {
      if (*(_DWORD *)(v30 + 80) == 2
        && (is_tracer = mlx::core::array::is_tracer(v29), v30 = *(_QWORD *)v29, !is_tracer)
        && *(_QWORD *)(v30 + 64))
      {
        mlx::core::array::detach(v29);
      }
      else if (!*(_DWORD *)(v30 + 80))
      {
        std::deque<mlx::core::array>::push_back(&v115, v29);
        v39 = *(_QWORD *)(*(_QWORD *)v29 + 64);
        v41 = *(_DWORD *)(v39 + 8);
        v40 = (unsigned int *)(v39 + 8);
        LODWORD(v100[0]) = v41;
        v42 = std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::find<unsigned int>(v113, (unsigned int *)v100);
        if (!v42)
        {
          mlx::core::Event::Event(v100, v40);
          v42 = std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__emplace_unique_impl<int &,mlx::core::Event>(v113, v40, (uint64_t)v100);
          v61 = v101;
          if (v101)
          {
            p_shared_owners = (unint64_t *)&v101->__shared_owners_;
            do
              v63 = __ldaxr(p_shared_owners);
            while (__stlxr(v63 - 1, p_shared_owners));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
        }
        v43 = v42[3];
        v44 = v42[7] + 1;
        v42[7] = v44;
        v96 = v43;
        v97 = *((_DWORD *)v42 + 8);
        v45 = v42[6];
        *(_QWORD *)&v98 = v42[5];
        *((_QWORD *)&v98 + 1) = v45;
        if (v45)
        {
          v46 = (unint64_t *)(v45 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
          v44 = v42[7];
        }
        v99 = v44;
        v48 = *(_QWORD *)v29;
        *(_DWORD *)(v48 + 96) = v97;
        *(_QWORD *)(v48 + 88) = v96;
        std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v48 + 104, &v98);
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
        *(_QWORD *)(v48 + 120) = v99;
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = *(uint64_t **)(*(_QWORD *)v29 + 200);
        v53 = *(uint64_t **)(*(_QWORD *)v29 + 208);
        while (v52 != v53)
        {
          v92 = v42[3];
          v93 = *((_DWORD *)v42 + 8);
          v54 = v42[6];
          *(_QWORD *)&v94 = v42[5];
          *((_QWORD *)&v94 + 1) = v54;
          if (v54)
          {
            v55 = (unint64_t *)(v54 + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v95 = v42[7];
          v57 = *v52;
          *(_DWORD *)(v57 + 96) = v93;
          *(_QWORD *)(v57 + 88) = v92;
          std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v57 + 104, &v94);
          v58 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
          *(_QWORD *)(v57 + 120) = v95;
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          v52 += 2;
        }
      }
      --*((_QWORD *)&v119 + 1);
      std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::__maybe_remove_back_spare[abi:ne180100](&v117, 1);
    }
    else
    {
      *v26 = v27 + 1;
      v32 = (mlx::core::array *)(v31 + 16 * v27);
      v33 = *(_QWORD *)v32;
      v34 = *(_DWORD *)(*(_QWORD *)v32 + 80);
      if (v34 != 1)
      {
        if (v34 != 2)
        {
          if (a2)
          {
            if (mlx::core::array::is_tracer((mlx::core::array *)(v31 + 16 * v27)))
            {
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "[async_eval] Not allowed inside a graph transformation.");
              goto LABEL_98;
            }
            v33 = *(_QWORD *)v32;
          }
          v35 = *(_QWORD *)(v33 + 64);
          if (!v35)
          {
            v88 = mlx::core::array::is_tracer(v32);
            v89 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            exception = v89;
            if (!v88)
            {
              MEMORY[0x2426A8078](v89, "[eval] Attempting to eval an array without a primitive.\nIf you are compiling a function, make sure all the inputs and outputs are captured:\nhttps://ml-explore.github.io/mlx/build/html/usage/compile.html#pure-functions.\nIf you are not using compile, this may be a bug. Please file an issue here:\nhttps://github.com/ml-explore/mlx/issues.");
              __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
            }
            std::logic_error::logic_error(v89, "[eval] Attempting to eval an array during function transformations like compile or vmap is not allowed.");
LABEL_98:
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
          }
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 64) + 8) != *(_DWORD *)(v35 + 8))
          {
            v100[0] = v33;
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v109, v100, v100);
            v33 = *(_QWORD *)v32;
          }
        }
        v100[0] = v33;
        if (!std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(&v102, v100))
        {
          LODWORD(v100[0]) = 0;
          std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::emplace_back<mlx::core::array&,int>(&v117, (uint64_t)v32, v100);
          v100[0] = *(_QWORD *)v32;
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)&v102, v100, v100);
          v36 = *(unint64_t **)(*(_QWORD *)v32 + 200);
          v37 = *(unint64_t **)(*(_QWORD *)v32 + 208);
          while (v36 != v37)
          {
            v100[0] = *v36;
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)&v102, v100, v100);
            v36 += 2;
          }
        }
      }
    }
  }
  std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::~deque[abi:ne180100](&v117);
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)&v102);
  if (*((_QWORD *)&v116 + 1))
  {
    if (a2)
      v64 = 1;
    else
      v64 = 2;
    do
    {
      v65 = *(_QWORD *)(v115.i64[1] + (((unint64_t)v116 >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * v116;
      v91 = *(_OWORD *)v65;
      *(_QWORD *)v65 = 0;
      *(_QWORD *)(v65 + 8) = 0;
      std::deque<mlx::core::array>::pop_front(&v115);
      v66 = (_QWORD *)v91;
      *(_DWORD *)(v91 + 80) = v64;
      v67 = (uint64_t *)v66[25];
      v68 = (uint64_t *)v66[26];
      while (v67 != v68)
      {
        v69 = *v67;
        v67 += 2;
        *(_DWORD *)(v69 + 80) = v64;
      }
      v70 = v66[8];
      v71 = *(_DWORD *)(v70 + 8);
      v72 = *(_QWORD *)(v70 + 12);
      memset(v100, 0, sizeof(v100));
      *(_QWORD *)&v117 = v66;
      v73 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v109, (unint64_t *)&v117) != 0;
      v74 = (_DWORD *)(*(_QWORD *)(v91 + 64) + 12);
      *(_QWORD *)&v117 = 1;
      v75 = mlx::core::operator==(v74, &v117);
      if (v75)
      {
        if ((mlx::core::metal::is_available((mlx::core::metal *)v75) & 1) != 0)
        {
          v91 = 0uLL;
          mlx::core::metal::make_task();
        }
        v86 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](v86, "Metal GPU is not available.");
        __cxa_throw(v86, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      v102 = v91;
      v91 = 0uLL;
      LODWORD(v103) = v71;
      *(_QWORD *)((char *)&v103 + 4) = v72;
      BYTE12(v103) = v73;
      v76 = *(_QWORD *)(*((_QWORD *)mlx::core::scheduler::scheduler((mlx::core::scheduler *)v75) + 1) + 8 * v71);
      std::mutex::lock((std::mutex *)v76);
      if (*(_BYTE *)(v76 + 160))
      {
        v87 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x2426A8078](v87, "Cannot enqueue work after stream is stopped.");
        __cxa_throw(v87, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      v77 = *(_QWORD *)(v76 + 72);
      v78 = *(_QWORD *)(v76 + 80);
      v79 = 16 * (v78 - v77) - 1;
      if (v78 == v77)
        v79 = 0;
      if (v79 == *(_QWORD *)(v76 + 104) + *(_QWORD *)(v76 + 96))
      {
        std::deque<std::function<void ()(void)>>::__add_back_capacity((_QWORD *)(v76 + 64));
        v77 = *(_QWORD *)(v76 + 72);
        v78 = *(_QWORD *)(v76 + 80);
      }
      if (v78 == v77)
      {
        v81 = 0;
      }
      else
      {
        v80 = *(_QWORD *)(v76 + 104) + *(_QWORD *)(v76 + 96);
        v81 = *(_QWORD *)(v77 + ((v80 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v80 & 0x7F);
      }
      v82 = v102;
      v117 = v102;
      v102 = 0uLL;
      *(_QWORD *)((char *)&v118 + 5) = *(_QWORD *)((char *)&v103 + 5);
      *(_QWORD *)&v118 = v103;
      *(_QWORD *)(v81 + 24) = 0;
      v83 = operator new(0x28uLL);
      *v83 = &off_25134DD28;
      v83[1] = v82;
      v117 = 0uLL;
      v84 = v118;
      v83[2] = *((_QWORD *)&v82 + 1);
      v83[3] = v84;
      *(_QWORD *)((char *)v83 + 29) = *(_QWORD *)((char *)&v118 + 5);
      *(_QWORD *)(v81 + 24) = v83;
      mlx::core::array::~array((mlx::core::array *)&v117);
      ++*(_QWORD *)(v76 + 104);
      std::mutex::unlock((std::mutex *)v76);
      std::condition_variable::notify_one((std::condition_variable *)(v76 + 112));
      mlx::core::array::~array((mlx::core::array *)&v102);
      *(_QWORD *)&v117 = v100;
      std::vector<std::shared_future<void>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
      mlx::core::array::~array((mlx::core::array *)&v91);
    }
    while (*((_QWORD *)&v116 + 1));
  }
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)v109);
  std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::~__hash_table((uint64_t)v113);
  return std::deque<mlx::core::array>::~deque[abi:ne180100](&v115);
}

void sub_2424135B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, mlx::core::array *a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;
  uint64_t v46;

  __cxa_free_exception(v45);
  std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::~deque[abi:ne180100]((_QWORD *)(v46 - 160));
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)&a31);
  mlx::core::array::~array(a10);
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::~__hash_table(v46 - 256);
  std::deque<mlx::core::array>::~deque[abi:ne180100]((_QWORD *)(v46 - 208));
  _Unwind_Resume(a1);
}

void mlx::core::async_eval(__int128 *a1)
{
  __int128 v1;
  uint64_t v2;
  _QWORD v3[2];
  void **v4;

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  mlx::core::eval_impl((mlx::core *)&v1, 1, v3);
  mlx::core::array::~array((mlx::core::array *)v3);
  v4 = (void **)&v1;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_2424137CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(v9 - 24) = &a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 24));
  _Unwind_Resume(a1);
}

void mlx::core::eval(__int128 *a1)
{
  __int128 v1;
  uint64_t v2;
  _QWORD v3[2];
  void **v4;

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  mlx::core::eval_impl((mlx::core *)&v1, 0, v3);
  mlx::core::Event::wait((mlx::core::Event *)(v3[0] + 88));
  mlx::core::array::~array((mlx::core::array *)v3);
  v4 = (void **)&v1;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_242413854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  mlx::core::array::~array((mlx::core::array *)&a12);
  *(_QWORD *)(v12 - 24) = &a9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 24));
  _Unwind_Resume(a1);
}

void mlx::core::vjp(mlx::core *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  mlx::core *v10;
  uint64_t v11;
  mlx::core::metal *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int v20;
  const void ***v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  size_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  mlx::core *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char **v54;
  uint64_t v55;
  mlx::core *v56;
  uint64_t v57;
  mlx::core::metal *v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  mlx::core::array *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  void *v69;
  char *v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  int v77;
  char **v78;
  char **v79;
  uint64_t v80;
  mlx::core *v81;
  uint64_t *v82;
  uint64_t *v83;
  _QWORD *v84;
  char **v85;
  int *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  mlx::core::array *v90;
  char **v91;
  char *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  _QWORD *v97;
  uint64_t v98;
  mlx::core *v99;
  uint64_t v100;
  mlx::core::metal *v101;
  unsigned int v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  std::logic_error *v109;
  _QWORD *v110;
  _QWORD *v111;
  std::logic_error *exception;
  uint64_t v114;
  __int128 v115;
  char *v116;
  unint64_t v117;
  char *v118[3];
  char **v119;
  char **v120;
  void *__p[2];
  char *v122;
  _QWORD v123[2];
  mlx::core::array *v124;
  mlx::core::array *v125;
  uint64_t v126;
  _BYTE v127[32];
  int v128;
  _OWORD v129[2];
  int v130;
  void *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  _QWORD v136[2];
  char *v137;
  char *v138;
  uint64_t v139;
  char **v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  int v144;
  _QWORD v145[3];
  _QWORD *v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  ++mlx::core::detail::InTracing::tracing_counter;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v7)
  {
    do
    {
      v8 = *v6;
      v9 = *(_QWORD *)(*v6 + 64);
      if (v9)
      {
        v10 = *(mlx::core **)(v9 + 8);
        v11 = *(unsigned int *)(v9 + 16);
      }
      else
      {
        v12 = (mlx::core::metal *)mlx::core::default_device(a1);
        v10 = (mlx::core *)mlx::core::default_stream(v12);
        v11 = v13;
        v8 = *v6;
      }
      v14 = v6[1];
      v136[0] = v8;
      v136[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      mlx::core::copy(v136, v10, v11 | 0x100000000, v129);
      std::vector<mlx::core::array>::push_back[abi:ne180100](&v137, (uint64_t)v129);
      mlx::core::array::~array((mlx::core::array *)v129);
      mlx::core::array::~array((mlx::core::array *)v136);
      *(_BYTE *)(*((_QWORD *)v138 - 2) + 128) = 1;
      v6 += 2;
    }
    while (v6 != v7);
  }
  v17 = *((_QWORD *)a1 + 3);
  if (!v17)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(char **__return_ptr, uint64_t, char **))(*(_QWORD *)v17 + 48))(&v134, v17, &v137);
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v18 = v134;
  if (v135 != v134)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (const void ***)&v18[16 * v19];
      v22 = (*v21)[8];
      if (!v22
      {
        if (v20 >= (unint64_t)((uint64_t)(a3[1] - *a3) >> 4))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v129);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"[vjp] Number of outputs to compute gradients for (", 50);
          v110 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)") does not match number of cotangents (", 39);
          v111 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)").", 2);
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v129 + 8, v127);
          std::logic_error::logic_error(exception, (const std::string *)v127);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
        }
        v23 = *(_QWORD *)(*a3 + 16 * v20);
        v24 = **v21;
        v25 = (_BYTE *)(*v21)[1] - v24;
        if (v25 != *(_QWORD *)(v23 + 8) - *(_QWORD *)v23 || memcmp(v24, *(const void **)v23, v25))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v129);
          v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"[vjp] Output shape ", 19);
          v106 = mlx::core::operator<<(v105, *v21);
          v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)" does not match cotangent shape ", 32);
          v108 = mlx::core::operator<<(v107, *(_QWORD **)(*a3 + 16 * v20));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)".", 1);
          if (v135 - v134 == 16 && (*v21)[6] == (const void *)1)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)" If you are using grad your function must return a scalar.", 58);
          v109 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v129 + 8, v127);
          std::logic_error::logic_error(v109, (const std::string *)v127);
          v109->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(v109, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
        }
        v26 = v132;
        if (v132 >= v133)
        {
          v28 = (v132 - (_BYTE *)v131) >> 3;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = v133 - (_BYTE *)v131;
          if ((v133 - (_BYTE *)v131) >> 2 > v29)
            v29 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v133, v31);
          v34 = &v32[8 * v28];
          *(_DWORD *)v34 = v19;
          *((_DWORD *)v34 + 1) = v20;
          v36 = (char *)v131;
          v35 = v132;
          v37 = v34;
          if (v132 != v131)
          {
            do
            {
              v38 = *((_QWORD *)v35 - 1);
              v35 -= 8;
              *((_QWORD *)v37 - 1) = v38;
              v37 -= 8;
            }
            while (v35 != v36);
            v35 = (char *)v131;
          }
          v27 = v34 + 8;
          v131 = v37;
          v132 = v34 + 8;
          v133 = &v32[8 * v33];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_DWORD *)v132 = v19;
          *((_DWORD *)v26 + 1) = v20;
          v27 = v26 + 8;
        }
        v132 = v27;
        ++v20;
      }
      ++v19;
      v18 = v134;
    }
    while (v19 < (v135 - v134) >> 4);
  }
  memset(v129, 0, sizeof(v129));
  v130 = 1065353216;
  memset(v127, 0, sizeof(v127));
  v128 = 1065353216;
  v39 = v137;
  v40 = v138;
  while (v39 != v40)
  {
    v41 = *(_QWORD *)v39;
    *(_BYTE *)(v41 + 128) = 0;
    *(_QWORD *)&v142 = v41;
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v127, (unint64_t *)&v142, &v142);
    *(_QWORD *)&v142 = *(_QWORD *)v39;
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v129, (unint64_t *)&v142, &v142);
    v39 += 16;
  }
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v146 = 0;
  v42 = operator new(0x28uLL);
  *v42 = &off_25134DDA8;
  v42[1] = v129;
  v42[2] = v145;
  v42[3] = v127;
  v42[4] = &v124;
  *((_QWORD *)&v143 + 1) = v42;
  std::__function::__value_func<void ()(mlx::core::array &)>::swap[abi:ne180100](&v142, v145);
  v43 = (mlx::core *)*((_QWORD *)&v143 + 1);
  if (*((__int128 **)&v143 + 1) == &v142)
  {
    v44 = 4;
    v43 = (mlx::core *)&v142;
    goto LABEL_39;
  }
  if (*((_QWORD *)&v143 + 1))
  {
    v44 = 5;
LABEL_39:
    v43 = (mlx::core *)(*(uint64_t (**)(void))(*(_QWORD *)v43 + 8 * v44))();
  }
  v45 = v134;
  v46 = v135;
  while (v45 != v46)
  {
    v47 = *((_QWORD *)v45 + 1);
    *(_QWORD *)&v142 = *(_QWORD *)v45;
    *((_QWORD *)&v142 + 1) = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    if (!v146)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, __int128 *))(*v146 + 48))(v146, &v142);
    mlx::core::array::~array((mlx::core::array *)&v142);
    v45 += 16;
  }
  v142 = 0u;
  v143 = 0u;
  v144 = 1065353216;
  v50 = (uint64_t *)v131;
  v51 = v132;
  if (v131 != v132)
  {
    do
    {
      v52 = *v50;
      v53 = &v134[*v50 << 32 >> 28];
      v54 = *(char ***)v53;
      v55 = *(_QWORD *)(*(_QWORD *)v53 + 64);
      if (v55)
      {
        v56 = *(mlx::core **)(v55 + 8);
        v57 = *(unsigned int *)(v55 + 16);
      }
      else
      {
        v58 = (mlx::core::metal *)mlx::core::default_device(v43);
        v56 = (mlx::core *)mlx::core::default_stream(v58);
        v57 = v59;
        v54 = *(char ***)v53;
      }
      v60 = (_QWORD *)(*a3 + 16 * (v52 >> 32));
      v123[0] = *v60;
      v61 = v60[1];
      v123[1] = v61;
      if (v61)
      {
        v62 = (unint64_t *)(v61 + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      mlx::core::astype(v123, *(_QWORD *)(*(_QWORD *)v53 + 56), v56, v57 | 0x100000000, __p);
      v140 = v54;
      v141 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,mlx::core::array>>((uint64_t)&v142, (unint64_t *)&v140, (uint64_t)&v140);
      mlx::core::array::~array((mlx::core::array *)&v141);
      mlx::core::array::~array((mlx::core::array *)__p);
      mlx::core::array::~array((mlx::core::array *)v123);
      ++v50;
    }
    while (v50 != (uint64_t *)v51);
  }
  v64 = v125;
  while (v64 != v124)
  {
    __p[0] = 0;
    __p[1] = 0;
    v122 = 0;
    v65 = *((_QWORD *)v64 - 2);
    v64 = (mlx::core::array *)((char *)v64 - 16);
    v66 = *(_QWORD *)(v65 + 176);
    if (*(_QWORD *)(v65 + 184) != v66)
    {
      v67 = 0;
      do
      {
        v140 = *(char ***)(v66 + 16 * v67);
        if (std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v127, (unint64_t *)&v140))
        {
          v68 = (char *)__p[1];
          if (__p[1] >= v122)
          {
            v70 = (char *)__p[0];
            v71 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v73 = v122 - (char *)__p[0];
            if ((v122 - (char *)__p[0]) >> 1 > v72)
              v72 = v73 >> 1;
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
              v74 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v74 = v72;
            if (v74)
            {
              v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v122, v74);
              v70 = (char *)__p[0];
              v68 = (char *)__p[1];
            }
            else
            {
              v75 = 0;
            }
            v76 = &v75[4 * v71];
            *(_DWORD *)v76 = v67;
            v69 = v76 + 4;
            while (v68 != v70)
            {
              v77 = *((_DWORD *)v68 - 1);
              v68 -= 4;
              *((_DWORD *)v76 - 1) = v77;
              v76 -= 4;
            }
            __p[0] = v76;
            __p[1] = v69;
            v122 = &v75[4 * v74];
            if (v70)
              operator delete(v70);
          }
          else
          {
            *(_DWORD *)__p[1] = v67;
            v69 = v68 + 4;
          }
          __p[1] = v69;
        }
        ++v67;
        v66 = *(_QWORD *)(*(_QWORD *)v64 + 176);
      }
      while (v67 < (*(_QWORD *)(*(_QWORD *)v64 + 184) - v66) >> 4);
    }
    mlx::core::array::outputs(v64, (uint64_t)&v119);
    v78 = v119;
    v79 = v120;
    while (v78 != v79)
    {
      v118[0] = *v78;
      if (std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(&v142, (unint64_t *)v118))
      {
        v80 = *(_QWORD *)(*(_QWORD *)v64 + 64);
        v81 = *(mlx::core **)(v80 + 8);
        v114 = *(unsigned int *)(v80 + 16);
        memset(v118, 0, sizeof(v118));
        v83 = (uint64_t *)v119;
        v82 = (uint64_t *)v120;
        if (v119 != v120)
        {
          do
          {
            v140 = (char **)*v83;
            v84 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(&v142, (unint64_t *)&v140);
            if (v84)
            {
              std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::remove(&v142, v84, (uint64_t)&v140);
              v85 = v140;
              v140 = 0;
              *(_QWORD *)&v115 = v85;
              BYTE9(v115) = 1;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v140, 0);
              std::vector<mlx::core::array>::push_back[abi:ne180100](v118, v85 + 3);
              if (v85)
              {
                mlx::core::array::~array((mlx::core::array *)(v85 + 3));
                operator delete(v85);
              }
            }
            else
            {
              mlx::core::zeros_like(v83, v81, v114 | 0x100000000, &v140);
              std::vector<mlx::core::array>::push_back[abi:ne180100](v118, (uint64_t)&v140);
              mlx::core::array::~array((mlx::core::array *)&v140);
            }
            v83 += 2;
          }
          while (v83 != v82);
        }
        (*(void (**)(char ***__return_ptr, _QWORD, uint64_t, char **, void **, char ***))(**(_QWORD **)(*(_QWORD *)v64 + 64)
                                                                                                  + 24))(&v140, *(_QWORD *)(*(_QWORD *)v64 + 64), *(_QWORD *)v64 + 176, v118, __p, &v119);
        v86 = (int *)__p[0];
        if (__p[1] != __p[0])
        {
          v87 = 0;
          do
          {
            v117 = 0;
            v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v64 + 176) + 16 * v86[v87]);
            v88 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(&v142, &v117);
            if (v88)
            {
              v89 = (uint64_t)(v88 + 3);
              mlx::core::add(v88 + 3, &v140[2 * v87], v81, v114 | 0x100000000, &v115);
              std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v89, &v115);
              v90 = (mlx::core::array *)&v115;
            }
            else
            {
              v91 = &v140[2 * v87];
              *(_QWORD *)&v115 = v117;
              *((_QWORD *)&v115 + 1) = *v91;
              v92 = v91[1];
              v116 = v92;
              if (v92)
              {
                v93 = (unint64_t *)(v92 + 8);
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,mlx::core::array>>((uint64_t)&v142, (unint64_t *)&v115, (uint64_t)&v115);
              v90 = (mlx::core::array *)((char *)&v115 + 8);
            }
            mlx::core::array::~array(v90);
            ++v87;
            v86 = (int *)__p[0];
          }
          while (v87 < ((char *)__p[1] - (char *)__p[0]) >> 2);
        }
        *(_QWORD *)&v115 = &v140;
        std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
        v140 = v118;
        std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
        break;
      }
      v78 += 2;
    }
    v140 = (char **)&v119;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v140 = 0;
  v141 = 0uLL;
  v96 = (uint64_t *)v137;
  v95 = (uint64_t *)v138;
  if (v137 != v138)
  {
    do
    {
      __p[0] = (void *)*v96;
      v97 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(&v142, (unint64_t *)__p);
      if (v97)
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&v140, v97 + 3);
      }
      else
      {
        v98 = *(_QWORD *)(*v96 + 64);
        if (v98)
        {
          v99 = *(mlx::core **)(v98 + 8);
          v100 = *(unsigned int *)(v98 + 16);
        }
        else
        {
          v101 = (mlx::core::metal *)mlx::core::default_device(0);
          v99 = (mlx::core *)mlx::core::default_stream(v101);
          v100 = v102;
        }
        mlx::core::zeros_like(v96, v99, v100 | 0x100000000, __p);
        std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&v140, (uint64_t)__p);
        mlx::core::array::~array((mlx::core::array *)__p);
      }
      v96 += 2;
    }
    while (v96 != v95);
  }
  std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<mlx::core::array>&,0>(a4, (_QWORD **)&v134, &v140);
  __p[0] = &v140;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::~__hash_table((uint64_t)&v142);
  v103 = v146;
  if (v146 == v145)
  {
    v104 = 4;
    v103 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_113;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_113:
  *(_QWORD *)&v142 = &v124;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)v127);
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)v129);
  if (v131)
  {
    v132 = (char *)v131;
    operator delete(v131);
  }
  *(_QWORD *)&v129[0] = &v134;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  *(_QWORD *)&v129[0] = &v137;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  --mlx::core::detail::InTracing::tracing_counter;
}

void sub_2424143D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, mlx::core::array *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  uint64_t a73;
  void *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((v74 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a40);
      if (a72)
      {
        a73 = (uint64_t)a72;
        operator delete(a72);
      }
      a40 = (uint64_t)&STACK[0x208];
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
      a40 = v76 - 224;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
      --*(_DWORD *)(v75 + 2820);
      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v73);
  goto LABEL_6;
}

uint64_t std::vector<mlx::core::array>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  char *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t v24;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    v23 = v15;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v8 = v14 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v22.i64[1] = (uint64_t)(v14 + 16);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (char *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v15;
    v23 = v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = v7 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  a1[1] = v8;
  return result;
}

_QWORD *mlx::core::array::outputs@<X0>(mlx::core::array *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v4 = *(_QWORD *)this;
  v5 = *(unsigned int *)(*(_QWORD *)this + 224);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<mlx::core::array>::reserve((char **)a2, ((uint64_t)(*(_QWORD *)(v4 + 208) - *(_QWORD *)(v4 + 200)) >> 4) + 1);
  std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((uint64_t *)a2, *(_QWORD *)(a2 + 8), *(uint64_t **)(*(_QWORD *)this + 200), (uint64_t *)(*(_QWORD *)(*(_QWORD *)this + 200) + 16 * v5), v5);
  std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)a2, this);
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)this + 200) + 16 * v5);
  return std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>((uint64_t *)a2, *(_QWORD *)(a2 + 8), v6, *(uint64_t **)(*(_QWORD *)this + 208), (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 208) - (_QWORD)v6) >> 4);
}

void sub_242414800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<mlx::core::array>::push_back[abi:ne180100](char **a1, _QWORD *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  uint64_t v30;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v30 = result;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v15);
    else
      v16 = 0;
    v17 = &v16[16 * v12];
    v18 = &v16[16 * v15];
    v29 = v18;
    *(_QWORD *)v17 = *a2;
    v19 = a2[1];
    *((_QWORD *)v17 + 1) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v11 = v17 + 16;
    v28.i64[1] = (uint64_t)(v17 + 16);
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v25 = vdupq_n_s64((unint64_t)v22);
    }
    else
    {
      do
      {
        v24 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v17 - 1) = v24;
        v17 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v25 = *(int64x2_t *)a1;
      v11 = (char *)v28.i64[1];
      v18 = v29;
    }
    *a1 = v17;
    a1[1] = v11;
    v28 = v25;
    v26 = a1[2];
    a1[2] = v18;
    v29 = v26;
    v27 = v25.i64[0];
    result = std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    *(_QWORD *)v7 = *a2;
    v8 = a2[1];
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

_QWORD *mlx::core::vjp@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  void ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  void **v22;
  unint64_t *v23;
  unint64_t v24;
  void ***v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *result;
  uint64_t v38;
  void **v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD v45[3];
  uint64_t *v46;
  void ***v47;
  char v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  _QWORD *v53;
  void **v54[3];
  void ***v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v56, a1);
  v7 = (uint64_t)v57;
  if (!v57)
    goto LABEL_4;
  if (v57 != v56)
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*v57 + 16))(v57);
LABEL_4:
    v53 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v53 = v52;
  (*(void (**)(_QWORD *, _QWORD *))(v56[0] + 24))(v56, v52);
LABEL_6:
  v55 = 0;
  v8 = (void ***)operator new(0x28uLL);
  *v8 = (void **)&off_25134DE38;
  v9 = (uint64_t)v53;
  if (!v53)
  {
LABEL_9:
    v8[4] = (void **)v9;
    goto LABEL_11;
  }
  if (v53 != v52)
  {
    v9 = (*(uint64_t (**)(void))(*v53 + 16))();
    goto LABEL_9;
  }
  v8[4] = (void **)(v8 + 1);
  (*(void (**)(_QWORD *))(v52[0] + 24))(v52);
LABEL_11:
  v55 = v8;
  v11 = *a2;
  v10 = a2[1];
  v50 = *a2;
  v51 = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v39 = (void **)&v42;
  LOBYTE(v40) = 0;
  v14 = operator new(0x10uLL);
  v42 = v14;
  v43 = v14;
  v44 = v14 + 2;
  v15 = v51;
  *v14 = v11;
  v14[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v43 = v14 + 2;
  v19 = *a3;
  v18 = (unint64_t *)a3[1];
  v49[0] = v19;
  v49[1] = v18;
  if (v18)
  {
    v20 = v18 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v47 = &v39;
  v48 = 0;
  v22 = (void **)operator new(0x10uLL);
  v39 = v22;
  v41 = (char *)(v22 + 2);
  *v22 = v19;
  v22[1] = v18;
  if (v18)
  {
    v23 = v18 + 1;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v40 = (char *)(v22 + 2);
  mlx::core::vjp((mlx::core *)v54, (uint64_t)&v42, &v39, (uint64_t)v45);
  v47 = &v39;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  mlx::core::array::~array((mlx::core::array *)v49);
  v39 = (void **)&v42;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)&v50);
  v25 = v55;
  if (v55 == v54)
  {
    v26 = 4;
    v25 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_28;
    v26 = 5;
  }
  ((void (*)(void))(*v25)[v26])();
LABEL_28:
  v27 = v53;
  if (v53 == v52)
  {
    v28 = 4;
    v27 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_33;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_33:
  v29 = v46;
  v30 = *(_QWORD *)(v45[0] + 8);
  *a4 = *(_QWORD *)v45[0];
  a4[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v34 = *v29;
  v33 = v29[1];
  a4[2] = v34;
  a4[3] = v33;
  if (v33)
  {
    v35 = (unint64_t *)(v33 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v54[0] = (void **)&v46;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v54);
  v54[0] = (void **)v45;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v54);
  result = v57;
  if (v57 == v56)
  {
    v38 = 4;
    result = v56;
  }
  else
  {
    if (!v57)
      return result;
    v38 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v38))();
}

void sub_242414CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char *a31)
{
  void *v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  operator delete(v31);
  v34 = a31;
  if (a31 == &a28)
  {
    v35 = 4;
    v34 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_6:
  v36 = *(_QWORD **)(v32 - 64);
  if (v36 == (_QWORD *)(v32 - 88))
  {
    v37 = 4;
    v36 = (_QWORD *)(v32 - 88);
  }
  else
  {
    if (!v36)
      goto LABEL_11;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_11:
  _Unwind_Resume(a1);
}

void sub_242414D98()
{
  JUMPOUT(0x242414D90);
}

void mlx::core::jvp(uint64_t a1@<X0>, const void ****a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void ***v5;
  const void ***v6;
  unint64_t v7;
  const void ***v8;
  uint64_t v11;
  const void ***v12;
  _BYTE *v13;
  size_t v14;
  _BYTE *v15;
  mlx::core *v16;
  const void **v17;
  unsigned int *v18;
  mlx::core *v19;
  uint64_t v20;
  mlx::core::metal *v21;
  unsigned int v22;
  const void **v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  mlx::core::array *v44;
  mlx::core::array *i;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  void **v60;
  unint64_t v61;
  void **v62;
  char *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *j;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  mlx::core *v70;
  uint64_t v71;
  mlx::core::metal *v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  std::logic_error *v76;
  std::logic_error *exception;
  uint64_t v78;
  void ***v79;
  _QWORD v80[2];
  void **v81[3];
  void **v82;
  void **v83;
  void **v84[3];
  void *__p;
  char *v86;
  char *v87;
  mlx::core::array *v88;
  mlx::core::array *v89;
  uint64_t v90;
  _OWORD v91[2];
  int v92;
  _OWORD v93[2];
  int v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD v97[2];
  char *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  int v103;
  _QWORD v104[3];
  _QWORD *v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  ++mlx::core::detail::InTracing::tracing_counter;
  v6 = *a2;
  v5 = a2[1];
  v7 = ((char *)v5 - (char *)*a2) >> 4;
  v8 = *(const void ****)a3;
  if (v7 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[jvp] Number of inputs does not match number of tangents.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (v5 == v6)
  {
    v98 = 0;
    v99 = 0;
    v100 = 0;
  }
  else
  {
    if (v7 <= 1)
      v11 = 1;
    else
      v11 = ((char *)v5 - (char *)*a2) >> 4;
    v12 = *a2;
    do
    {
      v13 = **v12;
      v14 = (_BYTE *)(*v12)[1] - v13;
      v15 = **v8;
      if (v14 != (_BYTE *)(*v8)[1] - v15 || (v16 = (mlx::core *)memcmp(v13, v15, v14), (_DWORD)v16))
      {
        v76 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v76, "[jvp] Input shape does not match shape of tangent.");
        v76->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v76, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      v8 += 2;
      v12 += 2;
      --v11;
    }
    while (v11);
    v98 = 0;
    v99 = 0;
    v100 = 0;
    do
    {
      v17 = *v6;
      v18 = (unsigned int *)(*v6)[8];
      if (v18)
      {
        v19 = (mlx::core *)*((_QWORD *)v18 + 1);
        v20 = v18[4];
      }
      else
      {
        v21 = (mlx::core::metal *)mlx::core::default_device(v16);
        v19 = (mlx::core *)mlx::core::default_stream(v21);
        v20 = v22;
        v17 = *v6;
      }
      v23 = v6[1];
      v97[0] = v17;
      v97[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 1);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      mlx::core::copy(v97, v19, v20 | 0x100000000, v93);
      std::vector<mlx::core::array>::push_back[abi:ne180100](&v98, (uint64_t)v93);
      mlx::core::array::~array((mlx::core::array *)v93);
      mlx::core::array::~array((mlx::core::array *)v97);
      *(_BYTE *)(*((_QWORD *)v99 - 2) + 128) = 1;
      v6 += 2;
    }
    while (v6 != v5);
  }
  v26 = *(_QWORD *)(a1 + 24);
  if (!v26)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD **__return_ptr, uint64_t, char **))(*(_QWORD *)v26 + 48))(&v95, v26, &v98);
  memset(v93, 0, sizeof(v93));
  v94 = 1065353216;
  memset(v91, 0, sizeof(v91));
  v92 = 1065353216;
  v27 = v98;
  v28 = v99;
  while (v27 != v28)
  {
    v29 = *(_QWORD *)v27;
    *(_BYTE *)(v29 + 128) = 0;
    *(_QWORD *)&v101 = v29;
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v91, (unint64_t *)&v101, &v101);
    *(_QWORD *)&v101 = *(_QWORD *)v27;
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v93, (unint64_t *)&v101, &v101);
    v27 += 16;
  }
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v105 = 0;
  v30 = operator new(0x28uLL);
  *v30 = &off_25134DEC8;
  v30[1] = v93;
  v30[2] = v104;
  v30[3] = v91;
  v30[4] = &v88;
  *((_QWORD *)&v102 + 1) = v30;
  std::__function::__value_func<void ()(mlx::core::array &)>::swap[abi:ne180100](&v101, v104);
  v31 = (__int128 *)*((_QWORD *)&v102 + 1);
  if (*((__int128 **)&v102 + 1) == &v101)
  {
    v32 = 4;
    v31 = &v101;
    goto LABEL_28;
  }
  if (*((_QWORD *)&v102 + 1))
  {
    v32 = 5;
LABEL_28:
    (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
  }
  v78 = a4;
  v33 = v95;
  v34 = v96;
  while (v33 != v34)
  {
    v35 = v33[1];
    *(_QWORD *)&v101 = *v33;
    *((_QWORD *)&v101 + 1) = v35;
    if (v35)
    {
      v36 = (unint64_t *)(v35 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    if (!v105)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, __int128 *))(*v105 + 48))(v105, &v101);
    mlx::core::array::~array((mlx::core::array *)&v101);
    v33 += 2;
  }
  v101 = 0u;
  v102 = 0u;
  v103 = 1065353216;
  v38 = v98;
  if (v99 != v98)
  {
    v39 = 0;
    do
    {
      v40 = *(_QWORD *)a3 + 16 * v39;
      __p = *(void **)&v38[16 * v39];
      v86 = *(char **)v40;
      v41 = *(char **)(v40 + 8);
      v87 = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,mlx::core::array>>((uint64_t)&v101, (unint64_t *)&__p, (uint64_t)&__p);
      mlx::core::array::~array((mlx::core::array *)&v86);
      ++v39;
      v38 = v98;
    }
    while (v39 < (v99 - v98) >> 4);
  }
  v44 = v88;
  for (i = v89; v44 != i; v44 = (mlx::core::array *)((char *)v44 + 16))
  {
    __p = 0;
    v86 = 0;
    v87 = 0;
    memset(v84, 0, sizeof(v84));
    v46 = *(_QWORD *)v44;
    v47 = *(_QWORD *)(*(_QWORD *)v44 + 176);
    if (*(_QWORD *)(*(_QWORD *)v44 + 184) != v47)
    {
      v48 = 0;
      do
      {
        v82 = *(void ***)(v47 + 16 * v48);
        v49 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(&v101, (unint64_t *)&v82);
        if (v49)
        {
          v50 = v86;
          if (v86 >= v87)
          {
            v52 = (char *)__p;
            v53 = (v86 - (_BYTE *)__p) >> 2;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v55 = v87 - (_BYTE *)__p;
            if ((v87 - (_BYTE *)__p) >> 1 > v54)
              v54 = v55 >> 1;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
              v56 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v87, v56);
              v52 = (char *)__p;
              v50 = v86;
            }
            else
            {
              v57 = 0;
            }
            v58 = &v57[4 * v53];
            *(_DWORD *)v58 = v48;
            v51 = v58 + 4;
            while (v50 != v52)
            {
              v59 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *((_DWORD *)v58 - 1) = v59;
              v58 -= 4;
            }
            __p = v58;
            v86 = v51;
            v87 = &v57[4 * v56];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *(_DWORD *)v86 = v48;
            v51 = v50 + 4;
          }
          v86 = v51;
          std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)v84, v49 + 3);
        }
        ++v48;
        v46 = *(_QWORD *)v44;
        v47 = *(_QWORD *)(*(_QWORD *)v44 + 176);
      }
      while (v48 < (*(_QWORD *)(*(_QWORD *)v44 + 184) - v47) >> 4);
    }
    (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, void ***, void **))(**(_QWORD **)(v46 + 64) + 16))(&v82, *(_QWORD *)(v46 + 64), v46 + 176, v84, &__p);
    mlx::core::array::outputs(v44, (uint64_t)v81);
    v60 = v82;
    if (v83 != v82)
    {
      v61 = 0;
      do
      {
        v62 = &v60[2 * v61];
        v79 = (void ***)v81[0][2 * v61];
        v80[0] = *v62;
        v63 = (char *)v62[1];
        v80[1] = v63;
        if (v63)
        {
          v64 = (unint64_t *)(v63 + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,mlx::core::array>>((uint64_t)&v101, (unint64_t *)&v79, (uint64_t)&v79);
        mlx::core::array::~array((mlx::core::array *)v80);
        ++v61;
        v60 = v82;
      }
      while (v61 < ((char *)v83 - (char *)v82) >> 4);
    }
    v79 = v81;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    v81[0] = (void **)&v82;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v81);
    v82 = (void **)v84;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v82);
    if (__p)
    {
      v86 = (char *)__p;
      operator delete(__p);
    }
  }
  __p = 0;
  v86 = 0;
  v87 = 0;
  v67 = v95;
  for (j = v96; v67 != j; v67 += 2)
  {
    v84[0] = (void **)*v67;
    v68 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(&v101, (unint64_t *)v84);
    if (v68)
    {
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&__p, v68 + 3);
    }
    else
    {
      v69 = *(_QWORD *)(*v67 + 64);
      if (v69)
      {
        v70 = *(mlx::core **)(v69 + 8);
        v71 = *(unsigned int *)(v69 + 16);
      }
      else
      {
        v72 = (mlx::core::metal *)mlx::core::default_device(0);
        v70 = (mlx::core *)mlx::core::default_stream(v72);
        v71 = v73;
      }
      mlx::core::zeros_like(v67, v70, v71 | 0x100000000, v84);
      std::vector<mlx::core::array>::push_back[abi:ne180100]((char **)&__p, (uint64_t)v84);
      mlx::core::array::~array((mlx::core::array *)v84);
    }
  }
  std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<mlx::core::array>&,0>(v78, &v95, (_QWORD **)&__p);
  v84[0] = &__p;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v84);
  std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::~__hash_table((uint64_t)&v101);
  v74 = v105;
  if (v105 == v104)
  {
    v75 = 4;
    v74 = v104;
    goto LABEL_85;
  }
  if (v105)
  {
    v75 = 5;
LABEL_85:
    (*(void (**)(void))(*v74 + 8 * v75))();
  }
  *(_QWORD *)&v101 = &v88;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)v91);
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)v93);
  *(_QWORD *)&v93[0] = &v95;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v93);
  *(_QWORD *)&v93[0] = &v98;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v93);
  --mlx::core::detail::InTracing::tracing_counter;
}

void sub_242415518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  --mlx::core::detail::InTracing::tracing_counter;
  _Unwind_Resume(exception_object);
}

_QWORD *mlx::core::jvp@<X0>(uint64_t a1@<X0>, const void ***a2@<X1>, const void ****a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  void ***v8;
  uint64_t v9;
  const void **v10;
  const void **v11;
  unint64_t *v12;
  unint64_t v13;
  const void ***v14;
  const void **v15;
  unint64_t *v16;
  unint64_t v17;
  const void ***v18;
  const void ***v19;
  unint64_t *v20;
  unint64_t v21;
  const void ****v22;
  unint64_t *v23;
  unint64_t v24;
  void ***v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *result;
  uint64_t v38;
  const void ****v39;
  char *v40;
  char *v41;
  const void ***v42;
  const void ***v43;
  char *v44;
  _QWORD v45[3];
  uint64_t *v46;
  void ***v47;
  char v48;
  _QWORD v49[2];
  const void **v50;
  const void **v51;
  _QWORD v52[3];
  _QWORD *v53;
  void **v54[3];
  void ***v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v56, a1);
  v7 = (uint64_t)v57;
  if (!v57)
    goto LABEL_4;
  if (v57 != v56)
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*v57 + 16))(v57);
LABEL_4:
    v53 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v53 = v52;
  (*(void (**)(_QWORD *, _QWORD *))(v56[0] + 24))(v56, v52);
LABEL_6:
  v55 = 0;
  v8 = (void ***)operator new(0x28uLL);
  *v8 = (void **)&off_25134DF48;
  v9 = (uint64_t)v53;
  if (!v53)
  {
LABEL_9:
    v8[4] = (void **)v9;
    goto LABEL_11;
  }
  if (v53 != v52)
  {
    v9 = (*(uint64_t (**)(void))(*v53 + 16))();
    goto LABEL_9;
  }
  v8[4] = (void **)(v8 + 1);
  (*(void (**)(_QWORD *))(v52[0] + 24))(v52);
LABEL_11:
  v55 = v8;
  v11 = *a2;
  v10 = a2[1];
  v50 = *a2;
  v51 = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v39 = &v42;
  LOBYTE(v40) = 0;
  v14 = (const void ***)operator new(0x10uLL);
  v42 = v14;
  v43 = v14;
  v44 = (char *)(v14 + 2);
  v15 = v51;
  *v14 = v11;
  v14[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v43 = v14 + 2;
  v19 = *a3;
  v18 = a3[1];
  v49[0] = v19;
  v49[1] = v18;
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 1);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v47 = (void ***)&v39;
  v48 = 0;
  v22 = (const void ****)operator new(0x10uLL);
  v39 = v22;
  v41 = (char *)(v22 + 2);
  *v22 = v19;
  v22[1] = v18;
  if (v18)
  {
    v23 = (unint64_t *)(v18 + 1);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v40 = (char *)(v22 + 2);
  mlx::core::jvp((uint64_t)v54, &v42, (uint64_t)&v39, (uint64_t)v45);
  v47 = (void ***)&v39;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  mlx::core::array::~array((mlx::core::array *)v49);
  v39 = &v42;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  mlx::core::array::~array((mlx::core::array *)&v50);
  v25 = v55;
  if (v55 == v54)
  {
    v26 = 4;
    v25 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_28;
    v26 = 5;
  }
  ((void (*)(void))(*v25)[v26])();
LABEL_28:
  v27 = v53;
  if (v53 == v52)
  {
    v28 = 4;
    v27 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_33;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_33:
  v29 = v46;
  v30 = *(_QWORD *)(v45[0] + 8);
  *a4 = *(_QWORD *)v45[0];
  a4[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v34 = *v29;
  v33 = v29[1];
  a4[2] = v34;
  a4[3] = v33;
  if (v33)
  {
    v35 = (unint64_t *)(v33 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v54[0] = (void **)&v46;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v54);
  v54[0] = (void **)v45;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v54);
  result = v57;
  if (v57 == v56)
  {
    v38 = 4;
    result = v56;
  }
  else
  {
    if (!v57)
      return result;
    v38 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v38))();
}

void sub_2424159F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char *a31)
{
  void *v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  operator delete(v31);
  v34 = a31;
  if (a31 == &a28)
  {
    v35 = 4;
    v34 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_6:
  v36 = *(_QWORD **)(v32 - 64);
  if (v36 == (_QWORD *)(v32 - 88))
  {
    v37 = 4;
    v36 = (_QWORD *)(v32 - 88);
  }
  else
  {
    if (!v36)
      goto LABEL_11;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_11:
  _Unwind_Resume(a1);
}

void sub_242415AF0()
{
  JUMPOUT(0x242415AE8);
}

_QWORD *mlx::core::value_and_grad@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  std::logic_error *exception;
  _QWORD v11[3];
  _QWORD *v12;
  void *__p;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[grad] Must specify at least one argument.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v11, a1);
  __p = 0;
  v14 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x40uLL);
  *v5 = &off_25134DFC8;
  v6 = v5 + 1;
  v7 = (uint64_t)v12;
  if (!v12)
    goto LABEL_5;
  if (v12 != v11)
  {
    v7 = (*(uint64_t (**)(void))(*v12 + 16))();
LABEL_5:
    v5[4] = v7;
    goto LABEL_7;
  }
  v5[4] = v6;
  (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v6);
LABEL_7:
  v5[5] = 0;
  v5[6] = 0;
  v5[7] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v5 + 5, __p, (uint64_t)v14, (v14 - (_BYTE *)__p) >> 2);
  *(_QWORD *)(a3 + 24) = v5;
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  result = v12;
  if (v12 == v11)
  {
    v9 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_242415C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::~$_0(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void mlx::core::detail::vmap_trace(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  mlx::core::array *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  const void *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  std::logic_error *v31;
  std::logic_error *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::logic_error *v35;
  std::logic_error *exception;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  void *__p[3];
  void **v41[2];
  std::string v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void **v46;

  ++mlx::core::detail::InTracing::tracing_counter;
  v5 = *a2;
  v6 = a2[1];
  if ((uint64_t)(a3[1] - *a3) >> 2 != (v6 - *a2) >> 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[vmap] The number of in axes must match the number of inputs.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  if (v6 == v5)
    goto LABEL_32;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = *(int *)(*a3 + 4 * v11);
    if ((_DWORD)v13 != -1)
    {
      v14 = (mlx::core::array *)(v5 + v10);
      v15 = *(_QWORD *)(*(_QWORD *)(v5 + v10) + 8) - **(_QWORD **)(v5 + v10);
      if (!v15)
      {
        v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v32, "[vmap] Cannot vmap an input with zero dimensions.");
        v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v32, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      if (v13 > v15 >> 2)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"[vmap] Axis ", 12);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" invalid for input with ", 24);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" dimensions.", 12);
        v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v44, &v42);
        std::logic_error::logic_error(v31, &v42);
        v31->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(v31, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
      }
      v12 = (int)mlx::core::array::shape(v14, v13);
      v5 = *a2;
      v6 = a2[1];
    }
    ++v11;
    v10 += 16;
  }
  while (v11 < (v6 - v5) >> 4);
  if (v6 == v5)
  {
LABEL_32:
    v43 = 0;
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *(_DWORD *)(*a3 + 4 * v17);
      if (v18 != -1)
      {
        if (v12 != (int)mlx::core::array::shape((mlx::core::array *)(v5 + v16), v18))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"[vmap] Inconsistent axis sizes: ", 32);
          v33 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" and ", 5);
          v34 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)".", 1);
          v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v44, &v42);
          std::logic_error::logic_error(v35, &v42);
          v35->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(v35, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
        }
        v5 = *a2;
        v6 = a2[1];
      }
      ++v17;
      v16 += 16;
    }
    while (v17 < (v6 - v5) >> 4);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    if (v6 != v5)
    {
      v19 = 0;
      do
      {
        if (*(_DWORD *)(*a3 + 4 * v19) == -1)
        {
          std::vector<mlx::core::array>::push_back[abi:ne180100](&v43, (_QWORD *)(v5 + 16 * v19));
        }
        else
        {
          v20 = *(_QWORD *)(v5 + 16 * v19);
          memset(&v42, 0, sizeof(v42));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2);
          v21 = (const void *)v42.__r_.__value_.__r.__words[0];
          v22 = v42.__r_.__value_.__r.__words[0] + 4 * *(int *)(*a3 + 4 * v19);
          v23 = v42.__r_.__value_.__l.__size_ - (v22 + 4);
          if (v42.__r_.__value_.__l.__size_ != v22 + 4)
          {
            memmove((void *)(v42.__r_.__value_.__r.__words[0] + 4 * *(int *)(*a3 + 4 * v19)), (const void *)(v22 + 4), v42.__r_.__value_.__l.__size_ - (v22 + 4));
            v21 = (const void *)v42.__r_.__value_.__r.__words[0];
          }
          v42.__r_.__value_.__l.__size_ = v22 + v23;
          memset(__p, 0, sizeof(__p));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v21, v22 + v23, (uint64_t)(v22 + v23 - (_QWORD)v21) >> 2);
          v24 = *(_QWORD *)(*(_QWORD *)(*a2 + 16 * v19) + 56);
          v39 = 0uLL;
          v38 = 0;
          v37 = 0uLL;
          mlx::core::array::array(v41, (__int128 *)__p, v24, &v39, &v37);
          v46 = (void **)&v37;
          std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v46);
          v25 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
          if (*((_QWORD *)&v39 + 1))
          {
            v26 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          std::vector<mlx::core::array>::push_back[abi:ne180100](&v43, v41);
          *(_BYTE *)(*((_QWORD *)v44 - 2) + 128) = 1;
          mlx::core::array::~array((mlx::core::array *)v41);
          if (v42.__r_.__value_.__r.__words[0])
          {
            v42.__r_.__value_.__l.__size_ = v42.__r_.__value_.__r.__words[0];
            operator delete(v42.__r_.__value_.__l.__data_);
          }
        }
        ++v19;
        v5 = *a2;
      }
      while (v19 < (a2[1] - *a2) >> 4);
    }
  }
  v28 = *(_QWORD *)(a1 + 24);
  if (!v28)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string *__return_ptr, uint64_t, char **))(*(_QWORD *)v28 + 48))(&v42, v28, &v43);
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a4, v43, v44, (v44 - v43) >> 4);
  a4[1] = v42;
  memset(&v42, 0, sizeof(v42));
  v41[0] = (void **)&v42;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v41);
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  --mlx::core::detail::InTracing::tracing_counter;
}

void sub_2424162A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a25);
      --mlx::core::detail::InTracing::tracing_counter;
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t mlx::core::detail::vmap_replace@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, char **a6@<X8>)
{
  uint64_t v10;
  unint64_t v13;
  std::string::size_type *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  mlx::core::array *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  std::string::size_type v57;
  std::string::size_type *v58;
  _DWORD *v59;
  std::string::size_type v60;
  std::string::size_type v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  mlx::core *v71;
  _QWORD *v72;
  int v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v78;
  _QWORD *v79;
  std::logic_error *v80;
  std::logic_error *exception;
  uint64_t *v82;
  _QWORD *v83;
  char **v84;
  mlx::core::array *v85;
  std::string::size_type v86;
  std::string::size_type v87;
  int v88;
  std::string v89;
  int v90;
  _QWORD v91[3];
  void *__p;
  char *v93;
  char *v94;
  char *v95[3];
  mlx::core::array *v96;
  mlx::core::array *v97;
  uint64_t v98;
  _BYTE v99[32];
  int v100;
  _BYTE v101[32];
  int v102;
  _QWORD v103[4];
  int v104;
  __int128 v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t *v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if ((uint64_t)(a5[1] - *a5) >> 2 != (a3[1] - *a3) >> 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[vmap] The number of out axes must match the number of outputs.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  memset(v103, 0, sizeof(v103));
  v104 = 1065353216;
  memset(v101, 0, sizeof(v101));
  v102 = 1065353216;
  memset(v99, 0, sizeof(v99));
  v100 = 1065353216;
  v10 = *a2;
  if (a2[1] != *a2)
  {
    v13 = 0;
    do
    {
      v14 = (std::string::size_type *)(v10 + 16 * v13);
      v15 = *v14;
      v89.__r_.__value_.__r.__words[0] = *v14;
      v16 = v14[1];
      v89.__r_.__value_.__l.__size_ = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *a4;
      v20 = *(_DWORD *)(*a4 + 4 * v13);
      if (v20 != -1)
      {
        v21 = (uint64_t *)(*a1 + 16 * v13);
        v22 = *v21;
        v109 = *v21;
        v23 = v21[1];
        v110 = v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          v20 = *(_DWORD *)(v19 + 4 * v13);
          v111 = v20;
          *(_QWORD *)&v105 = v15;
          *((_QWORD *)&v105 + 1) = v22;
          v106 = v110;
          if (v110)
          {
            v26 = (unint64_t *)(v110 + 8);
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v20 = v111;
          }
        }
        else
        {
          v111 = v20;
          *(_QWORD *)&v105 = v15;
          *((_QWORD *)&v105 + 1) = v22;
          v106 = 0;
        }
        LODWORD(v107) = v20;
        std::__hash_table<std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::pair<mlx::core::array,int>>>((uint64_t)v103, (unint64_t *)&v105, (uint64_t)&v105);
        mlx::core::array::~array((mlx::core::array *)((char *)&v105 + 8));
        mlx::core::array::~array((mlx::core::array *)&v109);
        *(_QWORD *)&v105 = v89.__r_.__value_.__r.__words[0];
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v101, (unint64_t *)&v105, &v105);
        v15 = v89.__r_.__value_.__r.__words[0];
        *(_BYTE *)(v89.__r_.__value_.__r.__words[0] + 128) = 0;
      }
      *(_QWORD *)&v105 = v15;
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v99, (unint64_t *)&v105, &v105);
      mlx::core::array::~array((mlx::core::array *)&v89);
      ++v13;
      v10 = *a2;
    }
    while (v13 < (a2[1] - *a2) >> 4);
  }
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v112 = 0;
  v28 = operator new(0x28uLL);
  v84 = a6;
  *v28 = &off_25134E0D8;
  v28[1] = v99;
  v28[2] = &v109;
  v28[3] = v101;
  v28[4] = &v96;
  v107 = v28;
  std::__function::__value_func<void ()(mlx::core::array const&)>::swap[abi:ne180100](&v105, &v109);
  v29 = (__int128 *)v107;
  if (v107 == &v105)
  {
    v30 = 4;
    v29 = &v105;
    goto LABEL_22;
  }
  if (v107)
  {
    v30 = 5;
LABEL_22:
    (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
  }
  v83 = a5;
  v32 = *a3;
  v31 = a3[1];
  while (v32 != v31)
  {
    if (*(_QWORD *)(*(_QWORD *)v32 + 64))
    {
      if (!v112)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t *, uint64_t))(*v112 + 48))(v112, v32);
    }
    v32 += 16;
  }
  v82 = a3;
  v33 = v96;
  v85 = v97;
  if (v96 == v97)
    goto LABEL_81;
  do
  {
    memset(v95, 0, sizeof(v95));
    __p = 0;
    v93 = 0;
    v94 = 0;
    v34 = *(_QWORD *)v33;
    v35 = *(_QWORD **)(*(_QWORD *)v33 + 176);
    v36 = *(_QWORD **)(*(_QWORD *)v33 + 184);
    if (v35 == v36)
      goto LABEL_65;
    do
    {
      *(_QWORD *)&v105 = *v35;
      v37 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v103, (unint64_t *)&v105);
      v38 = v37;
      if (v37)
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](v95, v37 + 3);
        v39 = v93;
        if (v93 < v94)
        {
          *(_DWORD *)v93 = *((_DWORD *)v38 + 10);
          v40 = v39 + 4;
LABEL_36:
          v42 = v40;
          goto LABEL_63;
        }
        v43 = (char *)__p;
        v44 = (v93 - (_BYTE *)__p) >> 2;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v46 = v94 - (_BYTE *)__p;
        if ((v94 - (_BYTE *)__p) >> 1 > v45)
          v45 = v46 >> 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v94, v47);
          v43 = (char *)__p;
          v39 = v93;
        }
        else
        {
          v48 = 0;
        }
        v52 = &v48[4 * v44];
        *(_DWORD *)v52 = *((_DWORD *)v38 + 10);
        v42 = v52 + 4;
        while (v39 != v43)
        {
          v53 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v52 - 1) = v53;
          v52 -= 4;
        }
      }
      else
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](v95, v35);
        v41 = v93;
        if (v93 < v94)
        {
          *(_DWORD *)v93 = -1;
          v40 = v41 + 4;
          goto LABEL_36;
        }
        v43 = (char *)__p;
        v49 = (v93 - (_BYTE *)__p) >> 2;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v51 = v94 - (_BYTE *)__p;
        if ((v94 - (_BYTE *)__p) >> 1 > v50)
          v50 = v51 >> 1;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v50;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v94, v47);
          v43 = (char *)__p;
          v41 = v93;
        }
        else
        {
          v48 = 0;
        }
        v52 = &v48[4 * v49];
        *(_DWORD *)v52 = -1;
        v42 = v52 + 4;
        while (v41 != v43)
        {
          v54 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v52 - 1) = v54;
          v52 -= 4;
        }
      }
      __p = v52;
      v93 = v42;
      v94 = &v48[4 * v47];
      if (v43)
        operator delete(v43);
LABEL_63:
      v93 = v42;
      v35 += 2;
    }
    while (v35 != v36);
    v34 = *(_QWORD *)v33;
LABEL_65:
    (*(void (**)(__int128 *__return_ptr, _QWORD, char **, void **))(**(_QWORD **)(v34 + 64) + 32))(&v105, *(_QWORD *)(v34 + 64), v95, &__p);
    mlx::core::array::outputs(v33, (uint64_t)v91);
    v55 = v105;
    if (*((_QWORD *)&v105 + 1) != (_QWORD)v105)
    {
      v56 = 0;
      do
      {
        v57 = *(_QWORD *)(v91[0] + 16 * v56);
        v58 = (std::string::size_type *)(v55 + 16 * v56);
        v59 = v107;
        v60 = *v58;
        v86 = *v58;
        v61 = v58[1];
        v87 = v61;
        if (v61)
        {
          v62 = (unint64_t *)(v61 + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
          v64 = v59[v56];
          v88 = v64;
          v89.__r_.__value_.__r.__words[0] = v57;
          v89.__r_.__value_.__l.__size_ = v60;
          v89.__r_.__value_.__r.__words[2] = v87;
          if (v87)
          {
            v65 = (unint64_t *)(v87 + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
            v64 = v88;
          }
        }
        else
        {
          v64 = *((_DWORD *)v107 + v56);
          v88 = v64;
          v89.__r_.__value_.__r.__words[0] = v57;
          *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = v60;
        }
        v90 = v64;
        std::__hash_table<std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::pair<mlx::core::array,int>>>((uint64_t)v103, (unint64_t *)&v89, (uint64_t)&v89);
        mlx::core::array::~array((mlx::core::array *)&v89.__r_.__value_.__r.__words[1]);
        mlx::core::array::~array((mlx::core::array *)&v86);
        ++v56;
        v55 = v105;
      }
      while (v56 < (uint64_t)(*((_QWORD *)&v105 + 1) - v105) >> 4);
    }
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    if (v107)
    {
      v108 = v107;
      operator delete(v107);
    }
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    if (__p)
    {
      v93 = (char *)__p;
      operator delete(__p);
    }
    *(_QWORD *)&v105 = v95;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
    v33 = (mlx::core::array *)((char *)v33 + 16);
  }
  while (v33 != v85);
LABEL_81:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v67 = *v82;
  if (v82[1] != *v82)
  {
    v68 = 0;
    v69 = 0;
    do
    {
      *(_QWORD *)&v105 = *(_QWORD *)(v67 + v68);
      v70 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v103, (unint64_t *)&v105);
      if (v70)
      {
        v72 = v70 + 3;
        v73 = *((_DWORD *)v70 + 10);
        v74 = *(int *)(*v83 + 4 * v69);
        if (v73 != (_DWORD)v74)
        {
          if (v74 >= (uint64_t)(*(_QWORD *)(*v72 + 8) - *(_QWORD *)*v72) >> 2)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v105);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105, (uint64_t)"[vmap] Axis ", 12);
            v78 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" invalid for output with ", 25);
            v79 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" dimensions.", 12);
            v80 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v105 + 8, &v89);
            std::logic_error::logic_error(v80, &v89);
            v80->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(v80, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
          }
          mlx::core::moveaxis((uint64_t **)v70 + 3, v73, v74, v71, 0, &v105);
          std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)v72, &v105);
          mlx::core::array::~array((mlx::core::array *)&v105);
        }
        std::vector<mlx::core::array>::push_back[abi:ne180100](v84, v72);
      }
      else
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](v84, (_QWORD *)(*v82 + v68));
      }
      ++v69;
      v67 = *v82;
      v68 += 16;
    }
    while (v69 < (v82[1] - *v82) >> 4);
  }
  v75 = v112;
  if (v112 == &v109)
  {
    v76 = 4;
    v75 = &v109;
LABEL_94:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  else if (v112)
  {
    v76 = 5;
    goto LABEL_94;
  }
  *(_QWORD *)&v105 = &v96;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)v99);
  std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)v101);
  return std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::~__hash_table((uint64_t)v103);
}

void sub_242416BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char *a54)
{
  int v54;
  void *v55;
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v54 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a54);
      a54 = a12;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
      v58 = *(_QWORD **)(v56 - 112);
      if (v58 == (_QWORD *)(v56 - 136))
      {
        v59 = 4;
        v58 = (_QWORD *)(v56 - 136);
      }
      else
      {
        if (!v58)
          goto LABEL_11;
        v59 = 5;
      }
      (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_11:
      a54 = &a33;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
      std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)&a36);
      std::__hash_table<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::__unordered_map_hasher<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::hash<mlx::core::Device::DeviceType>,std::equal_to<mlx::core::Device::DeviceType>,true>,std::__unordered_map_equal<mlx::core::Device::DeviceType,std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>,std::equal_to<mlx::core::Device::DeviceType>,std::hash<mlx::core::Device::DeviceType>,true>,std::allocator<std::__hash_value_type<mlx::core::Device::DeviceType,mlx::core::Stream>>>::~__hash_table((uint64_t)&a42);
      std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::~__hash_table((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v54)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v55);
  goto LABEL_6;
}

uint64_t std::pair<std::vector<mlx::core::array>,std::vector<int>>::~pair(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

_QWORD *mlx::core::vmap@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  std::logic_error *exception;
  char *v24;
  char *v25;
  uint64_t v26;
  void *__p;
  char *v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  _QWORD *v37;
  void *v38[2];
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v28 = 0;
  v29 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (__p == v28)
  {
    v10 = 0;
  }
  else
  {
    v8 = (char *)__p + 4;
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v10 = v9 >> 31;
      if ((v9 & 0x80000000) == 0)
        break;
      v11 = v8 == v28;
      v8 += 4;
    }
    while (!v11);
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  if (v24 == v25)
  {
    v14 = 0;
    if (v24)
    {
LABEL_14:
      v25 = v24;
      operator delete(v24);
    }
  }
  else
  {
    v12 = v24 + 4;
    do
    {
      v13 = *((_DWORD *)v12 - 1);
      v14 = v13 >> 31;
      if ((v13 & 0x80000000) == 0)
        break;
      v11 = v12 == v25;
      v12 += 4;
    }
    while (!v11);
    if (v24)
      goto LABEL_14;
  }
  v15 = v10 ^ v14;
  if (__p)
  {
    v28 = (char *)__p;
    operator delete(__p);
  }
  if (v15)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[vmap] Input (or output) axes must be specified if output (or input) axes are.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v36, a1);
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v38, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v40, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v16 = (uint64_t)v37;
  if (!v37)
    goto LABEL_21;
  if (v37 != v36)
  {
    v16 = (*(uint64_t (**)(void))(*v37 + 16))();
LABEL_21:
    v31 = (_QWORD *)v16;
    goto LABEL_25;
  }
  v31 = v30;
  (*(void (**)(_QWORD *, _QWORD *))(v36[0] + 24))(v36, v30);
LABEL_25:
  v32 = *(_OWORD *)v38;
  v33 = v39;
  v38[1] = 0;
  v39 = 0;
  v38[0] = 0;
  v34 = *(_OWORD *)v40;
  v35 = v41;
  v40[1] = 0;
  v41 = 0;
  v40[0] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v17 = (char *)operator new(0x58uLL);
  *(_QWORD *)v17 = &off_25134E168;
  v18 = (uint64_t)v31;
  if (!v31)
  {
LABEL_28:
    *((_QWORD *)v17 + 4) = v18;
    goto LABEL_30;
  }
  if (v31 != v30)
  {
    v18 = (*(uint64_t (**)(void))(*v31 + 16))();
    goto LABEL_28;
  }
  *((_QWORD *)v17 + 4) = v17 + 8;
  (*(void (**)(_QWORD *))(v30[0] + 24))(v30);
LABEL_30:
  *(_OWORD *)(v17 + 40) = v32;
  *((_QWORD *)v17 + 7) = v33;
  v33 = 0;
  v32 = 0uLL;
  *((_OWORD *)v17 + 4) = v34;
  *((_QWORD *)v17 + 10) = v35;
  v35 = 0;
  v34 = 0uLL;
  *(_QWORD *)(a4 + 24) = v17;
  v19 = v31;
  if (v31 == v30)
  {
    v20 = 4;
    v19 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_35;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_35:
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  result = v37;
  if (v37 == v36)
  {
    v22 = 4;
    result = v36;
  }
  else
  {
    if (!v37)
      return result;
    v22 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v22))();
}

void sub_2424170D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  void *v31;

  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1::~$_1(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[3];
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

_QWORD *mlx::core::vmap@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD v25[3];
  _BYTE v26[24];
  _BYTE *v27;
  unint64_t v28;
  int v29;
  _QWORD v30[3];
  _QWORD *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v28 = __PAIR64__(a3, a2);
  v29 = a4;
  v9 = v30;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v30, a1);
  v33 = 0;
  v10 = operator new(0x38uLL);
  v11 = v28;
  *v10 = &off_25134E1E8;
  v10[1] = v11;
  *((_DWORD *)v10 + 4) = v29;
  v12 = (uint64_t)v31;
  if (!v31)
    goto LABEL_4;
  if (v31 != v30)
  {
    v12 = (*(uint64_t (**)(void))(*v31 + 16))();
LABEL_4:
    v10[6] = v12;
    goto LABEL_6;
  }
  v10[6] = v10 + 3;
  (*(void (**)(_QWORD *))(v30[0] + 24))(v30);
LABEL_6:
  v33 = v10;
  v13 = operator new(8uLL);
  *v13 = a2 | (unint64_t)(a3 << 32);
  v25[1] = v13 + 1;
  v25[2] = v13 + 1;
  v25[0] = v13;
  v14 = operator new(4uLL);
  *v14 = a4;
  v24[1] = v14 + 1;
  v24[2] = v14 + 1;
  v24[0] = v14;
  mlx::core::vmap((uint64_t)v32, (uint64_t)v25, (uint64_t)v24, (uint64_t)v34);
  operator delete(v14);
  operator delete(v13);
  v15 = v33;
  if (v33 == v32)
  {
    v16 = 4;
    v15 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_11;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_11:
  if (v31 == v30)
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_16;
    v17 = 5;
    v9 = v31;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v17))(v9);
LABEL_16:
  v18 = (uint64_t)v35;
  if (!v35)
  {
LABEL_19:
    v27 = (_BYTE *)v18;
    goto LABEL_21;
  }
  if (v35 != v34)
  {
    v18 = (*(uint64_t (**)(_QWORD *))(*v35 + 16))(v35);
    goto LABEL_19;
  }
  v27 = v26;
  (*(void (**)(_QWORD *, _BYTE *))(v34[0] + 24))(v34, v26);
LABEL_21:
  *(_QWORD *)(a5 + 24) = 0;
  v19 = operator new(0x28uLL);
  *v19 = &off_25134E268;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v19 + 1), (uint64_t)v26);
  *(_QWORD *)(a5 + 24) = v19;
  v20 = v27;
  if (v27 == v26)
  {
    v21 = 4;
    v20 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_26;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_26:
  result = v35;
  if (v35 == v34)
  {
    v23 = 4;
    result = v34;
  }
  else
  {
    if (!v35)
      return result;
    v23 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
}

void sub_242417478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v29 - 80);
  if (v31 == (_QWORD *)(v29 - 104))
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 104);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v32))(v31);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_24241758C()
{
  JUMPOUT(0x242417584);
}

_QWORD *mlx::core::vmap@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD v23[3];
  _BYTE v24[24];
  _BYTE *v25;
  unint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  _BYTE v29[24];
  _BYTE *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v26 = __PAIR64__(a3, a2);
  v7 = v27;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v27, a1);
  v30 = 0;
  v8 = operator new(0x30uLL);
  v9 = v26;
  v10 = v28;
  *v8 = &off_25134E2F8;
  v8[1] = v9;
  if (!v10)
    goto LABEL_4;
  if (v10 != v27)
  {
    v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
LABEL_4:
    v8[5] = v10;
    goto LABEL_6;
  }
  v8[5] = v8 + 2;
  (*(void (**)(_QWORD *))(v27[0] + 24))(v27);
LABEL_6:
  v30 = v8;
  v11 = operator new(4uLL);
  *v11 = a2;
  v23[1] = v11 + 1;
  v23[2] = v11 + 1;
  v23[0] = v11;
  v12 = operator new(4uLL);
  *v12 = a3;
  v22[1] = v12 + 1;
  v22[2] = v12 + 1;
  v22[0] = v12;
  mlx::core::vmap((uint64_t)v29, (uint64_t)v23, (uint64_t)v22, (uint64_t)v31);
  operator delete(v12);
  operator delete(v11);
  v13 = v30;
  if (v30 == v29)
  {
    v14 = 4;
    v13 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_11:
  if (v28 == v27)
  {
    v15 = 4;
  }
  else
  {
    if (!v28)
      goto LABEL_16;
    v15 = 5;
    v7 = v28;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v15))(v7);
LABEL_16:
  v16 = (uint64_t)v32;
  if (!v32)
  {
LABEL_19:
    v25 = (_BYTE *)v16;
    goto LABEL_21;
  }
  if (v32 != v31)
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*v32 + 16))(v32);
    goto LABEL_19;
  }
  v25 = v24;
  (*(void (**)(_QWORD *, _BYTE *))(v31[0] + 24))(v31, v24);
LABEL_21:
  *(_QWORD *)(a4 + 24) = 0;
  v17 = operator new(0x28uLL);
  *v17 = &off_25134E378;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v17 + 1), (uint64_t)v24);
  *(_QWORD *)(a4 + 24) = v17;
  v18 = v25;
  if (v25 == v24)
  {
    v19 = 4;
    v18 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_26;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_26:
  result = v32;
  if (v32 == v31)
  {
    v21 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      return result;
    v21 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
}

void sub_242417804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;

  v29 = *(_QWORD **)(v27 - 80);
  if (v29 == (_QWORD *)(v27 - 104))
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 104);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v30))(v29);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_242417918()
{
  JUMPOUT(0x242417910);
}

_QWORD *mlx::core::custom_vjp@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v10, a1);
  v5 = v12;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
  *(_QWORD *)(a3 + 24) = 0;
  v6 = operator new(0x48uLL);
  *v6 = &off_25134E408;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v6 + 1), (uint64_t)v10);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v6 + 5), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v6;
  if (v13 == v12)
  {
    v7 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v7 = 5;
    v5 = v13;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v7))(v5);
LABEL_6:
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_242417A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0::~$_0((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0::~$_0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *mlx::core::checkpoint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v20, a1);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v18, a1);
  v4 = (uint64_t)v21;
  if (!v21)
    goto LABEL_4;
  if (v21 != v20)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
LABEL_4:
    v15 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v14);
LABEL_6:
  v17 = 0;
  v5 = operator new(0x28uLL);
  *v5 = &off_25134E4D8;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v14);
  v17 = v5;
  mlx::core::custom_vjp((uint64_t)v18, (uint64_t)v16, a2);
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = v19;
  if (v19 == v18)
  {
    v11 = 4;
    v10 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_21:
  result = v21;
  if (v21 == v20)
  {
    v13 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_242417C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  uint64_t v21;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = *(_QWORD **)(v21 - 32);
  if (v25 == (_QWORD *)(v21 - 56))
  {
    v26 = 4;
    v25 = (_QWORD *)(v21 - 56);
  }
  else
  {
    if (!v25)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::emplace_back<mlx::core::array&,int>(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a1[2];
  v7 = a1[1];
  if (v6 == v7)
    v8 = 0;
  else
    v8 = 32 * (v6 - v7) - 1;
  v9 = a1[4];
  v10 = a1[5];
  v11 = v10 + v9;
  if (v8 == v10 + v9)
  {
    std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::__add_back_capacity(a1);
    v9 = a1[4];
    v10 = a1[5];
    v7 = a1[1];
    v11 = v9 + v10;
  }
  v12 = *(_QWORD *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11;
  *(_QWORD *)v12 = a2;
  *(_DWORD *)(v12 + 8) = *a3;
  v13 = v10 + 1;
  a1[5] = v13;
  v14 = v9 + v13;
  v15 = (_QWORD *)(v7 + 8 * (v14 >> 8));
  if ((_BYTE)v14)
    v16 = *v15 + 16 * v14;
  else
    v16 = *(v15 - 1) + 4096;
  return v16 - 16;
}

void std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2424180D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::~__split_buffer((uint64_t)a1);
}

void std::vector<std::shared_future<void>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  std::shared_future<void> *v2;
  std::shared_future<void> *v4;
  void *v5;

  v1 = *a1;
  v2 = (std::shared_future<void> *)**a1;
  if (v2)
  {
    v4 = (std::shared_future<void> *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        std::shared_future<void>::~shared_future(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<mlx::core::array>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  mlx::core::array *v7;
  uint64_t v8;
  uint64_t v9;
  mlx::core::array *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (mlx::core::array *)((char *)*v6 + 16 * v5);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != (mlx::core::array *)v8)
    {
      do
      {
        mlx::core::array::~array(v7);
        v7 = (mlx::core::array *)(v9 + 16);
        if (v7 - (mlx::core::array *)*v6 == 4096)
        {
          v10 = (mlx::core::array *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (mlx::core::array *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 128;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 256;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<mlx::core::array>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    mlx::core::array::~array((mlx::core::array *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<mlx::core::array>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

_QWORD *std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v32[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v32[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v32[0] = v18;
    v32[1] = v26;
    v32[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v32[2] = v27;
    v5 = (_QWORD *)std::vector<mlx::core::array>::__swap_out_circular_buffer(a1, v32, v5);
    std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)v32);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<mlx::core::array>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>,mlx::core::array*,0>(a3, v20, v5);
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_2424185F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<mlx::core::array>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<mlx::core::array>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>,mlx::core::array*,0>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (*a3 != *v4)
        std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](a3, v4);
      v4 += 2;
      a3 += 2;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<mlx::core::array>&,0>(uint64_t a1, _QWORD **a2, _QWORD **a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)(a1 + 24), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_2424187F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 5));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_emplace<mlx::core::Synchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134DC60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::Synchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134DC60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::Synchronizer>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *mlx::core::Synchronizer::print(uint64_t a1, _QWORD *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Synchronize", 11);
}

uint64_t mlx::core::Primitive::is_equivalent()
{
  return 0;
}

void mlx::core::Synchronizer::~Synchronizer(mlx::core::Synchronizer *this)
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,mlx::core::array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlx::core::array>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_242418B7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__emplace_unique_impl<int &,mlx::core::Event>(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t *inserted;
  char v10;
  _QWORD v12[2];
  char v13;

  v6 = a1 + 2;
  v7 = (char *)operator new(0x40uLL);
  v12[0] = v7;
  v12[1] = v6;
  v8 = *a2;
  *((_DWORD *)v7 + 4) = v8;
  *((_QWORD *)v7 + 3) = *(_QWORD *)a3;
  *((_DWORD *)v7 + 8) = *(_DWORD *)(a3 + 8);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *((_QWORD *)v7 + 7) = *(_QWORD *)(a3 + 32);
  v13 = 1;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = v8;
  inserted = std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__node_insert_unique(a1, (uint64_t)v7);
  if ((v10 & 1) != 0)
    v12[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,mlx::core::Event>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,mlx::core::Event>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  return inserted;
}

void sub_242418C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,mlx::core::Event>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,mlx::core::Event>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;
  _DWORD *v5;
  uint64_t *v6;

  v2 = (_QWORD *)a2;
  v5 = (_DWORD *)(a2 + 16);
  v4 = *(unsigned int *)(a2 + 16);
  *((_QWORD *)v5 - 1) = v4;
  v6 = std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v4, v5);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *i;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  _BOOL8 v12;
  size_t v13;
  unint64_t v14;
  size_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
      v5 = v3 <= a2 ? a2 % v3 : a2;
    else
      v5 = (v3 - 1) & a2;
    v6 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v5);
    if (v6)
    {
      for (i = *v6; i; i = (uint64_t *)*i)
      {
        v8 = i[1];
        if (v8 == a2)
        {
          if (*((_DWORD *)i + 4) == *a3)
            return i;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3)
              v8 %= v3;
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5)
            break;
        }
      }
    }
  }
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    v11 = 2 * v3;
    v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    v13 = v12 | v11;
    v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14)
      v15 = v14;
    else
      v15 = v13;
    std::__hash_table<std::__hash_value_type<std::string,mlx::core::array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlx::core::array>>>::__rehash<true>(a1, v15);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,mlx::core::Event>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,mlx::core::Event>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::deque<mlx::core::array>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<mlx::core::array>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8));
  v10 = a2[1];
  v11 = (_QWORD *)(v9 + 16 * v8);
  *v11 = *a2;
  v11[1] = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<mlx::core::array>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2424192D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,mlx::core::Event>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,mlx::core::Event>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,mlx::core::Event>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t std::deque<std::pair<std::reference_wrapper<mlx::core::array>,int>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 32 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100)
    a2 = 1;
  if (v5 < 0x200)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<mlx::core::array>::pop_front(int64x2_t *a1)
{
  mlx::core::array::~array((mlx::core::array *)(*(_QWORD *)(a1->i64[1]
                                                          + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                                              + 16 * a1[2].i64[0]));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2425C0860);
  return std::deque<mlx::core::array>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<mlx::core::array>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

_QWORD *std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_25134DD28;
  mlx::core::array::~array((mlx::core::array *)(a1 + 1));
  return a1;
}

void std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_25134DD28;
  mlx::core::array::~array((mlx::core::array *)(a1 + 1));
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_25134DD28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  *(_QWORD *)((char *)result + 29) = *(_QWORD *)((char *)a1 + 29);
  return result;
}

_QWORD *std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_25134DD28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[3];
  *(_QWORD *)((char *)a2 + 29) = *(_QWORD *)((char *)result + 29);
  a2[3] = v6;
  return result;
}

void std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  mlx::core::array::~array((mlx::core::array *)(a1 + 8));
}

void std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  mlx::core::array::~array((mlx::core::array *)(a1 + 8));
  operator delete((void *)a1);
}

void std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  mlx::core::array *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _BOOL8 is_tracer;
  void *v8;
  _BYTE v9[24];
  void **v10;

  v1 = a1;
  v3 = (mlx::core::array *)(a1 + 1);
  v2 = a1[1];
  v4 = *(_QWORD *)(v2 + 176);
  v5 = *(_QWORD *)(v2 + 184);
  while (v4 != v5)
  {
    if (*(_QWORD *)(*(_QWORD *)v4 + 104))
    {
      a1 = (_QWORD *)mlx::core::Event::stream(*(_QWORD *)v4 + 88);
      if (*(_DWORD *)a1 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 64) + 8))
        mlx::core::Event::wait((mlx::core::Event *)(*(_QWORD *)v4 + 88));
    }
    v4 += 16;
  }
  v6 = mlx::core::scheduler::scheduler((mlx::core::scheduler *)a1);
  mlx::core::scheduler::Scheduler::notify_new_task((uint64_t)v6);
  mlx::core::array::outputs(v3, (uint64_t)v9);
  (***(void (****)(_QWORD, uint64_t, _BYTE *))(v1[1] + 64))(*(_QWORD *)(v1[1] + 64), v1[1] + 176, v9);
  is_tracer = mlx::core::array::is_tracer(v3);
  if (!is_tracer)
    mlx::core::array::detach(v3);
  if (*((_BYTE *)v1 + 36))
    mlx::core::Event::signal((mlx::core::Event *)(*(_QWORD *)v3 + 88));
  v8 = mlx::core::scheduler::scheduler((mlx::core::scheduler *)is_tracer);
  mlx::core::scheduler::Scheduler::notify_task_completion((uint64_t)v8);
  v10 = (void **)v9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_242419730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0,std::allocator<mlx::core::eval_impl(std::vector<mlx::core::array>,BOOL)::$_0>,void ()(void)>::target_type()
{
}

uint64_t mlx::core::Event::stream(uint64_t this)
{
  void *exception;

  if (!*(_QWORD *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "[Event::stream] Cannot access stream on invalid event.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return this;
}

void sub_2424197E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::scheduler::Scheduler::notify_new_task(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  ++*(_DWORD *)a1;
  std::mutex::unlock(v2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 72));
}

void mlx::core::scheduler::Scheduler::notify_task_completion(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  --*(_DWORD *)a1;
  std::mutex::unlock(v2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 72));
}

void std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::~__func()
{
  JUMPOUT(0x2426A82C4);
}

__n128 std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_25134DDA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_25134DDA8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v25 = *a2;
  result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v4, &v25, &v25);
  if ((v6 & 1) != 0)
  {
    v7 = *a2;
    *(_BYTE *)(v7 + 128) = 0;
    v8 = *(unint64_t **)(v7 + 200);
    v9 = *(unint64_t **)(v7 + 208);
    if (v8 != v9)
    {
      do
      {
        v10 = *v8;
        v8 += 2;
        *(_BYTE *)(v10 + 128) = 0;
        v11 = *(_QWORD *)(a1 + 8);
        v25 = v10;
        result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v11, &v25, &v25);
      }
      while (v8 != v9);
      v7 = *a2;
    }
    v12 = *(_QWORD *)(v7 + 176);
    v13 = *(_QWORD *)(v7 + 184);
    if (v12 != v13)
    {
      do
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        if (!v14)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, v12);
        v12 += 16;
      }
      while (v12 != v13);
      v7 = *a2;
    }
    v15 = *(_QWORD **)(v7 + 64);
    if (v15)
    {
      if ((result & 1) != 0)
        return result;
      v7 = *a2;
    }
    v16 = *(unint64_t **)(v7 + 176);
    v17 = *(unint64_t **)(v7 + 184);
    while (v16 != v17)
    {
      v18 = *(_QWORD **)(a1 + 24);
      v25 = *v16;
      result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v18, &v25);
      if (result)
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](*(char ***)(a1 + 32), a2);
        v19 = *(_QWORD *)(a1 + 24);
        v25 = *a2;
        result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v19, &v25, &v25);
        v20 = *a2;
        v21 = *(unint64_t **)(*a2 + 200);
        v22 = *(unint64_t **)(v20 + 208);
        while (v21 != v22)
        {
          v23 = *(_QWORD *)(a1 + 24);
          v24 = *v21;
          v21 += 2;
          v25 = v24;
          result = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v23, &v25, &v25);
        }
        return result;
      }
      v16 += 2;
    }
  }
  return result;
}

uint64_t std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(mlx::core::array &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_242419C08(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      mlx::core::array::~array((mlx::core::array *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,mlx::core::array>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v23[2];
  char v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = (char *)operator new(0x28uLL);
  v23[0] = (uint64_t)v13;
  v23[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_QWORD *)v13 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,mlx::core::array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlx::core::array>>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v10 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100](v23, 0);
  return v10;
}

void sub_242419ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      mlx::core::array::~array((mlx::core::array *)(v2 + 24));
    operator delete((void *)v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,mlx::core::array>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,mlx::core::array>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,mlx::core::array>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__basic_node_handle<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::allocator<std::pair<unsigned long const,mlx::core::array>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    mlx::core::array::~array((mlx::core::array *)(v2 + 24));
    operator delete((void *)v2);
    *a1 = 0;
  }
  return a1;
}

_QWORD *std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_25134DE38;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_25134DE38;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_25134DE38;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_24241A1A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25134DE38;
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v9, v4, *a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_24241A318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::vjp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::~__func()
{
  JUMPOUT(0x2426A82C4);
}

__n128 std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_25134DEC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_25134DEC8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27[2];

  v4 = *(_QWORD *)(a1 + 8);
  v27[0] = *a2;
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v4, v27, v27);
  if ((v5 & 1) != 0)
  {
    v6 = *a2;
    *(_BYTE *)(v6 + 128) = 0;
    v7 = *(unint64_t **)(v6 + 200);
    v8 = *(unint64_t **)(v6 + 208);
    if (v7 != v8)
    {
      do
      {
        v9 = *v7;
        v7 += 2;
        *(_BYTE *)(v9 + 128) = 0;
        v10 = *(_QWORD *)(a1 + 8);
        v27[0] = v9;
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v10, v27, v27);
      }
      while (v7 != v8);
      v6 = *a2;
    }
    v11 = *(unint64_t **)(v6 + 176);
    v12 = *(unint64_t **)(v6 + 184);
    if (v11 != v12)
    {
      do
      {
        v13 = v11[1];
        v27[0] = *v11;
        v27[1] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        if (!v16)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v16 + 48))(v16, v27);
        mlx::core::array::~array((mlx::core::array *)v27);
        v11 += 2;
      }
      while (v11 != v12);
      v6 = *a2;
    }
    v17 = *(_QWORD **)(v6 + 64);
    if (v17)
    {
      {
        return;
      }
      v6 = *a2;
    }
    v18 = *(unint64_t **)(v6 + 176);
    v19 = *(unint64_t **)(v6 + 184);
    while (v18 != v19)
    {
      v20 = *(_QWORD **)(a1 + 24);
      v27[0] = *v18;
      if (std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v20, v27))
      {
        std::vector<mlx::core::array>::push_back[abi:ne180100](*(char ***)(a1 + 32), a2);
        v21 = *(_QWORD *)(a1 + 24);
        v27[0] = *a2;
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v21, v27, v27);
        v22 = *a2;
        v23 = *(unint64_t **)(*a2 + 200);
        v24 = *(unint64_t **)(v22 + 208);
        while (v23 != v24)
        {
          v25 = *(_QWORD *)(a1 + 24);
          v26 = *v23;
          v23 += 2;
          v27[0] = v26;
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v25, v27, v27);
        }
        return;
      }
      v18 += 2;
    }
  }
}

void sub_24241A594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  mlx::core::array::~array((mlx::core::array *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0,std::allocator<mlx::core::jvp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)::$_0>,void ()(mlx::core::array&)>::target_type()
{
}

_QWORD *std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_25134DF48;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_25134DF48;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_25134DF48;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_24241A6FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25134DF48;
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v9, v4, *a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_24241A870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0,std::allocator<mlx::core::jvp(std::function<mlx::core::array ()(mlx::core::array const&)> const&,mlx::core::array const&,mlx::core::array const&)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

_QWORD *std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_25134DFC8;
  v2 = a1 + 1;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_25134DFC8;
  v2 = a1 + 1;
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = &off_25134DFC8;
  std::__compressed_pair_elem<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_24241AA04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25134DFC8;
  return std::__compressed_pair_elem<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::destroy[abi:ne180100]((_QWORD *)(a1 + 8));
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD **v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  _QWORD *v20;
  int **v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  uint64_t v25;
  _QWORD *v26;
  std::logic_error *v27;
  std::logic_error *exception;
  _QWORD *v29;
  char *v30;
  char *v31;
  char *v32[3];
  char **v33;
  uint64_t v34;
  _QWORD *v35[30];
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  void **v39;
  char v40;
  int **v41[2];
  std::string v42;
  std::string *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  v38 = 0;
  v36 = (uint64_t *)&v37;
  v6 = *(unsigned int **)(a1 + 40);
  v7 = *(unsigned int **)(a1 + 48);
  if (v6 == v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    do
    {
      v8 = *v6;
      if ((v8 & 0x80000000) != 0)
        v8 += (uint64_t)(a2[1] - *a2) >> 4;
      LODWORD(v33) = v8;
      std::__tree<int>::__emplace_unique_key_args<int,int>(&v36, (int *)&v33, &v33);
      ++v6;
    }
    while (v6 != v7);
    v9 = v38;
    v6 = *(unsigned int **)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
  }
  if (v9 != (v10 - (uint64_t)v6) >> 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[grad] Repeat argument number not allowed in grad.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v11 = v36;
  if ((*((_DWORD *)v36 + 7) & 0x80000000) != 0)
    goto LABEL_31;
  v12 = v37;
  if (v37)
  {
    do
    {
      v13 = v12;
      v12 = (_QWORD *)v12[1];
    }
    while (v12);
  }
  else
  {
    v14 = &v37;
    do
    {
      v13 = v14[2];
      v15 = *v13 == (_QWORD)v14;
      v14 = (_QWORD **)v13;
    }
    while (v15);
  }
  if (*((int *)v13 + 7) >= (unint64_t)((uint64_t)(a2[1] - *a2) >> 4))
  {
LABEL_31:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"[grad] Invalid argument number for function with ", 49);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" inputs.", 8);
    v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v34, &v42);
    std::logic_error::logic_error(v27, &v42);
    v27->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v27, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  memset(v32, 0, sizeof(v32));
  if (v36 != (uint64_t *)&v37)
  {
    do
    {
      std::vector<mlx::core::array>::push_back[abi:ne180100](v32, (_QWORD *)(*a2 + 16 * *((int *)v11 + 7)));
      v16 = (uint64_t *)v11[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v11[2];
          v15 = *v17 == (_QWORD)v11;
          v11 = v17;
        }
        while (!v15);
      }
      v11 = v17;
    }
    while (v17 != (uint64_t *)&v37);
  }
  v18 = (std::string *)operator new(0x20uLL);
  v18->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_25134E048;
  v18->__r_.__value_.__l.__size_ = a1 + 8;
  v18->__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
  v18[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  v43 = v18;
  v19 = mlx::core::TypeToDtype<float>::operator mlx::core::Dtype();
  mlx::core::array::array<float>(v41, v19, 1.0);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v39 = (void **)&v29;
  v40 = 0;
  v20 = operator new(0x10uLL);
  v29 = v20;
  v30 = (char *)v20;
  v31 = (char *)(v20 + 2);
  v21 = v41[1];
  *v20 = v41[0];
  v20[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 1);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v30 = (char *)(v20 + 2);
  mlx::core::vjp((mlx::core *)&v42, (uint64_t)v32, &v29, (uint64_t)&v33);
  v39 = (void **)&v29;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v39);
  mlx::core::array::~array((mlx::core::array *)v41);
  v24 = v43;
  if (v43 == &v42)
  {
    v25 = 4;
    v24 = &v42;
    goto LABEL_29;
  }
  if (v43)
  {
    v25 = 5;
LABEL_29:
    (*(void (**)(void))(v24->__r_.__value_.__r.__words[0] + 8 * v25))();
  }
  std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>>::pair[abi:ne180100]<std::vector<mlx::core::array>&,std::vector<mlx::core::array>&,0>(a3, &v33, v35);
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v33 = v32;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  std::__tree<int>::destroy((uint64_t)&v36, v37);
}

void sub_24241AE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  if (*(char *)(v36 - 81) < 0)
  {
    operator delete(*(void **)(v35 + 56));
    if ((v34 & 1) == 0)
    {
LABEL_6:
      a16 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      a17 = MEMORY[0x24BEDB848] + 16;
      if (a30 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2426A8294](&a33);
      std::__tree<int>::destroy(v36 - 160, *(_QWORD **)(v35 + 8));
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

uint64_t std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](a1, a2);
  v4[4] = 0;
  v4[5] = 0;
  v4 += 4;
  v4[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  return a1;
}

void sub_24241AFEC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0>,std::pair<std::vector<mlx::core::array>,std::vector<mlx::core::array>> ()(std::vector<mlx::core::array> const&)>::destroy[abi:ne180100](_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  }
  else if (v3)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 40))(a1[3]);
  }
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<int>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func()
{
  JUMPOUT(0x2426A82C4);
}

__n128 std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_25134E048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_25134E048;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  mlx::core *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  mlx::core *v22;
  uint64_t v23;
  mlx::core::metal *v24;
  unsigned int v25;
  __int128 v26;
  _QWORD v27[3];

  v6 = *(_QWORD ***)(a1 + 16);
  memset(v27, 0, sizeof(v27));
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)v27, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = **(_QWORD ***)(a1 + 24);
    do
    {
      v10 = (uint64_t *)(v7 + 16 * v8);
      v11 = (_QWORD *)(v27[0] + 16 * *((int *)v9 + 7));
      if (*v11 != *v10)
        std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v11, v10);
      v12 = (_QWORD *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v9[2];
          v14 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      ++v8;
      v7 = *a2;
      v9 = v13;
    }
    while (v8 < (a2[1] - *a2) >> 4);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  v16 = (mlx::core *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 48))(v15, v27);
  v17 = *a3;
  if ((unint64_t)(a3[1] - *a3) >= 0x11)
  {
    v18 = 1;
    v19 = 16;
    do
    {
      v20 = (_QWORD *)(v17 + v19);
      v21 = *(_QWORD *)(*(_QWORD *)(v17 + v19) + 64);
      if (v21)
      {
        v22 = *(mlx::core **)(v21 + 8);
        v23 = *(unsigned int *)(v21 + 16);
      }
      else
      {
        v24 = (mlx::core::metal *)mlx::core::default_device(v16);
        v22 = (mlx::core *)mlx::core::default_stream(v24);
        v23 = v25;
      }
      mlx::core::stop_gradient(v20, v22, v23 | 0x100000000, &v26);
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](*a3 + v19, &v26);
      mlx::core::array::~array((mlx::core::array *)&v26);
      ++v18;
      v17 = *a3;
      v19 += 16;
    }
    while (v18 < (a3[1] - *a3) >> 4);
  }
  *(_QWORD *)&v26 = v27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_24241B54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1},std::allocator<mlx::core::value_and_grad(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&)::$_0::operator() const(std::vector<mlx::core::array> const&)::{lambda(std::vector<mlx::core::array> const&)#1}>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

void std::__tree<int>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<int>::destroy(a1, *a2);
    std::__tree<int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<mlx::core::array,int>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::pair<mlx::core::array,int>>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v23[2];
  char v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = (char *)operator new(0x30uLL);
  v23[0] = (uint64_t)v13;
  v23[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_QWORD *)v13 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v13 + 10) = *(_DWORD *)(a3 + 24);
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,mlx::core::array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,mlx::core::array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,mlx::core::array>>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v10 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100](v23, 0);
  return v10;
}

void sub_24241B858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,mlx::core::array>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::~__func()
{
  JUMPOUT(0x2426A82C4);
}

__n128 std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_25134E0D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_25134E0D8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25[2];
  unint64_t v26;

  v26 = *a2;
  if (!std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(*(_QWORD **)(a1 + 8), &v26))
  {
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(*(_QWORD *)(a1 + 8), &v26, &v26);
    v4 = *a2;
    v5 = *(unint64_t **)(*a2 + 200);
    v6 = *(unint64_t **)(*a2 + 208);
    if (v5 != v6)
    {
      do
      {
        v7 = *(_QWORD *)(a1 + 8);
        v8 = *v5;
        v5 += 2;
        v25[0] = v8;
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v7, v25, v25);
      }
      while (v5 != v6);
      v4 = *a2;
    }
    v9 = *(_QWORD *)(v4 + 176);
    v10 = *(_QWORD *)(v4 + 184);
    if (v9 != v10)
    {
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        if (!v11)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, v9);
        v9 += 16;
      }
      while (v9 != v10);
      v12 = *(unint64_t **)(*a2 + 176);
      v13 = *(unint64_t **)(*a2 + 184);
      while (v12 != v13)
      {
        v14 = *(_QWORD **)(a1 + 24);
        v25[0] = *v12;
        if (std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v14, v25))
        {
          std::vector<mlx::core::array>::push_back[abi:ne180100](*(char ***)(a1 + 32), a2);
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) - 16) + 128) = 0;
          v15 = *(_QWORD *)(a1 + 24);
          v25[0] = *a2;
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v15, v25, v25);
          v16 = *a2;
          v17 = *(unint64_t **)(*a2 + 200);
          v18 = *(unint64_t **)(v16 + 208);
          while (v17 != v18)
          {
            v19 = *v17;
            v20 = v17[1];
            v25[0] = *v17;
            v25[1] = v20;
            if (v20)
            {
              v21 = (unint64_t *)(v20 + 8);
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
            }
            v23 = *(_QWORD *)(a1 + 24);
            v24 = v19;
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(v23, &v24, &v24);
            *(_BYTE *)(v25[0] + 128) = 0;
            mlx::core::array::~array((mlx::core::array *)v25);
            v17 += 2;
          }
          return;
        }
        v12 += 2;
      }
    }
  }
}

void sub_24241BA74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mlx::core::array::~array((mlx::core::array *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0,std::allocator<mlx::core::detail::vmap_replace(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<int> const&,std::vector<int> const&)::$_0>,void ()(mlx::core::array const&)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(mlx::core::array const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24241BC38(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_25134E168;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_25134E168;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x58uLL);
  *v2 = &off_25134E168;
  std::__compressed_pair_elem<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_24241BD8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25134E168;
  return std::__compressed_pair_elem<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy[abi:ne180100]((_QWORD *)(a1 + 8));
}

void std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(std::vector<int> *this@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  std::__compressed_pair<int *> *p_end_cap;
  std::vector<int>::pointer *p_end;
  std::vector<int>::size_type v8;
  int *value;
  std::vector<int>::pointer begin;
  std::vector<int> *v11;
  std::string __x;
  uint64_t v13[3];
  std::vector<int>::value_type v14[2];

  p_end_cap = &this[1].__end_cap_;
  p_end = &this->__end_;
  if (this[2].__begin_ == this[1].__end_cap_.__value_)
  {
    v8 = (a2[1] - *a2) >> 4;
    LODWORD(__x.__r_.__value_.__l.__data_) = 0;
    std::vector<int>::resize((std::vector<int> *)((char *)this + 40), v8, (std::vector<int>::const_reference)&__x);
  }
  mlx::core::detail::vmap_trace((uint64_t)p_end, a2, p_end_cap, &__x);
  value = this[2].__end_cap_.__value_;
  begin = this[3].__begin_;
  v11 = (std::vector<int> *)((char *)this + 64);
  if (begin == value)
  {
    v14[0] = 0;
    std::vector<int>::resize(v11, (v13[1] - v13[0]) >> 4, v14);
  }
  mlx::core::detail::vmap_replace(a2, (uint64_t *)&__x, v13, (uint64_t *)p_end_cap, v11, a3);
  *(_QWORD *)v14 = v13;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
  *(_QWORD *)v14 = &__x;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
}

void sub_24241BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = (void **)&a10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)a1, a2);
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4 + 4, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 7, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  return a1;
}

void sub_24241BFB8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  v6 = (_QWORD *)v1[3];
  if (v6 == v1)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_8;
    v7 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v7))(v1);
LABEL_8:
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1,std::allocator<mlx::core::vmap(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)> const&,std::vector<int> const&,std::vector<int> const&)::$_1>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[3];
  if (v4 == a1)
  {
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 40))(a1[3]);
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_25134E1E8;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_25134E1E8;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x38uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_25134E1E8;
  v2[1] = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 3), a1 + 24);
  return v2;
}

void sub_24241C2DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_25134E1E8;
  v2 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](a2 + 24, a1 + 24);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 48))(v9, v4, *a2, *a2 + 16);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_24241C464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_25134E268;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_25134E268;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_25134E268;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_24241C5D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25134E268;
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t i;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[3];
  void **v28;
  char v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x24BDAC8D0];
  v6 = a2[1];
  v30[0] = *a2;
  v30[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a3[1];
  v30[2] = *a3;
  v30[3] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v28 = (void **)&v24;
  v29 = 0;
  v12 = operator new(0x20uLL);
  v13 = 0;
  v24 = v12;
  v25 = v12;
  v26 = v12 + 4;
  do
  {
    v14 = &v30[2 * v13];
    v16 = *v14;
    v15 = v14[1];
    *v12 = v16;
    v12[1] = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 2);
  v25 = v12;
  v19 = *(_QWORD *)(a1 + 32);
  if (!v19)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD **))(*(_QWORD *)v19 + 48))(v27, v19, &v24);
  v20 = *(_QWORD *)(v27[0] + 8);
  *a4 = *(_QWORD *)v27[0];
  a4[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v28 = (void **)v27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v28);
  v28 = (void **)&v24;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v28);
  for (i = 2; i != -2; i -= 2)
    mlx::core::array::~array((mlx::core::array *)&v30[i]);
}

void sub_24241C814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, char a18)
{
  uint64_t i;

  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a16);
  for (i = 16; i != -16; i -= 16)
    mlx::core::array::~array((mlx::core::array *)(&a18 + i));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)> const&,int,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&,mlx::core::array const&)>::target_type()
{
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_25134E2F8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_25134E2F8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_25134E2F8;
  v2[1] = v3;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_24241C9A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25134E2F8;
  a2[1] = *(_QWORD *)(a1 + 8);
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v9, v4, *a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = operator new(0x10uLL);
  *a3 = v5;
  a3[1] = v5;
  a3[2] = v5 + 2;
  v6 = v9[1];
  *v5 = v9[0];
  v5[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a3[1] = v5 + 2;
  mlx::core::array::~array((mlx::core::array *)v9);
}

void sub_24241CB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_25134E378;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_25134E378;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_25134E378;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_24241CC98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25134E378;
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[3];
  void **v20;
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v5 = a2[1];
  v22[0] = *a2;
  v22[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20 = (void **)&v16;
  v21 = 0;
  v9 = operator new(0x10uLL);
  v16 = v9;
  v18 = v9 + 2;
  *v9 = v6;
  v9[1] = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v17 = v9 + 2;
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD **))(*(_QWORD *)v12 + 48))(v19, v12, &v16);
  v13 = *(_QWORD *)(v19[0] + 8);
  *a3 = *(_QWORD *)v19[0];
  a3[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v20 = (void **)v19;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)&v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v20);
  mlx::core::array::~array((mlx::core::array *)v22);
}

void sub_24241CE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)(v8 - 56));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1,std::allocator<mlx::core::vmap(std::function<mlx::core::array ()(mlx::core::array const&)> const&,int,int)::$_1>,mlx::core::array ()(mlx::core::array const&)>::target_type()
{
}

_QWORD *std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_25134E408;
  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_25134E408;
  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x48uLL);
  *v2 = &off_25134E408;
  std::__compressed_pair_elem<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_24241D0C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25134E408;
  return std::__compressed_pair_elem<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy[abi:ne180100]((_QWORD *)(a1 + 8));
}

void std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, _QWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  mlx::core *v7;
  uint64_t *v8;
  uint64_t *v9;
  mlx::core *v10;
  uint64_t *v11;
  uint64_t v12;
  mlx::core *v13;
  unsigned int v14;
  mlx::core::metal *v15;
  unsigned int v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  mlx::core *v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  void *__p[2];
  char *v48;
  __int128 v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  void **v55;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v4 + 48))(&v53);
  v9 = v53;
  v8 = v54;
  while (v9 != v8)
  {
    mlx::core::stop_gradient(v9, v7, 0, &v51);
    std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100]((uint64_t)v9, &v51);
    mlx::core::array::~array((mlx::core::array *)&v51);
    v9 += 2;
  }
  v51 = 0uLL;
  v52 = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)&v51, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v10 = (mlx::core *)std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array*>,std::__wrap_iter<mlx::core::array*>>((uint64_t *)&v51, *((uint64_t *)&v51 + 1), v53, v54, ((char *)v54 - (char *)v53) >> 4);
  v11 = v53;
  v12 = *(_QWORD *)(*v53 + 64);
  if (v12)
  {
    v13 = *(mlx::core **)(v12 + 8);
    v14 = *(_DWORD *)(v12 + 16);
  }
  else
  {
    v15 = (mlx::core::metal *)mlx::core::default_device(v10);
    v13 = (mlx::core *)mlx::core::default_stream(v15);
    v14 = v16;
    v11 = v53;
  }
  v50 = 0;
  v17 = 0uLL;
  v49 = 0u;
  v48 = 0;
  *(_OWORD *)__p = 0u;
  v18 = v54;
  if (v11 == v54)
  {
    v33 = 0;
  }
  else
  {
    do
    {
      v19 = *v11;
      v20 = (_QWORD *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1) >= v50)
      {
        v21 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int> const&>((uint64_t *)&v49, v19);
      }
      else
      {
        **((_QWORD **)&v49 + 1) = 0;
        v20[1] = 0;
        v20[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v20, *(const void **)v19, *(_QWORD *)(v19 + 8), (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2);
        v21 = (uint64_t)(v20 + 3);
      }
      *((_QWORD *)&v49 + 1) = v21;
      v22 = *(_QWORD *)(*v11 + 56);
      v23 = (char *)__p[1];
      if (__p[1] >= v48)
      {
        v25 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v26 = (v48 - (char *)__p[0]) >> 2;
        if (v26 <= v25 + 1)
          v26 = v25 + 1;
        if ((unint64_t)(v48 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v48, v27);
        else
          v28 = 0;
        v29 = &v28[8 * v25];
        *(_QWORD *)v29 = v22;
        v24 = v29 + 8;
        v31 = (char *)__p[0];
        v30 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            v32 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v29 - 1) = v32;
            v29 -= 8;
          }
          while (v30 != v31);
          v30 = (char *)__p[0];
        }
        __p[0] = v29;
        __p[1] = v24;
        v48 = &v28[8 * v27];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_QWORD *)__p[1] = v22;
        v24 = v23 + 8;
      }
      __p[1] = v24;
      v11 += 2;
    }
    while (v11 != v18);
    v17 = v49;
    v33 = v50;
  }
  v45 = v17;
  v46 = v33;
  v50 = 0;
  v49 = 0uLL;
  v41 = mlx::core::to_stream(v13, v14 | 0x100000000);
  v42 = v34;
  std::allocate_shared[abi:ne180100]<mlx::core::CustomVJP,std::allocator<mlx::core::CustomVJP>,mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,void>((uint64_t *)&v41, a1 + 40, &v43);
  v44 = v43;
  v43 = 0uLL;
  mlx::core::array::make_arrays((uint64_t *)&v45, __p, &v44, (_QWORD **)&v51, a3);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v55 = (void **)&v45;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v55);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = &v49;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)&v49 = &v51;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  *(_QWORD *)&v51 = &v53;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void sub_24241D498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  a23 = &a27;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a27 = v27 - 136;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](v4 + 32, a2 + 32);
  return a1;
}

void sub_24241D5D4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__alloc_func<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::custom_vjp(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::destroy[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;

  v2 = a1 + 4;
  result = (_QWORD *)a1[7];
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      goto LABEL_6;
    v4 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if (v5)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[3] + 40))(a1[3]);
  return result;
}

_QWORD *std::vector<mlx::core::array>::__insert_with_size[abi:ne180100]<std::__wrap_iter<mlx::core::array*>,std::__wrap_iter<mlx::core::array*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v32[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v32[4] = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v32[0] = v18;
    v32[1] = v26;
    v32[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v32[2] = v27;
    v5 = (_QWORD *)std::vector<mlx::core::array>::__swap_out_circular_buffer(a1, v32, v5);
    std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)v32);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    std::vector<mlx::core::array>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<mlx::core::array const*>,std::__wrap_iter<mlx::core::array const*>,mlx::core::array*,0>(a3, v20, v5);
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_24241D854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<mlx::core::array>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_24241D968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<mlx::core::CustomVJP,std::allocator<mlx::core::CustomVJP>,mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<mlx::core::CustomVJP>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,std::allocator<mlx::core::CustomVJP>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_24241DB10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<mlx::core::CustomVJP>::__shared_ptr_emplace[abi:ne180100]<mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,std::allocator<mlx::core::CustomVJP>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[2] = 0;
  *a1 = &unk_25134E478;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<mlx::core::CustomVJP,mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,mlx::core::CustomVJP*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_24241DB5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mlx::core::CustomVJP>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlx::core::CustomVJP>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_25134E478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426A82C4);
}

uint64_t std::__shared_ptr_emplace<mlx::core::CustomVJP>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<mlx::core::CustomVJP,mlx::core::Stream,std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)> const&,mlx::core::CustomVJP*>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_QWORD *)a1 = &off_251350FE0;
  *(_QWORD *)(a1 + 8) = v4;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100](a1 + 24, (uint64_t)v9);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

_QWORD *std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_25134E4D8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_25134E4D8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_25134E4D8;
  std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_24241DD94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25134E4D8;
  return std::__function::__value_func<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  mlx::core *v7;
  void **v8[3];
  _BYTE v9[24];
  char *v10;
  char *v11;
  void ***v12;

  v7 = (mlx::core *)(a1 + 8);
  mlx::core::depends(a2, a4, (uint64_t *)v8);
  mlx::core::vjp(v7, (uint64_t)v8, a3, (uint64_t)v9);
  v12 = v8;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  std::vector<mlx::core::array>::__init_with_size[abi:ne180100]<mlx::core::array*,mlx::core::array*>((char *)a5, v10, v11, (v11 - v10) >> 4);
  v8[0] = (void **)&v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v8);
  v8[0] = (void **)v9;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v8);
}

void sub_24241DEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)&a12;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0,std::allocator<mlx::core::checkpoint(std::function<std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&)>)::$_0>,std::vector<mlx::core::array> ()(std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&,std::vector<mlx::core::array> const&)>::target_type()
{
}

void mlx::core::svd_impl(char ***this, int ***a2, int ***a3, int ***a4, mlx::core::array *a5)
{
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  float v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  mlx::core::scheduler *v21;
  _QWORD *v22;
  uint64_t v23;
  mlx::core::scheduler *v24;
  _QWORD *v25;
  uint64_t v26;
  mlx::core::scheduler *v27;
  _QWORD *v28;
  uint64_t v29;
  mlx::core::scheduler *v30;
  mlx::core::scheduler *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *exception;
  uint64_t v42;
  int v43;
  _QWORD v47[3];
  int v48;
  void **v49[2];
  uint64_t v50;
  _BYTE v51[260];
  int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  void *__p[3];
  _QWORD v58[2];
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  _QWORD v64[4];
  mlx::core::scheduler *v65;
  _QWORD v66[4];
  _QWORD v67[4];
  mlx::core::scheduler *v68;
  _QWORD v69[4];
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v6 = *this;
  v7 = *v6;
  v8 = (uint64_t)v6[1];
  v9 = v8 - (_QWORD)*v6;
  if ((unint64_t)v9 <= 4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v10 = v9 >> 2;
  v11 = &v7[v9];
  v12 = *((_DWORD *)v11 - 2);
  v63 = v12;
  v13 = *((_DWORD *)v11 - 1);
  v62 = v13;
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v43 = v14;
  v61 = v13;
  v60 = v13;
  v59 = v12;
  v15 = (unint64_t)v6[6];
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v7, v8, v10);
  v55 = 0;
  v56 = 0uLL;
  v54 = 0uLL;
  mlx::core::array::array(v58, (__int128 *)__p, 0x400000006, &v56, &v54);
  v49[0] = (void **)&v54;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](v49);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (((_BYTE)(*this)[21] & 2) != 0)
    v20 = 1;
  else
    v20 = 2;
  mlx::core::copy((mlx::core::array *)this, (mlx::core::array *)v58, v20, v16);
  v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60) * (_QWORD)(*a2)[6]));
  v74[0] = &unk_2513463C8;
  v74[1] = mlx::core::allocator::free;
  v75 = v74;
  mlx::core::array::set_data(a2, (uint64_t)v21, (uint64_t)v74);
  v22 = v75;
  if (v75 == v74)
  {
    v23 = 4;
    v22 = v74;
  }
  else
  {
    if (!v75)
      goto LABEL_20;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_20:
  v24 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (_QWORD)(*a3)[6]));
  v72[0] = &unk_2513463C8;
  v72[1] = mlx::core::allocator::free;
  v73 = v72;
  mlx::core::array::set_data(a3, (uint64_t)v24, (uint64_t)v72);
  v25 = v73;
  if (v73 == v72)
  {
    v26 = 4;
    v25 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_25;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_25:
  v27 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a4 + 60) * (_QWORD)(*a4)[6]));
  v70[0] = &unk_2513463C8;
  v70[1] = mlx::core::allocator::free;
  v71 = v70;
  mlx::core::array::set_data(a4, (uint64_t)v27, (uint64_t)v70);
  v28 = v71;
  if (v71 == v70)
  {
    v29 = 4;
    v28 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_30;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_30:
  v53 = 0;
  v30 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(48 * v43));
  v67[0] = &unk_2513463C8;
  v67[1] = mlx::core::allocator::free;
  v67[3] = v67;
  v68 = v30;
  v69[0] = &unk_2513463C8;
  v69[3] = v69;
  v69[1] = mlx::core::allocator::free;
  v52 = 0;
  mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v68);
  sgesvdx_NEWLAPACK();
  if (v52)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"svd_impl: sgesvdx_ workspace calculation failed with code ", 58);
    std::ostream::operator<<();
    exception = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51, &v65);
    MEMORY[0x2426A8084](exception, &v65);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v48 = (int)*(float *)&v53;
  v31 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * (int)*(float *)&v53));
  v32 = v13 * v12;
  v64[0] = &unk_2513463C8;
  v64[1] = mlx::core::allocator::free;
  v64[3] = v64;
  v65 = v31;
  v66[0] = &unk_2513463C8;
  v66[3] = v66;
  v66[1] = mlx::core::allocator::free;
  if (v15 >= v32)
  {
    v33 = 0;
    v34 = 0;
    v35 = v15 / v32;
    if (v35 <= 1)
      v36 = 1;
    else
      v36 = v35;
    v42 = v36;
    do
    {
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v65);
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v68);
      sgesvdx_NEWLAPACK();
      if (v52)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v49);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"svd_impl: sgesvdx_ failed with code ", 36);
        std::ostream::operator<<();
        v40 = __cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51, v47);
        MEMORY[0x2426A8084](v40, v47);
        __cxa_throw(v40, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      if (HIDWORD(v53) != v43)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v49);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"svd_impl: expected ", 19);
        v37 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" singular values, but ", 22);
        v38 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" were computed.", 15);
        v39 = __cxa_allocate_exception(0x10uLL);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51, v47);
        MEMORY[0x2426A8084](v39, v47);
        __cxa_throw(v39, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      ++v34;
      v33 += 4 * v43;
    }
    while (v42 != v34);
  }
  mlx::core::array::Data::~Data((mlx::core::array::Data *)&v65);
  mlx::core::array::Data::~Data((mlx::core::array::Data *)&v68);
  mlx::core::array::~array((mlx::core::array *)v58);
}

void sub_24241E610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (SLOBYTE(STACK[0x287]) < 0)
  {
    operator delete((void *)STACK[0x270]);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
      mlx::core::array::Data::~Data((mlx::core::array::Data *)(v35 - 232));
      mlx::core::array::~array((mlx::core::array *)&STACK[0x228]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void mlx::core::SVD::eval(uint64_t a1, char ****a2, int ****a3, uint64_t a4, mlx::core::array *a5)
{
  void *exception;

  if (*((_DWORD *)**a2 + 14) != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "[SVD::eval] only supports float32.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mlx::core::svd_impl(*a2, *a3, *a3 + 2, *a3 + 4, a5);
}

void sub_24241E7F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::`anonymous namespace'::copy_inplace_dispatch<>(uint64_t result, uint64_t **a2, int a3, float a4)
{
  switch(*(_DWORD *)(*(_QWORD *)result + 56))
  {
    case 0:
      break;
    case 1:
      break;
    case 2:
      break;
    case 3:
      break;
    case 4:
      break;
    case 5:
      break;
    case 6:
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::copy(mlx::core::array *a1, mlx::core::array *this, int a3, float a4)
{
  mlx::core::scheduler *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  mlx::core::scheduler *v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  __n128 __p;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((a3 - 2) >= 2 && a3 != 0)
  {
    if (a3 != 1)
      goto LABEL_26;
    v11 = *((_QWORD *)a1 + 1);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(_QWORD **)a1;
      if (!v12)
      {
        v14 = v13[18];
        if (v14)
        {
          if (!*(_QWORD *)(v14 + 8) && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ v13[7]) & 0xFF00000000) == 0)
          {
            mlx::core::array::copy_shared_buffer(this, a1);
            goto LABEL_26;
          }
        }
      }
    }
    else
    {
      v13 = *(_QWORD **)a1;
    }
    v15 = v13[20];
    v16 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                      * v15));
    v17 = *(_QWORD *)a1;
    v24 = 0;
    __p = 0uLL;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v17 + 24), *(_QWORD *)(v17 + 32), (uint64_t)(*(_QWORD *)(v17 + 32) - *(_QWORD *)(v17 + 24)) >> 3);
    v18 = *(_BYTE *)(*(_QWORD *)a1 + 168);
    v27[0] = &unk_2513463C8;
    v27[1] = mlx::core::allocator::free;
    v28 = v27;
    mlx::core::array::set_data((uint64_t *)this, (uint64_t)v16, v15, &__p, v18, (uint64_t)v27);
    v19 = v28;
    if (v28 == v27)
    {
      v20 = 4;
      v19 = v27;
    }
    else
    {
      if (!v28)
        goto LABEL_24;
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_24:
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    goto LABEL_26;
  }
  v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                   * *(_QWORD *)(*(_QWORD *)this + 48)));
  v25[0] = &unk_2513463C8;
  v25[1] = mlx::core::allocator::free;
  v26 = v25;
  mlx::core::array::set_data((int ***)this, (uint64_t)v8, (uint64_t)v25);
  v9 = v26;
  if (v26 == v25)
  {
    v10 = 4;
    v9 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_26;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_26:
  if (a3 == 3)
    v21 = 2;
  else
    v21 = a3;
}

void sub_24241EA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::copy_inplace<long long>(uint64_t result, uint64_t **a2, int **a3, uint64_t **a4, uint64_t *a5, uint64_t a6, uint64_t a7, unsigned int a8, float a9)
{
  uint64_t v9;
  uint64_t v10;

  v9 = a7;
  v10 = a6;
  if (a8 < 2)
  if (a8 - 2 <= 1)
  {
    switch(*(_DWORD *)(*(_QWORD *)result + 56))
    {
      case 0:
        break;
      case 1:
        break;
      case 2:
        break;
      case 3:
        break;
      case 4:
        break;
      case 5:
        break;
      case 6:
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<BOOL>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t *v3;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  float v22;
  uint64_t v23;
  float *v24;
  size_t v25;
  uint64_t *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned int **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  unsigned int *v43;
  int **v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int **v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  int *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  _DWORD *v65;
  int v66;
  int **v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int **v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  unsigned int *v84;
  uint64_t v85;
  int **v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  int **v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  int *v104;
  uint64_t v105;
  unsigned __int8 *v106;
  _DWORD *v107;
  int v108;
  int **v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int **v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  _QWORD *v130;
  unsigned int v131;
  int **v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int **v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  unsigned int *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 *v152;
  float *v153;
  float v155;
  int **v156;
  int *v157;
  uint64_t v158;
  uint64_t v159;
  int *v160;
  float *v161;
  uint64_t v162;
  float v163;
  unsigned int **v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float *v173;
  unsigned int *v174;
  uint64_t v175;
  float v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  ldiv_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  int *v235;
  uint64_t v236;
  int *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int *v241;
  ldiv_t v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  int *v247;
  uint64_t v248;
  int v249;
  int *v250;
  uint64_t v251;
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int *v256;
  uint64_t v257;
  int v258;
  int i;
  int v260;
  uint64_t v261;
  int *v262;
  uint64_t v263;
  int v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  int *v268;
  uint64_t v269;
  int v270;
  int j;
  int v272;
  int k;
  int v274;
  uint64_t v275;
  int *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int *v281;
  uint64_t v282;
  uint64_t v283;
  int *v284;
  uint64_t v285;
  uint64_t v286;
  ldiv_t v287;
  int v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  int *v292;
  uint64_t v293;
  int *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  int *v302;
  uint64_t v303;
  int *v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  int v308;
  int *v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int *v318;
  uint64_t v319;
  int *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  int v324;
  int *v325;
  uint64_t v326;
  int v327;
  int v328;
  int *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  int *v336;
  uint64_t v337;
  int *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int *v342;
  ldiv_t v343;
  int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  int *v348;
  uint64_t v349;
  int v350;
  int *v351;
  uint64_t v352;
  int v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  int *v357;
  uint64_t v358;
  int v359;
  int m;
  int v361;
  uint64_t v362;
  int *v363;
  uint64_t v364;
  int v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  int *v369;
  uint64_t v370;
  int v371;
  int n;
  int v373;
  int ii;
  int v375;
  uint64_t v376;
  int *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int *v382;
  uint64_t v383;
  uint64_t v384;
  int *v385;
  uint64_t v386;
  uint64_t v387;
  ldiv_t v388;
  int v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  int *v393;
  uint64_t v394;
  int *v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  int *v403;
  uint64_t v404;
  int *v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  int v409;
  int *v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  int *v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  int v425;
  int *v426;
  uint64_t v427;
  int v428;
  int v429;
  int *v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int *v438;
  uint64_t v439;
  uint64_t v440;
  int *v441;
  uint64_t v442;
  uint64_t v443;
  ldiv_t v444;
  int v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  int *v449;
  uint64_t v450;
  uint64_t v451;
  int *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  int v457;
  int v458;
  uint64_t v459;
  int *v460;
  uint64_t v461;
  uint64_t v462;
  int *v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  uint64_t v467;
  int *v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  int v473;
  int v474;
  uint64_t v475;
  int *v476;
  uint64_t v477;
  uint64_t v478;
  int *v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  uint64_t v483;
  int *v484;
  uint64_t v485;
  int v486;
  uint64_t v487;
  int *v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  int *v495;
  uint64_t v496;
  uint64_t v497;
  int *v498;
  uint64_t v499;
  uint64_t v500;
  ldiv_t v501;
  float v502;
  int v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  int *v507;
  uint64_t v508;
  uint64_t v509;
  int *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  float v515;
  int v516;
  int v517;
  uint64_t v518;
  int *v519;
  uint64_t v520;
  uint64_t v521;
  int *v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  uint64_t v526;
  int *v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  float v532;
  int v533;
  int v534;
  uint64_t v535;
  int *v536;
  uint64_t v537;
  uint64_t v538;
  int *v539;
  uint64_t v540;
  uint64_t v541;
  int v542;
  uint64_t v543;
  int *v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  int *v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  float v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unsigned int *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  ldiv_t v563;
  uint64_t v564;
  uint64_t v565;
  ldiv_t v566;
  int v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  int v577;
  uint64_t v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t v586;
  unsigned int *v587;
  int v588;
  uint64_t v589;
  int v590;
  int v591;
  uint64_t v592;
  uint64_t v593;
  unsigned int *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  unsigned int *v602;
  int v603;
  uint64_t v604;
  int v605;
  int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unsigned int *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  unsigned int *v629;
  int v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  uint64_t v634;
  unsigned int *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  uint64_t *v655;
  uint64_t v656;
  unsigned int *v657;
  int v658;
  uint64_t v659;
  unsigned int *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  int v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t *v682;
  uint64_t v683;
  unsigned int *v684;
  int v685;
  uint64_t v686;
  uint64_t v687;
  _QWORD *v688;
  int *v689;
  unint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  ldiv_t v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  int quot;
  ldiv_t v701;
  uint64_t v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  int v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  int v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  int v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  int v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  unsigned int *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  ldiv_t v759;
  uint64_t v760;
  uint64_t v761;
  ldiv_t v762;
  int v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  int v769;
  int v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  int v774;
  int v775;
  uint64_t v776;
  uint64_t *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  int v781;
  unsigned int *v782;
  _DWORD *v783;
  uint64_t v784;
  int v785;
  uint64_t v786;
  int v787;
  uint64_t v788;
  unsigned int *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unsigned int *v798;
  _DWORD *v799;
  uint64_t v800;
  int v801;
  uint64_t v802;
  int v803;
  uint64_t v804;
  uint64_t v805;
  unsigned int *v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  int v819;
  int v820;
  uint64_t v821;
  uint64_t *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  unsigned int *v827;
  _DWORD *v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  uint64_t v833;
  unsigned int *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  int v841;
  int v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  int v847;
  int v848;
  uint64_t v849;
  uint64_t *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  int v854;
  unsigned int *v855;
  _DWORD *v856;
  uint64_t v857;
  uint64_t v858;
  unsigned int *v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  int v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  int v869;
  int v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  int v876;
  uint64_t v877;
  uint64_t *v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  int v882;
  unsigned int *v883;
  _DWORD *v884;
  uint64_t v885;
  uint64_t v886;
  _QWORD *v887;
  int *v888;
  unint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  ldiv_t v893;
  uint64_t v894;
  unint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  int v899;
  ldiv_t v900;
  uint64_t v901;
  int v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  int v907;
  int v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  int v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int v921;
  int v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  int v928;
  int v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  int v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  int v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  unsigned int *v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  ldiv_t v958;
  uint64_t v959;
  uint64_t v960;
  ldiv_t v961;
  int v962;
  int v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  int v968;
  int v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  int v973;
  int v974;
  uint64_t v975;
  uint64_t *v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  unsigned int *v981;
  _DWORD *v982;
  uint64_t v983;
  int v984;
  uint64_t v985;
  int v986;
  uint64_t v987;
  unsigned int *v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  unsigned int *v997;
  _DWORD *v998;
  uint64_t v999;
  int v1000;
  uint64_t v1001;
  int v1002;
  uint64_t v1003;
  uint64_t v1004;
  unsigned int *v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  int v1018;
  int v1019;
  uint64_t v1020;
  uint64_t *v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  int v1025;
  unsigned int *v1026;
  _DWORD *v1027;
  uint64_t v1028;
  uint64_t v1029;
  int v1030;
  uint64_t v1031;
  uint64_t v1032;
  unsigned int *v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int v1040;
  int v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  int v1046;
  int v1047;
  uint64_t v1048;
  uint64_t *v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  int v1053;
  unsigned int *v1054;
  _DWORD *v1055;
  uint64_t v1056;
  uint64_t v1057;
  unsigned int *v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  int v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  int v1068;
  int v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  int v1074;
  int v1075;
  uint64_t v1076;
  uint64_t *v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  int v1081;
  unsigned int *v1082;
  _DWORD *v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  unsigned int *v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  ldiv_t v1094;
  uint64_t v1095;
  ldiv_t v1096;
  int v1097;
  int v1098;
  uint64_t v1099;
  int v1100;
  uint64_t v1101;
  uint64_t v1102;
  int v1103;
  uint64_t v1104;
  int v1105;
  uint64_t v1106;
  uint64_t v1107;
  int v1108;
  uint64_t v1109;
  int v1110;
  uint64_t *v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  unsigned int *v1115;
  _QWORD *v1116;
  int v1117;
  uint64_t v1118;
  int v1119;
  uint64_t v1120;
  int v1121;
  uint64_t v1122;
  uint64_t v1123;
  unsigned int *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  int v1130;
  uint64_t v1131;
  uint64_t v1132;
  _QWORD *v1133;
  int v1134;
  uint64_t v1135;
  int v1136;
  uint64_t v1137;
  int v1138;
  uint64_t v1139;
  uint64_t v1140;
  unsigned int *v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  int v1151;
  uint64_t v1152;
  uint64_t v1153;
  int v1154;
  uint64_t v1155;
  int v1156;
  uint64_t *v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  unsigned int *v1161;
  _QWORD *v1162;
  int v1163;
  uint64_t v1164;
  uint64_t v1165;
  int v1166;
  uint64_t v1167;
  unsigned int *v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  int v1176;
  uint64_t v1177;
  uint64_t v1178;
  int v1179;
  uint64_t v1180;
  int v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  int v1185;
  uint64_t v1186;
  int v1187;
  uint64_t *v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  unsigned int *v1192;
  _QWORD *v1193;
  int v1194;
  uint64_t v1195;
  unsigned int *v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  int v1201;
  uint64_t v1202;
  int v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  int v1207;
  uint64_t v1208;
  int v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  int v1213;
  uint64_t v1214;
  int v1215;
  uint64_t *v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  unsigned int *v1220;
  uint64_t *v1221;
  int v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  unsigned int *v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  ldiv_t v1233;
  uint64_t v1234;
  ldiv_t v1235;
  int v1236;
  int v1237;
  uint64_t v1238;
  int v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  int v1243;
  uint64_t v1244;
  int v1245;
  uint64_t v1246;
  uint64_t v1247;
  int v1248;
  uint64_t v1249;
  int v1250;
  uint64_t *v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  unsigned int *v1255;
  float *v1256;
  int v1257;
  float v1258;
  uint64_t v1259;
  int v1260;
  uint64_t v1261;
  int v1262;
  uint64_t v1263;
  unsigned int *v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  int v1272;
  uint64_t v1273;
  uint64_t v1274;
  float *v1275;
  int v1276;
  float v1277;
  uint64_t v1278;
  int v1279;
  uint64_t v1280;
  int v1281;
  uint64_t v1282;
  unsigned int *v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  int v1292;
  uint64_t v1293;
  uint64_t v1294;
  int v1295;
  uint64_t v1296;
  int v1297;
  uint64_t *v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  unsigned int *v1302;
  float *v1303;
  int v1304;
  float v1305;
  uint64_t v1306;
  uint64_t v1307;
  int v1308;
  uint64_t v1309;
  unsigned int *v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  int v1317;
  uint64_t v1318;
  int v1319;
  uint64_t v1320;
  int v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  int v1325;
  uint64_t v1326;
  int v1327;
  uint64_t *v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  unsigned int *v1332;
  float *v1333;
  int v1334;
  float v1335;
  uint64_t v1336;
  unsigned int *v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  int v1342;
  uint64_t v1343;
  int v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  int v1348;
  uint64_t v1349;
  int v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  int v1354;
  uint64_t v1355;
  int v1356;
  uint64_t *v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  unsigned int *v1361;
  float *v1362;
  int v1363;
  float v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  unsigned int *v1390;
  unsigned int *v1391;
  unsigned int *v1392;
  unsigned int *v1393;
  unsigned int *v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  int v1430;
  int v1431;
  int v1432;
  int v1433;
  int v1434;
  int v1435;
  int v1436;
  int v1437;
  int v1438;
  int v1439;
  int v1440;
  int v1441;
  int v1442;
  int v1443;
  int v1444;
  int v1445;
  int v1446;
  int v1447;
  int v1448;
  int v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  _QWORD *v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  _QWORD *v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t *v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t *v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  int v1519;
  int v1520;
  int v1521;
  uint64_t v1522;
  int v1523;
  int v1524;
  int v1525;
  uint64_t v1526;
  int v1527;
  int v1528;
  int v1529;
  int v1530;
  int v1531;
  int v1532;
  int v1533;
  int v1534;
  int v1535;

  v3 = *a2;
  v5 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v6 = v3[6];
          if (v6)
            result = (uint64_t)memset((void *)v3[19], **(unsigned __int8 **)(*(_QWORD *)result + 152), v6);
          break;
        case 1:
          goto LABEL_37;
        case 2:
          v26 = *(uint64_t **)result;
          v27 = **(int ***)result;
          v28 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v27;
          switch(v28 >> 2)
          {
            case 1:
              v29 = *v27;
              if ((int)v29 >= 1)
              {
                v30 = (_BYTE *)v26[19];
                v31 = (_BYTE *)v3[19];
                v32 = *(_QWORD *)v26[3];
                do
                {
                  *v31++ = *v30;
                  v30 += v32;
                  --v29;
                }
                while (v29);
              }
              break;
            case 2:
              v186 = *v27;
              if (*v27 >= 1)
              {
                v187 = 0;
                v188 = 0;
                v189 = 0;
                v190 = v26[19];
                v191 = v3[19];
                v192 = v27[1];
                v193 = (uint64_t *)v26[3];
                v195 = *v193;
                v194 = v193[1];
                v196 = v195 - v194 * v192;
                do
                {
                  v197 = v192;
                  if ((int)v192 >= 1)
                  {
                    do
                    {
                      result = *(unsigned __int8 *)(v190 + v189);
                      *(_BYTE *)(v191 + v188++) = result;
                      v189 += v194;
                      --v197;
                    }
                    while (v197);
                  }
                  v189 += v196;
                  ++v187;
                }
                while (v187 != v186);
              }
              break;
            case 3:
              v198 = *v27;
              if (*v27 >= 1)
              {
                v199 = 0;
                result = 0;
                v200 = 0;
                v201 = v26[19];
                v202 = v3[19];
                v203 = v27[1];
                v204 = (_QWORD *)v26[3];
                v205 = v204[1];
                v206 = *v204 - v205 * v203;
                do
                {
                  if ((int)v203 < 1)
                  {
                    v213 = result;
                  }
                  else
                  {
                    v207 = 0;
                    v208 = v27[2];
                    v209 = v26[3];
                    v210 = v205 - v204[2] * v208;
                    do
                    {
                      if ((int)v208 < 1)
                      {
                        v213 = result;
                      }
                      else
                      {
                        v211 = *(_QWORD *)(v209 + 16);
                        v212 = v208;
                        do
                        {
                          v213 = result + 1;
                          *(_BYTE *)(v202 + result) = *(_BYTE *)(v201 + v200);
                          v200 += v211;
                          ++result;
                          --v212;
                        }
                        while (v212);
                      }
                      v200 += v210;
                      ++v207;
                      result = v213;
                    }
                    while (v207 != (_DWORD)v203);
                  }
                  v200 += v206;
                  ++v199;
                  result = v213;
                }
                while (v199 != v198);
              }
              break;
            case 4:
              v214 = *v27;
              if (*v27 >= 1)
              {
                v215 = 0;
                result = 0;
                v216 = 0;
                v217 = v26[19];
                v218 = v3[19];
                v219 = v27[1];
                v220 = (_QWORD *)v26[3];
                v221 = v220[1];
                v222 = *v220 - v221 * v219;
                do
                {
                  if ((int)v219 < 1)
                  {
                    v233 = result;
                  }
                  else
                  {
                    v223 = 0;
                    v224 = v27[2];
                    v225 = v26[3];
                    v226 = v221 - v220[2] * v224;
                    do
                    {
                      if ((int)v224 < 1)
                      {
                        v233 = result;
                      }
                      else
                      {
                        v227 = 0;
                        v228 = v27[3];
                        v229 = v26[3];
                        v230 = *(_QWORD *)(v225 + 16) - *(_QWORD *)(v225 + 24) * v228;
                        do
                        {
                          if ((int)v228 < 1)
                          {
                            v233 = result;
                          }
                          else
                          {
                            v231 = *(_QWORD *)(v229 + 24);
                            v232 = v228;
                            do
                            {
                              v233 = result + 1;
                              *(_BYTE *)(v218 + result) = *(_BYTE *)(v217 + v216);
                              v216 += v231;
                              ++result;
                              --v232;
                            }
                            while (v232);
                          }
                          v216 += v230;
                          ++v227;
                          result = v233;
                        }
                        while (v227 != (_DWORD)v224);
                      }
                      v216 += v226;
                      ++v223;
                      result = v233;
                    }
                    while (v223 != (_DWORD)v219);
                  }
                  v216 += v222;
                  ++v215;
                  result = v233;
                }
                while (v215 != v214);
              }
              break;
            default:
              v177 = v3[6];
              if (v177)
              {
                v178 = 0;
                v179 = v26[19];
                v180 = v3[19];
                v181 = ((unint64_t)v28 >> 2) - 1;
                v182 = v26[3];
                do
                {
                  v183 = 0;
                  if ((v181 & 0x80000000) == 0)
                  {
                    v184 = v181;
                    LODWORD(result) = v178;
                    do
                    {
                      v185 = ldiv((int)result, v27[v184]);
                      result = v185.quot;
                      v183 += *(_QWORD *)(v182 + 8 * v184--) * v185.rem;
                    }
                    while (v184 != -1);
                  }
                  *(_BYTE *)(v180 + v178++) = *(_BYTE *)(v179 + v183);
                }
                while (v178 != v177);
              }
              break;
          }
          break;
        case 3:
          v33 = *(unsigned int ***)result;
          v35 = **(_QWORD **)result;
          v34 = *(_QWORD *)(*(_QWORD *)result + 8);
          v36 = v34 - v35;
          switch((v34 - v35) >> 2)
          {
            case 1:
              v37 = (v36 << 30) - 0x100000000;
              v38 = *(_DWORD *)(v35 + (v37 >> 30));
              if (v38 >= 1)
              {
                v39 = v37 >> 29;
                v40 = *(_QWORD *)((char *)v33[3] + (v37 >> 29));
                v41 = *(_QWORD *)(v3[3] + v39);
                v42 = (_BYTE *)v3[19];
                v43 = v33[19];
                do
                {
                  *v42 = *(_BYTE *)v43;
                  v43 = (unsigned int *)((char *)v43 + v40);
                  v42 += v41;
                  --v38;
                }
                while (v38);
              }
              break;
            case 2:
              v589 = (v36 << 30) - 0x200000000;
              v590 = *(_DWORD *)(v35 + (v589 >> 30));
              if (v590 >= 1)
              {
                v591 = 0;
                v592 = 0;
                v593 = 0;
                v594 = v33[3];
                v595 = v589 >> 29;
                v596 = *(_QWORD *)((char *)v594 + (v589 >> 29));
                v597 = v3[3];
                v598 = *(_QWORD *)(v597 + v595);
                result = (v36 << 30) - 0x100000000;
                v599 = *(_QWORD *)((char *)v594 + (result >> 29));
                v600 = *(_QWORD *)(v597 + (result >> 29));
                v601 = *(_DWORD *)(v35 + (result >> 30));
                do
                {
                  if (v601 >= 1)
                  {
                    result = v3[19];
                    v602 = v33[19];
                    v603 = v601;
                    do
                    {
                      *(_BYTE *)(result + v593) = *((_BYTE *)v602 + v592);
                      result += v600;
                      v602 = (unsigned int *)((char *)v602 + v599);
                      --v603;
                    }
                    while (v603);
                  }
                  v592 += v596;
                  v593 += v598;
                  ++v591;
                }
                while (v591 != v590);
              }
              break;
            case 3:
              v604 = (v36 << 30) - 0x300000000;
              v605 = *(_DWORD *)(v35 + (v604 >> 30));
              if (v605 >= 1)
              {
                v606 = 0;
                v607 = 0;
                v608 = 0;
                v609 = v36 << 30;
                v610 = v33[3];
                v611 = v604 >> 29;
                v612 = *(_QWORD *)((char *)v610 + (v604 >> 29));
                v613 = v3[3];
                v614 = *(_QWORD *)(v613 + v611);
                v615 = v609 - 0x200000000;
                v616 = (v609 - 0x200000000) >> 29;
                v617 = v609 - 0x100000000;
                v618 = *(_QWORD *)((char *)v610 + v616);
                v619 = *(_QWORD *)(v613 + v616);
                result = *(unsigned int *)(v35 + (v615 >> 30));
                v620 = v617 >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    v621 = 0;
                    v622 = *(_QWORD *)&v610[2 * v620];
                    v623 = *(_QWORD *)(v613 + 8 * v620);
                    v624 = v607;
                    v625 = *(_DWORD *)(v35 + 4 * v620);
                    v626 = v608;
                    v627 = *a2;
                    do
                    {
                      if (v625 >= 1)
                      {
                        v628 = v627[19];
                        v629 = v33[19];
                        v630 = v625;
                        do
                        {
                          *(_BYTE *)(v628 + v626) = *((_BYTE *)v629 + v624);
                          v628 += v623;
                          v629 = (unsigned int *)((char *)v629 + v622);
                          --v630;
                        }
                        while (v630);
                      }
                      v624 += v618;
                      v626 += v619;
                      ++v621;
                    }
                    while (v621 != (_DWORD)result);
                  }
                  v607 += v612;
                  v608 += v614;
                  ++v606;
                }
                while (v606 != v605);
              }
              break;
            case 4:
              v631 = (v36 << 30) - 0x400000000;
              v1520 = *(_DWORD *)(v35 + (v631 >> 30));
              if (v1520 >= 1)
              {
                v632 = 0;
                v633 = 0;
                v634 = 0;
                v635 = v33[3];
                v636 = v631 >> 29;
                v637 = v3[3];
                v1486 = *(_QWORD *)(v637 + v636);
                v1503 = *(_QWORD *)((char *)v635 + v636);
                v638 = v36 << 30;
                v639 = (v36 << 30) - 0x300000000;
                v640 = *(_QWORD *)((char *)v635 + (v639 >> 29));
                v641 = *(_QWORD *)(v637 + (v639 >> 29));
                result = *(unsigned int *)(v35 + (v639 >> 30));
                v1470 = (v638 - 0x200000000) >> 32;
                v642 = (v638 - 0x100000000) >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    v643 = 0;
                    v644 = *(_QWORD *)&v635[2 * v1470];
                    v645 = *(_QWORD *)(v637 + 8 * v1470);
                    v646 = v633;
                    v647 = *(_DWORD *)(v35 + 4 * v1470);
                    v648 = v634;
                    do
                    {
                      if (v647 >= 1)
                      {
                        v649 = 0;
                        v650 = *(_QWORD *)&v635[2 * v642];
                        v651 = *(_QWORD *)(v637 + 8 * v642);
                        v652 = v646;
                        v653 = *(_DWORD *)(v35 + 4 * v642);
                        v654 = v648;
                        v655 = *a2;
                        do
                        {
                          if (v653 >= 1)
                          {
                            v656 = v655[19];
                            v657 = v33[19];
                            v658 = v653;
                            do
                            {
                              *(_BYTE *)(v656 + v654) = *((_BYTE *)v657 + v652);
                              v656 += v651;
                              v657 = (unsigned int *)((char *)v657 + v650);
                              --v658;
                            }
                            while (v658);
                          }
                          v652 += v644;
                          v654 += v645;
                          ++v649;
                        }
                        while (v649 != v647);
                      }
                      v646 += v640;
                      v648 += v641;
                      ++v643;
                    }
                    while (v643 != (_DWORD)result);
                  }
                  v633 += v1503;
                  v634 += v1486;
                  ++v632;
                }
                while (v632 != v1520);
              }
              break;
            case 5:
              v659 = (v36 << 30) - 0x500000000;
              v1431 = *(_DWORD *)(v35 + (v659 >> 30));
              if (v1431 >= 1)
              {
                v1441 = 0;
                v1451 = 0;
                v1460 = 0;
                v660 = v33[3];
                v661 = v659 >> 29;
                v662 = v3[3];
                v1411 = *(_QWORD *)(v662 + v661);
                v1421 = *(_QWORD *)((char *)v660 + v661);
                v663 = (v36 << 30) - 0x400000000;
                v1487 = *(_QWORD *)(v662 + (v663 >> 29));
                v1504 = *(_QWORD *)((char *)v660 + (v663 >> 29));
                v1521 = *(_DWORD *)(v35 + (v663 >> 30));
                v1401 = (uint64_t)((v36 << 30) - 0x300000000) >> 32;
                v1471 = (uint64_t)((v36 << 30) - 0x200000000) >> 32;
                v664 = (uint64_t)((v36 << 30) - 0x100000000) >> 32;
                do
                {
                  if (v1521 >= 1)
                  {
                    v665 = 0;
                    v666 = *(_QWORD *)&v660[2 * v1401];
                    v667 = *(_QWORD *)(v662 + 8 * v1401);
                    v669 = v1451;
                    v668 = v1460;
                    v670 = *(_DWORD *)(v35 + 4 * v1401);
                    do
                    {
                      if (v670 >= 1)
                      {
                        v671 = 0;
                        v672 = *(_QWORD *)&v660[2 * v1471];
                        v673 = *(_QWORD *)(v662 + 8 * v1471);
                        v674 = v668;
                        v675 = *(_DWORD *)(v35 + 4 * v1471);
                        v676 = v669;
                        do
                        {
                          if (v675 >= 1)
                          {
                            v677 = 0;
                            v678 = *(_QWORD *)&v660[2 * v664];
                            v679 = *(_QWORD *)(v662 + 8 * v664);
                            v680 = v674;
                            result = *(unsigned int *)(v35 + 4 * v664);
                            v681 = v676;
                            v682 = *a2;
                            do
                            {
                              if ((int)result >= 1)
                              {
                                v683 = v682[19];
                                v684 = v33[19];
                                v685 = result;
                                do
                                {
                                  *(_BYTE *)(v683 + v681) = *((_BYTE *)v684 + v680);
                                  v683 += v679;
                                  v684 = (unsigned int *)((char *)v684 + v678);
                                  --v685;
                                }
                                while (v685);
                              }
                              v680 += v672;
                              v681 += v673;
                              ++v677;
                            }
                            while (v677 != v675);
                          }
                          v674 += v666;
                          v676 += v667;
                          ++v671;
                        }
                        while (v671 != v670);
                      }
                      v668 += v1504;
                      v669 += v1487;
                      ++v665;
                    }
                    while (v665 != v1521);
                  }
                  v1460 += v1421;
                  v1451 += v1411;
                  ++v1441;
                }
                while (v1441 != v1431);
              }
              break;
            default:
              LODWORD(v554) = 1;
              v555 = -20;
              do
              {
                v554 = *(int *)(v34 + v555) * (uint64_t)(int)v554;
                v555 += 4;
              }
              while (v555);
              v1390 = v33[6];
              if (v1390)
              {
                v556 = 0;
                v1370 = *v3;
                v557 = (v36 << 30) - 0x500000000;
                v1380 = (v36 >> 2) - 1;
                v558 = v33[3];
                v1375 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v559 = v3[3];
                v1410 = *(_QWORD *)(v559 + (v557 >> 29));
                v1420 = *(_QWORD *)((char *)v558 + (v557 >> 29));
                v1430 = *(_DWORD *)(v35 + (v557 >> 30));
                v1365 = (uint64_t)((v36 << 30) - 0x400000000) >> 32;
                v1400 = (uint64_t)((v36 << 30) - 0x300000000) >> 32;
                v1469 = (uint64_t)((v36 << 30) - 0x200000000) >> 32;
                v560 = (uint64_t)((v36 << 30) - 0x100000000) >> 32;
                v1385 = v554;
                do
                {
                  v561 = v1380;
                  if ((v1380 & 0x80000000) != 0)
                  {
                    v562 = 0;
                  }
                  else
                  {
                    v562 = 0;
                    LODWORD(result) = v556;
                    do
                    {
                      v563 = ldiv((int)result, *(int *)(v35 + 4 * v561));
                      result = v563.quot;
                      v562 += *(_QWORD *)&v558[2 * v561--] * v563.rem;
                    }
                    while (v561 != -1);
                  }
                  v564 = v1375;
                  v1395 = v556;
                  v565 = 0;
                  if ((v1375 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v556;
                    do
                    {
                      v566 = ldiv((int)result, *(int *)(v1370 + 4 * v564));
                      result = v566.quot;
                      v565 += *(_QWORD *)(v559 + 8 * v564--) * v566.rem;
                    }
                    while (v564 != -1);
                  }
                  if (v1430 >= 1)
                  {
                    v567 = 0;
                    v1485 = *(_QWORD *)(v559 + 8 * v1365);
                    v1502 = *(_QWORD *)&v558[2 * v1365];
                    v1519 = *(_DWORD *)(v35 + 4 * v1365);
                    do
                    {
                      v1440 = v567;
                      v1450 = v565;
                      if (v1519 >= 1)
                      {
                        v568 = 0;
                        v569 = *(_QWORD *)&v558[2 * v1400];
                        v570 = *(_QWORD *)(v559 + 8 * v1400);
                        v571 = v565;
                        v572 = v562;
                        v573 = *(_DWORD *)(v35 + 4 * v1400);
                        do
                        {
                          if (v573 >= 1)
                          {
                            LODWORD(result) = 0;
                            v574 = *(_QWORD *)&v558[2 * v1469];
                            v575 = *(_QWORD *)(v559 + 8 * v1469);
                            v576 = v572;
                            v577 = *(_DWORD *)(v35 + 4 * v1469);
                            v578 = v571;
                            do
                            {
                              if (v577 >= 1)
                              {
                                v579 = 0;
                                v580 = *(_QWORD *)&v558[2 * v560];
                                v581 = *(_QWORD *)(v559 + 8 * v560);
                                v582 = v576;
                                v583 = *(_DWORD *)(v35 + 4 * v560);
                                v584 = v578;
                                v585 = *a2;
                                do
                                {
                                  if (v583 >= 1)
                                  {
                                    v586 = v585[19];
                                    v587 = v33[19];
                                    v588 = v583;
                                    do
                                    {
                                      *(_BYTE *)(v586 + v584) = *((_BYTE *)v587 + v582);
                                      v586 += v581;
                                      v587 = (unsigned int *)((char *)v587 + v580);
                                      --v588;
                                    }
                                    while (v588);
                                  }
                                  v582 += v574;
                                  v584 += v575;
                                  ++v579;
                                }
                                while (v579 != v577);
                              }
                              v576 += v569;
                              v578 += v570;
                              result = (result + 1);
                            }
                            while ((_DWORD)result != v573);
                          }
                          v572 += v1502;
                          v571 += v1485;
                          ++v568;
                        }
                        while (v568 != v1519);
                      }
                      v562 += v1420;
                      v565 = v1450 + v1410;
                      v567 = v1440 + 1;
                    }
                    while (v1440 + 1 != v1430);
                  }
                  v556 = v1395 + v1385;
                }
                while ((unint64_t)v1390 > v1395 + v1385);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v7 = 0;
            v8 = **(_BYTE **)(*(_QWORD *)result + 152);
            v9 = v3[19];
            do
              *(_BYTE *)(v9 + v7++) = v8;
            while ((*a2)[6] > v7);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          v44 = *(int ***)result;
          v45 = **(int ***)result;
          switch(v44[1] - *v44)
          {
            case 1:
              if (*v45 >= 1)
              {
                v46 = 0;
                v47 = 0;
                v48 = v44[19];
                v49 = v3[19];
                do
                {
                  *(_BYTE *)(v49 + v46) = *((_BYTE *)v48 + v47);
                  v47 += *(_QWORD *)v44[3];
                  ++v46;
                }
                while (**v44 > (int)v46);
              }
              break;
            case 2:
              v243 = *v45;
              if (*v45 >= 1)
              {
                v244 = 0;
                v245 = 0;
                v246 = 0;
                v247 = v44[19];
                v248 = v3[19];
                do
                {
                  v249 = v45[1];
                  if (v249 < 1)
                  {
                    v250 = v44[3];
                    v251 = *((_QWORD *)v250 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v248 + v245 + result) = *((_BYTE *)v247 + v246);
                      v250 = v44[3];
                      v251 = *((_QWORD *)v250 + 1);
                      v246 += v251;
                      v45 = *v44;
                      v249 = (*v44)[1];
                      ++result;
                    }
                    while ((int)result < v249);
                    v243 = *v45;
                    v245 += result;
                  }
                  v246 = *(_QWORD *)v250 + v246 - v251 * v249;
                  ++v244;
                }
                while (v244 < v243);
              }
              break;
            case 3:
              v252 = *v45;
              if (*v45 >= 1)
              {
                v253 = 0;
                v254 = 0;
                v255 = 0;
                v256 = v44[19];
                v257 = v3[19];
                do
                {
                  v258 = v45[1];
                  if (v258 < 1)
                  {
                    v262 = v44[3];
                    v263 = *((_QWORD *)v262 + 1);
                  }
                  else
                  {
                    for (i = 0; i < v258; ++i)
                    {
                      v260 = v45[2];
                      if (v260 < 1)
                      {
                        v262 = v44[3];
                        result = *((_QWORD *)v262 + 2);
                      }
                      else
                      {
                        v261 = 0;
                        do
                        {
                          *(_BYTE *)(v257 + v254 + v261) = *((_BYTE *)v256 + v255);
                          v262 = v44[3];
                          result = *((_QWORD *)v262 + 2);
                          v255 += result;
                          v45 = *v44;
                          v260 = (*v44)[2];
                          ++v261;
                        }
                        while ((int)v261 < v260);
                        v254 += v261;
                      }
                      v263 = *((_QWORD *)v262 + 1);
                      v255 = v263 + v255 - result * v260;
                      v258 = v45[1];
                    }
                    v252 = *v45;
                  }
                  v255 = *(_QWORD *)v262 + v255 - v263 * v258;
                  ++v253;
                }
                while (v253 < v252);
              }
              break;
            case 4:
              v264 = *v45;
              if (*v45 >= 1)
              {
                v265 = 0;
                v266 = 0;
                v267 = 0;
                v268 = v44[19];
                v269 = v3[19];
                do
                {
                  v270 = v45[1];
                  if (v270 < 1)
                  {
                    v276 = v44[3];
                    v278 = *((_QWORD *)v276 + 1);
                  }
                  else
                  {
                    for (j = 0; j < v270; ++j)
                    {
                      v272 = v45[2];
                      if (v272 < 1)
                      {
                        v276 = v44[3];
                        v277 = *((_QWORD *)v276 + 2);
                      }
                      else
                      {
                        for (k = 0; k < v272; ++k)
                        {
                          v274 = v45[3];
                          if (v274 < 1)
                          {
                            v276 = v44[3];
                            result = *((_QWORD *)v276 + 3);
                          }
                          else
                          {
                            v275 = 0;
                            do
                            {
                              *(_BYTE *)(v269 + v266 + v275) = *((_BYTE *)v268 + v267);
                              v276 = v44[3];
                              result = *((_QWORD *)v276 + 3);
                              v267 += result;
                              v45 = *v44;
                              v274 = (*v44)[3];
                              ++v275;
                            }
                            while ((int)v275 < v274);
                            v266 += v275;
                          }
                          v277 = *((_QWORD *)v276 + 2);
                          v267 = v277 + v267 - result * v274;
                          v272 = v45[2];
                        }
                      }
                      v278 = *((_QWORD *)v276 + 1);
                      v267 = v278 + v267 - v277 * v272;
                      v270 = v45[1];
                    }
                    v264 = *v45;
                  }
                  v267 = *(_QWORD *)v276 + v267 - v278 * v270;
                  ++v265;
                }
                while (v265 < v264);
              }
              break;
            default:
              if (v3[6])
              {
                v234 = 0;
                v235 = v44[19];
                v236 = v3[19];
                do
                {
                  v237 = *v44;
                  v238 = (unint64_t)((char *)v44[1] - (char *)*v44) >> 2;
                  v239 = 0;
                  v240 = (v238 - 1);
                  if ((int)v238 - 1 >= 0)
                  {
                    v241 = v44[3];
                    LODWORD(result) = v234;
                    do
                    {
                      v242 = ldiv((int)result, v237[v240]);
                      result = v242.quot;
                      v239 += *(_QWORD *)&v241[2 * v240--] * v242.rem;
                    }
                    while (v240 != -1);
                  }
                  *(_BYTE *)(v236 + v234++) = *((_BYTE *)v235 + v239);
                }
                while (v234 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v50 = *(int ***)result;
          v51 = (uint64_t *)(*(_QWORD *)result + 24);
          v52 = v3 + 3;
          v53 = **(_QWORD **)result;
          v54 = *(_QWORD *)(*(_QWORD *)result + 8);
          v55 = v54 - v53;
          switch((v54 - v53) >> 2)
          {
            case 1:
              v56 = (v55 << 30) - 0x100000000;
              v57 = *(_DWORD *)(v53 + (v56 >> 30));
              if (v57 >= 1)
              {
                v58 = v56 >> 29;
                v59 = *(_QWORD *)(*v51 + (v56 >> 29));
                v60 = *(_QWORD *)(*v52 + v58);
                v61 = (_BYTE *)v3[19];
                v62 = v50[19];
                do
                {
                  *v61 = *(_BYTE *)v62;
                  v62 = (int *)((char *)v62 + v59);
                  v61 += v60;
                  --v57;
                }
                while (v57);
              }
              break;
            case 2:
              v707 = (v55 << 30) - 0x200000000;
              v708 = *(_DWORD *)(v53 + (v707 >> 30));
              if (v708 >= 1)
              {
                v709 = 0;
                v710 = 0;
                v711 = 0;
                v712 = v707 >> 29;
                v713 = *(_QWORD *)(*v51 + (v707 >> 29));
                v714 = *(_QWORD *)(*v52 + v712);
                do
                {
                  v715 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v716 = *(int *)((char *)*v50 + (v715 >> 30));
                  if (v716 >= 1)
                  {
                    v717 = v715 >> 29;
                    v718 = *(_QWORD *)((char *)v50[3] + (v715 >> 29));
                    v719 = *(_QWORD *)(*v52 + v717);
                    result = (*a2)[19];
                    v720 = *(_QWORD *)(*(_QWORD *)v5 + 152);
                    do
                    {
                      *(_BYTE *)(result + v711) = *(_BYTE *)(v720 + v710);
                      result += v719;
                      v720 += v718;
                      --v716;
                    }
                    while (v716);
                  }
                  v710 += v713;
                  v711 += v714;
                  ++v709;
                }
                while (v709 != v708);
              }
              break;
            case 3:
              v721 = (v55 << 30) - 0x300000000;
              v722 = *(_DWORD *)(v53 + (v721 >> 30));
              if (v722 >= 1)
              {
                v723 = 0;
                v724 = 0;
                v725 = 0;
                v726 = v721 >> 29;
                v727 = *(_QWORD *)(*v51 + (v721 >> 29));
                v728 = *(_QWORD *)(*v52 + v726);
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v729 = *(int *)((char *)*v50 + (result >> 30));
                  if (v729 >= 1)
                  {
                    v730 = 0;
                    v731 = result >> 29;
                    result = *(_QWORD *)((char *)v50[3] + (result >> 29));
                    v732 = *(_QWORD *)(*v52 + v731);
                    v733 = v724;
                    v734 = v725;
                    do
                    {
                      v735 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v736 = *(int *)((char *)*v50 + (v735 >> 30));
                      if (v736 >= 1)
                      {
                        v737 = v735 >> 29;
                        v738 = *(_QWORD *)((char *)v50[3] + (v735 >> 29));
                        v739 = *(_QWORD *)(*v52 + v737);
                        v740 = (*a2)[19];
                        v741 = *(_QWORD *)(*(_QWORD *)v5 + 152);
                        do
                        {
                          *(_BYTE *)(v740 + v734) = *(_BYTE *)(v741 + v733);
                          v740 += v739;
                          v741 += v738;
                          --v736;
                        }
                        while (v736);
                      }
                      v733 += result;
                      v734 += v732;
                      ++v730;
                    }
                    while (v730 != v729);
                  }
                  v724 += v727;
                  v725 += v728;
                  ++v723;
                }
                while (v723 != v722);
              }
              break;
            case 4:
              goto LABEL_576;
            case 5:
              v742 = (v55 << 30) - 0x500000000;
              v743 = *(_DWORD *)(v53 + (v742 >> 30));
              if (v743 >= 1)
              {
                v744 = 0;
                v745 = 0;
                v746 = v742 >> 29;
                v747 = *(_QWORD *)(*v51 + v746);
                v748 = *(_QWORD *)(*v52 + v746);
                do
                {
                  v744 += v747;
                  v745 += v748;
                  --v743;
                }
                while (v743);
              }
              break;
            default:
              LODWORD(v686) = 1;
              v687 = -20;
              do
              {
                v686 = *(int *)(v54 + v687) * (uint64_t)(int)v686;
                v687 += 4;
              }
              while (v687);
              if (v50[6])
              {
                result = 0;
                v688 = *(_QWORD **)v5;
                v1505 = v52;
                v1472 = v686;
                do
                {
                  v689 = *v50;
                  v690 = (unint64_t)((char *)v50[1] - (char *)*v50) >> 2;
                  v691 = (v690 - 1);
                  v1522 = result;
                  v1488 = v688;
                  v692 = 0;
                  if ((int)v690 - 1 >= 0)
                  {
                    v693 = *v51;
                    do
                    {
                      v694 = ldiv((int)result, v689[v691]);
                      LODWORD(result) = v694.quot;
                      v692 += *(_QWORD *)(v693 + 8 * v691--) * v694.rem;
                    }
                    while (v691 != -1);
                  }
                  v695 = **a2;
                  v696 = (unint64_t)((*a2)[1] - v695) >> 2;
                  v697 = *v1505;
                  v698 = 0;
                  v699 = (v696 - 1);
                  if ((int)v696 - 1 >= 0)
                  {
                    quot = v1522;
                    do
                    {
                      v701 = ldiv(quot, *(int *)(v695 + 4 * v699));
                      quot = v701.quot;
                      v698 += *(_QWORD *)(v697 + 8 * v699--) * v701.rem;
                    }
                    while (v699 != -1);
                  }
                  v688 = v1488;
                  v702 = ((v1488[1] - *v1488) << 30) - 0x500000000;
                  v703 = *(int *)((char *)v689 + (v702 >> 30));
                  if (v703 >= 1)
                  {
                    v704 = v702 >> 29;
                    v705 = *(_QWORD *)(*v51 + v704);
                    v706 = *(_QWORD *)(v697 + v704);
                    do
                    {
                      v692 += v705;
                      v698 += v706;
                      --v703;
                    }
                    while (v703);
                    v688 = *(_QWORD **)v5;
                  }
                  result = v1522 + v1472;
                }
                while (v688[6] > (unint64_t)(v1522 + v1472));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v10 = v3[6];
          if (v10)
          {
            v11 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v12 = (_DWORD *)v3[19];
            do
            {
              *v12++ = v11;
              --v10;
            }
            while (v10);
          }
          break;
        case 1:
          v63 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v63)
          {
            v64 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v65 = (_DWORD *)v3[19];
            do
            {
              v66 = *v64++;
              *v65++ = v66;
              --v63;
            }
            while (v63);
          }
          break;
        case 2:
          v67 = *(int ***)result;
          v68 = **(int ***)result;
          v69 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v68;
          switch(v69 >> 2)
          {
            case 1:
              if (*v68 >= 1)
              {
                v70 = 0;
                v71 = v67[19];
                v72 = v3[19];
                v73 = *(_QWORD *)v67[3];
                do
                {
                  *(_DWORD *)(v72 + 4 * v70) = *(unsigned __int8 *)v71;
                  v71 = (int *)((char *)v71 + v73);
                  ++v70;
                }
                while (*v68 > (int)v70);
              }
              break;
            case 2:
              v288 = *v68;
              if (*v68 >= 1)
              {
                v289 = 0;
                v290 = 0;
                v291 = 0;
                v292 = v67[19];
                v293 = v3[19];
                v294 = v67[3];
                v295 = *(_QWORD *)v294;
                v296 = *((_QWORD *)v294 + 1);
                v297 = v68[1];
                do
                {
                  if (v297 >= 1)
                  {
                    v298 = 0;
                    do
                    {
                      *(_DWORD *)(v293 + 4 * v290 + 4 * v298) = *((unsigned __int8 *)v292 + v291);
                      v291 += v296;
                      v297 = v68[1];
                      ++v298;
                    }
                    while ((int)v298 < v297);
                    v288 = *v68;
                    v290 += v298;
                  }
                  v291 = v291 + v295 - v296 * v297;
                  ++v289;
                }
                while (v289 < v288);
              }
              break;
            case 3:
              result = *v68;
              if ((int)result >= 1)
              {
                v299 = 0;
                v300 = 0;
                v301 = 0;
                v302 = v67[19];
                v303 = v3[19];
                v304 = v67[3];
                v305 = *(_QWORD *)v304;
                v306 = *((_QWORD *)v304 + 1);
                v307 = v68[1];
                do
                {
                  if (v307 >= 1)
                  {
                    v308 = 0;
                    v309 = v67[3];
                    v310 = *((_QWORD *)v304 + 2);
                    v311 = v68[2];
                    do
                    {
                      if (v311 >= 1)
                      {
                        v312 = 0;
                        v313 = *((_QWORD *)v309 + 2);
                        do
                        {
                          *(_DWORD *)(v303 + 4 * v300 + 4 * v312) = *((unsigned __int8 *)v302 + v301);
                          v301 += v313;
                          v311 = v68[2];
                          ++v312;
                        }
                        while ((int)v312 < v311);
                        v307 = v68[1];
                        v300 += v312;
                      }
                      v301 = v301 + v306 - v310 * v311;
                      ++v308;
                    }
                    while (v308 < v307);
                    result = *v68;
                  }
                  v301 = v301 + v305 - v306 * v307;
                  ++v299;
                }
                while (v299 < (int)result);
              }
              break;
            case 4:
              v314 = *v68;
              if (*v68 >= 1)
              {
                v315 = 0;
                v316 = 0;
                v317 = 0;
                v318 = v67[19];
                v319 = v3[19];
                v320 = v67[3];
                v321 = *(_QWORD *)v320;
                v322 = *((_QWORD *)v320 + 1);
                v323 = v68[1];
                do
                {
                  if (v323 >= 1)
                  {
                    v324 = 0;
                    v325 = v67[3];
                    v326 = *((_QWORD *)v320 + 2);
                    v327 = v68[2];
                    do
                    {
                      if (v327 >= 1)
                      {
                        v328 = 0;
                        v329 = v67[3];
                        v330 = *((_QWORD *)v325 + 2);
                        v331 = *((_QWORD *)v325 + 3);
                        v332 = v68[3];
                        do
                        {
                          if (v332 >= 1)
                          {
                            v333 = 0;
                            v334 = *((_QWORD *)v329 + 3);
                            do
                            {
                              *(_DWORD *)(v319 + 4 * v316 + 4 * v333) = *((unsigned __int8 *)v318 + v317);
                              v317 += v334;
                              v332 = v68[3];
                              ++v333;
                            }
                            while ((int)v333 < v332);
                            v327 = v68[2];
                            v316 += v333;
                          }
                          v317 = v317 + v330 - v331 * v332;
                          ++v328;
                        }
                        while (v328 < v327);
                        v323 = v68[1];
                      }
                      v317 = v317 + v322 - v326 * v327;
                      ++v324;
                    }
                    while (v324 < v323);
                    v314 = *v68;
                  }
                  result = v323;
                  v317 = v317 + v321 - v322 * v323;
                  ++v315;
                }
                while (v315 < v314);
              }
              break;
            default:
              v279 = v3[6];
              if (v279)
              {
                v280 = 0;
                v281 = v67[19];
                v282 = v3[19];
                v283 = ((unint64_t)v69 >> 2) - 1;
                v284 = v67[3];
                do
                {
                  v285 = 0;
                  if ((v283 & 0x80000000) == 0)
                  {
                    v286 = v283;
                    LODWORD(result) = v280;
                    do
                    {
                      v287 = ldiv((int)result, v68[v286]);
                      result = v287.quot;
                      v285 += *(_QWORD *)&v284[2 * v286--] * v287.rem;
                    }
                    while (v286 != -1);
                  }
                  *(_DWORD *)(v282 + 4 * v280++) = *((unsigned __int8 *)v281 + v285);
                }
                while (v280 != v279);
              }
              break;
          }
          break;
        case 3:
          v74 = *(unsigned int ***)result;
          v76 = **(_QWORD **)result;
          v75 = *(_QWORD *)(*(_QWORD *)result + 8);
          v77 = v75 - v76;
          switch((v75 - v76) >> 2)
          {
            case 1:
              v78 = (v77 << 30) - 0x100000000;
              v79 = *(_DWORD *)(v76 + (v78 >> 30));
              if (v79 >= 1)
              {
                v80 = v78 >> 29;
                v81 = *(_QWORD *)((char *)v74[3] + (v78 >> 29));
                v82 = *(_QWORD *)(v3[3] + v80);
                v83 = (_DWORD *)v3[19];
                v84 = v74[19];
                v85 = 4 * v82;
                do
                {
                  *v83 = *(unsigned __int8 *)v84;
                  v84 = (unsigned int *)((char *)v84 + v81);
                  v83 = (_DWORD *)((char *)v83 + v85);
                  --v79;
                }
                while (v79);
              }
              break;
            case 2:
              v784 = (v77 << 30) - 0x200000000;
              v785 = *(_DWORD *)(v76 + (v784 >> 30));
              if (v785 >= 1)
              {
                v786 = 0;
                v787 = 0;
                v788 = 0;
                v789 = v74[3];
                v790 = v784 >> 29;
                v791 = *(_QWORD *)((char *)v789 + (v784 >> 29));
                v792 = v3[3];
                v793 = (v77 << 30) - 0x100000000;
                v794 = *(_QWORD *)((char *)v789 + (v793 >> 29));
                v795 = v793 >> 32;
                v796 = 4 * *(_QWORD *)(v792 + v790);
                v797 = 4 * *(_QWORD *)(v792 + (v793 >> 29));
                do
                {
                  result = *(unsigned int *)(v76 + 4 * v795);
                  if ((int)result >= 1)
                  {
                    v798 = v74[19];
                    v799 = (_DWORD *)(v3[19] + v786);
                    do
                    {
                      *v799 = *((unsigned __int8 *)v798 + v788);
                      v799 = (_DWORD *)((char *)v799 + v797);
                      v798 = (unsigned int *)((char *)v798 + v794);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v788 += v791;
                  ++v787;
                  v786 += v796;
                }
                while (v787 != v785);
              }
              break;
            case 3:
              v800 = (v77 << 30) - 0x300000000;
              v801 = *(_DWORD *)(v76 + (v800 >> 30));
              if (v801 >= 1)
              {
                v802 = 0;
                v803 = 0;
                v804 = 0;
                v805 = v77 << 30;
                v806 = v74[3];
                v807 = v800 >> 29;
                v808 = *(_QWORD *)((char *)v806 + (v800 >> 29));
                v809 = v3[3];
                v810 = *(_QWORD *)(v809 + v807);
                v811 = v805 - 0x200000000;
                v812 = (v805 - 0x200000000) >> 29;
                v813 = v805 - 0x100000000;
                v814 = *(_QWORD *)((char *)v806 + v812);
                v815 = v811 >> 32;
                v816 = *(_QWORD *)(v809 + v812);
                v817 = v813 >> 32;
                result = 4 * v810;
                v818 = 4 * v816;
                do
                {
                  v819 = *(_DWORD *)(v76 + 4 * v815);
                  if (v819 >= 1)
                  {
                    v820 = 0;
                    v821 = *(_QWORD *)&v806[2 * v817];
                    v822 = *a2;
                    v823 = 4 * *(_QWORD *)(v809 + 8 * v817);
                    v824 = v802;
                    v825 = v804;
                    do
                    {
                      v826 = *(_DWORD *)(v76 + 4 * v817);
                      if (v826 >= 1)
                      {
                        v827 = v74[19];
                        v828 = (_DWORD *)(v822[19] + v824);
                        do
                        {
                          *v828 = *((unsigned __int8 *)v827 + v825);
                          v828 = (_DWORD *)((char *)v828 + v823);
                          v827 = (unsigned int *)((char *)v827 + v821);
                          --v826;
                        }
                        while (v826);
                      }
                      v825 += v814;
                      ++v820;
                      v824 += v818;
                    }
                    while (v820 != v819);
                  }
                  v804 += v808;
                  ++v803;
                  v802 += result;
                }
                while (v803 != v801);
              }
              break;
            case 4:
              v829 = (v77 << 30) - 0x400000000;
              v1524 = *(_DWORD *)(v76 + (v829 >> 30));
              if (v1524 >= 1)
              {
                v830 = 0;
                v831 = 0;
                v832 = 0;
                v833 = v77 << 30;
                v834 = v74[3];
                v835 = v829 >> 29;
                v1507 = *(_QWORD *)((char *)v834 + v835);
                v836 = v3[3];
                v1490 = (v833 - 0x300000000) >> 32;
                v837 = (v833 - 0x300000000) >> 29;
                v838 = *(_QWORD *)((char *)v834 + v837);
                v839 = (v833 - 0x200000000) >> 32;
                result = (v833 - 0x100000000) >> 32;
                v1474 = 4 * *(_QWORD *)(v836 + v835);
                v840 = 4 * *(_QWORD *)(v836 + v837);
                do
                {
                  v841 = *(_DWORD *)(v76 + 4 * v1490);
                  if (v841 >= 1)
                  {
                    v842 = 0;
                    v843 = *(_QWORD *)&v834[2 * v839];
                    v844 = 4 * *(_QWORD *)(v836 + 8 * v839);
                    v845 = v830;
                    v846 = v832;
                    do
                    {
                      v847 = *(_DWORD *)(v76 + 4 * v839);
                      if (v847 >= 1)
                      {
                        v848 = 0;
                        v849 = *(_QWORD *)&v834[2 * result];
                        v850 = *a2;
                        v851 = 4 * *(_QWORD *)(v836 + 8 * result);
                        v852 = v845;
                        v853 = v846;
                        do
                        {
                          v854 = *(_DWORD *)(v76 + 4 * result);
                          if (v854 >= 1)
                          {
                            v855 = v74[19];
                            v856 = (_DWORD *)(v850[19] + v852);
                            do
                            {
                              *v856 = *((unsigned __int8 *)v855 + v853);
                              v856 = (_DWORD *)((char *)v856 + v851);
                              v855 = (unsigned int *)((char *)v855 + v849);
                              --v854;
                            }
                            while (v854);
                          }
                          v853 += v843;
                          ++v848;
                          v852 += v844;
                        }
                        while (v848 != v847);
                      }
                      v846 += v838;
                      ++v842;
                      v845 += v840;
                    }
                    while (v842 != v841);
                  }
                  v832 += v1507;
                  ++v831;
                  v830 += v1474;
                }
                while (v831 != v1524);
              }
              break;
            case 5:
              v857 = (v77 << 30) - 0x500000000;
              v1433 = *(_DWORD *)(v76 + (v857 >> 30));
              if (v1433 >= 1)
              {
                v1453 = 0;
                v1462 = 0;
                v1443 = 0;
                v858 = v77 << 30;
                v859 = v74[3];
                v860 = v857 >> 29;
                v1423 = *(_QWORD *)((char *)v859 + v860);
                v861 = v3[3];
                v862 = (v858 - 0x400000000) >> 29;
                v1413 = (v858 - 0x400000000) >> 32;
                v1491 = *(_QWORD *)((char *)v859 + v862);
                v1508 = (v858 - 0x300000000) >> 32;
                result = (v858 - 0x200000000) >> 32;
                v863 = (v858 - 0x100000000) >> 32;
                v1403 = 4 * *(_QWORD *)(v861 + v860);
                v1475 = 4 * *(_QWORD *)(v861 + v862);
                do
                {
                  v1525 = *(_DWORD *)(v76 + 4 * v1413);
                  if (v1525 >= 1)
                  {
                    v864 = 0;
                    v865 = *(_QWORD *)&v859[2 * v1508];
                    v866 = 4 * *(_QWORD *)(v861 + 8 * v1508);
                    v867 = v1453;
                    v868 = v1462;
                    do
                    {
                      v869 = *(_DWORD *)(v76 + 4 * v1508);
                      if (v869 >= 1)
                      {
                        v870 = 0;
                        v871 = *(_QWORD *)&v859[2 * result];
                        v872 = 4 * *(_QWORD *)(v861 + 8 * result);
                        v873 = v868;
                        v874 = v867;
                        do
                        {
                          v875 = *(_DWORD *)(v76 + 4 * result);
                          if (v875 >= 1)
                          {
                            v876 = 0;
                            v877 = *(_QWORD *)&v859[2 * v863];
                            v878 = *a2;
                            v879 = 4 * *(_QWORD *)(v861 + 8 * v863);
                            v880 = v873;
                            v881 = v874;
                            do
                            {
                              v882 = *(_DWORD *)(v76 + 4 * v863);
                              if (v882 >= 1)
                              {
                                v883 = v74[19];
                                v884 = (_DWORD *)(v878[19] + v880);
                                do
                                {
                                  *v884 = *((unsigned __int8 *)v883 + v881);
                                  v884 = (_DWORD *)((char *)v884 + v879);
                                  v883 = (unsigned int *)((char *)v883 + v877);
                                  --v882;
                                }
                                while (v882);
                              }
                              v881 += v871;
                              ++v876;
                              v880 += v872;
                            }
                            while (v876 != v875);
                          }
                          v874 += v865;
                          ++v870;
                          v873 += v866;
                        }
                        while (v870 != v869);
                      }
                      v867 += v1491;
                      ++v864;
                      v868 += v1475;
                    }
                    while (v864 != v1525);
                  }
                  v1453 += v1423;
                  v1462 += v1403;
                  ++v1443;
                }
                while (v1443 != v1433);
              }
              break;
            default:
              LODWORD(v749) = 1;
              v750 = -20;
              do
              {
                v749 = *(int *)(v75 + v750) * (uint64_t)(int)v749;
                v750 += 4;
              }
              while (v750);
              v1391 = v74[6];
              if (v1391)
              {
                v751 = 0;
                v1381 = (v77 >> 2) - 1;
                v752 = v74[3];
                v1366 = *v3;
                v1376 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v753 = (v77 << 30) - 0x500000000;
                v754 = v3[3];
                v1371 = v753 >> 32;
                v1412 = *(_QWORD *)((char *)v752 + (v753 >> 29));
                v1422 = (uint64_t)((v77 << 30) - 0x400000000) >> 32;
                v1506 = (uint64_t)((v77 << 30) - 0x300000000) >> 32;
                v755 = (uint64_t)((v77 << 30) - 0x200000000) >> 32;
                v756 = (uint64_t)((v77 << 30) - 0x100000000) >> 32;
                v1402 = 4 * *(_QWORD *)(v754 + (v753 >> 29));
                v1386 = v749;
                do
                {
                  v757 = v1381;
                  if ((v1381 & 0x80000000) != 0)
                  {
                    v758 = 0;
                  }
                  else
                  {
                    v758 = 0;
                    LODWORD(result) = v751;
                    do
                    {
                      v759 = ldiv((int)result, *(int *)(v76 + 4 * v757));
                      result = v759.quot;
                      v758 += *(_QWORD *)&v752[2 * v757--] * v759.rem;
                    }
                    while (v757 != -1);
                  }
                  v1461 = v758;
                  v760 = v1376;
                  v1396 = v751;
                  v761 = 0;
                  if ((v1376 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v751;
                    do
                    {
                      v762 = ldiv((int)result, *(int *)(v1366 + 4 * v760));
                      result = v762.quot;
                      v761 += *(_QWORD *)(v754 + 8 * v760--) * v762.rem;
                    }
                    while (v760 != -1);
                  }
                  v1432 = *(_DWORD *)(v76 + 4 * v1371);
                  if (v1432 >= 1)
                  {
                    v763 = 0;
                    v1452 = 4 * v761;
                    v1473 = 4 * *(_QWORD *)(v754 + 8 * v1422);
                    v1489 = *(_QWORD *)&v752[2 * v1422];
                    do
                    {
                      v1442 = v763;
                      v1523 = *(_DWORD *)(v76 + 4 * v1422);
                      if (v1523 >= 1)
                      {
                        v764 = 0;
                        v765 = *(_QWORD *)&v752[2 * v1506];
                        v766 = 4 * *(_QWORD *)(v754 + 8 * v1506);
                        v767 = v1452;
                        v768 = v1461;
                        do
                        {
                          v769 = *(_DWORD *)(v76 + 4 * v1506);
                          if (v769 >= 1)
                          {
                            v770 = 0;
                            v771 = *(_QWORD *)&v752[2 * v755];
                            v772 = 4 * *(_QWORD *)(v754 + 8 * v755);
                            v773 = v767;
                            result = v768;
                            do
                            {
                              v774 = *(_DWORD *)(v76 + 4 * v755);
                              if (v774 >= 1)
                              {
                                v775 = 0;
                                v776 = *(_QWORD *)&v752[2 * v756];
                                v777 = *a2;
                                v778 = 4 * *(_QWORD *)(v754 + 8 * v756);
                                v779 = v773;
                                v780 = result;
                                do
                                {
                                  v781 = *(_DWORD *)(v76 + 4 * v756);
                                  if (v781 >= 1)
                                  {
                                    v782 = v74[19];
                                    v783 = (_DWORD *)(v777[19] + v779);
                                    do
                                    {
                                      *v783 = *((unsigned __int8 *)v782 + v780);
                                      v783 = (_DWORD *)((char *)v783 + v778);
                                      v782 = (unsigned int *)((char *)v782 + v776);
                                      --v781;
                                    }
                                    while (v781);
                                  }
                                  v780 += v771;
                                  ++v775;
                                  v779 += v772;
                                }
                                while (v775 != v774);
                              }
                              result += v765;
                              ++v770;
                              v773 += v766;
                            }
                            while (v770 != v769);
                          }
                          v768 += v1489;
                          ++v764;
                          v767 += v1473;
                        }
                        while (v764 != v1523);
                      }
                      v1461 += v1412;
                      v763 = v1442 + 1;
                      v1452 += v1402;
                    }
                    while (v1442 + 1 != v1432);
                  }
                  v751 = v1396 + v1386;
                }
                while ((unint64_t)v1391 > v1396 + v1386);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v13 = 0;
            v14 = **(_BYTE **)(*(_QWORD *)result + 152);
            v15 = v3[19];
            do
              *(_BYTE *)(v15 + v13++) = v14;
            while ((*a2)[6] > v13);
          }
          break;
        case 1:
LABEL_37:
          v25 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v25)
            result = (uint64_t)memmove((void *)v3[19], *(const void **)(*(_QWORD *)result + 152), v25);
          break;
        case 2:
          v86 = *(int ***)result;
          v87 = **(int ***)result;
          switch(v86[1] - *v86)
          {
            case 1:
              if (*v87 >= 1)
              {
                v88 = 0;
                v89 = 0;
                v90 = v86[19];
                v91 = v3[19];
                do
                {
                  *(_BYTE *)(v91 + v88) = *((_BYTE *)v90 + v89);
                  v89 += *(_QWORD *)v86[3];
                  ++v88;
                }
                while (**v86 > (int)v88);
              }
              break;
            case 2:
              v344 = *v87;
              if (*v87 >= 1)
              {
                v345 = 0;
                v346 = 0;
                v347 = 0;
                v348 = v86[19];
                v349 = v3[19];
                do
                {
                  v350 = v87[1];
                  if (v350 < 1)
                  {
                    v351 = v86[3];
                    v352 = *((_QWORD *)v351 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v349 + v346 + result) = *((_BYTE *)v348 + v347);
                      v351 = v86[3];
                      v352 = *((_QWORD *)v351 + 1);
                      v347 += v352;
                      v87 = *v86;
                      v350 = (*v86)[1];
                      ++result;
                    }
                    while ((int)result < v350);
                    v344 = *v87;
                    v346 += result;
                  }
                  v347 = *(_QWORD *)v351 + v347 - v352 * v350;
                  ++v345;
                }
                while (v345 < v344);
              }
              break;
            case 3:
              v353 = *v87;
              if (*v87 >= 1)
              {
                v354 = 0;
                v355 = 0;
                v356 = 0;
                v357 = v86[19];
                v358 = v3[19];
                do
                {
                  v359 = v87[1];
                  if (v359 < 1)
                  {
                    v363 = v86[3];
                    v364 = *((_QWORD *)v363 + 1);
                  }
                  else
                  {
                    for (m = 0; m < v359; ++m)
                    {
                      v361 = v87[2];
                      if (v361 < 1)
                      {
                        v363 = v86[3];
                        result = *((_QWORD *)v363 + 2);
                      }
                      else
                      {
                        v362 = 0;
                        do
                        {
                          *(_BYTE *)(v358 + v355 + v362) = *((_BYTE *)v357 + v356);
                          v363 = v86[3];
                          result = *((_QWORD *)v363 + 2);
                          v356 += result;
                          v87 = *v86;
                          v361 = (*v86)[2];
                          ++v362;
                        }
                        while ((int)v362 < v361);
                        v355 += v362;
                      }
                      v364 = *((_QWORD *)v363 + 1);
                      v356 = v364 + v356 - result * v361;
                      v359 = v87[1];
                    }
                    v353 = *v87;
                  }
                  v356 = *(_QWORD *)v363 + v356 - v364 * v359;
                  ++v354;
                }
                while (v354 < v353);
              }
              break;
            case 4:
              v365 = *v87;
              if (*v87 >= 1)
              {
                v366 = 0;
                v367 = 0;
                v368 = 0;
                v369 = v86[19];
                v370 = v3[19];
                do
                {
                  v371 = v87[1];
                  if (v371 < 1)
                  {
                    v377 = v86[3];
                    v379 = *((_QWORD *)v377 + 1);
                  }
                  else
                  {
                    for (n = 0; n < v371; ++n)
                    {
                      v373 = v87[2];
                      if (v373 < 1)
                      {
                        v377 = v86[3];
                        v378 = *((_QWORD *)v377 + 2);
                      }
                      else
                      {
                        for (ii = 0; ii < v373; ++ii)
                        {
                          v375 = v87[3];
                          if (v375 < 1)
                          {
                            v377 = v86[3];
                            result = *((_QWORD *)v377 + 3);
                          }
                          else
                          {
                            v376 = 0;
                            do
                            {
                              *(_BYTE *)(v370 + v367 + v376) = *((_BYTE *)v369 + v368);
                              v377 = v86[3];
                              result = *((_QWORD *)v377 + 3);
                              v368 += result;
                              v87 = *v86;
                              v375 = (*v86)[3];
                              ++v376;
                            }
                            while ((int)v376 < v375);
                            v367 += v376;
                          }
                          v378 = *((_QWORD *)v377 + 2);
                          v368 = v378 + v368 - result * v375;
                          v373 = v87[2];
                        }
                      }
                      v379 = *((_QWORD *)v377 + 1);
                      v368 = v379 + v368 - v378 * v373;
                      v371 = v87[1];
                    }
                    v365 = *v87;
                  }
                  v368 = *(_QWORD *)v377 + v368 - v379 * v371;
                  ++v366;
                }
                while (v366 < v365);
              }
              break;
            default:
              if (v3[6])
              {
                v335 = 0;
                v336 = v86[19];
                v337 = v3[19];
                do
                {
                  v338 = *v86;
                  v339 = (unint64_t)((char *)v86[1] - (char *)*v86) >> 2;
                  v340 = 0;
                  v341 = (v339 - 1);
                  if ((int)v339 - 1 >= 0)
                  {
                    v342 = v86[3];
                    LODWORD(result) = v335;
                    do
                    {
                      v343 = ldiv((int)result, v338[v341]);
                      result = v343.quot;
                      v340 += *(_QWORD *)&v342[2 * v341--] * v343.rem;
                    }
                    while (v341 != -1);
                  }
                  *(_BYTE *)(v337 + v335++) = *((_BYTE *)v336 + v340);
                }
                while (v335 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v92 = *(int ***)result;
          v93 = (uint64_t *)(*(_QWORD *)result + 24);
          v94 = v3 + 3;
          v95 = **(_QWORD **)result;
          v96 = *(_QWORD *)(*(_QWORD *)result + 8);
          v97 = v96 - v95;
          switch((v96 - v95) >> 2)
          {
            case 1:
              v98 = (v97 << 30) - 0x100000000;
              v99 = *(_DWORD *)(v95 + (v98 >> 30));
              if (v99 >= 1)
              {
                v100 = v98 >> 29;
                v101 = *(_QWORD *)(*v93 + (v98 >> 29));
                v102 = *(_QWORD *)(*v94 + v100);
                v103 = (_BYTE *)v3[19];
                v104 = v92[19];
                do
                {
                  *v103 = *(_BYTE *)v104;
                  v104 = (int *)((char *)v104 + v101);
                  v103 += v102;
                  --v99;
                }
                while (v99);
              }
              break;
            case 2:
              v906 = (v97 << 30) - 0x200000000;
              v907 = *(_DWORD *)(v95 + (v906 >> 30));
              if (v907 >= 1)
              {
                v908 = 0;
                v909 = 0;
                v910 = 0;
                v911 = v906 >> 29;
                v912 = *(_QWORD *)(*v93 + (v906 >> 29));
                v913 = *(_QWORD *)(*v94 + v911);
                do
                {
                  v914 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v915 = *(int *)((char *)*v92 + (v914 >> 30));
                  if (v915 >= 1)
                  {
                    v916 = v914 >> 29;
                    v917 = *(_QWORD *)((char *)v92[3] + (v914 >> 29));
                    v918 = *(_QWORD *)(*v94 + v916);
                    result = (*a2)[19];
                    v919 = *(_QWORD *)(*(_QWORD *)v5 + 152);
                    do
                    {
                      *(_BYTE *)(result + v910) = *(_BYTE *)(v919 + v909);
                      result += v918;
                      v919 += v917;
                      --v915;
                    }
                    while (v915);
                  }
                  v909 += v912;
                  v910 += v913;
                  ++v908;
                }
                while (v908 != v907);
              }
              break;
            case 3:
              v920 = (v97 << 30) - 0x300000000;
              v921 = *(_DWORD *)(v95 + (v920 >> 30));
              if (v921 >= 1)
              {
                v922 = 0;
                v923 = 0;
                v924 = 0;
                v925 = v920 >> 29;
                v926 = *(_QWORD *)(*v93 + (v920 >> 29));
                v927 = *(_QWORD *)(*v94 + v925);
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v928 = *(int *)((char *)*v92 + (result >> 30));
                  if (v928 >= 1)
                  {
                    v929 = 0;
                    v930 = result >> 29;
                    result = *(_QWORD *)((char *)v92[3] + (result >> 29));
                    v931 = *(_QWORD *)(*v94 + v930);
                    v932 = v923;
                    v933 = v924;
                    do
                    {
                      v934 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v935 = *(int *)((char *)*v92 + (v934 >> 30));
                      if (v935 >= 1)
                      {
                        v936 = v934 >> 29;
                        v937 = *(_QWORD *)((char *)v92[3] + (v934 >> 29));
                        v938 = *(_QWORD *)(*v94 + v936);
                        v939 = (*a2)[19];
                        v940 = *(_QWORD *)(*(_QWORD *)v5 + 152);
                        do
                        {
                          *(_BYTE *)(v939 + v933) = *(_BYTE *)(v940 + v932);
                          v939 += v938;
                          v940 += v937;
                          --v935;
                        }
                        while (v935);
                      }
                      v932 += result;
                      v933 += v931;
                      ++v929;
                    }
                    while (v929 != v928);
                  }
                  v923 += v926;
                  v924 += v927;
                  ++v922;
                }
                while (v922 != v921);
              }
              break;
            case 4:
LABEL_576:
              break;
            case 5:
              v941 = (v97 << 30) - 0x500000000;
              v942 = *(_DWORD *)(v95 + (v941 >> 30));
              if (v942 >= 1)
              {
                v943 = 0;
                v944 = 0;
                v945 = v941 >> 29;
                v946 = *(_QWORD *)(*v93 + v945);
                v947 = *(_QWORD *)(*v94 + v945);
                do
                {
                  v943 += v946;
                  v944 += v947;
                  --v942;
                }
                while (v942);
              }
              break;
            default:
              LODWORD(v885) = 1;
              v886 = -20;
              do
              {
                v885 = *(int *)(v96 + v886) * (uint64_t)(int)v885;
                v886 += 4;
              }
              while (v886);
              if (v92[6])
              {
                result = 0;
                v887 = *(_QWORD **)v5;
                v1509 = v94;
                v1476 = v885;
                do
                {
                  v888 = *v92;
                  v889 = (unint64_t)((char *)v92[1] - (char *)*v92) >> 2;
                  v890 = (v889 - 1);
                  v1526 = result;
                  v1492 = v887;
                  v891 = 0;
                  if ((int)v889 - 1 >= 0)
                  {
                    v892 = *v93;
                    do
                    {
                      v893 = ldiv((int)result, v888[v890]);
                      LODWORD(result) = v893.quot;
                      v891 += *(_QWORD *)(v892 + 8 * v890--) * v893.rem;
                    }
                    while (v890 != -1);
                  }
                  v894 = **a2;
                  v895 = (unint64_t)((*a2)[1] - v894) >> 2;
                  v896 = *v1509;
                  v897 = 0;
                  v898 = (v895 - 1);
                  if ((int)v895 - 1 >= 0)
                  {
                    v899 = v1526;
                    do
                    {
                      v900 = ldiv(v899, *(int *)(v894 + 4 * v898));
                      v899 = v900.quot;
                      v897 += *(_QWORD *)(v896 + 8 * v898--) * v900.rem;
                    }
                    while (v898 != -1);
                  }
                  v887 = v1492;
                  v901 = ((v1492[1] - *v1492) << 30) - 0x500000000;
                  v902 = *(int *)((char *)v888 + (v901 >> 30));
                  if (v902 >= 1)
                  {
                    v903 = v901 >> 29;
                    v904 = *(_QWORD *)(*v93 + v903);
                    v905 = *(_QWORD *)(v896 + v903);
                    do
                    {
                      v891 += v904;
                      v897 += v905;
                      --v902;
                    }
                    while (v902);
                    v887 = *(_QWORD **)v5;
                  }
                  result = v1526 + v1476;
                }
                while (v887[6] > (unint64_t)(v1526 + v1476));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v16 = v3[6];
          if (v16)
          {
            v17 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v18 = (_DWORD *)v3[19];
            do
            {
              *v18++ = v17;
              --v16;
            }
            while (v16);
          }
          break;
        case 1:
          v105 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v105)
          {
            v106 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v107 = (_DWORD *)v3[19];
            do
            {
              v108 = *v106++;
              *v107++ = v108;
              --v105;
            }
            while (v105);
          }
          break;
        case 2:
          v109 = *(int ***)result;
          v110 = **(int ***)result;
          v111 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v110;
          switch(v111 >> 2)
          {
            case 1:
              if (*v110 >= 1)
              {
                v112 = 0;
                v113 = v109[19];
                v114 = v3[19];
                v115 = *(_QWORD *)v109[3];
                do
                {
                  *(_DWORD *)(v114 + 4 * v112) = *(unsigned __int8 *)v113;
                  v113 = (int *)((char *)v113 + v115);
                  ++v112;
                }
                while (*v110 > (int)v112);
              }
              break;
            case 2:
              v389 = *v110;
              if (*v110 >= 1)
              {
                v390 = 0;
                v391 = 0;
                v392 = 0;
                v393 = v109[19];
                v394 = v3[19];
                v395 = v109[3];
                v396 = *(_QWORD *)v395;
                v397 = *((_QWORD *)v395 + 1);
                v398 = v110[1];
                do
                {
                  if (v398 >= 1)
                  {
                    v399 = 0;
                    do
                    {
                      *(_DWORD *)(v394 + 4 * v391 + 4 * v399) = *((unsigned __int8 *)v393 + v392);
                      v392 += v397;
                      v398 = v110[1];
                      ++v399;
                    }
                    while ((int)v399 < v398);
                    v389 = *v110;
                    v391 += v399;
                  }
                  v392 = v392 + v396 - v397 * v398;
                  ++v390;
                }
                while (v390 < v389);
              }
              break;
            case 3:
              result = *v110;
              if ((int)result >= 1)
              {
                v400 = 0;
                v401 = 0;
                v402 = 0;
                v403 = v109[19];
                v404 = v3[19];
                v405 = v109[3];
                v406 = *(_QWORD *)v405;
                v407 = *((_QWORD *)v405 + 1);
                v408 = v110[1];
                do
                {
                  if (v408 >= 1)
                  {
                    v409 = 0;
                    v410 = v109[3];
                    v411 = *((_QWORD *)v405 + 2);
                    v412 = v110[2];
                    do
                    {
                      if (v412 >= 1)
                      {
                        v413 = 0;
                        v414 = *((_QWORD *)v410 + 2);
                        do
                        {
                          *(_DWORD *)(v404 + 4 * v401 + 4 * v413) = *((unsigned __int8 *)v403 + v402);
                          v402 += v414;
                          v412 = v110[2];
                          ++v413;
                        }
                        while ((int)v413 < v412);
                        v408 = v110[1];
                        v401 += v413;
                      }
                      v402 = v402 + v407 - v411 * v412;
                      ++v409;
                    }
                    while (v409 < v408);
                    result = *v110;
                  }
                  v402 = v402 + v406 - v407 * v408;
                  ++v400;
                }
                while (v400 < (int)result);
              }
              break;
            case 4:
              v415 = *v110;
              if (*v110 >= 1)
              {
                v416 = 0;
                v417 = 0;
                v418 = 0;
                v419 = v109[19];
                v420 = v3[19];
                v421 = v109[3];
                v422 = *(_QWORD *)v421;
                v423 = *((_QWORD *)v421 + 1);
                v424 = v110[1];
                do
                {
                  if (v424 >= 1)
                  {
                    v425 = 0;
                    v426 = v109[3];
                    v427 = *((_QWORD *)v421 + 2);
                    v428 = v110[2];
                    do
                    {
                      if (v428 >= 1)
                      {
                        v429 = 0;
                        v430 = v109[3];
                        v431 = *((_QWORD *)v426 + 2);
                        v432 = *((_QWORD *)v426 + 3);
                        v433 = v110[3];
                        do
                        {
                          if (v433 >= 1)
                          {
                            v434 = 0;
                            v435 = *((_QWORD *)v430 + 3);
                            do
                            {
                              *(_DWORD *)(v420 + 4 * v417 + 4 * v434) = *((unsigned __int8 *)v419 + v418);
                              v418 += v435;
                              v433 = v110[3];
                              ++v434;
                            }
                            while ((int)v434 < v433);
                            v428 = v110[2];
                            v417 += v434;
                          }
                          v418 = v418 + v431 - v432 * v433;
                          ++v429;
                        }
                        while (v429 < v428);
                        v424 = v110[1];
                      }
                      v418 = v418 + v423 - v427 * v428;
                      ++v425;
                    }
                    while (v425 < v424);
                    v415 = *v110;
                  }
                  result = v424;
                  v418 = v418 + v422 - v423 * v424;
                  ++v416;
                }
                while (v416 < v415);
              }
              break;
            default:
              v380 = v3[6];
              if (v380)
              {
                v381 = 0;
                v382 = v109[19];
                v383 = v3[19];
                v384 = ((unint64_t)v111 >> 2) - 1;
                v385 = v109[3];
                do
                {
                  v386 = 0;
                  if ((v384 & 0x80000000) == 0)
                  {
                    v387 = v384;
                    LODWORD(result) = v381;
                    do
                    {
                      v388 = ldiv((int)result, v110[v387]);
                      result = v388.quot;
                      v386 += *(_QWORD *)&v385[2 * v387--] * v388.rem;
                    }
                    while (v387 != -1);
                  }
                  *(_DWORD *)(v383 + 4 * v381++) = *((unsigned __int8 *)v382 + v386);
                }
                while (v381 != v380);
              }
              break;
          }
          break;
        case 3:
          v116 = *(unsigned int ***)result;
          v118 = **(_QWORD **)result;
          v117 = *(_QWORD *)(*(_QWORD *)result + 8);
          v119 = v117 - v118;
          switch((v117 - v118) >> 2)
          {
            case 1:
              v120 = (v119 << 30) - 0x100000000;
              v121 = *(_DWORD *)(v118 + (v120 >> 30));
              if (v121 >= 1)
              {
                v122 = v120 >> 29;
                v123 = *(_QWORD *)((char *)v116[3] + (v120 >> 29));
                v124 = *(_QWORD *)(v3[3] + v122);
                v125 = (_DWORD *)v3[19];
                v126 = v116[19];
                v127 = 4 * v124;
                do
                {
                  *v125 = *(unsigned __int8 *)v126;
                  v126 = (unsigned int *)((char *)v126 + v123);
                  v125 = (_DWORD *)((char *)v125 + v127);
                  --v121;
                }
                while (v121);
              }
              break;
            case 2:
              v983 = (v119 << 30) - 0x200000000;
              v984 = *(_DWORD *)(v118 + (v983 >> 30));
              if (v984 >= 1)
              {
                v985 = 0;
                v986 = 0;
                v987 = 0;
                v988 = v116[3];
                v989 = v983 >> 29;
                v990 = *(_QWORD *)((char *)v988 + (v983 >> 29));
                v991 = v3[3];
                v992 = (v119 << 30) - 0x100000000;
                v993 = *(_QWORD *)((char *)v988 + (v992 >> 29));
                v994 = v992 >> 32;
                v995 = 4 * *(_QWORD *)(v991 + v989);
                v996 = 4 * *(_QWORD *)(v991 + (v992 >> 29));
                do
                {
                  result = *(unsigned int *)(v118 + 4 * v994);
                  if ((int)result >= 1)
                  {
                    v997 = v116[19];
                    v998 = (_DWORD *)(v3[19] + v985);
                    do
                    {
                      *v998 = *((unsigned __int8 *)v997 + v987);
                      v998 = (_DWORD *)((char *)v998 + v996);
                      v997 = (unsigned int *)((char *)v997 + v993);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v987 += v990;
                  ++v986;
                  v985 += v995;
                }
                while (v986 != v984);
              }
              break;
            case 3:
              v999 = (v119 << 30) - 0x300000000;
              v1000 = *(_DWORD *)(v118 + (v999 >> 30));
              if (v1000 >= 1)
              {
                v1001 = 0;
                v1002 = 0;
                v1003 = 0;
                v1004 = v119 << 30;
                v1005 = v116[3];
                v1006 = v999 >> 29;
                v1007 = *(_QWORD *)((char *)v1005 + (v999 >> 29));
                v1008 = v3[3];
                v1009 = *(_QWORD *)(v1008 + v1006);
                v1010 = v1004 - 0x200000000;
                v1011 = (v1004 - 0x200000000) >> 29;
                v1012 = v1004 - 0x100000000;
                v1013 = *(_QWORD *)((char *)v1005 + v1011);
                v1014 = v1010 >> 32;
                v1015 = *(_QWORD *)(v1008 + v1011);
                v1016 = v1012 >> 32;
                result = 4 * v1009;
                v1017 = 4 * v1015;
                do
                {
                  v1018 = *(_DWORD *)(v118 + 4 * v1014);
                  if (v1018 >= 1)
                  {
                    v1019 = 0;
                    v1020 = *(_QWORD *)&v1005[2 * v1016];
                    v1021 = *a2;
                    v1022 = 4 * *(_QWORD *)(v1008 + 8 * v1016);
                    v1023 = v1001;
                    v1024 = v1003;
                    do
                    {
                      v1025 = *(_DWORD *)(v118 + 4 * v1016);
                      if (v1025 >= 1)
                      {
                        v1026 = v116[19];
                        v1027 = (_DWORD *)(v1021[19] + v1023);
                        do
                        {
                          *v1027 = *((unsigned __int8 *)v1026 + v1024);
                          v1027 = (_DWORD *)((char *)v1027 + v1022);
                          v1026 = (unsigned int *)((char *)v1026 + v1020);
                          --v1025;
                        }
                        while (v1025);
                      }
                      v1024 += v1013;
                      ++v1019;
                      v1023 += v1017;
                    }
                    while (v1019 != v1018);
                  }
                  v1003 += v1007;
                  ++v1002;
                  v1001 += result;
                }
                while (v1002 != v1000);
              }
              break;
            case 4:
              v1028 = (v119 << 30) - 0x400000000;
              v1528 = *(_DWORD *)(v118 + (v1028 >> 30));
              if (v1528 >= 1)
              {
                v1029 = 0;
                v1030 = 0;
                v1031 = 0;
                v1032 = v119 << 30;
                v1033 = v116[3];
                v1034 = v1028 >> 29;
                v1511 = *(_QWORD *)((char *)v1033 + v1034);
                v1035 = v3[3];
                v1494 = (v1032 - 0x300000000) >> 32;
                v1036 = (v1032 - 0x300000000) >> 29;
                v1037 = *(_QWORD *)((char *)v1033 + v1036);
                v1038 = (v1032 - 0x200000000) >> 32;
                result = (v1032 - 0x100000000) >> 32;
                v1478 = 4 * *(_QWORD *)(v1035 + v1034);
                v1039 = 4 * *(_QWORD *)(v1035 + v1036);
                do
                {
                  v1040 = *(_DWORD *)(v118 + 4 * v1494);
                  if (v1040 >= 1)
                  {
                    v1041 = 0;
                    v1042 = *(_QWORD *)&v1033[2 * v1038];
                    v1043 = 4 * *(_QWORD *)(v1035 + 8 * v1038);
                    v1044 = v1029;
                    v1045 = v1031;
                    do
                    {
                      v1046 = *(_DWORD *)(v118 + 4 * v1038);
                      if (v1046 >= 1)
                      {
                        v1047 = 0;
                        v1048 = *(_QWORD *)&v1033[2 * result];
                        v1049 = *a2;
                        v1050 = 4 * *(_QWORD *)(v1035 + 8 * result);
                        v1051 = v1044;
                        v1052 = v1045;
                        do
                        {
                          v1053 = *(_DWORD *)(v118 + 4 * result);
                          if (v1053 >= 1)
                          {
                            v1054 = v116[19];
                            v1055 = (_DWORD *)(v1049[19] + v1051);
                            do
                            {
                              *v1055 = *((unsigned __int8 *)v1054 + v1052);
                              v1055 = (_DWORD *)((char *)v1055 + v1050);
                              v1054 = (unsigned int *)((char *)v1054 + v1048);
                              --v1053;
                            }
                            while (v1053);
                          }
                          v1052 += v1042;
                          ++v1047;
                          v1051 += v1043;
                        }
                        while (v1047 != v1046);
                      }
                      v1045 += v1037;
                      ++v1041;
                      v1044 += v1039;
                    }
                    while (v1041 != v1040);
                  }
                  v1031 += v1511;
                  ++v1030;
                  v1029 += v1478;
                }
                while (v1030 != v1528);
              }
              break;
            case 5:
              v1056 = (v119 << 30) - 0x500000000;
              v1435 = *(_DWORD *)(v118 + (v1056 >> 30));
              if (v1435 >= 1)
              {
                v1455 = 0;
                v1464 = 0;
                v1445 = 0;
                v1057 = v119 << 30;
                v1058 = v116[3];
                v1059 = v1056 >> 29;
                v1425 = *(_QWORD *)((char *)v1058 + v1059);
                v1060 = v3[3];
                v1061 = (v1057 - 0x400000000) >> 29;
                v1415 = (v1057 - 0x400000000) >> 32;
                v1495 = *(_QWORD *)((char *)v1058 + v1061);
                v1512 = (v1057 - 0x300000000) >> 32;
                result = (v1057 - 0x200000000) >> 32;
                v1062 = (v1057 - 0x100000000) >> 32;
                v1405 = 4 * *(_QWORD *)(v1060 + v1059);
                v1479 = 4 * *(_QWORD *)(v1060 + v1061);
                do
                {
                  v1529 = *(_DWORD *)(v118 + 4 * v1415);
                  if (v1529 >= 1)
                  {
                    v1063 = 0;
                    v1064 = *(_QWORD *)&v1058[2 * v1512];
                    v1065 = 4 * *(_QWORD *)(v1060 + 8 * v1512);
                    v1066 = v1455;
                    v1067 = v1464;
                    do
                    {
                      v1068 = *(_DWORD *)(v118 + 4 * v1512);
                      if (v1068 >= 1)
                      {
                        v1069 = 0;
                        v1070 = *(_QWORD *)&v1058[2 * result];
                        v1071 = 4 * *(_QWORD *)(v1060 + 8 * result);
                        v1072 = v1067;
                        v1073 = v1066;
                        do
                        {
                          v1074 = *(_DWORD *)(v118 + 4 * result);
                          if (v1074 >= 1)
                          {
                            v1075 = 0;
                            v1076 = *(_QWORD *)&v1058[2 * v1062];
                            v1077 = *a2;
                            v1078 = 4 * *(_QWORD *)(v1060 + 8 * v1062);
                            v1079 = v1072;
                            v1080 = v1073;
                            do
                            {
                              v1081 = *(_DWORD *)(v118 + 4 * v1062);
                              if (v1081 >= 1)
                              {
                                v1082 = v116[19];
                                v1083 = (_DWORD *)(v1077[19] + v1079);
                                do
                                {
                                  *v1083 = *((unsigned __int8 *)v1082 + v1080);
                                  v1083 = (_DWORD *)((char *)v1083 + v1078);
                                  v1082 = (unsigned int *)((char *)v1082 + v1076);
                                  --v1081;
                                }
                                while (v1081);
                              }
                              v1080 += v1070;
                              ++v1075;
                              v1079 += v1071;
                            }
                            while (v1075 != v1074);
                          }
                          v1073 += v1064;
                          ++v1069;
                          v1072 += v1065;
                        }
                        while (v1069 != v1068);
                      }
                      v1066 += v1495;
                      ++v1063;
                      v1067 += v1479;
                    }
                    while (v1063 != v1529);
                  }
                  v1455 += v1425;
                  v1464 += v1405;
                  ++v1445;
                }
                while (v1445 != v1435);
              }
              break;
            default:
              LODWORD(v948) = 1;
              v949 = -20;
              do
              {
                v948 = *(int *)(v117 + v949) * (uint64_t)(int)v948;
                v949 += 4;
              }
              while (v949);
              v1392 = v116[6];
              if (v1392)
              {
                v950 = 0;
                v1382 = (v119 >> 2) - 1;
                v951 = v116[3];
                v1367 = *v3;
                v1377 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v952 = (v119 << 30) - 0x500000000;
                v953 = v3[3];
                v1372 = v952 >> 32;
                v1414 = *(_QWORD *)((char *)v951 + (v952 >> 29));
                v1424 = (uint64_t)((v119 << 30) - 0x400000000) >> 32;
                v1510 = (uint64_t)((v119 << 30) - 0x300000000) >> 32;
                v954 = (uint64_t)((v119 << 30) - 0x200000000) >> 32;
                v955 = (uint64_t)((v119 << 30) - 0x100000000) >> 32;
                v1404 = 4 * *(_QWORD *)(v953 + (v952 >> 29));
                v1387 = v948;
                do
                {
                  v956 = v1382;
                  if ((v1382 & 0x80000000) != 0)
                  {
                    v957 = 0;
                  }
                  else
                  {
                    v957 = 0;
                    LODWORD(result) = v950;
                    do
                    {
                      v958 = ldiv((int)result, *(int *)(v118 + 4 * v956));
                      result = v958.quot;
                      v957 += *(_QWORD *)&v951[2 * v956--] * v958.rem;
                    }
                    while (v956 != -1);
                  }
                  v1463 = v957;
                  v959 = v1377;
                  v1397 = v950;
                  v960 = 0;
                  if ((v1377 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v950;
                    do
                    {
                      v961 = ldiv((int)result, *(int *)(v1367 + 4 * v959));
                      result = v961.quot;
                      v960 += *(_QWORD *)(v953 + 8 * v959--) * v961.rem;
                    }
                    while (v959 != -1);
                  }
                  v1434 = *(_DWORD *)(v118 + 4 * v1372);
                  if (v1434 >= 1)
                  {
                    v962 = 0;
                    v1454 = 4 * v960;
                    v1477 = 4 * *(_QWORD *)(v953 + 8 * v1424);
                    v1493 = *(_QWORD *)&v951[2 * v1424];
                    do
                    {
                      v1444 = v962;
                      v1527 = *(_DWORD *)(v118 + 4 * v1424);
                      if (v1527 >= 1)
                      {
                        v963 = 0;
                        v964 = *(_QWORD *)&v951[2 * v1510];
                        v965 = 4 * *(_QWORD *)(v953 + 8 * v1510);
                        v966 = v1454;
                        v967 = v1463;
                        do
                        {
                          v968 = *(_DWORD *)(v118 + 4 * v1510);
                          if (v968 >= 1)
                          {
                            v969 = 0;
                            v970 = *(_QWORD *)&v951[2 * v954];
                            v971 = 4 * *(_QWORD *)(v953 + 8 * v954);
                            v972 = v966;
                            result = v967;
                            do
                            {
                              v973 = *(_DWORD *)(v118 + 4 * v954);
                              if (v973 >= 1)
                              {
                                v974 = 0;
                                v975 = *(_QWORD *)&v951[2 * v955];
                                v976 = *a2;
                                v977 = 4 * *(_QWORD *)(v953 + 8 * v955);
                                v978 = v972;
                                v979 = result;
                                do
                                {
                                  v980 = *(_DWORD *)(v118 + 4 * v955);
                                  if (v980 >= 1)
                                  {
                                    v981 = v116[19];
                                    v982 = (_DWORD *)(v976[19] + v978);
                                    do
                                    {
                                      *v982 = *((unsigned __int8 *)v981 + v979);
                                      v982 = (_DWORD *)((char *)v982 + v977);
                                      v981 = (unsigned int *)((char *)v981 + v975);
                                      --v980;
                                    }
                                    while (v980);
                                  }
                                  v979 += v970;
                                  ++v974;
                                  v978 += v971;
                                }
                                while (v974 != v973);
                              }
                              result += v964;
                              ++v969;
                              v972 += v965;
                            }
                            while (v969 != v968);
                          }
                          v967 += v1493;
                          ++v963;
                          v966 += v1477;
                        }
                        while (v963 != v1527);
                      }
                      v1463 += v1414;
                      v962 = v1444 + 1;
                      v1454 += v1404;
                    }
                    while (v1444 + 1 != v1434);
                  }
                  v950 = v1397 + v1387;
                }
                while ((unint64_t)v1392 > v1397 + v1387);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v19 = v3[6];
          if (v19)
          {
            v20 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v21 = (_QWORD *)v3[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          v128 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v128)
          {
            v129 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v130 = (_QWORD *)v3[19];
            do
            {
              v131 = *v129++;
              *v130++ = v131;
              --v128;
            }
            while (v128);
          }
          break;
        case 2:
          v132 = *(int ***)result;
          v133 = **(int ***)result;
          v134 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v133;
          switch(v134 >> 2)
          {
            case 1:
              v135 = *v133;
              if ((int)v135 >= 1)
              {
                v136 = v132[19];
                v137 = (_QWORD *)v3[19];
                v138 = *(_QWORD *)v132[3];
                do
                {
                  *v137++ = *(unsigned __int8 *)v136;
                  v136 = (int *)((char *)v136 + v138);
                  --v135;
                }
                while (v135);
              }
              break;
            case 2:
              v445 = *v133;
              if (*v133 >= 1)
              {
                v446 = 0;
                v447 = 0;
                v448 = 0;
                v449 = v132[19];
                v450 = v3[19];
                v451 = v133[1];
                v452 = v132[3];
                v454 = *(_QWORD *)v452;
                v453 = *((_QWORD *)v452 + 1);
                v455 = v454 - v453 * v451;
                do
                {
                  v456 = v451;
                  if ((int)v451 >= 1)
                  {
                    do
                    {
                      result = *((unsigned __int8 *)v449 + v448);
                      *(_QWORD *)(v450 + 8 * v447++) = result;
                      v448 += v453;
                      --v456;
                    }
                    while (v456);
                  }
                  v448 += v455;
                  ++v446;
                }
                while (v446 != v445);
              }
              break;
            case 3:
              v457 = *v133;
              if (*v133 >= 1)
              {
                v458 = 0;
                result = 0;
                v459 = 0;
                v460 = v132[19];
                v461 = v3[19];
                v462 = v133[1];
                v463 = v132[3];
                v464 = *((_QWORD *)v463 + 1);
                v465 = *(_QWORD *)v463 - v464 * v462;
                do
                {
                  if ((int)v462 < 1)
                  {
                    v472 = result;
                  }
                  else
                  {
                    v466 = 0;
                    v467 = v133[2];
                    v468 = v132[3];
                    v469 = v464 - *((_QWORD *)v463 + 2) * v467;
                    do
                    {
                      if ((int)v467 < 1)
                      {
                        v472 = result;
                      }
                      else
                      {
                        v470 = *((_QWORD *)v468 + 2);
                        v471 = v467;
                        do
                        {
                          v472 = result + 1;
                          *(_QWORD *)(v461 + 8 * result) = *((unsigned __int8 *)v460 + v459);
                          v459 += v470;
                          ++result;
                          --v471;
                        }
                        while (v471);
                      }
                      v459 += v469;
                      ++v466;
                      result = v472;
                    }
                    while (v466 != (_DWORD)v462);
                  }
                  v459 += v465;
                  ++v458;
                  result = v472;
                }
                while (v458 != v457);
              }
              break;
            case 4:
              v473 = *v133;
              if (*v133 >= 1)
              {
                v474 = 0;
                result = 0;
                v475 = 0;
                v476 = v132[19];
                v477 = v3[19];
                v478 = v133[1];
                v479 = v132[3];
                v480 = *((_QWORD *)v479 + 1);
                v481 = *(_QWORD *)v479 - v480 * v478;
                do
                {
                  if ((int)v478 < 1)
                  {
                    v492 = result;
                  }
                  else
                  {
                    v482 = 0;
                    v483 = v133[2];
                    v484 = v132[3];
                    v485 = v480 - *((_QWORD *)v479 + 2) * v483;
                    do
                    {
                      if ((int)v483 < 1)
                      {
                        v492 = result;
                      }
                      else
                      {
                        v486 = 0;
                        v487 = v133[3];
                        v488 = v132[3];
                        v489 = *((_QWORD *)v484 + 2) - *((_QWORD *)v484 + 3) * v487;
                        do
                        {
                          if ((int)v487 < 1)
                          {
                            v492 = result;
                          }
                          else
                          {
                            v490 = *((_QWORD *)v488 + 3);
                            v491 = v487;
                            do
                            {
                              v492 = result + 1;
                              *(_QWORD *)(v477 + 8 * result) = *((unsigned __int8 *)v476 + v475);
                              v475 += v490;
                              ++result;
                              --v491;
                            }
                            while (v491);
                          }
                          v475 += v489;
                          ++v486;
                          result = v492;
                        }
                        while (v486 != (_DWORD)v483);
                      }
                      v475 += v485;
                      ++v482;
                      result = v492;
                    }
                    while (v482 != (_DWORD)v478);
                  }
                  v475 += v481;
                  ++v474;
                  result = v492;
                }
                while (v474 != v473);
              }
              break;
            default:
              v436 = v3[6];
              if (v436)
              {
                v437 = 0;
                v438 = v132[19];
                v439 = v3[19];
                v440 = ((unint64_t)v134 >> 2) - 1;
                v441 = v132[3];
                do
                {
                  v442 = 0;
                  if ((v440 & 0x80000000) == 0)
                  {
                    v443 = v440;
                    LODWORD(result) = v437;
                    do
                    {
                      v444 = ldiv((int)result, v133[v443]);
                      result = v444.quot;
                      v442 += *(_QWORD *)&v441[2 * v443--] * v444.rem;
                    }
                    while (v443 != -1);
                  }
                  *(_QWORD *)(v439 + 8 * v437++) = *((unsigned __int8 *)v438 + v442);
                }
                while (v437 != v436);
              }
              break;
          }
          break;
        case 3:
          v139 = *(unsigned int ***)result;
          v141 = **(_QWORD **)result;
          v140 = *(_QWORD *)(*(_QWORD *)result + 8);
          v142 = v140 - v141;
          switch((v140 - v141) >> 2)
          {
            case 1:
              v143 = (v142 << 30) - 0x100000000;
              v144 = *(_DWORD *)(v141 + (v143 >> 30));
              if (v144 >= 1)
              {
                v145 = v143 >> 29;
                v146 = *(_QWORD *)((char *)v139[3] + (v143 >> 29));
                v147 = *(_QWORD *)(v3[3] + v145);
                v148 = (_QWORD *)v3[19];
                v149 = v139[19];
                v150 = 8 * v147;
                do
                {
                  *v148 = *(unsigned __int8 *)v149;
                  v149 = (unsigned int *)((char *)v149 + v146);
                  v148 = (_QWORD *)((char *)v148 + v150);
                  --v144;
                }
                while (v144);
              }
              break;
            case 2:
              v1118 = (v142 << 30) - 0x200000000;
              v1119 = *(_DWORD *)(v141 + (v1118 >> 30));
              if (v1119 >= 1)
              {
                v1120 = 0;
                v1121 = 0;
                v1122 = 0;
                v1123 = v142 << 30;
                v1124 = v139[3];
                v1125 = v1118 >> 29;
                v1126 = *(_QWORD *)((char *)v1124 + (v1118 >> 29));
                v1127 = v3[3];
                result = v1123 - 0x100000000;
                v1128 = (v1123 - 0x100000000) >> 29;
                v1129 = *(_QWORD *)((char *)v1124 + v1128);
                v1130 = *(_DWORD *)(v141 + (result >> 30));
                v1131 = 8 * *(_QWORD *)(v1127 + v1125);
                v1132 = 8 * *(_QWORD *)(v1127 + v1128);
                do
                {
                  if (v1130 >= 1)
                  {
                    result = (uint64_t)v139[19];
                    v1133 = (_QWORD *)(v3[19] + v1120);
                    v1134 = v1130;
                    do
                    {
                      *v1133 = *(unsigned __int8 *)(result + v1122);
                      v1133 = (_QWORD *)((char *)v1133 + v1132);
                      result += v1129;
                      --v1134;
                    }
                    while (v1134);
                  }
                  v1122 += v1126;
                  ++v1121;
                  v1120 += v1131;
                }
                while (v1121 != v1119);
              }
              break;
            case 3:
              v1135 = (v142 << 30) - 0x300000000;
              v1136 = *(_DWORD *)(v141 + (v1135 >> 30));
              if (v1136 >= 1)
              {
                v1137 = 0;
                v1138 = 0;
                v1139 = 0;
                v1140 = v142 << 30;
                v1141 = v139[3];
                v1142 = v1135 >> 29;
                v1143 = *(_QWORD *)((char *)v1141 + (v1135 >> 29));
                v1144 = v3[3];
                v1145 = *(_QWORD *)(v1144 + v1142);
                v1146 = v1140 - 0x200000000;
                v1147 = (v1140 - 0x200000000) >> 29;
                v1148 = v1140 - 0x100000000;
                v1149 = *(_QWORD *)((char *)v1141 + v1147);
                v1150 = *(_QWORD *)(v1144 + v1147);
                v1151 = *(_DWORD *)(v141 + (v1146 >> 30));
                v1152 = v1148 >> 32;
                result = 8 * v1145;
                v1153 = 8 * v1150;
                do
                {
                  if (v1151 >= 1)
                  {
                    v1154 = 0;
                    v1155 = *(_QWORD *)&v1141[2 * v1152];
                    v1156 = *(_DWORD *)(v141 + 4 * v1152);
                    v1157 = *a2;
                    v1158 = 8 * *(_QWORD *)(v1144 + 8 * v1152);
                    v1159 = v1137;
                    v1160 = v1139;
                    do
                    {
                      if (v1156 >= 1)
                      {
                        v1161 = v139[19];
                        v1162 = (_QWORD *)(v1157[19] + v1159);
                        v1163 = v1156;
                        do
                        {
                          *v1162 = *((unsigned __int8 *)v1161 + v1160);
                          v1162 = (_QWORD *)((char *)v1162 + v1158);
                          v1161 = (unsigned int *)((char *)v1161 + v1155);
                          --v1163;
                        }
                        while (v1163);
                      }
                      v1160 += v1149;
                      ++v1154;
                      v1159 += v1153;
                    }
                    while (v1154 != v1151);
                  }
                  v1139 += v1143;
                  ++v1138;
                  v1137 += result;
                }
                while (v1138 != v1136);
              }
              break;
            case 4:
              v1164 = (v142 << 30) - 0x400000000;
              v1531 = *(_DWORD *)(v141 + (v1164 >> 30));
              if (v1531 >= 1)
              {
                v1165 = 0;
                v1166 = 0;
                v1167 = 0;
                v1168 = v139[3];
                v1169 = v1164 >> 29;
                v1514 = *(_QWORD *)((char *)v1168 + v1169);
                v1170 = v3[3];
                v1171 = (v142 << 30) - 0x300000000;
                v1172 = (v142 << 30) - 0x200000000;
                v1173 = (v142 << 30) - 0x100000000;
                v1174 = *(_QWORD *)((char *)v1168 + (v1171 >> 29));
                v1175 = *(_QWORD *)(v1170 + (v1171 >> 29));
                v1176 = *(_DWORD *)(v141 + (v1171 >> 30));
                v1177 = v1172 >> 32;
                result = v1173 >> 32;
                v1497 = 8 * *(_QWORD *)(v1170 + v1169);
                v1178 = 8 * v1175;
                do
                {
                  if (v1176 >= 1)
                  {
                    v1179 = 0;
                    v1180 = *(_QWORD *)&v1168[2 * v1177];
                    v1181 = *(_DWORD *)(v141 + 4 * v1177);
                    v1182 = 8 * *(_QWORD *)(v1170 + 8 * v1177);
                    v1183 = v1165;
                    v1184 = v1167;
                    do
                    {
                      if (v1181 >= 1)
                      {
                        v1185 = 0;
                        v1186 = *(_QWORD *)&v1168[2 * result];
                        v1187 = *(_DWORD *)(v141 + 4 * result);
                        v1188 = *a2;
                        v1189 = 8 * *(_QWORD *)(v1170 + 8 * result);
                        v1190 = v1183;
                        v1191 = v1184;
                        do
                        {
                          if (v1187 >= 1)
                          {
                            v1192 = v139[19];
                            v1193 = (_QWORD *)(v1188[19] + v1190);
                            v1194 = v1187;
                            do
                            {
                              *v1193 = *((unsigned __int8 *)v1192 + v1191);
                              v1193 = (_QWORD *)((char *)v1193 + v1189);
                              v1192 = (unsigned int *)((char *)v1192 + v1186);
                              --v1194;
                            }
                            while (v1194);
                          }
                          v1191 += v1180;
                          ++v1185;
                          v1190 += v1182;
                        }
                        while (v1185 != v1181);
                      }
                      v1184 += v1174;
                      ++v1179;
                      v1183 += v1178;
                    }
                    while (v1179 != v1176);
                  }
                  v1167 += v1514;
                  ++v1166;
                  v1165 += v1497;
                }
                while (v1166 != v1531);
              }
              break;
            case 5:
              v1195 = (v142 << 30) - 0x500000000;
              v1437 = *(_DWORD *)(v141 + (v1195 >> 30));
              if (v1437 >= 1)
              {
                v1457 = 0;
                v1466 = 0;
                v1447 = 0;
                v1196 = v139[3];
                v1197 = v1195 >> 29;
                v1427 = *(_QWORD *)((char *)v1196 + v1197);
                v1198 = v3[3];
                v1199 = (v142 << 30) - 0x400000000;
                v1515 = *(_QWORD *)((char *)v1196 + (v1199 >> 29));
                v1532 = *(_DWORD *)(v141 + (v1199 >> 30));
                v1407 = (uint64_t)((v142 << 30) - 0x300000000) >> 32;
                v1200 = (uint64_t)((v142 << 30) - 0x100000000) >> 32;
                v1417 = 8 * *(_QWORD *)(v1198 + v1197);
                v1481 = (uint64_t)((v142 << 30) - 0x200000000) >> 32;
                v1498 = 8 * *(_QWORD *)(v1198 + (v1199 >> 29));
                do
                {
                  if (v1532 >= 1)
                  {
                    v1201 = 0;
                    v1202 = *(_QWORD *)&v1196[2 * v1407];
                    v1203 = *(_DWORD *)(v141 + 4 * v1407);
                    v1204 = 8 * *(_QWORD *)(v1198 + 8 * v1407);
                    v1205 = v1457;
                    v1206 = v1466;
                    do
                    {
                      if (v1203 >= 1)
                      {
                        v1207 = 0;
                        v1208 = *(_QWORD *)&v1196[2 * v1481];
                        v1209 = *(_DWORD *)(v141 + 4 * v1481);
                        v1210 = 8 * *(_QWORD *)(v1198 + 8 * v1481);
                        v1211 = v1206;
                        v1212 = v1205;
                        do
                        {
                          if (v1209 >= 1)
                          {
                            v1213 = 0;
                            v1214 = *(_QWORD *)&v1196[2 * v1200];
                            v1215 = *(_DWORD *)(v141 + 4 * v1200);
                            v1216 = *a2;
                            v1217 = 8 * *(_QWORD *)(v1198 + 8 * v1200);
                            v1218 = v1211;
                            v1219 = v1212;
                            do
                            {
                              if (v1215 >= 1)
                              {
                                v1220 = v139[19];
                                v1221 = (uint64_t *)(v1216[19] + v1218);
                                v1222 = v1215;
                                do
                                {
                                  result = *((unsigned __int8 *)v1220 + v1219);
                                  *v1221 = result;
                                  v1221 = (uint64_t *)((char *)v1221 + v1217);
                                  v1220 = (unsigned int *)((char *)v1220 + v1214);
                                  --v1222;
                                }
                                while (v1222);
                              }
                              v1219 += v1208;
                              ++v1213;
                              v1218 += v1210;
                            }
                            while (v1213 != v1209);
                          }
                          v1212 += v1202;
                          ++v1207;
                          v1211 += v1204;
                        }
                        while (v1207 != v1203);
                      }
                      v1205 += v1515;
                      ++v1201;
                      v1206 += v1498;
                    }
                    while (v1201 != v1532);
                  }
                  v1457 += v1427;
                  v1466 += v1417;
                  ++v1447;
                }
                while (v1447 != v1437);
              }
              break;
            default:
              LODWORD(v1084) = 1;
              v1085 = -20;
              do
              {
                v1084 = *(int *)(v140 + v1085) * (uint64_t)(int)v1084;
                v1085 += 4;
              }
              while (v1085);
              v1393 = v139[6];
              if (v1393)
              {
                v1086 = 0;
                v1373 = *v3;
                v1087 = (v142 << 30) - 0x500000000;
                v1383 = (v142 >> 2) - 1;
                v1088 = v139[3];
                v1089 = v3[3];
                v1436 = *(_DWORD *)(v141 + (v1087 >> 30));
                v1378 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1368 = (uint64_t)((v142 << 30) - 0x400000000) >> 32;
                v1406 = (uint64_t)((v142 << 30) - 0x300000000) >> 32;
                v1480 = (uint64_t)((v142 << 30) - 0x200000000) >> 32;
                v1090 = (uint64_t)((v142 << 30) - 0x100000000) >> 32;
                v1416 = 8 * *(_QWORD *)(v1089 + (v1087 >> 29));
                v1426 = *(_QWORD *)((char *)v1088 + (v1087 >> 29));
                v1388 = v1084;
                do
                {
                  v1091 = v1383;
                  if ((v1383 & 0x80000000) != 0)
                  {
                    v1092 = 0;
                    v1093 = v1378;
                  }
                  else
                  {
                    v1092 = 0;
                    LODWORD(result) = v1086;
                    v1093 = v1378;
                    do
                    {
                      v1094 = ldiv((int)result, *(int *)(v141 + 4 * v1091));
                      result = v1094.quot;
                      v1092 += *(_QWORD *)&v1088[2 * v1091--] * v1094.rem;
                    }
                    while (v1091 != -1);
                  }
                  v1398 = v1086;
                  v1095 = 0;
                  if ((v1093 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1086;
                    do
                    {
                      v1096 = ldiv((int)result, *(int *)(v1373 + 4 * v1093));
                      result = v1096.quot;
                      v1095 += *(_QWORD *)(v1089 + 8 * v1093--) * v1096.rem;
                    }
                    while (v1093 != -1);
                  }
                  if (v1436 >= 1)
                  {
                    v1097 = 0;
                    v1513 = *(_QWORD *)&v1088[2 * v1368];
                    v1530 = *(_DWORD *)(v141 + 4 * v1368);
                    v1465 = 8 * v1095;
                    v1496 = 8 * *(_QWORD *)(v1089 + 8 * v1368);
                    do
                    {
                      v1446 = v1097;
                      v1456 = v1092;
                      if (v1530 >= 1)
                      {
                        v1098 = 0;
                        v1099 = *(_QWORD *)&v1088[2 * v1406];
                        v1100 = *(_DWORD *)(v141 + 4 * v1406);
                        v1101 = 8 * *(_QWORD *)(v1089 + 8 * v1406);
                        v1102 = v1465;
                        do
                        {
                          if (v1100 >= 1)
                          {
                            v1103 = 0;
                            v1104 = *(_QWORD *)&v1088[2 * v1480];
                            v1105 = *(_DWORD *)(v141 + 4 * v1480);
                            v1106 = 8 * *(_QWORD *)(v1089 + 8 * v1480);
                            v1107 = v1102;
                            result = v1092;
                            do
                            {
                              if (v1105 >= 1)
                              {
                                v1108 = 0;
                                v1109 = *(_QWORD *)&v1088[2 * v1090];
                                v1110 = *(_DWORD *)(v141 + 4 * v1090);
                                v1111 = *a2;
                                v1112 = 8 * *(_QWORD *)(v1089 + 8 * v1090);
                                v1113 = v1107;
                                v1114 = result;
                                do
                                {
                                  if (v1110 >= 1)
                                  {
                                    v1115 = v139[19];
                                    v1116 = (_QWORD *)(v1111[19] + v1113);
                                    v1117 = v1110;
                                    do
                                    {
                                      *v1116 = *((unsigned __int8 *)v1115 + v1114);
                                      v1116 = (_QWORD *)((char *)v1116 + v1112);
                                      v1115 = (unsigned int *)((char *)v1115 + v1109);
                                      --v1117;
                                    }
                                    while (v1117);
                                  }
                                  v1114 += v1104;
                                  ++v1108;
                                  v1113 += v1106;
                                }
                                while (v1108 != v1105);
                              }
                              result += v1099;
                              ++v1103;
                              v1107 += v1101;
                            }
                            while (v1103 != v1100);
                          }
                          v1092 += v1513;
                          ++v1098;
                          v1102 += v1496;
                        }
                        while (v1098 != v1530);
                      }
                      v1092 = v1456 + v1426;
                      v1097 = v1446 + 1;
                      v1465 += v1416;
                    }
                    while (v1446 + 1 != v1436);
                  }
                  v1086 += v1388;
                }
                while ((unint64_t)v1393 > v1398 + v1388);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v22 = 0.0;
          if (**(_BYTE **)(*(_QWORD *)result + 152))
            v22 = 1.0;
          v23 = v3[6];
          if (v23)
          {
            v24 = (float *)v3[19];
            do
            {
              *v24++ = v22;
              --v23;
            }
            while (v23);
          }
          break;
        case 1:
          v151 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v151)
          {
            v152 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v153 = (float *)v3[19];
            do
            {
              if (*v152++)
                v155 = 1.0;
              else
                v155 = 0.0;
              *v153++ = v155;
              --v151;
            }
            while (v151);
          }
          break;
        case 2:
          v156 = *(int ***)result;
          v157 = **(int ***)result;
          v158 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v157;
          switch(v158 >> 2)
          {
            case 1:
              v159 = *v157;
              if ((int)v159 >= 1)
              {
                v160 = v156[19];
                v161 = (float *)v3[19];
                v162 = *(_QWORD *)v156[3];
                do
                {
                  if (*(_BYTE *)v160)
                    v163 = 1.0;
                  else
                    v163 = 0.0;
                  *v161++ = v163;
                  v160 = (int *)((char *)v160 + v162);
                  --v159;
                }
                while (v159);
              }
              break;
            case 2:
              v503 = *v157;
              if (*v157 >= 1)
              {
                v504 = 0;
                v505 = 0;
                v506 = 0;
                v507 = v156[19];
                v508 = v3[19];
                v509 = v157[1];
                v510 = v156[3];
                v512 = *(_QWORD *)v510;
                v511 = *((_QWORD *)v510 + 1);
                v513 = v512 - v511 * v509;
                do
                {
                  v514 = v509;
                  if ((int)v509 >= 1)
                  {
                    do
                    {
                      result = *((unsigned __int8 *)v507 + v506);
                      if (*((_BYTE *)v507 + v506))
                        v515 = 1.0;
                      else
                        v515 = 0.0;
                      *(float *)(v508 + 4 * v505++) = v515;
                      v506 += v511;
                      --v514;
                    }
                    while (v514);
                  }
                  v506 += v513;
                  ++v504;
                }
                while (v504 != v503);
              }
              break;
            case 3:
              v516 = *v157;
              if (*v157 >= 1)
              {
                v517 = 0;
                result = 0;
                v518 = 0;
                v519 = v156[19];
                v520 = v3[19];
                v521 = v157[1];
                v522 = v156[3];
                v523 = *((_QWORD *)v522 + 1);
                v524 = *(_QWORD *)v522 - v523 * v521;
                do
                {
                  if ((int)v521 < 1)
                  {
                    v531 = result;
                  }
                  else
                  {
                    v525 = 0;
                    v526 = v157[2];
                    v527 = v156[3];
                    v528 = v523 - *((_QWORD *)v522 + 2) * v526;
                    do
                    {
                      if ((int)v526 < 1)
                      {
                        v531 = result;
                      }
                      else
                      {
                        v529 = *((_QWORD *)v527 + 2);
                        v530 = v526;
                        do
                        {
                          v531 = result + 1;
                          if (*((_BYTE *)v519 + v518))
                            v532 = 1.0;
                          else
                            v532 = 0.0;
                          *(float *)(v520 + 4 * result) = v532;
                          v518 += v529;
                          ++result;
                          --v530;
                        }
                        while (v530);
                      }
                      v518 += v528;
                      ++v525;
                      result = v531;
                    }
                    while (v525 != (_DWORD)v521);
                  }
                  v518 += v524;
                  ++v517;
                  result = v531;
                }
                while (v517 != v516);
              }
              break;
            case 4:
              v533 = *v157;
              if (*v157 >= 1)
              {
                v534 = 0;
                result = 0;
                v535 = 0;
                v536 = v156[19];
                v537 = v3[19];
                v538 = v157[1];
                v539 = v156[3];
                v540 = *((_QWORD *)v539 + 1);
                v541 = *(_QWORD *)v539 - v540 * v538;
                do
                {
                  if ((int)v538 < 1)
                  {
                    v552 = result;
                  }
                  else
                  {
                    v542 = 0;
                    v543 = v157[2];
                    v544 = v156[3];
                    v545 = v540 - *((_QWORD *)v539 + 2) * v543;
                    do
                    {
                      if ((int)v543 < 1)
                      {
                        v552 = result;
                      }
                      else
                      {
                        v546 = 0;
                        v547 = v157[3];
                        v548 = v156[3];
                        v549 = *((_QWORD *)v544 + 2) - *((_QWORD *)v544 + 3) * v547;
                        do
                        {
                          if ((int)v547 < 1)
                          {
                            v552 = result;
                          }
                          else
                          {
                            v550 = *((_QWORD *)v548 + 3);
                            v551 = v547;
                            do
                            {
                              v552 = result + 1;
                              if (*((_BYTE *)v536 + v535))
                                v553 = 1.0;
                              else
                                v553 = 0.0;
                              *(float *)(v537 + 4 * result) = v553;
                              v535 += v550;
                              ++result;
                              --v551;
                            }
                            while (v551);
                          }
                          v535 += v549;
                          ++v546;
                          result = v552;
                        }
                        while (v546 != (_DWORD)v543);
                      }
                      v535 += v545;
                      ++v542;
                      result = v552;
                    }
                    while (v542 != (_DWORD)v538);
                  }
                  v535 += v541;
                  ++v534;
                  result = v552;
                }
                while (v534 != v533);
              }
              break;
            default:
              v493 = v3[6];
              if (v493)
              {
                v494 = 0;
                v495 = v156[19];
                v496 = v3[19];
                v497 = ((unint64_t)v158 >> 2) - 1;
                v498 = v156[3];
                do
                {
                  v499 = 0;
                  if ((v497 & 0x80000000) == 0)
                  {
                    v500 = v497;
                    LODWORD(result) = v494;
                    do
                    {
                      v501 = ldiv((int)result, v157[v500]);
                      result = v501.quot;
                      v499 += *(_QWORD *)&v498[2 * v500--] * v501.rem;
                    }
                    while (v500 != -1);
                  }
                  if (*((_BYTE *)v495 + v499))
                    v502 = 1.0;
                  else
                    v502 = 0.0;
                  *(float *)(v496 + 4 * v494++) = v502;
                }
                while (v494 != v493);
              }
              break;
          }
          break;
        case 3:
          v164 = *(unsigned int ***)result;
          v166 = **(_QWORD **)result;
          v165 = *(_QWORD *)(*(_QWORD *)result + 8);
          v167 = v165 - v166;
          switch((v165 - v166) >> 2)
          {
            case 1:
              v168 = (v167 << 30) - 0x100000000;
              v169 = *(_DWORD *)(v166 + (v168 >> 30));
              if (v169 >= 1)
              {
                v170 = v168 >> 29;
                v171 = *(_QWORD *)((char *)v164[3] + (v168 >> 29));
                v172 = *(_QWORD *)(v3[3] + v170);
                v173 = (float *)v3[19];
                v174 = v164[19];
                v175 = 4 * v172;
                do
                {
                  if (*(_BYTE *)v174)
                    v176 = 1.0;
                  else
                    v176 = 0.0;
                  *v173 = v176;
                  v174 = (unsigned int *)((char *)v174 + v171);
                  v173 = (float *)((char *)v173 + v175);
                  --v169;
                }
                while (v169);
              }
              break;
            case 2:
              v1259 = (v167 << 30) - 0x200000000;
              v1260 = *(_DWORD *)(v166 + (v1259 >> 30));
              if (v1260 >= 1)
              {
                v1261 = 0;
                v1262 = 0;
                v1263 = 0;
                v1264 = v164[3];
                v1265 = v1259 >> 29;
                v1266 = *(_QWORD *)((char *)v1264 + (v1259 >> 29));
                v1267 = v3[3];
                v1268 = *(_QWORD *)(v1267 + v1265);
                v1269 = (v167 << 30) - 0x100000000;
                result = v1269 >> 29;
                v1270 = *(_QWORD *)((char *)v1264 + (v1269 >> 29));
                v1271 = *(_QWORD *)(v1267 + (v1269 >> 29));
                v1272 = *(_DWORD *)(v166 + (v1269 >> 30));
                v1273 = 4 * v1268;
                v1274 = 4 * v1271;
                do
                {
                  if (v1272 >= 1)
                  {
                    result = (uint64_t)v164[19];
                    v1275 = (float *)(v3[19] + v1261);
                    v1276 = v1272;
                    do
                    {
                      if (*(_BYTE *)(result + v1263))
                        v1277 = 1.0;
                      else
                        v1277 = 0.0;
                      *v1275 = v1277;
                      v1275 = (float *)((char *)v1275 + v1274);
                      result += v1270;
                      --v1276;
                    }
                    while (v1276);
                  }
                  v1263 += v1266;
                  ++v1262;
                  v1261 += v1273;
                }
                while (v1262 != v1260);
              }
              break;
            case 3:
              v1278 = (v167 << 30) - 0x300000000;
              v1279 = *(_DWORD *)(v166 + (v1278 >> 30));
              if (v1279 >= 1)
              {
                v1280 = 0;
                v1281 = 0;
                v1282 = 0;
                v1283 = v164[3];
                v1284 = v1278 >> 29;
                v1285 = *(_QWORD *)((char *)v1283 + (v1278 >> 29));
                v1286 = v3[3];
                v1287 = *(_QWORD *)(v1286 + v1284);
                v1288 = v167 << 30;
                v1289 = (v167 << 30) - 0x200000000;
                v1290 = *(_QWORD *)((char *)v1283 + (v1289 >> 29));
                v1291 = *(_QWORD *)(v1286 + (v1289 >> 29));
                v1292 = *(_DWORD *)(v166 + (v1289 >> 30));
                v1293 = (v1288 - 0x100000000) >> 32;
                result = 4 * v1287;
                v1294 = 4 * v1291;
                do
                {
                  if (v1292 >= 1)
                  {
                    v1295 = 0;
                    v1296 = *(_QWORD *)&v1283[2 * v1293];
                    v1297 = *(_DWORD *)(v166 + 4 * v1293);
                    v1298 = *a2;
                    v1299 = 4 * *(_QWORD *)(v1286 + 8 * v1293);
                    v1300 = v1280;
                    v1301 = v1282;
                    do
                    {
                      if (v1297 >= 1)
                      {
                        v1302 = v164[19];
                        v1303 = (float *)(v1298[19] + v1300);
                        v1304 = v1297;
                        do
                        {
                          if (*((_BYTE *)v1302 + v1301))
                            v1305 = 1.0;
                          else
                            v1305 = 0.0;
                          *v1303 = v1305;
                          v1303 = (float *)((char *)v1303 + v1299);
                          v1302 = (unsigned int *)((char *)v1302 + v1296);
                          --v1304;
                        }
                        while (v1304);
                      }
                      v1301 += v1290;
                      ++v1295;
                      v1300 += v1294;
                    }
                    while (v1295 != v1292);
                  }
                  v1282 += v1285;
                  ++v1281;
                  v1280 += result;
                }
                while (v1281 != v1279);
              }
              break;
            case 4:
              v1306 = (v167 << 30) - 0x400000000;
              v1534 = *(_DWORD *)(v166 + (v1306 >> 30));
              if (v1534 >= 1)
              {
                v1307 = 0;
                v1308 = 0;
                v1309 = 0;
                v1310 = v164[3];
                v1311 = v1306 >> 29;
                v1517 = *(_QWORD *)((char *)v1310 + v1311);
                v1312 = v167 << 30;
                v1313 = v3[3];
                v1314 = (v167 << 30) - 0x300000000;
                v1315 = *(_QWORD *)((char *)v1310 + (v1314 >> 29));
                v1316 = *(_QWORD *)(v1313 + (v1314 >> 29));
                v1317 = *(_DWORD *)(v166 + (v1314 >> 30));
                result = (v1312 - 0x100000000) >> 32;
                v1483 = (v1312 - 0x200000000) >> 32;
                v1500 = 4 * *(_QWORD *)(v1313 + v1311);
                v1318 = 4 * v1316;
                do
                {
                  if (v1317 >= 1)
                  {
                    v1319 = 0;
                    v1320 = *(_QWORD *)&v1310[2 * v1483];
                    v1321 = *(_DWORD *)(v166 + 4 * v1483);
                    v1322 = 4 * *(_QWORD *)(v1313 + 8 * v1483);
                    v1323 = v1307;
                    v1324 = v1309;
                    do
                    {
                      if (v1321 >= 1)
                      {
                        v1325 = 0;
                        v1326 = *(_QWORD *)&v1310[2 * result];
                        v1327 = *(_DWORD *)(v166 + 4 * result);
                        v1328 = *a2;
                        v1329 = 4 * *(_QWORD *)(v1313 + 8 * result);
                        v1330 = v1323;
                        v1331 = v1324;
                        do
                        {
                          if (v1327 >= 1)
                          {
                            v1332 = v164[19];
                            v1333 = (float *)(v1328[19] + v1330);
                            v1334 = v1327;
                            do
                            {
                              if (*((_BYTE *)v1332 + v1331))
                                v1335 = 1.0;
                              else
                                v1335 = 0.0;
                              *v1333 = v1335;
                              v1333 = (float *)((char *)v1333 + v1329);
                              v1332 = (unsigned int *)((char *)v1332 + v1326);
                              --v1334;
                            }
                            while (v1334);
                          }
                          v1331 += v1320;
                          ++v1325;
                          v1330 += v1322;
                        }
                        while (v1325 != v1321);
                      }
                      v1324 += v1315;
                      ++v1319;
                      v1323 += v1318;
                    }
                    while (v1319 != v1317);
                  }
                  v1309 += v1517;
                  ++v1308;
                  v1307 += v1500;
                }
                while (v1308 != v1534);
              }
              break;
            case 5:
              v1336 = (v167 << 30) - 0x500000000;
              v1439 = *(_DWORD *)(v166 + (v1336 >> 30));
              if (v1439 >= 1)
              {
                v1459 = 0;
                v1468 = 0;
                v1449 = 0;
                v1337 = v164[3];
                v1338 = v1336 >> 29;
                v1429 = *(_QWORD *)((char *)v1337 + v1338);
                v1339 = v3[3];
                v1340 = (v167 << 30) - 0x400000000;
                v1518 = *(_QWORD *)((char *)v1337 + (v1340 >> 29));
                v1535 = *(_DWORD *)(v166 + (v1340 >> 30));
                v1409 = (uint64_t)((v167 << 30) - 0x300000000) >> 32;
                v1341 = (uint64_t)((v167 << 30) - 0x100000000) >> 32;
                v1419 = 4 * *(_QWORD *)(v1339 + v1338);
                v1484 = (uint64_t)((v167 << 30) - 0x200000000) >> 32;
                v1501 = 4 * *(_QWORD *)(v1339 + (v1340 >> 29));
                do
                {
                  if (v1535 >= 1)
                  {
                    v1342 = 0;
                    v1343 = *(_QWORD *)&v1337[2 * v1409];
                    v1344 = *(_DWORD *)(v166 + 4 * v1409);
                    v1345 = 4 * *(_QWORD *)(v1339 + 8 * v1409);
                    v1346 = v1459;
                    v1347 = v1468;
                    do
                    {
                      if (v1344 >= 1)
                      {
                        v1348 = 0;
                        v1349 = *(_QWORD *)&v1337[2 * v1484];
                        v1350 = *(_DWORD *)(v166 + 4 * v1484);
                        v1351 = 4 * *(_QWORD *)(v1339 + 8 * v1484);
                        v1352 = v1347;
                        v1353 = v1346;
                        do
                        {
                          if (v1350 >= 1)
                          {
                            v1354 = 0;
                            v1355 = *(_QWORD *)&v1337[2 * v1341];
                            v1356 = *(_DWORD *)(v166 + 4 * v1341);
                            v1357 = *a2;
                            v1358 = 4 * *(_QWORD *)(v1339 + 8 * v1341);
                            v1359 = v1352;
                            v1360 = v1353;
                            do
                            {
                              if (v1356 >= 1)
                              {
                                v1361 = v164[19];
                                v1362 = (float *)(v1357[19] + v1359);
                                v1363 = v1356;
                                do
                                {
                                  result = *((unsigned __int8 *)v1361 + v1360);
                                  if (*((_BYTE *)v1361 + v1360))
                                    v1364 = 1.0;
                                  else
                                    v1364 = 0.0;
                                  *v1362 = v1364;
                                  v1362 = (float *)((char *)v1362 + v1358);
                                  v1361 = (unsigned int *)((char *)v1361 + v1355);
                                  --v1363;
                                }
                                while (v1363);
                              }
                              v1360 += v1349;
                              ++v1354;
                              v1359 += v1351;
                            }
                            while (v1354 != v1350);
                          }
                          v1353 += v1343;
                          ++v1348;
                          v1352 += v1345;
                        }
                        while (v1348 != v1344);
                      }
                      v1346 += v1518;
                      ++v1342;
                      v1347 += v1501;
                    }
                    while (v1342 != v1535);
                  }
                  v1459 += v1429;
                  v1468 += v1419;
                  ++v1449;
                }
                while (v1449 != v1439);
              }
              break;
            default:
              LODWORD(v1223) = 1;
              v1224 = -20;
              do
              {
                v1223 = *(int *)(v165 + v1224) * (uint64_t)(int)v1223;
                v1224 += 4;
              }
              while (v1224);
              v1394 = v164[6];
              if (v1394)
              {
                v1225 = 0;
                v1374 = *v3;
                v1226 = (v167 << 30) - 0x500000000;
                v1384 = (v167 >> 2) - 1;
                v1227 = v164[3];
                v1379 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1228 = v3[3];
                v1438 = *(_DWORD *)(v166 + (v1226 >> 30));
                v1369 = (uint64_t)((v167 << 30) - 0x400000000) >> 32;
                v1408 = (uint64_t)((v167 << 30) - 0x300000000) >> 32;
                v1482 = (uint64_t)((v167 << 30) - 0x200000000) >> 32;
                v1229 = (uint64_t)((v167 << 30) - 0x100000000) >> 32;
                v1418 = 4 * *(_QWORD *)(v1228 + (v1226 >> 29));
                v1428 = *(_QWORD *)((char *)v1227 + (v1226 >> 29));
                v1389 = v1223;
                do
                {
                  v1230 = v1384;
                  if ((v1384 & 0x80000000) != 0)
                  {
                    v1231 = 0;
                    v1232 = v1379;
                  }
                  else
                  {
                    v1231 = 0;
                    LODWORD(result) = v1225;
                    v1232 = v1379;
                    do
                    {
                      v1233 = ldiv((int)result, *(int *)(v166 + 4 * v1230));
                      result = v1233.quot;
                      v1231 += *(_QWORD *)&v1227[2 * v1230--] * v1233.rem;
                    }
                    while (v1230 != -1);
                  }
                  v1399 = v1225;
                  v1234 = 0;
                  if ((v1232 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1225;
                    do
                    {
                      v1235 = ldiv((int)result, *(int *)(v1374 + 4 * v1232));
                      result = v1235.quot;
                      v1234 += *(_QWORD *)(v1228 + 8 * v1232--) * v1235.rem;
                    }
                    while (v1232 != -1);
                  }
                  if (v1438 >= 1)
                  {
                    v1236 = 0;
                    v1516 = *(_QWORD *)&v1227[2 * v1369];
                    v1533 = *(_DWORD *)(v166 + 4 * v1369);
                    v1467 = 4 * v1234;
                    v1499 = 4 * *(_QWORD *)(v1228 + 8 * v1369);
                    do
                    {
                      v1448 = v1236;
                      v1458 = v1231;
                      if (v1533 >= 1)
                      {
                        v1237 = 0;
                        v1238 = *(_QWORD *)&v1227[2 * v1408];
                        v1239 = *(_DWORD *)(v166 + 4 * v1408);
                        v1240 = 4 * *(_QWORD *)(v1228 + 8 * v1408);
                        v1242 = v1231;
                        v1241 = v1467;
                        do
                        {
                          if (v1239 >= 1)
                          {
                            v1243 = 0;
                            v1244 = *(_QWORD *)&v1227[2 * v1482];
                            v1245 = *(_DWORD *)(v166 + 4 * v1482);
                            v1246 = 4 * *(_QWORD *)(v1228 + 8 * v1482);
                            v1247 = v1241;
                            result = v1242;
                            do
                            {
                              if (v1245 >= 1)
                              {
                                v1248 = 0;
                                v1249 = *(_QWORD *)&v1227[2 * v1229];
                                v1250 = *(_DWORD *)(v166 + 4 * v1229);
                                v1251 = *a2;
                                v1252 = 4 * *(_QWORD *)(v1228 + 8 * v1229);
                                v1253 = v1247;
                                v1254 = result;
                                do
                                {
                                  if (v1250 >= 1)
                                  {
                                    v1255 = v164[19];
                                    v1256 = (float *)(v1251[19] + v1253);
                                    v1257 = v1250;
                                    do
                                    {
                                      if (*((_BYTE *)v1255 + v1254))
                                        v1258 = 1.0;
                                      else
                                        v1258 = 0.0;
                                      *v1256 = v1258;
                                      v1256 = (float *)((char *)v1256 + v1252);
                                      v1255 = (unsigned int *)((char *)v1255 + v1249);
                                      --v1257;
                                    }
                                    while (v1257);
                                  }
                                  v1254 += v1244;
                                  ++v1248;
                                  v1253 += v1246;
                                }
                                while (v1248 != v1245);
                              }
                              result += v1238;
                              ++v1243;
                              v1247 += v1240;
                            }
                            while (v1243 != v1239);
                          }
                          v1242 += v1516;
                          ++v1237;
                          v1241 += v1499;
                        }
                        while (v1237 != v1533);
                      }
                      v1231 = v1458 + v1428;
                      v1236 = v1448 + 1;
                      v1467 += v1418;
                    }
                    while (v1448 + 1 != v1438);
                  }
                  v1225 += v1389;
                }
                while ((unint64_t)v1394 > v1399 + v1389);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<unsigned char>(uint64_t result, uint64_t **a2, int a3, float a4)
{
  uint64_t *v4;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  float *v25;
  size_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  BOOL *v29;
  int v30;
  uint64_t *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  BOOL *v36;
  uint64_t v37;
  unsigned int **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL *v47;
  unsigned int *v48;
  int **v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  int **v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  int *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  _DWORD *v70;
  int v71;
  int **v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int **v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  unsigned int *v89;
  uint64_t v90;
  int **v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  int **v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  int *v109;
  uint64_t v110;
  unsigned __int8 *v111;
  _DWORD *v112;
  int v113;
  int **v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int **v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 *v134;
  _QWORD *v135;
  unsigned int v136;
  int **v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned int **v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned int *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  float *v158;
  unsigned int v159;
  int **v160;
  int *v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  float *v165;
  uint64_t v166;
  unsigned int **v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  float *v176;
  unsigned int *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  ldiv_t v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  unint64_t v236;
  int *v237;
  uint64_t v238;
  int *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int *v243;
  ldiv_t v244;
  int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  int *v249;
  uint64_t v250;
  int v251;
  int *v252;
  uint64_t v253;
  int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  int *v258;
  uint64_t v259;
  int v260;
  int i;
  int v262;
  uint64_t v263;
  int *v264;
  uint64_t v265;
  int v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  int v272;
  int j;
  int v274;
  int k;
  int v276;
  uint64_t v277;
  int *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int *v283;
  uint64_t v284;
  uint64_t v285;
  int *v286;
  uint64_t v287;
  uint64_t v288;
  ldiv_t v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  int *v294;
  uint64_t v295;
  int *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  int *v304;
  uint64_t v305;
  int *v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  int v310;
  int *v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  int *v320;
  uint64_t v321;
  int *v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  int *v327;
  uint64_t v328;
  int v329;
  int v330;
  int *v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  int *v338;
  uint64_t v339;
  int *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int *v344;
  ldiv_t v345;
  int v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  int *v350;
  uint64_t v351;
  int v352;
  int *v353;
  uint64_t v354;
  int v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  int *v359;
  uint64_t v360;
  int v361;
  int m;
  int v363;
  uint64_t v364;
  int *v365;
  uint64_t v366;
  int v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  int *v371;
  uint64_t v372;
  int v373;
  int n;
  int v375;
  int ii;
  int v377;
  uint64_t v378;
  int *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int *v384;
  uint64_t v385;
  uint64_t v386;
  int *v387;
  uint64_t v388;
  uint64_t v389;
  ldiv_t v390;
  int v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  int *v395;
  uint64_t v396;
  int *v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  int *v405;
  uint64_t v406;
  int *v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  int v411;
  int *v412;
  uint64_t v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  int v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  int *v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  int v427;
  int *v428;
  uint64_t v429;
  int v430;
  int v431;
  int *v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int *v440;
  uint64_t v441;
  uint64_t v442;
  int *v443;
  uint64_t v444;
  uint64_t v445;
  ldiv_t v446;
  int v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  int *v451;
  uint64_t v452;
  uint64_t v453;
  int *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  int v459;
  int v460;
  uint64_t v461;
  int *v462;
  uint64_t v463;
  uint64_t v464;
  int *v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  int *v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  uint64_t v474;
  int v475;
  int v476;
  uint64_t v477;
  int *v478;
  uint64_t v479;
  uint64_t v480;
  int *v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  int *v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  int *v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int *v497;
  uint64_t v498;
  uint64_t v499;
  int *v500;
  uint64_t v501;
  uint64_t v502;
  ldiv_t v503;
  int v504;
  int v505;
  uint64_t v506;
  uint64_t v507;
  int *v508;
  uint64_t v509;
  uint64_t v510;
  int *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  int v516;
  int v517;
  uint64_t v518;
  int *v519;
  uint64_t v520;
  uint64_t v521;
  int *v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  uint64_t v526;
  int *v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  int v532;
  int v533;
  uint64_t v534;
  int *v535;
  uint64_t v536;
  uint64_t v537;
  int *v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  int *v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  int *v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unsigned int *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  ldiv_t v561;
  uint64_t v562;
  uint64_t v563;
  ldiv_t v564;
  int v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  int v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  int v581;
  uint64_t v582;
  uint64_t *v583;
  uint64_t v584;
  unsigned int *v585;
  int v586;
  uint64_t v587;
  int v588;
  int v589;
  uint64_t v590;
  uint64_t v591;
  unsigned int *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  unsigned int *v600;
  int v601;
  uint64_t v602;
  int v603;
  int v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unsigned int *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  int v623;
  uint64_t v624;
  uint64_t *v625;
  uint64_t v626;
  unsigned int *v627;
  int v628;
  uint64_t v629;
  int v630;
  uint64_t v631;
  uint64_t v632;
  unsigned int *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  int v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  int v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t v654;
  unsigned int *v655;
  int v656;
  uint64_t v657;
  unsigned int *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  int v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  int v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  int v673;
  uint64_t v674;
  int v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t *v680;
  uint64_t v681;
  unsigned int *v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  _QWORD *v686;
  int *v687;
  unint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  ldiv_t v692;
  uint64_t v693;
  unint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  int quot;
  ldiv_t v699;
  uint64_t v700;
  int v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  int v706;
  int v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  int v720;
  int v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  int v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  int v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unsigned int *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  ldiv_t v757;
  uint64_t v758;
  uint64_t v759;
  ldiv_t v760;
  int v761;
  int v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  int v767;
  int v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  int v773;
  uint64_t v774;
  uint64_t *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  int v779;
  unsigned int *v780;
  _DWORD *v781;
  uint64_t v782;
  int v783;
  uint64_t v784;
  int v785;
  uint64_t v786;
  unsigned int *v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unsigned int *v796;
  _DWORD *v797;
  uint64_t v798;
  int v799;
  uint64_t v800;
  int v801;
  uint64_t v802;
  uint64_t v803;
  unsigned int *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  int v817;
  int v818;
  uint64_t v819;
  uint64_t *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  int v824;
  unsigned int *v825;
  _DWORD *v826;
  uint64_t v827;
  uint64_t v828;
  int v829;
  uint64_t v830;
  uint64_t v831;
  unsigned int *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  int v839;
  int v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  int v845;
  int v846;
  uint64_t v847;
  uint64_t *v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  unsigned int *v853;
  _DWORD *v854;
  uint64_t v855;
  uint64_t v856;
  unsigned int *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  int v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  int v867;
  int v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  int v873;
  int v874;
  uint64_t v875;
  uint64_t *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  int v880;
  unsigned int *v881;
  _DWORD *v882;
  uint64_t v883;
  uint64_t v884;
  _QWORD *v885;
  int *v886;
  unint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  ldiv_t v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  int v897;
  ldiv_t v898;
  uint64_t v899;
  int v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  int v905;
  int v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  int v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  int v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  int v926;
  int v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  int v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  unsigned int *v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  ldiv_t v956;
  uint64_t v957;
  uint64_t v958;
  ldiv_t v959;
  int v960;
  int v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  int v966;
  int v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  int v971;
  int v972;
  uint64_t v973;
  uint64_t *v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  int v978;
  unsigned int *v979;
  _DWORD *v980;
  uint64_t v981;
  int v982;
  uint64_t v983;
  int v984;
  uint64_t v985;
  unsigned int *v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  unsigned int *v995;
  _DWORD *v996;
  uint64_t v997;
  int v998;
  uint64_t v999;
  int v1000;
  uint64_t v1001;
  uint64_t v1002;
  unsigned int *v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  int v1016;
  int v1017;
  uint64_t v1018;
  uint64_t *v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  int v1023;
  unsigned int *v1024;
  _DWORD *v1025;
  uint64_t v1026;
  uint64_t v1027;
  int v1028;
  uint64_t v1029;
  uint64_t v1030;
  unsigned int *v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  int v1038;
  int v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  int v1044;
  int v1045;
  uint64_t v1046;
  uint64_t *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  int v1051;
  unsigned int *v1052;
  _DWORD *v1053;
  uint64_t v1054;
  uint64_t v1055;
  unsigned int *v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  int v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  int v1066;
  int v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  int v1072;
  int v1073;
  uint64_t v1074;
  uint64_t *v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  int v1079;
  unsigned int *v1080;
  _DWORD *v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  unsigned int *v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  ldiv_t v1092;
  uint64_t v1093;
  ldiv_t v1094;
  int v1095;
  int v1096;
  uint64_t v1097;
  int v1098;
  uint64_t v1099;
  uint64_t v1100;
  int v1101;
  uint64_t v1102;
  int v1103;
  uint64_t v1104;
  uint64_t v1105;
  int v1106;
  uint64_t v1107;
  int v1108;
  uint64_t *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unsigned int *v1113;
  _QWORD *v1114;
  int v1115;
  uint64_t v1116;
  int v1117;
  uint64_t v1118;
  int v1119;
  uint64_t v1120;
  uint64_t v1121;
  unsigned int *v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  int v1128;
  uint64_t v1129;
  uint64_t v1130;
  _QWORD *v1131;
  int v1132;
  uint64_t v1133;
  int v1134;
  uint64_t v1135;
  int v1136;
  uint64_t v1137;
  uint64_t v1138;
  unsigned int *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  int v1149;
  uint64_t v1150;
  uint64_t v1151;
  int v1152;
  uint64_t v1153;
  int v1154;
  uint64_t *v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  unsigned int *v1159;
  _QWORD *v1160;
  int v1161;
  uint64_t v1162;
  uint64_t v1163;
  int v1164;
  uint64_t v1165;
  unsigned int *v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  int v1174;
  uint64_t v1175;
  int v1176;
  uint64_t v1177;
  int v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  int v1182;
  uint64_t v1183;
  int v1184;
  uint64_t *v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  unsigned int *v1189;
  _QWORD *v1190;
  int v1191;
  uint64_t v1192;
  unsigned int *v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  int v1198;
  uint64_t v1199;
  int v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  int v1204;
  uint64_t v1205;
  int v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int v1210;
  uint64_t v1211;
  int v1212;
  uint64_t *v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  unsigned int *v1217;
  uint64_t *v1218;
  int v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  unsigned int *v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  ldiv_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  ldiv_t v1234;
  int v1235;
  int v1236;
  uint64_t v1237;
  int v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  int v1242;
  uint64_t v1243;
  int v1244;
  uint64_t v1245;
  uint64_t v1246;
  int v1247;
  uint64_t v1248;
  int v1249;
  uint64_t *v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  unsigned int *v1254;
  float *v1255;
  int v1256;
  uint64_t v1257;
  int v1258;
  uint64_t v1259;
  int v1260;
  uint64_t v1261;
  uint64_t v1262;
  unsigned int *v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  int v1269;
  uint64_t v1270;
  uint64_t v1271;
  float *v1272;
  int v1273;
  uint64_t v1274;
  int v1275;
  uint64_t v1276;
  int v1277;
  uint64_t v1278;
  uint64_t v1279;
  unsigned int *v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  int v1290;
  uint64_t v1291;
  uint64_t v1292;
  int v1293;
  uint64_t v1294;
  int v1295;
  uint64_t *v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  unsigned int *v1300;
  float *v1301;
  int v1302;
  uint64_t v1303;
  uint64_t v1304;
  int v1305;
  uint64_t v1306;
  unsigned int *v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  int v1315;
  uint64_t v1316;
  uint64_t v1317;
  int v1318;
  uint64_t v1319;
  int v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  int v1324;
  uint64_t v1325;
  int v1326;
  uint64_t *v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  unsigned int *v1331;
  float *v1332;
  int v1333;
  uint64_t v1334;
  unsigned int *v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  int v1340;
  uint64_t v1341;
  int v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  uint64_t v1347;
  int v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  int v1352;
  uint64_t v1353;
  int v1354;
  uint64_t *v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  unsigned int *v1359;
  float *v1360;
  int v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  unsigned int *v1386;
  unsigned int *v1387;
  unsigned int *v1388;
  unsigned int *v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  unsigned int *v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  int v1425;
  int v1426;
  int v1427;
  int v1428;
  int v1429;
  int v1430;
  int v1431;
  int v1432;
  uint64_t v1433;
  uint64_t v1434;
  int v1435;
  int v1436;
  int v1437;
  int v1438;
  int v1439;
  int v1440;
  int v1441;
  int v1442;
  int v1443;
  int v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  int v1453;
  int v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  _QWORD *v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  _QWORD *v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t *v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t *v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  int v1514;
  int v1515;
  int v1516;
  uint64_t v1517;
  int v1518;
  int v1519;
  int v1520;
  uint64_t v1521;
  int v1522;
  int v1523;
  int v1524;
  int v1525;
  int v1526;
  int v1527;
  int v1528;
  int v1529;
  int v1530;

  v4 = *a2;
  v6 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v7 = v4[6];
          if (v7)
            result = (uint64_t)memset((void *)v4[19], **(_BYTE **)(*(_QWORD *)result + 152) != 0, v7);
          break;
        case 1:
          v27 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v27)
          {
            v28 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v29 = (BOOL *)v4[19];
            do
            {
              v30 = *v28++;
              *v29++ = v30 != 0;
              --v27;
            }
            while (v27);
          }
          break;
        case 2:
          v31 = *(uint64_t **)result;
          v32 = **(int ***)result;
          v33 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v32;
          switch(v33 >> 2)
          {
            case 1:
              v34 = *v32;
              if ((int)v34 >= 1)
              {
                v35 = (_BYTE *)v31[19];
                v36 = (BOOL *)v4[19];
                v37 = *(_QWORD *)v31[3];
                do
                {
                  *v36++ = *v35 != 0;
                  v35 += v37;
                  --v34;
                }
                while (v34);
              }
              break;
            case 2:
              v188 = *v32;
              if (*v32 >= 1)
              {
                v189 = 0;
                v190 = 0;
                v191 = 0;
                v192 = v31[19];
                v193 = v4[19];
                v194 = v32[1];
                v195 = (uint64_t *)v31[3];
                v197 = *v195;
                v196 = v195[1];
                v198 = v197 - v196 * v194;
                do
                {
                  v199 = v194;
                  if ((int)v194 >= 1)
                  {
                    do
                    {
                      result = *(_BYTE *)(v192 + v191) != 0;
                      *(_BYTE *)(v193 + v190++) = result;
                      v191 += v196;
                      --v199;
                    }
                    while (v199);
                  }
                  v191 += v198;
                  ++v189;
                }
                while (v189 != v188);
              }
              break;
            case 3:
              v200 = *v32;
              if (*v32 >= 1)
              {
                v201 = 0;
                result = 0;
                v202 = 0;
                v203 = v31[19];
                v204 = v4[19];
                v205 = v32[1];
                v206 = (_QWORD *)v31[3];
                v207 = v206[1];
                v208 = *v206 - v207 * v205;
                do
                {
                  if ((int)v205 < 1)
                  {
                    v215 = result;
                  }
                  else
                  {
                    v209 = 0;
                    v210 = v32[2];
                    v211 = v31[3];
                    v212 = v207 - v206[2] * v210;
                    do
                    {
                      if ((int)v210 < 1)
                      {
                        v215 = result;
                      }
                      else
                      {
                        v213 = *(_QWORD *)(v211 + 16);
                        v214 = v210;
                        do
                        {
                          v215 = result + 1;
                          *(_BYTE *)(v204 + result) = *(_BYTE *)(v203 + v202) != 0;
                          v202 += v213;
                          ++result;
                          --v214;
                        }
                        while (v214);
                      }
                      v202 += v212;
                      ++v209;
                      result = v215;
                    }
                    while (v209 != (_DWORD)v205);
                  }
                  v202 += v208;
                  ++v201;
                  result = v215;
                }
                while (v201 != v200);
              }
              break;
            case 4:
              v216 = *v32;
              if (*v32 >= 1)
              {
                v217 = 0;
                result = 0;
                v218 = 0;
                v219 = v31[19];
                v220 = v4[19];
                v221 = v32[1];
                v222 = (_QWORD *)v31[3];
                v223 = v222[1];
                v224 = *v222 - v223 * v221;
                do
                {
                  if ((int)v221 < 1)
                  {
                    v235 = result;
                  }
                  else
                  {
                    v225 = 0;
                    v226 = v32[2];
                    v227 = v31[3];
                    v228 = v223 - v222[2] * v226;
                    do
                    {
                      if ((int)v226 < 1)
                      {
                        v235 = result;
                      }
                      else
                      {
                        v229 = 0;
                        v230 = v32[3];
                        v231 = v31[3];
                        v232 = *(_QWORD *)(v227 + 16) - *(_QWORD *)(v227 + 24) * v230;
                        do
                        {
                          if ((int)v230 < 1)
                          {
                            v235 = result;
                          }
                          else
                          {
                            v233 = *(_QWORD *)(v231 + 24);
                            v234 = v230;
                            do
                            {
                              v235 = result + 1;
                              *(_BYTE *)(v220 + result) = *(_BYTE *)(v219 + v218) != 0;
                              v218 += v233;
                              ++result;
                              --v234;
                            }
                            while (v234);
                          }
                          v218 += v232;
                          ++v229;
                          result = v235;
                        }
                        while (v229 != (_DWORD)v226);
                      }
                      v218 += v228;
                      ++v225;
                      result = v235;
                    }
                    while (v225 != (_DWORD)v221);
                  }
                  v218 += v224;
                  ++v217;
                  result = v235;
                }
                while (v217 != v216);
              }
              break;
            default:
              v179 = v4[6];
              if (v179)
              {
                v180 = 0;
                v181 = v31[19];
                v182 = v4[19];
                v183 = ((unint64_t)v33 >> 2) - 1;
                v184 = v31[3];
                do
                {
                  v185 = 0;
                  if ((v183 & 0x80000000) == 0)
                  {
                    v186 = v183;
                    LODWORD(result) = v180;
                    do
                    {
                      v187 = ldiv((int)result, v32[v186]);
                      result = v187.quot;
                      v185 += *(_QWORD *)(v184 + 8 * v186--) * v187.rem;
                    }
                    while (v186 != -1);
                  }
                  *(_BYTE *)(v182 + v180++) = *(_BYTE *)(v181 + v185) != 0;
                }
                while (v180 != v179);
              }
              break;
          }
          break;
        case 3:
          v38 = *(unsigned int ***)result;
          v40 = **(_QWORD **)result;
          v39 = *(_QWORD *)(*(_QWORD *)result + 8);
          v41 = v39 - v40;
          switch((v39 - v40) >> 2)
          {
            case 1:
              v42 = (v41 << 30) - 0x100000000;
              v43 = *(_DWORD *)(v40 + (v42 >> 30));
              if (v43 >= 1)
              {
                v44 = v42 >> 29;
                v45 = *(_QWORD *)((char *)v38[3] + (v42 >> 29));
                v46 = *(_QWORD *)(v4[3] + v44);
                v47 = (BOOL *)v4[19];
                v48 = v38[19];
                do
                {
                  *v47 = *(_BYTE *)v48 != 0;
                  v48 = (unsigned int *)((char *)v48 + v45);
                  v47 += v46;
                  --v43;
                }
                while (v43);
              }
              break;
            case 2:
              v587 = (v41 << 30) - 0x200000000;
              v588 = *(_DWORD *)(v40 + (v587 >> 30));
              if (v588 >= 1)
              {
                v589 = 0;
                v590 = 0;
                v591 = 0;
                v592 = v38[3];
                v593 = v587 >> 29;
                v594 = *(_QWORD *)((char *)v592 + (v587 >> 29));
                v595 = v4[3];
                v596 = *(_QWORD *)(v595 + v593);
                result = (v41 << 30) - 0x100000000;
                v597 = *(_QWORD *)((char *)v592 + (result >> 29));
                v598 = *(_QWORD *)(v595 + (result >> 29));
                v599 = *(_DWORD *)(v40 + (result >> 30));
                do
                {
                  if (v599 >= 1)
                  {
                    result = v4[19];
                    v600 = v38[19];
                    v601 = v599;
                    do
                    {
                      *(_BYTE *)(result + v591) = *((_BYTE *)v600 + v590) != 0;
                      result += v598;
                      v600 = (unsigned int *)((char *)v600 + v597);
                      --v601;
                    }
                    while (v601);
                  }
                  v590 += v594;
                  v591 += v596;
                  ++v589;
                }
                while (v589 != v588);
              }
              break;
            case 3:
              v602 = (v41 << 30) - 0x300000000;
              v603 = *(_DWORD *)(v40 + (v602 >> 30));
              if (v603 >= 1)
              {
                v604 = 0;
                v605 = 0;
                v606 = 0;
                v607 = v41 << 30;
                v608 = v38[3];
                v609 = v602 >> 29;
                v610 = *(_QWORD *)((char *)v608 + (v602 >> 29));
                v611 = v4[3];
                v612 = *(_QWORD *)(v611 + v609);
                v613 = v607 - 0x200000000;
                v614 = (v607 - 0x200000000) >> 29;
                v615 = v607 - 0x100000000;
                v616 = *(_QWORD *)((char *)v608 + v614);
                v617 = *(_QWORD *)(v611 + v614);
                result = *(unsigned int *)(v40 + (v613 >> 30));
                v618 = v615 >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    v619 = 0;
                    v620 = *(_QWORD *)&v608[2 * v618];
                    v621 = *(_QWORD *)(v611 + 8 * v618);
                    v622 = v605;
                    v623 = *(_DWORD *)(v40 + 4 * v618);
                    v624 = v606;
                    v625 = *a2;
                    do
                    {
                      if (v623 >= 1)
                      {
                        v626 = v625[19];
                        v627 = v38[19];
                        v628 = v623;
                        do
                        {
                          *(_BYTE *)(v626 + v624) = *((_BYTE *)v627 + v622) != 0;
                          v626 += v621;
                          v627 = (unsigned int *)((char *)v627 + v620);
                          --v628;
                        }
                        while (v628);
                      }
                      v622 += v616;
                      v624 += v617;
                      ++v619;
                    }
                    while (v619 != (_DWORD)result);
                  }
                  v605 += v610;
                  v606 += v612;
                  ++v604;
                }
                while (v604 != v603);
              }
              break;
            case 4:
              v629 = (v41 << 30) - 0x400000000;
              v1515 = *(_DWORD *)(v40 + (v629 >> 30));
              if (v1515 >= 1)
              {
                v630 = 0;
                v631 = 0;
                v632 = 0;
                v633 = v38[3];
                v634 = v629 >> 29;
                v635 = v4[3];
                v1481 = *(_QWORD *)(v635 + v634);
                v1498 = *(_QWORD *)((char *)v633 + v634);
                v636 = v41 << 30;
                v637 = (v41 << 30) - 0x300000000;
                v638 = *(_QWORD *)((char *)v633 + (v637 >> 29));
                v639 = *(_QWORD *)(v635 + (v637 >> 29));
                result = *(unsigned int *)(v40 + (v637 >> 30));
                v1465 = (v636 - 0x200000000) >> 32;
                v640 = (v636 - 0x100000000) >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    v641 = 0;
                    v642 = *(_QWORD *)&v633[2 * v1465];
                    v643 = *(_QWORD *)(v635 + 8 * v1465);
                    v644 = v631;
                    v645 = *(_DWORD *)(v40 + 4 * v1465);
                    v646 = v632;
                    do
                    {
                      if (v645 >= 1)
                      {
                        v647 = 0;
                        v648 = *(_QWORD *)&v633[2 * v640];
                        v649 = *(_QWORD *)(v635 + 8 * v640);
                        v650 = v644;
                        v651 = *(_DWORD *)(v40 + 4 * v640);
                        v652 = v646;
                        v653 = *a2;
                        do
                        {
                          if (v651 >= 1)
                          {
                            v654 = v653[19];
                            v655 = v38[19];
                            v656 = v651;
                            do
                            {
                              *(_BYTE *)(v654 + v652) = *((_BYTE *)v655 + v650) != 0;
                              v654 += v649;
                              v655 = (unsigned int *)((char *)v655 + v648);
                              --v656;
                            }
                            while (v656);
                          }
                          v650 += v642;
                          v652 += v643;
                          ++v647;
                        }
                        while (v647 != v645);
                      }
                      v644 += v638;
                      v646 += v639;
                      ++v641;
                    }
                    while (v641 != (_DWORD)result);
                  }
                  v631 += v1498;
                  v632 += v1481;
                  ++v630;
                }
                while (v630 != v1515);
              }
              break;
            case 5:
              v657 = (v41 << 30) - 0x500000000;
              v1426 = *(_DWORD *)(v40 + (v657 >> 30));
              if (v1426 >= 1)
              {
                v1436 = 0;
                v1446 = 0;
                v1455 = 0;
                v658 = v38[3];
                v659 = v657 >> 29;
                v660 = v4[3];
                v1406 = *(_QWORD *)(v660 + v659);
                v1416 = *(_QWORD *)((char *)v658 + v659);
                v661 = (v41 << 30) - 0x400000000;
                v1482 = *(_QWORD *)(v660 + (v661 >> 29));
                v1499 = *(_QWORD *)((char *)v658 + (v661 >> 29));
                v1516 = *(_DWORD *)(v40 + (v661 >> 30));
                v1397 = (uint64_t)((v41 << 30) - 0x300000000) >> 32;
                v1466 = (uint64_t)((v41 << 30) - 0x200000000) >> 32;
                v662 = (uint64_t)((v41 << 30) - 0x100000000) >> 32;
                do
                {
                  if (v1516 >= 1)
                  {
                    v663 = 0;
                    v664 = *(_QWORD *)&v658[2 * v1397];
                    v665 = *(_QWORD *)(v660 + 8 * v1397);
                    v667 = v1446;
                    v666 = v1455;
                    v668 = *(_DWORD *)(v40 + 4 * v1397);
                    do
                    {
                      if (v668 >= 1)
                      {
                        v669 = 0;
                        v670 = *(_QWORD *)&v658[2 * v1466];
                        v671 = *(_QWORD *)(v660 + 8 * v1466);
                        v672 = v666;
                        v673 = *(_DWORD *)(v40 + 4 * v1466);
                        v674 = v667;
                        do
                        {
                          if (v673 >= 1)
                          {
                            v675 = 0;
                            v676 = *(_QWORD *)&v658[2 * v662];
                            v677 = *(_QWORD *)(v660 + 8 * v662);
                            v678 = v672;
                            result = *(unsigned int *)(v40 + 4 * v662);
                            v679 = v674;
                            v680 = *a2;
                            do
                            {
                              if ((int)result >= 1)
                              {
                                v681 = v680[19];
                                v682 = v38[19];
                                v683 = result;
                                do
                                {
                                  *(_BYTE *)(v681 + v679) = *((_BYTE *)v682 + v678) != 0;
                                  v681 += v677;
                                  v682 = (unsigned int *)((char *)v682 + v676);
                                  --v683;
                                }
                                while (v683);
                              }
                              v678 += v670;
                              v679 += v671;
                              ++v675;
                            }
                            while (v675 != v673);
                          }
                          v672 += v664;
                          v674 += v665;
                          ++v669;
                        }
                        while (v669 != v668);
                      }
                      v666 += v1499;
                      v667 += v1482;
                      ++v663;
                    }
                    while (v663 != v1516);
                  }
                  v1455 += v1416;
                  v1446 += v1406;
                  ++v1436;
                }
                while (v1436 != v1426);
              }
              break;
            default:
              LODWORD(v552) = 1;
              v553 = -20;
              do
              {
                v552 = *(int *)(v39 + v553) * (uint64_t)(int)v552;
                v553 += 4;
              }
              while (v553);
              v1386 = v38[6];
              if (v1386)
              {
                v554 = 0;
                v1366 = *v4;
                v555 = (v41 << 30) - 0x500000000;
                v1376 = (v41 >> 2) - 1;
                v556 = v38[3];
                v1371 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                v557 = v4[3];
                v1405 = *(_QWORD *)(v557 + (v555 >> 29));
                v1415 = *(_QWORD *)((char *)v556 + (v555 >> 29));
                v1425 = *(_DWORD *)(v40 + (v555 >> 30));
                v1362 = (uint64_t)((v41 << 30) - 0x400000000) >> 32;
                v1396 = (uint64_t)((v41 << 30) - 0x300000000) >> 32;
                v1464 = (uint64_t)((v41 << 30) - 0x200000000) >> 32;
                v558 = (uint64_t)((v41 << 30) - 0x100000000) >> 32;
                v1381 = v552;
                do
                {
                  v559 = v1376;
                  if ((v1376 & 0x80000000) != 0)
                  {
                    v560 = 0;
                  }
                  else
                  {
                    v560 = 0;
                    LODWORD(result) = v554;
                    do
                    {
                      v561 = ldiv((int)result, *(int *)(v40 + 4 * v559));
                      result = v561.quot;
                      v560 += *(_QWORD *)&v556[2 * v559--] * v561.rem;
                    }
                    while (v559 != -1);
                  }
                  v562 = v1371;
                  v1391 = v554;
                  v563 = 0;
                  if ((v1371 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v554;
                    do
                    {
                      v564 = ldiv((int)result, *(int *)(v1366 + 4 * v562));
                      result = v564.quot;
                      v563 += *(_QWORD *)(v557 + 8 * v562--) * v564.rem;
                    }
                    while (v562 != -1);
                  }
                  if (v1425 >= 1)
                  {
                    v565 = 0;
                    v1480 = *(_QWORD *)(v557 + 8 * v1362);
                    v1497 = *(_QWORD *)&v556[2 * v1362];
                    v1514 = *(_DWORD *)(v40 + 4 * v1362);
                    do
                    {
                      v1435 = v565;
                      v1445 = v563;
                      if (v1514 >= 1)
                      {
                        v566 = 0;
                        v567 = *(_QWORD *)&v556[2 * v1396];
                        v568 = *(_QWORD *)(v557 + 8 * v1396);
                        v569 = v563;
                        v570 = v560;
                        v571 = *(_DWORD *)(v40 + 4 * v1396);
                        do
                        {
                          if (v571 >= 1)
                          {
                            LODWORD(result) = 0;
                            v572 = *(_QWORD *)&v556[2 * v1464];
                            v573 = *(_QWORD *)(v557 + 8 * v1464);
                            v574 = v570;
                            v575 = *(_DWORD *)(v40 + 4 * v1464);
                            v576 = v569;
                            do
                            {
                              if (v575 >= 1)
                              {
                                v577 = 0;
                                v578 = *(_QWORD *)&v556[2 * v558];
                                v579 = *(_QWORD *)(v557 + 8 * v558);
                                v580 = v574;
                                v581 = *(_DWORD *)(v40 + 4 * v558);
                                v582 = v576;
                                v583 = *a2;
                                do
                                {
                                  if (v581 >= 1)
                                  {
                                    v584 = v583[19];
                                    v585 = v38[19];
                                    v586 = v581;
                                    do
                                    {
                                      *(_BYTE *)(v584 + v582) = *((_BYTE *)v585 + v580) != 0;
                                      v584 += v579;
                                      v585 = (unsigned int *)((char *)v585 + v578);
                                      --v586;
                                    }
                                    while (v586);
                                  }
                                  v580 += v572;
                                  v582 += v573;
                                  ++v577;
                                }
                                while (v577 != v575);
                              }
                              v574 += v567;
                              v576 += v568;
                              result = (result + 1);
                            }
                            while ((_DWORD)result != v571);
                          }
                          v570 += v1497;
                          v569 += v1480;
                          ++v566;
                        }
                        while (v566 != v1514);
                      }
                      v560 += v1415;
                      v563 = v1445 + v1405;
                      v565 = v1435 + 1;
                    }
                    while (v1435 + 1 != v1425);
                  }
                  v554 = v1391 + v1381;
                }
                while ((unint64_t)v1386 > v1391 + v1381);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v4[6])
          {
            v8 = 0;
            v9 = **(_BYTE **)(*(_QWORD *)result + 152);
            v10 = v4[19];
            do
              *(_BYTE *)(v10 + v8++) = v9;
            while ((*a2)[6] > v8);
          }
          break;
        case 1:
          goto LABEL_35;
        case 2:
          v49 = *(int ***)result;
          v50 = **(int ***)result;
          switch(v49[1] - *v49)
          {
            case 1:
              if (*v50 >= 1)
              {
                v51 = 0;
                v52 = 0;
                v53 = v49[19];
                v54 = v4[19];
                do
                {
                  *(_BYTE *)(v54 + v51) = *((_BYTE *)v53 + v52);
                  v52 += *(_QWORD *)v49[3];
                  ++v51;
                }
                while (**v49 > (int)v51);
              }
              break;
            case 2:
              v245 = *v50;
              if (*v50 >= 1)
              {
                v246 = 0;
                v247 = 0;
                v248 = 0;
                v249 = v49[19];
                v250 = v4[19];
                do
                {
                  v251 = v50[1];
                  if (v251 < 1)
                  {
                    v252 = v49[3];
                    v253 = *((_QWORD *)v252 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v250 + v247 + result) = *((_BYTE *)v249 + v248);
                      v252 = v49[3];
                      v253 = *((_QWORD *)v252 + 1);
                      v248 += v253;
                      v50 = *v49;
                      v251 = (*v49)[1];
                      ++result;
                    }
                    while ((int)result < v251);
                    v245 = *v50;
                    v247 += result;
                  }
                  v248 = *(_QWORD *)v252 + v248 - v253 * v251;
                  ++v246;
                }
                while (v246 < v245);
              }
              break;
            case 3:
              v254 = *v50;
              if (*v50 >= 1)
              {
                v255 = 0;
                v256 = 0;
                v257 = 0;
                v258 = v49[19];
                v259 = v4[19];
                do
                {
                  v260 = v50[1];
                  if (v260 < 1)
                  {
                    v264 = v49[3];
                    v265 = *((_QWORD *)v264 + 1);
                  }
                  else
                  {
                    for (i = 0; i < v260; ++i)
                    {
                      v262 = v50[2];
                      if (v262 < 1)
                      {
                        v264 = v49[3];
                        result = *((_QWORD *)v264 + 2);
                      }
                      else
                      {
                        v263 = 0;
                        do
                        {
                          *(_BYTE *)(v259 + v256 + v263) = *((_BYTE *)v258 + v257);
                          v264 = v49[3];
                          result = *((_QWORD *)v264 + 2);
                          v257 += result;
                          v50 = *v49;
                          v262 = (*v49)[2];
                          ++v263;
                        }
                        while ((int)v263 < v262);
                        v256 += v263;
                      }
                      v265 = *((_QWORD *)v264 + 1);
                      v257 = v265 + v257 - result * v262;
                      v260 = v50[1];
                    }
                    v254 = *v50;
                  }
                  v257 = *(_QWORD *)v264 + v257 - v265 * v260;
                  ++v255;
                }
                while (v255 < v254);
              }
              break;
            case 4:
              v266 = *v50;
              if (*v50 >= 1)
              {
                v267 = 0;
                v268 = 0;
                v269 = 0;
                v270 = v49[19];
                v271 = v4[19];
                do
                {
                  v272 = v50[1];
                  if (v272 < 1)
                  {
                    v278 = v49[3];
                    v280 = *((_QWORD *)v278 + 1);
                  }
                  else
                  {
                    for (j = 0; j < v272; ++j)
                    {
                      v274 = v50[2];
                      if (v274 < 1)
                      {
                        v278 = v49[3];
                        v279 = *((_QWORD *)v278 + 2);
                      }
                      else
                      {
                        for (k = 0; k < v274; ++k)
                        {
                          v276 = v50[3];
                          if (v276 < 1)
                          {
                            v278 = v49[3];
                            result = *((_QWORD *)v278 + 3);
                          }
                          else
                          {
                            v277 = 0;
                            do
                            {
                              *(_BYTE *)(v271 + v268 + v277) = *((_BYTE *)v270 + v269);
                              v278 = v49[3];
                              result = *((_QWORD *)v278 + 3);
                              v269 += result;
                              v50 = *v49;
                              v276 = (*v49)[3];
                              ++v277;
                            }
                            while ((int)v277 < v276);
                            v268 += v277;
                          }
                          v279 = *((_QWORD *)v278 + 2);
                          v269 = v279 + v269 - result * v276;
                          v274 = v50[2];
                        }
                      }
                      v280 = *((_QWORD *)v278 + 1);
                      v269 = v280 + v269 - v279 * v274;
                      v272 = v50[1];
                    }
                    v266 = *v50;
                  }
                  v269 = *(_QWORD *)v278 + v269 - v280 * v272;
                  ++v267;
                }
                while (v267 < v266);
              }
              break;
            default:
              if (v4[6])
              {
                v236 = 0;
                v237 = v49[19];
                v238 = v4[19];
                do
                {
                  v239 = *v49;
                  v240 = (unint64_t)((char *)v49[1] - (char *)*v49) >> 2;
                  v241 = 0;
                  v242 = (v240 - 1);
                  if ((int)v240 - 1 >= 0)
                  {
                    v243 = v49[3];
                    LODWORD(result) = v236;
                    do
                    {
                      v244 = ldiv((int)result, v239[v242]);
                      result = v244.quot;
                      v241 += *(_QWORD *)&v243[2 * v242--] * v244.rem;
                    }
                    while (v242 != -1);
                  }
                  *(_BYTE *)(v238 + v236++) = *((_BYTE *)v237 + v241);
                }
                while (v236 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v55 = *(int ***)result;
          v56 = (uint64_t *)(*(_QWORD *)result + 24);
          v57 = v4 + 3;
          v58 = **(_QWORD **)result;
          v59 = *(_QWORD *)(*(_QWORD *)result + 8);
          v60 = v59 - v58;
          switch((v59 - v58) >> 2)
          {
            case 1:
              v61 = (v60 << 30) - 0x100000000;
              v62 = *(_DWORD *)(v58 + (v61 >> 30));
              if (v62 >= 1)
              {
                v63 = v61 >> 29;
                v64 = *(_QWORD *)(*v56 + (v61 >> 29));
                v65 = *(_QWORD *)(*v57 + v63);
                v66 = (_BYTE *)v4[19];
                v67 = v55[19];
                do
                {
                  *v66 = *(_BYTE *)v67;
                  v67 = (int *)((char *)v67 + v64);
                  v66 += v65;
                  --v62;
                }
                while (v62);
              }
              break;
            case 2:
              v705 = (v60 << 30) - 0x200000000;
              v706 = *(_DWORD *)(v58 + (v705 >> 30));
              if (v706 >= 1)
              {
                v707 = 0;
                v708 = 0;
                v709 = 0;
                v710 = v705 >> 29;
                v711 = *(_QWORD *)(*v56 + (v705 >> 29));
                v712 = *(_QWORD *)(*v57 + v710);
                do
                {
                  v713 = ((*(_QWORD *)(*(_QWORD *)v6 + 8) - **(_QWORD **)v6) << 30) - 0x100000000;
                  v714 = *(int *)((char *)*v55 + (v713 >> 30));
                  if (v714 >= 1)
                  {
                    v715 = v713 >> 29;
                    v716 = *(_QWORD *)((char *)v55[3] + (v713 >> 29));
                    v717 = *(_QWORD *)(*v57 + v715);
                    result = (*a2)[19];
                    v718 = *(_QWORD *)(*(_QWORD *)v6 + 152);
                    do
                    {
                      *(_BYTE *)(result + v709) = *(_BYTE *)(v718 + v708);
                      result += v717;
                      v718 += v716;
                      --v714;
                    }
                    while (v714);
                  }
                  v708 += v711;
                  v709 += v712;
                  ++v707;
                }
                while (v707 != v706);
              }
              break;
            case 3:
              v719 = (v60 << 30) - 0x300000000;
              v720 = *(_DWORD *)(v58 + (v719 >> 30));
              if (v720 >= 1)
              {
                v721 = 0;
                v722 = 0;
                v723 = 0;
                v724 = v719 >> 29;
                v725 = *(_QWORD *)(*v56 + (v719 >> 29));
                v726 = *(_QWORD *)(*v57 + v724);
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v6 + 8) - **(_QWORD **)v6) << 30) - 0x200000000;
                  v727 = *(int *)((char *)*v55 + (result >> 30));
                  if (v727 >= 1)
                  {
                    v728 = 0;
                    v729 = result >> 29;
                    result = *(_QWORD *)((char *)v55[3] + (result >> 29));
                    v730 = *(_QWORD *)(*v57 + v729);
                    v731 = v722;
                    v732 = v723;
                    do
                    {
                      v733 = ((*(_QWORD *)(*(_QWORD *)v6 + 8) - **(_QWORD **)v6) << 30) - 0x100000000;
                      v734 = *(int *)((char *)*v55 + (v733 >> 30));
                      if (v734 >= 1)
                      {
                        v735 = v733 >> 29;
                        v736 = *(_QWORD *)((char *)v55[3] + (v733 >> 29));
                        v737 = *(_QWORD *)(*v57 + v735);
                        v738 = (*a2)[19];
                        v739 = *(_QWORD *)(*(_QWORD *)v6 + 152);
                        do
                        {
                          *(_BYTE *)(v738 + v732) = *(_BYTE *)(v739 + v731);
                          v738 += v737;
                          v739 += v736;
                          --v734;
                        }
                        while (v734);
                      }
                      v731 += result;
                      v732 += v730;
                      ++v728;
                    }
                    while (v728 != v727);
                  }
                  v722 += v725;
                  v723 += v726;
                  ++v721;
                }
                while (v721 != v720);
              }
              break;
            case 4:
              goto LABEL_557;
            case 5:
              v740 = (v60 << 30) - 0x500000000;
              v741 = *(_DWORD *)(v58 + (v740 >> 30));
              if (v741 >= 1)
              {
                v742 = 0;
                v743 = 0;
                v744 = v740 >> 29;
                v745 = *(_QWORD *)(*v56 + v744);
                v746 = *(_QWORD *)(*v57 + v744);
                do
                {
                  v742 += v745;
                  v743 += v746;
                  --v741;
                }
                while (v741);
              }
              break;
            default:
              LODWORD(v684) = 1;
              v685 = -20;
              do
              {
                v684 = *(int *)(v59 + v685) * (uint64_t)(int)v684;
                v685 += 4;
              }
              while (v685);
              if (v55[6])
              {
                result = 0;
                v686 = *(_QWORD **)v6;
                v1500 = v57;
                v1467 = v684;
                do
                {
                  v687 = *v55;
                  v688 = (unint64_t)((char *)v55[1] - (char *)*v55) >> 2;
                  v689 = (v688 - 1);
                  v1517 = result;
                  v1483 = v686;
                  v690 = 0;
                  if ((int)v688 - 1 >= 0)
                  {
                    v691 = *v56;
                    do
                    {
                      v692 = ldiv((int)result, v687[v689]);
                      LODWORD(result) = v692.quot;
                      v690 += *(_QWORD *)(v691 + 8 * v689--) * v692.rem;
                    }
                    while (v689 != -1);
                  }
                  v693 = **a2;
                  v694 = (unint64_t)((*a2)[1] - v693) >> 2;
                  v695 = *v1500;
                  v696 = 0;
                  v697 = (v694 - 1);
                  if ((int)v694 - 1 >= 0)
                  {
                    quot = v1517;
                    do
                    {
                      v699 = ldiv(quot, *(int *)(v693 + 4 * v697));
                      quot = v699.quot;
                      v696 += *(_QWORD *)(v695 + 8 * v697--) * v699.rem;
                    }
                    while (v697 != -1);
                  }
                  v686 = v1483;
                  v700 = ((v686[1] - *v686) << 30) - 0x500000000;
                  v701 = *(int *)((char *)v687 + (v700 >> 30));
                  if (v701 >= 1)
                  {
                    v702 = v700 >> 29;
                    v703 = *(_QWORD *)(*v56 + v702);
                    v704 = *(_QWORD *)(v695 + v702);
                    do
                    {
                      v690 += v703;
                      v696 += v704;
                      --v701;
                    }
                    while (v701);
                    v686 = *(_QWORD **)v6;
                  }
                  result = v1517 + v1467;
                }
                while (v686[6] > (unint64_t)(v1517 + v1467));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v11 = v4[6];
          if (v11)
          {
            v12 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v13 = (_DWORD *)v4[19];
            do
            {
              *v13++ = v12;
              --v11;
            }
            while (v11);
          }
          break;
        case 1:
          v68 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v68)
          {
            v69 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v70 = (_DWORD *)v4[19];
            do
            {
              v71 = *v69++;
              *v70++ = v71;
              --v68;
            }
            while (v68);
          }
          break;
        case 2:
          v72 = *(int ***)result;
          v73 = **(int ***)result;
          v74 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v73;
          switch(v74 >> 2)
          {
            case 1:
              if (*v73 >= 1)
              {
                v75 = 0;
                v76 = v72[19];
                v77 = v4[19];
                v78 = *(_QWORD *)v72[3];
                do
                {
                  *(_DWORD *)(v77 + 4 * v75) = *(unsigned __int8 *)v76;
                  v76 = (int *)((char *)v76 + v78);
                  ++v75;
                }
                while (*v73 > (int)v75);
              }
              break;
            case 2:
              v290 = *v73;
              if (*v73 >= 1)
              {
                v291 = 0;
                v292 = 0;
                v293 = 0;
                v294 = v72[19];
                v295 = v4[19];
                v296 = v72[3];
                v297 = *(_QWORD *)v296;
                v298 = *((_QWORD *)v296 + 1);
                v299 = v73[1];
                do
                {
                  if (v299 >= 1)
                  {
                    v300 = 0;
                    do
                    {
                      *(_DWORD *)(v295 + 4 * v292 + 4 * v300) = *((unsigned __int8 *)v294 + v293);
                      v293 += v298;
                      v299 = v73[1];
                      ++v300;
                    }
                    while ((int)v300 < v299);
                    v290 = *v73;
                    v292 += v300;
                  }
                  v293 = v293 + v297 - v298 * v299;
                  ++v291;
                }
                while (v291 < v290);
              }
              break;
            case 3:
              result = *v73;
              if ((int)result >= 1)
              {
                v301 = 0;
                v302 = 0;
                v303 = 0;
                v304 = v72[19];
                v305 = v4[19];
                v306 = v72[3];
                v307 = *(_QWORD *)v306;
                v308 = *((_QWORD *)v306 + 1);
                v309 = v73[1];
                do
                {
                  if (v309 >= 1)
                  {
                    v310 = 0;
                    v311 = v72[3];
                    v312 = *((_QWORD *)v306 + 2);
                    v313 = v73[2];
                    do
                    {
                      if (v313 >= 1)
                      {
                        v314 = 0;
                        v315 = *((_QWORD *)v311 + 2);
                        do
                        {
                          *(_DWORD *)(v305 + 4 * v302 + 4 * v314) = *((unsigned __int8 *)v304 + v303);
                          v303 += v315;
                          v313 = v73[2];
                          ++v314;
                        }
                        while ((int)v314 < v313);
                        v309 = v73[1];
                        v302 += v314;
                      }
                      v303 = v303 + v308 - v312 * v313;
                      ++v310;
                    }
                    while (v310 < v309);
                    result = *v73;
                  }
                  v303 = v303 + v307 - v308 * v309;
                  ++v301;
                }
                while (v301 < (int)result);
              }
              break;
            case 4:
              v316 = *v73;
              if (*v73 >= 1)
              {
                v317 = 0;
                v318 = 0;
                v319 = 0;
                v320 = v72[19];
                v321 = v4[19];
                v322 = v72[3];
                v323 = *(_QWORD *)v322;
                v324 = *((_QWORD *)v322 + 1);
                v325 = v73[1];
                do
                {
                  if (v325 >= 1)
                  {
                    v326 = 0;
                    v327 = v72[3];
                    v328 = *((_QWORD *)v322 + 2);
                    v329 = v73[2];
                    do
                    {
                      if (v329 >= 1)
                      {
                        v330 = 0;
                        v331 = v72[3];
                        v332 = *((_QWORD *)v327 + 2);
                        v333 = *((_QWORD *)v327 + 3);
                        v334 = v73[3];
                        do
                        {
                          if (v334 >= 1)
                          {
                            v335 = 0;
                            v336 = *((_QWORD *)v331 + 3);
                            do
                            {
                              *(_DWORD *)(v321 + 4 * v318 + 4 * v335) = *((unsigned __int8 *)v320 + v319);
                              v319 += v336;
                              v334 = v73[3];
                              ++v335;
                            }
                            while ((int)v335 < v334);
                            v329 = v73[2];
                            v318 += v335;
                          }
                          v319 = v319 + v332 - v333 * v334;
                          ++v330;
                        }
                        while (v330 < v329);
                        v325 = v73[1];
                      }
                      v319 = v319 + v324 - v328 * v329;
                      ++v326;
                    }
                    while (v326 < v325);
                    v316 = *v73;
                  }
                  result = v325;
                  v319 = v319 + v323 - v324 * v325;
                  ++v317;
                }
                while (v317 < v316);
              }
              break;
            default:
              v281 = v4[6];
              if (v281)
              {
                v282 = 0;
                v283 = v72[19];
                v284 = v4[19];
                v285 = ((unint64_t)v74 >> 2) - 1;
                v286 = v72[3];
                do
                {
                  v287 = 0;
                  if ((v285 & 0x80000000) == 0)
                  {
                    v288 = v285;
                    LODWORD(result) = v282;
                    do
                    {
                      v289 = ldiv((int)result, v73[v288]);
                      result = v289.quot;
                      v287 += *(_QWORD *)&v286[2 * v288--] * v289.rem;
                    }
                    while (v288 != -1);
                  }
                  *(_DWORD *)(v284 + 4 * v282++) = *((unsigned __int8 *)v283 + v287);
                }
                while (v282 != v281);
              }
              break;
          }
          break;
        case 3:
          v79 = *(unsigned int ***)result;
          v81 = **(_QWORD **)result;
          v80 = *(_QWORD *)(*(_QWORD *)result + 8);
          v82 = v80 - v81;
          switch((v80 - v81) >> 2)
          {
            case 1:
              v83 = (v82 << 30) - 0x100000000;
              v84 = *(_DWORD *)(v81 + (v83 >> 30));
              if (v84 >= 1)
              {
                v85 = v83 >> 29;
                v86 = *(_QWORD *)((char *)v79[3] + (v83 >> 29));
                v87 = *(_QWORD *)(v4[3] + v85);
                v88 = (_DWORD *)v4[19];
                v89 = v79[19];
                v90 = 4 * v87;
                do
                {
                  *v88 = *(unsigned __int8 *)v89;
                  v89 = (unsigned int *)((char *)v89 + v86);
                  v88 = (_DWORD *)((char *)v88 + v90);
                  --v84;
                }
                while (v84);
              }
              break;
            case 2:
              v782 = (v82 << 30) - 0x200000000;
              v783 = *(_DWORD *)(v81 + (v782 >> 30));
              if (v783 >= 1)
              {
                v784 = 0;
                v785 = 0;
                v786 = 0;
                v787 = v79[3];
                v788 = v782 >> 29;
                v789 = *(_QWORD *)((char *)v787 + (v782 >> 29));
                v790 = v4[3];
                v791 = (v82 << 30) - 0x100000000;
                v792 = *(_QWORD *)((char *)v787 + (v791 >> 29));
                v793 = v791 >> 32;
                v794 = 4 * *(_QWORD *)(v790 + v788);
                v795 = 4 * *(_QWORD *)(v790 + (v791 >> 29));
                do
                {
                  result = *(unsigned int *)(v81 + 4 * v793);
                  if ((int)result >= 1)
                  {
                    v796 = v79[19];
                    v797 = (_DWORD *)(v4[19] + v784);
                    do
                    {
                      *v797 = *((unsigned __int8 *)v796 + v786);
                      v797 = (_DWORD *)((char *)v797 + v795);
                      v796 = (unsigned int *)((char *)v796 + v792);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v786 += v789;
                  ++v785;
                  v784 += v794;
                }
                while (v785 != v783);
              }
              break;
            case 3:
              v798 = (v82 << 30) - 0x300000000;
              v799 = *(_DWORD *)(v81 + (v798 >> 30));
              if (v799 >= 1)
              {
                v800 = 0;
                v801 = 0;
                v802 = 0;
                v803 = v82 << 30;
                v804 = v79[3];
                v805 = v798 >> 29;
                v806 = *(_QWORD *)((char *)v804 + (v798 >> 29));
                v807 = v4[3];
                v808 = *(_QWORD *)(v807 + v805);
                v809 = v803 - 0x200000000;
                v810 = (v803 - 0x200000000) >> 29;
                v811 = v803 - 0x100000000;
                v812 = *(_QWORD *)((char *)v804 + v810);
                v813 = v809 >> 32;
                v814 = *(_QWORD *)(v807 + v810);
                v815 = v811 >> 32;
                result = 4 * v808;
                v816 = 4 * v814;
                do
                {
                  v817 = *(_DWORD *)(v81 + 4 * v813);
                  if (v817 >= 1)
                  {
                    v818 = 0;
                    v819 = *(_QWORD *)&v804[2 * v815];
                    v820 = *a2;
                    v821 = 4 * *(_QWORD *)(v807 + 8 * v815);
                    v822 = v800;
                    v823 = v802;
                    do
                    {
                      v824 = *(_DWORD *)(v81 + 4 * v815);
                      if (v824 >= 1)
                      {
                        v825 = v79[19];
                        v826 = (_DWORD *)(v820[19] + v822);
                        do
                        {
                          *v826 = *((unsigned __int8 *)v825 + v823);
                          v826 = (_DWORD *)((char *)v826 + v821);
                          v825 = (unsigned int *)((char *)v825 + v819);
                          --v824;
                        }
                        while (v824);
                      }
                      v823 += v812;
                      ++v818;
                      v822 += v816;
                    }
                    while (v818 != v817);
                  }
                  v802 += v806;
                  ++v801;
                  v800 += result;
                }
                while (v801 != v799);
              }
              break;
            case 4:
              v827 = (v82 << 30) - 0x400000000;
              v1519 = *(_DWORD *)(v81 + (v827 >> 30));
              if (v1519 >= 1)
              {
                v828 = 0;
                v829 = 0;
                v830 = 0;
                v831 = v82 << 30;
                v832 = v79[3];
                v833 = v827 >> 29;
                v1502 = *(_QWORD *)((char *)v832 + v833);
                v834 = v4[3];
                v1485 = (v831 - 0x300000000) >> 32;
                v835 = (v831 - 0x300000000) >> 29;
                v836 = *(_QWORD *)((char *)v832 + v835);
                v837 = (v831 - 0x200000000) >> 32;
                result = (v831 - 0x100000000) >> 32;
                v1469 = 4 * *(_QWORD *)(v834 + v833);
                v838 = 4 * *(_QWORD *)(v834 + v835);
                do
                {
                  v839 = *(_DWORD *)(v81 + 4 * v1485);
                  if (v839 >= 1)
                  {
                    v840 = 0;
                    v841 = *(_QWORD *)&v832[2 * v837];
                    v842 = 4 * *(_QWORD *)(v834 + 8 * v837);
                    v843 = v828;
                    v844 = v830;
                    do
                    {
                      v845 = *(_DWORD *)(v81 + 4 * v837);
                      if (v845 >= 1)
                      {
                        v846 = 0;
                        v847 = *(_QWORD *)&v832[2 * result];
                        v848 = *a2;
                        v849 = 4 * *(_QWORD *)(v834 + 8 * result);
                        v850 = v843;
                        v851 = v844;
                        do
                        {
                          v852 = *(_DWORD *)(v81 + 4 * result);
                          if (v852 >= 1)
                          {
                            v853 = v79[19];
                            v854 = (_DWORD *)(v848[19] + v850);
                            do
                            {
                              *v854 = *((unsigned __int8 *)v853 + v851);
                              v854 = (_DWORD *)((char *)v854 + v849);
                              v853 = (unsigned int *)((char *)v853 + v847);
                              --v852;
                            }
                            while (v852);
                          }
                          v851 += v841;
                          ++v846;
                          v850 += v842;
                        }
                        while (v846 != v845);
                      }
                      v844 += v836;
                      ++v840;
                      v843 += v838;
                    }
                    while (v840 != v839);
                  }
                  v830 += v1502;
                  ++v829;
                  v828 += v1469;
                }
                while (v829 != v1519);
              }
              break;
            case 5:
              v855 = (v82 << 30) - 0x500000000;
              v1428 = *(_DWORD *)(v81 + (v855 >> 30));
              if (v1428 >= 1)
              {
                v1448 = 0;
                v1457 = 0;
                v1438 = 0;
                v856 = v82 << 30;
                v857 = v79[3];
                v858 = v855 >> 29;
                v1418 = *(_QWORD *)((char *)v857 + v858);
                v859 = v4[3];
                v860 = (v856 - 0x400000000) >> 29;
                v1486 = *(_QWORD *)((char *)v857 + v860);
                v1408 = (v856 - 0x400000000) >> 32;
                v1503 = (v856 - 0x300000000) >> 32;
                result = (v856 - 0x200000000) >> 32;
                v861 = (v856 - 0x100000000) >> 32;
                v1399 = 4 * *(_QWORD *)(v859 + v858);
                v1470 = 4 * *(_QWORD *)(v859 + v860);
                do
                {
                  v1520 = *(_DWORD *)(v81 + 4 * v1408);
                  if (v1520 >= 1)
                  {
                    v862 = 0;
                    v863 = *(_QWORD *)&v857[2 * v1503];
                    v864 = 4 * *(_QWORD *)(v859 + 8 * v1503);
                    v865 = v1448;
                    v866 = v1457;
                    do
                    {
                      v867 = *(_DWORD *)(v81 + 4 * v1503);
                      if (v867 >= 1)
                      {
                        v868 = 0;
                        v869 = *(_QWORD *)&v857[2 * result];
                        v870 = 4 * *(_QWORD *)(v859 + 8 * result);
                        v871 = v866;
                        v872 = v865;
                        do
                        {
                          v873 = *(_DWORD *)(v81 + 4 * result);
                          if (v873 >= 1)
                          {
                            v874 = 0;
                            v875 = *(_QWORD *)&v857[2 * v861];
                            v876 = *a2;
                            v877 = 4 * *(_QWORD *)(v859 + 8 * v861);
                            v878 = v871;
                            v879 = v872;
                            do
                            {
                              v880 = *(_DWORD *)(v81 + 4 * v861);
                              if (v880 >= 1)
                              {
                                v881 = v79[19];
                                v882 = (_DWORD *)(v876[19] + v878);
                                do
                                {
                                  *v882 = *((unsigned __int8 *)v881 + v879);
                                  v882 = (_DWORD *)((char *)v882 + v877);
                                  v881 = (unsigned int *)((char *)v881 + v875);
                                  --v880;
                                }
                                while (v880);
                              }
                              v879 += v869;
                              ++v874;
                              v878 += v870;
                            }
                            while (v874 != v873);
                          }
                          v872 += v863;
                          ++v868;
                          v871 += v864;
                        }
                        while (v868 != v867);
                      }
                      v865 += v1486;
                      ++v862;
                      v866 += v1470;
                    }
                    while (v862 != v1520);
                  }
                  v1448 += v1418;
                  v1457 += v1399;
                  ++v1438;
                }
                while (v1438 != v1428);
              }
              break;
            default:
              LODWORD(v747) = 1;
              v748 = -20;
              do
              {
                v747 = *(int *)(v80 + v748) * (uint64_t)(int)v747;
                v748 += 4;
              }
              while (v748);
              v1387 = v79[6];
              if (v1387)
              {
                v749 = 0;
                v1377 = (v82 >> 2) - 1;
                v750 = v79[3];
                v1363 = *v4;
                v1372 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                v751 = (v82 << 30) - 0x500000000;
                v752 = v4[3];
                v1367 = v751 >> 32;
                v1407 = *(_QWORD *)((char *)v750 + (v751 >> 29));
                v1417 = (uint64_t)((v82 << 30) - 0x400000000) >> 32;
                v1501 = (uint64_t)((v82 << 30) - 0x300000000) >> 32;
                v753 = (uint64_t)((v82 << 30) - 0x200000000) >> 32;
                v754 = (uint64_t)((v82 << 30) - 0x100000000) >> 32;
                v1398 = 4 * *(_QWORD *)(v752 + (v751 >> 29));
                v1382 = v747;
                do
                {
                  v755 = v1377;
                  if ((v1377 & 0x80000000) != 0)
                  {
                    v756 = 0;
                  }
                  else
                  {
                    v756 = 0;
                    LODWORD(result) = v749;
                    do
                    {
                      v757 = ldiv((int)result, *(int *)(v81 + 4 * v755));
                      result = v757.quot;
                      v756 += *(_QWORD *)&v750[2 * v755--] * v757.rem;
                    }
                    while (v755 != -1);
                  }
                  v1456 = v756;
                  v758 = v1372;
                  v1392 = v749;
                  v759 = 0;
                  if ((v1372 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v749;
                    do
                    {
                      v760 = ldiv((int)result, *(int *)(v1363 + 4 * v758));
                      result = v760.quot;
                      v759 += *(_QWORD *)(v752 + 8 * v758--) * v760.rem;
                    }
                    while (v758 != -1);
                  }
                  v1427 = *(_DWORD *)(v81 + 4 * v1367);
                  if (v1427 >= 1)
                  {
                    v761 = 0;
                    v1484 = *(_QWORD *)&v750[2 * v1417];
                    v1447 = 4 * v759;
                    v1468 = 4 * *(_QWORD *)(v752 + 8 * v1417);
                    do
                    {
                      v1437 = v761;
                      v1518 = *(_DWORD *)(v81 + 4 * v1417);
                      if (v1518 >= 1)
                      {
                        v762 = 0;
                        v763 = *(_QWORD *)&v750[2 * v1501];
                        v764 = 4 * *(_QWORD *)(v752 + 8 * v1501);
                        v765 = v1447;
                        v766 = v1456;
                        do
                        {
                          v767 = *(_DWORD *)(v81 + 4 * v1501);
                          if (v767 >= 1)
                          {
                            v768 = 0;
                            v769 = *(_QWORD *)&v750[2 * v753];
                            v770 = 4 * *(_QWORD *)(v752 + 8 * v753);
                            v771 = v765;
                            result = v766;
                            do
                            {
                              v772 = *(_DWORD *)(v81 + 4 * v753);
                              if (v772 >= 1)
                              {
                                v773 = 0;
                                v774 = *(_QWORD *)&v750[2 * v754];
                                v775 = *a2;
                                v776 = 4 * *(_QWORD *)(v752 + 8 * v754);
                                v777 = v771;
                                v778 = result;
                                do
                                {
                                  v779 = *(_DWORD *)(v81 + 4 * v754);
                                  if (v779 >= 1)
                                  {
                                    v780 = v79[19];
                                    v781 = (_DWORD *)(v775[19] + v777);
                                    do
                                    {
                                      *v781 = *((unsigned __int8 *)v780 + v778);
                                      v781 = (_DWORD *)((char *)v781 + v776);
                                      v780 = (unsigned int *)((char *)v780 + v774);
                                      --v779;
                                    }
                                    while (v779);
                                  }
                                  v778 += v769;
                                  ++v773;
                                  v777 += v770;
                                }
                                while (v773 != v772);
                              }
                              result += v763;
                              ++v768;
                              v771 += v764;
                            }
                            while (v768 != v767);
                          }
                          v766 += v1484;
                          ++v762;
                          v765 += v1468;
                        }
                        while (v762 != v1518);
                      }
                      v1456 += v1407;
                      v761 = v1437 + 1;
                      v1447 += v1398;
                    }
                    while (v1437 + 1 != v1427);
                  }
                  v749 = v1392 + v1382;
                }
                while ((unint64_t)v1387 > v1392 + v1382);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v4[6])
          {
            v14 = 0;
            v15 = **(_BYTE **)(*(_QWORD *)result + 152);
            v16 = v4[19];
            do
              *(_BYTE *)(v16 + v14++) = v15;
            while ((*a2)[6] > v14);
          }
          break;
        case 1:
LABEL_35:
          v26 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v26)
            result = (uint64_t)memmove((void *)v4[19], *(const void **)(*(_QWORD *)result + 152), v26);
          break;
        case 2:
          v91 = *(int ***)result;
          v92 = **(int ***)result;
          switch(v91[1] - *v91)
          {
            case 1:
              if (*v92 >= 1)
              {
                v93 = 0;
                v94 = 0;
                v95 = v91[19];
                v96 = v4[19];
                do
                {
                  *(_BYTE *)(v96 + v93) = *((_BYTE *)v95 + v94);
                  v94 += *(_QWORD *)v91[3];
                  ++v93;
                }
                while (**v91 > (int)v93);
              }
              break;
            case 2:
              v346 = *v92;
              if (*v92 >= 1)
              {
                v347 = 0;
                v348 = 0;
                v349 = 0;
                v350 = v91[19];
                v351 = v4[19];
                do
                {
                  v352 = v92[1];
                  if (v352 < 1)
                  {
                    v353 = v91[3];
                    v354 = *((_QWORD *)v353 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v351 + v348 + result) = *((_BYTE *)v350 + v349);
                      v353 = v91[3];
                      v354 = *((_QWORD *)v353 + 1);
                      v349 += v354;
                      v92 = *v91;
                      v352 = (*v91)[1];
                      ++result;
                    }
                    while ((int)result < v352);
                    v346 = *v92;
                    v348 += result;
                  }
                  v349 = *(_QWORD *)v353 + v349 - v354 * v352;
                  ++v347;
                }
                while (v347 < v346);
              }
              break;
            case 3:
              v355 = *v92;
              if (*v92 >= 1)
              {
                v356 = 0;
                v357 = 0;
                v358 = 0;
                v359 = v91[19];
                v360 = v4[19];
                do
                {
                  v361 = v92[1];
                  if (v361 < 1)
                  {
                    v365 = v91[3];
                    v366 = *((_QWORD *)v365 + 1);
                  }
                  else
                  {
                    for (m = 0; m < v361; ++m)
                    {
                      v363 = v92[2];
                      if (v363 < 1)
                      {
                        v365 = v91[3];
                        result = *((_QWORD *)v365 + 2);
                      }
                      else
                      {
                        v364 = 0;
                        do
                        {
                          *(_BYTE *)(v360 + v357 + v364) = *((_BYTE *)v359 + v358);
                          v365 = v91[3];
                          result = *((_QWORD *)v365 + 2);
                          v358 += result;
                          v92 = *v91;
                          v363 = (*v91)[2];
                          ++v364;
                        }
                        while ((int)v364 < v363);
                        v357 += v364;
                      }
                      v366 = *((_QWORD *)v365 + 1);
                      v358 = v366 + v358 - result * v363;
                      v361 = v92[1];
                    }
                    v355 = *v92;
                  }
                  v358 = *(_QWORD *)v365 + v358 - v366 * v361;
                  ++v356;
                }
                while (v356 < v355);
              }
              break;
            case 4:
              v367 = *v92;
              if (*v92 >= 1)
              {
                v368 = 0;
                v369 = 0;
                v370 = 0;
                v371 = v91[19];
                v372 = v4[19];
                do
                {
                  v373 = v92[1];
                  if (v373 < 1)
                  {
                    v379 = v91[3];
                    v381 = *((_QWORD *)v379 + 1);
                  }
                  else
                  {
                    for (n = 0; n < v373; ++n)
                    {
                      v375 = v92[2];
                      if (v375 < 1)
                      {
                        v379 = v91[3];
                        v380 = *((_QWORD *)v379 + 2);
                      }
                      else
                      {
                        for (ii = 0; ii < v375; ++ii)
                        {
                          v377 = v92[3];
                          if (v377 < 1)
                          {
                            v379 = v91[3];
                            result = *((_QWORD *)v379 + 3);
                          }
                          else
                          {
                            v378 = 0;
                            do
                            {
                              *(_BYTE *)(v372 + v369 + v378) = *((_BYTE *)v371 + v370);
                              v379 = v91[3];
                              result = *((_QWORD *)v379 + 3);
                              v370 += result;
                              v92 = *v91;
                              v377 = (*v91)[3];
                              ++v378;
                            }
                            while ((int)v378 < v377);
                            v369 += v378;
                          }
                          v380 = *((_QWORD *)v379 + 2);
                          v370 = v380 + v370 - result * v377;
                          v375 = v92[2];
                        }
                      }
                      v381 = *((_QWORD *)v379 + 1);
                      v370 = v381 + v370 - v380 * v375;
                      v373 = v92[1];
                    }
                    v367 = *v92;
                  }
                  v370 = *(_QWORD *)v379 + v370 - v381 * v373;
                  ++v368;
                }
                while (v368 < v367);
              }
              break;
            default:
              if (v4[6])
              {
                v337 = 0;
                v338 = v91[19];
                v339 = v4[19];
                do
                {
                  v340 = *v91;
                  v341 = (unint64_t)((char *)v91[1] - (char *)*v91) >> 2;
                  v342 = 0;
                  v343 = (v341 - 1);
                  if ((int)v341 - 1 >= 0)
                  {
                    v344 = v91[3];
                    LODWORD(result) = v337;
                    do
                    {
                      v345 = ldiv((int)result, v340[v343]);
                      result = v345.quot;
                      v342 += *(_QWORD *)&v344[2 * v343--] * v345.rem;
                    }
                    while (v343 != -1);
                  }
                  *(_BYTE *)(v339 + v337++) = *((_BYTE *)v338 + v342);
                }
                while (v337 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v97 = *(int ***)result;
          v98 = (uint64_t *)(*(_QWORD *)result + 24);
          v99 = v4 + 3;
          v100 = **(_QWORD **)result;
          v101 = *(_QWORD *)(*(_QWORD *)result + 8);
          v102 = v101 - v100;
          switch((v101 - v100) >> 2)
          {
            case 1:
              v103 = (v102 << 30) - 0x100000000;
              v104 = *(_DWORD *)(v100 + (v103 >> 30));
              if (v104 >= 1)
              {
                v105 = v103 >> 29;
                v106 = *(_QWORD *)(*v98 + (v103 >> 29));
                v107 = *(_QWORD *)(*v99 + v105);
                v108 = (_BYTE *)v4[19];
                v109 = v97[19];
                do
                {
                  *v108 = *(_BYTE *)v109;
                  v109 = (int *)((char *)v109 + v106);
                  v108 += v107;
                  --v104;
                }
                while (v104);
              }
              break;
            case 2:
              v904 = (v102 << 30) - 0x200000000;
              v905 = *(_DWORD *)(v100 + (v904 >> 30));
              if (v905 >= 1)
              {
                v906 = 0;
                v907 = 0;
                v908 = 0;
                v909 = v904 >> 29;
                v910 = *(_QWORD *)(*v98 + (v904 >> 29));
                v911 = *(_QWORD *)(*v99 + v909);
                do
                {
                  v912 = ((*(_QWORD *)(*(_QWORD *)v6 + 8) - **(_QWORD **)v6) << 30) - 0x100000000;
                  v913 = *(int *)((char *)*v97 + (v912 >> 30));
                  if (v913 >= 1)
                  {
                    v914 = v912 >> 29;
                    v915 = *(_QWORD *)((char *)v97[3] + (v912 >> 29));
                    v916 = *(_QWORD *)(*v99 + v914);
                    result = (*a2)[19];
                    v917 = *(_QWORD *)(*(_QWORD *)v6 + 152);
                    do
                    {
                      *(_BYTE *)(result + v908) = *(_BYTE *)(v917 + v907);
                      result += v916;
                      v917 += v915;
                      --v913;
                    }
                    while (v913);
                  }
                  v907 += v910;
                  v908 += v911;
                  ++v906;
                }
                while (v906 != v905);
              }
              break;
            case 3:
              v918 = (v102 << 30) - 0x300000000;
              v919 = *(_DWORD *)(v100 + (v918 >> 30));
              if (v919 >= 1)
              {
                v920 = 0;
                v921 = 0;
                v922 = 0;
                v923 = v918 >> 29;
                v924 = *(_QWORD *)(*v98 + (v918 >> 29));
                v925 = *(_QWORD *)(*v99 + v923);
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v6 + 8) - **(_QWORD **)v6) << 30) - 0x200000000;
                  v926 = *(int *)((char *)*v97 + (result >> 30));
                  if (v926 >= 1)
                  {
                    v927 = 0;
                    v928 = result >> 29;
                    result = *(_QWORD *)((char *)v97[3] + (result >> 29));
                    v929 = *(_QWORD *)(*v99 + v928);
                    v930 = v921;
                    v931 = v922;
                    do
                    {
                      v932 = ((*(_QWORD *)(*(_QWORD *)v6 + 8) - **(_QWORD **)v6) << 30) - 0x100000000;
                      v933 = *(int *)((char *)*v97 + (v932 >> 30));
                      if (v933 >= 1)
                      {
                        v934 = v932 >> 29;
                        v935 = *(_QWORD *)((char *)v97[3] + (v932 >> 29));
                        v936 = *(_QWORD *)(*v99 + v934);
                        v937 = (*a2)[19];
                        v938 = *(_QWORD *)(*(_QWORD *)v6 + 152);
                        do
                        {
                          *(_BYTE *)(v937 + v931) = *(_BYTE *)(v938 + v930);
                          v937 += v936;
                          v938 += v935;
                          --v933;
                        }
                        while (v933);
                      }
                      v930 += result;
                      v931 += v929;
                      ++v927;
                    }
                    while (v927 != v926);
                  }
                  v921 += v924;
                  v922 += v925;
                  ++v920;
                }
                while (v920 != v919);
              }
              break;
            case 4:
LABEL_557:
              break;
            case 5:
              v939 = (v102 << 30) - 0x500000000;
              v940 = *(_DWORD *)(v100 + (v939 >> 30));
              if (v940 >= 1)
              {
                v941 = 0;
                v942 = 0;
                v943 = v939 >> 29;
                v944 = *(_QWORD *)(*v98 + v943);
                v945 = *(_QWORD *)(*v99 + v943);
                do
                {
                  v941 += v944;
                  v942 += v945;
                  --v940;
                }
                while (v940);
              }
              break;
            default:
              LODWORD(v883) = 1;
              v884 = -20;
              do
              {
                v883 = *(int *)(v101 + v884) * (uint64_t)(int)v883;
                v884 += 4;
              }
              while (v884);
              if (v97[6])
              {
                result = 0;
                v885 = *(_QWORD **)v6;
                v1504 = v99;
                v1471 = v883;
                do
                {
                  v886 = *v97;
                  v887 = (unint64_t)((char *)v97[1] - (char *)*v97) >> 2;
                  v888 = (v887 - 1);
                  v1521 = result;
                  v1487 = v885;
                  v889 = 0;
                  if ((int)v887 - 1 >= 0)
                  {
                    v890 = *v98;
                    do
                    {
                      v891 = ldiv((int)result, v886[v888]);
                      LODWORD(result) = v891.quot;
                      v889 += *(_QWORD *)(v890 + 8 * v888--) * v891.rem;
                    }
                    while (v888 != -1);
                  }
                  v892 = **a2;
                  v893 = (unint64_t)((*a2)[1] - v892) >> 2;
                  v894 = *v1504;
                  v895 = 0;
                  v896 = (v893 - 1);
                  if ((int)v893 - 1 >= 0)
                  {
                    v897 = v1521;
                    do
                    {
                      v898 = ldiv(v897, *(int *)(v892 + 4 * v896));
                      v897 = v898.quot;
                      v895 += *(_QWORD *)(v894 + 8 * v896--) * v898.rem;
                    }
                    while (v896 != -1);
                  }
                  v885 = v1487;
                  v899 = ((v885[1] - *v885) << 30) - 0x500000000;
                  v900 = *(int *)((char *)v886 + (v899 >> 30));
                  if (v900 >= 1)
                  {
                    v901 = v899 >> 29;
                    v902 = *(_QWORD *)(*v98 + v901);
                    v903 = *(_QWORD *)(v894 + v901);
                    do
                    {
                      v889 += v902;
                      v895 += v903;
                      --v900;
                    }
                    while (v900);
                    v885 = *(_QWORD **)v6;
                  }
                  result = v1521 + v1471;
                }
                while (v885[6] > (unint64_t)(v1521 + v1471));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v17 = v4[6];
          if (v17)
          {
            v18 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v19 = (_DWORD *)v4[19];
            do
            {
              *v19++ = v18;
              --v17;
            }
            while (v17);
          }
          break;
        case 1:
          v110 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v110)
          {
            v111 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v112 = (_DWORD *)v4[19];
            do
            {
              v113 = *v111++;
              *v112++ = v113;
              --v110;
            }
            while (v110);
          }
          break;
        case 2:
          v114 = *(int ***)result;
          v115 = **(int ***)result;
          v116 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v115;
          switch(v116 >> 2)
          {
            case 1:
              if (*v115 >= 1)
              {
                v117 = 0;
                v118 = v114[19];
                v119 = v4[19];
                v120 = *(_QWORD *)v114[3];
                do
                {
                  *(_DWORD *)(v119 + 4 * v117) = *(unsigned __int8 *)v118;
                  v118 = (int *)((char *)v118 + v120);
                  ++v117;
                }
                while (*v115 > (int)v117);
              }
              break;
            case 2:
              v391 = *v115;
              if (*v115 >= 1)
              {
                v392 = 0;
                v393 = 0;
                v394 = 0;
                v395 = v114[19];
                v396 = v4[19];
                v397 = v114[3];
                v398 = *(_QWORD *)v397;
                v399 = *((_QWORD *)v397 + 1);
                v400 = v115[1];
                do
                {
                  if (v400 >= 1)
                  {
                    v401 = 0;
                    do
                    {
                      *(_DWORD *)(v396 + 4 * v393 + 4 * v401) = *((unsigned __int8 *)v395 + v394);
                      v394 += v399;
                      v400 = v115[1];
                      ++v401;
                    }
                    while ((int)v401 < v400);
                    v391 = *v115;
                    v393 += v401;
                  }
                  v394 = v394 + v398 - v399 * v400;
                  ++v392;
                }
                while (v392 < v391);
              }
              break;
            case 3:
              result = *v115;
              if ((int)result >= 1)
              {
                v402 = 0;
                v403 = 0;
                v404 = 0;
                v405 = v114[19];
                v406 = v4[19];
                v407 = v114[3];
                v408 = *(_QWORD *)v407;
                v409 = *((_QWORD *)v407 + 1);
                v410 = v115[1];
                do
                {
                  if (v410 >= 1)
                  {
                    v411 = 0;
                    v412 = v114[3];
                    v413 = *((_QWORD *)v407 + 2);
                    v414 = v115[2];
                    do
                    {
                      if (v414 >= 1)
                      {
                        v415 = 0;
                        v416 = *((_QWORD *)v412 + 2);
                        do
                        {
                          *(_DWORD *)(v406 + 4 * v403 + 4 * v415) = *((unsigned __int8 *)v405 + v404);
                          v404 += v416;
                          v414 = v115[2];
                          ++v415;
                        }
                        while ((int)v415 < v414);
                        v410 = v115[1];
                        v403 += v415;
                      }
                      v404 = v404 + v409 - v413 * v414;
                      ++v411;
                    }
                    while (v411 < v410);
                    result = *v115;
                  }
                  v404 = v404 + v408 - v409 * v410;
                  ++v402;
                }
                while (v402 < (int)result);
              }
              break;
            case 4:
              v417 = *v115;
              if (*v115 >= 1)
              {
                v418 = 0;
                v419 = 0;
                v420 = 0;
                v421 = v114[19];
                v422 = v4[19];
                v423 = v114[3];
                v424 = *(_QWORD *)v423;
                v425 = *((_QWORD *)v423 + 1);
                v426 = v115[1];
                do
                {
                  if (v426 >= 1)
                  {
                    v427 = 0;
                    v428 = v114[3];
                    v429 = *((_QWORD *)v423 + 2);
                    v430 = v115[2];
                    do
                    {
                      if (v430 >= 1)
                      {
                        v431 = 0;
                        v432 = v114[3];
                        v433 = *((_QWORD *)v428 + 2);
                        v434 = *((_QWORD *)v428 + 3);
                        v435 = v115[3];
                        do
                        {
                          if (v435 >= 1)
                          {
                            v436 = 0;
                            v437 = *((_QWORD *)v432 + 3);
                            do
                            {
                              *(_DWORD *)(v422 + 4 * v419 + 4 * v436) = *((unsigned __int8 *)v421 + v420);
                              v420 += v437;
                              v435 = v115[3];
                              ++v436;
                            }
                            while ((int)v436 < v435);
                            v430 = v115[2];
                            v419 += v436;
                          }
                          v420 = v420 + v433 - v434 * v435;
                          ++v431;
                        }
                        while (v431 < v430);
                        v426 = v115[1];
                      }
                      v420 = v420 + v425 - v429 * v430;
                      ++v427;
                    }
                    while (v427 < v426);
                    v417 = *v115;
                  }
                  result = v426;
                  v420 = v420 + v424 - v425 * v426;
                  ++v418;
                }
                while (v418 < v417);
              }
              break;
            default:
              v382 = v4[6];
              if (v382)
              {
                v383 = 0;
                v384 = v114[19];
                v385 = v4[19];
                v386 = ((unint64_t)v116 >> 2) - 1;
                v387 = v114[3];
                do
                {
                  v388 = 0;
                  if ((v386 & 0x80000000) == 0)
                  {
                    v389 = v386;
                    LODWORD(result) = v383;
                    do
                    {
                      v390 = ldiv((int)result, v115[v389]);
                      result = v390.quot;
                      v388 += *(_QWORD *)&v387[2 * v389--] * v390.rem;
                    }
                    while (v389 != -1);
                  }
                  *(_DWORD *)(v385 + 4 * v383++) = *((unsigned __int8 *)v384 + v388);
                }
                while (v383 != v382);
              }
              break;
          }
          break;
        case 3:
          v121 = *(unsigned int ***)result;
          v123 = **(_QWORD **)result;
          v122 = *(_QWORD *)(*(_QWORD *)result + 8);
          v124 = v122 - v123;
          switch((v122 - v123) >> 2)
          {
            case 1:
              v125 = (v124 << 30) - 0x100000000;
              v126 = *(_DWORD *)(v123 + (v125 >> 30));
              if (v126 >= 1)
              {
                v127 = v125 >> 29;
                v128 = *(_QWORD *)((char *)v121[3] + (v125 >> 29));
                v129 = *(_QWORD *)(v4[3] + v127);
                v130 = (_DWORD *)v4[19];
                v131 = v121[19];
                v132 = 4 * v129;
                do
                {
                  *v130 = *(unsigned __int8 *)v131;
                  v131 = (unsigned int *)((char *)v131 + v128);
                  v130 = (_DWORD *)((char *)v130 + v132);
                  --v126;
                }
                while (v126);
              }
              break;
            case 2:
              v981 = (v124 << 30) - 0x200000000;
              v982 = *(_DWORD *)(v123 + (v981 >> 30));
              if (v982 >= 1)
              {
                v983 = 0;
                v984 = 0;
                v985 = 0;
                v986 = v121[3];
                v987 = v981 >> 29;
                v988 = *(_QWORD *)((char *)v986 + (v981 >> 29));
                v989 = v4[3];
                v990 = (v124 << 30) - 0x100000000;
                v991 = *(_QWORD *)((char *)v986 + (v990 >> 29));
                v992 = v990 >> 32;
                v993 = 4 * *(_QWORD *)(v989 + v987);
                v994 = 4 * *(_QWORD *)(v989 + (v990 >> 29));
                do
                {
                  result = *(unsigned int *)(v123 + 4 * v992);
                  if ((int)result >= 1)
                  {
                    v995 = v121[19];
                    v996 = (_DWORD *)(v4[19] + v983);
                    do
                    {
                      *v996 = *((unsigned __int8 *)v995 + v985);
                      v996 = (_DWORD *)((char *)v996 + v994);
                      v995 = (unsigned int *)((char *)v995 + v991);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v985 += v988;
                  ++v984;
                  v983 += v993;
                }
                while (v984 != v982);
              }
              break;
            case 3:
              v997 = (v124 << 30) - 0x300000000;
              v998 = *(_DWORD *)(v123 + (v997 >> 30));
              if (v998 >= 1)
              {
                v999 = 0;
                v1000 = 0;
                v1001 = 0;
                v1002 = v124 << 30;
                v1003 = v121[3];
                v1004 = v997 >> 29;
                v1005 = *(_QWORD *)((char *)v1003 + (v997 >> 29));
                v1006 = v4[3];
                v1007 = *(_QWORD *)(v1006 + v1004);
                v1008 = v1002 - 0x200000000;
                v1009 = (v1002 - 0x200000000) >> 29;
                v1010 = v1002 - 0x100000000;
                v1011 = *(_QWORD *)((char *)v1003 + v1009);
                v1012 = v1008 >> 32;
                v1013 = *(_QWORD *)(v1006 + v1009);
                v1014 = v1010 >> 32;
                result = 4 * v1007;
                v1015 = 4 * v1013;
                do
                {
                  v1016 = *(_DWORD *)(v123 + 4 * v1012);
                  if (v1016 >= 1)
                  {
                    v1017 = 0;
                    v1018 = *(_QWORD *)&v1003[2 * v1014];
                    v1019 = *a2;
                    v1020 = 4 * *(_QWORD *)(v1006 + 8 * v1014);
                    v1021 = v999;
                    v1022 = v1001;
                    do
                    {
                      v1023 = *(_DWORD *)(v123 + 4 * v1014);
                      if (v1023 >= 1)
                      {
                        v1024 = v121[19];
                        v1025 = (_DWORD *)(v1019[19] + v1021);
                        do
                        {
                          *v1025 = *((unsigned __int8 *)v1024 + v1022);
                          v1025 = (_DWORD *)((char *)v1025 + v1020);
                          v1024 = (unsigned int *)((char *)v1024 + v1018);
                          --v1023;
                        }
                        while (v1023);
                      }
                      v1022 += v1011;
                      ++v1017;
                      v1021 += v1015;
                    }
                    while (v1017 != v1016);
                  }
                  v1001 += v1005;
                  ++v1000;
                  v999 += result;
                }
                while (v1000 != v998);
              }
              break;
            case 4:
              v1026 = (v124 << 30) - 0x400000000;
              v1523 = *(_DWORD *)(v123 + (v1026 >> 30));
              if (v1523 >= 1)
              {
                v1027 = 0;
                v1028 = 0;
                v1029 = 0;
                v1030 = v124 << 30;
                v1031 = v121[3];
                v1032 = v1026 >> 29;
                v1506 = *(_QWORD *)((char *)v1031 + v1032);
                v1033 = v4[3];
                v1489 = (v1030 - 0x300000000) >> 32;
                v1034 = (v1030 - 0x300000000) >> 29;
                v1035 = *(_QWORD *)((char *)v1031 + v1034);
                v1036 = (v1030 - 0x200000000) >> 32;
                result = (v1030 - 0x100000000) >> 32;
                v1473 = 4 * *(_QWORD *)(v1033 + v1032);
                v1037 = 4 * *(_QWORD *)(v1033 + v1034);
                do
                {
                  v1038 = *(_DWORD *)(v123 + 4 * v1489);
                  if (v1038 >= 1)
                  {
                    v1039 = 0;
                    v1040 = *(_QWORD *)&v1031[2 * v1036];
                    v1041 = 4 * *(_QWORD *)(v1033 + 8 * v1036);
                    v1042 = v1027;
                    v1043 = v1029;
                    do
                    {
                      v1044 = *(_DWORD *)(v123 + 4 * v1036);
                      if (v1044 >= 1)
                      {
                        v1045 = 0;
                        v1046 = *(_QWORD *)&v1031[2 * result];
                        v1047 = *a2;
                        v1048 = 4 * *(_QWORD *)(v1033 + 8 * result);
                        v1049 = v1042;
                        v1050 = v1043;
                        do
                        {
                          v1051 = *(_DWORD *)(v123 + 4 * result);
                          if (v1051 >= 1)
                          {
                            v1052 = v121[19];
                            v1053 = (_DWORD *)(v1047[19] + v1049);
                            do
                            {
                              *v1053 = *((unsigned __int8 *)v1052 + v1050);
                              v1053 = (_DWORD *)((char *)v1053 + v1048);
                              v1052 = (unsigned int *)((char *)v1052 + v1046);
                              --v1051;
                            }
                            while (v1051);
                          }
                          v1050 += v1040;
                          ++v1045;
                          v1049 += v1041;
                        }
                        while (v1045 != v1044);
                      }
                      v1043 += v1035;
                      ++v1039;
                      v1042 += v1037;
                    }
                    while (v1039 != v1038);
                  }
                  v1029 += v1506;
                  ++v1028;
                  v1027 += v1473;
                }
                while (v1028 != v1523);
              }
              break;
            case 5:
              v1054 = (v124 << 30) - 0x500000000;
              v1430 = *(_DWORD *)(v123 + (v1054 >> 30));
              if (v1430 >= 1)
              {
                v1450 = 0;
                v1459 = 0;
                v1440 = 0;
                v1055 = v124 << 30;
                v1056 = v121[3];
                v1057 = v1054 >> 29;
                v1420 = *(_QWORD *)((char *)v1056 + v1057);
                v1058 = v4[3];
                v1059 = (v1055 - 0x400000000) >> 29;
                v1490 = *(_QWORD *)((char *)v1056 + v1059);
                v1410 = (v1055 - 0x400000000) >> 32;
                v1507 = (v1055 - 0x300000000) >> 32;
                result = (v1055 - 0x200000000) >> 32;
                v1060 = (v1055 - 0x100000000) >> 32;
                v1401 = 4 * *(_QWORD *)(v1058 + v1057);
                v1474 = 4 * *(_QWORD *)(v1058 + v1059);
                do
                {
                  v1524 = *(_DWORD *)(v123 + 4 * v1410);
                  if (v1524 >= 1)
                  {
                    v1061 = 0;
                    v1062 = *(_QWORD *)&v1056[2 * v1507];
                    v1063 = 4 * *(_QWORD *)(v1058 + 8 * v1507);
                    v1064 = v1450;
                    v1065 = v1459;
                    do
                    {
                      v1066 = *(_DWORD *)(v123 + 4 * v1507);
                      if (v1066 >= 1)
                      {
                        v1067 = 0;
                        v1068 = *(_QWORD *)&v1056[2 * result];
                        v1069 = 4 * *(_QWORD *)(v1058 + 8 * result);
                        v1070 = v1065;
                        v1071 = v1064;
                        do
                        {
                          v1072 = *(_DWORD *)(v123 + 4 * result);
                          if (v1072 >= 1)
                          {
                            v1073 = 0;
                            v1074 = *(_QWORD *)&v1056[2 * v1060];
                            v1075 = *a2;
                            v1076 = 4 * *(_QWORD *)(v1058 + 8 * v1060);
                            v1077 = v1070;
                            v1078 = v1071;
                            do
                            {
                              v1079 = *(_DWORD *)(v123 + 4 * v1060);
                              if (v1079 >= 1)
                              {
                                v1080 = v121[19];
                                v1081 = (_DWORD *)(v1075[19] + v1077);
                                do
                                {
                                  *v1081 = *((unsigned __int8 *)v1080 + v1078);
                                  v1081 = (_DWORD *)((char *)v1081 + v1076);
                                  v1080 = (unsigned int *)((char *)v1080 + v1074);
                                  --v1079;
                                }
                                while (v1079);
                              }
                              v1078 += v1068;
                              ++v1073;
                              v1077 += v1069;
                            }
                            while (v1073 != v1072);
                          }
                          v1071 += v1062;
                          ++v1067;
                          v1070 += v1063;
                        }
                        while (v1067 != v1066);
                      }
                      v1064 += v1490;
                      ++v1061;
                      v1065 += v1474;
                    }
                    while (v1061 != v1524);
                  }
                  v1450 += v1420;
                  v1459 += v1401;
                  ++v1440;
                }
                while (v1440 != v1430);
              }
              break;
            default:
              LODWORD(v946) = 1;
              v947 = -20;
              do
              {
                v946 = *(int *)(v122 + v947) * (uint64_t)(int)v946;
                v947 += 4;
              }
              while (v947);
              v1388 = v121[6];
              if (v1388)
              {
                v948 = 0;
                v1378 = (v124 >> 2) - 1;
                v949 = v121[3];
                v1364 = *v4;
                v1373 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                v950 = (v124 << 30) - 0x500000000;
                v951 = v4[3];
                v1368 = v950 >> 32;
                v1409 = *(_QWORD *)((char *)v949 + (v950 >> 29));
                v1419 = (uint64_t)((v124 << 30) - 0x400000000) >> 32;
                v1505 = (uint64_t)((v124 << 30) - 0x300000000) >> 32;
                v952 = (uint64_t)((v124 << 30) - 0x200000000) >> 32;
                v953 = (uint64_t)((v124 << 30) - 0x100000000) >> 32;
                v1400 = 4 * *(_QWORD *)(v951 + (v950 >> 29));
                v1383 = v946;
                do
                {
                  v954 = v1378;
                  if ((v1378 & 0x80000000) != 0)
                  {
                    v955 = 0;
                  }
                  else
                  {
                    v955 = 0;
                    LODWORD(result) = v948;
                    do
                    {
                      v956 = ldiv((int)result, *(int *)(v123 + 4 * v954));
                      result = v956.quot;
                      v955 += *(_QWORD *)&v949[2 * v954--] * v956.rem;
                    }
                    while (v954 != -1);
                  }
                  v1458 = v955;
                  v957 = v1373;
                  v1393 = v948;
                  v958 = 0;
                  if ((v1373 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v948;
                    do
                    {
                      v959 = ldiv((int)result, *(int *)(v1364 + 4 * v957));
                      result = v959.quot;
                      v958 += *(_QWORD *)(v951 + 8 * v957--) * v959.rem;
                    }
                    while (v957 != -1);
                  }
                  v1429 = *(_DWORD *)(v123 + 4 * v1368);
                  if (v1429 >= 1)
                  {
                    v960 = 0;
                    v1488 = *(_QWORD *)&v949[2 * v1419];
                    v1449 = 4 * v958;
                    v1472 = 4 * *(_QWORD *)(v951 + 8 * v1419);
                    do
                    {
                      v1439 = v960;
                      v1522 = *(_DWORD *)(v123 + 4 * v1419);
                      if (v1522 >= 1)
                      {
                        v961 = 0;
                        v962 = *(_QWORD *)&v949[2 * v1505];
                        v963 = 4 * *(_QWORD *)(v951 + 8 * v1505);
                        v964 = v1449;
                        v965 = v1458;
                        do
                        {
                          v966 = *(_DWORD *)(v123 + 4 * v1505);
                          if (v966 >= 1)
                          {
                            v967 = 0;
                            v968 = *(_QWORD *)&v949[2 * v952];
                            v969 = 4 * *(_QWORD *)(v951 + 8 * v952);
                            v970 = v964;
                            result = v965;
                            do
                            {
                              v971 = *(_DWORD *)(v123 + 4 * v952);
                              if (v971 >= 1)
                              {
                                v972 = 0;
                                v973 = *(_QWORD *)&v949[2 * v953];
                                v974 = *a2;
                                v975 = 4 * *(_QWORD *)(v951 + 8 * v953);
                                v976 = v970;
                                v977 = result;
                                do
                                {
                                  v978 = *(_DWORD *)(v123 + 4 * v953);
                                  if (v978 >= 1)
                                  {
                                    v979 = v121[19];
                                    v980 = (_DWORD *)(v974[19] + v976);
                                    do
                                    {
                                      *v980 = *((unsigned __int8 *)v979 + v977);
                                      v980 = (_DWORD *)((char *)v980 + v975);
                                      v979 = (unsigned int *)((char *)v979 + v973);
                                      --v978;
                                    }
                                    while (v978);
                                  }
                                  v977 += v968;
                                  ++v972;
                                  v976 += v969;
                                }
                                while (v972 != v971);
                              }
                              result += v962;
                              ++v967;
                              v970 += v963;
                            }
                            while (v967 != v966);
                          }
                          v965 += v1488;
                          ++v961;
                          v964 += v1472;
                        }
                        while (v961 != v1522);
                      }
                      v1458 += v1409;
                      v960 = v1439 + 1;
                      v1449 += v1400;
                    }
                    while (v1439 + 1 != v1429);
                  }
                  v948 = v1393 + v1383;
                }
                while ((unint64_t)v1388 > v1393 + v1383);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v20 = v4[6];
          if (v20)
          {
            v21 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v22 = (_QWORD *)v4[19];
            do
            {
              *v22++ = v21;
              --v20;
            }
            while (v20);
          }
          break;
        case 1:
          v133 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v133)
          {
            v134 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v135 = (_QWORD *)v4[19];
            do
            {
              v136 = *v134++;
              *v135++ = v136;
              --v133;
            }
            while (v133);
          }
          break;
        case 2:
          v137 = *(int ***)result;
          v138 = **(int ***)result;
          v139 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v138;
          switch(v139 >> 2)
          {
            case 1:
              v140 = *v138;
              if ((int)v140 >= 1)
              {
                v141 = v137[19];
                v142 = (_QWORD *)v4[19];
                v143 = *(_QWORD *)v137[3];
                do
                {
                  *v142++ = *(unsigned __int8 *)v141;
                  v141 = (int *)((char *)v141 + v143);
                  --v140;
                }
                while (v140);
              }
              break;
            case 2:
              v447 = *v138;
              if (*v138 >= 1)
              {
                v448 = 0;
                v449 = 0;
                v450 = 0;
                v451 = v137[19];
                v452 = v4[19];
                v453 = v138[1];
                v454 = v137[3];
                v456 = *(_QWORD *)v454;
                v455 = *((_QWORD *)v454 + 1);
                v457 = v456 - v455 * v453;
                do
                {
                  v458 = v453;
                  if ((int)v453 >= 1)
                  {
                    do
                    {
                      result = *((unsigned __int8 *)v451 + v450);
                      *(_QWORD *)(v452 + 8 * v449++) = result;
                      v450 += v455;
                      --v458;
                    }
                    while (v458);
                  }
                  v450 += v457;
                  ++v448;
                }
                while (v448 != v447);
              }
              break;
            case 3:
              v459 = *v138;
              if (*v138 >= 1)
              {
                v460 = 0;
                result = 0;
                v461 = 0;
                v462 = v137[19];
                v463 = v4[19];
                v464 = v138[1];
                v465 = v137[3];
                v466 = *((_QWORD *)v465 + 1);
                v467 = *(_QWORD *)v465 - v466 * v464;
                do
                {
                  if ((int)v464 < 1)
                  {
                    v474 = result;
                  }
                  else
                  {
                    v468 = 0;
                    v469 = v138[2];
                    v470 = v137[3];
                    v471 = v466 - *((_QWORD *)v465 + 2) * v469;
                    do
                    {
                      if ((int)v469 < 1)
                      {
                        v474 = result;
                      }
                      else
                      {
                        v472 = *((_QWORD *)v470 + 2);
                        v473 = v469;
                        do
                        {
                          v474 = result + 1;
                          *(_QWORD *)(v463 + 8 * result) = *((unsigned __int8 *)v462 + v461);
                          v461 += v472;
                          ++result;
                          --v473;
                        }
                        while (v473);
                      }
                      v461 += v471;
                      ++v468;
                      result = v474;
                    }
                    while (v468 != (_DWORD)v464);
                  }
                  v461 += v467;
                  ++v460;
                  result = v474;
                }
                while (v460 != v459);
              }
              break;
            case 4:
              v475 = *v138;
              if (*v138 >= 1)
              {
                v476 = 0;
                result = 0;
                v477 = 0;
                v478 = v137[19];
                v479 = v4[19];
                v480 = v138[1];
                v481 = v137[3];
                v482 = *((_QWORD *)v481 + 1);
                v483 = *(_QWORD *)v481 - v482 * v480;
                do
                {
                  if ((int)v480 < 1)
                  {
                    v494 = result;
                  }
                  else
                  {
                    v484 = 0;
                    v485 = v138[2];
                    v486 = v137[3];
                    v487 = v482 - *((_QWORD *)v481 + 2) * v485;
                    do
                    {
                      if ((int)v485 < 1)
                      {
                        v494 = result;
                      }
                      else
                      {
                        v488 = 0;
                        v489 = v138[3];
                        v490 = v137[3];
                        v491 = *((_QWORD *)v486 + 2) - *((_QWORD *)v486 + 3) * v489;
                        do
                        {
                          if ((int)v489 < 1)
                          {
                            v494 = result;
                          }
                          else
                          {
                            v492 = *((_QWORD *)v490 + 3);
                            v493 = v489;
                            do
                            {
                              v494 = result + 1;
                              *(_QWORD *)(v479 + 8 * result) = *((unsigned __int8 *)v478 + v477);
                              v477 += v492;
                              ++result;
                              --v493;
                            }
                            while (v493);
                          }
                          v477 += v491;
                          ++v488;
                          result = v494;
                        }
                        while (v488 != (_DWORD)v485);
                      }
                      v477 += v487;
                      ++v484;
                      result = v494;
                    }
                    while (v484 != (_DWORD)v480);
                  }
                  v477 += v483;
                  ++v476;
                  result = v494;
                }
                while (v476 != v475);
              }
              break;
            default:
              v438 = v4[6];
              if (v438)
              {
                v439 = 0;
                v440 = v137[19];
                v441 = v4[19];
                v442 = ((unint64_t)v139 >> 2) - 1;
                v443 = v137[3];
                do
                {
                  v444 = 0;
                  if ((v442 & 0x80000000) == 0)
                  {
                    v445 = v442;
                    LODWORD(result) = v439;
                    do
                    {
                      v446 = ldiv((int)result, v138[v445]);
                      result = v446.quot;
                      v444 += *(_QWORD *)&v443[2 * v445--] * v446.rem;
                    }
                    while (v445 != -1);
                  }
                  *(_QWORD *)(v441 + 8 * v439++) = *((unsigned __int8 *)v440 + v444);
                }
                while (v439 != v438);
              }
              break;
          }
          break;
        case 3:
          v144 = *(unsigned int ***)result;
          v146 = **(_QWORD **)result;
          v145 = *(_QWORD *)(*(_QWORD *)result + 8);
          v147 = v145 - v146;
          switch((v145 - v146) >> 2)
          {
            case 1:
              v148 = (v147 << 30) - 0x100000000;
              v149 = *(_DWORD *)(v146 + (v148 >> 30));
              if (v149 >= 1)
              {
                v150 = v148 >> 29;
                v151 = *(_QWORD *)((char *)v144[3] + (v148 >> 29));
                v152 = *(_QWORD *)(v4[3] + v150);
                v153 = (_QWORD *)v4[19];
                v154 = v144[19];
                v155 = 8 * v152;
                do
                {
                  *v153 = *(unsigned __int8 *)v154;
                  v154 = (unsigned int *)((char *)v154 + v151);
                  v153 = (_QWORD *)((char *)v153 + v155);
                  --v149;
                }
                while (v149);
              }
              break;
            case 2:
              v1116 = (v147 << 30) - 0x200000000;
              v1117 = *(_DWORD *)(v146 + (v1116 >> 30));
              if (v1117 >= 1)
              {
                v1118 = 0;
                v1119 = 0;
                v1120 = 0;
                v1121 = v147 << 30;
                v1122 = v144[3];
                v1123 = v1116 >> 29;
                v1124 = *(_QWORD *)((char *)v1122 + (v1116 >> 29));
                v1125 = v4[3];
                result = v1121 - 0x100000000;
                v1126 = (v1121 - 0x100000000) >> 29;
                v1127 = *(_QWORD *)((char *)v1122 + v1126);
                v1128 = *(_DWORD *)(v146 + (result >> 30));
                v1129 = 8 * *(_QWORD *)(v1125 + v1123);
                v1130 = 8 * *(_QWORD *)(v1125 + v1126);
                do
                {
                  if (v1128 >= 1)
                  {
                    result = (uint64_t)v144[19];
                    v1131 = (_QWORD *)(v4[19] + v1118);
                    v1132 = v1128;
                    do
                    {
                      *v1131 = *(unsigned __int8 *)(result + v1120);
                      v1131 = (_QWORD *)((char *)v1131 + v1130);
                      result += v1127;
                      --v1132;
                    }
                    while (v1132);
                  }
                  v1120 += v1124;
                  ++v1119;
                  v1118 += v1129;
                }
                while (v1119 != v1117);
              }
              break;
            case 3:
              v1133 = (v147 << 30) - 0x300000000;
              v1134 = *(_DWORD *)(v146 + (v1133 >> 30));
              if (v1134 >= 1)
              {
                v1135 = 0;
                v1136 = 0;
                v1137 = 0;
                v1138 = v147 << 30;
                v1139 = v144[3];
                v1140 = v1133 >> 29;
                v1141 = *(_QWORD *)((char *)v1139 + (v1133 >> 29));
                v1142 = v4[3];
                v1143 = *(_QWORD *)(v1142 + v1140);
                v1144 = v1138 - 0x200000000;
                v1145 = (v1138 - 0x200000000) >> 29;
                v1146 = v1138 - 0x100000000;
                v1147 = *(_QWORD *)((char *)v1139 + v1145);
                v1148 = *(_QWORD *)(v1142 + v1145);
                v1149 = *(_DWORD *)(v146 + (v1144 >> 30));
                v1150 = v1146 >> 32;
                result = 8 * v1143;
                v1151 = 8 * v1148;
                do
                {
                  if (v1149 >= 1)
                  {
                    v1152 = 0;
                    v1153 = *(_QWORD *)&v1139[2 * v1150];
                    v1154 = *(_DWORD *)(v146 + 4 * v1150);
                    v1155 = *a2;
                    v1156 = 8 * *(_QWORD *)(v1142 + 8 * v1150);
                    v1157 = v1135;
                    v1158 = v1137;
                    do
                    {
                      if (v1154 >= 1)
                      {
                        v1159 = v144[19];
                        v1160 = (_QWORD *)(v1155[19] + v1157);
                        v1161 = v1154;
                        do
                        {
                          *v1160 = *((unsigned __int8 *)v1159 + v1158);
                          v1160 = (_QWORD *)((char *)v1160 + v1156);
                          v1159 = (unsigned int *)((char *)v1159 + v1153);
                          --v1161;
                        }
                        while (v1161);
                      }
                      v1158 += v1147;
                      ++v1152;
                      v1157 += v1151;
                    }
                    while (v1152 != v1149);
                  }
                  v1137 += v1141;
                  ++v1136;
                  v1135 += result;
                }
                while (v1136 != v1134);
              }
              break;
            case 4:
              v1162 = (v147 << 30) - 0x400000000;
              v1526 = *(_DWORD *)(v146 + (v1162 >> 30));
              if (v1526 >= 1)
              {
                v1163 = 0;
                v1164 = 0;
                v1165 = 0;
                v1166 = v144[3];
                v1167 = v1162 >> 29;
                v1509 = *(_QWORD *)((char *)v1166 + v1167);
                v1168 = v4[3];
                v1169 = (v147 << 30) - 0x300000000;
                v1170 = (v147 << 30) - 0x200000000;
                v1171 = (v147 << 30) - 0x100000000;
                v1172 = *(_QWORD *)((char *)v1166 + (v1169 >> 29));
                v1173 = *(_QWORD *)(v1168 + (v1169 >> 29));
                v1174 = *(_DWORD *)(v146 + (v1169 >> 30));
                v1476 = v1170 >> 32;
                result = v1171 >> 32;
                v1492 = 8 * *(_QWORD *)(v1168 + v1167);
                v1175 = 8 * v1173;
                do
                {
                  if (v1174 >= 1)
                  {
                    v1176 = 0;
                    v1177 = *(_QWORD *)&v1166[2 * v1476];
                    v1178 = *(_DWORD *)(v146 + 4 * v1476);
                    v1179 = 8 * *(_QWORD *)(v1168 + 8 * v1476);
                    v1180 = v1163;
                    v1181 = v1165;
                    do
                    {
                      if (v1178 >= 1)
                      {
                        v1182 = 0;
                        v1183 = *(_QWORD *)&v1166[2 * result];
                        v1184 = *(_DWORD *)(v146 + 4 * result);
                        v1185 = *a2;
                        v1186 = 8 * *(_QWORD *)(v1168 + 8 * result);
                        v1187 = v1180;
                        v1188 = v1181;
                        do
                        {
                          if (v1184 >= 1)
                          {
                            v1189 = v144[19];
                            v1190 = (_QWORD *)(v1185[19] + v1187);
                            v1191 = v1184;
                            do
                            {
                              *v1190 = *((unsigned __int8 *)v1189 + v1188);
                              v1190 = (_QWORD *)((char *)v1190 + v1186);
                              v1189 = (unsigned int *)((char *)v1189 + v1183);
                              --v1191;
                            }
                            while (v1191);
                          }
                          v1188 += v1177;
                          ++v1182;
                          v1187 += v1179;
                        }
                        while (v1182 != v1178);
                      }
                      v1181 += v1172;
                      ++v1176;
                      v1180 += v1175;
                    }
                    while (v1176 != v1174);
                  }
                  v1165 += v1509;
                  ++v1164;
                  v1163 += v1492;
                }
                while (v1164 != v1526);
              }
              break;
            case 5:
              v1192 = (v147 << 30) - 0x500000000;
              v1432 = *(_DWORD *)(v146 + (v1192 >> 30));
              if (v1432 >= 1)
              {
                v1452 = 0;
                v1461 = 0;
                v1442 = 0;
                v1193 = v144[3];
                v1194 = v1192 >> 29;
                v1422 = *(_QWORD *)((char *)v1193 + v1194);
                v1195 = v4[3];
                v1196 = (v147 << 30) - 0x400000000;
                v1510 = *(_QWORD *)((char *)v1193 + (v1196 >> 29));
                v1527 = *(_DWORD *)(v146 + (v1196 >> 30));
                v1403 = (uint64_t)((v147 << 30) - 0x300000000) >> 32;
                v1477 = (uint64_t)((v147 << 30) - 0x200000000) >> 32;
                v1197 = (uint64_t)((v147 << 30) - 0x100000000) >> 32;
                v1412 = 8 * *(_QWORD *)(v1195 + v1194);
                v1493 = 8 * *(_QWORD *)(v1195 + (v1196 >> 29));
                do
                {
                  if (v1527 >= 1)
                  {
                    v1198 = 0;
                    v1199 = *(_QWORD *)&v1193[2 * v1403];
                    v1200 = *(_DWORD *)(v146 + 4 * v1403);
                    v1201 = 8 * *(_QWORD *)(v1195 + 8 * v1403);
                    v1202 = v1452;
                    v1203 = v1461;
                    do
                    {
                      if (v1200 >= 1)
                      {
                        v1204 = 0;
                        v1205 = *(_QWORD *)&v1193[2 * v1477];
                        v1206 = *(_DWORD *)(v146 + 4 * v1477);
                        v1207 = 8 * *(_QWORD *)(v1195 + 8 * v1477);
                        v1208 = v1203;
                        v1209 = v1202;
                        do
                        {
                          if (v1206 >= 1)
                          {
                            v1210 = 0;
                            v1211 = *(_QWORD *)&v1193[2 * v1197];
                            v1212 = *(_DWORD *)(v146 + 4 * v1197);
                            v1213 = *a2;
                            v1214 = 8 * *(_QWORD *)(v1195 + 8 * v1197);
                            v1215 = v1208;
                            v1216 = v1209;
                            do
                            {
                              if (v1212 >= 1)
                              {
                                v1217 = v144[19];
                                v1218 = (uint64_t *)(v1213[19] + v1215);
                                v1219 = v1212;
                                do
                                {
                                  result = *((unsigned __int8 *)v1217 + v1216);
                                  *v1218 = result;
                                  v1218 = (uint64_t *)((char *)v1218 + v1214);
                                  v1217 = (unsigned int *)((char *)v1217 + v1211);
                                  --v1219;
                                }
                                while (v1219);
                              }
                              v1216 += v1205;
                              ++v1210;
                              v1215 += v1207;
                            }
                            while (v1210 != v1206);
                          }
                          v1209 += v1199;
                          ++v1204;
                          v1208 += v1201;
                        }
                        while (v1204 != v1200);
                      }
                      v1202 += v1510;
                      ++v1198;
                      v1203 += v1493;
                    }
                    while (v1198 != v1527);
                  }
                  v1452 += v1422;
                  v1461 += v1412;
                  ++v1442;
                }
                while (v1442 != v1432);
              }
              break;
            default:
              LODWORD(v1082) = 1;
              v1083 = -20;
              do
              {
                v1082 = *(int *)(v145 + v1083) * (uint64_t)(int)v1082;
                v1083 += 4;
              }
              while (v1083);
              v1389 = v144[6];
              if (v1389)
              {
                v1084 = 0;
                v1369 = *v4;
                v1085 = (v147 << 30) - 0x500000000;
                v1379 = (v147 >> 2) - 1;
                v1086 = v144[3];
                v1087 = v4[3];
                v1431 = *(_DWORD *)(v146 + (v1085 >> 30));
                v1374 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                v1365 = (uint64_t)((v147 << 30) - 0x400000000) >> 32;
                v1402 = (uint64_t)((v147 << 30) - 0x300000000) >> 32;
                v1475 = (uint64_t)((v147 << 30) - 0x200000000) >> 32;
                v1088 = (uint64_t)((v147 << 30) - 0x100000000) >> 32;
                v1411 = 8 * *(_QWORD *)(v1087 + (v1085 >> 29));
                v1421 = *(_QWORD *)((char *)v1086 + (v1085 >> 29));
                v1384 = v1082;
                do
                {
                  v1089 = v1379;
                  if ((v1379 & 0x80000000) != 0)
                  {
                    v1090 = 0;
                    v1091 = v1374;
                  }
                  else
                  {
                    v1090 = 0;
                    LODWORD(result) = v1084;
                    v1091 = v1374;
                    do
                    {
                      v1092 = ldiv((int)result, *(int *)(v146 + 4 * v1089));
                      result = v1092.quot;
                      v1090 += *(_QWORD *)&v1086[2 * v1089--] * v1092.rem;
                    }
                    while (v1089 != -1);
                  }
                  v1394 = v1084;
                  v1093 = 0;
                  if ((v1091 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1084;
                    do
                    {
                      v1094 = ldiv((int)result, *(int *)(v1369 + 4 * v1091));
                      result = v1094.quot;
                      v1093 += *(_QWORD *)(v1087 + 8 * v1091--) * v1094.rem;
                    }
                    while (v1091 != -1);
                  }
                  if (v1431 >= 1)
                  {
                    v1095 = 0;
                    v1508 = *(_QWORD *)&v1086[2 * v1365];
                    v1525 = *(_DWORD *)(v146 + 4 * v1365);
                    v1460 = 8 * v1093;
                    v1491 = 8 * *(_QWORD *)(v1087 + 8 * v1365);
                    do
                    {
                      v1441 = v1095;
                      v1451 = v1090;
                      if (v1525 >= 1)
                      {
                        v1096 = 0;
                        v1097 = *(_QWORD *)&v1086[2 * v1402];
                        v1098 = *(_DWORD *)(v146 + 4 * v1402);
                        v1099 = 8 * *(_QWORD *)(v1087 + 8 * v1402);
                        v1100 = v1460;
                        do
                        {
                          if (v1098 >= 1)
                          {
                            v1101 = 0;
                            v1102 = *(_QWORD *)&v1086[2 * v1475];
                            v1103 = *(_DWORD *)(v146 + 4 * v1475);
                            v1104 = 8 * *(_QWORD *)(v1087 + 8 * v1475);
                            v1105 = v1100;
                            result = v1090;
                            do
                            {
                              if (v1103 >= 1)
                              {
                                v1106 = 0;
                                v1107 = *(_QWORD *)&v1086[2 * v1088];
                                v1108 = *(_DWORD *)(v146 + 4 * v1088);
                                v1109 = *a2;
                                v1110 = 8 * *(_QWORD *)(v1087 + 8 * v1088);
                                v1111 = v1105;
                                v1112 = result;
                                do
                                {
                                  if (v1108 >= 1)
                                  {
                                    v1113 = v144[19];
                                    v1114 = (_QWORD *)(v1109[19] + v1111);
                                    v1115 = v1108;
                                    do
                                    {
                                      *v1114 = *((unsigned __int8 *)v1113 + v1112);
                                      v1114 = (_QWORD *)((char *)v1114 + v1110);
                                      v1113 = (unsigned int *)((char *)v1113 + v1107);
                                      --v1115;
                                    }
                                    while (v1115);
                                  }
                                  v1112 += v1102;
                                  ++v1106;
                                  v1111 += v1104;
                                }
                                while (v1106 != v1103);
                              }
                              result += v1097;
                              ++v1101;
                              v1105 += v1099;
                            }
                            while (v1101 != v1098);
                          }
                          v1090 += v1508;
                          ++v1096;
                          v1100 += v1491;
                        }
                        while (v1096 != v1525);
                      }
                      v1090 = v1451 + v1421;
                      v1095 = v1441 + 1;
                      v1460 += v1411;
                    }
                    while (v1441 + 1 != v1431);
                  }
                  v1084 += v1384;
                }
                while ((unint64_t)v1389 > v1394 + v1384);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v23 = v4[6];
          if (v23)
          {
            LOBYTE(a4) = **(_BYTE **)(*(_QWORD *)result + 152);
            v24 = (float)LODWORD(a4);
            v25 = (float *)v4[19];
            do
            {
              *v25++ = v24;
              --v23;
            }
            while (v23);
          }
          break;
        case 1:
          v156 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v156)
          {
            v157 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v158 = (float *)v4[19];
            do
            {
              v159 = *v157++;
              *v158++ = (float)v159;
              --v156;
            }
            while (v156);
          }
          break;
        case 2:
          v160 = *(int ***)result;
          v161 = **(int ***)result;
          v162 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v161;
          switch(v162 >> 2)
          {
            case 1:
              v163 = *v161;
              if ((int)v163 >= 1)
              {
                v164 = v160[19];
                v165 = (float *)v4[19];
                v166 = *(_QWORD *)v160[3];
                do
                {
                  LOBYTE(a4) = *(_BYTE *)v164;
                  a4 = (float)LODWORD(a4);
                  *v165++ = a4;
                  v164 = (int *)((char *)v164 + v166);
                  --v163;
                }
                while (v163);
              }
              break;
            case 2:
              v504 = *v161;
              if (*v161 >= 1)
              {
                v505 = 0;
                v506 = 0;
                v507 = 0;
                v508 = v160[19];
                v509 = v4[19];
                v510 = v161[1];
                v511 = v160[3];
                v513 = *(_QWORD *)v511;
                v512 = *((_QWORD *)v511 + 1);
                v514 = v513 - v512 * v510;
                do
                {
                  v515 = v510;
                  if ((int)v510 >= 1)
                  {
                    do
                    {
                      LOBYTE(a4) = *((_BYTE *)v508 + v507);
                      a4 = (float)LODWORD(a4);
                      *(float *)(v509 + 4 * v506++) = a4;
                      v507 += v512;
                      --v515;
                    }
                    while (v515);
                  }
                  v507 += v514;
                  ++v505;
                }
                while (v505 != v504);
              }
              break;
            case 3:
              v516 = *v161;
              if (*v161 >= 1)
              {
                v517 = 0;
                result = 0;
                v518 = 0;
                v519 = v160[19];
                v520 = v4[19];
                v521 = v161[1];
                v522 = v160[3];
                v523 = *((_QWORD *)v522 + 1);
                v524 = *(_QWORD *)v522 - v523 * v521;
                do
                {
                  if ((int)v521 < 1)
                  {
                    v531 = result;
                  }
                  else
                  {
                    v525 = 0;
                    v526 = v161[2];
                    v527 = v160[3];
                    v528 = v523 - *((_QWORD *)v522 + 2) * v526;
                    do
                    {
                      if ((int)v526 < 1)
                      {
                        v531 = result;
                      }
                      else
                      {
                        v529 = *((_QWORD *)v527 + 2);
                        v530 = v526;
                        do
                        {
                          LOBYTE(a4) = *((_BYTE *)v519 + v518);
                          v531 = result + 1;
                          a4 = (float)LODWORD(a4);
                          *(float *)(v520 + 4 * result) = a4;
                          v518 += v529;
                          ++result;
                          --v530;
                        }
                        while (v530);
                      }
                      v518 += v528;
                      ++v525;
                      result = v531;
                    }
                    while (v525 != (_DWORD)v521);
                  }
                  v518 += v524;
                  ++v517;
                  result = v531;
                }
                while (v517 != v516);
              }
              break;
            case 4:
              v532 = *v161;
              if (*v161 >= 1)
              {
                v533 = 0;
                result = 0;
                v534 = 0;
                v535 = v160[19];
                v536 = v4[19];
                v537 = v161[1];
                v538 = v160[3];
                v539 = *((_QWORD *)v538 + 1);
                v540 = *(_QWORD *)v538 - v539 * v537;
                do
                {
                  if ((int)v537 < 1)
                  {
                    v551 = result;
                  }
                  else
                  {
                    v541 = 0;
                    v542 = v161[2];
                    v543 = v160[3];
                    v544 = v539 - *((_QWORD *)v538 + 2) * v542;
                    do
                    {
                      if ((int)v542 < 1)
                      {
                        v551 = result;
                      }
                      else
                      {
                        v545 = 0;
                        v546 = v161[3];
                        v547 = v160[3];
                        v548 = *((_QWORD *)v543 + 2) - *((_QWORD *)v543 + 3) * v546;
                        do
                        {
                          if ((int)v546 < 1)
                          {
                            v551 = result;
                          }
                          else
                          {
                            v549 = *((_QWORD *)v547 + 3);
                            v550 = v546;
                            do
                            {
                              LOBYTE(a4) = *((_BYTE *)v535 + v534);
                              v551 = result + 1;
                              a4 = (float)LODWORD(a4);
                              *(float *)(v536 + 4 * result) = a4;
                              v534 += v549;
                              ++result;
                              --v550;
                            }
                            while (v550);
                          }
                          v534 += v548;
                          ++v545;
                          result = v551;
                        }
                        while (v545 != (_DWORD)v542);
                      }
                      v534 += v544;
                      ++v541;
                      result = v551;
                    }
                    while (v541 != (_DWORD)v537);
                  }
                  v534 += v540;
                  ++v533;
                  result = v551;
                }
                while (v533 != v532);
              }
              break;
            default:
              v495 = v4[6];
              if (v495)
              {
                v496 = 0;
                v497 = v160[19];
                v498 = v4[19];
                v499 = ((unint64_t)v162 >> 2) - 1;
                v500 = v160[3];
                do
                {
                  v501 = 0;
                  if ((v499 & 0x80000000) == 0)
                  {
                    v502 = v499;
                    LODWORD(result) = v496;
                    do
                    {
                      v503 = ldiv((int)result, v161[v502]);
                      result = v503.quot;
                      v501 += *(_QWORD *)&v500[2 * v502--] * v503.rem;
                    }
                    while (v502 != -1);
                  }
                  LOBYTE(a4) = *((_BYTE *)v497 + v501);
                  a4 = (float)LODWORD(a4);
                  *(float *)(v498 + 4 * v496++) = a4;
                }
                while (v496 != v495);
              }
              break;
          }
          break;
        case 3:
          v167 = *(unsigned int ***)result;
          v169 = **(_QWORD **)result;
          v168 = *(_QWORD *)(*(_QWORD *)result + 8);
          v170 = v168 - v169;
          switch((v168 - v169) >> 2)
          {
            case 1:
              v171 = (v170 << 30) - 0x100000000;
              v172 = *(_DWORD *)(v169 + (v171 >> 30));
              if (v172 >= 1)
              {
                v173 = v171 >> 29;
                v174 = *(_QWORD *)((char *)v167[3] + (v171 >> 29));
                v175 = *(_QWORD *)(v4[3] + v173);
                v176 = (float *)v4[19];
                v177 = v167[19];
                v178 = 4 * v175;
                do
                {
                  LOBYTE(a4) = *(_BYTE *)v177;
                  a4 = (float)LODWORD(a4);
                  *v176 = a4;
                  v177 = (unsigned int *)((char *)v177 + v174);
                  v176 = (float *)((char *)v176 + v178);
                  --v172;
                }
                while (v172);
              }
              break;
            case 2:
              v1257 = (v170 << 30) - 0x200000000;
              v1258 = *(_DWORD *)(v169 + (v1257 >> 30));
              if (v1258 >= 1)
              {
                v1259 = 0;
                v1260 = 0;
                v1261 = 0;
                v1262 = v170 << 30;
                v1263 = v167[3];
                v1264 = v1257 >> 29;
                v1265 = *(_QWORD *)((char *)v1263 + (v1257 >> 29));
                v1266 = v4[3];
                result = v1262 - 0x100000000;
                v1267 = (v1262 - 0x100000000) >> 29;
                v1268 = *(_QWORD *)((char *)v1263 + v1267);
                v1269 = *(_DWORD *)(v169 + (result >> 30));
                v1270 = 4 * *(_QWORD *)(v1266 + v1264);
                v1271 = 4 * *(_QWORD *)(v1266 + v1267);
                do
                {
                  if (v1269 >= 1)
                  {
                    result = (uint64_t)v167[19];
                    v1272 = (float *)(v4[19] + v1259);
                    v1273 = v1269;
                    do
                    {
                      LOBYTE(a4) = *(_BYTE *)(result + v1261);
                      a4 = (float)LODWORD(a4);
                      *v1272 = a4;
                      v1272 = (float *)((char *)v1272 + v1271);
                      result += v1268;
                      --v1273;
                    }
                    while (v1273);
                  }
                  v1261 += v1265;
                  ++v1260;
                  v1259 += v1270;
                }
                while (v1260 != v1258);
              }
              break;
            case 3:
              v1274 = (v170 << 30) - 0x300000000;
              v1275 = *(_DWORD *)(v169 + (v1274 >> 30));
              if (v1275 >= 1)
              {
                v1276 = 0;
                v1277 = 0;
                v1278 = 0;
                v1279 = v170 << 30;
                v1280 = v167[3];
                v1281 = v1274 >> 29;
                v1282 = *(_QWORD *)((char *)v1280 + (v1274 >> 29));
                v1283 = v4[3];
                v1284 = *(_QWORD *)(v1283 + v1281);
                v1285 = v1279 - 0x200000000;
                v1286 = (v1279 - 0x200000000) >> 29;
                v1287 = v1279 - 0x100000000;
                v1288 = *(_QWORD *)((char *)v1280 + v1286);
                v1289 = *(_QWORD *)(v1283 + v1286);
                v1290 = *(_DWORD *)(v169 + (v1285 >> 30));
                v1291 = v1287 >> 32;
                result = 4 * v1284;
                v1292 = 4 * v1289;
                do
                {
                  if (v1290 >= 1)
                  {
                    v1293 = 0;
                    v1294 = *(_QWORD *)&v1280[2 * v1291];
                    v1295 = *(_DWORD *)(v169 + 4 * v1291);
                    v1296 = *a2;
                    v1297 = 4 * *(_QWORD *)(v1283 + 8 * v1291);
                    v1298 = v1276;
                    v1299 = v1278;
                    do
                    {
                      if (v1295 >= 1)
                      {
                        v1300 = v167[19];
                        v1301 = (float *)(v1296[19] + v1298);
                        v1302 = v1295;
                        do
                        {
                          LOBYTE(a4) = *((_BYTE *)v1300 + v1299);
                          a4 = (float)LODWORD(a4);
                          *v1301 = a4;
                          v1301 = (float *)((char *)v1301 + v1297);
                          v1300 = (unsigned int *)((char *)v1300 + v1294);
                          --v1302;
                        }
                        while (v1302);
                      }
                      v1299 += v1288;
                      ++v1293;
                      v1298 += v1292;
                    }
                    while (v1293 != v1290);
                  }
                  v1278 += v1282;
                  ++v1277;
                  v1276 += result;
                }
                while (v1277 != v1275);
              }
              break;
            case 4:
              v1303 = (v170 << 30) - 0x400000000;
              v1529 = *(_DWORD *)(v169 + (v1303 >> 30));
              if (v1529 >= 1)
              {
                v1304 = 0;
                v1305 = 0;
                v1306 = 0;
                v1307 = v167[3];
                v1308 = v1303 >> 29;
                v1512 = *(_QWORD *)((char *)v1307 + v1308);
                v1309 = v4[3];
                v1310 = (v170 << 30) - 0x300000000;
                v1311 = (v170 << 30) - 0x200000000;
                v1312 = (v170 << 30) - 0x100000000;
                v1313 = *(_QWORD *)((char *)v1307 + (v1310 >> 29));
                v1314 = *(_QWORD *)(v1309 + (v1310 >> 29));
                v1315 = *(_DWORD *)(v169 + (v1310 >> 30));
                v1316 = v1311 >> 32;
                result = v1312 >> 32;
                v1495 = 4 * *(_QWORD *)(v1309 + v1308);
                v1317 = 4 * v1314;
                do
                {
                  if (v1315 >= 1)
                  {
                    v1318 = 0;
                    v1319 = *(_QWORD *)&v1307[2 * v1316];
                    v1320 = *(_DWORD *)(v169 + 4 * v1316);
                    v1321 = 4 * *(_QWORD *)(v1309 + 8 * v1316);
                    v1322 = v1304;
                    v1323 = v1306;
                    do
                    {
                      if (v1320 >= 1)
                      {
                        v1324 = 0;
                        v1325 = *(_QWORD *)&v1307[2 * result];
                        v1326 = *(_DWORD *)(v169 + 4 * result);
                        v1327 = *a2;
                        v1328 = 4 * *(_QWORD *)(v1309 + 8 * result);
                        v1329 = v1322;
                        v1330 = v1323;
                        do
                        {
                          if (v1326 >= 1)
                          {
                            v1331 = v167[19];
                            v1332 = (float *)(v1327[19] + v1329);
                            v1333 = v1326;
                            do
                            {
                              LOBYTE(a4) = *((_BYTE *)v1331 + v1330);
                              a4 = (float)LODWORD(a4);
                              *v1332 = a4;
                              v1332 = (float *)((char *)v1332 + v1328);
                              v1331 = (unsigned int *)((char *)v1331 + v1325);
                              --v1333;
                            }
                            while (v1333);
                          }
                          v1330 += v1319;
                          ++v1324;
                          v1329 += v1321;
                        }
                        while (v1324 != v1320);
                      }
                      v1323 += v1313;
                      ++v1318;
                      v1322 += v1317;
                    }
                    while (v1318 != v1315);
                  }
                  v1306 += v1512;
                  ++v1305;
                  v1304 += v1495;
                }
                while (v1305 != v1529);
              }
              break;
            case 5:
              v1334 = (v170 << 30) - 0x500000000;
              v1444 = *(_DWORD *)(v169 + (v1334 >> 30));
              if (v1444 >= 1)
              {
                v1463 = 0;
                v1479 = 0;
                v1454 = 0;
                v1335 = v167[3];
                v1336 = v1334 >> 29;
                v1434 = *(_QWORD *)((char *)v1335 + v1336);
                v1337 = v4[3];
                v1338 = (v170 << 30) - 0x400000000;
                v1513 = *(_QWORD *)((char *)v1335 + (v1338 >> 29));
                v1530 = *(_DWORD *)(v169 + (v1338 >> 30));
                result = (uint64_t)((v170 << 30) - 0x200000000) >> 32;
                v1339 = (uint64_t)((v170 << 30) - 0x100000000) >> 32;
                v1414 = (uint64_t)((v170 << 30) - 0x300000000) >> 32;
                v1424 = 4 * *(_QWORD *)(v1337 + v1336);
                v1496 = 4 * *(_QWORD *)(v1337 + (v1338 >> 29));
                do
                {
                  if (v1530 >= 1)
                  {
                    v1340 = 0;
                    v1341 = *(_QWORD *)&v1335[2 * v1414];
                    v1342 = *(_DWORD *)(v169 + 4 * v1414);
                    v1343 = 4 * *(_QWORD *)(v1337 + 8 * v1414);
                    v1344 = v1463;
                    v1345 = v1479;
                    do
                    {
                      if (v1342 >= 1)
                      {
                        v1346 = 0;
                        v1347 = *(_QWORD *)&v1335[2 * result];
                        v1348 = *(_DWORD *)(v169 + 4 * result);
                        v1349 = 4 * *(_QWORD *)(v1337 + 8 * result);
                        v1350 = v1345;
                        v1351 = v1344;
                        do
                        {
                          if (v1348 >= 1)
                          {
                            v1352 = 0;
                            v1353 = *(_QWORD *)&v1335[2 * v1339];
                            v1354 = *(_DWORD *)(v169 + 4 * v1339);
                            v1355 = *a2;
                            v1356 = 4 * *(_QWORD *)(v1337 + 8 * v1339);
                            v1357 = v1350;
                            v1358 = v1351;
                            do
                            {
                              if (v1354 >= 1)
                              {
                                v1359 = v167[19];
                                v1360 = (float *)(v1355[19] + v1357);
                                v1361 = v1354;
                                do
                                {
                                  LOBYTE(a4) = *((_BYTE *)v1359 + v1358);
                                  a4 = (float)LODWORD(a4);
                                  *v1360 = a4;
                                  v1360 = (float *)((char *)v1360 + v1356);
                                  v1359 = (unsigned int *)((char *)v1359 + v1353);
                                  --v1361;
                                }
                                while (v1361);
                              }
                              v1358 += v1347;
                              ++v1352;
                              v1357 += v1349;
                            }
                            while (v1352 != v1348);
                          }
                          v1351 += v1341;
                          ++v1346;
                          v1350 += v1343;
                        }
                        while (v1346 != v1342);
                      }
                      v1344 += v1513;
                      ++v1340;
                      v1345 += v1496;
                    }
                    while (v1340 != v1530);
                  }
                  v1463 += v1434;
                  v1479 += v1424;
                  ++v1454;
                }
                while (v1454 != v1444);
              }
              break;
            default:
              LODWORD(v1220) = 1;
              v1221 = -20;
              do
              {
                v1220 = *(int *)(v168 + v1221) * (uint64_t)(int)v1220;
                v1221 += 4;
              }
              while (v1221);
              v1395 = v167[6];
              if (v1395)
              {
                v1222 = 0;
                v1375 = *v4;
                v1223 = (v170 << 30) - 0x500000000;
                v1385 = (v170 >> 2) - 1;
                v1224 = v167[3];
                v1225 = v4[3];
                v1443 = *(_DWORD *)(v169 + (v1223 >> 30));
                v1380 = ((unint64_t)(v4[1] - *v4) >> 2) - 1;
                v1370 = (uint64_t)((v170 << 30) - 0x400000000) >> 32;
                v1413 = (uint64_t)((v170 << 30) - 0x300000000) >> 32;
                v1226 = (uint64_t)((v170 << 30) - 0x200000000) >> 32;
                v1227 = (uint64_t)((v170 << 30) - 0x100000000) >> 32;
                v1423 = 4 * *(_QWORD *)(v1225 + (v1223 >> 29));
                v1433 = *(_QWORD *)((char *)v1224 + (v1223 >> 29));
                v1390 = v1220;
                do
                {
                  v1228 = v1385;
                  if ((v1385 & 0x80000000) != 0)
                  {
                    v1229 = 0;
                  }
                  else
                  {
                    v1229 = 0;
                    LODWORD(result) = v1222;
                    do
                    {
                      v1230 = v1229;
                      v1231 = ldiv((int)result, *(int *)(v169 + 4 * v1228));
                      result = v1231.quot;
                      v1229 = v1230 + *(_QWORD *)&v1224[2 * v1228--] * v1231.rem;
                    }
                    while (v1228 != -1);
                  }
                  v1232 = v1380;
                  v1404 = v1222;
                  v1478 = v1229;
                  v1233 = 0;
                  if ((v1380 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1222;
                    do
                    {
                      v1234 = ldiv((int)result, *(int *)(v1375 + 4 * v1232));
                      result = v1234.quot;
                      v1233 += *(_QWORD *)(v1225 + 8 * v1232--) * v1234.rem;
                    }
                    while (v1232 != -1);
                  }
                  if (v1443 >= 1)
                  {
                    v1235 = 0;
                    v1511 = *(_QWORD *)&v1224[2 * v1370];
                    v1528 = *(_DWORD *)(v169 + 4 * v1370);
                    v1462 = 4 * v1233;
                    v1494 = 4 * *(_QWORD *)(v1225 + 8 * v1370);
                    do
                    {
                      v1453 = v1235;
                      if (v1528 >= 1)
                      {
                        v1236 = 0;
                        v1237 = *(_QWORD *)&v1224[2 * v1413];
                        v1238 = *(_DWORD *)(v169 + 4 * v1413);
                        v1239 = 4 * *(_QWORD *)(v1225 + 8 * v1413);
                        v1240 = v1462;
                        v1241 = v1478;
                        do
                        {
                          if (v1238 >= 1)
                          {
                            v1242 = 0;
                            v1243 = *(_QWORD *)&v1224[2 * v1226];
                            v1244 = *(_DWORD *)(v169 + 4 * v1226);
                            v1245 = 4 * *(_QWORD *)(v1225 + 8 * v1226);
                            v1246 = v1240;
                            result = v1241;
                            do
                            {
                              if (v1244 >= 1)
                              {
                                v1247 = 0;
                                v1248 = *(_QWORD *)&v1224[2 * v1227];
                                v1249 = *(_DWORD *)(v169 + 4 * v1227);
                                v1250 = *a2;
                                v1251 = 4 * *(_QWORD *)(v1225 + 8 * v1227);
                                v1252 = v1246;
                                v1253 = result;
                                do
                                {
                                  if (v1249 >= 1)
                                  {
                                    v1254 = v167[19];
                                    v1255 = (float *)(v1250[19] + v1252);
                                    v1256 = v1249;
                                    do
                                    {
                                      LOBYTE(a4) = *((_BYTE *)v1254 + v1253);
                                      a4 = (float)LODWORD(a4);
                                      *v1255 = a4;
                                      v1255 = (float *)((char *)v1255 + v1251);
                                      v1254 = (unsigned int *)((char *)v1254 + v1248);
                                      --v1256;
                                    }
                                    while (v1256);
                                  }
                                  v1253 += v1243;
                                  ++v1247;
                                  v1252 += v1245;
                                }
                                while (v1247 != v1244);
                              }
                              result += v1237;
                              ++v1242;
                              v1246 += v1239;
                            }
                            while (v1242 != v1238);
                          }
                          v1241 += v1511;
                          ++v1236;
                          v1240 += v1494;
                        }
                        while (v1236 != v1528);
                      }
                      v1478 += v1433;
                      v1235 = v1453 + 1;
                      v1462 += v1423;
                    }
                    while (v1453 + 1 != v1443);
                  }
                  v1222 = v1404 + v1390;
                }
                while ((unint64_t)v1395 > v1404 + v1390);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<unsigned int>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  BOOL *v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  BOOL *v36;
  uint64_t v37;
  unsigned int **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _BYTE *v52;
  uint64_t v53;
  int v54;
  int **v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int **v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  int *v73;
  uint64_t v74;
  int **v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int **v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  _BYTE *v97;
  uint64_t v98;
  int v99;
  int **v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  int **v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  int *v118;
  uint64_t v119;
  int **v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int **v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned int v144;
  int **v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  _QWORD *v150;
  uint64_t v151;
  unsigned int **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unsigned int *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  float *v167;
  uint64_t v168;
  unsigned int v169;
  int **v170;
  int *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  float *v175;
  uint64_t v176;
  unsigned int **v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  float *v186;
  unsigned int *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  ldiv_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  unint64_t v247;
  int *v248;
  uint64_t v249;
  int *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int *v254;
  ldiv_t v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  int *v260;
  uint64_t v261;
  int v262;
  int *v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  int *v269;
  uint64_t v270;
  int v271;
  int i;
  int v273;
  uint64_t v274;
  int *v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  int *v281;
  uint64_t v282;
  int v283;
  int j;
  int v285;
  int k;
  int v287;
  uint64_t v288;
  int *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int *v294;
  uint64_t v295;
  uint64_t v296;
  int *v297;
  uint64_t v298;
  uint64_t v299;
  ldiv_t v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  int *v305;
  uint64_t v306;
  int *v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  int *v315;
  uint64_t v316;
  int *v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  int v321;
  int *v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  int *v331;
  uint64_t v332;
  int *v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  int *v338;
  uint64_t v339;
  int v340;
  int v341;
  int *v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  int *v349;
  uint64_t v350;
  int *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int *v355;
  ldiv_t v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  int *v361;
  uint64_t v362;
  int v363;
  int *v364;
  uint64_t v365;
  int v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  int *v370;
  uint64_t v371;
  int v372;
  int m;
  int v374;
  uint64_t v375;
  int *v376;
  uint64_t v377;
  int v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  int *v382;
  uint64_t v383;
  int v384;
  int n;
  int v386;
  int ii;
  int v388;
  uint64_t v389;
  int *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int *v395;
  uint64_t v396;
  uint64_t v397;
  int *v398;
  uint64_t v399;
  uint64_t v400;
  ldiv_t v401;
  int v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  int *v406;
  uint64_t v407;
  int *v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  int *v416;
  uint64_t v417;
  int *v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  int v422;
  int *v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  int *v432;
  uint64_t v433;
  int *v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  int v438;
  int *v439;
  uint64_t v440;
  int v441;
  int v442;
  int *v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int *v451;
  uint64_t v452;
  uint64_t v453;
  int *v454;
  uint64_t v455;
  uint64_t v456;
  ldiv_t v457;
  int v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  int *v462;
  uint64_t v463;
  uint64_t v464;
  int *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  int v470;
  int v471;
  uint64_t v472;
  int *v473;
  uint64_t v474;
  uint64_t v475;
  int *v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  int *v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  int v486;
  int v487;
  uint64_t v488;
  int *v489;
  uint64_t v490;
  uint64_t v491;
  int *v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  uint64_t v496;
  int *v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  int *v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  int *v508;
  uint64_t v509;
  uint64_t v510;
  int *v511;
  uint64_t v512;
  uint64_t v513;
  ldiv_t v514;
  int v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  int *v519;
  uint64_t v520;
  uint64_t v521;
  int *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  int v527;
  int v528;
  uint64_t v529;
  int *v530;
  uint64_t v531;
  uint64_t v532;
  int *v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  int *v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  int v543;
  int v544;
  uint64_t v545;
  int *v546;
  uint64_t v547;
  uint64_t v548;
  int *v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  int *v554;
  uint64_t v555;
  int v556;
  uint64_t v557;
  int *v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unsigned int *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  ldiv_t v572;
  uint64_t v573;
  uint64_t v574;
  ldiv_t v575;
  int v576;
  int v577;
  uint64_t v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  uint64_t v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  _DWORD *v596;
  int v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  uint64_t v603;
  unsigned int *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  _DWORD *v615;
  int v616;
  uint64_t v617;
  int v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  unsigned int *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _DWORD *v644;
  int v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  uint64_t v649;
  unsigned int *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  int v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  uint64_t v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  _DWORD *v674;
  int v675;
  uint64_t v676;
  unsigned int *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  int v682;
  uint64_t v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  int v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  _DWORD *v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  _QWORD *v706;
  int *v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  ldiv_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  int quot;
  ldiv_t v719;
  uint64_t v720;
  int v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  int v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  int v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  int v742;
  uint64_t v743;
  int v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  int v750;
  int v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  _DWORD *v763;
  uint64_t v764;
  uint64_t v765;
  int v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unsigned int *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  ldiv_t v782;
  uint64_t v783;
  int v784;
  ldiv_t v785;
  int v786;
  int v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  int v792;
  int v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  int v798;
  int v799;
  _QWORD *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  _DWORD *v806;
  _DWORD *v807;
  uint64_t v808;
  int v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  unsigned int *v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  _DWORD *v825;
  _DWORD *v826;
  uint64_t v827;
  int v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  unsigned int *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  int v845;
  int v846;
  _QWORD *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  _DWORD *v853;
  _DWORD *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  int v858;
  uint64_t v859;
  unsigned int *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  int v869;
  int v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  int v876;
  _QWORD *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  int v882;
  _DWORD *v883;
  _DWORD *v884;
  uint64_t v885;
  uint64_t v886;
  unsigned int *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  int v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  int v898;
  int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  int v910;
  _DWORD *v911;
  _DWORD *v912;
  uint64_t v913;
  uint64_t v914;
  _QWORD *v915;
  int *v916;
  unint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  ldiv_t v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  int v927;
  ldiv_t v928;
  uint64_t v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  int v935;
  uint64_t v936;
  int v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  int v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  int v951;
  uint64_t v952;
  int v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  int v959;
  int v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  int v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  _DWORD *v972;
  uint64_t v973;
  uint64_t v974;
  int v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  unsigned int *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  ldiv_t v991;
  uint64_t v992;
  int v993;
  ldiv_t v994;
  int v995;
  int v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int v1001;
  int v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int v1007;
  int v1008;
  _QWORD *v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  int v1014;
  _DWORD *v1015;
  _DWORD *v1016;
  uint64_t v1017;
  int v1018;
  uint64_t v1019;
  uint64_t v1020;
  int v1021;
  unsigned int *v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  _DWORD *v1034;
  _DWORD *v1035;
  uint64_t v1036;
  int v1037;
  uint64_t v1038;
  uint64_t v1039;
  int v1040;
  uint64_t v1041;
  unsigned int *v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  int v1054;
  int v1055;
  _QWORD *v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  int v1061;
  _DWORD *v1062;
  _DWORD *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  int v1067;
  uint64_t v1068;
  unsigned int *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  int v1078;
  int v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  int v1084;
  int v1085;
  _QWORD *v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  int v1091;
  _DWORD *v1092;
  _DWORD *v1093;
  uint64_t v1094;
  uint64_t v1095;
  unsigned int *v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  int v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  int v1107;
  int v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  int v1113;
  int v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  int v1119;
  _DWORD *v1120;
  _DWORD *v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unsigned int *v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  ldiv_t v1132;
  uint64_t v1133;
  ldiv_t v1134;
  int v1135;
  int v1136;
  int v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  int v1142;
  int v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  int v1147;
  int v1148;
  _QWORD *v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  _QWORD *v1154;
  unsigned int *v1155;
  int v1156;
  uint64_t v1157;
  int v1158;
  uint64_t v1159;
  uint64_t v1160;
  int v1161;
  unsigned int *v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  int v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  unsigned int *v1174;
  int v1175;
  uint64_t v1176;
  int v1177;
  uint64_t v1178;
  uint64_t v1179;
  int v1180;
  unsigned int *v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  int v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  int v1195;
  int v1196;
  _QWORD *v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  _QWORD *v1202;
  unsigned int *v1203;
  int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  int v1208;
  unsigned int *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  int v1218;
  uint64_t v1219;
  uint64_t v1220;
  int v1221;
  int v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  int v1227;
  int v1228;
  _QWORD *v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  _QWORD *v1234;
  unsigned int *v1235;
  int v1236;
  uint64_t v1237;
  unsigned int *v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  int v1243;
  int v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  int v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  int v1255;
  int v1256;
  _QWORD *v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  _QWORD *v1262;
  unsigned int *v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  unsigned int *v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  ldiv_t v1274;
  uint64_t v1275;
  int v1276;
  ldiv_t v1277;
  int v1278;
  int v1279;
  int v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  int v1285;
  int v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  int v1291;
  int v1292;
  _QWORD *v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  float *v1298;
  unsigned int *v1299;
  int v1300;
  uint64_t v1301;
  int v1302;
  uint64_t v1303;
  uint64_t v1304;
  int v1305;
  unsigned int *v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  int v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  unsigned int *v1318;
  int v1319;
  uint64_t v1320;
  int v1321;
  uint64_t v1322;
  uint64_t v1323;
  int v1324;
  unsigned int *v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  int v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  int v1339;
  int v1340;
  _QWORD *v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  float *v1346;
  unsigned int *v1347;
  int v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  int v1352;
  unsigned int *v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  int v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  int v1366;
  int v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  int v1372;
  int v1373;
  _QWORD *v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  float *v1379;
  unsigned int *v1380;
  int v1381;
  uint64_t v1382;
  unsigned int *v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  int v1389;
  int v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  int v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  int v1401;
  int v1402;
  _QWORD *v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  float *v1408;
  unsigned int *v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  unsigned int *v1430;
  unsigned int *v1431;
  uint64_t v1432;
  uint64_t v1433;
  unsigned int *v1434;
  uint64_t v1435;
  uint64_t v1436;
  unsigned int *v1437;
  unsigned int *v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  int v1473;
  int v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  int v1480;
  uint64_t v1481;
  uint64_t v1482;
  int v1483;
  int v1484;
  int v1485;
  int v1486;
  int v1487;
  int v1488;
  int v1489;
  int v1490;
  int v1491;
  int v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  int v1501;
  int v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  _QWORD *v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  _QWORD *v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t *v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  int v1563;
  int v1564;
  int v1565;
  uint64_t v1566;
  int v1567;
  int v1568;
  int v1569;
  uint64_t v1570;
  int v1571;
  int v1572;
  int v1573;
  int v1574;
  int v1575;
  int v1576;
  int v1577;
  int v1578;
  int v1579;

  v3 = (uint64_t *)*a2;
  v5 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v6 = v3[6];
          if (v6)
            result = (uint64_t)memset((void *)v3[19], **(_DWORD **)(*(_QWORD *)result + 152) != 0, v6);
          break;
        case 1:
          v26 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v26)
          {
            v27 = *(int **)(*(_QWORD *)result + 152);
            v28 = (BOOL *)v3[19];
            v29 = 4 * v26;
            do
            {
              v30 = *v27++;
              *v28++ = v30 != 0;
              v29 -= 4;
            }
            while (v29);
          }
          break;
        case 2:
          v31 = *(uint64_t **)result;
          v32 = **(int ***)result;
          v33 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v32;
          switch(v33 >> 2)
          {
            case 1:
              v34 = *v32;
              if ((int)v34 >= 1)
              {
                v35 = (_DWORD *)v31[19];
                v36 = (BOOL *)v3[19];
                v37 = 4 * *(_QWORD *)v31[3];
                do
                {
                  *v36++ = *v35 != 0;
                  v35 = (_DWORD *)((char *)v35 + v37);
                  --v34;
                }
                while (v34);
              }
              break;
            case 2:
              v199 = *v32;
              if (*v32 >= 1)
              {
                v200 = 0;
                v201 = 0;
                v202 = 0;
                v203 = v31[19];
                v204 = v3[19];
                v205 = v32[1];
                v206 = (uint64_t *)v31[3];
                v208 = *v206;
                v207 = v206[1];
                v209 = v208 - v207 * v205;
                do
                {
                  v210 = v205;
                  if ((int)v205 >= 1)
                  {
                    do
                    {
                      result = *(_DWORD *)(v203 + 4 * v202) != 0;
                      *(_BYTE *)(v204 + v201++) = result;
                      v202 += v207;
                      --v210;
                    }
                    while (v210);
                  }
                  v202 += v209;
                  ++v200;
                }
                while (v200 != v199);
              }
              break;
            case 3:
              v211 = *v32;
              if (*v32 >= 1)
              {
                v212 = 0;
                result = 0;
                v213 = 0;
                v214 = v31[19];
                v215 = v3[19];
                v216 = v32[1];
                v217 = (_QWORD *)v31[3];
                v218 = v217[1];
                v219 = *v217 - v218 * v216;
                do
                {
                  if ((int)v216 < 1)
                  {
                    v226 = result;
                  }
                  else
                  {
                    v220 = 0;
                    v221 = v32[2];
                    v222 = v31[3];
                    v223 = v218 - v217[2] * v221;
                    do
                    {
                      if ((int)v221 < 1)
                      {
                        v226 = result;
                      }
                      else
                      {
                        v224 = *(_QWORD *)(v222 + 16);
                        v225 = v221;
                        do
                        {
                          v226 = result + 1;
                          *(_BYTE *)(v215 + result) = *(_DWORD *)(v214 + 4 * v213) != 0;
                          v213 += v224;
                          ++result;
                          --v225;
                        }
                        while (v225);
                      }
                      v213 += v223;
                      ++v220;
                      result = v226;
                    }
                    while (v220 != (_DWORD)v216);
                  }
                  v213 += v219;
                  ++v212;
                  result = v226;
                }
                while (v212 != v211);
              }
              break;
            case 4:
              v227 = *v32;
              if (*v32 >= 1)
              {
                v228 = 0;
                result = 0;
                v229 = 0;
                v230 = v31[19];
                v231 = v3[19];
                v232 = v32[1];
                v233 = (_QWORD *)v31[3];
                v234 = v233[1];
                v235 = *v233 - v234 * v232;
                do
                {
                  if ((int)v232 < 1)
                  {
                    v246 = result;
                  }
                  else
                  {
                    v236 = 0;
                    v237 = v32[2];
                    v238 = v31[3];
                    v239 = v234 - v233[2] * v237;
                    do
                    {
                      if ((int)v237 < 1)
                      {
                        v246 = result;
                      }
                      else
                      {
                        v240 = 0;
                        v241 = v32[3];
                        v242 = v31[3];
                        v243 = *(_QWORD *)(v238 + 16) - *(_QWORD *)(v238 + 24) * v241;
                        do
                        {
                          if ((int)v241 < 1)
                          {
                            v246 = result;
                          }
                          else
                          {
                            v244 = *(_QWORD *)(v242 + 24);
                            v245 = v241;
                            do
                            {
                              v246 = result + 1;
                              *(_BYTE *)(v231 + result) = *(_DWORD *)(v230 + 4 * v229) != 0;
                              v229 += v244;
                              ++result;
                              --v245;
                            }
                            while (v245);
                          }
                          v229 += v243;
                          ++v240;
                          result = v246;
                        }
                        while (v240 != (_DWORD)v237);
                      }
                      v229 += v239;
                      ++v236;
                      result = v246;
                    }
                    while (v236 != (_DWORD)v232);
                  }
                  v229 += v235;
                  ++v228;
                  result = v246;
                }
                while (v228 != v227);
              }
              break;
            default:
              v190 = v3[6];
              if (v190)
              {
                v191 = 0;
                v192 = v31[19];
                v193 = v3[19];
                v194 = ((unint64_t)v33 >> 2) - 1;
                v195 = v31[3];
                do
                {
                  v196 = 0;
                  if ((v194 & 0x80000000) == 0)
                  {
                    v197 = v194;
                    LODWORD(result) = v191;
                    do
                    {
                      v198 = ldiv((int)result, v32[v197]);
                      result = v198.quot;
                      v196 += *(_QWORD *)(v195 + 8 * v197--) * v198.rem;
                    }
                    while (v197 != -1);
                  }
                  *(_BYTE *)(v193 + v191++) = *(_DWORD *)(v192 + 4 * v196) != 0;
                }
                while (v191 != v190);
              }
              break;
          }
          break;
        case 3:
          v38 = *(unsigned int ***)result;
          v40 = **(_QWORD **)result;
          v39 = *(_QWORD *)(*(_QWORD *)result + 8);
          v41 = v39 - v40;
          switch((v39 - v40) >> 2)
          {
            case 1:
              v42 = (v41 << 30) - 0x100000000;
              v43 = *(_DWORD *)(v40 + (v42 >> 30));
              if (v43 >= 1)
              {
                v44 = v42 >> 29;
                v45 = *(_QWORD *)((char *)v38[3] + v44);
                v46 = *(_QWORD *)(v3[3] + v44);
                v47 = (BOOL *)v3[19];
                v48 = v38[19];
                v49 = 4 * v45;
                do
                {
                  *v47 = *v48 != 0;
                  v47 += v46;
                  v48 = (unsigned int *)((char *)v48 + v49);
                  --v43;
                }
                while (v43);
              }
              break;
            case 2:
              v598 = (v41 << 30) - 0x200000000;
              v599 = *(_DWORD *)(v40 + (v598 >> 30));
              if (v599 >= 1)
              {
                v600 = 0;
                v601 = 0;
                v602 = 0;
                v603 = v41 << 30;
                v604 = v38[3];
                v605 = v598 >> 29;
                v606 = *(_QWORD *)((char *)v604 + v605);
                v607 = v3[3];
                v608 = *(_QWORD *)(v607 + v605);
                result = v603 - 0x100000000;
                v609 = (v603 - 0x100000000) >> 29;
                v610 = *(_QWORD *)((char *)v604 + v609);
                v611 = *(_QWORD *)(v607 + v609);
                v612 = *(_DWORD *)(v40 + (result >> 30));
                v613 = 4 * v606;
                v614 = 4 * v610;
                do
                {
                  if (v612 >= 1)
                  {
                    result = v3[19];
                    v615 = (unsigned int *)((char *)v38[19] + v600);
                    v616 = v612;
                    do
                    {
                      *(_BYTE *)(result + v602) = *v615 != 0;
                      result += v611;
                      v615 = (_DWORD *)((char *)v615 + v614);
                      --v616;
                    }
                    while (v616);
                  }
                  v602 += v608;
                  ++v601;
                  v600 += v613;
                }
                while (v601 != v599);
              }
              break;
            case 3:
              v617 = (v41 << 30) - 0x300000000;
              v618 = *(_DWORD *)(v40 + (v617 >> 30));
              if (v618 >= 1)
              {
                v619 = 0;
                v620 = 0;
                v621 = 0;
                v622 = v41 << 30;
                v623 = v38[3];
                v624 = v617 >> 29;
                v625 = *(_QWORD *)((char *)v623 + v624);
                v626 = v3[3];
                v627 = *(_QWORD *)(v626 + v624);
                v628 = v622 - 0x200000000;
                v629 = (v622 - 0x200000000) >> 29;
                v630 = v622 - 0x100000000;
                v631 = *(_QWORD *)((char *)v623 + v629);
                v632 = *(_QWORD *)(v626 + v629);
                v633 = *(_DWORD *)(v40 + (v628 >> 30));
                v634 = v630 >> 32;
                result = 4 * v625;
                v635 = 4 * v631;
                do
                {
                  if (v633 >= 1)
                  {
                    v636 = 0;
                    v637 = *(_QWORD *)(v626 + 8 * v634);
                    v638 = *(_DWORD *)(v40 + 4 * v634);
                    v639 = *a2;
                    v640 = 4 * *(_QWORD *)&v623[2 * v634];
                    v641 = v619;
                    v642 = v621;
                    do
                    {
                      if (v638 >= 1)
                      {
                        v643 = *(_QWORD *)(v639 + 152);
                        v644 = (unsigned int *)((char *)v38[19] + v641);
                        v645 = v638;
                        do
                        {
                          *(_BYTE *)(v643 + v642) = *v644 != 0;
                          v643 += v637;
                          v644 = (_DWORD *)((char *)v644 + v640);
                          --v645;
                        }
                        while (v645);
                      }
                      v642 += v632;
                      ++v636;
                      v641 += v635;
                    }
                    while (v636 != v633);
                  }
                  v621 += v627;
                  ++v620;
                  v619 += result;
                }
                while (v620 != v618);
              }
              break;
            case 4:
              v646 = (v41 << 30) - 0x400000000;
              v1564 = *(_DWORD *)(v40 + (v646 >> 30));
              if (v1564 >= 1)
              {
                v647 = 0;
                v648 = 0;
                v649 = 0;
                v650 = v38[3];
                v651 = v646 >> 29;
                v652 = *(_QWORD *)((char *)v650 + v651);
                v653 = v3[3];
                v1547 = *(_QWORD *)(v653 + v651);
                v654 = (v41 << 30) - 0x300000000;
                v655 = (v41 << 30) - 0x200000000;
                v656 = (v41 << 30) - 0x100000000;
                v657 = *(_QWORD *)(v653 + (v654 >> 29));
                v658 = *(_DWORD *)(v40 + (v654 >> 30));
                v1514 = v655 >> 32;
                result = v656 >> 32;
                v1530 = 4 * v652;
                v659 = 4 * *(_QWORD *)((char *)v650 + (v654 >> 29));
                do
                {
                  if (v658 >= 1)
                  {
                    v660 = 0;
                    v661 = *(_QWORD *)(v653 + 8 * v1514);
                    v662 = *(_DWORD *)(v40 + 4 * v1514);
                    v663 = 4 * *(_QWORD *)&v650[2 * v1514];
                    v664 = v647;
                    v665 = v649;
                    do
                    {
                      if (v662 >= 1)
                      {
                        v666 = 0;
                        v667 = *(_QWORD *)(v653 + 8 * result);
                        v668 = *(_DWORD *)(v40 + 4 * result);
                        v669 = *a2;
                        v670 = 4 * *(_QWORD *)&v650[2 * result];
                        v671 = v664;
                        v672 = v665;
                        do
                        {
                          if (v668 >= 1)
                          {
                            v673 = *(_QWORD *)(v669 + 152);
                            v674 = (unsigned int *)((char *)v38[19] + v671);
                            v675 = v668;
                            do
                            {
                              *(_BYTE *)(v673 + v672) = *v674 != 0;
                              v673 += v667;
                              v674 = (_DWORD *)((char *)v674 + v670);
                              --v675;
                            }
                            while (v675);
                          }
                          v672 += v661;
                          ++v666;
                          v671 += v663;
                        }
                        while (v666 != v662);
                      }
                      v665 += v657;
                      ++v660;
                      v664 += v659;
                    }
                    while (v660 != v658);
                  }
                  v649 += v1547;
                  ++v648;
                  v647 += v1530;
                }
                while (v648 != v1564);
              }
              break;
            case 5:
              v676 = (v41 << 30) - 0x500000000;
              v1474 = *(_DWORD *)(v40 + (v676 >> 30));
              if (v1474 >= 1)
              {
                v1494 = 0;
                v1504 = 0;
                v1484 = 0;
                v677 = v38[3];
                v678 = v676 >> 29;
                v679 = v3[3];
                v1464 = *(_QWORD *)(v679 + v678);
                v680 = (v41 << 30) - 0x400000000;
                v1548 = *(_QWORD *)(v679 + (v680 >> 29));
                v1565 = *(_DWORD *)(v40 + (v680 >> 30));
                v1445 = (uint64_t)((v41 << 30) - 0x300000000) >> 32;
                v1515 = (uint64_t)((v41 << 30) - 0x200000000) >> 32;
                v681 = (uint64_t)((v41 << 30) - 0x100000000) >> 32;
                v1454 = 4 * *(_QWORD *)((char *)v677 + v678);
                v1531 = 4 * *(_QWORD *)((char *)v677 + (v680 >> 29));
                do
                {
                  if (v1565 >= 1)
                  {
                    v682 = 0;
                    v683 = *(_QWORD *)(v679 + 8 * v1445);
                    v684 = *(_DWORD *)(v40 + 4 * v1445);
                    v685 = 4 * *(_QWORD *)&v677[2 * v1445];
                    v686 = v1494;
                    v687 = v1504;
                    do
                    {
                      if (v684 >= 1)
                      {
                        v688 = 0;
                        v689 = *(_QWORD *)(v679 + 8 * v1515);
                        v690 = *(_DWORD *)(v40 + 4 * v1515);
                        v691 = 4 * *(_QWORD *)&v677[2 * v1515];
                        v692 = v687;
                        v693 = v686;
                        do
                        {
                          if (v690 >= 1)
                          {
                            v694 = 0;
                            v695 = *(_QWORD *)(v679 + 8 * v681);
                            v696 = *(_DWORD *)(v40 + 4 * v681);
                            v697 = *a2;
                            v698 = 4 * *(_QWORD *)&v677[2 * v681];
                            v699 = v692;
                            v700 = v693;
                            do
                            {
                              if (v696 >= 1)
                              {
                                v701 = *(_QWORD *)(v697 + 152);
                                v702 = (unsigned int *)((char *)v38[19] + v699);
                                v703 = v696;
                                do
                                {
                                  result = *v702 != 0;
                                  *(_BYTE *)(v701 + v700) = result;
                                  v701 += v695;
                                  v702 = (_DWORD *)((char *)v702 + v698);
                                  --v703;
                                }
                                while (v703);
                              }
                              v700 += v689;
                              ++v694;
                              v699 += v691;
                            }
                            while (v694 != v690);
                          }
                          v693 += v683;
                          ++v688;
                          v692 += v685;
                        }
                        while (v688 != v684);
                      }
                      v686 += v1548;
                      ++v682;
                      v687 += v1531;
                    }
                    while (v682 != v1565);
                  }
                  v1494 += v1464;
                  v1504 += v1454;
                  ++v1484;
                }
                while (v1484 != v1474);
              }
              break;
            default:
              LODWORD(v563) = 1;
              v564 = -20;
              do
              {
                v563 = *(int *)(v39 + v564) * (uint64_t)(int)v563;
                v564 += 4;
              }
              while (v564);
              v1434 = v38[6];
              if (v1434)
              {
                v565 = 0;
                v1414 = *v3;
                v566 = (v41 << 30) - 0x500000000;
                v1424 = (v41 >> 2) - 1;
                v567 = v38[3];
                v568 = v3[3];
                v1463 = *(_QWORD *)(v568 + (v566 >> 29));
                v1473 = *(_DWORD *)(v40 + (v566 >> 30));
                v1419 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1410 = (uint64_t)((v41 << 30) - 0x400000000) >> 32;
                v1513 = (uint64_t)((v41 << 30) - 0x200000000) >> 32;
                v569 = (uint64_t)((v41 << 30) - 0x100000000) >> 32;
                v1444 = (uint64_t)((v41 << 30) - 0x300000000) >> 32;
                v1453 = 4 * *(_QWORD *)((char *)v567 + (v566 >> 29));
                v1429 = v563;
                do
                {
                  v570 = v1424;
                  if ((v1424 & 0x80000000) != 0)
                  {
                    v571 = 0;
                  }
                  else
                  {
                    v571 = 0;
                    LODWORD(result) = v565;
                    do
                    {
                      v572 = ldiv((int)result, *(int *)(v40 + 4 * v570));
                      result = v572.quot;
                      v571 += *(_QWORD *)&v567[2 * v570--] * v572.rem;
                    }
                    while (v570 != -1);
                  }
                  v573 = v1419;
                  v1439 = v565;
                  v574 = 0;
                  if ((v1419 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v565;
                    do
                    {
                      v575 = ldiv((int)result, *(int *)(v1414 + 4 * v573));
                      result = v575.quot;
                      v574 += *(_QWORD *)(v568 + 8 * v573--) * v575.rem;
                    }
                    while (v573 != -1);
                  }
                  if (v1473 >= 1)
                  {
                    v576 = 0;
                    v1546 = *(_QWORD *)(v568 + 8 * v1410);
                    v1563 = *(_DWORD *)(v40 + 4 * v1410);
                    v1503 = 4 * v571;
                    v1529 = 4 * *(_QWORD *)&v567[2 * v1410];
                    do
                    {
                      v1483 = v576;
                      v1493 = v574;
                      if (v1563 >= 1)
                      {
                        v577 = 0;
                        v578 = *(_QWORD *)(v568 + 8 * v1444);
                        v579 = *(_DWORD *)(v40 + 4 * v1444);
                        v580 = 4 * *(_QWORD *)&v567[2 * v1444];
                        v582 = v574;
                        v581 = v1503;
                        do
                        {
                          if (v579 >= 1)
                          {
                            v583 = 0;
                            v584 = *(_QWORD *)(v568 + 8 * v1513);
                            v585 = *(_DWORD *)(v40 + 4 * v1513);
                            v586 = 4 * *(_QWORD *)&v567[2 * v1513];
                            v587 = v581;
                            result = v582;
                            do
                            {
                              if (v585 >= 1)
                              {
                                v588 = 0;
                                v589 = *(_QWORD *)(v568 + 8 * v569);
                                v590 = *(_DWORD *)(v40 + 4 * v569);
                                v591 = *a2;
                                v592 = 4 * *(_QWORD *)&v567[2 * v569];
                                v593 = v587;
                                v594 = result;
                                do
                                {
                                  if (v590 >= 1)
                                  {
                                    v595 = *(_QWORD *)(v591 + 152);
                                    v596 = (unsigned int *)((char *)v38[19] + v593);
                                    v597 = v590;
                                    do
                                    {
                                      *(_BYTE *)(v595 + v594) = *v596 != 0;
                                      v595 += v589;
                                      v596 = (_DWORD *)((char *)v596 + v592);
                                      --v597;
                                    }
                                    while (v597);
                                  }
                                  v594 += v584;
                                  ++v588;
                                  v593 += v586;
                                }
                                while (v588 != v585);
                              }
                              result += v578;
                              ++v583;
                              v587 += v580;
                            }
                            while (v583 != v579);
                          }
                          v582 += v1546;
                          ++v577;
                          v581 += v1529;
                        }
                        while (v577 != v1563);
                      }
                      v574 = v1493 + v1463;
                      v576 = v1483 + 1;
                      v1503 += v1453;
                    }
                    while (v1483 + 1 != v1473);
                  }
                  v565 += v1429;
                }
                while ((unint64_t)v1434 > v1439 + v1429);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v7 = 0;
            v8 = **(_DWORD **)(*(_QWORD *)result + 152);
            v9 = v3[19];
            do
              *(_BYTE *)(v9 + v7++) = v8;
            while (*(_QWORD *)(*a2 + 48) > v7);
          }
          break;
        case 1:
          v50 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v50)
          {
            v51 = *(int **)(*(_QWORD *)result + 152);
            v52 = (_BYTE *)v3[19];
            v53 = 4 * v50;
            do
            {
              v54 = *v51++;
              *v52++ = v54;
              v53 -= 4;
            }
            while (v53);
          }
          break;
        case 2:
          v55 = *(int ***)result;
          v56 = **(int ***)result;
          switch(v55[1] - *v55)
          {
            case 1:
              if (*v56 >= 1)
              {
                v57 = 0;
                v58 = 0;
                v59 = v55[19];
                v60 = v3[19];
                do
                {
                  *(_BYTE *)(v60 + v57) = v59[v58];
                  v58 += *(_QWORD *)v55[3];
                  ++v57;
                }
                while (**v55 > (int)v57);
              }
              break;
            case 2:
              v256 = *v56;
              if (*v56 >= 1)
              {
                v257 = 0;
                v258 = 0;
                v259 = 0;
                v260 = v55[19];
                v261 = v3[19];
                do
                {
                  v262 = v56[1];
                  if (v262 < 1)
                  {
                    v263 = v55[3];
                    v264 = *((_QWORD *)v263 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v261 + v258 + result) = v260[v259];
                      v263 = v55[3];
                      v264 = *((_QWORD *)v263 + 1);
                      v259 += v264;
                      v56 = *v55;
                      v262 = (*v55)[1];
                      ++result;
                    }
                    while ((int)result < v262);
                    v256 = *v56;
                    v258 += result;
                  }
                  v259 = *(_QWORD *)v263 + v259 - v264 * v262;
                  ++v257;
                }
                while (v257 < v256);
              }
              break;
            case 3:
              v265 = *v56;
              if (*v56 >= 1)
              {
                v266 = 0;
                v267 = 0;
                v268 = 0;
                v269 = v55[19];
                v270 = v3[19];
                do
                {
                  v271 = v56[1];
                  if (v271 < 1)
                  {
                    v275 = v55[3];
                    v276 = *((_QWORD *)v275 + 1);
                  }
                  else
                  {
                    for (i = 0; i < v271; ++i)
                    {
                      v273 = v56[2];
                      if (v273 < 1)
                      {
                        v275 = v55[3];
                        result = *((_QWORD *)v275 + 2);
                      }
                      else
                      {
                        v274 = 0;
                        do
                        {
                          *(_BYTE *)(v270 + v267 + v274) = v269[v268];
                          v275 = v55[3];
                          result = *((_QWORD *)v275 + 2);
                          v268 += result;
                          v56 = *v55;
                          v273 = (*v55)[2];
                          ++v274;
                        }
                        while ((int)v274 < v273);
                        v267 += v274;
                      }
                      v276 = *((_QWORD *)v275 + 1);
                      v268 = v276 + v268 - result * v273;
                      v271 = v56[1];
                    }
                    v265 = *v56;
                  }
                  v268 = *(_QWORD *)v275 + v268 - v276 * v271;
                  ++v266;
                }
                while (v266 < v265);
              }
              break;
            case 4:
              v277 = *v56;
              if (*v56 >= 1)
              {
                v278 = 0;
                v279 = 0;
                v280 = 0;
                v281 = v55[19];
                v282 = v3[19];
                do
                {
                  v283 = v56[1];
                  if (v283 < 1)
                  {
                    v289 = v55[3];
                    v291 = *((_QWORD *)v289 + 1);
                  }
                  else
                  {
                    for (j = 0; j < v283; ++j)
                    {
                      v285 = v56[2];
                      if (v285 < 1)
                      {
                        v289 = v55[3];
                        v290 = *((_QWORD *)v289 + 2);
                      }
                      else
                      {
                        for (k = 0; k < v285; ++k)
                        {
                          v287 = v56[3];
                          if (v287 < 1)
                          {
                            v289 = v55[3];
                            result = *((_QWORD *)v289 + 3);
                          }
                          else
                          {
                            v288 = 0;
                            do
                            {
                              *(_BYTE *)(v282 + v279 + v288) = v281[v280];
                              v289 = v55[3];
                              result = *((_QWORD *)v289 + 3);
                              v280 += result;
                              v56 = *v55;
                              v287 = (*v55)[3];
                              ++v288;
                            }
                            while ((int)v288 < v287);
                            v279 += v288;
                          }
                          v290 = *((_QWORD *)v289 + 2);
                          v280 = v290 + v280 - result * v287;
                          v285 = v56[2];
                        }
                      }
                      v291 = *((_QWORD *)v289 + 1);
                      v280 = v291 + v280 - v290 * v285;
                      v283 = v56[1];
                    }
                    v277 = *v56;
                  }
                  v280 = *(_QWORD *)v289 + v280 - v291 * v283;
                  ++v278;
                }
                while (v278 < v277);
              }
              break;
            default:
              if (v3[6])
              {
                v247 = 0;
                v248 = v55[19];
                v249 = v3[19];
                do
                {
                  v250 = *v55;
                  v251 = (unint64_t)((char *)v55[1] - (char *)*v55) >> 2;
                  v252 = 0;
                  v253 = (v251 - 1);
                  if ((int)v251 - 1 >= 0)
                  {
                    v254 = v55[3];
                    LODWORD(result) = v247;
                    do
                    {
                      v255 = ldiv((int)result, v250[v253]);
                      result = v255.quot;
                      v252 += *(_QWORD *)&v254[2 * v253--] * v255.rem;
                    }
                    while (v253 != -1);
                  }
                  *(_BYTE *)(v249 + v247++) = v248[v252];
                }
                while (v247 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v61 = *(int ***)result;
          v62 = (uint64_t *)(*(_QWORD *)result + 24);
          v63 = v3 + 3;
          v64 = **(_QWORD **)result;
          v65 = *(_QWORD *)(*(_QWORD *)result + 8);
          v66 = v65 - v64;
          switch((v65 - v64) >> 2)
          {
            case 1:
              v67 = (v66 << 30) - 0x100000000;
              v68 = *(_DWORD *)(v64 + (v67 >> 30));
              if (v68 >= 1)
              {
                v69 = v67 >> 29;
                v70 = *(_QWORD *)(*v62 + v69);
                v71 = *(_QWORD *)(*v63 + v69);
                v72 = (_BYTE *)v3[19];
                v73 = v61[19];
                v74 = 4 * v70;
                do
                {
                  *v72 = *v73;
                  v72 += v71;
                  v73 = (int *)((char *)v73 + v74);
                  --v68;
                }
                while (v68);
              }
              break;
            case 2:
              v725 = (v66 << 30) - 0x200000000;
              v726 = *(_DWORD *)(v64 + (v725 >> 30));
              if (v726 >= 1)
              {
                v727 = 0;
                v728 = 0;
                v729 = 0;
                v730 = v725 >> 29;
                v731 = *(_QWORD *)(*v62 + v730);
                v732 = *(_QWORD *)(*v63 + v730);
                v733 = 4 * v731;
                do
                {
                  result = *(_QWORD *)v5;
                  v734 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v735 = *(int *)((char *)*v61 + (v734 >> 30));
                  if (v735 >= 1)
                  {
                    v736 = v734 >> 29;
                    v737 = *(_QWORD *)((char *)v61[3] + v736);
                    v738 = *(_QWORD *)(*v63 + v736);
                    v739 = *(_QWORD *)(*a2 + 152);
                    result = *(_QWORD *)(result + 152) + v727;
                    v740 = 4 * v737;
                    do
                    {
                      *(_BYTE *)(v739 + v729) = *(_DWORD *)result;
                      v739 += v738;
                      result += v740;
                      --v735;
                    }
                    while (v735);
                  }
                  v729 += v732;
                  ++v728;
                  v727 += v733;
                }
                while (v728 != v726);
              }
              break;
            case 3:
              v741 = (v66 << 30) - 0x300000000;
              v742 = *(_DWORD *)(v64 + (v741 >> 30));
              if (v742 >= 1)
              {
                v743 = 0;
                v744 = 0;
                v745 = 0;
                v746 = v741 >> 29;
                v747 = *(_QWORD *)(*v62 + v746);
                v748 = *(_QWORD *)(*v63 + v746);
                v749 = 4 * v747;
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v750 = *(int *)((char *)*v61 + (result >> 30));
                  if (v750 >= 1)
                  {
                    v751 = 0;
                    v752 = result >> 29;
                    v753 = *(_QWORD *)((char *)v61[3] + v752);
                    result = *(_QWORD *)(*v63 + v752);
                    v754 = 4 * v753;
                    v755 = v743;
                    v756 = v745;
                    do
                    {
                      v757 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v758 = *(int *)((char *)*v61 + (v757 >> 30));
                      if (v758 >= 1)
                      {
                        v759 = v757 >> 29;
                        v760 = *(_QWORD *)((char *)v61[3] + v759);
                        v761 = *(_QWORD *)(*v63 + v759);
                        v762 = *(_QWORD *)(*a2 + 152);
                        v763 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + v755);
                        v764 = 4 * v760;
                        do
                        {
                          *(_BYTE *)(v762 + v756) = *v763;
                          v762 += v761;
                          v763 = (_DWORD *)((char *)v763 + v764);
                          --v758;
                        }
                        while (v758);
                      }
                      v756 += result;
                      ++v751;
                      v755 += v754;
                    }
                    while (v751 != v750);
                  }
                  v745 += v748;
                  ++v744;
                  v743 += v749;
                }
                while (v744 != v742);
              }
              break;
            case 4:
              goto LABEL_557;
            case 5:
              v765 = (v66 << 30) - 0x500000000;
              v766 = *(_DWORD *)(v64 + (v765 >> 30));
              if (v766 >= 1)
              {
                v767 = 0;
                v768 = 0;
                v769 = v765 >> 29;
                v770 = *(_QWORD *)(*v62 + v769);
                v771 = *(_QWORD *)(*v63 + v769);
                do
                {
                  v767 += v770;
                  v768 += v771;
                  --v766;
                }
                while (v766);
              }
              break;
            default:
              LODWORD(v704) = 1;
              v705 = -20;
              do
              {
                v704 = *(int *)(v65 + v705) * (uint64_t)(int)v704;
                v705 += 4;
              }
              while (v705);
              if (v61[6])
              {
                result = 0;
                v706 = *(_QWORD **)v5;
                v1549 = v63;
                v1516 = v704;
                do
                {
                  v707 = *v61;
                  v708 = (unint64_t)((char *)v61[1] - (char *)*v61) >> 2;
                  v709 = (v708 - 1);
                  v1566 = result;
                  v1532 = v706;
                  v710 = 0;
                  if ((int)v708 - 1 >= 0)
                  {
                    v711 = *v62;
                    do
                    {
                      v712 = ldiv((int)result, v707[v709]);
                      LODWORD(result) = v712.quot;
                      v710 += *(_QWORD *)(v711 + 8 * v709--) * v712.rem;
                    }
                    while (v709 != -1);
                  }
                  v713 = *(_QWORD *)*a2;
                  v714 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v713) >> 2;
                  v715 = *v1549;
                  v716 = 0;
                  v717 = (v714 - 1);
                  if ((int)v714 - 1 >= 0)
                  {
                    quot = v1566;
                    do
                    {
                      v719 = ldiv(quot, *(int *)(v713 + 4 * v717));
                      quot = v719.quot;
                      v716 += *(_QWORD *)(v715 + 8 * v717--) * v719.rem;
                    }
                    while (v717 != -1);
                  }
                  v706 = v1532;
                  v720 = ((v706[1] - *v706) << 30) - 0x500000000;
                  v721 = *(int *)((char *)v707 + (v720 >> 30));
                  if (v721 >= 1)
                  {
                    v722 = v720 >> 29;
                    v723 = *(_QWORD *)(*v62 + v722);
                    v724 = *(_QWORD *)(v715 + v722);
                    do
                    {
                      v710 += v723;
                      v716 += v724;
                      --v721;
                    }
                    while (v721);
                    v706 = *(_QWORD **)v5;
                  }
                  result = v1566 + v1516;
                }
                while (v706[6] > (unint64_t)(v1566 + v1516));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v10 = v3[6];
          if (v10)
          {
            v11 = **(_DWORD **)(*(_QWORD *)result + 152);
            v12 = (_DWORD *)v3[19];
            do
            {
              *v12++ = v11;
              --v10;
            }
            while (v10);
          }
          break;
        case 1:
          goto LABEL_35;
        case 2:
          v75 = *(int ***)result;
          v76 = **(int ***)result;
          v77 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v76;
          switch(v77 >> 2)
          {
            case 1:
              if (*v76 >= 1)
              {
                v78 = 0;
                v79 = v75[19];
                v80 = v3[19];
                v81 = 4 * *(_QWORD *)v75[3];
                do
                {
                  *(_DWORD *)(v80 + 4 * v78) = *v79;
                  v79 = (int *)((char *)v79 + v81);
                  ++v78;
                }
                while (*v76 > (int)v78);
              }
              break;
            case 2:
              v301 = *v76;
              if (*v76 >= 1)
              {
                v302 = 0;
                v303 = 0;
                v304 = 0;
                v305 = v75[19];
                v306 = v3[19];
                v307 = v75[3];
                v308 = *(_QWORD *)v307;
                v309 = *((_QWORD *)v307 + 1);
                v310 = v76[1];
                do
                {
                  if (v310 >= 1)
                  {
                    v311 = 0;
                    do
                    {
                      *(_DWORD *)(v306 + 4 * v303 + 4 * v311) = v305[v304];
                      v304 += v309;
                      v310 = v76[1];
                      ++v311;
                    }
                    while ((int)v311 < v310);
                    v301 = *v76;
                    v303 += v311;
                  }
                  v304 = v304 + v308 - v309 * v310;
                  ++v302;
                }
                while (v302 < v301);
              }
              break;
            case 3:
              result = *v76;
              if ((int)result >= 1)
              {
                v312 = 0;
                v313 = 0;
                v314 = 0;
                v315 = v75[19];
                v316 = v3[19];
                v317 = v75[3];
                v318 = *(_QWORD *)v317;
                v319 = *((_QWORD *)v317 + 1);
                v320 = v76[1];
                do
                {
                  if (v320 >= 1)
                  {
                    v321 = 0;
                    v322 = v75[3];
                    v323 = *((_QWORD *)v317 + 2);
                    v324 = v76[2];
                    do
                    {
                      if (v324 >= 1)
                      {
                        v325 = 0;
                        v326 = *((_QWORD *)v322 + 2);
                        do
                        {
                          *(_DWORD *)(v316 + 4 * v313 + 4 * v325) = v315[v314];
                          v314 += v326;
                          v324 = v76[2];
                          ++v325;
                        }
                        while ((int)v325 < v324);
                        v320 = v76[1];
                        v313 += v325;
                      }
                      v314 = v314 + v319 - v323 * v324;
                      ++v321;
                    }
                    while (v321 < v320);
                    result = *v76;
                  }
                  v314 = v314 + v318 - v319 * v320;
                  ++v312;
                }
                while (v312 < (int)result);
              }
              break;
            case 4:
              v327 = *v76;
              if (*v76 >= 1)
              {
                v328 = 0;
                v329 = 0;
                v330 = 0;
                v331 = v75[19];
                v332 = v3[19];
                v333 = v75[3];
                v334 = *(_QWORD *)v333;
                v335 = *((_QWORD *)v333 + 1);
                v336 = v76[1];
                do
                {
                  if (v336 >= 1)
                  {
                    v337 = 0;
                    v338 = v75[3];
                    v339 = *((_QWORD *)v333 + 2);
                    v340 = v76[2];
                    do
                    {
                      if (v340 >= 1)
                      {
                        v341 = 0;
                        v342 = v75[3];
                        v343 = *((_QWORD *)v338 + 2);
                        v344 = *((_QWORD *)v338 + 3);
                        v345 = v76[3];
                        do
                        {
                          if (v345 >= 1)
                          {
                            v346 = 0;
                            v347 = *((_QWORD *)v342 + 3);
                            do
                            {
                              *(_DWORD *)(v332 + 4 * v329 + 4 * v346) = v331[v330];
                              v330 += v347;
                              v345 = v76[3];
                              ++v346;
                            }
                            while ((int)v346 < v345);
                            v340 = v76[2];
                            v329 += v346;
                          }
                          v330 = v330 + v343 - v344 * v345;
                          ++v341;
                        }
                        while (v341 < v340);
                        v336 = v76[1];
                      }
                      v330 = v330 + v335 - v339 * v340;
                      ++v337;
                    }
                    while (v337 < v336);
                    v327 = *v76;
                  }
                  result = v336;
                  v330 = v330 + v334 - v335 * v336;
                  ++v328;
                }
                while (v328 < v327);
              }
              break;
            default:
              v292 = v3[6];
              if (v292)
              {
                v293 = 0;
                v294 = v75[19];
                v295 = v3[19];
                v296 = ((unint64_t)v77 >> 2) - 1;
                v297 = v75[3];
                do
                {
                  v298 = 0;
                  if ((v296 & 0x80000000) == 0)
                  {
                    v299 = v296;
                    LODWORD(result) = v293;
                    do
                    {
                      v300 = ldiv((int)result, v76[v299]);
                      result = v300.quot;
                      v298 += *(_QWORD *)&v297[2 * v299--] * v300.rem;
                    }
                    while (v299 != -1);
                  }
                  *(_DWORD *)(v295 + 4 * v293++) = v294[v298];
                }
                while (v293 != v292);
              }
              break;
          }
          break;
        case 3:
          v82 = *(unsigned int ***)result;
          v84 = **(_QWORD **)result;
          v83 = *(_QWORD *)(*(_QWORD *)result + 8);
          v85 = v83 - v84;
          switch((v83 - v84) >> 2)
          {
            case 1:
              v86 = (v85 << 30) - 0x100000000;
              v87 = *(_DWORD *)(v84 + (v86 >> 30));
              if (v87 >= 1)
              {
                v88 = v86 >> 29;
                v89 = *(_QWORD *)((char *)v82[3] + v88);
                v90 = *(_QWORD *)(v3[3] + v88);
                v91 = (unsigned int *)v3[19];
                v92 = v82[19];
                v93 = 4 * v90;
                v94 = 4 * v89;
                do
                {
                  *v91 = *v92;
                  v91 = (unsigned int *)((char *)v91 + v93);
                  v92 = (unsigned int *)((char *)v92 + v94);
                  --v87;
                }
                while (v87);
              }
              break;
            case 2:
              v808 = (v85 << 30) - 0x200000000;
              v809 = *(_DWORD *)(v84 + (v808 >> 30));
              if (v809 >= 1)
              {
                v810 = 0;
                v811 = 0;
                v812 = 0;
                v813 = v82[3];
                v814 = v808 >> 29;
                v815 = *(_QWORD *)((char *)v813 + v814);
                v816 = v3[3];
                v817 = (v85 << 30) - 0x100000000;
                v818 = *(_QWORD *)((char *)v813 + (v817 >> 29));
                v819 = *(_QWORD *)(v816 + (v817 >> 29));
                v820 = v817 >> 32;
                v821 = 4 * *(_QWORD *)(v816 + v814);
                v822 = 4 * v819;
                v823 = 4 * v815;
                v824 = 4 * v818;
                do
                {
                  result = *(unsigned int *)(v84 + 4 * v820);
                  if ((int)result >= 1)
                  {
                    v825 = (_DWORD *)(v3[19] + v811);
                    v826 = (unsigned int *)((char *)v82[19] + v810);
                    do
                    {
                      *v825 = *v826;
                      v825 = (_DWORD *)((char *)v825 + v822);
                      v826 = (_DWORD *)((char *)v826 + v824);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  ++v812;
                  v811 += v821;
                  v810 += v823;
                }
                while (v812 != v809);
              }
              break;
            case 3:
              v827 = (v85 << 30) - 0x300000000;
              v828 = *(_DWORD *)(v84 + (v827 >> 30));
              if (v828 >= 1)
              {
                v829 = 0;
                v830 = 0;
                v831 = 0;
                v832 = v85 << 30;
                v833 = v82[3];
                v834 = v827 >> 29;
                v835 = *(_QWORD *)((char *)v833 + v834);
                v836 = v3[3];
                v837 = *(_QWORD *)(v836 + v834);
                v838 = (v832 - 0x200000000) >> 29;
                v839 = *(_QWORD *)((char *)v833 + v838);
                v840 = (v832 - 0x200000000) >> 32;
                v841 = (v832 - 0x100000000) >> 32;
                v842 = 4 * v837;
                v843 = 4 * *(_QWORD *)(v836 + v838);
                result = 4 * v835;
                v844 = 4 * v839;
                do
                {
                  v845 = *(_DWORD *)(v84 + 4 * v840);
                  if (v845 >= 1)
                  {
                    v846 = 0;
                    v847 = (_QWORD *)*a2;
                    v848 = 4 * *(_QWORD *)(v836 + 8 * v841);
                    v849 = 4 * *(_QWORD *)&v833[2 * v841];
                    v850 = v829;
                    v851 = v830;
                    do
                    {
                      v852 = *(_DWORD *)(v84 + 4 * v841);
                      if (v852 >= 1)
                      {
                        v853 = (_DWORD *)(v847[19] + v851);
                        v854 = (unsigned int *)((char *)v82[19] + v850);
                        do
                        {
                          *v853 = *v854;
                          v853 = (_DWORD *)((char *)v853 + v848);
                          v854 = (_DWORD *)((char *)v854 + v849);
                          --v852;
                        }
                        while (v852);
                      }
                      ++v846;
                      v851 += v843;
                      v850 += v844;
                    }
                    while (v846 != v845);
                  }
                  ++v831;
                  v830 += v842;
                  v829 += result;
                }
                while (v831 != v828);
              }
              break;
            case 4:
              v855 = (v85 << 30) - 0x400000000;
              v1568 = *(_DWORD *)(v84 + (v855 >> 30));
              if (v1568 >= 1)
              {
                v856 = 0;
                v857 = 0;
                v858 = 0;
                v859 = v85 << 30;
                v860 = v82[3];
                v861 = v855 >> 29;
                v862 = v3[3];
                v1551 = (v859 - 0x300000000) >> 32;
                v863 = (v859 - 0x300000000) >> 29;
                v864 = *(_QWORD *)((char *)v860 + v863);
                v865 = *(_QWORD *)(v862 + v863);
                v866 = (v859 - 0x200000000) >> 32;
                v867 = (v859 - 0x100000000) >> 32;
                v1534 = 4 * *(_QWORD *)(v862 + v861);
                result = 4 * v865;
                v1518 = 4 * *(_QWORD *)((char *)v860 + v861);
                v868 = 4 * v864;
                do
                {
                  v869 = *(_DWORD *)(v84 + 4 * v1551);
                  if (v869 >= 1)
                  {
                    v870 = 0;
                    v871 = 4 * *(_QWORD *)(v862 + 8 * v866);
                    v872 = 4 * *(_QWORD *)&v860[2 * v866];
                    v873 = v856;
                    v874 = v857;
                    do
                    {
                      v875 = *(_DWORD *)(v84 + 4 * v866);
                      if (v875 >= 1)
                      {
                        v876 = 0;
                        v877 = (_QWORD *)*a2;
                        v878 = 4 * *(_QWORD *)(v862 + 8 * v867);
                        v879 = 4 * *(_QWORD *)&v860[2 * v867];
                        v880 = v873;
                        v881 = v874;
                        do
                        {
                          v882 = *(_DWORD *)(v84 + 4 * v867);
                          if (v882 >= 1)
                          {
                            v883 = (_DWORD *)(v877[19] + v881);
                            v884 = (unsigned int *)((char *)v82[19] + v880);
                            do
                            {
                              *v883 = *v884;
                              v883 = (_DWORD *)((char *)v883 + v878);
                              v884 = (_DWORD *)((char *)v884 + v879);
                              --v882;
                            }
                            while (v882);
                          }
                          ++v876;
                          v881 += v871;
                          v880 += v872;
                        }
                        while (v876 != v875);
                      }
                      ++v870;
                      v874 += result;
                      v873 += v868;
                    }
                    while (v870 != v869);
                  }
                  ++v858;
                  v857 += v1534;
                  v856 += v1518;
                }
                while (v858 != v1568);
              }
              break;
            case 5:
              v885 = (v85 << 30) - 0x500000000;
              v1476 = *(_DWORD *)(v84 + (v885 >> 30));
              if (v1476 >= 1)
              {
                v1496 = 0;
                v1506 = 0;
                v1486 = 0;
                v886 = v85 << 30;
                v887 = v82[3];
                v888 = v885 >> 29;
                v889 = v3[3];
                v1466 = (v886 - 0x400000000) >> 32;
                v890 = (v886 - 0x400000000) >> 29;
                result = *(_QWORD *)((char *)v887 + v890);
                v1552 = (v886 - 0x300000000) >> 32;
                v891 = (v886 - 0x200000000) >> 32;
                v892 = (v886 - 0x100000000) >> 32;
                v1456 = 4 * *(_QWORD *)(v889 + v888);
                v1535 = 4 * *(_QWORD *)(v889 + v890);
                v1447 = 4 * *(_QWORD *)((char *)v887 + v888);
                v1519 = 4 * result;
                do
                {
                  v1569 = *(_DWORD *)(v84 + 4 * v1466);
                  if (v1569 >= 1)
                  {
                    v893 = 0;
                    v894 = 4 * *(_QWORD *)(v889 + 8 * v1552);
                    v895 = 4 * *(_QWORD *)&v887[2 * v1552];
                    v897 = v1496;
                    v896 = v1506;
                    do
                    {
                      v898 = *(_DWORD *)(v84 + 4 * v1552);
                      if (v898 >= 1)
                      {
                        v899 = 0;
                        v900 = 4 * *(_QWORD *)(v889 + 8 * v891);
                        v901 = 4 * *(_QWORD *)&v887[2 * v891];
                        v902 = v896;
                        v903 = v897;
                        do
                        {
                          v904 = *(_DWORD *)(v84 + 4 * v891);
                          if (v904 >= 1)
                          {
                            v905 = 0;
                            result = *a2;
                            v906 = 4 * *(_QWORD *)(v889 + 8 * v892);
                            v907 = 4 * *(_QWORD *)&v887[2 * v892];
                            v908 = v902;
                            v909 = v903;
                            do
                            {
                              v910 = *(_DWORD *)(v84 + 4 * v892);
                              if (v910 >= 1)
                              {
                                v911 = (_DWORD *)(*(_QWORD *)(result + 152) + v909);
                                v912 = (unsigned int *)((char *)v82[19] + v908);
                                do
                                {
                                  *v911 = *v912;
                                  v911 = (_DWORD *)((char *)v911 + v906);
                                  v912 = (_DWORD *)((char *)v912 + v907);
                                  --v910;
                                }
                                while (v910);
                              }
                              ++v905;
                              v909 += v900;
                              v908 += v901;
                            }
                            while (v905 != v904);
                          }
                          ++v899;
                          v903 += v894;
                          v902 += v895;
                        }
                        while (v899 != v898);
                      }
                      ++v893;
                      v897 += v1535;
                      v896 += v1519;
                    }
                    while (v893 != v1569);
                  }
                  v1496 += v1456;
                  v1506 += v1447;
                  ++v1486;
                }
                while (v1486 != v1476);
              }
              break;
            default:
              LODWORD(v772) = 1;
              v773 = -20;
              do
              {
                v772 = *(int *)(v83 + v773) * (uint64_t)(int)v772;
                v773 += 4;
              }
              while (v773);
              v1430 = v82[6];
              if (v1430)
              {
                result = 0;
                v1455 = *v3;
                v774 = (v85 << 30) - 0x500000000;
                v1420 = (v85 >> 2) - 1;
                v775 = v82[3];
                v1415 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1411 = v774 >> 32;
                v776 = v3[3];
                v1465 = (uint64_t)((v85 << 30) - 0x400000000) >> 32;
                v1550 = (uint64_t)((v85 << 30) - 0x300000000) >> 32;
                v777 = (uint64_t)((v85 << 30) - 0x200000000) >> 32;
                v778 = (uint64_t)((v85 << 30) - 0x100000000) >> 32;
                v1440 = 4 * *(_QWORD *)((char *)v775 + (v774 >> 29));
                v1446 = 4 * *(_QWORD *)(v776 + (v774 >> 29));
                v1425 = v772;
                do
                {
                  v779 = v1420;
                  v1435 = result;
                  v780 = 0;
                  if ((v1420 & 0x80000000) != 0)
                  {
                    v781 = v1415;
                  }
                  else
                  {
                    v781 = v1415;
                    do
                    {
                      v782 = ldiv((int)result, *(int *)(v84 + 4 * v779));
                      LODWORD(result) = v782.quot;
                      v780 += *(_QWORD *)&v775[2 * v779--] * v782.rem;
                    }
                    while (v779 != -1);
                  }
                  v783 = 0;
                  if ((v781 & 0x80000000) == 0)
                  {
                    v784 = v1435;
                    do
                    {
                      v785 = ldiv(v784, *(int *)(v1455 + 4 * v781));
                      v784 = v785.quot;
                      v783 += *(_QWORD *)(v776 + 8 * v781--) * v785.rem;
                    }
                    while (v781 != -1);
                  }
                  v1475 = *(_DWORD *)(v84 + 4 * v1411);
                  if (v1475 >= 1)
                  {
                    v786 = 0;
                    v1505 = 4 * v783;
                    v1533 = 4 * *(_QWORD *)(v776 + 8 * v1465);
                    v1495 = 4 * v780;
                    v1517 = 4 * *(_QWORD *)&v775[2 * v1465];
                    do
                    {
                      v1485 = v786;
                      v1567 = *(_DWORD *)(v84 + 4 * v1465);
                      if (v1567 >= 1)
                      {
                        v787 = 0;
                        v788 = 4 * *(_QWORD *)(v776 + 8 * v1550);
                        v789 = 4 * *(_QWORD *)&v775[2 * v1550];
                        v791 = v1495;
                        v790 = v1505;
                        do
                        {
                          v792 = *(_DWORD *)(v84 + 4 * v1550);
                          if (v792 >= 1)
                          {
                            v793 = 0;
                            v794 = 4 * *(_QWORD *)(v776 + 8 * v777);
                            v795 = 4 * *(_QWORD *)&v775[2 * v777];
                            v796 = v791;
                            v797 = v790;
                            do
                            {
                              v798 = *(_DWORD *)(v84 + 4 * v777);
                              if (v798 >= 1)
                              {
                                v799 = 0;
                                v800 = (_QWORD *)*a2;
                                v801 = 4 * *(_QWORD *)(v776 + 8 * v778);
                                v802 = 4 * *(_QWORD *)&v775[2 * v778];
                                v803 = v796;
                                v804 = v797;
                                do
                                {
                                  v805 = *(_DWORD *)(v84 + 4 * v778);
                                  if (v805 >= 1)
                                  {
                                    v806 = (_DWORD *)(v800[19] + v804);
                                    v807 = (unsigned int *)((char *)v82[19] + v803);
                                    do
                                    {
                                      *v806 = *v807;
                                      v806 = (_DWORD *)((char *)v806 + v801);
                                      v807 = (_DWORD *)((char *)v807 + v802);
                                      --v805;
                                    }
                                    while (v805);
                                  }
                                  ++v799;
                                  v804 += v794;
                                  v803 += v795;
                                }
                                while (v799 != v798);
                              }
                              ++v793;
                              v797 += v788;
                              v796 += v789;
                            }
                            while (v793 != v792);
                          }
                          ++v787;
                          v790 += v1533;
                          v791 += v1517;
                        }
                        while (v787 != v1567);
                      }
                      v786 = v1485 + 1;
                      v1505 += v1446;
                      v1495 += v1440;
                    }
                    while (v1485 + 1 != v1475);
                  }
                  result = v1435 + v1425;
                }
                while ((unint64_t)v1430 > v1435 + v1425);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v13 = 0;
            v14 = **(_DWORD **)(*(_QWORD *)result + 152);
            v15 = v3[19];
            do
              *(_BYTE *)(v15 + v13++) = v14;
            while (*(_QWORD *)(*a2 + 48) > v13);
          }
          break;
        case 1:
          v95 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v95)
          {
            v96 = *(int **)(*(_QWORD *)result + 152);
            v97 = (_BYTE *)v3[19];
            v98 = 4 * v95;
            do
            {
              v99 = *v96++;
              *v97++ = v99;
              v98 -= 4;
            }
            while (v98);
          }
          break;
        case 2:
          v100 = *(int ***)result;
          v101 = **(int ***)result;
          switch(v100[1] - *v100)
          {
            case 1:
              if (*v101 >= 1)
              {
                v102 = 0;
                v103 = 0;
                v104 = v100[19];
                v105 = v3[19];
                do
                {
                  *(_BYTE *)(v105 + v102) = v104[v103];
                  v103 += *(_QWORD *)v100[3];
                  ++v102;
                }
                while (**v100 > (int)v102);
              }
              break;
            case 2:
              v357 = *v101;
              if (*v101 >= 1)
              {
                v358 = 0;
                v359 = 0;
                v360 = 0;
                v361 = v100[19];
                v362 = v3[19];
                do
                {
                  v363 = v101[1];
                  if (v363 < 1)
                  {
                    v364 = v100[3];
                    v365 = *((_QWORD *)v364 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v362 + v359 + result) = v361[v360];
                      v364 = v100[3];
                      v365 = *((_QWORD *)v364 + 1);
                      v360 += v365;
                      v101 = *v100;
                      v363 = (*v100)[1];
                      ++result;
                    }
                    while ((int)result < v363);
                    v357 = *v101;
                    v359 += result;
                  }
                  v360 = *(_QWORD *)v364 + v360 - v365 * v363;
                  ++v358;
                }
                while (v358 < v357);
              }
              break;
            case 3:
              v366 = *v101;
              if (*v101 >= 1)
              {
                v367 = 0;
                v368 = 0;
                v369 = 0;
                v370 = v100[19];
                v371 = v3[19];
                do
                {
                  v372 = v101[1];
                  if (v372 < 1)
                  {
                    v376 = v100[3];
                    v377 = *((_QWORD *)v376 + 1);
                  }
                  else
                  {
                    for (m = 0; m < v372; ++m)
                    {
                      v374 = v101[2];
                      if (v374 < 1)
                      {
                        v376 = v100[3];
                        result = *((_QWORD *)v376 + 2);
                      }
                      else
                      {
                        v375 = 0;
                        do
                        {
                          *(_BYTE *)(v371 + v368 + v375) = v370[v369];
                          v376 = v100[3];
                          result = *((_QWORD *)v376 + 2);
                          v369 += result;
                          v101 = *v100;
                          v374 = (*v100)[2];
                          ++v375;
                        }
                        while ((int)v375 < v374);
                        v368 += v375;
                      }
                      v377 = *((_QWORD *)v376 + 1);
                      v369 = v377 + v369 - result * v374;
                      v372 = v101[1];
                    }
                    v366 = *v101;
                  }
                  v369 = *(_QWORD *)v376 + v369 - v377 * v372;
                  ++v367;
                }
                while (v367 < v366);
              }
              break;
            case 4:
              v378 = *v101;
              if (*v101 >= 1)
              {
                v379 = 0;
                v380 = 0;
                v381 = 0;
                v382 = v100[19];
                v383 = v3[19];
                do
                {
                  v384 = v101[1];
                  if (v384 < 1)
                  {
                    v390 = v100[3];
                    v392 = *((_QWORD *)v390 + 1);
                  }
                  else
                  {
                    for (n = 0; n < v384; ++n)
                    {
                      v386 = v101[2];
                      if (v386 < 1)
                      {
                        v390 = v100[3];
                        v391 = *((_QWORD *)v390 + 2);
                      }
                      else
                      {
                        for (ii = 0; ii < v386; ++ii)
                        {
                          v388 = v101[3];
                          if (v388 < 1)
                          {
                            v390 = v100[3];
                            result = *((_QWORD *)v390 + 3);
                          }
                          else
                          {
                            v389 = 0;
                            do
                            {
                              *(_BYTE *)(v383 + v380 + v389) = v382[v381];
                              v390 = v100[3];
                              result = *((_QWORD *)v390 + 3);
                              v381 += result;
                              v101 = *v100;
                              v388 = (*v100)[3];
                              ++v389;
                            }
                            while ((int)v389 < v388);
                            v380 += v389;
                          }
                          v391 = *((_QWORD *)v390 + 2);
                          v381 = v391 + v381 - result * v388;
                          v386 = v101[2];
                        }
                      }
                      v392 = *((_QWORD *)v390 + 1);
                      v381 = v392 + v381 - v391 * v386;
                      v384 = v101[1];
                    }
                    v378 = *v101;
                  }
                  v381 = *(_QWORD *)v390 + v381 - v392 * v384;
                  ++v379;
                }
                while (v379 < v378);
              }
              break;
            default:
              if (v3[6])
              {
                v348 = 0;
                v349 = v100[19];
                v350 = v3[19];
                do
                {
                  v351 = *v100;
                  v352 = (unint64_t)((char *)v100[1] - (char *)*v100) >> 2;
                  v353 = 0;
                  v354 = (v352 - 1);
                  if ((int)v352 - 1 >= 0)
                  {
                    v355 = v100[3];
                    LODWORD(result) = v348;
                    do
                    {
                      v356 = ldiv((int)result, v351[v354]);
                      result = v356.quot;
                      v353 += *(_QWORD *)&v355[2 * v354--] * v356.rem;
                    }
                    while (v354 != -1);
                  }
                  *(_BYTE *)(v350 + v348++) = v349[v353];
                }
                while (v348 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v106 = *(int ***)result;
          v107 = (uint64_t *)(*(_QWORD *)result + 24);
          v108 = v3 + 3;
          v109 = **(_QWORD **)result;
          v110 = *(_QWORD *)(*(_QWORD *)result + 8);
          v111 = v110 - v109;
          switch((v110 - v109) >> 2)
          {
            case 1:
              v112 = (v111 << 30) - 0x100000000;
              v113 = *(_DWORD *)(v109 + (v112 >> 30));
              if (v113 >= 1)
              {
                v114 = v112 >> 29;
                v115 = *(_QWORD *)(*v107 + v114);
                v116 = *(_QWORD *)(*v108 + v114);
                v117 = (_BYTE *)v3[19];
                v118 = v106[19];
                v119 = 4 * v115;
                do
                {
                  *v117 = *v118;
                  v117 += v116;
                  v118 = (int *)((char *)v118 + v119);
                  --v113;
                }
                while (v113);
              }
              break;
            case 2:
              v934 = (v111 << 30) - 0x200000000;
              v935 = *(_DWORD *)(v109 + (v934 >> 30));
              if (v935 >= 1)
              {
                v936 = 0;
                v937 = 0;
                v938 = 0;
                v939 = v934 >> 29;
                v940 = *(_QWORD *)(*v107 + v939);
                v941 = *(_QWORD *)(*v108 + v939);
                v942 = 4 * v940;
                do
                {
                  result = *(_QWORD *)v5;
                  v943 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v944 = *(int *)((char *)*v106 + (v943 >> 30));
                  if (v944 >= 1)
                  {
                    v945 = v943 >> 29;
                    v946 = *(_QWORD *)((char *)v106[3] + v945);
                    v947 = *(_QWORD *)(*v108 + v945);
                    v948 = *(_QWORD *)(*a2 + 152);
                    result = *(_QWORD *)(result + 152) + v936;
                    v949 = 4 * v946;
                    do
                    {
                      *(_BYTE *)(v948 + v938) = *(_DWORD *)result;
                      v948 += v947;
                      result += v949;
                      --v944;
                    }
                    while (v944);
                  }
                  v938 += v941;
                  ++v937;
                  v936 += v942;
                }
                while (v937 != v935);
              }
              break;
            case 3:
              v950 = (v111 << 30) - 0x300000000;
              v951 = *(_DWORD *)(v109 + (v950 >> 30));
              if (v951 >= 1)
              {
                v952 = 0;
                v953 = 0;
                v954 = 0;
                v955 = v950 >> 29;
                v956 = *(_QWORD *)(*v107 + v955);
                v957 = *(_QWORD *)(*v108 + v955);
                v958 = 4 * v956;
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v959 = *(int *)((char *)*v106 + (result >> 30));
                  if (v959 >= 1)
                  {
                    v960 = 0;
                    v961 = result >> 29;
                    v962 = *(_QWORD *)((char *)v106[3] + v961);
                    result = *(_QWORD *)(*v108 + v961);
                    v963 = 4 * v962;
                    v964 = v952;
                    v965 = v954;
                    do
                    {
                      v966 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v967 = *(int *)((char *)*v106 + (v966 >> 30));
                      if (v967 >= 1)
                      {
                        v968 = v966 >> 29;
                        v969 = *(_QWORD *)((char *)v106[3] + v968);
                        v970 = *(_QWORD *)(*v108 + v968);
                        v971 = *(_QWORD *)(*a2 + 152);
                        v972 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + v964);
                        v973 = 4 * v969;
                        do
                        {
                          *(_BYTE *)(v971 + v965) = *v972;
                          v971 += v970;
                          v972 = (_DWORD *)((char *)v972 + v973);
                          --v967;
                        }
                        while (v967);
                      }
                      v965 += result;
                      ++v960;
                      v964 += v963;
                    }
                    while (v960 != v959);
                  }
                  v954 += v957;
                  ++v953;
                  v952 += v958;
                }
                while (v953 != v951);
              }
              break;
            case 4:
LABEL_557:
              break;
            case 5:
              v974 = (v111 << 30) - 0x500000000;
              v975 = *(_DWORD *)(v109 + (v974 >> 30));
              if (v975 >= 1)
              {
                v976 = 0;
                v977 = 0;
                v978 = v974 >> 29;
                v979 = *(_QWORD *)(*v107 + v978);
                v980 = *(_QWORD *)(*v108 + v978);
                do
                {
                  v976 += v979;
                  v977 += v980;
                  --v975;
                }
                while (v975);
              }
              break;
            default:
              LODWORD(v913) = 1;
              v914 = -20;
              do
              {
                v913 = *(int *)(v110 + v914) * (uint64_t)(int)v913;
                v914 += 4;
              }
              while (v914);
              if (v106[6])
              {
                result = 0;
                v915 = *(_QWORD **)v5;
                v1553 = v108;
                v1520 = v913;
                do
                {
                  v916 = *v106;
                  v917 = (unint64_t)((char *)v106[1] - (char *)*v106) >> 2;
                  v918 = (v917 - 1);
                  v1570 = result;
                  v1536 = v915;
                  v919 = 0;
                  if ((int)v917 - 1 >= 0)
                  {
                    v920 = *v107;
                    do
                    {
                      v921 = ldiv((int)result, v916[v918]);
                      LODWORD(result) = v921.quot;
                      v919 += *(_QWORD *)(v920 + 8 * v918--) * v921.rem;
                    }
                    while (v918 != -1);
                  }
                  v922 = *(_QWORD *)*a2;
                  v923 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v922) >> 2;
                  v924 = *v1553;
                  v925 = 0;
                  v926 = (v923 - 1);
                  if ((int)v923 - 1 >= 0)
                  {
                    v927 = v1570;
                    do
                    {
                      v928 = ldiv(v927, *(int *)(v922 + 4 * v926));
                      v927 = v928.quot;
                      v925 += *(_QWORD *)(v924 + 8 * v926--) * v928.rem;
                    }
                    while (v926 != -1);
                  }
                  v915 = v1536;
                  v929 = ((v915[1] - *v915) << 30) - 0x500000000;
                  v930 = *(int *)((char *)v916 + (v929 >> 30));
                  if (v930 >= 1)
                  {
                    v931 = v929 >> 29;
                    v932 = *(_QWORD *)(*v107 + v931);
                    v933 = *(_QWORD *)(v924 + v931);
                    do
                    {
                      v919 += v932;
                      v925 += v933;
                      --v930;
                    }
                    while (v930);
                    v915 = *(_QWORD **)v5;
                  }
                  result = v1570 + v1520;
                }
                while (v915[6] > (unint64_t)(v1570 + v1520));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v16 = v3[6];
          if (v16)
          {
            v17 = **(_DWORD **)(*(_QWORD *)result + 152);
            v18 = (_DWORD *)v3[19];
            do
            {
              *v18++ = v17;
              --v16;
            }
            while (v16);
          }
          break;
        case 1:
LABEL_35:
          v25 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v25)
            result = (uint64_t)memmove((void *)v3[19], *(const void **)(*(_QWORD *)result + 152), 4 * v25);
          break;
        case 2:
          v120 = *(int ***)result;
          v121 = **(int ***)result;
          v122 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v121;
          switch(v122 >> 2)
          {
            case 1:
              if (*v121 >= 1)
              {
                v123 = 0;
                v124 = v120[19];
                v125 = v3[19];
                v126 = 4 * *(_QWORD *)v120[3];
                do
                {
                  *(_DWORD *)(v125 + 4 * v123) = *v124;
                  v124 = (int *)((char *)v124 + v126);
                  ++v123;
                }
                while (*v121 > (int)v123);
              }
              break;
            case 2:
              v402 = *v121;
              if (*v121 >= 1)
              {
                v403 = 0;
                v404 = 0;
                v405 = 0;
                v406 = v120[19];
                v407 = v3[19];
                v408 = v120[3];
                v409 = *(_QWORD *)v408;
                v410 = *((_QWORD *)v408 + 1);
                v411 = v121[1];
                do
                {
                  if (v411 >= 1)
                  {
                    v412 = 0;
                    do
                    {
                      *(_DWORD *)(v407 + 4 * v404 + 4 * v412) = v406[v405];
                      v405 += v410;
                      v411 = v121[1];
                      ++v412;
                    }
                    while ((int)v412 < v411);
                    v402 = *v121;
                    v404 += v412;
                  }
                  v405 = v405 + v409 - v410 * v411;
                  ++v403;
                }
                while (v403 < v402);
              }
              break;
            case 3:
              result = *v121;
              if ((int)result >= 1)
              {
                v413 = 0;
                v414 = 0;
                v415 = 0;
                v416 = v120[19];
                v417 = v3[19];
                v418 = v120[3];
                v419 = *(_QWORD *)v418;
                v420 = *((_QWORD *)v418 + 1);
                v421 = v121[1];
                do
                {
                  if (v421 >= 1)
                  {
                    v422 = 0;
                    v423 = v120[3];
                    v424 = *((_QWORD *)v418 + 2);
                    v425 = v121[2];
                    do
                    {
                      if (v425 >= 1)
                      {
                        v426 = 0;
                        v427 = *((_QWORD *)v423 + 2);
                        do
                        {
                          *(_DWORD *)(v417 + 4 * v414 + 4 * v426) = v416[v415];
                          v415 += v427;
                          v425 = v121[2];
                          ++v426;
                        }
                        while ((int)v426 < v425);
                        v421 = v121[1];
                        v414 += v426;
                      }
                      v415 = v415 + v420 - v424 * v425;
                      ++v422;
                    }
                    while (v422 < v421);
                    result = *v121;
                  }
                  v415 = v415 + v419 - v420 * v421;
                  ++v413;
                }
                while (v413 < (int)result);
              }
              break;
            case 4:
              v428 = *v121;
              if (*v121 >= 1)
              {
                v429 = 0;
                v430 = 0;
                v431 = 0;
                v432 = v120[19];
                v433 = v3[19];
                v434 = v120[3];
                v435 = *(_QWORD *)v434;
                v436 = *((_QWORD *)v434 + 1);
                v437 = v121[1];
                do
                {
                  if (v437 >= 1)
                  {
                    v438 = 0;
                    v439 = v120[3];
                    v440 = *((_QWORD *)v434 + 2);
                    v441 = v121[2];
                    do
                    {
                      if (v441 >= 1)
                      {
                        v442 = 0;
                        v443 = v120[3];
                        v444 = *((_QWORD *)v439 + 2);
                        v445 = *((_QWORD *)v439 + 3);
                        v446 = v121[3];
                        do
                        {
                          if (v446 >= 1)
                          {
                            v447 = 0;
                            v448 = *((_QWORD *)v443 + 3);
                            do
                            {
                              *(_DWORD *)(v433 + 4 * v430 + 4 * v447) = v432[v431];
                              v431 += v448;
                              v446 = v121[3];
                              ++v447;
                            }
                            while ((int)v447 < v446);
                            v441 = v121[2];
                            v430 += v447;
                          }
                          v431 = v431 + v444 - v445 * v446;
                          ++v442;
                        }
                        while (v442 < v441);
                        v437 = v121[1];
                      }
                      v431 = v431 + v436 - v440 * v441;
                      ++v438;
                    }
                    while (v438 < v437);
                    v428 = *v121;
                  }
                  result = v437;
                  v431 = v431 + v435 - v436 * v437;
                  ++v429;
                }
                while (v429 < v428);
              }
              break;
            default:
              v393 = v3[6];
              if (v393)
              {
                v394 = 0;
                v395 = v120[19];
                v396 = v3[19];
                v397 = ((unint64_t)v122 >> 2) - 1;
                v398 = v120[3];
                do
                {
                  v399 = 0;
                  if ((v397 & 0x80000000) == 0)
                  {
                    v400 = v397;
                    LODWORD(result) = v394;
                    do
                    {
                      v401 = ldiv((int)result, v121[v400]);
                      result = v401.quot;
                      v399 += *(_QWORD *)&v398[2 * v400--] * v401.rem;
                    }
                    while (v400 != -1);
                  }
                  *(_DWORD *)(v396 + 4 * v394++) = v395[v399];
                }
                while (v394 != v393);
              }
              break;
          }
          break;
        case 3:
          v127 = *(unsigned int ***)result;
          v129 = **(_QWORD **)result;
          v128 = *(_QWORD *)(*(_QWORD *)result + 8);
          v130 = v128 - v129;
          switch((v128 - v129) >> 2)
          {
            case 1:
              v131 = (v130 << 30) - 0x100000000;
              v132 = *(_DWORD *)(v129 + (v131 >> 30));
              if (v132 >= 1)
              {
                v133 = v131 >> 29;
                v134 = *(_QWORD *)((char *)v127[3] + v133);
                v135 = *(_QWORD *)(v3[3] + v133);
                v136 = (unsigned int *)v3[19];
                v137 = v127[19];
                v138 = 4 * v135;
                v139 = 4 * v134;
                do
                {
                  *v136 = *v137;
                  v136 = (unsigned int *)((char *)v136 + v138);
                  v137 = (unsigned int *)((char *)v137 + v139);
                  --v132;
                }
                while (v132);
              }
              break;
            case 2:
              v1017 = (v130 << 30) - 0x200000000;
              v1018 = *(_DWORD *)(v129 + (v1017 >> 30));
              if (v1018 >= 1)
              {
                v1019 = 0;
                v1020 = 0;
                v1021 = 0;
                v1022 = v127[3];
                v1023 = v1017 >> 29;
                v1024 = *(_QWORD *)((char *)v1022 + v1023);
                v1025 = v3[3];
                v1026 = (v130 << 30) - 0x100000000;
                v1027 = *(_QWORD *)((char *)v1022 + (v1026 >> 29));
                v1028 = *(_QWORD *)(v1025 + (v1026 >> 29));
                v1029 = v1026 >> 32;
                v1030 = 4 * *(_QWORD *)(v1025 + v1023);
                v1031 = 4 * v1028;
                v1032 = 4 * v1024;
                v1033 = 4 * v1027;
                do
                {
                  result = *(unsigned int *)(v129 + 4 * v1029);
                  if ((int)result >= 1)
                  {
                    v1034 = (_DWORD *)(v3[19] + v1020);
                    v1035 = (unsigned int *)((char *)v127[19] + v1019);
                    do
                    {
                      *v1034 = *v1035;
                      v1034 = (_DWORD *)((char *)v1034 + v1031);
                      v1035 = (_DWORD *)((char *)v1035 + v1033);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  ++v1021;
                  v1020 += v1030;
                  v1019 += v1032;
                }
                while (v1021 != v1018);
              }
              break;
            case 3:
              v1036 = (v130 << 30) - 0x300000000;
              v1037 = *(_DWORD *)(v129 + (v1036 >> 30));
              if (v1037 >= 1)
              {
                v1038 = 0;
                v1039 = 0;
                v1040 = 0;
                v1041 = v130 << 30;
                v1042 = v127[3];
                v1043 = v1036 >> 29;
                v1044 = *(_QWORD *)((char *)v1042 + v1043);
                v1045 = v3[3];
                v1046 = *(_QWORD *)(v1045 + v1043);
                v1047 = (v1041 - 0x200000000) >> 29;
                v1048 = *(_QWORD *)((char *)v1042 + v1047);
                v1049 = (v1041 - 0x200000000) >> 32;
                v1050 = (v1041 - 0x100000000) >> 32;
                v1051 = 4 * v1046;
                v1052 = 4 * *(_QWORD *)(v1045 + v1047);
                result = 4 * v1044;
                v1053 = 4 * v1048;
                do
                {
                  v1054 = *(_DWORD *)(v129 + 4 * v1049);
                  if (v1054 >= 1)
                  {
                    v1055 = 0;
                    v1056 = (_QWORD *)*a2;
                    v1057 = 4 * *(_QWORD *)(v1045 + 8 * v1050);
                    v1058 = 4 * *(_QWORD *)&v1042[2 * v1050];
                    v1059 = v1038;
                    v1060 = v1039;
                    do
                    {
                      v1061 = *(_DWORD *)(v129 + 4 * v1050);
                      if (v1061 >= 1)
                      {
                        v1062 = (_DWORD *)(v1056[19] + v1060);
                        v1063 = (unsigned int *)((char *)v127[19] + v1059);
                        do
                        {
                          *v1062 = *v1063;
                          v1062 = (_DWORD *)((char *)v1062 + v1057);
                          v1063 = (_DWORD *)((char *)v1063 + v1058);
                          --v1061;
                        }
                        while (v1061);
                      }
                      ++v1055;
                      v1060 += v1052;
                      v1059 += v1053;
                    }
                    while (v1055 != v1054);
                  }
                  ++v1040;
                  v1039 += v1051;
                  v1038 += result;
                }
                while (v1040 != v1037);
              }
              break;
            case 4:
              v1064 = (v130 << 30) - 0x400000000;
              v1572 = *(_DWORD *)(v129 + (v1064 >> 30));
              if (v1572 >= 1)
              {
                v1065 = 0;
                v1066 = 0;
                v1067 = 0;
                v1068 = v130 << 30;
                v1069 = v127[3];
                v1070 = v1064 >> 29;
                v1071 = v3[3];
                v1555 = (v1068 - 0x300000000) >> 32;
                v1072 = (v1068 - 0x300000000) >> 29;
                v1073 = *(_QWORD *)((char *)v1069 + v1072);
                v1074 = *(_QWORD *)(v1071 + v1072);
                v1075 = (v1068 - 0x200000000) >> 32;
                v1076 = (v1068 - 0x100000000) >> 32;
                v1538 = 4 * *(_QWORD *)(v1071 + v1070);
                result = 4 * v1074;
                v1522 = 4 * *(_QWORD *)((char *)v1069 + v1070);
                v1077 = 4 * v1073;
                do
                {
                  v1078 = *(_DWORD *)(v129 + 4 * v1555);
                  if (v1078 >= 1)
                  {
                    v1079 = 0;
                    v1080 = 4 * *(_QWORD *)(v1071 + 8 * v1075);
                    v1081 = 4 * *(_QWORD *)&v1069[2 * v1075];
                    v1082 = v1065;
                    v1083 = v1066;
                    do
                    {
                      v1084 = *(_DWORD *)(v129 + 4 * v1075);
                      if (v1084 >= 1)
                      {
                        v1085 = 0;
                        v1086 = (_QWORD *)*a2;
                        v1087 = 4 * *(_QWORD *)(v1071 + 8 * v1076);
                        v1088 = 4 * *(_QWORD *)&v1069[2 * v1076];
                        v1089 = v1082;
                        v1090 = v1083;
                        do
                        {
                          v1091 = *(_DWORD *)(v129 + 4 * v1076);
                          if (v1091 >= 1)
                          {
                            v1092 = (_DWORD *)(v1086[19] + v1090);
                            v1093 = (unsigned int *)((char *)v127[19] + v1089);
                            do
                            {
                              *v1092 = *v1093;
                              v1092 = (_DWORD *)((char *)v1092 + v1087);
                              v1093 = (_DWORD *)((char *)v1093 + v1088);
                              --v1091;
                            }
                            while (v1091);
                          }
                          ++v1085;
                          v1090 += v1080;
                          v1089 += v1081;
                        }
                        while (v1085 != v1084);
                      }
                      ++v1079;
                      v1083 += result;
                      v1082 += v1077;
                    }
                    while (v1079 != v1078);
                  }
                  ++v1067;
                  v1066 += v1538;
                  v1065 += v1522;
                }
                while (v1067 != v1572);
              }
              break;
            case 5:
              v1094 = (v130 << 30) - 0x500000000;
              v1478 = *(_DWORD *)(v129 + (v1094 >> 30));
              if (v1478 >= 1)
              {
                v1498 = 0;
                v1508 = 0;
                v1488 = 0;
                v1095 = v130 << 30;
                v1096 = v127[3];
                v1097 = v1094 >> 29;
                v1098 = v3[3];
                v1468 = (v1095 - 0x400000000) >> 32;
                v1099 = (v1095 - 0x400000000) >> 29;
                result = *(_QWORD *)((char *)v1096 + v1099);
                v1556 = (v1095 - 0x300000000) >> 32;
                v1100 = (v1095 - 0x200000000) >> 32;
                v1101 = (v1095 - 0x100000000) >> 32;
                v1458 = 4 * *(_QWORD *)(v1098 + v1097);
                v1539 = 4 * *(_QWORD *)(v1098 + v1099);
                v1449 = 4 * *(_QWORD *)((char *)v1096 + v1097);
                v1523 = 4 * result;
                do
                {
                  v1573 = *(_DWORD *)(v129 + 4 * v1468);
                  if (v1573 >= 1)
                  {
                    v1102 = 0;
                    v1103 = 4 * *(_QWORD *)(v1098 + 8 * v1556);
                    v1104 = 4 * *(_QWORD *)&v1096[2 * v1556];
                    v1106 = v1498;
                    v1105 = v1508;
                    do
                    {
                      v1107 = *(_DWORD *)(v129 + 4 * v1556);
                      if (v1107 >= 1)
                      {
                        v1108 = 0;
                        v1109 = 4 * *(_QWORD *)(v1098 + 8 * v1100);
                        v1110 = 4 * *(_QWORD *)&v1096[2 * v1100];
                        v1111 = v1105;
                        v1112 = v1106;
                        do
                        {
                          v1113 = *(_DWORD *)(v129 + 4 * v1100);
                          if (v1113 >= 1)
                          {
                            v1114 = 0;
                            result = *a2;
                            v1115 = 4 * *(_QWORD *)(v1098 + 8 * v1101);
                            v1116 = 4 * *(_QWORD *)&v1096[2 * v1101];
                            v1117 = v1111;
                            v1118 = v1112;
                            do
                            {
                              v1119 = *(_DWORD *)(v129 + 4 * v1101);
                              if (v1119 >= 1)
                              {
                                v1120 = (_DWORD *)(*(_QWORD *)(result + 152) + v1118);
                                v1121 = (unsigned int *)((char *)v127[19] + v1117);
                                do
                                {
                                  *v1120 = *v1121;
                                  v1120 = (_DWORD *)((char *)v1120 + v1115);
                                  v1121 = (_DWORD *)((char *)v1121 + v1116);
                                  --v1119;
                                }
                                while (v1119);
                              }
                              ++v1114;
                              v1118 += v1109;
                              v1117 += v1110;
                            }
                            while (v1114 != v1113);
                          }
                          ++v1108;
                          v1112 += v1103;
                          v1111 += v1104;
                        }
                        while (v1108 != v1107);
                      }
                      ++v1102;
                      v1106 += v1539;
                      v1105 += v1523;
                    }
                    while (v1102 != v1573);
                  }
                  v1498 += v1458;
                  v1508 += v1449;
                  ++v1488;
                }
                while (v1488 != v1478);
              }
              break;
            default:
              LODWORD(v981) = 1;
              v982 = -20;
              do
              {
                v981 = *(int *)(v128 + v982) * (uint64_t)(int)v981;
                v982 += 4;
              }
              while (v982);
              v1431 = v127[6];
              if (v1431)
              {
                result = 0;
                v1457 = *v3;
                v983 = (v130 << 30) - 0x500000000;
                v1421 = (v130 >> 2) - 1;
                v984 = v127[3];
                v1416 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1412 = v983 >> 32;
                v985 = v3[3];
                v1467 = (uint64_t)((v130 << 30) - 0x400000000) >> 32;
                v1554 = (uint64_t)((v130 << 30) - 0x300000000) >> 32;
                v986 = (uint64_t)((v130 << 30) - 0x200000000) >> 32;
                v987 = (uint64_t)((v130 << 30) - 0x100000000) >> 32;
                v1441 = 4 * *(_QWORD *)((char *)v984 + (v983 >> 29));
                v1448 = 4 * *(_QWORD *)(v985 + (v983 >> 29));
                v1426 = v981;
                do
                {
                  v988 = v1421;
                  v1436 = result;
                  v989 = 0;
                  if ((v1421 & 0x80000000) != 0)
                  {
                    v990 = v1416;
                  }
                  else
                  {
                    v990 = v1416;
                    do
                    {
                      v991 = ldiv((int)result, *(int *)(v129 + 4 * v988));
                      LODWORD(result) = v991.quot;
                      v989 += *(_QWORD *)&v984[2 * v988--] * v991.rem;
                    }
                    while (v988 != -1);
                  }
                  v992 = 0;
                  if ((v990 & 0x80000000) == 0)
                  {
                    v993 = v1436;
                    do
                    {
                      v994 = ldiv(v993, *(int *)(v1457 + 4 * v990));
                      v993 = v994.quot;
                      v992 += *(_QWORD *)(v985 + 8 * v990--) * v994.rem;
                    }
                    while (v990 != -1);
                  }
                  v1477 = *(_DWORD *)(v129 + 4 * v1412);
                  if (v1477 >= 1)
                  {
                    v995 = 0;
                    v1507 = 4 * v992;
                    v1537 = 4 * *(_QWORD *)(v985 + 8 * v1467);
                    v1497 = 4 * v989;
                    v1521 = 4 * *(_QWORD *)&v984[2 * v1467];
                    do
                    {
                      v1487 = v995;
                      v1571 = *(_DWORD *)(v129 + 4 * v1467);
                      if (v1571 >= 1)
                      {
                        v996 = 0;
                        v997 = 4 * *(_QWORD *)(v985 + 8 * v1554);
                        v998 = 4 * *(_QWORD *)&v984[2 * v1554];
                        v1000 = v1497;
                        v999 = v1507;
                        do
                        {
                          v1001 = *(_DWORD *)(v129 + 4 * v1554);
                          if (v1001 >= 1)
                          {
                            v1002 = 0;
                            v1003 = 4 * *(_QWORD *)(v985 + 8 * v986);
                            v1004 = 4 * *(_QWORD *)&v984[2 * v986];
                            v1005 = v1000;
                            v1006 = v999;
                            do
                            {
                              v1007 = *(_DWORD *)(v129 + 4 * v986);
                              if (v1007 >= 1)
                              {
                                v1008 = 0;
                                v1009 = (_QWORD *)*a2;
                                v1010 = 4 * *(_QWORD *)(v985 + 8 * v987);
                                v1011 = 4 * *(_QWORD *)&v984[2 * v987];
                                v1012 = v1005;
                                v1013 = v1006;
                                do
                                {
                                  v1014 = *(_DWORD *)(v129 + 4 * v987);
                                  if (v1014 >= 1)
                                  {
                                    v1015 = (_DWORD *)(v1009[19] + v1013);
                                    v1016 = (unsigned int *)((char *)v127[19] + v1012);
                                    do
                                    {
                                      *v1015 = *v1016;
                                      v1015 = (_DWORD *)((char *)v1015 + v1010);
                                      v1016 = (_DWORD *)((char *)v1016 + v1011);
                                      --v1014;
                                    }
                                    while (v1014);
                                  }
                                  ++v1008;
                                  v1013 += v1003;
                                  v1012 += v1004;
                                }
                                while (v1008 != v1007);
                              }
                              ++v1002;
                              v1006 += v997;
                              v1005 += v998;
                            }
                            while (v1002 != v1001);
                          }
                          ++v996;
                          v999 += v1537;
                          v1000 += v1521;
                        }
                        while (v996 != v1571);
                      }
                      v995 = v1487 + 1;
                      v1507 += v1448;
                      v1497 += v1441;
                    }
                    while (v1487 + 1 != v1477);
                  }
                  result = v1436 + v1426;
                }
                while ((unint64_t)v1431 > v1436 + v1426);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v19 = v3[6];
          if (v19)
          {
            v20 = **(unsigned int **)(*(_QWORD *)result + 152);
            v21 = (_QWORD *)v3[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          v140 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v140)
          {
            v141 = *(unsigned int **)(*(_QWORD *)result + 152);
            v142 = (_QWORD *)v3[19];
            v143 = 4 * v140;
            do
            {
              v144 = *v141++;
              *v142++ = v144;
              v143 -= 4;
            }
            while (v143);
          }
          break;
        case 2:
          v145 = *(int ***)result;
          v146 = **(int ***)result;
          v147 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v146;
          switch(v147 >> 2)
          {
            case 1:
              v148 = *v146;
              if ((int)v148 >= 1)
              {
                v149 = v145[19];
                v150 = (_QWORD *)v3[19];
                v151 = 4 * *(_QWORD *)v145[3];
                do
                {
                  *v150++ = *v149;
                  v149 = (int *)((char *)v149 + v151);
                  --v148;
                }
                while (v148);
              }
              break;
            case 2:
              v458 = *v146;
              if (*v146 >= 1)
              {
                v459 = 0;
                v460 = 0;
                v461 = 0;
                v462 = v145[19];
                v463 = v3[19];
                v464 = v146[1];
                v465 = v145[3];
                v467 = *(_QWORD *)v465;
                v466 = *((_QWORD *)v465 + 1);
                v468 = v467 - v466 * v464;
                do
                {
                  v469 = v464;
                  if ((int)v464 >= 1)
                  {
                    do
                    {
                      result = v462[v461];
                      *(_QWORD *)(v463 + 8 * v460++) = result;
                      v461 += v466;
                      --v469;
                    }
                    while (v469);
                  }
                  v461 += v468;
                  ++v459;
                }
                while (v459 != v458);
              }
              break;
            case 3:
              v470 = *v146;
              if (*v146 >= 1)
              {
                v471 = 0;
                result = 0;
                v472 = 0;
                v473 = v145[19];
                v474 = v3[19];
                v475 = v146[1];
                v476 = v145[3];
                v477 = *((_QWORD *)v476 + 1);
                v478 = *(_QWORD *)v476 - v477 * v475;
                do
                {
                  if ((int)v475 < 1)
                  {
                    v485 = result;
                  }
                  else
                  {
                    v479 = 0;
                    v480 = v146[2];
                    v481 = v145[3];
                    v482 = v477 - *((_QWORD *)v476 + 2) * v480;
                    do
                    {
                      if ((int)v480 < 1)
                      {
                        v485 = result;
                      }
                      else
                      {
                        v483 = *((_QWORD *)v481 + 2);
                        v484 = v480;
                        do
                        {
                          v485 = result + 1;
                          *(_QWORD *)(v474 + 8 * result) = v473[v472];
                          v472 += v483;
                          ++result;
                          --v484;
                        }
                        while (v484);
                      }
                      v472 += v482;
                      ++v479;
                      result = v485;
                    }
                    while (v479 != (_DWORD)v475);
                  }
                  v472 += v478;
                  ++v471;
                  result = v485;
                }
                while (v471 != v470);
              }
              break;
            case 4:
              v486 = *v146;
              if (*v146 >= 1)
              {
                v487 = 0;
                result = 0;
                v488 = 0;
                v489 = v145[19];
                v490 = v3[19];
                v491 = v146[1];
                v492 = v145[3];
                v493 = *((_QWORD *)v492 + 1);
                v494 = *(_QWORD *)v492 - v493 * v491;
                do
                {
                  if ((int)v491 < 1)
                  {
                    v505 = result;
                  }
                  else
                  {
                    v495 = 0;
                    v496 = v146[2];
                    v497 = v145[3];
                    v498 = v493 - *((_QWORD *)v492 + 2) * v496;
                    do
                    {
                      if ((int)v496 < 1)
                      {
                        v505 = result;
                      }
                      else
                      {
                        v499 = 0;
                        v500 = v146[3];
                        v501 = v145[3];
                        v502 = *((_QWORD *)v497 + 2) - *((_QWORD *)v497 + 3) * v500;
                        do
                        {
                          if ((int)v500 < 1)
                          {
                            v505 = result;
                          }
                          else
                          {
                            v503 = *((_QWORD *)v501 + 3);
                            v504 = v500;
                            do
                            {
                              v505 = result + 1;
                              *(_QWORD *)(v490 + 8 * result) = v489[v488];
                              v488 += v503;
                              ++result;
                              --v504;
                            }
                            while (v504);
                          }
                          v488 += v502;
                          ++v499;
                          result = v505;
                        }
                        while (v499 != (_DWORD)v496);
                      }
                      v488 += v498;
                      ++v495;
                      result = v505;
                    }
                    while (v495 != (_DWORD)v491);
                  }
                  v488 += v494;
                  ++v487;
                  result = v505;
                }
                while (v487 != v486);
              }
              break;
            default:
              v449 = v3[6];
              if (v449)
              {
                v450 = 0;
                v451 = v145[19];
                v452 = v3[19];
                v453 = ((unint64_t)v147 >> 2) - 1;
                v454 = v145[3];
                do
                {
                  v455 = 0;
                  if ((v453 & 0x80000000) == 0)
                  {
                    v456 = v453;
                    LODWORD(result) = v450;
                    do
                    {
                      v457 = ldiv((int)result, v146[v456]);
                      result = v457.quot;
                      v455 += *(_QWORD *)&v454[2 * v456--] * v457.rem;
                    }
                    while (v456 != -1);
                  }
                  *(_QWORD *)(v452 + 8 * v450++) = v451[v455];
                }
                while (v450 != v449);
              }
              break;
          }
          break;
        case 3:
          v152 = *(unsigned int ***)result;
          v154 = **(_QWORD **)result;
          v153 = *(_QWORD *)(*(_QWORD *)result + 8);
          v155 = v153 - v154;
          switch((v153 - v154) >> 2)
          {
            case 1:
              v156 = (v155 << 30) - 0x100000000;
              v157 = *(_DWORD *)(v154 + (v156 >> 30));
              if (v157 >= 1)
              {
                v158 = v156 >> 29;
                v159 = *(_QWORD *)((char *)v152[3] + v158);
                v160 = *(_QWORD *)(v3[3] + v158);
                v161 = (_QWORD *)v3[19];
                v162 = v152[19];
                v163 = 8 * v160;
                v164 = 4 * v159;
                do
                {
                  *v161 = *v162;
                  v161 = (_QWORD *)((char *)v161 + v163);
                  v162 = (unsigned int *)((char *)v162 + v164);
                  --v157;
                }
                while (v157);
              }
              break;
            case 2:
              v1157 = (v155 << 30) - 0x200000000;
              v1158 = *(_DWORD *)(v154 + (v1157 >> 30));
              if (v1158 >= 1)
              {
                v1159 = 0;
                v1160 = 0;
                v1161 = 0;
                v1162 = v152[3];
                v1163 = v1157 >> 29;
                v1164 = *(_QWORD *)((char *)v1162 + v1163);
                v1165 = v3[3];
                result = *(_QWORD *)(v1165 + v1163);
                v1166 = (v155 << 30) - 0x100000000;
                v1167 = *(_QWORD *)((char *)v1162 + (v1166 >> 29));
                v1168 = *(_QWORD *)(v1165 + (v1166 >> 29));
                v1169 = *(_DWORD *)(v154 + (v1166 >> 30));
                v1170 = 8 * result;
                v1171 = 8 * v1168;
                v1172 = 4 * v1164;
                v1173 = 4 * v1167;
                do
                {
                  if (v1169 >= 1)
                  {
                    result = v3[19] + v1160;
                    v1174 = (unsigned int *)((char *)v152[19] + v1159);
                    v1175 = v1169;
                    do
                    {
                      *(_QWORD *)result = *v1174;
                      result += v1171;
                      v1174 = (unsigned int *)((char *)v1174 + v1173);
                      --v1175;
                    }
                    while (v1175);
                  }
                  ++v1161;
                  v1160 += v1170;
                  v1159 += v1172;
                }
                while (v1161 != v1158);
              }
              break;
            case 3:
              v1176 = (v155 << 30) - 0x300000000;
              v1177 = *(_DWORD *)(v154 + (v1176 >> 30));
              if (v1177 >= 1)
              {
                v1178 = 0;
                v1179 = 0;
                v1180 = 0;
                v1181 = v152[3];
                v1182 = v1176 >> 29;
                v1183 = *(_QWORD *)((char *)v1181 + v1182);
                v1184 = v3[3];
                v1185 = *(_QWORD *)(v1184 + v1182);
                v1186 = v155 << 30;
                v1187 = (v155 << 30) - 0x200000000;
                v1188 = *(_QWORD *)((char *)v1181 + (v1187 >> 29));
                v1189 = *(_QWORD *)(v1184 + (v1187 >> 29));
                v1190 = *(_DWORD *)(v154 + (v1187 >> 30));
                v1191 = (v1186 - 0x100000000) >> 32;
                v1192 = 8 * v1185;
                v1193 = 8 * v1189;
                result = 4 * v1183;
                v1194 = 4 * v1188;
                do
                {
                  if (v1190 >= 1)
                  {
                    v1195 = 0;
                    v1196 = *(_DWORD *)(v154 + 4 * v1191);
                    v1197 = (_QWORD *)*a2;
                    v1198 = 8 * *(_QWORD *)(v1184 + 8 * v1191);
                    v1199 = 4 * *(_QWORD *)&v1181[2 * v1191];
                    v1200 = v1178;
                    v1201 = v1179;
                    do
                    {
                      if (v1196 >= 1)
                      {
                        v1202 = (_QWORD *)(v1197[19] + v1201);
                        v1203 = (unsigned int *)((char *)v152[19] + v1200);
                        v1204 = v1196;
                        do
                        {
                          *v1202 = *v1203;
                          v1202 = (_QWORD *)((char *)v1202 + v1198);
                          v1203 = (unsigned int *)((char *)v1203 + v1199);
                          --v1204;
                        }
                        while (v1204);
                      }
                      ++v1195;
                      v1201 += v1193;
                      v1200 += v1194;
                    }
                    while (v1195 != v1190);
                  }
                  ++v1180;
                  v1179 += v1192;
                  v1178 += result;
                }
                while (v1180 != v1177);
              }
              break;
            case 4:
              v1205 = (v155 << 30) - 0x400000000;
              v1575 = *(_DWORD *)(v154 + (v1205 >> 30));
              if (v1575 >= 1)
              {
                v1206 = 0;
                v1207 = 0;
                v1208 = 0;
                v1209 = v152[3];
                v1210 = v1205 >> 29;
                v1211 = v155 << 30;
                v1212 = v3[3];
                v1213 = (v1211 - 0x300000000) >> 29;
                v1214 = *(_QWORD *)((char *)v1209 + v1213);
                v1215 = v1211 - 0x200000000;
                v1216 = v1211 - 0x100000000;
                v1217 = *(_QWORD *)(v1212 + v1213);
                v1218 = *(_DWORD *)(v154 + ((v1211 - 0x300000000) >> 30));
                v1525 = v1215 >> 32;
                v1219 = v1216 >> 32;
                v1558 = 8 * *(_QWORD *)(v1212 + v1210);
                result = 8 * v1217;
                v1541 = 4 * *(_QWORD *)((char *)v1209 + v1210);
                v1220 = 4 * v1214;
                do
                {
                  if (v1218 >= 1)
                  {
                    v1221 = 0;
                    v1222 = *(_DWORD *)(v154 + 4 * v1525);
                    v1223 = 8 * *(_QWORD *)(v1212 + 8 * v1525);
                    v1224 = 4 * *(_QWORD *)&v1209[2 * v1525];
                    v1225 = v1206;
                    v1226 = v1207;
                    do
                    {
                      if (v1222 >= 1)
                      {
                        v1227 = 0;
                        v1228 = *(_DWORD *)(v154 + 4 * v1219);
                        v1229 = (_QWORD *)*a2;
                        v1230 = 8 * *(_QWORD *)(v1212 + 8 * v1219);
                        v1231 = 4 * *(_QWORD *)&v1209[2 * v1219];
                        v1232 = v1225;
                        v1233 = v1226;
                        do
                        {
                          if (v1228 >= 1)
                          {
                            v1234 = (_QWORD *)(v1229[19] + v1233);
                            v1235 = (unsigned int *)((char *)v152[19] + v1232);
                            v1236 = v1228;
                            do
                            {
                              *v1234 = *v1235;
                              v1234 = (_QWORD *)((char *)v1234 + v1230);
                              v1235 = (unsigned int *)((char *)v1235 + v1231);
                              --v1236;
                            }
                            while (v1236);
                          }
                          ++v1227;
                          v1233 += v1223;
                          v1232 += v1224;
                        }
                        while (v1227 != v1222);
                      }
                      ++v1221;
                      v1226 += result;
                      v1225 += v1220;
                    }
                    while (v1221 != v1218);
                  }
                  ++v1208;
                  v1207 += v1558;
                  v1206 += v1541;
                }
                while (v1208 != v1575);
              }
              break;
            case 5:
              v1237 = (v155 << 30) - 0x500000000;
              v1480 = *(_DWORD *)(v154 + (v1237 >> 30));
              if (v1480 >= 1)
              {
                v1500 = 0;
                v1510 = 0;
                v1490 = 0;
                v1238 = v152[3];
                v1239 = v1237 >> 29;
                v1240 = v3[3];
                v1241 = (v155 << 30) - 0x400000000;
                result = *(_QWORD *)((char *)v1238 + (v1241 >> 29));
                v1576 = *(_DWORD *)(v154 + (v1241 >> 30));
                v1451 = (uint64_t)((v155 << 30) - 0x300000000) >> 32;
                v1526 = (uint64_t)((v155 << 30) - 0x200000000) >> 32;
                v1242 = (uint64_t)((v155 << 30) - 0x100000000) >> 32;
                v1470 = 8 * *(_QWORD *)(v1240 + v1239);
                v1559 = 8 * *(_QWORD *)(v1240 + (v1241 >> 29));
                v1460 = 4 * *(_QWORD *)((char *)v1238 + v1239);
                v1542 = 4 * result;
                do
                {
                  if (v1576 >= 1)
                  {
                    v1243 = 0;
                    v1244 = *(_DWORD *)(v154 + 4 * v1451);
                    v1245 = 8 * *(_QWORD *)(v1240 + 8 * v1451);
                    v1246 = 4 * *(_QWORD *)&v1238[2 * v1451];
                    v1248 = v1500;
                    v1247 = v1510;
                    do
                    {
                      if (v1244 >= 1)
                      {
                        v1249 = 0;
                        v1250 = *(_DWORD *)(v154 + 4 * v1526);
                        v1251 = 8 * *(_QWORD *)(v1240 + 8 * v1526);
                        v1252 = 4 * *(_QWORD *)&v1238[2 * v1526];
                        v1253 = v1247;
                        v1254 = v1248;
                        do
                        {
                          if (v1250 >= 1)
                          {
                            v1255 = 0;
                            v1256 = *(_DWORD *)(v154 + 4 * v1242);
                            v1257 = (_QWORD *)*a2;
                            v1258 = 8 * *(_QWORD *)(v1240 + 8 * v1242);
                            v1259 = 4 * *(_QWORD *)&v1238[2 * v1242];
                            v1260 = v1253;
                            v1261 = v1254;
                            do
                            {
                              if (v1256 >= 1)
                              {
                                v1262 = (_QWORD *)(v1257[19] + v1261);
                                v1263 = (unsigned int *)((char *)v152[19] + v1260);
                                LODWORD(result) = v1256;
                                do
                                {
                                  *v1262 = *v1263;
                                  v1262 = (_QWORD *)((char *)v1262 + v1258);
                                  v1263 = (unsigned int *)((char *)v1263 + v1259);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1255;
                              v1261 += v1251;
                              v1260 += v1252;
                            }
                            while (v1255 != v1250);
                          }
                          ++v1249;
                          v1254 += v1245;
                          v1253 += v1246;
                        }
                        while (v1249 != v1244);
                      }
                      ++v1243;
                      v1248 += v1559;
                      v1247 += v1542;
                    }
                    while (v1243 != v1576);
                  }
                  v1500 += v1470;
                  v1510 += v1460;
                  ++v1490;
                }
                while (v1490 != v1480);
              }
              break;
            default:
              LODWORD(v1122) = 1;
              v1123 = -20;
              do
              {
                v1122 = *(int *)(v153 + v1123) * (uint64_t)(int)v1122;
                v1123 += 4;
              }
              while (v1123);
              v1437 = v152[6];
              if (v1437)
              {
                v1124 = 0;
                v1417 = *v3;
                v1125 = (v155 << 30) - 0x500000000;
                v1427 = (v155 >> 2) - 1;
                v1126 = v152[3];
                v1422 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1127 = v3[3];
                v1479 = *(_DWORD *)(v154 + (v1125 >> 30));
                v1413 = (uint64_t)((v155 << 30) - 0x400000000) >> 32;
                v1524 = (uint64_t)((v155 << 30) - 0x200000000) >> 32;
                v1128 = (uint64_t)((v155 << 30) - 0x100000000) >> 32;
                v1469 = 8 * *(_QWORD *)(v1127 + (v1125 >> 29));
                v1450 = (uint64_t)((v155 << 30) - 0x300000000) >> 32;
                v1459 = 4 * *(_QWORD *)((char *)v1126 + (v1125 >> 29));
                v1432 = v1122;
                do
                {
                  v1129 = v1427;
                  if ((v1427 & 0x80000000) != 0)
                  {
                    v1130 = 0;
                    v1131 = v1422;
                  }
                  else
                  {
                    v1130 = 0;
                    LODWORD(result) = v1124;
                    v1131 = v1422;
                    do
                    {
                      v1132 = ldiv((int)result, *(int *)(v154 + 4 * v1129));
                      result = v1132.quot;
                      v1130 += *(_QWORD *)&v1126[2 * v1129--] * v1132.rem;
                    }
                    while (v1129 != -1);
                  }
                  v1442 = v1124;
                  v1133 = 0;
                  if ((v1131 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1124;
                    do
                    {
                      v1134 = ldiv((int)result, *(int *)(v1417 + 4 * v1131));
                      result = v1134.quot;
                      v1133 += *(_QWORD *)(v1127 + 8 * v1131--) * v1134.rem;
                    }
                    while (v1131 != -1);
                  }
                  if (v1479 >= 1)
                  {
                    v1135 = 0;
                    v1574 = *(_DWORD *)(v154 + 4 * v1413);
                    v1509 = 8 * v1133;
                    v1557 = 8 * *(_QWORD *)(v1127 + 8 * v1413);
                    v1499 = 4 * v1130;
                    v1540 = 4 * *(_QWORD *)&v1126[2 * v1413];
                    do
                    {
                      v1489 = v1135;
                      if (v1574 >= 1)
                      {
                        v1136 = 0;
                        v1137 = *(_DWORD *)(v154 + 4 * v1450);
                        v1138 = 8 * *(_QWORD *)(v1127 + 8 * v1450);
                        v1139 = 4 * *(_QWORD *)&v1126[2 * v1450];
                        v1141 = v1499;
                        v1140 = v1509;
                        do
                        {
                          if (v1137 >= 1)
                          {
                            v1142 = 0;
                            v1143 = *(_DWORD *)(v154 + 4 * v1524);
                            v1144 = 8 * *(_QWORD *)(v1127 + 8 * v1524);
                            v1145 = 4 * *(_QWORD *)&v1126[2 * v1524];
                            result = v1141;
                            v1146 = v1140;
                            do
                            {
                              if (v1143 >= 1)
                              {
                                v1147 = 0;
                                v1148 = *(_DWORD *)(v154 + 4 * v1128);
                                v1149 = (_QWORD *)*a2;
                                v1150 = 8 * *(_QWORD *)(v1127 + 8 * v1128);
                                v1151 = 4 * *(_QWORD *)&v1126[2 * v1128];
                                v1152 = result;
                                v1153 = v1146;
                                do
                                {
                                  if (v1148 >= 1)
                                  {
                                    v1154 = (_QWORD *)(v1149[19] + v1153);
                                    v1155 = (unsigned int *)((char *)v152[19] + v1152);
                                    v1156 = v1148;
                                    do
                                    {
                                      *v1154 = *v1155;
                                      v1154 = (_QWORD *)((char *)v1154 + v1150);
                                      v1155 = (unsigned int *)((char *)v1155 + v1151);
                                      --v1156;
                                    }
                                    while (v1156);
                                  }
                                  ++v1147;
                                  v1153 += v1144;
                                  v1152 += v1145;
                                }
                                while (v1147 != v1143);
                              }
                              ++v1142;
                              v1146 += v1138;
                              result += v1139;
                            }
                            while (v1142 != v1137);
                          }
                          ++v1136;
                          v1140 += v1557;
                          v1141 += v1540;
                        }
                        while (v1136 != v1574);
                      }
                      v1135 = v1489 + 1;
                      v1509 += v1469;
                      v1499 += v1459;
                    }
                    while (v1489 + 1 != v1479);
                  }
                  v1124 += v1432;
                }
                while ((unint64_t)v1437 > v1442 + v1432);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v22 = v3[6];
          if (v22)
          {
            v23 = (float)**(unsigned int **)(*(_QWORD *)result + 152);
            v24 = (float *)v3[19];
            do
            {
              *v24++ = v23;
              --v22;
            }
            while (v22);
          }
          break;
        case 1:
          v165 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v165)
          {
            v166 = *(unsigned int **)(*(_QWORD *)result + 152);
            v167 = (float *)v3[19];
            v168 = 4 * v165;
            do
            {
              v169 = *v166++;
              *v167++ = (float)v169;
              v168 -= 4;
            }
            while (v168);
          }
          break;
        case 2:
          v170 = *(int ***)result;
          v171 = **(int ***)result;
          v172 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v171;
          switch(v172 >> 2)
          {
            case 1:
              v173 = *v171;
              if ((int)v173 >= 1)
              {
                v174 = (unsigned int *)v170[19];
                v175 = (float *)v3[19];
                v176 = 4 * *(_QWORD *)v170[3];
                do
                {
                  *v175++ = (float)*v174;
                  v174 = (unsigned int *)((char *)v174 + v176);
                  --v173;
                }
                while (v173);
              }
              break;
            case 2:
              v515 = *v171;
              if (*v171 >= 1)
              {
                v516 = 0;
                v517 = 0;
                v518 = 0;
                v519 = v170[19];
                v520 = v3[19];
                v521 = v171[1];
                v522 = v170[3];
                v524 = *(_QWORD *)v522;
                v523 = *((_QWORD *)v522 + 1);
                v525 = v524 - v523 * v521;
                do
                {
                  v526 = v521;
                  if ((int)v521 >= 1)
                  {
                    do
                    {
                      *(float *)(v520 + 4 * v517++) = (float)v519[v518];
                      v518 += v523;
                      --v526;
                    }
                    while (v526);
                  }
                  v518 += v525;
                  ++v516;
                }
                while (v516 != v515);
              }
              break;
            case 3:
              v527 = *v171;
              if (*v171 >= 1)
              {
                v528 = 0;
                result = 0;
                v529 = 0;
                v530 = v170[19];
                v531 = v3[19];
                v532 = v171[1];
                v533 = v170[3];
                v534 = *((_QWORD *)v533 + 1);
                v535 = *(_QWORD *)v533 - v534 * v532;
                do
                {
                  if ((int)v532 < 1)
                  {
                    v542 = result;
                  }
                  else
                  {
                    v536 = 0;
                    v537 = v171[2];
                    v538 = v170[3];
                    v539 = v534 - *((_QWORD *)v533 + 2) * v537;
                    do
                    {
                      if ((int)v537 < 1)
                      {
                        v542 = result;
                      }
                      else
                      {
                        v540 = *((_QWORD *)v538 + 2);
                        v541 = v537;
                        do
                        {
                          v542 = result + 1;
                          *(float *)(v531 + 4 * result) = (float)v530[v529];
                          v529 += v540;
                          ++result;
                          --v541;
                        }
                        while (v541);
                      }
                      v529 += v539;
                      ++v536;
                      result = v542;
                    }
                    while (v536 != (_DWORD)v532);
                  }
                  v529 += v535;
                  ++v528;
                  result = v542;
                }
                while (v528 != v527);
              }
              break;
            case 4:
              v543 = *v171;
              if (*v171 >= 1)
              {
                v544 = 0;
                result = 0;
                v545 = 0;
                v546 = v170[19];
                v547 = v3[19];
                v548 = v171[1];
                v549 = v170[3];
                v550 = *((_QWORD *)v549 + 1);
                v551 = *(_QWORD *)v549 - v550 * v548;
                do
                {
                  if ((int)v548 < 1)
                  {
                    v562 = result;
                  }
                  else
                  {
                    v552 = 0;
                    v553 = v171[2];
                    v554 = v170[3];
                    v555 = v550 - *((_QWORD *)v549 + 2) * v553;
                    do
                    {
                      if ((int)v553 < 1)
                      {
                        v562 = result;
                      }
                      else
                      {
                        v556 = 0;
                        v557 = v171[3];
                        v558 = v170[3];
                        v559 = *((_QWORD *)v554 + 2) - *((_QWORD *)v554 + 3) * v557;
                        do
                        {
                          if ((int)v557 < 1)
                          {
                            v562 = result;
                          }
                          else
                          {
                            v560 = *((_QWORD *)v558 + 3);
                            v561 = v557;
                            do
                            {
                              v562 = result + 1;
                              *(float *)(v547 + 4 * result) = (float)v546[v545];
                              v545 += v560;
                              ++result;
                              --v561;
                            }
                            while (v561);
                          }
                          v545 += v559;
                          ++v556;
                          result = v562;
                        }
                        while (v556 != (_DWORD)v553);
                      }
                      v545 += v555;
                      ++v552;
                      result = v562;
                    }
                    while (v552 != (_DWORD)v548);
                  }
                  v545 += v551;
                  ++v544;
                  result = v562;
                }
                while (v544 != v543);
              }
              break;
            default:
              v506 = v3[6];
              if (v506)
              {
                v507 = 0;
                v508 = v170[19];
                v509 = v3[19];
                v510 = ((unint64_t)v172 >> 2) - 1;
                v511 = v170[3];
                do
                {
                  v512 = 0;
                  if ((v510 & 0x80000000) == 0)
                  {
                    v513 = v510;
                    LODWORD(result) = v507;
                    do
                    {
                      v514 = ldiv((int)result, v171[v513]);
                      result = v514.quot;
                      v512 += *(_QWORD *)&v511[2 * v513--] * v514.rem;
                    }
                    while (v513 != -1);
                  }
                  *(float *)(v509 + 4 * v507++) = (float)v508[v512];
                }
                while (v507 != v506);
              }
              break;
          }
          break;
        case 3:
          v177 = *(unsigned int ***)result;
          v179 = **(_QWORD **)result;
          v178 = *(_QWORD *)(*(_QWORD *)result + 8);
          v180 = v178 - v179;
          switch((v178 - v179) >> 2)
          {
            case 1:
              v181 = (v180 << 30) - 0x100000000;
              v182 = *(_DWORD *)(v179 + (v181 >> 30));
              if (v182 >= 1)
              {
                v183 = v181 >> 29;
                v184 = *(_QWORD *)((char *)v177[3] + v183);
                v185 = *(_QWORD *)(v3[3] + v183);
                v186 = (float *)v3[19];
                v187 = v177[19];
                v188 = 4 * v185;
                v189 = 4 * v184;
                do
                {
                  *v186 = (float)*v187;
                  v186 = (float *)((char *)v186 + v188);
                  v187 = (unsigned int *)((char *)v187 + v189);
                  --v182;
                }
                while (v182);
              }
              break;
            case 2:
              v1301 = (v180 << 30) - 0x200000000;
              v1302 = *(_DWORD *)(v179 + (v1301 >> 30));
              if (v1302 >= 1)
              {
                v1303 = 0;
                v1304 = 0;
                v1305 = 0;
                v1306 = v177[3];
                v1307 = v1301 >> 29;
                v1308 = *(_QWORD *)((char *)v1306 + v1307);
                v1309 = v3[3];
                result = *(_QWORD *)(v1309 + v1307);
                v1310 = (v180 << 30) - 0x100000000;
                v1311 = *(_QWORD *)((char *)v1306 + (v1310 >> 29));
                v1312 = *(_QWORD *)(v1309 + (v1310 >> 29));
                v1313 = *(_DWORD *)(v179 + (v1310 >> 30));
                v1314 = 4 * result;
                v1315 = 4 * v1312;
                v1316 = 4 * v1308;
                v1317 = 4 * v1311;
                do
                {
                  if (v1313 >= 1)
                  {
                    result = v3[19] + v1304;
                    v1318 = (unsigned int *)((char *)v177[19] + v1303);
                    v1319 = v1313;
                    do
                    {
                      *(float *)result = (float)*v1318;
                      result += v1315;
                      v1318 = (unsigned int *)((char *)v1318 + v1317);
                      --v1319;
                    }
                    while (v1319);
                  }
                  ++v1305;
                  v1304 += v1314;
                  v1303 += v1316;
                }
                while (v1305 != v1302);
              }
              break;
            case 3:
              v1320 = (v180 << 30) - 0x300000000;
              v1321 = *(_DWORD *)(v179 + (v1320 >> 30));
              if (v1321 >= 1)
              {
                v1322 = 0;
                v1323 = 0;
                v1324 = 0;
                v1325 = v177[3];
                v1326 = v1320 >> 29;
                v1327 = *(_QWORD *)((char *)v1325 + v1326);
                v1328 = v3[3];
                v1329 = *(_QWORD *)(v1328 + v1326);
                v1330 = v180 << 30;
                v1331 = (v180 << 30) - 0x200000000;
                v1332 = *(_QWORD *)((char *)v1325 + (v1331 >> 29));
                v1333 = *(_QWORD *)(v1328 + (v1331 >> 29));
                v1334 = *(_DWORD *)(v179 + (v1331 >> 30));
                v1335 = (v1330 - 0x100000000) >> 32;
                v1336 = 4 * v1329;
                v1337 = 4 * v1333;
                result = 4 * v1327;
                v1338 = 4 * v1332;
                do
                {
                  if (v1334 >= 1)
                  {
                    v1339 = 0;
                    v1340 = *(_DWORD *)(v179 + 4 * v1335);
                    v1341 = (_QWORD *)*a2;
                    v1342 = 4 * *(_QWORD *)(v1328 + 8 * v1335);
                    v1343 = 4 * *(_QWORD *)&v1325[2 * v1335];
                    v1344 = v1322;
                    v1345 = v1323;
                    do
                    {
                      if (v1340 >= 1)
                      {
                        v1346 = (float *)(v1341[19] + v1345);
                        v1347 = (unsigned int *)((char *)v177[19] + v1344);
                        v1348 = v1340;
                        do
                        {
                          *v1346 = (float)*v1347;
                          v1346 = (float *)((char *)v1346 + v1342);
                          v1347 = (unsigned int *)((char *)v1347 + v1343);
                          --v1348;
                        }
                        while (v1348);
                      }
                      ++v1339;
                      v1345 += v1337;
                      v1344 += v1338;
                    }
                    while (v1339 != v1334);
                  }
                  ++v1324;
                  v1323 += v1336;
                  v1322 += result;
                }
                while (v1324 != v1321);
              }
              break;
            case 4:
              v1349 = (v180 << 30) - 0x400000000;
              v1578 = *(_DWORD *)(v179 + (v1349 >> 30));
              if (v1578 >= 1)
              {
                v1350 = 0;
                v1351 = 0;
                v1352 = 0;
                v1353 = v177[3];
                v1354 = v1349 >> 29;
                v1355 = v180 << 30;
                v1356 = v3[3];
                v1357 = (v1355 - 0x300000000) >> 29;
                v1358 = *(_QWORD *)((char *)v1353 + v1357);
                v1359 = v1355 - 0x200000000;
                v1360 = v1355 - 0x100000000;
                v1361 = *(_QWORD *)(v1356 + v1357);
                v1362 = *(_DWORD *)(v179 + ((v1355 - 0x300000000) >> 30));
                v1363 = v1359 >> 32;
                v1364 = v1360 >> 32;
                v1561 = 4 * *(_QWORD *)(v1356 + v1354);
                result = 4 * v1361;
                v1544 = 4 * *(_QWORD *)((char *)v1353 + v1354);
                v1365 = 4 * v1358;
                do
                {
                  if (v1362 >= 1)
                  {
                    v1366 = 0;
                    v1367 = *(_DWORD *)(v179 + 4 * v1363);
                    v1368 = 4 * *(_QWORD *)(v1356 + 8 * v1363);
                    v1369 = 4 * *(_QWORD *)&v1353[2 * v1363];
                    v1370 = v1350;
                    v1371 = v1351;
                    do
                    {
                      if (v1367 >= 1)
                      {
                        v1372 = 0;
                        v1373 = *(_DWORD *)(v179 + 4 * v1364);
                        v1374 = (_QWORD *)*a2;
                        v1375 = 4 * *(_QWORD *)(v1356 + 8 * v1364);
                        v1376 = 4 * *(_QWORD *)&v1353[2 * v1364];
                        v1377 = v1370;
                        v1378 = v1371;
                        do
                        {
                          if (v1373 >= 1)
                          {
                            v1379 = (float *)(v1374[19] + v1378);
                            v1380 = (unsigned int *)((char *)v177[19] + v1377);
                            v1381 = v1373;
                            do
                            {
                              *v1379 = (float)*v1380;
                              v1379 = (float *)((char *)v1379 + v1375);
                              v1380 = (unsigned int *)((char *)v1380 + v1376);
                              --v1381;
                            }
                            while (v1381);
                          }
                          ++v1372;
                          v1378 += v1368;
                          v1377 += v1369;
                        }
                        while (v1372 != v1367);
                      }
                      ++v1366;
                      v1371 += result;
                      v1370 += v1365;
                    }
                    while (v1366 != v1362);
                  }
                  ++v1352;
                  v1351 += v1561;
                  v1350 += v1544;
                }
                while (v1352 != v1578);
              }
              break;
            case 5:
              v1382 = (v180 << 30) - 0x500000000;
              v1492 = *(_DWORD *)(v179 + (v1382 >> 30));
              if (v1492 >= 1)
              {
                v1512 = 0;
                v1528 = 0;
                v1502 = 0;
                v1383 = v177[3];
                v1384 = v1382 >> 29;
                v1385 = v3[3];
                v1386 = (v180 << 30) - 0x400000000;
                result = *(_QWORD *)((char *)v1383 + (v1386 >> 29));
                v1579 = *(_DWORD *)(v179 + (v1386 >> 30));
                v1462 = (uint64_t)((v180 << 30) - 0x300000000) >> 32;
                v1387 = (uint64_t)((v180 << 30) - 0x200000000) >> 32;
                v1388 = (uint64_t)((v180 << 30) - 0x100000000) >> 32;
                v1482 = 4 * *(_QWORD *)(v1385 + v1384);
                v1562 = 4 * *(_QWORD *)(v1385 + (v1386 >> 29));
                v1472 = 4 * *(_QWORD *)((char *)v1383 + v1384);
                v1545 = 4 * result;
                do
                {
                  if (v1579 >= 1)
                  {
                    v1389 = 0;
                    v1390 = *(_DWORD *)(v179 + 4 * v1462);
                    v1391 = 4 * *(_QWORD *)(v1385 + 8 * v1462);
                    v1392 = 4 * *(_QWORD *)&v1383[2 * v1462];
                    v1394 = v1512;
                    v1393 = v1528;
                    do
                    {
                      if (v1390 >= 1)
                      {
                        v1395 = 0;
                        v1396 = *(_DWORD *)(v179 + 4 * v1387);
                        v1397 = 4 * *(_QWORD *)(v1385 + 8 * v1387);
                        v1398 = 4 * *(_QWORD *)&v1383[2 * v1387];
                        v1399 = v1393;
                        v1400 = v1394;
                        do
                        {
                          if (v1396 >= 1)
                          {
                            v1401 = 0;
                            v1402 = *(_DWORD *)(v179 + 4 * v1388);
                            v1403 = (_QWORD *)*a2;
                            v1404 = 4 * *(_QWORD *)(v1385 + 8 * v1388);
                            v1405 = 4 * *(_QWORD *)&v1383[2 * v1388];
                            v1406 = v1399;
                            v1407 = v1400;
                            do
                            {
                              if (v1402 >= 1)
                              {
                                v1408 = (float *)(v1403[19] + v1407);
                                v1409 = (unsigned int *)((char *)v177[19] + v1406);
                                LODWORD(result) = v1402;
                                do
                                {
                                  *v1408 = (float)*v1409;
                                  v1408 = (float *)((char *)v1408 + v1404);
                                  v1409 = (unsigned int *)((char *)v1409 + v1405);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1401;
                              v1407 += v1397;
                              v1406 += v1398;
                            }
                            while (v1401 != v1396);
                          }
                          ++v1395;
                          v1400 += v1391;
                          v1399 += v1392;
                        }
                        while (v1395 != v1390);
                      }
                      ++v1389;
                      v1394 += v1562;
                      v1393 += v1545;
                    }
                    while (v1389 != v1579);
                  }
                  v1512 += v1482;
                  v1528 += v1472;
                  ++v1502;
                }
                while (v1502 != v1492);
              }
              break;
            default:
              LODWORD(v1264) = 1;
              v1265 = -20;
              do
              {
                v1264 = *(int *)(v178 + v1265) * (uint64_t)(int)v1264;
                v1265 += 4;
              }
              while (v1265);
              v1438 = v177[6];
              if (v1438)
              {
                result = 0;
                v1481 = *v3;
                v1266 = (v180 << 30) - 0x500000000;
                v1428 = (v180 >> 2) - 1;
                v1267 = v177[3];
                v1423 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1268 = v3[3];
                v1491 = *(_DWORD *)(v179 + (v1266 >> 30));
                v1418 = (uint64_t)((v180 << 30) - 0x400000000) >> 32;
                v1269 = (uint64_t)((v180 << 30) - 0x200000000) >> 32;
                v1270 = (uint64_t)((v180 << 30) - 0x100000000) >> 32;
                v1471 = 4 * *(_QWORD *)(v1268 + (v1266 >> 29));
                v1452 = (uint64_t)((v180 << 30) - 0x300000000) >> 32;
                v1461 = 4 * *(_QWORD *)((char *)v1267 + (v1266 >> 29));
                v1433 = v1264;
                do
                {
                  v1271 = v1428;
                  v1443 = result;
                  v1272 = 0;
                  if ((v1428 & 0x80000000) != 0)
                  {
                    v1273 = v1423;
                  }
                  else
                  {
                    v1273 = v1423;
                    do
                    {
                      v1274 = ldiv((int)result, *(int *)(v179 + 4 * v1271));
                      LODWORD(result) = v1274.quot;
                      v1272 += *(_QWORD *)&v1267[2 * v1271--] * v1274.rem;
                    }
                    while (v1271 != -1);
                  }
                  v1275 = 0;
                  if ((v1273 & 0x80000000) == 0)
                  {
                    v1276 = v1443;
                    do
                    {
                      v1277 = ldiv(v1276, *(int *)(v1481 + 4 * v1273));
                      v1276 = v1277.quot;
                      v1275 += *(_QWORD *)(v1268 + 8 * v1273--) * v1277.rem;
                    }
                    while (v1273 != -1);
                  }
                  if (v1491 >= 1)
                  {
                    v1278 = 0;
                    v1577 = *(_DWORD *)(v179 + 4 * v1418);
                    v1527 = 4 * v1275;
                    v1560 = 4 * *(_QWORD *)(v1268 + 8 * v1418);
                    v1511 = 4 * v1272;
                    v1543 = 4 * *(_QWORD *)&v1267[2 * v1418];
                    do
                    {
                      v1501 = v1278;
                      if (v1577 >= 1)
                      {
                        v1279 = 0;
                        v1280 = *(_DWORD *)(v179 + 4 * v1452);
                        v1281 = 4 * *(_QWORD *)(v1268 + 8 * v1452);
                        v1282 = 4 * *(_QWORD *)&v1267[2 * v1452];
                        v1284 = v1511;
                        v1283 = v1527;
                        do
                        {
                          if (v1280 >= 1)
                          {
                            v1285 = 0;
                            v1286 = *(_DWORD *)(v179 + 4 * v1269);
                            v1287 = 4 * *(_QWORD *)(v1268 + 8 * v1269);
                            v1288 = 4 * *(_QWORD *)&v1267[2 * v1269];
                            v1289 = v1284;
                            v1290 = v1283;
                            do
                            {
                              if (v1286 >= 1)
                              {
                                v1291 = 0;
                                v1292 = *(_DWORD *)(v179 + 4 * v1270);
                                v1293 = (_QWORD *)*a2;
                                v1294 = 4 * *(_QWORD *)(v1268 + 8 * v1270);
                                v1295 = 4 * *(_QWORD *)&v1267[2 * v1270];
                                v1296 = v1289;
                                v1297 = v1290;
                                do
                                {
                                  if (v1292 >= 1)
                                  {
                                    v1298 = (float *)(v1293[19] + v1297);
                                    v1299 = (unsigned int *)((char *)v177[19] + v1296);
                                    v1300 = v1292;
                                    do
                                    {
                                      *v1298 = (float)*v1299;
                                      v1298 = (float *)((char *)v1298 + v1294);
                                      v1299 = (unsigned int *)((char *)v1299 + v1295);
                                      --v1300;
                                    }
                                    while (v1300);
                                  }
                                  ++v1291;
                                  v1297 += v1287;
                                  v1296 += v1288;
                                }
                                while (v1291 != v1286);
                              }
                              ++v1285;
                              v1290 += v1281;
                              v1289 += v1282;
                            }
                            while (v1285 != v1280);
                          }
                          ++v1279;
                          v1283 += v1560;
                          v1284 += v1543;
                        }
                        while (v1279 != v1577);
                      }
                      v1278 = v1501 + 1;
                      v1527 += v1471;
                      v1511 += v1461;
                    }
                    while (v1501 + 1 != v1491);
                  }
                  result = v1443 + v1433;
                }
                while ((unint64_t)v1438 > v1443 + v1433);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<signed char>(uint64_t result, uint64_t **a2, int a3)
{
  uint64_t *v3;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  float *v24;
  size_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  BOOL *v28;
  int v29;
  uint64_t *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  BOOL *v35;
  uint64_t v36;
  unsigned int **v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL *v46;
  unsigned int *v47;
  int **v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  int **v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  int *v66;
  uint64_t v67;
  char *v68;
  _DWORD *v69;
  int v70;
  int **v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int **v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  unsigned int *v88;
  uint64_t v89;
  int **v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  int **v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  int *v108;
  uint64_t v109;
  char *v110;
  _DWORD *v111;
  int v112;
  int **v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int **v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  _QWORD *v134;
  uint64_t v135;
  int **v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  _QWORD *v141;
  uint64_t v142;
  unsigned int **v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  float *v157;
  int v158;
  int **v159;
  int *v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  float *v164;
  uint64_t v165;
  unsigned int **v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float *v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  ldiv_t v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  int *v236;
  uint64_t v237;
  int *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int *v242;
  ldiv_t v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  int *v248;
  uint64_t v249;
  int v250;
  int *v251;
  uint64_t v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  int *v257;
  uint64_t v258;
  int v259;
  int i;
  int v261;
  uint64_t v262;
  int *v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  int *v269;
  uint64_t v270;
  int v271;
  int j;
  int v273;
  int k;
  int v275;
  uint64_t v276;
  int *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int *v282;
  uint64_t v283;
  uint64_t v284;
  int *v285;
  uint64_t v286;
  uint64_t v287;
  ldiv_t v288;
  int v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  int *v293;
  uint64_t v294;
  int *v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  int *v303;
  uint64_t v304;
  int *v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  int *v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  int *v319;
  uint64_t v320;
  int *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  int v325;
  int *v326;
  uint64_t v327;
  int v328;
  int v329;
  int *v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  int *v337;
  uint64_t v338;
  int *v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int *v343;
  ldiv_t v344;
  int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  int *v349;
  uint64_t v350;
  int v351;
  int *v352;
  uint64_t v353;
  int v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  int *v358;
  uint64_t v359;
  int v360;
  int m;
  int v362;
  uint64_t v363;
  int *v364;
  uint64_t v365;
  int v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  int *v370;
  uint64_t v371;
  int v372;
  int n;
  int v374;
  int ii;
  int v376;
  uint64_t v377;
  int *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int *v383;
  uint64_t v384;
  uint64_t v385;
  int *v386;
  uint64_t v387;
  uint64_t v388;
  ldiv_t v389;
  int v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  int *v394;
  uint64_t v395;
  int *v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  int *v404;
  uint64_t v405;
  int *v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  int v410;
  int *v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  int *v420;
  uint64_t v421;
  int *v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v426;
  int *v427;
  uint64_t v428;
  int v429;
  int v430;
  int *v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int *v439;
  uint64_t v440;
  uint64_t v441;
  int *v442;
  uint64_t v443;
  uint64_t v444;
  ldiv_t v445;
  int v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  int *v450;
  uint64_t v451;
  uint64_t v452;
  int *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  int v458;
  int v459;
  uint64_t v460;
  int *v461;
  uint64_t v462;
  uint64_t v463;
  int *v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  int *v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  uint64_t v473;
  int v474;
  int v475;
  uint64_t v476;
  int *v477;
  uint64_t v478;
  uint64_t v479;
  int *v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  uint64_t v484;
  int *v485;
  uint64_t v486;
  int v487;
  uint64_t v488;
  int *v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int *v496;
  uint64_t v497;
  uint64_t v498;
  int *v499;
  uint64_t v500;
  uint64_t v501;
  ldiv_t v502;
  int v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  int *v507;
  uint64_t v508;
  uint64_t v509;
  int *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  int v515;
  int v516;
  uint64_t v517;
  int *v518;
  uint64_t v519;
  uint64_t v520;
  int *v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  int *v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  int v531;
  int v532;
  uint64_t v533;
  int *v534;
  uint64_t v535;
  uint64_t v536;
  int *v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  int *v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  int *v546;
  uint64_t v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unsigned int *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  ldiv_t v560;
  uint64_t v561;
  uint64_t v562;
  ldiv_t v563;
  int v564;
  int v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  uint64_t v581;
  uint64_t *v582;
  uint64_t v583;
  unsigned int *v584;
  int v585;
  uint64_t v586;
  int v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  unsigned int *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  unsigned int *v599;
  int v600;
  uint64_t v601;
  int v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unsigned int *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  uint64_t v623;
  uint64_t *v624;
  uint64_t v625;
  unsigned int *v626;
  int v627;
  uint64_t v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  unsigned int *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  int v650;
  uint64_t v651;
  uint64_t *v652;
  uint64_t v653;
  unsigned int *v654;
  int v655;
  uint64_t v656;
  unsigned int *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  int v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  uint64_t v673;
  int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t *v679;
  uint64_t v680;
  unsigned int *v681;
  int v682;
  uint64_t v683;
  uint64_t v684;
  _QWORD *v685;
  int *v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  ldiv_t v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  int quot;
  ldiv_t v698;
  uint64_t v699;
  int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  int v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  int v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  int v726;
  int v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  int v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  unsigned int *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  ldiv_t v756;
  uint64_t v757;
  uint64_t v758;
  ldiv_t v759;
  int v760;
  int v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  int v766;
  int v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  int v771;
  int v772;
  uint64_t v773;
  uint64_t *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  int v778;
  unsigned int *v779;
  _DWORD *v780;
  uint64_t v781;
  int v782;
  uint64_t v783;
  int v784;
  uint64_t v785;
  unsigned int *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unsigned int *v795;
  _DWORD *v796;
  uint64_t v797;
  int v798;
  uint64_t v799;
  int v800;
  uint64_t v801;
  uint64_t v802;
  unsigned int *v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  int v816;
  int v817;
  uint64_t v818;
  uint64_t *v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  int v823;
  unsigned int *v824;
  _DWORD *v825;
  uint64_t v826;
  uint64_t v827;
  int v828;
  uint64_t v829;
  uint64_t v830;
  unsigned int *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  int v838;
  int v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int v844;
  int v845;
  uint64_t v846;
  uint64_t *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  int v851;
  unsigned int *v852;
  _DWORD *v853;
  uint64_t v854;
  uint64_t v855;
  unsigned int *v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  int v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  int v866;
  int v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  int v872;
  int v873;
  uint64_t v874;
  uint64_t *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  int v879;
  unsigned int *v880;
  _DWORD *v881;
  uint64_t v882;
  uint64_t v883;
  _QWORD *v884;
  int *v885;
  unint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  ldiv_t v890;
  uint64_t v891;
  unint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  int v896;
  ldiv_t v897;
  uint64_t v898;
  int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  int v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  int v918;
  int v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  int v925;
  int v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  int v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  int v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  unsigned int *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  ldiv_t v955;
  uint64_t v956;
  uint64_t v957;
  ldiv_t v958;
  int v959;
  int v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  int v965;
  int v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  int v970;
  int v971;
  uint64_t v972;
  uint64_t *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  int v977;
  unsigned int *v978;
  _DWORD *v979;
  uint64_t v980;
  int v981;
  uint64_t v982;
  int v983;
  uint64_t v984;
  unsigned int *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  unsigned int *v994;
  _DWORD *v995;
  uint64_t v996;
  int v997;
  uint64_t v998;
  int v999;
  uint64_t v1000;
  uint64_t v1001;
  unsigned int *v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  int v1015;
  int v1016;
  uint64_t v1017;
  uint64_t *v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  int v1022;
  unsigned int *v1023;
  _DWORD *v1024;
  uint64_t v1025;
  uint64_t v1026;
  int v1027;
  uint64_t v1028;
  uint64_t v1029;
  unsigned int *v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  int v1037;
  int v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  int v1043;
  int v1044;
  uint64_t v1045;
  uint64_t *v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  int v1050;
  unsigned int *v1051;
  _DWORD *v1052;
  uint64_t v1053;
  uint64_t v1054;
  unsigned int *v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  int v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  int v1065;
  int v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  int v1071;
  int v1072;
  uint64_t v1073;
  uint64_t *v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  int v1078;
  unsigned int *v1079;
  _DWORD *v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  unsigned int *v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  ldiv_t v1091;
  uint64_t v1092;
  ldiv_t v1093;
  int v1094;
  int v1095;
  uint64_t v1096;
  int v1097;
  uint64_t v1098;
  uint64_t v1099;
  int v1100;
  uint64_t v1101;
  int v1102;
  uint64_t v1103;
  uint64_t v1104;
  int v1105;
  uint64_t v1106;
  int v1107;
  uint64_t *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unsigned int *v1112;
  _QWORD *v1113;
  int v1114;
  uint64_t v1115;
  int v1116;
  uint64_t v1117;
  int v1118;
  uint64_t v1119;
  uint64_t v1120;
  unsigned int *v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  int v1127;
  uint64_t v1128;
  uint64_t v1129;
  _QWORD *v1130;
  int v1131;
  uint64_t v1132;
  int v1133;
  uint64_t v1134;
  int v1135;
  uint64_t v1136;
  uint64_t v1137;
  unsigned int *v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  int v1148;
  uint64_t v1149;
  uint64_t v1150;
  int v1151;
  uint64_t v1152;
  int v1153;
  uint64_t *v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  unsigned int *v1158;
  _QWORD *v1159;
  int v1160;
  uint64_t v1161;
  uint64_t v1162;
  int v1163;
  uint64_t v1164;
  unsigned int *v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  int v1173;
  uint64_t v1174;
  int v1175;
  uint64_t v1176;
  int v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  int v1181;
  uint64_t v1182;
  int v1183;
  uint64_t *v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  unsigned int *v1188;
  _QWORD *v1189;
  int v1190;
  uint64_t v1191;
  unsigned int *v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  int v1197;
  uint64_t v1198;
  int v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  int v1203;
  uint64_t v1204;
  int v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  int v1209;
  uint64_t v1210;
  int v1211;
  uint64_t *v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  unsigned int *v1216;
  uint64_t *v1217;
  int v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  unsigned int *v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  ldiv_t v1229;
  uint64_t v1230;
  ldiv_t v1231;
  int v1232;
  int v1233;
  uint64_t v1234;
  int v1235;
  uint64_t v1236;
  uint64_t v1237;
  int v1238;
  uint64_t v1239;
  int v1240;
  uint64_t v1241;
  uint64_t v1242;
  int v1243;
  uint64_t v1244;
  int v1245;
  uint64_t *v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  unsigned int *v1250;
  float *v1251;
  int v1252;
  uint64_t v1253;
  int v1254;
  uint64_t v1255;
  int v1256;
  uint64_t v1257;
  uint64_t v1258;
  unsigned int *v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  int v1265;
  uint64_t v1266;
  uint64_t v1267;
  float *v1268;
  int v1269;
  uint64_t v1270;
  int v1271;
  uint64_t v1272;
  int v1273;
  uint64_t v1274;
  uint64_t v1275;
  unsigned int *v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  int v1286;
  uint64_t v1287;
  uint64_t v1288;
  int v1289;
  uint64_t v1290;
  int v1291;
  uint64_t *v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  unsigned int *v1296;
  float *v1297;
  int v1298;
  uint64_t v1299;
  uint64_t v1300;
  int v1301;
  uint64_t v1302;
  unsigned int *v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  int v1311;
  uint64_t v1312;
  int v1313;
  uint64_t v1314;
  int v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  int v1319;
  uint64_t v1320;
  int v1321;
  uint64_t *v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  unsigned int *v1326;
  float *v1327;
  int v1328;
  uint64_t v1329;
  unsigned int *v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  int v1335;
  uint64_t v1336;
  int v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  int v1341;
  uint64_t v1342;
  int v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  int v1347;
  uint64_t v1348;
  int v1349;
  uint64_t *v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  unsigned int *v1354;
  float *v1355;
  int v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  unsigned int *v1382;
  unsigned int *v1383;
  unsigned int *v1384;
  unsigned int *v1385;
  unsigned int *v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  int v1422;
  int v1423;
  int v1424;
  int v1425;
  int v1426;
  int v1427;
  int v1428;
  int v1429;
  int v1430;
  int v1431;
  int v1432;
  int v1433;
  int v1434;
  int v1435;
  int v1436;
  int v1437;
  int v1438;
  int v1439;
  int v1440;
  int v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  _QWORD *v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  _QWORD *v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t *v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t *v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  int v1512;
  int v1513;
  int v1514;
  uint64_t v1515;
  int v1516;
  int v1517;
  int v1518;
  uint64_t v1519;
  int v1520;
  int v1521;
  int v1522;
  int v1523;
  int v1524;
  int v1525;
  int v1526;
  int v1527;
  int v1528;

  v3 = *a2;
  v5 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v6 = v3[6];
          if (v6)
            result = (uint64_t)memset((void *)v3[19], **(_BYTE **)(*(_QWORD *)result + 152) != 0, v6);
          break;
        case 1:
          v26 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v26)
          {
            v27 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v28 = (BOOL *)v3[19];
            do
            {
              v29 = *v27++;
              *v28++ = v29 != 0;
              --v26;
            }
            while (v26);
          }
          break;
        case 2:
          v30 = *(uint64_t **)result;
          v31 = **(int ***)result;
          v32 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v31;
          switch(v32 >> 2)
          {
            case 1:
              v33 = *v31;
              if ((int)v33 >= 1)
              {
                v34 = (_BYTE *)v30[19];
                v35 = (BOOL *)v3[19];
                v36 = *(_QWORD *)v30[3];
                do
                {
                  *v35++ = *v34 != 0;
                  v34 += v36;
                  --v33;
                }
                while (v33);
              }
              break;
            case 2:
              v187 = *v31;
              if (*v31 >= 1)
              {
                v188 = 0;
                v189 = 0;
                v190 = 0;
                v191 = v30[19];
                v192 = v3[19];
                v193 = v31[1];
                v194 = (uint64_t *)v30[3];
                v196 = *v194;
                v195 = v194[1];
                v197 = v196 - v195 * v193;
                do
                {
                  v198 = v193;
                  if ((int)v193 >= 1)
                  {
                    do
                    {
                      result = *(_BYTE *)(v191 + v190) != 0;
                      *(_BYTE *)(v192 + v189++) = result;
                      v190 += v195;
                      --v198;
                    }
                    while (v198);
                  }
                  v190 += v197;
                  ++v188;
                }
                while (v188 != v187);
              }
              break;
            case 3:
              v199 = *v31;
              if (*v31 >= 1)
              {
                v200 = 0;
                result = 0;
                v201 = 0;
                v202 = v30[19];
                v203 = v3[19];
                v204 = v31[1];
                v205 = (_QWORD *)v30[3];
                v206 = v205[1];
                v207 = *v205 - v206 * v204;
                do
                {
                  if ((int)v204 < 1)
                  {
                    v214 = result;
                  }
                  else
                  {
                    v208 = 0;
                    v209 = v31[2];
                    v210 = v30[3];
                    v211 = v206 - v205[2] * v209;
                    do
                    {
                      if ((int)v209 < 1)
                      {
                        v214 = result;
                      }
                      else
                      {
                        v212 = *(_QWORD *)(v210 + 16);
                        v213 = v209;
                        do
                        {
                          v214 = result + 1;
                          *(_BYTE *)(v203 + result) = *(_BYTE *)(v202 + v201) != 0;
                          v201 += v212;
                          ++result;
                          --v213;
                        }
                        while (v213);
                      }
                      v201 += v211;
                      ++v208;
                      result = v214;
                    }
                    while (v208 != (_DWORD)v204);
                  }
                  v201 += v207;
                  ++v200;
                  result = v214;
                }
                while (v200 != v199);
              }
              break;
            case 4:
              v215 = *v31;
              if (*v31 >= 1)
              {
                v216 = 0;
                result = 0;
                v217 = 0;
                v218 = v30[19];
                v219 = v3[19];
                v220 = v31[1];
                v221 = (_QWORD *)v30[3];
                v222 = v221[1];
                v223 = *v221 - v222 * v220;
                do
                {
                  if ((int)v220 < 1)
                  {
                    v234 = result;
                  }
                  else
                  {
                    v224 = 0;
                    v225 = v31[2];
                    v226 = v30[3];
                    v227 = v222 - v221[2] * v225;
                    do
                    {
                      if ((int)v225 < 1)
                      {
                        v234 = result;
                      }
                      else
                      {
                        v228 = 0;
                        v229 = v31[3];
                        v230 = v30[3];
                        v231 = *(_QWORD *)(v226 + 16) - *(_QWORD *)(v226 + 24) * v229;
                        do
                        {
                          if ((int)v229 < 1)
                          {
                            v234 = result;
                          }
                          else
                          {
                            v232 = *(_QWORD *)(v230 + 24);
                            v233 = v229;
                            do
                            {
                              v234 = result + 1;
                              *(_BYTE *)(v219 + result) = *(_BYTE *)(v218 + v217) != 0;
                              v217 += v232;
                              ++result;
                              --v233;
                            }
                            while (v233);
                          }
                          v217 += v231;
                          ++v228;
                          result = v234;
                        }
                        while (v228 != (_DWORD)v225);
                      }
                      v217 += v227;
                      ++v224;
                      result = v234;
                    }
                    while (v224 != (_DWORD)v220);
                  }
                  v217 += v223;
                  ++v216;
                  result = v234;
                }
                while (v216 != v215);
              }
              break;
            default:
              v178 = v3[6];
              if (v178)
              {
                v179 = 0;
                v180 = v30[19];
                v181 = v3[19];
                v182 = ((unint64_t)v32 >> 2) - 1;
                v183 = v30[3];
                do
                {
                  v184 = 0;
                  if ((v182 & 0x80000000) == 0)
                  {
                    v185 = v182;
                    LODWORD(result) = v179;
                    do
                    {
                      v186 = ldiv((int)result, v31[v185]);
                      result = v186.quot;
                      v184 += *(_QWORD *)(v183 + 8 * v185--) * v186.rem;
                    }
                    while (v185 != -1);
                  }
                  *(_BYTE *)(v181 + v179++) = *(_BYTE *)(v180 + v184) != 0;
                }
                while (v179 != v178);
              }
              break;
          }
          break;
        case 3:
          v37 = *(unsigned int ***)result;
          v39 = **(_QWORD **)result;
          v38 = *(_QWORD *)(*(_QWORD *)result + 8);
          v40 = v38 - v39;
          switch((v38 - v39) >> 2)
          {
            case 1:
              v41 = (v40 << 30) - 0x100000000;
              v42 = *(_DWORD *)(v39 + (v41 >> 30));
              if (v42 >= 1)
              {
                v43 = v41 >> 29;
                v44 = *(_QWORD *)((char *)v37[3] + (v41 >> 29));
                v45 = *(_QWORD *)(v3[3] + v43);
                v46 = (BOOL *)v3[19];
                v47 = v37[19];
                do
                {
                  *v46 = *(_BYTE *)v47 != 0;
                  v47 = (unsigned int *)((char *)v47 + v44);
                  v46 += v45;
                  --v42;
                }
                while (v42);
              }
              break;
            case 2:
              v586 = (v40 << 30) - 0x200000000;
              v587 = *(_DWORD *)(v39 + (v586 >> 30));
              if (v587 >= 1)
              {
                v588 = 0;
                v589 = 0;
                v590 = 0;
                v591 = v37[3];
                v592 = v586 >> 29;
                v593 = *(_QWORD *)((char *)v591 + (v586 >> 29));
                v594 = v3[3];
                v595 = *(_QWORD *)(v594 + v592);
                result = (v40 << 30) - 0x100000000;
                v596 = *(_QWORD *)((char *)v591 + (result >> 29));
                v597 = *(_QWORD *)(v594 + (result >> 29));
                v598 = *(_DWORD *)(v39 + (result >> 30));
                do
                {
                  if (v598 >= 1)
                  {
                    result = v3[19];
                    v599 = v37[19];
                    v600 = v598;
                    do
                    {
                      *(_BYTE *)(result + v590) = *((_BYTE *)v599 + v589) != 0;
                      result += v597;
                      v599 = (unsigned int *)((char *)v599 + v596);
                      --v600;
                    }
                    while (v600);
                  }
                  v589 += v593;
                  v590 += v595;
                  ++v588;
                }
                while (v588 != v587);
              }
              break;
            case 3:
              v601 = (v40 << 30) - 0x300000000;
              v602 = *(_DWORD *)(v39 + (v601 >> 30));
              if (v602 >= 1)
              {
                v603 = 0;
                v604 = 0;
                v605 = 0;
                v606 = v40 << 30;
                v607 = v37[3];
                v608 = v601 >> 29;
                v609 = *(_QWORD *)((char *)v607 + (v601 >> 29));
                v610 = v3[3];
                v611 = *(_QWORD *)(v610 + v608);
                v612 = v606 - 0x200000000;
                v613 = (v606 - 0x200000000) >> 29;
                v614 = v606 - 0x100000000;
                v615 = *(_QWORD *)((char *)v607 + v613);
                v616 = *(_QWORD *)(v610 + v613);
                result = *(unsigned int *)(v39 + (v612 >> 30));
                v617 = v614 >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    v618 = 0;
                    v619 = *(_QWORD *)&v607[2 * v617];
                    v620 = *(_QWORD *)(v610 + 8 * v617);
                    v621 = v604;
                    v622 = *(_DWORD *)(v39 + 4 * v617);
                    v623 = v605;
                    v624 = *a2;
                    do
                    {
                      if (v622 >= 1)
                      {
                        v625 = v624[19];
                        v626 = v37[19];
                        v627 = v622;
                        do
                        {
                          *(_BYTE *)(v625 + v623) = *((_BYTE *)v626 + v621) != 0;
                          v625 += v620;
                          v626 = (unsigned int *)((char *)v626 + v619);
                          --v627;
                        }
                        while (v627);
                      }
                      v621 += v615;
                      v623 += v616;
                      ++v618;
                    }
                    while (v618 != (_DWORD)result);
                  }
                  v604 += v609;
                  v605 += v611;
                  ++v603;
                }
                while (v603 != v602);
              }
              break;
            case 4:
              v628 = (v40 << 30) - 0x400000000;
              v1513 = *(_DWORD *)(v39 + (v628 >> 30));
              if (v1513 >= 1)
              {
                v629 = 0;
                v630 = 0;
                v631 = 0;
                v632 = v37[3];
                v633 = v628 >> 29;
                v634 = v3[3];
                v1479 = *(_QWORD *)(v634 + v633);
                v1496 = *(_QWORD *)((char *)v632 + v633);
                v635 = v40 << 30;
                v636 = (v40 << 30) - 0x300000000;
                v637 = *(_QWORD *)((char *)v632 + (v636 >> 29));
                v638 = *(_QWORD *)(v634 + (v636 >> 29));
                result = *(unsigned int *)(v39 + (v636 >> 30));
                v1462 = (v635 - 0x200000000) >> 32;
                v639 = (v635 - 0x100000000) >> 32;
                do
                {
                  if ((int)result >= 1)
                  {
                    v640 = 0;
                    v641 = *(_QWORD *)&v632[2 * v1462];
                    v642 = *(_QWORD *)(v634 + 8 * v1462);
                    v643 = v630;
                    v644 = *(_DWORD *)(v39 + 4 * v1462);
                    v645 = v631;
                    do
                    {
                      if (v644 >= 1)
                      {
                        v646 = 0;
                        v647 = *(_QWORD *)&v632[2 * v639];
                        v648 = *(_QWORD *)(v634 + 8 * v639);
                        v649 = v643;
                        v650 = *(_DWORD *)(v39 + 4 * v639);
                        v651 = v645;
                        v652 = *a2;
                        do
                        {
                          if (v650 >= 1)
                          {
                            v653 = v652[19];
                            v654 = v37[19];
                            v655 = v650;
                            do
                            {
                              *(_BYTE *)(v653 + v651) = *((_BYTE *)v654 + v649) != 0;
                              v653 += v648;
                              v654 = (unsigned int *)((char *)v654 + v647);
                              --v655;
                            }
                            while (v655);
                          }
                          v649 += v641;
                          v651 += v642;
                          ++v646;
                        }
                        while (v646 != v644);
                      }
                      v643 += v637;
                      v645 += v638;
                      ++v640;
                    }
                    while (v640 != (_DWORD)result);
                  }
                  v630 += v1496;
                  v631 += v1479;
                  ++v629;
                }
                while (v629 != v1513);
              }
              break;
            case 5:
              v656 = (v40 << 30) - 0x500000000;
              v1423 = *(_DWORD *)(v39 + (v656 >> 30));
              if (v1423 >= 1)
              {
                v1433 = 0;
                v1443 = 0;
                v1452 = 0;
                v657 = v37[3];
                v658 = v656 >> 29;
                v659 = v3[3];
                v1403 = *(_QWORD *)(v659 + v658);
                v1413 = *(_QWORD *)((char *)v657 + v658);
                v660 = (v40 << 30) - 0x400000000;
                v1480 = *(_QWORD *)(v659 + (v660 >> 29));
                v1497 = *(_QWORD *)((char *)v657 + (v660 >> 29));
                v1514 = *(_DWORD *)(v39 + (v660 >> 30));
                v1393 = (uint64_t)((v40 << 30) - 0x300000000) >> 32;
                v1463 = (uint64_t)((v40 << 30) - 0x200000000) >> 32;
                v661 = (uint64_t)((v40 << 30) - 0x100000000) >> 32;
                do
                {
                  if (v1514 >= 1)
                  {
                    v662 = 0;
                    v663 = *(_QWORD *)&v657[2 * v1393];
                    v664 = *(_QWORD *)(v659 + 8 * v1393);
                    v666 = v1443;
                    v665 = v1452;
                    v667 = *(_DWORD *)(v39 + 4 * v1393);
                    do
                    {
                      if (v667 >= 1)
                      {
                        v668 = 0;
                        v669 = *(_QWORD *)&v657[2 * v1463];
                        v670 = *(_QWORD *)(v659 + 8 * v1463);
                        v671 = v665;
                        v672 = *(_DWORD *)(v39 + 4 * v1463);
                        v673 = v666;
                        do
                        {
                          if (v672 >= 1)
                          {
                            v674 = 0;
                            v675 = *(_QWORD *)&v657[2 * v661];
                            v676 = *(_QWORD *)(v659 + 8 * v661);
                            v677 = v671;
                            result = *(unsigned int *)(v39 + 4 * v661);
                            v678 = v673;
                            v679 = *a2;
                            do
                            {
                              if ((int)result >= 1)
                              {
                                v680 = v679[19];
                                v681 = v37[19];
                                v682 = result;
                                do
                                {
                                  *(_BYTE *)(v680 + v678) = *((_BYTE *)v681 + v677) != 0;
                                  v680 += v676;
                                  v681 = (unsigned int *)((char *)v681 + v675);
                                  --v682;
                                }
                                while (v682);
                              }
                              v677 += v669;
                              v678 += v670;
                              ++v674;
                            }
                            while (v674 != v672);
                          }
                          v671 += v663;
                          v673 += v664;
                          ++v668;
                        }
                        while (v668 != v667);
                      }
                      v665 += v1497;
                      v666 += v1480;
                      ++v662;
                    }
                    while (v662 != v1514);
                  }
                  v1452 += v1413;
                  v1443 += v1403;
                  ++v1433;
                }
                while (v1433 != v1423);
              }
              break;
            default:
              LODWORD(v551) = 1;
              v552 = -20;
              do
              {
                v551 = *(int *)(v38 + v552) * (uint64_t)(int)v551;
                v552 += 4;
              }
              while (v552);
              v1382 = v37[6];
              if (v1382)
              {
                v553 = 0;
                v1362 = *v3;
                v554 = (v40 << 30) - 0x500000000;
                v1372 = (v40 >> 2) - 1;
                v555 = v37[3];
                v1367 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v556 = v3[3];
                v1402 = *(_QWORD *)(v556 + (v554 >> 29));
                v1412 = *(_QWORD *)((char *)v555 + (v554 >> 29));
                v1422 = *(_DWORD *)(v39 + (v554 >> 30));
                v1357 = (uint64_t)((v40 << 30) - 0x400000000) >> 32;
                v1392 = (uint64_t)((v40 << 30) - 0x300000000) >> 32;
                v1461 = (uint64_t)((v40 << 30) - 0x200000000) >> 32;
                v557 = (uint64_t)((v40 << 30) - 0x100000000) >> 32;
                v1377 = v551;
                do
                {
                  v558 = v1372;
                  if ((v1372 & 0x80000000) != 0)
                  {
                    v559 = 0;
                  }
                  else
                  {
                    v559 = 0;
                    LODWORD(result) = v553;
                    do
                    {
                      v560 = ldiv((int)result, *(int *)(v39 + 4 * v558));
                      result = v560.quot;
                      v559 += *(_QWORD *)&v555[2 * v558--] * v560.rem;
                    }
                    while (v558 != -1);
                  }
                  v561 = v1367;
                  v1387 = v553;
                  v562 = 0;
                  if ((v1367 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v553;
                    do
                    {
                      v563 = ldiv((int)result, *(int *)(v1362 + 4 * v561));
                      result = v563.quot;
                      v562 += *(_QWORD *)(v556 + 8 * v561--) * v563.rem;
                    }
                    while (v561 != -1);
                  }
                  if (v1422 >= 1)
                  {
                    v564 = 0;
                    v1478 = *(_QWORD *)(v556 + 8 * v1357);
                    v1495 = *(_QWORD *)&v555[2 * v1357];
                    v1512 = *(_DWORD *)(v39 + 4 * v1357);
                    do
                    {
                      v1432 = v564;
                      v1442 = v562;
                      if (v1512 >= 1)
                      {
                        v565 = 0;
                        v566 = *(_QWORD *)&v555[2 * v1392];
                        v567 = *(_QWORD *)(v556 + 8 * v1392);
                        v568 = v562;
                        v569 = v559;
                        v570 = *(_DWORD *)(v39 + 4 * v1392);
                        do
                        {
                          if (v570 >= 1)
                          {
                            LODWORD(result) = 0;
                            v571 = *(_QWORD *)&v555[2 * v1461];
                            v572 = *(_QWORD *)(v556 + 8 * v1461);
                            v573 = v569;
                            v574 = *(_DWORD *)(v39 + 4 * v1461);
                            v575 = v568;
                            do
                            {
                              if (v574 >= 1)
                              {
                                v576 = 0;
                                v577 = *(_QWORD *)&v555[2 * v557];
                                v578 = *(_QWORD *)(v556 + 8 * v557);
                                v579 = v573;
                                v580 = *(_DWORD *)(v39 + 4 * v557);
                                v581 = v575;
                                v582 = *a2;
                                do
                                {
                                  if (v580 >= 1)
                                  {
                                    v583 = v582[19];
                                    v584 = v37[19];
                                    v585 = v580;
                                    do
                                    {
                                      *(_BYTE *)(v583 + v581) = *((_BYTE *)v584 + v579) != 0;
                                      v583 += v578;
                                      v584 = (unsigned int *)((char *)v584 + v577);
                                      --v585;
                                    }
                                    while (v585);
                                  }
                                  v579 += v571;
                                  v581 += v572;
                                  ++v576;
                                }
                                while (v576 != v574);
                              }
                              v573 += v566;
                              v575 += v567;
                              result = (result + 1);
                            }
                            while ((_DWORD)result != v570);
                          }
                          v569 += v1495;
                          v568 += v1478;
                          ++v565;
                        }
                        while (v565 != v1512);
                      }
                      v559 += v1412;
                      v562 = v1442 + v1402;
                      v564 = v1432 + 1;
                    }
                    while (v1432 + 1 != v1422);
                  }
                  v553 = v1387 + v1377;
                }
                while ((unint64_t)v1382 > v1387 + v1377);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v7 = 0;
            v8 = **(_BYTE **)(*(_QWORD *)result + 152);
            v9 = v3[19];
            do
              *(_BYTE *)(v9 + v7++) = v8;
            while ((*a2)[6] > v7);
          }
          break;
        case 1:
          goto LABEL_35;
        case 2:
          v48 = *(int ***)result;
          v49 = **(int ***)result;
          switch(v48[1] - *v48)
          {
            case 1:
              if (*v49 >= 1)
              {
                v50 = 0;
                v51 = 0;
                v52 = v48[19];
                v53 = v3[19];
                do
                {
                  *(_BYTE *)(v53 + v50) = *((_BYTE *)v52 + v51);
                  v51 += *(_QWORD *)v48[3];
                  ++v50;
                }
                while (**v48 > (int)v50);
              }
              break;
            case 2:
              v244 = *v49;
              if (*v49 >= 1)
              {
                v245 = 0;
                v246 = 0;
                v247 = 0;
                v248 = v48[19];
                v249 = v3[19];
                do
                {
                  v250 = v49[1];
                  if (v250 < 1)
                  {
                    v251 = v48[3];
                    v252 = *((_QWORD *)v251 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v249 + v246 + result) = *((_BYTE *)v248 + v247);
                      v251 = v48[3];
                      v252 = *((_QWORD *)v251 + 1);
                      v247 += v252;
                      v49 = *v48;
                      v250 = (*v48)[1];
                      ++result;
                    }
                    while ((int)result < v250);
                    v244 = *v49;
                    v246 += result;
                  }
                  v247 = *(_QWORD *)v251 + v247 - v252 * v250;
                  ++v245;
                }
                while (v245 < v244);
              }
              break;
            case 3:
              v253 = *v49;
              if (*v49 >= 1)
              {
                v254 = 0;
                v255 = 0;
                v256 = 0;
                v257 = v48[19];
                v258 = v3[19];
                do
                {
                  v259 = v49[1];
                  if (v259 < 1)
                  {
                    v263 = v48[3];
                    v264 = *((_QWORD *)v263 + 1);
                  }
                  else
                  {
                    for (i = 0; i < v259; ++i)
                    {
                      v261 = v49[2];
                      if (v261 < 1)
                      {
                        v263 = v48[3];
                        result = *((_QWORD *)v263 + 2);
                      }
                      else
                      {
                        v262 = 0;
                        do
                        {
                          *(_BYTE *)(v258 + v255 + v262) = *((_BYTE *)v257 + v256);
                          v263 = v48[3];
                          result = *((_QWORD *)v263 + 2);
                          v256 += result;
                          v49 = *v48;
                          v261 = (*v48)[2];
                          ++v262;
                        }
                        while ((int)v262 < v261);
                        v255 += v262;
                      }
                      v264 = *((_QWORD *)v263 + 1);
                      v256 = v264 + v256 - result * v261;
                      v259 = v49[1];
                    }
                    v253 = *v49;
                  }
                  v256 = *(_QWORD *)v263 + v256 - v264 * v259;
                  ++v254;
                }
                while (v254 < v253);
              }
              break;
            case 4:
              v265 = *v49;
              if (*v49 >= 1)
              {
                v266 = 0;
                v267 = 0;
                v268 = 0;
                v269 = v48[19];
                v270 = v3[19];
                do
                {
                  v271 = v49[1];
                  if (v271 < 1)
                  {
                    v277 = v48[3];
                    v279 = *((_QWORD *)v277 + 1);
                  }
                  else
                  {
                    for (j = 0; j < v271; ++j)
                    {
                      v273 = v49[2];
                      if (v273 < 1)
                      {
                        v277 = v48[3];
                        v278 = *((_QWORD *)v277 + 2);
                      }
                      else
                      {
                        for (k = 0; k < v273; ++k)
                        {
                          v275 = v49[3];
                          if (v275 < 1)
                          {
                            v277 = v48[3];
                            result = *((_QWORD *)v277 + 3);
                          }
                          else
                          {
                            v276 = 0;
                            do
                            {
                              *(_BYTE *)(v270 + v267 + v276) = *((_BYTE *)v269 + v268);
                              v277 = v48[3];
                              result = *((_QWORD *)v277 + 3);
                              v268 += result;
                              v49 = *v48;
                              v275 = (*v48)[3];
                              ++v276;
                            }
                            while ((int)v276 < v275);
                            v267 += v276;
                          }
                          v278 = *((_QWORD *)v277 + 2);
                          v268 = v278 + v268 - result * v275;
                          v273 = v49[2];
                        }
                      }
                      v279 = *((_QWORD *)v277 + 1);
                      v268 = v279 + v268 - v278 * v273;
                      v271 = v49[1];
                    }
                    v265 = *v49;
                  }
                  v268 = *(_QWORD *)v277 + v268 - v279 * v271;
                  ++v266;
                }
                while (v266 < v265);
              }
              break;
            default:
              if (v3[6])
              {
                v235 = 0;
                v236 = v48[19];
                v237 = v3[19];
                do
                {
                  v238 = *v48;
                  v239 = (unint64_t)((char *)v48[1] - (char *)*v48) >> 2;
                  v240 = 0;
                  v241 = (v239 - 1);
                  if ((int)v239 - 1 >= 0)
                  {
                    v242 = v48[3];
                    LODWORD(result) = v235;
                    do
                    {
                      v243 = ldiv((int)result, v238[v241]);
                      result = v243.quot;
                      v240 += *(_QWORD *)&v242[2 * v241--] * v243.rem;
                    }
                    while (v241 != -1);
                  }
                  *(_BYTE *)(v237 + v235++) = *((_BYTE *)v236 + v240);
                }
                while (v235 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v54 = *(int ***)result;
          v55 = (uint64_t *)(*(_QWORD *)result + 24);
          v56 = v3 + 3;
          v57 = **(_QWORD **)result;
          v58 = *(_QWORD *)(*(_QWORD *)result + 8);
          v59 = v58 - v57;
          switch((v58 - v57) >> 2)
          {
            case 1:
              v60 = (v59 << 30) - 0x100000000;
              v61 = *(_DWORD *)(v57 + (v60 >> 30));
              if (v61 >= 1)
              {
                v62 = v60 >> 29;
                v63 = *(_QWORD *)(*v55 + (v60 >> 29));
                v64 = *(_QWORD *)(*v56 + v62);
                v65 = (_BYTE *)v3[19];
                v66 = v54[19];
                do
                {
                  *v65 = *(_BYTE *)v66;
                  v66 = (int *)((char *)v66 + v63);
                  v65 += v64;
                  --v61;
                }
                while (v61);
              }
              break;
            case 2:
              v704 = (v59 << 30) - 0x200000000;
              v705 = *(_DWORD *)(v57 + (v704 >> 30));
              if (v705 >= 1)
              {
                v706 = 0;
                v707 = 0;
                v708 = 0;
                v709 = v704 >> 29;
                v710 = *(_QWORD *)(*v55 + (v704 >> 29));
                v711 = *(_QWORD *)(*v56 + v709);
                do
                {
                  v712 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v713 = *(int *)((char *)*v54 + (v712 >> 30));
                  if (v713 >= 1)
                  {
                    v714 = v712 >> 29;
                    v715 = *(_QWORD *)((char *)v54[3] + (v712 >> 29));
                    v716 = *(_QWORD *)(*v56 + v714);
                    result = (*a2)[19];
                    v717 = *(_QWORD *)(*(_QWORD *)v5 + 152);
                    do
                    {
                      *(_BYTE *)(result + v708) = *(_BYTE *)(v717 + v707);
                      result += v716;
                      v717 += v715;
                      --v713;
                    }
                    while (v713);
                  }
                  v707 += v710;
                  v708 += v711;
                  ++v706;
                }
                while (v706 != v705);
              }
              break;
            case 3:
              v718 = (v59 << 30) - 0x300000000;
              v719 = *(_DWORD *)(v57 + (v718 >> 30));
              if (v719 >= 1)
              {
                v720 = 0;
                v721 = 0;
                v722 = 0;
                v723 = v718 >> 29;
                v724 = *(_QWORD *)(*v55 + (v718 >> 29));
                v725 = *(_QWORD *)(*v56 + v723);
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v726 = *(int *)((char *)*v54 + (result >> 30));
                  if (v726 >= 1)
                  {
                    v727 = 0;
                    v728 = result >> 29;
                    result = *(_QWORD *)((char *)v54[3] + (result >> 29));
                    v729 = *(_QWORD *)(*v56 + v728);
                    v730 = v721;
                    v731 = v722;
                    do
                    {
                      v732 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v733 = *(int *)((char *)*v54 + (v732 >> 30));
                      if (v733 >= 1)
                      {
                        v734 = v732 >> 29;
                        v735 = *(_QWORD *)((char *)v54[3] + (v732 >> 29));
                        v736 = *(_QWORD *)(*v56 + v734);
                        v737 = (*a2)[19];
                        v738 = *(_QWORD *)(*(_QWORD *)v5 + 152);
                        do
                        {
                          *(_BYTE *)(v737 + v731) = *(_BYTE *)(v738 + v730);
                          v737 += v736;
                          v738 += v735;
                          --v733;
                        }
                        while (v733);
                      }
                      v730 += result;
                      v731 += v729;
                      ++v727;
                    }
                    while (v727 != v726);
                  }
                  v721 += v724;
                  v722 += v725;
                  ++v720;
                }
                while (v720 != v719);
              }
              break;
            case 4:
              goto LABEL_557;
            case 5:
              v739 = (v59 << 30) - 0x500000000;
              v740 = *(_DWORD *)(v57 + (v739 >> 30));
              if (v740 >= 1)
              {
                v741 = 0;
                v742 = 0;
                v743 = v739 >> 29;
                v744 = *(_QWORD *)(*v55 + v743);
                v745 = *(_QWORD *)(*v56 + v743);
                do
                {
                  v741 += v744;
                  v742 += v745;
                  --v740;
                }
                while (v740);
              }
              break;
            default:
              LODWORD(v683) = 1;
              v684 = -20;
              do
              {
                v683 = *(int *)(v58 + v684) * (uint64_t)(int)v683;
                v684 += 4;
              }
              while (v684);
              if (v54[6])
              {
                result = 0;
                v685 = *(_QWORD **)v5;
                v1498 = v56;
                v1464 = v683;
                do
                {
                  v686 = *v54;
                  v687 = (unint64_t)((char *)v54[1] - (char *)*v54) >> 2;
                  v688 = (v687 - 1);
                  v1515 = result;
                  v1481 = v685;
                  v689 = 0;
                  if ((int)v687 - 1 >= 0)
                  {
                    v690 = *v55;
                    do
                    {
                      v691 = ldiv((int)result, v686[v688]);
                      LODWORD(result) = v691.quot;
                      v689 += *(_QWORD *)(v690 + 8 * v688--) * v691.rem;
                    }
                    while (v688 != -1);
                  }
                  v692 = **a2;
                  v693 = (unint64_t)((*a2)[1] - v692) >> 2;
                  v694 = *v1498;
                  v695 = 0;
                  v696 = (v693 - 1);
                  if ((int)v693 - 1 >= 0)
                  {
                    quot = v1515;
                    do
                    {
                      v698 = ldiv(quot, *(int *)(v692 + 4 * v696));
                      quot = v698.quot;
                      v695 += *(_QWORD *)(v694 + 8 * v696--) * v698.rem;
                    }
                    while (v696 != -1);
                  }
                  v685 = v1481;
                  v699 = ((v685[1] - *v685) << 30) - 0x500000000;
                  v700 = *(int *)((char *)v686 + (v699 >> 30));
                  if (v700 >= 1)
                  {
                    v701 = v699 >> 29;
                    v702 = *(_QWORD *)(*v55 + v701);
                    v703 = *(_QWORD *)(v694 + v701);
                    do
                    {
                      v689 += v702;
                      v695 += v703;
                      --v700;
                    }
                    while (v700);
                    v685 = *(_QWORD **)v5;
                  }
                  result = v1515 + v1464;
                }
                while (v685[6] > (unint64_t)(v1515 + v1464));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v10 = v3[6];
          if (v10)
          {
            v11 = **(char **)(*(_QWORD *)result + 152);
            v12 = (_DWORD *)v3[19];
            do
            {
              *v12++ = v11;
              --v10;
            }
            while (v10);
          }
          break;
        case 1:
          v67 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v67)
          {
            v68 = *(char **)(*(_QWORD *)result + 152);
            v69 = (_DWORD *)v3[19];
            do
            {
              v70 = *v68++;
              *v69++ = v70;
              --v67;
            }
            while (v67);
          }
          break;
        case 2:
          v71 = *(int ***)result;
          v72 = **(int ***)result;
          v73 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v72;
          switch(v73 >> 2)
          {
            case 1:
              if (*v72 >= 1)
              {
                v74 = 0;
                v75 = v71[19];
                v76 = v3[19];
                v77 = *(_QWORD *)v71[3];
                do
                {
                  *(_DWORD *)(v76 + 4 * v74) = *(char *)v75;
                  v75 = (int *)((char *)v75 + v77);
                  ++v74;
                }
                while (*v72 > (int)v74);
              }
              break;
            case 2:
              v289 = *v72;
              if (*v72 >= 1)
              {
                v290 = 0;
                v291 = 0;
                v292 = 0;
                v293 = v71[19];
                v294 = v3[19];
                v295 = v71[3];
                v296 = *(_QWORD *)v295;
                v297 = *((_QWORD *)v295 + 1);
                v298 = v72[1];
                do
                {
                  if (v298 >= 1)
                  {
                    v299 = 0;
                    do
                    {
                      *(_DWORD *)(v294 + 4 * v291 + 4 * v299) = *((char *)v293 + v292);
                      v292 += v297;
                      v298 = v72[1];
                      ++v299;
                    }
                    while ((int)v299 < v298);
                    v289 = *v72;
                    v291 += v299;
                  }
                  v292 = v292 + v296 - v297 * v298;
                  ++v290;
                }
                while (v290 < v289);
              }
              break;
            case 3:
              result = *v72;
              if ((int)result >= 1)
              {
                v300 = 0;
                v301 = 0;
                v302 = 0;
                v303 = v71[19];
                v304 = v3[19];
                v305 = v71[3];
                v306 = *(_QWORD *)v305;
                v307 = *((_QWORD *)v305 + 1);
                v308 = v72[1];
                do
                {
                  if (v308 >= 1)
                  {
                    v309 = 0;
                    v310 = v71[3];
                    v311 = *((_QWORD *)v305 + 2);
                    v312 = v72[2];
                    do
                    {
                      if (v312 >= 1)
                      {
                        v313 = 0;
                        v314 = *((_QWORD *)v310 + 2);
                        do
                        {
                          *(_DWORD *)(v304 + 4 * v301 + 4 * v313) = *((char *)v303 + v302);
                          v302 += v314;
                          v312 = v72[2];
                          ++v313;
                        }
                        while ((int)v313 < v312);
                        v308 = v72[1];
                        v301 += v313;
                      }
                      v302 = v302 + v307 - v311 * v312;
                      ++v309;
                    }
                    while (v309 < v308);
                    result = *v72;
                  }
                  v302 = v302 + v306 - v307 * v308;
                  ++v300;
                }
                while (v300 < (int)result);
              }
              break;
            case 4:
              v315 = *v72;
              if (*v72 >= 1)
              {
                v316 = 0;
                v317 = 0;
                v318 = 0;
                v319 = v71[19];
                v320 = v3[19];
                v321 = v71[3];
                v322 = *(_QWORD *)v321;
                v323 = *((_QWORD *)v321 + 1);
                v324 = v72[1];
                do
                {
                  if (v324 >= 1)
                  {
                    v325 = 0;
                    v326 = v71[3];
                    v327 = *((_QWORD *)v321 + 2);
                    v328 = v72[2];
                    do
                    {
                      if (v328 >= 1)
                      {
                        v329 = 0;
                        v330 = v71[3];
                        v331 = *((_QWORD *)v326 + 2);
                        v332 = *((_QWORD *)v326 + 3);
                        v333 = v72[3];
                        do
                        {
                          if (v333 >= 1)
                          {
                            v334 = 0;
                            v335 = *((_QWORD *)v330 + 3);
                            do
                            {
                              *(_DWORD *)(v320 + 4 * v317 + 4 * v334) = *((char *)v319 + v318);
                              v318 += v335;
                              v333 = v72[3];
                              ++v334;
                            }
                            while ((int)v334 < v333);
                            v328 = v72[2];
                            v317 += v334;
                          }
                          v318 = v318 + v331 - v332 * v333;
                          ++v329;
                        }
                        while (v329 < v328);
                        v324 = v72[1];
                      }
                      v318 = v318 + v323 - v327 * v328;
                      ++v325;
                    }
                    while (v325 < v324);
                    v315 = *v72;
                  }
                  result = v324;
                  v318 = v318 + v322 - v323 * v324;
                  ++v316;
                }
                while (v316 < v315);
              }
              break;
            default:
              v280 = v3[6];
              if (v280)
              {
                v281 = 0;
                v282 = v71[19];
                v283 = v3[19];
                v284 = ((unint64_t)v73 >> 2) - 1;
                v285 = v71[3];
                do
                {
                  v286 = 0;
                  if ((v284 & 0x80000000) == 0)
                  {
                    v287 = v284;
                    LODWORD(result) = v281;
                    do
                    {
                      v288 = ldiv((int)result, v72[v287]);
                      result = v288.quot;
                      v286 += *(_QWORD *)&v285[2 * v287--] * v288.rem;
                    }
                    while (v287 != -1);
                  }
                  *(_DWORD *)(v283 + 4 * v281++) = *((char *)v282 + v286);
                }
                while (v281 != v280);
              }
              break;
          }
          break;
        case 3:
          v78 = *(unsigned int ***)result;
          v80 = **(_QWORD **)result;
          v79 = *(_QWORD *)(*(_QWORD *)result + 8);
          v81 = v79 - v80;
          switch((v79 - v80) >> 2)
          {
            case 1:
              v82 = (v81 << 30) - 0x100000000;
              v83 = *(_DWORD *)(v80 + (v82 >> 30));
              if (v83 >= 1)
              {
                v84 = v82 >> 29;
                v85 = *(_QWORD *)((char *)v78[3] + (v82 >> 29));
                v86 = *(_QWORD *)(v3[3] + v84);
                v87 = (_DWORD *)v3[19];
                v88 = v78[19];
                v89 = 4 * v86;
                do
                {
                  *v87 = *(char *)v88;
                  v88 = (unsigned int *)((char *)v88 + v85);
                  v87 = (_DWORD *)((char *)v87 + v89);
                  --v83;
                }
                while (v83);
              }
              break;
            case 2:
              v781 = (v81 << 30) - 0x200000000;
              v782 = *(_DWORD *)(v80 + (v781 >> 30));
              if (v782 >= 1)
              {
                v783 = 0;
                v784 = 0;
                v785 = 0;
                v786 = v78[3];
                v787 = v781 >> 29;
                v788 = *(_QWORD *)((char *)v786 + (v781 >> 29));
                v789 = v3[3];
                v790 = (v81 << 30) - 0x100000000;
                v791 = *(_QWORD *)((char *)v786 + (v790 >> 29));
                v792 = v790 >> 32;
                v793 = 4 * *(_QWORD *)(v789 + v787);
                v794 = 4 * *(_QWORD *)(v789 + (v790 >> 29));
                do
                {
                  result = *(unsigned int *)(v80 + 4 * v792);
                  if ((int)result >= 1)
                  {
                    v795 = v78[19];
                    v796 = (_DWORD *)(v3[19] + v783);
                    do
                    {
                      *v796 = *((char *)v795 + v785);
                      v796 = (_DWORD *)((char *)v796 + v794);
                      v795 = (unsigned int *)((char *)v795 + v791);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v785 += v788;
                  ++v784;
                  v783 += v793;
                }
                while (v784 != v782);
              }
              break;
            case 3:
              v797 = (v81 << 30) - 0x300000000;
              v798 = *(_DWORD *)(v80 + (v797 >> 30));
              if (v798 >= 1)
              {
                v799 = 0;
                v800 = 0;
                v801 = 0;
                v802 = v81 << 30;
                v803 = v78[3];
                v804 = v797 >> 29;
                v805 = *(_QWORD *)((char *)v803 + (v797 >> 29));
                v806 = v3[3];
                v807 = *(_QWORD *)(v806 + v804);
                v808 = v802 - 0x200000000;
                v809 = (v802 - 0x200000000) >> 29;
                v810 = v802 - 0x100000000;
                v811 = *(_QWORD *)((char *)v803 + v809);
                v812 = v808 >> 32;
                v813 = *(_QWORD *)(v806 + v809);
                v814 = v810 >> 32;
                result = 4 * v807;
                v815 = 4 * v813;
                do
                {
                  v816 = *(_DWORD *)(v80 + 4 * v812);
                  if (v816 >= 1)
                  {
                    v817 = 0;
                    v818 = *(_QWORD *)&v803[2 * v814];
                    v819 = *a2;
                    v820 = 4 * *(_QWORD *)(v806 + 8 * v814);
                    v821 = v799;
                    v822 = v801;
                    do
                    {
                      v823 = *(_DWORD *)(v80 + 4 * v814);
                      if (v823 >= 1)
                      {
                        v824 = v78[19];
                        v825 = (_DWORD *)(v819[19] + v821);
                        do
                        {
                          *v825 = *((char *)v824 + v822);
                          v825 = (_DWORD *)((char *)v825 + v820);
                          v824 = (unsigned int *)((char *)v824 + v818);
                          --v823;
                        }
                        while (v823);
                      }
                      v822 += v811;
                      ++v817;
                      v821 += v815;
                    }
                    while (v817 != v816);
                  }
                  v801 += v805;
                  ++v800;
                  v799 += result;
                }
                while (v800 != v798);
              }
              break;
            case 4:
              v826 = (v81 << 30) - 0x400000000;
              v1517 = *(_DWORD *)(v80 + (v826 >> 30));
              if (v1517 >= 1)
              {
                v827 = 0;
                v828 = 0;
                v829 = 0;
                v830 = v81 << 30;
                v831 = v78[3];
                v832 = v826 >> 29;
                v1500 = *(_QWORD *)((char *)v831 + v832);
                v833 = v3[3];
                v1483 = (v830 - 0x300000000) >> 32;
                v834 = (v830 - 0x300000000) >> 29;
                v835 = *(_QWORD *)((char *)v831 + v834);
                v836 = (v830 - 0x200000000) >> 32;
                result = (v830 - 0x100000000) >> 32;
                v1466 = 4 * *(_QWORD *)(v833 + v832);
                v837 = 4 * *(_QWORD *)(v833 + v834);
                do
                {
                  v838 = *(_DWORD *)(v80 + 4 * v1483);
                  if (v838 >= 1)
                  {
                    v839 = 0;
                    v840 = *(_QWORD *)&v831[2 * v836];
                    v841 = 4 * *(_QWORD *)(v833 + 8 * v836);
                    v842 = v827;
                    v843 = v829;
                    do
                    {
                      v844 = *(_DWORD *)(v80 + 4 * v836);
                      if (v844 >= 1)
                      {
                        v845 = 0;
                        v846 = *(_QWORD *)&v831[2 * result];
                        v847 = *a2;
                        v848 = 4 * *(_QWORD *)(v833 + 8 * result);
                        v849 = v842;
                        v850 = v843;
                        do
                        {
                          v851 = *(_DWORD *)(v80 + 4 * result);
                          if (v851 >= 1)
                          {
                            v852 = v78[19];
                            v853 = (_DWORD *)(v847[19] + v849);
                            do
                            {
                              *v853 = *((char *)v852 + v850);
                              v853 = (_DWORD *)((char *)v853 + v848);
                              v852 = (unsigned int *)((char *)v852 + v846);
                              --v851;
                            }
                            while (v851);
                          }
                          v850 += v840;
                          ++v845;
                          v849 += v841;
                        }
                        while (v845 != v844);
                      }
                      v843 += v835;
                      ++v839;
                      v842 += v837;
                    }
                    while (v839 != v838);
                  }
                  v829 += v1500;
                  ++v828;
                  v827 += v1466;
                }
                while (v828 != v1517);
              }
              break;
            case 5:
              v854 = (v81 << 30) - 0x500000000;
              v1425 = *(_DWORD *)(v80 + (v854 >> 30));
              if (v1425 >= 1)
              {
                v1445 = 0;
                v1454 = 0;
                v1435 = 0;
                v855 = v81 << 30;
                v856 = v78[3];
                v857 = v854 >> 29;
                v1415 = *(_QWORD *)((char *)v856 + v857);
                v858 = v3[3];
                v859 = (v855 - 0x400000000) >> 29;
                v1484 = *(_QWORD *)((char *)v856 + v859);
                v1405 = (v855 - 0x400000000) >> 32;
                v1501 = (v855 - 0x300000000) >> 32;
                result = (v855 - 0x200000000) >> 32;
                v860 = (v855 - 0x100000000) >> 32;
                v1395 = 4 * *(_QWORD *)(v858 + v857);
                v1467 = 4 * *(_QWORD *)(v858 + v859);
                do
                {
                  v1518 = *(_DWORD *)(v80 + 4 * v1405);
                  if (v1518 >= 1)
                  {
                    v861 = 0;
                    v862 = *(_QWORD *)&v856[2 * v1501];
                    v863 = 4 * *(_QWORD *)(v858 + 8 * v1501);
                    v864 = v1445;
                    v865 = v1454;
                    do
                    {
                      v866 = *(_DWORD *)(v80 + 4 * v1501);
                      if (v866 >= 1)
                      {
                        v867 = 0;
                        v868 = *(_QWORD *)&v856[2 * result];
                        v869 = 4 * *(_QWORD *)(v858 + 8 * result);
                        v870 = v865;
                        v871 = v864;
                        do
                        {
                          v872 = *(_DWORD *)(v80 + 4 * result);
                          if (v872 >= 1)
                          {
                            v873 = 0;
                            v874 = *(_QWORD *)&v856[2 * v860];
                            v875 = *a2;
                            v876 = 4 * *(_QWORD *)(v858 + 8 * v860);
                            v877 = v870;
                            v878 = v871;
                            do
                            {
                              v879 = *(_DWORD *)(v80 + 4 * v860);
                              if (v879 >= 1)
                              {
                                v880 = v78[19];
                                v881 = (_DWORD *)(v875[19] + v877);
                                do
                                {
                                  *v881 = *((char *)v880 + v878);
                                  v881 = (_DWORD *)((char *)v881 + v876);
                                  v880 = (unsigned int *)((char *)v880 + v874);
                                  --v879;
                                }
                                while (v879);
                              }
                              v878 += v868;
                              ++v873;
                              v877 += v869;
                            }
                            while (v873 != v872);
                          }
                          v871 += v862;
                          ++v867;
                          v870 += v863;
                        }
                        while (v867 != v866);
                      }
                      v864 += v1484;
                      ++v861;
                      v865 += v1467;
                    }
                    while (v861 != v1518);
                  }
                  v1445 += v1415;
                  v1454 += v1395;
                  ++v1435;
                }
                while (v1435 != v1425);
              }
              break;
            default:
              LODWORD(v746) = 1;
              v747 = -20;
              do
              {
                v746 = *(int *)(v79 + v747) * (uint64_t)(int)v746;
                v747 += 4;
              }
              while (v747);
              v1383 = v78[6];
              if (v1383)
              {
                v748 = 0;
                v1373 = (v81 >> 2) - 1;
                v749 = v78[3];
                v1358 = *v3;
                v1368 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v750 = (v81 << 30) - 0x500000000;
                v751 = v3[3];
                v1363 = v750 >> 32;
                v1404 = *(_QWORD *)((char *)v749 + (v750 >> 29));
                v1414 = (uint64_t)((v81 << 30) - 0x400000000) >> 32;
                v1499 = (uint64_t)((v81 << 30) - 0x300000000) >> 32;
                v752 = (uint64_t)((v81 << 30) - 0x200000000) >> 32;
                v753 = (uint64_t)((v81 << 30) - 0x100000000) >> 32;
                v1394 = 4 * *(_QWORD *)(v751 + (v750 >> 29));
                v1378 = v746;
                do
                {
                  v754 = v1373;
                  if ((v1373 & 0x80000000) != 0)
                  {
                    v755 = 0;
                  }
                  else
                  {
                    v755 = 0;
                    LODWORD(result) = v748;
                    do
                    {
                      v756 = ldiv((int)result, *(int *)(v80 + 4 * v754));
                      result = v756.quot;
                      v755 += *(_QWORD *)&v749[2 * v754--] * v756.rem;
                    }
                    while (v754 != -1);
                  }
                  v1453 = v755;
                  v757 = v1368;
                  v1388 = v748;
                  v758 = 0;
                  if ((v1368 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v748;
                    do
                    {
                      v759 = ldiv((int)result, *(int *)(v1358 + 4 * v757));
                      result = v759.quot;
                      v758 += *(_QWORD *)(v751 + 8 * v757--) * v759.rem;
                    }
                    while (v757 != -1);
                  }
                  v1424 = *(_DWORD *)(v80 + 4 * v1363);
                  if (v1424 >= 1)
                  {
                    v760 = 0;
                    v1482 = *(_QWORD *)&v749[2 * v1414];
                    v1444 = 4 * v758;
                    v1465 = 4 * *(_QWORD *)(v751 + 8 * v1414);
                    do
                    {
                      v1434 = v760;
                      v1516 = *(_DWORD *)(v80 + 4 * v1414);
                      if (v1516 >= 1)
                      {
                        v761 = 0;
                        v762 = *(_QWORD *)&v749[2 * v1499];
                        v763 = 4 * *(_QWORD *)(v751 + 8 * v1499);
                        v764 = v1444;
                        v765 = v1453;
                        do
                        {
                          v766 = *(_DWORD *)(v80 + 4 * v1499);
                          if (v766 >= 1)
                          {
                            v767 = 0;
                            v768 = *(_QWORD *)&v749[2 * v752];
                            v769 = 4 * *(_QWORD *)(v751 + 8 * v752);
                            v770 = v764;
                            result = v765;
                            do
                            {
                              v771 = *(_DWORD *)(v80 + 4 * v752);
                              if (v771 >= 1)
                              {
                                v772 = 0;
                                v773 = *(_QWORD *)&v749[2 * v753];
                                v774 = *a2;
                                v775 = 4 * *(_QWORD *)(v751 + 8 * v753);
                                v776 = v770;
                                v777 = result;
                                do
                                {
                                  v778 = *(_DWORD *)(v80 + 4 * v753);
                                  if (v778 >= 1)
                                  {
                                    v779 = v78[19];
                                    v780 = (_DWORD *)(v774[19] + v776);
                                    do
                                    {
                                      *v780 = *((char *)v779 + v777);
                                      v780 = (_DWORD *)((char *)v780 + v775);
                                      v779 = (unsigned int *)((char *)v779 + v773);
                                      --v778;
                                    }
                                    while (v778);
                                  }
                                  v777 += v768;
                                  ++v772;
                                  v776 += v769;
                                }
                                while (v772 != v771);
                              }
                              result += v762;
                              ++v767;
                              v770 += v763;
                            }
                            while (v767 != v766);
                          }
                          v765 += v1482;
                          ++v761;
                          v764 += v1465;
                        }
                        while (v761 != v1516);
                      }
                      v1453 += v1404;
                      v760 = v1434 + 1;
                      v1444 += v1394;
                    }
                    while (v1434 + 1 != v1424);
                  }
                  v748 = v1388 + v1378;
                }
                while ((unint64_t)v1383 > v1388 + v1378);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v13 = 0;
            v14 = **(_BYTE **)(*(_QWORD *)result + 152);
            v15 = v3[19];
            do
              *(_BYTE *)(v15 + v13++) = v14;
            while ((*a2)[6] > v13);
          }
          break;
        case 1:
LABEL_35:
          v25 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v25)
            result = (uint64_t)memmove((void *)v3[19], *(const void **)(*(_QWORD *)result + 152), v25);
          break;
        case 2:
          v90 = *(int ***)result;
          v91 = **(int ***)result;
          switch(v90[1] - *v90)
          {
            case 1:
              if (*v91 >= 1)
              {
                v92 = 0;
                v93 = 0;
                v94 = v90[19];
                v95 = v3[19];
                do
                {
                  *(_BYTE *)(v95 + v92) = *((_BYTE *)v94 + v93);
                  v93 += *(_QWORD *)v90[3];
                  ++v92;
                }
                while (**v90 > (int)v92);
              }
              break;
            case 2:
              v345 = *v91;
              if (*v91 >= 1)
              {
                v346 = 0;
                v347 = 0;
                v348 = 0;
                v349 = v90[19];
                v350 = v3[19];
                do
                {
                  v351 = v91[1];
                  if (v351 < 1)
                  {
                    v352 = v90[3];
                    v353 = *((_QWORD *)v352 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v350 + v347 + result) = *((_BYTE *)v349 + v348);
                      v352 = v90[3];
                      v353 = *((_QWORD *)v352 + 1);
                      v348 += v353;
                      v91 = *v90;
                      v351 = (*v90)[1];
                      ++result;
                    }
                    while ((int)result < v351);
                    v345 = *v91;
                    v347 += result;
                  }
                  v348 = *(_QWORD *)v352 + v348 - v353 * v351;
                  ++v346;
                }
                while (v346 < v345);
              }
              break;
            case 3:
              v354 = *v91;
              if (*v91 >= 1)
              {
                v355 = 0;
                v356 = 0;
                v357 = 0;
                v358 = v90[19];
                v359 = v3[19];
                do
                {
                  v360 = v91[1];
                  if (v360 < 1)
                  {
                    v364 = v90[3];
                    v365 = *((_QWORD *)v364 + 1);
                  }
                  else
                  {
                    for (m = 0; m < v360; ++m)
                    {
                      v362 = v91[2];
                      if (v362 < 1)
                      {
                        v364 = v90[3];
                        result = *((_QWORD *)v364 + 2);
                      }
                      else
                      {
                        v363 = 0;
                        do
                        {
                          *(_BYTE *)(v359 + v356 + v363) = *((_BYTE *)v358 + v357);
                          v364 = v90[3];
                          result = *((_QWORD *)v364 + 2);
                          v357 += result;
                          v91 = *v90;
                          v362 = (*v90)[2];
                          ++v363;
                        }
                        while ((int)v363 < v362);
                        v356 += v363;
                      }
                      v365 = *((_QWORD *)v364 + 1);
                      v357 = v365 + v357 - result * v362;
                      v360 = v91[1];
                    }
                    v354 = *v91;
                  }
                  v357 = *(_QWORD *)v364 + v357 - v365 * v360;
                  ++v355;
                }
                while (v355 < v354);
              }
              break;
            case 4:
              v366 = *v91;
              if (*v91 >= 1)
              {
                v367 = 0;
                v368 = 0;
                v369 = 0;
                v370 = v90[19];
                v371 = v3[19];
                do
                {
                  v372 = v91[1];
                  if (v372 < 1)
                  {
                    v378 = v90[3];
                    v380 = *((_QWORD *)v378 + 1);
                  }
                  else
                  {
                    for (n = 0; n < v372; ++n)
                    {
                      v374 = v91[2];
                      if (v374 < 1)
                      {
                        v378 = v90[3];
                        v379 = *((_QWORD *)v378 + 2);
                      }
                      else
                      {
                        for (ii = 0; ii < v374; ++ii)
                        {
                          v376 = v91[3];
                          if (v376 < 1)
                          {
                            v378 = v90[3];
                            result = *((_QWORD *)v378 + 3);
                          }
                          else
                          {
                            v377 = 0;
                            do
                            {
                              *(_BYTE *)(v371 + v368 + v377) = *((_BYTE *)v370 + v369);
                              v378 = v90[3];
                              result = *((_QWORD *)v378 + 3);
                              v369 += result;
                              v91 = *v90;
                              v376 = (*v90)[3];
                              ++v377;
                            }
                            while ((int)v377 < v376);
                            v368 += v377;
                          }
                          v379 = *((_QWORD *)v378 + 2);
                          v369 = v379 + v369 - result * v376;
                          v374 = v91[2];
                        }
                      }
                      v380 = *((_QWORD *)v378 + 1);
                      v369 = v380 + v369 - v379 * v374;
                      v372 = v91[1];
                    }
                    v366 = *v91;
                  }
                  v369 = *(_QWORD *)v378 + v369 - v380 * v372;
                  ++v367;
                }
                while (v367 < v366);
              }
              break;
            default:
              if (v3[6])
              {
                v336 = 0;
                v337 = v90[19];
                v338 = v3[19];
                do
                {
                  v339 = *v90;
                  v340 = (unint64_t)((char *)v90[1] - (char *)*v90) >> 2;
                  v341 = 0;
                  v342 = (v340 - 1);
                  if ((int)v340 - 1 >= 0)
                  {
                    v343 = v90[3];
                    LODWORD(result) = v336;
                    do
                    {
                      v344 = ldiv((int)result, v339[v342]);
                      result = v344.quot;
                      v341 += *(_QWORD *)&v343[2 * v342--] * v344.rem;
                    }
                    while (v342 != -1);
                  }
                  *(_BYTE *)(v338 + v336++) = *((_BYTE *)v337 + v341);
                }
                while (v336 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v96 = *(int ***)result;
          v97 = (uint64_t *)(*(_QWORD *)result + 24);
          v98 = v3 + 3;
          v99 = **(_QWORD **)result;
          v100 = *(_QWORD *)(*(_QWORD *)result + 8);
          v101 = v100 - v99;
          switch((v100 - v99) >> 2)
          {
            case 1:
              v102 = (v101 << 30) - 0x100000000;
              v103 = *(_DWORD *)(v99 + (v102 >> 30));
              if (v103 >= 1)
              {
                v104 = v102 >> 29;
                v105 = *(_QWORD *)(*v97 + (v102 >> 29));
                v106 = *(_QWORD *)(*v98 + v104);
                v107 = (_BYTE *)v3[19];
                v108 = v96[19];
                do
                {
                  *v107 = *(_BYTE *)v108;
                  v108 = (int *)((char *)v108 + v105);
                  v107 += v106;
                  --v103;
                }
                while (v103);
              }
              break;
            case 2:
              v903 = (v101 << 30) - 0x200000000;
              v904 = *(_DWORD *)(v99 + (v903 >> 30));
              if (v904 >= 1)
              {
                v905 = 0;
                v906 = 0;
                v907 = 0;
                v908 = v903 >> 29;
                v909 = *(_QWORD *)(*v97 + (v903 >> 29));
                v910 = *(_QWORD *)(*v98 + v908);
                do
                {
                  v911 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v912 = *(int *)((char *)*v96 + (v911 >> 30));
                  if (v912 >= 1)
                  {
                    v913 = v911 >> 29;
                    v914 = *(_QWORD *)((char *)v96[3] + (v911 >> 29));
                    v915 = *(_QWORD *)(*v98 + v913);
                    result = (*a2)[19];
                    v916 = *(_QWORD *)(*(_QWORD *)v5 + 152);
                    do
                    {
                      *(_BYTE *)(result + v907) = *(_BYTE *)(v916 + v906);
                      result += v915;
                      v916 += v914;
                      --v912;
                    }
                    while (v912);
                  }
                  v906 += v909;
                  v907 += v910;
                  ++v905;
                }
                while (v905 != v904);
              }
              break;
            case 3:
              v917 = (v101 << 30) - 0x300000000;
              v918 = *(_DWORD *)(v99 + (v917 >> 30));
              if (v918 >= 1)
              {
                v919 = 0;
                v920 = 0;
                v921 = 0;
                v922 = v917 >> 29;
                v923 = *(_QWORD *)(*v97 + (v917 >> 29));
                v924 = *(_QWORD *)(*v98 + v922);
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v925 = *(int *)((char *)*v96 + (result >> 30));
                  if (v925 >= 1)
                  {
                    v926 = 0;
                    v927 = result >> 29;
                    result = *(_QWORD *)((char *)v96[3] + (result >> 29));
                    v928 = *(_QWORD *)(*v98 + v927);
                    v929 = v920;
                    v930 = v921;
                    do
                    {
                      v931 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v932 = *(int *)((char *)*v96 + (v931 >> 30));
                      if (v932 >= 1)
                      {
                        v933 = v931 >> 29;
                        v934 = *(_QWORD *)((char *)v96[3] + (v931 >> 29));
                        v935 = *(_QWORD *)(*v98 + v933);
                        v936 = (*a2)[19];
                        v937 = *(_QWORD *)(*(_QWORD *)v5 + 152);
                        do
                        {
                          *(_BYTE *)(v936 + v930) = *(_BYTE *)(v937 + v929);
                          v936 += v935;
                          v937 += v934;
                          --v932;
                        }
                        while (v932);
                      }
                      v929 += result;
                      v930 += v928;
                      ++v926;
                    }
                    while (v926 != v925);
                  }
                  v920 += v923;
                  v921 += v924;
                  ++v919;
                }
                while (v919 != v918);
              }
              break;
            case 4:
LABEL_557:
              break;
            case 5:
              v938 = (v101 << 30) - 0x500000000;
              v939 = *(_DWORD *)(v99 + (v938 >> 30));
              if (v939 >= 1)
              {
                v940 = 0;
                v941 = 0;
                v942 = v938 >> 29;
                v943 = *(_QWORD *)(*v97 + v942);
                v944 = *(_QWORD *)(*v98 + v942);
                do
                {
                  v940 += v943;
                  v941 += v944;
                  --v939;
                }
                while (v939);
              }
              break;
            default:
              LODWORD(v882) = 1;
              v883 = -20;
              do
              {
                v882 = *(int *)(v100 + v883) * (uint64_t)(int)v882;
                v883 += 4;
              }
              while (v883);
              if (v96[6])
              {
                result = 0;
                v884 = *(_QWORD **)v5;
                v1502 = v98;
                v1468 = v882;
                do
                {
                  v885 = *v96;
                  v886 = (unint64_t)((char *)v96[1] - (char *)*v96) >> 2;
                  v887 = (v886 - 1);
                  v1519 = result;
                  v1485 = v884;
                  v888 = 0;
                  if ((int)v886 - 1 >= 0)
                  {
                    v889 = *v97;
                    do
                    {
                      v890 = ldiv((int)result, v885[v887]);
                      LODWORD(result) = v890.quot;
                      v888 += *(_QWORD *)(v889 + 8 * v887--) * v890.rem;
                    }
                    while (v887 != -1);
                  }
                  v891 = **a2;
                  v892 = (unint64_t)((*a2)[1] - v891) >> 2;
                  v893 = *v1502;
                  v894 = 0;
                  v895 = (v892 - 1);
                  if ((int)v892 - 1 >= 0)
                  {
                    v896 = v1519;
                    do
                    {
                      v897 = ldiv(v896, *(int *)(v891 + 4 * v895));
                      v896 = v897.quot;
                      v894 += *(_QWORD *)(v893 + 8 * v895--) * v897.rem;
                    }
                    while (v895 != -1);
                  }
                  v884 = v1485;
                  v898 = ((v884[1] - *v884) << 30) - 0x500000000;
                  v899 = *(int *)((char *)v885 + (v898 >> 30));
                  if (v899 >= 1)
                  {
                    v900 = v898 >> 29;
                    v901 = *(_QWORD *)(*v97 + v900);
                    v902 = *(_QWORD *)(v893 + v900);
                    do
                    {
                      v888 += v901;
                      v894 += v902;
                      --v899;
                    }
                    while (v899);
                    v884 = *(_QWORD **)v5;
                  }
                  result = v1519 + v1468;
                }
                while (v884[6] > (unint64_t)(v1519 + v1468));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v16 = v3[6];
          if (v16)
          {
            v17 = **(char **)(*(_QWORD *)result + 152);
            v18 = (_DWORD *)v3[19];
            do
            {
              *v18++ = v17;
              --v16;
            }
            while (v16);
          }
          break;
        case 1:
          v109 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v109)
          {
            v110 = *(char **)(*(_QWORD *)result + 152);
            v111 = (_DWORD *)v3[19];
            do
            {
              v112 = *v110++;
              *v111++ = v112;
              --v109;
            }
            while (v109);
          }
          break;
        case 2:
          v113 = *(int ***)result;
          v114 = **(int ***)result;
          v115 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v114;
          switch(v115 >> 2)
          {
            case 1:
              if (*v114 >= 1)
              {
                v116 = 0;
                v117 = v113[19];
                v118 = v3[19];
                v119 = *(_QWORD *)v113[3];
                do
                {
                  *(_DWORD *)(v118 + 4 * v116) = *(char *)v117;
                  v117 = (int *)((char *)v117 + v119);
                  ++v116;
                }
                while (*v114 > (int)v116);
              }
              break;
            case 2:
              v390 = *v114;
              if (*v114 >= 1)
              {
                v391 = 0;
                v392 = 0;
                v393 = 0;
                v394 = v113[19];
                v395 = v3[19];
                v396 = v113[3];
                v397 = *(_QWORD *)v396;
                v398 = *((_QWORD *)v396 + 1);
                v399 = v114[1];
                do
                {
                  if (v399 >= 1)
                  {
                    v400 = 0;
                    do
                    {
                      *(_DWORD *)(v395 + 4 * v392 + 4 * v400) = *((char *)v394 + v393);
                      v393 += v398;
                      v399 = v114[1];
                      ++v400;
                    }
                    while ((int)v400 < v399);
                    v390 = *v114;
                    v392 += v400;
                  }
                  v393 = v393 + v397 - v398 * v399;
                  ++v391;
                }
                while (v391 < v390);
              }
              break;
            case 3:
              result = *v114;
              if ((int)result >= 1)
              {
                v401 = 0;
                v402 = 0;
                v403 = 0;
                v404 = v113[19];
                v405 = v3[19];
                v406 = v113[3];
                v407 = *(_QWORD *)v406;
                v408 = *((_QWORD *)v406 + 1);
                v409 = v114[1];
                do
                {
                  if (v409 >= 1)
                  {
                    v410 = 0;
                    v411 = v113[3];
                    v412 = *((_QWORD *)v406 + 2);
                    v413 = v114[2];
                    do
                    {
                      if (v413 >= 1)
                      {
                        v414 = 0;
                        v415 = *((_QWORD *)v411 + 2);
                        do
                        {
                          *(_DWORD *)(v405 + 4 * v402 + 4 * v414) = *((char *)v404 + v403);
                          v403 += v415;
                          v413 = v114[2];
                          ++v414;
                        }
                        while ((int)v414 < v413);
                        v409 = v114[1];
                        v402 += v414;
                      }
                      v403 = v403 + v408 - v412 * v413;
                      ++v410;
                    }
                    while (v410 < v409);
                    result = *v114;
                  }
                  v403 = v403 + v407 - v408 * v409;
                  ++v401;
                }
                while (v401 < (int)result);
              }
              break;
            case 4:
              v416 = *v114;
              if (*v114 >= 1)
              {
                v417 = 0;
                v418 = 0;
                v419 = 0;
                v420 = v113[19];
                v421 = v3[19];
                v422 = v113[3];
                v423 = *(_QWORD *)v422;
                v424 = *((_QWORD *)v422 + 1);
                v425 = v114[1];
                do
                {
                  if (v425 >= 1)
                  {
                    v426 = 0;
                    v427 = v113[3];
                    v428 = *((_QWORD *)v422 + 2);
                    v429 = v114[2];
                    do
                    {
                      if (v429 >= 1)
                      {
                        v430 = 0;
                        v431 = v113[3];
                        v432 = *((_QWORD *)v427 + 2);
                        v433 = *((_QWORD *)v427 + 3);
                        v434 = v114[3];
                        do
                        {
                          if (v434 >= 1)
                          {
                            v435 = 0;
                            v436 = *((_QWORD *)v431 + 3);
                            do
                            {
                              *(_DWORD *)(v421 + 4 * v418 + 4 * v435) = *((char *)v420 + v419);
                              v419 += v436;
                              v434 = v114[3];
                              ++v435;
                            }
                            while ((int)v435 < v434);
                            v429 = v114[2];
                            v418 += v435;
                          }
                          v419 = v419 + v432 - v433 * v434;
                          ++v430;
                        }
                        while (v430 < v429);
                        v425 = v114[1];
                      }
                      v419 = v419 + v424 - v428 * v429;
                      ++v426;
                    }
                    while (v426 < v425);
                    v416 = *v114;
                  }
                  result = v425;
                  v419 = v419 + v423 - v424 * v425;
                  ++v417;
                }
                while (v417 < v416);
              }
              break;
            default:
              v381 = v3[6];
              if (v381)
              {
                v382 = 0;
                v383 = v113[19];
                v384 = v3[19];
                v385 = ((unint64_t)v115 >> 2) - 1;
                v386 = v113[3];
                do
                {
                  v387 = 0;
                  if ((v385 & 0x80000000) == 0)
                  {
                    v388 = v385;
                    LODWORD(result) = v382;
                    do
                    {
                      v389 = ldiv((int)result, v114[v388]);
                      result = v389.quot;
                      v387 += *(_QWORD *)&v386[2 * v388--] * v389.rem;
                    }
                    while (v388 != -1);
                  }
                  *(_DWORD *)(v384 + 4 * v382++) = *((char *)v383 + v387);
                }
                while (v382 != v381);
              }
              break;
          }
          break;
        case 3:
          v120 = *(unsigned int ***)result;
          v122 = **(_QWORD **)result;
          v121 = *(_QWORD *)(*(_QWORD *)result + 8);
          v123 = v121 - v122;
          switch((v121 - v122) >> 2)
          {
            case 1:
              v124 = (v123 << 30) - 0x100000000;
              v125 = *(_DWORD *)(v122 + (v124 >> 30));
              if (v125 >= 1)
              {
                v126 = v124 >> 29;
                v127 = *(_QWORD *)((char *)v120[3] + (v124 >> 29));
                v128 = *(_QWORD *)(v3[3] + v126);
                v129 = (_DWORD *)v3[19];
                v130 = v120[19];
                v131 = 4 * v128;
                do
                {
                  *v129 = *(char *)v130;
                  v130 = (unsigned int *)((char *)v130 + v127);
                  v129 = (_DWORD *)((char *)v129 + v131);
                  --v125;
                }
                while (v125);
              }
              break;
            case 2:
              v980 = (v123 << 30) - 0x200000000;
              v981 = *(_DWORD *)(v122 + (v980 >> 30));
              if (v981 >= 1)
              {
                v982 = 0;
                v983 = 0;
                v984 = 0;
                v985 = v120[3];
                v986 = v980 >> 29;
                v987 = *(_QWORD *)((char *)v985 + (v980 >> 29));
                v988 = v3[3];
                v989 = (v123 << 30) - 0x100000000;
                v990 = *(_QWORD *)((char *)v985 + (v989 >> 29));
                v991 = v989 >> 32;
                v992 = 4 * *(_QWORD *)(v988 + v986);
                v993 = 4 * *(_QWORD *)(v988 + (v989 >> 29));
                do
                {
                  result = *(unsigned int *)(v122 + 4 * v991);
                  if ((int)result >= 1)
                  {
                    v994 = v120[19];
                    v995 = (_DWORD *)(v3[19] + v982);
                    do
                    {
                      *v995 = *((char *)v994 + v984);
                      v995 = (_DWORD *)((char *)v995 + v993);
                      v994 = (unsigned int *)((char *)v994 + v990);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v984 += v987;
                  ++v983;
                  v982 += v992;
                }
                while (v983 != v981);
              }
              break;
            case 3:
              v996 = (v123 << 30) - 0x300000000;
              v997 = *(_DWORD *)(v122 + (v996 >> 30));
              if (v997 >= 1)
              {
                v998 = 0;
                v999 = 0;
                v1000 = 0;
                v1001 = v123 << 30;
                v1002 = v120[3];
                v1003 = v996 >> 29;
                v1004 = *(_QWORD *)((char *)v1002 + (v996 >> 29));
                v1005 = v3[3];
                v1006 = *(_QWORD *)(v1005 + v1003);
                v1007 = v1001 - 0x200000000;
                v1008 = (v1001 - 0x200000000) >> 29;
                v1009 = v1001 - 0x100000000;
                v1010 = *(_QWORD *)((char *)v1002 + v1008);
                v1011 = v1007 >> 32;
                v1012 = *(_QWORD *)(v1005 + v1008);
                v1013 = v1009 >> 32;
                result = 4 * v1006;
                v1014 = 4 * v1012;
                do
                {
                  v1015 = *(_DWORD *)(v122 + 4 * v1011);
                  if (v1015 >= 1)
                  {
                    v1016 = 0;
                    v1017 = *(_QWORD *)&v1002[2 * v1013];
                    v1018 = *a2;
                    v1019 = 4 * *(_QWORD *)(v1005 + 8 * v1013);
                    v1020 = v998;
                    v1021 = v1000;
                    do
                    {
                      v1022 = *(_DWORD *)(v122 + 4 * v1013);
                      if (v1022 >= 1)
                      {
                        v1023 = v120[19];
                        v1024 = (_DWORD *)(v1018[19] + v1020);
                        do
                        {
                          *v1024 = *((char *)v1023 + v1021);
                          v1024 = (_DWORD *)((char *)v1024 + v1019);
                          v1023 = (unsigned int *)((char *)v1023 + v1017);
                          --v1022;
                        }
                        while (v1022);
                      }
                      v1021 += v1010;
                      ++v1016;
                      v1020 += v1014;
                    }
                    while (v1016 != v1015);
                  }
                  v1000 += v1004;
                  ++v999;
                  v998 += result;
                }
                while (v999 != v997);
              }
              break;
            case 4:
              v1025 = (v123 << 30) - 0x400000000;
              v1521 = *(_DWORD *)(v122 + (v1025 >> 30));
              if (v1521 >= 1)
              {
                v1026 = 0;
                v1027 = 0;
                v1028 = 0;
                v1029 = v123 << 30;
                v1030 = v120[3];
                v1031 = v1025 >> 29;
                v1504 = *(_QWORD *)((char *)v1030 + v1031);
                v1032 = v3[3];
                v1487 = (v1029 - 0x300000000) >> 32;
                v1033 = (v1029 - 0x300000000) >> 29;
                v1034 = *(_QWORD *)((char *)v1030 + v1033);
                v1035 = (v1029 - 0x200000000) >> 32;
                result = (v1029 - 0x100000000) >> 32;
                v1470 = 4 * *(_QWORD *)(v1032 + v1031);
                v1036 = 4 * *(_QWORD *)(v1032 + v1033);
                do
                {
                  v1037 = *(_DWORD *)(v122 + 4 * v1487);
                  if (v1037 >= 1)
                  {
                    v1038 = 0;
                    v1039 = *(_QWORD *)&v1030[2 * v1035];
                    v1040 = 4 * *(_QWORD *)(v1032 + 8 * v1035);
                    v1041 = v1026;
                    v1042 = v1028;
                    do
                    {
                      v1043 = *(_DWORD *)(v122 + 4 * v1035);
                      if (v1043 >= 1)
                      {
                        v1044 = 0;
                        v1045 = *(_QWORD *)&v1030[2 * result];
                        v1046 = *a2;
                        v1047 = 4 * *(_QWORD *)(v1032 + 8 * result);
                        v1048 = v1041;
                        v1049 = v1042;
                        do
                        {
                          v1050 = *(_DWORD *)(v122 + 4 * result);
                          if (v1050 >= 1)
                          {
                            v1051 = v120[19];
                            v1052 = (_DWORD *)(v1046[19] + v1048);
                            do
                            {
                              *v1052 = *((char *)v1051 + v1049);
                              v1052 = (_DWORD *)((char *)v1052 + v1047);
                              v1051 = (unsigned int *)((char *)v1051 + v1045);
                              --v1050;
                            }
                            while (v1050);
                          }
                          v1049 += v1039;
                          ++v1044;
                          v1048 += v1040;
                        }
                        while (v1044 != v1043);
                      }
                      v1042 += v1034;
                      ++v1038;
                      v1041 += v1036;
                    }
                    while (v1038 != v1037);
                  }
                  v1028 += v1504;
                  ++v1027;
                  v1026 += v1470;
                }
                while (v1027 != v1521);
              }
              break;
            case 5:
              v1053 = (v123 << 30) - 0x500000000;
              v1427 = *(_DWORD *)(v122 + (v1053 >> 30));
              if (v1427 >= 1)
              {
                v1447 = 0;
                v1456 = 0;
                v1437 = 0;
                v1054 = v123 << 30;
                v1055 = v120[3];
                v1056 = v1053 >> 29;
                v1417 = *(_QWORD *)((char *)v1055 + v1056);
                v1057 = v3[3];
                v1058 = (v1054 - 0x400000000) >> 29;
                v1488 = *(_QWORD *)((char *)v1055 + v1058);
                v1407 = (v1054 - 0x400000000) >> 32;
                v1505 = (v1054 - 0x300000000) >> 32;
                result = (v1054 - 0x200000000) >> 32;
                v1059 = (v1054 - 0x100000000) >> 32;
                v1397 = 4 * *(_QWORD *)(v1057 + v1056);
                v1471 = 4 * *(_QWORD *)(v1057 + v1058);
                do
                {
                  v1522 = *(_DWORD *)(v122 + 4 * v1407);
                  if (v1522 >= 1)
                  {
                    v1060 = 0;
                    v1061 = *(_QWORD *)&v1055[2 * v1505];
                    v1062 = 4 * *(_QWORD *)(v1057 + 8 * v1505);
                    v1063 = v1447;
                    v1064 = v1456;
                    do
                    {
                      v1065 = *(_DWORD *)(v122 + 4 * v1505);
                      if (v1065 >= 1)
                      {
                        v1066 = 0;
                        v1067 = *(_QWORD *)&v1055[2 * result];
                        v1068 = 4 * *(_QWORD *)(v1057 + 8 * result);
                        v1069 = v1064;
                        v1070 = v1063;
                        do
                        {
                          v1071 = *(_DWORD *)(v122 + 4 * result);
                          if (v1071 >= 1)
                          {
                            v1072 = 0;
                            v1073 = *(_QWORD *)&v1055[2 * v1059];
                            v1074 = *a2;
                            v1075 = 4 * *(_QWORD *)(v1057 + 8 * v1059);
                            v1076 = v1069;
                            v1077 = v1070;
                            do
                            {
                              v1078 = *(_DWORD *)(v122 + 4 * v1059);
                              if (v1078 >= 1)
                              {
                                v1079 = v120[19];
                                v1080 = (_DWORD *)(v1074[19] + v1076);
                                do
                                {
                                  *v1080 = *((char *)v1079 + v1077);
                                  v1080 = (_DWORD *)((char *)v1080 + v1075);
                                  v1079 = (unsigned int *)((char *)v1079 + v1073);
                                  --v1078;
                                }
                                while (v1078);
                              }
                              v1077 += v1067;
                              ++v1072;
                              v1076 += v1068;
                            }
                            while (v1072 != v1071);
                          }
                          v1070 += v1061;
                          ++v1066;
                          v1069 += v1062;
                        }
                        while (v1066 != v1065);
                      }
                      v1063 += v1488;
                      ++v1060;
                      v1064 += v1471;
                    }
                    while (v1060 != v1522);
                  }
                  v1447 += v1417;
                  v1456 += v1397;
                  ++v1437;
                }
                while (v1437 != v1427);
              }
              break;
            default:
              LODWORD(v945) = 1;
              v946 = -20;
              do
              {
                v945 = *(int *)(v121 + v946) * (uint64_t)(int)v945;
                v946 += 4;
              }
              while (v946);
              v1384 = v120[6];
              if (v1384)
              {
                v947 = 0;
                v1374 = (v123 >> 2) - 1;
                v948 = v120[3];
                v1359 = *v3;
                v1369 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v949 = (v123 << 30) - 0x500000000;
                v950 = v3[3];
                v1364 = v949 >> 32;
                v1406 = *(_QWORD *)((char *)v948 + (v949 >> 29));
                v1416 = (uint64_t)((v123 << 30) - 0x400000000) >> 32;
                v1503 = (uint64_t)((v123 << 30) - 0x300000000) >> 32;
                v951 = (uint64_t)((v123 << 30) - 0x200000000) >> 32;
                v952 = (uint64_t)((v123 << 30) - 0x100000000) >> 32;
                v1396 = 4 * *(_QWORD *)(v950 + (v949 >> 29));
                v1379 = v945;
                do
                {
                  v953 = v1374;
                  if ((v1374 & 0x80000000) != 0)
                  {
                    v954 = 0;
                  }
                  else
                  {
                    v954 = 0;
                    LODWORD(result) = v947;
                    do
                    {
                      v955 = ldiv((int)result, *(int *)(v122 + 4 * v953));
                      result = v955.quot;
                      v954 += *(_QWORD *)&v948[2 * v953--] * v955.rem;
                    }
                    while (v953 != -1);
                  }
                  v1455 = v954;
                  v956 = v1369;
                  v1389 = v947;
                  v957 = 0;
                  if ((v1369 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v947;
                    do
                    {
                      v958 = ldiv((int)result, *(int *)(v1359 + 4 * v956));
                      result = v958.quot;
                      v957 += *(_QWORD *)(v950 + 8 * v956--) * v958.rem;
                    }
                    while (v956 != -1);
                  }
                  v1426 = *(_DWORD *)(v122 + 4 * v1364);
                  if (v1426 >= 1)
                  {
                    v959 = 0;
                    v1486 = *(_QWORD *)&v948[2 * v1416];
                    v1446 = 4 * v957;
                    v1469 = 4 * *(_QWORD *)(v950 + 8 * v1416);
                    do
                    {
                      v1436 = v959;
                      v1520 = *(_DWORD *)(v122 + 4 * v1416);
                      if (v1520 >= 1)
                      {
                        v960 = 0;
                        v961 = *(_QWORD *)&v948[2 * v1503];
                        v962 = 4 * *(_QWORD *)(v950 + 8 * v1503);
                        v963 = v1446;
                        v964 = v1455;
                        do
                        {
                          v965 = *(_DWORD *)(v122 + 4 * v1503);
                          if (v965 >= 1)
                          {
                            v966 = 0;
                            v967 = *(_QWORD *)&v948[2 * v951];
                            v968 = 4 * *(_QWORD *)(v950 + 8 * v951);
                            v969 = v963;
                            result = v964;
                            do
                            {
                              v970 = *(_DWORD *)(v122 + 4 * v951);
                              if (v970 >= 1)
                              {
                                v971 = 0;
                                v972 = *(_QWORD *)&v948[2 * v952];
                                v973 = *a2;
                                v974 = 4 * *(_QWORD *)(v950 + 8 * v952);
                                v975 = v969;
                                v976 = result;
                                do
                                {
                                  v977 = *(_DWORD *)(v122 + 4 * v952);
                                  if (v977 >= 1)
                                  {
                                    v978 = v120[19];
                                    v979 = (_DWORD *)(v973[19] + v975);
                                    do
                                    {
                                      *v979 = *((char *)v978 + v976);
                                      v979 = (_DWORD *)((char *)v979 + v974);
                                      v978 = (unsigned int *)((char *)v978 + v972);
                                      --v977;
                                    }
                                    while (v977);
                                  }
                                  v976 += v967;
                                  ++v971;
                                  v975 += v968;
                                }
                                while (v971 != v970);
                              }
                              result += v961;
                              ++v966;
                              v969 += v962;
                            }
                            while (v966 != v965);
                          }
                          v964 += v1486;
                          ++v960;
                          v963 += v1469;
                        }
                        while (v960 != v1520);
                      }
                      v1455 += v1406;
                      v959 = v1436 + 1;
                      v1446 += v1396;
                    }
                    while (v1436 + 1 != v1426);
                  }
                  v947 = v1389 + v1379;
                }
                while ((unint64_t)v1384 > v1389 + v1379);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v19 = v3[6];
          if (v19)
          {
            v20 = **(char **)(*(_QWORD *)result + 152);
            v21 = (_QWORD *)v3[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          v132 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v132)
          {
            v133 = *(char **)(*(_QWORD *)result + 152);
            v134 = (_QWORD *)v3[19];
            do
            {
              v135 = *v133++;
              *v134++ = v135;
              --v132;
            }
            while (v132);
          }
          break;
        case 2:
          v136 = *(int ***)result;
          v137 = **(int ***)result;
          v138 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v137;
          switch(v138 >> 2)
          {
            case 1:
              v139 = *v137;
              if ((int)v139 >= 1)
              {
                v140 = v136[19];
                v141 = (_QWORD *)v3[19];
                v142 = *(_QWORD *)v136[3];
                do
                {
                  *v141++ = *(char *)v140;
                  v140 = (int *)((char *)v140 + v142);
                  --v139;
                }
                while (v139);
              }
              break;
            case 2:
              v446 = *v137;
              if (*v137 >= 1)
              {
                v447 = 0;
                v448 = 0;
                v449 = 0;
                v450 = v136[19];
                v451 = v3[19];
                v452 = v137[1];
                v453 = v136[3];
                v455 = *(_QWORD *)v453;
                v454 = *((_QWORD *)v453 + 1);
                v456 = v455 - v454 * v452;
                do
                {
                  v457 = v452;
                  if ((int)v452 >= 1)
                  {
                    do
                    {
                      result = *((char *)v450 + v449);
                      *(_QWORD *)(v451 + 8 * v448++) = result;
                      v449 += v454;
                      --v457;
                    }
                    while (v457);
                  }
                  v449 += v456;
                  ++v447;
                }
                while (v447 != v446);
              }
              break;
            case 3:
              v458 = *v137;
              if (*v137 >= 1)
              {
                v459 = 0;
                result = 0;
                v460 = 0;
                v461 = v136[19];
                v462 = v3[19];
                v463 = v137[1];
                v464 = v136[3];
                v465 = *((_QWORD *)v464 + 1);
                v466 = *(_QWORD *)v464 - v465 * v463;
                do
                {
                  if ((int)v463 < 1)
                  {
                    v473 = result;
                  }
                  else
                  {
                    v467 = 0;
                    v468 = v137[2];
                    v469 = v136[3];
                    v470 = v465 - *((_QWORD *)v464 + 2) * v468;
                    do
                    {
                      if ((int)v468 < 1)
                      {
                        v473 = result;
                      }
                      else
                      {
                        v471 = *((_QWORD *)v469 + 2);
                        v472 = v468;
                        do
                        {
                          v473 = result + 1;
                          *(_QWORD *)(v462 + 8 * result) = *((char *)v461 + v460);
                          v460 += v471;
                          ++result;
                          --v472;
                        }
                        while (v472);
                      }
                      v460 += v470;
                      ++v467;
                      result = v473;
                    }
                    while (v467 != (_DWORD)v463);
                  }
                  v460 += v466;
                  ++v459;
                  result = v473;
                }
                while (v459 != v458);
              }
              break;
            case 4:
              v474 = *v137;
              if (*v137 >= 1)
              {
                v475 = 0;
                result = 0;
                v476 = 0;
                v477 = v136[19];
                v478 = v3[19];
                v479 = v137[1];
                v480 = v136[3];
                v481 = *((_QWORD *)v480 + 1);
                v482 = *(_QWORD *)v480 - v481 * v479;
                do
                {
                  if ((int)v479 < 1)
                  {
                    v493 = result;
                  }
                  else
                  {
                    v483 = 0;
                    v484 = v137[2];
                    v485 = v136[3];
                    v486 = v481 - *((_QWORD *)v480 + 2) * v484;
                    do
                    {
                      if ((int)v484 < 1)
                      {
                        v493 = result;
                      }
                      else
                      {
                        v487 = 0;
                        v488 = v137[3];
                        v489 = v136[3];
                        v490 = *((_QWORD *)v485 + 2) - *((_QWORD *)v485 + 3) * v488;
                        do
                        {
                          if ((int)v488 < 1)
                          {
                            v493 = result;
                          }
                          else
                          {
                            v491 = *((_QWORD *)v489 + 3);
                            v492 = v488;
                            do
                            {
                              v493 = result + 1;
                              *(_QWORD *)(v478 + 8 * result) = *((char *)v477 + v476);
                              v476 += v491;
                              ++result;
                              --v492;
                            }
                            while (v492);
                          }
                          v476 += v490;
                          ++v487;
                          result = v493;
                        }
                        while (v487 != (_DWORD)v484);
                      }
                      v476 += v486;
                      ++v483;
                      result = v493;
                    }
                    while (v483 != (_DWORD)v479);
                  }
                  v476 += v482;
                  ++v475;
                  result = v493;
                }
                while (v475 != v474);
              }
              break;
            default:
              v437 = v3[6];
              if (v437)
              {
                v438 = 0;
                v439 = v136[19];
                v440 = v3[19];
                v441 = ((unint64_t)v138 >> 2) - 1;
                v442 = v136[3];
                do
                {
                  v443 = 0;
                  if ((v441 & 0x80000000) == 0)
                  {
                    v444 = v441;
                    LODWORD(result) = v438;
                    do
                    {
                      v445 = ldiv((int)result, v137[v444]);
                      result = v445.quot;
                      v443 += *(_QWORD *)&v442[2 * v444--] * v445.rem;
                    }
                    while (v444 != -1);
                  }
                  *(_QWORD *)(v440 + 8 * v438++) = *((char *)v439 + v443);
                }
                while (v438 != v437);
              }
              break;
          }
          break;
        case 3:
          v143 = *(unsigned int ***)result;
          v145 = **(_QWORD **)result;
          v144 = *(_QWORD *)(*(_QWORD *)result + 8);
          v146 = v144 - v145;
          switch((v144 - v145) >> 2)
          {
            case 1:
              v147 = (v146 << 30) - 0x100000000;
              v148 = *(_DWORD *)(v145 + (v147 >> 30));
              if (v148 >= 1)
              {
                v149 = v147 >> 29;
                v150 = *(_QWORD *)((char *)v143[3] + (v147 >> 29));
                v151 = *(_QWORD *)(v3[3] + v149);
                v152 = (_QWORD *)v3[19];
                v153 = v143[19];
                v154 = 8 * v151;
                do
                {
                  *v152 = *(char *)v153;
                  v153 = (unsigned int *)((char *)v153 + v150);
                  v152 = (_QWORD *)((char *)v152 + v154);
                  --v148;
                }
                while (v148);
              }
              break;
            case 2:
              v1115 = (v146 << 30) - 0x200000000;
              v1116 = *(_DWORD *)(v145 + (v1115 >> 30));
              if (v1116 >= 1)
              {
                v1117 = 0;
                v1118 = 0;
                v1119 = 0;
                v1120 = v146 << 30;
                v1121 = v143[3];
                v1122 = v1115 >> 29;
                v1123 = *(_QWORD *)((char *)v1121 + (v1115 >> 29));
                v1124 = v3[3];
                result = v1120 - 0x100000000;
                v1125 = (v1120 - 0x100000000) >> 29;
                v1126 = *(_QWORD *)((char *)v1121 + v1125);
                v1127 = *(_DWORD *)(v145 + (result >> 30));
                v1128 = 8 * *(_QWORD *)(v1124 + v1122);
                v1129 = 8 * *(_QWORD *)(v1124 + v1125);
                do
                {
                  if (v1127 >= 1)
                  {
                    result = (uint64_t)v143[19];
                    v1130 = (_QWORD *)(v3[19] + v1117);
                    v1131 = v1127;
                    do
                    {
                      *v1130 = *(char *)(result + v1119);
                      v1130 = (_QWORD *)((char *)v1130 + v1129);
                      result += v1126;
                      --v1131;
                    }
                    while (v1131);
                  }
                  v1119 += v1123;
                  ++v1118;
                  v1117 += v1128;
                }
                while (v1118 != v1116);
              }
              break;
            case 3:
              v1132 = (v146 << 30) - 0x300000000;
              v1133 = *(_DWORD *)(v145 + (v1132 >> 30));
              if (v1133 >= 1)
              {
                v1134 = 0;
                v1135 = 0;
                v1136 = 0;
                v1137 = v146 << 30;
                v1138 = v143[3];
                v1139 = v1132 >> 29;
                v1140 = *(_QWORD *)((char *)v1138 + (v1132 >> 29));
                v1141 = v3[3];
                v1142 = *(_QWORD *)(v1141 + v1139);
                v1143 = v1137 - 0x200000000;
                v1144 = (v1137 - 0x200000000) >> 29;
                v1145 = v1137 - 0x100000000;
                v1146 = *(_QWORD *)((char *)v1138 + v1144);
                v1147 = *(_QWORD *)(v1141 + v1144);
                v1148 = *(_DWORD *)(v145 + (v1143 >> 30));
                v1149 = v1145 >> 32;
                result = 8 * v1142;
                v1150 = 8 * v1147;
                do
                {
                  if (v1148 >= 1)
                  {
                    v1151 = 0;
                    v1152 = *(_QWORD *)&v1138[2 * v1149];
                    v1153 = *(_DWORD *)(v145 + 4 * v1149);
                    v1154 = *a2;
                    v1155 = 8 * *(_QWORD *)(v1141 + 8 * v1149);
                    v1156 = v1134;
                    v1157 = v1136;
                    do
                    {
                      if (v1153 >= 1)
                      {
                        v1158 = v143[19];
                        v1159 = (_QWORD *)(v1154[19] + v1156);
                        v1160 = v1153;
                        do
                        {
                          *v1159 = *((char *)v1158 + v1157);
                          v1159 = (_QWORD *)((char *)v1159 + v1155);
                          v1158 = (unsigned int *)((char *)v1158 + v1152);
                          --v1160;
                        }
                        while (v1160);
                      }
                      v1157 += v1146;
                      ++v1151;
                      v1156 += v1150;
                    }
                    while (v1151 != v1148);
                  }
                  v1136 += v1140;
                  ++v1135;
                  v1134 += result;
                }
                while (v1135 != v1133);
              }
              break;
            case 4:
              v1161 = (v146 << 30) - 0x400000000;
              v1524 = *(_DWORD *)(v145 + (v1161 >> 30));
              if (v1524 >= 1)
              {
                v1162 = 0;
                v1163 = 0;
                v1164 = 0;
                v1165 = v143[3];
                v1166 = v1161 >> 29;
                v1507 = *(_QWORD *)((char *)v1165 + v1166);
                v1167 = v3[3];
                v1168 = (v146 << 30) - 0x300000000;
                v1169 = (v146 << 30) - 0x200000000;
                v1170 = (v146 << 30) - 0x100000000;
                v1171 = *(_QWORD *)((char *)v1165 + (v1168 >> 29));
                v1172 = *(_QWORD *)(v1167 + (v1168 >> 29));
                v1173 = *(_DWORD *)(v145 + (v1168 >> 30));
                v1473 = v1169 >> 32;
                result = v1170 >> 32;
                v1490 = 8 * *(_QWORD *)(v1167 + v1166);
                v1174 = 8 * v1172;
                do
                {
                  if (v1173 >= 1)
                  {
                    v1175 = 0;
                    v1176 = *(_QWORD *)&v1165[2 * v1473];
                    v1177 = *(_DWORD *)(v145 + 4 * v1473);
                    v1178 = 8 * *(_QWORD *)(v1167 + 8 * v1473);
                    v1179 = v1162;
                    v1180 = v1164;
                    do
                    {
                      if (v1177 >= 1)
                      {
                        v1181 = 0;
                        v1182 = *(_QWORD *)&v1165[2 * result];
                        v1183 = *(_DWORD *)(v145 + 4 * result);
                        v1184 = *a2;
                        v1185 = 8 * *(_QWORD *)(v1167 + 8 * result);
                        v1186 = v1179;
                        v1187 = v1180;
                        do
                        {
                          if (v1183 >= 1)
                          {
                            v1188 = v143[19];
                            v1189 = (_QWORD *)(v1184[19] + v1186);
                            v1190 = v1183;
                            do
                            {
                              *v1189 = *((char *)v1188 + v1187);
                              v1189 = (_QWORD *)((char *)v1189 + v1185);
                              v1188 = (unsigned int *)((char *)v1188 + v1182);
                              --v1190;
                            }
                            while (v1190);
                          }
                          v1187 += v1176;
                          ++v1181;
                          v1186 += v1178;
                        }
                        while (v1181 != v1177);
                      }
                      v1180 += v1171;
                      ++v1175;
                      v1179 += v1174;
                    }
                    while (v1175 != v1173);
                  }
                  v1164 += v1507;
                  ++v1163;
                  v1162 += v1490;
                }
                while (v1163 != v1524);
              }
              break;
            case 5:
              v1191 = (v146 << 30) - 0x500000000;
              v1429 = *(_DWORD *)(v145 + (v1191 >> 30));
              if (v1429 >= 1)
              {
                v1449 = 0;
                v1458 = 0;
                v1439 = 0;
                v1192 = v143[3];
                v1193 = v1191 >> 29;
                v1419 = *(_QWORD *)((char *)v1192 + v1193);
                v1194 = v3[3];
                v1195 = (v146 << 30) - 0x400000000;
                v1508 = *(_QWORD *)((char *)v1192 + (v1195 >> 29));
                v1525 = *(_DWORD *)(v145 + (v1195 >> 30));
                v1399 = (uint64_t)((v146 << 30) - 0x300000000) >> 32;
                v1474 = (uint64_t)((v146 << 30) - 0x200000000) >> 32;
                v1196 = (uint64_t)((v146 << 30) - 0x100000000) >> 32;
                v1409 = 8 * *(_QWORD *)(v1194 + v1193);
                v1491 = 8 * *(_QWORD *)(v1194 + (v1195 >> 29));
                do
                {
                  if (v1525 >= 1)
                  {
                    v1197 = 0;
                    v1198 = *(_QWORD *)&v1192[2 * v1399];
                    v1199 = *(_DWORD *)(v145 + 4 * v1399);
                    v1200 = 8 * *(_QWORD *)(v1194 + 8 * v1399);
                    v1201 = v1449;
                    v1202 = v1458;
                    do
                    {
                      if (v1199 >= 1)
                      {
                        v1203 = 0;
                        v1204 = *(_QWORD *)&v1192[2 * v1474];
                        v1205 = *(_DWORD *)(v145 + 4 * v1474);
                        v1206 = 8 * *(_QWORD *)(v1194 + 8 * v1474);
                        v1207 = v1202;
                        v1208 = v1201;
                        do
                        {
                          if (v1205 >= 1)
                          {
                            v1209 = 0;
                            v1210 = *(_QWORD *)&v1192[2 * v1196];
                            v1211 = *(_DWORD *)(v145 + 4 * v1196);
                            v1212 = *a2;
                            v1213 = 8 * *(_QWORD *)(v1194 + 8 * v1196);
                            v1214 = v1207;
                            v1215 = v1208;
                            do
                            {
                              if (v1211 >= 1)
                              {
                                v1216 = v143[19];
                                v1217 = (uint64_t *)(v1212[19] + v1214);
                                v1218 = v1211;
                                do
                                {
                                  result = *((char *)v1216 + v1215);
                                  *v1217 = result;
                                  v1217 = (uint64_t *)((char *)v1217 + v1213);
                                  v1216 = (unsigned int *)((char *)v1216 + v1210);
                                  --v1218;
                                }
                                while (v1218);
                              }
                              v1215 += v1204;
                              ++v1209;
                              v1214 += v1206;
                            }
                            while (v1209 != v1205);
                          }
                          v1208 += v1198;
                          ++v1203;
                          v1207 += v1200;
                        }
                        while (v1203 != v1199);
                      }
                      v1201 += v1508;
                      ++v1197;
                      v1202 += v1491;
                    }
                    while (v1197 != v1525);
                  }
                  v1449 += v1419;
                  v1458 += v1409;
                  ++v1439;
                }
                while (v1439 != v1429);
              }
              break;
            default:
              LODWORD(v1081) = 1;
              v1082 = -20;
              do
              {
                v1081 = *(int *)(v144 + v1082) * (uint64_t)(int)v1081;
                v1082 += 4;
              }
              while (v1082);
              v1385 = v143[6];
              if (v1385)
              {
                v1083 = 0;
                v1365 = *v3;
                v1084 = (v146 << 30) - 0x500000000;
                v1375 = (v146 >> 2) - 1;
                v1085 = v143[3];
                v1086 = v3[3];
                v1428 = *(_DWORD *)(v145 + (v1084 >> 30));
                v1370 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1360 = (uint64_t)((v146 << 30) - 0x400000000) >> 32;
                v1398 = (uint64_t)((v146 << 30) - 0x300000000) >> 32;
                v1472 = (uint64_t)((v146 << 30) - 0x200000000) >> 32;
                v1087 = (uint64_t)((v146 << 30) - 0x100000000) >> 32;
                v1408 = 8 * *(_QWORD *)(v1086 + (v1084 >> 29));
                v1418 = *(_QWORD *)((char *)v1085 + (v1084 >> 29));
                v1380 = v1081;
                do
                {
                  v1088 = v1375;
                  if ((v1375 & 0x80000000) != 0)
                  {
                    v1089 = 0;
                    v1090 = v1370;
                  }
                  else
                  {
                    v1089 = 0;
                    LODWORD(result) = v1083;
                    v1090 = v1370;
                    do
                    {
                      v1091 = ldiv((int)result, *(int *)(v145 + 4 * v1088));
                      result = v1091.quot;
                      v1089 += *(_QWORD *)&v1085[2 * v1088--] * v1091.rem;
                    }
                    while (v1088 != -1);
                  }
                  v1390 = v1083;
                  v1092 = 0;
                  if ((v1090 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1083;
                    do
                    {
                      v1093 = ldiv((int)result, *(int *)(v1365 + 4 * v1090));
                      result = v1093.quot;
                      v1092 += *(_QWORD *)(v1086 + 8 * v1090--) * v1093.rem;
                    }
                    while (v1090 != -1);
                  }
                  if (v1428 >= 1)
                  {
                    v1094 = 0;
                    v1506 = *(_QWORD *)&v1085[2 * v1360];
                    v1523 = *(_DWORD *)(v145 + 4 * v1360);
                    v1457 = 8 * v1092;
                    v1489 = 8 * *(_QWORD *)(v1086 + 8 * v1360);
                    do
                    {
                      v1438 = v1094;
                      v1448 = v1089;
                      if (v1523 >= 1)
                      {
                        v1095 = 0;
                        v1096 = *(_QWORD *)&v1085[2 * v1398];
                        v1097 = *(_DWORD *)(v145 + 4 * v1398);
                        v1098 = 8 * *(_QWORD *)(v1086 + 8 * v1398);
                        v1099 = v1457;
                        do
                        {
                          if (v1097 >= 1)
                          {
                            v1100 = 0;
                            v1101 = *(_QWORD *)&v1085[2 * v1472];
                            v1102 = *(_DWORD *)(v145 + 4 * v1472);
                            v1103 = 8 * *(_QWORD *)(v1086 + 8 * v1472);
                            v1104 = v1099;
                            result = v1089;
                            do
                            {
                              if (v1102 >= 1)
                              {
                                v1105 = 0;
                                v1106 = *(_QWORD *)&v1085[2 * v1087];
                                v1107 = *(_DWORD *)(v145 + 4 * v1087);
                                v1108 = *a2;
                                v1109 = 8 * *(_QWORD *)(v1086 + 8 * v1087);
                                v1110 = v1104;
                                v1111 = result;
                                do
                                {
                                  if (v1107 >= 1)
                                  {
                                    v1112 = v143[19];
                                    v1113 = (_QWORD *)(v1108[19] + v1110);
                                    v1114 = v1107;
                                    do
                                    {
                                      *v1113 = *((char *)v1112 + v1111);
                                      v1113 = (_QWORD *)((char *)v1113 + v1109);
                                      v1112 = (unsigned int *)((char *)v1112 + v1106);
                                      --v1114;
                                    }
                                    while (v1114);
                                  }
                                  v1111 += v1101;
                                  ++v1105;
                                  v1110 += v1103;
                                }
                                while (v1105 != v1102);
                              }
                              result += v1096;
                              ++v1100;
                              v1104 += v1098;
                            }
                            while (v1100 != v1097);
                          }
                          v1089 += v1506;
                          ++v1095;
                          v1099 += v1489;
                        }
                        while (v1095 != v1523);
                      }
                      v1089 = v1448 + v1418;
                      v1094 = v1438 + 1;
                      v1457 += v1408;
                    }
                    while (v1438 + 1 != v1428);
                  }
                  v1083 += v1380;
                }
                while ((unint64_t)v1385 > v1390 + v1380);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v22 = v3[6];
          if (v22)
          {
            v23 = (float)**(char **)(*(_QWORD *)result + 152);
            v24 = (float *)v3[19];
            do
            {
              *v24++ = v23;
              --v22;
            }
            while (v22);
          }
          break;
        case 1:
          v155 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v155)
          {
            v156 = *(char **)(*(_QWORD *)result + 152);
            v157 = (float *)v3[19];
            do
            {
              v158 = *v156++;
              *v157++ = (float)v158;
              --v155;
            }
            while (v155);
          }
          break;
        case 2:
          v159 = *(int ***)result;
          v160 = **(int ***)result;
          v161 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v160;
          switch(v161 >> 2)
          {
            case 1:
              v162 = *v160;
              if ((int)v162 >= 1)
              {
                v163 = v159[19];
                v164 = (float *)v3[19];
                v165 = *(_QWORD *)v159[3];
                do
                {
                  *v164++ = (float)*(char *)v163;
                  v163 = (int *)((char *)v163 + v165);
                  --v162;
                }
                while (v162);
              }
              break;
            case 2:
              v503 = *v160;
              if (*v160 >= 1)
              {
                v504 = 0;
                v505 = 0;
                v506 = 0;
                v507 = v159[19];
                v508 = v3[19];
                v509 = v160[1];
                v510 = v159[3];
                v512 = *(_QWORD *)v510;
                v511 = *((_QWORD *)v510 + 1);
                v513 = v512 - v511 * v509;
                do
                {
                  v514 = v509;
                  if ((int)v509 >= 1)
                  {
                    do
                    {
                      result = *((char *)v507 + v506);
                      *(float *)(v508 + 4 * v505++) = (float)(int)result;
                      v506 += v511;
                      --v514;
                    }
                    while (v514);
                  }
                  v506 += v513;
                  ++v504;
                }
                while (v504 != v503);
              }
              break;
            case 3:
              v515 = *v160;
              if (*v160 >= 1)
              {
                v516 = 0;
                result = 0;
                v517 = 0;
                v518 = v159[19];
                v519 = v3[19];
                v520 = v160[1];
                v521 = v159[3];
                v522 = *((_QWORD *)v521 + 1);
                v523 = *(_QWORD *)v521 - v522 * v520;
                do
                {
                  if ((int)v520 < 1)
                  {
                    v530 = result;
                  }
                  else
                  {
                    v524 = 0;
                    v525 = v160[2];
                    v526 = v159[3];
                    v527 = v522 - *((_QWORD *)v521 + 2) * v525;
                    do
                    {
                      if ((int)v525 < 1)
                      {
                        v530 = result;
                      }
                      else
                      {
                        v528 = *((_QWORD *)v526 + 2);
                        v529 = v525;
                        do
                        {
                          v530 = result + 1;
                          *(float *)(v519 + 4 * result) = (float)*((char *)v518 + v517);
                          v517 += v528;
                          ++result;
                          --v529;
                        }
                        while (v529);
                      }
                      v517 += v527;
                      ++v524;
                      result = v530;
                    }
                    while (v524 != (_DWORD)v520);
                  }
                  v517 += v523;
                  ++v516;
                  result = v530;
                }
                while (v516 != v515);
              }
              break;
            case 4:
              v531 = *v160;
              if (*v160 >= 1)
              {
                v532 = 0;
                result = 0;
                v533 = 0;
                v534 = v159[19];
                v535 = v3[19];
                v536 = v160[1];
                v537 = v159[3];
                v538 = *((_QWORD *)v537 + 1);
                v539 = *(_QWORD *)v537 - v538 * v536;
                do
                {
                  if ((int)v536 < 1)
                  {
                    v550 = result;
                  }
                  else
                  {
                    v540 = 0;
                    v541 = v160[2];
                    v542 = v159[3];
                    v543 = v538 - *((_QWORD *)v537 + 2) * v541;
                    do
                    {
                      if ((int)v541 < 1)
                      {
                        v550 = result;
                      }
                      else
                      {
                        v544 = 0;
                        v545 = v160[3];
                        v546 = v159[3];
                        v547 = *((_QWORD *)v542 + 2) - *((_QWORD *)v542 + 3) * v545;
                        do
                        {
                          if ((int)v545 < 1)
                          {
                            v550 = result;
                          }
                          else
                          {
                            v548 = *((_QWORD *)v546 + 3);
                            v549 = v545;
                            do
                            {
                              v550 = result + 1;
                              *(float *)(v535 + 4 * result) = (float)*((char *)v534 + v533);
                              v533 += v548;
                              ++result;
                              --v549;
                            }
                            while (v549);
                          }
                          v533 += v547;
                          ++v544;
                          result = v550;
                        }
                        while (v544 != (_DWORD)v541);
                      }
                      v533 += v543;
                      ++v540;
                      result = v550;
                    }
                    while (v540 != (_DWORD)v536);
                  }
                  v533 += v539;
                  ++v532;
                  result = v550;
                }
                while (v532 != v531);
              }
              break;
            default:
              v494 = v3[6];
              if (v494)
              {
                v495 = 0;
                v496 = v159[19];
                v497 = v3[19];
                v498 = ((unint64_t)v161 >> 2) - 1;
                v499 = v159[3];
                do
                {
                  v500 = 0;
                  if ((v498 & 0x80000000) == 0)
                  {
                    v501 = v498;
                    LODWORD(result) = v495;
                    do
                    {
                      v502 = ldiv((int)result, v160[v501]);
                      result = v502.quot;
                      v500 += *(_QWORD *)&v499[2 * v501--] * v502.rem;
                    }
                    while (v501 != -1);
                  }
                  *(float *)(v497 + 4 * v495++) = (float)*((char *)v496 + v500);
                }
                while (v495 != v494);
              }
              break;
          }
          break;
        case 3:
          v166 = *(unsigned int ***)result;
          v168 = **(_QWORD **)result;
          v167 = *(_QWORD *)(*(_QWORD *)result + 8);
          v169 = v167 - v168;
          switch((v167 - v168) >> 2)
          {
            case 1:
              v170 = (v169 << 30) - 0x100000000;
              v171 = *(_DWORD *)(v168 + (v170 >> 30));
              if (v171 >= 1)
              {
                v172 = v170 >> 29;
                v173 = *(_QWORD *)((char *)v166[3] + (v170 >> 29));
                v174 = *(_QWORD *)(v3[3] + v172);
                v175 = (float *)v3[19];
                v176 = v166[19];
                v177 = 4 * v174;
                do
                {
                  *v175 = (float)*(char *)v176;
                  v176 = (unsigned int *)((char *)v176 + v173);
                  v175 = (float *)((char *)v175 + v177);
                  --v171;
                }
                while (v171);
              }
              break;
            case 2:
              v1253 = (v169 << 30) - 0x200000000;
              v1254 = *(_DWORD *)(v168 + (v1253 >> 30));
              if (v1254 >= 1)
              {
                v1255 = 0;
                v1256 = 0;
                v1257 = 0;
                v1258 = v169 << 30;
                v1259 = v166[3];
                v1260 = v1253 >> 29;
                v1261 = *(_QWORD *)((char *)v1259 + (v1253 >> 29));
                v1262 = v3[3];
                result = v1258 - 0x100000000;
                v1263 = (v1258 - 0x100000000) >> 29;
                v1264 = *(_QWORD *)((char *)v1259 + v1263);
                v1265 = *(_DWORD *)(v168 + (result >> 30));
                v1266 = 4 * *(_QWORD *)(v1262 + v1260);
                v1267 = 4 * *(_QWORD *)(v1262 + v1263);
                do
                {
                  if (v1265 >= 1)
                  {
                    result = (uint64_t)v166[19];
                    v1268 = (float *)(v3[19] + v1255);
                    v1269 = v1265;
                    do
                    {
                      *v1268 = (float)*(char *)(result + v1257);
                      v1268 = (float *)((char *)v1268 + v1267);
                      result += v1264;
                      --v1269;
                    }
                    while (v1269);
                  }
                  v1257 += v1261;
                  ++v1256;
                  v1255 += v1266;
                }
                while (v1256 != v1254);
              }
              break;
            case 3:
              v1270 = (v169 << 30) - 0x300000000;
              v1271 = *(_DWORD *)(v168 + (v1270 >> 30));
              if (v1271 >= 1)
              {
                v1272 = 0;
                v1273 = 0;
                v1274 = 0;
                v1275 = v169 << 30;
                v1276 = v166[3];
                v1277 = v1270 >> 29;
                v1278 = *(_QWORD *)((char *)v1276 + (v1270 >> 29));
                v1279 = v3[3];
                v1280 = *(_QWORD *)(v1279 + v1277);
                v1281 = v1275 - 0x200000000;
                v1282 = (v1275 - 0x200000000) >> 29;
                v1283 = v1275 - 0x100000000;
                v1284 = *(_QWORD *)((char *)v1276 + v1282);
                v1285 = *(_QWORD *)(v1279 + v1282);
                v1286 = *(_DWORD *)(v168 + (v1281 >> 30));
                v1287 = v1283 >> 32;
                result = 4 * v1280;
                v1288 = 4 * v1285;
                do
                {
                  if (v1286 >= 1)
                  {
                    v1289 = 0;
                    v1290 = *(_QWORD *)&v1276[2 * v1287];
                    v1291 = *(_DWORD *)(v168 + 4 * v1287);
                    v1292 = *a2;
                    v1293 = 4 * *(_QWORD *)(v1279 + 8 * v1287);
                    v1294 = v1272;
                    v1295 = v1274;
                    do
                    {
                      if (v1291 >= 1)
                      {
                        v1296 = v166[19];
                        v1297 = (float *)(v1292[19] + v1294);
                        v1298 = v1291;
                        do
                        {
                          *v1297 = (float)*((char *)v1296 + v1295);
                          v1297 = (float *)((char *)v1297 + v1293);
                          v1296 = (unsigned int *)((char *)v1296 + v1290);
                          --v1298;
                        }
                        while (v1298);
                      }
                      v1295 += v1284;
                      ++v1289;
                      v1294 += v1288;
                    }
                    while (v1289 != v1286);
                  }
                  v1274 += v1278;
                  ++v1273;
                  v1272 += result;
                }
                while (v1273 != v1271);
              }
              break;
            case 4:
              v1299 = (v169 << 30) - 0x400000000;
              v1527 = *(_DWORD *)(v168 + (v1299 >> 30));
              if (v1527 >= 1)
              {
                v1300 = 0;
                v1301 = 0;
                v1302 = 0;
                v1303 = v166[3];
                v1304 = v1299 >> 29;
                v1510 = *(_QWORD *)((char *)v1303 + v1304);
                v1305 = v3[3];
                v1306 = (v169 << 30) - 0x300000000;
                v1307 = (v169 << 30) - 0x200000000;
                v1308 = (v169 << 30) - 0x100000000;
                v1309 = *(_QWORD *)((char *)v1303 + (v1306 >> 29));
                v1310 = *(_QWORD *)(v1305 + (v1306 >> 29));
                v1311 = *(_DWORD *)(v168 + (v1306 >> 30));
                v1476 = v1307 >> 32;
                result = v1308 >> 32;
                v1493 = 4 * *(_QWORD *)(v1305 + v1304);
                v1312 = 4 * v1310;
                do
                {
                  if (v1311 >= 1)
                  {
                    v1313 = 0;
                    v1314 = *(_QWORD *)&v1303[2 * v1476];
                    v1315 = *(_DWORD *)(v168 + 4 * v1476);
                    v1316 = 4 * *(_QWORD *)(v1305 + 8 * v1476);
                    v1317 = v1300;
                    v1318 = v1302;
                    do
                    {
                      if (v1315 >= 1)
                      {
                        v1319 = 0;
                        v1320 = *(_QWORD *)&v1303[2 * result];
                        v1321 = *(_DWORD *)(v168 + 4 * result);
                        v1322 = *a2;
                        v1323 = 4 * *(_QWORD *)(v1305 + 8 * result);
                        v1324 = v1317;
                        v1325 = v1318;
                        do
                        {
                          if (v1321 >= 1)
                          {
                            v1326 = v166[19];
                            v1327 = (float *)(v1322[19] + v1324);
                            v1328 = v1321;
                            do
                            {
                              *v1327 = (float)*((char *)v1326 + v1325);
                              v1327 = (float *)((char *)v1327 + v1323);
                              v1326 = (unsigned int *)((char *)v1326 + v1320);
                              --v1328;
                            }
                            while (v1328);
                          }
                          v1325 += v1314;
                          ++v1319;
                          v1324 += v1316;
                        }
                        while (v1319 != v1315);
                      }
                      v1318 += v1309;
                      ++v1313;
                      v1317 += v1312;
                    }
                    while (v1313 != v1311);
                  }
                  v1302 += v1510;
                  ++v1301;
                  v1300 += v1493;
                }
                while (v1301 != v1527);
              }
              break;
            case 5:
              v1329 = (v169 << 30) - 0x500000000;
              v1431 = *(_DWORD *)(v168 + (v1329 >> 30));
              if (v1431 >= 1)
              {
                v1451 = 0;
                v1460 = 0;
                v1441 = 0;
                v1330 = v166[3];
                v1331 = v1329 >> 29;
                v1421 = *(_QWORD *)((char *)v1330 + v1331);
                v1332 = v3[3];
                v1333 = (v169 << 30) - 0x400000000;
                v1511 = *(_QWORD *)((char *)v1330 + (v1333 >> 29));
                v1528 = *(_DWORD *)(v168 + (v1333 >> 30));
                v1401 = (uint64_t)((v169 << 30) - 0x300000000) >> 32;
                v1477 = (uint64_t)((v169 << 30) - 0x200000000) >> 32;
                v1334 = (uint64_t)((v169 << 30) - 0x100000000) >> 32;
                v1411 = 4 * *(_QWORD *)(v1332 + v1331);
                v1494 = 4 * *(_QWORD *)(v1332 + (v1333 >> 29));
                do
                {
                  if (v1528 >= 1)
                  {
                    v1335 = 0;
                    v1336 = *(_QWORD *)&v1330[2 * v1401];
                    v1337 = *(_DWORD *)(v168 + 4 * v1401);
                    v1338 = 4 * *(_QWORD *)(v1332 + 8 * v1401);
                    v1339 = v1451;
                    v1340 = v1460;
                    do
                    {
                      if (v1337 >= 1)
                      {
                        v1341 = 0;
                        v1342 = *(_QWORD *)&v1330[2 * v1477];
                        v1343 = *(_DWORD *)(v168 + 4 * v1477);
                        v1344 = 4 * *(_QWORD *)(v1332 + 8 * v1477);
                        v1345 = v1340;
                        v1346 = v1339;
                        do
                        {
                          if (v1343 >= 1)
                          {
                            v1347 = 0;
                            v1348 = *(_QWORD *)&v1330[2 * v1334];
                            v1349 = *(_DWORD *)(v168 + 4 * v1334);
                            v1350 = *a2;
                            v1351 = 4 * *(_QWORD *)(v1332 + 8 * v1334);
                            v1352 = v1345;
                            v1353 = v1346;
                            do
                            {
                              if (v1349 >= 1)
                              {
                                v1354 = v166[19];
                                v1355 = (float *)(v1350[19] + v1352);
                                v1356 = v1349;
                                do
                                {
                                  result = *((char *)v1354 + v1353);
                                  *v1355 = (float)(int)result;
                                  v1355 = (float *)((char *)v1355 + v1351);
                                  v1354 = (unsigned int *)((char *)v1354 + v1348);
                                  --v1356;
                                }
                                while (v1356);
                              }
                              v1353 += v1342;
                              ++v1347;
                              v1352 += v1344;
                            }
                            while (v1347 != v1343);
                          }
                          v1346 += v1336;
                          ++v1341;
                          v1345 += v1338;
                        }
                        while (v1341 != v1337);
                      }
                      v1339 += v1511;
                      ++v1335;
                      v1340 += v1494;
                    }
                    while (v1335 != v1528);
                  }
                  v1451 += v1421;
                  v1460 += v1411;
                  ++v1441;
                }
                while (v1441 != v1431);
              }
              break;
            default:
              LODWORD(v1219) = 1;
              v1220 = -20;
              do
              {
                v1219 = *(int *)(v167 + v1220) * (uint64_t)(int)v1219;
                v1220 += 4;
              }
              while (v1220);
              v1386 = v166[6];
              if (v1386)
              {
                v1221 = 0;
                v1366 = *v3;
                v1222 = (v169 << 30) - 0x500000000;
                v1376 = (v169 >> 2) - 1;
                v1223 = v166[3];
                v1224 = v3[3];
                v1430 = *(_DWORD *)(v168 + (v1222 >> 30));
                v1371 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1361 = (uint64_t)((v169 << 30) - 0x400000000) >> 32;
                v1400 = (uint64_t)((v169 << 30) - 0x300000000) >> 32;
                v1475 = (uint64_t)((v169 << 30) - 0x200000000) >> 32;
                v1225 = (uint64_t)((v169 << 30) - 0x100000000) >> 32;
                v1410 = 4 * *(_QWORD *)(v1224 + (v1222 >> 29));
                v1420 = *(_QWORD *)((char *)v1223 + (v1222 >> 29));
                v1381 = v1219;
                do
                {
                  v1226 = v1376;
                  if ((v1376 & 0x80000000) != 0)
                  {
                    v1227 = 0;
                    v1228 = v1371;
                  }
                  else
                  {
                    v1227 = 0;
                    LODWORD(result) = v1221;
                    v1228 = v1371;
                    do
                    {
                      v1229 = ldiv((int)result, *(int *)(v168 + 4 * v1226));
                      result = v1229.quot;
                      v1227 += *(_QWORD *)&v1223[2 * v1226--] * v1229.rem;
                    }
                    while (v1226 != -1);
                  }
                  v1391 = v1221;
                  v1230 = 0;
                  if ((v1228 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1221;
                    do
                    {
                      v1231 = ldiv((int)result, *(int *)(v1366 + 4 * v1228));
                      result = v1231.quot;
                      v1230 += *(_QWORD *)(v1224 + 8 * v1228--) * v1231.rem;
                    }
                    while (v1228 != -1);
                  }
                  if (v1430 >= 1)
                  {
                    v1232 = 0;
                    v1509 = *(_QWORD *)&v1223[2 * v1361];
                    v1526 = *(_DWORD *)(v168 + 4 * v1361);
                    v1459 = 4 * v1230;
                    v1492 = 4 * *(_QWORD *)(v1224 + 8 * v1361);
                    do
                    {
                      v1440 = v1232;
                      v1450 = v1227;
                      if (v1526 >= 1)
                      {
                        v1233 = 0;
                        v1234 = *(_QWORD *)&v1223[2 * v1400];
                        v1235 = *(_DWORD *)(v168 + 4 * v1400);
                        v1236 = 4 * *(_QWORD *)(v1224 + 8 * v1400);
                        v1237 = v1459;
                        do
                        {
                          if (v1235 >= 1)
                          {
                            v1238 = 0;
                            v1239 = *(_QWORD *)&v1223[2 * v1475];
                            v1240 = *(_DWORD *)(v168 + 4 * v1475);
                            v1241 = 4 * *(_QWORD *)(v1224 + 8 * v1475);
                            v1242 = v1237;
                            result = v1227;
                            do
                            {
                              if (v1240 >= 1)
                              {
                                v1243 = 0;
                                v1244 = *(_QWORD *)&v1223[2 * v1225];
                                v1245 = *(_DWORD *)(v168 + 4 * v1225);
                                v1246 = *a2;
                                v1247 = 4 * *(_QWORD *)(v1224 + 8 * v1225);
                                v1248 = v1242;
                                v1249 = result;
                                do
                                {
                                  if (v1245 >= 1)
                                  {
                                    v1250 = v166[19];
                                    v1251 = (float *)(v1246[19] + v1248);
                                    v1252 = v1245;
                                    do
                                    {
                                      *v1251 = (float)*((char *)v1250 + v1249);
                                      v1251 = (float *)((char *)v1251 + v1247);
                                      v1250 = (unsigned int *)((char *)v1250 + v1244);
                                      --v1252;
                                    }
                                    while (v1252);
                                  }
                                  v1249 += v1239;
                                  ++v1243;
                                  v1248 += v1241;
                                }
                                while (v1243 != v1240);
                              }
                              result += v1234;
                              ++v1238;
                              v1242 += v1236;
                            }
                            while (v1238 != v1235);
                          }
                          v1227 += v1509;
                          ++v1233;
                          v1237 += v1492;
                        }
                        while (v1233 != v1526);
                      }
                      v1227 = v1450 + v1420;
                      v1232 = v1440 + 1;
                      v1459 += v1410;
                    }
                    while (v1440 + 1 != v1430);
                  }
                  v1221 += v1381;
                }
                while ((unint64_t)v1386 > v1391 + v1381);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<int>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  BOOL *v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  BOOL *v36;
  uint64_t v37;
  unsigned int **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _BYTE *v52;
  uint64_t v53;
  int v54;
  int **v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int **v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  int *v73;
  uint64_t v74;
  int **v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int **v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  _BYTE *v97;
  uint64_t v98;
  int v99;
  int **v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  int **v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  int *v118;
  uint64_t v119;
  int **v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int **v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  int **v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  _QWORD *v150;
  uint64_t v151;
  unsigned int **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unsigned int *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  float *v167;
  uint64_t v168;
  int v169;
  int **v170;
  int *v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  float *v175;
  uint64_t v176;
  unsigned int **v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  float *v186;
  int *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  ldiv_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  unint64_t v247;
  int *v248;
  uint64_t v249;
  int *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int *v254;
  ldiv_t v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  int *v260;
  uint64_t v261;
  int v262;
  int *v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  int *v269;
  uint64_t v270;
  int v271;
  int i;
  int v273;
  uint64_t v274;
  int *v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  int *v281;
  uint64_t v282;
  int v283;
  int j;
  int v285;
  int k;
  int v287;
  uint64_t v288;
  int *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int *v294;
  uint64_t v295;
  uint64_t v296;
  int *v297;
  uint64_t v298;
  uint64_t v299;
  ldiv_t v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  int *v305;
  uint64_t v306;
  int *v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  int *v315;
  uint64_t v316;
  int *v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  int v321;
  int *v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  int *v331;
  uint64_t v332;
  int *v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  int *v338;
  uint64_t v339;
  int v340;
  int v341;
  int *v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  int *v349;
  uint64_t v350;
  int *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int *v355;
  ldiv_t v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  int *v361;
  uint64_t v362;
  int v363;
  int *v364;
  uint64_t v365;
  int v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  int *v370;
  uint64_t v371;
  int v372;
  int m;
  int v374;
  uint64_t v375;
  int *v376;
  uint64_t v377;
  int v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  int *v382;
  uint64_t v383;
  int v384;
  int n;
  int v386;
  int ii;
  int v388;
  uint64_t v389;
  int *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int *v395;
  uint64_t v396;
  uint64_t v397;
  int *v398;
  uint64_t v399;
  uint64_t v400;
  ldiv_t v401;
  int v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  int *v406;
  uint64_t v407;
  int *v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  int *v416;
  uint64_t v417;
  int *v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  int v422;
  int *v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  int *v432;
  uint64_t v433;
  int *v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  int v438;
  int *v439;
  uint64_t v440;
  int v441;
  int v442;
  int *v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int *v451;
  uint64_t v452;
  uint64_t v453;
  int *v454;
  uint64_t v455;
  uint64_t v456;
  ldiv_t v457;
  int v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  int *v462;
  uint64_t v463;
  uint64_t v464;
  int *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  int v470;
  int v471;
  uint64_t v472;
  int *v473;
  uint64_t v474;
  uint64_t v475;
  int *v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  int *v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  int v486;
  int v487;
  uint64_t v488;
  int *v489;
  uint64_t v490;
  uint64_t v491;
  int *v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  uint64_t v496;
  int *v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  int *v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  int *v508;
  uint64_t v509;
  uint64_t v510;
  int *v511;
  uint64_t v512;
  uint64_t v513;
  ldiv_t v514;
  int v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  int *v519;
  uint64_t v520;
  uint64_t v521;
  int *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  int v527;
  int v528;
  uint64_t v529;
  int *v530;
  uint64_t v531;
  uint64_t v532;
  int *v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  int *v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  int v543;
  int v544;
  uint64_t v545;
  int *v546;
  uint64_t v547;
  uint64_t v548;
  int *v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  int *v554;
  uint64_t v555;
  int v556;
  uint64_t v557;
  int *v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unsigned int *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  ldiv_t v572;
  uint64_t v573;
  uint64_t v574;
  ldiv_t v575;
  int v576;
  int v577;
  uint64_t v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  uint64_t v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  _DWORD *v596;
  int v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  uint64_t v603;
  unsigned int *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  _DWORD *v615;
  int v616;
  uint64_t v617;
  int v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  unsigned int *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _DWORD *v644;
  int v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  uint64_t v649;
  unsigned int *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  int v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  uint64_t v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  _DWORD *v674;
  int v675;
  uint64_t v676;
  unsigned int *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  int v682;
  uint64_t v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  int v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  _DWORD *v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  _QWORD *v706;
  int *v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  ldiv_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  int quot;
  ldiv_t v719;
  uint64_t v720;
  int v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  int v726;
  uint64_t v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  int v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  int v742;
  uint64_t v743;
  int v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  int v750;
  int v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  _DWORD *v763;
  uint64_t v764;
  uint64_t v765;
  int v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unsigned int *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  ldiv_t v782;
  uint64_t v783;
  int v784;
  ldiv_t v785;
  int v786;
  int v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  int v792;
  int v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  int v798;
  int v799;
  _QWORD *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  _DWORD *v806;
  _DWORD *v807;
  uint64_t v808;
  int v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  unsigned int *v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  _DWORD *v825;
  _DWORD *v826;
  uint64_t v827;
  int v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  unsigned int *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  int v845;
  int v846;
  _QWORD *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  _DWORD *v853;
  _DWORD *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  int v858;
  uint64_t v859;
  unsigned int *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  int v869;
  int v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  int v876;
  _QWORD *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  int v882;
  _DWORD *v883;
  _DWORD *v884;
  uint64_t v885;
  uint64_t v886;
  unsigned int *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  int v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  int v898;
  int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  int v910;
  _DWORD *v911;
  _DWORD *v912;
  uint64_t v913;
  uint64_t v914;
  _QWORD *v915;
  int *v916;
  unint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  ldiv_t v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  int v927;
  ldiv_t v928;
  uint64_t v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  int v935;
  uint64_t v936;
  int v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  int v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  int v951;
  uint64_t v952;
  int v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  int v959;
  int v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  int v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  _DWORD *v972;
  uint64_t v973;
  uint64_t v974;
  int v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  unsigned int *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  ldiv_t v991;
  uint64_t v992;
  int v993;
  ldiv_t v994;
  int v995;
  int v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int v1001;
  int v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int v1007;
  int v1008;
  _QWORD *v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  int v1014;
  _DWORD *v1015;
  _DWORD *v1016;
  uint64_t v1017;
  int v1018;
  uint64_t v1019;
  uint64_t v1020;
  int v1021;
  unsigned int *v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  _DWORD *v1034;
  _DWORD *v1035;
  uint64_t v1036;
  int v1037;
  uint64_t v1038;
  uint64_t v1039;
  int v1040;
  uint64_t v1041;
  unsigned int *v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  int v1054;
  int v1055;
  _QWORD *v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  int v1061;
  _DWORD *v1062;
  _DWORD *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  int v1067;
  uint64_t v1068;
  unsigned int *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  int v1078;
  int v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  int v1084;
  int v1085;
  _QWORD *v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  int v1091;
  _DWORD *v1092;
  _DWORD *v1093;
  uint64_t v1094;
  uint64_t v1095;
  unsigned int *v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  int v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  int v1107;
  int v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  int v1113;
  int v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  int v1119;
  _DWORD *v1120;
  _DWORD *v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unsigned int *v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  ldiv_t v1132;
  uint64_t v1133;
  ldiv_t v1134;
  int v1135;
  int v1136;
  int v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  int v1142;
  int v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  int v1147;
  int v1148;
  _QWORD *v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  _QWORD *v1154;
  int *v1155;
  int v1156;
  uint64_t v1157;
  int v1158;
  uint64_t v1159;
  uint64_t v1160;
  int v1161;
  unsigned int *v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  int v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  int *v1174;
  int v1175;
  uint64_t v1176;
  int v1177;
  uint64_t v1178;
  uint64_t v1179;
  int v1180;
  unsigned int *v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  int v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  int v1195;
  int v1196;
  _QWORD *v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  _QWORD *v1202;
  int *v1203;
  int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  int v1208;
  unsigned int *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  int v1218;
  uint64_t v1219;
  uint64_t v1220;
  int v1221;
  int v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  int v1227;
  int v1228;
  _QWORD *v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  _QWORD *v1234;
  int *v1235;
  int v1236;
  uint64_t v1237;
  unsigned int *v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  int v1243;
  int v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  int v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  int v1255;
  int v1256;
  _QWORD *v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  _QWORD *v1262;
  int *v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  unsigned int *v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  ldiv_t v1274;
  uint64_t v1275;
  int v1276;
  ldiv_t v1277;
  int v1278;
  int v1279;
  int v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  int v1285;
  int v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  int v1291;
  int v1292;
  _QWORD *v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  float *v1298;
  int *v1299;
  int v1300;
  uint64_t v1301;
  int v1302;
  uint64_t v1303;
  uint64_t v1304;
  int v1305;
  unsigned int *v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  int v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  int *v1318;
  int v1319;
  uint64_t v1320;
  int v1321;
  uint64_t v1322;
  uint64_t v1323;
  int v1324;
  unsigned int *v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  int v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  int v1339;
  int v1340;
  _QWORD *v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  float *v1346;
  int *v1347;
  int v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  int v1352;
  unsigned int *v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  int v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  int v1366;
  int v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  int v1372;
  int v1373;
  _QWORD *v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  float *v1379;
  int *v1380;
  int v1381;
  uint64_t v1382;
  unsigned int *v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  int v1389;
  int v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  int v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  int v1401;
  int v1402;
  _QWORD *v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  float *v1408;
  int *v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  unsigned int *v1430;
  unsigned int *v1431;
  uint64_t v1432;
  uint64_t v1433;
  unsigned int *v1434;
  uint64_t v1435;
  uint64_t v1436;
  unsigned int *v1437;
  unsigned int *v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  int v1473;
  int v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  int v1480;
  uint64_t v1481;
  uint64_t v1482;
  int v1483;
  int v1484;
  int v1485;
  int v1486;
  int v1487;
  int v1488;
  int v1489;
  int v1490;
  int v1491;
  int v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  int v1501;
  int v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  _QWORD *v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  _QWORD *v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t *v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  int v1563;
  int v1564;
  int v1565;
  uint64_t v1566;
  int v1567;
  int v1568;
  int v1569;
  uint64_t v1570;
  int v1571;
  int v1572;
  int v1573;
  int v1574;
  int v1575;
  int v1576;
  int v1577;
  int v1578;
  int v1579;

  v3 = (uint64_t *)*a2;
  v5 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v6 = v3[6];
          if (v6)
            result = (uint64_t)memset((void *)v3[19], **(_DWORD **)(*(_QWORD *)result + 152) != 0, v6);
          break;
        case 1:
          v26 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v26)
          {
            v27 = *(int **)(*(_QWORD *)result + 152);
            v28 = (BOOL *)v3[19];
            v29 = 4 * v26;
            do
            {
              v30 = *v27++;
              *v28++ = v30 != 0;
              v29 -= 4;
            }
            while (v29);
          }
          break;
        case 2:
          v31 = *(uint64_t **)result;
          v32 = **(int ***)result;
          v33 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v32;
          switch(v33 >> 2)
          {
            case 1:
              v34 = *v32;
              if ((int)v34 >= 1)
              {
                v35 = (_DWORD *)v31[19];
                v36 = (BOOL *)v3[19];
                v37 = 4 * *(_QWORD *)v31[3];
                do
                {
                  *v36++ = *v35 != 0;
                  v35 = (_DWORD *)((char *)v35 + v37);
                  --v34;
                }
                while (v34);
              }
              break;
            case 2:
              v199 = *v32;
              if (*v32 >= 1)
              {
                v200 = 0;
                v201 = 0;
                v202 = 0;
                v203 = v31[19];
                v204 = v3[19];
                v205 = v32[1];
                v206 = (uint64_t *)v31[3];
                v208 = *v206;
                v207 = v206[1];
                v209 = v208 - v207 * v205;
                do
                {
                  v210 = v205;
                  if ((int)v205 >= 1)
                  {
                    do
                    {
                      result = *(_DWORD *)(v203 + 4 * v202) != 0;
                      *(_BYTE *)(v204 + v201++) = result;
                      v202 += v207;
                      --v210;
                    }
                    while (v210);
                  }
                  v202 += v209;
                  ++v200;
                }
                while (v200 != v199);
              }
              break;
            case 3:
              v211 = *v32;
              if (*v32 >= 1)
              {
                v212 = 0;
                result = 0;
                v213 = 0;
                v214 = v31[19];
                v215 = v3[19];
                v216 = v32[1];
                v217 = (_QWORD *)v31[3];
                v218 = v217[1];
                v219 = *v217 - v218 * v216;
                do
                {
                  if ((int)v216 < 1)
                  {
                    v226 = result;
                  }
                  else
                  {
                    v220 = 0;
                    v221 = v32[2];
                    v222 = v31[3];
                    v223 = v218 - v217[2] * v221;
                    do
                    {
                      if ((int)v221 < 1)
                      {
                        v226 = result;
                      }
                      else
                      {
                        v224 = *(_QWORD *)(v222 + 16);
                        v225 = v221;
                        do
                        {
                          v226 = result + 1;
                          *(_BYTE *)(v215 + result) = *(_DWORD *)(v214 + 4 * v213) != 0;
                          v213 += v224;
                          ++result;
                          --v225;
                        }
                        while (v225);
                      }
                      v213 += v223;
                      ++v220;
                      result = v226;
                    }
                    while (v220 != (_DWORD)v216);
                  }
                  v213 += v219;
                  ++v212;
                  result = v226;
                }
                while (v212 != v211);
              }
              break;
            case 4:
              v227 = *v32;
              if (*v32 >= 1)
              {
                v228 = 0;
                result = 0;
                v229 = 0;
                v230 = v31[19];
                v231 = v3[19];
                v232 = v32[1];
                v233 = (_QWORD *)v31[3];
                v234 = v233[1];
                v235 = *v233 - v234 * v232;
                do
                {
                  if ((int)v232 < 1)
                  {
                    v246 = result;
                  }
                  else
                  {
                    v236 = 0;
                    v237 = v32[2];
                    v238 = v31[3];
                    v239 = v234 - v233[2] * v237;
                    do
                    {
                      if ((int)v237 < 1)
                      {
                        v246 = result;
                      }
                      else
                      {
                        v240 = 0;
                        v241 = v32[3];
                        v242 = v31[3];
                        v243 = *(_QWORD *)(v238 + 16) - *(_QWORD *)(v238 + 24) * v241;
                        do
                        {
                          if ((int)v241 < 1)
                          {
                            v246 = result;
                          }
                          else
                          {
                            v244 = *(_QWORD *)(v242 + 24);
                            v245 = v241;
                            do
                            {
                              v246 = result + 1;
                              *(_BYTE *)(v231 + result) = *(_DWORD *)(v230 + 4 * v229) != 0;
                              v229 += v244;
                              ++result;
                              --v245;
                            }
                            while (v245);
                          }
                          v229 += v243;
                          ++v240;
                          result = v246;
                        }
                        while (v240 != (_DWORD)v237);
                      }
                      v229 += v239;
                      ++v236;
                      result = v246;
                    }
                    while (v236 != (_DWORD)v232);
                  }
                  v229 += v235;
                  ++v228;
                  result = v246;
                }
                while (v228 != v227);
              }
              break;
            default:
              v190 = v3[6];
              if (v190)
              {
                v191 = 0;
                v192 = v31[19];
                v193 = v3[19];
                v194 = ((unint64_t)v33 >> 2) - 1;
                v195 = v31[3];
                do
                {
                  v196 = 0;
                  if ((v194 & 0x80000000) == 0)
                  {
                    v197 = v194;
                    LODWORD(result) = v191;
                    do
                    {
                      v198 = ldiv((int)result, v32[v197]);
                      result = v198.quot;
                      v196 += *(_QWORD *)(v195 + 8 * v197--) * v198.rem;
                    }
                    while (v197 != -1);
                  }
                  *(_BYTE *)(v193 + v191++) = *(_DWORD *)(v192 + 4 * v196) != 0;
                }
                while (v191 != v190);
              }
              break;
          }
          break;
        case 3:
          v38 = *(unsigned int ***)result;
          v40 = **(_QWORD **)result;
          v39 = *(_QWORD *)(*(_QWORD *)result + 8);
          v41 = v39 - v40;
          switch((v39 - v40) >> 2)
          {
            case 1:
              v42 = (v41 << 30) - 0x100000000;
              v43 = *(_DWORD *)(v40 + (v42 >> 30));
              if (v43 >= 1)
              {
                v44 = v42 >> 29;
                v45 = *(_QWORD *)((char *)v38[3] + v44);
                v46 = *(_QWORD *)(v3[3] + v44);
                v47 = (BOOL *)v3[19];
                v48 = v38[19];
                v49 = 4 * v45;
                do
                {
                  *v47 = *v48 != 0;
                  v47 += v46;
                  v48 = (unsigned int *)((char *)v48 + v49);
                  --v43;
                }
                while (v43);
              }
              break;
            case 2:
              v598 = (v41 << 30) - 0x200000000;
              v599 = *(_DWORD *)(v40 + (v598 >> 30));
              if (v599 >= 1)
              {
                v600 = 0;
                v601 = 0;
                v602 = 0;
                v603 = v41 << 30;
                v604 = v38[3];
                v605 = v598 >> 29;
                v606 = *(_QWORD *)((char *)v604 + v605);
                v607 = v3[3];
                v608 = *(_QWORD *)(v607 + v605);
                result = v603 - 0x100000000;
                v609 = (v603 - 0x100000000) >> 29;
                v610 = *(_QWORD *)((char *)v604 + v609);
                v611 = *(_QWORD *)(v607 + v609);
                v612 = *(_DWORD *)(v40 + (result >> 30));
                v613 = 4 * v606;
                v614 = 4 * v610;
                do
                {
                  if (v612 >= 1)
                  {
                    result = v3[19];
                    v615 = (unsigned int *)((char *)v38[19] + v600);
                    v616 = v612;
                    do
                    {
                      *(_BYTE *)(result + v602) = *v615 != 0;
                      result += v611;
                      v615 = (_DWORD *)((char *)v615 + v614);
                      --v616;
                    }
                    while (v616);
                  }
                  v602 += v608;
                  ++v601;
                  v600 += v613;
                }
                while (v601 != v599);
              }
              break;
            case 3:
              v617 = (v41 << 30) - 0x300000000;
              v618 = *(_DWORD *)(v40 + (v617 >> 30));
              if (v618 >= 1)
              {
                v619 = 0;
                v620 = 0;
                v621 = 0;
                v622 = v41 << 30;
                v623 = v38[3];
                v624 = v617 >> 29;
                v625 = *(_QWORD *)((char *)v623 + v624);
                v626 = v3[3];
                v627 = *(_QWORD *)(v626 + v624);
                v628 = v622 - 0x200000000;
                v629 = (v622 - 0x200000000) >> 29;
                v630 = v622 - 0x100000000;
                v631 = *(_QWORD *)((char *)v623 + v629);
                v632 = *(_QWORD *)(v626 + v629);
                v633 = *(_DWORD *)(v40 + (v628 >> 30));
                v634 = v630 >> 32;
                result = 4 * v625;
                v635 = 4 * v631;
                do
                {
                  if (v633 >= 1)
                  {
                    v636 = 0;
                    v637 = *(_QWORD *)(v626 + 8 * v634);
                    v638 = *(_DWORD *)(v40 + 4 * v634);
                    v639 = *a2;
                    v640 = 4 * *(_QWORD *)&v623[2 * v634];
                    v641 = v619;
                    v642 = v621;
                    do
                    {
                      if (v638 >= 1)
                      {
                        v643 = *(_QWORD *)(v639 + 152);
                        v644 = (unsigned int *)((char *)v38[19] + v641);
                        v645 = v638;
                        do
                        {
                          *(_BYTE *)(v643 + v642) = *v644 != 0;
                          v643 += v637;
                          v644 = (_DWORD *)((char *)v644 + v640);
                          --v645;
                        }
                        while (v645);
                      }
                      v642 += v632;
                      ++v636;
                      v641 += v635;
                    }
                    while (v636 != v633);
                  }
                  v621 += v627;
                  ++v620;
                  v619 += result;
                }
                while (v620 != v618);
              }
              break;
            case 4:
              v646 = (v41 << 30) - 0x400000000;
              v1564 = *(_DWORD *)(v40 + (v646 >> 30));
              if (v1564 >= 1)
              {
                v647 = 0;
                v648 = 0;
                v649 = 0;
                v650 = v38[3];
                v651 = v646 >> 29;
                v652 = *(_QWORD *)((char *)v650 + v651);
                v653 = v3[3];
                v1547 = *(_QWORD *)(v653 + v651);
                v654 = (v41 << 30) - 0x300000000;
                v655 = (v41 << 30) - 0x200000000;
                v656 = (v41 << 30) - 0x100000000;
                v657 = *(_QWORD *)(v653 + (v654 >> 29));
                v658 = *(_DWORD *)(v40 + (v654 >> 30));
                v1514 = v655 >> 32;
                result = v656 >> 32;
                v1530 = 4 * v652;
                v659 = 4 * *(_QWORD *)((char *)v650 + (v654 >> 29));
                do
                {
                  if (v658 >= 1)
                  {
                    v660 = 0;
                    v661 = *(_QWORD *)(v653 + 8 * v1514);
                    v662 = *(_DWORD *)(v40 + 4 * v1514);
                    v663 = 4 * *(_QWORD *)&v650[2 * v1514];
                    v664 = v647;
                    v665 = v649;
                    do
                    {
                      if (v662 >= 1)
                      {
                        v666 = 0;
                        v667 = *(_QWORD *)(v653 + 8 * result);
                        v668 = *(_DWORD *)(v40 + 4 * result);
                        v669 = *a2;
                        v670 = 4 * *(_QWORD *)&v650[2 * result];
                        v671 = v664;
                        v672 = v665;
                        do
                        {
                          if (v668 >= 1)
                          {
                            v673 = *(_QWORD *)(v669 + 152);
                            v674 = (unsigned int *)((char *)v38[19] + v671);
                            v675 = v668;
                            do
                            {
                              *(_BYTE *)(v673 + v672) = *v674 != 0;
                              v673 += v667;
                              v674 = (_DWORD *)((char *)v674 + v670);
                              --v675;
                            }
                            while (v675);
                          }
                          v672 += v661;
                          ++v666;
                          v671 += v663;
                        }
                        while (v666 != v662);
                      }
                      v665 += v657;
                      ++v660;
                      v664 += v659;
                    }
                    while (v660 != v658);
                  }
                  v649 += v1547;
                  ++v648;
                  v647 += v1530;
                }
                while (v648 != v1564);
              }
              break;
            case 5:
              v676 = (v41 << 30) - 0x500000000;
              v1474 = *(_DWORD *)(v40 + (v676 >> 30));
              if (v1474 >= 1)
              {
                v1494 = 0;
                v1504 = 0;
                v1484 = 0;
                v677 = v38[3];
                v678 = v676 >> 29;
                v679 = v3[3];
                v1464 = *(_QWORD *)(v679 + v678);
                v680 = (v41 << 30) - 0x400000000;
                v1548 = *(_QWORD *)(v679 + (v680 >> 29));
                v1565 = *(_DWORD *)(v40 + (v680 >> 30));
                v1445 = (uint64_t)((v41 << 30) - 0x300000000) >> 32;
                v1515 = (uint64_t)((v41 << 30) - 0x200000000) >> 32;
                v681 = (uint64_t)((v41 << 30) - 0x100000000) >> 32;
                v1454 = 4 * *(_QWORD *)((char *)v677 + v678);
                v1531 = 4 * *(_QWORD *)((char *)v677 + (v680 >> 29));
                do
                {
                  if (v1565 >= 1)
                  {
                    v682 = 0;
                    v683 = *(_QWORD *)(v679 + 8 * v1445);
                    v684 = *(_DWORD *)(v40 + 4 * v1445);
                    v685 = 4 * *(_QWORD *)&v677[2 * v1445];
                    v686 = v1494;
                    v687 = v1504;
                    do
                    {
                      if (v684 >= 1)
                      {
                        v688 = 0;
                        v689 = *(_QWORD *)(v679 + 8 * v1515);
                        v690 = *(_DWORD *)(v40 + 4 * v1515);
                        v691 = 4 * *(_QWORD *)&v677[2 * v1515];
                        v692 = v687;
                        v693 = v686;
                        do
                        {
                          if (v690 >= 1)
                          {
                            v694 = 0;
                            v695 = *(_QWORD *)(v679 + 8 * v681);
                            v696 = *(_DWORD *)(v40 + 4 * v681);
                            v697 = *a2;
                            v698 = 4 * *(_QWORD *)&v677[2 * v681];
                            v699 = v692;
                            v700 = v693;
                            do
                            {
                              if (v696 >= 1)
                              {
                                v701 = *(_QWORD *)(v697 + 152);
                                v702 = (unsigned int *)((char *)v38[19] + v699);
                                v703 = v696;
                                do
                                {
                                  result = *v702 != 0;
                                  *(_BYTE *)(v701 + v700) = result;
                                  v701 += v695;
                                  v702 = (_DWORD *)((char *)v702 + v698);
                                  --v703;
                                }
                                while (v703);
                              }
                              v700 += v689;
                              ++v694;
                              v699 += v691;
                            }
                            while (v694 != v690);
                          }
                          v693 += v683;
                          ++v688;
                          v692 += v685;
                        }
                        while (v688 != v684);
                      }
                      v686 += v1548;
                      ++v682;
                      v687 += v1531;
                    }
                    while (v682 != v1565);
                  }
                  v1494 += v1464;
                  v1504 += v1454;
                  ++v1484;
                }
                while (v1484 != v1474);
              }
              break;
            default:
              LODWORD(v563) = 1;
              v564 = -20;
              do
              {
                v563 = *(int *)(v39 + v564) * (uint64_t)(int)v563;
                v564 += 4;
              }
              while (v564);
              v1434 = v38[6];
              if (v1434)
              {
                v565 = 0;
                v1414 = *v3;
                v566 = (v41 << 30) - 0x500000000;
                v1424 = (v41 >> 2) - 1;
                v567 = v38[3];
                v568 = v3[3];
                v1463 = *(_QWORD *)(v568 + (v566 >> 29));
                v1473 = *(_DWORD *)(v40 + (v566 >> 30));
                v1419 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1410 = (uint64_t)((v41 << 30) - 0x400000000) >> 32;
                v1513 = (uint64_t)((v41 << 30) - 0x200000000) >> 32;
                v569 = (uint64_t)((v41 << 30) - 0x100000000) >> 32;
                v1444 = (uint64_t)((v41 << 30) - 0x300000000) >> 32;
                v1453 = 4 * *(_QWORD *)((char *)v567 + (v566 >> 29));
                v1429 = v563;
                do
                {
                  v570 = v1424;
                  if ((v1424 & 0x80000000) != 0)
                  {
                    v571 = 0;
                  }
                  else
                  {
                    v571 = 0;
                    LODWORD(result) = v565;
                    do
                    {
                      v572 = ldiv((int)result, *(int *)(v40 + 4 * v570));
                      result = v572.quot;
                      v571 += *(_QWORD *)&v567[2 * v570--] * v572.rem;
                    }
                    while (v570 != -1);
                  }
                  v573 = v1419;
                  v1439 = v565;
                  v574 = 0;
                  if ((v1419 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v565;
                    do
                    {
                      v575 = ldiv((int)result, *(int *)(v1414 + 4 * v573));
                      result = v575.quot;
                      v574 += *(_QWORD *)(v568 + 8 * v573--) * v575.rem;
                    }
                    while (v573 != -1);
                  }
                  if (v1473 >= 1)
                  {
                    v576 = 0;
                    v1546 = *(_QWORD *)(v568 + 8 * v1410);
                    v1563 = *(_DWORD *)(v40 + 4 * v1410);
                    v1503 = 4 * v571;
                    v1529 = 4 * *(_QWORD *)&v567[2 * v1410];
                    do
                    {
                      v1483 = v576;
                      v1493 = v574;
                      if (v1563 >= 1)
                      {
                        v577 = 0;
                        v578 = *(_QWORD *)(v568 + 8 * v1444);
                        v579 = *(_DWORD *)(v40 + 4 * v1444);
                        v580 = 4 * *(_QWORD *)&v567[2 * v1444];
                        v582 = v574;
                        v581 = v1503;
                        do
                        {
                          if (v579 >= 1)
                          {
                            v583 = 0;
                            v584 = *(_QWORD *)(v568 + 8 * v1513);
                            v585 = *(_DWORD *)(v40 + 4 * v1513);
                            v586 = 4 * *(_QWORD *)&v567[2 * v1513];
                            v587 = v581;
                            result = v582;
                            do
                            {
                              if (v585 >= 1)
                              {
                                v588 = 0;
                                v589 = *(_QWORD *)(v568 + 8 * v569);
                                v590 = *(_DWORD *)(v40 + 4 * v569);
                                v591 = *a2;
                                v592 = 4 * *(_QWORD *)&v567[2 * v569];
                                v593 = v587;
                                v594 = result;
                                do
                                {
                                  if (v590 >= 1)
                                  {
                                    v595 = *(_QWORD *)(v591 + 152);
                                    v596 = (unsigned int *)((char *)v38[19] + v593);
                                    v597 = v590;
                                    do
                                    {
                                      *(_BYTE *)(v595 + v594) = *v596 != 0;
                                      v595 += v589;
                                      v596 = (_DWORD *)((char *)v596 + v592);
                                      --v597;
                                    }
                                    while (v597);
                                  }
                                  v594 += v584;
                                  ++v588;
                                  v593 += v586;
                                }
                                while (v588 != v585);
                              }
                              result += v578;
                              ++v583;
                              v587 += v580;
                            }
                            while (v583 != v579);
                          }
                          v582 += v1546;
                          ++v577;
                          v581 += v1529;
                        }
                        while (v577 != v1563);
                      }
                      v574 = v1493 + v1463;
                      v576 = v1483 + 1;
                      v1503 += v1453;
                    }
                    while (v1483 + 1 != v1473);
                  }
                  v565 += v1429;
                }
                while ((unint64_t)v1434 > v1439 + v1429);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v7 = 0;
            v8 = **(_DWORD **)(*(_QWORD *)result + 152);
            v9 = v3[19];
            do
              *(_BYTE *)(v9 + v7++) = v8;
            while (*(_QWORD *)(*a2 + 48) > v7);
          }
          break;
        case 1:
          v50 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v50)
          {
            v51 = *(int **)(*(_QWORD *)result + 152);
            v52 = (_BYTE *)v3[19];
            v53 = 4 * v50;
            do
            {
              v54 = *v51++;
              *v52++ = v54;
              v53 -= 4;
            }
            while (v53);
          }
          break;
        case 2:
          v55 = *(int ***)result;
          v56 = **(int ***)result;
          switch(v55[1] - *v55)
          {
            case 1:
              if (*v56 >= 1)
              {
                v57 = 0;
                v58 = 0;
                v59 = v55[19];
                v60 = v3[19];
                do
                {
                  *(_BYTE *)(v60 + v57) = v59[v58];
                  v58 += *(_QWORD *)v55[3];
                  ++v57;
                }
                while (**v55 > (int)v57);
              }
              break;
            case 2:
              v256 = *v56;
              if (*v56 >= 1)
              {
                v257 = 0;
                v258 = 0;
                v259 = 0;
                v260 = v55[19];
                v261 = v3[19];
                do
                {
                  v262 = v56[1];
                  if (v262 < 1)
                  {
                    v263 = v55[3];
                    v264 = *((_QWORD *)v263 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v261 + v258 + result) = v260[v259];
                      v263 = v55[3];
                      v264 = *((_QWORD *)v263 + 1);
                      v259 += v264;
                      v56 = *v55;
                      v262 = (*v55)[1];
                      ++result;
                    }
                    while ((int)result < v262);
                    v256 = *v56;
                    v258 += result;
                  }
                  v259 = *(_QWORD *)v263 + v259 - v264 * v262;
                  ++v257;
                }
                while (v257 < v256);
              }
              break;
            case 3:
              v265 = *v56;
              if (*v56 >= 1)
              {
                v266 = 0;
                v267 = 0;
                v268 = 0;
                v269 = v55[19];
                v270 = v3[19];
                do
                {
                  v271 = v56[1];
                  if (v271 < 1)
                  {
                    v275 = v55[3];
                    v276 = *((_QWORD *)v275 + 1);
                  }
                  else
                  {
                    for (i = 0; i < v271; ++i)
                    {
                      v273 = v56[2];
                      if (v273 < 1)
                      {
                        v275 = v55[3];
                        result = *((_QWORD *)v275 + 2);
                      }
                      else
                      {
                        v274 = 0;
                        do
                        {
                          *(_BYTE *)(v270 + v267 + v274) = v269[v268];
                          v275 = v55[3];
                          result = *((_QWORD *)v275 + 2);
                          v268 += result;
                          v56 = *v55;
                          v273 = (*v55)[2];
                          ++v274;
                        }
                        while ((int)v274 < v273);
                        v267 += v274;
                      }
                      v276 = *((_QWORD *)v275 + 1);
                      v268 = v276 + v268 - result * v273;
                      v271 = v56[1];
                    }
                    v265 = *v56;
                  }
                  v268 = *(_QWORD *)v275 + v268 - v276 * v271;
                  ++v266;
                }
                while (v266 < v265);
              }
              break;
            case 4:
              v277 = *v56;
              if (*v56 >= 1)
              {
                v278 = 0;
                v279 = 0;
                v280 = 0;
                v281 = v55[19];
                v282 = v3[19];
                do
                {
                  v283 = v56[1];
                  if (v283 < 1)
                  {
                    v289 = v55[3];
                    v291 = *((_QWORD *)v289 + 1);
                  }
                  else
                  {
                    for (j = 0; j < v283; ++j)
                    {
                      v285 = v56[2];
                      if (v285 < 1)
                      {
                        v289 = v55[3];
                        v290 = *((_QWORD *)v289 + 2);
                      }
                      else
                      {
                        for (k = 0; k < v285; ++k)
                        {
                          v287 = v56[3];
                          if (v287 < 1)
                          {
                            v289 = v55[3];
                            result = *((_QWORD *)v289 + 3);
                          }
                          else
                          {
                            v288 = 0;
                            do
                            {
                              *(_BYTE *)(v282 + v279 + v288) = v281[v280];
                              v289 = v55[3];
                              result = *((_QWORD *)v289 + 3);
                              v280 += result;
                              v56 = *v55;
                              v287 = (*v55)[3];
                              ++v288;
                            }
                            while ((int)v288 < v287);
                            v279 += v288;
                          }
                          v290 = *((_QWORD *)v289 + 2);
                          v280 = v290 + v280 - result * v287;
                          v285 = v56[2];
                        }
                      }
                      v291 = *((_QWORD *)v289 + 1);
                      v280 = v291 + v280 - v290 * v285;
                      v283 = v56[1];
                    }
                    v277 = *v56;
                  }
                  v280 = *(_QWORD *)v289 + v280 - v291 * v283;
                  ++v278;
                }
                while (v278 < v277);
              }
              break;
            default:
              if (v3[6])
              {
                v247 = 0;
                v248 = v55[19];
                v249 = v3[19];
                do
                {
                  v250 = *v55;
                  v251 = (unint64_t)((char *)v55[1] - (char *)*v55) >> 2;
                  v252 = 0;
                  v253 = (v251 - 1);
                  if ((int)v251 - 1 >= 0)
                  {
                    v254 = v55[3];
                    LODWORD(result) = v247;
                    do
                    {
                      v255 = ldiv((int)result, v250[v253]);
                      result = v255.quot;
                      v252 += *(_QWORD *)&v254[2 * v253--] * v255.rem;
                    }
                    while (v253 != -1);
                  }
                  *(_BYTE *)(v249 + v247++) = v248[v252];
                }
                while (v247 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v61 = *(int ***)result;
          v62 = (uint64_t *)(*(_QWORD *)result + 24);
          v63 = v3 + 3;
          v64 = **(_QWORD **)result;
          v65 = *(_QWORD *)(*(_QWORD *)result + 8);
          v66 = v65 - v64;
          switch((v65 - v64) >> 2)
          {
            case 1:
              v67 = (v66 << 30) - 0x100000000;
              v68 = *(_DWORD *)(v64 + (v67 >> 30));
              if (v68 >= 1)
              {
                v69 = v67 >> 29;
                v70 = *(_QWORD *)(*v62 + v69);
                v71 = *(_QWORD *)(*v63 + v69);
                v72 = (_BYTE *)v3[19];
                v73 = v61[19];
                v74 = 4 * v70;
                do
                {
                  *v72 = *v73;
                  v72 += v71;
                  v73 = (int *)((char *)v73 + v74);
                  --v68;
                }
                while (v68);
              }
              break;
            case 2:
              v725 = (v66 << 30) - 0x200000000;
              v726 = *(_DWORD *)(v64 + (v725 >> 30));
              if (v726 >= 1)
              {
                v727 = 0;
                v728 = 0;
                v729 = 0;
                v730 = v725 >> 29;
                v731 = *(_QWORD *)(*v62 + v730);
                v732 = *(_QWORD *)(*v63 + v730);
                v733 = 4 * v731;
                do
                {
                  result = *(_QWORD *)v5;
                  v734 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v735 = *(int *)((char *)*v61 + (v734 >> 30));
                  if (v735 >= 1)
                  {
                    v736 = v734 >> 29;
                    v737 = *(_QWORD *)((char *)v61[3] + v736);
                    v738 = *(_QWORD *)(*v63 + v736);
                    v739 = *(_QWORD *)(*a2 + 152);
                    result = *(_QWORD *)(result + 152) + v727;
                    v740 = 4 * v737;
                    do
                    {
                      *(_BYTE *)(v739 + v729) = *(_DWORD *)result;
                      v739 += v738;
                      result += v740;
                      --v735;
                    }
                    while (v735);
                  }
                  v729 += v732;
                  ++v728;
                  v727 += v733;
                }
                while (v728 != v726);
              }
              break;
            case 3:
              v741 = (v66 << 30) - 0x300000000;
              v742 = *(_DWORD *)(v64 + (v741 >> 30));
              if (v742 >= 1)
              {
                v743 = 0;
                v744 = 0;
                v745 = 0;
                v746 = v741 >> 29;
                v747 = *(_QWORD *)(*v62 + v746);
                v748 = *(_QWORD *)(*v63 + v746);
                v749 = 4 * v747;
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v750 = *(int *)((char *)*v61 + (result >> 30));
                  if (v750 >= 1)
                  {
                    v751 = 0;
                    v752 = result >> 29;
                    v753 = *(_QWORD *)((char *)v61[3] + v752);
                    result = *(_QWORD *)(*v63 + v752);
                    v754 = 4 * v753;
                    v755 = v743;
                    v756 = v745;
                    do
                    {
                      v757 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v758 = *(int *)((char *)*v61 + (v757 >> 30));
                      if (v758 >= 1)
                      {
                        v759 = v757 >> 29;
                        v760 = *(_QWORD *)((char *)v61[3] + v759);
                        v761 = *(_QWORD *)(*v63 + v759);
                        v762 = *(_QWORD *)(*a2 + 152);
                        v763 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + v755);
                        v764 = 4 * v760;
                        do
                        {
                          *(_BYTE *)(v762 + v756) = *v763;
                          v762 += v761;
                          v763 = (_DWORD *)((char *)v763 + v764);
                          --v758;
                        }
                        while (v758);
                      }
                      v756 += result;
                      ++v751;
                      v755 += v754;
                    }
                    while (v751 != v750);
                  }
                  v745 += v748;
                  ++v744;
                  v743 += v749;
                }
                while (v744 != v742);
              }
              break;
            case 4:
              goto LABEL_557;
            case 5:
              v765 = (v66 << 30) - 0x500000000;
              v766 = *(_DWORD *)(v64 + (v765 >> 30));
              if (v766 >= 1)
              {
                v767 = 0;
                v768 = 0;
                v769 = v765 >> 29;
                v770 = *(_QWORD *)(*v62 + v769);
                v771 = *(_QWORD *)(*v63 + v769);
                do
                {
                  v767 += v770;
                  v768 += v771;
                  --v766;
                }
                while (v766);
              }
              break;
            default:
              LODWORD(v704) = 1;
              v705 = -20;
              do
              {
                v704 = *(int *)(v65 + v705) * (uint64_t)(int)v704;
                v705 += 4;
              }
              while (v705);
              if (v61[6])
              {
                result = 0;
                v706 = *(_QWORD **)v5;
                v1549 = v63;
                v1516 = v704;
                do
                {
                  v707 = *v61;
                  v708 = (unint64_t)((char *)v61[1] - (char *)*v61) >> 2;
                  v709 = (v708 - 1);
                  v1566 = result;
                  v1532 = v706;
                  v710 = 0;
                  if ((int)v708 - 1 >= 0)
                  {
                    v711 = *v62;
                    do
                    {
                      v712 = ldiv((int)result, v707[v709]);
                      LODWORD(result) = v712.quot;
                      v710 += *(_QWORD *)(v711 + 8 * v709--) * v712.rem;
                    }
                    while (v709 != -1);
                  }
                  v713 = *(_QWORD *)*a2;
                  v714 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v713) >> 2;
                  v715 = *v1549;
                  v716 = 0;
                  v717 = (v714 - 1);
                  if ((int)v714 - 1 >= 0)
                  {
                    quot = v1566;
                    do
                    {
                      v719 = ldiv(quot, *(int *)(v713 + 4 * v717));
                      quot = v719.quot;
                      v716 += *(_QWORD *)(v715 + 8 * v717--) * v719.rem;
                    }
                    while (v717 != -1);
                  }
                  v706 = v1532;
                  v720 = ((v706[1] - *v706) << 30) - 0x500000000;
                  v721 = *(int *)((char *)v707 + (v720 >> 30));
                  if (v721 >= 1)
                  {
                    v722 = v720 >> 29;
                    v723 = *(_QWORD *)(*v62 + v722);
                    v724 = *(_QWORD *)(v715 + v722);
                    do
                    {
                      v710 += v723;
                      v716 += v724;
                      --v721;
                    }
                    while (v721);
                    v706 = *(_QWORD **)v5;
                  }
                  result = v1566 + v1516;
                }
                while (v706[6] > (unint64_t)(v1566 + v1516));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v10 = v3[6];
          if (v10)
          {
            v11 = **(_DWORD **)(*(_QWORD *)result + 152);
            v12 = (_DWORD *)v3[19];
            do
            {
              *v12++ = v11;
              --v10;
            }
            while (v10);
          }
          break;
        case 1:
          goto LABEL_35;
        case 2:
          v75 = *(int ***)result;
          v76 = **(int ***)result;
          v77 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v76;
          switch(v77 >> 2)
          {
            case 1:
              if (*v76 >= 1)
              {
                v78 = 0;
                v79 = v75[19];
                v80 = v3[19];
                v81 = 4 * *(_QWORD *)v75[3];
                do
                {
                  *(_DWORD *)(v80 + 4 * v78) = *v79;
                  v79 = (int *)((char *)v79 + v81);
                  ++v78;
                }
                while (*v76 > (int)v78);
              }
              break;
            case 2:
              v301 = *v76;
              if (*v76 >= 1)
              {
                v302 = 0;
                v303 = 0;
                v304 = 0;
                v305 = v75[19];
                v306 = v3[19];
                v307 = v75[3];
                v308 = *(_QWORD *)v307;
                v309 = *((_QWORD *)v307 + 1);
                v310 = v76[1];
                do
                {
                  if (v310 >= 1)
                  {
                    v311 = 0;
                    do
                    {
                      *(_DWORD *)(v306 + 4 * v303 + 4 * v311) = v305[v304];
                      v304 += v309;
                      v310 = v76[1];
                      ++v311;
                    }
                    while ((int)v311 < v310);
                    v301 = *v76;
                    v303 += v311;
                  }
                  v304 = v304 + v308 - v309 * v310;
                  ++v302;
                }
                while (v302 < v301);
              }
              break;
            case 3:
              result = *v76;
              if ((int)result >= 1)
              {
                v312 = 0;
                v313 = 0;
                v314 = 0;
                v315 = v75[19];
                v316 = v3[19];
                v317 = v75[3];
                v318 = *(_QWORD *)v317;
                v319 = *((_QWORD *)v317 + 1);
                v320 = v76[1];
                do
                {
                  if (v320 >= 1)
                  {
                    v321 = 0;
                    v322 = v75[3];
                    v323 = *((_QWORD *)v317 + 2);
                    v324 = v76[2];
                    do
                    {
                      if (v324 >= 1)
                      {
                        v325 = 0;
                        v326 = *((_QWORD *)v322 + 2);
                        do
                        {
                          *(_DWORD *)(v316 + 4 * v313 + 4 * v325) = v315[v314];
                          v314 += v326;
                          v324 = v76[2];
                          ++v325;
                        }
                        while ((int)v325 < v324);
                        v320 = v76[1];
                        v313 += v325;
                      }
                      v314 = v314 + v319 - v323 * v324;
                      ++v321;
                    }
                    while (v321 < v320);
                    result = *v76;
                  }
                  v314 = v314 + v318 - v319 * v320;
                  ++v312;
                }
                while (v312 < (int)result);
              }
              break;
            case 4:
              v327 = *v76;
              if (*v76 >= 1)
              {
                v328 = 0;
                v329 = 0;
                v330 = 0;
                v331 = v75[19];
                v332 = v3[19];
                v333 = v75[3];
                v334 = *(_QWORD *)v333;
                v335 = *((_QWORD *)v333 + 1);
                v336 = v76[1];
                do
                {
                  if (v336 >= 1)
                  {
                    v337 = 0;
                    v338 = v75[3];
                    v339 = *((_QWORD *)v333 + 2);
                    v340 = v76[2];
                    do
                    {
                      if (v340 >= 1)
                      {
                        v341 = 0;
                        v342 = v75[3];
                        v343 = *((_QWORD *)v338 + 2);
                        v344 = *((_QWORD *)v338 + 3);
                        v345 = v76[3];
                        do
                        {
                          if (v345 >= 1)
                          {
                            v346 = 0;
                            v347 = *((_QWORD *)v342 + 3);
                            do
                            {
                              *(_DWORD *)(v332 + 4 * v329 + 4 * v346) = v331[v330];
                              v330 += v347;
                              v345 = v76[3];
                              ++v346;
                            }
                            while ((int)v346 < v345);
                            v340 = v76[2];
                            v329 += v346;
                          }
                          v330 = v330 + v343 - v344 * v345;
                          ++v341;
                        }
                        while (v341 < v340);
                        v336 = v76[1];
                      }
                      v330 = v330 + v335 - v339 * v340;
                      ++v337;
                    }
                    while (v337 < v336);
                    v327 = *v76;
                  }
                  result = v336;
                  v330 = v330 + v334 - v335 * v336;
                  ++v328;
                }
                while (v328 < v327);
              }
              break;
            default:
              v292 = v3[6];
              if (v292)
              {
                v293 = 0;
                v294 = v75[19];
                v295 = v3[19];
                v296 = ((unint64_t)v77 >> 2) - 1;
                v297 = v75[3];
                do
                {
                  v298 = 0;
                  if ((v296 & 0x80000000) == 0)
                  {
                    v299 = v296;
                    LODWORD(result) = v293;
                    do
                    {
                      v300 = ldiv((int)result, v76[v299]);
                      result = v300.quot;
                      v298 += *(_QWORD *)&v297[2 * v299--] * v300.rem;
                    }
                    while (v299 != -1);
                  }
                  *(_DWORD *)(v295 + 4 * v293++) = v294[v298];
                }
                while (v293 != v292);
              }
              break;
          }
          break;
        case 3:
          v82 = *(unsigned int ***)result;
          v84 = **(_QWORD **)result;
          v83 = *(_QWORD *)(*(_QWORD *)result + 8);
          v85 = v83 - v84;
          switch((v83 - v84) >> 2)
          {
            case 1:
              v86 = (v85 << 30) - 0x100000000;
              v87 = *(_DWORD *)(v84 + (v86 >> 30));
              if (v87 >= 1)
              {
                v88 = v86 >> 29;
                v89 = *(_QWORD *)((char *)v82[3] + v88);
                v90 = *(_QWORD *)(v3[3] + v88);
                v91 = (unsigned int *)v3[19];
                v92 = v82[19];
                v93 = 4 * v90;
                v94 = 4 * v89;
                do
                {
                  *v91 = *v92;
                  v91 = (unsigned int *)((char *)v91 + v93);
                  v92 = (unsigned int *)((char *)v92 + v94);
                  --v87;
                }
                while (v87);
              }
              break;
            case 2:
              v808 = (v85 << 30) - 0x200000000;
              v809 = *(_DWORD *)(v84 + (v808 >> 30));
              if (v809 >= 1)
              {
                v810 = 0;
                v811 = 0;
                v812 = 0;
                v813 = v82[3];
                v814 = v808 >> 29;
                v815 = *(_QWORD *)((char *)v813 + v814);
                v816 = v3[3];
                v817 = (v85 << 30) - 0x100000000;
                v818 = *(_QWORD *)((char *)v813 + (v817 >> 29));
                v819 = *(_QWORD *)(v816 + (v817 >> 29));
                v820 = v817 >> 32;
                v821 = 4 * *(_QWORD *)(v816 + v814);
                v822 = 4 * v819;
                v823 = 4 * v815;
                v824 = 4 * v818;
                do
                {
                  result = *(unsigned int *)(v84 + 4 * v820);
                  if ((int)result >= 1)
                  {
                    v825 = (_DWORD *)(v3[19] + v811);
                    v826 = (unsigned int *)((char *)v82[19] + v810);
                    do
                    {
                      *v825 = *v826;
                      v825 = (_DWORD *)((char *)v825 + v822);
                      v826 = (_DWORD *)((char *)v826 + v824);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  ++v812;
                  v811 += v821;
                  v810 += v823;
                }
                while (v812 != v809);
              }
              break;
            case 3:
              v827 = (v85 << 30) - 0x300000000;
              v828 = *(_DWORD *)(v84 + (v827 >> 30));
              if (v828 >= 1)
              {
                v829 = 0;
                v830 = 0;
                v831 = 0;
                v832 = v85 << 30;
                v833 = v82[3];
                v834 = v827 >> 29;
                v835 = *(_QWORD *)((char *)v833 + v834);
                v836 = v3[3];
                v837 = *(_QWORD *)(v836 + v834);
                v838 = (v832 - 0x200000000) >> 29;
                v839 = *(_QWORD *)((char *)v833 + v838);
                v840 = (v832 - 0x200000000) >> 32;
                v841 = (v832 - 0x100000000) >> 32;
                v842 = 4 * v837;
                v843 = 4 * *(_QWORD *)(v836 + v838);
                result = 4 * v835;
                v844 = 4 * v839;
                do
                {
                  v845 = *(_DWORD *)(v84 + 4 * v840);
                  if (v845 >= 1)
                  {
                    v846 = 0;
                    v847 = (_QWORD *)*a2;
                    v848 = 4 * *(_QWORD *)(v836 + 8 * v841);
                    v849 = 4 * *(_QWORD *)&v833[2 * v841];
                    v850 = v829;
                    v851 = v830;
                    do
                    {
                      v852 = *(_DWORD *)(v84 + 4 * v841);
                      if (v852 >= 1)
                      {
                        v853 = (_DWORD *)(v847[19] + v851);
                        v854 = (unsigned int *)((char *)v82[19] + v850);
                        do
                        {
                          *v853 = *v854;
                          v853 = (_DWORD *)((char *)v853 + v848);
                          v854 = (_DWORD *)((char *)v854 + v849);
                          --v852;
                        }
                        while (v852);
                      }
                      ++v846;
                      v851 += v843;
                      v850 += v844;
                    }
                    while (v846 != v845);
                  }
                  ++v831;
                  v830 += v842;
                  v829 += result;
                }
                while (v831 != v828);
              }
              break;
            case 4:
              v855 = (v85 << 30) - 0x400000000;
              v1568 = *(_DWORD *)(v84 + (v855 >> 30));
              if (v1568 >= 1)
              {
                v856 = 0;
                v857 = 0;
                v858 = 0;
                v859 = v85 << 30;
                v860 = v82[3];
                v861 = v855 >> 29;
                v862 = v3[3];
                v1551 = (v859 - 0x300000000) >> 32;
                v863 = (v859 - 0x300000000) >> 29;
                v864 = *(_QWORD *)((char *)v860 + v863);
                v865 = *(_QWORD *)(v862 + v863);
                v866 = (v859 - 0x200000000) >> 32;
                v867 = (v859 - 0x100000000) >> 32;
                v1534 = 4 * *(_QWORD *)(v862 + v861);
                result = 4 * v865;
                v1518 = 4 * *(_QWORD *)((char *)v860 + v861);
                v868 = 4 * v864;
                do
                {
                  v869 = *(_DWORD *)(v84 + 4 * v1551);
                  if (v869 >= 1)
                  {
                    v870 = 0;
                    v871 = 4 * *(_QWORD *)(v862 + 8 * v866);
                    v872 = 4 * *(_QWORD *)&v860[2 * v866];
                    v873 = v856;
                    v874 = v857;
                    do
                    {
                      v875 = *(_DWORD *)(v84 + 4 * v866);
                      if (v875 >= 1)
                      {
                        v876 = 0;
                        v877 = (_QWORD *)*a2;
                        v878 = 4 * *(_QWORD *)(v862 + 8 * v867);
                        v879 = 4 * *(_QWORD *)&v860[2 * v867];
                        v880 = v873;
                        v881 = v874;
                        do
                        {
                          v882 = *(_DWORD *)(v84 + 4 * v867);
                          if (v882 >= 1)
                          {
                            v883 = (_DWORD *)(v877[19] + v881);
                            v884 = (unsigned int *)((char *)v82[19] + v880);
                            do
                            {
                              *v883 = *v884;
                              v883 = (_DWORD *)((char *)v883 + v878);
                              v884 = (_DWORD *)((char *)v884 + v879);
                              --v882;
                            }
                            while (v882);
                          }
                          ++v876;
                          v881 += v871;
                          v880 += v872;
                        }
                        while (v876 != v875);
                      }
                      ++v870;
                      v874 += result;
                      v873 += v868;
                    }
                    while (v870 != v869);
                  }
                  ++v858;
                  v857 += v1534;
                  v856 += v1518;
                }
                while (v858 != v1568);
              }
              break;
            case 5:
              v885 = (v85 << 30) - 0x500000000;
              v1476 = *(_DWORD *)(v84 + (v885 >> 30));
              if (v1476 >= 1)
              {
                v1496 = 0;
                v1506 = 0;
                v1486 = 0;
                v886 = v85 << 30;
                v887 = v82[3];
                v888 = v885 >> 29;
                v889 = v3[3];
                v1466 = (v886 - 0x400000000) >> 32;
                v890 = (v886 - 0x400000000) >> 29;
                result = *(_QWORD *)((char *)v887 + v890);
                v1552 = (v886 - 0x300000000) >> 32;
                v891 = (v886 - 0x200000000) >> 32;
                v892 = (v886 - 0x100000000) >> 32;
                v1456 = 4 * *(_QWORD *)(v889 + v888);
                v1535 = 4 * *(_QWORD *)(v889 + v890);
                v1447 = 4 * *(_QWORD *)((char *)v887 + v888);
                v1519 = 4 * result;
                do
                {
                  v1569 = *(_DWORD *)(v84 + 4 * v1466);
                  if (v1569 >= 1)
                  {
                    v893 = 0;
                    v894 = 4 * *(_QWORD *)(v889 + 8 * v1552);
                    v895 = 4 * *(_QWORD *)&v887[2 * v1552];
                    v897 = v1496;
                    v896 = v1506;
                    do
                    {
                      v898 = *(_DWORD *)(v84 + 4 * v1552);
                      if (v898 >= 1)
                      {
                        v899 = 0;
                        v900 = 4 * *(_QWORD *)(v889 + 8 * v891);
                        v901 = 4 * *(_QWORD *)&v887[2 * v891];
                        v902 = v896;
                        v903 = v897;
                        do
                        {
                          v904 = *(_DWORD *)(v84 + 4 * v891);
                          if (v904 >= 1)
                          {
                            v905 = 0;
                            result = *a2;
                            v906 = 4 * *(_QWORD *)(v889 + 8 * v892);
                            v907 = 4 * *(_QWORD *)&v887[2 * v892];
                            v908 = v902;
                            v909 = v903;
                            do
                            {
                              v910 = *(_DWORD *)(v84 + 4 * v892);
                              if (v910 >= 1)
                              {
                                v911 = (_DWORD *)(*(_QWORD *)(result + 152) + v909);
                                v912 = (unsigned int *)((char *)v82[19] + v908);
                                do
                                {
                                  *v911 = *v912;
                                  v911 = (_DWORD *)((char *)v911 + v906);
                                  v912 = (_DWORD *)((char *)v912 + v907);
                                  --v910;
                                }
                                while (v910);
                              }
                              ++v905;
                              v909 += v900;
                              v908 += v901;
                            }
                            while (v905 != v904);
                          }
                          ++v899;
                          v903 += v894;
                          v902 += v895;
                        }
                        while (v899 != v898);
                      }
                      ++v893;
                      v897 += v1535;
                      v896 += v1519;
                    }
                    while (v893 != v1569);
                  }
                  v1496 += v1456;
                  v1506 += v1447;
                  ++v1486;
                }
                while (v1486 != v1476);
              }
              break;
            default:
              LODWORD(v772) = 1;
              v773 = -20;
              do
              {
                v772 = *(int *)(v83 + v773) * (uint64_t)(int)v772;
                v773 += 4;
              }
              while (v773);
              v1430 = v82[6];
              if (v1430)
              {
                result = 0;
                v1455 = *v3;
                v774 = (v85 << 30) - 0x500000000;
                v1420 = (v85 >> 2) - 1;
                v775 = v82[3];
                v1415 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1411 = v774 >> 32;
                v776 = v3[3];
                v1465 = (uint64_t)((v85 << 30) - 0x400000000) >> 32;
                v1550 = (uint64_t)((v85 << 30) - 0x300000000) >> 32;
                v777 = (uint64_t)((v85 << 30) - 0x200000000) >> 32;
                v778 = (uint64_t)((v85 << 30) - 0x100000000) >> 32;
                v1440 = 4 * *(_QWORD *)((char *)v775 + (v774 >> 29));
                v1446 = 4 * *(_QWORD *)(v776 + (v774 >> 29));
                v1425 = v772;
                do
                {
                  v779 = v1420;
                  v1435 = result;
                  v780 = 0;
                  if ((v1420 & 0x80000000) != 0)
                  {
                    v781 = v1415;
                  }
                  else
                  {
                    v781 = v1415;
                    do
                    {
                      v782 = ldiv((int)result, *(int *)(v84 + 4 * v779));
                      LODWORD(result) = v782.quot;
                      v780 += *(_QWORD *)&v775[2 * v779--] * v782.rem;
                    }
                    while (v779 != -1);
                  }
                  v783 = 0;
                  if ((v781 & 0x80000000) == 0)
                  {
                    v784 = v1435;
                    do
                    {
                      v785 = ldiv(v784, *(int *)(v1455 + 4 * v781));
                      v784 = v785.quot;
                      v783 += *(_QWORD *)(v776 + 8 * v781--) * v785.rem;
                    }
                    while (v781 != -1);
                  }
                  v1475 = *(_DWORD *)(v84 + 4 * v1411);
                  if (v1475 >= 1)
                  {
                    v786 = 0;
                    v1505 = 4 * v783;
                    v1533 = 4 * *(_QWORD *)(v776 + 8 * v1465);
                    v1495 = 4 * v780;
                    v1517 = 4 * *(_QWORD *)&v775[2 * v1465];
                    do
                    {
                      v1485 = v786;
                      v1567 = *(_DWORD *)(v84 + 4 * v1465);
                      if (v1567 >= 1)
                      {
                        v787 = 0;
                        v788 = 4 * *(_QWORD *)(v776 + 8 * v1550);
                        v789 = 4 * *(_QWORD *)&v775[2 * v1550];
                        v791 = v1495;
                        v790 = v1505;
                        do
                        {
                          v792 = *(_DWORD *)(v84 + 4 * v1550);
                          if (v792 >= 1)
                          {
                            v793 = 0;
                            v794 = 4 * *(_QWORD *)(v776 + 8 * v777);
                            v795 = 4 * *(_QWORD *)&v775[2 * v777];
                            v796 = v791;
                            v797 = v790;
                            do
                            {
                              v798 = *(_DWORD *)(v84 + 4 * v777);
                              if (v798 >= 1)
                              {
                                v799 = 0;
                                v800 = (_QWORD *)*a2;
                                v801 = 4 * *(_QWORD *)(v776 + 8 * v778);
                                v802 = 4 * *(_QWORD *)&v775[2 * v778];
                                v803 = v796;
                                v804 = v797;
                                do
                                {
                                  v805 = *(_DWORD *)(v84 + 4 * v778);
                                  if (v805 >= 1)
                                  {
                                    v806 = (_DWORD *)(v800[19] + v804);
                                    v807 = (unsigned int *)((char *)v82[19] + v803);
                                    do
                                    {
                                      *v806 = *v807;
                                      v806 = (_DWORD *)((char *)v806 + v801);
                                      v807 = (_DWORD *)((char *)v807 + v802);
                                      --v805;
                                    }
                                    while (v805);
                                  }
                                  ++v799;
                                  v804 += v794;
                                  v803 += v795;
                                }
                                while (v799 != v798);
                              }
                              ++v793;
                              v797 += v788;
                              v796 += v789;
                            }
                            while (v793 != v792);
                          }
                          ++v787;
                          v790 += v1533;
                          v791 += v1517;
                        }
                        while (v787 != v1567);
                      }
                      v786 = v1485 + 1;
                      v1505 += v1446;
                      v1495 += v1440;
                    }
                    while (v1485 + 1 != v1475);
                  }
                  result = v1435 + v1425;
                }
                while ((unint64_t)v1430 > v1435 + v1425);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v13 = 0;
            v14 = **(_DWORD **)(*(_QWORD *)result + 152);
            v15 = v3[19];
            do
              *(_BYTE *)(v15 + v13++) = v14;
            while (*(_QWORD *)(*a2 + 48) > v13);
          }
          break;
        case 1:
          v95 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v95)
          {
            v96 = *(int **)(*(_QWORD *)result + 152);
            v97 = (_BYTE *)v3[19];
            v98 = 4 * v95;
            do
            {
              v99 = *v96++;
              *v97++ = v99;
              v98 -= 4;
            }
            while (v98);
          }
          break;
        case 2:
          v100 = *(int ***)result;
          v101 = **(int ***)result;
          switch(v100[1] - *v100)
          {
            case 1:
              if (*v101 >= 1)
              {
                v102 = 0;
                v103 = 0;
                v104 = v100[19];
                v105 = v3[19];
                do
                {
                  *(_BYTE *)(v105 + v102) = v104[v103];
                  v103 += *(_QWORD *)v100[3];
                  ++v102;
                }
                while (**v100 > (int)v102);
              }
              break;
            case 2:
              v357 = *v101;
              if (*v101 >= 1)
              {
                v358 = 0;
                v359 = 0;
                v360 = 0;
                v361 = v100[19];
                v362 = v3[19];
                do
                {
                  v363 = v101[1];
                  if (v363 < 1)
                  {
                    v364 = v100[3];
                    v365 = *((_QWORD *)v364 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v362 + v359 + result) = v361[v360];
                      v364 = v100[3];
                      v365 = *((_QWORD *)v364 + 1);
                      v360 += v365;
                      v101 = *v100;
                      v363 = (*v100)[1];
                      ++result;
                    }
                    while ((int)result < v363);
                    v357 = *v101;
                    v359 += result;
                  }
                  v360 = *(_QWORD *)v364 + v360 - v365 * v363;
                  ++v358;
                }
                while (v358 < v357);
              }
              break;
            case 3:
              v366 = *v101;
              if (*v101 >= 1)
              {
                v367 = 0;
                v368 = 0;
                v369 = 0;
                v370 = v100[19];
                v371 = v3[19];
                do
                {
                  v372 = v101[1];
                  if (v372 < 1)
                  {
                    v376 = v100[3];
                    v377 = *((_QWORD *)v376 + 1);
                  }
                  else
                  {
                    for (m = 0; m < v372; ++m)
                    {
                      v374 = v101[2];
                      if (v374 < 1)
                      {
                        v376 = v100[3];
                        result = *((_QWORD *)v376 + 2);
                      }
                      else
                      {
                        v375 = 0;
                        do
                        {
                          *(_BYTE *)(v371 + v368 + v375) = v370[v369];
                          v376 = v100[3];
                          result = *((_QWORD *)v376 + 2);
                          v369 += result;
                          v101 = *v100;
                          v374 = (*v100)[2];
                          ++v375;
                        }
                        while ((int)v375 < v374);
                        v368 += v375;
                      }
                      v377 = *((_QWORD *)v376 + 1);
                      v369 = v377 + v369 - result * v374;
                      v372 = v101[1];
                    }
                    v366 = *v101;
                  }
                  v369 = *(_QWORD *)v376 + v369 - v377 * v372;
                  ++v367;
                }
                while (v367 < v366);
              }
              break;
            case 4:
              v378 = *v101;
              if (*v101 >= 1)
              {
                v379 = 0;
                v380 = 0;
                v381 = 0;
                v382 = v100[19];
                v383 = v3[19];
                do
                {
                  v384 = v101[1];
                  if (v384 < 1)
                  {
                    v390 = v100[3];
                    v392 = *((_QWORD *)v390 + 1);
                  }
                  else
                  {
                    for (n = 0; n < v384; ++n)
                    {
                      v386 = v101[2];
                      if (v386 < 1)
                      {
                        v390 = v100[3];
                        v391 = *((_QWORD *)v390 + 2);
                      }
                      else
                      {
                        for (ii = 0; ii < v386; ++ii)
                        {
                          v388 = v101[3];
                          if (v388 < 1)
                          {
                            v390 = v100[3];
                            result = *((_QWORD *)v390 + 3);
                          }
                          else
                          {
                            v389 = 0;
                            do
                            {
                              *(_BYTE *)(v383 + v380 + v389) = v382[v381];
                              v390 = v100[3];
                              result = *((_QWORD *)v390 + 3);
                              v381 += result;
                              v101 = *v100;
                              v388 = (*v100)[3];
                              ++v389;
                            }
                            while ((int)v389 < v388);
                            v380 += v389;
                          }
                          v391 = *((_QWORD *)v390 + 2);
                          v381 = v391 + v381 - result * v388;
                          v386 = v101[2];
                        }
                      }
                      v392 = *((_QWORD *)v390 + 1);
                      v381 = v392 + v381 - v391 * v386;
                      v384 = v101[1];
                    }
                    v378 = *v101;
                  }
                  v381 = *(_QWORD *)v390 + v381 - v392 * v384;
                  ++v379;
                }
                while (v379 < v378);
              }
              break;
            default:
              if (v3[6])
              {
                v348 = 0;
                v349 = v100[19];
                v350 = v3[19];
                do
                {
                  v351 = *v100;
                  v352 = (unint64_t)((char *)v100[1] - (char *)*v100) >> 2;
                  v353 = 0;
                  v354 = (v352 - 1);
                  if ((int)v352 - 1 >= 0)
                  {
                    v355 = v100[3];
                    LODWORD(result) = v348;
                    do
                    {
                      v356 = ldiv((int)result, v351[v354]);
                      result = v356.quot;
                      v353 += *(_QWORD *)&v355[2 * v354--] * v356.rem;
                    }
                    while (v354 != -1);
                  }
                  *(_BYTE *)(v350 + v348++) = v349[v353];
                }
                while (v348 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v106 = *(int ***)result;
          v107 = (uint64_t *)(*(_QWORD *)result + 24);
          v108 = v3 + 3;
          v109 = **(_QWORD **)result;
          v110 = *(_QWORD *)(*(_QWORD *)result + 8);
          v111 = v110 - v109;
          switch((v110 - v109) >> 2)
          {
            case 1:
              v112 = (v111 << 30) - 0x100000000;
              v113 = *(_DWORD *)(v109 + (v112 >> 30));
              if (v113 >= 1)
              {
                v114 = v112 >> 29;
                v115 = *(_QWORD *)(*v107 + v114);
                v116 = *(_QWORD *)(*v108 + v114);
                v117 = (_BYTE *)v3[19];
                v118 = v106[19];
                v119 = 4 * v115;
                do
                {
                  *v117 = *v118;
                  v117 += v116;
                  v118 = (int *)((char *)v118 + v119);
                  --v113;
                }
                while (v113);
              }
              break;
            case 2:
              v934 = (v111 << 30) - 0x200000000;
              v935 = *(_DWORD *)(v109 + (v934 >> 30));
              if (v935 >= 1)
              {
                v936 = 0;
                v937 = 0;
                v938 = 0;
                v939 = v934 >> 29;
                v940 = *(_QWORD *)(*v107 + v939);
                v941 = *(_QWORD *)(*v108 + v939);
                v942 = 4 * v940;
                do
                {
                  result = *(_QWORD *)v5;
                  v943 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v944 = *(int *)((char *)*v106 + (v943 >> 30));
                  if (v944 >= 1)
                  {
                    v945 = v943 >> 29;
                    v946 = *(_QWORD *)((char *)v106[3] + v945);
                    v947 = *(_QWORD *)(*v108 + v945);
                    v948 = *(_QWORD *)(*a2 + 152);
                    result = *(_QWORD *)(result + 152) + v936;
                    v949 = 4 * v946;
                    do
                    {
                      *(_BYTE *)(v948 + v938) = *(_DWORD *)result;
                      v948 += v947;
                      result += v949;
                      --v944;
                    }
                    while (v944);
                  }
                  v938 += v941;
                  ++v937;
                  v936 += v942;
                }
                while (v937 != v935);
              }
              break;
            case 3:
              v950 = (v111 << 30) - 0x300000000;
              v951 = *(_DWORD *)(v109 + (v950 >> 30));
              if (v951 >= 1)
              {
                v952 = 0;
                v953 = 0;
                v954 = 0;
                v955 = v950 >> 29;
                v956 = *(_QWORD *)(*v107 + v955);
                v957 = *(_QWORD *)(*v108 + v955);
                v958 = 4 * v956;
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v959 = *(int *)((char *)*v106 + (result >> 30));
                  if (v959 >= 1)
                  {
                    v960 = 0;
                    v961 = result >> 29;
                    v962 = *(_QWORD *)((char *)v106[3] + v961);
                    result = *(_QWORD *)(*v108 + v961);
                    v963 = 4 * v962;
                    v964 = v952;
                    v965 = v954;
                    do
                    {
                      v966 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v967 = *(int *)((char *)*v106 + (v966 >> 30));
                      if (v967 >= 1)
                      {
                        v968 = v966 >> 29;
                        v969 = *(_QWORD *)((char *)v106[3] + v968);
                        v970 = *(_QWORD *)(*v108 + v968);
                        v971 = *(_QWORD *)(*a2 + 152);
                        v972 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + v964);
                        v973 = 4 * v969;
                        do
                        {
                          *(_BYTE *)(v971 + v965) = *v972;
                          v971 += v970;
                          v972 = (_DWORD *)((char *)v972 + v973);
                          --v967;
                        }
                        while (v967);
                      }
                      v965 += result;
                      ++v960;
                      v964 += v963;
                    }
                    while (v960 != v959);
                  }
                  v954 += v957;
                  ++v953;
                  v952 += v958;
                }
                while (v953 != v951);
              }
              break;
            case 4:
LABEL_557:
              break;
            case 5:
              v974 = (v111 << 30) - 0x500000000;
              v975 = *(_DWORD *)(v109 + (v974 >> 30));
              if (v975 >= 1)
              {
                v976 = 0;
                v977 = 0;
                v978 = v974 >> 29;
                v979 = *(_QWORD *)(*v107 + v978);
                v980 = *(_QWORD *)(*v108 + v978);
                do
                {
                  v976 += v979;
                  v977 += v980;
                  --v975;
                }
                while (v975);
              }
              break;
            default:
              LODWORD(v913) = 1;
              v914 = -20;
              do
              {
                v913 = *(int *)(v110 + v914) * (uint64_t)(int)v913;
                v914 += 4;
              }
              while (v914);
              if (v106[6])
              {
                result = 0;
                v915 = *(_QWORD **)v5;
                v1553 = v108;
                v1520 = v913;
                do
                {
                  v916 = *v106;
                  v917 = (unint64_t)((char *)v106[1] - (char *)*v106) >> 2;
                  v918 = (v917 - 1);
                  v1570 = result;
                  v1536 = v915;
                  v919 = 0;
                  if ((int)v917 - 1 >= 0)
                  {
                    v920 = *v107;
                    do
                    {
                      v921 = ldiv((int)result, v916[v918]);
                      LODWORD(result) = v921.quot;
                      v919 += *(_QWORD *)(v920 + 8 * v918--) * v921.rem;
                    }
                    while (v918 != -1);
                  }
                  v922 = *(_QWORD *)*a2;
                  v923 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v922) >> 2;
                  v924 = *v1553;
                  v925 = 0;
                  v926 = (v923 - 1);
                  if ((int)v923 - 1 >= 0)
                  {
                    v927 = v1570;
                    do
                    {
                      v928 = ldiv(v927, *(int *)(v922 + 4 * v926));
                      v927 = v928.quot;
                      v925 += *(_QWORD *)(v924 + 8 * v926--) * v928.rem;
                    }
                    while (v926 != -1);
                  }
                  v915 = v1536;
                  v929 = ((v915[1] - *v915) << 30) - 0x500000000;
                  v930 = *(int *)((char *)v916 + (v929 >> 30));
                  if (v930 >= 1)
                  {
                    v931 = v929 >> 29;
                    v932 = *(_QWORD *)(*v107 + v931);
                    v933 = *(_QWORD *)(v924 + v931);
                    do
                    {
                      v919 += v932;
                      v925 += v933;
                      --v930;
                    }
                    while (v930);
                    v915 = *(_QWORD **)v5;
                  }
                  result = v1570 + v1520;
                }
                while (v915[6] > (unint64_t)(v1570 + v1520));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v16 = v3[6];
          if (v16)
          {
            v17 = **(_DWORD **)(*(_QWORD *)result + 152);
            v18 = (_DWORD *)v3[19];
            do
            {
              *v18++ = v17;
              --v16;
            }
            while (v16);
          }
          break;
        case 1:
LABEL_35:
          v25 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v25)
            result = (uint64_t)memmove((void *)v3[19], *(const void **)(*(_QWORD *)result + 152), 4 * v25);
          break;
        case 2:
          v120 = *(int ***)result;
          v121 = **(int ***)result;
          v122 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v121;
          switch(v122 >> 2)
          {
            case 1:
              if (*v121 >= 1)
              {
                v123 = 0;
                v124 = v120[19];
                v125 = v3[19];
                v126 = 4 * *(_QWORD *)v120[3];
                do
                {
                  *(_DWORD *)(v125 + 4 * v123) = *v124;
                  v124 = (int *)((char *)v124 + v126);
                  ++v123;
                }
                while (*v121 > (int)v123);
              }
              break;
            case 2:
              v402 = *v121;
              if (*v121 >= 1)
              {
                v403 = 0;
                v404 = 0;
                v405 = 0;
                v406 = v120[19];
                v407 = v3[19];
                v408 = v120[3];
                v409 = *(_QWORD *)v408;
                v410 = *((_QWORD *)v408 + 1);
                v411 = v121[1];
                do
                {
                  if (v411 >= 1)
                  {
                    v412 = 0;
                    do
                    {
                      *(_DWORD *)(v407 + 4 * v404 + 4 * v412) = v406[v405];
                      v405 += v410;
                      v411 = v121[1];
                      ++v412;
                    }
                    while ((int)v412 < v411);
                    v402 = *v121;
                    v404 += v412;
                  }
                  v405 = v405 + v409 - v410 * v411;
                  ++v403;
                }
                while (v403 < v402);
              }
              break;
            case 3:
              result = *v121;
              if ((int)result >= 1)
              {
                v413 = 0;
                v414 = 0;
                v415 = 0;
                v416 = v120[19];
                v417 = v3[19];
                v418 = v120[3];
                v419 = *(_QWORD *)v418;
                v420 = *((_QWORD *)v418 + 1);
                v421 = v121[1];
                do
                {
                  if (v421 >= 1)
                  {
                    v422 = 0;
                    v423 = v120[3];
                    v424 = *((_QWORD *)v418 + 2);
                    v425 = v121[2];
                    do
                    {
                      if (v425 >= 1)
                      {
                        v426 = 0;
                        v427 = *((_QWORD *)v423 + 2);
                        do
                        {
                          *(_DWORD *)(v417 + 4 * v414 + 4 * v426) = v416[v415];
                          v415 += v427;
                          v425 = v121[2];
                          ++v426;
                        }
                        while ((int)v426 < v425);
                        v421 = v121[1];
                        v414 += v426;
                      }
                      v415 = v415 + v420 - v424 * v425;
                      ++v422;
                    }
                    while (v422 < v421);
                    result = *v121;
                  }
                  v415 = v415 + v419 - v420 * v421;
                  ++v413;
                }
                while (v413 < (int)result);
              }
              break;
            case 4:
              v428 = *v121;
              if (*v121 >= 1)
              {
                v429 = 0;
                v430 = 0;
                v431 = 0;
                v432 = v120[19];
                v433 = v3[19];
                v434 = v120[3];
                v435 = *(_QWORD *)v434;
                v436 = *((_QWORD *)v434 + 1);
                v437 = v121[1];
                do
                {
                  if (v437 >= 1)
                  {
                    v438 = 0;
                    v439 = v120[3];
                    v440 = *((_QWORD *)v434 + 2);
                    v441 = v121[2];
                    do
                    {
                      if (v441 >= 1)
                      {
                        v442 = 0;
                        v443 = v120[3];
                        v444 = *((_QWORD *)v439 + 2);
                        v445 = *((_QWORD *)v439 + 3);
                        v446 = v121[3];
                        do
                        {
                          if (v446 >= 1)
                          {
                            v447 = 0;
                            v448 = *((_QWORD *)v443 + 3);
                            do
                            {
                              *(_DWORD *)(v433 + 4 * v430 + 4 * v447) = v432[v431];
                              v431 += v448;
                              v446 = v121[3];
                              ++v447;
                            }
                            while ((int)v447 < v446);
                            v441 = v121[2];
                            v430 += v447;
                          }
                          v431 = v431 + v444 - v445 * v446;
                          ++v442;
                        }
                        while (v442 < v441);
                        v437 = v121[1];
                      }
                      v431 = v431 + v436 - v440 * v441;
                      ++v438;
                    }
                    while (v438 < v437);
                    v428 = *v121;
                  }
                  result = v437;
                  v431 = v431 + v435 - v436 * v437;
                  ++v429;
                }
                while (v429 < v428);
              }
              break;
            default:
              v393 = v3[6];
              if (v393)
              {
                v394 = 0;
                v395 = v120[19];
                v396 = v3[19];
                v397 = ((unint64_t)v122 >> 2) - 1;
                v398 = v120[3];
                do
                {
                  v399 = 0;
                  if ((v397 & 0x80000000) == 0)
                  {
                    v400 = v397;
                    LODWORD(result) = v394;
                    do
                    {
                      v401 = ldiv((int)result, v121[v400]);
                      result = v401.quot;
                      v399 += *(_QWORD *)&v398[2 * v400--] * v401.rem;
                    }
                    while (v400 != -1);
                  }
                  *(_DWORD *)(v396 + 4 * v394++) = v395[v399];
                }
                while (v394 != v393);
              }
              break;
          }
          break;
        case 3:
          v127 = *(unsigned int ***)result;
          v129 = **(_QWORD **)result;
          v128 = *(_QWORD *)(*(_QWORD *)result + 8);
          v130 = v128 - v129;
          switch((v128 - v129) >> 2)
          {
            case 1:
              v131 = (v130 << 30) - 0x100000000;
              v132 = *(_DWORD *)(v129 + (v131 >> 30));
              if (v132 >= 1)
              {
                v133 = v131 >> 29;
                v134 = *(_QWORD *)((char *)v127[3] + v133);
                v135 = *(_QWORD *)(v3[3] + v133);
                v136 = (unsigned int *)v3[19];
                v137 = v127[19];
                v138 = 4 * v135;
                v139 = 4 * v134;
                do
                {
                  *v136 = *v137;
                  v136 = (unsigned int *)((char *)v136 + v138);
                  v137 = (unsigned int *)((char *)v137 + v139);
                  --v132;
                }
                while (v132);
              }
              break;
            case 2:
              v1017 = (v130 << 30) - 0x200000000;
              v1018 = *(_DWORD *)(v129 + (v1017 >> 30));
              if (v1018 >= 1)
              {
                v1019 = 0;
                v1020 = 0;
                v1021 = 0;
                v1022 = v127[3];
                v1023 = v1017 >> 29;
                v1024 = *(_QWORD *)((char *)v1022 + v1023);
                v1025 = v3[3];
                v1026 = (v130 << 30) - 0x100000000;
                v1027 = *(_QWORD *)((char *)v1022 + (v1026 >> 29));
                v1028 = *(_QWORD *)(v1025 + (v1026 >> 29));
                v1029 = v1026 >> 32;
                v1030 = 4 * *(_QWORD *)(v1025 + v1023);
                v1031 = 4 * v1028;
                v1032 = 4 * v1024;
                v1033 = 4 * v1027;
                do
                {
                  result = *(unsigned int *)(v129 + 4 * v1029);
                  if ((int)result >= 1)
                  {
                    v1034 = (_DWORD *)(v3[19] + v1020);
                    v1035 = (unsigned int *)((char *)v127[19] + v1019);
                    do
                    {
                      *v1034 = *v1035;
                      v1034 = (_DWORD *)((char *)v1034 + v1031);
                      v1035 = (_DWORD *)((char *)v1035 + v1033);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  ++v1021;
                  v1020 += v1030;
                  v1019 += v1032;
                }
                while (v1021 != v1018);
              }
              break;
            case 3:
              v1036 = (v130 << 30) - 0x300000000;
              v1037 = *(_DWORD *)(v129 + (v1036 >> 30));
              if (v1037 >= 1)
              {
                v1038 = 0;
                v1039 = 0;
                v1040 = 0;
                v1041 = v130 << 30;
                v1042 = v127[3];
                v1043 = v1036 >> 29;
                v1044 = *(_QWORD *)((char *)v1042 + v1043);
                v1045 = v3[3];
                v1046 = *(_QWORD *)(v1045 + v1043);
                v1047 = (v1041 - 0x200000000) >> 29;
                v1048 = *(_QWORD *)((char *)v1042 + v1047);
                v1049 = (v1041 - 0x200000000) >> 32;
                v1050 = (v1041 - 0x100000000) >> 32;
                v1051 = 4 * v1046;
                v1052 = 4 * *(_QWORD *)(v1045 + v1047);
                result = 4 * v1044;
                v1053 = 4 * v1048;
                do
                {
                  v1054 = *(_DWORD *)(v129 + 4 * v1049);
                  if (v1054 >= 1)
                  {
                    v1055 = 0;
                    v1056 = (_QWORD *)*a2;
                    v1057 = 4 * *(_QWORD *)(v1045 + 8 * v1050);
                    v1058 = 4 * *(_QWORD *)&v1042[2 * v1050];
                    v1059 = v1038;
                    v1060 = v1039;
                    do
                    {
                      v1061 = *(_DWORD *)(v129 + 4 * v1050);
                      if (v1061 >= 1)
                      {
                        v1062 = (_DWORD *)(v1056[19] + v1060);
                        v1063 = (unsigned int *)((char *)v127[19] + v1059);
                        do
                        {
                          *v1062 = *v1063;
                          v1062 = (_DWORD *)((char *)v1062 + v1057);
                          v1063 = (_DWORD *)((char *)v1063 + v1058);
                          --v1061;
                        }
                        while (v1061);
                      }
                      ++v1055;
                      v1060 += v1052;
                      v1059 += v1053;
                    }
                    while (v1055 != v1054);
                  }
                  ++v1040;
                  v1039 += v1051;
                  v1038 += result;
                }
                while (v1040 != v1037);
              }
              break;
            case 4:
              v1064 = (v130 << 30) - 0x400000000;
              v1572 = *(_DWORD *)(v129 + (v1064 >> 30));
              if (v1572 >= 1)
              {
                v1065 = 0;
                v1066 = 0;
                v1067 = 0;
                v1068 = v130 << 30;
                v1069 = v127[3];
                v1070 = v1064 >> 29;
                v1071 = v3[3];
                v1555 = (v1068 - 0x300000000) >> 32;
                v1072 = (v1068 - 0x300000000) >> 29;
                v1073 = *(_QWORD *)((char *)v1069 + v1072);
                v1074 = *(_QWORD *)(v1071 + v1072);
                v1075 = (v1068 - 0x200000000) >> 32;
                v1076 = (v1068 - 0x100000000) >> 32;
                v1538 = 4 * *(_QWORD *)(v1071 + v1070);
                result = 4 * v1074;
                v1522 = 4 * *(_QWORD *)((char *)v1069 + v1070);
                v1077 = 4 * v1073;
                do
                {
                  v1078 = *(_DWORD *)(v129 + 4 * v1555);
                  if (v1078 >= 1)
                  {
                    v1079 = 0;
                    v1080 = 4 * *(_QWORD *)(v1071 + 8 * v1075);
                    v1081 = 4 * *(_QWORD *)&v1069[2 * v1075];
                    v1082 = v1065;
                    v1083 = v1066;
                    do
                    {
                      v1084 = *(_DWORD *)(v129 + 4 * v1075);
                      if (v1084 >= 1)
                      {
                        v1085 = 0;
                        v1086 = (_QWORD *)*a2;
                        v1087 = 4 * *(_QWORD *)(v1071 + 8 * v1076);
                        v1088 = 4 * *(_QWORD *)&v1069[2 * v1076];
                        v1089 = v1082;
                        v1090 = v1083;
                        do
                        {
                          v1091 = *(_DWORD *)(v129 + 4 * v1076);
                          if (v1091 >= 1)
                          {
                            v1092 = (_DWORD *)(v1086[19] + v1090);
                            v1093 = (unsigned int *)((char *)v127[19] + v1089);
                            do
                            {
                              *v1092 = *v1093;
                              v1092 = (_DWORD *)((char *)v1092 + v1087);
                              v1093 = (_DWORD *)((char *)v1093 + v1088);
                              --v1091;
                            }
                            while (v1091);
                          }
                          ++v1085;
                          v1090 += v1080;
                          v1089 += v1081;
                        }
                        while (v1085 != v1084);
                      }
                      ++v1079;
                      v1083 += result;
                      v1082 += v1077;
                    }
                    while (v1079 != v1078);
                  }
                  ++v1067;
                  v1066 += v1538;
                  v1065 += v1522;
                }
                while (v1067 != v1572);
              }
              break;
            case 5:
              v1094 = (v130 << 30) - 0x500000000;
              v1478 = *(_DWORD *)(v129 + (v1094 >> 30));
              if (v1478 >= 1)
              {
                v1498 = 0;
                v1508 = 0;
                v1488 = 0;
                v1095 = v130 << 30;
                v1096 = v127[3];
                v1097 = v1094 >> 29;
                v1098 = v3[3];
                v1468 = (v1095 - 0x400000000) >> 32;
                v1099 = (v1095 - 0x400000000) >> 29;
                result = *(_QWORD *)((char *)v1096 + v1099);
                v1556 = (v1095 - 0x300000000) >> 32;
                v1100 = (v1095 - 0x200000000) >> 32;
                v1101 = (v1095 - 0x100000000) >> 32;
                v1458 = 4 * *(_QWORD *)(v1098 + v1097);
                v1539 = 4 * *(_QWORD *)(v1098 + v1099);
                v1449 = 4 * *(_QWORD *)((char *)v1096 + v1097);
                v1523 = 4 * result;
                do
                {
                  v1573 = *(_DWORD *)(v129 + 4 * v1468);
                  if (v1573 >= 1)
                  {
                    v1102 = 0;
                    v1103 = 4 * *(_QWORD *)(v1098 + 8 * v1556);
                    v1104 = 4 * *(_QWORD *)&v1096[2 * v1556];
                    v1106 = v1498;
                    v1105 = v1508;
                    do
                    {
                      v1107 = *(_DWORD *)(v129 + 4 * v1556);
                      if (v1107 >= 1)
                      {
                        v1108 = 0;
                        v1109 = 4 * *(_QWORD *)(v1098 + 8 * v1100);
                        v1110 = 4 * *(_QWORD *)&v1096[2 * v1100];
                        v1111 = v1105;
                        v1112 = v1106;
                        do
                        {
                          v1113 = *(_DWORD *)(v129 + 4 * v1100);
                          if (v1113 >= 1)
                          {
                            v1114 = 0;
                            result = *a2;
                            v1115 = 4 * *(_QWORD *)(v1098 + 8 * v1101);
                            v1116 = 4 * *(_QWORD *)&v1096[2 * v1101];
                            v1117 = v1111;
                            v1118 = v1112;
                            do
                            {
                              v1119 = *(_DWORD *)(v129 + 4 * v1101);
                              if (v1119 >= 1)
                              {
                                v1120 = (_DWORD *)(*(_QWORD *)(result + 152) + v1118);
                                v1121 = (unsigned int *)((char *)v127[19] + v1117);
                                do
                                {
                                  *v1120 = *v1121;
                                  v1120 = (_DWORD *)((char *)v1120 + v1115);
                                  v1121 = (_DWORD *)((char *)v1121 + v1116);
                                  --v1119;
                                }
                                while (v1119);
                              }
                              ++v1114;
                              v1118 += v1109;
                              v1117 += v1110;
                            }
                            while (v1114 != v1113);
                          }
                          ++v1108;
                          v1112 += v1103;
                          v1111 += v1104;
                        }
                        while (v1108 != v1107);
                      }
                      ++v1102;
                      v1106 += v1539;
                      v1105 += v1523;
                    }
                    while (v1102 != v1573);
                  }
                  v1498 += v1458;
                  v1508 += v1449;
                  ++v1488;
                }
                while (v1488 != v1478);
              }
              break;
            default:
              LODWORD(v981) = 1;
              v982 = -20;
              do
              {
                v981 = *(int *)(v128 + v982) * (uint64_t)(int)v981;
                v982 += 4;
              }
              while (v982);
              v1431 = v127[6];
              if (v1431)
              {
                result = 0;
                v1457 = *v3;
                v983 = (v130 << 30) - 0x500000000;
                v1421 = (v130 >> 2) - 1;
                v984 = v127[3];
                v1416 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1412 = v983 >> 32;
                v985 = v3[3];
                v1467 = (uint64_t)((v130 << 30) - 0x400000000) >> 32;
                v1554 = (uint64_t)((v130 << 30) - 0x300000000) >> 32;
                v986 = (uint64_t)((v130 << 30) - 0x200000000) >> 32;
                v987 = (uint64_t)((v130 << 30) - 0x100000000) >> 32;
                v1441 = 4 * *(_QWORD *)((char *)v984 + (v983 >> 29));
                v1448 = 4 * *(_QWORD *)(v985 + (v983 >> 29));
                v1426 = v981;
                do
                {
                  v988 = v1421;
                  v1436 = result;
                  v989 = 0;
                  if ((v1421 & 0x80000000) != 0)
                  {
                    v990 = v1416;
                  }
                  else
                  {
                    v990 = v1416;
                    do
                    {
                      v991 = ldiv((int)result, *(int *)(v129 + 4 * v988));
                      LODWORD(result) = v991.quot;
                      v989 += *(_QWORD *)&v984[2 * v988--] * v991.rem;
                    }
                    while (v988 != -1);
                  }
                  v992 = 0;
                  if ((v990 & 0x80000000) == 0)
                  {
                    v993 = v1436;
                    do
                    {
                      v994 = ldiv(v993, *(int *)(v1457 + 4 * v990));
                      v993 = v994.quot;
                      v992 += *(_QWORD *)(v985 + 8 * v990--) * v994.rem;
                    }
                    while (v990 != -1);
                  }
                  v1477 = *(_DWORD *)(v129 + 4 * v1412);
                  if (v1477 >= 1)
                  {
                    v995 = 0;
                    v1507 = 4 * v992;
                    v1537 = 4 * *(_QWORD *)(v985 + 8 * v1467);
                    v1497 = 4 * v989;
                    v1521 = 4 * *(_QWORD *)&v984[2 * v1467];
                    do
                    {
                      v1487 = v995;
                      v1571 = *(_DWORD *)(v129 + 4 * v1467);
                      if (v1571 >= 1)
                      {
                        v996 = 0;
                        v997 = 4 * *(_QWORD *)(v985 + 8 * v1554);
                        v998 = 4 * *(_QWORD *)&v984[2 * v1554];
                        v1000 = v1497;
                        v999 = v1507;
                        do
                        {
                          v1001 = *(_DWORD *)(v129 + 4 * v1554);
                          if (v1001 >= 1)
                          {
                            v1002 = 0;
                            v1003 = 4 * *(_QWORD *)(v985 + 8 * v986);
                            v1004 = 4 * *(_QWORD *)&v984[2 * v986];
                            v1005 = v1000;
                            v1006 = v999;
                            do
                            {
                              v1007 = *(_DWORD *)(v129 + 4 * v986);
                              if (v1007 >= 1)
                              {
                                v1008 = 0;
                                v1009 = (_QWORD *)*a2;
                                v1010 = 4 * *(_QWORD *)(v985 + 8 * v987);
                                v1011 = 4 * *(_QWORD *)&v984[2 * v987];
                                v1012 = v1005;
                                v1013 = v1006;
                                do
                                {
                                  v1014 = *(_DWORD *)(v129 + 4 * v987);
                                  if (v1014 >= 1)
                                  {
                                    v1015 = (_DWORD *)(v1009[19] + v1013);
                                    v1016 = (unsigned int *)((char *)v127[19] + v1012);
                                    do
                                    {
                                      *v1015 = *v1016;
                                      v1015 = (_DWORD *)((char *)v1015 + v1010);
                                      v1016 = (_DWORD *)((char *)v1016 + v1011);
                                      --v1014;
                                    }
                                    while (v1014);
                                  }
                                  ++v1008;
                                  v1013 += v1003;
                                  v1012 += v1004;
                                }
                                while (v1008 != v1007);
                              }
                              ++v1002;
                              v1006 += v997;
                              v1005 += v998;
                            }
                            while (v1002 != v1001);
                          }
                          ++v996;
                          v999 += v1537;
                          v1000 += v1521;
                        }
                        while (v996 != v1571);
                      }
                      v995 = v1487 + 1;
                      v1507 += v1448;
                      v1497 += v1441;
                    }
                    while (v1487 + 1 != v1477);
                  }
                  result = v1436 + v1426;
                }
                while ((unint64_t)v1431 > v1436 + v1426);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v19 = v3[6];
          if (v19)
          {
            v20 = **(int **)(*(_QWORD *)result + 152);
            v21 = (_QWORD *)v3[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          v140 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v140)
          {
            v141 = *(int **)(*(_QWORD *)result + 152);
            v142 = (_QWORD *)v3[19];
            v143 = 4 * v140;
            do
            {
              v144 = *v141++;
              *v142++ = v144;
              v143 -= 4;
            }
            while (v143);
          }
          break;
        case 2:
          v145 = *(int ***)result;
          v146 = **(int ***)result;
          v147 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v146;
          switch(v147 >> 2)
          {
            case 1:
              v148 = *v146;
              if ((int)v148 >= 1)
              {
                v149 = v145[19];
                v150 = (_QWORD *)v3[19];
                v151 = 4 * *(_QWORD *)v145[3];
                do
                {
                  *v150++ = *v149;
                  v149 = (int *)((char *)v149 + v151);
                  --v148;
                }
                while (v148);
              }
              break;
            case 2:
              v458 = *v146;
              if (*v146 >= 1)
              {
                v459 = 0;
                v460 = 0;
                v461 = 0;
                v462 = v145[19];
                v463 = v3[19];
                v464 = v146[1];
                v465 = v145[3];
                v467 = *(_QWORD *)v465;
                v466 = *((_QWORD *)v465 + 1);
                v468 = v467 - v466 * v464;
                do
                {
                  v469 = v464;
                  if ((int)v464 >= 1)
                  {
                    do
                    {
                      result = v462[v461];
                      *(_QWORD *)(v463 + 8 * v460++) = result;
                      v461 += v466;
                      --v469;
                    }
                    while (v469);
                  }
                  v461 += v468;
                  ++v459;
                }
                while (v459 != v458);
              }
              break;
            case 3:
              v470 = *v146;
              if (*v146 >= 1)
              {
                v471 = 0;
                result = 0;
                v472 = 0;
                v473 = v145[19];
                v474 = v3[19];
                v475 = v146[1];
                v476 = v145[3];
                v477 = *((_QWORD *)v476 + 1);
                v478 = *(_QWORD *)v476 - v477 * v475;
                do
                {
                  if ((int)v475 < 1)
                  {
                    v485 = result;
                  }
                  else
                  {
                    v479 = 0;
                    v480 = v146[2];
                    v481 = v145[3];
                    v482 = v477 - *((_QWORD *)v476 + 2) * v480;
                    do
                    {
                      if ((int)v480 < 1)
                      {
                        v485 = result;
                      }
                      else
                      {
                        v483 = *((_QWORD *)v481 + 2);
                        v484 = v480;
                        do
                        {
                          v485 = result + 1;
                          *(_QWORD *)(v474 + 8 * result) = v473[v472];
                          v472 += v483;
                          ++result;
                          --v484;
                        }
                        while (v484);
                      }
                      v472 += v482;
                      ++v479;
                      result = v485;
                    }
                    while (v479 != (_DWORD)v475);
                  }
                  v472 += v478;
                  ++v471;
                  result = v485;
                }
                while (v471 != v470);
              }
              break;
            case 4:
              v486 = *v146;
              if (*v146 >= 1)
              {
                v487 = 0;
                result = 0;
                v488 = 0;
                v489 = v145[19];
                v490 = v3[19];
                v491 = v146[1];
                v492 = v145[3];
                v493 = *((_QWORD *)v492 + 1);
                v494 = *(_QWORD *)v492 - v493 * v491;
                do
                {
                  if ((int)v491 < 1)
                  {
                    v505 = result;
                  }
                  else
                  {
                    v495 = 0;
                    v496 = v146[2];
                    v497 = v145[3];
                    v498 = v493 - *((_QWORD *)v492 + 2) * v496;
                    do
                    {
                      if ((int)v496 < 1)
                      {
                        v505 = result;
                      }
                      else
                      {
                        v499 = 0;
                        v500 = v146[3];
                        v501 = v145[3];
                        v502 = *((_QWORD *)v497 + 2) - *((_QWORD *)v497 + 3) * v500;
                        do
                        {
                          if ((int)v500 < 1)
                          {
                            v505 = result;
                          }
                          else
                          {
                            v503 = *((_QWORD *)v501 + 3);
                            v504 = v500;
                            do
                            {
                              v505 = result + 1;
                              *(_QWORD *)(v490 + 8 * result) = v489[v488];
                              v488 += v503;
                              ++result;
                              --v504;
                            }
                            while (v504);
                          }
                          v488 += v502;
                          ++v499;
                          result = v505;
                        }
                        while (v499 != (_DWORD)v496);
                      }
                      v488 += v498;
                      ++v495;
                      result = v505;
                    }
                    while (v495 != (_DWORD)v491);
                  }
                  v488 += v494;
                  ++v487;
                  result = v505;
                }
                while (v487 != v486);
              }
              break;
            default:
              v449 = v3[6];
              if (v449)
              {
                v450 = 0;
                v451 = v145[19];
                v452 = v3[19];
                v453 = ((unint64_t)v147 >> 2) - 1;
                v454 = v145[3];
                do
                {
                  v455 = 0;
                  if ((v453 & 0x80000000) == 0)
                  {
                    v456 = v453;
                    LODWORD(result) = v450;
                    do
                    {
                      v457 = ldiv((int)result, v146[v456]);
                      result = v457.quot;
                      v455 += *(_QWORD *)&v454[2 * v456--] * v457.rem;
                    }
                    while (v456 != -1);
                  }
                  *(_QWORD *)(v452 + 8 * v450++) = v451[v455];
                }
                while (v450 != v449);
              }
              break;
          }
          break;
        case 3:
          v152 = *(unsigned int ***)result;
          v154 = **(_QWORD **)result;
          v153 = *(_QWORD *)(*(_QWORD *)result + 8);
          v155 = v153 - v154;
          switch((v153 - v154) >> 2)
          {
            case 1:
              v156 = (v155 << 30) - 0x100000000;
              v157 = *(_DWORD *)(v154 + (v156 >> 30));
              if (v157 >= 1)
              {
                v158 = v156 >> 29;
                v159 = *(_QWORD *)((char *)v152[3] + v158);
                v160 = *(_QWORD *)(v3[3] + v158);
                v161 = (_QWORD *)v3[19];
                v162 = v152[19];
                v163 = 8 * v160;
                v164 = 4 * v159;
                do
                {
                  *v161 = (int)*v162;
                  v161 = (_QWORD *)((char *)v161 + v163);
                  v162 = (unsigned int *)((char *)v162 + v164);
                  --v157;
                }
                while (v157);
              }
              break;
            case 2:
              v1157 = (v155 << 30) - 0x200000000;
              v1158 = *(_DWORD *)(v154 + (v1157 >> 30));
              if (v1158 >= 1)
              {
                v1159 = 0;
                v1160 = 0;
                v1161 = 0;
                v1162 = v152[3];
                v1163 = v1157 >> 29;
                v1164 = *(_QWORD *)((char *)v1162 + v1163);
                v1165 = v3[3];
                result = *(_QWORD *)(v1165 + v1163);
                v1166 = (v155 << 30) - 0x100000000;
                v1167 = *(_QWORD *)((char *)v1162 + (v1166 >> 29));
                v1168 = *(_QWORD *)(v1165 + (v1166 >> 29));
                v1169 = *(_DWORD *)(v154 + (v1166 >> 30));
                v1170 = 8 * result;
                v1171 = 8 * v1168;
                v1172 = 4 * v1164;
                v1173 = 4 * v1167;
                do
                {
                  if (v1169 >= 1)
                  {
                    result = v3[19] + v1160;
                    v1174 = (int *)((char *)v152[19] + v1159);
                    v1175 = v1169;
                    do
                    {
                      *(_QWORD *)result = *v1174;
                      result += v1171;
                      v1174 = (int *)((char *)v1174 + v1173);
                      --v1175;
                    }
                    while (v1175);
                  }
                  ++v1161;
                  v1160 += v1170;
                  v1159 += v1172;
                }
                while (v1161 != v1158);
              }
              break;
            case 3:
              v1176 = (v155 << 30) - 0x300000000;
              v1177 = *(_DWORD *)(v154 + (v1176 >> 30));
              if (v1177 >= 1)
              {
                v1178 = 0;
                v1179 = 0;
                v1180 = 0;
                v1181 = v152[3];
                v1182 = v1176 >> 29;
                v1183 = *(_QWORD *)((char *)v1181 + v1182);
                v1184 = v3[3];
                v1185 = *(_QWORD *)(v1184 + v1182);
                v1186 = v155 << 30;
                v1187 = (v155 << 30) - 0x200000000;
                v1188 = *(_QWORD *)((char *)v1181 + (v1187 >> 29));
                v1189 = *(_QWORD *)(v1184 + (v1187 >> 29));
                v1190 = *(_DWORD *)(v154 + (v1187 >> 30));
                v1191 = (v1186 - 0x100000000) >> 32;
                v1192 = 8 * v1185;
                v1193 = 8 * v1189;
                result = 4 * v1183;
                v1194 = 4 * v1188;
                do
                {
                  if (v1190 >= 1)
                  {
                    v1195 = 0;
                    v1196 = *(_DWORD *)(v154 + 4 * v1191);
                    v1197 = (_QWORD *)*a2;
                    v1198 = 8 * *(_QWORD *)(v1184 + 8 * v1191);
                    v1199 = 4 * *(_QWORD *)&v1181[2 * v1191];
                    v1200 = v1178;
                    v1201 = v1179;
                    do
                    {
                      if (v1196 >= 1)
                      {
                        v1202 = (_QWORD *)(v1197[19] + v1201);
                        v1203 = (int *)((char *)v152[19] + v1200);
                        v1204 = v1196;
                        do
                        {
                          *v1202 = *v1203;
                          v1202 = (_QWORD *)((char *)v1202 + v1198);
                          v1203 = (int *)((char *)v1203 + v1199);
                          --v1204;
                        }
                        while (v1204);
                      }
                      ++v1195;
                      v1201 += v1193;
                      v1200 += v1194;
                    }
                    while (v1195 != v1190);
                  }
                  ++v1180;
                  v1179 += v1192;
                  v1178 += result;
                }
                while (v1180 != v1177);
              }
              break;
            case 4:
              v1205 = (v155 << 30) - 0x400000000;
              v1575 = *(_DWORD *)(v154 + (v1205 >> 30));
              if (v1575 >= 1)
              {
                v1206 = 0;
                v1207 = 0;
                v1208 = 0;
                v1209 = v152[3];
                v1210 = v1205 >> 29;
                v1211 = v155 << 30;
                v1212 = v3[3];
                v1213 = (v1211 - 0x300000000) >> 29;
                v1214 = *(_QWORD *)((char *)v1209 + v1213);
                v1215 = v1211 - 0x200000000;
                v1216 = v1211 - 0x100000000;
                v1217 = *(_QWORD *)(v1212 + v1213);
                v1218 = *(_DWORD *)(v154 + ((v1211 - 0x300000000) >> 30));
                v1525 = v1215 >> 32;
                v1219 = v1216 >> 32;
                v1558 = 8 * *(_QWORD *)(v1212 + v1210);
                result = 8 * v1217;
                v1541 = 4 * *(_QWORD *)((char *)v1209 + v1210);
                v1220 = 4 * v1214;
                do
                {
                  if (v1218 >= 1)
                  {
                    v1221 = 0;
                    v1222 = *(_DWORD *)(v154 + 4 * v1525);
                    v1223 = 8 * *(_QWORD *)(v1212 + 8 * v1525);
                    v1224 = 4 * *(_QWORD *)&v1209[2 * v1525];
                    v1225 = v1206;
                    v1226 = v1207;
                    do
                    {
                      if (v1222 >= 1)
                      {
                        v1227 = 0;
                        v1228 = *(_DWORD *)(v154 + 4 * v1219);
                        v1229 = (_QWORD *)*a2;
                        v1230 = 8 * *(_QWORD *)(v1212 + 8 * v1219);
                        v1231 = 4 * *(_QWORD *)&v1209[2 * v1219];
                        v1232 = v1225;
                        v1233 = v1226;
                        do
                        {
                          if (v1228 >= 1)
                          {
                            v1234 = (_QWORD *)(v1229[19] + v1233);
                            v1235 = (int *)((char *)v152[19] + v1232);
                            v1236 = v1228;
                            do
                            {
                              *v1234 = *v1235;
                              v1234 = (_QWORD *)((char *)v1234 + v1230);
                              v1235 = (int *)((char *)v1235 + v1231);
                              --v1236;
                            }
                            while (v1236);
                          }
                          ++v1227;
                          v1233 += v1223;
                          v1232 += v1224;
                        }
                        while (v1227 != v1222);
                      }
                      ++v1221;
                      v1226 += result;
                      v1225 += v1220;
                    }
                    while (v1221 != v1218);
                  }
                  ++v1208;
                  v1207 += v1558;
                  v1206 += v1541;
                }
                while (v1208 != v1575);
              }
              break;
            case 5:
              v1237 = (v155 << 30) - 0x500000000;
              v1480 = *(_DWORD *)(v154 + (v1237 >> 30));
              if (v1480 >= 1)
              {
                v1500 = 0;
                v1510 = 0;
                v1490 = 0;
                v1238 = v152[3];
                v1239 = v1237 >> 29;
                v1240 = v3[3];
                v1241 = (v155 << 30) - 0x400000000;
                result = *(_QWORD *)((char *)v1238 + (v1241 >> 29));
                v1576 = *(_DWORD *)(v154 + (v1241 >> 30));
                v1451 = (uint64_t)((v155 << 30) - 0x300000000) >> 32;
                v1526 = (uint64_t)((v155 << 30) - 0x200000000) >> 32;
                v1242 = (uint64_t)((v155 << 30) - 0x100000000) >> 32;
                v1470 = 8 * *(_QWORD *)(v1240 + v1239);
                v1559 = 8 * *(_QWORD *)(v1240 + (v1241 >> 29));
                v1460 = 4 * *(_QWORD *)((char *)v1238 + v1239);
                v1542 = 4 * result;
                do
                {
                  if (v1576 >= 1)
                  {
                    v1243 = 0;
                    v1244 = *(_DWORD *)(v154 + 4 * v1451);
                    v1245 = 8 * *(_QWORD *)(v1240 + 8 * v1451);
                    v1246 = 4 * *(_QWORD *)&v1238[2 * v1451];
                    v1248 = v1500;
                    v1247 = v1510;
                    do
                    {
                      if (v1244 >= 1)
                      {
                        v1249 = 0;
                        v1250 = *(_DWORD *)(v154 + 4 * v1526);
                        v1251 = 8 * *(_QWORD *)(v1240 + 8 * v1526);
                        v1252 = 4 * *(_QWORD *)&v1238[2 * v1526];
                        v1253 = v1247;
                        v1254 = v1248;
                        do
                        {
                          if (v1250 >= 1)
                          {
                            v1255 = 0;
                            v1256 = *(_DWORD *)(v154 + 4 * v1242);
                            v1257 = (_QWORD *)*a2;
                            v1258 = 8 * *(_QWORD *)(v1240 + 8 * v1242);
                            v1259 = 4 * *(_QWORD *)&v1238[2 * v1242];
                            v1260 = v1253;
                            v1261 = v1254;
                            do
                            {
                              if (v1256 >= 1)
                              {
                                v1262 = (_QWORD *)(v1257[19] + v1261);
                                v1263 = (int *)((char *)v152[19] + v1260);
                                LODWORD(result) = v1256;
                                do
                                {
                                  *v1262 = *v1263;
                                  v1262 = (_QWORD *)((char *)v1262 + v1258);
                                  v1263 = (int *)((char *)v1263 + v1259);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1255;
                              v1261 += v1251;
                              v1260 += v1252;
                            }
                            while (v1255 != v1250);
                          }
                          ++v1249;
                          v1254 += v1245;
                          v1253 += v1246;
                        }
                        while (v1249 != v1244);
                      }
                      ++v1243;
                      v1248 += v1559;
                      v1247 += v1542;
                    }
                    while (v1243 != v1576);
                  }
                  v1500 += v1470;
                  v1510 += v1460;
                  ++v1490;
                }
                while (v1490 != v1480);
              }
              break;
            default:
              LODWORD(v1122) = 1;
              v1123 = -20;
              do
              {
                v1122 = *(int *)(v153 + v1123) * (uint64_t)(int)v1122;
                v1123 += 4;
              }
              while (v1123);
              v1437 = v152[6];
              if (v1437)
              {
                v1124 = 0;
                v1417 = *v3;
                v1125 = (v155 << 30) - 0x500000000;
                v1427 = (v155 >> 2) - 1;
                v1126 = v152[3];
                v1422 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1127 = v3[3];
                v1479 = *(_DWORD *)(v154 + (v1125 >> 30));
                v1413 = (uint64_t)((v155 << 30) - 0x400000000) >> 32;
                v1524 = (uint64_t)((v155 << 30) - 0x200000000) >> 32;
                v1128 = (uint64_t)((v155 << 30) - 0x100000000) >> 32;
                v1469 = 8 * *(_QWORD *)(v1127 + (v1125 >> 29));
                v1450 = (uint64_t)((v155 << 30) - 0x300000000) >> 32;
                v1459 = 4 * *(_QWORD *)((char *)v1126 + (v1125 >> 29));
                v1432 = v1122;
                do
                {
                  v1129 = v1427;
                  if ((v1427 & 0x80000000) != 0)
                  {
                    v1130 = 0;
                    v1131 = v1422;
                  }
                  else
                  {
                    v1130 = 0;
                    LODWORD(result) = v1124;
                    v1131 = v1422;
                    do
                    {
                      v1132 = ldiv((int)result, *(int *)(v154 + 4 * v1129));
                      result = v1132.quot;
                      v1130 += *(_QWORD *)&v1126[2 * v1129--] * v1132.rem;
                    }
                    while (v1129 != -1);
                  }
                  v1442 = v1124;
                  v1133 = 0;
                  if ((v1131 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1124;
                    do
                    {
                      v1134 = ldiv((int)result, *(int *)(v1417 + 4 * v1131));
                      result = v1134.quot;
                      v1133 += *(_QWORD *)(v1127 + 8 * v1131--) * v1134.rem;
                    }
                    while (v1131 != -1);
                  }
                  if (v1479 >= 1)
                  {
                    v1135 = 0;
                    v1574 = *(_DWORD *)(v154 + 4 * v1413);
                    v1509 = 8 * v1133;
                    v1557 = 8 * *(_QWORD *)(v1127 + 8 * v1413);
                    v1499 = 4 * v1130;
                    v1540 = 4 * *(_QWORD *)&v1126[2 * v1413];
                    do
                    {
                      v1489 = v1135;
                      if (v1574 >= 1)
                      {
                        v1136 = 0;
                        v1137 = *(_DWORD *)(v154 + 4 * v1450);
                        v1138 = 8 * *(_QWORD *)(v1127 + 8 * v1450);
                        v1139 = 4 * *(_QWORD *)&v1126[2 * v1450];
                        v1141 = v1499;
                        v1140 = v1509;
                        do
                        {
                          if (v1137 >= 1)
                          {
                            v1142 = 0;
                            v1143 = *(_DWORD *)(v154 + 4 * v1524);
                            v1144 = 8 * *(_QWORD *)(v1127 + 8 * v1524);
                            v1145 = 4 * *(_QWORD *)&v1126[2 * v1524];
                            result = v1141;
                            v1146 = v1140;
                            do
                            {
                              if (v1143 >= 1)
                              {
                                v1147 = 0;
                                v1148 = *(_DWORD *)(v154 + 4 * v1128);
                                v1149 = (_QWORD *)*a2;
                                v1150 = 8 * *(_QWORD *)(v1127 + 8 * v1128);
                                v1151 = 4 * *(_QWORD *)&v1126[2 * v1128];
                                v1152 = result;
                                v1153 = v1146;
                                do
                                {
                                  if (v1148 >= 1)
                                  {
                                    v1154 = (_QWORD *)(v1149[19] + v1153);
                                    v1155 = (int *)((char *)v152[19] + v1152);
                                    v1156 = v1148;
                                    do
                                    {
                                      *v1154 = *v1155;
                                      v1154 = (_QWORD *)((char *)v1154 + v1150);
                                      v1155 = (int *)((char *)v1155 + v1151);
                                      --v1156;
                                    }
                                    while (v1156);
                                  }
                                  ++v1147;
                                  v1153 += v1144;
                                  v1152 += v1145;
                                }
                                while (v1147 != v1143);
                              }
                              ++v1142;
                              v1146 += v1138;
                              result += v1139;
                            }
                            while (v1142 != v1137);
                          }
                          ++v1136;
                          v1140 += v1557;
                          v1141 += v1540;
                        }
                        while (v1136 != v1574);
                      }
                      v1135 = v1489 + 1;
                      v1509 += v1469;
                      v1499 += v1459;
                    }
                    while (v1489 + 1 != v1479);
                  }
                  v1124 += v1432;
                }
                while ((unint64_t)v1437 > v1442 + v1432);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v22 = v3[6];
          if (v22)
          {
            v23 = (float)**(int **)(*(_QWORD *)result + 152);
            v24 = (float *)v3[19];
            do
            {
              *v24++ = v23;
              --v22;
            }
            while (v22);
          }
          break;
        case 1:
          v165 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v165)
          {
            v166 = *(int **)(*(_QWORD *)result + 152);
            v167 = (float *)v3[19];
            v168 = 4 * v165;
            do
            {
              v169 = *v166++;
              *v167++ = (float)v169;
              v168 -= 4;
            }
            while (v168);
          }
          break;
        case 2:
          v170 = *(int ***)result;
          v171 = **(int ***)result;
          v172 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v171;
          switch(v172 >> 2)
          {
            case 1:
              v173 = *v171;
              if ((int)v173 >= 1)
              {
                v174 = v170[19];
                v175 = (float *)v3[19];
                v176 = 4 * *(_QWORD *)v170[3];
                do
                {
                  *v175++ = (float)*v174;
                  v174 = (int *)((char *)v174 + v176);
                  --v173;
                }
                while (v173);
              }
              break;
            case 2:
              v515 = *v171;
              if (*v171 >= 1)
              {
                v516 = 0;
                v517 = 0;
                v518 = 0;
                v519 = v170[19];
                v520 = v3[19];
                v521 = v171[1];
                v522 = v170[3];
                v524 = *(_QWORD *)v522;
                v523 = *((_QWORD *)v522 + 1);
                v525 = v524 - v523 * v521;
                do
                {
                  v526 = v521;
                  if ((int)v521 >= 1)
                  {
                    do
                    {
                      *(float *)(v520 + 4 * v517++) = (float)v519[v518];
                      v518 += v523;
                      --v526;
                    }
                    while (v526);
                  }
                  v518 += v525;
                  ++v516;
                }
                while (v516 != v515);
              }
              break;
            case 3:
              v527 = *v171;
              if (*v171 >= 1)
              {
                v528 = 0;
                result = 0;
                v529 = 0;
                v530 = v170[19];
                v531 = v3[19];
                v532 = v171[1];
                v533 = v170[3];
                v534 = *((_QWORD *)v533 + 1);
                v535 = *(_QWORD *)v533 - v534 * v532;
                do
                {
                  if ((int)v532 < 1)
                  {
                    v542 = result;
                  }
                  else
                  {
                    v536 = 0;
                    v537 = v171[2];
                    v538 = v170[3];
                    v539 = v534 - *((_QWORD *)v533 + 2) * v537;
                    do
                    {
                      if ((int)v537 < 1)
                      {
                        v542 = result;
                      }
                      else
                      {
                        v540 = *((_QWORD *)v538 + 2);
                        v541 = v537;
                        do
                        {
                          v542 = result + 1;
                          *(float *)(v531 + 4 * result) = (float)v530[v529];
                          v529 += v540;
                          ++result;
                          --v541;
                        }
                        while (v541);
                      }
                      v529 += v539;
                      ++v536;
                      result = v542;
                    }
                    while (v536 != (_DWORD)v532);
                  }
                  v529 += v535;
                  ++v528;
                  result = v542;
                }
                while (v528 != v527);
              }
              break;
            case 4:
              v543 = *v171;
              if (*v171 >= 1)
              {
                v544 = 0;
                result = 0;
                v545 = 0;
                v546 = v170[19];
                v547 = v3[19];
                v548 = v171[1];
                v549 = v170[3];
                v550 = *((_QWORD *)v549 + 1);
                v551 = *(_QWORD *)v549 - v550 * v548;
                do
                {
                  if ((int)v548 < 1)
                  {
                    v562 = result;
                  }
                  else
                  {
                    v552 = 0;
                    v553 = v171[2];
                    v554 = v170[3];
                    v555 = v550 - *((_QWORD *)v549 + 2) * v553;
                    do
                    {
                      if ((int)v553 < 1)
                      {
                        v562 = result;
                      }
                      else
                      {
                        v556 = 0;
                        v557 = v171[3];
                        v558 = v170[3];
                        v559 = *((_QWORD *)v554 + 2) - *((_QWORD *)v554 + 3) * v557;
                        do
                        {
                          if ((int)v557 < 1)
                          {
                            v562 = result;
                          }
                          else
                          {
                            v560 = *((_QWORD *)v558 + 3);
                            v561 = v557;
                            do
                            {
                              v562 = result + 1;
                              *(float *)(v547 + 4 * result) = (float)v546[v545];
                              v545 += v560;
                              ++result;
                              --v561;
                            }
                            while (v561);
                          }
                          v545 += v559;
                          ++v556;
                          result = v562;
                        }
                        while (v556 != (_DWORD)v553);
                      }
                      v545 += v555;
                      ++v552;
                      result = v562;
                    }
                    while (v552 != (_DWORD)v548);
                  }
                  v545 += v551;
                  ++v544;
                  result = v562;
                }
                while (v544 != v543);
              }
              break;
            default:
              v506 = v3[6];
              if (v506)
              {
                v507 = 0;
                v508 = v170[19];
                v509 = v3[19];
                v510 = ((unint64_t)v172 >> 2) - 1;
                v511 = v170[3];
                do
                {
                  v512 = 0;
                  if ((v510 & 0x80000000) == 0)
                  {
                    v513 = v510;
                    LODWORD(result) = v507;
                    do
                    {
                      v514 = ldiv((int)result, v171[v513]);
                      result = v514.quot;
                      v512 += *(_QWORD *)&v511[2 * v513--] * v514.rem;
                    }
                    while (v513 != -1);
                  }
                  *(float *)(v509 + 4 * v507++) = (float)v508[v512];
                }
                while (v507 != v506);
              }
              break;
          }
          break;
        case 3:
          v177 = *(unsigned int ***)result;
          v179 = **(_QWORD **)result;
          v178 = *(_QWORD *)(*(_QWORD *)result + 8);
          v180 = v178 - v179;
          switch((v178 - v179) >> 2)
          {
            case 1:
              v181 = (v180 << 30) - 0x100000000;
              v182 = *(_DWORD *)(v179 + (v181 >> 30));
              if (v182 >= 1)
              {
                v183 = v181 >> 29;
                v184 = *(_QWORD *)((char *)v177[3] + v183);
                v185 = *(_QWORD *)(v3[3] + v183);
                v186 = (float *)v3[19];
                v187 = (int *)v177[19];
                v188 = 4 * v185;
                v189 = 4 * v184;
                do
                {
                  *v186 = (float)*v187;
                  v186 = (float *)((char *)v186 + v188);
                  v187 = (int *)((char *)v187 + v189);
                  --v182;
                }
                while (v182);
              }
              break;
            case 2:
              v1301 = (v180 << 30) - 0x200000000;
              v1302 = *(_DWORD *)(v179 + (v1301 >> 30));
              if (v1302 >= 1)
              {
                v1303 = 0;
                v1304 = 0;
                v1305 = 0;
                v1306 = v177[3];
                v1307 = v1301 >> 29;
                v1308 = *(_QWORD *)((char *)v1306 + v1307);
                v1309 = v3[3];
                result = *(_QWORD *)(v1309 + v1307);
                v1310 = (v180 << 30) - 0x100000000;
                v1311 = *(_QWORD *)((char *)v1306 + (v1310 >> 29));
                v1312 = *(_QWORD *)(v1309 + (v1310 >> 29));
                v1313 = *(_DWORD *)(v179 + (v1310 >> 30));
                v1314 = 4 * result;
                v1315 = 4 * v1312;
                v1316 = 4 * v1308;
                v1317 = 4 * v1311;
                do
                {
                  if (v1313 >= 1)
                  {
                    result = v3[19] + v1304;
                    v1318 = (int *)((char *)v177[19] + v1303);
                    v1319 = v1313;
                    do
                    {
                      *(float *)result = (float)*v1318;
                      result += v1315;
                      v1318 = (int *)((char *)v1318 + v1317);
                      --v1319;
                    }
                    while (v1319);
                  }
                  ++v1305;
                  v1304 += v1314;
                  v1303 += v1316;
                }
                while (v1305 != v1302);
              }
              break;
            case 3:
              v1320 = (v180 << 30) - 0x300000000;
              v1321 = *(_DWORD *)(v179 + (v1320 >> 30));
              if (v1321 >= 1)
              {
                v1322 = 0;
                v1323 = 0;
                v1324 = 0;
                v1325 = v177[3];
                v1326 = v1320 >> 29;
                v1327 = *(_QWORD *)((char *)v1325 + v1326);
                v1328 = v3[3];
                v1329 = *(_QWORD *)(v1328 + v1326);
                v1330 = v180 << 30;
                v1331 = (v180 << 30) - 0x200000000;
                v1332 = *(_QWORD *)((char *)v1325 + (v1331 >> 29));
                v1333 = *(_QWORD *)(v1328 + (v1331 >> 29));
                v1334 = *(_DWORD *)(v179 + (v1331 >> 30));
                v1335 = (v1330 - 0x100000000) >> 32;
                v1336 = 4 * v1329;
                v1337 = 4 * v1333;
                result = 4 * v1327;
                v1338 = 4 * v1332;
                do
                {
                  if (v1334 >= 1)
                  {
                    v1339 = 0;
                    v1340 = *(_DWORD *)(v179 + 4 * v1335);
                    v1341 = (_QWORD *)*a2;
                    v1342 = 4 * *(_QWORD *)(v1328 + 8 * v1335);
                    v1343 = 4 * *(_QWORD *)&v1325[2 * v1335];
                    v1344 = v1322;
                    v1345 = v1323;
                    do
                    {
                      if (v1340 >= 1)
                      {
                        v1346 = (float *)(v1341[19] + v1345);
                        v1347 = (int *)((char *)v177[19] + v1344);
                        v1348 = v1340;
                        do
                        {
                          *v1346 = (float)*v1347;
                          v1346 = (float *)((char *)v1346 + v1342);
                          v1347 = (int *)((char *)v1347 + v1343);
                          --v1348;
                        }
                        while (v1348);
                      }
                      ++v1339;
                      v1345 += v1337;
                      v1344 += v1338;
                    }
                    while (v1339 != v1334);
                  }
                  ++v1324;
                  v1323 += v1336;
                  v1322 += result;
                }
                while (v1324 != v1321);
              }
              break;
            case 4:
              v1349 = (v180 << 30) - 0x400000000;
              v1578 = *(_DWORD *)(v179 + (v1349 >> 30));
              if (v1578 >= 1)
              {
                v1350 = 0;
                v1351 = 0;
                v1352 = 0;
                v1353 = v177[3];
                v1354 = v1349 >> 29;
                v1355 = v180 << 30;
                v1356 = v3[3];
                v1357 = (v1355 - 0x300000000) >> 29;
                v1358 = *(_QWORD *)((char *)v1353 + v1357);
                v1359 = v1355 - 0x200000000;
                v1360 = v1355 - 0x100000000;
                v1361 = *(_QWORD *)(v1356 + v1357);
                v1362 = *(_DWORD *)(v179 + ((v1355 - 0x300000000) >> 30));
                v1363 = v1359 >> 32;
                v1364 = v1360 >> 32;
                v1561 = 4 * *(_QWORD *)(v1356 + v1354);
                result = 4 * v1361;
                v1544 = 4 * *(_QWORD *)((char *)v1353 + v1354);
                v1365 = 4 * v1358;
                do
                {
                  if (v1362 >= 1)
                  {
                    v1366 = 0;
                    v1367 = *(_DWORD *)(v179 + 4 * v1363);
                    v1368 = 4 * *(_QWORD *)(v1356 + 8 * v1363);
                    v1369 = 4 * *(_QWORD *)&v1353[2 * v1363];
                    v1370 = v1350;
                    v1371 = v1351;
                    do
                    {
                      if (v1367 >= 1)
                      {
                        v1372 = 0;
                        v1373 = *(_DWORD *)(v179 + 4 * v1364);
                        v1374 = (_QWORD *)*a2;
                        v1375 = 4 * *(_QWORD *)(v1356 + 8 * v1364);
                        v1376 = 4 * *(_QWORD *)&v1353[2 * v1364];
                        v1377 = v1370;
                        v1378 = v1371;
                        do
                        {
                          if (v1373 >= 1)
                          {
                            v1379 = (float *)(v1374[19] + v1378);
                            v1380 = (int *)((char *)v177[19] + v1377);
                            v1381 = v1373;
                            do
                            {
                              *v1379 = (float)*v1380;
                              v1379 = (float *)((char *)v1379 + v1375);
                              v1380 = (int *)((char *)v1380 + v1376);
                              --v1381;
                            }
                            while (v1381);
                          }
                          ++v1372;
                          v1378 += v1368;
                          v1377 += v1369;
                        }
                        while (v1372 != v1367);
                      }
                      ++v1366;
                      v1371 += result;
                      v1370 += v1365;
                    }
                    while (v1366 != v1362);
                  }
                  ++v1352;
                  v1351 += v1561;
                  v1350 += v1544;
                }
                while (v1352 != v1578);
              }
              break;
            case 5:
              v1382 = (v180 << 30) - 0x500000000;
              v1492 = *(_DWORD *)(v179 + (v1382 >> 30));
              if (v1492 >= 1)
              {
                v1512 = 0;
                v1528 = 0;
                v1502 = 0;
                v1383 = v177[3];
                v1384 = v1382 >> 29;
                v1385 = v3[3];
                v1386 = (v180 << 30) - 0x400000000;
                result = *(_QWORD *)((char *)v1383 + (v1386 >> 29));
                v1579 = *(_DWORD *)(v179 + (v1386 >> 30));
                v1462 = (uint64_t)((v180 << 30) - 0x300000000) >> 32;
                v1387 = (uint64_t)((v180 << 30) - 0x200000000) >> 32;
                v1388 = (uint64_t)((v180 << 30) - 0x100000000) >> 32;
                v1482 = 4 * *(_QWORD *)(v1385 + v1384);
                v1562 = 4 * *(_QWORD *)(v1385 + (v1386 >> 29));
                v1472 = 4 * *(_QWORD *)((char *)v1383 + v1384);
                v1545 = 4 * result;
                do
                {
                  if (v1579 >= 1)
                  {
                    v1389 = 0;
                    v1390 = *(_DWORD *)(v179 + 4 * v1462);
                    v1391 = 4 * *(_QWORD *)(v1385 + 8 * v1462);
                    v1392 = 4 * *(_QWORD *)&v1383[2 * v1462];
                    v1394 = v1512;
                    v1393 = v1528;
                    do
                    {
                      if (v1390 >= 1)
                      {
                        v1395 = 0;
                        v1396 = *(_DWORD *)(v179 + 4 * v1387);
                        v1397 = 4 * *(_QWORD *)(v1385 + 8 * v1387);
                        v1398 = 4 * *(_QWORD *)&v1383[2 * v1387];
                        v1399 = v1393;
                        v1400 = v1394;
                        do
                        {
                          if (v1396 >= 1)
                          {
                            v1401 = 0;
                            v1402 = *(_DWORD *)(v179 + 4 * v1388);
                            v1403 = (_QWORD *)*a2;
                            v1404 = 4 * *(_QWORD *)(v1385 + 8 * v1388);
                            v1405 = 4 * *(_QWORD *)&v1383[2 * v1388];
                            v1406 = v1399;
                            v1407 = v1400;
                            do
                            {
                              if (v1402 >= 1)
                              {
                                v1408 = (float *)(v1403[19] + v1407);
                                v1409 = (int *)((char *)v177[19] + v1406);
                                LODWORD(result) = v1402;
                                do
                                {
                                  *v1408 = (float)*v1409;
                                  v1408 = (float *)((char *)v1408 + v1404);
                                  v1409 = (int *)((char *)v1409 + v1405);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1401;
                              v1407 += v1397;
                              v1406 += v1398;
                            }
                            while (v1401 != v1396);
                          }
                          ++v1395;
                          v1400 += v1391;
                          v1399 += v1392;
                        }
                        while (v1395 != v1390);
                      }
                      ++v1389;
                      v1394 += v1562;
                      v1393 += v1545;
                    }
                    while (v1389 != v1579);
                  }
                  v1512 += v1482;
                  v1528 += v1472;
                  ++v1502;
                }
                while (v1502 != v1492);
              }
              break;
            default:
              LODWORD(v1264) = 1;
              v1265 = -20;
              do
              {
                v1264 = *(int *)(v178 + v1265) * (uint64_t)(int)v1264;
                v1265 += 4;
              }
              while (v1265);
              v1438 = v177[6];
              if (v1438)
              {
                result = 0;
                v1481 = *v3;
                v1266 = (v180 << 30) - 0x500000000;
                v1428 = (v180 >> 2) - 1;
                v1267 = v177[3];
                v1423 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1268 = v3[3];
                v1491 = *(_DWORD *)(v179 + (v1266 >> 30));
                v1418 = (uint64_t)((v180 << 30) - 0x400000000) >> 32;
                v1269 = (uint64_t)((v180 << 30) - 0x200000000) >> 32;
                v1270 = (uint64_t)((v180 << 30) - 0x100000000) >> 32;
                v1471 = 4 * *(_QWORD *)(v1268 + (v1266 >> 29));
                v1452 = (uint64_t)((v180 << 30) - 0x300000000) >> 32;
                v1461 = 4 * *(_QWORD *)((char *)v1267 + (v1266 >> 29));
                v1433 = v1264;
                do
                {
                  v1271 = v1428;
                  v1443 = result;
                  v1272 = 0;
                  if ((v1428 & 0x80000000) != 0)
                  {
                    v1273 = v1423;
                  }
                  else
                  {
                    v1273 = v1423;
                    do
                    {
                      v1274 = ldiv((int)result, *(int *)(v179 + 4 * v1271));
                      LODWORD(result) = v1274.quot;
                      v1272 += *(_QWORD *)&v1267[2 * v1271--] * v1274.rem;
                    }
                    while (v1271 != -1);
                  }
                  v1275 = 0;
                  if ((v1273 & 0x80000000) == 0)
                  {
                    v1276 = v1443;
                    do
                    {
                      v1277 = ldiv(v1276, *(int *)(v1481 + 4 * v1273));
                      v1276 = v1277.quot;
                      v1275 += *(_QWORD *)(v1268 + 8 * v1273--) * v1277.rem;
                    }
                    while (v1273 != -1);
                  }
                  if (v1491 >= 1)
                  {
                    v1278 = 0;
                    v1577 = *(_DWORD *)(v179 + 4 * v1418);
                    v1527 = 4 * v1275;
                    v1560 = 4 * *(_QWORD *)(v1268 + 8 * v1418);
                    v1511 = 4 * v1272;
                    v1543 = 4 * *(_QWORD *)&v1267[2 * v1418];
                    do
                    {
                      v1501 = v1278;
                      if (v1577 >= 1)
                      {
                        v1279 = 0;
                        v1280 = *(_DWORD *)(v179 + 4 * v1452);
                        v1281 = 4 * *(_QWORD *)(v1268 + 8 * v1452);
                        v1282 = 4 * *(_QWORD *)&v1267[2 * v1452];
                        v1284 = v1511;
                        v1283 = v1527;
                        do
                        {
                          if (v1280 >= 1)
                          {
                            v1285 = 0;
                            v1286 = *(_DWORD *)(v179 + 4 * v1269);
                            v1287 = 4 * *(_QWORD *)(v1268 + 8 * v1269);
                            v1288 = 4 * *(_QWORD *)&v1267[2 * v1269];
                            v1289 = v1284;
                            v1290 = v1283;
                            do
                            {
                              if (v1286 >= 1)
                              {
                                v1291 = 0;
                                v1292 = *(_DWORD *)(v179 + 4 * v1270);
                                v1293 = (_QWORD *)*a2;
                                v1294 = 4 * *(_QWORD *)(v1268 + 8 * v1270);
                                v1295 = 4 * *(_QWORD *)&v1267[2 * v1270];
                                v1296 = v1289;
                                v1297 = v1290;
                                do
                                {
                                  if (v1292 >= 1)
                                  {
                                    v1298 = (float *)(v1293[19] + v1297);
                                    v1299 = (int *)((char *)v177[19] + v1296);
                                    v1300 = v1292;
                                    do
                                    {
                                      *v1298 = (float)*v1299;
                                      v1298 = (float *)((char *)v1298 + v1294);
                                      v1299 = (int *)((char *)v1299 + v1295);
                                      --v1300;
                                    }
                                    while (v1300);
                                  }
                                  ++v1291;
                                  v1297 += v1287;
                                  v1296 += v1288;
                                }
                                while (v1291 != v1286);
                              }
                              ++v1285;
                              v1290 += v1281;
                              v1289 += v1282;
                            }
                            while (v1285 != v1280);
                          }
                          ++v1279;
                          v1283 += v1560;
                          v1284 += v1543;
                        }
                        while (v1279 != v1577);
                      }
                      v1278 = v1501 + 1;
                      v1527 += v1471;
                      v1511 += v1461;
                    }
                    while (v1501 + 1 != v1491);
                  }
                  result = v1443 + v1433;
                }
                while ((unint64_t)v1438 > v1443 + v1433);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<long long>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  float *v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  BOOL *v35;
  uint64_t v36;
  unsigned int **v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  int **v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int **v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  int **v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int **v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  int **v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  int **v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  int **v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int **v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  unsigned int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int **v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  _QWORD *v155;
  uint64_t v156;
  unsigned int **v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  unsigned int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  float *v172;
  uint64_t v173;
  uint64_t v174;
  int **v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  float *v180;
  uint64_t v181;
  unsigned int **v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  float *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  ldiv_t v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  unint64_t v252;
  int *v253;
  uint64_t v254;
  int *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int *v259;
  ldiv_t v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  int *v265;
  uint64_t v266;
  int v267;
  int *v268;
  uint64_t v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  int *v274;
  uint64_t v275;
  int v276;
  int i;
  int v278;
  uint64_t v279;
  int *v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  int *v286;
  uint64_t v287;
  int v288;
  int j;
  int v290;
  int k;
  int v292;
  uint64_t v293;
  int *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int *v299;
  uint64_t v300;
  uint64_t v301;
  int *v302;
  uint64_t v303;
  uint64_t v304;
  ldiv_t v305;
  int v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  int *v310;
  uint64_t v311;
  int *v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  int *v320;
  uint64_t v321;
  int *v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  int *v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  int *v336;
  uint64_t v337;
  int *v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  int v342;
  int *v343;
  uint64_t v344;
  int v345;
  int v346;
  int *v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  int *v354;
  uint64_t v355;
  int *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int *v360;
  ldiv_t v361;
  int v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  int *v366;
  uint64_t v367;
  int v368;
  int *v369;
  uint64_t v370;
  int v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  int *v375;
  uint64_t v376;
  int v377;
  int m;
  int v379;
  uint64_t v380;
  int *v381;
  uint64_t v382;
  int v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  int *v387;
  uint64_t v388;
  int v389;
  int n;
  int v391;
  int ii;
  int v393;
  uint64_t v394;
  int *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int *v400;
  uint64_t v401;
  uint64_t v402;
  int *v403;
  uint64_t v404;
  uint64_t v405;
  ldiv_t v406;
  int v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  int *v411;
  uint64_t v412;
  int *v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  int *v421;
  uint64_t v422;
  int *v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  int v427;
  int *v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  int *v437;
  uint64_t v438;
  int *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  int v443;
  int *v444;
  uint64_t v445;
  int v446;
  int v447;
  int *v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int *v456;
  uint64_t v457;
  uint64_t v458;
  int *v459;
  uint64_t v460;
  uint64_t v461;
  ldiv_t v462;
  int v463;
  int v464;
  uint64_t v465;
  uint64_t v466;
  int *v467;
  uint64_t v468;
  uint64_t v469;
  int *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  int v474;
  int v475;
  int v476;
  uint64_t v477;
  int *v478;
  uint64_t v479;
  uint64_t v480;
  int *v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  int *v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  int v491;
  int v492;
  uint64_t v493;
  int *v494;
  uint64_t v495;
  uint64_t v496;
  int *v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  int *v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  int *v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int *v513;
  uint64_t v514;
  uint64_t v515;
  int *v516;
  uint64_t v517;
  uint64_t v518;
  ldiv_t v519;
  int v520;
  int v521;
  uint64_t v522;
  uint64_t v523;
  int *v524;
  uint64_t v525;
  uint64_t v526;
  int *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  int v532;
  int v533;
  uint64_t v534;
  int *v535;
  uint64_t v536;
  uint64_t v537;
  int *v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  uint64_t v542;
  int *v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  int v548;
  int v549;
  uint64_t v550;
  int *v551;
  uint64_t v552;
  uint64_t v553;
  int *v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  int *v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  int *v563;
  uint64_t v564;
  uint64_t v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unsigned int *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  ldiv_t v577;
  uint64_t v578;
  uint64_t v579;
  ldiv_t v580;
  int v581;
  int v582;
  uint64_t v583;
  int v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  uint64_t v589;
  int v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  _QWORD *v601;
  int v602;
  uint64_t v603;
  int v604;
  uint64_t v605;
  int v606;
  uint64_t v607;
  uint64_t v608;
  unsigned int *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  int v621;
  uint64_t v622;
  int v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  unsigned int *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  int v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  _QWORD *v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  unsigned int *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  int v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  _QWORD *v679;
  int v680;
  uint64_t v681;
  unsigned int *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  uint64_t v688;
  int v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  int v693;
  uint64_t v694;
  int v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  int v699;
  uint64_t v700;
  int v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  _QWORD *v707;
  int v708;
  uint64_t v709;
  uint64_t v710;
  _QWORD *v711;
  int *v712;
  unint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  ldiv_t v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  int quot;
  ldiv_t v724;
  uint64_t v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  int v731;
  uint64_t v732;
  int v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  int v747;
  uint64_t v748;
  int v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  int v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  _QWORD *v768;
  uint64_t v769;
  uint64_t v770;
  int v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unsigned int *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  ldiv_t v787;
  uint64_t v788;
  int v789;
  ldiv_t v790;
  int v791;
  int v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  int v797;
  int v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  int v803;
  int v804;
  _QWORD *v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  int v810;
  _DWORD *v811;
  _QWORD *v812;
  uint64_t v813;
  int v814;
  uint64_t v815;
  uint64_t v816;
  int v817;
  unsigned int *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  _DWORD *v830;
  _QWORD *v831;
  uint64_t v832;
  int v833;
  uint64_t v834;
  uint64_t v835;
  int v836;
  uint64_t v837;
  unsigned int *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  int v850;
  int v851;
  _QWORD *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  _DWORD *v858;
  _QWORD *v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  int v863;
  uint64_t v864;
  unsigned int *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  int v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  int v880;
  int v881;
  _QWORD *v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  int v887;
  _DWORD *v888;
  _QWORD *v889;
  uint64_t v890;
  uint64_t v891;
  unsigned int *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  int v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  int v909;
  int v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  int v915;
  _DWORD *v916;
  _QWORD *v917;
  uint64_t v918;
  uint64_t v919;
  _QWORD *v920;
  int *v921;
  unint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  ldiv_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  int v932;
  ldiv_t v933;
  uint64_t v934;
  int v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  uint64_t v941;
  int v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  int v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  int v956;
  uint64_t v957;
  int v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  int v964;
  int v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  int v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  _QWORD *v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  unsigned int *v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  ldiv_t v996;
  uint64_t v997;
  int v998;
  ldiv_t v999;
  int v1000;
  int v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  int v1006;
  int v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  int v1012;
  int v1013;
  _QWORD *v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  int v1019;
  _DWORD *v1020;
  _QWORD *v1021;
  uint64_t v1022;
  int v1023;
  uint64_t v1024;
  uint64_t v1025;
  int v1026;
  unsigned int *v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  _DWORD *v1039;
  _QWORD *v1040;
  uint64_t v1041;
  int v1042;
  uint64_t v1043;
  uint64_t v1044;
  int v1045;
  uint64_t v1046;
  unsigned int *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  int v1059;
  int v1060;
  _QWORD *v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  int v1066;
  _DWORD *v1067;
  _QWORD *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  int v1072;
  uint64_t v1073;
  unsigned int *v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  int v1083;
  int v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  int v1089;
  int v1090;
  _QWORD *v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  int v1096;
  _DWORD *v1097;
  _QWORD *v1098;
  uint64_t v1099;
  uint64_t v1100;
  unsigned int *v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  int v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  int v1112;
  int v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  int v1118;
  int v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  int v1124;
  _DWORD *v1125;
  _QWORD *v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  unsigned int *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  ldiv_t v1137;
  uint64_t v1138;
  ldiv_t v1139;
  int v1140;
  int v1141;
  int v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  int v1147;
  int v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  int v1152;
  int v1153;
  _QWORD *v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  _QWORD *v1159;
  _QWORD *v1160;
  int v1161;
  uint64_t v1162;
  int v1163;
  uint64_t v1164;
  uint64_t v1165;
  int v1166;
  unsigned int *v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  int v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  _QWORD *v1179;
  int v1180;
  uint64_t v1181;
  int v1182;
  uint64_t v1183;
  uint64_t v1184;
  int v1185;
  unsigned int *v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  int v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  int v1200;
  int v1201;
  _QWORD *v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  _QWORD *v1207;
  _QWORD *v1208;
  int v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  int v1213;
  unsigned int *v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  int v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  int v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  int v1232;
  int v1233;
  _QWORD *v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  _QWORD *v1239;
  _QWORD *v1240;
  int v1241;
  uint64_t v1242;
  unsigned int *v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  int v1248;
  int v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  int v1254;
  int v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  int v1260;
  int v1261;
  _QWORD *v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  _QWORD *v1267;
  _QWORD *v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  unsigned int *v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  ldiv_t v1279;
  uint64_t v1280;
  ldiv_t v1281;
  int v1282;
  int v1283;
  int v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  int v1289;
  int v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  int v1294;
  int v1295;
  _QWORD *v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  float *v1301;
  uint64_t *v1302;
  int v1303;
  uint64_t v1304;
  int v1305;
  uint64_t v1306;
  uint64_t v1307;
  int v1308;
  unsigned int *v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  int v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t *v1321;
  int v1322;
  uint64_t v1323;
  int v1324;
  uint64_t v1325;
  uint64_t v1326;
  int v1327;
  unsigned int *v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  int v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  int v1342;
  int v1343;
  _QWORD *v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  float *v1349;
  uint64_t *v1350;
  int v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  int v1355;
  unsigned int *v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  int v1365;
  uint64_t v1366;
  uint64_t v1367;
  int v1368;
  int v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  int v1374;
  int v1375;
  _QWORD *v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  float *v1381;
  uint64_t *v1382;
  int v1383;
  uint64_t v1384;
  unsigned int *v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  int v1390;
  int v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  int v1396;
  int v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  int v1402;
  int v1403;
  _QWORD *v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  float *v1409;
  uint64_t *v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  unsigned int *v1432;
  unsigned int *v1433;
  uint64_t v1434;
  uint64_t v1435;
  unsigned int *v1436;
  uint64_t v1437;
  uint64_t v1438;
  unsigned int *v1439;
  unsigned int *v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  int v1480;
  int v1481;
  int v1482;
  int v1483;
  int v1484;
  int v1485;
  int v1486;
  int v1487;
  int v1488;
  int v1489;
  int v1490;
  int v1491;
  int v1492;
  int v1493;
  int v1494;
  int v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  _QWORD *v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  _QWORD *v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t *v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t *v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  int v1567;
  int v1568;
  int v1569;
  uint64_t v1570;
  int v1571;
  int v1572;
  int v1573;
  uint64_t v1574;
  int v1575;
  int v1576;
  int v1577;
  int v1578;
  int v1579;
  int v1580;
  int v1581;
  int v1582;
  int v1583;

  v3 = (uint64_t *)*a2;
  v5 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v6 = v3[6];
          if (v6)
            result = (uint64_t)memset((void *)v3[19], **(_QWORD **)(*(_QWORD *)result + 152) != 0, v6);
          break;
        case 1:
          v25 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v25)
          {
            v26 = *(uint64_t **)(*(_QWORD *)result + 152);
            v27 = (BOOL *)v3[19];
            v28 = 8 * v25;
            do
            {
              v29 = *v26++;
              *v27++ = v29 != 0;
              v28 -= 8;
            }
            while (v28);
          }
          break;
        case 2:
          v30 = *(uint64_t **)result;
          v31 = **(int ***)result;
          v32 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v31;
          switch(v32 >> 2)
          {
            case 1:
              v33 = *v31;
              if ((int)v33 >= 1)
              {
                v34 = (_QWORD *)v30[19];
                v35 = (BOOL *)v3[19];
                v36 = 8 * *(_QWORD *)v30[3];
                do
                {
                  *v35++ = *v34 != 0;
                  v34 = (_QWORD *)((char *)v34 + v36);
                  --v33;
                }
                while (v33);
              }
              break;
            case 2:
              v204 = *v31;
              if (*v31 >= 1)
              {
                v205 = 0;
                v206 = 0;
                v207 = 0;
                v208 = v30[19];
                v209 = v3[19];
                v210 = v31[1];
                v211 = (uint64_t *)v30[3];
                v213 = *v211;
                v212 = v211[1];
                v214 = v213 - v212 * v210;
                do
                {
                  v215 = v210;
                  if ((int)v210 >= 1)
                  {
                    do
                    {
                      result = *(_QWORD *)(v208 + 8 * v207) != 0;
                      *(_BYTE *)(v209 + v206++) = result;
                      v207 += v212;
                      --v215;
                    }
                    while (v215);
                  }
                  v207 += v214;
                  ++v205;
                }
                while (v205 != v204);
              }
              break;
            case 3:
              v216 = *v31;
              if (*v31 >= 1)
              {
                v217 = 0;
                result = 0;
                v218 = 0;
                v219 = v30[19];
                v220 = v3[19];
                v221 = v31[1];
                v222 = (_QWORD *)v30[3];
                v223 = v222[1];
                v224 = *v222 - v223 * v221;
                do
                {
                  if ((int)v221 < 1)
                  {
                    v231 = result;
                  }
                  else
                  {
                    v225 = 0;
                    v226 = v31[2];
                    v227 = v30[3];
                    v228 = v223 - v222[2] * v226;
                    do
                    {
                      if ((int)v226 < 1)
                      {
                        v231 = result;
                      }
                      else
                      {
                        v229 = *(_QWORD *)(v227 + 16);
                        v230 = v226;
                        do
                        {
                          v231 = result + 1;
                          *(_BYTE *)(v220 + result) = *(_QWORD *)(v219 + 8 * v218) != 0;
                          v218 += v229;
                          ++result;
                          --v230;
                        }
                        while (v230);
                      }
                      v218 += v228;
                      ++v225;
                      result = v231;
                    }
                    while (v225 != (_DWORD)v221);
                  }
                  v218 += v224;
                  ++v217;
                  result = v231;
                }
                while (v217 != v216);
              }
              break;
            case 4:
              v232 = *v31;
              if (*v31 >= 1)
              {
                v233 = 0;
                result = 0;
                v234 = 0;
                v235 = v30[19];
                v236 = v3[19];
                v237 = v31[1];
                v238 = (_QWORD *)v30[3];
                v239 = v238[1];
                v240 = *v238 - v239 * v237;
                do
                {
                  if ((int)v237 < 1)
                  {
                    v251 = result;
                  }
                  else
                  {
                    v241 = 0;
                    v242 = v31[2];
                    v243 = v30[3];
                    v244 = v239 - v238[2] * v242;
                    do
                    {
                      if ((int)v242 < 1)
                      {
                        v251 = result;
                      }
                      else
                      {
                        v245 = 0;
                        v246 = v31[3];
                        v247 = v30[3];
                        v248 = *(_QWORD *)(v243 + 16) - *(_QWORD *)(v243 + 24) * v246;
                        do
                        {
                          if ((int)v246 < 1)
                          {
                            v251 = result;
                          }
                          else
                          {
                            v249 = *(_QWORD *)(v247 + 24);
                            v250 = v246;
                            do
                            {
                              v251 = result + 1;
                              *(_BYTE *)(v236 + result) = *(_QWORD *)(v235 + 8 * v234) != 0;
                              v234 += v249;
                              ++result;
                              --v250;
                            }
                            while (v250);
                          }
                          v234 += v248;
                          ++v245;
                          result = v251;
                        }
                        while (v245 != (_DWORD)v242);
                      }
                      v234 += v244;
                      ++v241;
                      result = v251;
                    }
                    while (v241 != (_DWORD)v237);
                  }
                  v234 += v240;
                  ++v233;
                  result = v251;
                }
                while (v233 != v232);
              }
              break;
            default:
              v195 = v3[6];
              if (v195)
              {
                v196 = 0;
                v197 = v30[19];
                v198 = v3[19];
                v199 = ((unint64_t)v32 >> 2) - 1;
                v200 = v30[3];
                do
                {
                  v201 = 0;
                  if ((v199 & 0x80000000) == 0)
                  {
                    v202 = v199;
                    LODWORD(result) = v196;
                    do
                    {
                      v203 = ldiv((int)result, v31[v202]);
                      result = v203.quot;
                      v201 += *(_QWORD *)(v200 + 8 * v202--) * v203.rem;
                    }
                    while (v202 != -1);
                  }
                  *(_BYTE *)(v198 + v196++) = *(_QWORD *)(v197 + 8 * v201) != 0;
                }
                while (v196 != v195);
              }
              break;
          }
          break;
        case 3:
          v37 = *(unsigned int ***)result;
          v39 = **(_QWORD **)result;
          v38 = *(_QWORD *)(*(_QWORD *)result + 8);
          v40 = v38 - v39;
          switch((v38 - v39) >> 2)
          {
            case 1:
              v41 = (v40 << 30) - 0x100000000;
              v42 = *(_DWORD *)(v39 + (v41 >> 30));
              if (v42 >= 1)
              {
                v43 = v41 >> 29;
                v44 = *(_QWORD *)((char *)v37[3] + v43);
                v45 = *(_QWORD *)(v3[3] + v43);
                v46 = (BOOL *)v3[19];
                v47 = v37[19];
                v48 = 8 * v44;
                do
                {
                  *v46 = *(_QWORD *)v47 != 0;
                  v46 += v45;
                  v47 = (unsigned int *)((char *)v47 + v48);
                  --v42;
                }
                while (v42);
              }
              break;
            case 2:
              v603 = (v40 << 30) - 0x200000000;
              v604 = *(_DWORD *)(v39 + (v603 >> 30));
              if (v604 >= 1)
              {
                v605 = 0;
                v606 = 0;
                v607 = 0;
                v608 = v40 << 30;
                v609 = v37[3];
                v610 = v603 >> 29;
                v611 = *(_QWORD *)((char *)v609 + v610);
                v612 = v3[3];
                v613 = *(_QWORD *)(v612 + v610);
                result = v608 - 0x100000000;
                v614 = (v608 - 0x100000000) >> 29;
                v615 = *(_QWORD *)((char *)v609 + v614);
                v616 = *(_QWORD *)(v612 + v614);
                v617 = *(_DWORD *)(v39 + (result >> 30));
                v618 = 8 * v611;
                v619 = 8 * v615;
                do
                {
                  if (v617 >= 1)
                  {
                    result = v3[19];
                    v620 = (_QWORD *)((char *)v37[19] + v605);
                    v621 = v617;
                    do
                    {
                      *(_BYTE *)(result + v607) = *v620 != 0;
                      result += v616;
                      v620 = (_QWORD *)((char *)v620 + v619);
                      --v621;
                    }
                    while (v621);
                  }
                  v607 += v613;
                  ++v606;
                  v605 += v618;
                }
                while (v606 != v604);
              }
              break;
            case 3:
              v622 = (v40 << 30) - 0x300000000;
              v623 = *(_DWORD *)(v39 + (v622 >> 30));
              if (v623 >= 1)
              {
                v624 = 0;
                v625 = 0;
                v626 = 0;
                v627 = v40 << 30;
                v628 = v37[3];
                v629 = v622 >> 29;
                v630 = *(_QWORD *)((char *)v628 + v629);
                v631 = v3[3];
                v632 = *(_QWORD *)(v631 + v629);
                v633 = v627 - 0x200000000;
                v634 = (v627 - 0x200000000) >> 29;
                v635 = v627 - 0x100000000;
                v636 = *(_QWORD *)((char *)v628 + v634);
                v637 = *(_QWORD *)(v631 + v634);
                v638 = *(_DWORD *)(v39 + (v633 >> 30));
                v639 = v635 >> 32;
                result = 8 * v630;
                v640 = 8 * v636;
                do
                {
                  if (v638 >= 1)
                  {
                    v641 = 0;
                    v642 = *(_QWORD *)(v631 + 8 * v639);
                    v643 = *(_DWORD *)(v39 + 4 * v639);
                    v644 = *a2;
                    v645 = 8 * *(_QWORD *)&v628[2 * v639];
                    v646 = v624;
                    v647 = v626;
                    do
                    {
                      if (v643 >= 1)
                      {
                        v648 = *(_QWORD *)(v644 + 152);
                        v649 = (_QWORD *)((char *)v37[19] + v646);
                        v650 = v643;
                        do
                        {
                          *(_BYTE *)(v648 + v647) = *v649 != 0;
                          v648 += v642;
                          v649 = (_QWORD *)((char *)v649 + v645);
                          --v650;
                        }
                        while (v650);
                      }
                      v647 += v637;
                      ++v641;
                      v646 += v640;
                    }
                    while (v641 != v638);
                  }
                  v626 += v632;
                  ++v625;
                  v624 += result;
                }
                while (v625 != v623);
              }
              break;
            case 4:
              v651 = (v40 << 30) - 0x400000000;
              v1568 = *(_DWORD *)(v39 + (v651 >> 30));
              if (v1568 >= 1)
              {
                v652 = 0;
                v653 = 0;
                v654 = 0;
                v655 = v37[3];
                v656 = v651 >> 29;
                v657 = *(_QWORD *)((char *)v655 + v656);
                v658 = v3[3];
                v1551 = *(_QWORD *)(v658 + v656);
                v659 = (v40 << 30) - 0x300000000;
                v660 = (v40 << 30) - 0x200000000;
                v661 = (v40 << 30) - 0x100000000;
                v662 = *(_QWORD *)(v658 + (v659 >> 29));
                v663 = *(_DWORD *)(v39 + (v659 >> 30));
                v1517 = v660 >> 32;
                result = v661 >> 32;
                v1534 = 8 * v657;
                v664 = 8 * *(_QWORD *)((char *)v655 + (v659 >> 29));
                do
                {
                  if (v663 >= 1)
                  {
                    v665 = 0;
                    v666 = *(_QWORD *)(v658 + 8 * v1517);
                    v667 = *(_DWORD *)(v39 + 4 * v1517);
                    v668 = 8 * *(_QWORD *)&v655[2 * v1517];
                    v669 = v652;
                    v670 = v654;
                    do
                    {
                      if (v667 >= 1)
                      {
                        v671 = 0;
                        v672 = *(_QWORD *)(v658 + 8 * result);
                        v673 = *(_DWORD *)(v39 + 4 * result);
                        v674 = *a2;
                        v675 = 8 * *(_QWORD *)&v655[2 * result];
                        v676 = v669;
                        v677 = v670;
                        do
                        {
                          if (v673 >= 1)
                          {
                            v678 = *(_QWORD *)(v674 + 152);
                            v679 = (_QWORD *)((char *)v37[19] + v676);
                            v680 = v673;
                            do
                            {
                              *(_BYTE *)(v678 + v677) = *v679 != 0;
                              v678 += v672;
                              v679 = (_QWORD *)((char *)v679 + v675);
                              --v680;
                            }
                            while (v680);
                          }
                          v677 += v666;
                          ++v671;
                          v676 += v668;
                        }
                        while (v671 != v667);
                      }
                      v670 += v662;
                      ++v665;
                      v669 += v664;
                    }
                    while (v665 != v663);
                  }
                  v654 += v1551;
                  ++v653;
                  v652 += v1534;
                }
                while (v653 != v1568);
              }
              break;
            case 5:
              v681 = (v40 << 30) - 0x500000000;
              v1477 = *(_DWORD *)(v39 + (v681 >> 30));
              if (v1477 >= 1)
              {
                v1497 = 0;
                v1507 = 0;
                v1487 = 0;
                v682 = v37[3];
                v683 = v681 >> 29;
                v684 = v3[3];
                v1467 = *(_QWORD *)(v684 + v683);
                v685 = (v40 << 30) - 0x400000000;
                v1552 = *(_QWORD *)(v684 + (v685 >> 29));
                v1569 = *(_DWORD *)(v39 + (v685 >> 30));
                v1447 = (uint64_t)((v40 << 30) - 0x300000000) >> 32;
                v1518 = (uint64_t)((v40 << 30) - 0x200000000) >> 32;
                v686 = (uint64_t)((v40 << 30) - 0x100000000) >> 32;
                v1457 = 8 * *(_QWORD *)((char *)v682 + v683);
                v1535 = 8 * *(_QWORD *)((char *)v682 + (v685 >> 29));
                do
                {
                  if (v1569 >= 1)
                  {
                    v687 = 0;
                    v688 = *(_QWORD *)(v684 + 8 * v1447);
                    v689 = *(_DWORD *)(v39 + 4 * v1447);
                    v690 = 8 * *(_QWORD *)&v682[2 * v1447];
                    v691 = v1497;
                    v692 = v1507;
                    do
                    {
                      if (v689 >= 1)
                      {
                        v693 = 0;
                        v694 = *(_QWORD *)(v684 + 8 * v1518);
                        v695 = *(_DWORD *)(v39 + 4 * v1518);
                        v696 = 8 * *(_QWORD *)&v682[2 * v1518];
                        v697 = v692;
                        v698 = v691;
                        do
                        {
                          if (v695 >= 1)
                          {
                            v699 = 0;
                            v700 = *(_QWORD *)(v684 + 8 * v686);
                            v701 = *(_DWORD *)(v39 + 4 * v686);
                            v702 = *a2;
                            v703 = 8 * *(_QWORD *)&v682[2 * v686];
                            v704 = v697;
                            v705 = v698;
                            do
                            {
                              if (v701 >= 1)
                              {
                                v706 = *(_QWORD *)(v702 + 152);
                                v707 = (_QWORD *)((char *)v37[19] + v704);
                                v708 = v701;
                                do
                                {
                                  result = *v707 != 0;
                                  *(_BYTE *)(v706 + v705) = result;
                                  v706 += v700;
                                  v707 = (_QWORD *)((char *)v707 + v703);
                                  --v708;
                                }
                                while (v708);
                              }
                              v705 += v694;
                              ++v699;
                              v704 += v696;
                            }
                            while (v699 != v695);
                          }
                          v698 += v688;
                          ++v693;
                          v697 += v690;
                        }
                        while (v693 != v689);
                      }
                      v691 += v1552;
                      ++v687;
                      v692 += v1535;
                    }
                    while (v687 != v1569);
                  }
                  v1497 += v1467;
                  v1507 += v1457;
                  ++v1487;
                }
                while (v1487 != v1477);
              }
              break;
            default:
              LODWORD(v568) = 1;
              v569 = -20;
              do
              {
                v568 = *(int *)(v38 + v569) * (uint64_t)(int)v568;
                v569 += 4;
              }
              while (v569);
              v1436 = v37[6];
              if (v1436)
              {
                v570 = 0;
                v1416 = *v3;
                v571 = (v40 << 30) - 0x500000000;
                v1426 = (v40 >> 2) - 1;
                v572 = v37[3];
                v573 = v3[3];
                v1466 = *(_QWORD *)(v573 + (v571 >> 29));
                v1476 = *(_DWORD *)(v39 + (v571 >> 30));
                v1421 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1411 = (uint64_t)((v40 << 30) - 0x400000000) >> 32;
                v1516 = (uint64_t)((v40 << 30) - 0x200000000) >> 32;
                v574 = (uint64_t)((v40 << 30) - 0x100000000) >> 32;
                v1446 = (uint64_t)((v40 << 30) - 0x300000000) >> 32;
                v1456 = 8 * *(_QWORD *)((char *)v572 + (v571 >> 29));
                v1431 = v568;
                do
                {
                  v575 = v1426;
                  if ((v1426 & 0x80000000) != 0)
                  {
                    v576 = 0;
                  }
                  else
                  {
                    v576 = 0;
                    LODWORD(result) = v570;
                    do
                    {
                      v577 = ldiv((int)result, *(int *)(v39 + 4 * v575));
                      result = v577.quot;
                      v576 += *(_QWORD *)&v572[2 * v575--] * v577.rem;
                    }
                    while (v575 != -1);
                  }
                  v578 = v1421;
                  v1441 = v570;
                  v579 = 0;
                  if ((v1421 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v570;
                    do
                    {
                      v580 = ldiv((int)result, *(int *)(v1416 + 4 * v578));
                      result = v580.quot;
                      v579 += *(_QWORD *)(v573 + 8 * v578--) * v580.rem;
                    }
                    while (v578 != -1);
                  }
                  if (v1476 >= 1)
                  {
                    v581 = 0;
                    v1550 = *(_QWORD *)(v573 + 8 * v1411);
                    v1567 = *(_DWORD *)(v39 + 4 * v1411);
                    v1506 = 8 * v576;
                    v1533 = 8 * *(_QWORD *)&v572[2 * v1411];
                    do
                    {
                      v1486 = v581;
                      v1496 = v579;
                      if (v1567 >= 1)
                      {
                        v582 = 0;
                        v583 = *(_QWORD *)(v573 + 8 * v1446);
                        v584 = *(_DWORD *)(v39 + 4 * v1446);
                        v585 = 8 * *(_QWORD *)&v572[2 * v1446];
                        v587 = v579;
                        v586 = v1506;
                        do
                        {
                          if (v584 >= 1)
                          {
                            v588 = 0;
                            v589 = *(_QWORD *)(v573 + 8 * v1516);
                            v590 = *(_DWORD *)(v39 + 4 * v1516);
                            v591 = 8 * *(_QWORD *)&v572[2 * v1516];
                            v592 = v586;
                            result = v587;
                            do
                            {
                              if (v590 >= 1)
                              {
                                v593 = 0;
                                v594 = *(_QWORD *)(v573 + 8 * v574);
                                v595 = *(_DWORD *)(v39 + 4 * v574);
                                v596 = *a2;
                                v597 = 8 * *(_QWORD *)&v572[2 * v574];
                                v598 = v592;
                                v599 = result;
                                do
                                {
                                  if (v595 >= 1)
                                  {
                                    v600 = *(_QWORD *)(v596 + 152);
                                    v601 = (_QWORD *)((char *)v37[19] + v598);
                                    v602 = v595;
                                    do
                                    {
                                      *(_BYTE *)(v600 + v599) = *v601 != 0;
                                      v600 += v594;
                                      v601 = (_QWORD *)((char *)v601 + v597);
                                      --v602;
                                    }
                                    while (v602);
                                  }
                                  v599 += v589;
                                  ++v593;
                                  v598 += v591;
                                }
                                while (v593 != v590);
                              }
                              result += v583;
                              ++v588;
                              v592 += v585;
                            }
                            while (v588 != v584);
                          }
                          v587 += v1550;
                          ++v582;
                          v586 += v1533;
                        }
                        while (v582 != v1567);
                      }
                      v579 = v1496 + v1466;
                      v581 = v1486 + 1;
                      v1506 += v1456;
                    }
                    while (v1486 + 1 != v1476);
                  }
                  v570 += v1431;
                }
                while ((unint64_t)v1436 > v1441 + v1431);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v7 = 0;
            v8 = **(_BYTE **)(*(_QWORD *)result + 152);
            v9 = v3[19];
            do
              *(_BYTE *)(v9 + v7++) = v8;
            while (*(_QWORD *)(*a2 + 48) > v7);
          }
          break;
        case 1:
          v49 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v49)
          {
            v50 = *(uint64_t **)(*(_QWORD *)result + 152);
            v51 = (_BYTE *)v3[19];
            v52 = 8 * v49;
            do
            {
              v53 = *v50++;
              *v51++ = v53;
              v52 -= 8;
            }
            while (v52);
          }
          break;
        case 2:
          v54 = *(int ***)result;
          v55 = **(int ***)result;
          switch(v54[1] - *v54)
          {
            case 1:
              if (*v55 >= 1)
              {
                v56 = 0;
                v57 = 0;
                v58 = v54[19];
                v59 = v3[19];
                do
                {
                  *(_BYTE *)(v59 + v56) = *(_QWORD *)&v58[2 * v57];
                  v57 += *(_QWORD *)v54[3];
                  ++v56;
                }
                while (**v54 > (int)v56);
              }
              break;
            case 2:
              v261 = *v55;
              if (*v55 >= 1)
              {
                v262 = 0;
                v263 = 0;
                v264 = 0;
                v265 = v54[19];
                v266 = v3[19];
                do
                {
                  v267 = v55[1];
                  if (v267 < 1)
                  {
                    v268 = v54[3];
                    v269 = *((_QWORD *)v268 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v266 + v263 + result) = *(_QWORD *)&v265[2 * v264];
                      v268 = v54[3];
                      v269 = *((_QWORD *)v268 + 1);
                      v264 += v269;
                      v55 = *v54;
                      v267 = (*v54)[1];
                      ++result;
                    }
                    while ((int)result < v267);
                    v261 = *v55;
                    v263 += result;
                  }
                  v264 = *(_QWORD *)v268 + v264 - v269 * v267;
                  ++v262;
                }
                while (v262 < v261);
              }
              break;
            case 3:
              v270 = *v55;
              if (*v55 >= 1)
              {
                v271 = 0;
                v272 = 0;
                v273 = 0;
                v274 = v54[19];
                v275 = v3[19];
                do
                {
                  v276 = v55[1];
                  if (v276 < 1)
                  {
                    v280 = v54[3];
                    v281 = *((_QWORD *)v280 + 1);
                  }
                  else
                  {
                    for (i = 0; i < v276; ++i)
                    {
                      v278 = v55[2];
                      if (v278 < 1)
                      {
                        v280 = v54[3];
                        result = *((_QWORD *)v280 + 2);
                      }
                      else
                      {
                        v279 = 0;
                        do
                        {
                          *(_BYTE *)(v275 + v272 + v279) = *(_QWORD *)&v274[2 * v273];
                          v280 = v54[3];
                          result = *((_QWORD *)v280 + 2);
                          v273 += result;
                          v55 = *v54;
                          v278 = (*v54)[2];
                          ++v279;
                        }
                        while ((int)v279 < v278);
                        v272 += v279;
                      }
                      v281 = *((_QWORD *)v280 + 1);
                      v273 = v281 + v273 - result * v278;
                      v276 = v55[1];
                    }
                    v270 = *v55;
                  }
                  v273 = *(_QWORD *)v280 + v273 - v281 * v276;
                  ++v271;
                }
                while (v271 < v270);
              }
              break;
            case 4:
              v282 = *v55;
              if (*v55 >= 1)
              {
                v283 = 0;
                v284 = 0;
                v285 = 0;
                v286 = v54[19];
                v287 = v3[19];
                do
                {
                  v288 = v55[1];
                  if (v288 < 1)
                  {
                    v294 = v54[3];
                    v296 = *((_QWORD *)v294 + 1);
                  }
                  else
                  {
                    for (j = 0; j < v288; ++j)
                    {
                      v290 = v55[2];
                      if (v290 < 1)
                      {
                        v294 = v54[3];
                        v295 = *((_QWORD *)v294 + 2);
                      }
                      else
                      {
                        for (k = 0; k < v290; ++k)
                        {
                          v292 = v55[3];
                          if (v292 < 1)
                          {
                            v294 = v54[3];
                            result = *((_QWORD *)v294 + 3);
                          }
                          else
                          {
                            v293 = 0;
                            do
                            {
                              *(_BYTE *)(v287 + v284 + v293) = *(_QWORD *)&v286[2 * v285];
                              v294 = v54[3];
                              result = *((_QWORD *)v294 + 3);
                              v285 += result;
                              v55 = *v54;
                              v292 = (*v54)[3];
                              ++v293;
                            }
                            while ((int)v293 < v292);
                            v284 += v293;
                          }
                          v295 = *((_QWORD *)v294 + 2);
                          v285 = v295 + v285 - result * v292;
                          v290 = v55[2];
                        }
                      }
                      v296 = *((_QWORD *)v294 + 1);
                      v285 = v296 + v285 - v295 * v290;
                      v288 = v55[1];
                    }
                    v282 = *v55;
                  }
                  v285 = *(_QWORD *)v294 + v285 - v296 * v288;
                  ++v283;
                }
                while (v283 < v282);
              }
              break;
            default:
              if (v3[6])
              {
                v252 = 0;
                v253 = v54[19];
                v254 = v3[19];
                do
                {
                  v255 = *v54;
                  v256 = (unint64_t)((char *)v54[1] - (char *)*v54) >> 2;
                  v257 = 0;
                  v258 = (v256 - 1);
                  if ((int)v256 - 1 >= 0)
                  {
                    v259 = v54[3];
                    LODWORD(result) = v252;
                    do
                    {
                      v260 = ldiv((int)result, v255[v258]);
                      result = v260.quot;
                      v257 += *(_QWORD *)&v259[2 * v258--] * v260.rem;
                    }
                    while (v258 != -1);
                  }
                  *(_BYTE *)(v254 + v252++) = *(_QWORD *)&v253[2 * v257];
                }
                while (v252 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v60 = *(int ***)result;
          v61 = (uint64_t *)(*(_QWORD *)result + 24);
          v62 = v3 + 3;
          v63 = **(_QWORD **)result;
          v64 = *(_QWORD *)(*(_QWORD *)result + 8);
          v65 = v64 - v63;
          switch((v64 - v63) >> 2)
          {
            case 1:
              v66 = (v65 << 30) - 0x100000000;
              v67 = *(_DWORD *)(v63 + (v66 >> 30));
              if (v67 >= 1)
              {
                v68 = v66 >> 29;
                v69 = *(_QWORD *)(*v61 + v68);
                v70 = *(_QWORD *)(*v62 + v68);
                v71 = (_BYTE *)v3[19];
                v72 = v60[19];
                v73 = 8 * v69;
                do
                {
                  *v71 = *(_QWORD *)v72;
                  v71 += v70;
                  v72 = (int *)((char *)v72 + v73);
                  --v67;
                }
                while (v67);
              }
              break;
            case 2:
              v730 = (v65 << 30) - 0x200000000;
              v731 = *(_DWORD *)(v63 + (v730 >> 30));
              if (v731 >= 1)
              {
                v732 = 0;
                v733 = 0;
                v734 = 0;
                v735 = v730 >> 29;
                v736 = *(_QWORD *)(*v61 + v735);
                v737 = *(_QWORD *)(*v62 + v735);
                v738 = 8 * v736;
                do
                {
                  result = *(_QWORD *)v5;
                  v739 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v740 = *(int *)((char *)*v60 + (v739 >> 30));
                  if (v740 >= 1)
                  {
                    v741 = v739 >> 29;
                    v742 = *(_QWORD *)((char *)v60[3] + v741);
                    v743 = *(_QWORD *)(*v62 + v741);
                    v744 = *(_QWORD *)(*a2 + 152);
                    result = *(_QWORD *)(result + 152) + v732;
                    v745 = 8 * v742;
                    do
                    {
                      *(_BYTE *)(v744 + v734) = *(_QWORD *)result;
                      v744 += v743;
                      result += v745;
                      --v740;
                    }
                    while (v740);
                  }
                  v734 += v737;
                  ++v733;
                  v732 += v738;
                }
                while (v733 != v731);
              }
              break;
            case 3:
              v746 = (v65 << 30) - 0x300000000;
              v747 = *(_DWORD *)(v63 + (v746 >> 30));
              if (v747 >= 1)
              {
                v748 = 0;
                v749 = 0;
                v750 = 0;
                v751 = v746 >> 29;
                v752 = *(_QWORD *)(*v61 + v751);
                v753 = *(_QWORD *)(*v62 + v751);
                v754 = 8 * v752;
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v755 = *(int *)((char *)*v60 + (result >> 30));
                  if (v755 >= 1)
                  {
                    v756 = 0;
                    v757 = result >> 29;
                    v758 = *(_QWORD *)((char *)v60[3] + v757);
                    result = *(_QWORD *)(*v62 + v757);
                    v759 = 8 * v758;
                    v760 = v748;
                    v761 = v750;
                    do
                    {
                      v762 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v763 = *(int *)((char *)*v60 + (v762 >> 30));
                      if (v763 >= 1)
                      {
                        v764 = v762 >> 29;
                        v765 = *(_QWORD *)((char *)v60[3] + v764);
                        v766 = *(_QWORD *)(*v62 + v764);
                        v767 = *(_QWORD *)(*a2 + 152);
                        v768 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + v760);
                        v769 = 8 * v765;
                        do
                        {
                          *(_BYTE *)(v767 + v761) = *v768;
                          v767 += v766;
                          v768 = (_QWORD *)((char *)v768 + v769);
                          --v763;
                        }
                        while (v763);
                      }
                      v761 += result;
                      ++v756;
                      v760 += v759;
                    }
                    while (v756 != v755);
                  }
                  v750 += v753;
                  ++v749;
                  v748 += v754;
                }
                while (v749 != v747);
              }
              break;
            case 4:
              goto LABEL_561;
            case 5:
              v770 = (v65 << 30) - 0x500000000;
              v771 = *(_DWORD *)(v63 + (v770 >> 30));
              if (v771 >= 1)
              {
                v772 = 0;
                v773 = 0;
                v774 = v770 >> 29;
                v775 = *(_QWORD *)(*v61 + v774);
                v776 = *(_QWORD *)(*v62 + v774);
                do
                {
                  v772 += v775;
                  v773 += v776;
                  --v771;
                }
                while (v771);
              }
              break;
            default:
              LODWORD(v709) = 1;
              v710 = -20;
              do
              {
                v709 = *(int *)(v64 + v710) * (uint64_t)(int)v709;
                v710 += 4;
              }
              while (v710);
              if (v60[6])
              {
                result = 0;
                v711 = *(_QWORD **)v5;
                v1553 = v62;
                v1519 = v709;
                do
                {
                  v712 = *v60;
                  v713 = (unint64_t)((char *)v60[1] - (char *)*v60) >> 2;
                  v714 = (v713 - 1);
                  v1570 = result;
                  v1536 = v711;
                  v715 = 0;
                  if ((int)v713 - 1 >= 0)
                  {
                    v716 = *v61;
                    do
                    {
                      v717 = ldiv((int)result, v712[v714]);
                      LODWORD(result) = v717.quot;
                      v715 += *(_QWORD *)(v716 + 8 * v714--) * v717.rem;
                    }
                    while (v714 != -1);
                  }
                  v718 = *(_QWORD *)*a2;
                  v719 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v718) >> 2;
                  v720 = *v1553;
                  v721 = 0;
                  v722 = (v719 - 1);
                  if ((int)v719 - 1 >= 0)
                  {
                    quot = v1570;
                    do
                    {
                      v724 = ldiv(quot, *(int *)(v718 + 4 * v722));
                      quot = v724.quot;
                      v721 += *(_QWORD *)(v720 + 8 * v722--) * v724.rem;
                    }
                    while (v722 != -1);
                  }
                  v711 = v1536;
                  v725 = ((v711[1] - *v711) << 30) - 0x500000000;
                  v726 = *(int *)((char *)v712 + (v725 >> 30));
                  if (v726 >= 1)
                  {
                    v727 = v725 >> 29;
                    v728 = *(_QWORD *)(*v61 + v727);
                    v729 = *(_QWORD *)(v720 + v727);
                    do
                    {
                      v715 += v728;
                      v721 += v729;
                      --v726;
                    }
                    while (v726);
                    v711 = *(_QWORD **)v5;
                  }
                  result = v1570 + v1519;
                }
                while (v711[6] > (unint64_t)(v1570 + v1519));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v10 = v3[6];
          if (v10)
          {
            v11 = **(_DWORD **)(*(_QWORD *)result + 152);
            v12 = (_DWORD *)v3[19];
            do
            {
              *v12++ = v11;
              --v10;
            }
            while (v10);
          }
          break;
        case 1:
          v74 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v74)
          {
            v75 = *(uint64_t **)(*(_QWORD *)result + 152);
            v76 = (_DWORD *)v3[19];
            v77 = 8 * v74;
            do
            {
              v78 = *v75++;
              *v76++ = v78;
              v77 -= 8;
            }
            while (v77);
          }
          break;
        case 2:
          v79 = *(int ***)result;
          v80 = **(int ***)result;
          v81 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v80;
          switch(v81 >> 2)
          {
            case 1:
              if (*v80 >= 1)
              {
                v82 = 0;
                v83 = v79[19];
                v84 = v3[19];
                v85 = 8 * *(_QWORD *)v79[3];
                do
                {
                  *(_DWORD *)(v84 + 4 * v82) = *(_QWORD *)v83;
                  v83 = (int *)((char *)v83 + v85);
                  ++v82;
                }
                while (*v80 > (int)v82);
              }
              break;
            case 2:
              v306 = *v80;
              if (*v80 >= 1)
              {
                v307 = 0;
                v308 = 0;
                v309 = 0;
                v310 = v79[19];
                v311 = v3[19];
                v312 = v79[3];
                v313 = *(_QWORD *)v312;
                v314 = *((_QWORD *)v312 + 1);
                v315 = v80[1];
                do
                {
                  if (v315 >= 1)
                  {
                    v316 = 0;
                    do
                    {
                      *(_DWORD *)(v311 + 4 * v308 + 4 * v316) = *(_QWORD *)&v310[2 * v309];
                      v309 += v314;
                      v315 = v80[1];
                      ++v316;
                    }
                    while ((int)v316 < v315);
                    v306 = *v80;
                    v308 += v316;
                  }
                  v309 = v309 + v313 - v314 * v315;
                  ++v307;
                }
                while (v307 < v306);
              }
              break;
            case 3:
              result = *v80;
              if ((int)result >= 1)
              {
                v317 = 0;
                v318 = 0;
                v319 = 0;
                v320 = v79[19];
                v321 = v3[19];
                v322 = v79[3];
                v323 = *(_QWORD *)v322;
                v324 = *((_QWORD *)v322 + 1);
                v325 = v80[1];
                do
                {
                  if (v325 >= 1)
                  {
                    v326 = 0;
                    v327 = v79[3];
                    v328 = *((_QWORD *)v322 + 2);
                    v329 = v80[2];
                    do
                    {
                      if (v329 >= 1)
                      {
                        v330 = 0;
                        v331 = *((_QWORD *)v327 + 2);
                        do
                        {
                          *(_DWORD *)(v321 + 4 * v318 + 4 * v330) = *(_QWORD *)&v320[2 * v319];
                          v319 += v331;
                          v329 = v80[2];
                          ++v330;
                        }
                        while ((int)v330 < v329);
                        v325 = v80[1];
                        v318 += v330;
                      }
                      v319 = v319 + v324 - v328 * v329;
                      ++v326;
                    }
                    while (v326 < v325);
                    result = *v80;
                  }
                  v319 = v319 + v323 - v324 * v325;
                  ++v317;
                }
                while (v317 < (int)result);
              }
              break;
            case 4:
              v332 = *v80;
              if (*v80 >= 1)
              {
                v333 = 0;
                v334 = 0;
                v335 = 0;
                v336 = v79[19];
                v337 = v3[19];
                v338 = v79[3];
                v339 = *(_QWORD *)v338;
                v340 = *((_QWORD *)v338 + 1);
                v341 = v80[1];
                do
                {
                  if (v341 >= 1)
                  {
                    v342 = 0;
                    v343 = v79[3];
                    v344 = *((_QWORD *)v338 + 2);
                    v345 = v80[2];
                    do
                    {
                      if (v345 >= 1)
                      {
                        v346 = 0;
                        v347 = v79[3];
                        v348 = *((_QWORD *)v343 + 2);
                        v349 = *((_QWORD *)v343 + 3);
                        v350 = v80[3];
                        do
                        {
                          if (v350 >= 1)
                          {
                            v351 = 0;
                            v352 = *((_QWORD *)v347 + 3);
                            do
                            {
                              *(_DWORD *)(v337 + 4 * v334 + 4 * v351) = *(_QWORD *)&v336[2 * v335];
                              v335 += v352;
                              v350 = v80[3];
                              ++v351;
                            }
                            while ((int)v351 < v350);
                            v345 = v80[2];
                            v334 += v351;
                          }
                          v335 = v335 + v348 - v349 * v350;
                          ++v346;
                        }
                        while (v346 < v345);
                        v341 = v80[1];
                      }
                      v335 = v335 + v340 - v344 * v345;
                      ++v342;
                    }
                    while (v342 < v341);
                    v332 = *v80;
                  }
                  result = v341;
                  v335 = v335 + v339 - v340 * v341;
                  ++v333;
                }
                while (v333 < v332);
              }
              break;
            default:
              v297 = v3[6];
              if (v297)
              {
                v298 = 0;
                v299 = v79[19];
                v300 = v3[19];
                v301 = ((unint64_t)v81 >> 2) - 1;
                v302 = v79[3];
                do
                {
                  v303 = 0;
                  if ((v301 & 0x80000000) == 0)
                  {
                    v304 = v301;
                    LODWORD(result) = v298;
                    do
                    {
                      v305 = ldiv((int)result, v80[v304]);
                      result = v305.quot;
                      v303 += *(_QWORD *)&v302[2 * v304--] * v305.rem;
                    }
                    while (v304 != -1);
                  }
                  *(_DWORD *)(v300 + 4 * v298++) = *(_QWORD *)&v299[2 * v303];
                }
                while (v298 != v297);
              }
              break;
          }
          break;
        case 3:
          v86 = *(unsigned int ***)result;
          v88 = **(_QWORD **)result;
          v87 = *(_QWORD *)(*(_QWORD *)result + 8);
          v89 = v87 - v88;
          switch((v87 - v88) >> 2)
          {
            case 1:
              v90 = (v89 << 30) - 0x100000000;
              v91 = *(_DWORD *)(v88 + (v90 >> 30));
              if (v91 >= 1)
              {
                v92 = v90 >> 29;
                v93 = *(_QWORD *)((char *)v86[3] + v92);
                v94 = *(_QWORD *)(v3[3] + v92);
                v95 = (_DWORD *)v3[19];
                v96 = v86[19];
                v97 = 4 * v94;
                v98 = 8 * v93;
                do
                {
                  *v95 = *(_QWORD *)v96;
                  v95 = (_DWORD *)((char *)v95 + v97);
                  v96 = (unsigned int *)((char *)v96 + v98);
                  --v91;
                }
                while (v91);
              }
              break;
            case 2:
              v813 = (v89 << 30) - 0x200000000;
              v814 = *(_DWORD *)(v88 + (v813 >> 30));
              if (v814 >= 1)
              {
                v815 = 0;
                v816 = 0;
                v817 = 0;
                v818 = v86[3];
                v819 = v813 >> 29;
                v820 = *(_QWORD *)((char *)v818 + v819);
                v821 = v3[3];
                v822 = (v89 << 30) - 0x100000000;
                v823 = *(_QWORD *)((char *)v818 + (v822 >> 29));
                v824 = *(_QWORD *)(v821 + (v822 >> 29));
                v825 = v822 >> 32;
                v826 = 4 * *(_QWORD *)(v821 + v819);
                v827 = 4 * v824;
                v828 = 8 * v820;
                v829 = 8 * v823;
                do
                {
                  result = *(unsigned int *)(v88 + 4 * v825);
                  if ((int)result >= 1)
                  {
                    v830 = (_DWORD *)(v3[19] + v816);
                    v831 = (_QWORD *)((char *)v86[19] + v815);
                    do
                    {
                      *v830 = *v831;
                      v830 = (_DWORD *)((char *)v830 + v827);
                      v831 = (_QWORD *)((char *)v831 + v829);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  ++v817;
                  v816 += v826;
                  v815 += v828;
                }
                while (v817 != v814);
              }
              break;
            case 3:
              v832 = (v89 << 30) - 0x300000000;
              v833 = *(_DWORD *)(v88 + (v832 >> 30));
              if (v833 >= 1)
              {
                v834 = 0;
                v835 = 0;
                v836 = 0;
                v837 = v89 << 30;
                v838 = v86[3];
                v839 = v832 >> 29;
                v840 = *(_QWORD *)((char *)v838 + v839);
                v841 = v3[3];
                v842 = *(_QWORD *)(v841 + v839);
                v843 = (v837 - 0x200000000) >> 29;
                v844 = *(_QWORD *)((char *)v838 + v843);
                v845 = (v837 - 0x200000000) >> 32;
                v846 = (v837 - 0x100000000) >> 32;
                v847 = 4 * v842;
                v848 = 4 * *(_QWORD *)(v841 + v843);
                result = 8 * v840;
                v849 = 8 * v844;
                do
                {
                  v850 = *(_DWORD *)(v88 + 4 * v845);
                  if (v850 >= 1)
                  {
                    v851 = 0;
                    v852 = (_QWORD *)*a2;
                    v853 = 4 * *(_QWORD *)(v841 + 8 * v846);
                    v854 = 8 * *(_QWORD *)&v838[2 * v846];
                    v855 = v834;
                    v856 = v835;
                    do
                    {
                      v857 = *(_DWORD *)(v88 + 4 * v846);
                      if (v857 >= 1)
                      {
                        v858 = (_DWORD *)(v852[19] + v856);
                        v859 = (_QWORD *)((char *)v86[19] + v855);
                        do
                        {
                          *v858 = *v859;
                          v858 = (_DWORD *)((char *)v858 + v853);
                          v859 = (_QWORD *)((char *)v859 + v854);
                          --v857;
                        }
                        while (v857);
                      }
                      ++v851;
                      v856 += v848;
                      v855 += v849;
                    }
                    while (v851 != v850);
                  }
                  ++v836;
                  v835 += v847;
                  v834 += result;
                }
                while (v836 != v833);
              }
              break;
            case 4:
              v860 = (v89 << 30) - 0x400000000;
              v1572 = *(_DWORD *)(v88 + (v860 >> 30));
              if (v1572 >= 1)
              {
                v861 = 0;
                v862 = 0;
                v863 = 0;
                v864 = v89 << 30;
                v865 = v86[3];
                v866 = v860 >> 29;
                v867 = v3[3];
                v1555 = (v864 - 0x300000000) >> 32;
                v868 = (v864 - 0x300000000) >> 29;
                v869 = *(_QWORD *)((char *)v865 + v868);
                v870 = *(_QWORD *)(v867 + v868);
                v871 = (v864 - 0x200000000) >> 32;
                v872 = (v864 - 0x100000000) >> 32;
                v1538 = 4 * *(_QWORD *)(v867 + v866);
                result = 4 * v870;
                v1521 = 8 * *(_QWORD *)((char *)v865 + v866);
                v873 = 8 * v869;
                do
                {
                  v874 = *(_DWORD *)(v88 + 4 * v1555);
                  if (v874 >= 1)
                  {
                    v875 = 0;
                    v876 = 4 * *(_QWORD *)(v867 + 8 * v871);
                    v877 = 8 * *(_QWORD *)&v865[2 * v871];
                    v878 = v861;
                    v879 = v862;
                    do
                    {
                      v880 = *(_DWORD *)(v88 + 4 * v871);
                      if (v880 >= 1)
                      {
                        v881 = 0;
                        v882 = (_QWORD *)*a2;
                        v883 = 4 * *(_QWORD *)(v867 + 8 * v872);
                        v884 = 8 * *(_QWORD *)&v865[2 * v872];
                        v885 = v878;
                        v886 = v879;
                        do
                        {
                          v887 = *(_DWORD *)(v88 + 4 * v872);
                          if (v887 >= 1)
                          {
                            v888 = (_DWORD *)(v882[19] + v886);
                            v889 = (_QWORD *)((char *)v86[19] + v885);
                            do
                            {
                              *v888 = *v889;
                              v888 = (_DWORD *)((char *)v888 + v883);
                              v889 = (_QWORD *)((char *)v889 + v884);
                              --v887;
                            }
                            while (v887);
                          }
                          ++v881;
                          v886 += v876;
                          v885 += v877;
                        }
                        while (v881 != v880);
                      }
                      ++v875;
                      v879 += result;
                      v878 += v873;
                    }
                    while (v875 != v874);
                  }
                  ++v863;
                  v862 += v1538;
                  v861 += v1521;
                }
                while (v863 != v1572);
              }
              break;
            case 5:
              v890 = (v89 << 30) - 0x500000000;
              v1479 = *(_DWORD *)(v88 + (v890 >> 30));
              if (v1479 >= 1)
              {
                v1499 = 0;
                v1509 = 0;
                v1489 = 0;
                v891 = v89 << 30;
                v892 = v86[3];
                v893 = v890 >> 29;
                v894 = v3[3];
                v1469 = (v891 - 0x400000000) >> 32;
                v895 = (v891 - 0x400000000) >> 29;
                result = *(_QWORD *)((char *)v892 + v895);
                v1556 = (v891 - 0x300000000) >> 32;
                v896 = (v891 - 0x200000000) >> 32;
                v897 = (v891 - 0x100000000) >> 32;
                v1459 = 4 * *(_QWORD *)(v894 + v893);
                v1539 = 4 * *(_QWORD *)(v894 + v895);
                v1449 = 8 * *(_QWORD *)((char *)v892 + v893);
                v1522 = 8 * result;
                do
                {
                  v1573 = *(_DWORD *)(v88 + 4 * v1469);
                  if (v1573 >= 1)
                  {
                    v898 = 0;
                    v899 = 4 * *(_QWORD *)(v894 + 8 * v1556);
                    v900 = 8 * *(_QWORD *)&v892[2 * v1556];
                    v902 = v1499;
                    v901 = v1509;
                    do
                    {
                      v903 = *(_DWORD *)(v88 + 4 * v1556);
                      if (v903 >= 1)
                      {
                        v904 = 0;
                        v905 = 4 * *(_QWORD *)(v894 + 8 * v896);
                        v906 = 8 * *(_QWORD *)&v892[2 * v896];
                        v907 = v901;
                        v908 = v902;
                        do
                        {
                          v909 = *(_DWORD *)(v88 + 4 * v896);
                          if (v909 >= 1)
                          {
                            v910 = 0;
                            result = *a2;
                            v911 = 4 * *(_QWORD *)(v894 + 8 * v897);
                            v912 = 8 * *(_QWORD *)&v892[2 * v897];
                            v913 = v907;
                            v914 = v908;
                            do
                            {
                              v915 = *(_DWORD *)(v88 + 4 * v897);
                              if (v915 >= 1)
                              {
                                v916 = (_DWORD *)(*(_QWORD *)(result + 152) + v914);
                                v917 = (_QWORD *)((char *)v86[19] + v913);
                                do
                                {
                                  *v916 = *v917;
                                  v916 = (_DWORD *)((char *)v916 + v911);
                                  v917 = (_QWORD *)((char *)v917 + v912);
                                  --v915;
                                }
                                while (v915);
                              }
                              ++v910;
                              v914 += v905;
                              v913 += v906;
                            }
                            while (v910 != v909);
                          }
                          ++v904;
                          v908 += v899;
                          v907 += v900;
                        }
                        while (v904 != v903);
                      }
                      ++v898;
                      v902 += v1539;
                      v901 += v1522;
                    }
                    while (v898 != v1573);
                  }
                  v1499 += v1459;
                  v1509 += v1449;
                  ++v1489;
                }
                while (v1489 != v1479);
              }
              break;
            default:
              LODWORD(v777) = 1;
              v778 = -20;
              do
              {
                v777 = *(int *)(v87 + v778) * (uint64_t)(int)v777;
                v778 += 4;
              }
              while (v778);
              v1432 = v86[6];
              if (v1432)
              {
                result = 0;
                v1458 = *v3;
                v779 = (v89 << 30) - 0x500000000;
                v1422 = (v89 >> 2) - 1;
                v780 = v86[3];
                v1417 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1412 = v779 >> 32;
                v781 = v3[3];
                v1468 = (uint64_t)((v89 << 30) - 0x400000000) >> 32;
                v1554 = (uint64_t)((v89 << 30) - 0x300000000) >> 32;
                v782 = (uint64_t)((v89 << 30) - 0x200000000) >> 32;
                v783 = (uint64_t)((v89 << 30) - 0x100000000) >> 32;
                v1442 = 8 * *(_QWORD *)((char *)v780 + (v779 >> 29));
                v1448 = 4 * *(_QWORD *)(v781 + (v779 >> 29));
                v1427 = v777;
                do
                {
                  v784 = v1422;
                  v1437 = result;
                  v785 = 0;
                  if ((v1422 & 0x80000000) != 0)
                  {
                    v786 = v1417;
                  }
                  else
                  {
                    v786 = v1417;
                    do
                    {
                      v787 = ldiv((int)result, *(int *)(v88 + 4 * v784));
                      LODWORD(result) = v787.quot;
                      v785 += *(_QWORD *)&v780[2 * v784--] * v787.rem;
                    }
                    while (v784 != -1);
                  }
                  v788 = 0;
                  if ((v786 & 0x80000000) == 0)
                  {
                    v789 = v1437;
                    do
                    {
                      v790 = ldiv(v789, *(int *)(v1458 + 4 * v786));
                      v789 = v790.quot;
                      v788 += *(_QWORD *)(v781 + 8 * v786--) * v790.rem;
                    }
                    while (v786 != -1);
                  }
                  v1478 = *(_DWORD *)(v88 + 4 * v1412);
                  if (v1478 >= 1)
                  {
                    v791 = 0;
                    v1508 = 4 * v788;
                    v1537 = 4 * *(_QWORD *)(v781 + 8 * v1468);
                    v1498 = 8 * v785;
                    v1520 = 8 * *(_QWORD *)&v780[2 * v1468];
                    do
                    {
                      v1488 = v791;
                      v1571 = *(_DWORD *)(v88 + 4 * v1468);
                      if (v1571 >= 1)
                      {
                        v792 = 0;
                        v793 = 4 * *(_QWORD *)(v781 + 8 * v1554);
                        v794 = 8 * *(_QWORD *)&v780[2 * v1554];
                        v796 = v1498;
                        v795 = v1508;
                        do
                        {
                          v797 = *(_DWORD *)(v88 + 4 * v1554);
                          if (v797 >= 1)
                          {
                            v798 = 0;
                            v799 = 4 * *(_QWORD *)(v781 + 8 * v782);
                            v800 = 8 * *(_QWORD *)&v780[2 * v782];
                            v801 = v796;
                            v802 = v795;
                            do
                            {
                              v803 = *(_DWORD *)(v88 + 4 * v782);
                              if (v803 >= 1)
                              {
                                v804 = 0;
                                v805 = (_QWORD *)*a2;
                                v806 = 4 * *(_QWORD *)(v781 + 8 * v783);
                                v807 = 8 * *(_QWORD *)&v780[2 * v783];
                                v808 = v801;
                                v809 = v802;
                                do
                                {
                                  v810 = *(_DWORD *)(v88 + 4 * v783);
                                  if (v810 >= 1)
                                  {
                                    v811 = (_DWORD *)(v805[19] + v809);
                                    v812 = (_QWORD *)((char *)v86[19] + v808);
                                    do
                                    {
                                      *v811 = *v812;
                                      v811 = (_DWORD *)((char *)v811 + v806);
                                      v812 = (_QWORD *)((char *)v812 + v807);
                                      --v810;
                                    }
                                    while (v810);
                                  }
                                  ++v804;
                                  v809 += v799;
                                  v808 += v800;
                                }
                                while (v804 != v803);
                              }
                              ++v798;
                              v802 += v793;
                              v801 += v794;
                            }
                            while (v798 != v797);
                          }
                          ++v792;
                          v795 += v1537;
                          v796 += v1520;
                        }
                        while (v792 != v1571);
                      }
                      v791 = v1488 + 1;
                      v1508 += v1448;
                      v1498 += v1442;
                    }
                    while (v1488 + 1 != v1478);
                  }
                  result = v1437 + v1427;
                }
                while ((unint64_t)v1432 > v1437 + v1427);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v3[6])
          {
            v13 = 0;
            v14 = **(_BYTE **)(*(_QWORD *)result + 152);
            v15 = v3[19];
            do
              *(_BYTE *)(v15 + v13++) = v14;
            while (*(_QWORD *)(*a2 + 48) > v13);
          }
          break;
        case 1:
          v99 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v99)
          {
            v100 = *(uint64_t **)(*(_QWORD *)result + 152);
            v101 = (_BYTE *)v3[19];
            v102 = 8 * v99;
            do
            {
              v103 = *v100++;
              *v101++ = v103;
              v102 -= 8;
            }
            while (v102);
          }
          break;
        case 2:
          v104 = *(int ***)result;
          v105 = **(int ***)result;
          switch(v104[1] - *v104)
          {
            case 1:
              if (*v105 >= 1)
              {
                v106 = 0;
                v107 = 0;
                v108 = v104[19];
                v109 = v3[19];
                do
                {
                  *(_BYTE *)(v109 + v106) = *(_QWORD *)&v108[2 * v107];
                  v107 += *(_QWORD *)v104[3];
                  ++v106;
                }
                while (**v104 > (int)v106);
              }
              break;
            case 2:
              v362 = *v105;
              if (*v105 >= 1)
              {
                v363 = 0;
                v364 = 0;
                v365 = 0;
                v366 = v104[19];
                v367 = v3[19];
                do
                {
                  v368 = v105[1];
                  if (v368 < 1)
                  {
                    v369 = v104[3];
                    v370 = *((_QWORD *)v369 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v367 + v364 + result) = *(_QWORD *)&v366[2 * v365];
                      v369 = v104[3];
                      v370 = *((_QWORD *)v369 + 1);
                      v365 += v370;
                      v105 = *v104;
                      v368 = (*v104)[1];
                      ++result;
                    }
                    while ((int)result < v368);
                    v362 = *v105;
                    v364 += result;
                  }
                  v365 = *(_QWORD *)v369 + v365 - v370 * v368;
                  ++v363;
                }
                while (v363 < v362);
              }
              break;
            case 3:
              v371 = *v105;
              if (*v105 >= 1)
              {
                v372 = 0;
                v373 = 0;
                v374 = 0;
                v375 = v104[19];
                v376 = v3[19];
                do
                {
                  v377 = v105[1];
                  if (v377 < 1)
                  {
                    v381 = v104[3];
                    v382 = *((_QWORD *)v381 + 1);
                  }
                  else
                  {
                    for (m = 0; m < v377; ++m)
                    {
                      v379 = v105[2];
                      if (v379 < 1)
                      {
                        v381 = v104[3];
                        result = *((_QWORD *)v381 + 2);
                      }
                      else
                      {
                        v380 = 0;
                        do
                        {
                          *(_BYTE *)(v376 + v373 + v380) = *(_QWORD *)&v375[2 * v374];
                          v381 = v104[3];
                          result = *((_QWORD *)v381 + 2);
                          v374 += result;
                          v105 = *v104;
                          v379 = (*v104)[2];
                          ++v380;
                        }
                        while ((int)v380 < v379);
                        v373 += v380;
                      }
                      v382 = *((_QWORD *)v381 + 1);
                      v374 = v382 + v374 - result * v379;
                      v377 = v105[1];
                    }
                    v371 = *v105;
                  }
                  v374 = *(_QWORD *)v381 + v374 - v382 * v377;
                  ++v372;
                }
                while (v372 < v371);
              }
              break;
            case 4:
              v383 = *v105;
              if (*v105 >= 1)
              {
                v384 = 0;
                v385 = 0;
                v386 = 0;
                v387 = v104[19];
                v388 = v3[19];
                do
                {
                  v389 = v105[1];
                  if (v389 < 1)
                  {
                    v395 = v104[3];
                    v397 = *((_QWORD *)v395 + 1);
                  }
                  else
                  {
                    for (n = 0; n < v389; ++n)
                    {
                      v391 = v105[2];
                      if (v391 < 1)
                      {
                        v395 = v104[3];
                        v396 = *((_QWORD *)v395 + 2);
                      }
                      else
                      {
                        for (ii = 0; ii < v391; ++ii)
                        {
                          v393 = v105[3];
                          if (v393 < 1)
                          {
                            v395 = v104[3];
                            result = *((_QWORD *)v395 + 3);
                          }
                          else
                          {
                            v394 = 0;
                            do
                            {
                              *(_BYTE *)(v388 + v385 + v394) = *(_QWORD *)&v387[2 * v386];
                              v395 = v104[3];
                              result = *((_QWORD *)v395 + 3);
                              v386 += result;
                              v105 = *v104;
                              v393 = (*v104)[3];
                              ++v394;
                            }
                            while ((int)v394 < v393);
                            v385 += v394;
                          }
                          v396 = *((_QWORD *)v395 + 2);
                          v386 = v396 + v386 - result * v393;
                          v391 = v105[2];
                        }
                      }
                      v397 = *((_QWORD *)v395 + 1);
                      v386 = v397 + v386 - v396 * v391;
                      v389 = v105[1];
                    }
                    v383 = *v105;
                  }
                  v386 = *(_QWORD *)v395 + v386 - v397 * v389;
                  ++v384;
                }
                while (v384 < v383);
              }
              break;
            default:
              if (v3[6])
              {
                v353 = 0;
                v354 = v104[19];
                v355 = v3[19];
                do
                {
                  v356 = *v104;
                  v357 = (unint64_t)((char *)v104[1] - (char *)*v104) >> 2;
                  v358 = 0;
                  v359 = (v357 - 1);
                  if ((int)v357 - 1 >= 0)
                  {
                    v360 = v104[3];
                    LODWORD(result) = v353;
                    do
                    {
                      v361 = ldiv((int)result, v356[v359]);
                      result = v361.quot;
                      v358 += *(_QWORD *)&v360[2 * v359--] * v361.rem;
                    }
                    while (v359 != -1);
                  }
                  *(_BYTE *)(v355 + v353++) = *(_QWORD *)&v354[2 * v358];
                }
                while (v353 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v110 = *(int ***)result;
          v111 = (uint64_t *)(*(_QWORD *)result + 24);
          v112 = v3 + 3;
          v113 = **(_QWORD **)result;
          v114 = *(_QWORD *)(*(_QWORD *)result + 8);
          v115 = v114 - v113;
          switch((v114 - v113) >> 2)
          {
            case 1:
              v116 = (v115 << 30) - 0x100000000;
              v117 = *(_DWORD *)(v113 + (v116 >> 30));
              if (v117 >= 1)
              {
                v118 = v116 >> 29;
                v119 = *(_QWORD *)(*v111 + v118);
                v120 = *(_QWORD *)(*v112 + v118);
                v121 = (_BYTE *)v3[19];
                v122 = v110[19];
                v123 = 8 * v119;
                do
                {
                  *v121 = *(_QWORD *)v122;
                  v121 += v120;
                  v122 = (int *)((char *)v122 + v123);
                  --v117;
                }
                while (v117);
              }
              break;
            case 2:
              v939 = (v115 << 30) - 0x200000000;
              v940 = *(_DWORD *)(v113 + (v939 >> 30));
              if (v940 >= 1)
              {
                v941 = 0;
                v942 = 0;
                v943 = 0;
                v944 = v939 >> 29;
                v945 = *(_QWORD *)(*v111 + v944);
                v946 = *(_QWORD *)(*v112 + v944);
                v947 = 8 * v945;
                do
                {
                  result = *(_QWORD *)v5;
                  v948 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v949 = *(int *)((char *)*v110 + (v948 >> 30));
                  if (v949 >= 1)
                  {
                    v950 = v948 >> 29;
                    v951 = *(_QWORD *)((char *)v110[3] + v950);
                    v952 = *(_QWORD *)(*v112 + v950);
                    v953 = *(_QWORD *)(*a2 + 152);
                    result = *(_QWORD *)(result + 152) + v941;
                    v954 = 8 * v951;
                    do
                    {
                      *(_BYTE *)(v953 + v943) = *(_QWORD *)result;
                      v953 += v952;
                      result += v954;
                      --v949;
                    }
                    while (v949);
                  }
                  v943 += v946;
                  ++v942;
                  v941 += v947;
                }
                while (v942 != v940);
              }
              break;
            case 3:
              v955 = (v115 << 30) - 0x300000000;
              v956 = *(_DWORD *)(v113 + (v955 >> 30));
              if (v956 >= 1)
              {
                v957 = 0;
                v958 = 0;
                v959 = 0;
                v960 = v955 >> 29;
                v961 = *(_QWORD *)(*v111 + v960);
                v962 = *(_QWORD *)(*v112 + v960);
                v963 = 8 * v961;
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v964 = *(int *)((char *)*v110 + (result >> 30));
                  if (v964 >= 1)
                  {
                    v965 = 0;
                    v966 = result >> 29;
                    v967 = *(_QWORD *)((char *)v110[3] + v966);
                    result = *(_QWORD *)(*v112 + v966);
                    v968 = 8 * v967;
                    v969 = v957;
                    v970 = v959;
                    do
                    {
                      v971 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v972 = *(int *)((char *)*v110 + (v971 >> 30));
                      if (v972 >= 1)
                      {
                        v973 = v971 >> 29;
                        v974 = *(_QWORD *)((char *)v110[3] + v973);
                        v975 = *(_QWORD *)(*v112 + v973);
                        v976 = *(_QWORD *)(*a2 + 152);
                        v977 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + v969);
                        v978 = 8 * v974;
                        do
                        {
                          *(_BYTE *)(v976 + v970) = *v977;
                          v976 += v975;
                          v977 = (_QWORD *)((char *)v977 + v978);
                          --v972;
                        }
                        while (v972);
                      }
                      v970 += result;
                      ++v965;
                      v969 += v968;
                    }
                    while (v965 != v964);
                  }
                  v959 += v962;
                  ++v958;
                  v957 += v963;
                }
                while (v958 != v956);
              }
              break;
            case 4:
LABEL_561:
              break;
            case 5:
              v979 = (v115 << 30) - 0x500000000;
              v980 = *(_DWORD *)(v113 + (v979 >> 30));
              if (v980 >= 1)
              {
                v981 = 0;
                v982 = 0;
                v983 = v979 >> 29;
                v984 = *(_QWORD *)(*v111 + v983);
                v985 = *(_QWORD *)(*v112 + v983);
                do
                {
                  v981 += v984;
                  v982 += v985;
                  --v980;
                }
                while (v980);
              }
              break;
            default:
              LODWORD(v918) = 1;
              v919 = -20;
              do
              {
                v918 = *(int *)(v114 + v919) * (uint64_t)(int)v918;
                v919 += 4;
              }
              while (v919);
              if (v110[6])
              {
                result = 0;
                v920 = *(_QWORD **)v5;
                v1557 = v112;
                v1523 = v918;
                do
                {
                  v921 = *v110;
                  v922 = (unint64_t)((char *)v110[1] - (char *)*v110) >> 2;
                  v923 = (v922 - 1);
                  v1574 = result;
                  v1540 = v920;
                  v924 = 0;
                  if ((int)v922 - 1 >= 0)
                  {
                    v925 = *v111;
                    do
                    {
                      v926 = ldiv((int)result, v921[v923]);
                      LODWORD(result) = v926.quot;
                      v924 += *(_QWORD *)(v925 + 8 * v923--) * v926.rem;
                    }
                    while (v923 != -1);
                  }
                  v927 = *(_QWORD *)*a2;
                  v928 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v927) >> 2;
                  v929 = *v1557;
                  v930 = 0;
                  v931 = (v928 - 1);
                  if ((int)v928 - 1 >= 0)
                  {
                    v932 = v1574;
                    do
                    {
                      v933 = ldiv(v932, *(int *)(v927 + 4 * v931));
                      v932 = v933.quot;
                      v930 += *(_QWORD *)(v929 + 8 * v931--) * v933.rem;
                    }
                    while (v931 != -1);
                  }
                  v920 = v1540;
                  v934 = ((v920[1] - *v920) << 30) - 0x500000000;
                  v935 = *(int *)((char *)v921 + (v934 >> 30));
                  if (v935 >= 1)
                  {
                    v936 = v934 >> 29;
                    v937 = *(_QWORD *)(*v111 + v936);
                    v938 = *(_QWORD *)(v929 + v936);
                    do
                    {
                      v924 += v937;
                      v930 += v938;
                      --v935;
                    }
                    while (v935);
                    v920 = *(_QWORD **)v5;
                  }
                  result = v1574 + v1523;
                }
                while (v920[6] > (unint64_t)(v1574 + v1523));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v16 = v3[6];
          if (v16)
          {
            v17 = **(_DWORD **)(*(_QWORD *)result + 152);
            v18 = (_DWORD *)v3[19];
            do
            {
              *v18++ = v17;
              --v16;
            }
            while (v16);
          }
          break;
        case 1:
          v124 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v124)
          {
            v125 = *(uint64_t **)(*(_QWORD *)result + 152);
            v126 = (_DWORD *)v3[19];
            v127 = 8 * v124;
            do
            {
              v128 = *v125++;
              *v126++ = v128;
              v127 -= 8;
            }
            while (v127);
          }
          break;
        case 2:
          v129 = *(int ***)result;
          v130 = **(int ***)result;
          v131 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v130;
          switch(v131 >> 2)
          {
            case 1:
              if (*v130 >= 1)
              {
                v132 = 0;
                v133 = v129[19];
                v134 = v3[19];
                v135 = 8 * *(_QWORD *)v129[3];
                do
                {
                  *(_DWORD *)(v134 + 4 * v132) = *(_QWORD *)v133;
                  v133 = (int *)((char *)v133 + v135);
                  ++v132;
                }
                while (*v130 > (int)v132);
              }
              break;
            case 2:
              v407 = *v130;
              if (*v130 >= 1)
              {
                v408 = 0;
                v409 = 0;
                v410 = 0;
                v411 = v129[19];
                v412 = v3[19];
                v413 = v129[3];
                v414 = *(_QWORD *)v413;
                v415 = *((_QWORD *)v413 + 1);
                v416 = v130[1];
                do
                {
                  if (v416 >= 1)
                  {
                    v417 = 0;
                    do
                    {
                      *(_DWORD *)(v412 + 4 * v409 + 4 * v417) = *(_QWORD *)&v411[2 * v410];
                      v410 += v415;
                      v416 = v130[1];
                      ++v417;
                    }
                    while ((int)v417 < v416);
                    v407 = *v130;
                    v409 += v417;
                  }
                  v410 = v410 + v414 - v415 * v416;
                  ++v408;
                }
                while (v408 < v407);
              }
              break;
            case 3:
              result = *v130;
              if ((int)result >= 1)
              {
                v418 = 0;
                v419 = 0;
                v420 = 0;
                v421 = v129[19];
                v422 = v3[19];
                v423 = v129[3];
                v424 = *(_QWORD *)v423;
                v425 = *((_QWORD *)v423 + 1);
                v426 = v130[1];
                do
                {
                  if (v426 >= 1)
                  {
                    v427 = 0;
                    v428 = v129[3];
                    v429 = *((_QWORD *)v423 + 2);
                    v430 = v130[2];
                    do
                    {
                      if (v430 >= 1)
                      {
                        v431 = 0;
                        v432 = *((_QWORD *)v428 + 2);
                        do
                        {
                          *(_DWORD *)(v422 + 4 * v419 + 4 * v431) = *(_QWORD *)&v421[2 * v420];
                          v420 += v432;
                          v430 = v130[2];
                          ++v431;
                        }
                        while ((int)v431 < v430);
                        v426 = v130[1];
                        v419 += v431;
                      }
                      v420 = v420 + v425 - v429 * v430;
                      ++v427;
                    }
                    while (v427 < v426);
                    result = *v130;
                  }
                  v420 = v420 + v424 - v425 * v426;
                  ++v418;
                }
                while (v418 < (int)result);
              }
              break;
            case 4:
              v433 = *v130;
              if (*v130 >= 1)
              {
                v434 = 0;
                v435 = 0;
                v436 = 0;
                v437 = v129[19];
                v438 = v3[19];
                v439 = v129[3];
                v440 = *(_QWORD *)v439;
                v441 = *((_QWORD *)v439 + 1);
                v442 = v130[1];
                do
                {
                  if (v442 >= 1)
                  {
                    v443 = 0;
                    v444 = v129[3];
                    v445 = *((_QWORD *)v439 + 2);
                    v446 = v130[2];
                    do
                    {
                      if (v446 >= 1)
                      {
                        v447 = 0;
                        v448 = v129[3];
                        v449 = *((_QWORD *)v444 + 2);
                        v450 = *((_QWORD *)v444 + 3);
                        v451 = v130[3];
                        do
                        {
                          if (v451 >= 1)
                          {
                            v452 = 0;
                            v453 = *((_QWORD *)v448 + 3);
                            do
                            {
                              *(_DWORD *)(v438 + 4 * v435 + 4 * v452) = *(_QWORD *)&v437[2 * v436];
                              v436 += v453;
                              v451 = v130[3];
                              ++v452;
                            }
                            while ((int)v452 < v451);
                            v446 = v130[2];
                            v435 += v452;
                          }
                          v436 = v436 + v449 - v450 * v451;
                          ++v447;
                        }
                        while (v447 < v446);
                        v442 = v130[1];
                      }
                      v436 = v436 + v441 - v445 * v446;
                      ++v443;
                    }
                    while (v443 < v442);
                    v433 = *v130;
                  }
                  result = v442;
                  v436 = v436 + v440 - v441 * v442;
                  ++v434;
                }
                while (v434 < v433);
              }
              break;
            default:
              v398 = v3[6];
              if (v398)
              {
                v399 = 0;
                v400 = v129[19];
                v401 = v3[19];
                v402 = ((unint64_t)v131 >> 2) - 1;
                v403 = v129[3];
                do
                {
                  v404 = 0;
                  if ((v402 & 0x80000000) == 0)
                  {
                    v405 = v402;
                    LODWORD(result) = v399;
                    do
                    {
                      v406 = ldiv((int)result, v130[v405]);
                      result = v406.quot;
                      v404 += *(_QWORD *)&v403[2 * v405--] * v406.rem;
                    }
                    while (v405 != -1);
                  }
                  *(_DWORD *)(v401 + 4 * v399++) = *(_QWORD *)&v400[2 * v404];
                }
                while (v399 != v398);
              }
              break;
          }
          break;
        case 3:
          v136 = *(unsigned int ***)result;
          v138 = **(_QWORD **)result;
          v137 = *(_QWORD *)(*(_QWORD *)result + 8);
          v139 = v137 - v138;
          switch((v137 - v138) >> 2)
          {
            case 1:
              v140 = (v139 << 30) - 0x100000000;
              v141 = *(_DWORD *)(v138 + (v140 >> 30));
              if (v141 >= 1)
              {
                v142 = v140 >> 29;
                v143 = *(_QWORD *)((char *)v136[3] + v142);
                v144 = *(_QWORD *)(v3[3] + v142);
                v145 = (_DWORD *)v3[19];
                v146 = v136[19];
                v147 = 4 * v144;
                v148 = 8 * v143;
                do
                {
                  *v145 = *(_QWORD *)v146;
                  v145 = (_DWORD *)((char *)v145 + v147);
                  v146 = (unsigned int *)((char *)v146 + v148);
                  --v141;
                }
                while (v141);
              }
              break;
            case 2:
              v1022 = (v139 << 30) - 0x200000000;
              v1023 = *(_DWORD *)(v138 + (v1022 >> 30));
              if (v1023 >= 1)
              {
                v1024 = 0;
                v1025 = 0;
                v1026 = 0;
                v1027 = v136[3];
                v1028 = v1022 >> 29;
                v1029 = *(_QWORD *)((char *)v1027 + v1028);
                v1030 = v3[3];
                v1031 = (v139 << 30) - 0x100000000;
                v1032 = *(_QWORD *)((char *)v1027 + (v1031 >> 29));
                v1033 = *(_QWORD *)(v1030 + (v1031 >> 29));
                v1034 = v1031 >> 32;
                v1035 = 4 * *(_QWORD *)(v1030 + v1028);
                v1036 = 4 * v1033;
                v1037 = 8 * v1029;
                v1038 = 8 * v1032;
                do
                {
                  result = *(unsigned int *)(v138 + 4 * v1034);
                  if ((int)result >= 1)
                  {
                    v1039 = (_DWORD *)(v3[19] + v1025);
                    v1040 = (_QWORD *)((char *)v136[19] + v1024);
                    do
                    {
                      *v1039 = *v1040;
                      v1039 = (_DWORD *)((char *)v1039 + v1036);
                      v1040 = (_QWORD *)((char *)v1040 + v1038);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  ++v1026;
                  v1025 += v1035;
                  v1024 += v1037;
                }
                while (v1026 != v1023);
              }
              break;
            case 3:
              v1041 = (v139 << 30) - 0x300000000;
              v1042 = *(_DWORD *)(v138 + (v1041 >> 30));
              if (v1042 >= 1)
              {
                v1043 = 0;
                v1044 = 0;
                v1045 = 0;
                v1046 = v139 << 30;
                v1047 = v136[3];
                v1048 = v1041 >> 29;
                v1049 = *(_QWORD *)((char *)v1047 + v1048);
                v1050 = v3[3];
                v1051 = *(_QWORD *)(v1050 + v1048);
                v1052 = (v1046 - 0x200000000) >> 29;
                v1053 = *(_QWORD *)((char *)v1047 + v1052);
                v1054 = (v1046 - 0x200000000) >> 32;
                v1055 = (v1046 - 0x100000000) >> 32;
                v1056 = 4 * v1051;
                v1057 = 4 * *(_QWORD *)(v1050 + v1052);
                result = 8 * v1049;
                v1058 = 8 * v1053;
                do
                {
                  v1059 = *(_DWORD *)(v138 + 4 * v1054);
                  if (v1059 >= 1)
                  {
                    v1060 = 0;
                    v1061 = (_QWORD *)*a2;
                    v1062 = 4 * *(_QWORD *)(v1050 + 8 * v1055);
                    v1063 = 8 * *(_QWORD *)&v1047[2 * v1055];
                    v1064 = v1043;
                    v1065 = v1044;
                    do
                    {
                      v1066 = *(_DWORD *)(v138 + 4 * v1055);
                      if (v1066 >= 1)
                      {
                        v1067 = (_DWORD *)(v1061[19] + v1065);
                        v1068 = (_QWORD *)((char *)v136[19] + v1064);
                        do
                        {
                          *v1067 = *v1068;
                          v1067 = (_DWORD *)((char *)v1067 + v1062);
                          v1068 = (_QWORD *)((char *)v1068 + v1063);
                          --v1066;
                        }
                        while (v1066);
                      }
                      ++v1060;
                      v1065 += v1057;
                      v1064 += v1058;
                    }
                    while (v1060 != v1059);
                  }
                  ++v1045;
                  v1044 += v1056;
                  v1043 += result;
                }
                while (v1045 != v1042);
              }
              break;
            case 4:
              v1069 = (v139 << 30) - 0x400000000;
              v1576 = *(_DWORD *)(v138 + (v1069 >> 30));
              if (v1576 >= 1)
              {
                v1070 = 0;
                v1071 = 0;
                v1072 = 0;
                v1073 = v139 << 30;
                v1074 = v136[3];
                v1075 = v1069 >> 29;
                v1076 = v3[3];
                v1559 = (v1073 - 0x300000000) >> 32;
                v1077 = (v1073 - 0x300000000) >> 29;
                v1078 = *(_QWORD *)((char *)v1074 + v1077);
                v1079 = *(_QWORD *)(v1076 + v1077);
                v1080 = (v1073 - 0x200000000) >> 32;
                v1081 = (v1073 - 0x100000000) >> 32;
                v1542 = 4 * *(_QWORD *)(v1076 + v1075);
                result = 4 * v1079;
                v1525 = 8 * *(_QWORD *)((char *)v1074 + v1075);
                v1082 = 8 * v1078;
                do
                {
                  v1083 = *(_DWORD *)(v138 + 4 * v1559);
                  if (v1083 >= 1)
                  {
                    v1084 = 0;
                    v1085 = 4 * *(_QWORD *)(v1076 + 8 * v1080);
                    v1086 = 8 * *(_QWORD *)&v1074[2 * v1080];
                    v1087 = v1070;
                    v1088 = v1071;
                    do
                    {
                      v1089 = *(_DWORD *)(v138 + 4 * v1080);
                      if (v1089 >= 1)
                      {
                        v1090 = 0;
                        v1091 = (_QWORD *)*a2;
                        v1092 = 4 * *(_QWORD *)(v1076 + 8 * v1081);
                        v1093 = 8 * *(_QWORD *)&v1074[2 * v1081];
                        v1094 = v1087;
                        v1095 = v1088;
                        do
                        {
                          v1096 = *(_DWORD *)(v138 + 4 * v1081);
                          if (v1096 >= 1)
                          {
                            v1097 = (_DWORD *)(v1091[19] + v1095);
                            v1098 = (_QWORD *)((char *)v136[19] + v1094);
                            do
                            {
                              *v1097 = *v1098;
                              v1097 = (_DWORD *)((char *)v1097 + v1092);
                              v1098 = (_QWORD *)((char *)v1098 + v1093);
                              --v1096;
                            }
                            while (v1096);
                          }
                          ++v1090;
                          v1095 += v1085;
                          v1094 += v1086;
                        }
                        while (v1090 != v1089);
                      }
                      ++v1084;
                      v1088 += result;
                      v1087 += v1082;
                    }
                    while (v1084 != v1083);
                  }
                  ++v1072;
                  v1071 += v1542;
                  v1070 += v1525;
                }
                while (v1072 != v1576);
              }
              break;
            case 5:
              v1099 = (v139 << 30) - 0x500000000;
              v1481 = *(_DWORD *)(v138 + (v1099 >> 30));
              if (v1481 >= 1)
              {
                v1501 = 0;
                v1511 = 0;
                v1491 = 0;
                v1100 = v139 << 30;
                v1101 = v136[3];
                v1102 = v1099 >> 29;
                v1103 = v3[3];
                v1471 = (v1100 - 0x400000000) >> 32;
                v1104 = (v1100 - 0x400000000) >> 29;
                result = *(_QWORD *)((char *)v1101 + v1104);
                v1560 = (v1100 - 0x300000000) >> 32;
                v1105 = (v1100 - 0x200000000) >> 32;
                v1106 = (v1100 - 0x100000000) >> 32;
                v1461 = 4 * *(_QWORD *)(v1103 + v1102);
                v1543 = 4 * *(_QWORD *)(v1103 + v1104);
                v1451 = 8 * *(_QWORD *)((char *)v1101 + v1102);
                v1526 = 8 * result;
                do
                {
                  v1577 = *(_DWORD *)(v138 + 4 * v1471);
                  if (v1577 >= 1)
                  {
                    v1107 = 0;
                    v1108 = 4 * *(_QWORD *)(v1103 + 8 * v1560);
                    v1109 = 8 * *(_QWORD *)&v1101[2 * v1560];
                    v1111 = v1501;
                    v1110 = v1511;
                    do
                    {
                      v1112 = *(_DWORD *)(v138 + 4 * v1560);
                      if (v1112 >= 1)
                      {
                        v1113 = 0;
                        v1114 = 4 * *(_QWORD *)(v1103 + 8 * v1105);
                        v1115 = 8 * *(_QWORD *)&v1101[2 * v1105];
                        v1116 = v1110;
                        v1117 = v1111;
                        do
                        {
                          v1118 = *(_DWORD *)(v138 + 4 * v1105);
                          if (v1118 >= 1)
                          {
                            v1119 = 0;
                            result = *a2;
                            v1120 = 4 * *(_QWORD *)(v1103 + 8 * v1106);
                            v1121 = 8 * *(_QWORD *)&v1101[2 * v1106];
                            v1122 = v1116;
                            v1123 = v1117;
                            do
                            {
                              v1124 = *(_DWORD *)(v138 + 4 * v1106);
                              if (v1124 >= 1)
                              {
                                v1125 = (_DWORD *)(*(_QWORD *)(result + 152) + v1123);
                                v1126 = (_QWORD *)((char *)v136[19] + v1122);
                                do
                                {
                                  *v1125 = *v1126;
                                  v1125 = (_DWORD *)((char *)v1125 + v1120);
                                  v1126 = (_QWORD *)((char *)v1126 + v1121);
                                  --v1124;
                                }
                                while (v1124);
                              }
                              ++v1119;
                              v1123 += v1114;
                              v1122 += v1115;
                            }
                            while (v1119 != v1118);
                          }
                          ++v1113;
                          v1117 += v1108;
                          v1116 += v1109;
                        }
                        while (v1113 != v1112);
                      }
                      ++v1107;
                      v1111 += v1543;
                      v1110 += v1526;
                    }
                    while (v1107 != v1577);
                  }
                  v1501 += v1461;
                  v1511 += v1451;
                  ++v1491;
                }
                while (v1491 != v1481);
              }
              break;
            default:
              LODWORD(v986) = 1;
              v987 = -20;
              do
              {
                v986 = *(int *)(v137 + v987) * (uint64_t)(int)v986;
                v987 += 4;
              }
              while (v987);
              v1433 = v136[6];
              if (v1433)
              {
                result = 0;
                v1460 = *v3;
                v988 = (v139 << 30) - 0x500000000;
                v1423 = (v139 >> 2) - 1;
                v989 = v136[3];
                v1418 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1413 = v988 >> 32;
                v990 = v3[3];
                v1470 = (uint64_t)((v139 << 30) - 0x400000000) >> 32;
                v1558 = (uint64_t)((v139 << 30) - 0x300000000) >> 32;
                v991 = (uint64_t)((v139 << 30) - 0x200000000) >> 32;
                v992 = (uint64_t)((v139 << 30) - 0x100000000) >> 32;
                v1443 = 8 * *(_QWORD *)((char *)v989 + (v988 >> 29));
                v1450 = 4 * *(_QWORD *)(v990 + (v988 >> 29));
                v1428 = v986;
                do
                {
                  v993 = v1423;
                  v1438 = result;
                  v994 = 0;
                  if ((v1423 & 0x80000000) != 0)
                  {
                    v995 = v1418;
                  }
                  else
                  {
                    v995 = v1418;
                    do
                    {
                      v996 = ldiv((int)result, *(int *)(v138 + 4 * v993));
                      LODWORD(result) = v996.quot;
                      v994 += *(_QWORD *)&v989[2 * v993--] * v996.rem;
                    }
                    while (v993 != -1);
                  }
                  v997 = 0;
                  if ((v995 & 0x80000000) == 0)
                  {
                    v998 = v1438;
                    do
                    {
                      v999 = ldiv(v998, *(int *)(v1460 + 4 * v995));
                      v998 = v999.quot;
                      v997 += *(_QWORD *)(v990 + 8 * v995--) * v999.rem;
                    }
                    while (v995 != -1);
                  }
                  v1480 = *(_DWORD *)(v138 + 4 * v1413);
                  if (v1480 >= 1)
                  {
                    v1000 = 0;
                    v1510 = 4 * v997;
                    v1541 = 4 * *(_QWORD *)(v990 + 8 * v1470);
                    v1500 = 8 * v994;
                    v1524 = 8 * *(_QWORD *)&v989[2 * v1470];
                    do
                    {
                      v1490 = v1000;
                      v1575 = *(_DWORD *)(v138 + 4 * v1470);
                      if (v1575 >= 1)
                      {
                        v1001 = 0;
                        v1002 = 4 * *(_QWORD *)(v990 + 8 * v1558);
                        v1003 = 8 * *(_QWORD *)&v989[2 * v1558];
                        v1005 = v1500;
                        v1004 = v1510;
                        do
                        {
                          v1006 = *(_DWORD *)(v138 + 4 * v1558);
                          if (v1006 >= 1)
                          {
                            v1007 = 0;
                            v1008 = 4 * *(_QWORD *)(v990 + 8 * v991);
                            v1009 = 8 * *(_QWORD *)&v989[2 * v991];
                            v1010 = v1005;
                            v1011 = v1004;
                            do
                            {
                              v1012 = *(_DWORD *)(v138 + 4 * v991);
                              if (v1012 >= 1)
                              {
                                v1013 = 0;
                                v1014 = (_QWORD *)*a2;
                                v1015 = 4 * *(_QWORD *)(v990 + 8 * v992);
                                v1016 = 8 * *(_QWORD *)&v989[2 * v992];
                                v1017 = v1010;
                                v1018 = v1011;
                                do
                                {
                                  v1019 = *(_DWORD *)(v138 + 4 * v992);
                                  if (v1019 >= 1)
                                  {
                                    v1020 = (_DWORD *)(v1014[19] + v1018);
                                    v1021 = (_QWORD *)((char *)v136[19] + v1017);
                                    do
                                    {
                                      *v1020 = *v1021;
                                      v1020 = (_DWORD *)((char *)v1020 + v1015);
                                      v1021 = (_QWORD *)((char *)v1021 + v1016);
                                      --v1019;
                                    }
                                    while (v1019);
                                  }
                                  ++v1013;
                                  v1018 += v1008;
                                  v1017 += v1009;
                                }
                                while (v1013 != v1012);
                              }
                              ++v1007;
                              v1011 += v1002;
                              v1010 += v1003;
                            }
                            while (v1007 != v1006);
                          }
                          ++v1001;
                          v1004 += v1541;
                          v1005 += v1524;
                        }
                        while (v1001 != v1575);
                      }
                      v1000 = v1490 + 1;
                      v1510 += v1450;
                      v1500 += v1443;
                    }
                    while (v1490 + 1 != v1480);
                  }
                  result = v1438 + v1428;
                }
                while ((unint64_t)v1433 > v1438 + v1428);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v19 = v3[6];
          if (v19)
          {
            v20 = **(_QWORD **)(*(_QWORD *)result + 152);
            v21 = (_QWORD *)v3[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          v149 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v149)
            result = (uint64_t)memmove((void *)v3[19], *(const void **)(*(_QWORD *)result + 152), 8 * v149);
          break;
        case 2:
          v150 = *(int ***)result;
          v151 = **(int ***)result;
          v152 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v151;
          switch(v152 >> 2)
          {
            case 1:
              v153 = *v151;
              if ((int)v153 >= 1)
              {
                v154 = v150[19];
                v155 = (_QWORD *)v3[19];
                v156 = 8 * *(_QWORD *)v150[3];
                do
                {
                  *v155++ = *(_QWORD *)v154;
                  v154 = (int *)((char *)v154 + v156);
                  --v153;
                }
                while (v153);
              }
              break;
            case 2:
              v463 = *v151;
              if (*v151 >= 1)
              {
                v464 = 0;
                v465 = 0;
                v466 = 0;
                v467 = v150[19];
                v468 = v3[19];
                v469 = v151[1];
                v470 = v150[3];
                v472 = *(_QWORD *)v470;
                v471 = *((_QWORD *)v470 + 1);
                v473 = v472 - v471 * v469;
                do
                {
                  v474 = v469;
                  if ((int)v469 >= 1)
                  {
                    do
                    {
                      result = *(_QWORD *)&v467[2 * v466];
                      *(_QWORD *)(v468 + 8 * v465++) = result;
                      v466 += v471;
                      --v474;
                    }
                    while (v474);
                  }
                  v466 += v473;
                  ++v464;
                }
                while (v464 != v463);
              }
              break;
            case 3:
              v475 = *v151;
              if (*v151 >= 1)
              {
                v476 = 0;
                result = 0;
                v477 = 0;
                v478 = v150[19];
                v479 = v3[19];
                v480 = v151[1];
                v481 = v150[3];
                v482 = *((_QWORD *)v481 + 1);
                v483 = *(_QWORD *)v481 - v482 * v480;
                do
                {
                  if ((int)v480 < 1)
                  {
                    v490 = result;
                  }
                  else
                  {
                    v484 = 0;
                    v485 = v151[2];
                    v486 = v150[3];
                    v487 = v482 - *((_QWORD *)v481 + 2) * v485;
                    do
                    {
                      if ((int)v485 < 1)
                      {
                        v490 = result;
                      }
                      else
                      {
                        v488 = *((_QWORD *)v486 + 2);
                        v489 = v485;
                        do
                        {
                          v490 = result + 1;
                          *(_QWORD *)(v479 + 8 * result) = *(_QWORD *)&v478[2 * v477];
                          v477 += v488;
                          ++result;
                          --v489;
                        }
                        while (v489);
                      }
                      v477 += v487;
                      ++v484;
                      result = v490;
                    }
                    while (v484 != (_DWORD)v480);
                  }
                  v477 += v483;
                  ++v476;
                  result = v490;
                }
                while (v476 != v475);
              }
              break;
            case 4:
              v491 = *v151;
              if (*v151 >= 1)
              {
                v492 = 0;
                result = 0;
                v493 = 0;
                v494 = v150[19];
                v495 = v3[19];
                v496 = v151[1];
                v497 = v150[3];
                v498 = *((_QWORD *)v497 + 1);
                v499 = *(_QWORD *)v497 - v498 * v496;
                do
                {
                  if ((int)v496 < 1)
                  {
                    v510 = result;
                  }
                  else
                  {
                    v500 = 0;
                    v501 = v151[2];
                    v502 = v150[3];
                    v503 = v498 - *((_QWORD *)v497 + 2) * v501;
                    do
                    {
                      if ((int)v501 < 1)
                      {
                        v510 = result;
                      }
                      else
                      {
                        v504 = 0;
                        v505 = v151[3];
                        v506 = v150[3];
                        v507 = *((_QWORD *)v502 + 2) - *((_QWORD *)v502 + 3) * v505;
                        do
                        {
                          if ((int)v505 < 1)
                          {
                            v510 = result;
                          }
                          else
                          {
                            v508 = *((_QWORD *)v506 + 3);
                            v509 = v505;
                            do
                            {
                              v510 = result + 1;
                              *(_QWORD *)(v495 + 8 * result) = *(_QWORD *)&v494[2 * v493];
                              v493 += v508;
                              ++result;
                              --v509;
                            }
                            while (v509);
                          }
                          v493 += v507;
                          ++v504;
                          result = v510;
                        }
                        while (v504 != (_DWORD)v501);
                      }
                      v493 += v503;
                      ++v500;
                      result = v510;
                    }
                    while (v500 != (_DWORD)v496);
                  }
                  v493 += v499;
                  ++v492;
                  result = v510;
                }
                while (v492 != v491);
              }
              break;
            default:
              v454 = v3[6];
              if (v454)
              {
                v455 = 0;
                v456 = v150[19];
                v457 = v3[19];
                v458 = ((unint64_t)v152 >> 2) - 1;
                v459 = v150[3];
                do
                {
                  v460 = 0;
                  if ((v458 & 0x80000000) == 0)
                  {
                    v461 = v458;
                    LODWORD(result) = v455;
                    do
                    {
                      v462 = ldiv((int)result, v151[v461]);
                      result = v462.quot;
                      v460 += *(_QWORD *)&v459[2 * v461--] * v462.rem;
                    }
                    while (v461 != -1);
                  }
                  *(_QWORD *)(v457 + 8 * v455++) = *(_QWORD *)&v456[2 * v460];
                }
                while (v455 != v454);
              }
              break;
          }
          break;
        case 3:
          v157 = *(unsigned int ***)result;
          v159 = **(_QWORD **)result;
          v158 = *(_QWORD *)(*(_QWORD *)result + 8);
          v160 = v158 - v159;
          switch((v158 - v159) >> 2)
          {
            case 1:
              v161 = (v160 << 30) - 0x100000000;
              v162 = *(_DWORD *)(v159 + (v161 >> 30));
              if (v162 >= 1)
              {
                v163 = v161 >> 29;
                v164 = *(_QWORD *)((char *)v157[3] + v163);
                v165 = *(_QWORD *)(v3[3] + v163);
                v166 = (_QWORD *)v3[19];
                v167 = v157[19];
                v168 = 8 * v165;
                v169 = 8 * v164;
                do
                {
                  *v166 = *(_QWORD *)v167;
                  v166 = (_QWORD *)((char *)v166 + v168);
                  v167 = (unsigned int *)((char *)v167 + v169);
                  --v162;
                }
                while (v162);
              }
              break;
            case 2:
              v1162 = (v160 << 30) - 0x200000000;
              v1163 = *(_DWORD *)(v159 + (v1162 >> 30));
              if (v1163 >= 1)
              {
                v1164 = 0;
                v1165 = 0;
                v1166 = 0;
                v1167 = v157[3];
                v1168 = v1162 >> 29;
                v1169 = *(_QWORD *)((char *)v1167 + v1168);
                v1170 = v3[3];
                result = *(_QWORD *)(v1170 + v1168);
                v1171 = (v160 << 30) - 0x100000000;
                v1172 = *(_QWORD *)((char *)v1167 + (v1171 >> 29));
                v1173 = *(_QWORD *)(v1170 + (v1171 >> 29));
                v1174 = *(_DWORD *)(v159 + (v1171 >> 30));
                v1175 = 8 * result;
                v1176 = 8 * v1173;
                v1177 = 8 * v1169;
                v1178 = 8 * v1172;
                do
                {
                  if (v1174 >= 1)
                  {
                    result = v3[19] + v1165;
                    v1179 = (_QWORD *)((char *)v157[19] + v1164);
                    v1180 = v1174;
                    do
                    {
                      *(_QWORD *)result = *v1179;
                      result += v1176;
                      v1179 = (_QWORD *)((char *)v1179 + v1178);
                      --v1180;
                    }
                    while (v1180);
                  }
                  ++v1166;
                  v1165 += v1175;
                  v1164 += v1177;
                }
                while (v1166 != v1163);
              }
              break;
            case 3:
              v1181 = (v160 << 30) - 0x300000000;
              v1182 = *(_DWORD *)(v159 + (v1181 >> 30));
              if (v1182 >= 1)
              {
                v1183 = 0;
                v1184 = 0;
                v1185 = 0;
                v1186 = v157[3];
                v1187 = v1181 >> 29;
                v1188 = *(_QWORD *)((char *)v1186 + v1187);
                v1189 = v3[3];
                v1190 = *(_QWORD *)(v1189 + v1187);
                v1191 = v160 << 30;
                v1192 = (v160 << 30) - 0x200000000;
                v1193 = *(_QWORD *)((char *)v1186 + (v1192 >> 29));
                v1194 = *(_QWORD *)(v1189 + (v1192 >> 29));
                v1195 = *(_DWORD *)(v159 + (v1192 >> 30));
                v1196 = (v1191 - 0x100000000) >> 32;
                v1197 = 8 * v1190;
                v1198 = 8 * v1194;
                result = 8 * v1188;
                v1199 = 8 * v1193;
                do
                {
                  if (v1195 >= 1)
                  {
                    v1200 = 0;
                    v1201 = *(_DWORD *)(v159 + 4 * v1196);
                    v1202 = (_QWORD *)*a2;
                    v1203 = 8 * *(_QWORD *)(v1189 + 8 * v1196);
                    v1204 = 8 * *(_QWORD *)&v1186[2 * v1196];
                    v1205 = v1183;
                    v1206 = v1184;
                    do
                    {
                      if (v1201 >= 1)
                      {
                        v1207 = (_QWORD *)(v1202[19] + v1206);
                        v1208 = (_QWORD *)((char *)v157[19] + v1205);
                        v1209 = v1201;
                        do
                        {
                          *v1207 = *v1208;
                          v1207 = (_QWORD *)((char *)v1207 + v1203);
                          v1208 = (_QWORD *)((char *)v1208 + v1204);
                          --v1209;
                        }
                        while (v1209);
                      }
                      ++v1200;
                      v1206 += v1198;
                      v1205 += v1199;
                    }
                    while (v1200 != v1195);
                  }
                  ++v1185;
                  v1184 += v1197;
                  v1183 += result;
                }
                while (v1185 != v1182);
              }
              break;
            case 4:
              v1210 = (v160 << 30) - 0x400000000;
              v1579 = *(_DWORD *)(v159 + (v1210 >> 30));
              if (v1579 >= 1)
              {
                v1211 = 0;
                v1212 = 0;
                v1213 = 0;
                v1214 = v157[3];
                v1215 = v1210 >> 29;
                v1216 = v160 << 30;
                v1217 = v3[3];
                v1218 = (v1216 - 0x300000000) >> 29;
                v1219 = *(_QWORD *)((char *)v1214 + v1218);
                v1220 = v1216 - 0x200000000;
                v1221 = v1216 - 0x100000000;
                v1222 = *(_QWORD *)(v1217 + v1218);
                v1223 = *(_DWORD *)(v159 + ((v1216 - 0x300000000) >> 30));
                v1528 = v1220 >> 32;
                v1224 = v1221 >> 32;
                v1562 = 8 * *(_QWORD *)(v1217 + v1215);
                result = 8 * v1222;
                v1545 = 8 * *(_QWORD *)((char *)v1214 + v1215);
                v1225 = 8 * v1219;
                do
                {
                  if (v1223 >= 1)
                  {
                    v1226 = 0;
                    v1227 = *(_DWORD *)(v159 + 4 * v1528);
                    v1228 = 8 * *(_QWORD *)(v1217 + 8 * v1528);
                    v1229 = 8 * *(_QWORD *)&v1214[2 * v1528];
                    v1230 = v1211;
                    v1231 = v1212;
                    do
                    {
                      if (v1227 >= 1)
                      {
                        v1232 = 0;
                        v1233 = *(_DWORD *)(v159 + 4 * v1224);
                        v1234 = (_QWORD *)*a2;
                        v1235 = 8 * *(_QWORD *)(v1217 + 8 * v1224);
                        v1236 = 8 * *(_QWORD *)&v1214[2 * v1224];
                        v1237 = v1230;
                        v1238 = v1231;
                        do
                        {
                          if (v1233 >= 1)
                          {
                            v1239 = (_QWORD *)(v1234[19] + v1238);
                            v1240 = (_QWORD *)((char *)v157[19] + v1237);
                            v1241 = v1233;
                            do
                            {
                              *v1239 = *v1240;
                              v1239 = (_QWORD *)((char *)v1239 + v1235);
                              v1240 = (_QWORD *)((char *)v1240 + v1236);
                              --v1241;
                            }
                            while (v1241);
                          }
                          ++v1232;
                          v1238 += v1228;
                          v1237 += v1229;
                        }
                        while (v1232 != v1227);
                      }
                      ++v1226;
                      v1231 += result;
                      v1230 += v1225;
                    }
                    while (v1226 != v1223);
                  }
                  ++v1213;
                  v1212 += v1562;
                  v1211 += v1545;
                }
                while (v1213 != v1579);
              }
              break;
            case 5:
              v1242 = (v160 << 30) - 0x500000000;
              v1483 = *(_DWORD *)(v159 + (v1242 >> 30));
              if (v1483 >= 1)
              {
                v1503 = 0;
                v1513 = 0;
                v1493 = 0;
                v1243 = v157[3];
                v1244 = v1242 >> 29;
                v1245 = v3[3];
                v1246 = (v160 << 30) - 0x400000000;
                result = *(_QWORD *)((char *)v1243 + (v1246 >> 29));
                v1580 = *(_DWORD *)(v159 + (v1246 >> 30));
                v1453 = (uint64_t)((v160 << 30) - 0x300000000) >> 32;
                v1529 = (uint64_t)((v160 << 30) - 0x200000000) >> 32;
                v1247 = (uint64_t)((v160 << 30) - 0x100000000) >> 32;
                v1473 = 8 * *(_QWORD *)(v1245 + v1244);
                v1563 = 8 * *(_QWORD *)(v1245 + (v1246 >> 29));
                v1463 = 8 * *(_QWORD *)((char *)v1243 + v1244);
                v1546 = 8 * result;
                do
                {
                  if (v1580 >= 1)
                  {
                    v1248 = 0;
                    v1249 = *(_DWORD *)(v159 + 4 * v1453);
                    v1250 = 8 * *(_QWORD *)(v1245 + 8 * v1453);
                    v1251 = 8 * *(_QWORD *)&v1243[2 * v1453];
                    v1253 = v1503;
                    v1252 = v1513;
                    do
                    {
                      if (v1249 >= 1)
                      {
                        v1254 = 0;
                        v1255 = *(_DWORD *)(v159 + 4 * v1529);
                        v1256 = 8 * *(_QWORD *)(v1245 + 8 * v1529);
                        v1257 = 8 * *(_QWORD *)&v1243[2 * v1529];
                        v1258 = v1252;
                        v1259 = v1253;
                        do
                        {
                          if (v1255 >= 1)
                          {
                            v1260 = 0;
                            v1261 = *(_DWORD *)(v159 + 4 * v1247);
                            v1262 = (_QWORD *)*a2;
                            v1263 = 8 * *(_QWORD *)(v1245 + 8 * v1247);
                            v1264 = 8 * *(_QWORD *)&v1243[2 * v1247];
                            v1265 = v1258;
                            v1266 = v1259;
                            do
                            {
                              if (v1261 >= 1)
                              {
                                v1267 = (_QWORD *)(v1262[19] + v1266);
                                v1268 = (_QWORD *)((char *)v157[19] + v1265);
                                LODWORD(result) = v1261;
                                do
                                {
                                  *v1267 = *v1268;
                                  v1267 = (_QWORD *)((char *)v1267 + v1263);
                                  v1268 = (_QWORD *)((char *)v1268 + v1264);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1260;
                              v1266 += v1256;
                              v1265 += v1257;
                            }
                            while (v1260 != v1255);
                          }
                          ++v1254;
                          v1259 += v1250;
                          v1258 += v1251;
                        }
                        while (v1254 != v1249);
                      }
                      ++v1248;
                      v1253 += v1563;
                      v1252 += v1546;
                    }
                    while (v1248 != v1580);
                  }
                  v1503 += v1473;
                  v1513 += v1463;
                  ++v1493;
                }
                while (v1493 != v1483);
              }
              break;
            default:
              LODWORD(v1127) = 1;
              v1128 = -20;
              do
              {
                v1127 = *(int *)(v158 + v1128) * (uint64_t)(int)v1127;
                v1128 += 4;
              }
              while (v1128);
              v1439 = v157[6];
              if (v1439)
              {
                v1129 = 0;
                v1419 = *v3;
                v1130 = (v160 << 30) - 0x500000000;
                v1429 = (v160 >> 2) - 1;
                v1131 = v157[3];
                v1424 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1132 = v3[3];
                v1482 = *(_DWORD *)(v159 + (v1130 >> 30));
                v1414 = (uint64_t)((v160 << 30) - 0x400000000) >> 32;
                v1527 = (uint64_t)((v160 << 30) - 0x200000000) >> 32;
                v1133 = (uint64_t)((v160 << 30) - 0x100000000) >> 32;
                v1472 = 8 * *(_QWORD *)(v1132 + (v1130 >> 29));
                v1452 = (uint64_t)((v160 << 30) - 0x300000000) >> 32;
                v1462 = 8 * *(_QWORD *)((char *)v1131 + (v1130 >> 29));
                v1434 = v1127;
                do
                {
                  v1134 = v1429;
                  if ((v1429 & 0x80000000) != 0)
                  {
                    v1135 = 0;
                    v1136 = v1424;
                  }
                  else
                  {
                    v1135 = 0;
                    LODWORD(result) = v1129;
                    v1136 = v1424;
                    do
                    {
                      v1137 = ldiv((int)result, *(int *)(v159 + 4 * v1134));
                      result = v1137.quot;
                      v1135 += *(_QWORD *)&v1131[2 * v1134--] * v1137.rem;
                    }
                    while (v1134 != -1);
                  }
                  v1444 = v1129;
                  v1138 = 0;
                  if ((v1136 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1129;
                    do
                    {
                      v1139 = ldiv((int)result, *(int *)(v1419 + 4 * v1136));
                      result = v1139.quot;
                      v1138 += *(_QWORD *)(v1132 + 8 * v1136--) * v1139.rem;
                    }
                    while (v1136 != -1);
                  }
                  if (v1482 >= 1)
                  {
                    v1140 = 0;
                    v1578 = *(_DWORD *)(v159 + 4 * v1414);
                    v1512 = 8 * v1138;
                    v1561 = 8 * *(_QWORD *)(v1132 + 8 * v1414);
                    v1502 = 8 * v1135;
                    v1544 = 8 * *(_QWORD *)&v1131[2 * v1414];
                    do
                    {
                      v1492 = v1140;
                      if (v1578 >= 1)
                      {
                        v1141 = 0;
                        v1142 = *(_DWORD *)(v159 + 4 * v1452);
                        v1143 = 8 * *(_QWORD *)(v1132 + 8 * v1452);
                        v1144 = 8 * *(_QWORD *)&v1131[2 * v1452];
                        v1146 = v1502;
                        v1145 = v1512;
                        do
                        {
                          if (v1142 >= 1)
                          {
                            v1147 = 0;
                            v1148 = *(_DWORD *)(v159 + 4 * v1527);
                            v1149 = 8 * *(_QWORD *)(v1132 + 8 * v1527);
                            v1150 = 8 * *(_QWORD *)&v1131[2 * v1527];
                            result = v1146;
                            v1151 = v1145;
                            do
                            {
                              if (v1148 >= 1)
                              {
                                v1152 = 0;
                                v1153 = *(_DWORD *)(v159 + 4 * v1133);
                                v1154 = (_QWORD *)*a2;
                                v1155 = 8 * *(_QWORD *)(v1132 + 8 * v1133);
                                v1156 = 8 * *(_QWORD *)&v1131[2 * v1133];
                                v1157 = result;
                                v1158 = v1151;
                                do
                                {
                                  if (v1153 >= 1)
                                  {
                                    v1159 = (_QWORD *)(v1154[19] + v1158);
                                    v1160 = (_QWORD *)((char *)v157[19] + v1157);
                                    v1161 = v1153;
                                    do
                                    {
                                      *v1159 = *v1160;
                                      v1159 = (_QWORD *)((char *)v1159 + v1155);
                                      v1160 = (_QWORD *)((char *)v1160 + v1156);
                                      --v1161;
                                    }
                                    while (v1161);
                                  }
                                  ++v1152;
                                  v1158 += v1149;
                                  v1157 += v1150;
                                }
                                while (v1152 != v1148);
                              }
                              ++v1147;
                              v1151 += v1143;
                              result += v1144;
                            }
                            while (v1147 != v1142);
                          }
                          ++v1141;
                          v1145 += v1561;
                          v1146 += v1544;
                        }
                        while (v1141 != v1578);
                      }
                      v1140 = v1492 + 1;
                      v1512 += v1472;
                      v1502 += v1462;
                    }
                    while (v1492 + 1 != v1482);
                  }
                  v1129 += v1434;
                }
                while ((unint64_t)v1439 > v1444 + v1434);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v22 = v3[6];
          if (v22)
          {
            v23 = (float)**(uint64_t **)(*(_QWORD *)result + 152);
            v24 = (float *)v3[19];
            do
            {
              *v24++ = v23;
              --v22;
            }
            while (v22);
          }
          break;
        case 1:
          v170 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v170)
          {
            v171 = *(uint64_t **)(*(_QWORD *)result + 152);
            v172 = (float *)v3[19];
            v173 = 8 * v170;
            do
            {
              v174 = *v171++;
              *v172++ = (float)v174;
              v173 -= 8;
            }
            while (v173);
          }
          break;
        case 2:
          v175 = *(int ***)result;
          v176 = **(int ***)result;
          v177 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v176;
          switch(v177 >> 2)
          {
            case 1:
              v178 = *v176;
              if ((int)v178 >= 1)
              {
                v179 = (uint64_t *)v175[19];
                v180 = (float *)v3[19];
                v181 = 8 * *(_QWORD *)v175[3];
                do
                {
                  *v180++ = (float)*v179;
                  v179 = (uint64_t *)((char *)v179 + v181);
                  --v178;
                }
                while (v178);
              }
              break;
            case 2:
              v520 = *v176;
              if (*v176 >= 1)
              {
                v521 = 0;
                v522 = 0;
                v523 = 0;
                v524 = v175[19];
                v525 = v3[19];
                v526 = v176[1];
                v527 = v175[3];
                v529 = *(_QWORD *)v527;
                v528 = *((_QWORD *)v527 + 1);
                v530 = v529 - v528 * v526;
                do
                {
                  v531 = v526;
                  if ((int)v526 >= 1)
                  {
                    do
                    {
                      result = *(_QWORD *)&v524[2 * v523];
                      *(float *)(v525 + 4 * v522++) = (float)result;
                      v523 += v528;
                      --v531;
                    }
                    while (v531);
                  }
                  v523 += v530;
                  ++v521;
                }
                while (v521 != v520);
              }
              break;
            case 3:
              v532 = *v176;
              if (*v176 >= 1)
              {
                v533 = 0;
                result = 0;
                v534 = 0;
                v535 = v175[19];
                v536 = v3[19];
                v537 = v176[1];
                v538 = v175[3];
                v539 = *((_QWORD *)v538 + 1);
                v540 = *(_QWORD *)v538 - v539 * v537;
                do
                {
                  if ((int)v537 < 1)
                  {
                    v547 = result;
                  }
                  else
                  {
                    v541 = 0;
                    v542 = v176[2];
                    v543 = v175[3];
                    v544 = v539 - *((_QWORD *)v538 + 2) * v542;
                    do
                    {
                      if ((int)v542 < 1)
                      {
                        v547 = result;
                      }
                      else
                      {
                        v545 = *((_QWORD *)v543 + 2);
                        v546 = v542;
                        do
                        {
                          v547 = result + 1;
                          *(float *)(v536 + 4 * result) = (float)*(uint64_t *)&v535[2 * v534];
                          v534 += v545;
                          ++result;
                          --v546;
                        }
                        while (v546);
                      }
                      v534 += v544;
                      ++v541;
                      result = v547;
                    }
                    while (v541 != (_DWORD)v537);
                  }
                  v534 += v540;
                  ++v533;
                  result = v547;
                }
                while (v533 != v532);
              }
              break;
            case 4:
              v548 = *v176;
              if (*v176 >= 1)
              {
                v549 = 0;
                result = 0;
                v550 = 0;
                v551 = v175[19];
                v552 = v3[19];
                v553 = v176[1];
                v554 = v175[3];
                v555 = *((_QWORD *)v554 + 1);
                v556 = *(_QWORD *)v554 - v555 * v553;
                do
                {
                  if ((int)v553 < 1)
                  {
                    v567 = result;
                  }
                  else
                  {
                    v557 = 0;
                    v558 = v176[2];
                    v559 = v175[3];
                    v560 = v555 - *((_QWORD *)v554 + 2) * v558;
                    do
                    {
                      if ((int)v558 < 1)
                      {
                        v567 = result;
                      }
                      else
                      {
                        v561 = 0;
                        v562 = v176[3];
                        v563 = v175[3];
                        v564 = *((_QWORD *)v559 + 2) - *((_QWORD *)v559 + 3) * v562;
                        do
                        {
                          if ((int)v562 < 1)
                          {
                            v567 = result;
                          }
                          else
                          {
                            v565 = *((_QWORD *)v563 + 3);
                            v566 = v562;
                            do
                            {
                              v567 = result + 1;
                              *(float *)(v552 + 4 * result) = (float)*(uint64_t *)&v551[2 * v550];
                              v550 += v565;
                              ++result;
                              --v566;
                            }
                            while (v566);
                          }
                          v550 += v564;
                          ++v561;
                          result = v567;
                        }
                        while (v561 != (_DWORD)v558);
                      }
                      v550 += v560;
                      ++v557;
                      result = v567;
                    }
                    while (v557 != (_DWORD)v553);
                  }
                  v550 += v556;
                  ++v549;
                  result = v567;
                }
                while (v549 != v548);
              }
              break;
            default:
              v511 = v3[6];
              if (v511)
              {
                v512 = 0;
                v513 = v175[19];
                v514 = v3[19];
                v515 = ((unint64_t)v177 >> 2) - 1;
                v516 = v175[3];
                do
                {
                  v517 = 0;
                  if ((v515 & 0x80000000) == 0)
                  {
                    v518 = v515;
                    LODWORD(result) = v512;
                    do
                    {
                      v519 = ldiv((int)result, v176[v518]);
                      result = v519.quot;
                      v517 += *(_QWORD *)&v516[2 * v518--] * v519.rem;
                    }
                    while (v518 != -1);
                  }
                  *(float *)(v514 + 4 * v512++) = (float)*(uint64_t *)&v513[2 * v517];
                }
                while (v512 != v511);
              }
              break;
          }
          break;
        case 3:
          v182 = *(unsigned int ***)result;
          v184 = **(_QWORD **)result;
          v183 = *(_QWORD *)(*(_QWORD *)result + 8);
          v185 = v183 - v184;
          switch((v183 - v184) >> 2)
          {
            case 1:
              v186 = (v185 << 30) - 0x100000000;
              v187 = *(_DWORD *)(v184 + (v186 >> 30));
              if (v187 >= 1)
              {
                v188 = v186 >> 29;
                v189 = *(_QWORD *)((char *)v182[3] + v188);
                v190 = *(_QWORD *)(v3[3] + v188);
                v191 = (float *)v3[19];
                v192 = (uint64_t *)v182[19];
                v193 = 4 * v190;
                v194 = 8 * v189;
                do
                {
                  *v191 = (float)*v192;
                  v191 = (float *)((char *)v191 + v193);
                  v192 = (uint64_t *)((char *)v192 + v194);
                  --v187;
                }
                while (v187);
              }
              break;
            case 2:
              v1304 = (v185 << 30) - 0x200000000;
              v1305 = *(_DWORD *)(v184 + (v1304 >> 30));
              if (v1305 >= 1)
              {
                v1306 = 0;
                v1307 = 0;
                v1308 = 0;
                v1309 = v182[3];
                v1310 = v1304 >> 29;
                v1311 = *(_QWORD *)((char *)v1309 + v1310);
                v1312 = v3[3];
                result = *(_QWORD *)(v1312 + v1310);
                v1313 = (v185 << 30) - 0x100000000;
                v1314 = *(_QWORD *)((char *)v1309 + (v1313 >> 29));
                v1315 = *(_QWORD *)(v1312 + (v1313 >> 29));
                v1316 = *(_DWORD *)(v184 + (v1313 >> 30));
                v1317 = 4 * result;
                v1318 = 4 * v1315;
                v1319 = 8 * v1311;
                v1320 = 8 * v1314;
                do
                {
                  if (v1316 >= 1)
                  {
                    result = v3[19] + v1307;
                    v1321 = (uint64_t *)((char *)v182[19] + v1306);
                    v1322 = v1316;
                    do
                    {
                      *(float *)result = (float)*v1321;
                      result += v1318;
                      v1321 = (uint64_t *)((char *)v1321 + v1320);
                      --v1322;
                    }
                    while (v1322);
                  }
                  ++v1308;
                  v1307 += v1317;
                  v1306 += v1319;
                }
                while (v1308 != v1305);
              }
              break;
            case 3:
              v1323 = (v185 << 30) - 0x300000000;
              v1324 = *(_DWORD *)(v184 + (v1323 >> 30));
              if (v1324 >= 1)
              {
                v1325 = 0;
                v1326 = 0;
                v1327 = 0;
                v1328 = v182[3];
                v1329 = v1323 >> 29;
                v1330 = *(_QWORD *)((char *)v1328 + v1329);
                v1331 = v3[3];
                v1332 = *(_QWORD *)(v1331 + v1329);
                v1333 = v185 << 30;
                v1334 = (v185 << 30) - 0x200000000;
                v1335 = *(_QWORD *)((char *)v1328 + (v1334 >> 29));
                v1336 = *(_QWORD *)(v1331 + (v1334 >> 29));
                v1337 = *(_DWORD *)(v184 + (v1334 >> 30));
                v1338 = (v1333 - 0x100000000) >> 32;
                v1339 = 4 * v1332;
                v1340 = 4 * v1336;
                result = 8 * v1330;
                v1341 = 8 * v1335;
                do
                {
                  if (v1337 >= 1)
                  {
                    v1342 = 0;
                    v1343 = *(_DWORD *)(v184 + 4 * v1338);
                    v1344 = (_QWORD *)*a2;
                    v1345 = 4 * *(_QWORD *)(v1331 + 8 * v1338);
                    v1346 = 8 * *(_QWORD *)&v1328[2 * v1338];
                    v1347 = v1325;
                    v1348 = v1326;
                    do
                    {
                      if (v1343 >= 1)
                      {
                        v1349 = (float *)(v1344[19] + v1348);
                        v1350 = (uint64_t *)((char *)v182[19] + v1347);
                        v1351 = v1343;
                        do
                        {
                          *v1349 = (float)*v1350;
                          v1349 = (float *)((char *)v1349 + v1345);
                          v1350 = (uint64_t *)((char *)v1350 + v1346);
                          --v1351;
                        }
                        while (v1351);
                      }
                      ++v1342;
                      v1348 += v1340;
                      v1347 += v1341;
                    }
                    while (v1342 != v1337);
                  }
                  ++v1327;
                  v1326 += v1339;
                  v1325 += result;
                }
                while (v1327 != v1324);
              }
              break;
            case 4:
              v1352 = (v185 << 30) - 0x400000000;
              v1582 = *(_DWORD *)(v184 + (v1352 >> 30));
              if (v1582 >= 1)
              {
                v1353 = 0;
                v1354 = 0;
                v1355 = 0;
                v1356 = v182[3];
                v1357 = v1352 >> 29;
                v1358 = v185 << 30;
                v1359 = v3[3];
                v1360 = (v1358 - 0x300000000) >> 29;
                v1361 = *(_QWORD *)((char *)v1356 + v1360);
                v1362 = v1358 - 0x200000000;
                v1363 = v1358 - 0x100000000;
                v1364 = *(_QWORD *)(v1359 + v1360);
                v1365 = *(_DWORD *)(v184 + ((v1358 - 0x300000000) >> 30));
                v1531 = v1362 >> 32;
                v1366 = v1363 >> 32;
                v1565 = 4 * *(_QWORD *)(v1359 + v1357);
                result = 4 * v1364;
                v1548 = 8 * *(_QWORD *)((char *)v1356 + v1357);
                v1367 = 8 * v1361;
                do
                {
                  if (v1365 >= 1)
                  {
                    v1368 = 0;
                    v1369 = *(_DWORD *)(v184 + 4 * v1531);
                    v1370 = 4 * *(_QWORD *)(v1359 + 8 * v1531);
                    v1371 = 8 * *(_QWORD *)&v1356[2 * v1531];
                    v1372 = v1353;
                    v1373 = v1354;
                    do
                    {
                      if (v1369 >= 1)
                      {
                        v1374 = 0;
                        v1375 = *(_DWORD *)(v184 + 4 * v1366);
                        v1376 = (_QWORD *)*a2;
                        v1377 = 4 * *(_QWORD *)(v1359 + 8 * v1366);
                        v1378 = 8 * *(_QWORD *)&v1356[2 * v1366];
                        v1379 = v1372;
                        v1380 = v1373;
                        do
                        {
                          if (v1375 >= 1)
                          {
                            v1381 = (float *)(v1376[19] + v1380);
                            v1382 = (uint64_t *)((char *)v182[19] + v1379);
                            v1383 = v1375;
                            do
                            {
                              *v1381 = (float)*v1382;
                              v1381 = (float *)((char *)v1381 + v1377);
                              v1382 = (uint64_t *)((char *)v1382 + v1378);
                              --v1383;
                            }
                            while (v1383);
                          }
                          ++v1374;
                          v1380 += v1370;
                          v1379 += v1371;
                        }
                        while (v1374 != v1369);
                      }
                      ++v1368;
                      v1373 += result;
                      v1372 += v1367;
                    }
                    while (v1368 != v1365);
                  }
                  ++v1355;
                  v1354 += v1565;
                  v1353 += v1548;
                }
                while (v1355 != v1582);
              }
              break;
            case 5:
              v1384 = (v185 << 30) - 0x500000000;
              v1485 = *(_DWORD *)(v184 + (v1384 >> 30));
              if (v1485 >= 1)
              {
                v1505 = 0;
                v1515 = 0;
                v1495 = 0;
                v1385 = v182[3];
                v1386 = v1384 >> 29;
                v1387 = v3[3];
                v1388 = (v185 << 30) - 0x400000000;
                result = *(_QWORD *)((char *)v1385 + (v1388 >> 29));
                v1583 = *(_DWORD *)(v184 + (v1388 >> 30));
                v1455 = (uint64_t)((v185 << 30) - 0x300000000) >> 32;
                v1532 = (uint64_t)((v185 << 30) - 0x200000000) >> 32;
                v1389 = (uint64_t)((v185 << 30) - 0x100000000) >> 32;
                v1475 = 4 * *(_QWORD *)(v1387 + v1386);
                v1566 = 4 * *(_QWORD *)(v1387 + (v1388 >> 29));
                v1465 = 8 * *(_QWORD *)((char *)v1385 + v1386);
                v1549 = 8 * result;
                do
                {
                  if (v1583 >= 1)
                  {
                    v1390 = 0;
                    v1391 = *(_DWORD *)(v184 + 4 * v1455);
                    v1392 = 4 * *(_QWORD *)(v1387 + 8 * v1455);
                    v1393 = 8 * *(_QWORD *)&v1385[2 * v1455];
                    v1395 = v1505;
                    v1394 = v1515;
                    do
                    {
                      if (v1391 >= 1)
                      {
                        v1396 = 0;
                        v1397 = *(_DWORD *)(v184 + 4 * v1532);
                        v1398 = 4 * *(_QWORD *)(v1387 + 8 * v1532);
                        v1399 = 8 * *(_QWORD *)&v1385[2 * v1532];
                        v1400 = v1394;
                        v1401 = v1395;
                        do
                        {
                          if (v1397 >= 1)
                          {
                            v1402 = 0;
                            v1403 = *(_DWORD *)(v184 + 4 * v1389);
                            v1404 = (_QWORD *)*a2;
                            v1405 = 4 * *(_QWORD *)(v1387 + 8 * v1389);
                            v1406 = 8 * *(_QWORD *)&v1385[2 * v1389];
                            v1407 = v1400;
                            v1408 = v1401;
                            do
                            {
                              if (v1403 >= 1)
                              {
                                v1409 = (float *)(v1404[19] + v1408);
                                v1410 = (uint64_t *)((char *)v182[19] + v1407);
                                LODWORD(result) = v1403;
                                do
                                {
                                  *v1409 = (float)*v1410;
                                  v1409 = (float *)((char *)v1409 + v1405);
                                  v1410 = (uint64_t *)((char *)v1410 + v1406);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1402;
                              v1408 += v1398;
                              v1407 += v1399;
                            }
                            while (v1402 != v1397);
                          }
                          ++v1396;
                          v1401 += v1392;
                          v1400 += v1393;
                        }
                        while (v1396 != v1391);
                      }
                      ++v1390;
                      v1395 += v1566;
                      v1394 += v1549;
                    }
                    while (v1390 != v1583);
                  }
                  v1505 += v1475;
                  v1515 += v1465;
                  ++v1495;
                }
                while (v1495 != v1485);
              }
              break;
            default:
              LODWORD(v1269) = 1;
              v1270 = -20;
              do
              {
                v1269 = *(int *)(v183 + v1270) * (uint64_t)(int)v1269;
                v1270 += 4;
              }
              while (v1270);
              v1440 = v182[6];
              if (v1440)
              {
                v1271 = 0;
                v1420 = *v3;
                v1272 = (v185 << 30) - 0x500000000;
                v1430 = (v185 >> 2) - 1;
                v1273 = v182[3];
                v1425 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1274 = v3[3];
                v1484 = *(_DWORD *)(v184 + (v1272 >> 30));
                v1415 = (uint64_t)((v185 << 30) - 0x400000000) >> 32;
                v1530 = (uint64_t)((v185 << 30) - 0x200000000) >> 32;
                v1275 = (uint64_t)((v185 << 30) - 0x100000000) >> 32;
                v1474 = 4 * *(_QWORD *)(v1274 + (v1272 >> 29));
                v1454 = (uint64_t)((v185 << 30) - 0x300000000) >> 32;
                v1464 = 8 * *(_QWORD *)((char *)v1273 + (v1272 >> 29));
                v1435 = v1269;
                do
                {
                  v1276 = v1430;
                  if ((v1430 & 0x80000000) != 0)
                  {
                    v1277 = 0;
                    v1278 = v1425;
                  }
                  else
                  {
                    v1277 = 0;
                    LODWORD(result) = v1271;
                    v1278 = v1425;
                    do
                    {
                      v1279 = ldiv((int)result, *(int *)(v184 + 4 * v1276));
                      result = v1279.quot;
                      v1277 += *(_QWORD *)&v1273[2 * v1276--] * v1279.rem;
                    }
                    while (v1276 != -1);
                  }
                  v1445 = v1271;
                  v1280 = 0;
                  if ((v1278 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1271;
                    do
                    {
                      v1281 = ldiv((int)result, *(int *)(v1420 + 4 * v1278));
                      result = v1281.quot;
                      v1280 += *(_QWORD *)(v1274 + 8 * v1278--) * v1281.rem;
                    }
                    while (v1278 != -1);
                  }
                  if (v1484 >= 1)
                  {
                    v1282 = 0;
                    v1581 = *(_DWORD *)(v184 + 4 * v1415);
                    v1514 = 4 * v1280;
                    v1564 = 4 * *(_QWORD *)(v1274 + 8 * v1415);
                    v1504 = 8 * v1277;
                    v1547 = 8 * *(_QWORD *)&v1273[2 * v1415];
                    do
                    {
                      v1494 = v1282;
                      if (v1581 >= 1)
                      {
                        v1283 = 0;
                        v1284 = *(_DWORD *)(v184 + 4 * v1454);
                        v1285 = 4 * *(_QWORD *)(v1274 + 8 * v1454);
                        v1286 = 8 * *(_QWORD *)&v1273[2 * v1454];
                        v1288 = v1504;
                        v1287 = v1514;
                        do
                        {
                          if (v1284 >= 1)
                          {
                            v1289 = 0;
                            v1290 = *(_DWORD *)(v184 + 4 * v1530);
                            v1291 = 4 * *(_QWORD *)(v1274 + 8 * v1530);
                            v1292 = 8 * *(_QWORD *)&v1273[2 * v1530];
                            result = v1288;
                            v1293 = v1287;
                            do
                            {
                              if (v1290 >= 1)
                              {
                                v1294 = 0;
                                v1295 = *(_DWORD *)(v184 + 4 * v1275);
                                v1296 = (_QWORD *)*a2;
                                v1297 = 4 * *(_QWORD *)(v1274 + 8 * v1275);
                                v1298 = 8 * *(_QWORD *)&v1273[2 * v1275];
                                v1299 = result;
                                v1300 = v1293;
                                do
                                {
                                  if (v1295 >= 1)
                                  {
                                    v1301 = (float *)(v1296[19] + v1300);
                                    v1302 = (uint64_t *)((char *)v182[19] + v1299);
                                    v1303 = v1295;
                                    do
                                    {
                                      *v1301 = (float)*v1302;
                                      v1301 = (float *)((char *)v1301 + v1297);
                                      v1302 = (uint64_t *)((char *)v1302 + v1298);
                                      --v1303;
                                    }
                                    while (v1303);
                                  }
                                  ++v1294;
                                  v1300 += v1291;
                                  v1299 += v1292;
                                }
                                while (v1294 != v1290);
                              }
                              ++v1289;
                              v1293 += v1285;
                              result += v1286;
                            }
                            while (v1289 != v1284);
                          }
                          ++v1283;
                          v1287 += v1564;
                          v1288 += v1547;
                        }
                        while (v1283 != v1581);
                      }
                      v1282 = v1494 + 1;
                      v1514 += v1474;
                      v1504 += v1464;
                    }
                    while (v1494 + 1 != v1484);
                  }
                  v1271 += v1435;
                }
                while ((unint64_t)v1440 > v1445 + v1435);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<float>(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  int *v12;
  uint64_t v13;
  float v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  float *v20;
  BOOL *v21;
  uint64_t v22;
  float v23;
  uint64_t *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  BOOL *v29;
  uint64_t v30;
  unsigned int **v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL *v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  _BYTE *v45;
  uint64_t v46;
  float v47;
  int **v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  int **v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  float *v69;
  _DWORD *v70;
  uint64_t v71;
  float v72;
  int **v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int **v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  _BYTE *v95;
  uint64_t v96;
  float v97;
  int **v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  int **v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  float *v119;
  _DWORD *v120;
  uint64_t v121;
  float v122;
  int **v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  float *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int **v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  float *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float *v144;
  _QWORD *v145;
  uint64_t v146;
  float v147;
  int **v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  float *v152;
  _QWORD *v153;
  uint64_t v154;
  unsigned int **v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  float *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int **v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  int *v174;
  uint64_t v175;
  unsigned int **v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  ldiv_t v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  unint64_t v246;
  int *v247;
  uint64_t v248;
  int *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int *v253;
  ldiv_t v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  int *v259;
  uint64_t v260;
  int v261;
  int *v262;
  uint64_t v263;
  int v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  int *v268;
  uint64_t v269;
  int v270;
  int i;
  int v272;
  uint64_t v273;
  int *v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  int *v280;
  uint64_t v281;
  int v282;
  int j;
  int v284;
  int k;
  int v286;
  uint64_t v287;
  int *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int *v293;
  uint64_t v294;
  uint64_t v295;
  int *v296;
  uint64_t v297;
  uint64_t v298;
  ldiv_t v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  int *v304;
  uint64_t v305;
  int *v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  int *v314;
  uint64_t v315;
  int *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int v320;
  int *v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  int *v330;
  uint64_t v331;
  int *v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  int v336;
  int *v337;
  uint64_t v338;
  int v339;
  int v340;
  int *v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  int *v348;
  uint64_t v349;
  int *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int *v354;
  ldiv_t v355;
  int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  int *v360;
  uint64_t v361;
  int v362;
  int *v363;
  uint64_t v364;
  int v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  int *v369;
  uint64_t v370;
  int v371;
  int m;
  int v373;
  uint64_t v374;
  int *v375;
  uint64_t v376;
  int v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  int *v381;
  uint64_t v382;
  int v383;
  int n;
  int v385;
  int ii;
  int v387;
  uint64_t v388;
  int *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  int *v394;
  uint64_t v395;
  uint64_t v396;
  int *v397;
  uint64_t v398;
  uint64_t v399;
  ldiv_t v400;
  int v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  int *v405;
  uint64_t v406;
  int *v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int *v415;
  uint64_t v416;
  int *v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  int v421;
  int *v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  int *v431;
  uint64_t v432;
  int *v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  int v437;
  int *v438;
  uint64_t v439;
  int v440;
  int v441;
  int *v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int *v450;
  uint64_t v451;
  uint64_t v452;
  int *v453;
  uint64_t v454;
  uint64_t v455;
  ldiv_t v456;
  int v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  int *v461;
  uint64_t v462;
  uint64_t v463;
  int *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  int v469;
  int v470;
  uint64_t v471;
  int *v472;
  uint64_t v473;
  uint64_t v474;
  int *v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  uint64_t v479;
  int *v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  uint64_t v484;
  int v485;
  int v486;
  uint64_t v487;
  int *v488;
  uint64_t v489;
  uint64_t v490;
  int *v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  int *v496;
  uint64_t v497;
  int v498;
  uint64_t v499;
  int *v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int *v507;
  uint64_t v508;
  uint64_t v509;
  int *v510;
  uint64_t v511;
  uint64_t v512;
  ldiv_t v513;
  int v514;
  int v515;
  uint64_t v516;
  uint64_t v517;
  int *v518;
  uint64_t v519;
  uint64_t v520;
  int *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  int v526;
  int v527;
  uint64_t v528;
  int *v529;
  uint64_t v530;
  uint64_t v531;
  int *v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  int *v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  uint64_t v541;
  int v542;
  int v543;
  uint64_t v544;
  int *v545;
  uint64_t v546;
  uint64_t v547;
  int *v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  int *v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  int *v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  ldiv_t v571;
  uint64_t v572;
  uint64_t v573;
  ldiv_t v574;
  int v575;
  int v576;
  uint64_t v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  int v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  float *v595;
  int v596;
  uint64_t v597;
  int v598;
  uint64_t v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  unsigned int *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  float *v614;
  int v615;
  uint64_t v616;
  int v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  unsigned int *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  uint64_t v634;
  int v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  float *v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  unsigned int *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  float *v673;
  int v674;
  uint64_t v675;
  unsigned int *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  uint64_t v688;
  int v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  int v693;
  uint64_t v694;
  int v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  float *v701;
  int v702;
  uint64_t v703;
  uint64_t v704;
  _QWORD *v705;
  int *v706;
  unint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  ldiv_t v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  int quot;
  ldiv_t v718;
  uint64_t v719;
  int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  int v725;
  uint64_t v726;
  int v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  int v741;
  uint64_t v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  int v749;
  int v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  int v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  float *v762;
  uint64_t v763;
  uint64_t v764;
  int v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unsigned int *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  ldiv_t v781;
  uint64_t v782;
  int v783;
  ldiv_t v784;
  int v785;
  int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  int v791;
  int v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  int v797;
  int v798;
  _QWORD *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  int v804;
  _DWORD *v805;
  float *v806;
  uint64_t v807;
  int v808;
  uint64_t v809;
  uint64_t v810;
  int v811;
  unsigned int *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  _DWORD *v824;
  float *v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  uint64_t v831;
  unsigned int *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int v844;
  int v845;
  _QWORD *v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  int v851;
  _DWORD *v852;
  float *v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  uint64_t v858;
  unsigned int *v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  int v868;
  int v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  int v875;
  _QWORD *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  int v881;
  _DWORD *v882;
  float *v883;
  uint64_t v884;
  uint64_t v885;
  unsigned int *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  int v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  int v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  int v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  int v909;
  _DWORD *v910;
  float *v911;
  uint64_t v912;
  uint64_t v913;
  _QWORD *v914;
  int *v915;
  unint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  ldiv_t v920;
  uint64_t v921;
  unint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  int v926;
  ldiv_t v927;
  uint64_t v928;
  int v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  int v934;
  uint64_t v935;
  int v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  uint64_t v951;
  int v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  int v958;
  int v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  int v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  float *v971;
  uint64_t v972;
  uint64_t v973;
  int v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  unsigned int *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  ldiv_t v990;
  uint64_t v991;
  int v992;
  ldiv_t v993;
  int v994;
  int v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  int v1000;
  int v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  int v1006;
  int v1007;
  _QWORD *v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  int v1013;
  _DWORD *v1014;
  float *v1015;
  uint64_t v1016;
  int v1017;
  uint64_t v1018;
  uint64_t v1019;
  int v1020;
  unsigned int *v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  _DWORD *v1033;
  float *v1034;
  uint64_t v1035;
  int v1036;
  uint64_t v1037;
  uint64_t v1038;
  int v1039;
  uint64_t v1040;
  unsigned int *v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  int v1053;
  int v1054;
  _QWORD *v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  int v1060;
  _DWORD *v1061;
  float *v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  int v1066;
  uint64_t v1067;
  unsigned int *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  int v1077;
  int v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  int v1083;
  int v1084;
  _QWORD *v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  int v1090;
  _DWORD *v1091;
  float *v1092;
  uint64_t v1093;
  uint64_t v1094;
  unsigned int *v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  int v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  int v1106;
  int v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  int v1112;
  int v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  int v1118;
  _DWORD *v1119;
  float *v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  unsigned int *v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  ldiv_t v1131;
  uint64_t v1132;
  ldiv_t v1133;
  int v1134;
  int v1135;
  int v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  int v1141;
  int v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  int v1146;
  int v1147;
  _QWORD *v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  _QWORD *v1153;
  float *v1154;
  int v1155;
  uint64_t v1156;
  int v1157;
  uint64_t v1158;
  uint64_t v1159;
  int v1160;
  unsigned int *v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  int v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  float *v1173;
  int v1174;
  uint64_t v1175;
  int v1176;
  uint64_t v1177;
  uint64_t v1178;
  int v1179;
  unsigned int *v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  int v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  int v1194;
  int v1195;
  _QWORD *v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  _QWORD *v1201;
  float *v1202;
  int v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  int v1207;
  unsigned int *v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  int v1217;
  uint64_t v1218;
  uint64_t v1219;
  int v1220;
  int v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  int v1227;
  _QWORD *v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  _QWORD *v1233;
  float *v1234;
  int v1235;
  uint64_t v1236;
  unsigned int *v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  int v1242;
  int v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  int v1248;
  int v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  int v1254;
  int v1255;
  _QWORD *v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  _QWORD *v1261;
  float *v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  unsigned int *v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  ldiv_t v1273;
  uint64_t v1274;
  int v1275;
  ldiv_t v1276;
  int v1277;
  int v1278;
  int v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  int v1284;
  int v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  int v1290;
  int v1291;
  _QWORD *v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  _DWORD *v1297;
  _DWORD *v1298;
  int v1299;
  uint64_t v1300;
  int v1301;
  uint64_t v1302;
  uint64_t v1303;
  int v1304;
  unsigned int *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  int v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  _DWORD *v1317;
  int v1318;
  uint64_t v1319;
  int v1320;
  uint64_t v1321;
  uint64_t v1322;
  int v1323;
  unsigned int *v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  int v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  int v1338;
  int v1339;
  _QWORD *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  _DWORD *v1345;
  _DWORD *v1346;
  int v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  int v1351;
  unsigned int *v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  int v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  int v1365;
  int v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  int v1371;
  int v1372;
  _QWORD *v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  _DWORD *v1378;
  _DWORD *v1379;
  int v1380;
  uint64_t v1381;
  unsigned int *v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  int v1388;
  int v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  int v1394;
  int v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  int v1400;
  int v1401;
  _QWORD *v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  _DWORD *v1407;
  _DWORD *v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  unsigned int *v1429;
  unsigned int *v1430;
  uint64_t v1431;
  uint64_t v1432;
  unsigned int *v1433;
  uint64_t v1434;
  uint64_t v1435;
  unsigned int *v1436;
  unsigned int *v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  int v1472;
  int v1473;
  int v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  uint64_t v1480;
  uint64_t v1481;
  int v1482;
  int v1483;
  int v1484;
  int v1485;
  int v1486;
  int v1487;
  int v1488;
  int v1489;
  int v1490;
  int v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  int v1500;
  int v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  _QWORD *v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  _QWORD *v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t *v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t *v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  int v1562;
  int v1563;
  int v1564;
  uint64_t v1565;
  int v1566;
  int v1567;
  int v1568;
  uint64_t v1569;
  int v1570;
  int v1571;
  int v1572;
  int v1573;
  int v1574;
  int v1575;
  int v1576;
  int v1577;
  int v1578;

  v3 = (uint64_t *)*a2;
  v5 = result;
  switch(*(_DWORD *)(*a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v6 = v3[6];
          if (v6)
            result = (uint64_t)memset((void *)v3[19], **(float **)(*(_QWORD *)result + 152) != 0.0, v6);
          break;
        case 1:
          v19 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v19)
          {
            v20 = *(float **)(*(_QWORD *)result + 152);
            v21 = (BOOL *)v3[19];
            v22 = 4 * v19;
            do
            {
              v23 = *v20++;
              *v21++ = v23 != 0.0;
              v22 -= 4;
            }
            while (v22);
          }
          break;
        case 2:
          v24 = *(uint64_t **)result;
          v25 = **(int ***)result;
          v26 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v25;
          switch(v26 >> 2)
          {
            case 1:
              v27 = *v25;
              if ((int)v27 >= 1)
              {
                v28 = (float *)v24[19];
                v29 = (BOOL *)v3[19];
                v30 = 4 * *(_QWORD *)v24[3];
                do
                {
                  *v29++ = *v28 != 0.0;
                  v28 = (float *)((char *)v28 + v30);
                  --v27;
                }
                while (v27);
              }
              break;
            case 2:
              v198 = *v25;
              if (*v25 >= 1)
              {
                v199 = 0;
                v200 = 0;
                v201 = 0;
                v202 = v24[19];
                v203 = v3[19];
                v204 = v25[1];
                v205 = (uint64_t *)v24[3];
                v207 = *v205;
                v206 = v205[1];
                v208 = v207 - v206 * v204;
                do
                {
                  v209 = v204;
                  if ((int)v204 >= 1)
                  {
                    do
                    {
                      result = *(float *)(v202 + 4 * v201) != 0.0;
                      *(_BYTE *)(v203 + v200++) = result;
                      v201 += v206;
                      --v209;
                    }
                    while (v209);
                  }
                  v201 += v208;
                  ++v199;
                }
                while (v199 != v198);
              }
              break;
            case 3:
              v210 = *v25;
              if (*v25 >= 1)
              {
                v211 = 0;
                result = 0;
                v212 = 0;
                v213 = v24[19];
                v214 = v3[19];
                v215 = v25[1];
                v216 = (_QWORD *)v24[3];
                v217 = v216[1];
                v218 = *v216 - v217 * v215;
                do
                {
                  if ((int)v215 < 1)
                  {
                    v225 = result;
                  }
                  else
                  {
                    v219 = 0;
                    v220 = v25[2];
                    v221 = v24[3];
                    v222 = v217 - v216[2] * v220;
                    do
                    {
                      if ((int)v220 < 1)
                      {
                        v225 = result;
                      }
                      else
                      {
                        v223 = *(_QWORD *)(v221 + 16);
                        v224 = v220;
                        do
                        {
                          v225 = result + 1;
                          *(_BYTE *)(v214 + result) = *(float *)(v213 + 4 * v212) != 0.0;
                          v212 += v223;
                          ++result;
                          --v224;
                        }
                        while (v224);
                      }
                      v212 += v222;
                      ++v219;
                      result = v225;
                    }
                    while (v219 != (_DWORD)v215);
                  }
                  v212 += v218;
                  ++v211;
                  result = v225;
                }
                while (v211 != v210);
              }
              break;
            case 4:
              v226 = *v25;
              if (*v25 >= 1)
              {
                v227 = 0;
                result = 0;
                v228 = 0;
                v229 = v24[19];
                v230 = v3[19];
                v231 = v25[1];
                v232 = (_QWORD *)v24[3];
                v233 = v232[1];
                v234 = *v232 - v233 * v231;
                do
                {
                  if ((int)v231 < 1)
                  {
                    v245 = result;
                  }
                  else
                  {
                    v235 = 0;
                    v236 = v25[2];
                    v237 = v24[3];
                    v238 = v233 - v232[2] * v236;
                    do
                    {
                      if ((int)v236 < 1)
                      {
                        v245 = result;
                      }
                      else
                      {
                        v239 = 0;
                        v240 = v25[3];
                        v241 = v24[3];
                        v242 = *(_QWORD *)(v237 + 16) - *(_QWORD *)(v237 + 24) * v240;
                        do
                        {
                          if ((int)v240 < 1)
                          {
                            v245 = result;
                          }
                          else
                          {
                            v243 = *(_QWORD *)(v241 + 24);
                            v244 = v240;
                            do
                            {
                              v245 = result + 1;
                              *(_BYTE *)(v230 + result) = *(float *)(v229 + 4 * v228) != 0.0;
                              v228 += v243;
                              ++result;
                              --v244;
                            }
                            while (v244);
                          }
                          v228 += v242;
                          ++v239;
                          result = v245;
                        }
                        while (v239 != (_DWORD)v236);
                      }
                      v228 += v238;
                      ++v235;
                      result = v245;
                    }
                    while (v235 != (_DWORD)v231);
                  }
                  v228 += v234;
                  ++v227;
                  result = v245;
                }
                while (v227 != v226);
              }
              break;
            default:
              v189 = v3[6];
              if (v189)
              {
                v190 = 0;
                v191 = v24[19];
                v192 = v3[19];
                v193 = ((unint64_t)v26 >> 2) - 1;
                v194 = v24[3];
                do
                {
                  v195 = 0;
                  if ((v193 & 0x80000000) == 0)
                  {
                    v196 = v193;
                    LODWORD(result) = v190;
                    do
                    {
                      v197 = ldiv((int)result, v25[v196]);
                      result = v197.quot;
                      v195 += *(_QWORD *)(v194 + 8 * v196--) * v197.rem;
                    }
                    while (v196 != -1);
                  }
                  *(_BYTE *)(v192 + v190++) = *(float *)(v191 + 4 * v195) != 0.0;
                }
                while (v190 != v189);
              }
              break;
          }
          break;
        case 3:
          v31 = *(unsigned int ***)result;
          v33 = **(_QWORD **)result;
          v32 = *(_QWORD *)(*(_QWORD *)result + 8);
          v34 = v32 - v33;
          switch((v32 - v33) >> 2)
          {
            case 1:
              v35 = (v34 << 30) - 0x100000000;
              v36 = *(_DWORD *)(v33 + (v35 >> 30));
              if (v36 >= 1)
              {
                v37 = v35 >> 29;
                v38 = *(_QWORD *)((char *)v31[3] + v37);
                v39 = *(_QWORD *)(v3[3] + v37);
                v40 = (BOOL *)v3[19];
                v41 = (float *)v31[19];
                v42 = 4 * v38;
                do
                {
                  *v40 = *v41 != 0.0;
                  v40 += v39;
                  v41 = (float *)((char *)v41 + v42);
                  --v36;
                }
                while (v36);
              }
              break;
            case 2:
              v597 = (v34 << 30) - 0x200000000;
              v598 = *(_DWORD *)(v33 + (v597 >> 30));
              if (v598 >= 1)
              {
                v599 = 0;
                v600 = 0;
                v601 = 0;
                v602 = v34 << 30;
                v603 = v31[3];
                v604 = v597 >> 29;
                v605 = *(_QWORD *)((char *)v603 + v604);
                v606 = v3[3];
                v607 = *(_QWORD *)(v606 + v604);
                result = v602 - 0x100000000;
                v608 = (v602 - 0x100000000) >> 29;
                v609 = *(_QWORD *)((char *)v603 + v608);
                v610 = *(_QWORD *)(v606 + v608);
                v611 = *(_DWORD *)(v33 + (result >> 30));
                v612 = 4 * v605;
                v613 = 4 * v609;
                do
                {
                  if (v611 >= 1)
                  {
                    result = v3[19];
                    v614 = (float *)((char *)v31[19] + v599);
                    v615 = v611;
                    do
                    {
                      *(_BYTE *)(result + v601) = *v614 != 0.0;
                      result += v610;
                      v614 = (float *)((char *)v614 + v613);
                      --v615;
                    }
                    while (v615);
                  }
                  v601 += v607;
                  ++v600;
                  v599 += v612;
                }
                while (v600 != v598);
              }
              break;
            case 3:
              v616 = (v34 << 30) - 0x300000000;
              v617 = *(_DWORD *)(v33 + (v616 >> 30));
              if (v617 >= 1)
              {
                v618 = 0;
                v619 = 0;
                v620 = 0;
                v621 = v34 << 30;
                v622 = v31[3];
                v623 = v616 >> 29;
                v624 = *(_QWORD *)((char *)v622 + v623);
                v625 = v3[3];
                v626 = *(_QWORD *)(v625 + v623);
                v627 = v621 - 0x200000000;
                v628 = (v621 - 0x200000000) >> 29;
                v629 = v621 - 0x100000000;
                v630 = *(_QWORD *)((char *)v622 + v628);
                v631 = *(_QWORD *)(v625 + v628);
                v632 = *(_DWORD *)(v33 + (v627 >> 30));
                v633 = v629 >> 32;
                result = 4 * v624;
                v634 = 4 * v630;
                do
                {
                  if (v632 >= 1)
                  {
                    v635 = 0;
                    v636 = *(_QWORD *)(v625 + 8 * v633);
                    v637 = *(_DWORD *)(v33 + 4 * v633);
                    v638 = *a2;
                    v639 = 4 * *(_QWORD *)&v622[2 * v633];
                    v640 = v618;
                    v641 = v620;
                    do
                    {
                      if (v637 >= 1)
                      {
                        v642 = *(_QWORD *)(v638 + 152);
                        v643 = (float *)((char *)v31[19] + v640);
                        v644 = v637;
                        do
                        {
                          *(_BYTE *)(v642 + v641) = *v643 != 0.0;
                          v642 += v636;
                          v643 = (float *)((char *)v643 + v639);
                          --v644;
                        }
                        while (v644);
                      }
                      v641 += v631;
                      ++v635;
                      v640 += v634;
                    }
                    while (v635 != v632);
                  }
                  v620 += v626;
                  ++v619;
                  v618 += result;
                }
                while (v619 != v617);
              }
              break;
            case 4:
              v645 = (v34 << 30) - 0x400000000;
              v1563 = *(_DWORD *)(v33 + (v645 >> 30));
              if (v1563 >= 1)
              {
                v646 = 0;
                v647 = 0;
                v648 = 0;
                v649 = v31[3];
                v650 = v645 >> 29;
                v651 = *(_QWORD *)((char *)v649 + v650);
                v652 = v3[3];
                v1546 = *(_QWORD *)(v652 + v650);
                v653 = (v34 << 30) - 0x300000000;
                v654 = (v34 << 30) - 0x200000000;
                v655 = (v34 << 30) - 0x100000000;
                v656 = *(_QWORD *)(v652 + (v653 >> 29));
                v657 = *(_DWORD *)(v33 + (v653 >> 30));
                v1513 = v654 >> 32;
                result = v655 >> 32;
                v1529 = 4 * v651;
                v658 = 4 * *(_QWORD *)((char *)v649 + (v653 >> 29));
                do
                {
                  if (v657 >= 1)
                  {
                    v659 = 0;
                    v660 = *(_QWORD *)(v652 + 8 * v1513);
                    v661 = *(_DWORD *)(v33 + 4 * v1513);
                    v662 = 4 * *(_QWORD *)&v649[2 * v1513];
                    v663 = v646;
                    v664 = v648;
                    do
                    {
                      if (v661 >= 1)
                      {
                        v665 = 0;
                        v666 = *(_QWORD *)(v652 + 8 * result);
                        v667 = *(_DWORD *)(v33 + 4 * result);
                        v668 = *a2;
                        v669 = 4 * *(_QWORD *)&v649[2 * result];
                        v670 = v663;
                        v671 = v664;
                        do
                        {
                          if (v667 >= 1)
                          {
                            v672 = *(_QWORD *)(v668 + 152);
                            v673 = (float *)((char *)v31[19] + v670);
                            v674 = v667;
                            do
                            {
                              *(_BYTE *)(v672 + v671) = *v673 != 0.0;
                              v672 += v666;
                              v673 = (float *)((char *)v673 + v669);
                              --v674;
                            }
                            while (v674);
                          }
                          v671 += v660;
                          ++v665;
                          v670 += v662;
                        }
                        while (v665 != v661);
                      }
                      v664 += v656;
                      ++v659;
                      v663 += v658;
                    }
                    while (v659 != v657);
                  }
                  v648 += v1546;
                  ++v647;
                  v646 += v1529;
                }
                while (v647 != v1563);
              }
              break;
            case 5:
              v675 = (v34 << 30) - 0x500000000;
              v1473 = *(_DWORD *)(v33 + (v675 >> 30));
              if (v1473 >= 1)
              {
                v1493 = 0;
                v1503 = 0;
                v1483 = 0;
                v676 = v31[3];
                v677 = v675 >> 29;
                v678 = v3[3];
                v1463 = *(_QWORD *)(v678 + v677);
                v679 = (v34 << 30) - 0x400000000;
                v1547 = *(_QWORD *)(v678 + (v679 >> 29));
                v1564 = *(_DWORD *)(v33 + (v679 >> 30));
                v1444 = (uint64_t)((v34 << 30) - 0x300000000) >> 32;
                v1514 = (uint64_t)((v34 << 30) - 0x200000000) >> 32;
                v680 = (uint64_t)((v34 << 30) - 0x100000000) >> 32;
                v1453 = 4 * *(_QWORD *)((char *)v676 + v677);
                v1530 = 4 * *(_QWORD *)((char *)v676 + (v679 >> 29));
                do
                {
                  if (v1564 >= 1)
                  {
                    v681 = 0;
                    v682 = *(_QWORD *)(v678 + 8 * v1444);
                    v683 = *(_DWORD *)(v33 + 4 * v1444);
                    v684 = 4 * *(_QWORD *)&v676[2 * v1444];
                    v685 = v1493;
                    v686 = v1503;
                    do
                    {
                      if (v683 >= 1)
                      {
                        v687 = 0;
                        v688 = *(_QWORD *)(v678 + 8 * v1514);
                        v689 = *(_DWORD *)(v33 + 4 * v1514);
                        v690 = 4 * *(_QWORD *)&v676[2 * v1514];
                        v691 = v686;
                        v692 = v685;
                        do
                        {
                          if (v689 >= 1)
                          {
                            v693 = 0;
                            v694 = *(_QWORD *)(v678 + 8 * v680);
                            v695 = *(_DWORD *)(v33 + 4 * v680);
                            v696 = *a2;
                            v697 = 4 * *(_QWORD *)&v676[2 * v680];
                            v698 = v691;
                            v699 = v692;
                            do
                            {
                              if (v695 >= 1)
                              {
                                v700 = *(_QWORD *)(v696 + 152);
                                v701 = (float *)((char *)v31[19] + v698);
                                v702 = v695;
                                do
                                {
                                  result = *v701 != 0.0;
                                  *(_BYTE *)(v700 + v699) = result;
                                  v700 += v694;
                                  v701 = (float *)((char *)v701 + v697);
                                  --v702;
                                }
                                while (v702);
                              }
                              v699 += v688;
                              ++v693;
                              v698 += v690;
                            }
                            while (v693 != v689);
                          }
                          v692 += v682;
                          ++v687;
                          v691 += v684;
                        }
                        while (v687 != v683);
                      }
                      v685 += v1547;
                      ++v681;
                      v686 += v1530;
                    }
                    while (v681 != v1564);
                  }
                  v1493 += v1463;
                  v1503 += v1453;
                  ++v1483;
                }
                while (v1483 != v1473);
              }
              break;
            default:
              LODWORD(v562) = 1;
              v563 = -20;
              do
              {
                v562 = *(int *)(v32 + v563) * (uint64_t)(int)v562;
                v563 += 4;
              }
              while (v563);
              v1433 = v31[6];
              if (v1433)
              {
                v564 = 0;
                v1413 = *v3;
                v565 = (v34 << 30) - 0x500000000;
                v1423 = (v34 >> 2) - 1;
                v566 = v31[3];
                v567 = v3[3];
                v1462 = *(_QWORD *)(v567 + (v565 >> 29));
                v1472 = *(_DWORD *)(v33 + (v565 >> 30));
                v1418 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1409 = (uint64_t)((v34 << 30) - 0x400000000) >> 32;
                v1512 = (uint64_t)((v34 << 30) - 0x200000000) >> 32;
                v568 = (uint64_t)((v34 << 30) - 0x100000000) >> 32;
                v1443 = (uint64_t)((v34 << 30) - 0x300000000) >> 32;
                v1452 = 4 * *(_QWORD *)((char *)v566 + (v565 >> 29));
                v1428 = v562;
                do
                {
                  v569 = v1423;
                  if ((v1423 & 0x80000000) != 0)
                  {
                    v570 = 0;
                  }
                  else
                  {
                    v570 = 0;
                    LODWORD(result) = v564;
                    do
                    {
                      v571 = ldiv((int)result, *(int *)(v33 + 4 * v569));
                      result = v571.quot;
                      v570 += *(_QWORD *)&v566[2 * v569--] * v571.rem;
                    }
                    while (v569 != -1);
                  }
                  v572 = v1418;
                  v1438 = v564;
                  v573 = 0;
                  if ((v1418 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v564;
                    do
                    {
                      v574 = ldiv((int)result, *(int *)(v1413 + 4 * v572));
                      result = v574.quot;
                      v573 += *(_QWORD *)(v567 + 8 * v572--) * v574.rem;
                    }
                    while (v572 != -1);
                  }
                  if (v1472 >= 1)
                  {
                    v575 = 0;
                    v1545 = *(_QWORD *)(v567 + 8 * v1409);
                    v1562 = *(_DWORD *)(v33 + 4 * v1409);
                    v1502 = 4 * v570;
                    v1528 = 4 * *(_QWORD *)&v566[2 * v1409];
                    do
                    {
                      v1482 = v575;
                      v1492 = v573;
                      if (v1562 >= 1)
                      {
                        v576 = 0;
                        v577 = *(_QWORD *)(v567 + 8 * v1443);
                        v578 = *(_DWORD *)(v33 + 4 * v1443);
                        v579 = 4 * *(_QWORD *)&v566[2 * v1443];
                        v581 = v573;
                        v580 = v1502;
                        do
                        {
                          if (v578 >= 1)
                          {
                            v582 = 0;
                            v583 = *(_QWORD *)(v567 + 8 * v1512);
                            v584 = *(_DWORD *)(v33 + 4 * v1512);
                            v585 = 4 * *(_QWORD *)&v566[2 * v1512];
                            v586 = v580;
                            result = v581;
                            do
                            {
                              if (v584 >= 1)
                              {
                                v587 = 0;
                                v588 = *(_QWORD *)(v567 + 8 * v568);
                                v589 = *(_DWORD *)(v33 + 4 * v568);
                                v590 = *a2;
                                v591 = 4 * *(_QWORD *)&v566[2 * v568];
                                v592 = v586;
                                v593 = result;
                                do
                                {
                                  if (v589 >= 1)
                                  {
                                    v594 = *(_QWORD *)(v590 + 152);
                                    v595 = (float *)((char *)v31[19] + v592);
                                    v596 = v589;
                                    do
                                    {
                                      *(_BYTE *)(v594 + v593) = *v595 != 0.0;
                                      v594 += v588;
                                      v595 = (float *)((char *)v595 + v591);
                                      --v596;
                                    }
                                    while (v596);
                                  }
                                  v593 += v583;
                                  ++v587;
                                  v592 += v585;
                                }
                                while (v587 != v584);
                              }
                              result += v577;
                              ++v582;
                              v586 += v579;
                            }
                            while (v582 != v578);
                          }
                          v581 += v1545;
                          ++v576;
                          v580 += v1528;
                        }
                        while (v576 != v1562);
                      }
                      v573 = v1492 + v1462;
                      v575 = v1482 + 1;
                      v1502 += v1452;
                    }
                    while (v1482 + 1 != v1472);
                  }
                  v564 += v1428;
                }
                while ((unint64_t)v1433 > v1438 + v1428);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          goto LABEL_6;
        case 1:
          v43 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v43)
          {
            v44 = *(float **)(*(_QWORD *)result + 152);
            v45 = (_BYTE *)v3[19];
            v46 = 4 * v43;
            do
            {
              v47 = *v44++;
              *v45++ = (int)v47;
              v46 -= 4;
            }
            while (v46);
          }
          break;
        case 2:
          v48 = *(int ***)result;
          v49 = **(int ***)result;
          switch(v48[1] - *v48)
          {
            case 1:
              if (*v49 >= 1)
              {
                v50 = 0;
                v51 = 0;
                v52 = v48[19];
                v53 = v3[19];
                do
                {
                  *(_BYTE *)(v53 + v50) = (int)*(float *)&v52[v51];
                  v51 += *(_QWORD *)v48[3];
                  ++v50;
                }
                while (**v48 > (int)v50);
              }
              break;
            case 2:
              v255 = *v49;
              if (*v49 >= 1)
              {
                v256 = 0;
                v257 = 0;
                v258 = 0;
                v259 = v48[19];
                v260 = v3[19];
                do
                {
                  v261 = v49[1];
                  if (v261 < 1)
                  {
                    v262 = v48[3];
                    v263 = *((_QWORD *)v262 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v260 + v257 + result) = (int)*(float *)&v259[v258];
                      v262 = v48[3];
                      v263 = *((_QWORD *)v262 + 1);
                      v258 += v263;
                      v49 = *v48;
                      v261 = (*v48)[1];
                      ++result;
                    }
                    while ((int)result < v261);
                    v255 = *v49;
                    v257 += result;
                  }
                  v258 = *(_QWORD *)v262 + v258 - v263 * v261;
                  ++v256;
                }
                while (v256 < v255);
              }
              break;
            case 3:
              v264 = *v49;
              if (*v49 >= 1)
              {
                v265 = 0;
                v266 = 0;
                v267 = 0;
                v268 = v48[19];
                v269 = v3[19];
                do
                {
                  v270 = v49[1];
                  if (v270 < 1)
                  {
                    v274 = v48[3];
                    v275 = *((_QWORD *)v274 + 1);
                  }
                  else
                  {
                    for (i = 0; i < v270; ++i)
                    {
                      v272 = v49[2];
                      if (v272 < 1)
                      {
                        v274 = v48[3];
                        result = *((_QWORD *)v274 + 2);
                      }
                      else
                      {
                        v273 = 0;
                        do
                        {
                          *(_BYTE *)(v269 + v266 + v273) = (int)*(float *)&v268[v267];
                          v274 = v48[3];
                          result = *((_QWORD *)v274 + 2);
                          v267 += result;
                          v49 = *v48;
                          v272 = (*v48)[2];
                          ++v273;
                        }
                        while ((int)v273 < v272);
                        v266 += v273;
                      }
                      v275 = *((_QWORD *)v274 + 1);
                      v267 = v275 + v267 - result * v272;
                      v270 = v49[1];
                    }
                    v264 = *v49;
                  }
                  v267 = *(_QWORD *)v274 + v267 - v275 * v270;
                  ++v265;
                }
                while (v265 < v264);
              }
              break;
            case 4:
              v276 = *v49;
              if (*v49 >= 1)
              {
                v277 = 0;
                v278 = 0;
                v279 = 0;
                v280 = v48[19];
                v281 = v3[19];
                do
                {
                  v282 = v49[1];
                  if (v282 < 1)
                  {
                    v288 = v48[3];
                    v290 = *((_QWORD *)v288 + 1);
                  }
                  else
                  {
                    for (j = 0; j < v282; ++j)
                    {
                      v284 = v49[2];
                      if (v284 < 1)
                      {
                        v288 = v48[3];
                        v289 = *((_QWORD *)v288 + 2);
                      }
                      else
                      {
                        for (k = 0; k < v284; ++k)
                        {
                          v286 = v49[3];
                          if (v286 < 1)
                          {
                            v288 = v48[3];
                            result = *((_QWORD *)v288 + 3);
                          }
                          else
                          {
                            v287 = 0;
                            do
                            {
                              *(_BYTE *)(v281 + v278 + v287) = (int)*(float *)&v280[v279];
                              v288 = v48[3];
                              result = *((_QWORD *)v288 + 3);
                              v279 += result;
                              v49 = *v48;
                              v286 = (*v48)[3];
                              ++v287;
                            }
                            while ((int)v287 < v286);
                            v278 += v287;
                          }
                          v289 = *((_QWORD *)v288 + 2);
                          v279 = v289 + v279 - result * v286;
                          v284 = v49[2];
                        }
                      }
                      v290 = *((_QWORD *)v288 + 1);
                      v279 = v290 + v279 - v289 * v284;
                      v282 = v49[1];
                    }
                    v276 = *v49;
                  }
                  v279 = *(_QWORD *)v288 + v279 - v290 * v282;
                  ++v277;
                }
                while (v277 < v276);
              }
              break;
            default:
              if (v3[6])
              {
                v246 = 0;
                v247 = v48[19];
                v248 = v3[19];
                do
                {
                  v249 = *v48;
                  v250 = (unint64_t)((char *)v48[1] - (char *)*v48) >> 2;
                  v251 = 0;
                  v252 = (v250 - 1);
                  if ((int)v250 - 1 >= 0)
                  {
                    v253 = v48[3];
                    LODWORD(result) = v246;
                    do
                    {
                      v254 = ldiv((int)result, v249[v252]);
                      result = v254.quot;
                      v251 += *(_QWORD *)&v253[2 * v252--] * v254.rem;
                    }
                    while (v252 != -1);
                  }
                  *(_BYTE *)(v248 + v246++) = (int)*(float *)&v247[v251];
                }
                while (v246 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v54 = *(int ***)result;
          v55 = (uint64_t *)(*(_QWORD *)result + 24);
          v56 = v3 + 3;
          v57 = **(_QWORD **)result;
          v58 = *(_QWORD *)(*(_QWORD *)result + 8);
          v59 = v58 - v57;
          switch((v58 - v57) >> 2)
          {
            case 1:
              v60 = (v59 << 30) - 0x100000000;
              v61 = *(_DWORD *)(v57 + (v60 >> 30));
              if (v61 >= 1)
              {
                v62 = v60 >> 29;
                v63 = *(_QWORD *)(*v55 + v62);
                v64 = *(_QWORD *)(*v56 + v62);
                v65 = (_BYTE *)v3[19];
                v66 = (float *)v54[19];
                v67 = 4 * v63;
                do
                {
                  *v65 = (int)*v66;
                  v65 += v64;
                  v66 = (float *)((char *)v66 + v67);
                  --v61;
                }
                while (v61);
              }
              break;
            case 2:
              v724 = (v59 << 30) - 0x200000000;
              v725 = *(_DWORD *)(v57 + (v724 >> 30));
              if (v725 >= 1)
              {
                v726 = 0;
                v727 = 0;
                v728 = 0;
                v729 = v724 >> 29;
                v730 = *(_QWORD *)(*v55 + v729);
                v731 = *(_QWORD *)(*v56 + v729);
                v732 = 4 * v730;
                do
                {
                  result = *(_QWORD *)v5;
                  v733 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v734 = *(int *)((char *)*v54 + (v733 >> 30));
                  if (v734 >= 1)
                  {
                    v735 = v733 >> 29;
                    v736 = *(_QWORD *)((char *)v54[3] + v735);
                    v737 = *(_QWORD *)(*v56 + v735);
                    v738 = *(_QWORD *)(*a2 + 152);
                    result = *(_QWORD *)(result + 152) + v726;
                    v739 = 4 * v736;
                    do
                    {
                      *(_BYTE *)(v738 + v728) = (int)*(float *)result;
                      v738 += v737;
                      result += v739;
                      --v734;
                    }
                    while (v734);
                  }
                  v728 += v731;
                  ++v727;
                  v726 += v732;
                }
                while (v727 != v725);
              }
              break;
            case 3:
              v740 = (v59 << 30) - 0x300000000;
              v741 = *(_DWORD *)(v57 + (v740 >> 30));
              if (v741 >= 1)
              {
                v742 = 0;
                v743 = 0;
                v744 = 0;
                v745 = v740 >> 29;
                v746 = *(_QWORD *)(*v55 + v745);
                v747 = *(_QWORD *)(*v56 + v745);
                v748 = 4 * v746;
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v749 = *(int *)((char *)*v54 + (result >> 30));
                  if (v749 >= 1)
                  {
                    v750 = 0;
                    v751 = result >> 29;
                    v752 = *(_QWORD *)((char *)v54[3] + v751);
                    result = *(_QWORD *)(*v56 + v751);
                    v753 = 4 * v752;
                    v754 = v742;
                    v755 = v744;
                    do
                    {
                      v756 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v757 = *(int *)((char *)*v54 + (v756 >> 30));
                      if (v757 >= 1)
                      {
                        v758 = v756 >> 29;
                        v759 = *(_QWORD *)((char *)v54[3] + v758);
                        v760 = *(_QWORD *)(*v56 + v758);
                        v761 = *(_QWORD *)(*a2 + 152);
                        v762 = (float *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + v754);
                        v763 = 4 * v759;
                        do
                        {
                          *(_BYTE *)(v761 + v755) = (int)*v762;
                          v761 += v760;
                          v762 = (float *)((char *)v762 + v763);
                          --v757;
                        }
                        while (v757);
                      }
                      v755 += result;
                      ++v750;
                      v754 += v753;
                    }
                    while (v750 != v749);
                  }
                  v744 += v747;
                  ++v743;
                  v742 += v748;
                }
                while (v743 != v741);
              }
              break;
            case 4:
              goto LABEL_554;
            case 5:
              v764 = (v59 << 30) - 0x500000000;
              v765 = *(_DWORD *)(v57 + (v764 >> 30));
              if (v765 >= 1)
              {
                v766 = 0;
                v767 = 0;
                v768 = v764 >> 29;
                v769 = *(_QWORD *)(*v55 + v768);
                v770 = *(_QWORD *)(*v56 + v768);
                do
                {
                  v766 += v769;
                  v767 += v770;
                  --v765;
                }
                while (v765);
              }
              break;
            default:
              LODWORD(v703) = 1;
              v704 = -20;
              do
              {
                v703 = *(int *)(v58 + v704) * (uint64_t)(int)v703;
                v704 += 4;
              }
              while (v704);
              if (v54[6])
              {
                result = 0;
                v705 = *(_QWORD **)v5;
                v1548 = v56;
                v1515 = v703;
                do
                {
                  v706 = *v54;
                  v707 = (unint64_t)((char *)v54[1] - (char *)*v54) >> 2;
                  v708 = (v707 - 1);
                  v1565 = result;
                  v1531 = v705;
                  v709 = 0;
                  if ((int)v707 - 1 >= 0)
                  {
                    v710 = *v55;
                    do
                    {
                      v711 = ldiv((int)result, v706[v708]);
                      LODWORD(result) = v711.quot;
                      v709 += *(_QWORD *)(v710 + 8 * v708--) * v711.rem;
                    }
                    while (v708 != -1);
                  }
                  v712 = *(_QWORD *)*a2;
                  v713 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v712) >> 2;
                  v714 = *v1548;
                  v715 = 0;
                  v716 = (v713 - 1);
                  if ((int)v713 - 1 >= 0)
                  {
                    quot = v1565;
                    do
                    {
                      v718 = ldiv(quot, *(int *)(v712 + 4 * v716));
                      quot = v718.quot;
                      v715 += *(_QWORD *)(v714 + 8 * v716--) * v718.rem;
                    }
                    while (v716 != -1);
                  }
                  v705 = v1531;
                  v719 = ((v705[1] - *v705) << 30) - 0x500000000;
                  v720 = *(int *)((char *)v706 + (v719 >> 30));
                  if (v720 >= 1)
                  {
                    v721 = v719 >> 29;
                    v722 = *(_QWORD *)(*v55 + v721);
                    v723 = *(_QWORD *)(v714 + v721);
                    do
                    {
                      v709 += v722;
                      v715 += v723;
                      --v720;
                    }
                    while (v720);
                    v705 = *(_QWORD **)v5;
                  }
                  result = v1565 + v1515;
                }
                while (v705[6] > (unint64_t)(v1565 + v1515));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v7 = v3[6];
          if (v7)
          {
            v8 = **(float **)(*(_QWORD *)result + 152);
            v9 = (unsigned int *)v3[19];
            do
            {
              *v9++ = v8;
              --v7;
            }
            while (v7);
          }
          break;
        case 1:
          v68 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v68)
          {
            v69 = *(float **)(*(_QWORD *)result + 152);
            v70 = (_DWORD *)v3[19];
            v71 = 4 * v68;
            do
            {
              v72 = *v69++;
              *v70++ = v72;
              v71 -= 4;
            }
            while (v71);
          }
          break;
        case 2:
          v73 = *(int ***)result;
          v74 = **(int ***)result;
          v75 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v74;
          switch(v75 >> 2)
          {
            case 1:
              if (*v74 >= 1)
              {
                v76 = 0;
                v77 = (float *)v73[19];
                v78 = v3[19];
                v79 = 4 * *(_QWORD *)v73[3];
                do
                {
                  *(_DWORD *)(v78 + 4 * v76) = *v77;
                  v77 = (float *)((char *)v77 + v79);
                  ++v76;
                }
                while (*v74 > (int)v76);
              }
              break;
            case 2:
              v300 = *v74;
              if (*v74 >= 1)
              {
                v301 = 0;
                v302 = 0;
                v303 = 0;
                v304 = v73[19];
                v305 = v3[19];
                v306 = v73[3];
                v307 = *(_QWORD *)v306;
                v308 = *((_QWORD *)v306 + 1);
                v309 = v74[1];
                do
                {
                  if (v309 >= 1)
                  {
                    v310 = 0;
                    do
                    {
                      *(_DWORD *)(v305 + 4 * v302 + 4 * v310) = *(float *)&v304[v303];
                      v303 += v308;
                      v309 = v74[1];
                      ++v310;
                    }
                    while ((int)v310 < v309);
                    v300 = *v74;
                    v302 += v310;
                  }
                  v303 = v303 + v307 - v308 * v309;
                  ++v301;
                }
                while (v301 < v300);
              }
              break;
            case 3:
              result = *v74;
              if ((int)result >= 1)
              {
                v311 = 0;
                v312 = 0;
                v313 = 0;
                v314 = v73[19];
                v315 = v3[19];
                v316 = v73[3];
                v317 = *(_QWORD *)v316;
                v318 = *((_QWORD *)v316 + 1);
                v319 = v74[1];
                do
                {
                  if (v319 >= 1)
                  {
                    v320 = 0;
                    v321 = v73[3];
                    v322 = *((_QWORD *)v316 + 2);
                    v323 = v74[2];
                    do
                    {
                      if (v323 >= 1)
                      {
                        v324 = 0;
                        v325 = *((_QWORD *)v321 + 2);
                        do
                        {
                          *(_DWORD *)(v315 + 4 * v312 + 4 * v324) = *(float *)&v314[v313];
                          v313 += v325;
                          v323 = v74[2];
                          ++v324;
                        }
                        while ((int)v324 < v323);
                        v319 = v74[1];
                        v312 += v324;
                      }
                      v313 = v313 + v318 - v322 * v323;
                      ++v320;
                    }
                    while (v320 < v319);
                    result = *v74;
                  }
                  v313 = v313 + v317 - v318 * v319;
                  ++v311;
                }
                while (v311 < (int)result);
              }
              break;
            case 4:
              v326 = *v74;
              if (*v74 >= 1)
              {
                v327 = 0;
                v328 = 0;
                v329 = 0;
                v330 = v73[19];
                v331 = v3[19];
                v332 = v73[3];
                v333 = *(_QWORD *)v332;
                v334 = *((_QWORD *)v332 + 1);
                v335 = v74[1];
                do
                {
                  if (v335 >= 1)
                  {
                    v336 = 0;
                    v337 = v73[3];
                    v338 = *((_QWORD *)v332 + 2);
                    v339 = v74[2];
                    do
                    {
                      if (v339 >= 1)
                      {
                        v340 = 0;
                        v341 = v73[3];
                        v342 = *((_QWORD *)v337 + 2);
                        v343 = *((_QWORD *)v337 + 3);
                        v344 = v74[3];
                        do
                        {
                          if (v344 >= 1)
                          {
                            v345 = 0;
                            v346 = *((_QWORD *)v341 + 3);
                            do
                            {
                              *(_DWORD *)(v331 + 4 * v328 + 4 * v345) = *(float *)&v330[v329];
                              v329 += v346;
                              v344 = v74[3];
                              ++v345;
                            }
                            while ((int)v345 < v344);
                            v339 = v74[2];
                            v328 += v345;
                          }
                          v329 = v329 + v342 - v343 * v344;
                          ++v340;
                        }
                        while (v340 < v339);
                        v335 = v74[1];
                      }
                      v329 = v329 + v334 - v338 * v339;
                      ++v336;
                    }
                    while (v336 < v335);
                    v326 = *v74;
                  }
                  result = v335;
                  v329 = v329 + v333 - v334 * v335;
                  ++v327;
                }
                while (v327 < v326);
              }
              break;
            default:
              v291 = v3[6];
              if (v291)
              {
                v292 = 0;
                v293 = v73[19];
                v294 = v3[19];
                v295 = ((unint64_t)v75 >> 2) - 1;
                v296 = v73[3];
                do
                {
                  v297 = 0;
                  if ((v295 & 0x80000000) == 0)
                  {
                    v298 = v295;
                    LODWORD(result) = v292;
                    do
                    {
                      v299 = ldiv((int)result, v74[v298]);
                      result = v299.quot;
                      v297 += *(_QWORD *)&v296[2 * v298--] * v299.rem;
                    }
                    while (v298 != -1);
                  }
                  *(_DWORD *)(v294 + 4 * v292++) = *(float *)&v293[v297];
                }
                while (v292 != v291);
              }
              break;
          }
          break;
        case 3:
          v80 = *(unsigned int ***)result;
          v82 = **(_QWORD **)result;
          v81 = *(_QWORD *)(*(_QWORD *)result + 8);
          v83 = v81 - v82;
          switch((v81 - v82) >> 2)
          {
            case 1:
              v84 = (v83 << 30) - 0x100000000;
              v85 = *(_DWORD *)(v82 + (v84 >> 30));
              if (v85 >= 1)
              {
                v86 = v84 >> 29;
                v87 = *(_QWORD *)((char *)v80[3] + v86);
                v88 = *(_QWORD *)(v3[3] + v86);
                v89 = (_DWORD *)v3[19];
                v90 = (float *)v80[19];
                v91 = 4 * v88;
                v92 = 4 * v87;
                do
                {
                  *v89 = *v90;
                  v89 = (_DWORD *)((char *)v89 + v91);
                  v90 = (float *)((char *)v90 + v92);
                  --v85;
                }
                while (v85);
              }
              break;
            case 2:
              v807 = (v83 << 30) - 0x200000000;
              v808 = *(_DWORD *)(v82 + (v807 >> 30));
              if (v808 >= 1)
              {
                v809 = 0;
                v810 = 0;
                v811 = 0;
                v812 = v80[3];
                v813 = v807 >> 29;
                v814 = *(_QWORD *)((char *)v812 + v813);
                v815 = v3[3];
                v816 = (v83 << 30) - 0x100000000;
                v817 = *(_QWORD *)((char *)v812 + (v816 >> 29));
                v818 = *(_QWORD *)(v815 + (v816 >> 29));
                v819 = v816 >> 32;
                v820 = 4 * *(_QWORD *)(v815 + v813);
                v821 = 4 * v818;
                v822 = 4 * v814;
                v823 = 4 * v817;
                do
                {
                  result = *(unsigned int *)(v82 + 4 * v819);
                  if ((int)result >= 1)
                  {
                    v824 = (_DWORD *)(v3[19] + v810);
                    v825 = (float *)((char *)v80[19] + v809);
                    do
                    {
                      *v824 = *v825;
                      v824 = (_DWORD *)((char *)v824 + v821);
                      v825 = (float *)((char *)v825 + v823);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  ++v811;
                  v810 += v820;
                  v809 += v822;
                }
                while (v811 != v808);
              }
              break;
            case 3:
              v826 = (v83 << 30) - 0x300000000;
              v827 = *(_DWORD *)(v82 + (v826 >> 30));
              if (v827 >= 1)
              {
                v828 = 0;
                v829 = 0;
                v830 = 0;
                v831 = v83 << 30;
                v832 = v80[3];
                v833 = v826 >> 29;
                v834 = *(_QWORD *)((char *)v832 + v833);
                v835 = v3[3];
                v836 = *(_QWORD *)(v835 + v833);
                v837 = (v831 - 0x200000000) >> 29;
                v838 = *(_QWORD *)((char *)v832 + v837);
                v839 = (v831 - 0x200000000) >> 32;
                v840 = (v831 - 0x100000000) >> 32;
                v841 = 4 * v836;
                v842 = 4 * *(_QWORD *)(v835 + v837);
                result = 4 * v834;
                v843 = 4 * v838;
                do
                {
                  v844 = *(_DWORD *)(v82 + 4 * v839);
                  if (v844 >= 1)
                  {
                    v845 = 0;
                    v846 = (_QWORD *)*a2;
                    v847 = 4 * *(_QWORD *)(v835 + 8 * v840);
                    v848 = 4 * *(_QWORD *)&v832[2 * v840];
                    v849 = v828;
                    v850 = v829;
                    do
                    {
                      v851 = *(_DWORD *)(v82 + 4 * v840);
                      if (v851 >= 1)
                      {
                        v852 = (_DWORD *)(v846[19] + v850);
                        v853 = (float *)((char *)v80[19] + v849);
                        do
                        {
                          *v852 = *v853;
                          v852 = (_DWORD *)((char *)v852 + v847);
                          v853 = (float *)((char *)v853 + v848);
                          --v851;
                        }
                        while (v851);
                      }
                      ++v845;
                      v850 += v842;
                      v849 += v843;
                    }
                    while (v845 != v844);
                  }
                  ++v830;
                  v829 += v841;
                  v828 += result;
                }
                while (v830 != v827);
              }
              break;
            case 4:
              v854 = (v83 << 30) - 0x400000000;
              v1567 = *(_DWORD *)(v82 + (v854 >> 30));
              if (v1567 >= 1)
              {
                v855 = 0;
                v856 = 0;
                v857 = 0;
                v858 = v83 << 30;
                v859 = v80[3];
                v860 = v854 >> 29;
                v861 = v3[3];
                v1550 = (v858 - 0x300000000) >> 32;
                v862 = (v858 - 0x300000000) >> 29;
                v863 = *(_QWORD *)((char *)v859 + v862);
                v864 = *(_QWORD *)(v861 + v862);
                v865 = (v858 - 0x200000000) >> 32;
                v866 = (v858 - 0x100000000) >> 32;
                v1533 = 4 * *(_QWORD *)(v861 + v860);
                result = 4 * v864;
                v1517 = 4 * *(_QWORD *)((char *)v859 + v860);
                v867 = 4 * v863;
                do
                {
                  v868 = *(_DWORD *)(v82 + 4 * v1550);
                  if (v868 >= 1)
                  {
                    v869 = 0;
                    v870 = 4 * *(_QWORD *)(v861 + 8 * v865);
                    v871 = 4 * *(_QWORD *)&v859[2 * v865];
                    v872 = v855;
                    v873 = v856;
                    do
                    {
                      v874 = *(_DWORD *)(v82 + 4 * v865);
                      if (v874 >= 1)
                      {
                        v875 = 0;
                        v876 = (_QWORD *)*a2;
                        v877 = 4 * *(_QWORD *)(v861 + 8 * v866);
                        v878 = 4 * *(_QWORD *)&v859[2 * v866];
                        v879 = v872;
                        v880 = v873;
                        do
                        {
                          v881 = *(_DWORD *)(v82 + 4 * v866);
                          if (v881 >= 1)
                          {
                            v882 = (_DWORD *)(v876[19] + v880);
                            v883 = (float *)((char *)v80[19] + v879);
                            do
                            {
                              *v882 = *v883;
                              v882 = (_DWORD *)((char *)v882 + v877);
                              v883 = (float *)((char *)v883 + v878);
                              --v881;
                            }
                            while (v881);
                          }
                          ++v875;
                          v880 += v870;
                          v879 += v871;
                        }
                        while (v875 != v874);
                      }
                      ++v869;
                      v873 += result;
                      v872 += v867;
                    }
                    while (v869 != v868);
                  }
                  ++v857;
                  v856 += v1533;
                  v855 += v1517;
                }
                while (v857 != v1567);
              }
              break;
            case 5:
              v884 = (v83 << 30) - 0x500000000;
              v1475 = *(_DWORD *)(v82 + (v884 >> 30));
              if (v1475 >= 1)
              {
                v1495 = 0;
                v1505 = 0;
                v1485 = 0;
                v885 = v83 << 30;
                v886 = v80[3];
                v887 = v884 >> 29;
                v888 = v3[3];
                v1465 = (v885 - 0x400000000) >> 32;
                v889 = (v885 - 0x400000000) >> 29;
                result = *(_QWORD *)((char *)v886 + v889);
                v1551 = (v885 - 0x300000000) >> 32;
                v890 = (v885 - 0x200000000) >> 32;
                v891 = (v885 - 0x100000000) >> 32;
                v1455 = 4 * *(_QWORD *)(v888 + v887);
                v1534 = 4 * *(_QWORD *)(v888 + v889);
                v1446 = 4 * *(_QWORD *)((char *)v886 + v887);
                v1518 = 4 * result;
                do
                {
                  v1568 = *(_DWORD *)(v82 + 4 * v1465);
                  if (v1568 >= 1)
                  {
                    v892 = 0;
                    v893 = 4 * *(_QWORD *)(v888 + 8 * v1551);
                    v894 = 4 * *(_QWORD *)&v886[2 * v1551];
                    v896 = v1495;
                    v895 = v1505;
                    do
                    {
                      v897 = *(_DWORD *)(v82 + 4 * v1551);
                      if (v897 >= 1)
                      {
                        v898 = 0;
                        v899 = 4 * *(_QWORD *)(v888 + 8 * v890);
                        v900 = 4 * *(_QWORD *)&v886[2 * v890];
                        v901 = v895;
                        v902 = v896;
                        do
                        {
                          v903 = *(_DWORD *)(v82 + 4 * v890);
                          if (v903 >= 1)
                          {
                            v904 = 0;
                            result = *a2;
                            v905 = 4 * *(_QWORD *)(v888 + 8 * v891);
                            v906 = 4 * *(_QWORD *)&v886[2 * v891];
                            v907 = v901;
                            v908 = v902;
                            do
                            {
                              v909 = *(_DWORD *)(v82 + 4 * v891);
                              if (v909 >= 1)
                              {
                                v910 = (_DWORD *)(*(_QWORD *)(result + 152) + v908);
                                v911 = (float *)((char *)v80[19] + v907);
                                do
                                {
                                  *v910 = *v911;
                                  v910 = (_DWORD *)((char *)v910 + v905);
                                  v911 = (float *)((char *)v911 + v906);
                                  --v909;
                                }
                                while (v909);
                              }
                              ++v904;
                              v908 += v899;
                              v907 += v900;
                            }
                            while (v904 != v903);
                          }
                          ++v898;
                          v902 += v893;
                          v901 += v894;
                        }
                        while (v898 != v897);
                      }
                      ++v892;
                      v896 += v1534;
                      v895 += v1518;
                    }
                    while (v892 != v1568);
                  }
                  v1495 += v1455;
                  v1505 += v1446;
                  ++v1485;
                }
                while (v1485 != v1475);
              }
              break;
            default:
              LODWORD(v771) = 1;
              v772 = -20;
              do
              {
                v771 = *(int *)(v81 + v772) * (uint64_t)(int)v771;
                v772 += 4;
              }
              while (v772);
              v1429 = v80[6];
              if (v1429)
              {
                result = 0;
                v1454 = *v3;
                v773 = (v83 << 30) - 0x500000000;
                v1419 = (v83 >> 2) - 1;
                v774 = v80[3];
                v1414 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1410 = v773 >> 32;
                v775 = v3[3];
                v1464 = (uint64_t)((v83 << 30) - 0x400000000) >> 32;
                v1549 = (uint64_t)((v83 << 30) - 0x300000000) >> 32;
                v776 = (uint64_t)((v83 << 30) - 0x200000000) >> 32;
                v777 = (uint64_t)((v83 << 30) - 0x100000000) >> 32;
                v1439 = 4 * *(_QWORD *)((char *)v774 + (v773 >> 29));
                v1445 = 4 * *(_QWORD *)(v775 + (v773 >> 29));
                v1424 = v771;
                do
                {
                  v778 = v1419;
                  v1434 = result;
                  v779 = 0;
                  if ((v1419 & 0x80000000) != 0)
                  {
                    v780 = v1414;
                  }
                  else
                  {
                    v780 = v1414;
                    do
                    {
                      v781 = ldiv((int)result, *(int *)(v82 + 4 * v778));
                      LODWORD(result) = v781.quot;
                      v779 += *(_QWORD *)&v774[2 * v778--] * v781.rem;
                    }
                    while (v778 != -1);
                  }
                  v782 = 0;
                  if ((v780 & 0x80000000) == 0)
                  {
                    v783 = v1434;
                    do
                    {
                      v784 = ldiv(v783, *(int *)(v1454 + 4 * v780));
                      v783 = v784.quot;
                      v782 += *(_QWORD *)(v775 + 8 * v780--) * v784.rem;
                    }
                    while (v780 != -1);
                  }
                  v1474 = *(_DWORD *)(v82 + 4 * v1410);
                  if (v1474 >= 1)
                  {
                    v785 = 0;
                    v1504 = 4 * v782;
                    v1532 = 4 * *(_QWORD *)(v775 + 8 * v1464);
                    v1494 = 4 * v779;
                    v1516 = 4 * *(_QWORD *)&v774[2 * v1464];
                    do
                    {
                      v1484 = v785;
                      v1566 = *(_DWORD *)(v82 + 4 * v1464);
                      if (v1566 >= 1)
                      {
                        v786 = 0;
                        v787 = 4 * *(_QWORD *)(v775 + 8 * v1549);
                        v788 = 4 * *(_QWORD *)&v774[2 * v1549];
                        v790 = v1494;
                        v789 = v1504;
                        do
                        {
                          v791 = *(_DWORD *)(v82 + 4 * v1549);
                          if (v791 >= 1)
                          {
                            v792 = 0;
                            v793 = 4 * *(_QWORD *)(v775 + 8 * v776);
                            v794 = 4 * *(_QWORD *)&v774[2 * v776];
                            v795 = v790;
                            v796 = v789;
                            do
                            {
                              v797 = *(_DWORD *)(v82 + 4 * v776);
                              if (v797 >= 1)
                              {
                                v798 = 0;
                                v799 = (_QWORD *)*a2;
                                v800 = 4 * *(_QWORD *)(v775 + 8 * v777);
                                v801 = 4 * *(_QWORD *)&v774[2 * v777];
                                v802 = v795;
                                v803 = v796;
                                do
                                {
                                  v804 = *(_DWORD *)(v82 + 4 * v777);
                                  if (v804 >= 1)
                                  {
                                    v805 = (_DWORD *)(v799[19] + v803);
                                    v806 = (float *)((char *)v80[19] + v802);
                                    do
                                    {
                                      *v805 = *v806;
                                      v805 = (_DWORD *)((char *)v805 + v800);
                                      v806 = (float *)((char *)v806 + v801);
                                      --v804;
                                    }
                                    while (v804);
                                  }
                                  ++v798;
                                  v803 += v793;
                                  v802 += v794;
                                }
                                while (v798 != v797);
                              }
                              ++v792;
                              v796 += v787;
                              v795 += v788;
                            }
                            while (v792 != v791);
                          }
                          ++v786;
                          v789 += v1532;
                          v790 += v1516;
                        }
                        while (v786 != v1566);
                      }
                      v785 = v1484 + 1;
                      v1504 += v1445;
                      v1494 += v1439;
                    }
                    while (v1484 + 1 != v1474);
                  }
                  result = v1434 + v1424;
                }
                while ((unint64_t)v1429 > v1434 + v1424);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
LABEL_6:
          break;
        case 1:
          v93 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v93)
          {
            v94 = *(float **)(*(_QWORD *)result + 152);
            v95 = (_BYTE *)v3[19];
            v96 = 4 * v93;
            do
            {
              v97 = *v94++;
              *v95++ = (int)v97;
              v96 -= 4;
            }
            while (v96);
          }
          break;
        case 2:
          v98 = *(int ***)result;
          v99 = **(int ***)result;
          switch(v98[1] - *v98)
          {
            case 1:
              if (*v99 >= 1)
              {
                v100 = 0;
                v101 = 0;
                v102 = v98[19];
                v103 = v3[19];
                do
                {
                  *(_BYTE *)(v103 + v100) = (int)*(float *)&v102[v101];
                  v101 += *(_QWORD *)v98[3];
                  ++v100;
                }
                while (**v98 > (int)v100);
              }
              break;
            case 2:
              v356 = *v99;
              if (*v99 >= 1)
              {
                v357 = 0;
                v358 = 0;
                v359 = 0;
                v360 = v98[19];
                v361 = v3[19];
                do
                {
                  v362 = v99[1];
                  if (v362 < 1)
                  {
                    v363 = v98[3];
                    v364 = *((_QWORD *)v363 + 1);
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v361 + v358 + result) = (int)*(float *)&v360[v359];
                      v363 = v98[3];
                      v364 = *((_QWORD *)v363 + 1);
                      v359 += v364;
                      v99 = *v98;
                      v362 = (*v98)[1];
                      ++result;
                    }
                    while ((int)result < v362);
                    v356 = *v99;
                    v358 += result;
                  }
                  v359 = *(_QWORD *)v363 + v359 - v364 * v362;
                  ++v357;
                }
                while (v357 < v356);
              }
              break;
            case 3:
              v365 = *v99;
              if (*v99 >= 1)
              {
                v366 = 0;
                v367 = 0;
                v368 = 0;
                v369 = v98[19];
                v370 = v3[19];
                do
                {
                  v371 = v99[1];
                  if (v371 < 1)
                  {
                    v375 = v98[3];
                    v376 = *((_QWORD *)v375 + 1);
                  }
                  else
                  {
                    for (m = 0; m < v371; ++m)
                    {
                      v373 = v99[2];
                      if (v373 < 1)
                      {
                        v375 = v98[3];
                        result = *((_QWORD *)v375 + 2);
                      }
                      else
                      {
                        v374 = 0;
                        do
                        {
                          *(_BYTE *)(v370 + v367 + v374) = (int)*(float *)&v369[v368];
                          v375 = v98[3];
                          result = *((_QWORD *)v375 + 2);
                          v368 += result;
                          v99 = *v98;
                          v373 = (*v98)[2];
                          ++v374;
                        }
                        while ((int)v374 < v373);
                        v367 += v374;
                      }
                      v376 = *((_QWORD *)v375 + 1);
                      v368 = v376 + v368 - result * v373;
                      v371 = v99[1];
                    }
                    v365 = *v99;
                  }
                  v368 = *(_QWORD *)v375 + v368 - v376 * v371;
                  ++v366;
                }
                while (v366 < v365);
              }
              break;
            case 4:
              v377 = *v99;
              if (*v99 >= 1)
              {
                v378 = 0;
                v379 = 0;
                v380 = 0;
                v381 = v98[19];
                v382 = v3[19];
                do
                {
                  v383 = v99[1];
                  if (v383 < 1)
                  {
                    v389 = v98[3];
                    v391 = *((_QWORD *)v389 + 1);
                  }
                  else
                  {
                    for (n = 0; n < v383; ++n)
                    {
                      v385 = v99[2];
                      if (v385 < 1)
                      {
                        v389 = v98[3];
                        v390 = *((_QWORD *)v389 + 2);
                      }
                      else
                      {
                        for (ii = 0; ii < v385; ++ii)
                        {
                          v387 = v99[3];
                          if (v387 < 1)
                          {
                            v389 = v98[3];
                            result = *((_QWORD *)v389 + 3);
                          }
                          else
                          {
                            v388 = 0;
                            do
                            {
                              *(_BYTE *)(v382 + v379 + v388) = (int)*(float *)&v381[v380];
                              v389 = v98[3];
                              result = *((_QWORD *)v389 + 3);
                              v380 += result;
                              v99 = *v98;
                              v387 = (*v98)[3];
                              ++v388;
                            }
                            while ((int)v388 < v387);
                            v379 += v388;
                          }
                          v390 = *((_QWORD *)v389 + 2);
                          v380 = v390 + v380 - result * v387;
                          v385 = v99[2];
                        }
                      }
                      v391 = *((_QWORD *)v389 + 1);
                      v380 = v391 + v380 - v390 * v385;
                      v383 = v99[1];
                    }
                    v377 = *v99;
                  }
                  v380 = *(_QWORD *)v389 + v380 - v391 * v383;
                  ++v378;
                }
                while (v378 < v377);
              }
              break;
            default:
              if (v3[6])
              {
                v347 = 0;
                v348 = v98[19];
                v349 = v3[19];
                do
                {
                  v350 = *v98;
                  v351 = (unint64_t)((char *)v98[1] - (char *)*v98) >> 2;
                  v352 = 0;
                  v353 = (v351 - 1);
                  if ((int)v351 - 1 >= 0)
                  {
                    v354 = v98[3];
                    LODWORD(result) = v347;
                    do
                    {
                      v355 = ldiv((int)result, v350[v353]);
                      result = v355.quot;
                      v352 += *(_QWORD *)&v354[2 * v353--] * v355.rem;
                    }
                    while (v353 != -1);
                  }
                  *(_BYTE *)(v349 + v347++) = (int)*(float *)&v348[v352];
                }
                while (v347 < *(_QWORD *)(*a2 + 48));
              }
              break;
          }
          break;
        case 3:
          v104 = *(int ***)result;
          v105 = (uint64_t *)(*(_QWORD *)result + 24);
          v106 = v3 + 3;
          v107 = **(_QWORD **)result;
          v108 = *(_QWORD *)(*(_QWORD *)result + 8);
          v109 = v108 - v107;
          switch((v108 - v107) >> 2)
          {
            case 1:
              v110 = (v109 << 30) - 0x100000000;
              v111 = *(_DWORD *)(v107 + (v110 >> 30));
              if (v111 >= 1)
              {
                v112 = v110 >> 29;
                v113 = *(_QWORD *)(*v105 + v112);
                v114 = *(_QWORD *)(*v106 + v112);
                v115 = (_BYTE *)v3[19];
                v116 = (float *)v104[19];
                v117 = 4 * v113;
                do
                {
                  *v115 = (int)*v116;
                  v115 += v114;
                  v116 = (float *)((char *)v116 + v117);
                  --v111;
                }
                while (v111);
              }
              break;
            case 2:
              v933 = (v109 << 30) - 0x200000000;
              v934 = *(_DWORD *)(v107 + (v933 >> 30));
              if (v934 >= 1)
              {
                v935 = 0;
                v936 = 0;
                v937 = 0;
                v938 = v933 >> 29;
                v939 = *(_QWORD *)(*v105 + v938);
                v940 = *(_QWORD *)(*v106 + v938);
                v941 = 4 * v939;
                do
                {
                  result = *(_QWORD *)v5;
                  v942 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                  v943 = *(int *)((char *)*v104 + (v942 >> 30));
                  if (v943 >= 1)
                  {
                    v944 = v942 >> 29;
                    v945 = *(_QWORD *)((char *)v104[3] + v944);
                    v946 = *(_QWORD *)(*v106 + v944);
                    v947 = *(_QWORD *)(*a2 + 152);
                    result = *(_QWORD *)(result + 152) + v935;
                    v948 = 4 * v945;
                    do
                    {
                      *(_BYTE *)(v947 + v937) = (int)*(float *)result;
                      v947 += v946;
                      result += v948;
                      --v943;
                    }
                    while (v943);
                  }
                  v937 += v940;
                  ++v936;
                  v935 += v941;
                }
                while (v936 != v934);
              }
              break;
            case 3:
              v949 = (v109 << 30) - 0x300000000;
              v950 = *(_DWORD *)(v107 + (v949 >> 30));
              if (v950 >= 1)
              {
                v951 = 0;
                v952 = 0;
                v953 = 0;
                v954 = v949 >> 29;
                v955 = *(_QWORD *)(*v105 + v954);
                v956 = *(_QWORD *)(*v106 + v954);
                v957 = 4 * v955;
                do
                {
                  result = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x200000000;
                  v958 = *(int *)((char *)*v104 + (result >> 30));
                  if (v958 >= 1)
                  {
                    v959 = 0;
                    v960 = result >> 29;
                    v961 = *(_QWORD *)((char *)v104[3] + v960);
                    result = *(_QWORD *)(*v106 + v960);
                    v962 = 4 * v961;
                    v963 = v951;
                    v964 = v953;
                    do
                    {
                      v965 = ((*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5) << 30) - 0x100000000;
                      v966 = *(int *)((char *)*v104 + (v965 >> 30));
                      if (v966 >= 1)
                      {
                        v967 = v965 >> 29;
                        v968 = *(_QWORD *)((char *)v104[3] + v967);
                        v969 = *(_QWORD *)(*v106 + v967);
                        v970 = *(_QWORD *)(*a2 + 152);
                        v971 = (float *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + v963);
                        v972 = 4 * v968;
                        do
                        {
                          *(_BYTE *)(v970 + v964) = (int)*v971;
                          v970 += v969;
                          v971 = (float *)((char *)v971 + v972);
                          --v966;
                        }
                        while (v966);
                      }
                      v964 += result;
                      ++v959;
                      v963 += v962;
                    }
                    while (v959 != v958);
                  }
                  v953 += v956;
                  ++v952;
                  v951 += v957;
                }
                while (v952 != v950);
              }
              break;
            case 4:
LABEL_554:
              break;
            case 5:
              v973 = (v109 << 30) - 0x500000000;
              v974 = *(_DWORD *)(v107 + (v973 >> 30));
              if (v974 >= 1)
              {
                v975 = 0;
                v976 = 0;
                v977 = v973 >> 29;
                v978 = *(_QWORD *)(*v105 + v977);
                v979 = *(_QWORD *)(*v106 + v977);
                do
                {
                  v975 += v978;
                  v976 += v979;
                  --v974;
                }
                while (v974);
              }
              break;
            default:
              LODWORD(v912) = 1;
              v913 = -20;
              do
              {
                v912 = *(int *)(v108 + v913) * (uint64_t)(int)v912;
                v913 += 4;
              }
              while (v913);
              if (v104[6])
              {
                result = 0;
                v914 = *(_QWORD **)v5;
                v1552 = v106;
                v1519 = v912;
                do
                {
                  v915 = *v104;
                  v916 = (unint64_t)((char *)v104[1] - (char *)*v104) >> 2;
                  v917 = (v916 - 1);
                  v1569 = result;
                  v1535 = v914;
                  v918 = 0;
                  if ((int)v916 - 1 >= 0)
                  {
                    v919 = *v105;
                    do
                    {
                      v920 = ldiv((int)result, v915[v917]);
                      LODWORD(result) = v920.quot;
                      v918 += *(_QWORD *)(v919 + 8 * v917--) * v920.rem;
                    }
                    while (v917 != -1);
                  }
                  v921 = *(_QWORD *)*a2;
                  v922 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v921) >> 2;
                  v923 = *v1552;
                  v924 = 0;
                  v925 = (v922 - 1);
                  if ((int)v922 - 1 >= 0)
                  {
                    v926 = v1569;
                    do
                    {
                      v927 = ldiv(v926, *(int *)(v921 + 4 * v925));
                      v926 = v927.quot;
                      v924 += *(_QWORD *)(v923 + 8 * v925--) * v927.rem;
                    }
                    while (v925 != -1);
                  }
                  v914 = v1535;
                  v928 = ((v914[1] - *v914) << 30) - 0x500000000;
                  v929 = *(int *)((char *)v915 + (v928 >> 30));
                  if (v929 >= 1)
                  {
                    v930 = v928 >> 29;
                    v931 = *(_QWORD *)(*v105 + v930);
                    v932 = *(_QWORD *)(v923 + v930);
                    do
                    {
                      v918 += v931;
                      v924 += v932;
                      --v929;
                    }
                    while (v929);
                    v914 = *(_QWORD **)v5;
                  }
                  result = v1569 + v1519;
                }
                while (v914[6] > (unint64_t)(v1569 + v1519));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v10 = v3[6];
          if (v10)
          {
            v11 = (int)**(float **)(*(_QWORD *)result + 152);
            v12 = (int *)v3[19];
            do
            {
              *v12++ = v11;
              --v10;
            }
            while (v10);
          }
          break;
        case 1:
          v118 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v118)
          {
            v119 = *(float **)(*(_QWORD *)result + 152);
            v120 = (_DWORD *)v3[19];
            v121 = 4 * v118;
            do
            {
              v122 = *v119++;
              *v120++ = (int)v122;
              v121 -= 4;
            }
            while (v121);
          }
          break;
        case 2:
          v123 = *(int ***)result;
          v124 = **(int ***)result;
          v125 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v124;
          switch(v125 >> 2)
          {
            case 1:
              if (*v124 >= 1)
              {
                v126 = 0;
                v127 = (float *)v123[19];
                v128 = v3[19];
                v129 = 4 * *(_QWORD *)v123[3];
                do
                {
                  *(_DWORD *)(v128 + 4 * v126) = (int)*v127;
                  v127 = (float *)((char *)v127 + v129);
                  ++v126;
                }
                while (*v124 > (int)v126);
              }
              break;
            case 2:
              v401 = *v124;
              if (*v124 >= 1)
              {
                v402 = 0;
                v403 = 0;
                v404 = 0;
                v405 = v123[19];
                v406 = v3[19];
                v407 = v123[3];
                v408 = *(_QWORD *)v407;
                v409 = *((_QWORD *)v407 + 1);
                v410 = v124[1];
                do
                {
                  if (v410 >= 1)
                  {
                    v411 = 0;
                    do
                    {
                      *(_DWORD *)(v406 + 4 * v403 + 4 * v411) = (int)*(float *)&v405[v404];
                      v404 += v409;
                      v410 = v124[1];
                      ++v411;
                    }
                    while ((int)v411 < v410);
                    v401 = *v124;
                    v403 += v411;
                  }
                  v404 = v404 + v408 - v409 * v410;
                  ++v402;
                }
                while (v402 < v401);
              }
              break;
            case 3:
              result = *v124;
              if ((int)result >= 1)
              {
                v412 = 0;
                v413 = 0;
                v414 = 0;
                v415 = v123[19];
                v416 = v3[19];
                v417 = v123[3];
                v418 = *(_QWORD *)v417;
                v419 = *((_QWORD *)v417 + 1);
                v420 = v124[1];
                do
                {
                  if (v420 >= 1)
                  {
                    v421 = 0;
                    v422 = v123[3];
                    v423 = *((_QWORD *)v417 + 2);
                    v424 = v124[2];
                    do
                    {
                      if (v424 >= 1)
                      {
                        v425 = 0;
                        v426 = *((_QWORD *)v422 + 2);
                        do
                        {
                          *(_DWORD *)(v416 + 4 * v413 + 4 * v425) = (int)*(float *)&v415[v414];
                          v414 += v426;
                          v424 = v124[2];
                          ++v425;
                        }
                        while ((int)v425 < v424);
                        v420 = v124[1];
                        v413 += v425;
                      }
                      v414 = v414 + v419 - v423 * v424;
                      ++v421;
                    }
                    while (v421 < v420);
                    result = *v124;
                  }
                  v414 = v414 + v418 - v419 * v420;
                  ++v412;
                }
                while (v412 < (int)result);
              }
              break;
            case 4:
              v427 = *v124;
              if (*v124 >= 1)
              {
                v428 = 0;
                v429 = 0;
                v430 = 0;
                v431 = v123[19];
                v432 = v3[19];
                v433 = v123[3];
                v434 = *(_QWORD *)v433;
                v435 = *((_QWORD *)v433 + 1);
                v436 = v124[1];
                do
                {
                  if (v436 >= 1)
                  {
                    v437 = 0;
                    v438 = v123[3];
                    v439 = *((_QWORD *)v433 + 2);
                    v440 = v124[2];
                    do
                    {
                      if (v440 >= 1)
                      {
                        v441 = 0;
                        v442 = v123[3];
                        v443 = *((_QWORD *)v438 + 2);
                        v444 = *((_QWORD *)v438 + 3);
                        v445 = v124[3];
                        do
                        {
                          if (v445 >= 1)
                          {
                            v446 = 0;
                            v447 = *((_QWORD *)v442 + 3);
                            do
                            {
                              *(_DWORD *)(v432 + 4 * v429 + 4 * v446) = (int)*(float *)&v431[v430];
                              v430 += v447;
                              v445 = v124[3];
                              ++v446;
                            }
                            while ((int)v446 < v445);
                            v440 = v124[2];
                            v429 += v446;
                          }
                          v430 = v430 + v443 - v444 * v445;
                          ++v441;
                        }
                        while (v441 < v440);
                        v436 = v124[1];
                      }
                      v430 = v430 + v435 - v439 * v440;
                      ++v437;
                    }
                    while (v437 < v436);
                    v427 = *v124;
                  }
                  result = v436;
                  v430 = v430 + v434 - v435 * v436;
                  ++v428;
                }
                while (v428 < v427);
              }
              break;
            default:
              v392 = v3[6];
              if (v392)
              {
                v393 = 0;
                v394 = v123[19];
                v395 = v3[19];
                v396 = ((unint64_t)v125 >> 2) - 1;
                v397 = v123[3];
                do
                {
                  v398 = 0;
                  if ((v396 & 0x80000000) == 0)
                  {
                    v399 = v396;
                    LODWORD(result) = v393;
                    do
                    {
                      v400 = ldiv((int)result, v124[v399]);
                      result = v400.quot;
                      v398 += *(_QWORD *)&v397[2 * v399--] * v400.rem;
                    }
                    while (v399 != -1);
                  }
                  *(_DWORD *)(v395 + 4 * v393++) = (int)*(float *)&v394[v398];
                }
                while (v393 != v392);
              }
              break;
          }
          break;
        case 3:
          v130 = *(unsigned int ***)result;
          v132 = **(_QWORD **)result;
          v131 = *(_QWORD *)(*(_QWORD *)result + 8);
          v133 = v131 - v132;
          switch((v131 - v132) >> 2)
          {
            case 1:
              v134 = (v133 << 30) - 0x100000000;
              v135 = *(_DWORD *)(v132 + (v134 >> 30));
              if (v135 >= 1)
              {
                v136 = v134 >> 29;
                v137 = *(_QWORD *)((char *)v130[3] + v136);
                v138 = *(_QWORD *)(v3[3] + v136);
                v139 = (_DWORD *)v3[19];
                v140 = (float *)v130[19];
                v141 = 4 * v138;
                v142 = 4 * v137;
                do
                {
                  *v139 = (int)*v140;
                  v139 = (_DWORD *)((char *)v139 + v141);
                  v140 = (float *)((char *)v140 + v142);
                  --v135;
                }
                while (v135);
              }
              break;
            case 2:
              v1016 = (v133 << 30) - 0x200000000;
              v1017 = *(_DWORD *)(v132 + (v1016 >> 30));
              if (v1017 >= 1)
              {
                v1018 = 0;
                v1019 = 0;
                v1020 = 0;
                v1021 = v130[3];
                v1022 = v1016 >> 29;
                v1023 = *(_QWORD *)((char *)v1021 + v1022);
                v1024 = v3[3];
                v1025 = (v133 << 30) - 0x100000000;
                v1026 = *(_QWORD *)((char *)v1021 + (v1025 >> 29));
                v1027 = *(_QWORD *)(v1024 + (v1025 >> 29));
                v1028 = v1025 >> 32;
                v1029 = 4 * *(_QWORD *)(v1024 + v1022);
                v1030 = 4 * v1027;
                v1031 = 4 * v1023;
                v1032 = 4 * v1026;
                do
                {
                  result = *(unsigned int *)(v132 + 4 * v1028);
                  if ((int)result >= 1)
                  {
                    v1033 = (_DWORD *)(v3[19] + v1019);
                    v1034 = (float *)((char *)v130[19] + v1018);
                    do
                    {
                      *v1033 = (int)*v1034;
                      v1033 = (_DWORD *)((char *)v1033 + v1030);
                      v1034 = (float *)((char *)v1034 + v1032);
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  ++v1020;
                  v1019 += v1029;
                  v1018 += v1031;
                }
                while (v1020 != v1017);
              }
              break;
            case 3:
              v1035 = (v133 << 30) - 0x300000000;
              v1036 = *(_DWORD *)(v132 + (v1035 >> 30));
              if (v1036 >= 1)
              {
                v1037 = 0;
                v1038 = 0;
                v1039 = 0;
                v1040 = v133 << 30;
                v1041 = v130[3];
                v1042 = v1035 >> 29;
                v1043 = *(_QWORD *)((char *)v1041 + v1042);
                v1044 = v3[3];
                v1045 = *(_QWORD *)(v1044 + v1042);
                v1046 = (v1040 - 0x200000000) >> 29;
                v1047 = *(_QWORD *)((char *)v1041 + v1046);
                v1048 = (v1040 - 0x200000000) >> 32;
                v1049 = (v1040 - 0x100000000) >> 32;
                v1050 = 4 * v1045;
                v1051 = 4 * *(_QWORD *)(v1044 + v1046);
                result = 4 * v1043;
                v1052 = 4 * v1047;
                do
                {
                  v1053 = *(_DWORD *)(v132 + 4 * v1048);
                  if (v1053 >= 1)
                  {
                    v1054 = 0;
                    v1055 = (_QWORD *)*a2;
                    v1056 = 4 * *(_QWORD *)(v1044 + 8 * v1049);
                    v1057 = 4 * *(_QWORD *)&v1041[2 * v1049];
                    v1058 = v1037;
                    v1059 = v1038;
                    do
                    {
                      v1060 = *(_DWORD *)(v132 + 4 * v1049);
                      if (v1060 >= 1)
                      {
                        v1061 = (_DWORD *)(v1055[19] + v1059);
                        v1062 = (float *)((char *)v130[19] + v1058);
                        do
                        {
                          *v1061 = (int)*v1062;
                          v1061 = (_DWORD *)((char *)v1061 + v1056);
                          v1062 = (float *)((char *)v1062 + v1057);
                          --v1060;
                        }
                        while (v1060);
                      }
                      ++v1054;
                      v1059 += v1051;
                      v1058 += v1052;
                    }
                    while (v1054 != v1053);
                  }
                  ++v1039;
                  v1038 += v1050;
                  v1037 += result;
                }
                while (v1039 != v1036);
              }
              break;
            case 4:
              v1063 = (v133 << 30) - 0x400000000;
              v1571 = *(_DWORD *)(v132 + (v1063 >> 30));
              if (v1571 >= 1)
              {
                v1064 = 0;
                v1065 = 0;
                v1066 = 0;
                v1067 = v133 << 30;
                v1068 = v130[3];
                v1069 = v1063 >> 29;
                v1070 = v3[3];
                v1554 = (v1067 - 0x300000000) >> 32;
                v1071 = (v1067 - 0x300000000) >> 29;
                v1072 = *(_QWORD *)((char *)v1068 + v1071);
                v1073 = *(_QWORD *)(v1070 + v1071);
                v1074 = (v1067 - 0x200000000) >> 32;
                v1075 = (v1067 - 0x100000000) >> 32;
                v1537 = 4 * *(_QWORD *)(v1070 + v1069);
                result = 4 * v1073;
                v1521 = 4 * *(_QWORD *)((char *)v1068 + v1069);
                v1076 = 4 * v1072;
                do
                {
                  v1077 = *(_DWORD *)(v132 + 4 * v1554);
                  if (v1077 >= 1)
                  {
                    v1078 = 0;
                    v1079 = 4 * *(_QWORD *)(v1070 + 8 * v1074);
                    v1080 = 4 * *(_QWORD *)&v1068[2 * v1074];
                    v1081 = v1064;
                    v1082 = v1065;
                    do
                    {
                      v1083 = *(_DWORD *)(v132 + 4 * v1074);
                      if (v1083 >= 1)
                      {
                        v1084 = 0;
                        v1085 = (_QWORD *)*a2;
                        v1086 = 4 * *(_QWORD *)(v1070 + 8 * v1075);
                        v1087 = 4 * *(_QWORD *)&v1068[2 * v1075];
                        v1088 = v1081;
                        v1089 = v1082;
                        do
                        {
                          v1090 = *(_DWORD *)(v132 + 4 * v1075);
                          if (v1090 >= 1)
                          {
                            v1091 = (_DWORD *)(v1085[19] + v1089);
                            v1092 = (float *)((char *)v130[19] + v1088);
                            do
                            {
                              *v1091 = (int)*v1092;
                              v1091 = (_DWORD *)((char *)v1091 + v1086);
                              v1092 = (float *)((char *)v1092 + v1087);
                              --v1090;
                            }
                            while (v1090);
                          }
                          ++v1084;
                          v1089 += v1079;
                          v1088 += v1080;
                        }
                        while (v1084 != v1083);
                      }
                      ++v1078;
                      v1082 += result;
                      v1081 += v1076;
                    }
                    while (v1078 != v1077);
                  }
                  ++v1066;
                  v1065 += v1537;
                  v1064 += v1521;
                }
                while (v1066 != v1571);
              }
              break;
            case 5:
              v1093 = (v133 << 30) - 0x500000000;
              v1477 = *(_DWORD *)(v132 + (v1093 >> 30));
              if (v1477 >= 1)
              {
                v1497 = 0;
                v1507 = 0;
                v1487 = 0;
                v1094 = v133 << 30;
                v1095 = v130[3];
                v1096 = v1093 >> 29;
                v1097 = v3[3];
                v1467 = (v1094 - 0x400000000) >> 32;
                v1098 = (v1094 - 0x400000000) >> 29;
                result = *(_QWORD *)((char *)v1095 + v1098);
                v1555 = (v1094 - 0x300000000) >> 32;
                v1099 = (v1094 - 0x200000000) >> 32;
                v1100 = (v1094 - 0x100000000) >> 32;
                v1457 = 4 * *(_QWORD *)(v1097 + v1096);
                v1538 = 4 * *(_QWORD *)(v1097 + v1098);
                v1448 = 4 * *(_QWORD *)((char *)v1095 + v1096);
                v1522 = 4 * result;
                do
                {
                  v1572 = *(_DWORD *)(v132 + 4 * v1467);
                  if (v1572 >= 1)
                  {
                    v1101 = 0;
                    v1102 = 4 * *(_QWORD *)(v1097 + 8 * v1555);
                    v1103 = 4 * *(_QWORD *)&v1095[2 * v1555];
                    v1105 = v1497;
                    v1104 = v1507;
                    do
                    {
                      v1106 = *(_DWORD *)(v132 + 4 * v1555);
                      if (v1106 >= 1)
                      {
                        v1107 = 0;
                        v1108 = 4 * *(_QWORD *)(v1097 + 8 * v1099);
                        v1109 = 4 * *(_QWORD *)&v1095[2 * v1099];
                        v1110 = v1104;
                        v1111 = v1105;
                        do
                        {
                          v1112 = *(_DWORD *)(v132 + 4 * v1099);
                          if (v1112 >= 1)
                          {
                            v1113 = 0;
                            result = *a2;
                            v1114 = 4 * *(_QWORD *)(v1097 + 8 * v1100);
                            v1115 = 4 * *(_QWORD *)&v1095[2 * v1100];
                            v1116 = v1110;
                            v1117 = v1111;
                            do
                            {
                              v1118 = *(_DWORD *)(v132 + 4 * v1100);
                              if (v1118 >= 1)
                              {
                                v1119 = (_DWORD *)(*(_QWORD *)(result + 152) + v1117);
                                v1120 = (float *)((char *)v130[19] + v1116);
                                do
                                {
                                  *v1119 = (int)*v1120;
                                  v1119 = (_DWORD *)((char *)v1119 + v1114);
                                  v1120 = (float *)((char *)v1120 + v1115);
                                  --v1118;
                                }
                                while (v1118);
                              }
                              ++v1113;
                              v1117 += v1108;
                              v1116 += v1109;
                            }
                            while (v1113 != v1112);
                          }
                          ++v1107;
                          v1111 += v1102;
                          v1110 += v1103;
                        }
                        while (v1107 != v1106);
                      }
                      ++v1101;
                      v1105 += v1538;
                      v1104 += v1522;
                    }
                    while (v1101 != v1572);
                  }
                  v1497 += v1457;
                  v1507 += v1448;
                  ++v1487;
                }
                while (v1487 != v1477);
              }
              break;
            default:
              LODWORD(v980) = 1;
              v981 = -20;
              do
              {
                v980 = *(int *)(v131 + v981) * (uint64_t)(int)v980;
                v981 += 4;
              }
              while (v981);
              v1430 = v130[6];
              if (v1430)
              {
                result = 0;
                v1456 = *v3;
                v982 = (v133 << 30) - 0x500000000;
                v1420 = (v133 >> 2) - 1;
                v983 = v130[3];
                v1415 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1411 = v982 >> 32;
                v984 = v3[3];
                v1466 = (uint64_t)((v133 << 30) - 0x400000000) >> 32;
                v1553 = (uint64_t)((v133 << 30) - 0x300000000) >> 32;
                v985 = (uint64_t)((v133 << 30) - 0x200000000) >> 32;
                v986 = (uint64_t)((v133 << 30) - 0x100000000) >> 32;
                v1440 = 4 * *(_QWORD *)((char *)v983 + (v982 >> 29));
                v1447 = 4 * *(_QWORD *)(v984 + (v982 >> 29));
                v1425 = v980;
                do
                {
                  v987 = v1420;
                  v1435 = result;
                  v988 = 0;
                  if ((v1420 & 0x80000000) != 0)
                  {
                    v989 = v1415;
                  }
                  else
                  {
                    v989 = v1415;
                    do
                    {
                      v990 = ldiv((int)result, *(int *)(v132 + 4 * v987));
                      LODWORD(result) = v990.quot;
                      v988 += *(_QWORD *)&v983[2 * v987--] * v990.rem;
                    }
                    while (v987 != -1);
                  }
                  v991 = 0;
                  if ((v989 & 0x80000000) == 0)
                  {
                    v992 = v1435;
                    do
                    {
                      v993 = ldiv(v992, *(int *)(v1456 + 4 * v989));
                      v992 = v993.quot;
                      v991 += *(_QWORD *)(v984 + 8 * v989--) * v993.rem;
                    }
                    while (v989 != -1);
                  }
                  v1476 = *(_DWORD *)(v132 + 4 * v1411);
                  if (v1476 >= 1)
                  {
                    v994 = 0;
                    v1506 = 4 * v991;
                    v1536 = 4 * *(_QWORD *)(v984 + 8 * v1466);
                    v1496 = 4 * v988;
                    v1520 = 4 * *(_QWORD *)&v983[2 * v1466];
                    do
                    {
                      v1486 = v994;
                      v1570 = *(_DWORD *)(v132 + 4 * v1466);
                      if (v1570 >= 1)
                      {
                        v995 = 0;
                        v996 = 4 * *(_QWORD *)(v984 + 8 * v1553);
                        v997 = 4 * *(_QWORD *)&v983[2 * v1553];
                        v999 = v1496;
                        v998 = v1506;
                        do
                        {
                          v1000 = *(_DWORD *)(v132 + 4 * v1553);
                          if (v1000 >= 1)
                          {
                            v1001 = 0;
                            v1002 = 4 * *(_QWORD *)(v984 + 8 * v985);
                            v1003 = 4 * *(_QWORD *)&v983[2 * v985];
                            v1004 = v999;
                            v1005 = v998;
                            do
                            {
                              v1006 = *(_DWORD *)(v132 + 4 * v985);
                              if (v1006 >= 1)
                              {
                                v1007 = 0;
                                v1008 = (_QWORD *)*a2;
                                v1009 = 4 * *(_QWORD *)(v984 + 8 * v986);
                                v1010 = 4 * *(_QWORD *)&v983[2 * v986];
                                v1011 = v1004;
                                v1012 = v1005;
                                do
                                {
                                  v1013 = *(_DWORD *)(v132 + 4 * v986);
                                  if (v1013 >= 1)
                                  {
                                    v1014 = (_DWORD *)(v1008[19] + v1012);
                                    v1015 = (float *)((char *)v130[19] + v1011);
                                    do
                                    {
                                      *v1014 = (int)*v1015;
                                      v1014 = (_DWORD *)((char *)v1014 + v1009);
                                      v1015 = (float *)((char *)v1015 + v1010);
                                      --v1013;
                                    }
                                    while (v1013);
                                  }
                                  ++v1007;
                                  v1012 += v1002;
                                  v1011 += v1003;
                                }
                                while (v1007 != v1006);
                              }
                              ++v1001;
                              v1005 += v996;
                              v1004 += v997;
                            }
                            while (v1001 != v1000);
                          }
                          ++v995;
                          v998 += v1536;
                          v999 += v1520;
                        }
                        while (v995 != v1570);
                      }
                      v994 = v1486 + 1;
                      v1506 += v1447;
                      v1496 += v1440;
                    }
                    while (v1486 + 1 != v1476);
                  }
                  result = v1435 + v1425;
                }
                while ((unint64_t)v1430 > v1435 + v1425);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v13 = v3[6];
          if (v13)
          {
            v14 = **(float **)(*(_QWORD *)result + 152);
            v15 = (_QWORD *)v3[19];
            do
            {
              *v15++ = (uint64_t)v14;
              --v13;
            }
            while (v13);
          }
          break;
        case 1:
          v143 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v143)
          {
            v144 = *(float **)(*(_QWORD *)result + 152);
            v145 = (_QWORD *)v3[19];
            v146 = 4 * v143;
            do
            {
              v147 = *v144++;
              *v145++ = (uint64_t)v147;
              v146 -= 4;
            }
            while (v146);
          }
          break;
        case 2:
          v148 = *(int ***)result;
          v149 = **(int ***)result;
          v150 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v149;
          switch(v150 >> 2)
          {
            case 1:
              v151 = *v149;
              if ((int)v151 >= 1)
              {
                v152 = (float *)v148[19];
                v153 = (_QWORD *)v3[19];
                v154 = 4 * *(_QWORD *)v148[3];
                do
                {
                  *v153++ = (uint64_t)*v152;
                  v152 = (float *)((char *)v152 + v154);
                  --v151;
                }
                while (v151);
              }
              break;
            case 2:
              v457 = *v149;
              if (*v149 >= 1)
              {
                v458 = 0;
                v459 = 0;
                v460 = 0;
                v461 = v148[19];
                v462 = v3[19];
                v463 = v149[1];
                v464 = v148[3];
                v466 = *(_QWORD *)v464;
                v465 = *((_QWORD *)v464 + 1);
                v467 = v466 - v465 * v463;
                do
                {
                  v468 = v463;
                  if ((int)v463 >= 1)
                  {
                    do
                    {
                      result = (uint64_t)*(float *)&v461[v460];
                      *(_QWORD *)(v462 + 8 * v459++) = result;
                      v460 += v465;
                      --v468;
                    }
                    while (v468);
                  }
                  v460 += v467;
                  ++v458;
                }
                while (v458 != v457);
              }
              break;
            case 3:
              v469 = *v149;
              if (*v149 >= 1)
              {
                v470 = 0;
                result = 0;
                v471 = 0;
                v472 = v148[19];
                v473 = v3[19];
                v474 = v149[1];
                v475 = v148[3];
                v476 = *((_QWORD *)v475 + 1);
                v477 = *(_QWORD *)v475 - v476 * v474;
                do
                {
                  if ((int)v474 < 1)
                  {
                    v484 = result;
                  }
                  else
                  {
                    v478 = 0;
                    v479 = v149[2];
                    v480 = v148[3];
                    v481 = v476 - *((_QWORD *)v475 + 2) * v479;
                    do
                    {
                      if ((int)v479 < 1)
                      {
                        v484 = result;
                      }
                      else
                      {
                        v482 = *((_QWORD *)v480 + 2);
                        v483 = v479;
                        do
                        {
                          v484 = result + 1;
                          *(_QWORD *)(v473 + 8 * result) = (uint64_t)*(float *)&v472[v471];
                          v471 += v482;
                          ++result;
                          --v483;
                        }
                        while (v483);
                      }
                      v471 += v481;
                      ++v478;
                      result = v484;
                    }
                    while (v478 != (_DWORD)v474);
                  }
                  v471 += v477;
                  ++v470;
                  result = v484;
                }
                while (v470 != v469);
              }
              break;
            case 4:
              v485 = *v149;
              if (*v149 >= 1)
              {
                v486 = 0;
                result = 0;
                v487 = 0;
                v488 = v148[19];
                v489 = v3[19];
                v490 = v149[1];
                v491 = v148[3];
                v492 = *((_QWORD *)v491 + 1);
                v493 = *(_QWORD *)v491 - v492 * v490;
                do
                {
                  if ((int)v490 < 1)
                  {
                    v504 = result;
                  }
                  else
                  {
                    v494 = 0;
                    v495 = v149[2];
                    v496 = v148[3];
                    v497 = v492 - *((_QWORD *)v491 + 2) * v495;
                    do
                    {
                      if ((int)v495 < 1)
                      {
                        v504 = result;
                      }
                      else
                      {
                        v498 = 0;
                        v499 = v149[3];
                        v500 = v148[3];
                        v501 = *((_QWORD *)v496 + 2) - *((_QWORD *)v496 + 3) * v499;
                        do
                        {
                          if ((int)v499 < 1)
                          {
                            v504 = result;
                          }
                          else
                          {
                            v502 = *((_QWORD *)v500 + 3);
                            v503 = v499;
                            do
                            {
                              v504 = result + 1;
                              *(_QWORD *)(v489 + 8 * result) = (uint64_t)*(float *)&v488[v487];
                              v487 += v502;
                              ++result;
                              --v503;
                            }
                            while (v503);
                          }
                          v487 += v501;
                          ++v498;
                          result = v504;
                        }
                        while (v498 != (_DWORD)v495);
                      }
                      v487 += v497;
                      ++v494;
                      result = v504;
                    }
                    while (v494 != (_DWORD)v490);
                  }
                  v487 += v493;
                  ++v486;
                  result = v504;
                }
                while (v486 != v485);
              }
              break;
            default:
              v448 = v3[6];
              if (v448)
              {
                v449 = 0;
                v450 = v148[19];
                v451 = v3[19];
                v452 = ((unint64_t)v150 >> 2) - 1;
                v453 = v148[3];
                do
                {
                  v454 = 0;
                  if ((v452 & 0x80000000) == 0)
                  {
                    v455 = v452;
                    LODWORD(result) = v449;
                    do
                    {
                      v456 = ldiv((int)result, v149[v455]);
                      result = v456.quot;
                      v454 += *(_QWORD *)&v453[2 * v455--] * v456.rem;
                    }
                    while (v455 != -1);
                  }
                  *(_QWORD *)(v451 + 8 * v449++) = (uint64_t)*(float *)&v450[v454];
                }
                while (v449 != v448);
              }
              break;
          }
          break;
        case 3:
          v155 = *(unsigned int ***)result;
          v157 = **(_QWORD **)result;
          v156 = *(_QWORD *)(*(_QWORD *)result + 8);
          v158 = v156 - v157;
          switch((v156 - v157) >> 2)
          {
            case 1:
              v159 = (v158 << 30) - 0x100000000;
              v160 = *(_DWORD *)(v157 + (v159 >> 30));
              if (v160 >= 1)
              {
                v161 = v159 >> 29;
                v162 = *(_QWORD *)((char *)v155[3] + v161);
                v163 = *(_QWORD *)(v3[3] + v161);
                v164 = (_QWORD *)v3[19];
                v165 = (float *)v155[19];
                v166 = 8 * v163;
                v167 = 4 * v162;
                do
                {
                  *v164 = (uint64_t)*v165;
                  v164 = (_QWORD *)((char *)v164 + v166);
                  v165 = (float *)((char *)v165 + v167);
                  --v160;
                }
                while (v160);
              }
              break;
            case 2:
              v1156 = (v158 << 30) - 0x200000000;
              v1157 = *(_DWORD *)(v157 + (v1156 >> 30));
              if (v1157 >= 1)
              {
                v1158 = 0;
                v1159 = 0;
                v1160 = 0;
                v1161 = v155[3];
                v1162 = v1156 >> 29;
                v1163 = *(_QWORD *)((char *)v1161 + v1162);
                v1164 = v3[3];
                result = *(_QWORD *)(v1164 + v1162);
                v1165 = (v158 << 30) - 0x100000000;
                v1166 = *(_QWORD *)((char *)v1161 + (v1165 >> 29));
                v1167 = *(_QWORD *)(v1164 + (v1165 >> 29));
                v1168 = *(_DWORD *)(v157 + (v1165 >> 30));
                v1169 = 8 * result;
                v1170 = 8 * v1167;
                v1171 = 4 * v1163;
                v1172 = 4 * v1166;
                do
                {
                  if (v1168 >= 1)
                  {
                    result = v3[19] + v1159;
                    v1173 = (float *)((char *)v155[19] + v1158);
                    v1174 = v1168;
                    do
                    {
                      *(_QWORD *)result = (uint64_t)*v1173;
                      result += v1170;
                      v1173 = (float *)((char *)v1173 + v1172);
                      --v1174;
                    }
                    while (v1174);
                  }
                  ++v1160;
                  v1159 += v1169;
                  v1158 += v1171;
                }
                while (v1160 != v1157);
              }
              break;
            case 3:
              v1175 = (v158 << 30) - 0x300000000;
              v1176 = *(_DWORD *)(v157 + (v1175 >> 30));
              if (v1176 >= 1)
              {
                v1177 = 0;
                v1178 = 0;
                v1179 = 0;
                v1180 = v155[3];
                v1181 = v1175 >> 29;
                v1182 = *(_QWORD *)((char *)v1180 + v1181);
                v1183 = v3[3];
                v1184 = *(_QWORD *)(v1183 + v1181);
                v1185 = v158 << 30;
                v1186 = (v158 << 30) - 0x200000000;
                v1187 = *(_QWORD *)((char *)v1180 + (v1186 >> 29));
                v1188 = *(_QWORD *)(v1183 + (v1186 >> 29));
                v1189 = *(_DWORD *)(v157 + (v1186 >> 30));
                v1190 = (v1185 - 0x100000000) >> 32;
                v1191 = 8 * v1184;
                v1192 = 8 * v1188;
                result = 4 * v1182;
                v1193 = 4 * v1187;
                do
                {
                  if (v1189 >= 1)
                  {
                    v1194 = 0;
                    v1195 = *(_DWORD *)(v157 + 4 * v1190);
                    v1196 = (_QWORD *)*a2;
                    v1197 = 8 * *(_QWORD *)(v1183 + 8 * v1190);
                    v1198 = 4 * *(_QWORD *)&v1180[2 * v1190];
                    v1199 = v1177;
                    v1200 = v1178;
                    do
                    {
                      if (v1195 >= 1)
                      {
                        v1201 = (_QWORD *)(v1196[19] + v1200);
                        v1202 = (float *)((char *)v155[19] + v1199);
                        v1203 = v1195;
                        do
                        {
                          *v1201 = (uint64_t)*v1202;
                          v1201 = (_QWORD *)((char *)v1201 + v1197);
                          v1202 = (float *)((char *)v1202 + v1198);
                          --v1203;
                        }
                        while (v1203);
                      }
                      ++v1194;
                      v1200 += v1192;
                      v1199 += v1193;
                    }
                    while (v1194 != v1189);
                  }
                  ++v1179;
                  v1178 += v1191;
                  v1177 += result;
                }
                while (v1179 != v1176);
              }
              break;
            case 4:
              v1204 = (v158 << 30) - 0x400000000;
              v1574 = *(_DWORD *)(v157 + (v1204 >> 30));
              if (v1574 >= 1)
              {
                v1205 = 0;
                v1206 = 0;
                v1207 = 0;
                v1208 = v155[3];
                v1209 = v1204 >> 29;
                v1210 = v158 << 30;
                v1211 = v3[3];
                v1212 = (v1210 - 0x300000000) >> 29;
                v1213 = *(_QWORD *)((char *)v1208 + v1212);
                v1214 = v1210 - 0x200000000;
                v1215 = v1210 - 0x100000000;
                v1216 = *(_QWORD *)(v1211 + v1212);
                v1217 = *(_DWORD *)(v157 + ((v1210 - 0x300000000) >> 30));
                v1524 = v1214 >> 32;
                v1218 = v1215 >> 32;
                v1557 = 8 * *(_QWORD *)(v1211 + v1209);
                result = 8 * v1216;
                v1540 = 4 * *(_QWORD *)((char *)v1208 + v1209);
                v1219 = 4 * v1213;
                do
                {
                  if (v1217 >= 1)
                  {
                    v1220 = 0;
                    v1221 = *(_DWORD *)(v157 + 4 * v1524);
                    v1222 = 8 * *(_QWORD *)(v1211 + 8 * v1524);
                    v1223 = 4 * *(_QWORD *)&v1208[2 * v1524];
                    v1224 = v1205;
                    v1225 = v1206;
                    do
                    {
                      if (v1221 >= 1)
                      {
                        v1226 = 0;
                        v1227 = *(_DWORD *)(v157 + 4 * v1218);
                        v1228 = (_QWORD *)*a2;
                        v1229 = 8 * *(_QWORD *)(v1211 + 8 * v1218);
                        v1230 = 4 * *(_QWORD *)&v1208[2 * v1218];
                        v1231 = v1224;
                        v1232 = v1225;
                        do
                        {
                          if (v1227 >= 1)
                          {
                            v1233 = (_QWORD *)(v1228[19] + v1232);
                            v1234 = (float *)((char *)v155[19] + v1231);
                            v1235 = v1227;
                            do
                            {
                              *v1233 = (uint64_t)*v1234;
                              v1233 = (_QWORD *)((char *)v1233 + v1229);
                              v1234 = (float *)((char *)v1234 + v1230);
                              --v1235;
                            }
                            while (v1235);
                          }
                          ++v1226;
                          v1232 += v1222;
                          v1231 += v1223;
                        }
                        while (v1226 != v1221);
                      }
                      ++v1220;
                      v1225 += result;
                      v1224 += v1219;
                    }
                    while (v1220 != v1217);
                  }
                  ++v1207;
                  v1206 += v1557;
                  v1205 += v1540;
                }
                while (v1207 != v1574);
              }
              break;
            case 5:
              v1236 = (v158 << 30) - 0x500000000;
              v1479 = *(_DWORD *)(v157 + (v1236 >> 30));
              if (v1479 >= 1)
              {
                v1499 = 0;
                v1509 = 0;
                v1489 = 0;
                v1237 = v155[3];
                v1238 = v1236 >> 29;
                v1239 = v3[3];
                v1240 = (v158 << 30) - 0x400000000;
                result = *(_QWORD *)((char *)v1237 + (v1240 >> 29));
                v1575 = *(_DWORD *)(v157 + (v1240 >> 30));
                v1450 = (uint64_t)((v158 << 30) - 0x300000000) >> 32;
                v1525 = (uint64_t)((v158 << 30) - 0x200000000) >> 32;
                v1241 = (uint64_t)((v158 << 30) - 0x100000000) >> 32;
                v1469 = 8 * *(_QWORD *)(v1239 + v1238);
                v1558 = 8 * *(_QWORD *)(v1239 + (v1240 >> 29));
                v1459 = 4 * *(_QWORD *)((char *)v1237 + v1238);
                v1541 = 4 * result;
                do
                {
                  if (v1575 >= 1)
                  {
                    v1242 = 0;
                    v1243 = *(_DWORD *)(v157 + 4 * v1450);
                    v1244 = 8 * *(_QWORD *)(v1239 + 8 * v1450);
                    v1245 = 4 * *(_QWORD *)&v1237[2 * v1450];
                    v1247 = v1499;
                    v1246 = v1509;
                    do
                    {
                      if (v1243 >= 1)
                      {
                        v1248 = 0;
                        v1249 = *(_DWORD *)(v157 + 4 * v1525);
                        v1250 = 8 * *(_QWORD *)(v1239 + 8 * v1525);
                        v1251 = 4 * *(_QWORD *)&v1237[2 * v1525];
                        v1252 = v1246;
                        v1253 = v1247;
                        do
                        {
                          if (v1249 >= 1)
                          {
                            v1254 = 0;
                            v1255 = *(_DWORD *)(v157 + 4 * v1241);
                            v1256 = (_QWORD *)*a2;
                            v1257 = 8 * *(_QWORD *)(v1239 + 8 * v1241);
                            v1258 = 4 * *(_QWORD *)&v1237[2 * v1241];
                            v1259 = v1252;
                            v1260 = v1253;
                            do
                            {
                              if (v1255 >= 1)
                              {
                                v1261 = (_QWORD *)(v1256[19] + v1260);
                                v1262 = (float *)((char *)v155[19] + v1259);
                                LODWORD(result) = v1255;
                                do
                                {
                                  *v1261 = (uint64_t)*v1262;
                                  v1261 = (_QWORD *)((char *)v1261 + v1257);
                                  v1262 = (float *)((char *)v1262 + v1258);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1254;
                              v1260 += v1250;
                              v1259 += v1251;
                            }
                            while (v1254 != v1249);
                          }
                          ++v1248;
                          v1253 += v1244;
                          v1252 += v1245;
                        }
                        while (v1248 != v1243);
                      }
                      ++v1242;
                      v1247 += v1558;
                      v1246 += v1541;
                    }
                    while (v1242 != v1575);
                  }
                  v1499 += v1469;
                  v1509 += v1459;
                  ++v1489;
                }
                while (v1489 != v1479);
              }
              break;
            default:
              LODWORD(v1121) = 1;
              v1122 = -20;
              do
              {
                v1121 = *(int *)(v156 + v1122) * (uint64_t)(int)v1121;
                v1122 += 4;
              }
              while (v1122);
              v1436 = v155[6];
              if (v1436)
              {
                v1123 = 0;
                v1416 = *v3;
                v1124 = (v158 << 30) - 0x500000000;
                v1426 = (v158 >> 2) - 1;
                v1125 = v155[3];
                v1421 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1126 = v3[3];
                v1478 = *(_DWORD *)(v157 + (v1124 >> 30));
                v1412 = (uint64_t)((v158 << 30) - 0x400000000) >> 32;
                v1523 = (uint64_t)((v158 << 30) - 0x200000000) >> 32;
                v1127 = (uint64_t)((v158 << 30) - 0x100000000) >> 32;
                v1468 = 8 * *(_QWORD *)(v1126 + (v1124 >> 29));
                v1449 = (uint64_t)((v158 << 30) - 0x300000000) >> 32;
                v1458 = 4 * *(_QWORD *)((char *)v1125 + (v1124 >> 29));
                v1431 = v1121;
                do
                {
                  v1128 = v1426;
                  if ((v1426 & 0x80000000) != 0)
                  {
                    v1129 = 0;
                    v1130 = v1421;
                  }
                  else
                  {
                    v1129 = 0;
                    LODWORD(result) = v1123;
                    v1130 = v1421;
                    do
                    {
                      v1131 = ldiv((int)result, *(int *)(v157 + 4 * v1128));
                      result = v1131.quot;
                      v1129 += *(_QWORD *)&v1125[2 * v1128--] * v1131.rem;
                    }
                    while (v1128 != -1);
                  }
                  v1441 = v1123;
                  v1132 = 0;
                  if ((v1130 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1123;
                    do
                    {
                      v1133 = ldiv((int)result, *(int *)(v1416 + 4 * v1130));
                      result = v1133.quot;
                      v1132 += *(_QWORD *)(v1126 + 8 * v1130--) * v1133.rem;
                    }
                    while (v1130 != -1);
                  }
                  if (v1478 >= 1)
                  {
                    v1134 = 0;
                    v1573 = *(_DWORD *)(v157 + 4 * v1412);
                    v1508 = 8 * v1132;
                    v1556 = 8 * *(_QWORD *)(v1126 + 8 * v1412);
                    v1498 = 4 * v1129;
                    v1539 = 4 * *(_QWORD *)&v1125[2 * v1412];
                    do
                    {
                      v1488 = v1134;
                      if (v1573 >= 1)
                      {
                        v1135 = 0;
                        v1136 = *(_DWORD *)(v157 + 4 * v1449);
                        v1137 = 8 * *(_QWORD *)(v1126 + 8 * v1449);
                        v1138 = 4 * *(_QWORD *)&v1125[2 * v1449];
                        v1140 = v1498;
                        v1139 = v1508;
                        do
                        {
                          if (v1136 >= 1)
                          {
                            v1141 = 0;
                            v1142 = *(_DWORD *)(v157 + 4 * v1523);
                            v1143 = 8 * *(_QWORD *)(v1126 + 8 * v1523);
                            v1144 = 4 * *(_QWORD *)&v1125[2 * v1523];
                            result = v1140;
                            v1145 = v1139;
                            do
                            {
                              if (v1142 >= 1)
                              {
                                v1146 = 0;
                                v1147 = *(_DWORD *)(v157 + 4 * v1127);
                                v1148 = (_QWORD *)*a2;
                                v1149 = 8 * *(_QWORD *)(v1126 + 8 * v1127);
                                v1150 = 4 * *(_QWORD *)&v1125[2 * v1127];
                                v1151 = result;
                                v1152 = v1145;
                                do
                                {
                                  if (v1147 >= 1)
                                  {
                                    v1153 = (_QWORD *)(v1148[19] + v1152);
                                    v1154 = (float *)((char *)v155[19] + v1151);
                                    v1155 = v1147;
                                    do
                                    {
                                      *v1153 = (uint64_t)*v1154;
                                      v1153 = (_QWORD *)((char *)v1153 + v1149);
                                      v1154 = (float *)((char *)v1154 + v1150);
                                      --v1155;
                                    }
                                    while (v1155);
                                  }
                                  ++v1146;
                                  v1152 += v1143;
                                  v1151 += v1144;
                                }
                                while (v1146 != v1142);
                              }
                              ++v1141;
                              v1145 += v1137;
                              result += v1138;
                            }
                            while (v1141 != v1136);
                          }
                          ++v1135;
                          v1139 += v1556;
                          v1140 += v1539;
                        }
                        while (v1135 != v1573);
                      }
                      v1134 = v1488 + 1;
                      v1508 += v1468;
                      v1498 += v1458;
                    }
                    while (v1488 + 1 != v1478);
                  }
                  v1123 += v1431;
                }
                while ((unint64_t)v1436 > v1441 + v1431);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v16 = v3[6];
          if (v16)
          {
            v17 = **(_DWORD **)(*(_QWORD *)result + 152);
            v18 = (_DWORD *)v3[19];
            do
            {
              *v18++ = v17;
              --v16;
            }
            while (v16);
          }
          break;
        case 1:
          v168 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v168)
            result = (uint64_t)memmove((void *)v3[19], *(const void **)(*(_QWORD *)result + 152), 4 * v168);
          break;
        case 2:
          v169 = *(int ***)result;
          v170 = **(int ***)result;
          v171 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v170;
          switch(v171 >> 2)
          {
            case 1:
              v172 = *v170;
              if ((int)v172 >= 1)
              {
                v173 = v169[19];
                v174 = (int *)v3[19];
                v175 = 4 * *(_QWORD *)v169[3];
                do
                {
                  *v174++ = *v173;
                  v173 = (int *)((char *)v173 + v175);
                  --v172;
                }
                while (v172);
              }
              break;
            case 2:
              v514 = *v170;
              if (*v170 >= 1)
              {
                v515 = 0;
                v516 = 0;
                v517 = 0;
                v518 = v169[19];
                v519 = v3[19];
                v520 = v170[1];
                v521 = v169[3];
                v523 = *(_QWORD *)v521;
                v522 = *((_QWORD *)v521 + 1);
                v524 = v523 - v522 * v520;
                do
                {
                  v525 = v520;
                  if ((int)v520 >= 1)
                  {
                    do
                    {
                      *(_DWORD *)(v519 + 4 * v516++) = v518[v517];
                      v517 += v522;
                      --v525;
                    }
                    while (v525);
                  }
                  v517 += v524;
                  ++v515;
                }
                while (v515 != v514);
              }
              break;
            case 3:
              v526 = *v170;
              if (*v170 >= 1)
              {
                v527 = 0;
                result = 0;
                v528 = 0;
                v529 = v169[19];
                v530 = v3[19];
                v531 = v170[1];
                v532 = v169[3];
                v533 = *((_QWORD *)v532 + 1);
                v534 = *(_QWORD *)v532 - v533 * v531;
                do
                {
                  if ((int)v531 < 1)
                  {
                    v541 = result;
                  }
                  else
                  {
                    v535 = 0;
                    v536 = v170[2];
                    v537 = v169[3];
                    v538 = v533 - *((_QWORD *)v532 + 2) * v536;
                    do
                    {
                      if ((int)v536 < 1)
                      {
                        v541 = result;
                      }
                      else
                      {
                        v539 = *((_QWORD *)v537 + 2);
                        v540 = v536;
                        do
                        {
                          v541 = result + 1;
                          *(_DWORD *)(v530 + 4 * result) = v529[v528];
                          v528 += v539;
                          ++result;
                          --v540;
                        }
                        while (v540);
                      }
                      v528 += v538;
                      ++v535;
                      result = v541;
                    }
                    while (v535 != (_DWORD)v531);
                  }
                  v528 += v534;
                  ++v527;
                  result = v541;
                }
                while (v527 != v526);
              }
              break;
            case 4:
              v542 = *v170;
              if (*v170 >= 1)
              {
                v543 = 0;
                result = 0;
                v544 = 0;
                v545 = v169[19];
                v546 = v3[19];
                v547 = v170[1];
                v548 = v169[3];
                v549 = *((_QWORD *)v548 + 1);
                v550 = *(_QWORD *)v548 - v549 * v547;
                do
                {
                  if ((int)v547 < 1)
                  {
                    v561 = result;
                  }
                  else
                  {
                    v551 = 0;
                    v552 = v170[2];
                    v553 = v169[3];
                    v554 = v549 - *((_QWORD *)v548 + 2) * v552;
                    do
                    {
                      if ((int)v552 < 1)
                      {
                        v561 = result;
                      }
                      else
                      {
                        v555 = 0;
                        v556 = v170[3];
                        v557 = v169[3];
                        v558 = *((_QWORD *)v553 + 2) - *((_QWORD *)v553 + 3) * v556;
                        do
                        {
                          if ((int)v556 < 1)
                          {
                            v561 = result;
                          }
                          else
                          {
                            v559 = *((_QWORD *)v557 + 3);
                            v560 = v556;
                            do
                            {
                              v561 = result + 1;
                              *(_DWORD *)(v546 + 4 * result) = v545[v544];
                              v544 += v559;
                              ++result;
                              --v560;
                            }
                            while (v560);
                          }
                          v544 += v558;
                          ++v555;
                          result = v561;
                        }
                        while (v555 != (_DWORD)v552);
                      }
                      v544 += v554;
                      ++v551;
                      result = v561;
                    }
                    while (v551 != (_DWORD)v547);
                  }
                  v544 += v550;
                  ++v543;
                  result = v561;
                }
                while (v543 != v542);
              }
              break;
            default:
              v505 = v3[6];
              if (v505)
              {
                v506 = 0;
                v507 = v169[19];
                v508 = v3[19];
                v509 = ((unint64_t)v171 >> 2) - 1;
                v510 = v169[3];
                do
                {
                  v511 = 0;
                  if ((v509 & 0x80000000) == 0)
                  {
                    v512 = v509;
                    LODWORD(result) = v506;
                    do
                    {
                      v513 = ldiv((int)result, v170[v512]);
                      result = v513.quot;
                      v511 += *(_QWORD *)&v510[2 * v512--] * v513.rem;
                    }
                    while (v512 != -1);
                  }
                  *(_DWORD *)(v508 + 4 * v506++) = v507[v511];
                }
                while (v506 != v505);
              }
              break;
          }
          break;
        case 3:
          v176 = *(unsigned int ***)result;
          v178 = **(_QWORD **)result;
          v177 = *(_QWORD *)(*(_QWORD *)result + 8);
          v179 = v177 - v178;
          switch((v177 - v178) >> 2)
          {
            case 1:
              v180 = (v179 << 30) - 0x100000000;
              v181 = *(_DWORD *)(v178 + (v180 >> 30));
              if (v181 >= 1)
              {
                v182 = v180 >> 29;
                v183 = *(_QWORD *)((char *)v176[3] + v182);
                v184 = *(_QWORD *)(v3[3] + v182);
                v185 = (unsigned int *)v3[19];
                v186 = v176[19];
                v187 = 4 * v184;
                v188 = 4 * v183;
                do
                {
                  *v185 = *v186;
                  v185 = (unsigned int *)((char *)v185 + v187);
                  v186 = (unsigned int *)((char *)v186 + v188);
                  --v181;
                }
                while (v181);
              }
              break;
            case 2:
              v1300 = (v179 << 30) - 0x200000000;
              v1301 = *(_DWORD *)(v178 + (v1300 >> 30));
              if (v1301 >= 1)
              {
                v1302 = 0;
                v1303 = 0;
                v1304 = 0;
                v1305 = v176[3];
                v1306 = v1300 >> 29;
                v1307 = *(_QWORD *)((char *)v1305 + v1306);
                v1308 = v3[3];
                result = *(_QWORD *)(v1308 + v1306);
                v1309 = (v179 << 30) - 0x100000000;
                v1310 = *(_QWORD *)((char *)v1305 + (v1309 >> 29));
                v1311 = *(_QWORD *)(v1308 + (v1309 >> 29));
                v1312 = *(_DWORD *)(v178 + (v1309 >> 30));
                v1313 = 4 * result;
                v1314 = 4 * v1311;
                v1315 = 4 * v1307;
                v1316 = 4 * v1310;
                do
                {
                  if (v1312 >= 1)
                  {
                    result = v3[19] + v1303;
                    v1317 = (unsigned int *)((char *)v176[19] + v1302);
                    v1318 = v1312;
                    do
                    {
                      *(_DWORD *)result = *v1317;
                      result += v1314;
                      v1317 = (_DWORD *)((char *)v1317 + v1316);
                      --v1318;
                    }
                    while (v1318);
                  }
                  ++v1304;
                  v1303 += v1313;
                  v1302 += v1315;
                }
                while (v1304 != v1301);
              }
              break;
            case 3:
              v1319 = (v179 << 30) - 0x300000000;
              v1320 = *(_DWORD *)(v178 + (v1319 >> 30));
              if (v1320 >= 1)
              {
                v1321 = 0;
                v1322 = 0;
                v1323 = 0;
                v1324 = v176[3];
                v1325 = v1319 >> 29;
                v1326 = *(_QWORD *)((char *)v1324 + v1325);
                v1327 = v3[3];
                v1328 = *(_QWORD *)(v1327 + v1325);
                v1329 = v179 << 30;
                v1330 = (v179 << 30) - 0x200000000;
                v1331 = *(_QWORD *)((char *)v1324 + (v1330 >> 29));
                v1332 = *(_QWORD *)(v1327 + (v1330 >> 29));
                v1333 = *(_DWORD *)(v178 + (v1330 >> 30));
                v1334 = (v1329 - 0x100000000) >> 32;
                v1335 = 4 * v1328;
                v1336 = 4 * v1332;
                result = 4 * v1326;
                v1337 = 4 * v1331;
                do
                {
                  if (v1333 >= 1)
                  {
                    v1338 = 0;
                    v1339 = *(_DWORD *)(v178 + 4 * v1334);
                    v1340 = (_QWORD *)*a2;
                    v1341 = 4 * *(_QWORD *)(v1327 + 8 * v1334);
                    v1342 = 4 * *(_QWORD *)&v1324[2 * v1334];
                    v1343 = v1321;
                    v1344 = v1322;
                    do
                    {
                      if (v1339 >= 1)
                      {
                        v1345 = (_DWORD *)(v1340[19] + v1344);
                        v1346 = (unsigned int *)((char *)v176[19] + v1343);
                        v1347 = v1339;
                        do
                        {
                          *v1345 = *v1346;
                          v1345 = (_DWORD *)((char *)v1345 + v1341);
                          v1346 = (_DWORD *)((char *)v1346 + v1342);
                          --v1347;
                        }
                        while (v1347);
                      }
                      ++v1338;
                      v1344 += v1336;
                      v1343 += v1337;
                    }
                    while (v1338 != v1333);
                  }
                  ++v1323;
                  v1322 += v1335;
                  v1321 += result;
                }
                while (v1323 != v1320);
              }
              break;
            case 4:
              v1348 = (v179 << 30) - 0x400000000;
              v1577 = *(_DWORD *)(v178 + (v1348 >> 30));
              if (v1577 >= 1)
              {
                v1349 = 0;
                v1350 = 0;
                v1351 = 0;
                v1352 = v176[3];
                v1353 = v1348 >> 29;
                v1354 = v179 << 30;
                v1355 = v3[3];
                v1356 = (v1354 - 0x300000000) >> 29;
                v1357 = *(_QWORD *)((char *)v1352 + v1356);
                v1358 = v1354 - 0x200000000;
                v1359 = v1354 - 0x100000000;
                v1360 = *(_QWORD *)(v1355 + v1356);
                v1361 = *(_DWORD *)(v178 + ((v1354 - 0x300000000) >> 30));
                v1362 = v1358 >> 32;
                v1363 = v1359 >> 32;
                v1560 = 4 * *(_QWORD *)(v1355 + v1353);
                result = 4 * v1360;
                v1543 = 4 * *(_QWORD *)((char *)v1352 + v1353);
                v1364 = 4 * v1357;
                do
                {
                  if (v1361 >= 1)
                  {
                    v1365 = 0;
                    v1366 = *(_DWORD *)(v178 + 4 * v1362);
                    v1367 = 4 * *(_QWORD *)(v1355 + 8 * v1362);
                    v1368 = 4 * *(_QWORD *)&v1352[2 * v1362];
                    v1369 = v1349;
                    v1370 = v1350;
                    do
                    {
                      if (v1366 >= 1)
                      {
                        v1371 = 0;
                        v1372 = *(_DWORD *)(v178 + 4 * v1363);
                        v1373 = (_QWORD *)*a2;
                        v1374 = 4 * *(_QWORD *)(v1355 + 8 * v1363);
                        v1375 = 4 * *(_QWORD *)&v1352[2 * v1363];
                        v1376 = v1369;
                        v1377 = v1370;
                        do
                        {
                          if (v1372 >= 1)
                          {
                            v1378 = (_DWORD *)(v1373[19] + v1377);
                            v1379 = (unsigned int *)((char *)v176[19] + v1376);
                            v1380 = v1372;
                            do
                            {
                              *v1378 = *v1379;
                              v1378 = (_DWORD *)((char *)v1378 + v1374);
                              v1379 = (_DWORD *)((char *)v1379 + v1375);
                              --v1380;
                            }
                            while (v1380);
                          }
                          ++v1371;
                          v1377 += v1367;
                          v1376 += v1368;
                        }
                        while (v1371 != v1366);
                      }
                      ++v1365;
                      v1370 += result;
                      v1369 += v1364;
                    }
                    while (v1365 != v1361);
                  }
                  ++v1351;
                  v1350 += v1560;
                  v1349 += v1543;
                }
                while (v1351 != v1577);
              }
              break;
            case 5:
              v1381 = (v179 << 30) - 0x500000000;
              v1491 = *(_DWORD *)(v178 + (v1381 >> 30));
              if (v1491 >= 1)
              {
                v1511 = 0;
                v1527 = 0;
                v1501 = 0;
                v1382 = v176[3];
                v1383 = v1381 >> 29;
                v1384 = v3[3];
                v1385 = (v179 << 30) - 0x400000000;
                result = *(_QWORD *)((char *)v1382 + (v1385 >> 29));
                v1578 = *(_DWORD *)(v178 + (v1385 >> 30));
                v1461 = (uint64_t)((v179 << 30) - 0x300000000) >> 32;
                v1386 = (uint64_t)((v179 << 30) - 0x200000000) >> 32;
                v1387 = (uint64_t)((v179 << 30) - 0x100000000) >> 32;
                v1481 = 4 * *(_QWORD *)(v1384 + v1383);
                v1561 = 4 * *(_QWORD *)(v1384 + (v1385 >> 29));
                v1471 = 4 * *(_QWORD *)((char *)v1382 + v1383);
                v1544 = 4 * result;
                do
                {
                  if (v1578 >= 1)
                  {
                    v1388 = 0;
                    v1389 = *(_DWORD *)(v178 + 4 * v1461);
                    v1390 = 4 * *(_QWORD *)(v1384 + 8 * v1461);
                    v1391 = 4 * *(_QWORD *)&v1382[2 * v1461];
                    v1393 = v1511;
                    v1392 = v1527;
                    do
                    {
                      if (v1389 >= 1)
                      {
                        v1394 = 0;
                        v1395 = *(_DWORD *)(v178 + 4 * v1386);
                        v1396 = 4 * *(_QWORD *)(v1384 + 8 * v1386);
                        v1397 = 4 * *(_QWORD *)&v1382[2 * v1386];
                        v1398 = v1392;
                        v1399 = v1393;
                        do
                        {
                          if (v1395 >= 1)
                          {
                            v1400 = 0;
                            v1401 = *(_DWORD *)(v178 + 4 * v1387);
                            v1402 = (_QWORD *)*a2;
                            v1403 = 4 * *(_QWORD *)(v1384 + 8 * v1387);
                            v1404 = 4 * *(_QWORD *)&v1382[2 * v1387];
                            v1405 = v1398;
                            v1406 = v1399;
                            do
                            {
                              if (v1401 >= 1)
                              {
                                v1407 = (_DWORD *)(v1402[19] + v1406);
                                v1408 = (unsigned int *)((char *)v176[19] + v1405);
                                LODWORD(result) = v1401;
                                do
                                {
                                  *v1407 = *v1408;
                                  v1407 = (_DWORD *)((char *)v1407 + v1403);
                                  v1408 = (_DWORD *)((char *)v1408 + v1404);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1400;
                              v1406 += v1396;
                              v1405 += v1397;
                            }
                            while (v1400 != v1395);
                          }
                          ++v1394;
                          v1399 += v1390;
                          v1398 += v1391;
                        }
                        while (v1394 != v1389);
                      }
                      ++v1388;
                      v1393 += v1561;
                      v1392 += v1544;
                    }
                    while (v1388 != v1578);
                  }
                  v1511 += v1481;
                  v1527 += v1471;
                  ++v1501;
                }
                while (v1501 != v1491);
              }
              break;
            default:
              LODWORD(v1263) = 1;
              v1264 = -20;
              do
              {
                v1263 = *(int *)(v177 + v1264) * (uint64_t)(int)v1263;
                v1264 += 4;
              }
              while (v1264);
              v1437 = v176[6];
              if (v1437)
              {
                result = 0;
                v1480 = *v3;
                v1265 = (v179 << 30) - 0x500000000;
                v1427 = (v179 >> 2) - 1;
                v1266 = v176[3];
                v1422 = ((unint64_t)(v3[1] - *v3) >> 2) - 1;
                v1267 = v3[3];
                v1490 = *(_DWORD *)(v178 + (v1265 >> 30));
                v1417 = (uint64_t)((v179 << 30) - 0x400000000) >> 32;
                v1268 = (uint64_t)((v179 << 30) - 0x200000000) >> 32;
                v1269 = (uint64_t)((v179 << 30) - 0x100000000) >> 32;
                v1470 = 4 * *(_QWORD *)(v1267 + (v1265 >> 29));
                v1451 = (uint64_t)((v179 << 30) - 0x300000000) >> 32;
                v1460 = 4 * *(_QWORD *)((char *)v1266 + (v1265 >> 29));
                v1432 = v1263;
                do
                {
                  v1270 = v1427;
                  v1442 = result;
                  v1271 = 0;
                  if ((v1427 & 0x80000000) != 0)
                  {
                    v1272 = v1422;
                  }
                  else
                  {
                    v1272 = v1422;
                    do
                    {
                      v1273 = ldiv((int)result, *(int *)(v178 + 4 * v1270));
                      LODWORD(result) = v1273.quot;
                      v1271 += *(_QWORD *)&v1266[2 * v1270--] * v1273.rem;
                    }
                    while (v1270 != -1);
                  }
                  v1274 = 0;
                  if ((v1272 & 0x80000000) == 0)
                  {
                    v1275 = v1442;
                    do
                    {
                      v1276 = ldiv(v1275, *(int *)(v1480 + 4 * v1272));
                      v1275 = v1276.quot;
                      v1274 += *(_QWORD *)(v1267 + 8 * v1272--) * v1276.rem;
                    }
                    while (v1272 != -1);
                  }
                  if (v1490 >= 1)
                  {
                    v1277 = 0;
                    v1576 = *(_DWORD *)(v178 + 4 * v1417);
                    v1526 = 4 * v1274;
                    v1559 = 4 * *(_QWORD *)(v1267 + 8 * v1417);
                    v1510 = 4 * v1271;
                    v1542 = 4 * *(_QWORD *)&v1266[2 * v1417];
                    do
                    {
                      v1500 = v1277;
                      if (v1576 >= 1)
                      {
                        v1278 = 0;
                        v1279 = *(_DWORD *)(v178 + 4 * v1451);
                        v1280 = 4 * *(_QWORD *)(v1267 + 8 * v1451);
                        v1281 = 4 * *(_QWORD *)&v1266[2 * v1451];
                        v1283 = v1510;
                        v1282 = v1526;
                        do
                        {
                          if (v1279 >= 1)
                          {
                            v1284 = 0;
                            v1285 = *(_DWORD *)(v178 + 4 * v1268);
                            v1286 = 4 * *(_QWORD *)(v1267 + 8 * v1268);
                            v1287 = 4 * *(_QWORD *)&v1266[2 * v1268];
                            v1288 = v1283;
                            v1289 = v1282;
                            do
                            {
                              if (v1285 >= 1)
                              {
                                v1290 = 0;
                                v1291 = *(_DWORD *)(v178 + 4 * v1269);
                                v1292 = (_QWORD *)*a2;
                                v1293 = 4 * *(_QWORD *)(v1267 + 8 * v1269);
                                v1294 = 4 * *(_QWORD *)&v1266[2 * v1269];
                                v1295 = v1288;
                                v1296 = v1289;
                                do
                                {
                                  if (v1291 >= 1)
                                  {
                                    v1297 = (_DWORD *)(v1292[19] + v1296);
                                    v1298 = (unsigned int *)((char *)v176[19] + v1295);
                                    v1299 = v1291;
                                    do
                                    {
                                      *v1297 = *v1298;
                                      v1297 = (_DWORD *)((char *)v1297 + v1293);
                                      v1298 = (_DWORD *)((char *)v1298 + v1294);
                                      --v1299;
                                    }
                                    while (v1299);
                                  }
                                  ++v1290;
                                  v1296 += v1286;
                                  v1295 += v1287;
                                }
                                while (v1290 != v1285);
                              }
                              ++v1284;
                              v1289 += v1280;
                              v1288 += v1281;
                            }
                            while (v1284 != v1279);
                          }
                          ++v1278;
                          v1282 += v1559;
                          v1283 += v1542;
                        }
                        while (v1278 != v1576);
                      }
                      v1277 = v1500 + 1;
                      v1526 += v1470;
                      v1510 += v1460;
                    }
                    while (v1500 + 1 != v1490);
                  }
                  result = v1442 + v1432;
                }
                while ((unint64_t)v1437 > v1442 + v1432);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy_general_general_dims<BOOL,unsigned char,unsigned long,4>(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v7 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x400000000;
  v8 = *(_DWORD *)(*a3 + (v7 >> 30));
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = v7 >> 29;
    v35 = *(_QWORD *)(*a4 + v10);
    v34 = *(_QWORD *)(*a5 + v10);
    do
    {
      v11 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x300000000;
      v12 = *(_DWORD *)(*a3 + (v11 >> 30));
      if (v12 >= 1)
      {
        v13 = 0;
        v14 = v11 >> 29;
        v15 = *(_QWORD *)(*a4 + v14);
        v16 = *(_QWORD *)(*a5 + v14);
        v17 = a6;
        v18 = a7;
        do
        {
          v19 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x200000000;
          v20 = *(_DWORD *)(*a3 + (v19 >> 30));
          if (v20 >= 1)
          {
            v21 = 0;
            v22 = v19 >> 29;
            v23 = *(_QWORD *)(*a4 + v22);
            v24 = *(_QWORD *)(*a5 + v22);
            v25 = v17;
            v26 = v18;
            do
            {
              v27 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x100000000;
              v28 = *(_DWORD *)(*a3 + (v27 >> 30));
              if (v28 >= 1)
              {
                v29 = v27 >> 29;
                v30 = *(_QWORD *)(*a4 + v29);
                v31 = *(_QWORD *)(*a5 + v29);
                v32 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                v33 = *(_QWORD *)(*(_QWORD *)result + 152);
                do
                {
                  *(_BYTE *)(v32 + v26) = *(_BYTE *)(v33 + v25);
                  v32 += v31;
                  v33 += v30;
                  --v28;
                }
                while (v28);
              }
              v25 += v23;
              v26 += v24;
              ++v21;
            }
            while (v21 != v20);
          }
          v17 += v15;
          v18 += v16;
          ++v13;
        }
        while (v13 != v12);
      }
      a6 += v35;
      a7 += v34;
      ++v9;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy_general_general_dims<unsigned int,unsigned char,unsigned long,4>(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;

  v7 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x400000000;
  v36 = *(_DWORD *)(*a3 + (v7 >> 30));
  if (v36 >= 1)
  {
    v8 = 0;
    v9 = v7 >> 29;
    v35 = *(_QWORD *)(*a5 + v9);
    v10 = 4 * a6;
    v11 = 4 * *(_QWORD *)(*a4 + v9);
    do
    {
      v12 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x300000000;
      v13 = *(_DWORD *)(*a3 + (v12 >> 30));
      if (v13 >= 1)
      {
        v14 = 0;
        v15 = v12 >> 29;
        v16 = *(_QWORD *)(*a5 + v15);
        v17 = 4 * *(_QWORD *)(*a4 + v15);
        v18 = v10;
        v19 = a7;
        do
        {
          v20 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x200000000;
          v21 = *(_DWORD *)(*a3 + (v20 >> 30));
          if (v21 >= 1)
          {
            v22 = 0;
            v23 = v20 >> 29;
            v24 = *(_QWORD *)(*a5 + v23);
            v25 = 4 * *(_QWORD *)(*a4 + v23);
            v26 = v18;
            v27 = v19;
            do
            {
              v28 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x100000000;
              v29 = *(_DWORD *)(*a3 + (v28 >> 30));
              if (v29 >= 1)
              {
                v30 = v28 >> 29;
                v31 = *(_QWORD *)(*a4 + v30);
                v32 = *(_QWORD *)(*a5 + v30);
                v33 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                v34 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 152) + v26);
                do
                {
                  *(_BYTE *)(v33 + v27) = *v34;
                  v33 += v32;
                  v34 += v31;
                  --v29;
                }
                while (v29);
              }
              v27 += v24;
              ++v22;
              v26 += v25;
            }
            while (v22 != v21);
          }
          v19 += v16;
          ++v14;
          v18 += v17;
        }
        while (v14 != v13);
      }
      a7 += v35;
      ++v8;
      v10 += v11;
    }
    while (v8 != v36);
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy_general_general_dims<long long,unsigned char,unsigned long,4>(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  v7 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x400000000;
  v36 = *(_DWORD *)(*a3 + (v7 >> 30));
  if (v36 >= 1)
  {
    v8 = 0;
    v9 = v7 >> 29;
    v35 = *(_QWORD *)(*a5 + v9);
    v10 = 8 * a6;
    v11 = 8 * *(_QWORD *)(*a4 + v9);
    do
    {
      v12 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x300000000;
      v13 = *(_DWORD *)(*a3 + (v12 >> 30));
      if (v13 >= 1)
      {
        v14 = 0;
        v15 = v12 >> 29;
        v16 = *(_QWORD *)(*a5 + v15);
        v17 = 8 * *(_QWORD *)(*a4 + v15);
        v18 = v10;
        v19 = a7;
        do
        {
          v20 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x200000000;
          v21 = *(_DWORD *)(*a3 + (v20 >> 30));
          if (v21 >= 1)
          {
            v22 = 0;
            v23 = v20 >> 29;
            v24 = *(_QWORD *)(*a5 + v23);
            v25 = 8 * *(_QWORD *)(*a4 + v23);
            v26 = v18;
            v27 = v19;
            do
            {
              v28 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x100000000;
              v29 = *(_DWORD *)(*a3 + (v28 >> 30));
              if (v29 >= 1)
              {
                v30 = v28 >> 29;
                v31 = *(_QWORD *)(*a5 + v30);
                v32 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                v33 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 152) + v26);
                v34 = 8 * *(_QWORD *)(*a4 + v30);
                do
                {
                  *(_BYTE *)(v32 + v27) = *v33;
                  v32 += v31;
                  v33 = (_QWORD *)((char *)v33 + v34);
                  --v29;
                }
                while (v29);
              }
              v27 += v24;
              ++v22;
              v26 += v25;
            }
            while (v22 != v21);
          }
          v19 += v16;
          ++v14;
          v18 += v17;
        }
        while (v14 != v13);
      }
      a7 += v35;
      ++v8;
      v10 += v11;
    }
    while (v8 != v36);
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy_single<float,unsigned char>(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;

  if (*(_QWORD *)(*(_QWORD *)a2 + 48))
  {
    v2 = 0;
    v3 = (int)**(float **)(*(_QWORD *)result + 152);
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 152);
    do
      *(_BYTE *)(v4 + v2++) = v3;
    while (*(_QWORD *)(*(_QWORD *)a2 + 48) > v2);
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy_general_general_dims<float,unsigned char,unsigned long,4>(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  int v36;

  v7 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x400000000;
  v36 = *(_DWORD *)(*a3 + (v7 >> 30));
  if (v36 >= 1)
  {
    v8 = 0;
    v9 = v7 >> 29;
    v35 = *(_QWORD *)(*a5 + v9);
    v10 = 4 * a6;
    v11 = 4 * *(_QWORD *)(*a4 + v9);
    do
    {
      v12 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x300000000;
      v13 = *(_DWORD *)(*a3 + (v12 >> 30));
      if (v13 >= 1)
      {
        v14 = 0;
        v15 = v12 >> 29;
        v16 = *(_QWORD *)(*a5 + v15);
        v17 = 4 * *(_QWORD *)(*a4 + v15);
        v18 = v10;
        v19 = a7;
        do
        {
          v20 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x200000000;
          v21 = *(_DWORD *)(*a3 + (v20 >> 30));
          if (v21 >= 1)
          {
            v22 = 0;
            v23 = v20 >> 29;
            v24 = *(_QWORD *)(*a5 + v23);
            v25 = 4 * *(_QWORD *)(*a4 + v23);
            v26 = v18;
            v27 = v19;
            do
            {
              v28 = ((*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) << 30) - 0x100000000;
              v29 = *(_DWORD *)(*a3 + (v28 >> 30));
              if (v29 >= 1)
              {
                v30 = v28 >> 29;
                v31 = *(_QWORD *)(*a4 + v30);
                v32 = *(_QWORD *)(*a5 + v30);
                v33 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                v34 = (float *)(*(_QWORD *)(*(_QWORD *)result + 152) + v26);
                do
                {
                  *(_BYTE *)(v33 + v27) = (int)*v34;
                  v33 += v32;
                  v34 += v31;
                  --v29;
                }
                while (v29);
              }
              v27 += v24;
              ++v22;
              v26 += v25;
            }
            while (v22 != v21);
          }
          v19 += v16;
          ++v14;
          v18 += v17;
        }
        while (v14 != v13);
      }
      a7 += v35;
      ++v8;
      v10 += v11;
    }
    while (v8 != v36);
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<BOOL,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t **a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  float v30;
  uint64_t v31;
  float *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  unsigned __int8 *v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  unsigned __int8 *v105;
  _DWORD *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  _QWORD *v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  unsigned __int8 *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 *v146;
  float *v147;
  float v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float *v153;
  uint64_t v154;
  _BYTE *v155;
  float v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  float *v164;
  _BYTE *v165;
  uint64_t v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  ldiv_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int *v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int *v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  ldiv_t v231;
  int *v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t *v239;
  uint64_t v240;
  int *v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  int i;
  int v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  int *v253;
  int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  int j;
  int v261;
  int k;
  int v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int *v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  ldiv_t v277;
  int *v278;
  int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int *v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  int v297;
  uint64_t *v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  int *v303;
  int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  int v313;
  uint64_t *v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  ldiv_t v332;
  int *v333;
  int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t *v340;
  uint64_t v341;
  int *v342;
  int v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  int m;
  int v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  int *v354;
  int v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  int n;
  int v362;
  int ii;
  int v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int *v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  ldiv_t v378;
  int *v379;
  int v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  int *v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  int v398;
  uint64_t *v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  int *v404;
  int v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  int v414;
  uint64_t *v415;
  uint64_t v416;
  int v417;
  int v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int *v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  ldiv_t v434;
  int v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  uint64_t *v441;
  int v442;
  uint64_t v443;
  int *v444;
  int v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  int v452;
  uint64_t *v453;
  int v454;
  uint64_t v455;
  int *v456;
  int v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  int v464;
  uint64_t *v465;
  int v466;
  int v467;
  uint64_t *v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int *v475;
  uint64_t v476;
  uint64_t *v477;
  uint64_t v478;
  uint64_t v479;
  ldiv_t v480;
  float v481;
  int v482;
  int v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  float v491;
  int *v492;
  int v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  float v508;
  int *v509;
  int v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t *v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  uint64_t v519;
  uint64_t *v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  uint64_t *v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  uint64_t v528;
  float v529;
  char *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int *v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  ldiv_t v541;
  uint64_t v542;
  uint64_t v543;
  ldiv_t v544;
  int v545;
  int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t v564;
  uint64_t v565;
  int v566;
  uint64_t v567;
  int v568;
  int v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int *v580;
  int v581;
  int v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  int v594;
  int v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t *v601;
  uint64_t v602;
  uint64_t v603;
  int v604;
  uint64_t v605;
  int *v606;
  int v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  int v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  int v622;
  uint64_t v623;
  int v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  int v628;
  uint64_t v629;
  uint64_t *v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  int *v635;
  uint64_t v636;
  uint64_t *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  int v646;
  int v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  uint64_t v658;
  uint64_t *v659;
  uint64_t v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  uint64_t v664;
  int *v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t *v669;
  ldiv_t v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  int quot;
  ldiv_t v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  int v686;
  int v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  int v699;
  int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  int v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  int v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  char *v723;
  uint64_t v724;
  uint64_t v725;
  int *v726;
  uint64_t *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  ldiv_t v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  ldiv_t v738;
  int v739;
  int v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  int v751;
  int v752;
  uint64_t v753;
  uint64_t *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  uint64_t v759;
  _DWORD *v760;
  uint64_t v761;
  int *v762;
  int v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  _DWORD *v776;
  uint64_t v777;
  int *v778;
  int v779;
  int v780;
  uint64_t *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  int v796;
  uint64_t v797;
  uint64_t *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  int v802;
  uint64_t v803;
  _DWORD *v804;
  uint64_t v805;
  int *v806;
  int v807;
  uint64_t *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  int v819;
  int v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  int v825;
  int v826;
  uint64_t v827;
  uint64_t *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  int v832;
  uint64_t v833;
  _DWORD *v834;
  uint64_t v835;
  int *v836;
  uint64_t *v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  int v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  int v848;
  int v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  int v854;
  int v855;
  uint64_t v856;
  uint64_t *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  int v861;
  uint64_t v862;
  _DWORD *v863;
  uint64_t v864;
  uint64_t v865;
  int *v866;
  unint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t *v870;
  ldiv_t v871;
  uint64_t v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  int v877;
  ldiv_t v878;
  uint64_t v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  int v887;
  int v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  int v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  int v900;
  int v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  int v906;
  int v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  int v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  char *v924;
  uint64_t v925;
  uint64_t v926;
  int *v927;
  uint64_t *v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  ldiv_t v935;
  uint64_t v936;
  uint64_t v937;
  int v938;
  ldiv_t v939;
  int v940;
  int v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  int v946;
  int v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  int v952;
  int v953;
  uint64_t v954;
  uint64_t *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  int v959;
  uint64_t v960;
  _DWORD *v961;
  uint64_t v962;
  int *v963;
  int v964;
  int v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  _DWORD *v977;
  uint64_t v978;
  int *v979;
  int v980;
  int v981;
  uint64_t *v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  int v996;
  int v997;
  uint64_t v998;
  uint64_t *v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  int v1003;
  uint64_t v1004;
  _DWORD *v1005;
  uint64_t v1006;
  int *v1007;
  int v1008;
  uint64_t *v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  int v1020;
  int v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  int v1026;
  int v1027;
  uint64_t v1028;
  uint64_t *v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  int v1033;
  uint64_t v1034;
  _DWORD *v1035;
  uint64_t v1036;
  int *v1037;
  uint64_t *v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  int v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  int v1049;
  int v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  int v1055;
  int v1056;
  uint64_t v1057;
  uint64_t *v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  int v1062;
  uint64_t v1063;
  _DWORD *v1064;
  char *v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  int *v1070;
  uint64_t *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  ldiv_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  ldiv_t v1080;
  int v1081;
  int v1082;
  uint64_t v1083;
  int v1084;
  uint64_t v1085;
  int v1086;
  uint64_t v1087;
  int v1088;
  uint64_t v1089;
  uint64_t v1090;
  int v1091;
  uint64_t v1092;
  int v1093;
  uint64_t *v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  _QWORD *v1100;
  uint64_t v1101;
  int v1102;
  uint64_t v1103;
  int v1104;
  int v1105;
  uint64_t *v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  int v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  _QWORD *v1117;
  uint64_t v1118;
  int v1119;
  uint64_t v1120;
  int *v1121;
  int v1122;
  int v1123;
  uint64_t *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  int v1133;
  uint64_t v1134;
  uint64_t v1135;
  int v1136;
  uint64_t v1137;
  int v1138;
  uint64_t *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  _QWORD *v1145;
  uint64_t v1146;
  int v1147;
  uint64_t v1148;
  int *v1149;
  int v1150;
  uint64_t *v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  int v1155;
  uint64_t v1156;
  uint64_t v1157;
  int v1158;
  uint64_t v1159;
  int v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  int v1164;
  uint64_t v1165;
  int v1166;
  uint64_t *v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  _QWORD *v1173;
  uint64_t v1174;
  int v1175;
  uint64_t v1176;
  int *v1177;
  uint64_t *v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  int v1183;
  uint64_t v1184;
  int v1185;
  uint64_t v1186;
  int v1187;
  uint64_t v1188;
  int v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  int v1193;
  uint64_t v1194;
  int v1195;
  uint64_t *v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  _QWORD *v1202;
  uint64_t v1203;
  int v1204;
  char *v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  int *v1210;
  uint64_t *v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  ldiv_t v1218;
  uint64_t v1219;
  ldiv_t v1220;
  int v1221;
  int v1222;
  uint64_t v1223;
  int v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  int v1228;
  uint64_t v1229;
  int v1230;
  uint64_t v1231;
  uint64_t v1232;
  int v1233;
  uint64_t v1234;
  int v1235;
  uint64_t *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  float *v1241;
  int v1242;
  float v1243;
  uint64_t v1244;
  int v1245;
  int v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  int v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  int v1256;
  float v1257;
  uint64_t v1258;
  int *v1259;
  int v1260;
  int v1261;
  uint64_t v1262;
  uint64_t *v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  int v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  int v1276;
  uint64_t v1277;
  int v1278;
  uint64_t *v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  float *v1284;
  int v1285;
  float v1286;
  uint64_t v1287;
  int *v1288;
  int v1289;
  uint64_t v1290;
  uint64_t *v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  int v1302;
  uint64_t v1303;
  int v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  int v1308;
  uint64_t v1309;
  int v1310;
  uint64_t *v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  float *v1316;
  int v1317;
  float v1318;
  uint64_t v1319;
  int *v1320;
  uint64_t v1321;
  uint64_t *v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  int v1327;
  uint64_t v1328;
  int v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  int v1333;
  uint64_t v1334;
  int v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  int v1339;
  uint64_t v1340;
  int v1341;
  uint64_t *v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  float *v1347;
  int v1348;
  float v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  unint64_t v1372;
  unint64_t v1373;
  unint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  unint64_t v1379;
  unint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  int v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  int v1428;
  uint64_t v1429;
  int v1430;
  uint64_t v1431;
  int v1432;
  uint64_t v1433;
  int v1434;
  int v1435;
  int v1436;
  uint64_t v1437;
  int v1438;
  uint64_t v1439;
  int v1440;
  int v1441;
  int v1442;
  int v1443;
  uint64_t v1444;
  int v1445;
  int v1446;
  int v1447;
  uint64_t v1448;
  int v1449;
  uint64_t v1450;
  uint64_t v1451;
  int v1452;
  uint64_t v1453;
  uint64_t v1454;
  int v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  int v1459;
  uint64_t v1460;
  int v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  _QWORD *v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  _QWORD *v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  int v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1513;
  uint64_t v1514;
  int v1515;
  uint64_t v1516;
  int v1517;
  int v1518;
  uint64_t v1519;
  int v1520;
  int v1522;
  int v1523;
  int v1524;
  uint64_t v1525;
  int v1526;
  int v1527;
  int v1528;
  uint64_t v1529;
  int v1530;
  int v1531;
  int v1532;
  int v1533;
  int v1534;

  v8 = *a2;
  v9 = a6;
  v13 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v14 = v8[6];
          if (v14)
            result = (uint64_t)memset((void *)v8[19], **(unsigned __int8 **)(*(_QWORD *)result + 152), v14);
          break;
        case 1:
          goto LABEL_37;
        case 2:
          v34 = *a7;
          v35 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v36 = **a4;
              if ((int)v36 >= 1)
              {
                v37 = (_BYTE *)v8[19];
                v38 = **a5;
                v39 = (_BYTE *)(*(_QWORD *)(v35 + 152) + v34);
                do
                {
                  *v37++ = *v39;
                  v39 += v38;
                  --v36;
                }
                while (v36);
              }
              break;
            case 2:
              v178 = **a4;
              if (v178 >= 1)
              {
                v179 = 0;
                v180 = 0;
                v181 = *(_QWORD *)(v35 + 152);
                v182 = v8[19];
                v183 = (*a4)[1];
                v184 = (*a5)[1];
                v185 = **a5 - v184 * v183;
                do
                {
                  v186 = v183;
                  if ((int)v183 >= 1)
                  {
                    do
                    {
                      result = *(unsigned __int8 *)(v181 + v34);
                      *(_BYTE *)(v182 + v180++) = result;
                      v34 += v184;
                      --v186;
                    }
                    while (v186);
                  }
                  v34 += v185;
                  ++v179;
                }
                while (v179 != v178);
              }
              break;
            case 3:
              v187 = *a4;
              v188 = **a4;
              if (v188 >= 1)
              {
                v189 = 0;
                result = 0;
                v190 = *(_QWORD *)(v35 + 152);
                v191 = v8[19];
                v192 = v187[1];
                v193 = *a5;
                v194 = (*a5)[1];
                v195 = **a5 - v194 * v192;
                do
                {
                  if ((int)v192 < 1)
                  {
                    v202 = result;
                  }
                  else
                  {
                    v196 = 0;
                    v197 = v187[2];
                    v198 = *a5;
                    v199 = v194 - v193[2] * v197;
                    do
                    {
                      if ((int)v197 < 1)
                      {
                        v202 = result;
                      }
                      else
                      {
                        v200 = v198[2];
                        v201 = v197;
                        do
                        {
                          v202 = result + 1;
                          *(_BYTE *)(v191 + result) = *(_BYTE *)(v190 + v34);
                          v34 += v200;
                          ++result;
                          --v201;
                        }
                        while (v201);
                      }
                      v34 += v199;
                      ++v196;
                      result = v202;
                    }
                    while (v196 != (_DWORD)v192);
                  }
                  v34 += v195;
                  ++v189;
                  result = v202;
                }
                while (v189 != v188);
              }
              break;
            case 4:
              v203 = *a4;
              v204 = **a4;
              if (v204 >= 1)
              {
                v205 = 0;
                result = 0;
                v206 = *(_QWORD *)(v35 + 152);
                v207 = v8[19];
                v208 = v203[1];
                v209 = *a5;
                v210 = (*a5)[1];
                v211 = **a5 - v210 * v208;
                do
                {
                  if ((int)v208 < 1)
                  {
                    v222 = result;
                  }
                  else
                  {
                    v212 = 0;
                    v213 = v203[2];
                    v214 = *a5;
                    v215 = v210 - v209[2] * v213;
                    do
                    {
                      if ((int)v213 < 1)
                      {
                        v222 = result;
                      }
                      else
                      {
                        v216 = 0;
                        v217 = v203[3];
                        v218 = *a5;
                        v219 = v214[2] - v214[3] * v217;
                        do
                        {
                          if ((int)v217 < 1)
                          {
                            v222 = result;
                          }
                          else
                          {
                            v220 = v218[3];
                            v221 = v217;
                            do
                            {
                              v222 = result + 1;
                              *(_BYTE *)(v207 + result) = *(_BYTE *)(v206 + v34);
                              v34 += v220;
                              ++result;
                              --v221;
                            }
                            while (v221);
                          }
                          v34 += v219;
                          ++v216;
                          result = v222;
                        }
                        while (v216 != (_DWORD)v213);
                      }
                      v34 += v215;
                      ++v212;
                      result = v222;
                    }
                    while (v212 != (_DWORD)v208);
                  }
                  v34 += v211;
                  ++v205;
                  result = v222;
                }
                while (v205 != v204);
              }
              break;
            default:
              v168 = v8[6];
              if (v168)
              {
                v169 = 0;
                v170 = *(_QWORD *)(v35 + 152) + v34;
                v171 = v8[19];
                v172 = *a4;
                v173 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v174 = *a5;
                do
                {
                  v175 = 0;
                  if ((v173 & 0x80000000) == 0)
                  {
                    v176 = v173;
                    LODWORD(result) = v169;
                    do
                    {
                      v177 = ldiv((int)result, v172[v176]);
                      result = v177.quot;
                      v175 += v174[v176--] * v177.rem;
                    }
                    while (v176 != -1);
                  }
                  *(_BYTE *)(v171 + v169++) = *(_BYTE *)(v170 + v175);
                }
                while (v169 != v168);
              }
              break;
          }
          break;
        case 3:
          v40 = *a7;
          v41 = *a8;
          v42 = *(_QWORD **)result;
          v43 = v42[1] - *v42;
          switch(v43 >> 2)
          {
            case 1:
              v44 = (v43 << 30) - 0x100000000;
              v45 = *(int *)((char *)*a4 + (v44 >> 30));
              if (v45 >= 1)
              {
                v46 = v44 >> 29;
                v47 = *(uint64_t *)((char *)*a5 + (v44 >> 29));
                v48 = *(_QWORD *)(*a6 + v46);
                v49 = (_BYTE *)(v8[19] + v41);
                v50 = (_BYTE *)(v42[19] + v40);
                do
                {
                  *v49 = *v50;
                  v50 += v47;
                  v49 += v48;
                  --v45;
                }
                while (v45);
              }
              break;
            case 2:
              v567 = (v43 << 30) - 0x200000000;
              v568 = *(int *)((char *)*a4 + (v567 >> 30));
              if (v568 >= 1)
              {
                v569 = 0;
                v570 = v567 >> 29;
                v571 = *(uint64_t *)((char *)*a5 + (v567 >> 29));
                v572 = *(_QWORD *)(*a6 + v570);
                v573 = (v43 << 30) - 0x100000000;
                result = v573 >> 29;
                v574 = *(uint64_t *)((char *)*a5 + (v573 >> 29));
                v575 = *(_QWORD *)(*a6 + (v573 >> 29));
                v576 = *(int *)((char *)*a4 + (v573 >> 30));
                do
                {
                  if (v576 >= 1)
                  {
                    v577 = v8[19];
                    v578 = v42[19];
                    LODWORD(result) = v576;
                    do
                    {
                      *(_BYTE *)(v577 + v41) = *(_BYTE *)(v578 + v40);
                      v577 += v575;
                      v578 += v574;
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v40 += v571;
                  v41 += v572;
                  ++v569;
                }
                while (v569 != v568);
              }
              break;
            case 3:
              v579 = (v43 << 30) - 0x300000000;
              v580 = *a4;
              v581 = *(int *)((char *)*a4 + (v579 >> 30));
              if (v581 >= 1)
              {
                v582 = 0;
                v583 = v43 << 30;
                v584 = *a5;
                v585 = v579 >> 29;
                v586 = *(uint64_t *)((char *)*a5 + (v579 >> 29));
                v587 = *a6;
                v588 = *(_QWORD *)(*a6 + v585);
                v589 = v583 - 0x200000000;
                v590 = (v583 - 0x200000000) >> 29;
                v591 = v583 - 0x100000000;
                v592 = *(uint64_t *)((char *)*a5 + v590);
                v593 = *(_QWORD *)(*a6 + v590);
                v594 = *(int *)((char *)v580 + (v589 >> 30));
                result = v591 >> 32;
                do
                {
                  if (v594 >= 1)
                  {
                    v595 = 0;
                    v596 = v584[result];
                    v597 = *(_QWORD *)(v587 + 8 * result);
                    v598 = v40;
                    v599 = v580[result];
                    v600 = v41;
                    v601 = *a2;
                    do
                    {
                      if (v599 >= 1)
                      {
                        v602 = v601[19];
                        v603 = v42[19];
                        v604 = v599;
                        do
                        {
                          *(_BYTE *)(v602 + v600) = *(_BYTE *)(v603 + v598);
                          v602 += v597;
                          v603 += v596;
                          --v604;
                        }
                        while (v604);
                      }
                      v598 += v592;
                      v600 += v593;
                      ++v595;
                    }
                    while (v595 != v594);
                  }
                  v40 += v586;
                  v41 += v588;
                  ++v582;
                }
                while (v582 != v581);
              }
              break;
            case 4:
              v605 = (v43 << 30) - 0x400000000;
              v606 = *a4;
              v1523 = *(int *)((char *)*a4 + (v605 >> 30));
              if (v1523 >= 1)
              {
                v607 = 0;
                v608 = *a5;
                v609 = v605 >> 29;
                v1490 = *(uint64_t *)((char *)*a5 + v609);
                v610 = *a6;
                v1507 = *(_QWORD *)(*a6 + v609);
                v611 = v43 << 30;
                v612 = (v43 << 30) - 0x300000000;
                v613 = *(uint64_t *)((char *)*a5 + (v612 >> 29));
                v614 = *(_QWORD *)(*a6 + (v612 >> 29));
                v615 = *(int *)((char *)v606 + (v612 >> 30));
                v1473 = (v611 - 0x200000000) >> 32;
                v616 = (v611 - 0x100000000) >> 32;
                do
                {
                  result = v41;
                  v617 = v40;
                  if (v615 >= 1)
                  {
                    v618 = 0;
                    v619 = v608[v1473];
                    v620 = *(_QWORD *)(v610 + 8 * v1473);
                    v621 = v40;
                    v622 = v606[v1473];
                    v623 = v41;
                    do
                    {
                      if (v622 >= 1)
                      {
                        v624 = 0;
                        v625 = v608[v616];
                        v626 = *(_QWORD *)(v610 + 8 * v616);
                        v627 = v621;
                        v628 = v606[v616];
                        v629 = v623;
                        v630 = *a2;
                        do
                        {
                          if (v628 >= 1)
                          {
                            v631 = v630[19];
                            v632 = v42[19];
                            v633 = v628;
                            do
                            {
                              *(_BYTE *)(v631 + v629) = *(_BYTE *)(v632 + v627);
                              v631 += v626;
                              v632 += v625;
                              --v633;
                            }
                            while (v633);
                          }
                          v627 += v619;
                          v629 += v620;
                          ++v624;
                        }
                        while (v624 != v622);
                      }
                      v621 += v613;
                      v623 += v614;
                      ++v618;
                    }
                    while (v618 != v615);
                  }
                  v40 = v617 + v1490;
                  v41 = result + v1507;
                  ++v607;
                }
                while (v607 != v1523);
              }
              break;
            case 5:
              v634 = (v43 << 30) - 0x500000000;
              v635 = *a4;
              v1449 = *(int *)((char *)*a4 + (v634 >> 30));
              if (v1449 >= 1)
              {
                v1461 = 0;
                v636 = v43 << 30;
                v637 = *a5;
                v638 = v634 >> 29;
                v639 = *a6;
                v1429 = *(_QWORD *)(*a6 + v638);
                v1439 = *(uint64_t *)((char *)*a5 + v638);
                v640 = ((v43 << 30) - 0x400000000) >> 29;
                v1491 = *(_QWORD *)(*a6 + v640);
                v1508 = *(uint64_t *)((char *)*a5 + v640);
                v1524 = *(int *)((char *)v635 + ((v636 - 0x400000000) >> 30));
                v1419 = (v636 - 0x300000000) >> 32;
                v1474 = (v636 - 0x200000000) >> 32;
                v641 = (v636 - 0x100000000) >> 32;
                do
                {
                  v1387 = v41;
                  v1397 = v40;
                  if (v1524 >= 1)
                  {
                    v642 = 0;
                    v643 = v637[v1419];
                    v644 = *(_QWORD *)(v639 + 8 * v1419);
                    result = v41;
                    v645 = v40;
                    v646 = v635[v1419];
                    do
                    {
                      if (v646 >= 1)
                      {
                        v647 = 0;
                        v648 = v637[v1474];
                        v649 = *(_QWORD *)(v639 + 8 * v1474);
                        v650 = v645;
                        v651 = v635[v1474];
                        v652 = result;
                        do
                        {
                          if (v651 >= 1)
                          {
                            v653 = 0;
                            v654 = v637[v641];
                            v655 = *(_QWORD *)(v639 + 8 * v641);
                            v656 = v650;
                            v657 = v635[v641];
                            v658 = v652;
                            v659 = *a2;
                            do
                            {
                              if (v657 >= 1)
                              {
                                v660 = v659[19];
                                v661 = v42[19];
                                v662 = v657;
                                do
                                {
                                  *(_BYTE *)(v660 + v658) = *(_BYTE *)(v661 + v656);
                                  v660 += v655;
                                  v661 += v654;
                                  --v662;
                                }
                                while (v662);
                              }
                              v656 += v648;
                              v658 += v649;
                              ++v653;
                            }
                            while (v653 != v651);
                          }
                          v650 += v643;
                          v652 += v644;
                          ++v647;
                        }
                        while (v647 != v646);
                      }
                      v645 += v1508;
                      result += v1491;
                      ++v642;
                    }
                    while (v642 != v1524);
                  }
                  v40 = v1397 + v1439;
                  v41 = v1387 + v1429;
                  ++v1461;
                }
                while (v1461 != v1449);
              }
              break;
            default:
              v530 = (char *)a4[1];
              LODWORD(v531) = 1;
              v532 = -20;
              do
              {
                v531 = *(int *)&v530[v532] * (uint64_t)(int)v531;
                v532 += 4;
              }
              while (v532);
              v1379 = v42[6];
              if (v1379)
              {
                v533 = 0;
                v534 = (v43 << 30) - 0x500000000;
                v535 = *a4;
                v1356 = *v8;
                v536 = *a5;
                v1361 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1366 = ((unint64_t)(v530 - (char *)*a4) >> 2) - 1;
                v537 = *a6;
                v1409 = *(_QWORD *)(*a6 + (v534 >> 29));
                v1418 = *(uint64_t *)((char *)*a5 + (v534 >> 29));
                v1428 = *(int *)((char *)*a4 + (v534 >> 30));
                v1351 = ((v43 << 30) - 0x400000000) >> 32;
                v1396 = *a7;
                v1403 = ((v43 << 30) - 0x300000000) >> 32;
                v1472 = ((v43 << 30) - 0x200000000) >> 32;
                v538 = ((v43 << 30) - 0x100000000) >> 32;
                v1386 = *a8;
                v1371 = v531;
                do
                {
                  v539 = v1366;
                  if ((v1366 & 0x80000000) != 0)
                  {
                    v540 = 0;
                  }
                  else
                  {
                    v540 = 0;
                    LODWORD(result) = v533;
                    do
                    {
                      v541 = ldiv((int)result, v535[v539]);
                      result = v541.quot;
                      v540 += v536[v539--] * v541.rem;
                    }
                    while (v539 != -1);
                  }
                  v542 = v1361;
                  v1382 = v533;
                  v543 = 0;
                  if ((v1361 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v533;
                    do
                    {
                      v544 = ldiv((int)result, *(int *)(v1356 + 4 * v542));
                      result = v544.quot;
                      v543 += *(_QWORD *)(v537 + 8 * v542--) * v544.rem;
                    }
                    while (v542 != -1);
                  }
                  if (v1428 >= 1)
                  {
                    v545 = 0;
                    v1460 = v540 + v1396;
                    v1448 = v543 + v1386;
                    v1489 = *(_QWORD *)(v537 + 8 * v1351);
                    v1506 = v536[v1351];
                    v1522 = v535[v1351];
                    do
                    {
                      v1438 = v545;
                      if (v1522 >= 1)
                      {
                        v546 = 0;
                        v547 = v536[v1403];
                        v548 = *(_QWORD *)(v537 + 8 * v1403);
                        v550 = v1448;
                        v549 = v1460;
                        result = v535[v1403];
                        do
                        {
                          if ((int)result >= 1)
                          {
                            v551 = 0;
                            v552 = v536[v1472];
                            v553 = *(_QWORD *)(v537 + 8 * v1472);
                            v554 = v549;
                            v555 = v535[v1472];
                            v556 = v550;
                            do
                            {
                              if (v555 >= 1)
                              {
                                v557 = 0;
                                v558 = v536[v538];
                                v559 = *(_QWORD *)(v537 + 8 * v538);
                                v560 = v554;
                                v561 = v535[v538];
                                v562 = v556;
                                v563 = *a2;
                                do
                                {
                                  if (v561 >= 1)
                                  {
                                    v564 = v563[19];
                                    v565 = v42[19];
                                    v566 = v561;
                                    do
                                    {
                                      *(_BYTE *)(v564 + v562) = *(_BYTE *)(v565 + v560);
                                      v564 += v559;
                                      v565 += v558;
                                      --v566;
                                    }
                                    while (v566);
                                  }
                                  v560 += v552;
                                  v562 += v553;
                                  ++v557;
                                }
                                while (v557 != v555);
                              }
                              v554 += v547;
                              v556 += v548;
                              ++v551;
                            }
                            while (v551 != (_DWORD)result);
                          }
                          v549 += v1506;
                          v550 += v1489;
                          ++v546;
                        }
                        while (v546 != v1522);
                      }
                      v1460 += v1418;
                      v1448 += v1409;
                      v545 = v1438 + 1;
                    }
                    while (v1438 + 1 != v1428);
                  }
                  v533 += v1371;
                }
                while (v1379 > v1382 + v1371);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v15 = 0;
            v16 = **(_BYTE **)(*(_QWORD *)result + 152);
            v17 = v8[19];
            do
              *(_BYTE *)(v17 + v15++) = v16;
            while ((*a2)[6] > v15);
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          v51 = *a7;
          v52 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v53 = 0;
                v54 = *(_QWORD *)(v52 + 152);
                v55 = v8[19];
                do
                {
                  *(_BYTE *)(v55 + v53) = *(_BYTE *)(v54 + v51);
                  v51 += **a5;
                  ++v53;
                }
                while (**a4 > (int)v53);
              }
              break;
            case 2:
              v232 = *a4;
              v233 = **a4;
              if (v233 >= 1)
              {
                v234 = 0;
                v235 = 0;
                v236 = *(_QWORD *)(v52 + 152);
                v237 = v8[19];
                do
                {
                  v238 = v232[1];
                  if (v238 < 1)
                  {
                    v239 = *a5;
                    v240 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v237 + v235 + result) = *(_BYTE *)(v236 + v51);
                      v239 = *a5;
                      v240 = (*a5)[1];
                      v51 += v240;
                      v232 = *a4;
                      v238 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v238);
                    v233 = *v232;
                    v235 += result;
                  }
                  v51 = *v239 + v51 - v240 * v238;
                  ++v234;
                }
                while (v234 < v233);
              }
              break;
            case 3:
              v241 = *a4;
              v242 = **a4;
              if (v242 >= 1)
              {
                v243 = 0;
                v244 = 0;
                v245 = *(_QWORD *)(v52 + 152);
                v246 = v8[19];
                do
                {
                  v247 = v241[1];
                  if (v247 < 1)
                  {
                    v251 = *a5;
                    v252 = (*a5)[1];
                  }
                  else
                  {
                    for (i = 0; i < v247; ++i)
                    {
                      v249 = v241[2];
                      if (v249 < 1)
                      {
                        v251 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v250 = 0;
                        do
                        {
                          *(_BYTE *)(v246 + v244 + v250) = *(_BYTE *)(v245 + v51);
                          v251 = *a5;
                          result = (*a5)[2];
                          v51 += result;
                          v241 = *a4;
                          v249 = (*a4)[2];
                          ++v250;
                        }
                        while ((int)v250 < v249);
                        v244 += v250;
                      }
                      v252 = v251[1];
                      v51 = v252 + v51 - result * v249;
                      v247 = v241[1];
                    }
                    v242 = *v241;
                  }
                  v51 = *v251 + v51 - v252 * v247;
                  ++v243;
                }
                while (v243 < v242);
              }
              break;
            case 4:
              v253 = *a4;
              v254 = **a4;
              if (v254 >= 1)
              {
                v255 = 0;
                v256 = 0;
                v257 = *(_QWORD *)(v52 + 152);
                v258 = v8[19];
                do
                {
                  v259 = v253[1];
                  if (v259 < 1)
                  {
                    v265 = *a5;
                    v267 = (*a5)[1];
                  }
                  else
                  {
                    for (j = 0; j < v259; ++j)
                    {
                      v261 = v253[2];
                      if (v261 < 1)
                      {
                        v265 = *a5;
                        v266 = (*a5)[2];
                      }
                      else
                      {
                        for (k = 0; k < v261; ++k)
                        {
                          v263 = v253[3];
                          if (v263 < 1)
                          {
                            v265 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v264 = 0;
                            do
                            {
                              *(_BYTE *)(v258 + v256 + v264) = *(_BYTE *)(v257 + v51);
                              v265 = *a5;
                              result = (*a5)[3];
                              v51 += result;
                              v253 = *a4;
                              v263 = (*a4)[3];
                              ++v264;
                            }
                            while ((int)v264 < v263);
                            v256 += v264;
                          }
                          v266 = v265[2];
                          v51 = v266 + v51 - result * v263;
                          v261 = v253[2];
                        }
                      }
                      v267 = v265[1];
                      v51 = v267 + v51 - v266 * v261;
                      v259 = v253[1];
                    }
                    v254 = *v253;
                  }
                  v51 = *v265 + v51 - v267 * v259;
                  ++v255;
                }
                while (v255 < v254);
              }
              break;
            default:
              if (v8[6])
              {
                v223 = 0;
                v224 = *(_QWORD *)(v52 + 152) + v51;
                v225 = v8[19];
                do
                {
                  v226 = *a4;
                  v227 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v228 = 0;
                  v229 = (v227 - 1);
                  if ((int)v227 - 1 >= 0)
                  {
                    v230 = *a5;
                    LODWORD(result) = v223;
                    do
                    {
                      v231 = ldiv((int)result, v226[v229]);
                      result = v231.quot;
                      v228 += v230[v229--] * v231.rem;
                    }
                    while (v229 != -1);
                  }
                  *(_BYTE *)(v225 + v223++) = *(_BYTE *)(v224 + v228);
                }
                while (v223 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v56 = *a7;
          v57 = *a8;
          v58 = *(_QWORD **)result;
          v59 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v59 >> 2)
          {
            case 1:
              v60 = (v59 << 30) - 0x100000000;
              v61 = *(int *)((char *)*a4 + (v60 >> 30));
              if (v61 >= 1)
              {
                v62 = v60 >> 29;
                v63 = *(uint64_t *)((char *)*a5 + (v60 >> 29));
                v64 = *(_QWORD *)(*a6 + v62);
                v65 = (_BYTE *)(v8[19] + v57);
                v66 = (_BYTE *)(v58[19] + v56);
                do
                {
                  *v65 = *v66;
                  v66 += v63;
                  v65 += v64;
                  --v61;
                }
                while (v61);
              }
              break;
            case 2:
              v685 = (v59 << 30) - 0x200000000;
              v686 = *(int *)((char *)*a4 + (v685 >> 30));
              if (v686 >= 1)
              {
                v687 = 0;
                v688 = v685 >> 29;
                v689 = *(uint64_t *)((char *)*a5 + (v685 >> 29));
                v690 = *(_QWORD *)(*a6 + v688);
                do
                {
                  v691 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x100000000;
                  v692 = *(int *)((char *)*a4 + (v691 >> 30));
                  if (v692 >= 1)
                  {
                    v693 = v691 >> 29;
                    v694 = *(uint64_t *)((char *)*a5 + (v691 >> 29));
                    v695 = *(_QWORD *)(*a6 + v693);
                    v696 = (*a2)[19];
                    v697 = *(_QWORD *)(*(_QWORD *)v13 + 152);
                    do
                    {
                      result = *(unsigned __int8 *)(v697 + v56);
                      *(_BYTE *)(v696 + v57) = result;
                      v696 += v695;
                      v697 += v694;
                      --v692;
                    }
                    while (v692);
                  }
                  v56 += v689;
                  v57 += v690;
                  ++v687;
                }
                while (v687 != v686);
              }
              break;
            case 3:
              v698 = (v59 << 30) - 0x300000000;
              v699 = *(int *)((char *)*a4 + (v698 >> 30));
              if (v699 >= 1)
              {
                v700 = 0;
                v701 = v698 >> 29;
                v702 = *(uint64_t *)((char *)*a5 + (v698 >> 29));
                v703 = *(_QWORD *)(*a6 + v701);
                do
                {
                  v704 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x200000000;
                  v705 = *(int *)((char *)*a4 + (v704 >> 30));
                  if (v705 >= 1)
                  {
                    v706 = 0;
                    v707 = v704 >> 29;
                    v708 = *(uint64_t *)((char *)*a5 + (v704 >> 29));
                    v709 = *(_QWORD *)(*v9 + v707);
                    result = v56;
                    v710 = v57;
                    do
                    {
                      v711 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x100000000;
                      v712 = *(int *)((char *)*a4 + (v711 >> 30));
                      if (v712 >= 1)
                      {
                        v713 = v711 >> 29;
                        v714 = *(uint64_t *)((char *)*a5 + (v711 >> 29));
                        v715 = *(_QWORD *)(*v9 + v713);
                        v716 = (*a2)[19];
                        v717 = *(_QWORD *)(*(_QWORD *)v13 + 152);
                        do
                        {
                          *(_BYTE *)(v716 + v710) = *(_BYTE *)(v717 + result);
                          v716 += v715;
                          v717 += v714;
                          --v712;
                        }
                        while (v712);
                      }
                      result += v708;
                      v710 += v709;
                      ++v706;
                    }
                    while (v706 != v705);
                  }
                  v56 += v702;
                  v57 += v703;
                  ++v700;
                }
                while (v700 != v699);
              }
              break;
            case 4:
              goto LABEL_571;
            case 5:
              v718 = (v59 << 30) - 0x500000000;
              v719 = *(int *)((char *)*a4 + (v718 >> 30));
              if (v719 >= 1)
              {
                v720 = v718 >> 29;
                v721 = *(uint64_t *)((char *)*a5 + v720);
                v722 = *(_QWORD *)(*a6 + v720);
                do
                {
                  v56 += v721;
                  v57 += v722;
                  --v719;
                }
                while (v719);
              }
              break;
            default:
              LODWORD(v663) = 1;
              v664 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v663 = a4[1][v664++] * (uint64_t)(int)v663;
              while (v664 * 4);
              if (v58[6])
              {
                result = 0;
                v1450 = *a8;
                v1462 = *a7;
                v1475 = v663;
                do
                {
                  v665 = *a4;
                  v666 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v667 = (v666 - 1);
                  v1492 = v58;
                  v1525 = result;
                  v668 = 0;
                  if ((int)v666 - 1 >= 0)
                  {
                    v669 = *a5;
                    do
                    {
                      v670 = ldiv((int)result, v665[v667]);
                      LODWORD(result) = v670.quot;
                      v668 += v669[v667--] * v670.rem;
                    }
                    while (v667 != -1);
                  }
                  v671 = **a2;
                  v672 = (unint64_t)((*a2)[1] - v671) >> 2;
                  v673 = *v9;
                  v674 = 0;
                  v675 = (v672 - 1);
                  if ((int)v672 - 1 >= 0)
                  {
                    quot = v1525;
                    do
                    {
                      v677 = ldiv(quot, *(int *)(v671 + 4 * v675));
                      quot = v677.quot;
                      v674 += *(_QWORD *)(v673 + 8 * v675--) * v677.rem;
                    }
                    while (v675 != -1);
                  }
                  v58 = v1492;
                  v678 = ((v58[1] - *v58) << 30) - 0x500000000;
                  v679 = *(int *)((char *)v665 + (v678 >> 30));
                  if (v679 >= 1)
                  {
                    v680 = v668 + v1462;
                    v681 = v678 >> 29;
                    v682 = *(uint64_t *)((char *)*a5 + v681);
                    v683 = *(_QWORD *)(v673 + v681);
                    v684 = v674 + v1450;
                    do
                    {
                      v680 += v682;
                      v684 += v683;
                      --v679;
                    }
                    while (v679);
                    v58 = *(_QWORD **)v13;
                  }
                  v9 = a6;
                  result = v1525 + v1475;
                }
                while (v58[6] > (unint64_t)(v1525 + v1475));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v18 = v8[6];
          if (v18)
          {
            v19 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v20 = (_DWORD *)v8[19];
            do
            {
              *v20++ = v19;
              --v18;
            }
            while (v18);
          }
          break;
        case 1:
          v67 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v67)
          {
            v68 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v69 = (_DWORD *)v8[19];
            do
            {
              v70 = *v68++;
              *v69++ = v70;
              --v67;
            }
            while (v67);
          }
          break;
        case 2:
          v71 = *a7;
          v72 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v73 = *a4;
              if (**a4 >= 1)
              {
                v74 = 0;
                v75 = v8[19];
                v76 = **a5;
                v77 = (unsigned __int8 *)(*(_QWORD *)(v72 + 152) + v71);
                do
                {
                  *(_DWORD *)(v75 + 4 * v74) = *v77;
                  v77 += v76;
                  ++v74;
                }
                while (*v73 > (int)v74);
              }
              break;
            case 2:
              v278 = *a4;
              v279 = **a4;
              if (v279 >= 1)
              {
                v280 = 0;
                v281 = 0;
                v282 = *(_QWORD *)(v72 + 152);
                v283 = v8[19];
                v284 = **a5;
                v285 = (*a5)[1];
                v286 = v278[1];
                do
                {
                  if (v286 >= 1)
                  {
                    v287 = 0;
                    do
                    {
                      *(_DWORD *)(v283 + 4 * v281 + 4 * v287) = *(unsigned __int8 *)(v282 + v71);
                      v71 += v285;
                      v286 = v278[1];
                      ++v287;
                    }
                    while ((int)v287 < v286);
                    v279 = *v278;
                    v281 += v287;
                  }
                  result = v286;
                  v71 = v71 + v284 - v285 * v286;
                  ++v280;
                }
                while (v280 < v279);
              }
              break;
            case 3:
              v288 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v289 = 0;
                v290 = 0;
                v291 = *(_QWORD *)(v72 + 152);
                v292 = v8[19];
                v293 = *a5;
                v294 = **a5;
                v295 = (*a5)[1];
                v296 = v288[1];
                do
                {
                  if (v296 >= 1)
                  {
                    v297 = 0;
                    v298 = *a5;
                    v299 = v293[2];
                    v300 = v288[2];
                    do
                    {
                      if (v300 >= 1)
                      {
                        v301 = 0;
                        v302 = v298[2];
                        do
                        {
                          *(_DWORD *)(v292 + 4 * v290 + 4 * v301) = *(unsigned __int8 *)(v291 + v71);
                          v71 += v302;
                          v300 = v288[2];
                          ++v301;
                        }
                        while ((int)v301 < v300);
                        v296 = v288[1];
                        v290 += v301;
                      }
                      v71 = v71 + v295 - v299 * v300;
                      ++v297;
                    }
                    while (v297 < v296);
                    result = *v288;
                  }
                  v71 = v71 + v294 - v295 * v296;
                  ++v289;
                }
                while (v289 < (int)result);
              }
              break;
            case 4:
              v303 = *a4;
              v304 = **a4;
              if (v304 >= 1)
              {
                v305 = 0;
                v306 = 0;
                v307 = *(_QWORD *)(v72 + 152);
                v308 = v8[19];
                v309 = *a5;
                v310 = **a5;
                v311 = (*a5)[1];
                v312 = v303[1];
                do
                {
                  if (v312 >= 1)
                  {
                    v313 = 0;
                    v314 = *a5;
                    v315 = v309[2];
                    v316 = v303[2];
                    do
                    {
                      if (v316 >= 1)
                      {
                        v317 = 0;
                        v318 = *a5;
                        v319 = v314[2];
                        v320 = v314[3];
                        v321 = v303[3];
                        do
                        {
                          if (v321 >= 1)
                          {
                            v322 = 0;
                            v323 = v318[3];
                            do
                            {
                              *(_DWORD *)(v308 + 4 * v306 + 4 * v322) = *(unsigned __int8 *)(v307 + v71);
                              v71 += v323;
                              v321 = v303[3];
                              ++v322;
                            }
                            while ((int)v322 < v321);
                            v316 = v303[2];
                            v306 += v322;
                          }
                          v71 = v71 + v319 - v320 * v321;
                          ++v317;
                        }
                        while (v317 < v316);
                        v312 = v303[1];
                      }
                      v71 = v71 + v311 - v315 * v316;
                      ++v313;
                    }
                    while (v313 < v312);
                    v304 = *v303;
                  }
                  result = v312;
                  v71 = v71 + v310 - v311 * v312;
                  ++v305;
                }
                while (v305 < v304);
              }
              break;
            default:
              v268 = v8[6];
              if (v268)
              {
                v269 = 0;
                v270 = *(_QWORD *)(v72 + 152) + v71;
                v271 = v8[19];
                v272 = *a4;
                v273 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v274 = *a5;
                do
                {
                  v275 = 0;
                  if ((v273 & 0x80000000) == 0)
                  {
                    v276 = v273;
                    LODWORD(result) = v269;
                    do
                    {
                      v277 = ldiv((int)result, v272[v276]);
                      result = v277.quot;
                      v275 += v274[v276--] * v277.rem;
                    }
                    while (v276 != -1);
                  }
                  *(_DWORD *)(v271 + 4 * v269++) = *(unsigned __int8 *)(v270 + v275);
                }
                while (v269 != v268);
              }
              break;
          }
          break;
        case 3:
          v78 = *a7;
          v1376 = *a8;
          v79 = *(_QWORD **)result;
          v80 = v79[1] - *v79;
          switch(v80 >> 2)
          {
            case 1:
              v81 = (v80 << 30) - 0x100000000;
              v82 = *(int *)((char *)*a4 + (v81 >> 30));
              if (v82 >= 1)
              {
                v83 = v81 >> 29;
                v84 = *(uint64_t *)((char *)*a5 + (v81 >> 29));
                v85 = (_DWORD *)(v8[19] + 4 * v1376);
                v86 = (unsigned __int8 *)(v79[19] + v78);
                v87 = 4 * *(_QWORD *)(*a6 + v83);
                do
                {
                  *v85 = *v86;
                  v86 += v84;
                  v85 = (_DWORD *)((char *)v85 + v87);
                  --v82;
                }
                while (v82);
              }
              break;
            case 2:
              v761 = (v80 << 30) - 0x200000000;
              v762 = *a4;
              v763 = *(int *)((char *)*a4 + (v761 >> 30));
              if (v763 >= 1)
              {
                v764 = 0;
                v765 = v761 >> 29;
                v766 = *(uint64_t *)((char *)*a5 + (v761 >> 29));
                v767 = *(_QWORD *)(*a6 + v765);
                v768 = (v80 << 30) - 0x100000000;
                v769 = *(uint64_t *)((char *)*a5 + (v768 >> 29));
                v770 = *(_QWORD *)(*a6 + (v768 >> 29));
                v771 = v768 >> 32;
                v772 = 4 * v1376;
                v773 = 4 * v767;
                v774 = 4 * v770;
                do
                {
                  result = v762[v771];
                  if ((int)result >= 1)
                  {
                    v775 = v79[19];
                    v776 = (_DWORD *)(v8[19] + v772);
                    do
                    {
                      *v776 = *(unsigned __int8 *)(v775 + v78);
                      v776 = (_DWORD *)((char *)v776 + v774);
                      v775 += v769;
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v78 += v766;
                  ++v764;
                  v772 += v773;
                }
                while (v764 != v763);
              }
              break;
            case 3:
              v777 = (v80 << 30) - 0x300000000;
              v778 = *a4;
              v779 = *(int *)((char *)*a4 + (v777 >> 30));
              if (v779 >= 1)
              {
                v780 = 0;
                v781 = *a5;
                v782 = v777 >> 29;
                v783 = *(uint64_t *)((char *)*a5 + (v777 >> 29));
                v784 = v80 << 30;
                v785 = *a6;
                v786 = *(_QWORD *)(*a6 + v782);
                v787 = (v784 - 0x200000000) >> 32;
                v788 = (v784 - 0x200000000) >> 29;
                v789 = v784 - 0x100000000;
                v790 = *(uint64_t *)((char *)*a5 + v788);
                v791 = *(_QWORD *)(*a6 + v788);
                v792 = v789 >> 32;
                v793 = 4 * v1376;
                result = 4 * v786;
                v794 = 4 * v791;
                do
                {
                  v795 = v778[v787];
                  if (v795 >= 1)
                  {
                    v796 = 0;
                    v797 = v781[v792];
                    v798 = *a2;
                    v799 = 4 * *(_QWORD *)(v785 + 8 * v792);
                    v800 = v793;
                    v801 = v78;
                    do
                    {
                      v802 = v778[v792];
                      if (v802 >= 1)
                      {
                        v803 = v79[19];
                        v804 = (_DWORD *)(v798[19] + v800);
                        do
                        {
                          *v804 = *(unsigned __int8 *)(v803 + v801);
                          v804 = (_DWORD *)((char *)v804 + v799);
                          v803 += v797;
                          --v802;
                        }
                        while (v802);
                      }
                      v801 += v790;
                      ++v796;
                      v800 += v794;
                    }
                    while (v796 != v795);
                  }
                  v78 += v783;
                  ++v780;
                  v793 += result;
                }
                while (v780 != v779);
              }
              break;
            case 4:
              v805 = (v80 << 30) - 0x400000000;
              v806 = *a4;
              v1527 = *(int *)((char *)*a4 + (v805 >> 30));
              if (v1527 >= 1)
              {
                v807 = 0;
                v808 = *a5;
                v809 = v805 >> 29;
                v1494 = *(uint64_t *)((char *)*a5 + v809);
                v810 = *a6;
                v811 = (v80 << 30) - 0x300000000;
                v812 = (v80 << 30) - 0x200000000;
                v813 = (v80 << 30) - 0x100000000;
                v814 = *(uint64_t *)((char *)*a5 + (v811 >> 29));
                v815 = v812 >> 32;
                v816 = v813 >> 32;
                result = 4 * v1376;
                v1477 = 4 * *(_QWORD *)(*a6 + v809);
                v817 = 4 * *(_QWORD *)(*a6 + (v811 >> 29));
                do
                {
                  v818 = v78;
                  v819 = v806[v811 >> 32];
                  if (v819 >= 1)
                  {
                    v820 = 0;
                    v821 = v808[v815];
                    v822 = 4 * *(_QWORD *)(v810 + 8 * v815);
                    v823 = result;
                    v824 = v78;
                    do
                    {
                      v825 = v806[v815];
                      if (v825 >= 1)
                      {
                        v826 = 0;
                        v827 = v808[v816];
                        v828 = *a2;
                        v829 = 4 * *(_QWORD *)(v810 + 8 * v816);
                        v830 = v823;
                        v831 = v824;
                        do
                        {
                          v832 = v806[v816];
                          if (v832 >= 1)
                          {
                            v833 = v79[19];
                            v834 = (_DWORD *)(v828[19] + v830);
                            do
                            {
                              *v834 = *(unsigned __int8 *)(v833 + v831);
                              v834 = (_DWORD *)((char *)v834 + v829);
                              v833 += v827;
                              --v832;
                            }
                            while (v832);
                          }
                          v831 += v821;
                          ++v826;
                          v830 += v822;
                        }
                        while (v826 != v825);
                      }
                      v824 += v814;
                      ++v820;
                      v823 += v817;
                    }
                    while (v820 != v819);
                  }
                  v78 = v818 + v1494;
                  ++v807;
                  result += v1477;
                }
                while (v807 != v1527);
              }
              break;
            case 5:
              v835 = (v80 << 30) - 0x500000000;
              v836 = *a4;
              v1441 = *(int *)((char *)*a4 + (v835 >> 30));
              if (v1441 >= 1)
              {
                v1452 = 0;
                v837 = *a5;
                v838 = v835 >> 29;
                v1431 = *(uint64_t *)((char *)*a5 + v838);
                v839 = v80 << 30;
                v840 = *a6;
                v1421 = (v839 - 0x400000000) >> 32;
                v841 = (v839 - 0x400000000) >> 29;
                v1495 = *(uint64_t *)((char *)*a5 + v841);
                v1511 = (v839 - 0x300000000) >> 32;
                v842 = (v839 - 0x200000000) >> 32;
                result = (v839 - 0x100000000) >> 32;
                v1411 = 4 * *(_QWORD *)(*a6 + v838);
                v1464 = 4 * v1376;
                v1478 = 4 * *(_QWORD *)(*a6 + v841);
                do
                {
                  v1389 = v78;
                  v1528 = v836[v1421];
                  if (v1528 >= 1)
                  {
                    v843 = 0;
                    v844 = v837[v1511];
                    v845 = 4 * *(_QWORD *)(v840 + 8 * v1511);
                    v846 = v1464;
                    v847 = v78;
                    do
                    {
                      v848 = v836[v1511];
                      if (v848 >= 1)
                      {
                        v849 = 0;
                        v850 = v837[v842];
                        v851 = 4 * *(_QWORD *)(v840 + 8 * v842);
                        v852 = v846;
                        v853 = v847;
                        do
                        {
                          v854 = v836[v842];
                          if (v854 >= 1)
                          {
                            v855 = 0;
                            v856 = v837[result];
                            v857 = *a2;
                            v858 = 4 * *(_QWORD *)(v840 + 8 * result);
                            v859 = v852;
                            v860 = v853;
                            do
                            {
                              v861 = v836[result];
                              if (v861 >= 1)
                              {
                                v862 = v79[19];
                                v863 = (_DWORD *)(v857[19] + v859);
                                do
                                {
                                  *v863 = *(unsigned __int8 *)(v862 + v860);
                                  v863 = (_DWORD *)((char *)v863 + v858);
                                  v862 += v856;
                                  --v861;
                                }
                                while (v861);
                              }
                              v860 += v850;
                              ++v855;
                              v859 += v851;
                            }
                            while (v855 != v854);
                          }
                          v853 += v844;
                          ++v849;
                          v852 += v845;
                        }
                        while (v849 != v848);
                      }
                      v847 += v1495;
                      ++v843;
                      v846 += v1478;
                    }
                    while (v843 != v1528);
                  }
                  v78 = v1389 + v1431;
                  v1464 += v1411;
                  ++v1452;
                }
                while (v1452 != v1441);
              }
              break;
            default:
              v723 = (char *)a4[1];
              LODWORD(v724) = 1;
              v725 = -20;
              do
              {
                v724 = *(int *)&v723[v725] * (uint64_t)(int)v724;
                v725 += 4;
              }
              while (v725);
              v1372 = v79[6];
              if (v1372)
              {
                result = 0;
                v726 = *a4;
                v1362 = ((unint64_t)(v723 - (char *)*a4) >> 2) - 1;
                v727 = *a5;
                v1410 = *v8;
                v1357 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v728 = (v80 << 30) - 0x500000000;
                v729 = *a6;
                v1404 = *(uint64_t *)((char *)*a5 + (v728 >> 29));
                v1352 = v728 >> 32;
                v1420 = ((v80 << 30) - 0x400000000) >> 32;
                v1510 = ((v80 << 30) - 0x300000000) >> 32;
                v730 = ((v80 << 30) - 0x200000000) >> 32;
                v731 = ((v80 << 30) - 0x100000000) >> 32;
                v1388 = *a7;
                v1398 = 4 * *(_QWORD *)(*a6 + (v728 >> 29));
                v1367 = v724;
                do
                {
                  v732 = v1362;
                  v1383 = result;
                  v733 = 0;
                  if ((v1362 & 0x80000000) == 0)
                  {
                    do
                    {
                      v734 = ldiv((int)result, v726[v732]);
                      LODWORD(result) = v734.quot;
                      v733 += v727[v732--] * v734.rem;
                    }
                    while (v732 != -1);
                  }
                  v735 = v1357;
                  if ((v1357 & 0x80000000) != 0)
                  {
                    v736 = 0;
                  }
                  else
                  {
                    v736 = 0;
                    v737 = v1383;
                    do
                    {
                      v738 = ldiv(v737, *(int *)(v1410 + 4 * v735));
                      v737 = v738.quot;
                      v736 += *(_QWORD *)(v729 + 8 * v735--) * v738.rem;
                    }
                    while (v735 != -1);
                  }
                  v1430 = v726[v1352];
                  if (v1430 >= 1)
                  {
                    v739 = 0;
                    v1493 = v727[v1420];
                    v1463 = v733 + v1388;
                    v1451 = 4 * (v736 + v1376);
                    v1476 = 4 * *(_QWORD *)(v729 + 8 * v1420);
                    do
                    {
                      v1440 = v739;
                      v1526 = v726[v1420];
                      if (v1526 >= 1)
                      {
                        v740 = 0;
                        v741 = v727[v1510];
                        v742 = 4 * *(_QWORD *)(v729 + 8 * v1510);
                        v744 = v1451;
                        v743 = v1463;
                        do
                        {
                          v745 = v726[v1510];
                          if (v745 >= 1)
                          {
                            v746 = 0;
                            v747 = v727[v730];
                            v748 = 4 * *(_QWORD *)(v729 + 8 * v730);
                            v749 = v744;
                            v750 = v743;
                            do
                            {
                              v751 = v726[v730];
                              if (v751 >= 1)
                              {
                                v752 = 0;
                                v753 = v727[v731];
                                v754 = *a2;
                                v755 = 4 * *(_QWORD *)(v729 + 8 * v731);
                                v756 = v749;
                                v757 = v750;
                                do
                                {
                                  v758 = v726[v731];
                                  if (v758 >= 1)
                                  {
                                    v759 = v79[19];
                                    v760 = (_DWORD *)(v754[19] + v756);
                                    do
                                    {
                                      *v760 = *(unsigned __int8 *)(v759 + v757);
                                      v760 = (_DWORD *)((char *)v760 + v755);
                                      v759 += v753;
                                      --v758;
                                    }
                                    while (v758);
                                  }
                                  v757 += v747;
                                  ++v752;
                                  v756 += v748;
                                }
                                while (v752 != v751);
                              }
                              v750 += v741;
                              ++v746;
                              v749 += v742;
                            }
                            while (v746 != v745);
                          }
                          v743 += v1493;
                          ++v740;
                          v744 += v1476;
                        }
                        while (v740 != v1526);
                      }
                      v1463 += v1404;
                      v739 = v1440 + 1;
                      v1451 += v1398;
                    }
                    while (v1440 + 1 != v1430);
                  }
                  result = v1383 + v1367;
                }
                while (v1372 > v1383 + v1367);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v21 = 0;
            v22 = **(_BYTE **)(*(_QWORD *)result + 152);
            v23 = v8[19];
            do
              *(_BYTE *)(v23 + v21++) = v22;
            while ((*a2)[6] > v21);
          }
          break;
        case 1:
LABEL_37:
          v33 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v33)
            result = (uint64_t)memmove((void *)v8[19], *(const void **)(*(_QWORD *)result + 152), v33);
          break;
        case 2:
          v88 = *a7;
          v89 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v90 = 0;
                v91 = *(_QWORD *)(v89 + 152);
                v92 = v8[19];
                do
                {
                  *(_BYTE *)(v92 + v90) = *(_BYTE *)(v91 + v88);
                  v88 += **a5;
                  ++v90;
                }
                while (**a4 > (int)v90);
              }
              break;
            case 2:
              v333 = *a4;
              v334 = **a4;
              if (v334 >= 1)
              {
                v335 = 0;
                v336 = 0;
                v337 = *(_QWORD *)(v89 + 152);
                v338 = v8[19];
                do
                {
                  v339 = v333[1];
                  if (v339 < 1)
                  {
                    v340 = *a5;
                    v341 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v338 + v336 + result) = *(_BYTE *)(v337 + v88);
                      v340 = *a5;
                      v341 = (*a5)[1];
                      v88 += v341;
                      v333 = *a4;
                      v339 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v339);
                    v334 = *v333;
                    v336 += result;
                  }
                  v88 = *v340 + v88 - v341 * v339;
                  ++v335;
                }
                while (v335 < v334);
              }
              break;
            case 3:
              v342 = *a4;
              v343 = **a4;
              if (v343 >= 1)
              {
                v344 = 0;
                v345 = 0;
                v346 = *(_QWORD *)(v89 + 152);
                v347 = v8[19];
                do
                {
                  v348 = v342[1];
                  if (v348 < 1)
                  {
                    v352 = *a5;
                    v353 = (*a5)[1];
                  }
                  else
                  {
                    for (m = 0; m < v348; ++m)
                    {
                      v350 = v342[2];
                      if (v350 < 1)
                      {
                        v352 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v351 = 0;
                        do
                        {
                          *(_BYTE *)(v347 + v345 + v351) = *(_BYTE *)(v346 + v88);
                          v352 = *a5;
                          result = (*a5)[2];
                          v88 += result;
                          v342 = *a4;
                          v350 = (*a4)[2];
                          ++v351;
                        }
                        while ((int)v351 < v350);
                        v345 += v351;
                      }
                      v353 = v352[1];
                      v88 = v353 + v88 - result * v350;
                      v348 = v342[1];
                    }
                    v343 = *v342;
                  }
                  v88 = *v352 + v88 - v353 * v348;
                  ++v344;
                }
                while (v344 < v343);
              }
              break;
            case 4:
              v354 = *a4;
              v355 = **a4;
              if (v355 >= 1)
              {
                v356 = 0;
                v357 = 0;
                v358 = *(_QWORD *)(v89 + 152);
                v359 = v8[19];
                do
                {
                  v360 = v354[1];
                  if (v360 < 1)
                  {
                    v366 = *a5;
                    v368 = (*a5)[1];
                  }
                  else
                  {
                    for (n = 0; n < v360; ++n)
                    {
                      v362 = v354[2];
                      if (v362 < 1)
                      {
                        v366 = *a5;
                        v367 = (*a5)[2];
                      }
                      else
                      {
                        for (ii = 0; ii < v362; ++ii)
                        {
                          v364 = v354[3];
                          if (v364 < 1)
                          {
                            v366 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v365 = 0;
                            do
                            {
                              *(_BYTE *)(v359 + v357 + v365) = *(_BYTE *)(v358 + v88);
                              v366 = *a5;
                              result = (*a5)[3];
                              v88 += result;
                              v354 = *a4;
                              v364 = (*a4)[3];
                              ++v365;
                            }
                            while ((int)v365 < v364);
                            v357 += v365;
                          }
                          v367 = v366[2];
                          v88 = v367 + v88 - result * v364;
                          v362 = v354[2];
                        }
                      }
                      v368 = v366[1];
                      v88 = v368 + v88 - v367 * v362;
                      v360 = v354[1];
                    }
                    v355 = *v354;
                  }
                  v88 = *v366 + v88 - v368 * v360;
                  ++v356;
                }
                while (v356 < v355);
              }
              break;
            default:
              if (v8[6])
              {
                v324 = 0;
                v325 = *(_QWORD *)(v89 + 152) + v88;
                v326 = v8[19];
                do
                {
                  v327 = *a4;
                  v328 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v329 = 0;
                  v330 = (v328 - 1);
                  if ((int)v328 - 1 >= 0)
                  {
                    v331 = *a5;
                    LODWORD(result) = v324;
                    do
                    {
                      v332 = ldiv((int)result, v327[v330]);
                      result = v332.quot;
                      v329 += v331[v330--] * v332.rem;
                    }
                    while (v330 != -1);
                  }
                  *(_BYTE *)(v326 + v324++) = *(_BYTE *)(v325 + v329);
                }
                while (v324 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v93 = *a7;
          v94 = *a8;
          v95 = *(_QWORD **)result;
          v96 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v96 >> 2)
          {
            case 1:
              v97 = (v96 << 30) - 0x100000000;
              v98 = *(int *)((char *)*a4 + (v97 >> 30));
              if (v98 >= 1)
              {
                v99 = v97 >> 29;
                v100 = *(uint64_t *)((char *)*a5 + (v97 >> 29));
                v101 = *(_QWORD *)(*a6 + v99);
                v102 = (_BYTE *)(v8[19] + v94);
                v103 = (_BYTE *)(v95[19] + v93);
                do
                {
                  *v102 = *v103;
                  v103 += v100;
                  v102 += v101;
                  --v98;
                }
                while (v98);
              }
              break;
            case 2:
              v886 = (v96 << 30) - 0x200000000;
              v887 = *(int *)((char *)*a4 + (v886 >> 30));
              if (v887 >= 1)
              {
                v888 = 0;
                v889 = v886 >> 29;
                v890 = *(uint64_t *)((char *)*a5 + (v886 >> 29));
                v891 = *(_QWORD *)(*a6 + v889);
                do
                {
                  v892 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x100000000;
                  v893 = *(int *)((char *)*a4 + (v892 >> 30));
                  if (v893 >= 1)
                  {
                    v894 = v892 >> 29;
                    v895 = *(uint64_t *)((char *)*a5 + (v892 >> 29));
                    v896 = *(_QWORD *)(*a6 + v894);
                    v897 = (*a2)[19];
                    v898 = *(_QWORD *)(*(_QWORD *)v13 + 152);
                    do
                    {
                      result = *(unsigned __int8 *)(v898 + v93);
                      *(_BYTE *)(v897 + v94) = result;
                      v897 += v896;
                      v898 += v895;
                      --v893;
                    }
                    while (v893);
                  }
                  v93 += v890;
                  v94 += v891;
                  ++v888;
                }
                while (v888 != v887);
              }
              break;
            case 3:
              v899 = (v96 << 30) - 0x300000000;
              v900 = *(int *)((char *)*a4 + (v899 >> 30));
              if (v900 >= 1)
              {
                v901 = 0;
                v902 = v899 >> 29;
                v903 = *(uint64_t *)((char *)*a5 + (v899 >> 29));
                v904 = *(_QWORD *)(*a6 + v902);
                do
                {
                  v905 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x200000000;
                  v906 = *(int *)((char *)*a4 + (v905 >> 30));
                  if (v906 >= 1)
                  {
                    v907 = 0;
                    v908 = v905 >> 29;
                    v909 = *(uint64_t *)((char *)*a5 + (v905 >> 29));
                    v910 = *(_QWORD *)(*v9 + v908);
                    result = v93;
                    v911 = v94;
                    do
                    {
                      v912 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x100000000;
                      v913 = *(int *)((char *)*a4 + (v912 >> 30));
                      if (v913 >= 1)
                      {
                        v914 = v912 >> 29;
                        v915 = *(uint64_t *)((char *)*a5 + (v912 >> 29));
                        v916 = *(_QWORD *)(*v9 + v914);
                        v917 = (*a2)[19];
                        v918 = *(_QWORD *)(*(_QWORD *)v13 + 152);
                        do
                        {
                          *(_BYTE *)(v917 + v911) = *(_BYTE *)(v918 + result);
                          v917 += v916;
                          v918 += v915;
                          --v913;
                        }
                        while (v913);
                      }
                      result += v909;
                      v911 += v910;
                      ++v907;
                    }
                    while (v907 != v906);
                  }
                  v93 += v903;
                  v94 += v904;
                  ++v901;
                }
                while (v901 != v900);
              }
              break;
            case 4:
LABEL_571:
              break;
            case 5:
              v919 = (v96 << 30) - 0x500000000;
              v920 = *(int *)((char *)*a4 + (v919 >> 30));
              if (v920 >= 1)
              {
                v921 = v919 >> 29;
                v922 = *(uint64_t *)((char *)*a5 + v921);
                v923 = *(_QWORD *)(*a6 + v921);
                do
                {
                  v93 += v922;
                  v94 += v923;
                  --v920;
                }
                while (v920);
              }
              break;
            default:
              LODWORD(v864) = 1;
              v865 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v864 = a4[1][v865++] * (uint64_t)(int)v864;
              while (v865 * 4);
              if (v95[6])
              {
                result = 0;
                v1453 = *a8;
                v1465 = *a7;
                v1479 = v864;
                do
                {
                  v866 = *a4;
                  v867 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v868 = (v867 - 1);
                  v1496 = v95;
                  v1529 = result;
                  v869 = 0;
                  if ((int)v867 - 1 >= 0)
                  {
                    v870 = *a5;
                    do
                    {
                      v871 = ldiv((int)result, v866[v868]);
                      LODWORD(result) = v871.quot;
                      v869 += v870[v868--] * v871.rem;
                    }
                    while (v868 != -1);
                  }
                  v872 = **a2;
                  v873 = (unint64_t)((*a2)[1] - v872) >> 2;
                  v874 = *v9;
                  v875 = 0;
                  v876 = (v873 - 1);
                  if ((int)v873 - 1 >= 0)
                  {
                    v877 = v1529;
                    do
                    {
                      v878 = ldiv(v877, *(int *)(v872 + 4 * v876));
                      v877 = v878.quot;
                      v875 += *(_QWORD *)(v874 + 8 * v876--) * v878.rem;
                    }
                    while (v876 != -1);
                  }
                  v95 = v1496;
                  v879 = ((v95[1] - *v95) << 30) - 0x500000000;
                  v880 = *(int *)((char *)v866 + (v879 >> 30));
                  if (v880 >= 1)
                  {
                    v881 = v869 + v1465;
                    v882 = v879 >> 29;
                    v883 = *(uint64_t *)((char *)*a5 + v882);
                    v884 = *(_QWORD *)(v874 + v882);
                    v885 = v875 + v1453;
                    do
                    {
                      v881 += v883;
                      v885 += v884;
                      --v880;
                    }
                    while (v880);
                    v95 = *(_QWORD **)v13;
                  }
                  v9 = a6;
                  result = v1529 + v1479;
                }
                while (v95[6] > (unint64_t)(v1529 + v1479));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v24 = v8[6];
          if (v24)
          {
            v25 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v26 = (_DWORD *)v8[19];
            do
            {
              *v26++ = v25;
              --v24;
            }
            while (v24);
          }
          break;
        case 1:
          v104 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v104)
          {
            v105 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v106 = (_DWORD *)v8[19];
            do
            {
              v107 = *v105++;
              *v106++ = v107;
              --v104;
            }
            while (v104);
          }
          break;
        case 2:
          v108 = *a7;
          v109 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v110 = *a4;
              if (**a4 >= 1)
              {
                v111 = 0;
                v112 = v8[19];
                v113 = **a5;
                v114 = (unsigned __int8 *)(*(_QWORD *)(v109 + 152) + v108);
                do
                {
                  *(_DWORD *)(v112 + 4 * v111) = *v114;
                  v114 += v113;
                  ++v111;
                }
                while (*v110 > (int)v111);
              }
              break;
            case 2:
              v379 = *a4;
              v380 = **a4;
              if (v380 >= 1)
              {
                v381 = 0;
                v382 = 0;
                v383 = *(_QWORD *)(v109 + 152);
                v384 = v8[19];
                v385 = **a5;
                v386 = (*a5)[1];
                v387 = v379[1];
                do
                {
                  if (v387 >= 1)
                  {
                    v388 = 0;
                    do
                    {
                      *(_DWORD *)(v384 + 4 * v382 + 4 * v388) = *(unsigned __int8 *)(v383 + v108);
                      v108 += v386;
                      v387 = v379[1];
                      ++v388;
                    }
                    while ((int)v388 < v387);
                    v380 = *v379;
                    v382 += v388;
                  }
                  result = v387;
                  v108 = v108 + v385 - v386 * v387;
                  ++v381;
                }
                while (v381 < v380);
              }
              break;
            case 3:
              v389 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v390 = 0;
                v391 = 0;
                v392 = *(_QWORD *)(v109 + 152);
                v393 = v8[19];
                v394 = *a5;
                v395 = **a5;
                v396 = (*a5)[1];
                v397 = v389[1];
                do
                {
                  if (v397 >= 1)
                  {
                    v398 = 0;
                    v399 = *a5;
                    v400 = v394[2];
                    v401 = v389[2];
                    do
                    {
                      if (v401 >= 1)
                      {
                        v402 = 0;
                        v403 = v399[2];
                        do
                        {
                          *(_DWORD *)(v393 + 4 * v391 + 4 * v402) = *(unsigned __int8 *)(v392 + v108);
                          v108 += v403;
                          v401 = v389[2];
                          ++v402;
                        }
                        while ((int)v402 < v401);
                        v397 = v389[1];
                        v391 += v402;
                      }
                      v108 = v108 + v396 - v400 * v401;
                      ++v398;
                    }
                    while (v398 < v397);
                    result = *v389;
                  }
                  v108 = v108 + v395 - v396 * v397;
                  ++v390;
                }
                while (v390 < (int)result);
              }
              break;
            case 4:
              v404 = *a4;
              v405 = **a4;
              if (v405 >= 1)
              {
                v406 = 0;
                v407 = 0;
                v408 = *(_QWORD *)(v109 + 152);
                v409 = v8[19];
                v410 = *a5;
                v411 = **a5;
                v412 = (*a5)[1];
                v413 = v404[1];
                do
                {
                  if (v413 >= 1)
                  {
                    v414 = 0;
                    v415 = *a5;
                    v416 = v410[2];
                    v417 = v404[2];
                    do
                    {
                      if (v417 >= 1)
                      {
                        v418 = 0;
                        v419 = *a5;
                        v420 = v415[2];
                        v421 = v415[3];
                        v422 = v404[3];
                        do
                        {
                          if (v422 >= 1)
                          {
                            v423 = 0;
                            v424 = v419[3];
                            do
                            {
                              *(_DWORD *)(v409 + 4 * v407 + 4 * v423) = *(unsigned __int8 *)(v408 + v108);
                              v108 += v424;
                              v422 = v404[3];
                              ++v423;
                            }
                            while ((int)v423 < v422);
                            v417 = v404[2];
                            v407 += v423;
                          }
                          v108 = v108 + v420 - v421 * v422;
                          ++v418;
                        }
                        while (v418 < v417);
                        v413 = v404[1];
                      }
                      v108 = v108 + v412 - v416 * v417;
                      ++v414;
                    }
                    while (v414 < v413);
                    v405 = *v404;
                  }
                  result = v413;
                  v108 = v108 + v411 - v412 * v413;
                  ++v406;
                }
                while (v406 < v405);
              }
              break;
            default:
              v369 = v8[6];
              if (v369)
              {
                v370 = 0;
                v371 = *(_QWORD *)(v109 + 152) + v108;
                v372 = v8[19];
                v373 = *a4;
                v374 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v375 = *a5;
                do
                {
                  v376 = 0;
                  if ((v374 & 0x80000000) == 0)
                  {
                    v377 = v374;
                    LODWORD(result) = v370;
                    do
                    {
                      v378 = ldiv((int)result, v373[v377]);
                      result = v378.quot;
                      v376 += v375[v377--] * v378.rem;
                    }
                    while (v377 != -1);
                  }
                  *(_DWORD *)(v372 + 4 * v370++) = *(unsigned __int8 *)(v371 + v376);
                }
                while (v370 != v369);
              }
              break;
          }
          break;
        case 3:
          v115 = *a7;
          v1377 = *a8;
          v116 = *(_QWORD **)result;
          v117 = v116[1] - *v116;
          switch(v117 >> 2)
          {
            case 1:
              v118 = (v117 << 30) - 0x100000000;
              v119 = *(int *)((char *)*a4 + (v118 >> 30));
              if (v119 >= 1)
              {
                v120 = v118 >> 29;
                v121 = *(uint64_t *)((char *)*a5 + (v118 >> 29));
                v122 = (_DWORD *)(v8[19] + 4 * v1377);
                v123 = (unsigned __int8 *)(v116[19] + v115);
                v124 = 4 * *(_QWORD *)(*a6 + v120);
                do
                {
                  *v122 = *v123;
                  v123 += v121;
                  v122 = (_DWORD *)((char *)v122 + v124);
                  --v119;
                }
                while (v119);
              }
              break;
            case 2:
              v962 = (v117 << 30) - 0x200000000;
              v963 = *a4;
              v964 = *(int *)((char *)*a4 + (v962 >> 30));
              if (v964 >= 1)
              {
                v965 = 0;
                v966 = v962 >> 29;
                v967 = *(uint64_t *)((char *)*a5 + (v962 >> 29));
                v968 = *(_QWORD *)(*a6 + v966);
                v969 = (v117 << 30) - 0x100000000;
                v970 = *(uint64_t *)((char *)*a5 + (v969 >> 29));
                v971 = *(_QWORD *)(*a6 + (v969 >> 29));
                v972 = v969 >> 32;
                v973 = 4 * v1377;
                v974 = 4 * v968;
                v975 = 4 * v971;
                do
                {
                  result = v963[v972];
                  if ((int)result >= 1)
                  {
                    v976 = v116[19];
                    v977 = (_DWORD *)(v8[19] + v973);
                    do
                    {
                      *v977 = *(unsigned __int8 *)(v976 + v115);
                      v977 = (_DWORD *)((char *)v977 + v975);
                      v976 += v970;
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v115 += v967;
                  ++v965;
                  v973 += v974;
                }
                while (v965 != v964);
              }
              break;
            case 3:
              v978 = (v117 << 30) - 0x300000000;
              v979 = *a4;
              v980 = *(int *)((char *)*a4 + (v978 >> 30));
              if (v980 >= 1)
              {
                v981 = 0;
                v982 = *a5;
                v983 = v978 >> 29;
                v984 = *(uint64_t *)((char *)*a5 + (v978 >> 29));
                v985 = v117 << 30;
                v986 = *a6;
                v987 = *(_QWORD *)(*a6 + v983);
                v988 = (v985 - 0x200000000) >> 32;
                v989 = (v985 - 0x200000000) >> 29;
                v990 = v985 - 0x100000000;
                v991 = *(uint64_t *)((char *)*a5 + v989);
                v992 = *(_QWORD *)(*a6 + v989);
                v993 = v990 >> 32;
                v994 = 4 * v1377;
                result = 4 * v987;
                v995 = 4 * v992;
                do
                {
                  v996 = v979[v988];
                  if (v996 >= 1)
                  {
                    v997 = 0;
                    v998 = v982[v993];
                    v999 = *a2;
                    v1000 = 4 * *(_QWORD *)(v986 + 8 * v993);
                    v1001 = v994;
                    v1002 = v115;
                    do
                    {
                      v1003 = v979[v993];
                      if (v1003 >= 1)
                      {
                        v1004 = v116[19];
                        v1005 = (_DWORD *)(v999[19] + v1001);
                        do
                        {
                          *v1005 = *(unsigned __int8 *)(v1004 + v1002);
                          v1005 = (_DWORD *)((char *)v1005 + v1000);
                          v1004 += v998;
                          --v1003;
                        }
                        while (v1003);
                      }
                      v1002 += v991;
                      ++v997;
                      v1001 += v995;
                    }
                    while (v997 != v996);
                  }
                  v115 += v984;
                  ++v981;
                  v994 += result;
                }
                while (v981 != v980);
              }
              break;
            case 4:
              v1006 = (v117 << 30) - 0x400000000;
              v1007 = *a4;
              v1531 = *(int *)((char *)*a4 + (v1006 >> 30));
              if (v1531 >= 1)
              {
                v1008 = 0;
                v1009 = *a5;
                v1010 = v1006 >> 29;
                v1498 = *(uint64_t *)((char *)*a5 + v1010);
                v1011 = *a6;
                v1012 = (v117 << 30) - 0x300000000;
                v1013 = (v117 << 30) - 0x200000000;
                v1014 = (v117 << 30) - 0x100000000;
                v1015 = *(uint64_t *)((char *)*a5 + (v1012 >> 29));
                v1016 = v1013 >> 32;
                v1017 = v1014 >> 32;
                result = 4 * v1377;
                v1481 = 4 * *(_QWORD *)(*a6 + v1010);
                v1018 = 4 * *(_QWORD *)(*a6 + (v1012 >> 29));
                do
                {
                  v1019 = v115;
                  v1020 = v1007[v1012 >> 32];
                  if (v1020 >= 1)
                  {
                    v1021 = 0;
                    v1022 = v1009[v1016];
                    v1023 = 4 * *(_QWORD *)(v1011 + 8 * v1016);
                    v1024 = result;
                    v1025 = v115;
                    do
                    {
                      v1026 = v1007[v1016];
                      if (v1026 >= 1)
                      {
                        v1027 = 0;
                        v1028 = v1009[v1017];
                        v1029 = *a2;
                        v1030 = 4 * *(_QWORD *)(v1011 + 8 * v1017);
                        v1031 = v1024;
                        v1032 = v1025;
                        do
                        {
                          v1033 = v1007[v1017];
                          if (v1033 >= 1)
                          {
                            v1034 = v116[19];
                            v1035 = (_DWORD *)(v1029[19] + v1031);
                            do
                            {
                              *v1035 = *(unsigned __int8 *)(v1034 + v1032);
                              v1035 = (_DWORD *)((char *)v1035 + v1030);
                              v1034 += v1028;
                              --v1033;
                            }
                            while (v1033);
                          }
                          v1032 += v1022;
                          ++v1027;
                          v1031 += v1023;
                        }
                        while (v1027 != v1026);
                      }
                      v1025 += v1015;
                      ++v1021;
                      v1024 += v1018;
                    }
                    while (v1021 != v1020);
                  }
                  v115 = v1019 + v1498;
                  ++v1008;
                  result += v1481;
                }
                while (v1008 != v1531);
              }
              break;
            case 5:
              v1036 = (v117 << 30) - 0x500000000;
              v1037 = *a4;
              v1443 = *(int *)((char *)*a4 + (v1036 >> 30));
              if (v1443 >= 1)
              {
                v1455 = 0;
                v1038 = *a5;
                v1039 = v1036 >> 29;
                v1433 = *(uint64_t *)((char *)*a5 + v1039);
                v1040 = v117 << 30;
                v1041 = *a6;
                v1423 = (v1040 - 0x400000000) >> 32;
                v1042 = (v1040 - 0x400000000) >> 29;
                v1499 = *(uint64_t *)((char *)*a5 + v1042);
                v1514 = (v1040 - 0x300000000) >> 32;
                v1043 = (v1040 - 0x200000000) >> 32;
                result = (v1040 - 0x100000000) >> 32;
                v1413 = 4 * *(_QWORD *)(*a6 + v1039);
                v1467 = 4 * v1377;
                v1482 = 4 * *(_QWORD *)(*a6 + v1042);
                do
                {
                  v1391 = v115;
                  v1532 = v1037[v1423];
                  if (v1532 >= 1)
                  {
                    v1044 = 0;
                    v1045 = v1038[v1514];
                    v1046 = 4 * *(_QWORD *)(v1041 + 8 * v1514);
                    v1047 = v1467;
                    v1048 = v115;
                    do
                    {
                      v1049 = v1037[v1514];
                      if (v1049 >= 1)
                      {
                        v1050 = 0;
                        v1051 = v1038[v1043];
                        v1052 = 4 * *(_QWORD *)(v1041 + 8 * v1043);
                        v1053 = v1047;
                        v1054 = v1048;
                        do
                        {
                          v1055 = v1037[v1043];
                          if (v1055 >= 1)
                          {
                            v1056 = 0;
                            v1057 = v1038[result];
                            v1058 = *a2;
                            v1059 = 4 * *(_QWORD *)(v1041 + 8 * result);
                            v1060 = v1053;
                            v1061 = v1054;
                            do
                            {
                              v1062 = v1037[result];
                              if (v1062 >= 1)
                              {
                                v1063 = v116[19];
                                v1064 = (_DWORD *)(v1058[19] + v1060);
                                do
                                {
                                  *v1064 = *(unsigned __int8 *)(v1063 + v1061);
                                  v1064 = (_DWORD *)((char *)v1064 + v1059);
                                  v1063 += v1057;
                                  --v1062;
                                }
                                while (v1062);
                              }
                              v1061 += v1051;
                              ++v1056;
                              v1060 += v1052;
                            }
                            while (v1056 != v1055);
                          }
                          v1054 += v1045;
                          ++v1050;
                          v1053 += v1046;
                        }
                        while (v1050 != v1049);
                      }
                      v1048 += v1499;
                      ++v1044;
                      v1047 += v1482;
                    }
                    while (v1044 != v1532);
                  }
                  v115 = v1391 + v1433;
                  v1467 += v1413;
                  ++v1455;
                }
                while (v1455 != v1443);
              }
              break;
            default:
              v924 = (char *)a4[1];
              LODWORD(v925) = 1;
              v926 = -20;
              do
              {
                v925 = *(int *)&v924[v926] * (uint64_t)(int)v925;
                v926 += 4;
              }
              while (v926);
              v1373 = v116[6];
              if (v1373)
              {
                result = 0;
                v927 = *a4;
                v1363 = ((unint64_t)(v924 - (char *)*a4) >> 2) - 1;
                v928 = *a5;
                v1412 = *v8;
                v1358 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v929 = (v117 << 30) - 0x500000000;
                v930 = *a6;
                v1405 = *(uint64_t *)((char *)*a5 + (v929 >> 29));
                v1353 = v929 >> 32;
                v1422 = ((v117 << 30) - 0x400000000) >> 32;
                v1513 = ((v117 << 30) - 0x300000000) >> 32;
                v931 = ((v117 << 30) - 0x200000000) >> 32;
                v932 = ((v117 << 30) - 0x100000000) >> 32;
                v1390 = *a7;
                v1399 = 4 * *(_QWORD *)(*a6 + (v929 >> 29));
                v1368 = v925;
                do
                {
                  v933 = v1363;
                  v1384 = result;
                  v934 = 0;
                  if ((v1363 & 0x80000000) == 0)
                  {
                    do
                    {
                      v935 = ldiv((int)result, v927[v933]);
                      LODWORD(result) = v935.quot;
                      v934 += v928[v933--] * v935.rem;
                    }
                    while (v933 != -1);
                  }
                  v936 = v1358;
                  if ((v1358 & 0x80000000) != 0)
                  {
                    v937 = 0;
                  }
                  else
                  {
                    v937 = 0;
                    v938 = v1384;
                    do
                    {
                      v939 = ldiv(v938, *(int *)(v1412 + 4 * v936));
                      v938 = v939.quot;
                      v937 += *(_QWORD *)(v930 + 8 * v936--) * v939.rem;
                    }
                    while (v936 != -1);
                  }
                  v1432 = v927[v1353];
                  if (v1432 >= 1)
                  {
                    v940 = 0;
                    v1497 = v928[v1422];
                    v1466 = v934 + v1390;
                    v1454 = 4 * (v937 + v1377);
                    v1480 = 4 * *(_QWORD *)(v930 + 8 * v1422);
                    do
                    {
                      v1442 = v940;
                      v1530 = v927[v1422];
                      if (v1530 >= 1)
                      {
                        v941 = 0;
                        v942 = v928[v1513];
                        v943 = 4 * *(_QWORD *)(v930 + 8 * v1513);
                        v945 = v1454;
                        v944 = v1466;
                        do
                        {
                          v946 = v927[v1513];
                          if (v946 >= 1)
                          {
                            v947 = 0;
                            v948 = v928[v931];
                            v949 = 4 * *(_QWORD *)(v930 + 8 * v931);
                            v950 = v945;
                            v951 = v944;
                            do
                            {
                              v952 = v927[v931];
                              if (v952 >= 1)
                              {
                                v953 = 0;
                                v954 = v928[v932];
                                v955 = *a2;
                                v956 = 4 * *(_QWORD *)(v930 + 8 * v932);
                                v957 = v950;
                                v958 = v951;
                                do
                                {
                                  v959 = v927[v932];
                                  if (v959 >= 1)
                                  {
                                    v960 = v116[19];
                                    v961 = (_DWORD *)(v955[19] + v957);
                                    do
                                    {
                                      *v961 = *(unsigned __int8 *)(v960 + v958);
                                      v961 = (_DWORD *)((char *)v961 + v956);
                                      v960 += v954;
                                      --v959;
                                    }
                                    while (v959);
                                  }
                                  v958 += v948;
                                  ++v953;
                                  v957 += v949;
                                }
                                while (v953 != v952);
                              }
                              v951 += v942;
                              ++v947;
                              v950 += v943;
                            }
                            while (v947 != v946);
                          }
                          v944 += v1497;
                          ++v941;
                          v945 += v1480;
                        }
                        while (v941 != v1530);
                      }
                      v1466 += v1405;
                      v940 = v1442 + 1;
                      v1454 += v1399;
                    }
                    while (v1442 + 1 != v1432);
                  }
                  result = v1384 + v1368;
                }
                while (v1373 > v1384 + v1368);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v27 = v8[6];
          if (v27)
          {
            v28 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v29 = (_QWORD *)v8[19];
            do
            {
              *v29++ = v28;
              --v27;
            }
            while (v27);
          }
          break;
        case 1:
          v125 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v125)
          {
            v126 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v127 = (_QWORD *)v8[19];
            do
            {
              v128 = *v126++;
              *v127++ = v128;
              --v125;
            }
            while (v125);
          }
          break;
        case 2:
          v129 = *a7;
          v130 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v131 = **a4;
              if ((int)v131 >= 1)
              {
                v132 = *(_QWORD *)(v130 + 152);
                v133 = (_QWORD *)v8[19];
                v134 = *a5;
                do
                {
                  *v133++ = *(unsigned __int8 *)(v132 + v129);
                  v129 += *v134;
                  --v131;
                }
                while (v131);
              }
              break;
            case 2:
              v435 = **a4;
              if (v435 >= 1)
              {
                v436 = 0;
                v437 = 0;
                v438 = *(_QWORD *)(v130 + 152);
                v439 = v8[19];
                v440 = (*a4)[1];
                v441 = *a5;
                do
                {
                  if (v440 <= 0)
                  {
                    v443 = v441[1];
                  }
                  else
                  {
                    v442 = v440;
                    do
                    {
                      *(_QWORD *)(v439 + 8 * v437++) = *(unsigned __int8 *)(v438 + v129);
                      v443 = v441[1];
                      v129 += v443;
                      --v442;
                    }
                    while (v442);
                  }
                  result = *v441;
                  v129 = v129 - v443 * v440 + *v441;
                  ++v436;
                }
                while (v436 != v435);
              }
              break;
            case 3:
              v444 = *a4;
              v445 = **a4;
              if (v445 >= 1)
              {
                v446 = 0;
                v447 = 0;
                v448 = *(_QWORD *)(v130 + 152);
                v449 = v8[19];
                v450 = v444[1];
                v451 = *a5;
                do
                {
                  if ((int)v450 <= 0)
                  {
                    v455 = v451[1];
                  }
                  else
                  {
                    v452 = 0;
                    result = v444[2];
                    v453 = *a5;
                    do
                    {
                      v454 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(_QWORD *)(v449 + 8 * v447++) = *(unsigned __int8 *)(v448 + v129);
                          v129 += v453[2];
                          --v454;
                        }
                        while (v454);
                      }
                      v455 = v451[1];
                      v129 = v455 + v129 - v451[2] * (int)result;
                      ++v452;
                    }
                    while (v452 != (_DWORD)v450);
                  }
                  v129 = v129 - v455 * v450 + *v451;
                  ++v446;
                }
                while (v446 != v445);
              }
              break;
            case 4:
              v456 = *a4;
              v457 = **a4;
              if (v457 >= 1)
              {
                v458 = 0;
                v459 = 0;
                v460 = *(_QWORD *)(v130 + 152);
                v461 = v8[19];
                v462 = v456[1];
                v463 = *a5;
                do
                {
                  if ((int)v462 <= 0)
                  {
                    v470 = v463[1];
                  }
                  else
                  {
                    v464 = 0;
                    result = v456[2];
                    v465 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        v466 = 0;
                        v467 = v456[3];
                        v468 = *a5;
                        do
                        {
                          v469 = v467;
                          if (v467 >= 1)
                          {
                            do
                            {
                              *(_QWORD *)(v461 + 8 * v459++) = *(unsigned __int8 *)(v460 + v129);
                              v129 += v468[3];
                              --v469;
                            }
                            while (v469);
                          }
                          v129 = v465[2] + v129 - v465[3] * v467;
                          ++v466;
                        }
                        while (v466 != (_DWORD)result);
                      }
                      v470 = v463[1];
                      v129 = v470 + v129 - v463[2] * result;
                      ++v464;
                    }
                    while (v464 != (_DWORD)v462);
                  }
                  v129 = v129 - v470 * v462 + *v463;
                  ++v458;
                }
                while (v458 != v457);
              }
              break;
            default:
              v425 = v8[6];
              if (v425)
              {
                v426 = 0;
                v427 = *(_QWORD *)(v130 + 152) + v129;
                v428 = v8[19];
                v429 = *a4;
                v430 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v431 = *a5;
                do
                {
                  v432 = 0;
                  if ((v430 & 0x80000000) == 0)
                  {
                    v433 = v430;
                    LODWORD(result) = v426;
                    do
                    {
                      v434 = ldiv((int)result, v429[v433]);
                      result = v434.quot;
                      v432 += v431[v433--] * v434.rem;
                    }
                    while (v433 != -1);
                  }
                  *(_QWORD *)(v428 + 8 * v426++) = *(unsigned __int8 *)(v427 + v432);
                }
                while (v426 != v425);
              }
              break;
          }
          break;
        case 3:
          v135 = *a7;
          v1378 = *a8;
          v136 = *(_QWORD **)result;
          v137 = v136[1] - *v136;
          switch(v137 >> 2)
          {
            case 1:
              v138 = (v137 << 30) - 0x100000000;
              v139 = *(int *)((char *)*a4 + (v138 >> 30));
              if (v139 >= 1)
              {
                v140 = v138 >> 29;
                v141 = *(uint64_t *)((char *)*a5 + (v138 >> 29));
                v142 = (_QWORD *)(v8[19] + 8 * v1378);
                v143 = (unsigned __int8 *)(v136[19] + v135);
                v144 = 8 * *(_QWORD *)(*a6 + v140);
                do
                {
                  *v142 = *v143;
                  v143 += v141;
                  v142 = (_QWORD *)((char *)v142 + v144);
                  --v139;
                }
                while (v139);
              }
              break;
            case 2:
              v1103 = (v137 << 30) - 0x200000000;
              v1104 = *(int *)((char *)*a4 + (v1103 >> 30));
              if (v1104 >= 1)
              {
                v1105 = 0;
                v1106 = *a5;
                v1107 = v1103 >> 29;
                v1108 = *(uint64_t *)((char *)*a5 + (v1103 >> 29));
                v1109 = *a6;
                v1110 = *(_QWORD *)(*a6 + v1107);
                v1111 = (v137 << 30) - 0x100000000;
                v1112 = v1111 >> 32;
                v1113 = *(int *)((char *)*a4 + (v1111 >> 30));
                v1114 = 8 * v1378;
                v1115 = 8 * v1110;
                do
                {
                  if (v1113 >= 1)
                  {
                    result = v1106[v1112];
                    v1116 = v136[19];
                    v1117 = (_QWORD *)(v8[19] + v1114);
                    v1118 = 8 * *(_QWORD *)(v1109 + 8 * v1112);
                    v1119 = v1113;
                    do
                    {
                      *v1117 = *(unsigned __int8 *)(v1116 + v135);
                      v1117 = (_QWORD *)((char *)v1117 + v1118);
                      v1116 += result;
                      --v1119;
                    }
                    while (v1119);
                  }
                  v135 += v1108;
                  ++v1105;
                  v1114 += v1115;
                }
                while (v1105 != v1104);
              }
              break;
            case 3:
              v1120 = (v137 << 30) - 0x300000000;
              v1121 = *a4;
              v1122 = *(int *)((char *)*a4 + (v1120 >> 30));
              if (v1122 >= 1)
              {
                v1123 = 0;
                v1124 = *a5;
                v1125 = v1120 >> 29;
                v1126 = *(uint64_t *)((char *)*a5 + (v1120 >> 29));
                v1127 = *a6;
                v1128 = *(_QWORD *)(*a6 + v1125);
                v1129 = v137 << 30;
                v1130 = v1129 - 0x200000000;
                v1131 = v1129 - 0x100000000;
                v1132 = (v1129 - 0x200000000) >> 32;
                v1133 = *(int *)((char *)v1121 + (v1130 >> 30));
                v1134 = v1131 >> 32;
                v1135 = 8 * v1378;
                result = 8 * v1128;
                do
                {
                  if (v1133 >= 1)
                  {
                    v1136 = 0;
                    v1137 = v1124[v1132];
                    v1138 = v1121[v1134];
                    v1139 = *a2;
                    v1140 = 8 * *(_QWORD *)(v1127 + 8 * v1132);
                    v1141 = v1135;
                    v1142 = v135;
                    do
                    {
                      if (v1138 >= 1)
                      {
                        v1143 = v1124[v1134];
                        v1144 = v136[19];
                        v1145 = (_QWORD *)(v1139[19] + v1141);
                        v1146 = 8 * *(_QWORD *)(v1127 + 8 * v1134);
                        v1147 = v1138;
                        do
                        {
                          *v1145 = *(unsigned __int8 *)(v1144 + v1142);
                          v1145 = (_QWORD *)((char *)v1145 + v1146);
                          v1144 += v1143;
                          --v1147;
                        }
                        while (v1147);
                      }
                      v1142 += v1137;
                      ++v1136;
                      v1141 += v1140;
                    }
                    while (v1136 != v1133);
                  }
                  v135 += v1126;
                  ++v1123;
                  v1135 += result;
                }
                while (v1123 != v1122);
              }
              break;
            case 4:
              v1148 = (v137 << 30) - 0x400000000;
              v1149 = *a4;
              v1533 = *(int *)((char *)*a4 + (v1148 >> 30));
              if (v1533 >= 1)
              {
                v1150 = 0;
                v1151 = *a5;
                v1152 = v1148 >> 29;
                v1501 = *(uint64_t *)((char *)*a5 + v1152);
                v1153 = *a6;
                v1154 = (v137 << 30) - 0x300000000;
                v1484 = v1154 >> 32;
                v1155 = *(int *)((char *)v1149 + (v1154 >> 30));
                v1156 = ((v137 << 30) - 0x200000000) >> 32;
                v1157 = ((v137 << 30) - 0x100000000) >> 32;
                result = 8 * v1378;
                v1516 = 8 * *(_QWORD *)(*a6 + v1152);
                do
                {
                  v1393 = v135;
                  if (v1155 >= 1)
                  {
                    v1158 = 0;
                    v1159 = v1151[v1484];
                    v1160 = v1149[v1156];
                    v1161 = 8 * *(_QWORD *)(v1153 + 8 * v1484);
                    v1162 = result;
                    v1163 = v135;
                    do
                    {
                      if (v1160 >= 1)
                      {
                        v1164 = 0;
                        v1165 = v1151[v1156];
                        v1166 = v1149[v1157];
                        v1167 = *a2;
                        v1168 = 8 * *(_QWORD *)(v1153 + 8 * v1156);
                        v1169 = v1162;
                        v1170 = v1163;
                        do
                        {
                          if (v1166 >= 1)
                          {
                            v1171 = v1151[v1157];
                            v1172 = v136[19];
                            v1173 = (_QWORD *)(v1167[19] + v1169);
                            v1174 = 8 * *(_QWORD *)(v1153 + 8 * v1157);
                            v1175 = v1166;
                            do
                            {
                              *v1173 = *(unsigned __int8 *)(v1172 + v1170);
                              v1173 = (_QWORD *)((char *)v1173 + v1174);
                              v1172 += v1171;
                              --v1175;
                            }
                            while (v1175);
                          }
                          v1170 += v1165;
                          ++v1164;
                          v1169 += v1168;
                        }
                        while (v1164 != v1160);
                      }
                      v1163 += v1159;
                      ++v1158;
                      v1162 += v1161;
                    }
                    while (v1158 != v1155);
                  }
                  v135 = v1393 + v1501;
                  ++v1150;
                  result += v1516;
                }
                while (v1150 != v1533);
              }
              break;
            case 5:
              v1176 = (v137 << 30) - 0x500000000;
              v1177 = *a4;
              v1435 = *(int *)((char *)*a4 + (v1176 >> 30));
              if (v1435 >= 1)
              {
                v1445 = 0;
                v1178 = *a5;
                v1179 = v1176 >> 29;
                v1425 = *(uint64_t *)((char *)*a5 + v1179);
                v1180 = *a6;
                v1181 = (v137 << 30) - 0x400000000;
                v1517 = *(int *)((char *)v1177 + (v1181 >> 30));
                v1407 = v1181 >> 32;
                v1182 = ((v137 << 30) - 0x200000000) >> 32;
                result = ((v137 << 30) - 0x100000000) >> 32;
                v1457 = 8 * v1378;
                v1469 = ((v137 << 30) - 0x300000000) >> 32;
                v1415 = 8 * *(_QWORD *)(*a6 + v1179);
                do
                {
                  v1394 = v135;
                  if (v1517 >= 1)
                  {
                    v1183 = 0;
                    v1502 = v1178[v1407];
                    v1184 = v1457;
                    v1185 = v1177[v1469];
                    v1485 = 8 * *(_QWORD *)(v1180 + 8 * v1407);
                    v1186 = v135;
                    do
                    {
                      v1534 = v1183;
                      if (v1185 >= 1)
                      {
                        v1187 = 0;
                        v1188 = v1178[v1469];
                        v1189 = v1177[v1182];
                        v1190 = 8 * *(_QWORD *)(v1180 + 8 * v1469);
                        v1191 = v1184;
                        v1192 = v1186;
                        do
                        {
                          if (v1189 >= 1)
                          {
                            v1193 = 0;
                            v1194 = v1178[v1182];
                            v1195 = v1177[result];
                            v1196 = *a2;
                            v1197 = 8 * *(_QWORD *)(v1180 + 8 * v1182);
                            v1198 = v1191;
                            v1199 = v1192;
                            do
                            {
                              if (v1195 >= 1)
                              {
                                v1200 = v1178[result];
                                v1201 = v136[19];
                                v1202 = (_QWORD *)(v1196[19] + v1198);
                                v1203 = 8 * *(_QWORD *)(v1180 + 8 * result);
                                v1204 = v1195;
                                do
                                {
                                  *v1202 = *(unsigned __int8 *)(v1201 + v1199);
                                  v1202 = (_QWORD *)((char *)v1202 + v1203);
                                  v1201 += v1200;
                                  --v1204;
                                }
                                while (v1204);
                              }
                              v1199 += v1194;
                              ++v1193;
                              v1198 += v1197;
                            }
                            while (v1193 != v1189);
                          }
                          v1192 += v1188;
                          ++v1187;
                          v1191 += v1190;
                        }
                        while (v1187 != v1185);
                      }
                      v1186 += v1502;
                      v1183 = v1534 + 1;
                      v1184 += v1485;
                    }
                    while (v1534 + 1 != v1517);
                  }
                  v135 = v1394 + v1425;
                  v1457 += v1415;
                  ++v1445;
                }
                while (v1445 != v1435);
              }
              break;
            default:
              v1065 = (char *)a4[1];
              LODWORD(v1066) = 1;
              v1067 = -20;
              do
              {
                v1066 = *(int *)&v1065[v1067] * (uint64_t)(int)v1066;
                v1067 += 4;
              }
              while (v1067);
              v1374 = v136[6];
              if (v1374)
              {
                v1068 = 0;
                v1069 = (v137 << 30) - 0x500000000;
                v1070 = *a4;
                v1354 = *v8;
                v1071 = *a5;
                v1359 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1364 = ((unint64_t)(v1065 - (char *)*a4) >> 2) - 1;
                v1072 = *a6;
                v1350 = v1069 >> 32;
                v1424 = *(int *)((char *)*a4 + (v1069 >> 30));
                v1392 = *a7;
                v1400 = ((v137 << 30) - 0x400000000) >> 32;
                v1468 = ((v137 << 30) - 0x300000000) >> 32;
                v1073 = ((v137 << 30) - 0x200000000) >> 32;
                v1074 = ((v137 << 30) - 0x100000000) >> 32;
                v1369 = v1066;
                do
                {
                  v1075 = v1364;
                  if ((v1364 & 0x80000000) != 0)
                  {
                    v1076 = 0;
                  }
                  else
                  {
                    v1076 = 0;
                    LODWORD(result) = v1068;
                    do
                    {
                      v1077 = ldiv((int)result, v1070[v1075]);
                      result = v1077.quot;
                      v1076 += v1071[v1075--] * v1077.rem;
                    }
                    while (v1075 != -1);
                  }
                  v1078 = v1359;
                  v1385 = v1068;
                  v1079 = 0;
                  if ((v1359 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1068;
                    do
                    {
                      v1080 = ldiv((int)result, *(int *)(v1354 + 4 * v1078));
                      result = v1080.quot;
                      v1079 += *(_QWORD *)(v1072 + 8 * v1078--) * v1080.rem;
                    }
                    while (v1078 != -1);
                  }
                  if (v1424 >= 1)
                  {
                    v1081 = 0;
                    v1414 = v1071[v1350];
                    v1456 = v1076 + v1392;
                    v1515 = v1070[v1400];
                    v1444 = 8 * (v1079 + v1378);
                    v1406 = 8 * *(_QWORD *)(v1072 + 8 * v1350);
                    do
                    {
                      v1434 = v1081;
                      if (v1515 >= 1)
                      {
                        v1082 = 0;
                        v1500 = v1071[v1400];
                        v1083 = v1456;
                        v1084 = v1070[v1468];
                        v1483 = 8 * *(_QWORD *)(v1072 + 8 * v1400);
                        v1085 = v1444;
                        do
                        {
                          if (v1084 >= 1)
                          {
                            v1086 = 0;
                            v1087 = v1071[v1468];
                            v1088 = v1070[v1073];
                            v1089 = 8 * *(_QWORD *)(v1072 + 8 * v1468);
                            result = v1085;
                            v1090 = v1083;
                            do
                            {
                              if (v1088 >= 1)
                              {
                                v1091 = 0;
                                v1092 = v1071[v1073];
                                v1093 = v1070[v1074];
                                v1094 = *a2;
                                v1095 = 8 * *(_QWORD *)(v1072 + 8 * v1073);
                                v1096 = result;
                                v1097 = v1090;
                                do
                                {
                                  if (v1093 >= 1)
                                  {
                                    v1098 = v1071[v1074];
                                    v1099 = v136[19];
                                    v1100 = (_QWORD *)(v1094[19] + v1096);
                                    v1101 = 8 * *(_QWORD *)(v1072 + 8 * v1074);
                                    v1102 = v1093;
                                    do
                                    {
                                      *v1100 = *(unsigned __int8 *)(v1099 + v1097);
                                      v1100 = (_QWORD *)((char *)v1100 + v1101);
                                      v1099 += v1098;
                                      --v1102;
                                    }
                                    while (v1102);
                                  }
                                  v1097 += v1092;
                                  ++v1091;
                                  v1096 += v1095;
                                }
                                while (v1091 != v1088);
                              }
                              v1090 += v1087;
                              ++v1086;
                              result += v1089;
                            }
                            while (v1086 != v1084);
                          }
                          v1083 += v1500;
                          ++v1082;
                          v1085 += v1483;
                        }
                        while (v1082 != v1515);
                      }
                      v1456 += v1414;
                      v1081 = v1434 + 1;
                      v1444 += v1406;
                    }
                    while (v1434 + 1 != v1424);
                  }
                  v1068 += v1369;
                }
                while (v1374 > v1385 + v1369);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v30 = 0.0;
          if (**(_BYTE **)(*(_QWORD *)result + 152))
            v30 = 1.0;
          v31 = v8[6];
          if (v31)
          {
            v32 = (float *)v8[19];
            do
            {
              *v32++ = v30;
              --v31;
            }
            while (v31);
          }
          break;
        case 1:
          v145 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v145)
          {
            v146 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v147 = (float *)v8[19];
            do
            {
              if (*v146++)
                v149 = 1.0;
              else
                v149 = 0.0;
              *v147++ = v149;
              --v145;
            }
            while (v145);
          }
          break;
        case 2:
          v150 = *a7;
          v151 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v152 = **a4;
              if ((int)v152 >= 1)
              {
                v153 = (float *)v8[19];
                v154 = **a5;
                v155 = (_BYTE *)(*(_QWORD *)(v151 + 152) + v150);
                do
                {
                  if (*v155)
                    v156 = 1.0;
                  else
                    v156 = 0.0;
                  *v153++ = v156;
                  v155 += v154;
                  --v152;
                }
                while (v152);
              }
              break;
            case 2:
              v482 = **a4;
              if (v482 >= 1)
              {
                v483 = 0;
                v484 = 0;
                v485 = *(_QWORD *)(v151 + 152);
                v486 = v8[19];
                v487 = (*a4)[1];
                v488 = (*a5)[1];
                v489 = **a5 - v488 * v487;
                do
                {
                  v490 = v487;
                  if ((int)v487 >= 1)
                  {
                    do
                    {
                      result = *(unsigned __int8 *)(v485 + v150);
                      if (*(_BYTE *)(v485 + v150))
                        v491 = 1.0;
                      else
                        v491 = 0.0;
                      *(float *)(v486 + 4 * v484++) = v491;
                      v150 += v488;
                      --v490;
                    }
                    while (v490);
                  }
                  v150 += v489;
                  ++v483;
                }
                while (v483 != v482);
              }
              break;
            case 3:
              v492 = *a4;
              v493 = **a4;
              if (v493 >= 1)
              {
                v494 = 0;
                result = 0;
                v495 = *(_QWORD *)(v151 + 152);
                v496 = v8[19];
                v497 = v492[1];
                v498 = *a5;
                v499 = (*a5)[1];
                v500 = **a5 - v499 * v497;
                do
                {
                  if ((int)v497 < 1)
                  {
                    v507 = result;
                  }
                  else
                  {
                    v501 = 0;
                    v502 = v492[2];
                    v503 = *a5;
                    v504 = v499 - v498[2] * v502;
                    do
                    {
                      if ((int)v502 < 1)
                      {
                        v507 = result;
                      }
                      else
                      {
                        v505 = v503[2];
                        v506 = v502;
                        do
                        {
                          v507 = result + 1;
                          if (*(_BYTE *)(v495 + v150))
                            v508 = 1.0;
                          else
                            v508 = 0.0;
                          *(float *)(v496 + 4 * result) = v508;
                          v150 += v505;
                          ++result;
                          --v506;
                        }
                        while (v506);
                      }
                      v150 += v504;
                      ++v501;
                      result = v507;
                    }
                    while (v501 != (_DWORD)v497);
                  }
                  v150 += v500;
                  ++v494;
                  result = v507;
                }
                while (v494 != v493);
              }
              break;
            case 4:
              v509 = *a4;
              v510 = **a4;
              if (v510 >= 1)
              {
                v511 = 0;
                result = 0;
                v512 = *(_QWORD *)(v151 + 152);
                v513 = v8[19];
                v514 = v509[1];
                v515 = *a5;
                v516 = (*a5)[1];
                v517 = **a5 - v516 * v514;
                do
                {
                  if ((int)v514 < 1)
                  {
                    v528 = result;
                  }
                  else
                  {
                    v518 = 0;
                    v519 = v509[2];
                    v520 = *a5;
                    v521 = v516 - v515[2] * v519;
                    do
                    {
                      if ((int)v519 < 1)
                      {
                        v528 = result;
                      }
                      else
                      {
                        v522 = 0;
                        v523 = v509[3];
                        v524 = *a5;
                        v525 = v520[2] - v520[3] * v523;
                        do
                        {
                          if ((int)v523 < 1)
                          {
                            v528 = result;
                          }
                          else
                          {
                            v526 = v524[3];
                            v527 = v523;
                            do
                            {
                              v528 = result + 1;
                              if (*(_BYTE *)(v512 + v150))
                                v529 = 1.0;
                              else
                                v529 = 0.0;
                              *(float *)(v513 + 4 * result) = v529;
                              v150 += v526;
                              ++result;
                              --v527;
                            }
                            while (v527);
                          }
                          v150 += v525;
                          ++v522;
                          result = v528;
                        }
                        while (v522 != (_DWORD)v519);
                      }
                      v150 += v521;
                      ++v518;
                      result = v528;
                    }
                    while (v518 != (_DWORD)v514);
                  }
                  v150 += v517;
                  ++v511;
                  result = v528;
                }
                while (v511 != v510);
              }
              break;
            default:
              v471 = v8[6];
              if (v471)
              {
                v472 = 0;
                v473 = *(_QWORD *)(v151 + 152) + v150;
                v474 = v8[19];
                v475 = *a4;
                v476 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v477 = *a5;
                do
                {
                  v478 = 0;
                  if ((v476 & 0x80000000) == 0)
                  {
                    v479 = v476;
                    LODWORD(result) = v472;
                    do
                    {
                      v480 = ldiv((int)result, v475[v479]);
                      result = v480.quot;
                      v478 += v477[v479--] * v480.rem;
                    }
                    while (v479 != -1);
                  }
                  if (*(_BYTE *)(v473 + v478))
                    v481 = 1.0;
                  else
                    v481 = 0.0;
                  *(float *)(v474 + 4 * v472++) = v481;
                }
                while (v472 != v471);
              }
              break;
          }
          break;
        case 3:
          v157 = *a7;
          v1381 = *a8;
          v158 = *(_QWORD **)result;
          v159 = v158[1] - *v158;
          switch(v159 >> 2)
          {
            case 1:
              v160 = (v159 << 30) - 0x100000000;
              v161 = *(int *)((char *)*a4 + (v160 >> 30));
              if (v161 >= 1)
              {
                v162 = v160 >> 29;
                v163 = *(uint64_t *)((char *)*a5 + (v160 >> 29));
                v164 = (float *)(v8[19] + 4 * v1381);
                v165 = (_BYTE *)(v158[19] + v157);
                v166 = 4 * *(_QWORD *)(*a6 + v162);
                do
                {
                  if (*v165)
                    v167 = 1.0;
                  else
                    v167 = 0.0;
                  *v164 = v167;
                  v165 += v163;
                  v164 = (float *)((char *)v164 + v166);
                  --v161;
                }
                while (v161);
              }
              break;
            case 2:
              v1244 = (v159 << 30) - 0x200000000;
              v1245 = *(int *)((char *)*a4 + (v1244 >> 30));
              if (v1245 >= 1)
              {
                v1246 = 0;
                v1247 = v1244 >> 29;
                v1248 = *(uint64_t *)((char *)*a5 + (v1244 >> 29));
                v1249 = (v159 << 30) - 0x100000000;
                result = v1249 >> 29;
                v1250 = *(uint64_t *)((char *)*a5 + (v1249 >> 29));
                v1251 = *(int *)((char *)*a4 + (v1249 >> 30));
                v1252 = 4 * v1381;
                v1253 = 4 * *(_QWORD *)(*a6 + v1247);
                v1254 = 4 * *(_QWORD *)(*a6 + (v1249 >> 29));
                do
                {
                  if (v1251 >= 1)
                  {
                    v1255 = v158[19];
                    result = v8[19] + v1252;
                    v1256 = v1251;
                    do
                    {
                      if (*(_BYTE *)(v1255 + v157))
                        v1257 = 1.0;
                      else
                        v1257 = 0.0;
                      *(float *)result = v1257;
                      result += v1254;
                      v1255 += v1250;
                      --v1256;
                    }
                    while (v1256);
                  }
                  v157 += v1248;
                  ++v1246;
                  v1252 += v1253;
                }
                while (v1246 != v1245);
              }
              break;
            case 3:
              v1258 = (v159 << 30) - 0x300000000;
              v1259 = *a4;
              v1260 = *(int *)((char *)*a4 + (v1258 >> 30));
              if (v1260 >= 1)
              {
                v1261 = 0;
                v1262 = v159 << 30;
                v1263 = *a5;
                v1264 = v1258 >> 29;
                v1265 = *(uint64_t *)((char *)*a5 + (v1258 >> 29));
                v1266 = *a6;
                v1267 = *(_QWORD *)(*a6 + v1264);
                v1268 = (v1262 - 0x200000000) >> 29;
                v1269 = *(uint64_t *)((char *)*a5 + v1268);
                v1270 = v1262 - 0x100000000;
                v1271 = *(_QWORD *)(*a6 + v1268);
                v1272 = *(int *)((char *)v1259 + ((v1262 - 0x200000000) >> 30));
                v1273 = v1270 >> 32;
                v1274 = 4 * v1381;
                result = 4 * v1267;
                v1275 = 4 * v1271;
                do
                {
                  if (v1272 >= 1)
                  {
                    v1276 = 0;
                    v1277 = v1263[v1273];
                    v1278 = v1259[v1273];
                    v1279 = *a2;
                    v1280 = 4 * *(_QWORD *)(v1266 + 8 * v1273);
                    v1281 = v1274;
                    v1282 = v157;
                    do
                    {
                      if (v1278 >= 1)
                      {
                        v1283 = v158[19];
                        v1284 = (float *)(v1279[19] + v1281);
                        v1285 = v1278;
                        do
                        {
                          if (*(_BYTE *)(v1283 + v1282))
                            v1286 = 1.0;
                          else
                            v1286 = 0.0;
                          *v1284 = v1286;
                          v1284 = (float *)((char *)v1284 + v1280);
                          v1283 += v1277;
                          --v1285;
                        }
                        while (v1285);
                      }
                      v1282 += v1269;
                      ++v1276;
                      v1281 += v1275;
                    }
                    while (v1276 != v1272);
                  }
                  v157 += v1265;
                  ++v1261;
                  v1274 += result;
                }
                while (v1261 != v1260);
              }
              break;
            case 4:
              v1287 = (v159 << 30) - 0x400000000;
              v1288 = *a4;
              v1504 = *(int *)((char *)*a4 + (v1287 >> 30));
              if (v1504 >= 1)
              {
                v1289 = 0;
                v1290 = v159 << 30;
                v1291 = *a5;
                v1292 = v1287 >> 29;
                v1487 = *(uint64_t *)((char *)*a5 + v1292);
                v1293 = *a6;
                v1294 = (v1290 - 0x300000000) >> 29;
                v1295 = *(uint64_t *)((char *)*a5 + v1294);
                v1296 = *(_QWORD *)(*a6 + v1294);
                v1297 = *(int *)((char *)v1288 + ((v1290 - 0x300000000) >> 30));
                v1298 = (v1290 - 0x200000000) >> 32;
                v1299 = (v1290 - 0x100000000) >> 32;
                result = 4 * v1381;
                v1519 = 4 * *(_QWORD *)(*a6 + v1292);
                v1300 = 4 * v1296;
                do
                {
                  v1301 = v157;
                  if (v1297 >= 1)
                  {
                    v1302 = 0;
                    v1303 = v1291[v1298];
                    v1304 = v1288[v1298];
                    v1305 = 4 * *(_QWORD *)(v1293 + 8 * v1298);
                    v1306 = result;
                    v1307 = v157;
                    do
                    {
                      if (v1304 >= 1)
                      {
                        v1308 = 0;
                        v1309 = v1291[v1299];
                        v1310 = v1288[v1299];
                        v1311 = *a2;
                        v1312 = 4 * *(_QWORD *)(v1293 + 8 * v1299);
                        v1313 = v1306;
                        v1314 = v1307;
                        do
                        {
                          if (v1310 >= 1)
                          {
                            v1315 = v158[19];
                            v1316 = (float *)(v1311[19] + v1313);
                            v1317 = v1310;
                            do
                            {
                              if (*(_BYTE *)(v1315 + v1314))
                                v1318 = 1.0;
                              else
                                v1318 = 0.0;
                              *v1316 = v1318;
                              v1316 = (float *)((char *)v1316 + v1312);
                              v1315 += v1309;
                              --v1317;
                            }
                            while (v1317);
                          }
                          v1314 += v1303;
                          ++v1308;
                          v1313 += v1305;
                        }
                        while (v1308 != v1304);
                      }
                      v1307 += v1295;
                      ++v1302;
                      v1306 += v1300;
                    }
                    while (v1302 != v1297);
                  }
                  v157 = v1301 + v1487;
                  ++v1289;
                  result += v1519;
                }
                while (v1289 != v1504);
              }
              break;
            case 5:
              v1319 = (v159 << 30) - 0x500000000;
              v1320 = *a4;
              v1447 = *(int *)((char *)*a4 + (v1319 >> 30));
              if (v1447 >= 1)
              {
                v1459 = 0;
                v1321 = v159 << 30;
                v1322 = *a5;
                v1323 = v1319 >> 29;
                v1437 = *(uint64_t *)((char *)*a5 + v1323);
                v1324 = *a6;
                v1325 = (v1321 - 0x400000000) >> 29;
                v1505 = *(uint64_t *)((char *)*a5 + v1325);
                v1520 = *(int *)((char *)v1320 + ((v1321 - 0x400000000) >> 30));
                v1326 = (v1321 - 0x200000000) >> 32;
                result = (v1321 - 0x100000000) >> 32;
                v1417 = (v1321 - 0x300000000) >> 32;
                v1427 = 4 * *(_QWORD *)(*a6 + v1323);
                v1471 = 4 * v1381;
                v1488 = 4 * *(_QWORD *)(*a6 + v1325);
                do
                {
                  v1402 = v157;
                  if (v1520 >= 1)
                  {
                    v1327 = 0;
                    v1328 = v1322[v1417];
                    v1329 = v1320[v1417];
                    v1330 = 4 * *(_QWORD *)(v1324 + 8 * v1417);
                    v1331 = v1471;
                    v1332 = v157;
                    do
                    {
                      if (v1329 >= 1)
                      {
                        v1333 = 0;
                        v1334 = v1322[v1326];
                        v1335 = v1320[v1326];
                        v1336 = 4 * *(_QWORD *)(v1324 + 8 * v1326);
                        v1337 = v1331;
                        v1338 = v1332;
                        do
                        {
                          if (v1335 >= 1)
                          {
                            v1339 = 0;
                            v1340 = v1322[result];
                            v1341 = v1320[result];
                            v1342 = *a2;
                            v1343 = 4 * *(_QWORD *)(v1324 + 8 * result);
                            v1344 = v1337;
                            v1345 = v1338;
                            do
                            {
                              if (v1341 >= 1)
                              {
                                v1346 = v158[19];
                                v1347 = (float *)(v1342[19] + v1344);
                                v1348 = v1341;
                                do
                                {
                                  if (*(_BYTE *)(v1346 + v1345))
                                    v1349 = 1.0;
                                  else
                                    v1349 = 0.0;
                                  *v1347 = v1349;
                                  v1347 = (float *)((char *)v1347 + v1343);
                                  v1346 += v1340;
                                  --v1348;
                                }
                                while (v1348);
                              }
                              v1345 += v1334;
                              ++v1339;
                              v1344 += v1336;
                            }
                            while (v1339 != v1335);
                          }
                          v1338 += v1328;
                          ++v1333;
                          v1337 += v1330;
                        }
                        while (v1333 != v1329);
                      }
                      v1332 += v1505;
                      ++v1327;
                      v1331 += v1488;
                    }
                    while (v1327 != v1520);
                  }
                  v157 = v1402 + v1437;
                  v1471 += v1427;
                  ++v1459;
                }
                while (v1459 != v1447);
              }
              break;
            default:
              v1205 = (char *)a4[1];
              LODWORD(v1206) = 1;
              v1207 = -20;
              do
              {
                v1206 = *(int *)&v1205[v1207] * (uint64_t)(int)v1206;
                v1207 += 4;
              }
              while (v1207);
              v1380 = v158[6];
              if (v1380)
              {
                v1208 = 0;
                v1209 = (v159 << 30) - 0x500000000;
                v1210 = *a4;
                v1360 = *v8;
                v1211 = *a5;
                v1365 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1370 = ((unint64_t)(v1205 - (char *)*a4) >> 2) - 1;
                v1212 = *a6;
                v1436 = *(int *)((char *)*a4 + (v1209 >> 30));
                v1355 = ((v159 << 30) - 0x400000000) >> 32;
                v1401 = *a7;
                v1408 = ((v159 << 30) - 0x300000000) >> 32;
                v1213 = ((v159 << 30) - 0x200000000) >> 32;
                v1214 = ((v159 << 30) - 0x100000000) >> 32;
                v1416 = 4 * *(_QWORD *)(*a6 + (v1209 >> 29));
                v1426 = *(uint64_t *)((char *)*a5 + (v1209 >> 29));
                v1375 = v1206;
                do
                {
                  v1215 = v1370;
                  if ((v1370 & 0x80000000) != 0)
                  {
                    v1216 = 0;
                    v1217 = v1365;
                  }
                  else
                  {
                    v1216 = 0;
                    LODWORD(result) = v1208;
                    v1217 = v1365;
                    do
                    {
                      v1218 = ldiv((int)result, v1210[v1215]);
                      result = v1218.quot;
                      v1216 += v1211[v1215--] * v1218.rem;
                    }
                    while (v1215 != -1);
                  }
                  v1395 = v1208;
                  v1219 = 0;
                  if ((v1217 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1208;
                    do
                    {
                      v1220 = ldiv((int)result, *(int *)(v1360 + 4 * v1217));
                      result = v1220.quot;
                      v1219 += *(_QWORD *)(v1212 + 8 * v1217--) * v1220.rem;
                    }
                    while (v1217 != -1);
                  }
                  if (v1436 >= 1)
                  {
                    v1221 = 0;
                    v1503 = v1211[v1355];
                    v1470 = v1216 + v1401;
                    v1518 = v1210[v1355];
                    v1458 = 4 * (v1219 + v1381);
                    v1486 = 4 * *(_QWORD *)(v1212 + 8 * v1355);
                    do
                    {
                      v1446 = v1221;
                      if (v1518 >= 1)
                      {
                        v1222 = 0;
                        v1223 = v1211[v1408];
                        v1224 = v1210[v1408];
                        v1225 = 4 * *(_QWORD *)(v1212 + 8 * v1408);
                        v1227 = v1458;
                        v1226 = v1470;
                        do
                        {
                          if (v1224 >= 1)
                          {
                            v1228 = 0;
                            v1229 = v1211[v1213];
                            v1230 = v1210[v1213];
                            v1231 = 4 * *(_QWORD *)(v1212 + 8 * v1213);
                            result = v1227;
                            v1232 = v1226;
                            do
                            {
                              if (v1230 >= 1)
                              {
                                v1233 = 0;
                                v1234 = v1211[v1214];
                                v1235 = v1210[v1214];
                                v1236 = *a2;
                                v1237 = 4 * *(_QWORD *)(v1212 + 8 * v1214);
                                v1238 = result;
                                v1239 = v1232;
                                do
                                {
                                  if (v1235 >= 1)
                                  {
                                    v1240 = v158[19];
                                    v1241 = (float *)(v1236[19] + v1238);
                                    v1242 = v1235;
                                    do
                                    {
                                      if (*(_BYTE *)(v1240 + v1239))
                                        v1243 = 1.0;
                                      else
                                        v1243 = 0.0;
                                      *v1241 = v1243;
                                      v1241 = (float *)((char *)v1241 + v1237);
                                      v1240 += v1234;
                                      --v1242;
                                    }
                                    while (v1242);
                                  }
                                  v1239 += v1229;
                                  ++v1233;
                                  v1238 += v1231;
                                }
                                while (v1233 != v1230);
                              }
                              v1232 += v1223;
                              ++v1228;
                              result += v1225;
                            }
                            while (v1228 != v1224);
                          }
                          v1226 += v1503;
                          ++v1222;
                          v1227 += v1486;
                        }
                        while (v1222 != v1518);
                      }
                      v1470 += v1426;
                      v1221 = v1446 + 1;
                      v1458 += v1416;
                    }
                    while (v1446 + 1 != v1436);
                  }
                  v1208 += v1375;
                }
                while (v1380 > v1395 + v1375);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<unsigned char,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, float a9)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  float v32;
  float *v33;
  size_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  BOOL *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  _DWORD *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  _QWORD *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  float *v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float *v157;
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  float *v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  ldiv_t v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int *v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int *v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  ldiv_t v233;
  int *v234;
  int v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t *v241;
  uint64_t v242;
  int *v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int i;
  int v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  int *v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  int j;
  int v263;
  int k;
  int v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int *v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  ldiv_t v279;
  int *v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  int *v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int v299;
  uint64_t *v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  int *v305;
  int v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  int v315;
  uint64_t *v316;
  uint64_t v317;
  int v318;
  int v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  ldiv_t v334;
  int *v335;
  int v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t *v342;
  uint64_t v343;
  int *v344;
  int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  int m;
  int v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  int *v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  int n;
  int v364;
  int ii;
  int v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int *v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  ldiv_t v380;
  int *v381;
  int v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  int *v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  int v400;
  uint64_t *v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  int *v406;
  int v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  int v416;
  uint64_t *v417;
  uint64_t v418;
  int v419;
  int v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int *v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  ldiv_t v436;
  int v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t *v443;
  int v444;
  uint64_t v445;
  int *v446;
  int v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t *v453;
  int v454;
  uint64_t *v455;
  int v456;
  uint64_t v457;
  int *v458;
  int v459;
  int v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t *v465;
  int v466;
  uint64_t *v467;
  int v468;
  int v469;
  uint64_t *v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int *v477;
  uint64_t v478;
  uint64_t *v479;
  uint64_t v480;
  uint64_t v481;
  ldiv_t v482;
  int v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  int *v492;
  int v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  int *v508;
  int v509;
  int v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  int v517;
  uint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  int v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  char *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int *v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  ldiv_t v539;
  uint64_t v540;
  uint64_t v541;
  ldiv_t v542;
  int v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  int v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  uint64_t *v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  int v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  int *v578;
  int v579;
  int v580;
  uint64_t v581;
  uint64_t *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  int v597;
  uint64_t v598;
  uint64_t *v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  uint64_t v603;
  int *v604;
  int v605;
  uint64_t *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  int v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  int v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  uint64_t v627;
  uint64_t *v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  uint64_t v632;
  int *v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  int v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  int v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  int v655;
  uint64_t v656;
  uint64_t *v657;
  uint64_t v658;
  uint64_t v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  int *v663;
  unint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t *v667;
  ldiv_t v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  int quot;
  ldiv_t v675;
  uint64_t v676;
  int v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  int v684;
  int v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  int v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  int v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  char *v721;
  uint64_t v722;
  uint64_t v723;
  int *v724;
  uint64_t *v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  ldiv_t v732;
  uint64_t v733;
  uint64_t v734;
  int v735;
  ldiv_t v736;
  int v737;
  int v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  int v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  int v749;
  int v750;
  uint64_t v751;
  uint64_t *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  int v756;
  uint64_t v757;
  _DWORD *v758;
  uint64_t v759;
  int *v760;
  int v761;
  int v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  _DWORD *v774;
  uint64_t v775;
  int *v776;
  int v777;
  int v778;
  uint64_t *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  int v793;
  int v794;
  uint64_t v795;
  uint64_t *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  uint64_t v801;
  _DWORD *v802;
  uint64_t v803;
  int *v804;
  int v805;
  uint64_t *v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  int v817;
  int v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  int v823;
  int v824;
  uint64_t v825;
  uint64_t *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  uint64_t v831;
  _DWORD *v832;
  uint64_t v833;
  int *v834;
  uint64_t *v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  int v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  int v846;
  int v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  int v853;
  uint64_t v854;
  uint64_t *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  int v859;
  uint64_t v860;
  _DWORD *v861;
  uint64_t v862;
  uint64_t v863;
  int *v864;
  unint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t *v868;
  ldiv_t v869;
  uint64_t v870;
  unint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  ldiv_t v876;
  uint64_t v877;
  int v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  int v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  int v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  int v898;
  int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  int v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  int v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  char *v922;
  uint64_t v923;
  uint64_t v924;
  int *v925;
  uint64_t *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  ldiv_t v933;
  uint64_t v934;
  uint64_t v935;
  int v936;
  ldiv_t v937;
  int v938;
  int v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  int v944;
  int v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  int v951;
  uint64_t v952;
  uint64_t *v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  int v957;
  uint64_t v958;
  _DWORD *v959;
  uint64_t v960;
  int *v961;
  int v962;
  int v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  _DWORD *v975;
  uint64_t v976;
  int *v977;
  int v978;
  int v979;
  uint64_t *v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  int v994;
  int v995;
  uint64_t v996;
  uint64_t *v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int v1001;
  uint64_t v1002;
  _DWORD *v1003;
  uint64_t v1004;
  int *v1005;
  int v1006;
  uint64_t *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  int v1018;
  int v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  int v1024;
  int v1025;
  uint64_t v1026;
  uint64_t *v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  int v1031;
  uint64_t v1032;
  _DWORD *v1033;
  uint64_t v1034;
  int *v1035;
  uint64_t *v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  int v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  int v1047;
  int v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  int v1053;
  int v1054;
  uint64_t v1055;
  uint64_t *v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  int v1060;
  uint64_t v1061;
  _DWORD *v1062;
  char *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  int *v1068;
  uint64_t *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  ldiv_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  ldiv_t v1078;
  int v1079;
  int v1080;
  int v1081;
  uint64_t v1082;
  uint64_t v1083;
  int v1084;
  uint64_t v1085;
  int v1086;
  uint64_t v1087;
  uint64_t v1088;
  int v1089;
  uint64_t v1090;
  int v1091;
  uint64_t *v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  _QWORD *v1098;
  uint64_t v1099;
  int v1100;
  uint64_t v1101;
  int v1102;
  int v1103;
  uint64_t *v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  int v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  _QWORD *v1115;
  uint64_t v1116;
  int v1117;
  uint64_t v1118;
  int *v1119;
  int v1120;
  int v1121;
  uint64_t *v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  int v1131;
  uint64_t v1132;
  uint64_t v1133;
  int v1134;
  uint64_t v1135;
  int v1136;
  uint64_t *v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  _QWORD *v1143;
  uint64_t v1144;
  int v1145;
  uint64_t v1146;
  int *v1147;
  int v1148;
  uint64_t *v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  int v1153;
  uint64_t v1154;
  uint64_t v1155;
  int v1156;
  uint64_t v1157;
  int v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  int v1162;
  uint64_t v1163;
  int v1164;
  uint64_t *v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  _QWORD *v1171;
  uint64_t v1172;
  int v1173;
  uint64_t v1174;
  int *v1175;
  uint64_t *v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  int v1181;
  int v1182;
  uint64_t v1183;
  uint64_t v1184;
  int v1185;
  uint64_t v1186;
  int v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  int v1191;
  uint64_t v1192;
  int v1193;
  uint64_t *v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  _QWORD *v1200;
  uint64_t v1201;
  int v1202;
  char *v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  int *v1207;
  uint64_t *v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  ldiv_t v1215;
  uint64_t v1216;
  int v1217;
  ldiv_t v1218;
  int v1219;
  int v1220;
  uint64_t v1221;
  int v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  uint64_t v1227;
  int v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  int v1232;
  uint64_t v1233;
  int v1234;
  uint64_t *v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  float *v1240;
  int v1241;
  uint64_t v1242;
  int v1243;
  int v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  int v1254;
  uint64_t v1255;
  int *v1256;
  int v1257;
  int v1258;
  uint64_t v1259;
  uint64_t *v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  int v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  int v1274;
  uint64_t v1275;
  int v1276;
  uint64_t *v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  float *v1282;
  int v1283;
  uint64_t v1284;
  int *v1285;
  int v1286;
  uint64_t v1287;
  uint64_t *v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  int v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  int v1299;
  uint64_t v1300;
  int v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  int v1305;
  uint64_t v1306;
  int v1307;
  uint64_t *v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  float *v1313;
  int v1314;
  uint64_t v1315;
  int *v1316;
  uint64_t *v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  int v1322;
  uint64_t v1323;
  int v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  int v1328;
  uint64_t v1329;
  int v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  int v1334;
  uint64_t v1335;
  int v1336;
  uint64_t *v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  float *v1342;
  int v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  unint64_t v1365;
  unint64_t v1366;
  unint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  unint64_t v1372;
  unint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  int v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  uint64_t v1421;
  int v1422;
  uint64_t v1423;
  int v1424;
  uint64_t v1425;
  int v1426;
  int v1427;
  uint64_t v1428;
  uint64_t v1429;
  int v1430;
  uint64_t v1431;
  int v1432;
  int v1433;
  int v1434;
  int v1435;
  uint64_t v1436;
  int v1437;
  int v1438;
  uint64_t v1439;
  uint64_t v1440;
  int v1441;
  uint64_t v1442;
  uint64_t v1443;
  int v1444;
  uint64_t v1445;
  uint64_t v1446;
  int v1447;
  uint64_t v1448;
  uint64_t v1449;
  int v1450;
  int v1451;
  uint64_t v1452;
  int v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  int v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  _QWORD *v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  _QWORD *v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1504;
  uint64_t v1505;
  int v1506;
  uint64_t v1507;
  int v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  int v1513;
  int v1514;
  int v1515;
  uint64_t v1516;
  int v1517;
  int v1518;
  int v1519;
  uint64_t v1520;
  int v1521;
  int v1522;
  int v1523;
  int v1524;
  int v1525;
  int v1526;
  int v1527;
  int v1528;

  v9 = *(uint64_t **)a2;
  v10 = a6;
  v13 = (uint64_t **)a2;
  v14 = result;
  switch(*(_DWORD *)(*(_QWORD *)a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v15 = v9[6];
          if (v15)
            result = (uint64_t)memset((void *)v9[19], **(_BYTE **)(*(_QWORD *)result + 152) != 0, v15);
          break;
        case 1:
          v35 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v35)
          {
            v36 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v37 = (BOOL *)v9[19];
            do
            {
              v38 = *v36++;
              *v37++ = v38 != 0;
              --v35;
            }
            while (v35);
          }
          break;
        case 2:
          v39 = *a7;
          v40 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v41 = **a4;
              if ((int)v41 >= 1)
              {
                v42 = (BOOL *)v9[19];
                v43 = **a5;
                v44 = (_BYTE *)(*(_QWORD *)(v40 + 152) + v39);
                do
                {
                  *v42++ = *v44 != 0;
                  v44 += v43;
                  --v41;
                }
                while (v41);
              }
              break;
            case 2:
              v180 = **a4;
              if (v180 >= 1)
              {
                v181 = 0;
                v182 = 0;
                v183 = *(_QWORD *)(v40 + 152);
                v184 = v9[19];
                v185 = (*a4)[1];
                v186 = (*a5)[1];
                v187 = **a5 - v186 * v185;
                do
                {
                  v188 = v185;
                  if ((int)v185 >= 1)
                  {
                    do
                    {
                      result = *(_BYTE *)(v183 + v39) != 0;
                      *(_BYTE *)(v184 + v182++) = result;
                      v39 += v186;
                      --v188;
                    }
                    while (v188);
                  }
                  v39 += v187;
                  ++v181;
                }
                while (v181 != v180);
              }
              break;
            case 3:
              v189 = *a4;
              v190 = **a4;
              if (v190 >= 1)
              {
                v191 = 0;
                result = 0;
                v192 = *(_QWORD *)(v40 + 152);
                v193 = v9[19];
                v194 = v189[1];
                v195 = *a5;
                v196 = (*a5)[1];
                v197 = **a5 - v196 * v194;
                do
                {
                  if ((int)v194 < 1)
                  {
                    v204 = result;
                  }
                  else
                  {
                    v198 = 0;
                    v199 = v189[2];
                    v200 = *a5;
                    v201 = v196 - v195[2] * v199;
                    do
                    {
                      if ((int)v199 < 1)
                      {
                        v204 = result;
                      }
                      else
                      {
                        v202 = v200[2];
                        v203 = v199;
                        do
                        {
                          v204 = result + 1;
                          *(_BYTE *)(v193 + result) = *(_BYTE *)(v192 + v39) != 0;
                          v39 += v202;
                          ++result;
                          --v203;
                        }
                        while (v203);
                      }
                      v39 += v201;
                      ++v198;
                      result = v204;
                    }
                    while (v198 != (_DWORD)v194);
                  }
                  v39 += v197;
                  ++v191;
                  result = v204;
                }
                while (v191 != v190);
              }
              break;
            case 4:
              v205 = *a4;
              v206 = **a4;
              if (v206 >= 1)
              {
                v207 = 0;
                result = 0;
                v208 = *(_QWORD *)(v40 + 152);
                v209 = v9[19];
                v210 = v205[1];
                v211 = *a5;
                v212 = (*a5)[1];
                v213 = **a5 - v212 * v210;
                do
                {
                  if ((int)v210 < 1)
                  {
                    v224 = result;
                  }
                  else
                  {
                    v214 = 0;
                    v215 = v205[2];
                    v216 = *a5;
                    v217 = v212 - v211[2] * v215;
                    do
                    {
                      if ((int)v215 < 1)
                      {
                        v224 = result;
                      }
                      else
                      {
                        v218 = 0;
                        v219 = v205[3];
                        v220 = *a5;
                        v221 = v216[2] - v216[3] * v219;
                        do
                        {
                          if ((int)v219 < 1)
                          {
                            v224 = result;
                          }
                          else
                          {
                            v222 = v220[3];
                            v223 = v219;
                            do
                            {
                              v224 = result + 1;
                              *(_BYTE *)(v209 + result) = *(_BYTE *)(v208 + v39) != 0;
                              v39 += v222;
                              ++result;
                              --v223;
                            }
                            while (v223);
                          }
                          v39 += v221;
                          ++v218;
                          result = v224;
                        }
                        while (v218 != (_DWORD)v215);
                      }
                      v39 += v217;
                      ++v214;
                      result = v224;
                    }
                    while (v214 != (_DWORD)v210);
                  }
                  v39 += v213;
                  ++v207;
                  result = v224;
                }
                while (v207 != v206);
              }
              break;
            default:
              v170 = v9[6];
              if (v170)
              {
                v171 = 0;
                v172 = *(_QWORD *)(v40 + 152) + v39;
                v173 = v9[19];
                v174 = *a4;
                v175 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v176 = *a5;
                do
                {
                  v177 = 0;
                  if ((v175 & 0x80000000) == 0)
                  {
                    v178 = v175;
                    LODWORD(result) = v171;
                    do
                    {
                      v179 = ldiv((int)result, v174[v178]);
                      result = v179.quot;
                      v177 += v176[v178--] * v179.rem;
                    }
                    while (v178 != -1);
                  }
                  *(_BYTE *)(v173 + v171++) = *(_BYTE *)(v172 + v177) != 0;
                }
                while (v171 != v170);
              }
              break;
          }
          break;
        case 3:
          v45 = *a7;
          v46 = *a8;
          v47 = *(_QWORD **)result;
          v48 = v47[1] - *v47;
          switch(v48 >> 2)
          {
            case 1:
              v49 = (v48 << 30) - 0x100000000;
              v50 = *(int *)((char *)*a4 + (v49 >> 30));
              if (v50 >= 1)
              {
                v51 = v49 >> 29;
                v52 = *(uint64_t *)((char *)*a5 + (v49 >> 29));
                v53 = *(_QWORD *)(*a6 + v51);
                v54 = (BOOL *)(v9[19] + v46);
                v55 = (_BYTE *)(v47[19] + v45);
                do
                {
                  *v54 = *v55 != 0;
                  v55 += v52;
                  v54 += v53;
                  --v50;
                }
                while (v50);
              }
              break;
            case 2:
              v565 = (v48 << 30) - 0x200000000;
              v566 = *(int *)((char *)*a4 + (v565 >> 30));
              if (v566 >= 1)
              {
                v567 = 0;
                v568 = v565 >> 29;
                v569 = *(uint64_t *)((char *)*a5 + (v565 >> 29));
                v570 = *(_QWORD *)(*a6 + v568);
                v571 = (v48 << 30) - 0x100000000;
                result = v571 >> 29;
                v572 = *(uint64_t *)((char *)*a5 + (v571 >> 29));
                v573 = *(_QWORD *)(*a6 + (v571 >> 29));
                v574 = *(int *)((char *)*a4 + (v571 >> 30));
                do
                {
                  if (v574 >= 1)
                  {
                    v575 = v9[19];
                    v576 = v47[19];
                    LODWORD(result) = v574;
                    do
                    {
                      *(_BYTE *)(v575 + v46) = *(_BYTE *)(v576 + v45) != 0;
                      v575 += v573;
                      v576 += v572;
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v45 += v569;
                  v46 += v570;
                  ++v567;
                }
                while (v567 != v566);
              }
              break;
            case 3:
              v577 = (v48 << 30) - 0x300000000;
              v578 = *a4;
              v579 = *(int *)((char *)*a4 + (v577 >> 30));
              if (v579 >= 1)
              {
                v580 = 0;
                v581 = v48 << 30;
                v582 = *a5;
                v583 = v577 >> 29;
                v584 = *(uint64_t *)((char *)*a5 + (v577 >> 29));
                v585 = *a6;
                v586 = *(_QWORD *)(*a6 + v583);
                v587 = v581 - 0x200000000;
                v588 = (v581 - 0x200000000) >> 29;
                v589 = v581 - 0x100000000;
                v590 = *(uint64_t *)((char *)*a5 + v588);
                v591 = *(_QWORD *)(*a6 + v588);
                v592 = *(int *)((char *)v578 + (v587 >> 30));
                result = v589 >> 32;
                do
                {
                  if (v592 >= 1)
                  {
                    v593 = 0;
                    v594 = v582[result];
                    v595 = *(_QWORD *)(v585 + 8 * result);
                    v596 = v45;
                    v597 = v578[result];
                    v598 = v46;
                    v599 = *v13;
                    do
                    {
                      if (v597 >= 1)
                      {
                        v600 = v599[19];
                        v601 = v47[19];
                        v602 = v597;
                        do
                        {
                          *(_BYTE *)(v600 + v598) = *(_BYTE *)(v601 + v596) != 0;
                          v600 += v595;
                          v601 += v594;
                          --v602;
                        }
                        while (v602);
                      }
                      v596 += v590;
                      v598 += v591;
                      ++v593;
                    }
                    while (v593 != v592);
                  }
                  v45 += v584;
                  v46 += v586;
                  ++v580;
                }
                while (v580 != v579);
              }
              break;
            case 4:
              v603 = (v48 << 30) - 0x400000000;
              v604 = *a4;
              v1514 = *(int *)((char *)*a4 + (v603 >> 30));
              if (v1514 >= 1)
              {
                v605 = 0;
                v606 = *a5;
                v607 = v603 >> 29;
                v1481 = *(uint64_t *)((char *)*a5 + v607);
                v608 = *a6;
                v1498 = *(_QWORD *)(*a6 + v607);
                v609 = v48 << 30;
                v610 = (v48 << 30) - 0x300000000;
                v611 = *(uint64_t *)((char *)*a5 + (v610 >> 29));
                v612 = *(_QWORD *)(*a6 + (v610 >> 29));
                v613 = *(int *)((char *)v604 + (v610 >> 30));
                v1465 = (v609 - 0x200000000) >> 32;
                v614 = (v609 - 0x100000000) >> 32;
                do
                {
                  result = v46;
                  v615 = v45;
                  if (v613 >= 1)
                  {
                    v616 = 0;
                    v617 = v606[v1465];
                    v618 = *(_QWORD *)(v608 + 8 * v1465);
                    v619 = v45;
                    v620 = v604[v1465];
                    v621 = v46;
                    do
                    {
                      if (v620 >= 1)
                      {
                        v622 = 0;
                        v623 = v606[v614];
                        v624 = *(_QWORD *)(v608 + 8 * v614);
                        v625 = v619;
                        v626 = v604[v614];
                        v627 = v621;
                        v628 = *v13;
                        do
                        {
                          if (v626 >= 1)
                          {
                            v629 = v628[19];
                            v630 = v47[19];
                            v631 = v626;
                            do
                            {
                              *(_BYTE *)(v629 + v627) = *(_BYTE *)(v630 + v625) != 0;
                              v629 += v624;
                              v630 += v623;
                              --v631;
                            }
                            while (v631);
                          }
                          v625 += v617;
                          v627 += v618;
                          ++v622;
                        }
                        while (v622 != v620);
                      }
                      v619 += v611;
                      v621 += v612;
                      ++v616;
                    }
                    while (v616 != v613);
                  }
                  v45 = v615 + v1481;
                  v46 = result + v1498;
                  ++v605;
                }
                while (v605 != v1514);
              }
              break;
            case 5:
              v632 = (v48 << 30) - 0x500000000;
              v633 = *a4;
              v1441 = *(int *)((char *)*a4 + (v632 >> 30));
              if (v1441 >= 1)
              {
                v1453 = 0;
                v634 = v48 << 30;
                v635 = *a5;
                v636 = v632 >> 29;
                v637 = *a6;
                v1421 = *(_QWORD *)(*a6 + v636);
                v1431 = *(uint64_t *)((char *)*a5 + v636);
                v638 = ((v48 << 30) - 0x400000000) >> 29;
                v1482 = *(_QWORD *)(*a6 + v638);
                v1499 = *(uint64_t *)((char *)*a5 + v638);
                v1515 = *(int *)((char *)v633 + ((v634 - 0x400000000) >> 30));
                v1411 = (v634 - 0x300000000) >> 32;
                v1466 = (v634 - 0x200000000) >> 32;
                v639 = (v634 - 0x100000000) >> 32;
                do
                {
                  v1380 = v46;
                  v1390 = v45;
                  if (v1515 >= 1)
                  {
                    v640 = 0;
                    v641 = v635[v1411];
                    v642 = *(_QWORD *)(v637 + 8 * v1411);
                    result = v46;
                    v643 = v45;
                    v644 = v633[v1411];
                    do
                    {
                      if (v644 >= 1)
                      {
                        v645 = 0;
                        v646 = v635[v1466];
                        v647 = *(_QWORD *)(v637 + 8 * v1466);
                        v648 = v643;
                        v649 = v633[v1466];
                        v650 = result;
                        do
                        {
                          if (v649 >= 1)
                          {
                            v651 = 0;
                            v652 = v635[v639];
                            v653 = *(_QWORD *)(v637 + 8 * v639);
                            v654 = v648;
                            v655 = v633[v639];
                            v656 = v650;
                            v657 = *(uint64_t **)a2;
                            do
                            {
                              if (v655 >= 1)
                              {
                                v658 = v657[19];
                                v659 = v47[19];
                                v660 = v655;
                                do
                                {
                                  *(_BYTE *)(v658 + v656) = *(_BYTE *)(v659 + v654) != 0;
                                  v658 += v653;
                                  v659 += v652;
                                  --v660;
                                }
                                while (v660);
                              }
                              v654 += v646;
                              v656 += v647;
                              ++v651;
                            }
                            while (v651 != v649);
                          }
                          v648 += v641;
                          v650 += v642;
                          ++v645;
                        }
                        while (v645 != v644);
                      }
                      v643 += v1499;
                      result += v1482;
                      ++v640;
                    }
                    while (v640 != v1515);
                  }
                  v45 = v1390 + v1431;
                  v46 = v1380 + v1421;
                  ++v1453;
                }
                while (v1453 != v1441);
              }
              break;
            default:
              v528 = (char *)a4[1];
              LODWORD(v529) = 1;
              v530 = -20;
              do
              {
                v529 = *(int *)&v528[v530] * (uint64_t)(int)v529;
                v530 += 4;
              }
              while (v530);
              v1372 = v47[6];
              if (v1372)
              {
                v531 = 0;
                v532 = (v48 << 30) - 0x500000000;
                v533 = *a4;
                v1349 = *v9;
                v534 = *a5;
                v1354 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                v1359 = ((unint64_t)(v528 - (char *)*a4) >> 2) - 1;
                v535 = *a6;
                v1402 = *(_QWORD *)(*a6 + (v532 >> 29));
                v1410 = *(uint64_t *)((char *)*a5 + (v532 >> 29));
                v1420 = *(int *)((char *)*a4 + (v532 >> 30));
                v1345 = ((v48 << 30) - 0x400000000) >> 32;
                v1396 = ((v48 << 30) - 0x300000000) >> 32;
                v1464 = ((v48 << 30) - 0x200000000) >> 32;
                v536 = ((v48 << 30) - 0x100000000) >> 32;
                v1379 = *a8;
                v1389 = *a7;
                v1364 = v529;
                do
                {
                  v537 = v1359;
                  if ((v1359 & 0x80000000) != 0)
                  {
                    v538 = 0;
                  }
                  else
                  {
                    v538 = 0;
                    LODWORD(result) = v531;
                    do
                    {
                      v539 = ldiv((int)result, v533[v537]);
                      result = v539.quot;
                      v538 += v534[v537--] * v539.rem;
                    }
                    while (v537 != -1);
                  }
                  v540 = v1354;
                  v1375 = v531;
                  v541 = 0;
                  if ((v1354 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v531;
                    do
                    {
                      v542 = ldiv((int)result, *(int *)(v1349 + 4 * v540));
                      result = v542.quot;
                      v541 += *(_QWORD *)(v535 + 8 * v540--) * v542.rem;
                    }
                    while (v540 != -1);
                  }
                  if (v1420 >= 1)
                  {
                    v543 = 0;
                    v1452 = v538 + v1389;
                    v1440 = v541 + v1379;
                    v1480 = *(_QWORD *)(v535 + 8 * v1345);
                    v1497 = v534[v1345];
                    v1513 = v533[v1345];
                    do
                    {
                      v1430 = v543;
                      if (v1513 >= 1)
                      {
                        v544 = 0;
                        v545 = v534[v1396];
                        v546 = *(_QWORD *)(v535 + 8 * v1396);
                        v548 = v1440;
                        v547 = v1452;
                        result = v533[v1396];
                        do
                        {
                          if ((int)result >= 1)
                          {
                            v549 = 0;
                            v550 = v534[v1464];
                            v551 = *(_QWORD *)(v535 + 8 * v1464);
                            v552 = v547;
                            v553 = v533[v1464];
                            v554 = v548;
                            do
                            {
                              if (v553 >= 1)
                              {
                                v555 = 0;
                                v556 = v534[v536];
                                v557 = *(_QWORD *)(v535 + 8 * v536);
                                v558 = v552;
                                v559 = v533[v536];
                                v560 = v554;
                                v561 = *v13;
                                do
                                {
                                  if (v559 >= 1)
                                  {
                                    v562 = v561[19];
                                    v563 = v47[19];
                                    v564 = v559;
                                    do
                                    {
                                      *(_BYTE *)(v562 + v560) = *(_BYTE *)(v563 + v558) != 0;
                                      v562 += v557;
                                      v563 += v556;
                                      --v564;
                                    }
                                    while (v564);
                                  }
                                  v558 += v550;
                                  v560 += v551;
                                  ++v555;
                                }
                                while (v555 != v553);
                              }
                              v552 += v545;
                              v554 += v546;
                              ++v549;
                            }
                            while (v549 != (_DWORD)result);
                          }
                          v547 += v1497;
                          v548 += v1480;
                          ++v544;
                        }
                        while (v544 != v1513);
                      }
                      v1452 += v1410;
                      v1440 += v1402;
                      v543 = v1430 + 1;
                    }
                    while (v1430 + 1 != v1420);
                  }
                  v531 += v1364;
                }
                while (v1372 > v1375 + v1364);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v9[6])
          {
            v16 = 0;
            v17 = **(_BYTE **)(*(_QWORD *)result + 152);
            v18 = v9[19];
            do
              *(_BYTE *)(v18 + v16++) = v17;
            while (*(_QWORD *)(*(_QWORD *)a2 + 48) > v16);
          }
          break;
        case 1:
          goto LABEL_35;
        case 2:
          v56 = *a7;
          v57 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v58 = 0;
                v59 = *(_QWORD *)(v57 + 152);
                v60 = v9[19];
                do
                {
                  *(_BYTE *)(v60 + v58) = *(_BYTE *)(v59 + v56);
                  v56 += **a5;
                  ++v58;
                }
                while (**a4 > (int)v58);
              }
              break;
            case 2:
              v234 = *a4;
              v235 = **a4;
              if (v235 >= 1)
              {
                v236 = 0;
                v237 = 0;
                v238 = *(_QWORD *)(v57 + 152);
                v239 = v9[19];
                do
                {
                  v240 = v234[1];
                  if (v240 < 1)
                  {
                    v241 = *a5;
                    v242 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v239 + v237 + result) = *(_BYTE *)(v238 + v56);
                      v241 = *a5;
                      v242 = (*a5)[1];
                      v56 += v242;
                      v234 = *a4;
                      v240 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v240);
                    v235 = *v234;
                    v237 += result;
                  }
                  v56 = *v241 + v56 - v242 * v240;
                  ++v236;
                }
                while (v236 < v235);
              }
              break;
            case 3:
              v243 = *a4;
              v244 = **a4;
              if (v244 >= 1)
              {
                v245 = 0;
                v246 = 0;
                v247 = *(_QWORD *)(v57 + 152);
                v248 = v9[19];
                do
                {
                  v249 = v243[1];
                  if (v249 < 1)
                  {
                    v253 = *a5;
                    v254 = (*a5)[1];
                  }
                  else
                  {
                    for (i = 0; i < v249; ++i)
                    {
                      v251 = v243[2];
                      if (v251 < 1)
                      {
                        v253 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v252 = 0;
                        do
                        {
                          *(_BYTE *)(v248 + v246 + v252) = *(_BYTE *)(v247 + v56);
                          v253 = *a5;
                          result = (*a5)[2];
                          v56 += result;
                          v243 = *a4;
                          v251 = (*a4)[2];
                          ++v252;
                        }
                        while ((int)v252 < v251);
                        v246 += v252;
                      }
                      v254 = v253[1];
                      v56 = v254 + v56 - result * v251;
                      v249 = v243[1];
                    }
                    v244 = *v243;
                  }
                  v56 = *v253 + v56 - v254 * v249;
                  ++v245;
                }
                while (v245 < v244);
              }
              break;
            case 4:
              v255 = *a4;
              v256 = **a4;
              if (v256 >= 1)
              {
                v257 = 0;
                v258 = 0;
                v259 = *(_QWORD *)(v57 + 152);
                v260 = v9[19];
                do
                {
                  v261 = v255[1];
                  if (v261 < 1)
                  {
                    v267 = *a5;
                    v269 = (*a5)[1];
                  }
                  else
                  {
                    for (j = 0; j < v261; ++j)
                    {
                      v263 = v255[2];
                      if (v263 < 1)
                      {
                        v267 = *a5;
                        v268 = (*a5)[2];
                      }
                      else
                      {
                        for (k = 0; k < v263; ++k)
                        {
                          v265 = v255[3];
                          if (v265 < 1)
                          {
                            v267 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v266 = 0;
                            do
                            {
                              *(_BYTE *)(v260 + v258 + v266) = *(_BYTE *)(v259 + v56);
                              v267 = *a5;
                              result = (*a5)[3];
                              v56 += result;
                              v255 = *a4;
                              v265 = (*a4)[3];
                              ++v266;
                            }
                            while ((int)v266 < v265);
                            v258 += v266;
                          }
                          v268 = v267[2];
                          v56 = v268 + v56 - result * v265;
                          v263 = v255[2];
                        }
                      }
                      v269 = v267[1];
                      v56 = v269 + v56 - v268 * v263;
                      v261 = v255[1];
                    }
                    v256 = *v255;
                  }
                  v56 = *v267 + v56 - v269 * v261;
                  ++v257;
                }
                while (v257 < v256);
              }
              break;
            default:
              if (v9[6])
              {
                v225 = 0;
                v226 = *(_QWORD *)(v57 + 152) + v56;
                v227 = v9[19];
                do
                {
                  v228 = *a4;
                  v229 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v230 = 0;
                  v231 = (v229 - 1);
                  if ((int)v229 - 1 >= 0)
                  {
                    v232 = *a5;
                    LODWORD(result) = v225;
                    do
                    {
                      v233 = ldiv((int)result, v228[v231]);
                      result = v233.quot;
                      v230 += v232[v231--] * v233.rem;
                    }
                    while (v231 != -1);
                  }
                  *(_BYTE *)(v227 + v225++) = *(_BYTE *)(v226 + v230);
                }
                while (v225 < (*v13)[6]);
              }
              break;
          }
          break;
        case 3:
          v61 = *a7;
          v62 = *a8;
          v63 = *(_QWORD **)result;
          v64 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v64 >> 2)
          {
            case 1:
              v65 = (v64 << 30) - 0x100000000;
              v66 = *(int *)((char *)*a4 + (v65 >> 30));
              if (v66 >= 1)
              {
                v67 = v65 >> 29;
                v68 = *(uint64_t *)((char *)*a5 + (v65 >> 29));
                v69 = *(_QWORD *)(*a6 + v67);
                v70 = (_BYTE *)(v9[19] + v62);
                v71 = (_BYTE *)(v63[19] + v61);
                do
                {
                  *v70 = *v71;
                  v71 += v68;
                  v70 += v69;
                  --v66;
                }
                while (v66);
              }
              break;
            case 2:
              v683 = (v64 << 30) - 0x200000000;
              v684 = *(int *)((char *)*a4 + (v683 >> 30));
              if (v684 >= 1)
              {
                v685 = 0;
                v686 = v683 >> 29;
                v687 = *(uint64_t *)((char *)*a5 + (v683 >> 29));
                v688 = *(_QWORD *)(*a6 + v686);
                do
                {
                  v689 = ((*(_QWORD *)(*(_QWORD *)v14 + 8) - **(_QWORD **)v14) << 30) - 0x100000000;
                  v690 = *(int *)((char *)*a4 + (v689 >> 30));
                  if (v690 >= 1)
                  {
                    v691 = v689 >> 29;
                    v692 = *(uint64_t *)((char *)*a5 + (v689 >> 29));
                    v693 = *(_QWORD *)(*a6 + v691);
                    v694 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                    v695 = *(_QWORD *)(*(_QWORD *)v14 + 152);
                    do
                    {
                      result = *(unsigned __int8 *)(v695 + v61);
                      *(_BYTE *)(v694 + v62) = result;
                      v694 += v693;
                      v695 += v692;
                      --v690;
                    }
                    while (v690);
                  }
                  v61 += v687;
                  v62 += v688;
                  ++v685;
                }
                while (v685 != v684);
              }
              break;
            case 3:
              v696 = (v64 << 30) - 0x300000000;
              v697 = *(int *)((char *)*a4 + (v696 >> 30));
              if (v697 >= 1)
              {
                v698 = 0;
                v699 = v696 >> 29;
                v700 = *(uint64_t *)((char *)*a5 + (v696 >> 29));
                v701 = *(_QWORD *)(*a6 + v699);
                do
                {
                  v702 = ((*(_QWORD *)(*(_QWORD *)v14 + 8) - **(_QWORD **)v14) << 30) - 0x200000000;
                  v703 = *(int *)((char *)*a4 + (v702 >> 30));
                  if (v703 >= 1)
                  {
                    v704 = 0;
                    v705 = v702 >> 29;
                    v706 = *(uint64_t *)((char *)*a5 + (v702 >> 29));
                    v707 = *(_QWORD *)(*v10 + v705);
                    result = v61;
                    v708 = v62;
                    do
                    {
                      v709 = ((*(_QWORD *)(*(_QWORD *)v14 + 8) - **(_QWORD **)v14) << 30) - 0x100000000;
                      v710 = *(int *)((char *)*a4 + (v709 >> 30));
                      if (v710 >= 1)
                      {
                        v711 = v709 >> 29;
                        v712 = *(uint64_t *)((char *)*a5 + (v709 >> 29));
                        v713 = *(_QWORD *)(*v10 + v711);
                        v714 = (*v13)[19];
                        v715 = *(_QWORD *)(*(_QWORD *)v14 + 152);
                        do
                        {
                          *(_BYTE *)(v714 + v708) = *(_BYTE *)(v715 + result);
                          v714 += v713;
                          v715 += v712;
                          --v710;
                        }
                        while (v710);
                      }
                      result += v706;
                      v708 += v707;
                      ++v704;
                    }
                    while (v704 != v703);
                  }
                  v61 += v700;
                  v62 += v701;
                  ++v698;
                }
                while (v698 != v697);
              }
              break;
            case 4:
              goto LABEL_552;
            case 5:
              v716 = (v64 << 30) - 0x500000000;
              v717 = *(int *)((char *)*a4 + (v716 >> 30));
              if (v717 >= 1)
              {
                v718 = v716 >> 29;
                v719 = *(uint64_t *)((char *)*a5 + v718);
                v720 = *(_QWORD *)(*a6 + v718);
                do
                {
                  v61 += v719;
                  v62 += v720;
                  --v717;
                }
                while (v717);
              }
              break;
            default:
              LODWORD(v661) = 1;
              v662 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v661 = a4[1][v662++] * (uint64_t)(int)v661;
              while (v662 * 4);
              if (v63[6])
              {
                result = 0;
                v1442 = *a8;
                v1454 = *a7;
                v1467 = v661;
                do
                {
                  v663 = *a4;
                  v664 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v665 = (v664 - 1);
                  v1483 = v63;
                  v1516 = result;
                  v666 = 0;
                  if ((int)v664 - 1 >= 0)
                  {
                    v667 = *a5;
                    do
                    {
                      v668 = ldiv((int)result, v663[v665]);
                      LODWORD(result) = v668.quot;
                      v666 += v667[v665--] * v668.rem;
                    }
                    while (v665 != -1);
                  }
                  v669 = **v13;
                  v670 = (unint64_t)((*v13)[1] - v669) >> 2;
                  v671 = *v10;
                  v672 = 0;
                  v673 = (v670 - 1);
                  if ((int)v670 - 1 >= 0)
                  {
                    quot = v1516;
                    do
                    {
                      v675 = ldiv(quot, *(int *)(v669 + 4 * v673));
                      quot = v675.quot;
                      v672 += *(_QWORD *)(v671 + 8 * v673--) * v675.rem;
                    }
                    while (v673 != -1);
                  }
                  v63 = v1483;
                  v676 = ((v63[1] - *v63) << 30) - 0x500000000;
                  v677 = *(int *)((char *)v663 + (v676 >> 30));
                  if (v677 >= 1)
                  {
                    v678 = v666 + v1454;
                    v679 = v676 >> 29;
                    v680 = *(uint64_t *)((char *)*a5 + v679);
                    v681 = *(_QWORD *)(v671 + v679);
                    v682 = v672 + v1442;
                    do
                    {
                      v678 += v680;
                      v682 += v681;
                      --v677;
                    }
                    while (v677);
                    v63 = *(_QWORD **)v14;
                  }
                  v10 = a6;
                  result = v1516 + v1467;
                }
                while (v63[6] > (unint64_t)(v1516 + v1467));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v19 = v9[6];
          if (v19)
          {
            v20 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v21 = (_DWORD *)v9[19];
            do
            {
              *v21++ = v20;
              --v19;
            }
            while (v19);
          }
          break;
        case 1:
          v72 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v72)
          {
            v73 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v74 = (_DWORD *)v9[19];
            do
            {
              v75 = *v73++;
              *v74++ = v75;
              --v72;
            }
            while (v72);
          }
          break;
        case 2:
          v76 = *a7;
          v77 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v78 = *a4;
              if (**a4 >= 1)
              {
                v79 = 0;
                v80 = v9[19];
                v81 = **a5;
                v82 = (unsigned __int8 *)(*(_QWORD *)(v77 + 152) + v76);
                do
                {
                  *(_DWORD *)(v80 + 4 * v79) = *v82;
                  v82 += v81;
                  ++v79;
                }
                while (*v78 > (int)v79);
              }
              break;
            case 2:
              v280 = *a4;
              v281 = **a4;
              if (v281 >= 1)
              {
                v282 = 0;
                v283 = 0;
                v284 = *(_QWORD *)(v77 + 152);
                v285 = v9[19];
                v286 = **a5;
                v287 = (*a5)[1];
                v288 = v280[1];
                do
                {
                  if (v288 >= 1)
                  {
                    v289 = 0;
                    do
                    {
                      *(_DWORD *)(v285 + 4 * v283 + 4 * v289) = *(unsigned __int8 *)(v284 + v76);
                      v76 += v287;
                      v288 = v280[1];
                      ++v289;
                    }
                    while ((int)v289 < v288);
                    v281 = *v280;
                    v283 += v289;
                  }
                  result = v288;
                  v76 = v76 + v286 - v287 * v288;
                  ++v282;
                }
                while (v282 < v281);
              }
              break;
            case 3:
              v290 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v291 = 0;
                v292 = 0;
                v293 = *(_QWORD *)(v77 + 152);
                v294 = v9[19];
                v295 = *a5;
                v296 = **a5;
                v297 = (*a5)[1];
                v298 = v290[1];
                do
                {
                  if (v298 >= 1)
                  {
                    v299 = 0;
                    v300 = *a5;
                    v301 = v295[2];
                    v302 = v290[2];
                    do
                    {
                      if (v302 >= 1)
                      {
                        v303 = 0;
                        v304 = v300[2];
                        do
                        {
                          *(_DWORD *)(v294 + 4 * v292 + 4 * v303) = *(unsigned __int8 *)(v293 + v76);
                          v76 += v304;
                          v302 = v290[2];
                          ++v303;
                        }
                        while ((int)v303 < v302);
                        v298 = v290[1];
                        v292 += v303;
                      }
                      v76 = v76 + v297 - v301 * v302;
                      ++v299;
                    }
                    while (v299 < v298);
                    result = *v290;
                  }
                  v76 = v76 + v296 - v297 * v298;
                  ++v291;
                }
                while (v291 < (int)result);
              }
              break;
            case 4:
              v305 = *a4;
              v306 = **a4;
              if (v306 >= 1)
              {
                v307 = 0;
                v308 = 0;
                v309 = *(_QWORD *)(v77 + 152);
                v310 = v9[19];
                v311 = *a5;
                v312 = **a5;
                v313 = (*a5)[1];
                v314 = v305[1];
                do
                {
                  if (v314 >= 1)
                  {
                    v315 = 0;
                    v316 = *a5;
                    v317 = v311[2];
                    v318 = v305[2];
                    do
                    {
                      if (v318 >= 1)
                      {
                        v319 = 0;
                        v320 = *a5;
                        v321 = v316[2];
                        v322 = v316[3];
                        v323 = v305[3];
                        do
                        {
                          if (v323 >= 1)
                          {
                            v324 = 0;
                            v325 = v320[3];
                            do
                            {
                              *(_DWORD *)(v310 + 4 * v308 + 4 * v324) = *(unsigned __int8 *)(v309 + v76);
                              v76 += v325;
                              v323 = v305[3];
                              ++v324;
                            }
                            while ((int)v324 < v323);
                            v318 = v305[2];
                            v308 += v324;
                          }
                          v76 = v76 + v321 - v322 * v323;
                          ++v319;
                        }
                        while (v319 < v318);
                        v314 = v305[1];
                      }
                      v76 = v76 + v313 - v317 * v318;
                      ++v315;
                    }
                    while (v315 < v314);
                    v306 = *v305;
                  }
                  result = v314;
                  v76 = v76 + v312 - v313 * v314;
                  ++v307;
                }
                while (v307 < v306);
              }
              break;
            default:
              v270 = v9[6];
              if (v270)
              {
                v271 = 0;
                v272 = *(_QWORD *)(v77 + 152) + v76;
                v273 = v9[19];
                v274 = *a4;
                v275 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v276 = *a5;
                do
                {
                  v277 = 0;
                  if ((v275 & 0x80000000) == 0)
                  {
                    v278 = v275;
                    LODWORD(result) = v271;
                    do
                    {
                      v279 = ldiv((int)result, v274[v278]);
                      result = v279.quot;
                      v277 += v276[v278--] * v279.rem;
                    }
                    while (v278 != -1);
                  }
                  *(_DWORD *)(v273 + 4 * v271++) = *(unsigned __int8 *)(v272 + v277);
                }
                while (v271 != v270);
              }
              break;
          }
          break;
        case 3:
          v83 = *a7;
          v1369 = *a8;
          v84 = *(_QWORD **)result;
          v85 = v84[1] - *v84;
          switch(v85 >> 2)
          {
            case 1:
              v86 = (v85 << 30) - 0x100000000;
              v87 = *(int *)((char *)*a4 + (v86 >> 30));
              if (v87 >= 1)
              {
                v88 = v86 >> 29;
                v89 = *(uint64_t *)((char *)*a5 + (v86 >> 29));
                v90 = (_DWORD *)(v9[19] + 4 * v1369);
                v91 = (unsigned __int8 *)(v84[19] + v83);
                v92 = 4 * *(_QWORD *)(*a6 + v88);
                do
                {
                  *v90 = *v91;
                  v91 += v89;
                  v90 = (_DWORD *)((char *)v90 + v92);
                  --v87;
                }
                while (v87);
              }
              break;
            case 2:
              v759 = (v85 << 30) - 0x200000000;
              v760 = *a4;
              v761 = *(int *)((char *)*a4 + (v759 >> 30));
              if (v761 >= 1)
              {
                v762 = 0;
                v763 = v759 >> 29;
                v764 = *(uint64_t *)((char *)*a5 + (v759 >> 29));
                v765 = *(_QWORD *)(*a6 + v763);
                v766 = (v85 << 30) - 0x100000000;
                v767 = *(uint64_t *)((char *)*a5 + (v766 >> 29));
                v768 = *(_QWORD *)(*a6 + (v766 >> 29));
                v769 = v766 >> 32;
                v770 = 4 * v1369;
                v771 = 4 * v765;
                v772 = 4 * v768;
                do
                {
                  result = v760[v769];
                  if ((int)result >= 1)
                  {
                    v773 = v84[19];
                    v774 = (_DWORD *)(v9[19] + v770);
                    do
                    {
                      *v774 = *(unsigned __int8 *)(v773 + v83);
                      v774 = (_DWORD *)((char *)v774 + v772);
                      v773 += v767;
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v83 += v764;
                  ++v762;
                  v770 += v771;
                }
                while (v762 != v761);
              }
              break;
            case 3:
              v775 = (v85 << 30) - 0x300000000;
              v776 = *a4;
              v777 = *(int *)((char *)*a4 + (v775 >> 30));
              if (v777 >= 1)
              {
                v778 = 0;
                v779 = *a5;
                v780 = v775 >> 29;
                v781 = *(uint64_t *)((char *)*a5 + (v775 >> 29));
                v782 = v85 << 30;
                v783 = *a6;
                v784 = *(_QWORD *)(*a6 + v780);
                v785 = (v782 - 0x200000000) >> 32;
                v786 = (v782 - 0x200000000) >> 29;
                v787 = v782 - 0x100000000;
                v788 = *(uint64_t *)((char *)*a5 + v786);
                v789 = *(_QWORD *)(*a6 + v786);
                v790 = v787 >> 32;
                v791 = 4 * v1369;
                result = 4 * v784;
                v792 = 4 * v789;
                do
                {
                  v793 = v776[v785];
                  if (v793 >= 1)
                  {
                    v794 = 0;
                    v795 = v779[v790];
                    v796 = *v13;
                    v797 = 4 * *(_QWORD *)(v783 + 8 * v790);
                    v798 = v791;
                    v799 = v83;
                    do
                    {
                      v800 = v776[v790];
                      if (v800 >= 1)
                      {
                        v801 = v84[19];
                        v802 = (_DWORD *)(v796[19] + v798);
                        do
                        {
                          *v802 = *(unsigned __int8 *)(v801 + v799);
                          v802 = (_DWORD *)((char *)v802 + v797);
                          v801 += v795;
                          --v800;
                        }
                        while (v800);
                      }
                      v799 += v788;
                      ++v794;
                      v798 += v792;
                    }
                    while (v794 != v793);
                  }
                  v83 += v781;
                  ++v778;
                  v791 += result;
                }
                while (v778 != v777);
              }
              break;
            case 4:
              v803 = (v85 << 30) - 0x400000000;
              v804 = *a4;
              v1518 = *(int *)((char *)*a4 + (v803 >> 30));
              if (v1518 >= 1)
              {
                v805 = 0;
                v806 = *a5;
                v807 = v803 >> 29;
                v1485 = *(uint64_t *)((char *)*a5 + v807);
                v808 = *a6;
                v809 = (v85 << 30) - 0x300000000;
                v810 = (v85 << 30) - 0x200000000;
                v811 = (v85 << 30) - 0x100000000;
                v812 = *(uint64_t *)((char *)*a5 + (v809 >> 29));
                v813 = v810 >> 32;
                v814 = v811 >> 32;
                result = 4 * v1369;
                v1469 = 4 * *(_QWORD *)(*a6 + v807);
                v815 = 4 * *(_QWORD *)(*a6 + (v809 >> 29));
                do
                {
                  v816 = v83;
                  v817 = v804[v809 >> 32];
                  if (v817 >= 1)
                  {
                    v818 = 0;
                    v819 = v806[v813];
                    v820 = 4 * *(_QWORD *)(v808 + 8 * v813);
                    v821 = result;
                    v822 = v83;
                    do
                    {
                      v823 = v804[v813];
                      if (v823 >= 1)
                      {
                        v824 = 0;
                        v825 = v806[v814];
                        v826 = *v13;
                        v827 = 4 * *(_QWORD *)(v808 + 8 * v814);
                        v828 = v821;
                        v829 = v822;
                        do
                        {
                          v830 = v804[v814];
                          if (v830 >= 1)
                          {
                            v831 = v84[19];
                            v832 = (_DWORD *)(v826[19] + v828);
                            do
                            {
                              *v832 = *(unsigned __int8 *)(v831 + v829);
                              v832 = (_DWORD *)((char *)v832 + v827);
                              v831 += v825;
                              --v830;
                            }
                            while (v830);
                          }
                          v829 += v819;
                          ++v824;
                          v828 += v820;
                        }
                        while (v824 != v823);
                      }
                      v822 += v812;
                      ++v818;
                      v821 += v815;
                    }
                    while (v818 != v817);
                  }
                  v83 = v816 + v1485;
                  ++v805;
                  result += v1469;
                }
                while (v805 != v1518);
              }
              break;
            case 5:
              v833 = (v85 << 30) - 0x500000000;
              v834 = *a4;
              v1433 = *(int *)((char *)*a4 + (v833 >> 30));
              if (v1433 >= 1)
              {
                v1444 = 0;
                v835 = *a5;
                v836 = v833 >> 29;
                v1423 = *(uint64_t *)((char *)*a5 + v836);
                v837 = v85 << 30;
                v838 = *a6;
                v1413 = (v837 - 0x400000000) >> 32;
                v839 = (v837 - 0x400000000) >> 29;
                v1486 = *(uint64_t *)((char *)*a5 + v839);
                v1502 = (v837 - 0x300000000) >> 32;
                v840 = (v837 - 0x200000000) >> 32;
                result = (v837 - 0x100000000) >> 32;
                v1456 = 4 * v1369;
                v1404 = 4 * *(_QWORD *)(*a6 + v836);
                v1470 = 4 * *(_QWORD *)(*a6 + v839);
                do
                {
                  v1382 = v83;
                  v1519 = v834[v1413];
                  if (v1519 >= 1)
                  {
                    v841 = 0;
                    v842 = v835[v1502];
                    v843 = 4 * *(_QWORD *)(v838 + 8 * v1502);
                    v844 = v1456;
                    v845 = v83;
                    do
                    {
                      v846 = v834[v1502];
                      if (v846 >= 1)
                      {
                        v847 = 0;
                        v848 = v835[v840];
                        v849 = 4 * *(_QWORD *)(v838 + 8 * v840);
                        v850 = v844;
                        v851 = v845;
                        do
                        {
                          v852 = v834[v840];
                          if (v852 >= 1)
                          {
                            v853 = 0;
                            v854 = v835[result];
                            v855 = *v13;
                            v856 = 4 * *(_QWORD *)(v838 + 8 * result);
                            v857 = v850;
                            v858 = v851;
                            do
                            {
                              v859 = v834[result];
                              if (v859 >= 1)
                              {
                                v860 = v84[19];
                                v861 = (_DWORD *)(v855[19] + v857);
                                do
                                {
                                  *v861 = *(unsigned __int8 *)(v860 + v858);
                                  v861 = (_DWORD *)((char *)v861 + v856);
                                  v860 += v854;
                                  --v859;
                                }
                                while (v859);
                              }
                              v858 += v848;
                              ++v853;
                              v857 += v849;
                            }
                            while (v853 != v852);
                          }
                          v851 += v842;
                          ++v847;
                          v850 += v843;
                        }
                        while (v847 != v846);
                      }
                      v845 += v1486;
                      ++v841;
                      v844 += v1470;
                    }
                    while (v841 != v1519);
                  }
                  v83 = v1382 + v1423;
                  v1456 += v1404;
                  ++v1444;
                }
                while (v1444 != v1433);
              }
              break;
            default:
              v721 = (char *)a4[1];
              LODWORD(v722) = 1;
              v723 = -20;
              do
              {
                v722 = *(int *)&v721[v723] * (uint64_t)(int)v722;
                v723 += 4;
              }
              while (v723);
              v1365 = v84[6];
              if (v1365)
              {
                result = 0;
                v724 = *a4;
                v1355 = ((unint64_t)(v721 - (char *)*a4) >> 2) - 1;
                v725 = *a5;
                v1403 = *v9;
                v1350 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                v726 = (v85 << 30) - 0x500000000;
                v727 = *a6;
                v1397 = *(uint64_t *)((char *)*a5 + (v726 >> 29));
                v1346 = v726 >> 32;
                v1412 = ((v85 << 30) - 0x400000000) >> 32;
                v1501 = ((v85 << 30) - 0x300000000) >> 32;
                v728 = ((v85 << 30) - 0x200000000) >> 32;
                v729 = ((v85 << 30) - 0x100000000) >> 32;
                v1381 = *a7;
                v1391 = 4 * *(_QWORD *)(*a6 + (v726 >> 29));
                v1360 = v722;
                do
                {
                  v730 = v1355;
                  v1376 = result;
                  v731 = 0;
                  if ((v1355 & 0x80000000) == 0)
                  {
                    do
                    {
                      v732 = ldiv((int)result, v724[v730]);
                      LODWORD(result) = v732.quot;
                      v731 += v725[v730--] * v732.rem;
                    }
                    while (v730 != -1);
                  }
                  v733 = v1350;
                  if ((v1350 & 0x80000000) != 0)
                  {
                    v734 = 0;
                  }
                  else
                  {
                    v734 = 0;
                    v735 = v1376;
                    do
                    {
                      v736 = ldiv(v735, *(int *)(v1403 + 4 * v733));
                      v735 = v736.quot;
                      v734 += *(_QWORD *)(v727 + 8 * v733--) * v736.rem;
                    }
                    while (v733 != -1);
                  }
                  v1422 = v724[v1346];
                  if (v1422 >= 1)
                  {
                    v737 = 0;
                    v1484 = v725[v1412];
                    v1455 = v731 + v1381;
                    v1443 = 4 * (v734 + v1369);
                    v1468 = 4 * *(_QWORD *)(v727 + 8 * v1412);
                    do
                    {
                      v1432 = v737;
                      v1517 = v724[v1412];
                      if (v1517 >= 1)
                      {
                        v738 = 0;
                        v739 = v725[v1501];
                        v740 = 4 * *(_QWORD *)(v727 + 8 * v1501);
                        v742 = v1443;
                        v741 = v1455;
                        do
                        {
                          v743 = v724[v1501];
                          if (v743 >= 1)
                          {
                            v744 = 0;
                            v745 = v725[v728];
                            v746 = 4 * *(_QWORD *)(v727 + 8 * v728);
                            v747 = v742;
                            v748 = v741;
                            do
                            {
                              v749 = v724[v728];
                              if (v749 >= 1)
                              {
                                v750 = 0;
                                v751 = v725[v729];
                                v752 = *v13;
                                v753 = 4 * *(_QWORD *)(v727 + 8 * v729);
                                v754 = v747;
                                v755 = v748;
                                do
                                {
                                  v756 = v724[v729];
                                  if (v756 >= 1)
                                  {
                                    v757 = v84[19];
                                    v758 = (_DWORD *)(v752[19] + v754);
                                    do
                                    {
                                      *v758 = *(unsigned __int8 *)(v757 + v755);
                                      v758 = (_DWORD *)((char *)v758 + v753);
                                      v757 += v751;
                                      --v756;
                                    }
                                    while (v756);
                                  }
                                  v755 += v745;
                                  ++v750;
                                  v754 += v746;
                                }
                                while (v750 != v749);
                              }
                              v748 += v739;
                              ++v744;
                              v747 += v740;
                            }
                            while (v744 != v743);
                          }
                          v741 += v1484;
                          ++v738;
                          v742 += v1468;
                        }
                        while (v738 != v1517);
                      }
                      v1455 += v1397;
                      v737 = v1432 + 1;
                      v1443 += v1391;
                    }
                    while (v1432 + 1 != v1422);
                  }
                  result = v1376 + v1360;
                }
                while (v1365 > v1376 + v1360);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v9[6])
          {
            v22 = 0;
            v23 = **(_BYTE **)(*(_QWORD *)result + 152);
            v24 = v9[19];
            do
              *(_BYTE *)(v24 + v22++) = v23;
            while (*(_QWORD *)(*(_QWORD *)a2 + 48) > v22);
          }
          break;
        case 1:
LABEL_35:
          v34 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v34)
            result = (uint64_t)memmove((void *)v9[19], *(const void **)(*(_QWORD *)result + 152), v34);
          break;
        case 2:
          v93 = *a7;
          v94 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v95 = 0;
                v96 = *(_QWORD *)(v94 + 152);
                v97 = v9[19];
                do
                {
                  *(_BYTE *)(v97 + v95) = *(_BYTE *)(v96 + v93);
                  v93 += **a5;
                  ++v95;
                }
                while (**a4 > (int)v95);
              }
              break;
            case 2:
              v335 = *a4;
              v336 = **a4;
              if (v336 >= 1)
              {
                v337 = 0;
                v338 = 0;
                v339 = *(_QWORD *)(v94 + 152);
                v340 = v9[19];
                do
                {
                  v341 = v335[1];
                  if (v341 < 1)
                  {
                    v342 = *a5;
                    v343 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v340 + v338 + result) = *(_BYTE *)(v339 + v93);
                      v342 = *a5;
                      v343 = (*a5)[1];
                      v93 += v343;
                      v335 = *a4;
                      v341 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v341);
                    v336 = *v335;
                    v338 += result;
                  }
                  v93 = *v342 + v93 - v343 * v341;
                  ++v337;
                }
                while (v337 < v336);
              }
              break;
            case 3:
              v344 = *a4;
              v345 = **a4;
              if (v345 >= 1)
              {
                v346 = 0;
                v347 = 0;
                v348 = *(_QWORD *)(v94 + 152);
                v349 = v9[19];
                do
                {
                  v350 = v344[1];
                  if (v350 < 1)
                  {
                    v354 = *a5;
                    v355 = (*a5)[1];
                  }
                  else
                  {
                    for (m = 0; m < v350; ++m)
                    {
                      v352 = v344[2];
                      if (v352 < 1)
                      {
                        v354 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v353 = 0;
                        do
                        {
                          *(_BYTE *)(v349 + v347 + v353) = *(_BYTE *)(v348 + v93);
                          v354 = *a5;
                          result = (*a5)[2];
                          v93 += result;
                          v344 = *a4;
                          v352 = (*a4)[2];
                          ++v353;
                        }
                        while ((int)v353 < v352);
                        v347 += v353;
                      }
                      v355 = v354[1];
                      v93 = v355 + v93 - result * v352;
                      v350 = v344[1];
                    }
                    v345 = *v344;
                  }
                  v93 = *v354 + v93 - v355 * v350;
                  ++v346;
                }
                while (v346 < v345);
              }
              break;
            case 4:
              v356 = *a4;
              v357 = **a4;
              if (v357 >= 1)
              {
                v358 = 0;
                v359 = 0;
                v360 = *(_QWORD *)(v94 + 152);
                v361 = v9[19];
                do
                {
                  v362 = v356[1];
                  if (v362 < 1)
                  {
                    v368 = *a5;
                    v370 = (*a5)[1];
                  }
                  else
                  {
                    for (n = 0; n < v362; ++n)
                    {
                      v364 = v356[2];
                      if (v364 < 1)
                      {
                        v368 = *a5;
                        v369 = (*a5)[2];
                      }
                      else
                      {
                        for (ii = 0; ii < v364; ++ii)
                        {
                          v366 = v356[3];
                          if (v366 < 1)
                          {
                            v368 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v367 = 0;
                            do
                            {
                              *(_BYTE *)(v361 + v359 + v367) = *(_BYTE *)(v360 + v93);
                              v368 = *a5;
                              result = (*a5)[3];
                              v93 += result;
                              v356 = *a4;
                              v366 = (*a4)[3];
                              ++v367;
                            }
                            while ((int)v367 < v366);
                            v359 += v367;
                          }
                          v369 = v368[2];
                          v93 = v369 + v93 - result * v366;
                          v364 = v356[2];
                        }
                      }
                      v370 = v368[1];
                      v93 = v370 + v93 - v369 * v364;
                      v362 = v356[1];
                    }
                    v357 = *v356;
                  }
                  v93 = *v368 + v93 - v370 * v362;
                  ++v358;
                }
                while (v358 < v357);
              }
              break;
            default:
              if (v9[6])
              {
                v326 = 0;
                v327 = *(_QWORD *)(v94 + 152) + v93;
                v328 = v9[19];
                do
                {
                  v329 = *a4;
                  v330 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v331 = 0;
                  v332 = (v330 - 1);
                  if ((int)v330 - 1 >= 0)
                  {
                    v333 = *a5;
                    LODWORD(result) = v326;
                    do
                    {
                      v334 = ldiv((int)result, v329[v332]);
                      result = v334.quot;
                      v331 += v333[v332--] * v334.rem;
                    }
                    while (v332 != -1);
                  }
                  *(_BYTE *)(v328 + v326++) = *(_BYTE *)(v327 + v331);
                }
                while (v326 < (*v13)[6]);
              }
              break;
          }
          break;
        case 3:
          v98 = *a7;
          v99 = *a8;
          v100 = *(_QWORD **)result;
          v101 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v101 >> 2)
          {
            case 1:
              v102 = (v101 << 30) - 0x100000000;
              v103 = *(int *)((char *)*a4 + (v102 >> 30));
              if (v103 >= 1)
              {
                v104 = v102 >> 29;
                v105 = *(uint64_t *)((char *)*a5 + (v102 >> 29));
                v106 = *(_QWORD *)(*a6 + v104);
                v107 = (_BYTE *)(v9[19] + v99);
                v108 = (_BYTE *)(v100[19] + v98);
                do
                {
                  *v107 = *v108;
                  v108 += v105;
                  v107 += v106;
                  --v103;
                }
                while (v103);
              }
              break;
            case 2:
              v884 = (v101 << 30) - 0x200000000;
              v885 = *(int *)((char *)*a4 + (v884 >> 30));
              if (v885 >= 1)
              {
                v886 = 0;
                v887 = v884 >> 29;
                v888 = *(uint64_t *)((char *)*a5 + (v884 >> 29));
                v889 = *(_QWORD *)(*a6 + v887);
                do
                {
                  v890 = ((*(_QWORD *)(*(_QWORD *)v14 + 8) - **(_QWORD **)v14) << 30) - 0x100000000;
                  v891 = *(int *)((char *)*a4 + (v890 >> 30));
                  if (v891 >= 1)
                  {
                    v892 = v890 >> 29;
                    v893 = *(uint64_t *)((char *)*a5 + (v890 >> 29));
                    v894 = *(_QWORD *)(*a6 + v892);
                    v895 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                    v896 = *(_QWORD *)(*(_QWORD *)v14 + 152);
                    do
                    {
                      result = *(unsigned __int8 *)(v896 + v98);
                      *(_BYTE *)(v895 + v99) = result;
                      v895 += v894;
                      v896 += v893;
                      --v891;
                    }
                    while (v891);
                  }
                  v98 += v888;
                  v99 += v889;
                  ++v886;
                }
                while (v886 != v885);
              }
              break;
            case 3:
              v897 = (v101 << 30) - 0x300000000;
              v898 = *(int *)((char *)*a4 + (v897 >> 30));
              if (v898 >= 1)
              {
                v899 = 0;
                v900 = v897 >> 29;
                v901 = *(uint64_t *)((char *)*a5 + (v897 >> 29));
                v902 = *(_QWORD *)(*a6 + v900);
                do
                {
                  v903 = ((*(_QWORD *)(*(_QWORD *)v14 + 8) - **(_QWORD **)v14) << 30) - 0x200000000;
                  v904 = *(int *)((char *)*a4 + (v903 >> 30));
                  if (v904 >= 1)
                  {
                    v905 = 0;
                    v906 = v903 >> 29;
                    v907 = *(uint64_t *)((char *)*a5 + (v903 >> 29));
                    v908 = *(_QWORD *)(*v10 + v906);
                    result = v98;
                    v909 = v99;
                    do
                    {
                      v910 = ((*(_QWORD *)(*(_QWORD *)v14 + 8) - **(_QWORD **)v14) << 30) - 0x100000000;
                      v911 = *(int *)((char *)*a4 + (v910 >> 30));
                      if (v911 >= 1)
                      {
                        v912 = v910 >> 29;
                        v913 = *(uint64_t *)((char *)*a5 + (v910 >> 29));
                        v914 = *(_QWORD *)(*v10 + v912);
                        v915 = (*v13)[19];
                        v916 = *(_QWORD *)(*(_QWORD *)v14 + 152);
                        do
                        {
                          *(_BYTE *)(v915 + v909) = *(_BYTE *)(v916 + result);
                          v915 += v914;
                          v916 += v913;
                          --v911;
                        }
                        while (v911);
                      }
                      result += v907;
                      v909 += v908;
                      ++v905;
                    }
                    while (v905 != v904);
                  }
                  v98 += v901;
                  v99 += v902;
                  ++v899;
                }
                while (v899 != v898);
              }
              break;
            case 4:
LABEL_552:
              break;
            case 5:
              v917 = (v101 << 30) - 0x500000000;
              v918 = *(int *)((char *)*a4 + (v917 >> 30));
              if (v918 >= 1)
              {
                v919 = v917 >> 29;
                v920 = *(uint64_t *)((char *)*a5 + v919);
                v921 = *(_QWORD *)(*a6 + v919);
                do
                {
                  v98 += v920;
                  v99 += v921;
                  --v918;
                }
                while (v918);
              }
              break;
            default:
              LODWORD(v862) = 1;
              v863 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v862 = a4[1][v863++] * (uint64_t)(int)v862;
              while (v863 * 4);
              if (v100[6])
              {
                result = 0;
                v1445 = *a8;
                v1457 = *a7;
                v1471 = v862;
                do
                {
                  v864 = *a4;
                  v865 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v866 = (v865 - 1);
                  v1487 = v100;
                  v1520 = result;
                  v867 = 0;
                  if ((int)v865 - 1 >= 0)
                  {
                    v868 = *a5;
                    do
                    {
                      v869 = ldiv((int)result, v864[v866]);
                      LODWORD(result) = v869.quot;
                      v867 += v868[v866--] * v869.rem;
                    }
                    while (v866 != -1);
                  }
                  v870 = **v13;
                  v871 = (unint64_t)((*v13)[1] - v870) >> 2;
                  v872 = *v10;
                  v873 = 0;
                  v874 = (v871 - 1);
                  if ((int)v871 - 1 >= 0)
                  {
                    v875 = v1520;
                    do
                    {
                      v876 = ldiv(v875, *(int *)(v870 + 4 * v874));
                      v875 = v876.quot;
                      v873 += *(_QWORD *)(v872 + 8 * v874--) * v876.rem;
                    }
                    while (v874 != -1);
                  }
                  v100 = v1487;
                  v877 = ((v100[1] - *v100) << 30) - 0x500000000;
                  v878 = *(int *)((char *)v864 + (v877 >> 30));
                  if (v878 >= 1)
                  {
                    v879 = v867 + v1457;
                    v880 = v877 >> 29;
                    v881 = *(uint64_t *)((char *)*a5 + v880);
                    v882 = *(_QWORD *)(v872 + v880);
                    v883 = v873 + v1445;
                    do
                    {
                      v879 += v881;
                      v883 += v882;
                      --v878;
                    }
                    while (v878);
                    v100 = *(_QWORD **)v14;
                  }
                  v10 = a6;
                  result = v1520 + v1471;
                }
                while (v100[6] > (unint64_t)(v1520 + v1471));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v25 = v9[6];
          if (v25)
          {
            v26 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v27 = (_DWORD *)v9[19];
            do
            {
              *v27++ = v26;
              --v25;
            }
            while (v25);
          }
          break;
        case 1:
          v109 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v109)
          {
            v110 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v111 = (_DWORD *)v9[19];
            do
            {
              v112 = *v110++;
              *v111++ = v112;
              --v109;
            }
            while (v109);
          }
          break;
        case 2:
          v113 = *a7;
          v114 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v115 = *a4;
              if (**a4 >= 1)
              {
                v116 = 0;
                v117 = v9[19];
                v118 = **a5;
                v119 = (unsigned __int8 *)(*(_QWORD *)(v114 + 152) + v113);
                do
                {
                  *(_DWORD *)(v117 + 4 * v116) = *v119;
                  v119 += v118;
                  ++v116;
                }
                while (*v115 > (int)v116);
              }
              break;
            case 2:
              v381 = *a4;
              v382 = **a4;
              if (v382 >= 1)
              {
                v383 = 0;
                v384 = 0;
                v385 = *(_QWORD *)(v114 + 152);
                v386 = v9[19];
                v387 = **a5;
                v388 = (*a5)[1];
                v389 = v381[1];
                do
                {
                  if (v389 >= 1)
                  {
                    v390 = 0;
                    do
                    {
                      *(_DWORD *)(v386 + 4 * v384 + 4 * v390) = *(unsigned __int8 *)(v385 + v113);
                      v113 += v388;
                      v389 = v381[1];
                      ++v390;
                    }
                    while ((int)v390 < v389);
                    v382 = *v381;
                    v384 += v390;
                  }
                  result = v389;
                  v113 = v113 + v387 - v388 * v389;
                  ++v383;
                }
                while (v383 < v382);
              }
              break;
            case 3:
              v391 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v392 = 0;
                v393 = 0;
                v394 = *(_QWORD *)(v114 + 152);
                v395 = v9[19];
                v396 = *a5;
                v397 = **a5;
                v398 = (*a5)[1];
                v399 = v391[1];
                do
                {
                  if (v399 >= 1)
                  {
                    v400 = 0;
                    v401 = *a5;
                    v402 = v396[2];
                    v403 = v391[2];
                    do
                    {
                      if (v403 >= 1)
                      {
                        v404 = 0;
                        v405 = v401[2];
                        do
                        {
                          *(_DWORD *)(v395 + 4 * v393 + 4 * v404) = *(unsigned __int8 *)(v394 + v113);
                          v113 += v405;
                          v403 = v391[2];
                          ++v404;
                        }
                        while ((int)v404 < v403);
                        v399 = v391[1];
                        v393 += v404;
                      }
                      v113 = v113 + v398 - v402 * v403;
                      ++v400;
                    }
                    while (v400 < v399);
                    result = *v391;
                  }
                  v113 = v113 + v397 - v398 * v399;
                  ++v392;
                }
                while (v392 < (int)result);
              }
              break;
            case 4:
              v406 = *a4;
              v407 = **a4;
              if (v407 >= 1)
              {
                v408 = 0;
                v409 = 0;
                v410 = *(_QWORD *)(v114 + 152);
                v411 = v9[19];
                v412 = *a5;
                v413 = **a5;
                v414 = (*a5)[1];
                v415 = v406[1];
                do
                {
                  if (v415 >= 1)
                  {
                    v416 = 0;
                    v417 = *a5;
                    v418 = v412[2];
                    v419 = v406[2];
                    do
                    {
                      if (v419 >= 1)
                      {
                        v420 = 0;
                        v421 = *a5;
                        v422 = v417[2];
                        v423 = v417[3];
                        v424 = v406[3];
                        do
                        {
                          if (v424 >= 1)
                          {
                            v425 = 0;
                            v426 = v421[3];
                            do
                            {
                              *(_DWORD *)(v411 + 4 * v409 + 4 * v425) = *(unsigned __int8 *)(v410 + v113);
                              v113 += v426;
                              v424 = v406[3];
                              ++v425;
                            }
                            while ((int)v425 < v424);
                            v419 = v406[2];
                            v409 += v425;
                          }
                          v113 = v113 + v422 - v423 * v424;
                          ++v420;
                        }
                        while (v420 < v419);
                        v415 = v406[1];
                      }
                      v113 = v113 + v414 - v418 * v419;
                      ++v416;
                    }
                    while (v416 < v415);
                    v407 = *v406;
                  }
                  result = v415;
                  v113 = v113 + v413 - v414 * v415;
                  ++v408;
                }
                while (v408 < v407);
              }
              break;
            default:
              v371 = v9[6];
              if (v371)
              {
                v372 = 0;
                v373 = *(_QWORD *)(v114 + 152) + v113;
                v374 = v9[19];
                v375 = *a4;
                v376 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v377 = *a5;
                do
                {
                  v378 = 0;
                  if ((v376 & 0x80000000) == 0)
                  {
                    v379 = v376;
                    LODWORD(result) = v372;
                    do
                    {
                      v380 = ldiv((int)result, v375[v379]);
                      result = v380.quot;
                      v378 += v377[v379--] * v380.rem;
                    }
                    while (v379 != -1);
                  }
                  *(_DWORD *)(v374 + 4 * v372++) = *(unsigned __int8 *)(v373 + v378);
                }
                while (v372 != v371);
              }
              break;
          }
          break;
        case 3:
          v120 = *a7;
          v1370 = *a8;
          v121 = *(_QWORD **)result;
          v122 = v121[1] - *v121;
          switch(v122 >> 2)
          {
            case 1:
              v123 = (v122 << 30) - 0x100000000;
              v124 = *(int *)((char *)*a4 + (v123 >> 30));
              if (v124 >= 1)
              {
                v125 = v123 >> 29;
                v126 = *(uint64_t *)((char *)*a5 + (v123 >> 29));
                v127 = (_DWORD *)(v9[19] + 4 * v1370);
                v128 = (unsigned __int8 *)(v121[19] + v120);
                v129 = 4 * *(_QWORD *)(*a6 + v125);
                do
                {
                  *v127 = *v128;
                  v128 += v126;
                  v127 = (_DWORD *)((char *)v127 + v129);
                  --v124;
                }
                while (v124);
              }
              break;
            case 2:
              v960 = (v122 << 30) - 0x200000000;
              v961 = *a4;
              v962 = *(int *)((char *)*a4 + (v960 >> 30));
              if (v962 >= 1)
              {
                v963 = 0;
                v964 = v960 >> 29;
                v965 = *(uint64_t *)((char *)*a5 + (v960 >> 29));
                v966 = *(_QWORD *)(*a6 + v964);
                v967 = (v122 << 30) - 0x100000000;
                v968 = *(uint64_t *)((char *)*a5 + (v967 >> 29));
                v969 = *(_QWORD *)(*a6 + (v967 >> 29));
                v970 = v967 >> 32;
                v971 = 4 * v1370;
                v972 = 4 * v966;
                v973 = 4 * v969;
                do
                {
                  result = v961[v970];
                  if ((int)result >= 1)
                  {
                    v974 = v121[19];
                    v975 = (_DWORD *)(v9[19] + v971);
                    do
                    {
                      *v975 = *(unsigned __int8 *)(v974 + v120);
                      v975 = (_DWORD *)((char *)v975 + v973);
                      v974 += v968;
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v120 += v965;
                  ++v963;
                  v971 += v972;
                }
                while (v963 != v962);
              }
              break;
            case 3:
              v976 = (v122 << 30) - 0x300000000;
              v977 = *a4;
              v978 = *(int *)((char *)*a4 + (v976 >> 30));
              if (v978 >= 1)
              {
                v979 = 0;
                v980 = *a5;
                v981 = v976 >> 29;
                v982 = *(uint64_t *)((char *)*a5 + (v976 >> 29));
                v983 = v122 << 30;
                v984 = *a6;
                v985 = *(_QWORD *)(*a6 + v981);
                v986 = (v983 - 0x200000000) >> 32;
                v987 = (v983 - 0x200000000) >> 29;
                v988 = v983 - 0x100000000;
                v989 = *(uint64_t *)((char *)*a5 + v987);
                v990 = *(_QWORD *)(*a6 + v987);
                v991 = v988 >> 32;
                v992 = 4 * v1370;
                result = 4 * v985;
                v993 = 4 * v990;
                do
                {
                  v994 = v977[v986];
                  if (v994 >= 1)
                  {
                    v995 = 0;
                    v996 = v980[v991];
                    v997 = *v13;
                    v998 = 4 * *(_QWORD *)(v984 + 8 * v991);
                    v999 = v992;
                    v1000 = v120;
                    do
                    {
                      v1001 = v977[v991];
                      if (v1001 >= 1)
                      {
                        v1002 = v121[19];
                        v1003 = (_DWORD *)(v997[19] + v999);
                        do
                        {
                          *v1003 = *(unsigned __int8 *)(v1002 + v1000);
                          v1003 = (_DWORD *)((char *)v1003 + v998);
                          v1002 += v996;
                          --v1001;
                        }
                        while (v1001);
                      }
                      v1000 += v989;
                      ++v995;
                      v999 += v993;
                    }
                    while (v995 != v994);
                  }
                  v120 += v982;
                  ++v979;
                  v992 += result;
                }
                while (v979 != v978);
              }
              break;
            case 4:
              v1004 = (v122 << 30) - 0x400000000;
              v1005 = *a4;
              v1522 = *(int *)((char *)*a4 + (v1004 >> 30));
              if (v1522 >= 1)
              {
                v1006 = 0;
                v1007 = *a5;
                v1008 = v1004 >> 29;
                v1489 = *(uint64_t *)((char *)*a5 + v1008);
                v1009 = *a6;
                v1010 = (v122 << 30) - 0x300000000;
                v1011 = (v122 << 30) - 0x200000000;
                v1012 = (v122 << 30) - 0x100000000;
                v1013 = *(uint64_t *)((char *)*a5 + (v1010 >> 29));
                v1014 = v1011 >> 32;
                v1015 = v1012 >> 32;
                result = 4 * v1370;
                v1473 = 4 * *(_QWORD *)(*a6 + v1008);
                v1016 = 4 * *(_QWORD *)(*a6 + (v1010 >> 29));
                do
                {
                  v1017 = v120;
                  v1018 = v1005[v1010 >> 32];
                  if (v1018 >= 1)
                  {
                    v1019 = 0;
                    v1020 = v1007[v1014];
                    v1021 = 4 * *(_QWORD *)(v1009 + 8 * v1014);
                    v1022 = result;
                    v1023 = v120;
                    do
                    {
                      v1024 = v1005[v1014];
                      if (v1024 >= 1)
                      {
                        v1025 = 0;
                        v1026 = v1007[v1015];
                        v1027 = *v13;
                        v1028 = 4 * *(_QWORD *)(v1009 + 8 * v1015);
                        v1029 = v1022;
                        v1030 = v1023;
                        do
                        {
                          v1031 = v1005[v1015];
                          if (v1031 >= 1)
                          {
                            v1032 = v121[19];
                            v1033 = (_DWORD *)(v1027[19] + v1029);
                            do
                            {
                              *v1033 = *(unsigned __int8 *)(v1032 + v1030);
                              v1033 = (_DWORD *)((char *)v1033 + v1028);
                              v1032 += v1026;
                              --v1031;
                            }
                            while (v1031);
                          }
                          v1030 += v1020;
                          ++v1025;
                          v1029 += v1021;
                        }
                        while (v1025 != v1024);
                      }
                      v1023 += v1013;
                      ++v1019;
                      v1022 += v1016;
                    }
                    while (v1019 != v1018);
                  }
                  v120 = v1017 + v1489;
                  ++v1006;
                  result += v1473;
                }
                while (v1006 != v1522);
              }
              break;
            case 5:
              v1034 = (v122 << 30) - 0x500000000;
              v1035 = *a4;
              v1435 = *(int *)((char *)*a4 + (v1034 >> 30));
              if (v1435 >= 1)
              {
                v1447 = 0;
                v1036 = *a5;
                v1037 = v1034 >> 29;
                v1425 = *(uint64_t *)((char *)*a5 + v1037);
                v1038 = v122 << 30;
                v1039 = *a6;
                v1415 = (v1038 - 0x400000000) >> 32;
                v1040 = (v1038 - 0x400000000) >> 29;
                v1490 = *(uint64_t *)((char *)*a5 + v1040);
                v1505 = (v1038 - 0x300000000) >> 32;
                v1041 = (v1038 - 0x200000000) >> 32;
                result = (v1038 - 0x100000000) >> 32;
                v1459 = 4 * v1370;
                v1406 = 4 * *(_QWORD *)(*a6 + v1037);
                v1474 = 4 * *(_QWORD *)(*a6 + v1040);
                do
                {
                  v1384 = v120;
                  v1523 = v1035[v1415];
                  if (v1523 >= 1)
                  {
                    v1042 = 0;
                    v1043 = v1036[v1505];
                    v1044 = 4 * *(_QWORD *)(v1039 + 8 * v1505);
                    v1045 = v1459;
                    v1046 = v120;
                    do
                    {
                      v1047 = v1035[v1505];
                      if (v1047 >= 1)
                      {
                        v1048 = 0;
                        v1049 = v1036[v1041];
                        v1050 = 4 * *(_QWORD *)(v1039 + 8 * v1041);
                        v1051 = v1045;
                        v1052 = v1046;
                        do
                        {
                          v1053 = v1035[v1041];
                          if (v1053 >= 1)
                          {
                            v1054 = 0;
                            v1055 = v1036[result];
                            v1056 = *v13;
                            v1057 = 4 * *(_QWORD *)(v1039 + 8 * result);
                            v1058 = v1051;
                            v1059 = v1052;
                            do
                            {
                              v1060 = v1035[result];
                              if (v1060 >= 1)
                              {
                                v1061 = v121[19];
                                v1062 = (_DWORD *)(v1056[19] + v1058);
                                do
                                {
                                  *v1062 = *(unsigned __int8 *)(v1061 + v1059);
                                  v1062 = (_DWORD *)((char *)v1062 + v1057);
                                  v1061 += v1055;
                                  --v1060;
                                }
                                while (v1060);
                              }
                              v1059 += v1049;
                              ++v1054;
                              v1058 += v1050;
                            }
                            while (v1054 != v1053);
                          }
                          v1052 += v1043;
                          ++v1048;
                          v1051 += v1044;
                        }
                        while (v1048 != v1047);
                      }
                      v1046 += v1490;
                      ++v1042;
                      v1045 += v1474;
                    }
                    while (v1042 != v1523);
                  }
                  v120 = v1384 + v1425;
                  v1459 += v1406;
                  ++v1447;
                }
                while (v1447 != v1435);
              }
              break;
            default:
              v922 = (char *)a4[1];
              LODWORD(v923) = 1;
              v924 = -20;
              do
              {
                v923 = *(int *)&v922[v924] * (uint64_t)(int)v923;
                v924 += 4;
              }
              while (v924);
              v1366 = v121[6];
              if (v1366)
              {
                result = 0;
                v925 = *a4;
                v1356 = ((unint64_t)(v922 - (char *)*a4) >> 2) - 1;
                v926 = *a5;
                v1405 = *v9;
                v1351 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                v927 = (v122 << 30) - 0x500000000;
                v928 = *a6;
                v1398 = *(uint64_t *)((char *)*a5 + (v927 >> 29));
                v1347 = v927 >> 32;
                v1414 = ((v122 << 30) - 0x400000000) >> 32;
                v1504 = ((v122 << 30) - 0x300000000) >> 32;
                v929 = ((v122 << 30) - 0x200000000) >> 32;
                v930 = ((v122 << 30) - 0x100000000) >> 32;
                v1383 = *a7;
                v1392 = 4 * *(_QWORD *)(*a6 + (v927 >> 29));
                v1361 = v923;
                do
                {
                  v931 = v1356;
                  v1377 = result;
                  v932 = 0;
                  if ((v1356 & 0x80000000) == 0)
                  {
                    do
                    {
                      v933 = ldiv((int)result, v925[v931]);
                      LODWORD(result) = v933.quot;
                      v932 += v926[v931--] * v933.rem;
                    }
                    while (v931 != -1);
                  }
                  v934 = v1351;
                  if ((v1351 & 0x80000000) != 0)
                  {
                    v935 = 0;
                  }
                  else
                  {
                    v935 = 0;
                    v936 = v1377;
                    do
                    {
                      v937 = ldiv(v936, *(int *)(v1405 + 4 * v934));
                      v936 = v937.quot;
                      v935 += *(_QWORD *)(v928 + 8 * v934--) * v937.rem;
                    }
                    while (v934 != -1);
                  }
                  v1424 = v925[v1347];
                  if (v1424 >= 1)
                  {
                    v938 = 0;
                    v1488 = v926[v1414];
                    v1458 = v932 + v1383;
                    v1446 = 4 * (v935 + v1370);
                    v1472 = 4 * *(_QWORD *)(v928 + 8 * v1414);
                    do
                    {
                      v1434 = v938;
                      v1521 = v925[v1414];
                      if (v1521 >= 1)
                      {
                        v939 = 0;
                        v940 = v926[v1504];
                        v941 = 4 * *(_QWORD *)(v928 + 8 * v1504);
                        v943 = v1446;
                        v942 = v1458;
                        do
                        {
                          v944 = v925[v1504];
                          if (v944 >= 1)
                          {
                            v945 = 0;
                            v946 = v926[v929];
                            v947 = 4 * *(_QWORD *)(v928 + 8 * v929);
                            v948 = v943;
                            v949 = v942;
                            do
                            {
                              v950 = v925[v929];
                              if (v950 >= 1)
                              {
                                v951 = 0;
                                v952 = v926[v930];
                                v953 = *v13;
                                v954 = 4 * *(_QWORD *)(v928 + 8 * v930);
                                v955 = v948;
                                v956 = v949;
                                do
                                {
                                  v957 = v925[v930];
                                  if (v957 >= 1)
                                  {
                                    v958 = v121[19];
                                    v959 = (_DWORD *)(v953[19] + v955);
                                    do
                                    {
                                      *v959 = *(unsigned __int8 *)(v958 + v956);
                                      v959 = (_DWORD *)((char *)v959 + v954);
                                      v958 += v952;
                                      --v957;
                                    }
                                    while (v957);
                                  }
                                  v956 += v946;
                                  ++v951;
                                  v955 += v947;
                                }
                                while (v951 != v950);
                              }
                              v949 += v940;
                              ++v945;
                              v948 += v941;
                            }
                            while (v945 != v944);
                          }
                          v942 += v1488;
                          ++v939;
                          v943 += v1472;
                        }
                        while (v939 != v1521);
                      }
                      v1458 += v1398;
                      v938 = v1434 + 1;
                      v1446 += v1392;
                    }
                    while (v1434 + 1 != v1424);
                  }
                  result = v1377 + v1361;
                }
                while (v1366 > v1377 + v1361);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v28 = v9[6];
          if (v28)
          {
            v29 = **(unsigned __int8 **)(*(_QWORD *)result + 152);
            v30 = (_QWORD *)v9[19];
            do
            {
              *v30++ = v29;
              --v28;
            }
            while (v28);
          }
          break;
        case 1:
          v130 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v130)
          {
            v131 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v132 = (_QWORD *)v9[19];
            do
            {
              v133 = *v131++;
              *v132++ = v133;
              --v130;
            }
            while (v130);
          }
          break;
        case 2:
          v134 = *a7;
          v135 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v136 = **a4;
              if ((int)v136 >= 1)
              {
                v137 = *(_QWORD *)(v135 + 152);
                v138 = (_QWORD *)v9[19];
                v139 = *a5;
                do
                {
                  *v138++ = *(unsigned __int8 *)(v137 + v134);
                  v134 += *v139;
                  --v136;
                }
                while (v136);
              }
              break;
            case 2:
              v437 = **a4;
              if (v437 >= 1)
              {
                v438 = 0;
                v439 = 0;
                v440 = *(_QWORD *)(v135 + 152);
                v441 = v9[19];
                v442 = (*a4)[1];
                v443 = *a5;
                do
                {
                  if (v442 <= 0)
                  {
                    v445 = v443[1];
                  }
                  else
                  {
                    v444 = v442;
                    do
                    {
                      *(_QWORD *)(v441 + 8 * v439++) = *(unsigned __int8 *)(v440 + v134);
                      v445 = v443[1];
                      v134 += v445;
                      --v444;
                    }
                    while (v444);
                  }
                  result = *v443;
                  v134 = v134 - v445 * v442 + *v443;
                  ++v438;
                }
                while (v438 != v437);
              }
              break;
            case 3:
              v446 = *a4;
              v447 = **a4;
              if (v447 >= 1)
              {
                v448 = 0;
                v449 = 0;
                v450 = *(_QWORD *)(v135 + 152);
                v451 = v9[19];
                v452 = v446[1];
                v453 = *a5;
                do
                {
                  if ((int)v452 <= 0)
                  {
                    v457 = v453[1];
                  }
                  else
                  {
                    v454 = 0;
                    result = v446[2];
                    v455 = *a5;
                    do
                    {
                      v456 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(_QWORD *)(v451 + 8 * v449++) = *(unsigned __int8 *)(v450 + v134);
                          v134 += v455[2];
                          --v456;
                        }
                        while (v456);
                      }
                      v457 = v453[1];
                      v134 = v457 + v134 - v453[2] * (int)result;
                      ++v454;
                    }
                    while (v454 != (_DWORD)v452);
                  }
                  v134 = v134 - v457 * v452 + *v453;
                  ++v448;
                }
                while (v448 != v447);
              }
              break;
            case 4:
              v458 = *a4;
              v459 = **a4;
              if (v459 >= 1)
              {
                v460 = 0;
                v461 = 0;
                v462 = *(_QWORD *)(v135 + 152);
                v463 = v9[19];
                v464 = v458[1];
                v465 = *a5;
                do
                {
                  if ((int)v464 <= 0)
                  {
                    v472 = v465[1];
                  }
                  else
                  {
                    v466 = 0;
                    result = v458[2];
                    v467 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        v468 = 0;
                        v469 = v458[3];
                        v470 = *a5;
                        do
                        {
                          v471 = v469;
                          if (v469 >= 1)
                          {
                            do
                            {
                              *(_QWORD *)(v463 + 8 * v461++) = *(unsigned __int8 *)(v462 + v134);
                              v134 += v470[3];
                              --v471;
                            }
                            while (v471);
                          }
                          v134 = v467[2] + v134 - v467[3] * v469;
                          ++v468;
                        }
                        while (v468 != (_DWORD)result);
                      }
                      v472 = v465[1];
                      v134 = v472 + v134 - v465[2] * result;
                      ++v466;
                    }
                    while (v466 != (_DWORD)v464);
                  }
                  v134 = v134 - v472 * v464 + *v465;
                  ++v460;
                }
                while (v460 != v459);
              }
              break;
            default:
              v427 = v9[6];
              if (v427)
              {
                v428 = 0;
                v429 = *(_QWORD *)(v135 + 152) + v134;
                v430 = v9[19];
                v431 = *a4;
                v432 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v433 = *a5;
                do
                {
                  v434 = 0;
                  if ((v432 & 0x80000000) == 0)
                  {
                    v435 = v432;
                    LODWORD(result) = v428;
                    do
                    {
                      v436 = ldiv((int)result, v431[v435]);
                      result = v436.quot;
                      v434 += v433[v435--] * v436.rem;
                    }
                    while (v435 != -1);
                  }
                  *(_QWORD *)(v430 + 8 * v428++) = *(unsigned __int8 *)(v429 + v434);
                }
                while (v428 != v427);
              }
              break;
          }
          break;
        case 3:
          v140 = *a7;
          v1371 = *a8;
          v141 = *(_QWORD **)result;
          v142 = v141[1] - *v141;
          switch(v142 >> 2)
          {
            case 1:
              v143 = (v142 << 30) - 0x100000000;
              v144 = *(int *)((char *)*a4 + (v143 >> 30));
              if (v144 >= 1)
              {
                v145 = v143 >> 29;
                v146 = *(uint64_t *)((char *)*a5 + (v143 >> 29));
                v147 = (_QWORD *)(v9[19] + 8 * v1371);
                v148 = (unsigned __int8 *)(v141[19] + v140);
                v149 = 8 * *(_QWORD *)(*a6 + v145);
                do
                {
                  *v147 = *v148;
                  v148 += v146;
                  v147 = (_QWORD *)((char *)v147 + v149);
                  --v144;
                }
                while (v144);
              }
              break;
            case 2:
              v1101 = (v142 << 30) - 0x200000000;
              v1102 = *(int *)((char *)*a4 + (v1101 >> 30));
              if (v1102 >= 1)
              {
                v1103 = 0;
                v1104 = *a5;
                v1105 = v1101 >> 29;
                v1106 = *(uint64_t *)((char *)*a5 + (v1101 >> 29));
                v1107 = *a6;
                v1108 = *(_QWORD *)(*a6 + v1105);
                v1109 = (v142 << 30) - 0x100000000;
                v1110 = v1109 >> 32;
                v1111 = *(int *)((char *)*a4 + (v1109 >> 30));
                v1112 = 8 * v1371;
                v1113 = 8 * v1108;
                do
                {
                  if (v1111 >= 1)
                  {
                    result = v1104[v1110];
                    v1114 = v141[19];
                    v1115 = (_QWORD *)(v9[19] + v1112);
                    v1116 = 8 * *(_QWORD *)(v1107 + 8 * v1110);
                    v1117 = v1111;
                    do
                    {
                      *v1115 = *(unsigned __int8 *)(v1114 + v140);
                      v1115 = (_QWORD *)((char *)v1115 + v1116);
                      v1114 += result;
                      --v1117;
                    }
                    while (v1117);
                  }
                  v140 += v1106;
                  ++v1103;
                  v1112 += v1113;
                }
                while (v1103 != v1102);
              }
              break;
            case 3:
              v1118 = (v142 << 30) - 0x300000000;
              v1119 = *a4;
              v1120 = *(int *)((char *)*a4 + (v1118 >> 30));
              if (v1120 >= 1)
              {
                v1121 = 0;
                v1122 = *a5;
                v1123 = v1118 >> 29;
                v1124 = *(uint64_t *)((char *)*a5 + (v1118 >> 29));
                v1125 = *a6;
                v1126 = *(_QWORD *)(*a6 + v1123);
                v1127 = v142 << 30;
                v1128 = v1127 - 0x200000000;
                v1129 = v1127 - 0x100000000;
                v1130 = (v1127 - 0x200000000) >> 32;
                v1131 = *(int *)((char *)v1119 + (v1128 >> 30));
                v1132 = v1129 >> 32;
                v1133 = 8 * v1371;
                result = 8 * v1126;
                do
                {
                  if (v1131 >= 1)
                  {
                    v1134 = 0;
                    v1135 = v1122[v1130];
                    v1136 = v1119[v1132];
                    v1137 = *v13;
                    v1138 = 8 * *(_QWORD *)(v1125 + 8 * v1130);
                    v1139 = v1133;
                    v1140 = v140;
                    do
                    {
                      if (v1136 >= 1)
                      {
                        v1141 = v1122[v1132];
                        v1142 = v141[19];
                        v1143 = (_QWORD *)(v1137[19] + v1139);
                        v1144 = 8 * *(_QWORD *)(v1125 + 8 * v1132);
                        v1145 = v1136;
                        do
                        {
                          *v1143 = *(unsigned __int8 *)(v1142 + v1140);
                          v1143 = (_QWORD *)((char *)v1143 + v1144);
                          v1142 += v1141;
                          --v1145;
                        }
                        while (v1145);
                      }
                      v1140 += v1135;
                      ++v1134;
                      v1139 += v1138;
                    }
                    while (v1134 != v1131);
                  }
                  v140 += v1124;
                  ++v1121;
                  v1133 += result;
                }
                while (v1121 != v1120);
              }
              break;
            case 4:
              v1146 = (v142 << 30) - 0x400000000;
              v1147 = *a4;
              v1524 = *(int *)((char *)*a4 + (v1146 >> 30));
              if (v1524 >= 1)
              {
                v1148 = 0;
                v1149 = *a5;
                v1150 = v1146 >> 29;
                v1492 = *(uint64_t *)((char *)*a5 + v1150);
                v1151 = *a6;
                v1152 = (v142 << 30) - 0x300000000;
                v1476 = v1152 >> 32;
                v1153 = *(int *)((char *)v1147 + (v1152 >> 30));
                v1154 = ((v142 << 30) - 0x200000000) >> 32;
                v1155 = ((v142 << 30) - 0x100000000) >> 32;
                result = 8 * v1371;
                v1507 = 8 * *(_QWORD *)(*a6 + v1150);
                do
                {
                  v1386 = v140;
                  if (v1153 >= 1)
                  {
                    v1156 = 0;
                    v1157 = v1149[v1476];
                    v1158 = v1147[v1154];
                    v1159 = 8 * *(_QWORD *)(v1151 + 8 * v1476);
                    v1160 = result;
                    v1161 = v140;
                    do
                    {
                      if (v1158 >= 1)
                      {
                        v1162 = 0;
                        v1163 = v1149[v1154];
                        v1164 = v1147[v1155];
                        v1165 = *v13;
                        v1166 = 8 * *(_QWORD *)(v1151 + 8 * v1154);
                        v1167 = v1160;
                        v1168 = v1161;
                        do
                        {
                          if (v1164 >= 1)
                          {
                            v1169 = v1149[v1155];
                            v1170 = v141[19];
                            v1171 = (_QWORD *)(v1165[19] + v1167);
                            v1172 = 8 * *(_QWORD *)(v1151 + 8 * v1155);
                            v1173 = v1164;
                            do
                            {
                              *v1171 = *(unsigned __int8 *)(v1170 + v1168);
                              v1171 = (_QWORD *)((char *)v1171 + v1172);
                              v1170 += v1169;
                              --v1173;
                            }
                            while (v1173);
                          }
                          v1168 += v1163;
                          ++v1162;
                          v1167 += v1166;
                        }
                        while (v1162 != v1158);
                      }
                      v1161 += v1157;
                      ++v1156;
                      v1160 += v1159;
                    }
                    while (v1156 != v1153);
                  }
                  v140 = v1386 + v1492;
                  ++v1148;
                  result += v1507;
                }
                while (v1148 != v1524);
              }
              break;
            case 5:
              v1174 = (v142 << 30) - 0x500000000;
              v1175 = *a4;
              v1427 = *(int *)((char *)*a4 + (v1174 >> 30));
              if (v1427 >= 1)
              {
                v1437 = 0;
                v1176 = *a5;
                v1177 = v1174 >> 29;
                v1417 = *(uint64_t *)((char *)*a5 + v1177);
                v1178 = *a6;
                v1179 = (v142 << 30) - 0x400000000;
                v1508 = *(int *)((char *)v1175 + (v1179 >> 30));
                v1400 = v1179 >> 32;
                v1180 = ((v142 << 30) - 0x200000000) >> 32;
                result = ((v142 << 30) - 0x100000000) >> 32;
                v1449 = 8 * v1371;
                v1461 = ((v142 << 30) - 0x300000000) >> 32;
                v1408 = 8 * *(_QWORD *)(*a6 + v1177);
                do
                {
                  v1387 = v140;
                  if (v1508 >= 1)
                  {
                    v1181 = 0;
                    v1493 = v1176[v1400];
                    v1182 = v1175[v1461];
                    v1477 = 8 * *(_QWORD *)(v1178 + 8 * v1400);
                    v1183 = v1449;
                    v1184 = v140;
                    do
                    {
                      v1525 = v1181;
                      if (v1182 >= 1)
                      {
                        v1185 = 0;
                        v1186 = v1176[v1461];
                        v1187 = v1175[v1180];
                        v1188 = 8 * *(_QWORD *)(v1178 + 8 * v1461);
                        v1189 = v1183;
                        v1190 = v1184;
                        do
                        {
                          if (v1187 >= 1)
                          {
                            v1191 = 0;
                            v1192 = v1176[v1180];
                            v1193 = v1175[result];
                            v1194 = *v13;
                            v1195 = 8 * *(_QWORD *)(v1178 + 8 * v1180);
                            v1196 = v1189;
                            v1197 = v1190;
                            do
                            {
                              if (v1193 >= 1)
                              {
                                v1198 = v1176[result];
                                v1199 = v141[19];
                                v1200 = (_QWORD *)(v1194[19] + v1196);
                                v1201 = 8 * *(_QWORD *)(v1178 + 8 * result);
                                v1202 = v1193;
                                do
                                {
                                  *v1200 = *(unsigned __int8 *)(v1199 + v1197);
                                  v1200 = (_QWORD *)((char *)v1200 + v1201);
                                  v1199 += v1198;
                                  --v1202;
                                }
                                while (v1202);
                              }
                              v1197 += v1192;
                              ++v1191;
                              v1196 += v1195;
                            }
                            while (v1191 != v1187);
                          }
                          v1190 += v1186;
                          ++v1185;
                          v1189 += v1188;
                        }
                        while (v1185 != v1182);
                      }
                      v1184 += v1493;
                      v1181 = v1525 + 1;
                      v1183 += v1477;
                    }
                    while (v1525 + 1 != v1508);
                  }
                  v140 = v1387 + v1417;
                  v1449 += v1408;
                  ++v1437;
                }
                while (v1437 != v1427);
              }
              break;
            default:
              v1063 = (char *)a4[1];
              LODWORD(v1064) = 1;
              v1065 = -20;
              do
              {
                v1064 = *(int *)&v1063[v1065] * (uint64_t)(int)v1064;
                v1065 += 4;
              }
              while (v1065);
              v1367 = v141[6];
              if (v1367)
              {
                v1066 = 0;
                v1067 = (v142 << 30) - 0x500000000;
                v1068 = *a4;
                v1348 = *v9;
                v1069 = *a5;
                v1352 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                v1357 = ((unint64_t)(v1063 - (char *)*a4) >> 2) - 1;
                v1070 = *a6;
                v1344 = v1067 >> 32;
                v1416 = *(int *)((char *)*a4 + (v1067 >> 30));
                v1385 = *a7;
                v1393 = ((v142 << 30) - 0x400000000) >> 32;
                v1460 = ((v142 << 30) - 0x300000000) >> 32;
                v1071 = ((v142 << 30) - 0x200000000) >> 32;
                v1072 = ((v142 << 30) - 0x100000000) >> 32;
                v1362 = v1064;
                do
                {
                  v1073 = v1357;
                  if ((v1357 & 0x80000000) != 0)
                  {
                    v1074 = 0;
                  }
                  else
                  {
                    v1074 = 0;
                    LODWORD(result) = v1066;
                    do
                    {
                      v1075 = ldiv((int)result, v1068[v1073]);
                      result = v1075.quot;
                      v1074 += v1069[v1073--] * v1075.rem;
                    }
                    while (v1073 != -1);
                  }
                  v1076 = v1352;
                  v1378 = v1066;
                  v1077 = 0;
                  if ((v1352 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1066;
                    do
                    {
                      v1078 = ldiv((int)result, *(int *)(v1348 + 4 * v1076));
                      result = v1078.quot;
                      v1077 += *(_QWORD *)(v1070 + 8 * v1076--) * v1078.rem;
                    }
                    while (v1076 != -1);
                  }
                  if (v1416 >= 1)
                  {
                    v1079 = 0;
                    v1407 = v1069[v1344];
                    v1448 = v1074 + v1385;
                    v1506 = v1068[v1393];
                    v1436 = 8 * (v1077 + v1371);
                    v1399 = 8 * *(_QWORD *)(v1070 + 8 * v1344);
                    do
                    {
                      v1426 = v1079;
                      if (v1506 >= 1)
                      {
                        v1080 = 0;
                        v1491 = v1069[v1393];
                        v1081 = v1068[v1460];
                        v1475 = 8 * *(_QWORD *)(v1070 + 8 * v1393);
                        v1083 = v1436;
                        v1082 = v1448;
                        do
                        {
                          if (v1081 >= 1)
                          {
                            v1084 = 0;
                            v1085 = v1069[v1460];
                            v1086 = v1068[v1071];
                            v1087 = 8 * *(_QWORD *)(v1070 + 8 * v1460);
                            result = v1083;
                            v1088 = v1082;
                            do
                            {
                              if (v1086 >= 1)
                              {
                                v1089 = 0;
                                v1090 = v1069[v1071];
                                v1091 = v1068[v1072];
                                v1092 = *(uint64_t **)a2;
                                v1093 = 8 * *(_QWORD *)(v1070 + 8 * v1071);
                                v1094 = result;
                                v1095 = v1088;
                                do
                                {
                                  if (v1091 >= 1)
                                  {
                                    v1096 = v1069[v1072];
                                    v1097 = v141[19];
                                    v1098 = (_QWORD *)(v1092[19] + v1094);
                                    v1099 = 8 * *(_QWORD *)(v1070 + 8 * v1072);
                                    v1100 = v1091;
                                    do
                                    {
                                      *v1098 = *(unsigned __int8 *)(v1097 + v1095);
                                      v1098 = (_QWORD *)((char *)v1098 + v1099);
                                      v1097 += v1096;
                                      --v1100;
                                    }
                                    while (v1100);
                                  }
                                  v1095 += v1090;
                                  ++v1089;
                                  v1094 += v1093;
                                }
                                while (v1089 != v1086);
                              }
                              v1088 += v1085;
                              ++v1084;
                              result += v1087;
                            }
                            while (v1084 != v1081);
                          }
                          v1082 += v1491;
                          ++v1080;
                          v1083 += v1475;
                        }
                        while (v1080 != v1506);
                      }
                      v1448 += v1407;
                      v1079 = v1426 + 1;
                      v1436 += v1399;
                    }
                    while (v1426 + 1 != v1416);
                  }
                  v1066 += v1362;
                }
                while (v1367 > v1378 + v1362);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v31 = v9[6];
          if (v31)
          {
            LOBYTE(a9) = **(_BYTE **)(*(_QWORD *)result + 152);
            v32 = (float)LODWORD(a9);
            v33 = (float *)v9[19];
            do
            {
              *v33++ = v32;
              --v31;
            }
            while (v31);
          }
          break;
        case 1:
          v150 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v150)
          {
            v151 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v152 = (float *)v9[19];
            do
            {
              v153 = *v151++;
              *v152++ = (float)v153;
              --v150;
            }
            while (v150);
          }
          break;
        case 2:
          v154 = *a7;
          v155 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v156 = **a4;
              if ((int)v156 >= 1)
              {
                v157 = (float *)v9[19];
                v158 = **a5;
                v159 = (_BYTE *)(*(_QWORD *)(v155 + 152) + v154);
                do
                {
                  LOBYTE(a9) = *v159;
                  a9 = (float)LODWORD(a9);
                  *v157++ = a9;
                  v159 += v158;
                  --v156;
                }
                while (v156);
              }
              break;
            case 2:
              v483 = **a4;
              if (v483 >= 1)
              {
                v484 = 0;
                v485 = 0;
                v486 = *(_QWORD *)(v155 + 152);
                v487 = v9[19];
                v488 = (*a4)[1];
                v489 = (*a5)[1];
                v490 = **a5 - v489 * v488;
                do
                {
                  v491 = v488;
                  if ((int)v488 >= 1)
                  {
                    do
                    {
                      LOBYTE(a9) = *(_BYTE *)(v486 + v154);
                      a9 = (float)LODWORD(a9);
                      *(float *)(v487 + 4 * v485++) = a9;
                      v154 += v489;
                      --v491;
                    }
                    while (v491);
                  }
                  v154 += v490;
                  ++v484;
                }
                while (v484 != v483);
              }
              break;
            case 3:
              v492 = *a4;
              v493 = **a4;
              if (v493 >= 1)
              {
                v494 = 0;
                result = 0;
                v495 = *(_QWORD *)(v155 + 152);
                v496 = v9[19];
                v497 = v492[1];
                v498 = *a5;
                v499 = (*a5)[1];
                v500 = **a5 - v499 * v497;
                do
                {
                  if ((int)v497 < 1)
                  {
                    v507 = result;
                  }
                  else
                  {
                    v501 = 0;
                    v502 = v492[2];
                    v503 = *a5;
                    v504 = v499 - v498[2] * v502;
                    do
                    {
                      if ((int)v502 < 1)
                      {
                        v507 = result;
                      }
                      else
                      {
                        v505 = v503[2];
                        v506 = v502;
                        do
                        {
                          LOBYTE(a9) = *(_BYTE *)(v495 + v154);
                          v507 = result + 1;
                          a9 = (float)LODWORD(a9);
                          *(float *)(v496 + 4 * result) = a9;
                          v154 += v505;
                          ++result;
                          --v506;
                        }
                        while (v506);
                      }
                      v154 += v504;
                      ++v501;
                      result = v507;
                    }
                    while (v501 != (_DWORD)v497);
                  }
                  v154 += v500;
                  ++v494;
                  result = v507;
                }
                while (v494 != v493);
              }
              break;
            case 4:
              v508 = *a4;
              v509 = **a4;
              if (v509 >= 1)
              {
                v510 = 0;
                result = 0;
                v511 = *(_QWORD *)(v155 + 152);
                v512 = v9[19];
                v513 = v508[1];
                v514 = *a5;
                v515 = (*a5)[1];
                v516 = **a5 - v515 * v513;
                do
                {
                  if ((int)v513 < 1)
                  {
                    v527 = result;
                  }
                  else
                  {
                    v517 = 0;
                    v518 = v508[2];
                    v519 = *a5;
                    v520 = v515 - v514[2] * v518;
                    do
                    {
                      if ((int)v518 < 1)
                      {
                        v527 = result;
                      }
                      else
                      {
                        v521 = 0;
                        v522 = v508[3];
                        v523 = *a5;
                        v524 = v519[2] - v519[3] * v522;
                        do
                        {
                          if ((int)v522 < 1)
                          {
                            v527 = result;
                          }
                          else
                          {
                            v525 = v523[3];
                            v526 = v522;
                            do
                            {
                              LOBYTE(a9) = *(_BYTE *)(v511 + v154);
                              v527 = result + 1;
                              a9 = (float)LODWORD(a9);
                              *(float *)(v512 + 4 * result) = a9;
                              v154 += v525;
                              ++result;
                              --v526;
                            }
                            while (v526);
                          }
                          v154 += v524;
                          ++v521;
                          result = v527;
                        }
                        while (v521 != (_DWORD)v518);
                      }
                      v154 += v520;
                      ++v517;
                      result = v527;
                    }
                    while (v517 != (_DWORD)v513);
                  }
                  v154 += v516;
                  ++v510;
                  result = v527;
                }
                while (v510 != v509);
              }
              break;
            default:
              v473 = v9[6];
              if (v473)
              {
                v474 = 0;
                v475 = *(_QWORD *)(v155 + 152) + v154;
                v476 = v9[19];
                v477 = *a4;
                v478 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v479 = *a5;
                do
                {
                  v480 = 0;
                  if ((v478 & 0x80000000) == 0)
                  {
                    v481 = v478;
                    LODWORD(result) = v474;
                    do
                    {
                      v482 = ldiv((int)result, v477[v481]);
                      result = v482.quot;
                      v480 += v479[v481--] * v482.rem;
                    }
                    while (v481 != -1);
                  }
                  LOBYTE(a9) = *(_BYTE *)(v475 + v480);
                  a9 = (float)LODWORD(a9);
                  *(float *)(v476 + 4 * v474++) = a9;
                }
                while (v474 != v473);
              }
              break;
          }
          break;
        case 3:
          v160 = *a7;
          v1374 = *a8;
          v161 = *(_QWORD **)result;
          v162 = v161[1] - *v161;
          switch(v162 >> 2)
          {
            case 1:
              v163 = (v162 << 30) - 0x100000000;
              v164 = *(int *)((char *)*a4 + (v163 >> 30));
              if (v164 >= 1)
              {
                v165 = v163 >> 29;
                v166 = *(uint64_t *)((char *)*a5 + (v163 >> 29));
                v167 = (float *)(v9[19] + 4 * v1374);
                v168 = (_BYTE *)(v161[19] + v160);
                v169 = 4 * *(_QWORD *)(*a6 + v165);
                do
                {
                  LOBYTE(a9) = *v168;
                  a9 = (float)LODWORD(a9);
                  *v167 = a9;
                  v168 += v166;
                  v167 = (float *)((char *)v167 + v169);
                  --v164;
                }
                while (v164);
              }
              break;
            case 2:
              v1242 = (v162 << 30) - 0x200000000;
              v1243 = *(int *)((char *)*a4 + (v1242 >> 30));
              if (v1243 >= 1)
              {
                v1244 = 0;
                v1245 = v1242 >> 29;
                v1246 = *(uint64_t *)((char *)*a5 + (v1242 >> 29));
                v1247 = (v162 << 30) - 0x100000000;
                result = v1247 >> 29;
                v1248 = *(uint64_t *)((char *)*a5 + (v1247 >> 29));
                v1249 = *(int *)((char *)*a4 + (v1247 >> 30));
                v1250 = 4 * v1374;
                v1251 = 4 * *(_QWORD *)(*a6 + v1245);
                v1252 = 4 * *(_QWORD *)(*a6 + (v1247 >> 29));
                do
                {
                  if (v1249 >= 1)
                  {
                    v1253 = v161[19];
                    result = v9[19] + v1250;
                    v1254 = v1249;
                    do
                    {
                      LOBYTE(a9) = *(_BYTE *)(v1253 + v160);
                      a9 = (float)LODWORD(a9);
                      *(float *)result = a9;
                      result += v1252;
                      v1253 += v1248;
                      --v1254;
                    }
                    while (v1254);
                  }
                  v160 += v1246;
                  ++v1244;
                  v1250 += v1251;
                }
                while (v1244 != v1243);
              }
              break;
            case 3:
              v1255 = (v162 << 30) - 0x300000000;
              v1256 = *a4;
              v1257 = *(int *)((char *)*a4 + (v1255 >> 30));
              if (v1257 >= 1)
              {
                v1258 = 0;
                v1259 = v162 << 30;
                v1260 = *a5;
                v1261 = v1255 >> 29;
                v1262 = *(uint64_t *)((char *)*a5 + (v1255 >> 29));
                v1263 = *a6;
                v1264 = *(_QWORD *)(*a6 + v1261);
                v1265 = v1259 - 0x200000000;
                v1266 = (v1259 - 0x200000000) >> 29;
                v1267 = v1259 - 0x100000000;
                v1268 = *(uint64_t *)((char *)*a5 + v1266);
                v1269 = *(_QWORD *)(*a6 + v1266);
                v1270 = *(int *)((char *)v1256 + (v1265 >> 30));
                v1271 = v1267 >> 32;
                v1272 = 4 * v1374;
                result = 4 * v1264;
                v1273 = 4 * v1269;
                do
                {
                  if (v1270 >= 1)
                  {
                    v1274 = 0;
                    v1275 = v1260[v1271];
                    v1276 = v1256[v1271];
                    v1277 = *v13;
                    v1278 = 4 * *(_QWORD *)(v1263 + 8 * v1271);
                    v1279 = v1272;
                    v1280 = v160;
                    do
                    {
                      if (v1276 >= 1)
                      {
                        v1281 = v161[19];
                        v1282 = (float *)(v1277[19] + v1279);
                        v13 = (uint64_t **)a2;
                        v1283 = v1276;
                        do
                        {
                          LOBYTE(a9) = *(_BYTE *)(v1281 + v1280);
                          a9 = (float)LODWORD(a9);
                          *v1282 = a9;
                          v1282 = (float *)((char *)v1282 + v1278);
                          v1281 += v1275;
                          --v1283;
                        }
                        while (v1283);
                      }
                      v1280 += v1268;
                      ++v1274;
                      v1279 += v1273;
                    }
                    while (v1274 != v1270);
                  }
                  v160 += v1262;
                  ++v1258;
                  v1272 += result;
                }
                while (v1258 != v1257);
              }
              break;
            case 4:
              v1284 = (v162 << 30) - 0x400000000;
              v1285 = *a4;
              v1527 = *(int *)((char *)*a4 + (v1284 >> 30));
              if (v1527 >= 1)
              {
                v1286 = 0;
                v1287 = v162 << 30;
                v1288 = *a5;
                v1289 = v1284 >> 29;
                v1495 = *(uint64_t *)((char *)*a5 + v1289);
                v1290 = *a6;
                v1291 = (v162 << 30) - 0x300000000;
                v1292 = *(uint64_t *)((char *)*a5 + (v1291 >> 29));
                v1293 = *(_QWORD *)(*a6 + (v1291 >> 29));
                v1294 = *(int *)((char *)v1285 + (v1291 >> 30));
                v1295 = (v1287 - 0x200000000) >> 32;
                v1296 = (v1287 - 0x100000000) >> 32;
                result = 4 * v1374;
                v1510 = 4 * *(_QWORD *)(*a6 + v1289);
                v1297 = 4 * v1293;
                do
                {
                  v1298 = v160;
                  if (v1294 >= 1)
                  {
                    v1299 = 0;
                    v1300 = v1288[v1295];
                    v1301 = v1285[v1295];
                    v1302 = 4 * *(_QWORD *)(v1290 + 8 * v1295);
                    v1303 = result;
                    v1304 = v160;
                    do
                    {
                      if (v1301 >= 1)
                      {
                        v1305 = 0;
                        v1306 = v1288[v1296];
                        v1307 = v1285[v1296];
                        v1308 = *v13;
                        v1309 = 4 * *(_QWORD *)(v1290 + 8 * v1296);
                        v1310 = v1303;
                        v1311 = v1304;
                        do
                        {
                          if (v1307 >= 1)
                          {
                            v1312 = v161[19];
                            v1313 = (float *)(v1308[19] + v1310);
                            v1314 = v1307;
                            do
                            {
                              LOBYTE(a9) = *(_BYTE *)(v1312 + v1311);
                              a9 = (float)LODWORD(a9);
                              *v1313 = a9;
                              v1313 = (float *)((char *)v1313 + v1309);
                              v1312 += v1306;
                              --v1314;
                            }
                            while (v1314);
                          }
                          v1311 += v1300;
                          ++v1305;
                          v1310 += v1302;
                        }
                        while (v1305 != v1301);
                      }
                      v1304 += v1292;
                      ++v1299;
                      v1303 += v1297;
                    }
                    while (v1299 != v1294);
                  }
                  v160 = v1298 + v1495;
                  ++v1286;
                  result += v1510;
                }
                while (v1286 != v1527);
              }
              break;
            case 5:
              v1315 = (v162 << 30) - 0x500000000;
              v1316 = *a4;
              v1451 = *(int *)((char *)*a4 + (v1315 >> 30));
              if (v1451 >= 1)
              {
                v1463 = 0;
                v1317 = *a5;
                v1318 = v1315 >> 29;
                v1439 = *(uint64_t *)((char *)*a5 + v1318);
                v1319 = *a6;
                v1320 = (v162 << 30) - 0x400000000;
                v1511 = *(uint64_t *)((char *)*a5 + (v1320 >> 29));
                v1528 = *(int *)((char *)v1316 + (v1320 >> 30));
                v1419 = ((v162 << 30) - 0x300000000) >> 32;
                v1321 = ((v162 << 30) - 0x200000000) >> 32;
                result = ((v162 << 30) - 0x100000000) >> 32;
                v1479 = 4 * v1374;
                v1429 = 4 * *(_QWORD *)(*a6 + v1318);
                v1496 = 4 * *(_QWORD *)(*a6 + (v1320 >> 29));
                do
                {
                  v1395 = v160;
                  if (v1528 >= 1)
                  {
                    v1322 = 0;
                    v1323 = v1317[v1419];
                    v1324 = v1316[v1419];
                    v1325 = 4 * *(_QWORD *)(v1319 + 8 * v1419);
                    v1326 = v1479;
                    v1327 = v160;
                    do
                    {
                      if (v1324 >= 1)
                      {
                        v1328 = 0;
                        v1329 = v1317[v1321];
                        v1330 = v1316[v1321];
                        v1331 = 4 * *(_QWORD *)(v1319 + 8 * v1321);
                        v1332 = v1326;
                        v1333 = v1327;
                        do
                        {
                          if (v1330 >= 1)
                          {
                            v1334 = 0;
                            v1335 = v1317[result];
                            v1336 = v1316[result];
                            v1337 = *v13;
                            v1338 = 4 * *(_QWORD *)(v1319 + 8 * result);
                            v1339 = v1332;
                            v1340 = v1333;
                            do
                            {
                              if (v1336 >= 1)
                              {
                                v1341 = v161[19];
                                v1342 = (float *)(v1337[19] + v1339);
                                v1343 = v1336;
                                do
                                {
                                  LOBYTE(a9) = *(_BYTE *)(v1341 + v1340);
                                  a9 = (float)LODWORD(a9);
                                  *v1342 = a9;
                                  v1342 = (float *)((char *)v1342 + v1338);
                                  v1341 += v1335;
                                  --v1343;
                                }
                                while (v1343);
                              }
                              v1340 += v1329;
                              ++v1334;
                              v1339 += v1331;
                            }
                            while (v1334 != v1330);
                          }
                          v1333 += v1323;
                          ++v1328;
                          v1332 += v1325;
                        }
                        while (v1328 != v1324);
                      }
                      v1327 += v1511;
                      ++v1322;
                      v1326 += v1496;
                    }
                    while (v1322 != v1528);
                  }
                  v160 = v1395 + v1439;
                  v1479 += v1429;
                  ++v1463;
                }
                while (v1463 != v1451);
              }
              break;
            default:
              v1203 = (char *)a4[1];
              LODWORD(v1204) = 1;
              v1205 = -20;
              do
              {
                v1204 = *(int *)&v1203[v1205] * (uint64_t)(int)v1204;
                v1205 += 4;
              }
              while (v1205);
              v1373 = v161[6];
              if (v1373)
              {
                result = 0;
                v1206 = (v162 << 30) - 0x500000000;
                v1207 = *a4;
                v1428 = *v9;
                v1363 = ((unint64_t)(v1203 - (char *)*a4) >> 2) - 1;
                v1208 = *a5;
                v1209 = *a6;
                v1438 = *(int *)((char *)*a4 + (v1206 >> 30));
                v1358 = ((unint64_t)(v9[1] - *v9) >> 2) - 1;
                v1353 = ((v162 << 30) - 0x400000000) >> 32;
                v1394 = *a7;
                v1401 = ((v162 << 30) - 0x300000000) >> 32;
                v1210 = ((v162 << 30) - 0x200000000) >> 32;
                v1211 = ((v162 << 30) - 0x100000000) >> 32;
                v1409 = 4 * *(_QWORD *)(*a6 + (v1206 >> 29));
                v1418 = *(uint64_t *)((char *)*a5 + (v1206 >> 29));
                v1368 = v1204;
                do
                {
                  v1212 = v1363;
                  v1388 = result;
                  v1213 = 0;
                  if ((v1363 & 0x80000000) != 0)
                  {
                    v1214 = v1358;
                  }
                  else
                  {
                    v1214 = v1358;
                    do
                    {
                      v1215 = ldiv((int)result, v1207[v1212]);
                      LODWORD(result) = v1215.quot;
                      v1213 += v1208[v1212--] * v1215.rem;
                    }
                    while (v1212 != -1);
                  }
                  v1216 = 0;
                  if ((v1214 & 0x80000000) == 0)
                  {
                    v1217 = v1388;
                    do
                    {
                      v1218 = ldiv(v1217, *(int *)(v1428 + 4 * v1214));
                      v1217 = v1218.quot;
                      v1216 += *(_QWORD *)(v1209 + 8 * v1214--) * v1218.rem;
                    }
                    while (v1214 != -1);
                  }
                  if (v1438 >= 1)
                  {
                    v1219 = 0;
                    v1509 = v1208[v1353];
                    v1478 = v1213 + v1394;
                    v1526 = v1207[v1353];
                    v1462 = 4 * (v1216 + v1374);
                    v1494 = 4 * *(_QWORD *)(v1209 + 8 * v1353);
                    do
                    {
                      v1450 = v1219;
                      if (v1526 >= 1)
                      {
                        v1220 = 0;
                        v1221 = v1208[v1401];
                        v1222 = v1207[v1401];
                        v1223 = 4 * *(_QWORD *)(v1209 + 8 * v1401);
                        v1224 = v1462;
                        v1225 = v1478;
                        do
                        {
                          if (v1222 >= 1)
                          {
                            v1226 = 0;
                            v1227 = v1208[v1210];
                            v1228 = v1207[v1210];
                            v1229 = 4 * *(_QWORD *)(v1209 + 8 * v1210);
                            v1230 = v1224;
                            v1231 = v1225;
                            do
                            {
                              if (v1228 >= 1)
                              {
                                v1232 = 0;
                                v1233 = v1208[v1211];
                                v1234 = v1207[v1211];
                                v1235 = *v13;
                                v1236 = 4 * *(_QWORD *)(v1209 + 8 * v1211);
                                v1237 = v1230;
                                v1238 = v1231;
                                do
                                {
                                  if (v1234 >= 1)
                                  {
                                    v1239 = v161[19];
                                    v1240 = (float *)(v1235[19] + v1237);
                                    v1241 = v1234;
                                    do
                                    {
                                      LOBYTE(a9) = *(_BYTE *)(v1239 + v1238);
                                      a9 = (float)LODWORD(a9);
                                      *v1240 = a9;
                                      v1240 = (float *)((char *)v1240 + v1236);
                                      v1239 += v1233;
                                      --v1241;
                                    }
                                    while (v1241);
                                  }
                                  v1238 += v1227;
                                  ++v1232;
                                  v1237 += v1229;
                                }
                                while (v1232 != v1228);
                              }
                              v1231 += v1221;
                              ++v1226;
                              v1230 += v1223;
                            }
                            while (v1226 != v1222);
                          }
                          v1225 += v1509;
                          ++v1220;
                          v1224 += v1494;
                        }
                        while (v1220 != v1526);
                      }
                      v1478 += v1418;
                      v1219 = v1450 + 1;
                      v1462 += v1409;
                    }
                    while (v1450 + 1 != v1438);
                  }
                  result = v1388 + v1368;
                }
                while (v1373 > v1388 + v1368);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<unsigned int,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  float v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  BOOL *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  _BYTE *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  _BYTE *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  float *v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float *v165;
  uint64_t v166;
  unsigned int *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float *v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  ldiv_t v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int *v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int *v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  ldiv_t v242;
  int *v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t *v250;
  uint64_t v251;
  int *v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int i;
  int v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  int *v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int j;
  int v272;
  int k;
  int v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int *v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  ldiv_t v288;
  int *v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  int *v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  int v308;
  uint64_t *v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  int *v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  int v324;
  uint64_t *v325;
  uint64_t v326;
  int v327;
  int v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  ldiv_t v343;
  int *v344;
  int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t *v351;
  uint64_t v352;
  int *v353;
  int v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  int m;
  int v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  int *v365;
  int v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  int n;
  int v373;
  int ii;
  int v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int *v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  ldiv_t v389;
  int *v390;
  int v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  int *v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  int v409;
  uint64_t *v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int *v415;
  int v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  int v425;
  uint64_t *v426;
  uint64_t v427;
  int v428;
  int v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int *v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  ldiv_t v445;
  int v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  uint64_t *v452;
  int v453;
  uint64_t v454;
  int *v455;
  int v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  int v463;
  uint64_t *v464;
  int v465;
  uint64_t v466;
  int *v467;
  int v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  int v475;
  uint64_t *v476;
  int v477;
  int v478;
  uint64_t *v479;
  int v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int *v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t v490;
  ldiv_t v491;
  int v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  int *v501;
  int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  int *v517;
  int v518;
  int v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t *v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  uint64_t *v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  int *v542;
  uint64_t *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  ldiv_t v549;
  uint64_t v550;
  ldiv_t v551;
  int v552;
  int v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  _DWORD *v572;
  int v573;
  uint64_t v574;
  int v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  int *v589;
  int v590;
  int v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  int v609;
  _QWORD *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  _DWORD *v615;
  int v616;
  uint64_t v617;
  int *v618;
  int v619;
  uint64_t v620;
  uint64_t *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  _DWORD *v645;
  int v646;
  uint64_t v647;
  int *v648;
  uint64_t *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  int v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  _DWORD *v673;
  int v674;
  uint64_t v675;
  uint64_t v676;
  int *v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  ldiv_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  int quot;
  ldiv_t v689;
  uint64_t v690;
  int v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  int v698;
  int v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  int v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  _DWORD *v711;
  uint64_t v712;
  int v713;
  int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  int v721;
  int v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  _DWORD *v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  char *v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int *v745;
  uint64_t *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  ldiv_t v753;
  uint64_t v754;
  int v755;
  ldiv_t v756;
  int v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  int v769;
  int v770;
  _QWORD *v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  int v776;
  _DWORD *v777;
  _DWORD *v778;
  uint64_t v779;
  int *v780;
  int v781;
  int v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  _DWORD *v796;
  _DWORD *v797;
  uint64_t v798;
  int *v799;
  int v800;
  int v801;
  uint64_t *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  int v818;
  int v819;
  _QWORD *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  int v825;
  _DWORD *v826;
  _DWORD *v827;
  uint64_t v828;
  int *v829;
  int v830;
  uint64_t *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  int v843;
  int v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  int v849;
  int v850;
  _QWORD *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  int v856;
  _DWORD *v857;
  _DWORD *v858;
  uint64_t v859;
  int *v860;
  uint64_t *v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  int v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  int v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  int v880;
  int v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  int v886;
  _DWORD *v887;
  _DWORD *v888;
  uint64_t v889;
  uint64_t v890;
  int *v891;
  unint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t *v895;
  ldiv_t v896;
  uint64_t v897;
  unint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  int v902;
  ldiv_t v903;
  uint64_t v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  int v912;
  int v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  _DWORD *v925;
  uint64_t v926;
  int v927;
  int v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  int v935;
  int v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  _DWORD *v948;
  uint64_t v949;
  uint64_t v950;
  int v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  char *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  int *v959;
  uint64_t *v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  ldiv_t v967;
  uint64_t v968;
  int v969;
  ldiv_t v970;
  int v971;
  int v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  int v977;
  int v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  int v983;
  int v984;
  _QWORD *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  int v990;
  _DWORD *v991;
  _DWORD *v992;
  uint64_t v993;
  int *v994;
  int v995;
  int v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  int v1009;
  _DWORD *v1010;
  _DWORD *v1011;
  uint64_t v1012;
  int *v1013;
  int v1014;
  int v1015;
  uint64_t *v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  int v1032;
  int v1033;
  _QWORD *v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  int v1039;
  _DWORD *v1040;
  _DWORD *v1041;
  uint64_t v1042;
  int *v1043;
  int v1044;
  uint64_t *v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  int v1057;
  int v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  int v1063;
  int v1064;
  _QWORD *v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  int v1070;
  _DWORD *v1071;
  _DWORD *v1072;
  uint64_t v1073;
  int *v1074;
  uint64_t *v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  int v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  int v1088;
  int v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  int v1094;
  int v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  int v1100;
  _DWORD *v1101;
  _DWORD *v1102;
  char *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  int *v1108;
  uint64_t *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  ldiv_t v1116;
  uint64_t v1117;
  ldiv_t v1118;
  int v1119;
  int v1120;
  int v1121;
  uint64_t v1122;
  uint64_t v1123;
  int v1124;
  int v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  int v1129;
  int v1130;
  uint64_t *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  _QWORD *v1136;
  uint64_t v1137;
  unsigned int *v1138;
  uint64_t v1139;
  int v1140;
  uint64_t v1141;
  int v1142;
  int v1143;
  uint64_t v1144;
  uint64_t *v1145;
  int v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  _QWORD *v1155;
  uint64_t v1156;
  unsigned int *v1157;
  uint64_t v1158;
  int v1159;
  uint64_t v1160;
  int *v1161;
  int v1162;
  int v1163;
  uint64_t v1164;
  uint64_t *v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  int v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  int v1178;
  int v1179;
  _QWORD *v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  _QWORD *v1185;
  uint64_t v1186;
  unsigned int *v1187;
  uint64_t v1188;
  int v1189;
  uint64_t v1190;
  int *v1191;
  uint64_t v1192;
  uint64_t *v1193;
  uint64_t v1194;
  uint64_t v1195;
  int v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  int v1201;
  int v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  int v1207;
  int v1208;
  _QWORD *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  _QWORD *v1214;
  uint64_t v1215;
  uint64_t v1216;
  int v1217;
  uint64_t v1218;
  int *v1219;
  uint64_t v1220;
  uint64_t *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  int v1227;
  uint64_t v1228;
  int v1229;
  int v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  int v1235;
  int v1236;
  _QWORD *v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  _QWORD *v1242;
  uint64_t v1243;
  unsigned int *v1244;
  uint64_t v1245;
  int v1246;
  char *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  int *v1251;
  uint64_t *v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  ldiv_t v1259;
  uint64_t v1260;
  int v1261;
  ldiv_t v1262;
  int v1263;
  int v1264;
  int v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  int v1270;
  int v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  int v1276;
  int v1277;
  _QWORD *v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  float *v1283;
  unsigned int *v1284;
  int v1285;
  uint64_t v1286;
  int v1287;
  int v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  int v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  unsigned int *v1301;
  int v1302;
  uint64_t v1303;
  int *v1304;
  int v1305;
  int v1306;
  uint64_t v1307;
  uint64_t *v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  int v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  int v1324;
  int v1325;
  _QWORD *v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  float *v1331;
  unsigned int *v1332;
  int v1333;
  uint64_t v1334;
  int *v1335;
  int v1336;
  uint64_t *v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  int v1352;
  int v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  int v1358;
  int v1359;
  _QWORD *v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  float *v1365;
  unsigned int *v1366;
  int v1367;
  uint64_t v1368;
  int *v1369;
  uint64_t *v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  int v1377;
  int v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  int v1383;
  int v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  int v1389;
  int v1390;
  _QWORD *v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  float *v1396;
  unsigned int *v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  unint64_t v1420;
  unint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  unint64_t v1426;
  unint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  int v1469;
  int v1470;
  uint64_t v1471;
  uint64_t v1472;
  int v1473;
  uint64_t v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  int v1480;
  uint64_t v1481;
  uint64_t v1482;
  int v1483;
  int v1484;
  int v1485;
  int v1486;
  int v1487;
  int v1488;
  uint64_t v1489;
  uint64_t v1490;
  int v1491;
  int v1492;
  uint64_t v1493;
  int v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  int v1503;
  int v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  _QWORD *v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  _QWORD *v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  int v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  int v1560;
  uint64_t v1561;
  int v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1567;
  int v1568;
  int v1569;
  int v1570;
  int v1571;
  int v1572;
  int v1573;
  int v1574;
  int v1575;
  int v1576;
  int v1577;
  int v1578;
  int v1579;
  int v1580;
  int v1581;

  v8 = *(uint64_t **)a2;
  v11 = (uint64_t *)a2;
  v12 = result;
  switch(*(_DWORD *)(*(_QWORD *)a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v13 = v8[6];
          if (v13)
            result = (uint64_t)memset((void *)v8[19], **(_DWORD **)(*(_QWORD *)result + 152) != 0, v13);
          break;
        case 1:
          v33 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v33)
          {
            v34 = *(int **)(*(_QWORD *)result + 152);
            v35 = (BOOL *)v8[19];
            v36 = 4 * v33;
            do
            {
              v37 = *v34++;
              *v35++ = v37 != 0;
              v36 -= 4;
            }
            while (v36);
          }
          break;
        case 2:
          v38 = *a7;
          v39 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v40 = **a4;
              if ((int)v40 >= 1)
              {
                v41 = (BOOL *)v8[19];
                v42 = (_DWORD *)(*(_QWORD *)(v39 + 152) + 4 * v38);
                v43 = 4 * **a5;
                do
                {
                  *v41++ = *v42 != 0;
                  v42 = (_DWORD *)((char *)v42 + v43);
                  --v40;
                }
                while (v40);
              }
              break;
            case 2:
              v189 = **a4;
              if (v189 >= 1)
              {
                v190 = 0;
                v191 = 0;
                v192 = *(_QWORD *)(v39 + 152);
                v193 = v8[19];
                v194 = (*a4)[1];
                v195 = (*a5)[1];
                v196 = **a5 - v195 * v194;
                do
                {
                  v197 = v194;
                  if ((int)v194 >= 1)
                  {
                    do
                    {
                      result = *(_DWORD *)(v192 + 4 * v38) != 0;
                      *(_BYTE *)(v193 + v191++) = result;
                      v38 += v195;
                      --v197;
                    }
                    while (v197);
                  }
                  v38 += v196;
                  ++v190;
                }
                while (v190 != v189);
              }
              break;
            case 3:
              v198 = *a4;
              v199 = **a4;
              if (v199 >= 1)
              {
                v200 = 0;
                result = 0;
                v201 = *(_QWORD *)(v39 + 152);
                v202 = v8[19];
                v203 = v198[1];
                v204 = *a5;
                v205 = (*a5)[1];
                v206 = **a5 - v205 * v203;
                do
                {
                  if ((int)v203 < 1)
                  {
                    v213 = result;
                  }
                  else
                  {
                    v207 = 0;
                    v208 = v198[2];
                    v209 = *a5;
                    v210 = v205 - v204[2] * v208;
                    do
                    {
                      if ((int)v208 < 1)
                      {
                        v213 = result;
                      }
                      else
                      {
                        v211 = v209[2];
                        v212 = v208;
                        do
                        {
                          v213 = result + 1;
                          *(_BYTE *)(v202 + result) = *(_DWORD *)(v201 + 4 * v38) != 0;
                          v38 += v211;
                          ++result;
                          --v212;
                        }
                        while (v212);
                      }
                      v38 += v210;
                      ++v207;
                      result = v213;
                    }
                    while (v207 != (_DWORD)v203);
                  }
                  v38 += v206;
                  ++v200;
                  result = v213;
                }
                while (v200 != v199);
              }
              break;
            case 4:
              v214 = *a4;
              v215 = **a4;
              if (v215 >= 1)
              {
                v216 = 0;
                result = 0;
                v217 = *(_QWORD *)(v39 + 152);
                v218 = v8[19];
                v219 = v214[1];
                v220 = *a5;
                v221 = (*a5)[1];
                v222 = **a5 - v221 * v219;
                do
                {
                  if ((int)v219 < 1)
                  {
                    v233 = result;
                  }
                  else
                  {
                    v223 = 0;
                    v224 = v214[2];
                    v225 = *a5;
                    v226 = v221 - v220[2] * v224;
                    do
                    {
                      if ((int)v224 < 1)
                      {
                        v233 = result;
                      }
                      else
                      {
                        v227 = 0;
                        v228 = v214[3];
                        v229 = *a5;
                        v230 = v225[2] - v225[3] * v228;
                        do
                        {
                          if ((int)v228 < 1)
                          {
                            v233 = result;
                          }
                          else
                          {
                            v231 = v229[3];
                            v232 = v228;
                            do
                            {
                              v233 = result + 1;
                              *(_BYTE *)(v218 + result) = *(_DWORD *)(v217 + 4 * v38) != 0;
                              v38 += v231;
                              ++result;
                              --v232;
                            }
                            while (v232);
                          }
                          v38 += v230;
                          ++v227;
                          result = v233;
                        }
                        while (v227 != (_DWORD)v224);
                      }
                      v38 += v226;
                      ++v223;
                      result = v233;
                    }
                    while (v223 != (_DWORD)v219);
                  }
                  v38 += v222;
                  ++v216;
                  result = v233;
                }
                while (v216 != v215);
              }
              break;
            default:
              v179 = v8[6];
              if (v179)
              {
                v180 = 0;
                v181 = *(_QWORD *)(v39 + 152) + 4 * v38;
                v182 = v8[19];
                v183 = *a4;
                v184 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v185 = *a5;
                do
                {
                  v186 = 0;
                  if ((v184 & 0x80000000) == 0)
                  {
                    v187 = v184;
                    LODWORD(result) = v180;
                    do
                    {
                      v188 = ldiv((int)result, v183[v187]);
                      result = v188.quot;
                      v186 += v185[v187--] * v188.rem;
                    }
                    while (v187 != -1);
                  }
                  *(_BYTE *)(v182 + v180++) = *(_DWORD *)(v181 + 4 * v186) != 0;
                }
                while (v180 != v179);
              }
              break;
          }
          break;
        case 3:
          v1428 = *a7;
          v44 = *a8;
          v45 = *(_QWORD **)result;
          v46 = v45[1] - *v45;
          switch(v46 >> 2)
          {
            case 1:
              v47 = (v46 << 30) - 0x100000000;
              v48 = *(int *)((char *)*a4 + (v47 >> 30));
              if (v48 >= 1)
              {
                v49 = v47 >> 29;
                v50 = *(uint64_t *)((char *)*a5 + v49);
                v51 = *(_QWORD *)(*a6 + v49);
                v52 = (BOOL *)(v8[19] + v44);
                v53 = (_DWORD *)(v45[19] + 4 * v1428);
                v54 = 4 * v50;
                do
                {
                  *v52 = *v53 != 0;
                  v52 += v51;
                  v53 = (_DWORD *)((char *)v53 + v54);
                  --v48;
                }
                while (v48);
              }
              break;
            case 2:
              v574 = (v46 << 30) - 0x200000000;
              v575 = *(int *)((char *)*a4 + (v574 >> 30));
              if (v575 >= 1)
              {
                v576 = 0;
                v577 = v574 >> 29;
                v578 = *(uint64_t *)((char *)*a5 + v577);
                v579 = *(_QWORD *)(*a6 + v577);
                v580 = (v46 << 30) - 0x100000000;
                result = *(uint64_t *)((char *)*a5 + (v580 >> 29));
                v581 = *(_QWORD *)(*a6 + (v580 >> 29));
                v582 = *(int *)((char *)*a4 + (v580 >> 30));
                v583 = 4 * v1428;
                v584 = 4 * v578;
                v585 = 4 * result;
                do
                {
                  if (v582 >= 1)
                  {
                    v586 = v8[19];
                    result = v45[19] + v583;
                    v587 = v582;
                    do
                    {
                      *(_BYTE *)(v586 + v44) = *(_DWORD *)result != 0;
                      v586 += v581;
                      result += v585;
                      --v587;
                    }
                    while (v587);
                  }
                  v44 += v579;
                  ++v576;
                  v583 += v584;
                }
                while (v576 != v575);
              }
              break;
            case 3:
              v588 = (v46 << 30) - 0x300000000;
              v589 = *a4;
              v590 = *(int *)((char *)*a4 + (v588 >> 30));
              if (v590 >= 1)
              {
                v591 = 0;
                v592 = v46 << 30;
                v593 = *a5;
                v594 = v588 >> 29;
                v595 = *(uint64_t *)((char *)*a5 + (v588 >> 29));
                v596 = *a6;
                v597 = *(_QWORD *)(*a6 + v594);
                v598 = v592 - 0x200000000;
                v599 = (v592 - 0x200000000) >> 29;
                v600 = v592 - 0x100000000;
                v601 = *(uint64_t *)((char *)*a5 + v599);
                v602 = *(_QWORD *)(*a6 + v599);
                v603 = *(int *)((char *)v589 + (v598 >> 30));
                v604 = v600 >> 32;
                v605 = 4 * v1428;
                result = 4 * v595;
                v606 = 4 * v601;
                do
                {
                  if (v603 >= 1)
                  {
                    v607 = 0;
                    v608 = *(_QWORD *)(v596 + 8 * v604);
                    v609 = v589[v604];
                    v610 = (_QWORD *)*v11;
                    v611 = 4 * v593[v604];
                    v612 = v605;
                    v613 = v44;
                    do
                    {
                      if (v609 >= 1)
                      {
                        v614 = v610[19];
                        v615 = (_DWORD *)(v45[19] + v612);
                        v616 = v609;
                        do
                        {
                          *(_BYTE *)(v614 + v613) = *v615 != 0;
                          v614 += v608;
                          v615 = (_DWORD *)((char *)v615 + v611);
                          --v616;
                        }
                        while (v616);
                      }
                      v613 += v602;
                      ++v607;
                      v612 += v606;
                    }
                    while (v607 != v603);
                  }
                  v44 += v597;
                  ++v591;
                  v605 += result;
                }
                while (v591 != v590);
              }
              break;
            case 4:
              v617 = (v46 << 30) - 0x400000000;
              v618 = *a4;
              v1569 = *(int *)((char *)*a4 + (v617 >> 30));
              if (v1569 >= 1)
              {
                v619 = 0;
                v620 = v46 << 30;
                v621 = *a5;
                v622 = v617 >> 29;
                v623 = *(uint64_t *)((char *)*a5 + v622);
                v624 = *a6;
                v1552 = *(_QWORD *)(*a6 + v622);
                v625 = (v46 << 30) - 0x300000000;
                v626 = *(_QWORD *)(*a6 + (v625 >> 29));
                v627 = *(int *)((char *)v618 + (v625 >> 30));
                v1519 = (v620 - 0x200000000) >> 32;
                v628 = (v620 - 0x100000000) >> 32;
                result = 4 * v1428;
                v629 = 4 * *(uint64_t *)((char *)*a5 + (v625 >> 29));
                do
                {
                  v630 = v44;
                  if (v627 >= 1)
                  {
                    v631 = 0;
                    v632 = *(_QWORD *)(v624 + 8 * v1519);
                    v633 = v618[v1519];
                    v634 = 4 * v621[v1519];
                    v635 = result;
                    v636 = v44;
                    do
                    {
                      if (v633 >= 1)
                      {
                        v637 = 0;
                        v638 = *(_QWORD *)(v624 + 8 * v628);
                        v639 = v618[v628];
                        v640 = *v11;
                        v641 = 4 * v621[v628];
                        v642 = v635;
                        v643 = v636;
                        do
                        {
                          if (v639 >= 1)
                          {
                            v644 = *(_QWORD *)(v640 + 152);
                            v645 = (_DWORD *)(v45[19] + v642);
                            v646 = v639;
                            do
                            {
                              *(_BYTE *)(v644 + v643) = *v645 != 0;
                              v644 += v638;
                              v645 = (_DWORD *)((char *)v645 + v641);
                              --v646;
                            }
                            while (v646);
                          }
                          v643 += v632;
                          ++v637;
                          v642 += v634;
                        }
                        while (v637 != v633);
                      }
                      v636 += v626;
                      ++v631;
                      v635 += v629;
                    }
                    while (v631 != v627);
                  }
                  v44 = v630 + v1552;
                  ++v619;
                  result += 4 * v623;
                }
                while (v619 != v1569);
              }
              break;
            case 5:
              v647 = (v46 << 30) - 0x500000000;
              v648 = *a4;
              v1484 = *(int *)((char *)*a4 + (v647 >> 30));
              if (v1484 >= 1)
              {
                v1494 = 0;
                v649 = *a5;
                v650 = v647 >> 29;
                v651 = *a6;
                v1474 = *(_QWORD *)(*a6 + v650);
                v652 = (v46 << 30) - 0x400000000;
                v1553 = *(_QWORD *)(*a6 + (v652 >> 29));
                v1570 = *(int *)((char *)v648 + (v652 >> 30));
                v1454 = ((v46 << 30) - 0x300000000) >> 32;
                v1520 = ((v46 << 30) - 0x200000000) >> 32;
                result = ((v46 << 30) - 0x100000000) >> 32;
                v1506 = 4 * v1428;
                v1464 = 4 * *(uint64_t *)((char *)*a5 + v650);
                v1535 = 4 * *(uint64_t *)((char *)*a5 + (v652 >> 29));
                do
                {
                  v1439 = v44;
                  if (v1570 >= 1)
                  {
                    v653 = 0;
                    v654 = *(_QWORD *)(v651 + 8 * v1454);
                    v655 = v648[v1454];
                    v656 = 4 * v649[v1454];
                    v657 = v1506;
                    v658 = v44;
                    do
                    {
                      if (v655 >= 1)
                      {
                        v659 = 0;
                        v660 = *(_QWORD *)(v651 + 8 * v1520);
                        v661 = v648[v1520];
                        v662 = 4 * v649[v1520];
                        v663 = v657;
                        v664 = v658;
                        do
                        {
                          if (v661 >= 1)
                          {
                            v665 = 0;
                            v666 = *(_QWORD *)(v651 + 8 * result);
                            v667 = v648[result];
                            v668 = *v11;
                            v669 = 4 * v649[result];
                            v670 = v663;
                            v671 = v664;
                            do
                            {
                              if (v667 >= 1)
                              {
                                v672 = *(_QWORD *)(v668 + 152);
                                v673 = (_DWORD *)(v45[19] + v670);
                                v674 = v667;
                                do
                                {
                                  *(_BYTE *)(v672 + v671) = *v673 != 0;
                                  v672 += v666;
                                  v673 = (_DWORD *)((char *)v673 + v669);
                                  --v674;
                                }
                                while (v674);
                              }
                              v671 += v660;
                              ++v665;
                              v670 += v662;
                            }
                            while (v665 != v661);
                          }
                          v664 += v654;
                          ++v659;
                          v663 += v656;
                        }
                        while (v659 != v655);
                      }
                      v658 += v1553;
                      ++v653;
                      v657 += v1535;
                    }
                    while (v653 != v1570);
                  }
                  v44 = v1439 + v1474;
                  v1506 += v1464;
                  ++v1494;
                }
                while (v1494 != v1484);
              }
              break;
            default:
              v537 = (char *)a4[1];
              LODWORD(v538) = 1;
              v539 = -20;
              do
              {
                v538 = *(int *)&v537[v539] * (uint64_t)(int)v538;
                v539 += 4;
              }
              while (v539);
              v1426 = v45[6];
              if (v1426)
              {
                v540 = 0;
                v541 = (v46 << 30) - 0x500000000;
                v542 = *a4;
                v1403 = *v8;
                v1413 = ((unint64_t)(v537 - (char *)*a4) >> 2) - 1;
                v543 = *a5;
                v544 = *a6;
                v1463 = *(_QWORD *)(*a6 + (v541 >> 29));
                v1473 = *(int *)((char *)*a4 + (v541 >> 30));
                v1408 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1399 = ((v46 << 30) - 0x400000000) >> 32;
                v1445 = ((v46 << 30) - 0x300000000) >> 32;
                v1518 = ((v46 << 30) - 0x200000000) >> 32;
                v545 = ((v46 << 30) - 0x100000000) >> 32;
                v1453 = 4 * *(uint64_t *)((char *)*a5 + (v541 >> 29));
                v1438 = *a8;
                v1418 = v538;
                do
                {
                  v546 = v1413;
                  if ((v1413 & 0x80000000) != 0)
                  {
                    v547 = 0;
                    v548 = v1408;
                  }
                  else
                  {
                    v547 = 0;
                    LODWORD(result) = v540;
                    v548 = v1408;
                    do
                    {
                      v549 = ldiv((int)result, v542[v546]);
                      result = v549.quot;
                      v547 += v543[v546--] * v549.rem;
                    }
                    while (v546 != -1);
                  }
                  v1434 = v540;
                  v550 = 0;
                  if ((v548 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v540;
                    do
                    {
                      v551 = ldiv((int)result, *(int *)(v1403 + 4 * v548));
                      result = v551.quot;
                      v550 += *(_QWORD *)(v544 + 8 * v548--) * v551.rem;
                    }
                    while (v548 != -1);
                  }
                  if (v1473 >= 1)
                  {
                    v552 = 0;
                    v1551 = *(_QWORD *)(v544 + 8 * v1399);
                    v1568 = v542[v1399];
                    v1493 = 4 * (v547 + v1428);
                    v1505 = v550 + v1438;
                    v1534 = 4 * v543[v1399];
                    do
                    {
                      v1483 = v552;
                      if (v1568 >= 1)
                      {
                        v553 = 0;
                        v554 = *(_QWORD *)(v544 + 8 * v1445);
                        v555 = v542[v1445];
                        v556 = 4 * v543[v1445];
                        v558 = v1493;
                        v557 = v1505;
                        do
                        {
                          if (v555 >= 1)
                          {
                            v559 = 0;
                            v560 = *(_QWORD *)(v544 + 8 * v1518);
                            v561 = v542[v1518];
                            v562 = 4 * v543[v1518];
                            result = v558;
                            v563 = v557;
                            do
                            {
                              if (v561 >= 1)
                              {
                                v564 = 0;
                                v565 = *(_QWORD *)(v544 + 8 * v545);
                                v566 = v542[v545];
                                v567 = *v11;
                                v568 = 4 * v543[v545];
                                v569 = result;
                                v570 = v563;
                                do
                                {
                                  if (v566 >= 1)
                                  {
                                    v571 = *(_QWORD *)(v567 + 152);
                                    v572 = (_DWORD *)(v45[19] + v569);
                                    v573 = v566;
                                    do
                                    {
                                      *(_BYTE *)(v571 + v570) = *v572 != 0;
                                      v571 += v565;
                                      v572 = (_DWORD *)((char *)v572 + v568);
                                      --v573;
                                    }
                                    while (v573);
                                  }
                                  v570 += v560;
                                  ++v564;
                                  v569 += v562;
                                }
                                while (v564 != v561);
                              }
                              v563 += v554;
                              ++v559;
                              result += v556;
                            }
                            while (v559 != v555);
                          }
                          v557 += v1551;
                          ++v553;
                          v558 += v1534;
                        }
                        while (v553 != v1568);
                      }
                      v1505 += v1463;
                      v552 = v1483 + 1;
                      v1493 += v1453;
                    }
                    while (v1483 + 1 != v1473);
                  }
                  v540 += v1418;
                }
                while (v1426 > v1434 + v1418);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v14 = 0;
            v15 = **(_DWORD **)(*(_QWORD *)result + 152);
            v16 = v8[19];
            do
              *(_BYTE *)(v16 + v14++) = v15;
            while (*(_QWORD *)(*(_QWORD *)a2 + 48) > v14);
          }
          break;
        case 1:
          v55 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v55)
          {
            v56 = *(int **)(*(_QWORD *)result + 152);
            v57 = (_BYTE *)v8[19];
            v58 = 4 * v55;
            do
            {
              v59 = *v56++;
              *v57++ = v59;
              v58 -= 4;
            }
            while (v58);
          }
          break;
        case 2:
          v60 = *a7;
          v61 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v62 = 0;
                v63 = *(_QWORD *)(v61 + 152);
                v64 = v8[19];
                do
                {
                  *(_BYTE *)(v64 + v62) = *(_DWORD *)(v63 + 4 * v60);
                  v60 += **a5;
                  ++v62;
                }
                while (**a4 > (int)v62);
              }
              break;
            case 2:
              v243 = *a4;
              v244 = **a4;
              if (v244 >= 1)
              {
                v245 = 0;
                v246 = 0;
                v247 = *(_QWORD *)(v61 + 152);
                v248 = v8[19];
                do
                {
                  v249 = v243[1];
                  if (v249 < 1)
                  {
                    v250 = *a5;
                    v251 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v248 + v246 + result) = *(_DWORD *)(v247 + 4 * v60);
                      v250 = *a5;
                      v251 = (*a5)[1];
                      v60 += v251;
                      v243 = *a4;
                      v249 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v249);
                    v244 = *v243;
                    v246 += result;
                  }
                  v60 = *v250 + v60 - v251 * v249;
                  ++v245;
                }
                while (v245 < v244);
              }
              break;
            case 3:
              v252 = *a4;
              v253 = **a4;
              if (v253 >= 1)
              {
                v254 = 0;
                v255 = 0;
                v256 = *(_QWORD *)(v61 + 152);
                v257 = v8[19];
                do
                {
                  v258 = v252[1];
                  if (v258 < 1)
                  {
                    v262 = *a5;
                    v263 = (*a5)[1];
                  }
                  else
                  {
                    for (i = 0; i < v258; ++i)
                    {
                      v260 = v252[2];
                      if (v260 < 1)
                      {
                        v262 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v261 = 0;
                        do
                        {
                          *(_BYTE *)(v257 + v255 + v261) = *(_DWORD *)(v256 + 4 * v60);
                          v262 = *a5;
                          result = (*a5)[2];
                          v60 += result;
                          v252 = *a4;
                          v260 = (*a4)[2];
                          ++v261;
                        }
                        while ((int)v261 < v260);
                        v255 += v261;
                      }
                      v263 = v262[1];
                      v60 = v263 + v60 - result * v260;
                      v258 = v252[1];
                    }
                    v253 = *v252;
                  }
                  v60 = *v262 + v60 - v263 * v258;
                  ++v254;
                }
                while (v254 < v253);
              }
              break;
            case 4:
              v264 = *a4;
              v265 = **a4;
              if (v265 >= 1)
              {
                v266 = 0;
                v267 = 0;
                v268 = *(_QWORD *)(v61 + 152);
                v269 = v8[19];
                do
                {
                  v270 = v264[1];
                  if (v270 < 1)
                  {
                    v276 = *a5;
                    v278 = (*a5)[1];
                  }
                  else
                  {
                    for (j = 0; j < v270; ++j)
                    {
                      v272 = v264[2];
                      if (v272 < 1)
                      {
                        v276 = *a5;
                        v277 = (*a5)[2];
                      }
                      else
                      {
                        for (k = 0; k < v272; ++k)
                        {
                          v274 = v264[3];
                          if (v274 < 1)
                          {
                            v276 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v275 = 0;
                            do
                            {
                              *(_BYTE *)(v269 + v267 + v275) = *(_DWORD *)(v268 + 4 * v60);
                              v276 = *a5;
                              result = (*a5)[3];
                              v60 += result;
                              v264 = *a4;
                              v274 = (*a4)[3];
                              ++v275;
                            }
                            while ((int)v275 < v274);
                            v267 += v275;
                          }
                          v277 = v276[2];
                          v60 = v277 + v60 - result * v274;
                          v272 = v264[2];
                        }
                      }
                      v278 = v276[1];
                      v60 = v278 + v60 - v277 * v272;
                      v270 = v264[1];
                    }
                    v265 = *v264;
                  }
                  v60 = *v276 + v60 - v278 * v270;
                  ++v266;
                }
                while (v266 < v265);
              }
              break;
            default:
              if (v8[6])
              {
                v234 = 0;
                v235 = *(_QWORD *)(v61 + 152) + 4 * v60;
                v236 = v8[19];
                do
                {
                  v237 = *a4;
                  v238 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v239 = 0;
                  v240 = (v238 - 1);
                  if ((int)v238 - 1 >= 0)
                  {
                    v241 = *a5;
                    LODWORD(result) = v234;
                    do
                    {
                      v242 = ldiv((int)result, v237[v240]);
                      result = v242.quot;
                      v239 += v241[v240--] * v242.rem;
                    }
                    while (v240 != -1);
                  }
                  *(_BYTE *)(v236 + v234++) = *(_DWORD *)(v235 + 4 * v239);
                }
                while (v234 < *(_QWORD *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          v1567 = *a7;
          v65 = *a8;
          v66 = *(_QWORD **)result;
          v67 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v67 >> 2)
          {
            case 1:
              v68 = (v67 << 30) - 0x100000000;
              v69 = *(int *)((char *)*a4 + (v68 >> 30));
              if (v69 >= 1)
              {
                v70 = v68 >> 29;
                v71 = *(uint64_t *)((char *)*a5 + v70);
                v72 = *(_QWORD *)(*a6 + v70);
                v73 = (_BYTE *)(v8[19] + v65);
                v74 = (_DWORD *)(v66[19] + 4 * v1567);
                v75 = 4 * v71;
                do
                {
                  *v73 = *v74;
                  v73 += v72;
                  v74 = (_DWORD *)((char *)v74 + v75);
                  --v69;
                }
                while (v69);
              }
              break;
            case 2:
              v697 = (v67 << 30) - 0x200000000;
              v698 = *(int *)((char *)*a4 + (v697 >> 30));
              if (v698 >= 1)
              {
                v699 = 0;
                v700 = v697 >> 29;
                v701 = *(uint64_t *)((char *)*a5 + v700);
                v702 = *(_QWORD *)(*a6 + v700);
                v703 = 4 * v1567;
                v704 = 4 * v701;
                do
                {
                  v705 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                  v706 = *(int *)((char *)*a4 + (v705 >> 30));
                  if (v706 >= 1)
                  {
                    v707 = v705 >> 29;
                    v708 = *(uint64_t *)((char *)*a5 + v707);
                    v709 = *(_QWORD *)(*a6 + v707);
                    v710 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                    v711 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v703);
                    result = 4 * v708;
                    do
                    {
                      *(_BYTE *)(v710 + v65) = *v711;
                      v710 += v709;
                      v711 = (_DWORD *)((char *)v711 + result);
                      --v706;
                    }
                    while (v706);
                  }
                  v65 += v702;
                  ++v699;
                  v703 += v704;
                }
                while (v699 != v698);
              }
              break;
            case 3:
              v712 = (v67 << 30) - 0x300000000;
              v713 = *(int *)((char *)*a4 + (v712 >> 30));
              if (v713 >= 1)
              {
                v714 = 0;
                v715 = v712 >> 29;
                v716 = *(uint64_t *)((char *)*a5 + v715);
                v717 = *(_QWORD *)(*a6 + v715);
                v718 = 4 * v1567;
                v719 = 4 * v716;
                do
                {
                  v720 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x200000000;
                  v721 = *(int *)((char *)*a4 + (v720 >> 30));
                  if (v721 >= 1)
                  {
                    v722 = 0;
                    v723 = v720 >> 29;
                    v724 = *(uint64_t *)((char *)*a5 + v723);
                    v725 = *(_QWORD *)(*a6 + v723);
                    result = 4 * v724;
                    v726 = v718;
                    v727 = v65;
                    do
                    {
                      v728 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                      v729 = *(int *)((char *)*a4 + (v728 >> 30));
                      if (v729 >= 1)
                      {
                        v730 = v728 >> 29;
                        v731 = *(uint64_t *)((char *)*a5 + v730);
                        v732 = *(_QWORD *)(*a6 + v730);
                        v733 = *(_QWORD *)(*v11 + 152);
                        v734 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v726);
                        v735 = 4 * v731;
                        do
                        {
                          *(_BYTE *)(v733 + v727) = *v734;
                          v733 += v732;
                          v734 = (_DWORD *)((char *)v734 + v735);
                          --v729;
                        }
                        while (v729);
                      }
                      v727 += v725;
                      ++v722;
                      v726 += result;
                    }
                    while (v722 != v721);
                  }
                  v65 += v717;
                  ++v714;
                  v718 += v719;
                }
                while (v714 != v713);
              }
              break;
            case 4:
              goto LABEL_552;
            case 5:
              v736 = (v67 << 30) - 0x500000000;
              v737 = *(int *)((char *)*a4 + (v736 >> 30));
              if (v737 >= 1)
              {
                v738 = v736 >> 29;
                v739 = *(uint64_t *)((char *)*a5 + v738);
                v740 = *(_QWORD *)(*a6 + v738);
                do
                {
                  v1567 += v739;
                  v65 += v740;
                  --v737;
                }
                while (v737);
              }
              break;
            default:
              LODWORD(v675) = 1;
              v676 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v675 = a4[1][v676++] * (uint64_t)(int)v675;
              while (v676 * 4);
              if (v66[6])
              {
                result = 0;
                v1495 = *a8;
                v1507 = v675;
                do
                {
                  v677 = *a4;
                  v678 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v679 = (v678 - 1);
                  v1521 = v66;
                  v1536 = result;
                  v680 = 0;
                  if ((int)v678 - 1 >= 0)
                  {
                    v681 = *a5;
                    do
                    {
                      v682 = ldiv((int)result, v677[v679]);
                      LODWORD(result) = v682.quot;
                      v680 += v681[v679--] * v682.rem;
                    }
                    while (v679 != -1);
                  }
                  v683 = *(_QWORD *)*v11;
                  v684 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v683) >> 2;
                  v685 = *a6;
                  v686 = 0;
                  v687 = (v684 - 1);
                  if ((int)v684 - 1 >= 0)
                  {
                    quot = v1536;
                    do
                    {
                      v689 = ldiv(quot, *(int *)(v683 + 4 * v687));
                      quot = v689.quot;
                      v686 += *(_QWORD *)(v685 + 8 * v687--) * v689.rem;
                    }
                    while (v687 != -1);
                  }
                  v66 = v1521;
                  v690 = ((v66[1] - *v66) << 30) - 0x500000000;
                  v691 = *(int *)((char *)v677 + (v690 >> 30));
                  if (v691 >= 1)
                  {
                    v692 = v680 + v1567;
                    v693 = v690 >> 29;
                    v694 = *(uint64_t *)((char *)*a5 + v693);
                    v695 = *(_QWORD *)(v685 + v693);
                    v696 = v686 + v1495;
                    do
                    {
                      v692 += v694;
                      v696 += v695;
                      --v691;
                    }
                    while (v691);
                    v66 = *(_QWORD **)v12;
                  }
                  result = v1536 + v1507;
                }
                while (v66[6] > (unint64_t)(v1536 + v1507));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v17 = v8[6];
          if (v17)
          {
            v18 = **(_DWORD **)(*(_QWORD *)result + 152);
            v19 = (_DWORD *)v8[19];
            do
            {
              *v19++ = v18;
              --v17;
            }
            while (v17);
          }
          break;
        case 1:
          goto LABEL_35;
        case 2:
          v76 = *a7;
          v77 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v78 = *a4;
              if (**a4 >= 1)
              {
                v79 = 0;
                v80 = *(_QWORD *)(v77 + 152);
                v81 = v8[19];
                v82 = **a5;
                v83 = (_DWORD *)(v80 + 4 * v76);
                do
                {
                  *(_DWORD *)(v81 + 4 * v79) = *v83;
                  v83 += v82;
                  ++v79;
                }
                while (*v78 > (int)v79);
              }
              break;
            case 2:
              v289 = *a4;
              v290 = **a4;
              if (v290 >= 1)
              {
                v291 = 0;
                v292 = 0;
                v293 = *(_QWORD *)(v77 + 152);
                v294 = v8[19];
                v295 = **a5;
                v296 = (*a5)[1];
                v297 = v289[1];
                do
                {
                  if (v297 >= 1)
                  {
                    v298 = 0;
                    do
                    {
                      *(_DWORD *)(v294 + 4 * v292 + 4 * v298) = *(_DWORD *)(v293 + 4 * v76);
                      v76 += v296;
                      v297 = v289[1];
                      ++v298;
                    }
                    while ((int)v298 < v297);
                    v290 = *v289;
                    v292 += v298;
                  }
                  result = v297;
                  v76 = v76 + v295 - v296 * v297;
                  ++v291;
                }
                while (v291 < v290);
              }
              break;
            case 3:
              v299 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v300 = 0;
                v301 = 0;
                v302 = *(_QWORD *)(v77 + 152);
                v303 = v8[19];
                v304 = *a5;
                v305 = **a5;
                v306 = (*a5)[1];
                v307 = v299[1];
                do
                {
                  if (v307 >= 1)
                  {
                    v308 = 0;
                    v309 = *a5;
                    v310 = v304[2];
                    v311 = v299[2];
                    do
                    {
                      if (v311 >= 1)
                      {
                        v312 = 0;
                        v313 = v309[2];
                        do
                        {
                          *(_DWORD *)(v303 + 4 * v301 + 4 * v312) = *(_DWORD *)(v302 + 4 * v76);
                          v76 += v313;
                          v311 = v299[2];
                          ++v312;
                        }
                        while ((int)v312 < v311);
                        v307 = v299[1];
                        v301 += v312;
                      }
                      v76 = v76 + v306 - v310 * v311;
                      ++v308;
                    }
                    while (v308 < v307);
                    result = *v299;
                  }
                  v76 = v76 + v305 - v306 * v307;
                  ++v300;
                }
                while (v300 < (int)result);
              }
              break;
            case 4:
              v314 = *a4;
              v315 = **a4;
              if (v315 >= 1)
              {
                v316 = 0;
                v317 = 0;
                v318 = *(_QWORD *)(v77 + 152);
                v319 = v8[19];
                v320 = *a5;
                v321 = **a5;
                v322 = (*a5)[1];
                v323 = v314[1];
                do
                {
                  if (v323 >= 1)
                  {
                    v324 = 0;
                    v325 = *a5;
                    v326 = v320[2];
                    v327 = v314[2];
                    do
                    {
                      if (v327 >= 1)
                      {
                        v328 = 0;
                        v329 = *a5;
                        v330 = v325[2];
                        v331 = v325[3];
                        v332 = v314[3];
                        do
                        {
                          if (v332 >= 1)
                          {
                            v333 = 0;
                            v334 = v329[3];
                            do
                            {
                              *(_DWORD *)(v319 + 4 * v317 + 4 * v333) = *(_DWORD *)(v318 + 4 * v76);
                              v76 += v334;
                              v332 = v314[3];
                              ++v333;
                            }
                            while ((int)v333 < v332);
                            v327 = v314[2];
                            v317 += v333;
                          }
                          v76 = v76 + v330 - v331 * v332;
                          ++v328;
                        }
                        while (v328 < v327);
                        v323 = v314[1];
                      }
                      v76 = v76 + v322 - v326 * v327;
                      ++v324;
                    }
                    while (v324 < v323);
                    v315 = *v314;
                  }
                  result = v323;
                  v76 = v76 + v321 - v322 * v323;
                  ++v316;
                }
                while (v316 < v315);
              }
              break;
            default:
              v279 = v8[6];
              if (v279)
              {
                v280 = 0;
                v281 = *(_QWORD *)(v77 + 152) + 4 * v76;
                v282 = v8[19];
                v283 = *a4;
                v284 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v285 = *a5;
                do
                {
                  v286 = 0;
                  if ((v284 & 0x80000000) == 0)
                  {
                    v287 = v284;
                    LODWORD(result) = v280;
                    do
                    {
                      v288 = ldiv((int)result, v283[v287]);
                      result = v288.quot;
                      v286 += v285[v287--] * v288.rem;
                    }
                    while (v287 != -1);
                  }
                  *(_DWORD *)(v282 + 4 * v280++) = *(_DWORD *)(v281 + 4 * v286);
                }
                while (v280 != v279);
              }
              break;
          }
          break;
        case 3:
          v1423 = *a8;
          v1429 = *a7;
          v84 = *(_QWORD **)result;
          v85 = v84[1] - *v84;
          switch(v85 >> 2)
          {
            case 1:
              v86 = (v85 << 30) - 0x100000000;
              v87 = *(int *)((char *)*a4 + (v86 >> 30));
              if (v87 >= 1)
              {
                v88 = v86 >> 29;
                v89 = *(uint64_t *)((char *)*a5 + v88);
                v90 = *(_QWORD *)(*a6 + v88);
                v91 = (_DWORD *)(v8[19] + 4 * v1423);
                v92 = (_DWORD *)(v84[19] + 4 * v1429);
                v93 = 4 * v90;
                v94 = 4 * v89;
                do
                {
                  *v91 = *v92;
                  v91 = (_DWORD *)((char *)v91 + v93);
                  v92 = (_DWORD *)((char *)v92 + v94);
                  --v87;
                }
                while (v87);
              }
              break;
            case 2:
              v779 = (v85 << 30) - 0x200000000;
              v780 = *a4;
              v781 = *(int *)((char *)*a4 + (v779 >> 30));
              if (v781 >= 1)
              {
                v782 = 0;
                v783 = v779 >> 29;
                v784 = *(uint64_t *)((char *)*a5 + v783);
                v785 = *(_QWORD *)(*a6 + v783);
                v786 = (v85 << 30) - 0x100000000;
                v787 = *(uint64_t *)((char *)*a5 + (v786 >> 29));
                v788 = *(_QWORD *)(*a6 + (v786 >> 29));
                v789 = v786 >> 32;
                v790 = 4 * v1423;
                v791 = 4 * v785;
                v792 = 4 * v788;
                v793 = 4 * v1429;
                v794 = 4 * v784;
                result = 4 * v787;
                do
                {
                  v795 = v780[v789];
                  if (v795 >= 1)
                  {
                    v796 = (_DWORD *)(v8[19] + v790);
                    v797 = (_DWORD *)(v84[19] + v793);
                    do
                    {
                      *v796 = *v797;
                      v796 = (_DWORD *)((char *)v796 + v792);
                      v797 = (_DWORD *)((char *)v797 + result);
                      --v795;
                    }
                    while (v795);
                  }
                  ++v782;
                  v790 += v791;
                  v793 += v794;
                }
                while (v782 != v781);
              }
              break;
            case 3:
              v798 = (v85 << 30) - 0x300000000;
              v799 = *a4;
              v800 = *(int *)((char *)*a4 + (v798 >> 30));
              if (v800 >= 1)
              {
                v801 = 0;
                v802 = *a5;
                v803 = v798 >> 29;
                v804 = *(uint64_t *)((char *)*a5 + (v798 >> 29));
                v805 = *a6;
                v806 = *(_QWORD *)(*a6 + v803);
                v807 = v85 << 30;
                v808 = (v85 << 30) - 0x200000000;
                v809 = v808 >> 32;
                v808 >>= 29;
                v810 = *(uint64_t *)((char *)*a5 + v808);
                v811 = *(_QWORD *)(*a6 + v808);
                v812 = (v807 - 0x100000000) >> 32;
                v813 = 4 * v1423;
                v814 = 4 * v806;
                v815 = 4 * v811;
                result = 4 * v1429;
                v816 = 4 * v804;
                v817 = 4 * v810;
                do
                {
                  v818 = v799[v809];
                  if (v818 >= 1)
                  {
                    v819 = 0;
                    v820 = (_QWORD *)*v11;
                    v821 = 4 * *(_QWORD *)(v805 + 8 * v812);
                    v822 = 4 * v802[v812];
                    v823 = result;
                    v824 = v813;
                    do
                    {
                      v825 = v799[v812];
                      if (v825 >= 1)
                      {
                        v826 = (_DWORD *)(v820[19] + v824);
                        v827 = (_DWORD *)(v84[19] + v823);
                        do
                        {
                          *v826 = *v827;
                          v826 = (_DWORD *)((char *)v826 + v821);
                          v827 = (_DWORD *)((char *)v827 + v822);
                          --v825;
                        }
                        while (v825);
                      }
                      ++v819;
                      v824 += v815;
                      v823 += v817;
                    }
                    while (v819 != v818);
                  }
                  ++v801;
                  v813 += v814;
                  result += v816;
                }
                while (v801 != v800);
              }
              break;
            case 4:
              v828 = (v85 << 30) - 0x400000000;
              v829 = *a4;
              v1572 = *(int *)((char *)*a4 + (v828 >> 30));
              if (v1572 >= 1)
              {
                v830 = 0;
                v831 = *a5;
                v832 = v828 >> 29;
                v833 = v85 << 30;
                v834 = *a6;
                v1555 = (v833 - 0x300000000) >> 32;
                v835 = (v833 - 0x300000000) >> 29;
                v836 = *(uint64_t *)((char *)*a5 + v835);
                v837 = *(_QWORD *)(*a6 + v835);
                v838 = (v833 - 0x200000000) >> 32;
                v839 = (v833 - 0x100000000) >> 32;
                v840 = 4 * v1423;
                v1538 = 4 * *(_QWORD *)(*a6 + v832);
                result = 4 * v837;
                v841 = 4 * v1429;
                v1523 = 4 * *(uint64_t *)((char *)*a5 + v832);
                v842 = 4 * v836;
                do
                {
                  v843 = v829[v1555];
                  if (v843 >= 1)
                  {
                    v844 = 0;
                    v845 = 4 * *(_QWORD *)(v834 + 8 * v838);
                    v846 = 4 * v831[v838];
                    v847 = v841;
                    v848 = v840;
                    do
                    {
                      v849 = v829[v838];
                      if (v849 >= 1)
                      {
                        v850 = 0;
                        v851 = (_QWORD *)*v11;
                        v852 = 4 * *(_QWORD *)(v834 + 8 * v839);
                        v853 = 4 * v831[v839];
                        v854 = v847;
                        v855 = v848;
                        do
                        {
                          v856 = v829[v839];
                          if (v856 >= 1)
                          {
                            v857 = (_DWORD *)(v851[19] + v855);
                            v858 = (_DWORD *)(v84[19] + v854);
                            do
                            {
                              *v857 = *v858;
                              v857 = (_DWORD *)((char *)v857 + v852);
                              v858 = (_DWORD *)((char *)v858 + v853);
                              --v856;
                            }
                            while (v856);
                          }
                          ++v850;
                          v855 += v845;
                          v854 += v846;
                        }
                        while (v850 != v849);
                      }
                      ++v844;
                      v848 += result;
                      v847 += v842;
                    }
                    while (v844 != v843);
                  }
                  ++v830;
                  v840 += v1538;
                  v841 += v1523;
                }
                while (v830 != v1572);
              }
              break;
            case 5:
              v859 = (v85 << 30) - 0x500000000;
              v860 = *a4;
              v1476 = *(int *)((char *)*a4 + (v859 >> 30));
              if (v1476 >= 1)
              {
                v1486 = 0;
                v861 = *a5;
                v862 = v859 >> 29;
                v863 = *a6;
                v864 = v85 << 30;
                v865 = (v864 - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v865);
                v1466 = (v864 - 0x400000000) >> 32;
                v866 = *(_QWORD *)(*a6 + v865);
                v1556 = (v864 - 0x300000000) >> 32;
                v867 = (v864 - 0x200000000) >> 32;
                v868 = (v864 - 0x100000000) >> 32;
                v1509 = 4 * v1423;
                v1456 = 4 * *(_QWORD *)(*a6 + v862);
                v1539 = 4 * v866;
                v1497 = 4 * v1429;
                v1447 = 4 * *(uint64_t *)((char *)*a5 + v862);
                v1524 = 4 * result;
                do
                {
                  v1573 = v860[v1466];
                  if (v1573 >= 1)
                  {
                    v869 = 0;
                    v870 = 4 * *(_QWORD *)(v863 + 8 * v1556);
                    v871 = 4 * v861[v1556];
                    v872 = v1497;
                    v873 = v1509;
                    do
                    {
                      v874 = v860[v1556];
                      if (v874 >= 1)
                      {
                        v875 = 0;
                        v876 = 4 * *(_QWORD *)(v863 + 8 * v867);
                        v877 = 4 * v861[v867];
                        v878 = v872;
                        v879 = v873;
                        do
                        {
                          v880 = v860[v867];
                          if (v880 >= 1)
                          {
                            v881 = 0;
                            result = *v11;
                            v882 = 4 * *(_QWORD *)(v863 + 8 * v868);
                            v883 = 4 * v861[v868];
                            v884 = v878;
                            v885 = v879;
                            do
                            {
                              v886 = v860[v868];
                              if (v886 >= 1)
                              {
                                v887 = (_DWORD *)(*(_QWORD *)(result + 152) + v885);
                                v888 = (_DWORD *)(v84[19] + v884);
                                do
                                {
                                  *v887 = *v888;
                                  v887 = (_DWORD *)((char *)v887 + v882);
                                  v888 = (_DWORD *)((char *)v888 + v883);
                                  --v886;
                                }
                                while (v886);
                              }
                              ++v881;
                              v885 += v876;
                              v884 += v877;
                            }
                            while (v881 != v880);
                          }
                          ++v875;
                          v879 += v870;
                          v878 += v871;
                        }
                        while (v875 != v874);
                      }
                      ++v869;
                      v873 += v1539;
                      v872 += v1524;
                    }
                    while (v869 != v1573);
                  }
                  v1509 += v1456;
                  v1497 += v1447;
                  ++v1486;
                }
                while (v1486 != v1476);
              }
              break;
            default:
              v741 = (char *)a4[1];
              LODWORD(v742) = 1;
              v743 = -20;
              do
              {
                v742 = *(int *)&v741[v743] * (uint64_t)(int)v742;
                v743 += 4;
              }
              while (v743);
              v1419 = v84[6];
              if (v1419)
              {
                result = 0;
                v744 = (v85 << 30) - 0x500000000;
                v745 = *a4;
                v1455 = *v8;
                v746 = *a5;
                v1404 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1409 = ((unint64_t)(v741 - (char *)*a4) >> 2) - 1;
                v1400 = v744 >> 32;
                v747 = *a6;
                v1465 = ((v85 << 30) - 0x400000000) >> 32;
                v1554 = ((v85 << 30) - 0x300000000) >> 32;
                v748 = ((v85 << 30) - 0x200000000) >> 32;
                v749 = ((v85 << 30) - 0x100000000) >> 32;
                v1440 = 4 * *(uint64_t *)((char *)*a5 + (v744 >> 29));
                v1446 = 4 * *(_QWORD *)(*a6 + (v744 >> 29));
                v1414 = v742;
                do
                {
                  v750 = v1409;
                  v1435 = result;
                  v751 = 0;
                  if ((v1409 & 0x80000000) != 0)
                  {
                    v752 = v1404;
                  }
                  else
                  {
                    v752 = v1404;
                    do
                    {
                      v753 = ldiv((int)result, v745[v750]);
                      LODWORD(result) = v753.quot;
                      v751 += v746[v750--] * v753.rem;
                    }
                    while (v750 != -1);
                  }
                  v754 = 0;
                  if ((v752 & 0x80000000) == 0)
                  {
                    v755 = v1435;
                    do
                    {
                      v756 = ldiv(v755, *(int *)(v1455 + 4 * v752));
                      v755 = v756.quot;
                      v754 += *(_QWORD *)(v747 + 8 * v752--) * v756.rem;
                    }
                    while (v752 != -1);
                  }
                  v1475 = v745[v1400];
                  if (v1475 >= 1)
                  {
                    v757 = 0;
                    v1508 = 4 * (v754 + v1423);
                    v1537 = 4 * *(_QWORD *)(v747 + 8 * v1465);
                    v1496 = 4 * (v751 + v1429);
                    v1522 = 4 * v746[v1465];
                    do
                    {
                      v1485 = v757;
                      v1571 = v745[v1465];
                      if (v1571 >= 1)
                      {
                        v758 = 0;
                        v759 = 4 * *(_QWORD *)(v747 + 8 * v1554);
                        v760 = 4 * v746[v1554];
                        v762 = v1496;
                        v761 = v1508;
                        do
                        {
                          v763 = v745[v1554];
                          if (v763 >= 1)
                          {
                            v764 = 0;
                            v765 = 4 * *(_QWORD *)(v747 + 8 * v748);
                            v766 = 4 * v746[v748];
                            v767 = v762;
                            v768 = v761;
                            do
                            {
                              v769 = v745[v748];
                              if (v769 >= 1)
                              {
                                v770 = 0;
                                v771 = (_QWORD *)*v11;
                                v772 = 4 * *(_QWORD *)(v747 + 8 * v749);
                                v773 = 4 * v746[v749];
                                v774 = v767;
                                v775 = v768;
                                do
                                {
                                  v776 = v745[v749];
                                  if (v776 >= 1)
                                  {
                                    v777 = (_DWORD *)(v771[19] + v775);
                                    v778 = (_DWORD *)(v84[19] + v774);
                                    do
                                    {
                                      *v777 = *v778;
                                      v777 = (_DWORD *)((char *)v777 + v772);
                                      v778 = (_DWORD *)((char *)v778 + v773);
                                      --v776;
                                    }
                                    while (v776);
                                  }
                                  ++v770;
                                  v775 += v765;
                                  v774 += v766;
                                }
                                while (v770 != v769);
                              }
                              ++v764;
                              v768 += v759;
                              v767 += v760;
                            }
                            while (v764 != v763);
                          }
                          ++v758;
                          v761 += v1537;
                          v762 += v1522;
                        }
                        while (v758 != v1571);
                      }
                      v757 = v1485 + 1;
                      v1508 += v1446;
                      v1496 += v1440;
                    }
                    while (v1485 + 1 != v1475);
                  }
                  result = v1435 + v1414;
                }
                while (v1419 > v1435 + v1414);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v20 = 0;
            v21 = **(_DWORD **)(*(_QWORD *)result + 152);
            v22 = v8[19];
            do
              *(_BYTE *)(v22 + v20++) = v21;
            while (*(_QWORD *)(*(_QWORD *)a2 + 48) > v20);
          }
          break;
        case 1:
          v95 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v95)
          {
            v96 = *(int **)(*(_QWORD *)result + 152);
            v97 = (_BYTE *)v8[19];
            v98 = 4 * v95;
            do
            {
              v99 = *v96++;
              *v97++ = v99;
              v98 -= 4;
            }
            while (v98);
          }
          break;
        case 2:
          v100 = *a7;
          v101 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v102 = 0;
                v103 = *(_QWORD *)(v101 + 152);
                v104 = v8[19];
                do
                {
                  *(_BYTE *)(v104 + v102) = *(_DWORD *)(v103 + 4 * v100);
                  v100 += **a5;
                  ++v102;
                }
                while (**a4 > (int)v102);
              }
              break;
            case 2:
              v344 = *a4;
              v345 = **a4;
              if (v345 >= 1)
              {
                v346 = 0;
                v347 = 0;
                v348 = *(_QWORD *)(v101 + 152);
                v349 = v8[19];
                do
                {
                  v350 = v344[1];
                  if (v350 < 1)
                  {
                    v351 = *a5;
                    v352 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v349 + v347 + result) = *(_DWORD *)(v348 + 4 * v100);
                      v351 = *a5;
                      v352 = (*a5)[1];
                      v100 += v352;
                      v344 = *a4;
                      v350 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v350);
                    v345 = *v344;
                    v347 += result;
                  }
                  v100 = *v351 + v100 - v352 * v350;
                  ++v346;
                }
                while (v346 < v345);
              }
              break;
            case 3:
              v353 = *a4;
              v354 = **a4;
              if (v354 >= 1)
              {
                v355 = 0;
                v356 = 0;
                v357 = *(_QWORD *)(v101 + 152);
                v358 = v8[19];
                do
                {
                  v359 = v353[1];
                  if (v359 < 1)
                  {
                    v363 = *a5;
                    v364 = (*a5)[1];
                  }
                  else
                  {
                    for (m = 0; m < v359; ++m)
                    {
                      v361 = v353[2];
                      if (v361 < 1)
                      {
                        v363 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v362 = 0;
                        do
                        {
                          *(_BYTE *)(v358 + v356 + v362) = *(_DWORD *)(v357 + 4 * v100);
                          v363 = *a5;
                          result = (*a5)[2];
                          v100 += result;
                          v353 = *a4;
                          v361 = (*a4)[2];
                          ++v362;
                        }
                        while ((int)v362 < v361);
                        v356 += v362;
                      }
                      v364 = v363[1];
                      v100 = v364 + v100 - result * v361;
                      v359 = v353[1];
                    }
                    v354 = *v353;
                  }
                  v100 = *v363 + v100 - v364 * v359;
                  ++v355;
                }
                while (v355 < v354);
              }
              break;
            case 4:
              v365 = *a4;
              v366 = **a4;
              if (v366 >= 1)
              {
                v367 = 0;
                v368 = 0;
                v369 = *(_QWORD *)(v101 + 152);
                v370 = v8[19];
                do
                {
                  v371 = v365[1];
                  if (v371 < 1)
                  {
                    v377 = *a5;
                    v379 = (*a5)[1];
                  }
                  else
                  {
                    for (n = 0; n < v371; ++n)
                    {
                      v373 = v365[2];
                      if (v373 < 1)
                      {
                        v377 = *a5;
                        v378 = (*a5)[2];
                      }
                      else
                      {
                        for (ii = 0; ii < v373; ++ii)
                        {
                          v375 = v365[3];
                          if (v375 < 1)
                          {
                            v377 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v376 = 0;
                            do
                            {
                              *(_BYTE *)(v370 + v368 + v376) = *(_DWORD *)(v369 + 4 * v100);
                              v377 = *a5;
                              result = (*a5)[3];
                              v100 += result;
                              v365 = *a4;
                              v375 = (*a4)[3];
                              ++v376;
                            }
                            while ((int)v376 < v375);
                            v368 += v376;
                          }
                          v378 = v377[2];
                          v100 = v378 + v100 - result * v375;
                          v373 = v365[2];
                        }
                      }
                      v379 = v377[1];
                      v100 = v379 + v100 - v378 * v373;
                      v371 = v365[1];
                    }
                    v366 = *v365;
                  }
                  v100 = *v377 + v100 - v379 * v371;
                  ++v367;
                }
                while (v367 < v366);
              }
              break;
            default:
              if (v8[6])
              {
                v335 = 0;
                v336 = *(_QWORD *)(v101 + 152) + 4 * v100;
                v337 = v8[19];
                do
                {
                  v338 = *a4;
                  v339 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v340 = 0;
                  v341 = (v339 - 1);
                  if ((int)v339 - 1 >= 0)
                  {
                    v342 = *a5;
                    LODWORD(result) = v335;
                    do
                    {
                      v343 = ldiv((int)result, v338[v341]);
                      result = v343.quot;
                      v340 += v342[v341--] * v343.rem;
                    }
                    while (v341 != -1);
                  }
                  *(_BYTE *)(v337 + v335++) = *(_DWORD *)(v336 + 4 * v340);
                }
                while (v335 < *(_QWORD *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          v1567 = *a7;
          v105 = *a8;
          v106 = *(_QWORD **)result;
          v107 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v107 >> 2)
          {
            case 1:
              v108 = (v107 << 30) - 0x100000000;
              v109 = *(int *)((char *)*a4 + (v108 >> 30));
              if (v109 >= 1)
              {
                v110 = v108 >> 29;
                v111 = *(uint64_t *)((char *)*a5 + v110);
                v112 = *(_QWORD *)(*a6 + v110);
                v113 = (_BYTE *)(v8[19] + v105);
                v114 = (_DWORD *)(v106[19] + 4 * v1567);
                v115 = 4 * v111;
                do
                {
                  *v113 = *v114;
                  v113 += v112;
                  v114 = (_DWORD *)((char *)v114 + v115);
                  --v109;
                }
                while (v109);
              }
              break;
            case 2:
              v911 = (v107 << 30) - 0x200000000;
              v912 = *(int *)((char *)*a4 + (v911 >> 30));
              if (v912 >= 1)
              {
                v913 = 0;
                v914 = v911 >> 29;
                v915 = *(uint64_t *)((char *)*a5 + v914);
                v916 = *(_QWORD *)(*a6 + v914);
                v917 = 4 * v1567;
                v918 = 4 * v915;
                do
                {
                  v919 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                  v920 = *(int *)((char *)*a4 + (v919 >> 30));
                  if (v920 >= 1)
                  {
                    v921 = v919 >> 29;
                    v922 = *(uint64_t *)((char *)*a5 + v921);
                    v923 = *(_QWORD *)(*a6 + v921);
                    v924 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                    v925 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v917);
                    result = 4 * v922;
                    do
                    {
                      *(_BYTE *)(v924 + v105) = *v925;
                      v924 += v923;
                      v925 = (_DWORD *)((char *)v925 + result);
                      --v920;
                    }
                    while (v920);
                  }
                  v105 += v916;
                  ++v913;
                  v917 += v918;
                }
                while (v913 != v912);
              }
              break;
            case 3:
              v926 = (v107 << 30) - 0x300000000;
              v927 = *(int *)((char *)*a4 + (v926 >> 30));
              if (v927 >= 1)
              {
                v928 = 0;
                v929 = v926 >> 29;
                v930 = *(uint64_t *)((char *)*a5 + v929);
                v931 = *(_QWORD *)(*a6 + v929);
                v932 = 4 * v1567;
                v933 = 4 * v930;
                do
                {
                  v934 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x200000000;
                  v935 = *(int *)((char *)*a4 + (v934 >> 30));
                  if (v935 >= 1)
                  {
                    v936 = 0;
                    v937 = v934 >> 29;
                    v938 = *(uint64_t *)((char *)*a5 + v937);
                    v939 = *(_QWORD *)(*a6 + v937);
                    result = 4 * v938;
                    v940 = v932;
                    v941 = v105;
                    do
                    {
                      v942 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                      v943 = *(int *)((char *)*a4 + (v942 >> 30));
                      if (v943 >= 1)
                      {
                        v944 = v942 >> 29;
                        v945 = *(uint64_t *)((char *)*a5 + v944);
                        v946 = *(_QWORD *)(*a6 + v944);
                        v947 = *(_QWORD *)(*v11 + 152);
                        v948 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v940);
                        v949 = 4 * v945;
                        do
                        {
                          *(_BYTE *)(v947 + v941) = *v948;
                          v947 += v946;
                          v948 = (_DWORD *)((char *)v948 + v949);
                          --v943;
                        }
                        while (v943);
                      }
                      v941 += v939;
                      ++v936;
                      v940 += result;
                    }
                    while (v936 != v935);
                  }
                  v105 += v931;
                  ++v928;
                  v932 += v933;
                }
                while (v928 != v927);
              }
              break;
            case 4:
LABEL_552:
              break;
            case 5:
              v950 = (v107 << 30) - 0x500000000;
              v951 = *(int *)((char *)*a4 + (v950 >> 30));
              if (v951 >= 1)
              {
                v952 = v950 >> 29;
                v953 = *(uint64_t *)((char *)*a5 + v952);
                v954 = *(_QWORD *)(*a6 + v952);
                do
                {
                  v1567 += v953;
                  v105 += v954;
                  --v951;
                }
                while (v951);
              }
              break;
            default:
              LODWORD(v889) = 1;
              v890 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v889 = a4[1][v890++] * (uint64_t)(int)v889;
              while (v890 * 4);
              if (v106[6])
              {
                result = 0;
                v1498 = *a8;
                v1510 = v889;
                do
                {
                  v891 = *a4;
                  v892 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v893 = (v892 - 1);
                  v1525 = v106;
                  v1540 = result;
                  v894 = 0;
                  if ((int)v892 - 1 >= 0)
                  {
                    v895 = *a5;
                    do
                    {
                      v896 = ldiv((int)result, v891[v893]);
                      LODWORD(result) = v896.quot;
                      v894 += v895[v893--] * v896.rem;
                    }
                    while (v893 != -1);
                  }
                  v897 = *(_QWORD *)*v11;
                  v898 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v897) >> 2;
                  v899 = *a6;
                  v900 = 0;
                  v901 = (v898 - 1);
                  if ((int)v898 - 1 >= 0)
                  {
                    v902 = v1540;
                    do
                    {
                      v903 = ldiv(v902, *(int *)(v897 + 4 * v901));
                      v902 = v903.quot;
                      v900 += *(_QWORD *)(v899 + 8 * v901--) * v903.rem;
                    }
                    while (v901 != -1);
                  }
                  v106 = v1525;
                  v904 = ((v106[1] - *v106) << 30) - 0x500000000;
                  v905 = *(int *)((char *)v891 + (v904 >> 30));
                  if (v905 >= 1)
                  {
                    v906 = v894 + v1567;
                    v907 = v904 >> 29;
                    v908 = *(uint64_t *)((char *)*a5 + v907);
                    v909 = *(_QWORD *)(v899 + v907);
                    v910 = v900 + v1498;
                    do
                    {
                      v906 += v908;
                      v910 += v909;
                      --v905;
                    }
                    while (v905);
                    v106 = *(_QWORD **)v12;
                  }
                  result = v1540 + v1510;
                }
                while (v106[6] > (unint64_t)(v1540 + v1510));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v23 = v8[6];
          if (v23)
          {
            v24 = **(_DWORD **)(*(_QWORD *)result + 152);
            v25 = (_DWORD *)v8[19];
            do
            {
              *v25++ = v24;
              --v23;
            }
            while (v23);
          }
          break;
        case 1:
LABEL_35:
          v32 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v32)
            result = (uint64_t)memmove((void *)v8[19], *(const void **)(*(_QWORD *)result + 152), 4 * v32);
          break;
        case 2:
          v116 = *a7;
          v117 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v118 = *a4;
              if (**a4 >= 1)
              {
                v119 = 0;
                v120 = *(_QWORD *)(v117 + 152);
                v121 = v8[19];
                v122 = **a5;
                v123 = (_DWORD *)(v120 + 4 * v116);
                do
                {
                  *(_DWORD *)(v121 + 4 * v119) = *v123;
                  v123 += v122;
                  ++v119;
                }
                while (*v118 > (int)v119);
              }
              break;
            case 2:
              v390 = *a4;
              v391 = **a4;
              if (v391 >= 1)
              {
                v392 = 0;
                v393 = 0;
                v394 = *(_QWORD *)(v117 + 152);
                v395 = v8[19];
                v396 = **a5;
                v397 = (*a5)[1];
                v398 = v390[1];
                do
                {
                  if (v398 >= 1)
                  {
                    v399 = 0;
                    do
                    {
                      *(_DWORD *)(v395 + 4 * v393 + 4 * v399) = *(_DWORD *)(v394 + 4 * v116);
                      v116 += v397;
                      v398 = v390[1];
                      ++v399;
                    }
                    while ((int)v399 < v398);
                    v391 = *v390;
                    v393 += v399;
                  }
                  result = v398;
                  v116 = v116 + v396 - v397 * v398;
                  ++v392;
                }
                while (v392 < v391);
              }
              break;
            case 3:
              v400 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v401 = 0;
                v402 = 0;
                v403 = *(_QWORD *)(v117 + 152);
                v404 = v8[19];
                v405 = *a5;
                v406 = **a5;
                v407 = (*a5)[1];
                v408 = v400[1];
                do
                {
                  if (v408 >= 1)
                  {
                    v409 = 0;
                    v410 = *a5;
                    v411 = v405[2];
                    v412 = v400[2];
                    do
                    {
                      if (v412 >= 1)
                      {
                        v413 = 0;
                        v414 = v410[2];
                        do
                        {
                          *(_DWORD *)(v404 + 4 * v402 + 4 * v413) = *(_DWORD *)(v403 + 4 * v116);
                          v116 += v414;
                          v412 = v400[2];
                          ++v413;
                        }
                        while ((int)v413 < v412);
                        v408 = v400[1];
                        v402 += v413;
                      }
                      v116 = v116 + v407 - v411 * v412;
                      ++v409;
                    }
                    while (v409 < v408);
                    result = *v400;
                  }
                  v116 = v116 + v406 - v407 * v408;
                  ++v401;
                }
                while (v401 < (int)result);
              }
              break;
            case 4:
              v415 = *a4;
              v416 = **a4;
              if (v416 >= 1)
              {
                v417 = 0;
                v418 = 0;
                v419 = *(_QWORD *)(v117 + 152);
                v420 = v8[19];
                v421 = *a5;
                v422 = **a5;
                v423 = (*a5)[1];
                v424 = v415[1];
                do
                {
                  if (v424 >= 1)
                  {
                    v425 = 0;
                    v426 = *a5;
                    v427 = v421[2];
                    v428 = v415[2];
                    do
                    {
                      if (v428 >= 1)
                      {
                        v429 = 0;
                        v430 = *a5;
                        v431 = v426[2];
                        v432 = v426[3];
                        v433 = v415[3];
                        do
                        {
                          if (v433 >= 1)
                          {
                            v434 = 0;
                            v435 = v430[3];
                            do
                            {
                              *(_DWORD *)(v420 + 4 * v418 + 4 * v434) = *(_DWORD *)(v419 + 4 * v116);
                              v116 += v435;
                              v433 = v415[3];
                              ++v434;
                            }
                            while ((int)v434 < v433);
                            v428 = v415[2];
                            v418 += v434;
                          }
                          v116 = v116 + v431 - v432 * v433;
                          ++v429;
                        }
                        while (v429 < v428);
                        v424 = v415[1];
                      }
                      v116 = v116 + v423 - v427 * v428;
                      ++v425;
                    }
                    while (v425 < v424);
                    v416 = *v415;
                  }
                  result = v424;
                  v116 = v116 + v422 - v423 * v424;
                  ++v417;
                }
                while (v417 < v416);
              }
              break;
            default:
              v380 = v8[6];
              if (v380)
              {
                v381 = 0;
                v382 = *(_QWORD *)(v117 + 152) + 4 * v116;
                v383 = v8[19];
                v384 = *a4;
                v385 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v386 = *a5;
                do
                {
                  v387 = 0;
                  if ((v385 & 0x80000000) == 0)
                  {
                    v388 = v385;
                    LODWORD(result) = v381;
                    do
                    {
                      v389 = ldiv((int)result, v384[v388]);
                      result = v389.quot;
                      v387 += v386[v388--] * v389.rem;
                    }
                    while (v388 != -1);
                  }
                  *(_DWORD *)(v383 + 4 * v381++) = *(_DWORD *)(v382 + 4 * v387);
                }
                while (v381 != v380);
              }
              break;
          }
          break;
        case 3:
          v1424 = *a8;
          v1430 = *a7;
          v124 = *(_QWORD **)result;
          v125 = v124[1] - *v124;
          switch(v125 >> 2)
          {
            case 1:
              v126 = (v125 << 30) - 0x100000000;
              v127 = *(int *)((char *)*a4 + (v126 >> 30));
              if (v127 >= 1)
              {
                v128 = v126 >> 29;
                v129 = *(uint64_t *)((char *)*a5 + v128);
                v130 = *(_QWORD *)(*a6 + v128);
                v131 = (_DWORD *)(v8[19] + 4 * v1424);
                v132 = (_DWORD *)(v124[19] + 4 * v1430);
                v133 = 4 * v130;
                v134 = 4 * v129;
                do
                {
                  *v131 = *v132;
                  v131 = (_DWORD *)((char *)v131 + v133);
                  v132 = (_DWORD *)((char *)v132 + v134);
                  --v127;
                }
                while (v127);
              }
              break;
            case 2:
              v993 = (v125 << 30) - 0x200000000;
              v994 = *a4;
              v995 = *(int *)((char *)*a4 + (v993 >> 30));
              if (v995 >= 1)
              {
                v996 = 0;
                v997 = v993 >> 29;
                v998 = *(uint64_t *)((char *)*a5 + v997);
                v999 = *(_QWORD *)(*a6 + v997);
                v1000 = (v125 << 30) - 0x100000000;
                v1001 = *(uint64_t *)((char *)*a5 + (v1000 >> 29));
                v1002 = *(_QWORD *)(*a6 + (v1000 >> 29));
                v1003 = v1000 >> 32;
                v1004 = 4 * v1424;
                v1005 = 4 * v999;
                v1006 = 4 * v1002;
                v1007 = 4 * v1430;
                v1008 = 4 * v998;
                result = 4 * v1001;
                do
                {
                  v1009 = v994[v1003];
                  if (v1009 >= 1)
                  {
                    v1010 = (_DWORD *)(v8[19] + v1004);
                    v1011 = (_DWORD *)(v124[19] + v1007);
                    do
                    {
                      *v1010 = *v1011;
                      v1010 = (_DWORD *)((char *)v1010 + v1006);
                      v1011 = (_DWORD *)((char *)v1011 + result);
                      --v1009;
                    }
                    while (v1009);
                  }
                  ++v996;
                  v1004 += v1005;
                  v1007 += v1008;
                }
                while (v996 != v995);
              }
              break;
            case 3:
              v1012 = (v125 << 30) - 0x300000000;
              v1013 = *a4;
              v1014 = *(int *)((char *)*a4 + (v1012 >> 30));
              if (v1014 >= 1)
              {
                v1015 = 0;
                v1016 = *a5;
                v1017 = v1012 >> 29;
                v1018 = *(uint64_t *)((char *)*a5 + (v1012 >> 29));
                v1019 = *a6;
                v1020 = *(_QWORD *)(*a6 + v1017);
                v1021 = v125 << 30;
                v1022 = (v125 << 30) - 0x200000000;
                v1023 = v1022 >> 32;
                v1022 >>= 29;
                v1024 = *(uint64_t *)((char *)*a5 + v1022);
                v1025 = *(_QWORD *)(*a6 + v1022);
                v1026 = (v1021 - 0x100000000) >> 32;
                v1027 = 4 * v1424;
                v1028 = 4 * v1020;
                v1029 = 4 * v1025;
                result = 4 * v1430;
                v1030 = 4 * v1018;
                v1031 = 4 * v1024;
                do
                {
                  v1032 = v1013[v1023];
                  if (v1032 >= 1)
                  {
                    v1033 = 0;
                    v1034 = (_QWORD *)*v11;
                    v1035 = 4 * *(_QWORD *)(v1019 + 8 * v1026);
                    v1036 = 4 * v1016[v1026];
                    v1037 = result;
                    v1038 = v1027;
                    do
                    {
                      v1039 = v1013[v1026];
                      if (v1039 >= 1)
                      {
                        v1040 = (_DWORD *)(v1034[19] + v1038);
                        v1041 = (_DWORD *)(v124[19] + v1037);
                        do
                        {
                          *v1040 = *v1041;
                          v1040 = (_DWORD *)((char *)v1040 + v1035);
                          v1041 = (_DWORD *)((char *)v1041 + v1036);
                          --v1039;
                        }
                        while (v1039);
                      }
                      ++v1033;
                      v1038 += v1029;
                      v1037 += v1031;
                    }
                    while (v1033 != v1032);
                  }
                  ++v1015;
                  v1027 += v1028;
                  result += v1030;
                }
                while (v1015 != v1014);
              }
              break;
            case 4:
              v1042 = (v125 << 30) - 0x400000000;
              v1043 = *a4;
              v1575 = *(int *)((char *)*a4 + (v1042 >> 30));
              if (v1575 >= 1)
              {
                v1044 = 0;
                v1045 = *a5;
                v1046 = v1042 >> 29;
                v1047 = v125 << 30;
                v1048 = *a6;
                v1558 = (v1047 - 0x300000000) >> 32;
                v1049 = (v1047 - 0x300000000) >> 29;
                v1050 = *(uint64_t *)((char *)*a5 + v1049);
                v1051 = *(_QWORD *)(*a6 + v1049);
                v1052 = (v1047 - 0x200000000) >> 32;
                v1053 = (v1047 - 0x100000000) >> 32;
                v1054 = 4 * v1424;
                v1542 = 4 * *(_QWORD *)(*a6 + v1046);
                result = 4 * v1051;
                v1055 = 4 * v1430;
                v1527 = 4 * *(uint64_t *)((char *)*a5 + v1046);
                v1056 = 4 * v1050;
                do
                {
                  v1057 = v1043[v1558];
                  if (v1057 >= 1)
                  {
                    v1058 = 0;
                    v1059 = 4 * *(_QWORD *)(v1048 + 8 * v1052);
                    v1060 = 4 * v1045[v1052];
                    v1061 = v1055;
                    v1062 = v1054;
                    do
                    {
                      v1063 = v1043[v1052];
                      if (v1063 >= 1)
                      {
                        v1064 = 0;
                        v1065 = (_QWORD *)*v11;
                        v1066 = 4 * *(_QWORD *)(v1048 + 8 * v1053);
                        v1067 = 4 * v1045[v1053];
                        v1068 = v1061;
                        v1069 = v1062;
                        do
                        {
                          v1070 = v1043[v1053];
                          if (v1070 >= 1)
                          {
                            v1071 = (_DWORD *)(v1065[19] + v1069);
                            v1072 = (_DWORD *)(v124[19] + v1068);
                            do
                            {
                              *v1071 = *v1072;
                              v1071 = (_DWORD *)((char *)v1071 + v1066);
                              v1072 = (_DWORD *)((char *)v1072 + v1067);
                              --v1070;
                            }
                            while (v1070);
                          }
                          ++v1064;
                          v1069 += v1059;
                          v1068 += v1060;
                        }
                        while (v1064 != v1063);
                      }
                      ++v1058;
                      v1062 += result;
                      v1061 += v1056;
                    }
                    while (v1058 != v1057);
                  }
                  ++v1044;
                  v1054 += v1542;
                  v1055 += v1527;
                }
                while (v1044 != v1575);
              }
              break;
            case 5:
              v1073 = (v125 << 30) - 0x500000000;
              v1074 = *a4;
              v1478 = *(int *)((char *)*a4 + (v1073 >> 30));
              if (v1478 >= 1)
              {
                v1488 = 0;
                v1075 = *a5;
                v1076 = v1073 >> 29;
                v1077 = *a6;
                v1078 = v125 << 30;
                v1079 = (v1078 - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v1079);
                v1468 = (v1078 - 0x400000000) >> 32;
                v1080 = *(_QWORD *)(*a6 + v1079);
                v1559 = (v1078 - 0x300000000) >> 32;
                v1081 = (v1078 - 0x200000000) >> 32;
                v1082 = (v1078 - 0x100000000) >> 32;
                v1512 = 4 * v1424;
                v1458 = 4 * *(_QWORD *)(*a6 + v1076);
                v1543 = 4 * v1080;
                v1500 = 4 * v1430;
                v1449 = 4 * *(uint64_t *)((char *)*a5 + v1076);
                v1528 = 4 * result;
                do
                {
                  v1576 = v1074[v1468];
                  if (v1576 >= 1)
                  {
                    v1083 = 0;
                    v1084 = 4 * *(_QWORD *)(v1077 + 8 * v1559);
                    v1085 = 4 * v1075[v1559];
                    v1086 = v1500;
                    v1087 = v1512;
                    do
                    {
                      v1088 = v1074[v1559];
                      if (v1088 >= 1)
                      {
                        v1089 = 0;
                        v1090 = 4 * *(_QWORD *)(v1077 + 8 * v1081);
                        v1091 = 4 * v1075[v1081];
                        v1092 = v1086;
                        v1093 = v1087;
                        do
                        {
                          v1094 = v1074[v1081];
                          if (v1094 >= 1)
                          {
                            v1095 = 0;
                            result = *v11;
                            v1096 = 4 * *(_QWORD *)(v1077 + 8 * v1082);
                            v1097 = 4 * v1075[v1082];
                            v1098 = v1092;
                            v1099 = v1093;
                            do
                            {
                              v1100 = v1074[v1082];
                              if (v1100 >= 1)
                              {
                                v1101 = (_DWORD *)(*(_QWORD *)(result + 152) + v1099);
                                v1102 = (_DWORD *)(v124[19] + v1098);
                                do
                                {
                                  *v1101 = *v1102;
                                  v1101 = (_DWORD *)((char *)v1101 + v1096);
                                  v1102 = (_DWORD *)((char *)v1102 + v1097);
                                  --v1100;
                                }
                                while (v1100);
                              }
                              ++v1095;
                              v1099 += v1090;
                              v1098 += v1091;
                            }
                            while (v1095 != v1094);
                          }
                          ++v1089;
                          v1093 += v1084;
                          v1092 += v1085;
                        }
                        while (v1089 != v1088);
                      }
                      ++v1083;
                      v1087 += v1543;
                      v1086 += v1528;
                    }
                    while (v1083 != v1576);
                  }
                  v1512 += v1458;
                  v1500 += v1449;
                  ++v1488;
                }
                while (v1488 != v1478);
              }
              break;
            default:
              v955 = (char *)a4[1];
              LODWORD(v956) = 1;
              v957 = -20;
              do
              {
                v956 = *(int *)&v955[v957] * (uint64_t)(int)v956;
                v957 += 4;
              }
              while (v957);
              v1420 = v124[6];
              if (v1420)
              {
                result = 0;
                v958 = (v125 << 30) - 0x500000000;
                v959 = *a4;
                v1457 = *v8;
                v960 = *a5;
                v1405 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1410 = ((unint64_t)(v955 - (char *)*a4) >> 2) - 1;
                v1401 = v958 >> 32;
                v961 = *a6;
                v1467 = ((v125 << 30) - 0x400000000) >> 32;
                v1557 = ((v125 << 30) - 0x300000000) >> 32;
                v962 = ((v125 << 30) - 0x200000000) >> 32;
                v963 = ((v125 << 30) - 0x100000000) >> 32;
                v1441 = 4 * *(uint64_t *)((char *)*a5 + (v958 >> 29));
                v1448 = 4 * *(_QWORD *)(*a6 + (v958 >> 29));
                v1415 = v956;
                do
                {
                  v964 = v1410;
                  v1436 = result;
                  v965 = 0;
                  if ((v1410 & 0x80000000) != 0)
                  {
                    v966 = v1405;
                  }
                  else
                  {
                    v966 = v1405;
                    do
                    {
                      v967 = ldiv((int)result, v959[v964]);
                      LODWORD(result) = v967.quot;
                      v965 += v960[v964--] * v967.rem;
                    }
                    while (v964 != -1);
                  }
                  v968 = 0;
                  if ((v966 & 0x80000000) == 0)
                  {
                    v969 = v1436;
                    do
                    {
                      v970 = ldiv(v969, *(int *)(v1457 + 4 * v966));
                      v969 = v970.quot;
                      v968 += *(_QWORD *)(v961 + 8 * v966--) * v970.rem;
                    }
                    while (v966 != -1);
                  }
                  v1477 = v959[v1401];
                  if (v1477 >= 1)
                  {
                    v971 = 0;
                    v1511 = 4 * (v968 + v1424);
                    v1541 = 4 * *(_QWORD *)(v961 + 8 * v1467);
                    v1499 = 4 * (v965 + v1430);
                    v1526 = 4 * v960[v1467];
                    do
                    {
                      v1487 = v971;
                      v1574 = v959[v1467];
                      if (v1574 >= 1)
                      {
                        v972 = 0;
                        v973 = 4 * *(_QWORD *)(v961 + 8 * v1557);
                        v974 = 4 * v960[v1557];
                        v976 = v1499;
                        v975 = v1511;
                        do
                        {
                          v977 = v959[v1557];
                          if (v977 >= 1)
                          {
                            v978 = 0;
                            v979 = 4 * *(_QWORD *)(v961 + 8 * v962);
                            v980 = 4 * v960[v962];
                            v981 = v976;
                            v982 = v975;
                            do
                            {
                              v983 = v959[v962];
                              if (v983 >= 1)
                              {
                                v984 = 0;
                                v985 = (_QWORD *)*v11;
                                v986 = 4 * *(_QWORD *)(v961 + 8 * v963);
                                v987 = 4 * v960[v963];
                                v988 = v981;
                                v989 = v982;
                                do
                                {
                                  v990 = v959[v963];
                                  if (v990 >= 1)
                                  {
                                    v991 = (_DWORD *)(v985[19] + v989);
                                    v992 = (_DWORD *)(v124[19] + v988);
                                    do
                                    {
                                      *v991 = *v992;
                                      v991 = (_DWORD *)((char *)v991 + v986);
                                      v992 = (_DWORD *)((char *)v992 + v987);
                                      --v990;
                                    }
                                    while (v990);
                                  }
                                  ++v984;
                                  v989 += v979;
                                  v988 += v980;
                                }
                                while (v984 != v983);
                              }
                              ++v978;
                              v982 += v973;
                              v981 += v974;
                            }
                            while (v978 != v977);
                          }
                          ++v972;
                          v975 += v1541;
                          v976 += v1526;
                        }
                        while (v972 != v1574);
                      }
                      v971 = v1487 + 1;
                      v1511 += v1448;
                      v1499 += v1441;
                    }
                    while (v1487 + 1 != v1477);
                  }
                  result = v1436 + v1415;
                }
                while (v1420 > v1436 + v1415);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v26 = v8[6];
          if (v26)
          {
            v27 = **(unsigned int **)(*(_QWORD *)result + 152);
            v28 = (_QWORD *)v8[19];
            do
            {
              *v28++ = v27;
              --v26;
            }
            while (v26);
          }
          break;
        case 1:
          v135 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v135)
          {
            v136 = *(unsigned int **)(*(_QWORD *)result + 152);
            v137 = (_QWORD *)v8[19];
            v138 = 4 * v135;
            do
            {
              v139 = *v136++;
              *v137++ = v139;
              v138 -= 4;
            }
            while (v138);
          }
          break;
        case 2:
          v140 = *a7;
          v141 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v142 = **a4;
              if ((int)v142 >= 1)
              {
                v143 = *(_QWORD *)(v141 + 152);
                v144 = (_QWORD *)v8[19];
                v145 = *a5;
                do
                {
                  *v144++ = *(unsigned int *)(v143 + 4 * v140);
                  v140 += *v145;
                  --v142;
                }
                while (v142);
              }
              break;
            case 2:
              v446 = **a4;
              if (v446 >= 1)
              {
                v447 = 0;
                v448 = 0;
                v449 = *(_QWORD *)(v141 + 152);
                v450 = v8[19];
                v451 = (*a4)[1];
                v452 = *a5;
                do
                {
                  if (v451 <= 0)
                  {
                    v454 = v452[1];
                  }
                  else
                  {
                    v453 = v451;
                    do
                    {
                      *(_QWORD *)(v450 + 8 * v448++) = *(unsigned int *)(v449 + 4 * v140);
                      v454 = v452[1];
                      v140 += v454;
                      --v453;
                    }
                    while (v453);
                  }
                  result = *v452;
                  v140 = v140 - v454 * v451 + *v452;
                  ++v447;
                }
                while (v447 != v446);
              }
              break;
            case 3:
              v455 = *a4;
              v456 = **a4;
              if (v456 >= 1)
              {
                v457 = 0;
                v458 = 0;
                v459 = *(_QWORD *)(v141 + 152);
                v460 = v8[19];
                v461 = v455[1];
                v462 = *a5;
                do
                {
                  if ((int)v461 <= 0)
                  {
                    v466 = v462[1];
                  }
                  else
                  {
                    v463 = 0;
                    result = v455[2];
                    v464 = *a5;
                    do
                    {
                      v465 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(_QWORD *)(v460 + 8 * v458++) = *(unsigned int *)(v459 + 4 * v140);
                          v140 += v464[2];
                          --v465;
                        }
                        while (v465);
                      }
                      v466 = v462[1];
                      v140 = v466 + v140 - v462[2] * (int)result;
                      ++v463;
                    }
                    while (v463 != (_DWORD)v461);
                  }
                  v140 = v140 - v466 * v461 + *v462;
                  ++v457;
                }
                while (v457 != v456);
              }
              break;
            case 4:
              v467 = *a4;
              v468 = **a4;
              if (v468 >= 1)
              {
                v469 = 0;
                v470 = 0;
                v471 = *(_QWORD *)(v141 + 152);
                v472 = v8[19];
                v473 = v467[1];
                v474 = *a5;
                do
                {
                  if ((int)v473 <= 0)
                  {
                    v481 = v474[1];
                  }
                  else
                  {
                    v475 = 0;
                    result = v467[2];
                    v476 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        v477 = 0;
                        v478 = v467[3];
                        v479 = *a5;
                        do
                        {
                          v480 = v478;
                          if (v478 >= 1)
                          {
                            do
                            {
                              *(_QWORD *)(v472 + 8 * v470++) = *(unsigned int *)(v471 + 4 * v140);
                              v140 += v479[3];
                              --v480;
                            }
                            while (v480);
                          }
                          v140 = v476[2] + v140 - v476[3] * v478;
                          ++v477;
                        }
                        while (v477 != (_DWORD)result);
                      }
                      v481 = v474[1];
                      v140 = v481 + v140 - v474[2] * result;
                      ++v475;
                    }
                    while (v475 != (_DWORD)v473);
                  }
                  v140 = v140 - v481 * v473 + *v474;
                  ++v469;
                }
                while (v469 != v468);
              }
              break;
            default:
              v436 = v8[6];
              if (v436)
              {
                v437 = 0;
                v438 = *(_QWORD *)(v141 + 152) + 4 * v140;
                v439 = v8[19];
                v440 = *a4;
                v441 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v442 = *a5;
                do
                {
                  v443 = 0;
                  if ((v441 & 0x80000000) == 0)
                  {
                    v444 = v441;
                    LODWORD(result) = v437;
                    do
                    {
                      v445 = ldiv((int)result, v440[v444]);
                      result = v445.quot;
                      v443 += v442[v444--] * v445.rem;
                    }
                    while (v444 != -1);
                  }
                  *(_QWORD *)(v439 + 8 * v437++) = *(unsigned int *)(v438 + 4 * v443);
                }
                while (v437 != v436);
              }
              break;
          }
          break;
        case 3:
          v1425 = *a8;
          v1431 = *a7;
          v146 = *(_QWORD **)result;
          v147 = v146[1] - *v146;
          switch(v147 >> 2)
          {
            case 1:
              v148 = (v147 << 30) - 0x100000000;
              v149 = *(int *)((char *)*a4 + (v148 >> 30));
              if (v149 >= 1)
              {
                v150 = v148 >> 29;
                v151 = *(uint64_t *)((char *)*a5 + v150);
                v152 = *(_QWORD *)(*a6 + v150);
                v153 = (_QWORD *)(v8[19] + 8 * v1425);
                v154 = (unsigned int *)(v146[19] + 4 * v1431);
                v155 = 8 * v152;
                v156 = 4 * v151;
                do
                {
                  *v153 = *v154;
                  v153 = (_QWORD *)((char *)v153 + v155);
                  v154 = (unsigned int *)((char *)v154 + v156);
                  --v149;
                }
                while (v149);
              }
              break;
            case 2:
              v1141 = (v147 << 30) - 0x200000000;
              v1142 = *(int *)((char *)*a4 + (v1141 >> 30));
              if (v1142 >= 1)
              {
                v1143 = 0;
                v1144 = v147 << 30;
                v1145 = *a5;
                v1144 -= 0x100000000;
                v1146 = *(int *)((char *)*a4 + (v1144 >> 30));
                v1147 = v1141 >> 29;
                v1148 = *(uint64_t *)((char *)*a5 + (v1141 >> 29));
                v1149 = *a6;
                v1150 = *(_QWORD *)(*a6 + v1147);
                v1151 = v1144 >> 32;
                v1152 = 8 * v1425;
                v1153 = 8 * v1150;
                v1154 = 4 * v1431;
                result = 4 * v1148;
                do
                {
                  if (v1146 >= 1)
                  {
                    v1155 = (_QWORD *)(v8[19] + v1152);
                    v1156 = 8 * *(_QWORD *)(v1149 + 8 * v1151);
                    v1157 = (unsigned int *)(v146[19] + v1154);
                    v1158 = 4 * v1145[v1151];
                    v1159 = v1146;
                    do
                    {
                      *v1155 = *v1157;
                      v1155 = (_QWORD *)((char *)v1155 + v1156);
                      v1157 = (unsigned int *)((char *)v1157 + v1158);
                      --v1159;
                    }
                    while (v1159);
                  }
                  ++v1143;
                  v1152 += v1153;
                  v1154 += result;
                }
                while (v1143 != v1142);
              }
              break;
            case 3:
              v1160 = (v147 << 30) - 0x300000000;
              v1161 = *a4;
              v1162 = *(int *)((char *)*a4 + (v1160 >> 30));
              if (v1162 >= 1)
              {
                v1163 = 0;
                v1164 = v147 << 30;
                v1165 = *a5;
                v1166 = v1160 >> 29;
                v1167 = *(uint64_t *)((char *)*a5 + (v1160 >> 29));
                v1168 = *a6;
                v1169 = *(_QWORD *)(*a6 + v1166);
                v1170 = v1164 - 0x200000000;
                v1171 = v1164 - 0x100000000;
                v1172 = *(int *)((char *)v1161 + ((v1164 - 0x200000000) >> 30));
                v1173 = v1170 >> 32;
                v1174 = v1171 >> 32;
                v1175 = 8 * v1425;
                v1176 = 8 * v1169;
                result = 4 * v1431;
                v1177 = 4 * v1167;
                do
                {
                  if (v1172 >= 1)
                  {
                    v1178 = 0;
                    v1179 = v1161[v1174];
                    v1180 = (_QWORD *)*v11;
                    v1181 = 8 * *(_QWORD *)(v1168 + 8 * v1173);
                    v1182 = 4 * v1165[v1173];
                    v1183 = result;
                    v1184 = v1175;
                    do
                    {
                      if (v1179 >= 1)
                      {
                        v1185 = (_QWORD *)(v1180[19] + v1184);
                        v1186 = 8 * *(_QWORD *)(v1168 + 8 * v1174);
                        v1187 = (unsigned int *)(v146[19] + v1183);
                        v1188 = 4 * v1165[v1174];
                        v1189 = v1179;
                        do
                        {
                          *v1185 = *v1187;
                          v1185 = (_QWORD *)((char *)v1185 + v1186);
                          v1187 = (unsigned int *)((char *)v1187 + v1188);
                          --v1189;
                        }
                        while (v1189);
                      }
                      ++v1178;
                      v1184 += v1181;
                      v1183 += v1182;
                    }
                    while (v1178 != v1172);
                  }
                  ++v1163;
                  v1175 += v1176;
                  result += v1177;
                }
                while (v1163 != v1162);
              }
              break;
            case 4:
              v1190 = (v147 << 30) - 0x400000000;
              v1191 = *a4;
              v1545 = *(int *)((char *)*a4 + (v1190 >> 30));
              if (v1545 >= 1)
              {
                v1577 = 0;
                v1192 = v147 << 30;
                v1193 = *a5;
                v1194 = v1190 >> 29;
                result = *(uint64_t *)((char *)*a5 + v1194);
                v1195 = *a6;
                v1514 = (v1192 - 0x300000000) >> 32;
                v1196 = *(int *)((char *)v1191 + ((v1192 - 0x300000000) >> 30));
                v1197 = (v1192 - 0x200000000) >> 32;
                v1198 = (v1192 - 0x100000000) >> 32;
                v1199 = 8 * v1425;
                v1561 = 8 * *(_QWORD *)(*a6 + v1194);
                v1200 = 4 * v1431;
                v1530 = 4 * result;
                do
                {
                  if (v1196 >= 1)
                  {
                    v1201 = 0;
                    v1202 = v1191[v1197];
                    v1203 = 8 * *(_QWORD *)(v1195 + 8 * v1514);
                    v1204 = 4 * v1193[v1514];
                    v1205 = v1200;
                    v1206 = v1199;
                    do
                    {
                      if (v1202 >= 1)
                      {
                        v1207 = 0;
                        result = *(_QWORD *)(v1195 + 8 * v1197);
                        v1208 = v1191[v1198];
                        v1209 = (_QWORD *)*v11;
                        v1210 = 8 * result;
                        v1211 = 4 * v1193[v1197];
                        v1212 = v1205;
                        v1213 = v1206;
                        do
                        {
                          if (v1208 >= 1)
                          {
                            v1214 = (_QWORD *)(v1209[19] + v1213);
                            v1215 = 8 * *(_QWORD *)(v1195 + 8 * v1198);
                            result = v146[19] + v1212;
                            v1216 = 4 * v1193[v1198];
                            v1217 = v1208;
                            do
                            {
                              *v1214 = *(unsigned int *)result;
                              v1214 = (_QWORD *)((char *)v1214 + v1215);
                              result += v1216;
                              --v1217;
                            }
                            while (v1217);
                          }
                          ++v1207;
                          v1213 += v1210;
                          v1212 += v1211;
                        }
                        while (v1207 != v1202);
                      }
                      ++v1201;
                      v1206 += v1203;
                      v1205 += v1204;
                    }
                    while (v1201 != v1196);
                  }
                  v1199 += v1561;
                  v1200 += v1530;
                  ++v1577;
                }
                while (v1577 != v1545);
              }
              break;
            case 5:
              v1218 = (v147 << 30) - 0x500000000;
              v1219 = *a4;
              v1470 = *(int *)((char *)*a4 + (v1218 >> 30));
              if (v1470 >= 1)
              {
                v1480 = 0;
                v1220 = v147 << 30;
                v1221 = *a5;
                v1222 = v1218 >> 29;
                v1223 = *a6;
                v1443 = (v1220 - 0x400000000) >> 32;
                v1562 = *(int *)((char *)v1219 + ((v1220 - 0x400000000) >> 30));
                v1224 = (v1220 - 0x200000000) >> 32;
                v1225 = (v1220 - 0x100000000) >> 32;
                v1502 = 8 * v1425;
                v1515 = (v1220 - 0x300000000) >> 32;
                v1490 = 4 * v1431;
                v1451 = 4 * *(uint64_t *)((char *)*a5 + v1222);
                v1460 = 8 * *(_QWORD *)(*a6 + v1222);
                do
                {
                  if (v1562 >= 1)
                  {
                    v1226 = 0;
                    v1227 = v1219[v1515];
                    v1531 = 4 * v1221[v1443];
                    v1546 = 8 * *(_QWORD *)(v1223 + 8 * v1443);
                    v1228 = v1490;
                    result = v1502;
                    do
                    {
                      v1578 = v1226;
                      if (v1227 >= 1)
                      {
                        v1229 = 0;
                        v1230 = v1219[v1224];
                        v1231 = 8 * *(_QWORD *)(v1223 + 8 * v1515);
                        v1232 = 4 * v1221[v1515];
                        v1233 = v1228;
                        v1234 = result;
                        do
                        {
                          if (v1230 >= 1)
                          {
                            v1235 = 0;
                            v1236 = v1219[v1225];
                            v1237 = (_QWORD *)*v11;
                            v1238 = 8 * *(_QWORD *)(v1223 + 8 * v1224);
                            v1239 = 4 * v1221[v1224];
                            v1240 = v1233;
                            v1241 = v1234;
                            do
                            {
                              if (v1236 >= 1)
                              {
                                v1242 = (_QWORD *)(v1237[19] + v1241);
                                v1243 = 8 * *(_QWORD *)(v1223 + 8 * v1225);
                                v1244 = (unsigned int *)(v146[19] + v1240);
                                v1245 = 4 * v1221[v1225];
                                v1246 = v1236;
                                do
                                {
                                  *v1242 = *v1244;
                                  v1242 = (_QWORD *)((char *)v1242 + v1243);
                                  v1244 = (unsigned int *)((char *)v1244 + v1245);
                                  --v1246;
                                }
                                while (v1246);
                              }
                              ++v1235;
                              v1241 += v1238;
                              v1240 += v1239;
                            }
                            while (v1235 != v1230);
                          }
                          ++v1229;
                          v1234 += v1231;
                          v1233 += v1232;
                        }
                        while (v1229 != v1227);
                      }
                      v1226 = v1578 + 1;
                      result += v1546;
                      v1228 += v1531;
                    }
                    while (v1578 + 1 != v1562);
                  }
                  v1502 += v1460;
                  v1490 += v1451;
                  ++v1480;
                }
                while (v1480 != v1470);
              }
              break;
            default:
              v1103 = (char *)a4[1];
              LODWORD(v1104) = 1;
              v1105 = -20;
              do
              {
                v1104 = *(int *)&v1103[v1105] * (uint64_t)(int)v1104;
                v1105 += 4;
              }
              while (v1105);
              v1421 = v146[6];
              if (v1421)
              {
                v1106 = 0;
                v1107 = (v147 << 30) - 0x500000000;
                v1108 = *a4;
                v1402 = *v8;
                v1109 = *a5;
                v1406 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1411 = ((unint64_t)(v1103 - (char *)*a4) >> 2) - 1;
                v1110 = *a6;
                v1398 = v1107 >> 32;
                v1469 = *(int *)((char *)*a4 + (v1107 >> 30));
                v1442 = ((v147 << 30) - 0x400000000) >> 32;
                v1513 = ((v147 << 30) - 0x300000000) >> 32;
                v1111 = ((v147 << 30) - 0x200000000) >> 32;
                v1112 = ((v147 << 30) - 0x100000000) >> 32;
                v1416 = v1104;
                do
                {
                  v1113 = v1411;
                  if ((v1411 & 0x80000000) != 0)
                  {
                    v1114 = 0;
                    v1115 = v1406;
                  }
                  else
                  {
                    v1114 = 0;
                    LODWORD(result) = v1106;
                    v1115 = v1406;
                    do
                    {
                      v1116 = ldiv((int)result, v1108[v1113]);
                      result = v1116.quot;
                      v1114 += v1109[v1113--] * v1116.rem;
                    }
                    while (v1113 != -1);
                  }
                  v1437 = v1106;
                  v1117 = 0;
                  if ((v1115 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1106;
                    do
                    {
                      v1118 = ldiv((int)result, *(int *)(v1402 + 4 * v1115));
                      result = v1118.quot;
                      v1117 += *(_QWORD *)(v1110 + 8 * v1115--) * v1118.rem;
                    }
                    while (v1115 != -1);
                  }
                  if (v1469 >= 1)
                  {
                    v1119 = 0;
                    v1560 = v1108[v1442];
                    v1459 = 8 * *(_QWORD *)(v1110 + 8 * v1398);
                    v1489 = 4 * (v1114 + v1431);
                    v1501 = 8 * (v1117 + v1425);
                    v1450 = 4 * v1109[v1398];
                    do
                    {
                      v1479 = v1119;
                      if (v1560 >= 1)
                      {
                        v1120 = 0;
                        v1121 = v1108[v1513];
                        v1529 = 4 * v1109[v1442];
                        v1544 = 8 * *(_QWORD *)(v1110 + 8 * v1442);
                        v1123 = v1489;
                        v1122 = v1501;
                        do
                        {
                          if (v1121 >= 1)
                          {
                            v1124 = 0;
                            v1125 = v1108[v1111];
                            v1126 = 8 * *(_QWORD *)(v1110 + 8 * v1513);
                            v1127 = 4 * v1109[v1513];
                            result = v1123;
                            v1128 = v1122;
                            do
                            {
                              if (v1125 >= 1)
                              {
                                v1129 = 0;
                                v1130 = v1108[v1112];
                                v1131 = *(uint64_t **)a2;
                                v1132 = 8 * *(_QWORD *)(v1110 + 8 * v1111);
                                v1133 = 4 * v1109[v1111];
                                v1134 = result;
                                v1135 = v1128;
                                do
                                {
                                  if (v1130 >= 1)
                                  {
                                    v1136 = (_QWORD *)(v1131[19] + v1135);
                                    v1137 = 8 * *(_QWORD *)(v1110 + 8 * v1112);
                                    v1138 = (unsigned int *)(v146[19] + v1134);
                                    v1139 = 4 * v1109[v1112];
                                    v1140 = v1130;
                                    do
                                    {
                                      *v1136 = *v1138;
                                      v1136 = (_QWORD *)((char *)v1136 + v1137);
                                      v1138 = (unsigned int *)((char *)v1138 + v1139);
                                      --v1140;
                                    }
                                    while (v1140);
                                  }
                                  ++v1129;
                                  v1135 += v1132;
                                  v1134 += v1133;
                                }
                                while (v1129 != v1125);
                              }
                              ++v1124;
                              v1128 += v1126;
                              result += v1127;
                            }
                            while (v1124 != v1121);
                          }
                          ++v1120;
                          v1122 += v1544;
                          v1123 += v1529;
                        }
                        while (v1120 != v1560);
                      }
                      v1119 = v1479 + 1;
                      v1501 += v1459;
                      v1489 += v1450;
                    }
                    while (v1479 + 1 != v1469);
                  }
                  v1106 += v1416;
                }
                while (v1421 > v1437 + v1416);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v29 = v8[6];
          if (v29)
          {
            v30 = (float)**(unsigned int **)(*(_QWORD *)result + 152);
            v31 = (float *)v8[19];
            do
            {
              *v31++ = v30;
              --v29;
            }
            while (v29);
          }
          break;
        case 1:
          v157 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v157)
          {
            v158 = *(unsigned int **)(*(_QWORD *)result + 152);
            v159 = (float *)v8[19];
            v160 = 4 * v157;
            do
            {
              v161 = *v158++;
              *v159++ = (float)v161;
              v160 -= 4;
            }
            while (v160);
          }
          break;
        case 2:
          v162 = *a7;
          v163 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v164 = **a4;
              if ((int)v164 >= 1)
              {
                v165 = (float *)v8[19];
                v166 = **a5;
                v167 = (unsigned int *)(*(_QWORD *)(v163 + 152) + 4 * v162);
                do
                {
                  *v165++ = (float)*v167;
                  v167 += v166;
                  --v164;
                }
                while (v164);
              }
              break;
            case 2:
              v492 = **a4;
              if (v492 >= 1)
              {
                v493 = 0;
                v494 = 0;
                v495 = *(_QWORD *)(v163 + 152);
                v496 = v8[19];
                v497 = (*a4)[1];
                v498 = (*a5)[1];
                v499 = **a5 - v498 * v497;
                do
                {
                  v500 = v497;
                  if ((int)v497 >= 1)
                  {
                    do
                    {
                      *(float *)(v496 + 4 * v494++) = (float)*(unsigned int *)(v495 + 4 * v162);
                      v162 += v498;
                      --v500;
                    }
                    while (v500);
                  }
                  v162 += v499;
                  ++v493;
                }
                while (v493 != v492);
              }
              break;
            case 3:
              v501 = *a4;
              v502 = **a4;
              if (v502 >= 1)
              {
                v503 = 0;
                result = 0;
                v504 = *(_QWORD *)(v163 + 152);
                v505 = v8[19];
                v506 = v501[1];
                v507 = *a5;
                v508 = (*a5)[1];
                v509 = **a5 - v508 * v506;
                do
                {
                  if ((int)v506 < 1)
                  {
                    v516 = result;
                  }
                  else
                  {
                    v510 = 0;
                    v511 = v501[2];
                    v512 = *a5;
                    v513 = v508 - v507[2] * v511;
                    do
                    {
                      if ((int)v511 < 1)
                      {
                        v516 = result;
                      }
                      else
                      {
                        v514 = v512[2];
                        v515 = v511;
                        do
                        {
                          v516 = result + 1;
                          *(float *)(v505 + 4 * result) = (float)*(unsigned int *)(v504 + 4 * v162);
                          v162 += v514;
                          ++result;
                          --v515;
                        }
                        while (v515);
                      }
                      v162 += v513;
                      ++v510;
                      result = v516;
                    }
                    while (v510 != (_DWORD)v506);
                  }
                  v162 += v509;
                  ++v503;
                  result = v516;
                }
                while (v503 != v502);
              }
              break;
            case 4:
              v517 = *a4;
              v518 = **a4;
              if (v518 >= 1)
              {
                v519 = 0;
                result = 0;
                v520 = *(_QWORD *)(v163 + 152);
                v521 = v8[19];
                v522 = v517[1];
                v523 = *a5;
                v524 = (*a5)[1];
                v525 = **a5 - v524 * v522;
                do
                {
                  if ((int)v522 < 1)
                  {
                    v536 = result;
                  }
                  else
                  {
                    v526 = 0;
                    v527 = v517[2];
                    v528 = *a5;
                    v529 = v524 - v523[2] * v527;
                    do
                    {
                      if ((int)v527 < 1)
                      {
                        v536 = result;
                      }
                      else
                      {
                        v530 = 0;
                        v531 = v517[3];
                        v532 = *a5;
                        v533 = v528[2] - v528[3] * v531;
                        do
                        {
                          if ((int)v531 < 1)
                          {
                            v536 = result;
                          }
                          else
                          {
                            v534 = v532[3];
                            v535 = v531;
                            do
                            {
                              v536 = result + 1;
                              *(float *)(v521 + 4 * result) = (float)*(unsigned int *)(v520 + 4 * v162);
                              v162 += v534;
                              ++result;
                              --v535;
                            }
                            while (v535);
                          }
                          v162 += v533;
                          ++v530;
                          result = v536;
                        }
                        while (v530 != (_DWORD)v527);
                      }
                      v162 += v529;
                      ++v526;
                      result = v536;
                    }
                    while (v526 != (_DWORD)v522);
                  }
                  v162 += v525;
                  ++v519;
                  result = v536;
                }
                while (v519 != v518);
              }
              break;
            default:
              v482 = v8[6];
              if (v482)
              {
                v483 = 0;
                v484 = *(_QWORD *)(v163 + 152) + 4 * v162;
                v485 = v8[19];
                v486 = *a4;
                v487 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v488 = *a5;
                do
                {
                  v489 = 0;
                  if ((v487 & 0x80000000) == 0)
                  {
                    v490 = v487;
                    LODWORD(result) = v483;
                    do
                    {
                      v491 = ldiv((int)result, v486[v490]);
                      result = v491.quot;
                      v489 += v488[v490--] * v491.rem;
                    }
                    while (v490 != -1);
                  }
                  *(float *)(v485 + 4 * v483++) = (float)*(unsigned int *)(v484 + 4 * v489);
                }
                while (v483 != v482);
              }
              break;
          }
          break;
        case 3:
          v1432 = *a8;
          v1433 = *a7;
          v168 = *(_QWORD **)result;
          v169 = v168[1] - *v168;
          switch(v169 >> 2)
          {
            case 1:
              v170 = (v169 << 30) - 0x100000000;
              v171 = *(int *)((char *)*a4 + (v170 >> 30));
              if (v171 >= 1)
              {
                v172 = v170 >> 29;
                v173 = *(uint64_t *)((char *)*a5 + v172);
                v174 = *(_QWORD *)(*a6 + v172);
                v175 = (float *)(v8[19] + 4 * v1432);
                v176 = (unsigned int *)(v168[19] + 4 * v1433);
                v177 = 4 * v174;
                v178 = 4 * v173;
                do
                {
                  *v175 = (float)*v176;
                  v175 = (float *)((char *)v175 + v177);
                  v176 = (unsigned int *)((char *)v176 + v178);
                  --v171;
                }
                while (v171);
              }
              break;
            case 2:
              v1286 = (v169 << 30) - 0x200000000;
              v1287 = *(int *)((char *)*a4 + (v1286 >> 30));
              if (v1287 >= 1)
              {
                v1288 = 0;
                v1289 = v1286 >> 29;
                v1290 = *(uint64_t *)((char *)*a5 + v1289);
                v1291 = *(_QWORD *)(*a6 + v1289);
                v1292 = (v169 << 30) - 0x100000000;
                result = *(uint64_t *)((char *)*a5 + (v1292 >> 29));
                v1293 = *(_QWORD *)(*a6 + (v1292 >> 29));
                v1294 = *(int *)((char *)*a4 + (v1292 >> 30));
                v1295 = 4 * v1432;
                v1296 = 4 * v1291;
                v1297 = 4 * v1293;
                v1298 = 4 * v1433;
                v1299 = 4 * v1290;
                v1300 = 4 * result;
                do
                {
                  if (v1294 >= 1)
                  {
                    result = v8[19] + v1295;
                    v1301 = (unsigned int *)(v168[19] + v1298);
                    v1302 = v1294;
                    do
                    {
                      *(float *)result = (float)*v1301;
                      result += v1297;
                      v1301 = (unsigned int *)((char *)v1301 + v1300);
                      --v1302;
                    }
                    while (v1302);
                  }
                  ++v1288;
                  v1295 += v1296;
                  v1298 += v1299;
                }
                while (v1288 != v1287);
              }
              break;
            case 3:
              v1303 = (v169 << 30) - 0x300000000;
              v1304 = *a4;
              v1305 = *(int *)((char *)*a4 + (v1303 >> 30));
              if (v1305 >= 1)
              {
                v1306 = 0;
                v1307 = v169 << 30;
                v1308 = *a5;
                v1309 = v1303 >> 29;
                v1310 = *(uint64_t *)((char *)*a5 + (v1303 >> 29));
                v1311 = *a6;
                v1312 = *(_QWORD *)(*a6 + v1309);
                v1313 = (v1307 - 0x200000000) >> 29;
                v1314 = v1307 - 0x100000000;
                v1315 = *(uint64_t *)((char *)*a5 + v1313);
                v1316 = *(_QWORD *)(*a6 + v1313);
                v1317 = *(int *)((char *)v1304 + ((v1307 - 0x200000000) >> 30));
                v1318 = v1314 >> 32;
                v1319 = 4 * v1432;
                v1320 = 4 * v1312;
                v1321 = 4 * v1316;
                result = 4 * v1433;
                v1322 = 4 * v1310;
                v1323 = 4 * v1315;
                do
                {
                  if (v1317 >= 1)
                  {
                    v1324 = 0;
                    v1325 = v1304[v1318];
                    v1326 = (_QWORD *)*v11;
                    v1327 = 4 * *(_QWORD *)(v1311 + 8 * v1318);
                    v1328 = 4 * v1308[v1318];
                    v1329 = result;
                    v1330 = v1319;
                    do
                    {
                      if (v1325 >= 1)
                      {
                        v1331 = (float *)(v1326[19] + v1330);
                        v11 = (uint64_t *)a2;
                        v1332 = (unsigned int *)(v168[19] + v1329);
                        v1333 = v1325;
                        do
                        {
                          *v1331 = (float)*v1332;
                          v1331 = (float *)((char *)v1331 + v1327);
                          v1332 = (unsigned int *)((char *)v1332 + v1328);
                          --v1333;
                        }
                        while (v1333);
                      }
                      ++v1324;
                      v1330 += v1321;
                      v1329 += v1323;
                    }
                    while (v1324 != v1317);
                  }
                  ++v1306;
                  v1319 += v1320;
                  result += v1322;
                }
                while (v1306 != v1305);
              }
              break;
            case 4:
              v1334 = (v169 << 30) - 0x400000000;
              v1335 = *a4;
              v1580 = *(int *)((char *)*a4 + (v1334 >> 30));
              if (v1580 >= 1)
              {
                v1336 = 0;
                v1337 = *a5;
                v1338 = v1334 >> 29;
                v1339 = *a6;
                v1340 = v169 << 30;
                v1341 = (v1340 - 0x300000000) >> 29;
                v1342 = *(uint64_t *)((char *)*a5 + v1341);
                v1343 = *(_QWORD *)(*a6 + v1341);
                v1344 = v1340 - 0x200000000;
                v1345 = v1340 - 0x100000000;
                v1346 = *(int *)((char *)v1335 + ((v1340 - 0x300000000) >> 30));
                v1347 = v1344 >> 32;
                v1348 = v1345 >> 32;
                v1349 = 4 * v1432;
                v1564 = 4 * *(_QWORD *)(*a6 + v1338);
                result = 4 * v1343;
                v1350 = 4 * v1433;
                v1548 = 4 * *(uint64_t *)((char *)*a5 + v1338);
                v1351 = 4 * v1342;
                do
                {
                  if (v1346 >= 1)
                  {
                    v1352 = 0;
                    v1353 = v1335[v1347];
                    v1354 = 4 * *(_QWORD *)(v1339 + 8 * v1347);
                    v1355 = 4 * v1337[v1347];
                    v1356 = v1350;
                    v1357 = v1349;
                    do
                    {
                      if (v1353 >= 1)
                      {
                        v1358 = 0;
                        v1359 = v1335[v1348];
                        v1360 = (_QWORD *)*v11;
                        v1361 = 4 * *(_QWORD *)(v1339 + 8 * v1348);
                        v1362 = 4 * v1337[v1348];
                        v1363 = v1356;
                        v1364 = v1357;
                        do
                        {
                          if (v1359 >= 1)
                          {
                            v1365 = (float *)(v1360[19] + v1364);
                            v1366 = (unsigned int *)(v168[19] + v1363);
                            v1367 = v1359;
                            do
                            {
                              *v1365 = (float)*v1366;
                              v1365 = (float *)((char *)v1365 + v1361);
                              v1366 = (unsigned int *)((char *)v1366 + v1362);
                              --v1367;
                            }
                            while (v1367);
                          }
                          ++v1358;
                          v1364 += v1354;
                          v1363 += v1355;
                        }
                        while (v1358 != v1353);
                      }
                      ++v1352;
                      v1357 += result;
                      v1356 += v1351;
                    }
                    while (v1352 != v1346);
                  }
                  ++v1336;
                  v1349 += v1564;
                  v1350 += v1548;
                }
                while (v1336 != v1580);
              }
              break;
            case 5:
              v1368 = (v169 << 30) - 0x500000000;
              v1369 = *a4;
              v1492 = *(int *)((char *)*a4 + (v1368 >> 30));
              if (v1492 >= 1)
              {
                v1504 = 0;
                v1370 = *a5;
                v1371 = v1368 >> 29;
                v1372 = *a6;
                v1373 = ((v169 << 30) - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v1373);
                v1374 = *(_QWORD *)(*a6 + v1373);
                v1581 = *(int *)((char *)v1369 + (((v169 << 30) - 0x400000000) >> 30));
                v1462 = ((v169 << 30) - 0x300000000) >> 32;
                v1375 = ((v169 << 30) - 0x200000000) >> 32;
                v1376 = ((v169 << 30) - 0x100000000) >> 32;
                v1533 = 4 * v1432;
                v1482 = 4 * *(_QWORD *)(*a6 + v1371);
                v1565 = 4 * v1374;
                v1517 = 4 * v1433;
                v1472 = 4 * *(uint64_t *)((char *)*a5 + v1371);
                v1549 = 4 * result;
                do
                {
                  if (v1581 >= 1)
                  {
                    v1377 = 0;
                    v1378 = v1369[v1462];
                    v1379 = 4 * *(_QWORD *)(v1372 + 8 * v1462);
                    v1380 = 4 * v1370[v1462];
                    v1381 = v1517;
                    v1382 = v1533;
                    do
                    {
                      if (v1378 >= 1)
                      {
                        v1383 = 0;
                        v1384 = v1369[v1375];
                        v1385 = 4 * *(_QWORD *)(v1372 + 8 * v1375);
                        v1386 = 4 * v1370[v1375];
                        v1387 = v1381;
                        v1388 = v1382;
                        do
                        {
                          if (v1384 >= 1)
                          {
                            v1389 = 0;
                            v1390 = v1369[v1376];
                            v1391 = (_QWORD *)*v11;
                            v1392 = 4 * *(_QWORD *)(v1372 + 8 * v1376);
                            v1393 = 4 * v1370[v1376];
                            v1394 = v1387;
                            v1395 = v1388;
                            do
                            {
                              if (v1390 >= 1)
                              {
                                v1396 = (float *)(v1391[19] + v1395);
                                v1397 = (unsigned int *)(v168[19] + v1394);
                                LODWORD(result) = v1390;
                                do
                                {
                                  *v1396 = (float)*v1397;
                                  v1396 = (float *)((char *)v1396 + v1392);
                                  v1397 = (unsigned int *)((char *)v1397 + v1393);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1389;
                              v1395 += v1385;
                              v1394 += v1386;
                            }
                            while (v1389 != v1384);
                          }
                          ++v1383;
                          v1388 += v1379;
                          v1387 += v1380;
                        }
                        while (v1383 != v1378);
                      }
                      ++v1377;
                      v1382 += v1565;
                      v1381 += v1549;
                    }
                    while (v1377 != v1581);
                  }
                  v1533 += v1482;
                  v1517 += v1472;
                  ++v1504;
                }
                while (v1504 != v1492);
              }
              break;
            default:
              v1247 = (char *)a4[1];
              LODWORD(v1248) = 1;
              v1249 = -20;
              do
              {
                v1248 = *(int *)&v1247[v1249] * (uint64_t)(int)v1248;
                v1249 += 4;
              }
              while (v1249);
              v1427 = v168[6];
              if (v1427)
              {
                result = 0;
                v1250 = (v169 << 30) - 0x500000000;
                v1251 = *a4;
                v1481 = *v8;
                v1252 = *a5;
                v1412 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1417 = ((unint64_t)(v1247 - (char *)*a4) >> 2) - 1;
                v1253 = *a6;
                v1491 = *(int *)((char *)*a4 + (v1250 >> 30));
                v1407 = ((v169 << 30) - 0x400000000) >> 32;
                v1254 = ((v169 << 30) - 0x200000000) >> 32;
                v1255 = ((v169 << 30) - 0x100000000) >> 32;
                v1471 = 4 * *(_QWORD *)(*a6 + (v1250 >> 29));
                v1452 = ((v169 << 30) - 0x300000000) >> 32;
                v1461 = 4 * *(uint64_t *)((char *)*a5 + (v1250 >> 29));
                v1422 = v1248;
                do
                {
                  v1256 = v1417;
                  v1444 = result;
                  v1257 = 0;
                  if ((v1417 & 0x80000000) != 0)
                  {
                    v1258 = v1412;
                  }
                  else
                  {
                    v1258 = v1412;
                    do
                    {
                      v1259 = ldiv((int)result, v1251[v1256]);
                      LODWORD(result) = v1259.quot;
                      v1257 += v1252[v1256--] * v1259.rem;
                    }
                    while (v1256 != -1);
                  }
                  v1260 = 0;
                  if ((v1258 & 0x80000000) == 0)
                  {
                    v1261 = v1444;
                    do
                    {
                      v1262 = ldiv(v1261, *(int *)(v1481 + 4 * v1258));
                      v1261 = v1262.quot;
                      v1260 += *(_QWORD *)(v1253 + 8 * v1258--) * v1262.rem;
                    }
                    while (v1258 != -1);
                  }
                  if (v1491 >= 1)
                  {
                    v1263 = 0;
                    v1579 = v1251[v1407];
                    v1532 = 4 * (v1260 + v1432);
                    v1563 = 4 * *(_QWORD *)(v1253 + 8 * v1407);
                    v1516 = 4 * (v1257 + v1433);
                    v1547 = 4 * v1252[v1407];
                    do
                    {
                      v1503 = v1263;
                      if (v1579 >= 1)
                      {
                        v1264 = 0;
                        v1265 = v1251[v1452];
                        v1266 = 4 * *(_QWORD *)(v1253 + 8 * v1452);
                        v1267 = 4 * v1252[v1452];
                        v1268 = v1516;
                        v1269 = v1532;
                        do
                        {
                          if (v1265 >= 1)
                          {
                            v1270 = 0;
                            v1271 = v1251[v1254];
                            v1272 = 4 * *(_QWORD *)(v1253 + 8 * v1254);
                            v1273 = 4 * v1252[v1254];
                            v1274 = v1268;
                            v1275 = v1269;
                            do
                            {
                              if (v1271 >= 1)
                              {
                                v1276 = 0;
                                v1277 = v1251[v1255];
                                v1278 = (_QWORD *)*v11;
                                v1279 = 4 * *(_QWORD *)(v1253 + 8 * v1255);
                                v1280 = 4 * v1252[v1255];
                                v1281 = v1274;
                                v1282 = v1275;
                                do
                                {
                                  if (v1277 >= 1)
                                  {
                                    v1283 = (float *)(v1278[19] + v1282);
                                    v1284 = (unsigned int *)(v168[19] + v1281);
                                    v1285 = v1277;
                                    do
                                    {
                                      *v1283 = (float)*v1284;
                                      v1283 = (float *)((char *)v1283 + v1279);
                                      v1284 = (unsigned int *)((char *)v1284 + v1280);
                                      --v1285;
                                    }
                                    while (v1285);
                                  }
                                  ++v1276;
                                  v1282 += v1272;
                                  v1281 += v1273;
                                }
                                while (v1276 != v1271);
                              }
                              ++v1270;
                              v1275 += v1266;
                              v1274 += v1267;
                            }
                            while (v1270 != v1265);
                          }
                          ++v1264;
                          v1269 += v1563;
                          v1268 += v1547;
                        }
                        while (v1264 != v1579);
                      }
                      v1263 = v1503 + 1;
                      v1532 += v1471;
                      v1516 += v1461;
                    }
                    while (v1503 + 1 != v1491);
                  }
                  result = v1444 + v1422;
                }
                while (v1427 > v1444 + v1422);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<signed char,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t **a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  float v31;
  float *v32;
  size_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  BOOL *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  char *v72;
  _DWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  char *v109;
  _DWORD *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  float *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  float *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  ldiv_t v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int *v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int *v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  ldiv_t v232;
  int *v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t *v240;
  uint64_t v241;
  int *v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int i;
  int v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  int *v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int j;
  int v262;
  int k;
  int v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int *v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  ldiv_t v278;
  int *v279;
  int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  int *v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  int v298;
  uint64_t *v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  int *v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  int v314;
  uint64_t *v315;
  uint64_t v316;
  int v317;
  int v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  ldiv_t v333;
  int *v334;
  int v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t *v341;
  uint64_t v342;
  int *v343;
  int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  int m;
  int v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  int *v355;
  int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  int n;
  int v363;
  int ii;
  int v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int *v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  ldiv_t v379;
  int *v380;
  int v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  int *v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  int v399;
  uint64_t *v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  int *v405;
  int v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  int v415;
  uint64_t *v416;
  uint64_t v417;
  int v418;
  int v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  int *v430;
  uint64_t v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  ldiv_t v435;
  int v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t *v442;
  int v443;
  uint64_t v444;
  int *v445;
  int v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t *v452;
  int v453;
  uint64_t *v454;
  int v455;
  uint64_t v456;
  int *v457;
  int v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  int v465;
  uint64_t *v466;
  int v467;
  int v468;
  uint64_t *v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int *v476;
  uint64_t v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  ldiv_t v481;
  int v482;
  int v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  int *v491;
  int v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  int *v507;
  int v508;
  int v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  uint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  int v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  uint64_t v526;
  char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int *v532;
  uint64_t *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  ldiv_t v538;
  uint64_t v539;
  uint64_t v540;
  ldiv_t v541;
  int v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  uint64_t *v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  int v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  int *v577;
  int v578;
  int v579;
  uint64_t v580;
  uint64_t *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  int *v603;
  int v604;
  uint64_t *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  int v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  int v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  uint64_t v631;
  int *v632;
  uint64_t v633;
  uint64_t *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  uint64_t v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  uint64_t v655;
  uint64_t *v656;
  uint64_t v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  uint64_t v661;
  int *v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t *v666;
  ldiv_t v667;
  uint64_t v668;
  unint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  int quot;
  ldiv_t v674;
  uint64_t v675;
  int v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  int v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  int v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  int v696;
  int v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  int v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  char *v720;
  uint64_t v721;
  uint64_t v722;
  int *v723;
  uint64_t *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  ldiv_t v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  ldiv_t v735;
  int v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  int v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  int v748;
  int v749;
  uint64_t v750;
  uint64_t *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  uint64_t v756;
  _DWORD *v757;
  uint64_t v758;
  int *v759;
  int v760;
  int v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  _DWORD *v773;
  uint64_t v774;
  int *v775;
  int v776;
  int v777;
  uint64_t *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  int v792;
  int v793;
  uint64_t v794;
  uint64_t *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  int v799;
  uint64_t v800;
  _DWORD *v801;
  uint64_t v802;
  int *v803;
  int v804;
  uint64_t *v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  int v816;
  int v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  int v822;
  int v823;
  uint64_t v824;
  uint64_t *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  int v829;
  uint64_t v830;
  _DWORD *v831;
  uint64_t v832;
  int *v833;
  uint64_t *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  int v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  int v845;
  int v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  int v851;
  int v852;
  uint64_t v853;
  uint64_t *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  int v858;
  uint64_t v859;
  _DWORD *v860;
  uint64_t v861;
  uint64_t v862;
  int *v863;
  unint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t *v867;
  ldiv_t v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  ldiv_t v875;
  uint64_t v876;
  int v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  int v884;
  int v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  int v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  int v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  int v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  int v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  char *v921;
  uint64_t v922;
  uint64_t v923;
  int *v924;
  uint64_t *v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  ldiv_t v932;
  uint64_t v933;
  uint64_t v934;
  int v935;
  ldiv_t v936;
  int v937;
  int v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  int v943;
  int v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  int v949;
  int v950;
  uint64_t v951;
  uint64_t *v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  int v956;
  uint64_t v957;
  _DWORD *v958;
  uint64_t v959;
  int *v960;
  int v961;
  int v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  _DWORD *v974;
  uint64_t v975;
  int *v976;
  int v977;
  int v978;
  uint64_t *v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  int v993;
  int v994;
  uint64_t v995;
  uint64_t *v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  int v1000;
  uint64_t v1001;
  _DWORD *v1002;
  uint64_t v1003;
  int *v1004;
  int v1005;
  uint64_t *v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  int v1017;
  int v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  int v1023;
  int v1024;
  uint64_t v1025;
  uint64_t *v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  int v1030;
  uint64_t v1031;
  _DWORD *v1032;
  uint64_t v1033;
  int *v1034;
  uint64_t *v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  int v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  int v1046;
  int v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  int v1052;
  int v1053;
  uint64_t v1054;
  uint64_t *v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  int v1059;
  uint64_t v1060;
  _DWORD *v1061;
  char *v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  int *v1067;
  uint64_t *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  ldiv_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  ldiv_t v1077;
  int v1078;
  int v1079;
  int v1080;
  uint64_t v1081;
  uint64_t v1082;
  int v1083;
  uint64_t v1084;
  int v1085;
  uint64_t v1086;
  uint64_t v1087;
  int v1088;
  uint64_t v1089;
  int v1090;
  uint64_t *v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  _QWORD *v1097;
  uint64_t v1098;
  int v1099;
  uint64_t v1100;
  int v1101;
  int v1102;
  uint64_t *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  int v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  _QWORD *v1114;
  uint64_t v1115;
  int v1116;
  uint64_t v1117;
  int *v1118;
  int v1119;
  int v1120;
  uint64_t *v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  int v1130;
  uint64_t v1131;
  uint64_t v1132;
  int v1133;
  uint64_t v1134;
  int v1135;
  uint64_t *v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  _QWORD *v1142;
  uint64_t v1143;
  int v1144;
  uint64_t v1145;
  int *v1146;
  int v1147;
  uint64_t *v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  int v1152;
  uint64_t v1153;
  uint64_t v1154;
  int v1155;
  uint64_t v1156;
  int v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  int v1161;
  uint64_t v1162;
  int v1163;
  uint64_t *v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  _QWORD *v1170;
  uint64_t v1171;
  int v1172;
  uint64_t v1173;
  int *v1174;
  uint64_t *v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  int v1180;
  int v1181;
  uint64_t v1182;
  uint64_t v1183;
  int v1184;
  uint64_t v1185;
  int v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  int v1190;
  uint64_t v1191;
  int v1192;
  uint64_t *v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  _QWORD *v1199;
  uint64_t v1200;
  int v1201;
  char *v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  int *v1207;
  uint64_t *v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  ldiv_t v1215;
  uint64_t v1216;
  ldiv_t v1217;
  int v1218;
  int v1219;
  uint64_t v1220;
  int v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  int v1225;
  uint64_t v1226;
  int v1227;
  uint64_t v1228;
  uint64_t v1229;
  int v1230;
  uint64_t v1231;
  int v1232;
  uint64_t *v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  float *v1238;
  int v1239;
  uint64_t v1240;
  int v1241;
  int v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  int v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  int v1252;
  uint64_t v1253;
  int *v1254;
  int v1255;
  int v1256;
  uint64_t v1257;
  uint64_t *v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  int v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  int v1272;
  uint64_t v1273;
  int v1274;
  uint64_t *v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  float *v1280;
  int v1281;
  uint64_t v1282;
  int *v1283;
  int v1284;
  uint64_t v1285;
  uint64_t *v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  int v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  uint64_t v1298;
  int v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  int v1303;
  uint64_t v1304;
  int v1305;
  uint64_t *v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  float *v1311;
  int v1312;
  uint64_t v1313;
  int *v1314;
  uint64_t *v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  int v1320;
  uint64_t v1321;
  int v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  int v1326;
  uint64_t v1327;
  int v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  int v1332;
  uint64_t v1333;
  int v1334;
  uint64_t *v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  float *v1340;
  int v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  unint64_t v1364;
  unint64_t v1365;
  unint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  unint64_t v1371;
  unint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  int v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  uint64_t v1421;
  int v1422;
  uint64_t v1423;
  int v1424;
  uint64_t v1425;
  int v1426;
  int v1427;
  int v1428;
  uint64_t v1429;
  int v1430;
  uint64_t v1431;
  int v1432;
  int v1433;
  int v1434;
  int v1435;
  uint64_t v1436;
  int v1437;
  int v1438;
  int v1439;
  uint64_t v1440;
  int v1441;
  uint64_t v1442;
  uint64_t v1443;
  int v1444;
  uint64_t v1445;
  uint64_t v1446;
  int v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  int v1451;
  uint64_t v1452;
  int v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  _QWORD *v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  _QWORD *v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  int v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1505;
  uint64_t v1506;
  int v1507;
  uint64_t v1508;
  int v1509;
  int v1510;
  uint64_t v1511;
  int v1512;
  int v1514;
  int v1515;
  int v1516;
  uint64_t v1517;
  int v1518;
  int v1519;
  int v1520;
  uint64_t v1521;
  int v1522;
  int v1523;
  int v1524;
  int v1525;
  int v1526;

  v8 = *a2;
  v9 = a6;
  v13 = result;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v14 = v8[6];
          if (v14)
            result = (uint64_t)memset((void *)v8[19], **(_BYTE **)(*(_QWORD *)result + 152) != 0, v14);
          break;
        case 1:
          v34 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v34)
          {
            v35 = *(unsigned __int8 **)(*(_QWORD *)result + 152);
            v36 = (BOOL *)v8[19];
            do
            {
              v37 = *v35++;
              *v36++ = v37 != 0;
              --v34;
            }
            while (v34);
          }
          break;
        case 2:
          v38 = *a7;
          v39 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v40 = **a4;
              if ((int)v40 >= 1)
              {
                v41 = (BOOL *)v8[19];
                v42 = **a5;
                v43 = (_BYTE *)(*(_QWORD *)(v39 + 152) + v38);
                do
                {
                  *v41++ = *v43 != 0;
                  v43 += v42;
                  --v40;
                }
                while (v40);
              }
              break;
            case 2:
              v179 = **a4;
              if (v179 >= 1)
              {
                v180 = 0;
                v181 = 0;
                v182 = *(_QWORD *)(v39 + 152);
                v183 = v8[19];
                v184 = (*a4)[1];
                v185 = (*a5)[1];
                v186 = **a5 - v185 * v184;
                do
                {
                  v187 = v184;
                  if ((int)v184 >= 1)
                  {
                    do
                    {
                      result = *(_BYTE *)(v182 + v38) != 0;
                      *(_BYTE *)(v183 + v181++) = result;
                      v38 += v185;
                      --v187;
                    }
                    while (v187);
                  }
                  v38 += v186;
                  ++v180;
                }
                while (v180 != v179);
              }
              break;
            case 3:
              v188 = *a4;
              v189 = **a4;
              if (v189 >= 1)
              {
                v190 = 0;
                result = 0;
                v191 = *(_QWORD *)(v39 + 152);
                v192 = v8[19];
                v193 = v188[1];
                v194 = *a5;
                v195 = (*a5)[1];
                v196 = **a5 - v195 * v193;
                do
                {
                  if ((int)v193 < 1)
                  {
                    v203 = result;
                  }
                  else
                  {
                    v197 = 0;
                    v198 = v188[2];
                    v199 = *a5;
                    v200 = v195 - v194[2] * v198;
                    do
                    {
                      if ((int)v198 < 1)
                      {
                        v203 = result;
                      }
                      else
                      {
                        v201 = v199[2];
                        v202 = v198;
                        do
                        {
                          v203 = result + 1;
                          *(_BYTE *)(v192 + result) = *(_BYTE *)(v191 + v38) != 0;
                          v38 += v201;
                          ++result;
                          --v202;
                        }
                        while (v202);
                      }
                      v38 += v200;
                      ++v197;
                      result = v203;
                    }
                    while (v197 != (_DWORD)v193);
                  }
                  v38 += v196;
                  ++v190;
                  result = v203;
                }
                while (v190 != v189);
              }
              break;
            case 4:
              v204 = *a4;
              v205 = **a4;
              if (v205 >= 1)
              {
                v206 = 0;
                result = 0;
                v207 = *(_QWORD *)(v39 + 152);
                v208 = v8[19];
                v209 = v204[1];
                v210 = *a5;
                v211 = (*a5)[1];
                v212 = **a5 - v211 * v209;
                do
                {
                  if ((int)v209 < 1)
                  {
                    v223 = result;
                  }
                  else
                  {
                    v213 = 0;
                    v214 = v204[2];
                    v215 = *a5;
                    v216 = v211 - v210[2] * v214;
                    do
                    {
                      if ((int)v214 < 1)
                      {
                        v223 = result;
                      }
                      else
                      {
                        v217 = 0;
                        v218 = v204[3];
                        v219 = *a5;
                        v220 = v215[2] - v215[3] * v218;
                        do
                        {
                          if ((int)v218 < 1)
                          {
                            v223 = result;
                          }
                          else
                          {
                            v221 = v219[3];
                            v222 = v218;
                            do
                            {
                              v223 = result + 1;
                              *(_BYTE *)(v208 + result) = *(_BYTE *)(v207 + v38) != 0;
                              v38 += v221;
                              ++result;
                              --v222;
                            }
                            while (v222);
                          }
                          v38 += v220;
                          ++v217;
                          result = v223;
                        }
                        while (v217 != (_DWORD)v214);
                      }
                      v38 += v216;
                      ++v213;
                      result = v223;
                    }
                    while (v213 != (_DWORD)v209);
                  }
                  v38 += v212;
                  ++v206;
                  result = v223;
                }
                while (v206 != v205);
              }
              break;
            default:
              v169 = v8[6];
              if (v169)
              {
                v170 = 0;
                v171 = *(_QWORD *)(v39 + 152) + v38;
                v172 = v8[19];
                v173 = *a4;
                v174 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v175 = *a5;
                do
                {
                  v176 = 0;
                  if ((v174 & 0x80000000) == 0)
                  {
                    v177 = v174;
                    LODWORD(result) = v170;
                    do
                    {
                      v178 = ldiv((int)result, v173[v177]);
                      result = v178.quot;
                      v176 += v175[v177--] * v178.rem;
                    }
                    while (v177 != -1);
                  }
                  *(_BYTE *)(v172 + v170++) = *(_BYTE *)(v171 + v176) != 0;
                }
                while (v170 != v169);
              }
              break;
          }
          break;
        case 3:
          v44 = *a7;
          v45 = *a8;
          v46 = *(_QWORD **)result;
          v47 = v46[1] - *v46;
          switch(v47 >> 2)
          {
            case 1:
              v48 = (v47 << 30) - 0x100000000;
              v49 = *(int *)((char *)*a4 + (v48 >> 30));
              if (v49 >= 1)
              {
                v50 = v48 >> 29;
                v51 = *(uint64_t *)((char *)*a5 + (v48 >> 29));
                v52 = *(_QWORD *)(*a6 + v50);
                v53 = (BOOL *)(v8[19] + v45);
                v54 = (_BYTE *)(v46[19] + v44);
                do
                {
                  *v53 = *v54 != 0;
                  v54 += v51;
                  v53 += v52;
                  --v49;
                }
                while (v49);
              }
              break;
            case 2:
              v564 = (v47 << 30) - 0x200000000;
              v565 = *(int *)((char *)*a4 + (v564 >> 30));
              if (v565 >= 1)
              {
                v566 = 0;
                v567 = v564 >> 29;
                v568 = *(uint64_t *)((char *)*a5 + (v564 >> 29));
                v569 = *(_QWORD *)(*a6 + v567);
                v570 = (v47 << 30) - 0x100000000;
                result = v570 >> 29;
                v571 = *(uint64_t *)((char *)*a5 + (v570 >> 29));
                v572 = *(_QWORD *)(*a6 + (v570 >> 29));
                v573 = *(int *)((char *)*a4 + (v570 >> 30));
                do
                {
                  if (v573 >= 1)
                  {
                    v574 = v8[19];
                    v575 = v46[19];
                    LODWORD(result) = v573;
                    do
                    {
                      *(_BYTE *)(v574 + v45) = *(_BYTE *)(v575 + v44) != 0;
                      v574 += v572;
                      v575 += v571;
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v44 += v568;
                  v45 += v569;
                  ++v566;
                }
                while (v566 != v565);
              }
              break;
            case 3:
              v576 = (v47 << 30) - 0x300000000;
              v577 = *a4;
              v578 = *(int *)((char *)*a4 + (v576 >> 30));
              if (v578 >= 1)
              {
                v579 = 0;
                v580 = v47 << 30;
                v581 = *a5;
                v582 = v576 >> 29;
                v583 = *(uint64_t *)((char *)*a5 + (v576 >> 29));
                v584 = *a6;
                v585 = *(_QWORD *)(*a6 + v582);
                v586 = v580 - 0x200000000;
                v587 = (v580 - 0x200000000) >> 29;
                v588 = v580 - 0x100000000;
                v589 = *(uint64_t *)((char *)*a5 + v587);
                v590 = *(_QWORD *)(*a6 + v587);
                v591 = *(int *)((char *)v577 + (v586 >> 30));
                result = v588 >> 32;
                do
                {
                  if (v591 >= 1)
                  {
                    v592 = 0;
                    v593 = v581[result];
                    v594 = *(_QWORD *)(v584 + 8 * result);
                    v595 = v44;
                    v596 = v577[result];
                    v597 = v45;
                    v598 = *a2;
                    do
                    {
                      if (v596 >= 1)
                      {
                        v599 = v598[19];
                        v600 = v46[19];
                        v601 = v596;
                        do
                        {
                          *(_BYTE *)(v599 + v597) = *(_BYTE *)(v600 + v595) != 0;
                          v599 += v594;
                          v600 += v593;
                          --v601;
                        }
                        while (v601);
                      }
                      v595 += v589;
                      v597 += v590;
                      ++v592;
                    }
                    while (v592 != v591);
                  }
                  v44 += v583;
                  v45 += v585;
                  ++v579;
                }
                while (v579 != v578);
              }
              break;
            case 4:
              v602 = (v47 << 30) - 0x400000000;
              v603 = *a4;
              v1515 = *(int *)((char *)*a4 + (v602 >> 30));
              if (v1515 >= 1)
              {
                v604 = 0;
                v605 = *a5;
                v606 = v602 >> 29;
                v1482 = *(uint64_t *)((char *)*a5 + v606);
                v607 = *a6;
                v1499 = *(_QWORD *)(*a6 + v606);
                v608 = v47 << 30;
                v609 = (v47 << 30) - 0x300000000;
                v610 = *(uint64_t *)((char *)*a5 + (v609 >> 29));
                v611 = *(_QWORD *)(*a6 + (v609 >> 29));
                v612 = *(int *)((char *)v603 + (v609 >> 30));
                v1465 = (v608 - 0x200000000) >> 32;
                v613 = (v608 - 0x100000000) >> 32;
                do
                {
                  result = v45;
                  v614 = v44;
                  if (v612 >= 1)
                  {
                    v615 = 0;
                    v616 = v605[v1465];
                    v617 = *(_QWORD *)(v607 + 8 * v1465);
                    v618 = v44;
                    v619 = v603[v1465];
                    v620 = v45;
                    do
                    {
                      if (v619 >= 1)
                      {
                        v621 = 0;
                        v622 = v605[v613];
                        v623 = *(_QWORD *)(v607 + 8 * v613);
                        v624 = v618;
                        v625 = v603[v613];
                        v626 = v620;
                        v627 = *a2;
                        do
                        {
                          if (v625 >= 1)
                          {
                            v628 = v627[19];
                            v629 = v46[19];
                            v630 = v625;
                            do
                            {
                              *(_BYTE *)(v628 + v626) = *(_BYTE *)(v629 + v624) != 0;
                              v628 += v623;
                              v629 += v622;
                              --v630;
                            }
                            while (v630);
                          }
                          v624 += v616;
                          v626 += v617;
                          ++v621;
                        }
                        while (v621 != v619);
                      }
                      v618 += v610;
                      v620 += v611;
                      ++v615;
                    }
                    while (v615 != v612);
                  }
                  v44 = v614 + v1482;
                  v45 = result + v1499;
                  ++v604;
                }
                while (v604 != v1515);
              }
              break;
            case 5:
              v631 = (v47 << 30) - 0x500000000;
              v632 = *a4;
              v1441 = *(int *)((char *)*a4 + (v631 >> 30));
              if (v1441 >= 1)
              {
                v1453 = 0;
                v633 = v47 << 30;
                v634 = *a5;
                v635 = v631 >> 29;
                v636 = *a6;
                v1421 = *(_QWORD *)(*a6 + v635);
                v1431 = *(uint64_t *)((char *)*a5 + v635);
                v637 = ((v47 << 30) - 0x400000000) >> 29;
                v1483 = *(_QWORD *)(*a6 + v637);
                v1500 = *(uint64_t *)((char *)*a5 + v637);
                v1516 = *(int *)((char *)v632 + ((v633 - 0x400000000) >> 30));
                v1411 = (v633 - 0x300000000) >> 32;
                v1466 = (v633 - 0x200000000) >> 32;
                v638 = (v633 - 0x100000000) >> 32;
                do
                {
                  v1379 = v45;
                  v1389 = v44;
                  if (v1516 >= 1)
                  {
                    v639 = 0;
                    v640 = v634[v1411];
                    v641 = *(_QWORD *)(v636 + 8 * v1411);
                    result = v45;
                    v642 = v44;
                    v643 = v632[v1411];
                    do
                    {
                      if (v643 >= 1)
                      {
                        v644 = 0;
                        v645 = v634[v1466];
                        v646 = *(_QWORD *)(v636 + 8 * v1466);
                        v647 = v642;
                        v648 = v632[v1466];
                        v649 = result;
                        do
                        {
                          if (v648 >= 1)
                          {
                            v650 = 0;
                            v651 = v634[v638];
                            v652 = *(_QWORD *)(v636 + 8 * v638);
                            v653 = v647;
                            v654 = v632[v638];
                            v655 = v649;
                            v656 = *a2;
                            do
                            {
                              if (v654 >= 1)
                              {
                                v657 = v656[19];
                                v658 = v46[19];
                                v659 = v654;
                                do
                                {
                                  *(_BYTE *)(v657 + v655) = *(_BYTE *)(v658 + v653) != 0;
                                  v657 += v652;
                                  v658 += v651;
                                  --v659;
                                }
                                while (v659);
                              }
                              v653 += v645;
                              v655 += v646;
                              ++v650;
                            }
                            while (v650 != v648);
                          }
                          v647 += v640;
                          v649 += v641;
                          ++v644;
                        }
                        while (v644 != v643);
                      }
                      v642 += v1500;
                      result += v1483;
                      ++v639;
                    }
                    while (v639 != v1516);
                  }
                  v44 = v1389 + v1431;
                  v45 = v1379 + v1421;
                  ++v1453;
                }
                while (v1453 != v1441);
              }
              break;
            default:
              v527 = (char *)a4[1];
              LODWORD(v528) = 1;
              v529 = -20;
              do
              {
                v528 = *(int *)&v527[v529] * (uint64_t)(int)v528;
                v529 += 4;
              }
              while (v529);
              v1371 = v46[6];
              if (v1371)
              {
                v530 = 0;
                v531 = (v47 << 30) - 0x500000000;
                v532 = *a4;
                v1348 = *v8;
                v533 = *a5;
                v1353 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1358 = ((unint64_t)(v527 - (char *)*a4) >> 2) - 1;
                v534 = *a6;
                v1401 = *(_QWORD *)(*a6 + (v531 >> 29));
                v1410 = *(uint64_t *)((char *)*a5 + (v531 >> 29));
                v1420 = *(int *)((char *)*a4 + (v531 >> 30));
                v1343 = ((v47 << 30) - 0x400000000) >> 32;
                v1395 = ((v47 << 30) - 0x300000000) >> 32;
                v1464 = ((v47 << 30) - 0x200000000) >> 32;
                v535 = ((v47 << 30) - 0x100000000) >> 32;
                v1378 = *a8;
                v1388 = *a7;
                v1363 = v528;
                do
                {
                  v536 = v1358;
                  if ((v1358 & 0x80000000) != 0)
                  {
                    v537 = 0;
                  }
                  else
                  {
                    v537 = 0;
                    LODWORD(result) = v530;
                    do
                    {
                      v538 = ldiv((int)result, v532[v536]);
                      result = v538.quot;
                      v537 += v533[v536--] * v538.rem;
                    }
                    while (v536 != -1);
                  }
                  v539 = v1353;
                  v1374 = v530;
                  v540 = 0;
                  if ((v1353 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v530;
                    do
                    {
                      v541 = ldiv((int)result, *(int *)(v1348 + 4 * v539));
                      result = v541.quot;
                      v540 += *(_QWORD *)(v534 + 8 * v539--) * v541.rem;
                    }
                    while (v539 != -1);
                  }
                  if (v1420 >= 1)
                  {
                    v542 = 0;
                    v1452 = v537 + v1388;
                    v1440 = v540 + v1378;
                    v1481 = *(_QWORD *)(v534 + 8 * v1343);
                    v1498 = v533[v1343];
                    v1514 = v532[v1343];
                    do
                    {
                      v1430 = v542;
                      if (v1514 >= 1)
                      {
                        v543 = 0;
                        v544 = v533[v1395];
                        v545 = *(_QWORD *)(v534 + 8 * v1395);
                        v547 = v1440;
                        v546 = v1452;
                        result = v532[v1395];
                        do
                        {
                          if ((int)result >= 1)
                          {
                            v548 = 0;
                            v549 = v533[v1464];
                            v550 = *(_QWORD *)(v534 + 8 * v1464);
                            v551 = v546;
                            v552 = v532[v1464];
                            v553 = v547;
                            do
                            {
                              if (v552 >= 1)
                              {
                                v554 = 0;
                                v555 = v533[v535];
                                v556 = *(_QWORD *)(v534 + 8 * v535);
                                v557 = v551;
                                v558 = v532[v535];
                                v559 = v553;
                                v560 = *a2;
                                do
                                {
                                  if (v558 >= 1)
                                  {
                                    v561 = v560[19];
                                    v562 = v46[19];
                                    v563 = v558;
                                    do
                                    {
                                      *(_BYTE *)(v561 + v559) = *(_BYTE *)(v562 + v557) != 0;
                                      v561 += v556;
                                      v562 += v555;
                                      --v563;
                                    }
                                    while (v563);
                                  }
                                  v557 += v549;
                                  v559 += v550;
                                  ++v554;
                                }
                                while (v554 != v552);
                              }
                              v551 += v544;
                              v553 += v545;
                              ++v548;
                            }
                            while (v548 != (_DWORD)result);
                          }
                          v546 += v1498;
                          v547 += v1481;
                          ++v543;
                        }
                        while (v543 != v1514);
                      }
                      v1452 += v1410;
                      v1440 += v1401;
                      v542 = v1430 + 1;
                    }
                    while (v1430 + 1 != v1420);
                  }
                  v530 += v1363;
                }
                while (v1371 > v1374 + v1363);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v15 = 0;
            v16 = **(_BYTE **)(*(_QWORD *)result + 152);
            v17 = v8[19];
            do
              *(_BYTE *)(v17 + v15++) = v16;
            while ((*a2)[6] > v15);
          }
          break;
        case 1:
          goto LABEL_35;
        case 2:
          v55 = *a7;
          v56 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v57 = 0;
                v58 = *(_QWORD *)(v56 + 152);
                v59 = v8[19];
                do
                {
                  *(_BYTE *)(v59 + v57) = *(_BYTE *)(v58 + v55);
                  v55 += **a5;
                  ++v57;
                }
                while (**a4 > (int)v57);
              }
              break;
            case 2:
              v233 = *a4;
              v234 = **a4;
              if (v234 >= 1)
              {
                v235 = 0;
                v236 = 0;
                v237 = *(_QWORD *)(v56 + 152);
                v238 = v8[19];
                do
                {
                  v239 = v233[1];
                  if (v239 < 1)
                  {
                    v240 = *a5;
                    v241 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v238 + v236 + result) = *(_BYTE *)(v237 + v55);
                      v240 = *a5;
                      v241 = (*a5)[1];
                      v55 += v241;
                      v233 = *a4;
                      v239 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v239);
                    v234 = *v233;
                    v236 += result;
                  }
                  v55 = *v240 + v55 - v241 * v239;
                  ++v235;
                }
                while (v235 < v234);
              }
              break;
            case 3:
              v242 = *a4;
              v243 = **a4;
              if (v243 >= 1)
              {
                v244 = 0;
                v245 = 0;
                v246 = *(_QWORD *)(v56 + 152);
                v247 = v8[19];
                do
                {
                  v248 = v242[1];
                  if (v248 < 1)
                  {
                    v252 = *a5;
                    v253 = (*a5)[1];
                  }
                  else
                  {
                    for (i = 0; i < v248; ++i)
                    {
                      v250 = v242[2];
                      if (v250 < 1)
                      {
                        v252 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v251 = 0;
                        do
                        {
                          *(_BYTE *)(v247 + v245 + v251) = *(_BYTE *)(v246 + v55);
                          v252 = *a5;
                          result = (*a5)[2];
                          v55 += result;
                          v242 = *a4;
                          v250 = (*a4)[2];
                          ++v251;
                        }
                        while ((int)v251 < v250);
                        v245 += v251;
                      }
                      v253 = v252[1];
                      v55 = v253 + v55 - result * v250;
                      v248 = v242[1];
                    }
                    v243 = *v242;
                  }
                  v55 = *v252 + v55 - v253 * v248;
                  ++v244;
                }
                while (v244 < v243);
              }
              break;
            case 4:
              v254 = *a4;
              v255 = **a4;
              if (v255 >= 1)
              {
                v256 = 0;
                v257 = 0;
                v258 = *(_QWORD *)(v56 + 152);
                v259 = v8[19];
                do
                {
                  v260 = v254[1];
                  if (v260 < 1)
                  {
                    v266 = *a5;
                    v268 = (*a5)[1];
                  }
                  else
                  {
                    for (j = 0; j < v260; ++j)
                    {
                      v262 = v254[2];
                      if (v262 < 1)
                      {
                        v266 = *a5;
                        v267 = (*a5)[2];
                      }
                      else
                      {
                        for (k = 0; k < v262; ++k)
                        {
                          v264 = v254[3];
                          if (v264 < 1)
                          {
                            v266 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v265 = 0;
                            do
                            {
                              *(_BYTE *)(v259 + v257 + v265) = *(_BYTE *)(v258 + v55);
                              v266 = *a5;
                              result = (*a5)[3];
                              v55 += result;
                              v254 = *a4;
                              v264 = (*a4)[3];
                              ++v265;
                            }
                            while ((int)v265 < v264);
                            v257 += v265;
                          }
                          v267 = v266[2];
                          v55 = v267 + v55 - result * v264;
                          v262 = v254[2];
                        }
                      }
                      v268 = v266[1];
                      v55 = v268 + v55 - v267 * v262;
                      v260 = v254[1];
                    }
                    v255 = *v254;
                  }
                  v55 = *v266 + v55 - v268 * v260;
                  ++v256;
                }
                while (v256 < v255);
              }
              break;
            default:
              if (v8[6])
              {
                v224 = 0;
                v225 = *(_QWORD *)(v56 + 152) + v55;
                v226 = v8[19];
                do
                {
                  v227 = *a4;
                  v228 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v229 = 0;
                  v230 = (v228 - 1);
                  if ((int)v228 - 1 >= 0)
                  {
                    v231 = *a5;
                    LODWORD(result) = v224;
                    do
                    {
                      v232 = ldiv((int)result, v227[v230]);
                      result = v232.quot;
                      v229 += v231[v230--] * v232.rem;
                    }
                    while (v230 != -1);
                  }
                  *(_BYTE *)(v226 + v224++) = *(_BYTE *)(v225 + v229);
                }
                while (v224 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v60 = *a7;
          v61 = *a8;
          v62 = *(_QWORD **)result;
          v63 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v63 >> 2)
          {
            case 1:
              v64 = (v63 << 30) - 0x100000000;
              v65 = *(int *)((char *)*a4 + (v64 >> 30));
              if (v65 >= 1)
              {
                v66 = v64 >> 29;
                v67 = *(uint64_t *)((char *)*a5 + (v64 >> 29));
                v68 = *(_QWORD *)(*a6 + v66);
                v69 = (_BYTE *)(v8[19] + v61);
                v70 = (_BYTE *)(v62[19] + v60);
                do
                {
                  *v69 = *v70;
                  v70 += v67;
                  v69 += v68;
                  --v65;
                }
                while (v65);
              }
              break;
            case 2:
              v682 = (v63 << 30) - 0x200000000;
              v683 = *(int *)((char *)*a4 + (v682 >> 30));
              if (v683 >= 1)
              {
                v684 = 0;
                v685 = v682 >> 29;
                v686 = *(uint64_t *)((char *)*a5 + (v682 >> 29));
                v687 = *(_QWORD *)(*a6 + v685);
                do
                {
                  v688 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x100000000;
                  v689 = *(int *)((char *)*a4 + (v688 >> 30));
                  if (v689 >= 1)
                  {
                    v690 = v688 >> 29;
                    v691 = *(uint64_t *)((char *)*a5 + (v688 >> 29));
                    v692 = *(_QWORD *)(*a6 + v690);
                    v693 = (*a2)[19];
                    v694 = *(_QWORD *)(*(_QWORD *)v13 + 152);
                    do
                    {
                      result = *(unsigned __int8 *)(v694 + v60);
                      *(_BYTE *)(v693 + v61) = result;
                      v693 += v692;
                      v694 += v691;
                      --v689;
                    }
                    while (v689);
                  }
                  v60 += v686;
                  v61 += v687;
                  ++v684;
                }
                while (v684 != v683);
              }
              break;
            case 3:
              v695 = (v63 << 30) - 0x300000000;
              v696 = *(int *)((char *)*a4 + (v695 >> 30));
              if (v696 >= 1)
              {
                v697 = 0;
                v698 = v695 >> 29;
                v699 = *(uint64_t *)((char *)*a5 + (v695 >> 29));
                v700 = *(_QWORD *)(*a6 + v698);
                do
                {
                  v701 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x200000000;
                  v702 = *(int *)((char *)*a4 + (v701 >> 30));
                  if (v702 >= 1)
                  {
                    v703 = 0;
                    v704 = v701 >> 29;
                    v705 = *(uint64_t *)((char *)*a5 + (v701 >> 29));
                    v706 = *(_QWORD *)(*v9 + v704);
                    result = v60;
                    v707 = v61;
                    do
                    {
                      v708 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x100000000;
                      v709 = *(int *)((char *)*a4 + (v708 >> 30));
                      if (v709 >= 1)
                      {
                        v710 = v708 >> 29;
                        v711 = *(uint64_t *)((char *)*a5 + (v708 >> 29));
                        v712 = *(_QWORD *)(*v9 + v710);
                        v713 = (*a2)[19];
                        v714 = *(_QWORD *)(*(_QWORD *)v13 + 152);
                        do
                        {
                          *(_BYTE *)(v713 + v707) = *(_BYTE *)(v714 + result);
                          v713 += v712;
                          v714 += v711;
                          --v709;
                        }
                        while (v709);
                      }
                      result += v705;
                      v707 += v706;
                      ++v703;
                    }
                    while (v703 != v702);
                  }
                  v60 += v699;
                  v61 += v700;
                  ++v697;
                }
                while (v697 != v696);
              }
              break;
            case 4:
              goto LABEL_552;
            case 5:
              v715 = (v63 << 30) - 0x500000000;
              v716 = *(int *)((char *)*a4 + (v715 >> 30));
              if (v716 >= 1)
              {
                v717 = v715 >> 29;
                v718 = *(uint64_t *)((char *)*a5 + v717);
                v719 = *(_QWORD *)(*a6 + v717);
                do
                {
                  v60 += v718;
                  v61 += v719;
                  --v716;
                }
                while (v716);
              }
              break;
            default:
              LODWORD(v660) = 1;
              v661 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v660 = a4[1][v661++] * (uint64_t)(int)v660;
              while (v661 * 4);
              if (v62[6])
              {
                result = 0;
                v1442 = *a8;
                v1454 = *a7;
                v1467 = v660;
                do
                {
                  v662 = *a4;
                  v663 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v664 = (v663 - 1);
                  v1484 = v62;
                  v1517 = result;
                  v665 = 0;
                  if ((int)v663 - 1 >= 0)
                  {
                    v666 = *a5;
                    do
                    {
                      v667 = ldiv((int)result, v662[v664]);
                      LODWORD(result) = v667.quot;
                      v665 += v666[v664--] * v667.rem;
                    }
                    while (v664 != -1);
                  }
                  v668 = **a2;
                  v669 = (unint64_t)((*a2)[1] - v668) >> 2;
                  v670 = *v9;
                  v671 = 0;
                  v672 = (v669 - 1);
                  if ((int)v669 - 1 >= 0)
                  {
                    quot = v1517;
                    do
                    {
                      v674 = ldiv(quot, *(int *)(v668 + 4 * v672));
                      quot = v674.quot;
                      v671 += *(_QWORD *)(v670 + 8 * v672--) * v674.rem;
                    }
                    while (v672 != -1);
                  }
                  v62 = v1484;
                  v675 = ((v62[1] - *v62) << 30) - 0x500000000;
                  v676 = *(int *)((char *)v662 + (v675 >> 30));
                  if (v676 >= 1)
                  {
                    v677 = v665 + v1454;
                    v678 = v675 >> 29;
                    v679 = *(uint64_t *)((char *)*a5 + v678);
                    v680 = *(_QWORD *)(v670 + v678);
                    v681 = v671 + v1442;
                    do
                    {
                      v677 += v679;
                      v681 += v680;
                      --v676;
                    }
                    while (v676);
                    v62 = *(_QWORD **)v13;
                  }
                  v9 = a6;
                  result = v1517 + v1467;
                }
                while (v62[6] > (unint64_t)(v1517 + v1467));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v18 = v8[6];
          if (v18)
          {
            v19 = **(char **)(*(_QWORD *)result + 152);
            v20 = (_DWORD *)v8[19];
            do
            {
              *v20++ = v19;
              --v18;
            }
            while (v18);
          }
          break;
        case 1:
          v71 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v71)
          {
            v72 = *(char **)(*(_QWORD *)result + 152);
            v73 = (_DWORD *)v8[19];
            do
            {
              v74 = *v72++;
              *v73++ = v74;
              --v71;
            }
            while (v71);
          }
          break;
        case 2:
          v75 = *a7;
          v76 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v77 = *a4;
              if (**a4 >= 1)
              {
                v78 = 0;
                v79 = v8[19];
                v80 = **a5;
                v81 = (char *)(*(_QWORD *)(v76 + 152) + v75);
                do
                {
                  *(_DWORD *)(v79 + 4 * v78) = *v81;
                  v81 += v80;
                  ++v78;
                }
                while (*v77 > (int)v78);
              }
              break;
            case 2:
              v279 = *a4;
              v280 = **a4;
              if (v280 >= 1)
              {
                v281 = 0;
                v282 = 0;
                v283 = *(_QWORD *)(v76 + 152);
                v284 = v8[19];
                v285 = **a5;
                v286 = (*a5)[1];
                v287 = v279[1];
                do
                {
                  if (v287 >= 1)
                  {
                    v288 = 0;
                    do
                    {
                      *(_DWORD *)(v284 + 4 * v282 + 4 * v288) = *(char *)(v283 + v75);
                      v75 += v286;
                      v287 = v279[1];
                      ++v288;
                    }
                    while ((int)v288 < v287);
                    v280 = *v279;
                    v282 += v288;
                  }
                  result = v287;
                  v75 = v75 + v285 - v286 * v287;
                  ++v281;
                }
                while (v281 < v280);
              }
              break;
            case 3:
              v289 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v290 = 0;
                v291 = 0;
                v292 = *(_QWORD *)(v76 + 152);
                v293 = v8[19];
                v294 = *a5;
                v295 = **a5;
                v296 = (*a5)[1];
                v297 = v289[1];
                do
                {
                  if (v297 >= 1)
                  {
                    v298 = 0;
                    v299 = *a5;
                    v300 = v294[2];
                    v301 = v289[2];
                    do
                    {
                      if (v301 >= 1)
                      {
                        v302 = 0;
                        v303 = v299[2];
                        do
                        {
                          *(_DWORD *)(v293 + 4 * v291 + 4 * v302) = *(char *)(v292 + v75);
                          v75 += v303;
                          v301 = v289[2];
                          ++v302;
                        }
                        while ((int)v302 < v301);
                        v297 = v289[1];
                        v291 += v302;
                      }
                      v75 = v75 + v296 - v300 * v301;
                      ++v298;
                    }
                    while (v298 < v297);
                    result = *v289;
                  }
                  v75 = v75 + v295 - v296 * v297;
                  ++v290;
                }
                while (v290 < (int)result);
              }
              break;
            case 4:
              v304 = *a4;
              v305 = **a4;
              if (v305 >= 1)
              {
                v306 = 0;
                v307 = 0;
                v308 = *(_QWORD *)(v76 + 152);
                v309 = v8[19];
                v310 = *a5;
                v311 = **a5;
                v312 = (*a5)[1];
                v313 = v304[1];
                do
                {
                  if (v313 >= 1)
                  {
                    v314 = 0;
                    v315 = *a5;
                    v316 = v310[2];
                    v317 = v304[2];
                    do
                    {
                      if (v317 >= 1)
                      {
                        v318 = 0;
                        v319 = *a5;
                        v320 = v315[2];
                        v321 = v315[3];
                        v322 = v304[3];
                        do
                        {
                          if (v322 >= 1)
                          {
                            v323 = 0;
                            v324 = v319[3];
                            do
                            {
                              *(_DWORD *)(v309 + 4 * v307 + 4 * v323) = *(char *)(v308 + v75);
                              v75 += v324;
                              v322 = v304[3];
                              ++v323;
                            }
                            while ((int)v323 < v322);
                            v317 = v304[2];
                            v307 += v323;
                          }
                          v75 = v75 + v320 - v321 * v322;
                          ++v318;
                        }
                        while (v318 < v317);
                        v313 = v304[1];
                      }
                      v75 = v75 + v312 - v316 * v317;
                      ++v314;
                    }
                    while (v314 < v313);
                    v305 = *v304;
                  }
                  result = v313;
                  v75 = v75 + v311 - v312 * v313;
                  ++v306;
                }
                while (v306 < v305);
              }
              break;
            default:
              v269 = v8[6];
              if (v269)
              {
                v270 = 0;
                v271 = *(_QWORD *)(v76 + 152) + v75;
                v272 = v8[19];
                v273 = *a4;
                v274 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v275 = *a5;
                do
                {
                  v276 = 0;
                  if ((v274 & 0x80000000) == 0)
                  {
                    v277 = v274;
                    LODWORD(result) = v270;
                    do
                    {
                      v278 = ldiv((int)result, v273[v277]);
                      result = v278.quot;
                      v276 += v275[v277--] * v278.rem;
                    }
                    while (v277 != -1);
                  }
                  *(_DWORD *)(v272 + 4 * v270++) = *(char *)(v271 + v276);
                }
                while (v270 != v269);
              }
              break;
          }
          break;
        case 3:
          v82 = *a7;
          v1368 = *a8;
          v83 = *(_QWORD **)result;
          v84 = v83[1] - *v83;
          switch(v84 >> 2)
          {
            case 1:
              v85 = (v84 << 30) - 0x100000000;
              v86 = *(int *)((char *)*a4 + (v85 >> 30));
              if (v86 >= 1)
              {
                v87 = v85 >> 29;
                v88 = *(uint64_t *)((char *)*a5 + (v85 >> 29));
                v89 = (_DWORD *)(v8[19] + 4 * v1368);
                v90 = (char *)(v83[19] + v82);
                v91 = 4 * *(_QWORD *)(*a6 + v87);
                do
                {
                  *v89 = *v90;
                  v90 += v88;
                  v89 = (_DWORD *)((char *)v89 + v91);
                  --v86;
                }
                while (v86);
              }
              break;
            case 2:
              v758 = (v84 << 30) - 0x200000000;
              v759 = *a4;
              v760 = *(int *)((char *)*a4 + (v758 >> 30));
              if (v760 >= 1)
              {
                v761 = 0;
                v762 = v758 >> 29;
                v763 = *(uint64_t *)((char *)*a5 + (v758 >> 29));
                v764 = *(_QWORD *)(*a6 + v762);
                v765 = (v84 << 30) - 0x100000000;
                v766 = *(uint64_t *)((char *)*a5 + (v765 >> 29));
                v767 = *(_QWORD *)(*a6 + (v765 >> 29));
                v768 = v765 >> 32;
                v769 = 4 * v1368;
                v770 = 4 * v764;
                v771 = 4 * v767;
                do
                {
                  result = v759[v768];
                  if ((int)result >= 1)
                  {
                    v772 = v83[19];
                    v773 = (_DWORD *)(v8[19] + v769);
                    do
                    {
                      *v773 = *(char *)(v772 + v82);
                      v773 = (_DWORD *)((char *)v773 + v771);
                      v772 += v766;
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v82 += v763;
                  ++v761;
                  v769 += v770;
                }
                while (v761 != v760);
              }
              break;
            case 3:
              v774 = (v84 << 30) - 0x300000000;
              v775 = *a4;
              v776 = *(int *)((char *)*a4 + (v774 >> 30));
              if (v776 >= 1)
              {
                v777 = 0;
                v778 = *a5;
                v779 = v774 >> 29;
                v780 = *(uint64_t *)((char *)*a5 + (v774 >> 29));
                v781 = v84 << 30;
                v782 = *a6;
                v783 = *(_QWORD *)(*a6 + v779);
                v784 = (v781 - 0x200000000) >> 32;
                v785 = (v781 - 0x200000000) >> 29;
                v786 = v781 - 0x100000000;
                v787 = *(uint64_t *)((char *)*a5 + v785);
                v788 = *(_QWORD *)(*a6 + v785);
                v789 = v786 >> 32;
                v790 = 4 * v1368;
                result = 4 * v783;
                v791 = 4 * v788;
                do
                {
                  v792 = v775[v784];
                  if (v792 >= 1)
                  {
                    v793 = 0;
                    v794 = v778[v789];
                    v795 = *a2;
                    v796 = 4 * *(_QWORD *)(v782 + 8 * v789);
                    v797 = v790;
                    v798 = v82;
                    do
                    {
                      v799 = v775[v789];
                      if (v799 >= 1)
                      {
                        v800 = v83[19];
                        v801 = (_DWORD *)(v795[19] + v797);
                        do
                        {
                          *v801 = *(char *)(v800 + v798);
                          v801 = (_DWORD *)((char *)v801 + v796);
                          v800 += v794;
                          --v799;
                        }
                        while (v799);
                      }
                      v798 += v787;
                      ++v793;
                      v797 += v791;
                    }
                    while (v793 != v792);
                  }
                  v82 += v780;
                  ++v777;
                  v790 += result;
                }
                while (v777 != v776);
              }
              break;
            case 4:
              v802 = (v84 << 30) - 0x400000000;
              v803 = *a4;
              v1519 = *(int *)((char *)*a4 + (v802 >> 30));
              if (v1519 >= 1)
              {
                v804 = 0;
                v805 = *a5;
                v806 = v802 >> 29;
                v1486 = *(uint64_t *)((char *)*a5 + v806);
                v807 = *a6;
                v808 = (v84 << 30) - 0x300000000;
                v809 = (v84 << 30) - 0x200000000;
                v810 = (v84 << 30) - 0x100000000;
                v811 = *(uint64_t *)((char *)*a5 + (v808 >> 29));
                v812 = v809 >> 32;
                v813 = v810 >> 32;
                result = 4 * v1368;
                v1469 = 4 * *(_QWORD *)(*a6 + v806);
                v814 = 4 * *(_QWORD *)(*a6 + (v808 >> 29));
                do
                {
                  v815 = v82;
                  v816 = v803[v808 >> 32];
                  if (v816 >= 1)
                  {
                    v817 = 0;
                    v818 = v805[v812];
                    v819 = 4 * *(_QWORD *)(v807 + 8 * v812);
                    v820 = result;
                    v821 = v82;
                    do
                    {
                      v822 = v803[v812];
                      if (v822 >= 1)
                      {
                        v823 = 0;
                        v824 = v805[v813];
                        v825 = *a2;
                        v826 = 4 * *(_QWORD *)(v807 + 8 * v813);
                        v827 = v820;
                        v828 = v821;
                        do
                        {
                          v829 = v803[v813];
                          if (v829 >= 1)
                          {
                            v830 = v83[19];
                            v831 = (_DWORD *)(v825[19] + v827);
                            do
                            {
                              *v831 = *(char *)(v830 + v828);
                              v831 = (_DWORD *)((char *)v831 + v826);
                              v830 += v824;
                              --v829;
                            }
                            while (v829);
                          }
                          v828 += v818;
                          ++v823;
                          v827 += v819;
                        }
                        while (v823 != v822);
                      }
                      v821 += v811;
                      ++v817;
                      v820 += v814;
                    }
                    while (v817 != v816);
                  }
                  v82 = v815 + v1486;
                  ++v804;
                  result += v1469;
                }
                while (v804 != v1519);
              }
              break;
            case 5:
              v832 = (v84 << 30) - 0x500000000;
              v833 = *a4;
              v1433 = *(int *)((char *)*a4 + (v832 >> 30));
              if (v1433 >= 1)
              {
                v1444 = 0;
                v834 = *a5;
                v835 = v832 >> 29;
                v1423 = *(uint64_t *)((char *)*a5 + v835);
                v836 = v84 << 30;
                v837 = *a6;
                v1413 = (v836 - 0x400000000) >> 32;
                v838 = (v836 - 0x400000000) >> 29;
                v1487 = *(uint64_t *)((char *)*a5 + v838);
                v1503 = (v836 - 0x300000000) >> 32;
                v839 = (v836 - 0x200000000) >> 32;
                result = (v836 - 0x100000000) >> 32;
                v1456 = 4 * v1368;
                v1403 = 4 * *(_QWORD *)(*a6 + v835);
                v1470 = 4 * *(_QWORD *)(*a6 + v838);
                do
                {
                  v1381 = v82;
                  v1520 = v833[v1413];
                  if (v1520 >= 1)
                  {
                    v840 = 0;
                    v841 = v834[v1503];
                    v842 = 4 * *(_QWORD *)(v837 + 8 * v1503);
                    v843 = v1456;
                    v844 = v82;
                    do
                    {
                      v845 = v833[v1503];
                      if (v845 >= 1)
                      {
                        v846 = 0;
                        v847 = v834[v839];
                        v848 = 4 * *(_QWORD *)(v837 + 8 * v839);
                        v849 = v843;
                        v850 = v844;
                        do
                        {
                          v851 = v833[v839];
                          if (v851 >= 1)
                          {
                            v852 = 0;
                            v853 = v834[result];
                            v854 = *a2;
                            v855 = 4 * *(_QWORD *)(v837 + 8 * result);
                            v856 = v849;
                            v857 = v850;
                            do
                            {
                              v858 = v833[result];
                              if (v858 >= 1)
                              {
                                v859 = v83[19];
                                v860 = (_DWORD *)(v854[19] + v856);
                                do
                                {
                                  *v860 = *(char *)(v859 + v857);
                                  v860 = (_DWORD *)((char *)v860 + v855);
                                  v859 += v853;
                                  --v858;
                                }
                                while (v858);
                              }
                              v857 += v847;
                              ++v852;
                              v856 += v848;
                            }
                            while (v852 != v851);
                          }
                          v850 += v841;
                          ++v846;
                          v849 += v842;
                        }
                        while (v846 != v845);
                      }
                      v844 += v1487;
                      ++v840;
                      v843 += v1470;
                    }
                    while (v840 != v1520);
                  }
                  v82 = v1381 + v1423;
                  v1456 += v1403;
                  ++v1444;
                }
                while (v1444 != v1433);
              }
              break;
            default:
              v720 = (char *)a4[1];
              LODWORD(v721) = 1;
              v722 = -20;
              do
              {
                v721 = *(int *)&v720[v722] * (uint64_t)(int)v721;
                v722 += 4;
              }
              while (v722);
              v1364 = v83[6];
              if (v1364)
              {
                result = 0;
                v723 = *a4;
                v1354 = ((unint64_t)(v720 - (char *)*a4) >> 2) - 1;
                v724 = *a5;
                v1402 = *v8;
                v1349 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v725 = (v84 << 30) - 0x500000000;
                v726 = *a6;
                v1396 = *(uint64_t *)((char *)*a5 + (v725 >> 29));
                v1344 = v725 >> 32;
                v1412 = ((v84 << 30) - 0x400000000) >> 32;
                v1502 = ((v84 << 30) - 0x300000000) >> 32;
                v727 = ((v84 << 30) - 0x200000000) >> 32;
                v728 = ((v84 << 30) - 0x100000000) >> 32;
                v1380 = *a7;
                v1390 = 4 * *(_QWORD *)(*a6 + (v725 >> 29));
                v1359 = v721;
                do
                {
                  v729 = v1354;
                  v1375 = result;
                  v730 = 0;
                  if ((v1354 & 0x80000000) == 0)
                  {
                    do
                    {
                      v731 = ldiv((int)result, v723[v729]);
                      LODWORD(result) = v731.quot;
                      v730 += v724[v729--] * v731.rem;
                    }
                    while (v729 != -1);
                  }
                  v732 = v1349;
                  if ((v1349 & 0x80000000) != 0)
                  {
                    v733 = 0;
                  }
                  else
                  {
                    v733 = 0;
                    v734 = v1375;
                    do
                    {
                      v735 = ldiv(v734, *(int *)(v1402 + 4 * v732));
                      v734 = v735.quot;
                      v733 += *(_QWORD *)(v726 + 8 * v732--) * v735.rem;
                    }
                    while (v732 != -1);
                  }
                  v1422 = v723[v1344];
                  if (v1422 >= 1)
                  {
                    v736 = 0;
                    v1485 = v724[v1412];
                    v1455 = v730 + v1380;
                    v1443 = 4 * (v733 + v1368);
                    v1468 = 4 * *(_QWORD *)(v726 + 8 * v1412);
                    do
                    {
                      v1432 = v736;
                      v1518 = v723[v1412];
                      if (v1518 >= 1)
                      {
                        v737 = 0;
                        v738 = v724[v1502];
                        v739 = 4 * *(_QWORD *)(v726 + 8 * v1502);
                        v741 = v1443;
                        v740 = v1455;
                        do
                        {
                          v742 = v723[v1502];
                          if (v742 >= 1)
                          {
                            v743 = 0;
                            v744 = v724[v727];
                            v745 = 4 * *(_QWORD *)(v726 + 8 * v727);
                            v746 = v741;
                            v747 = v740;
                            do
                            {
                              v748 = v723[v727];
                              if (v748 >= 1)
                              {
                                v749 = 0;
                                v750 = v724[v728];
                                v751 = *a2;
                                v752 = 4 * *(_QWORD *)(v726 + 8 * v728);
                                v753 = v746;
                                v754 = v747;
                                do
                                {
                                  v755 = v723[v728];
                                  if (v755 >= 1)
                                  {
                                    v756 = v83[19];
                                    v757 = (_DWORD *)(v751[19] + v753);
                                    do
                                    {
                                      *v757 = *(char *)(v756 + v754);
                                      v757 = (_DWORD *)((char *)v757 + v752);
                                      v756 += v750;
                                      --v755;
                                    }
                                    while (v755);
                                  }
                                  v754 += v744;
                                  ++v749;
                                  v753 += v745;
                                }
                                while (v749 != v748);
                              }
                              v747 += v738;
                              ++v743;
                              v746 += v739;
                            }
                            while (v743 != v742);
                          }
                          v740 += v1485;
                          ++v737;
                          v741 += v1468;
                        }
                        while (v737 != v1518);
                      }
                      v1455 += v1396;
                      v736 = v1432 + 1;
                      v1443 += v1390;
                    }
                    while (v1432 + 1 != v1422);
                  }
                  result = v1375 + v1359;
                }
                while (v1364 > v1375 + v1359);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v21 = 0;
            v22 = **(_BYTE **)(*(_QWORD *)result + 152);
            v23 = v8[19];
            do
              *(_BYTE *)(v23 + v21++) = v22;
            while ((*a2)[6] > v21);
          }
          break;
        case 1:
LABEL_35:
          v33 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v33)
            result = (uint64_t)memmove((void *)v8[19], *(const void **)(*(_QWORD *)result + 152), v33);
          break;
        case 2:
          v92 = *a7;
          v93 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v94 = 0;
                v95 = *(_QWORD *)(v93 + 152);
                v96 = v8[19];
                do
                {
                  *(_BYTE *)(v96 + v94) = *(_BYTE *)(v95 + v92);
                  v92 += **a5;
                  ++v94;
                }
                while (**a4 > (int)v94);
              }
              break;
            case 2:
              v334 = *a4;
              v335 = **a4;
              if (v335 >= 1)
              {
                v336 = 0;
                v337 = 0;
                v338 = *(_QWORD *)(v93 + 152);
                v339 = v8[19];
                do
                {
                  v340 = v334[1];
                  if (v340 < 1)
                  {
                    v341 = *a5;
                    v342 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v339 + v337 + result) = *(_BYTE *)(v338 + v92);
                      v341 = *a5;
                      v342 = (*a5)[1];
                      v92 += v342;
                      v334 = *a4;
                      v340 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v340);
                    v335 = *v334;
                    v337 += result;
                  }
                  v92 = *v341 + v92 - v342 * v340;
                  ++v336;
                }
                while (v336 < v335);
              }
              break;
            case 3:
              v343 = *a4;
              v344 = **a4;
              if (v344 >= 1)
              {
                v345 = 0;
                v346 = 0;
                v347 = *(_QWORD *)(v93 + 152);
                v348 = v8[19];
                do
                {
                  v349 = v343[1];
                  if (v349 < 1)
                  {
                    v353 = *a5;
                    v354 = (*a5)[1];
                  }
                  else
                  {
                    for (m = 0; m < v349; ++m)
                    {
                      v351 = v343[2];
                      if (v351 < 1)
                      {
                        v353 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v352 = 0;
                        do
                        {
                          *(_BYTE *)(v348 + v346 + v352) = *(_BYTE *)(v347 + v92);
                          v353 = *a5;
                          result = (*a5)[2];
                          v92 += result;
                          v343 = *a4;
                          v351 = (*a4)[2];
                          ++v352;
                        }
                        while ((int)v352 < v351);
                        v346 += v352;
                      }
                      v354 = v353[1];
                      v92 = v354 + v92 - result * v351;
                      v349 = v343[1];
                    }
                    v344 = *v343;
                  }
                  v92 = *v353 + v92 - v354 * v349;
                  ++v345;
                }
                while (v345 < v344);
              }
              break;
            case 4:
              v355 = *a4;
              v356 = **a4;
              if (v356 >= 1)
              {
                v357 = 0;
                v358 = 0;
                v359 = *(_QWORD *)(v93 + 152);
                v360 = v8[19];
                do
                {
                  v361 = v355[1];
                  if (v361 < 1)
                  {
                    v367 = *a5;
                    v369 = (*a5)[1];
                  }
                  else
                  {
                    for (n = 0; n < v361; ++n)
                    {
                      v363 = v355[2];
                      if (v363 < 1)
                      {
                        v367 = *a5;
                        v368 = (*a5)[2];
                      }
                      else
                      {
                        for (ii = 0; ii < v363; ++ii)
                        {
                          v365 = v355[3];
                          if (v365 < 1)
                          {
                            v367 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v366 = 0;
                            do
                            {
                              *(_BYTE *)(v360 + v358 + v366) = *(_BYTE *)(v359 + v92);
                              v367 = *a5;
                              result = (*a5)[3];
                              v92 += result;
                              v355 = *a4;
                              v365 = (*a4)[3];
                              ++v366;
                            }
                            while ((int)v366 < v365);
                            v358 += v366;
                          }
                          v368 = v367[2];
                          v92 = v368 + v92 - result * v365;
                          v363 = v355[2];
                        }
                      }
                      v369 = v367[1];
                      v92 = v369 + v92 - v368 * v363;
                      v361 = v355[1];
                    }
                    v356 = *v355;
                  }
                  v92 = *v367 + v92 - v369 * v361;
                  ++v357;
                }
                while (v357 < v356);
              }
              break;
            default:
              if (v8[6])
              {
                v325 = 0;
                v326 = *(_QWORD *)(v93 + 152) + v92;
                v327 = v8[19];
                do
                {
                  v328 = *a4;
                  v329 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v330 = 0;
                  v331 = (v329 - 1);
                  if ((int)v329 - 1 >= 0)
                  {
                    v332 = *a5;
                    LODWORD(result) = v325;
                    do
                    {
                      v333 = ldiv((int)result, v328[v331]);
                      result = v333.quot;
                      v330 += v332[v331--] * v333.rem;
                    }
                    while (v331 != -1);
                  }
                  *(_BYTE *)(v327 + v325++) = *(_BYTE *)(v326 + v330);
                }
                while (v325 < (*a2)[6]);
              }
              break;
          }
          break;
        case 3:
          v97 = *a7;
          v98 = *a8;
          v99 = *(_QWORD **)result;
          v100 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v100 >> 2)
          {
            case 1:
              v101 = (v100 << 30) - 0x100000000;
              v102 = *(int *)((char *)*a4 + (v101 >> 30));
              if (v102 >= 1)
              {
                v103 = v101 >> 29;
                v104 = *(uint64_t *)((char *)*a5 + (v101 >> 29));
                v105 = *(_QWORD *)(*a6 + v103);
                v106 = (_BYTE *)(v8[19] + v98);
                v107 = (_BYTE *)(v99[19] + v97);
                do
                {
                  *v106 = *v107;
                  v107 += v104;
                  v106 += v105;
                  --v102;
                }
                while (v102);
              }
              break;
            case 2:
              v883 = (v100 << 30) - 0x200000000;
              v884 = *(int *)((char *)*a4 + (v883 >> 30));
              if (v884 >= 1)
              {
                v885 = 0;
                v886 = v883 >> 29;
                v887 = *(uint64_t *)((char *)*a5 + (v883 >> 29));
                v888 = *(_QWORD *)(*a6 + v886);
                do
                {
                  v889 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x100000000;
                  v890 = *(int *)((char *)*a4 + (v889 >> 30));
                  if (v890 >= 1)
                  {
                    v891 = v889 >> 29;
                    v892 = *(uint64_t *)((char *)*a5 + (v889 >> 29));
                    v893 = *(_QWORD *)(*a6 + v891);
                    v894 = (*a2)[19];
                    v895 = *(_QWORD *)(*(_QWORD *)v13 + 152);
                    do
                    {
                      result = *(unsigned __int8 *)(v895 + v97);
                      *(_BYTE *)(v894 + v98) = result;
                      v894 += v893;
                      v895 += v892;
                      --v890;
                    }
                    while (v890);
                  }
                  v97 += v887;
                  v98 += v888;
                  ++v885;
                }
                while (v885 != v884);
              }
              break;
            case 3:
              v896 = (v100 << 30) - 0x300000000;
              v897 = *(int *)((char *)*a4 + (v896 >> 30));
              if (v897 >= 1)
              {
                v898 = 0;
                v899 = v896 >> 29;
                v900 = *(uint64_t *)((char *)*a5 + (v896 >> 29));
                v901 = *(_QWORD *)(*a6 + v899);
                do
                {
                  v902 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x200000000;
                  v903 = *(int *)((char *)*a4 + (v902 >> 30));
                  if (v903 >= 1)
                  {
                    v904 = 0;
                    v905 = v902 >> 29;
                    v906 = *(uint64_t *)((char *)*a5 + (v902 >> 29));
                    v907 = *(_QWORD *)(*v9 + v905);
                    result = v97;
                    v908 = v98;
                    do
                    {
                      v909 = ((*(_QWORD *)(*(_QWORD *)v13 + 8) - **(_QWORD **)v13) << 30) - 0x100000000;
                      v910 = *(int *)((char *)*a4 + (v909 >> 30));
                      if (v910 >= 1)
                      {
                        v911 = v909 >> 29;
                        v912 = *(uint64_t *)((char *)*a5 + (v909 >> 29));
                        v913 = *(_QWORD *)(*v9 + v911);
                        v914 = (*a2)[19];
                        v915 = *(_QWORD *)(*(_QWORD *)v13 + 152);
                        do
                        {
                          *(_BYTE *)(v914 + v908) = *(_BYTE *)(v915 + result);
                          v914 += v913;
                          v915 += v912;
                          --v910;
                        }
                        while (v910);
                      }
                      result += v906;
                      v908 += v907;
                      ++v904;
                    }
                    while (v904 != v903);
                  }
                  v97 += v900;
                  v98 += v901;
                  ++v898;
                }
                while (v898 != v897);
              }
              break;
            case 4:
LABEL_552:
              break;
            case 5:
              v916 = (v100 << 30) - 0x500000000;
              v917 = *(int *)((char *)*a4 + (v916 >> 30));
              if (v917 >= 1)
              {
                v918 = v916 >> 29;
                v919 = *(uint64_t *)((char *)*a5 + v918);
                v920 = *(_QWORD *)(*a6 + v918);
                do
                {
                  v97 += v919;
                  v98 += v920;
                  --v917;
                }
                while (v917);
              }
              break;
            default:
              LODWORD(v861) = 1;
              v862 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v861 = a4[1][v862++] * (uint64_t)(int)v861;
              while (v862 * 4);
              if (v99[6])
              {
                result = 0;
                v1445 = *a8;
                v1457 = *a7;
                v1471 = v861;
                do
                {
                  v863 = *a4;
                  v864 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v865 = (v864 - 1);
                  v1488 = v99;
                  v1521 = result;
                  v866 = 0;
                  if ((int)v864 - 1 >= 0)
                  {
                    v867 = *a5;
                    do
                    {
                      v868 = ldiv((int)result, v863[v865]);
                      LODWORD(result) = v868.quot;
                      v866 += v867[v865--] * v868.rem;
                    }
                    while (v865 != -1);
                  }
                  v869 = **a2;
                  v870 = (unint64_t)((*a2)[1] - v869) >> 2;
                  v871 = *v9;
                  v872 = 0;
                  v873 = (v870 - 1);
                  if ((int)v870 - 1 >= 0)
                  {
                    v874 = v1521;
                    do
                    {
                      v875 = ldiv(v874, *(int *)(v869 + 4 * v873));
                      v874 = v875.quot;
                      v872 += *(_QWORD *)(v871 + 8 * v873--) * v875.rem;
                    }
                    while (v873 != -1);
                  }
                  v99 = v1488;
                  v876 = ((v99[1] - *v99) << 30) - 0x500000000;
                  v877 = *(int *)((char *)v863 + (v876 >> 30));
                  if (v877 >= 1)
                  {
                    v878 = v866 + v1457;
                    v879 = v876 >> 29;
                    v880 = *(uint64_t *)((char *)*a5 + v879);
                    v881 = *(_QWORD *)(v871 + v879);
                    v882 = v872 + v1445;
                    do
                    {
                      v878 += v880;
                      v882 += v881;
                      --v877;
                    }
                    while (v877);
                    v99 = *(_QWORD **)v13;
                  }
                  v9 = a6;
                  result = v1521 + v1471;
                }
                while (v99[6] > (unint64_t)(v1521 + v1471));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v24 = v8[6];
          if (v24)
          {
            v25 = **(char **)(*(_QWORD *)result + 152);
            v26 = (_DWORD *)v8[19];
            do
            {
              *v26++ = v25;
              --v24;
            }
            while (v24);
          }
          break;
        case 1:
          v108 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v108)
          {
            v109 = *(char **)(*(_QWORD *)result + 152);
            v110 = (_DWORD *)v8[19];
            do
            {
              v111 = *v109++;
              *v110++ = v111;
              --v108;
            }
            while (v108);
          }
          break;
        case 2:
          v112 = *a7;
          v113 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v114 = *a4;
              if (**a4 >= 1)
              {
                v115 = 0;
                v116 = v8[19];
                v117 = **a5;
                v118 = (char *)(*(_QWORD *)(v113 + 152) + v112);
                do
                {
                  *(_DWORD *)(v116 + 4 * v115) = *v118;
                  v118 += v117;
                  ++v115;
                }
                while (*v114 > (int)v115);
              }
              break;
            case 2:
              v380 = *a4;
              v381 = **a4;
              if (v381 >= 1)
              {
                v382 = 0;
                v383 = 0;
                v384 = *(_QWORD *)(v113 + 152);
                v385 = v8[19];
                v386 = **a5;
                v387 = (*a5)[1];
                v388 = v380[1];
                do
                {
                  if (v388 >= 1)
                  {
                    v389 = 0;
                    do
                    {
                      *(_DWORD *)(v385 + 4 * v383 + 4 * v389) = *(char *)(v384 + v112);
                      v112 += v387;
                      v388 = v380[1];
                      ++v389;
                    }
                    while ((int)v389 < v388);
                    v381 = *v380;
                    v383 += v389;
                  }
                  result = v388;
                  v112 = v112 + v386 - v387 * v388;
                  ++v382;
                }
                while (v382 < v381);
              }
              break;
            case 3:
              v390 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v391 = 0;
                v392 = 0;
                v393 = *(_QWORD *)(v113 + 152);
                v394 = v8[19];
                v395 = *a5;
                v396 = **a5;
                v397 = (*a5)[1];
                v398 = v390[1];
                do
                {
                  if (v398 >= 1)
                  {
                    v399 = 0;
                    v400 = *a5;
                    v401 = v395[2];
                    v402 = v390[2];
                    do
                    {
                      if (v402 >= 1)
                      {
                        v403 = 0;
                        v404 = v400[2];
                        do
                        {
                          *(_DWORD *)(v394 + 4 * v392 + 4 * v403) = *(char *)(v393 + v112);
                          v112 += v404;
                          v402 = v390[2];
                          ++v403;
                        }
                        while ((int)v403 < v402);
                        v398 = v390[1];
                        v392 += v403;
                      }
                      v112 = v112 + v397 - v401 * v402;
                      ++v399;
                    }
                    while (v399 < v398);
                    result = *v390;
                  }
                  v112 = v112 + v396 - v397 * v398;
                  ++v391;
                }
                while (v391 < (int)result);
              }
              break;
            case 4:
              v405 = *a4;
              v406 = **a4;
              if (v406 >= 1)
              {
                v407 = 0;
                v408 = 0;
                v409 = *(_QWORD *)(v113 + 152);
                v410 = v8[19];
                v411 = *a5;
                v412 = **a5;
                v413 = (*a5)[1];
                v414 = v405[1];
                do
                {
                  if (v414 >= 1)
                  {
                    v415 = 0;
                    v416 = *a5;
                    v417 = v411[2];
                    v418 = v405[2];
                    do
                    {
                      if (v418 >= 1)
                      {
                        v419 = 0;
                        v420 = *a5;
                        v421 = v416[2];
                        v422 = v416[3];
                        v423 = v405[3];
                        do
                        {
                          if (v423 >= 1)
                          {
                            v424 = 0;
                            v425 = v420[3];
                            do
                            {
                              *(_DWORD *)(v410 + 4 * v408 + 4 * v424) = *(char *)(v409 + v112);
                              v112 += v425;
                              v423 = v405[3];
                              ++v424;
                            }
                            while ((int)v424 < v423);
                            v418 = v405[2];
                            v408 += v424;
                          }
                          v112 = v112 + v421 - v422 * v423;
                          ++v419;
                        }
                        while (v419 < v418);
                        v414 = v405[1];
                      }
                      v112 = v112 + v413 - v417 * v418;
                      ++v415;
                    }
                    while (v415 < v414);
                    v406 = *v405;
                  }
                  result = v414;
                  v112 = v112 + v412 - v413 * v414;
                  ++v407;
                }
                while (v407 < v406);
              }
              break;
            default:
              v370 = v8[6];
              if (v370)
              {
                v371 = 0;
                v372 = *(_QWORD *)(v113 + 152) + v112;
                v373 = v8[19];
                v374 = *a4;
                v375 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v376 = *a5;
                do
                {
                  v377 = 0;
                  if ((v375 & 0x80000000) == 0)
                  {
                    v378 = v375;
                    LODWORD(result) = v371;
                    do
                    {
                      v379 = ldiv((int)result, v374[v378]);
                      result = v379.quot;
                      v377 += v376[v378--] * v379.rem;
                    }
                    while (v378 != -1);
                  }
                  *(_DWORD *)(v373 + 4 * v371++) = *(char *)(v372 + v377);
                }
                while (v371 != v370);
              }
              break;
          }
          break;
        case 3:
          v119 = *a7;
          v1369 = *a8;
          v120 = *(_QWORD **)result;
          v121 = v120[1] - *v120;
          switch(v121 >> 2)
          {
            case 1:
              v122 = (v121 << 30) - 0x100000000;
              v123 = *(int *)((char *)*a4 + (v122 >> 30));
              if (v123 >= 1)
              {
                v124 = v122 >> 29;
                v125 = *(uint64_t *)((char *)*a5 + (v122 >> 29));
                v126 = (_DWORD *)(v8[19] + 4 * v1369);
                v127 = (char *)(v120[19] + v119);
                v128 = 4 * *(_QWORD *)(*a6 + v124);
                do
                {
                  *v126 = *v127;
                  v127 += v125;
                  v126 = (_DWORD *)((char *)v126 + v128);
                  --v123;
                }
                while (v123);
              }
              break;
            case 2:
              v959 = (v121 << 30) - 0x200000000;
              v960 = *a4;
              v961 = *(int *)((char *)*a4 + (v959 >> 30));
              if (v961 >= 1)
              {
                v962 = 0;
                v963 = v959 >> 29;
                v964 = *(uint64_t *)((char *)*a5 + (v959 >> 29));
                v965 = *(_QWORD *)(*a6 + v963);
                v966 = (v121 << 30) - 0x100000000;
                v967 = *(uint64_t *)((char *)*a5 + (v966 >> 29));
                v968 = *(_QWORD *)(*a6 + (v966 >> 29));
                v969 = v966 >> 32;
                v970 = 4 * v1369;
                v971 = 4 * v965;
                v972 = 4 * v968;
                do
                {
                  result = v960[v969];
                  if ((int)result >= 1)
                  {
                    v973 = v120[19];
                    v974 = (_DWORD *)(v8[19] + v970);
                    do
                    {
                      *v974 = *(char *)(v973 + v119);
                      v974 = (_DWORD *)((char *)v974 + v972);
                      v973 += v967;
                      result = (result - 1);
                    }
                    while ((_DWORD)result);
                  }
                  v119 += v964;
                  ++v962;
                  v970 += v971;
                }
                while (v962 != v961);
              }
              break;
            case 3:
              v975 = (v121 << 30) - 0x300000000;
              v976 = *a4;
              v977 = *(int *)((char *)*a4 + (v975 >> 30));
              if (v977 >= 1)
              {
                v978 = 0;
                v979 = *a5;
                v980 = v975 >> 29;
                v981 = *(uint64_t *)((char *)*a5 + (v975 >> 29));
                v982 = v121 << 30;
                v983 = *a6;
                v984 = *(_QWORD *)(*a6 + v980);
                v985 = (v982 - 0x200000000) >> 32;
                v986 = (v982 - 0x200000000) >> 29;
                v987 = v982 - 0x100000000;
                v988 = *(uint64_t *)((char *)*a5 + v986);
                v989 = *(_QWORD *)(*a6 + v986);
                v990 = v987 >> 32;
                v991 = 4 * v1369;
                result = 4 * v984;
                v992 = 4 * v989;
                do
                {
                  v993 = v976[v985];
                  if (v993 >= 1)
                  {
                    v994 = 0;
                    v995 = v979[v990];
                    v996 = *a2;
                    v997 = 4 * *(_QWORD *)(v983 + 8 * v990);
                    v998 = v991;
                    v999 = v119;
                    do
                    {
                      v1000 = v976[v990];
                      if (v1000 >= 1)
                      {
                        v1001 = v120[19];
                        v1002 = (_DWORD *)(v996[19] + v998);
                        do
                        {
                          *v1002 = *(char *)(v1001 + v999);
                          v1002 = (_DWORD *)((char *)v1002 + v997);
                          v1001 += v995;
                          --v1000;
                        }
                        while (v1000);
                      }
                      v999 += v988;
                      ++v994;
                      v998 += v992;
                    }
                    while (v994 != v993);
                  }
                  v119 += v981;
                  ++v978;
                  v991 += result;
                }
                while (v978 != v977);
              }
              break;
            case 4:
              v1003 = (v121 << 30) - 0x400000000;
              v1004 = *a4;
              v1523 = *(int *)((char *)*a4 + (v1003 >> 30));
              if (v1523 >= 1)
              {
                v1005 = 0;
                v1006 = *a5;
                v1007 = v1003 >> 29;
                v1490 = *(uint64_t *)((char *)*a5 + v1007);
                v1008 = *a6;
                v1009 = (v121 << 30) - 0x300000000;
                v1010 = (v121 << 30) - 0x200000000;
                v1011 = (v121 << 30) - 0x100000000;
                v1012 = *(uint64_t *)((char *)*a5 + (v1009 >> 29));
                v1013 = v1010 >> 32;
                v1014 = v1011 >> 32;
                result = 4 * v1369;
                v1473 = 4 * *(_QWORD *)(*a6 + v1007);
                v1015 = 4 * *(_QWORD *)(*a6 + (v1009 >> 29));
                do
                {
                  v1016 = v119;
                  v1017 = v1004[v1009 >> 32];
                  if (v1017 >= 1)
                  {
                    v1018 = 0;
                    v1019 = v1006[v1013];
                    v1020 = 4 * *(_QWORD *)(v1008 + 8 * v1013);
                    v1021 = result;
                    v1022 = v119;
                    do
                    {
                      v1023 = v1004[v1013];
                      if (v1023 >= 1)
                      {
                        v1024 = 0;
                        v1025 = v1006[v1014];
                        v1026 = *a2;
                        v1027 = 4 * *(_QWORD *)(v1008 + 8 * v1014);
                        v1028 = v1021;
                        v1029 = v1022;
                        do
                        {
                          v1030 = v1004[v1014];
                          if (v1030 >= 1)
                          {
                            v1031 = v120[19];
                            v1032 = (_DWORD *)(v1026[19] + v1028);
                            do
                            {
                              *v1032 = *(char *)(v1031 + v1029);
                              v1032 = (_DWORD *)((char *)v1032 + v1027);
                              v1031 += v1025;
                              --v1030;
                            }
                            while (v1030);
                          }
                          v1029 += v1019;
                          ++v1024;
                          v1028 += v1020;
                        }
                        while (v1024 != v1023);
                      }
                      v1022 += v1012;
                      ++v1018;
                      v1021 += v1015;
                    }
                    while (v1018 != v1017);
                  }
                  v119 = v1016 + v1490;
                  ++v1005;
                  result += v1473;
                }
                while (v1005 != v1523);
              }
              break;
            case 5:
              v1033 = (v121 << 30) - 0x500000000;
              v1034 = *a4;
              v1435 = *(int *)((char *)*a4 + (v1033 >> 30));
              if (v1435 >= 1)
              {
                v1447 = 0;
                v1035 = *a5;
                v1036 = v1033 >> 29;
                v1425 = *(uint64_t *)((char *)*a5 + v1036);
                v1037 = v121 << 30;
                v1038 = *a6;
                v1415 = (v1037 - 0x400000000) >> 32;
                v1039 = (v1037 - 0x400000000) >> 29;
                v1491 = *(uint64_t *)((char *)*a5 + v1039);
                v1506 = (v1037 - 0x300000000) >> 32;
                v1040 = (v1037 - 0x200000000) >> 32;
                result = (v1037 - 0x100000000) >> 32;
                v1459 = 4 * v1369;
                v1405 = 4 * *(_QWORD *)(*a6 + v1036);
                v1474 = 4 * *(_QWORD *)(*a6 + v1039);
                do
                {
                  v1383 = v119;
                  v1524 = v1034[v1415];
                  if (v1524 >= 1)
                  {
                    v1041 = 0;
                    v1042 = v1035[v1506];
                    v1043 = 4 * *(_QWORD *)(v1038 + 8 * v1506);
                    v1044 = v1459;
                    v1045 = v119;
                    do
                    {
                      v1046 = v1034[v1506];
                      if (v1046 >= 1)
                      {
                        v1047 = 0;
                        v1048 = v1035[v1040];
                        v1049 = 4 * *(_QWORD *)(v1038 + 8 * v1040);
                        v1050 = v1044;
                        v1051 = v1045;
                        do
                        {
                          v1052 = v1034[v1040];
                          if (v1052 >= 1)
                          {
                            v1053 = 0;
                            v1054 = v1035[result];
                            v1055 = *a2;
                            v1056 = 4 * *(_QWORD *)(v1038 + 8 * result);
                            v1057 = v1050;
                            v1058 = v1051;
                            do
                            {
                              v1059 = v1034[result];
                              if (v1059 >= 1)
                              {
                                v1060 = v120[19];
                                v1061 = (_DWORD *)(v1055[19] + v1057);
                                do
                                {
                                  *v1061 = *(char *)(v1060 + v1058);
                                  v1061 = (_DWORD *)((char *)v1061 + v1056);
                                  v1060 += v1054;
                                  --v1059;
                                }
                                while (v1059);
                              }
                              v1058 += v1048;
                              ++v1053;
                              v1057 += v1049;
                            }
                            while (v1053 != v1052);
                          }
                          v1051 += v1042;
                          ++v1047;
                          v1050 += v1043;
                        }
                        while (v1047 != v1046);
                      }
                      v1045 += v1491;
                      ++v1041;
                      v1044 += v1474;
                    }
                    while (v1041 != v1524);
                  }
                  v119 = v1383 + v1425;
                  v1459 += v1405;
                  ++v1447;
                }
                while (v1447 != v1435);
              }
              break;
            default:
              v921 = (char *)a4[1];
              LODWORD(v922) = 1;
              v923 = -20;
              do
              {
                v922 = *(int *)&v921[v923] * (uint64_t)(int)v922;
                v923 += 4;
              }
              while (v923);
              v1365 = v120[6];
              if (v1365)
              {
                result = 0;
                v924 = *a4;
                v1355 = ((unint64_t)(v921 - (char *)*a4) >> 2) - 1;
                v925 = *a5;
                v1404 = *v8;
                v1350 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v926 = (v121 << 30) - 0x500000000;
                v927 = *a6;
                v1397 = *(uint64_t *)((char *)*a5 + (v926 >> 29));
                v1345 = v926 >> 32;
                v1414 = ((v121 << 30) - 0x400000000) >> 32;
                v1505 = ((v121 << 30) - 0x300000000) >> 32;
                v928 = ((v121 << 30) - 0x200000000) >> 32;
                v929 = ((v121 << 30) - 0x100000000) >> 32;
                v1382 = *a7;
                v1391 = 4 * *(_QWORD *)(*a6 + (v926 >> 29));
                v1360 = v922;
                do
                {
                  v930 = v1355;
                  v1376 = result;
                  v931 = 0;
                  if ((v1355 & 0x80000000) == 0)
                  {
                    do
                    {
                      v932 = ldiv((int)result, v924[v930]);
                      LODWORD(result) = v932.quot;
                      v931 += v925[v930--] * v932.rem;
                    }
                    while (v930 != -1);
                  }
                  v933 = v1350;
                  if ((v1350 & 0x80000000) != 0)
                  {
                    v934 = 0;
                  }
                  else
                  {
                    v934 = 0;
                    v935 = v1376;
                    do
                    {
                      v936 = ldiv(v935, *(int *)(v1404 + 4 * v933));
                      v935 = v936.quot;
                      v934 += *(_QWORD *)(v927 + 8 * v933--) * v936.rem;
                    }
                    while (v933 != -1);
                  }
                  v1424 = v924[v1345];
                  if (v1424 >= 1)
                  {
                    v937 = 0;
                    v1489 = v925[v1414];
                    v1458 = v931 + v1382;
                    v1446 = 4 * (v934 + v1369);
                    v1472 = 4 * *(_QWORD *)(v927 + 8 * v1414);
                    do
                    {
                      v1434 = v937;
                      v1522 = v924[v1414];
                      if (v1522 >= 1)
                      {
                        v938 = 0;
                        v939 = v925[v1505];
                        v940 = 4 * *(_QWORD *)(v927 + 8 * v1505);
                        v942 = v1446;
                        v941 = v1458;
                        do
                        {
                          v943 = v924[v1505];
                          if (v943 >= 1)
                          {
                            v944 = 0;
                            v945 = v925[v928];
                            v946 = 4 * *(_QWORD *)(v927 + 8 * v928);
                            v947 = v942;
                            v948 = v941;
                            do
                            {
                              v949 = v924[v928];
                              if (v949 >= 1)
                              {
                                v950 = 0;
                                v951 = v925[v929];
                                v952 = *a2;
                                v953 = 4 * *(_QWORD *)(v927 + 8 * v929);
                                v954 = v947;
                                v955 = v948;
                                do
                                {
                                  v956 = v924[v929];
                                  if (v956 >= 1)
                                  {
                                    v957 = v120[19];
                                    v958 = (_DWORD *)(v952[19] + v954);
                                    do
                                    {
                                      *v958 = *(char *)(v957 + v955);
                                      v958 = (_DWORD *)((char *)v958 + v953);
                                      v957 += v951;
                                      --v956;
                                    }
                                    while (v956);
                                  }
                                  v955 += v945;
                                  ++v950;
                                  v954 += v946;
                                }
                                while (v950 != v949);
                              }
                              v948 += v939;
                              ++v944;
                              v947 += v940;
                            }
                            while (v944 != v943);
                          }
                          v941 += v1489;
                          ++v938;
                          v942 += v1472;
                        }
                        while (v938 != v1522);
                      }
                      v1458 += v1397;
                      v937 = v1434 + 1;
                      v1446 += v1391;
                    }
                    while (v1434 + 1 != v1424);
                  }
                  result = v1376 + v1360;
                }
                while (v1365 > v1376 + v1360);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v27 = v8[6];
          if (v27)
          {
            v28 = **(char **)(*(_QWORD *)result + 152);
            v29 = (_QWORD *)v8[19];
            do
            {
              *v29++ = v28;
              --v27;
            }
            while (v27);
          }
          break;
        case 1:
          v129 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v129)
          {
            v130 = *(char **)(*(_QWORD *)result + 152);
            v131 = (_QWORD *)v8[19];
            do
            {
              v132 = *v130++;
              *v131++ = v132;
              --v129;
            }
            while (v129);
          }
          break;
        case 2:
          v133 = *a7;
          v134 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v135 = **a4;
              if ((int)v135 >= 1)
              {
                v136 = *(_QWORD *)(v134 + 152);
                v137 = (_QWORD *)v8[19];
                v138 = *a5;
                do
                {
                  *v137++ = *(char *)(v136 + v133);
                  v133 += *v138;
                  --v135;
                }
                while (v135);
              }
              break;
            case 2:
              v436 = **a4;
              if (v436 >= 1)
              {
                v437 = 0;
                v438 = 0;
                v439 = *(_QWORD *)(v134 + 152);
                v440 = v8[19];
                v441 = (*a4)[1];
                v442 = *a5;
                do
                {
                  if (v441 <= 0)
                  {
                    v444 = v442[1];
                  }
                  else
                  {
                    v443 = v441;
                    do
                    {
                      *(_QWORD *)(v440 + 8 * v438++) = *(char *)(v439 + v133);
                      v444 = v442[1];
                      v133 += v444;
                      --v443;
                    }
                    while (v443);
                  }
                  result = *v442;
                  v133 = v133 - v444 * v441 + *v442;
                  ++v437;
                }
                while (v437 != v436);
              }
              break;
            case 3:
              v445 = *a4;
              v446 = **a4;
              if (v446 >= 1)
              {
                v447 = 0;
                v448 = 0;
                v449 = *(_QWORD *)(v134 + 152);
                v450 = v8[19];
                v451 = v445[1];
                v452 = *a5;
                do
                {
                  if ((int)v451 <= 0)
                  {
                    v456 = v452[1];
                  }
                  else
                  {
                    v453 = 0;
                    result = v445[2];
                    v454 = *a5;
                    do
                    {
                      v455 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(_QWORD *)(v450 + 8 * v448++) = *(char *)(v449 + v133);
                          v133 += v454[2];
                          --v455;
                        }
                        while (v455);
                      }
                      v456 = v452[1];
                      v133 = v456 + v133 - v452[2] * (int)result;
                      ++v453;
                    }
                    while (v453 != (_DWORD)v451);
                  }
                  v133 = v133 - v456 * v451 + *v452;
                  ++v447;
                }
                while (v447 != v446);
              }
              break;
            case 4:
              v457 = *a4;
              v458 = **a4;
              if (v458 >= 1)
              {
                v459 = 0;
                v460 = 0;
                v461 = *(_QWORD *)(v134 + 152);
                v462 = v8[19];
                v463 = v457[1];
                v464 = *a5;
                do
                {
                  if ((int)v463 <= 0)
                  {
                    v471 = v464[1];
                  }
                  else
                  {
                    v465 = 0;
                    result = v457[2];
                    v466 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        v467 = 0;
                        v468 = v457[3];
                        v469 = *a5;
                        do
                        {
                          v470 = v468;
                          if (v468 >= 1)
                          {
                            do
                            {
                              *(_QWORD *)(v462 + 8 * v460++) = *(char *)(v461 + v133);
                              v133 += v469[3];
                              --v470;
                            }
                            while (v470);
                          }
                          v133 = v466[2] + v133 - v466[3] * v468;
                          ++v467;
                        }
                        while (v467 != (_DWORD)result);
                      }
                      v471 = v464[1];
                      v133 = v471 + v133 - v464[2] * result;
                      ++v465;
                    }
                    while (v465 != (_DWORD)v463);
                  }
                  v133 = v133 - v471 * v463 + *v464;
                  ++v459;
                }
                while (v459 != v458);
              }
              break;
            default:
              v426 = v8[6];
              if (v426)
              {
                v427 = 0;
                v428 = *(_QWORD *)(v134 + 152) + v133;
                v429 = v8[19];
                v430 = *a4;
                v431 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v432 = *a5;
                do
                {
                  v433 = 0;
                  if ((v431 & 0x80000000) == 0)
                  {
                    v434 = v431;
                    LODWORD(result) = v427;
                    do
                    {
                      v435 = ldiv((int)result, v430[v434]);
                      result = v435.quot;
                      v433 += v432[v434--] * v435.rem;
                    }
                    while (v434 != -1);
                  }
                  *(_QWORD *)(v429 + 8 * v427++) = *(char *)(v428 + v433);
                }
                while (v427 != v426);
              }
              break;
          }
          break;
        case 3:
          v139 = *a7;
          v1370 = *a8;
          v140 = *(_QWORD **)result;
          v141 = v140[1] - *v140;
          switch(v141 >> 2)
          {
            case 1:
              v142 = (v141 << 30) - 0x100000000;
              v143 = *(int *)((char *)*a4 + (v142 >> 30));
              if (v143 >= 1)
              {
                v144 = v142 >> 29;
                v145 = *(uint64_t *)((char *)*a5 + (v142 >> 29));
                v146 = (_QWORD *)(v8[19] + 8 * v1370);
                v147 = (char *)(v140[19] + v139);
                v148 = 8 * *(_QWORD *)(*a6 + v144);
                do
                {
                  *v146 = *v147;
                  v147 += v145;
                  v146 = (_QWORD *)((char *)v146 + v148);
                  --v143;
                }
                while (v143);
              }
              break;
            case 2:
              v1100 = (v141 << 30) - 0x200000000;
              v1101 = *(int *)((char *)*a4 + (v1100 >> 30));
              if (v1101 >= 1)
              {
                v1102 = 0;
                v1103 = *a5;
                v1104 = v1100 >> 29;
                v1105 = *(uint64_t *)((char *)*a5 + (v1100 >> 29));
                v1106 = *a6;
                v1107 = *(_QWORD *)(*a6 + v1104);
                v1108 = (v141 << 30) - 0x100000000;
                v1109 = v1108 >> 32;
                v1110 = *(int *)((char *)*a4 + (v1108 >> 30));
                v1111 = 8 * v1370;
                v1112 = 8 * v1107;
                do
                {
                  if (v1110 >= 1)
                  {
                    result = v1103[v1109];
                    v1113 = v140[19];
                    v1114 = (_QWORD *)(v8[19] + v1111);
                    v1115 = 8 * *(_QWORD *)(v1106 + 8 * v1109);
                    v1116 = v1110;
                    do
                    {
                      *v1114 = *(char *)(v1113 + v139);
                      v1114 = (_QWORD *)((char *)v1114 + v1115);
                      v1113 += result;
                      --v1116;
                    }
                    while (v1116);
                  }
                  v139 += v1105;
                  ++v1102;
                  v1111 += v1112;
                }
                while (v1102 != v1101);
              }
              break;
            case 3:
              v1117 = (v141 << 30) - 0x300000000;
              v1118 = *a4;
              v1119 = *(int *)((char *)*a4 + (v1117 >> 30));
              if (v1119 >= 1)
              {
                v1120 = 0;
                v1121 = *a5;
                v1122 = v1117 >> 29;
                v1123 = *(uint64_t *)((char *)*a5 + (v1117 >> 29));
                v1124 = *a6;
                v1125 = *(_QWORD *)(*a6 + v1122);
                v1126 = v141 << 30;
                v1127 = v1126 - 0x200000000;
                v1128 = v1126 - 0x100000000;
                v1129 = (v1126 - 0x200000000) >> 32;
                v1130 = *(int *)((char *)v1118 + (v1127 >> 30));
                v1131 = v1128 >> 32;
                v1132 = 8 * v1370;
                result = 8 * v1125;
                do
                {
                  if (v1130 >= 1)
                  {
                    v1133 = 0;
                    v1134 = v1121[v1129];
                    v1135 = v1118[v1131];
                    v1136 = *a2;
                    v1137 = 8 * *(_QWORD *)(v1124 + 8 * v1129);
                    v1138 = v1132;
                    v1139 = v139;
                    do
                    {
                      if (v1135 >= 1)
                      {
                        v1140 = v1121[v1131];
                        v1141 = v140[19];
                        v1142 = (_QWORD *)(v1136[19] + v1138);
                        v1143 = 8 * *(_QWORD *)(v1124 + 8 * v1131);
                        v1144 = v1135;
                        do
                        {
                          *v1142 = *(char *)(v1141 + v1139);
                          v1142 = (_QWORD *)((char *)v1142 + v1143);
                          v1141 += v1140;
                          --v1144;
                        }
                        while (v1144);
                      }
                      v1139 += v1134;
                      ++v1133;
                      v1138 += v1137;
                    }
                    while (v1133 != v1130);
                  }
                  v139 += v1123;
                  ++v1120;
                  v1132 += result;
                }
                while (v1120 != v1119);
              }
              break;
            case 4:
              v1145 = (v141 << 30) - 0x400000000;
              v1146 = *a4;
              v1525 = *(int *)((char *)*a4 + (v1145 >> 30));
              if (v1525 >= 1)
              {
                v1147 = 0;
                v1148 = *a5;
                v1149 = v1145 >> 29;
                v1493 = *(uint64_t *)((char *)*a5 + v1149);
                v1150 = *a6;
                v1151 = (v141 << 30) - 0x300000000;
                v1476 = v1151 >> 32;
                v1152 = *(int *)((char *)v1146 + (v1151 >> 30));
                v1153 = ((v141 << 30) - 0x200000000) >> 32;
                v1154 = ((v141 << 30) - 0x100000000) >> 32;
                result = 8 * v1370;
                v1508 = 8 * *(_QWORD *)(*a6 + v1149);
                do
                {
                  v1385 = v139;
                  if (v1152 >= 1)
                  {
                    v1155 = 0;
                    v1156 = v1148[v1476];
                    v1157 = v1146[v1153];
                    v1158 = 8 * *(_QWORD *)(v1150 + 8 * v1476);
                    v1159 = result;
                    v1160 = v139;
                    do
                    {
                      if (v1157 >= 1)
                      {
                        v1161 = 0;
                        v1162 = v1148[v1153];
                        v1163 = v1146[v1154];
                        v1164 = *a2;
                        v1165 = 8 * *(_QWORD *)(v1150 + 8 * v1153);
                        v1166 = v1159;
                        v1167 = v1160;
                        do
                        {
                          if (v1163 >= 1)
                          {
                            v1168 = v1148[v1154];
                            v1169 = v140[19];
                            v1170 = (_QWORD *)(v1164[19] + v1166);
                            v1171 = 8 * *(_QWORD *)(v1150 + 8 * v1154);
                            v1172 = v1163;
                            do
                            {
                              *v1170 = *(char *)(v1169 + v1167);
                              v1170 = (_QWORD *)((char *)v1170 + v1171);
                              v1169 += v1168;
                              --v1172;
                            }
                            while (v1172);
                          }
                          v1167 += v1162;
                          ++v1161;
                          v1166 += v1165;
                        }
                        while (v1161 != v1157);
                      }
                      v1160 += v1156;
                      ++v1155;
                      v1159 += v1158;
                    }
                    while (v1155 != v1152);
                  }
                  v139 = v1385 + v1493;
                  ++v1147;
                  result += v1508;
                }
                while (v1147 != v1525);
              }
              break;
            case 5:
              v1173 = (v141 << 30) - 0x500000000;
              v1174 = *a4;
              v1427 = *(int *)((char *)*a4 + (v1173 >> 30));
              if (v1427 >= 1)
              {
                v1437 = 0;
                v1175 = *a5;
                v1176 = v1173 >> 29;
                v1417 = *(uint64_t *)((char *)*a5 + v1176);
                v1177 = *a6;
                v1178 = (v141 << 30) - 0x400000000;
                v1509 = *(int *)((char *)v1174 + (v1178 >> 30));
                v1399 = v1178 >> 32;
                v1179 = ((v141 << 30) - 0x200000000) >> 32;
                result = ((v141 << 30) - 0x100000000) >> 32;
                v1449 = 8 * v1370;
                v1461 = ((v141 << 30) - 0x300000000) >> 32;
                v1407 = 8 * *(_QWORD *)(*a6 + v1176);
                do
                {
                  v1386 = v139;
                  if (v1509 >= 1)
                  {
                    v1180 = 0;
                    v1494 = v1175[v1399];
                    v1181 = v1174[v1461];
                    v1477 = 8 * *(_QWORD *)(v1177 + 8 * v1399);
                    v1182 = v1449;
                    v1183 = v139;
                    do
                    {
                      v1526 = v1180;
                      if (v1181 >= 1)
                      {
                        v1184 = 0;
                        v1185 = v1175[v1461];
                        v1186 = v1174[v1179];
                        v1187 = 8 * *(_QWORD *)(v1177 + 8 * v1461);
                        v1188 = v1182;
                        v1189 = v1183;
                        do
                        {
                          if (v1186 >= 1)
                          {
                            v1190 = 0;
                            v1191 = v1175[v1179];
                            v1192 = v1174[result];
                            v1193 = *a2;
                            v1194 = 8 * *(_QWORD *)(v1177 + 8 * v1179);
                            v1195 = v1188;
                            v1196 = v1189;
                            do
                            {
                              if (v1192 >= 1)
                              {
                                v1197 = v1175[result];
                                v1198 = v140[19];
                                v1199 = (_QWORD *)(v1193[19] + v1195);
                                v1200 = 8 * *(_QWORD *)(v1177 + 8 * result);
                                v1201 = v1192;
                                do
                                {
                                  *v1199 = *(char *)(v1198 + v1196);
                                  v1199 = (_QWORD *)((char *)v1199 + v1200);
                                  v1198 += v1197;
                                  --v1201;
                                }
                                while (v1201);
                              }
                              v1196 += v1191;
                              ++v1190;
                              v1195 += v1194;
                            }
                            while (v1190 != v1186);
                          }
                          v1189 += v1185;
                          ++v1184;
                          v1188 += v1187;
                        }
                        while (v1184 != v1181);
                      }
                      v1183 += v1494;
                      v1180 = v1526 + 1;
                      v1182 += v1477;
                    }
                    while (v1526 + 1 != v1509);
                  }
                  v139 = v1386 + v1417;
                  v1449 += v1407;
                  ++v1437;
                }
                while (v1437 != v1427);
              }
              break;
            default:
              v1062 = (char *)a4[1];
              LODWORD(v1063) = 1;
              v1064 = -20;
              do
              {
                v1063 = *(int *)&v1062[v1064] * (uint64_t)(int)v1063;
                v1064 += 4;
              }
              while (v1064);
              v1366 = v140[6];
              if (v1366)
              {
                v1065 = 0;
                v1066 = (v141 << 30) - 0x500000000;
                v1067 = *a4;
                v1346 = *v8;
                v1068 = *a5;
                v1351 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1356 = ((unint64_t)(v1062 - (char *)*a4) >> 2) - 1;
                v1069 = *a6;
                v1342 = v1066 >> 32;
                v1416 = *(int *)((char *)*a4 + (v1066 >> 30));
                v1384 = *a7;
                v1392 = ((v141 << 30) - 0x400000000) >> 32;
                v1460 = ((v141 << 30) - 0x300000000) >> 32;
                v1070 = ((v141 << 30) - 0x200000000) >> 32;
                v1071 = ((v141 << 30) - 0x100000000) >> 32;
                v1361 = v1063;
                do
                {
                  v1072 = v1356;
                  if ((v1356 & 0x80000000) != 0)
                  {
                    v1073 = 0;
                  }
                  else
                  {
                    v1073 = 0;
                    LODWORD(result) = v1065;
                    do
                    {
                      v1074 = ldiv((int)result, v1067[v1072]);
                      result = v1074.quot;
                      v1073 += v1068[v1072--] * v1074.rem;
                    }
                    while (v1072 != -1);
                  }
                  v1075 = v1351;
                  v1377 = v1065;
                  v1076 = 0;
                  if ((v1351 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1065;
                    do
                    {
                      v1077 = ldiv((int)result, *(int *)(v1346 + 4 * v1075));
                      result = v1077.quot;
                      v1076 += *(_QWORD *)(v1069 + 8 * v1075--) * v1077.rem;
                    }
                    while (v1075 != -1);
                  }
                  if (v1416 >= 1)
                  {
                    v1078 = 0;
                    v1406 = v1068[v1342];
                    v1448 = v1073 + v1384;
                    v1507 = v1067[v1392];
                    v1436 = 8 * (v1076 + v1370);
                    v1398 = 8 * *(_QWORD *)(v1069 + 8 * v1342);
                    do
                    {
                      v1426 = v1078;
                      if (v1507 >= 1)
                      {
                        v1079 = 0;
                        v1492 = v1068[v1392];
                        v1080 = v1067[v1460];
                        v1475 = 8 * *(_QWORD *)(v1069 + 8 * v1392);
                        v1082 = v1436;
                        v1081 = v1448;
                        do
                        {
                          if (v1080 >= 1)
                          {
                            v1083 = 0;
                            v1084 = v1068[v1460];
                            v1085 = v1067[v1070];
                            v1086 = 8 * *(_QWORD *)(v1069 + 8 * v1460);
                            result = v1082;
                            v1087 = v1081;
                            do
                            {
                              if (v1085 >= 1)
                              {
                                v1088 = 0;
                                v1089 = v1068[v1070];
                                v1090 = v1067[v1071];
                                v1091 = *a2;
                                v1092 = 8 * *(_QWORD *)(v1069 + 8 * v1070);
                                v1093 = result;
                                v1094 = v1087;
                                do
                                {
                                  if (v1090 >= 1)
                                  {
                                    v1095 = v1068[v1071];
                                    v1096 = v140[19];
                                    v1097 = (_QWORD *)(v1091[19] + v1093);
                                    v1098 = 8 * *(_QWORD *)(v1069 + 8 * v1071);
                                    v1099 = v1090;
                                    do
                                    {
                                      *v1097 = *(char *)(v1096 + v1094);
                                      v1097 = (_QWORD *)((char *)v1097 + v1098);
                                      v1096 += v1095;
                                      --v1099;
                                    }
                                    while (v1099);
                                  }
                                  v1094 += v1089;
                                  ++v1088;
                                  v1093 += v1092;
                                }
                                while (v1088 != v1085);
                              }
                              v1087 += v1084;
                              ++v1083;
                              result += v1086;
                            }
                            while (v1083 != v1080);
                          }
                          v1081 += v1492;
                          ++v1079;
                          v1082 += v1475;
                        }
                        while (v1079 != v1507);
                      }
                      v1448 += v1406;
                      v1078 = v1426 + 1;
                      v1436 += v1398;
                    }
                    while (v1426 + 1 != v1416);
                  }
                  v1065 += v1361;
                }
                while (v1366 > v1377 + v1361);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v30 = v8[6];
          if (v30)
          {
            v31 = (float)**(char **)(*(_QWORD *)result + 152);
            v32 = (float *)v8[19];
            do
            {
              *v32++ = v31;
              --v30;
            }
            while (v30);
          }
          break;
        case 1:
          v149 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v149)
          {
            v150 = *(char **)(*(_QWORD *)result + 152);
            v151 = (float *)v8[19];
            do
            {
              v152 = *v150++;
              *v151++ = (float)v152;
              --v149;
            }
            while (v149);
          }
          break;
        case 2:
          v153 = *a7;
          v154 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v155 = **a4;
              if ((int)v155 >= 1)
              {
                v156 = (float *)v8[19];
                v157 = **a5;
                v158 = (char *)(*(_QWORD *)(v154 + 152) + v153);
                do
                {
                  *v156++ = (float)*v158;
                  v158 += v157;
                  --v155;
                }
                while (v155);
              }
              break;
            case 2:
              v482 = **a4;
              if (v482 >= 1)
              {
                v483 = 0;
                v484 = 0;
                v485 = *(_QWORD *)(v154 + 152);
                v486 = v8[19];
                v487 = (*a4)[1];
                v488 = (*a5)[1];
                v489 = **a5 - v488 * v487;
                do
                {
                  v490 = v487;
                  if ((int)v487 >= 1)
                  {
                    do
                    {
                      result = *(char *)(v485 + v153);
                      *(float *)(v486 + 4 * v484++) = (float)(int)result;
                      v153 += v488;
                      --v490;
                    }
                    while (v490);
                  }
                  v153 += v489;
                  ++v483;
                }
                while (v483 != v482);
              }
              break;
            case 3:
              v491 = *a4;
              v492 = **a4;
              if (v492 >= 1)
              {
                v493 = 0;
                result = 0;
                v494 = *(_QWORD *)(v154 + 152);
                v495 = v8[19];
                v496 = v491[1];
                v497 = *a5;
                v498 = (*a5)[1];
                v499 = **a5 - v498 * v496;
                do
                {
                  if ((int)v496 < 1)
                  {
                    v506 = result;
                  }
                  else
                  {
                    v500 = 0;
                    v501 = v491[2];
                    v502 = *a5;
                    v503 = v498 - v497[2] * v501;
                    do
                    {
                      if ((int)v501 < 1)
                      {
                        v506 = result;
                      }
                      else
                      {
                        v504 = v502[2];
                        v505 = v501;
                        do
                        {
                          v506 = result + 1;
                          *(float *)(v495 + 4 * result) = (float)*(char *)(v494 + v153);
                          v153 += v504;
                          ++result;
                          --v505;
                        }
                        while (v505);
                      }
                      v153 += v503;
                      ++v500;
                      result = v506;
                    }
                    while (v500 != (_DWORD)v496);
                  }
                  v153 += v499;
                  ++v493;
                  result = v506;
                }
                while (v493 != v492);
              }
              break;
            case 4:
              v507 = *a4;
              v508 = **a4;
              if (v508 >= 1)
              {
                v509 = 0;
                result = 0;
                v510 = *(_QWORD *)(v154 + 152);
                v511 = v8[19];
                v512 = v507[1];
                v513 = *a5;
                v514 = (*a5)[1];
                v515 = **a5 - v514 * v512;
                do
                {
                  if ((int)v512 < 1)
                  {
                    v526 = result;
                  }
                  else
                  {
                    v516 = 0;
                    v517 = v507[2];
                    v518 = *a5;
                    v519 = v514 - v513[2] * v517;
                    do
                    {
                      if ((int)v517 < 1)
                      {
                        v526 = result;
                      }
                      else
                      {
                        v520 = 0;
                        v521 = v507[3];
                        v522 = *a5;
                        v523 = v518[2] - v518[3] * v521;
                        do
                        {
                          if ((int)v521 < 1)
                          {
                            v526 = result;
                          }
                          else
                          {
                            v524 = v522[3];
                            v525 = v521;
                            do
                            {
                              v526 = result + 1;
                              *(float *)(v511 + 4 * result) = (float)*(char *)(v510 + v153);
                              v153 += v524;
                              ++result;
                              --v525;
                            }
                            while (v525);
                          }
                          v153 += v523;
                          ++v520;
                          result = v526;
                        }
                        while (v520 != (_DWORD)v517);
                      }
                      v153 += v519;
                      ++v516;
                      result = v526;
                    }
                    while (v516 != (_DWORD)v512);
                  }
                  v153 += v515;
                  ++v509;
                  result = v526;
                }
                while (v509 != v508);
              }
              break;
            default:
              v472 = v8[6];
              if (v472)
              {
                v473 = 0;
                v474 = *(_QWORD *)(v154 + 152) + v153;
                v475 = v8[19];
                v476 = *a4;
                v477 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v478 = *a5;
                do
                {
                  v479 = 0;
                  if ((v477 & 0x80000000) == 0)
                  {
                    v480 = v477;
                    LODWORD(result) = v473;
                    do
                    {
                      v481 = ldiv((int)result, v476[v480]);
                      result = v481.quot;
                      v479 += v478[v480--] * v481.rem;
                    }
                    while (v480 != -1);
                  }
                  *(float *)(v475 + 4 * v473++) = (float)*(char *)(v474 + v479);
                }
                while (v473 != v472);
              }
              break;
          }
          break;
        case 3:
          v159 = *a7;
          v1373 = *a8;
          v160 = *(_QWORD **)result;
          v161 = v160[1] - *v160;
          switch(v161 >> 2)
          {
            case 1:
              v162 = (v161 << 30) - 0x100000000;
              v163 = *(int *)((char *)*a4 + (v162 >> 30));
              if (v163 >= 1)
              {
                v164 = v162 >> 29;
                v165 = *(uint64_t *)((char *)*a5 + (v162 >> 29));
                v166 = (float *)(v8[19] + 4 * v1373);
                v167 = (char *)(v160[19] + v159);
                v168 = 4 * *(_QWORD *)(*a6 + v164);
                do
                {
                  *v166 = (float)*v167;
                  v167 += v165;
                  v166 = (float *)((char *)v166 + v168);
                  --v163;
                }
                while (v163);
              }
              break;
            case 2:
              v1240 = (v161 << 30) - 0x200000000;
              v1241 = *(int *)((char *)*a4 + (v1240 >> 30));
              if (v1241 >= 1)
              {
                v1242 = 0;
                v1243 = v1240 >> 29;
                v1244 = *(uint64_t *)((char *)*a5 + (v1240 >> 29));
                v1245 = (v161 << 30) - 0x100000000;
                result = v1245 >> 29;
                v1246 = *(uint64_t *)((char *)*a5 + (v1245 >> 29));
                v1247 = *(int *)((char *)*a4 + (v1245 >> 30));
                v1248 = 4 * v1373;
                v1249 = 4 * *(_QWORD *)(*a6 + v1243);
                v1250 = 4 * *(_QWORD *)(*a6 + (v1245 >> 29));
                do
                {
                  if (v1247 >= 1)
                  {
                    v1251 = v160[19];
                    result = v8[19] + v1248;
                    v1252 = v1247;
                    do
                    {
                      *(float *)result = (float)*(char *)(v1251 + v159);
                      result += v1250;
                      v1251 += v1246;
                      --v1252;
                    }
                    while (v1252);
                  }
                  v159 += v1244;
                  ++v1242;
                  v1248 += v1249;
                }
                while (v1242 != v1241);
              }
              break;
            case 3:
              v1253 = (v161 << 30) - 0x300000000;
              v1254 = *a4;
              v1255 = *(int *)((char *)*a4 + (v1253 >> 30));
              if (v1255 >= 1)
              {
                v1256 = 0;
                v1257 = v161 << 30;
                v1258 = *a5;
                v1259 = v1253 >> 29;
                v1260 = *(uint64_t *)((char *)*a5 + (v1253 >> 29));
                v1261 = *a6;
                v1262 = *(_QWORD *)(*a6 + v1259);
                v1263 = v1257 - 0x200000000;
                v1264 = (v1257 - 0x200000000) >> 29;
                v1265 = v1257 - 0x100000000;
                v1266 = *(uint64_t *)((char *)*a5 + v1264);
                v1267 = *(_QWORD *)(*a6 + v1264);
                v1268 = *(int *)((char *)v1254 + (v1263 >> 30));
                v1269 = v1265 >> 32;
                v1270 = 4 * v1373;
                result = 4 * v1262;
                v1271 = 4 * v1267;
                do
                {
                  if (v1268 >= 1)
                  {
                    v1272 = 0;
                    v1273 = v1258[v1269];
                    v1274 = v1254[v1269];
                    v1275 = *a2;
                    v1276 = 4 * *(_QWORD *)(v1261 + 8 * v1269);
                    v1277 = v1270;
                    v1278 = v159;
                    do
                    {
                      if (v1274 >= 1)
                      {
                        v1279 = v160[19];
                        v1280 = (float *)(v1275[19] + v1277);
                        v1281 = v1274;
                        do
                        {
                          *v1280 = (float)*(char *)(v1279 + v1278);
                          v1280 = (float *)((char *)v1280 + v1276);
                          v1279 += v1273;
                          --v1281;
                        }
                        while (v1281);
                      }
                      v1278 += v1266;
                      ++v1272;
                      v1277 += v1271;
                    }
                    while (v1272 != v1268);
                  }
                  v159 += v1260;
                  ++v1256;
                  v1270 += result;
                }
                while (v1256 != v1255);
              }
              break;
            case 4:
              v1282 = (v161 << 30) - 0x400000000;
              v1283 = *a4;
              v1496 = *(int *)((char *)*a4 + (v1282 >> 30));
              if (v1496 >= 1)
              {
                v1284 = 0;
                v1285 = v161 << 30;
                v1286 = *a5;
                v1287 = v1282 >> 29;
                v1479 = *(uint64_t *)((char *)*a5 + v1287);
                v1288 = *a6;
                v1289 = (v161 << 30) - 0x300000000;
                v1290 = *(uint64_t *)((char *)*a5 + (v1289 >> 29));
                v1291 = *(_QWORD *)(*a6 + (v1289 >> 29));
                v1292 = *(int *)((char *)v1283 + (v1289 >> 30));
                v1293 = (v1285 - 0x200000000) >> 32;
                v1294 = (v1285 - 0x100000000) >> 32;
                result = 4 * v1373;
                v1511 = 4 * *(_QWORD *)(*a6 + v1287);
                v1295 = 4 * v1291;
                do
                {
                  v1296 = v159;
                  if (v1292 >= 1)
                  {
                    v1297 = 0;
                    v1298 = v1286[v1293];
                    v1299 = v1283[v1293];
                    v1300 = 4 * *(_QWORD *)(v1288 + 8 * v1293);
                    v1301 = result;
                    v1302 = v159;
                    do
                    {
                      if (v1299 >= 1)
                      {
                        v1303 = 0;
                        v1304 = v1286[v1294];
                        v1305 = v1283[v1294];
                        v1306 = *a2;
                        v1307 = 4 * *(_QWORD *)(v1288 + 8 * v1294);
                        v1308 = v1301;
                        v1309 = v1302;
                        do
                        {
                          if (v1305 >= 1)
                          {
                            v1310 = v160[19];
                            v1311 = (float *)(v1306[19] + v1308);
                            v1312 = v1305;
                            do
                            {
                              *v1311 = (float)*(char *)(v1310 + v1309);
                              v1311 = (float *)((char *)v1311 + v1307);
                              v1310 += v1304;
                              --v1312;
                            }
                            while (v1312);
                          }
                          v1309 += v1298;
                          ++v1303;
                          v1308 += v1300;
                        }
                        while (v1303 != v1299);
                      }
                      v1302 += v1290;
                      ++v1297;
                      v1301 += v1295;
                    }
                    while (v1297 != v1292);
                  }
                  v159 = v1296 + v1479;
                  ++v1284;
                  result += v1511;
                }
                while (v1284 != v1496);
              }
              break;
            case 5:
              v1313 = (v161 << 30) - 0x500000000;
              v1314 = *a4;
              v1439 = *(int *)((char *)*a4 + (v1313 >> 30));
              if (v1439 >= 1)
              {
                v1451 = 0;
                v1315 = *a5;
                v1316 = v1313 >> 29;
                v1429 = *(uint64_t *)((char *)*a5 + v1316);
                v1317 = *a6;
                v1318 = (v161 << 30) - 0x400000000;
                v1497 = *(uint64_t *)((char *)*a5 + (v1318 >> 29));
                v1512 = *(int *)((char *)v1314 + (v1318 >> 30));
                v1319 = ((v161 << 30) - 0x200000000) >> 32;
                result = ((v161 << 30) - 0x100000000) >> 32;
                v1463 = 4 * v1373;
                v1409 = ((v161 << 30) - 0x300000000) >> 32;
                v1419 = 4 * *(_QWORD *)(*a6 + v1316);
                v1480 = 4 * *(_QWORD *)(*a6 + (v1318 >> 29));
                do
                {
                  v1394 = v159;
                  if (v1512 >= 1)
                  {
                    v1320 = 0;
                    v1321 = v1315[v1409];
                    v1322 = v1314[v1409];
                    v1323 = 4 * *(_QWORD *)(v1317 + 8 * v1409);
                    v1324 = v1463;
                    v1325 = v159;
                    do
                    {
                      if (v1322 >= 1)
                      {
                        v1326 = 0;
                        v1327 = v1315[v1319];
                        v1328 = v1314[v1319];
                        v1329 = 4 * *(_QWORD *)(v1317 + 8 * v1319);
                        v1330 = v1324;
                        v1331 = v1325;
                        do
                        {
                          if (v1328 >= 1)
                          {
                            v1332 = 0;
                            v1333 = v1315[result];
                            v1334 = v1314[result];
                            v1335 = *a2;
                            v1336 = 4 * *(_QWORD *)(v1317 + 8 * result);
                            v1337 = v1330;
                            v1338 = v1331;
                            do
                            {
                              if (v1334 >= 1)
                              {
                                v1339 = v160[19];
                                v1340 = (float *)(v1335[19] + v1337);
                                v1341 = v1334;
                                do
                                {
                                  *v1340 = (float)*(char *)(v1339 + v1338);
                                  v1340 = (float *)((char *)v1340 + v1336);
                                  v1339 += v1333;
                                  --v1341;
                                }
                                while (v1341);
                              }
                              v1338 += v1327;
                              ++v1332;
                              v1337 += v1329;
                            }
                            while (v1332 != v1328);
                          }
                          v1331 += v1321;
                          ++v1326;
                          v1330 += v1323;
                        }
                        while (v1326 != v1322);
                      }
                      v1325 += v1497;
                      ++v1320;
                      v1324 += v1480;
                    }
                    while (v1320 != v1512);
                  }
                  v159 = v1394 + v1429;
                  v1463 += v1419;
                  ++v1451;
                }
                while (v1451 != v1439);
              }
              break;
            default:
              v1202 = (char *)a4[1];
              LODWORD(v1203) = 1;
              v1204 = -20;
              do
              {
                v1203 = *(int *)&v1202[v1204] * (uint64_t)(int)v1203;
                v1204 += 4;
              }
              while (v1204);
              v1372 = v160[6];
              if (v1372)
              {
                v1205 = 0;
                v1206 = (v161 << 30) - 0x500000000;
                v1207 = *a4;
                v1352 = *v8;
                v1362 = ((unint64_t)(v1202 - (char *)*a4) >> 2) - 1;
                v1208 = *a5;
                v1209 = *a6;
                v1428 = *(int *)((char *)*a4 + (v1206 >> 30));
                v1357 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1347 = ((v161 << 30) - 0x400000000) >> 32;
                v1393 = *a7;
                v1400 = ((v161 << 30) - 0x300000000) >> 32;
                v1210 = ((v161 << 30) - 0x200000000) >> 32;
                v1211 = ((v161 << 30) - 0x100000000) >> 32;
                v1408 = 4 * *(_QWORD *)(*a6 + (v1206 >> 29));
                v1418 = *(uint64_t *)((char *)*a5 + (v1206 >> 29));
                v1367 = v1203;
                do
                {
                  v1212 = v1362;
                  if ((v1362 & 0x80000000) != 0)
                  {
                    v1213 = 0;
                    v1214 = v1357;
                  }
                  else
                  {
                    v1213 = 0;
                    LODWORD(result) = v1205;
                    v1214 = v1357;
                    do
                    {
                      v1215 = ldiv((int)result, v1207[v1212]);
                      result = v1215.quot;
                      v1213 += v1208[v1212--] * v1215.rem;
                    }
                    while (v1212 != -1);
                  }
                  v1387 = v1205;
                  v1216 = 0;
                  if ((v1214 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1205;
                    do
                    {
                      v1217 = ldiv((int)result, *(int *)(v1352 + 4 * v1214));
                      result = v1217.quot;
                      v1216 += *(_QWORD *)(v1209 + 8 * v1214--) * v1217.rem;
                    }
                    while (v1214 != -1);
                  }
                  if (v1428 >= 1)
                  {
                    v1218 = 0;
                    v1495 = v1208[v1347];
                    v1462 = v1213 + v1393;
                    v1510 = v1207[v1347];
                    v1450 = 4 * (v1216 + v1373);
                    v1478 = 4 * *(_QWORD *)(v1209 + 8 * v1347);
                    do
                    {
                      v1438 = v1218;
                      if (v1510 >= 1)
                      {
                        v1219 = 0;
                        v1220 = v1208[v1400];
                        v1221 = v1207[v1400];
                        v1222 = 4 * *(_QWORD *)(v1209 + 8 * v1400);
                        v1224 = v1450;
                        v1223 = v1462;
                        do
                        {
                          if (v1221 >= 1)
                          {
                            v1225 = 0;
                            v1226 = v1208[v1210];
                            v1227 = v1207[v1210];
                            v1228 = 4 * *(_QWORD *)(v1209 + 8 * v1210);
                            result = v1224;
                            v1229 = v1223;
                            do
                            {
                              if (v1227 >= 1)
                              {
                                v1230 = 0;
                                v1231 = v1208[v1211];
                                v1232 = v1207[v1211];
                                v1233 = *a2;
                                v1234 = 4 * *(_QWORD *)(v1209 + 8 * v1211);
                                v1235 = result;
                                v1236 = v1229;
                                do
                                {
                                  if (v1232 >= 1)
                                  {
                                    v1237 = v160[19];
                                    v1238 = (float *)(v1233[19] + v1235);
                                    v1239 = v1232;
                                    do
                                    {
                                      *v1238 = (float)*(char *)(v1237 + v1236);
                                      v1238 = (float *)((char *)v1238 + v1234);
                                      v1237 += v1231;
                                      --v1239;
                                    }
                                    while (v1239);
                                  }
                                  v1236 += v1226;
                                  ++v1230;
                                  v1235 += v1228;
                                }
                                while (v1230 != v1227);
                              }
                              v1229 += v1220;
                              ++v1225;
                              result += v1222;
                            }
                            while (v1225 != v1221);
                          }
                          v1223 += v1495;
                          ++v1219;
                          v1224 += v1478;
                        }
                        while (v1219 != v1510);
                      }
                      v1462 += v1418;
                      v1218 = v1438 + 1;
                      v1450 += v1408;
                    }
                    while (v1438 + 1 != v1428);
                  }
                  v1205 += v1367;
                }
                while (v1372 > v1387 + v1367);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlx::core::`anonymous namespace'::copy<int,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&,long long &,long long &>(uint64_t result, uint64_t a2, int a3, int **a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  float v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  BOOL *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  _BYTE *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  _BYTE *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  float *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float *v165;
  uint64_t v166;
  int *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float *v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  ldiv_t v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int *v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int *v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  ldiv_t v242;
  int *v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t *v250;
  uint64_t v251;
  int *v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  int i;
  int v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  int *v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int j;
  int v272;
  int k;
  int v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int *v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  ldiv_t v288;
  int *v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  int *v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  int v308;
  uint64_t *v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  int *v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  int v324;
  uint64_t *v325;
  uint64_t v326;
  int v327;
  int v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  ldiv_t v343;
  int *v344;
  int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t *v351;
  uint64_t v352;
  int *v353;
  int v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  int m;
  int v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  int *v365;
  int v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  int n;
  int v373;
  int ii;
  int v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int *v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  ldiv_t v389;
  int *v390;
  int v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  int *v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  int v409;
  uint64_t *v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int *v415;
  int v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  int v425;
  uint64_t *v426;
  uint64_t v427;
  int v428;
  int v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int *v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  ldiv_t v445;
  int v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  uint64_t *v452;
  int v453;
  uint64_t v454;
  int *v455;
  int v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  int v463;
  uint64_t *v464;
  int v465;
  uint64_t v466;
  int *v467;
  int v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  int v475;
  uint64_t *v476;
  int v477;
  int v478;
  uint64_t *v479;
  int v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int *v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t v490;
  ldiv_t v491;
  int v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  int *v501;
  int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  int *v517;
  int v518;
  int v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t *v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  uint64_t *v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  int *v542;
  uint64_t *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  ldiv_t v549;
  uint64_t v550;
  ldiv_t v551;
  int v552;
  int v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  _DWORD *v572;
  int v573;
  uint64_t v574;
  int v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  int *v589;
  int v590;
  int v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  int v609;
  _QWORD *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  _DWORD *v615;
  int v616;
  uint64_t v617;
  int *v618;
  int v619;
  uint64_t v620;
  uint64_t *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  int v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  _DWORD *v645;
  int v646;
  uint64_t v647;
  int *v648;
  uint64_t *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  int v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  _DWORD *v673;
  int v674;
  uint64_t v675;
  uint64_t v676;
  int *v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  ldiv_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  int quot;
  ldiv_t v689;
  uint64_t v690;
  int v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  int v698;
  int v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  int v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  _DWORD *v711;
  uint64_t v712;
  int v713;
  int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  int v721;
  int v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  _DWORD *v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  char *v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int *v745;
  uint64_t *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  ldiv_t v753;
  uint64_t v754;
  int v755;
  ldiv_t v756;
  int v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  int v769;
  int v770;
  _QWORD *v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  int v776;
  _DWORD *v777;
  _DWORD *v778;
  uint64_t v779;
  int *v780;
  int v781;
  int v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  _DWORD *v796;
  _DWORD *v797;
  uint64_t v798;
  int *v799;
  int v800;
  int v801;
  uint64_t *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  int v818;
  int v819;
  _QWORD *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  int v825;
  _DWORD *v826;
  _DWORD *v827;
  uint64_t v828;
  int *v829;
  int v830;
  uint64_t *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  int v843;
  int v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  int v849;
  int v850;
  _QWORD *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  int v856;
  _DWORD *v857;
  _DWORD *v858;
  uint64_t v859;
  int *v860;
  uint64_t *v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  int v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  int v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  int v880;
  int v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  int v886;
  _DWORD *v887;
  _DWORD *v888;
  uint64_t v889;
  uint64_t v890;
  int *v891;
  unint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t *v895;
  ldiv_t v896;
  uint64_t v897;
  unint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  int v902;
  ldiv_t v903;
  uint64_t v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  int v912;
  int v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  _DWORD *v925;
  uint64_t v926;
  int v927;
  int v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  int v935;
  int v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  _DWORD *v948;
  uint64_t v949;
  uint64_t v950;
  int v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  char *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  int *v959;
  uint64_t *v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  ldiv_t v967;
  uint64_t v968;
  int v969;
  ldiv_t v970;
  int v971;
  int v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  int v977;
  int v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  int v983;
  int v984;
  _QWORD *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  int v990;
  _DWORD *v991;
  _DWORD *v992;
  uint64_t v993;
  int *v994;
  int v995;
  int v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  int v1009;
  _DWORD *v1010;
  _DWORD *v1011;
  uint64_t v1012;
  int *v1013;
  int v1014;
  int v1015;
  uint64_t *v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  int v1032;
  int v1033;
  _QWORD *v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  int v1039;
  _DWORD *v1040;
  _DWORD *v1041;
  uint64_t v1042;
  int *v1043;
  int v1044;
  uint64_t *v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  int v1057;
  int v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  int v1063;
  int v1064;
  _QWORD *v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  int v1070;
  _DWORD *v1071;
  _DWORD *v1072;
  uint64_t v1073;
  int *v1074;
  uint64_t *v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  int v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  int v1088;
  int v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  int v1094;
  int v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  int v1100;
  _DWORD *v1101;
  _DWORD *v1102;
  char *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  int *v1108;
  uint64_t *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  ldiv_t v1116;
  uint64_t v1117;
  ldiv_t v1118;
  int v1119;
  int v1120;
  int v1121;
  uint64_t v1122;
  uint64_t v1123;
  int v1124;
  int v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  int v1129;
  int v1130;
  uint64_t *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  _QWORD *v1136;
  uint64_t v1137;
  int *v1138;
  uint64_t v1139;
  int v1140;
  uint64_t v1141;
  int v1142;
  int v1143;
  uint64_t v1144;
  uint64_t *v1145;
  int v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  _QWORD *v1155;
  uint64_t v1156;
  int *v1157;
  uint64_t v1158;
  int v1159;
  uint64_t v1160;
  int *v1161;
  int v1162;
  int v1163;
  uint64_t v1164;
  uint64_t *v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  int v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  int v1178;
  int v1179;
  _QWORD *v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  _QWORD *v1185;
  uint64_t v1186;
  int *v1187;
  uint64_t v1188;
  int v1189;
  uint64_t v1190;
  int *v1191;
  uint64_t v1192;
  uint64_t *v1193;
  uint64_t v1194;
  uint64_t v1195;
  int v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  int v1201;
  int v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  int v1207;
  int v1208;
  _QWORD *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  _QWORD *v1214;
  uint64_t v1215;
  uint64_t v1216;
  int v1217;
  uint64_t v1218;
  int *v1219;
  uint64_t v1220;
  uint64_t *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  int v1227;
  uint64_t v1228;
  int v1229;
  int v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  int v1235;
  int v1236;
  _QWORD *v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  _QWORD *v1242;
  uint64_t v1243;
  int *v1244;
  uint64_t v1245;
  int v1246;
  char *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  int *v1251;
  uint64_t *v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  ldiv_t v1259;
  uint64_t v1260;
  int v1261;
  ldiv_t v1262;
  int v1263;
  int v1264;
  int v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  int v1270;
  int v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  int v1276;
  int v1277;
  _QWORD *v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  float *v1283;
  int *v1284;
  int v1285;
  uint64_t v1286;
  int v1287;
  int v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  int v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  int *v1301;
  int v1302;
  uint64_t v1303;
  int *v1304;
  int v1305;
  int v1306;
  uint64_t v1307;
  uint64_t *v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  int v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  int v1324;
  int v1325;
  _QWORD *v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  float *v1331;
  int *v1332;
  int v1333;
  uint64_t v1334;
  int *v1335;
  int v1336;
  uint64_t *v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  int v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  int v1352;
  int v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  int v1358;
  int v1359;
  _QWORD *v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  float *v1365;
  int *v1366;
  int v1367;
  uint64_t v1368;
  int *v1369;
  uint64_t *v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  int v1377;
  int v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  int v1383;
  int v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  int v1389;
  int v1390;
  _QWORD *v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  float *v1396;
  int *v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  unint64_t v1420;
  unint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  unint64_t v1426;
  unint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  int v1469;
  int v1470;
  uint64_t v1471;
  uint64_t v1472;
  int v1473;
  uint64_t v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  int v1480;
  uint64_t v1481;
  uint64_t v1482;
  int v1483;
  int v1484;
  int v1485;
  int v1486;
  int v1487;
  int v1488;
  uint64_t v1489;
  uint64_t v1490;
  int v1491;
  int v1492;
  uint64_t v1493;
  int v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  int v1503;
  int v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  _QWORD *v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  _QWORD *v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  int v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  int v1560;
  uint64_t v1561;
  int v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1567;
  int v1568;
  int v1569;
  int v1570;
  int v1571;
  int v1572;
  int v1573;
  int v1574;
  int v1575;
  int v1576;
  int v1577;
  int v1578;
  int v1579;
  int v1580;
  int v1581;

  v8 = *(uint64_t **)a2;
  v11 = (uint64_t *)a2;
  v12 = result;
  switch(*(_DWORD *)(*(_QWORD *)a2 + 56))
  {
    case 0:
      switch(a3)
      {
        case 0:
          v13 = v8[6];
          if (v13)
            result = (uint64_t)memset((void *)v8[19], **(_DWORD **)(*(_QWORD *)result + 152) != 0, v13);
          break;
        case 1:
          v33 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v33)
          {
            v34 = *(int **)(*(_QWORD *)result + 152);
            v35 = (BOOL *)v8[19];
            v36 = 4 * v33;
            do
            {
              v37 = *v34++;
              *v35++ = v37 != 0;
              v36 -= 4;
            }
            while (v36);
          }
          break;
        case 2:
          v38 = *a7;
          v39 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v40 = **a4;
              if ((int)v40 >= 1)
              {
                v41 = (BOOL *)v8[19];
                v42 = (_DWORD *)(*(_QWORD *)(v39 + 152) + 4 * v38);
                v43 = 4 * **a5;
                do
                {
                  *v41++ = *v42 != 0;
                  v42 = (_DWORD *)((char *)v42 + v43);
                  --v40;
                }
                while (v40);
              }
              break;
            case 2:
              v189 = **a4;
              if (v189 >= 1)
              {
                v190 = 0;
                v191 = 0;
                v192 = *(_QWORD *)(v39 + 152);
                v193 = v8[19];
                v194 = (*a4)[1];
                v195 = (*a5)[1];
                v196 = **a5 - v195 * v194;
                do
                {
                  v197 = v194;
                  if ((int)v194 >= 1)
                  {
                    do
                    {
                      result = *(_DWORD *)(v192 + 4 * v38) != 0;
                      *(_BYTE *)(v193 + v191++) = result;
                      v38 += v195;
                      --v197;
                    }
                    while (v197);
                  }
                  v38 += v196;
                  ++v190;
                }
                while (v190 != v189);
              }
              break;
            case 3:
              v198 = *a4;
              v199 = **a4;
              if (v199 >= 1)
              {
                v200 = 0;
                result = 0;
                v201 = *(_QWORD *)(v39 + 152);
                v202 = v8[19];
                v203 = v198[1];
                v204 = *a5;
                v205 = (*a5)[1];
                v206 = **a5 - v205 * v203;
                do
                {
                  if ((int)v203 < 1)
                  {
                    v213 = result;
                  }
                  else
                  {
                    v207 = 0;
                    v208 = v198[2];
                    v209 = *a5;
                    v210 = v205 - v204[2] * v208;
                    do
                    {
                      if ((int)v208 < 1)
                      {
                        v213 = result;
                      }
                      else
                      {
                        v211 = v209[2];
                        v212 = v208;
                        do
                        {
                          v213 = result + 1;
                          *(_BYTE *)(v202 + result) = *(_DWORD *)(v201 + 4 * v38) != 0;
                          v38 += v211;
                          ++result;
                          --v212;
                        }
                        while (v212);
                      }
                      v38 += v210;
                      ++v207;
                      result = v213;
                    }
                    while (v207 != (_DWORD)v203);
                  }
                  v38 += v206;
                  ++v200;
                  result = v213;
                }
                while (v200 != v199);
              }
              break;
            case 4:
              v214 = *a4;
              v215 = **a4;
              if (v215 >= 1)
              {
                v216 = 0;
                result = 0;
                v217 = *(_QWORD *)(v39 + 152);
                v218 = v8[19];
                v219 = v214[1];
                v220 = *a5;
                v221 = (*a5)[1];
                v222 = **a5 - v221 * v219;
                do
                {
                  if ((int)v219 < 1)
                  {
                    v233 = result;
                  }
                  else
                  {
                    v223 = 0;
                    v224 = v214[2];
                    v225 = *a5;
                    v226 = v221 - v220[2] * v224;
                    do
                    {
                      if ((int)v224 < 1)
                      {
                        v233 = result;
                      }
                      else
                      {
                        v227 = 0;
                        v228 = v214[3];
                        v229 = *a5;
                        v230 = v225[2] - v225[3] * v228;
                        do
                        {
                          if ((int)v228 < 1)
                          {
                            v233 = result;
                          }
                          else
                          {
                            v231 = v229[3];
                            v232 = v228;
                            do
                            {
                              v233 = result + 1;
                              *(_BYTE *)(v218 + result) = *(_DWORD *)(v217 + 4 * v38) != 0;
                              v38 += v231;
                              ++result;
                              --v232;
                            }
                            while (v232);
                          }
                          v38 += v230;
                          ++v227;
                          result = v233;
                        }
                        while (v227 != (_DWORD)v224);
                      }
                      v38 += v226;
                      ++v223;
                      result = v233;
                    }
                    while (v223 != (_DWORD)v219);
                  }
                  v38 += v222;
                  ++v216;
                  result = v233;
                }
                while (v216 != v215);
              }
              break;
            default:
              v179 = v8[6];
              if (v179)
              {
                v180 = 0;
                v181 = *(_QWORD *)(v39 + 152) + 4 * v38;
                v182 = v8[19];
                v183 = *a4;
                v184 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v185 = *a5;
                do
                {
                  v186 = 0;
                  if ((v184 & 0x80000000) == 0)
                  {
                    v187 = v184;
                    LODWORD(result) = v180;
                    do
                    {
                      v188 = ldiv((int)result, v183[v187]);
                      result = v188.quot;
                      v186 += v185[v187--] * v188.rem;
                    }
                    while (v187 != -1);
                  }
                  *(_BYTE *)(v182 + v180++) = *(_DWORD *)(v181 + 4 * v186) != 0;
                }
                while (v180 != v179);
              }
              break;
          }
          break;
        case 3:
          v1428 = *a7;
          v44 = *a8;
          v45 = *(_QWORD **)result;
          v46 = v45[1] - *v45;
          switch(v46 >> 2)
          {
            case 1:
              v47 = (v46 << 30) - 0x100000000;
              v48 = *(int *)((char *)*a4 + (v47 >> 30));
              if (v48 >= 1)
              {
                v49 = v47 >> 29;
                v50 = *(uint64_t *)((char *)*a5 + v49);
                v51 = *(_QWORD *)(*a6 + v49);
                v52 = (BOOL *)(v8[19] + v44);
                v53 = (_DWORD *)(v45[19] + 4 * v1428);
                v54 = 4 * v50;
                do
                {
                  *v52 = *v53 != 0;
                  v52 += v51;
                  v53 = (_DWORD *)((char *)v53 + v54);
                  --v48;
                }
                while (v48);
              }
              break;
            case 2:
              v574 = (v46 << 30) - 0x200000000;
              v575 = *(int *)((char *)*a4 + (v574 >> 30));
              if (v575 >= 1)
              {
                v576 = 0;
                v577 = v574 >> 29;
                v578 = *(uint64_t *)((char *)*a5 + v577);
                v579 = *(_QWORD *)(*a6 + v577);
                v580 = (v46 << 30) - 0x100000000;
                result = *(uint64_t *)((char *)*a5 + (v580 >> 29));
                v581 = *(_QWORD *)(*a6 + (v580 >> 29));
                v582 = *(int *)((char *)*a4 + (v580 >> 30));
                v583 = 4 * v1428;
                v584 = 4 * v578;
                v585 = 4 * result;
                do
                {
                  if (v582 >= 1)
                  {
                    v586 = v8[19];
                    result = v45[19] + v583;
                    v587 = v582;
                    do
                    {
                      *(_BYTE *)(v586 + v44) = *(_DWORD *)result != 0;
                      v586 += v581;
                      result += v585;
                      --v587;
                    }
                    while (v587);
                  }
                  v44 += v579;
                  ++v576;
                  v583 += v584;
                }
                while (v576 != v575);
              }
              break;
            case 3:
              v588 = (v46 << 30) - 0x300000000;
              v589 = *a4;
              v590 = *(int *)((char *)*a4 + (v588 >> 30));
              if (v590 >= 1)
              {
                v591 = 0;
                v592 = v46 << 30;
                v593 = *a5;
                v594 = v588 >> 29;
                v595 = *(uint64_t *)((char *)*a5 + (v588 >> 29));
                v596 = *a6;
                v597 = *(_QWORD *)(*a6 + v594);
                v598 = v592 - 0x200000000;
                v599 = (v592 - 0x200000000) >> 29;
                v600 = v592 - 0x100000000;
                v601 = *(uint64_t *)((char *)*a5 + v599);
                v602 = *(_QWORD *)(*a6 + v599);
                v603 = *(int *)((char *)v589 + (v598 >> 30));
                v604 = v600 >> 32;
                v605 = 4 * v1428;
                result = 4 * v595;
                v606 = 4 * v601;
                do
                {
                  if (v603 >= 1)
                  {
                    v607 = 0;
                    v608 = *(_QWORD *)(v596 + 8 * v604);
                    v609 = v589[v604];
                    v610 = (_QWORD *)*v11;
                    v611 = 4 * v593[v604];
                    v612 = v605;
                    v613 = v44;
                    do
                    {
                      if (v609 >= 1)
                      {
                        v614 = v610[19];
                        v615 = (_DWORD *)(v45[19] + v612);
                        v616 = v609;
                        do
                        {
                          *(_BYTE *)(v614 + v613) = *v615 != 0;
                          v614 += v608;
                          v615 = (_DWORD *)((char *)v615 + v611);
                          --v616;
                        }
                        while (v616);
                      }
                      v613 += v602;
                      ++v607;
                      v612 += v606;
                    }
                    while (v607 != v603);
                  }
                  v44 += v597;
                  ++v591;
                  v605 += result;
                }
                while (v591 != v590);
              }
              break;
            case 4:
              v617 = (v46 << 30) - 0x400000000;
              v618 = *a4;
              v1569 = *(int *)((char *)*a4 + (v617 >> 30));
              if (v1569 >= 1)
              {
                v619 = 0;
                v620 = v46 << 30;
                v621 = *a5;
                v622 = v617 >> 29;
                v623 = *(uint64_t *)((char *)*a5 + v622);
                v624 = *a6;
                v1552 = *(_QWORD *)(*a6 + v622);
                v625 = (v46 << 30) - 0x300000000;
                v626 = *(_QWORD *)(*a6 + (v625 >> 29));
                v627 = *(int *)((char *)v618 + (v625 >> 30));
                v1519 = (v620 - 0x200000000) >> 32;
                v628 = (v620 - 0x100000000) >> 32;
                result = 4 * v1428;
                v629 = 4 * *(uint64_t *)((char *)*a5 + (v625 >> 29));
                do
                {
                  v630 = v44;
                  if (v627 >= 1)
                  {
                    v631 = 0;
                    v632 = *(_QWORD *)(v624 + 8 * v1519);
                    v633 = v618[v1519];
                    v634 = 4 * v621[v1519];
                    v635 = result;
                    v636 = v44;
                    do
                    {
                      if (v633 >= 1)
                      {
                        v637 = 0;
                        v638 = *(_QWORD *)(v624 + 8 * v628);
                        v639 = v618[v628];
                        v640 = *v11;
                        v641 = 4 * v621[v628];
                        v642 = v635;
                        v643 = v636;
                        do
                        {
                          if (v639 >= 1)
                          {
                            v644 = *(_QWORD *)(v640 + 152);
                            v645 = (_DWORD *)(v45[19] + v642);
                            v646 = v639;
                            do
                            {
                              *(_BYTE *)(v644 + v643) = *v645 != 0;
                              v644 += v638;
                              v645 = (_DWORD *)((char *)v645 + v641);
                              --v646;
                            }
                            while (v646);
                          }
                          v643 += v632;
                          ++v637;
                          v642 += v634;
                        }
                        while (v637 != v633);
                      }
                      v636 += v626;
                      ++v631;
                      v635 += v629;
                    }
                    while (v631 != v627);
                  }
                  v44 = v630 + v1552;
                  ++v619;
                  result += 4 * v623;
                }
                while (v619 != v1569);
              }
              break;
            case 5:
              v647 = (v46 << 30) - 0x500000000;
              v648 = *a4;
              v1484 = *(int *)((char *)*a4 + (v647 >> 30));
              if (v1484 >= 1)
              {
                v1494 = 0;
                v649 = *a5;
                v650 = v647 >> 29;
                v651 = *a6;
                v1474 = *(_QWORD *)(*a6 + v650);
                v652 = (v46 << 30) - 0x400000000;
                v1553 = *(_QWORD *)(*a6 + (v652 >> 29));
                v1570 = *(int *)((char *)v648 + (v652 >> 30));
                v1454 = ((v46 << 30) - 0x300000000) >> 32;
                v1520 = ((v46 << 30) - 0x200000000) >> 32;
                result = ((v46 << 30) - 0x100000000) >> 32;
                v1506 = 4 * v1428;
                v1464 = 4 * *(uint64_t *)((char *)*a5 + v650);
                v1535 = 4 * *(uint64_t *)((char *)*a5 + (v652 >> 29));
                do
                {
                  v1439 = v44;
                  if (v1570 >= 1)
                  {
                    v653 = 0;
                    v654 = *(_QWORD *)(v651 + 8 * v1454);
                    v655 = v648[v1454];
                    v656 = 4 * v649[v1454];
                    v657 = v1506;
                    v658 = v44;
                    do
                    {
                      if (v655 >= 1)
                      {
                        v659 = 0;
                        v660 = *(_QWORD *)(v651 + 8 * v1520);
                        v661 = v648[v1520];
                        v662 = 4 * v649[v1520];
                        v663 = v657;
                        v664 = v658;
                        do
                        {
                          if (v661 >= 1)
                          {
                            v665 = 0;
                            v666 = *(_QWORD *)(v651 + 8 * result);
                            v667 = v648[result];
                            v668 = *v11;
                            v669 = 4 * v649[result];
                            v670 = v663;
                            v671 = v664;
                            do
                            {
                              if (v667 >= 1)
                              {
                                v672 = *(_QWORD *)(v668 + 152);
                                v673 = (_DWORD *)(v45[19] + v670);
                                v674 = v667;
                                do
                                {
                                  *(_BYTE *)(v672 + v671) = *v673 != 0;
                                  v672 += v666;
                                  v673 = (_DWORD *)((char *)v673 + v669);
                                  --v674;
                                }
                                while (v674);
                              }
                              v671 += v660;
                              ++v665;
                              v670 += v662;
                            }
                            while (v665 != v661);
                          }
                          v664 += v654;
                          ++v659;
                          v663 += v656;
                        }
                        while (v659 != v655);
                      }
                      v658 += v1553;
                      ++v653;
                      v657 += v1535;
                    }
                    while (v653 != v1570);
                  }
                  v44 = v1439 + v1474;
                  v1506 += v1464;
                  ++v1494;
                }
                while (v1494 != v1484);
              }
              break;
            default:
              v537 = (char *)a4[1];
              LODWORD(v538) = 1;
              v539 = -20;
              do
              {
                v538 = *(int *)&v537[v539] * (uint64_t)(int)v538;
                v539 += 4;
              }
              while (v539);
              v1426 = v45[6];
              if (v1426)
              {
                v540 = 0;
                v541 = (v46 << 30) - 0x500000000;
                v542 = *a4;
                v1403 = *v8;
                v1413 = ((unint64_t)(v537 - (char *)*a4) >> 2) - 1;
                v543 = *a5;
                v544 = *a6;
                v1463 = *(_QWORD *)(*a6 + (v541 >> 29));
                v1473 = *(int *)((char *)*a4 + (v541 >> 30));
                v1408 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1399 = ((v46 << 30) - 0x400000000) >> 32;
                v1445 = ((v46 << 30) - 0x300000000) >> 32;
                v1518 = ((v46 << 30) - 0x200000000) >> 32;
                v545 = ((v46 << 30) - 0x100000000) >> 32;
                v1453 = 4 * *(uint64_t *)((char *)*a5 + (v541 >> 29));
                v1438 = *a8;
                v1418 = v538;
                do
                {
                  v546 = v1413;
                  if ((v1413 & 0x80000000) != 0)
                  {
                    v547 = 0;
                    v548 = v1408;
                  }
                  else
                  {
                    v547 = 0;
                    LODWORD(result) = v540;
                    v548 = v1408;
                    do
                    {
                      v549 = ldiv((int)result, v542[v546]);
                      result = v549.quot;
                      v547 += v543[v546--] * v549.rem;
                    }
                    while (v546 != -1);
                  }
                  v1434 = v540;
                  v550 = 0;
                  if ((v548 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v540;
                    do
                    {
                      v551 = ldiv((int)result, *(int *)(v1403 + 4 * v548));
                      result = v551.quot;
                      v550 += *(_QWORD *)(v544 + 8 * v548--) * v551.rem;
                    }
                    while (v548 != -1);
                  }
                  if (v1473 >= 1)
                  {
                    v552 = 0;
                    v1551 = *(_QWORD *)(v544 + 8 * v1399);
                    v1568 = v542[v1399];
                    v1493 = 4 * (v547 + v1428);
                    v1505 = v550 + v1438;
                    v1534 = 4 * v543[v1399];
                    do
                    {
                      v1483 = v552;
                      if (v1568 >= 1)
                      {
                        v553 = 0;
                        v554 = *(_QWORD *)(v544 + 8 * v1445);
                        v555 = v542[v1445];
                        v556 = 4 * v543[v1445];
                        v558 = v1493;
                        v557 = v1505;
                        do
                        {
                          if (v555 >= 1)
                          {
                            v559 = 0;
                            v560 = *(_QWORD *)(v544 + 8 * v1518);
                            v561 = v542[v1518];
                            v562 = 4 * v543[v1518];
                            result = v558;
                            v563 = v557;
                            do
                            {
                              if (v561 >= 1)
                              {
                                v564 = 0;
                                v565 = *(_QWORD *)(v544 + 8 * v545);
                                v566 = v542[v545];
                                v567 = *v11;
                                v568 = 4 * v543[v545];
                                v569 = result;
                                v570 = v563;
                                do
                                {
                                  if (v566 >= 1)
                                  {
                                    v571 = *(_QWORD *)(v567 + 152);
                                    v572 = (_DWORD *)(v45[19] + v569);
                                    v573 = v566;
                                    do
                                    {
                                      *(_BYTE *)(v571 + v570) = *v572 != 0;
                                      v571 += v565;
                                      v572 = (_DWORD *)((char *)v572 + v568);
                                      --v573;
                                    }
                                    while (v573);
                                  }
                                  v570 += v560;
                                  ++v564;
                                  v569 += v562;
                                }
                                while (v564 != v561);
                              }
                              v563 += v554;
                              ++v559;
                              result += v556;
                            }
                            while (v559 != v555);
                          }
                          v557 += v1551;
                          ++v553;
                          v558 += v1534;
                        }
                        while (v553 != v1568);
                      }
                      v1505 += v1463;
                      v552 = v1483 + 1;
                      v1493 += v1453;
                    }
                    while (v1483 + 1 != v1473);
                  }
                  v540 += v1418;
                }
                while (v1426 > v1434 + v1418);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 1:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v14 = 0;
            v15 = **(_DWORD **)(*(_QWORD *)result + 152);
            v16 = v8[19];
            do
              *(_BYTE *)(v16 + v14++) = v15;
            while (*(_QWORD *)(*(_QWORD *)a2 + 48) > v14);
          }
          break;
        case 1:
          v55 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v55)
          {
            v56 = *(int **)(*(_QWORD *)result + 152);
            v57 = (_BYTE *)v8[19];
            v58 = 4 * v55;
            do
            {
              v59 = *v56++;
              *v57++ = v59;
              v58 -= 4;
            }
            while (v58);
          }
          break;
        case 2:
          v60 = *a7;
          v61 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v62 = 0;
                v63 = *(_QWORD *)(v61 + 152);
                v64 = v8[19];
                do
                {
                  *(_BYTE *)(v64 + v62) = *(_DWORD *)(v63 + 4 * v60);
                  v60 += **a5;
                  ++v62;
                }
                while (**a4 > (int)v62);
              }
              break;
            case 2:
              v243 = *a4;
              v244 = **a4;
              if (v244 >= 1)
              {
                v245 = 0;
                v246 = 0;
                v247 = *(_QWORD *)(v61 + 152);
                v248 = v8[19];
                do
                {
                  v249 = v243[1];
                  if (v249 < 1)
                  {
                    v250 = *a5;
                    v251 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v248 + v246 + result) = *(_DWORD *)(v247 + 4 * v60);
                      v250 = *a5;
                      v251 = (*a5)[1];
                      v60 += v251;
                      v243 = *a4;
                      v249 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v249);
                    v244 = *v243;
                    v246 += result;
                  }
                  v60 = *v250 + v60 - v251 * v249;
                  ++v245;
                }
                while (v245 < v244);
              }
              break;
            case 3:
              v252 = *a4;
              v253 = **a4;
              if (v253 >= 1)
              {
                v254 = 0;
                v255 = 0;
                v256 = *(_QWORD *)(v61 + 152);
                v257 = v8[19];
                do
                {
                  v258 = v252[1];
                  if (v258 < 1)
                  {
                    v262 = *a5;
                    v263 = (*a5)[1];
                  }
                  else
                  {
                    for (i = 0; i < v258; ++i)
                    {
                      v260 = v252[2];
                      if (v260 < 1)
                      {
                        v262 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v261 = 0;
                        do
                        {
                          *(_BYTE *)(v257 + v255 + v261) = *(_DWORD *)(v256 + 4 * v60);
                          v262 = *a5;
                          result = (*a5)[2];
                          v60 += result;
                          v252 = *a4;
                          v260 = (*a4)[2];
                          ++v261;
                        }
                        while ((int)v261 < v260);
                        v255 += v261;
                      }
                      v263 = v262[1];
                      v60 = v263 + v60 - result * v260;
                      v258 = v252[1];
                    }
                    v253 = *v252;
                  }
                  v60 = *v262 + v60 - v263 * v258;
                  ++v254;
                }
                while (v254 < v253);
              }
              break;
            case 4:
              v264 = *a4;
              v265 = **a4;
              if (v265 >= 1)
              {
                v266 = 0;
                v267 = 0;
                v268 = *(_QWORD *)(v61 + 152);
                v269 = v8[19];
                do
                {
                  v270 = v264[1];
                  if (v270 < 1)
                  {
                    v276 = *a5;
                    v278 = (*a5)[1];
                  }
                  else
                  {
                    for (j = 0; j < v270; ++j)
                    {
                      v272 = v264[2];
                      if (v272 < 1)
                      {
                        v276 = *a5;
                        v277 = (*a5)[2];
                      }
                      else
                      {
                        for (k = 0; k < v272; ++k)
                        {
                          v274 = v264[3];
                          if (v274 < 1)
                          {
                            v276 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v275 = 0;
                            do
                            {
                              *(_BYTE *)(v269 + v267 + v275) = *(_DWORD *)(v268 + 4 * v60);
                              v276 = *a5;
                              result = (*a5)[3];
                              v60 += result;
                              v264 = *a4;
                              v274 = (*a4)[3];
                              ++v275;
                            }
                            while ((int)v275 < v274);
                            v267 += v275;
                          }
                          v277 = v276[2];
                          v60 = v277 + v60 - result * v274;
                          v272 = v264[2];
                        }
                      }
                      v278 = v276[1];
                      v60 = v278 + v60 - v277 * v272;
                      v270 = v264[1];
                    }
                    v265 = *v264;
                  }
                  v60 = *v276 + v60 - v278 * v270;
                  ++v266;
                }
                while (v266 < v265);
              }
              break;
            default:
              if (v8[6])
              {
                v234 = 0;
                v235 = *(_QWORD *)(v61 + 152) + 4 * v60;
                v236 = v8[19];
                do
                {
                  v237 = *a4;
                  v238 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v239 = 0;
                  v240 = (v238 - 1);
                  if ((int)v238 - 1 >= 0)
                  {
                    v241 = *a5;
                    LODWORD(result) = v234;
                    do
                    {
                      v242 = ldiv((int)result, v237[v240]);
                      result = v242.quot;
                      v239 += v241[v240--] * v242.rem;
                    }
                    while (v240 != -1);
                  }
                  *(_BYTE *)(v236 + v234++) = *(_DWORD *)(v235 + 4 * v239);
                }
                while (v234 < *(_QWORD *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          v1567 = *a7;
          v65 = *a8;
          v66 = *(_QWORD **)result;
          v67 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v67 >> 2)
          {
            case 1:
              v68 = (v67 << 30) - 0x100000000;
              v69 = *(int *)((char *)*a4 + (v68 >> 30));
              if (v69 >= 1)
              {
                v70 = v68 >> 29;
                v71 = *(uint64_t *)((char *)*a5 + v70);
                v72 = *(_QWORD *)(*a6 + v70);
                v73 = (_BYTE *)(v8[19] + v65);
                v74 = (_DWORD *)(v66[19] + 4 * v1567);
                v75 = 4 * v71;
                do
                {
                  *v73 = *v74;
                  v73 += v72;
                  v74 = (_DWORD *)((char *)v74 + v75);
                  --v69;
                }
                while (v69);
              }
              break;
            case 2:
              v697 = (v67 << 30) - 0x200000000;
              v698 = *(int *)((char *)*a4 + (v697 >> 30));
              if (v698 >= 1)
              {
                v699 = 0;
                v700 = v697 >> 29;
                v701 = *(uint64_t *)((char *)*a5 + v700);
                v702 = *(_QWORD *)(*a6 + v700);
                v703 = 4 * v1567;
                v704 = 4 * v701;
                do
                {
                  v705 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                  v706 = *(int *)((char *)*a4 + (v705 >> 30));
                  if (v706 >= 1)
                  {
                    v707 = v705 >> 29;
                    v708 = *(uint64_t *)((char *)*a5 + v707);
                    v709 = *(_QWORD *)(*a6 + v707);
                    v710 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                    v711 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v703);
                    result = 4 * v708;
                    do
                    {
                      *(_BYTE *)(v710 + v65) = *v711;
                      v710 += v709;
                      v711 = (_DWORD *)((char *)v711 + result);
                      --v706;
                    }
                    while (v706);
                  }
                  v65 += v702;
                  ++v699;
                  v703 += v704;
                }
                while (v699 != v698);
              }
              break;
            case 3:
              v712 = (v67 << 30) - 0x300000000;
              v713 = *(int *)((char *)*a4 + (v712 >> 30));
              if (v713 >= 1)
              {
                v714 = 0;
                v715 = v712 >> 29;
                v716 = *(uint64_t *)((char *)*a5 + v715);
                v717 = *(_QWORD *)(*a6 + v715);
                v718 = 4 * v1567;
                v719 = 4 * v716;
                do
                {
                  v720 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x200000000;
                  v721 = *(int *)((char *)*a4 + (v720 >> 30));
                  if (v721 >= 1)
                  {
                    v722 = 0;
                    v723 = v720 >> 29;
                    v724 = *(uint64_t *)((char *)*a5 + v723);
                    v725 = *(_QWORD *)(*a6 + v723);
                    result = 4 * v724;
                    v726 = v718;
                    v727 = v65;
                    do
                    {
                      v728 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                      v729 = *(int *)((char *)*a4 + (v728 >> 30));
                      if (v729 >= 1)
                      {
                        v730 = v728 >> 29;
                        v731 = *(uint64_t *)((char *)*a5 + v730);
                        v732 = *(_QWORD *)(*a6 + v730);
                        v733 = *(_QWORD *)(*v11 + 152);
                        v734 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v726);
                        v735 = 4 * v731;
                        do
                        {
                          *(_BYTE *)(v733 + v727) = *v734;
                          v733 += v732;
                          v734 = (_DWORD *)((char *)v734 + v735);
                          --v729;
                        }
                        while (v729);
                      }
                      v727 += v725;
                      ++v722;
                      v726 += result;
                    }
                    while (v722 != v721);
                  }
                  v65 += v717;
                  ++v714;
                  v718 += v719;
                }
                while (v714 != v713);
              }
              break;
            case 4:
              goto LABEL_552;
            case 5:
              v736 = (v67 << 30) - 0x500000000;
              v737 = *(int *)((char *)*a4 + (v736 >> 30));
              if (v737 >= 1)
              {
                v738 = v736 >> 29;
                v739 = *(uint64_t *)((char *)*a5 + v738);
                v740 = *(_QWORD *)(*a6 + v738);
                do
                {
                  v1567 += v739;
                  v65 += v740;
                  --v737;
                }
                while (v737);
              }
              break;
            default:
              LODWORD(v675) = 1;
              v676 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v675 = a4[1][v676++] * (uint64_t)(int)v675;
              while (v676 * 4);
              if (v66[6])
              {
                result = 0;
                v1495 = *a8;
                v1507 = v675;
                do
                {
                  v677 = *a4;
                  v678 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v679 = (v678 - 1);
                  v1521 = v66;
                  v1536 = result;
                  v680 = 0;
                  if ((int)v678 - 1 >= 0)
                  {
                    v681 = *a5;
                    do
                    {
                      v682 = ldiv((int)result, v677[v679]);
                      LODWORD(result) = v682.quot;
                      v680 += v681[v679--] * v682.rem;
                    }
                    while (v679 != -1);
                  }
                  v683 = *(_QWORD *)*v11;
                  v684 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v683) >> 2;
                  v685 = *a6;
                  v686 = 0;
                  v687 = (v684 - 1);
                  if ((int)v684 - 1 >= 0)
                  {
                    quot = v1536;
                    do
                    {
                      v689 = ldiv(quot, *(int *)(v683 + 4 * v687));
                      quot = v689.quot;
                      v686 += *(_QWORD *)(v685 + 8 * v687--) * v689.rem;
                    }
                    while (v687 != -1);
                  }
                  v66 = v1521;
                  v690 = ((v66[1] - *v66) << 30) - 0x500000000;
                  v691 = *(int *)((char *)v677 + (v690 >> 30));
                  if (v691 >= 1)
                  {
                    v692 = v680 + v1567;
                    v693 = v690 >> 29;
                    v694 = *(uint64_t *)((char *)*a5 + v693);
                    v695 = *(_QWORD *)(v685 + v693);
                    v696 = v686 + v1495;
                    do
                    {
                      v692 += v694;
                      v696 += v695;
                      --v691;
                    }
                    while (v691);
                    v66 = *(_QWORD **)v12;
                  }
                  result = v1536 + v1507;
                }
                while (v66[6] > (unint64_t)(v1536 + v1507));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 2:
      switch(a3)
      {
        case 0:
          v17 = v8[6];
          if (v17)
          {
            v18 = **(_DWORD **)(*(_QWORD *)result + 152);
            v19 = (_DWORD *)v8[19];
            do
            {
              *v19++ = v18;
              --v17;
            }
            while (v17);
          }
          break;
        case 1:
          goto LABEL_35;
        case 2:
          v76 = *a7;
          v77 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v78 = *a4;
              if (**a4 >= 1)
              {
                v79 = 0;
                v80 = *(_QWORD *)(v77 + 152);
                v81 = v8[19];
                v82 = **a5;
                v83 = (_DWORD *)(v80 + 4 * v76);
                do
                {
                  *(_DWORD *)(v81 + 4 * v79) = *v83;
                  v83 += v82;
                  ++v79;
                }
                while (*v78 > (int)v79);
              }
              break;
            case 2:
              v289 = *a4;
              v290 = **a4;
              if (v290 >= 1)
              {
                v291 = 0;
                v292 = 0;
                v293 = *(_QWORD *)(v77 + 152);
                v294 = v8[19];
                v295 = **a5;
                v296 = (*a5)[1];
                v297 = v289[1];
                do
                {
                  if (v297 >= 1)
                  {
                    v298 = 0;
                    do
                    {
                      *(_DWORD *)(v294 + 4 * v292 + 4 * v298) = *(_DWORD *)(v293 + 4 * v76);
                      v76 += v296;
                      v297 = v289[1];
                      ++v298;
                    }
                    while ((int)v298 < v297);
                    v290 = *v289;
                    v292 += v298;
                  }
                  result = v297;
                  v76 = v76 + v295 - v296 * v297;
                  ++v291;
                }
                while (v291 < v290);
              }
              break;
            case 3:
              v299 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v300 = 0;
                v301 = 0;
                v302 = *(_QWORD *)(v77 + 152);
                v303 = v8[19];
                v304 = *a5;
                v305 = **a5;
                v306 = (*a5)[1];
                v307 = v299[1];
                do
                {
                  if (v307 >= 1)
                  {
                    v308 = 0;
                    v309 = *a5;
                    v310 = v304[2];
                    v311 = v299[2];
                    do
                    {
                      if (v311 >= 1)
                      {
                        v312 = 0;
                        v313 = v309[2];
                        do
                        {
                          *(_DWORD *)(v303 + 4 * v301 + 4 * v312) = *(_DWORD *)(v302 + 4 * v76);
                          v76 += v313;
                          v311 = v299[2];
                          ++v312;
                        }
                        while ((int)v312 < v311);
                        v307 = v299[1];
                        v301 += v312;
                      }
                      v76 = v76 + v306 - v310 * v311;
                      ++v308;
                    }
                    while (v308 < v307);
                    result = *v299;
                  }
                  v76 = v76 + v305 - v306 * v307;
                  ++v300;
                }
                while (v300 < (int)result);
              }
              break;
            case 4:
              v314 = *a4;
              v315 = **a4;
              if (v315 >= 1)
              {
                v316 = 0;
                v317 = 0;
                v318 = *(_QWORD *)(v77 + 152);
                v319 = v8[19];
                v320 = *a5;
                v321 = **a5;
                v322 = (*a5)[1];
                v323 = v314[1];
                do
                {
                  if (v323 >= 1)
                  {
                    v324 = 0;
                    v325 = *a5;
                    v326 = v320[2];
                    v327 = v314[2];
                    do
                    {
                      if (v327 >= 1)
                      {
                        v328 = 0;
                        v329 = *a5;
                        v330 = v325[2];
                        v331 = v325[3];
                        v332 = v314[3];
                        do
                        {
                          if (v332 >= 1)
                          {
                            v333 = 0;
                            v334 = v329[3];
                            do
                            {
                              *(_DWORD *)(v319 + 4 * v317 + 4 * v333) = *(_DWORD *)(v318 + 4 * v76);
                              v76 += v334;
                              v332 = v314[3];
                              ++v333;
                            }
                            while ((int)v333 < v332);
                            v327 = v314[2];
                            v317 += v333;
                          }
                          v76 = v76 + v330 - v331 * v332;
                          ++v328;
                        }
                        while (v328 < v327);
                        v323 = v314[1];
                      }
                      v76 = v76 + v322 - v326 * v327;
                      ++v324;
                    }
                    while (v324 < v323);
                    v315 = *v314;
                  }
                  result = v323;
                  v76 = v76 + v321 - v322 * v323;
                  ++v316;
                }
                while (v316 < v315);
              }
              break;
            default:
              v279 = v8[6];
              if (v279)
              {
                v280 = 0;
                v281 = *(_QWORD *)(v77 + 152) + 4 * v76;
                v282 = v8[19];
                v283 = *a4;
                v284 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v285 = *a5;
                do
                {
                  v286 = 0;
                  if ((v284 & 0x80000000) == 0)
                  {
                    v287 = v284;
                    LODWORD(result) = v280;
                    do
                    {
                      v288 = ldiv((int)result, v283[v287]);
                      result = v288.quot;
                      v286 += v285[v287--] * v288.rem;
                    }
                    while (v287 != -1);
                  }
                  *(_DWORD *)(v282 + 4 * v280++) = *(_DWORD *)(v281 + 4 * v286);
                }
                while (v280 != v279);
              }
              break;
          }
          break;
        case 3:
          v1423 = *a8;
          v1429 = *a7;
          v84 = *(_QWORD **)result;
          v85 = v84[1] - *v84;
          switch(v85 >> 2)
          {
            case 1:
              v86 = (v85 << 30) - 0x100000000;
              v87 = *(int *)((char *)*a4 + (v86 >> 30));
              if (v87 >= 1)
              {
                v88 = v86 >> 29;
                v89 = *(uint64_t *)((char *)*a5 + v88);
                v90 = *(_QWORD *)(*a6 + v88);
                v91 = (_DWORD *)(v8[19] + 4 * v1423);
                v92 = (_DWORD *)(v84[19] + 4 * v1429);
                v93 = 4 * v90;
                v94 = 4 * v89;
                do
                {
                  *v91 = *v92;
                  v91 = (_DWORD *)((char *)v91 + v93);
                  v92 = (_DWORD *)((char *)v92 + v94);
                  --v87;
                }
                while (v87);
              }
              break;
            case 2:
              v779 = (v85 << 30) - 0x200000000;
              v780 = *a4;
              v781 = *(int *)((char *)*a4 + (v779 >> 30));
              if (v781 >= 1)
              {
                v782 = 0;
                v783 = v779 >> 29;
                v784 = *(uint64_t *)((char *)*a5 + v783);
                v785 = *(_QWORD *)(*a6 + v783);
                v786 = (v85 << 30) - 0x100000000;
                v787 = *(uint64_t *)((char *)*a5 + (v786 >> 29));
                v788 = *(_QWORD *)(*a6 + (v786 >> 29));
                v789 = v786 >> 32;
                v790 = 4 * v1423;
                v791 = 4 * v785;
                v792 = 4 * v788;
                v793 = 4 * v1429;
                v794 = 4 * v784;
                result = 4 * v787;
                do
                {
                  v795 = v780[v789];
                  if (v795 >= 1)
                  {
                    v796 = (_DWORD *)(v8[19] + v790);
                    v797 = (_DWORD *)(v84[19] + v793);
                    do
                    {
                      *v796 = *v797;
                      v796 = (_DWORD *)((char *)v796 + v792);
                      v797 = (_DWORD *)((char *)v797 + result);
                      --v795;
                    }
                    while (v795);
                  }
                  ++v782;
                  v790 += v791;
                  v793 += v794;
                }
                while (v782 != v781);
              }
              break;
            case 3:
              v798 = (v85 << 30) - 0x300000000;
              v799 = *a4;
              v800 = *(int *)((char *)*a4 + (v798 >> 30));
              if (v800 >= 1)
              {
                v801 = 0;
                v802 = *a5;
                v803 = v798 >> 29;
                v804 = *(uint64_t *)((char *)*a5 + (v798 >> 29));
                v805 = *a6;
                v806 = *(_QWORD *)(*a6 + v803);
                v807 = v85 << 30;
                v808 = (v85 << 30) - 0x200000000;
                v809 = v808 >> 32;
                v808 >>= 29;
                v810 = *(uint64_t *)((char *)*a5 + v808);
                v811 = *(_QWORD *)(*a6 + v808);
                v812 = (v807 - 0x100000000) >> 32;
                v813 = 4 * v1423;
                v814 = 4 * v806;
                v815 = 4 * v811;
                result = 4 * v1429;
                v816 = 4 * v804;
                v817 = 4 * v810;
                do
                {
                  v818 = v799[v809];
                  if (v818 >= 1)
                  {
                    v819 = 0;
                    v820 = (_QWORD *)*v11;
                    v821 = 4 * *(_QWORD *)(v805 + 8 * v812);
                    v822 = 4 * v802[v812];
                    v823 = result;
                    v824 = v813;
                    do
                    {
                      v825 = v799[v812];
                      if (v825 >= 1)
                      {
                        v826 = (_DWORD *)(v820[19] + v824);
                        v827 = (_DWORD *)(v84[19] + v823);
                        do
                        {
                          *v826 = *v827;
                          v826 = (_DWORD *)((char *)v826 + v821);
                          v827 = (_DWORD *)((char *)v827 + v822);
                          --v825;
                        }
                        while (v825);
                      }
                      ++v819;
                      v824 += v815;
                      v823 += v817;
                    }
                    while (v819 != v818);
                  }
                  ++v801;
                  v813 += v814;
                  result += v816;
                }
                while (v801 != v800);
              }
              break;
            case 4:
              v828 = (v85 << 30) - 0x400000000;
              v829 = *a4;
              v1572 = *(int *)((char *)*a4 + (v828 >> 30));
              if (v1572 >= 1)
              {
                v830 = 0;
                v831 = *a5;
                v832 = v828 >> 29;
                v833 = v85 << 30;
                v834 = *a6;
                v1555 = (v833 - 0x300000000) >> 32;
                v835 = (v833 - 0x300000000) >> 29;
                v836 = *(uint64_t *)((char *)*a5 + v835);
                v837 = *(_QWORD *)(*a6 + v835);
                v838 = (v833 - 0x200000000) >> 32;
                v839 = (v833 - 0x100000000) >> 32;
                v840 = 4 * v1423;
                v1538 = 4 * *(_QWORD *)(*a6 + v832);
                result = 4 * v837;
                v841 = 4 * v1429;
                v1523 = 4 * *(uint64_t *)((char *)*a5 + v832);
                v842 = 4 * v836;
                do
                {
                  v843 = v829[v1555];
                  if (v843 >= 1)
                  {
                    v844 = 0;
                    v845 = 4 * *(_QWORD *)(v834 + 8 * v838);
                    v846 = 4 * v831[v838];
                    v847 = v841;
                    v848 = v840;
                    do
                    {
                      v849 = v829[v838];
                      if (v849 >= 1)
                      {
                        v850 = 0;
                        v851 = (_QWORD *)*v11;
                        v852 = 4 * *(_QWORD *)(v834 + 8 * v839);
                        v853 = 4 * v831[v839];
                        v854 = v847;
                        v855 = v848;
                        do
                        {
                          v856 = v829[v839];
                          if (v856 >= 1)
                          {
                            v857 = (_DWORD *)(v851[19] + v855);
                            v858 = (_DWORD *)(v84[19] + v854);
                            do
                            {
                              *v857 = *v858;
                              v857 = (_DWORD *)((char *)v857 + v852);
                              v858 = (_DWORD *)((char *)v858 + v853);
                              --v856;
                            }
                            while (v856);
                          }
                          ++v850;
                          v855 += v845;
                          v854 += v846;
                        }
                        while (v850 != v849);
                      }
                      ++v844;
                      v848 += result;
                      v847 += v842;
                    }
                    while (v844 != v843);
                  }
                  ++v830;
                  v840 += v1538;
                  v841 += v1523;
                }
                while (v830 != v1572);
              }
              break;
            case 5:
              v859 = (v85 << 30) - 0x500000000;
              v860 = *a4;
              v1476 = *(int *)((char *)*a4 + (v859 >> 30));
              if (v1476 >= 1)
              {
                v1486 = 0;
                v861 = *a5;
                v862 = v859 >> 29;
                v863 = *a6;
                v864 = v85 << 30;
                v865 = (v864 - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v865);
                v1466 = (v864 - 0x400000000) >> 32;
                v866 = *(_QWORD *)(*a6 + v865);
                v1556 = (v864 - 0x300000000) >> 32;
                v867 = (v864 - 0x200000000) >> 32;
                v868 = (v864 - 0x100000000) >> 32;
                v1509 = 4 * v1423;
                v1456 = 4 * *(_QWORD *)(*a6 + v862);
                v1539 = 4 * v866;
                v1497 = 4 * v1429;
                v1447 = 4 * *(uint64_t *)((char *)*a5 + v862);
                v1524 = 4 * result;
                do
                {
                  v1573 = v860[v1466];
                  if (v1573 >= 1)
                  {
                    v869 = 0;
                    v870 = 4 * *(_QWORD *)(v863 + 8 * v1556);
                    v871 = 4 * v861[v1556];
                    v872 = v1497;
                    v873 = v1509;
                    do
                    {
                      v874 = v860[v1556];
                      if (v874 >= 1)
                      {
                        v875 = 0;
                        v876 = 4 * *(_QWORD *)(v863 + 8 * v867);
                        v877 = 4 * v861[v867];
                        v878 = v872;
                        v879 = v873;
                        do
                        {
                          v880 = v860[v867];
                          if (v880 >= 1)
                          {
                            v881 = 0;
                            result = *v11;
                            v882 = 4 * *(_QWORD *)(v863 + 8 * v868);
                            v883 = 4 * v861[v868];
                            v884 = v878;
                            v885 = v879;
                            do
                            {
                              v886 = v860[v868];
                              if (v886 >= 1)
                              {
                                v887 = (_DWORD *)(*(_QWORD *)(result + 152) + v885);
                                v888 = (_DWORD *)(v84[19] + v884);
                                do
                                {
                                  *v887 = *v888;
                                  v887 = (_DWORD *)((char *)v887 + v882);
                                  v888 = (_DWORD *)((char *)v888 + v883);
                                  --v886;
                                }
                                while (v886);
                              }
                              ++v881;
                              v885 += v876;
                              v884 += v877;
                            }
                            while (v881 != v880);
                          }
                          ++v875;
                          v879 += v870;
                          v878 += v871;
                        }
                        while (v875 != v874);
                      }
                      ++v869;
                      v873 += v1539;
                      v872 += v1524;
                    }
                    while (v869 != v1573);
                  }
                  v1509 += v1456;
                  v1497 += v1447;
                  ++v1486;
                }
                while (v1486 != v1476);
              }
              break;
            default:
              v741 = (char *)a4[1];
              LODWORD(v742) = 1;
              v743 = -20;
              do
              {
                v742 = *(int *)&v741[v743] * (uint64_t)(int)v742;
                v743 += 4;
              }
              while (v743);
              v1419 = v84[6];
              if (v1419)
              {
                result = 0;
                v744 = (v85 << 30) - 0x500000000;
                v745 = *a4;
                v1455 = *v8;
                v746 = *a5;
                v1404 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1409 = ((unint64_t)(v741 - (char *)*a4) >> 2) - 1;
                v1400 = v744 >> 32;
                v747 = *a6;
                v1465 = ((v85 << 30) - 0x400000000) >> 32;
                v1554 = ((v85 << 30) - 0x300000000) >> 32;
                v748 = ((v85 << 30) - 0x200000000) >> 32;
                v749 = ((v85 << 30) - 0x100000000) >> 32;
                v1440 = 4 * *(uint64_t *)((char *)*a5 + (v744 >> 29));
                v1446 = 4 * *(_QWORD *)(*a6 + (v744 >> 29));
                v1414 = v742;
                do
                {
                  v750 = v1409;
                  v1435 = result;
                  v751 = 0;
                  if ((v1409 & 0x80000000) != 0)
                  {
                    v752 = v1404;
                  }
                  else
                  {
                    v752 = v1404;
                    do
                    {
                      v753 = ldiv((int)result, v745[v750]);
                      LODWORD(result) = v753.quot;
                      v751 += v746[v750--] * v753.rem;
                    }
                    while (v750 != -1);
                  }
                  v754 = 0;
                  if ((v752 & 0x80000000) == 0)
                  {
                    v755 = v1435;
                    do
                    {
                      v756 = ldiv(v755, *(int *)(v1455 + 4 * v752));
                      v755 = v756.quot;
                      v754 += *(_QWORD *)(v747 + 8 * v752--) * v756.rem;
                    }
                    while (v752 != -1);
                  }
                  v1475 = v745[v1400];
                  if (v1475 >= 1)
                  {
                    v757 = 0;
                    v1508 = 4 * (v754 + v1423);
                    v1537 = 4 * *(_QWORD *)(v747 + 8 * v1465);
                    v1496 = 4 * (v751 + v1429);
                    v1522 = 4 * v746[v1465];
                    do
                    {
                      v1485 = v757;
                      v1571 = v745[v1465];
                      if (v1571 >= 1)
                      {
                        v758 = 0;
                        v759 = 4 * *(_QWORD *)(v747 + 8 * v1554);
                        v760 = 4 * v746[v1554];
                        v762 = v1496;
                        v761 = v1508;
                        do
                        {
                          v763 = v745[v1554];
                          if (v763 >= 1)
                          {
                            v764 = 0;
                            v765 = 4 * *(_QWORD *)(v747 + 8 * v748);
                            v766 = 4 * v746[v748];
                            v767 = v762;
                            v768 = v761;
                            do
                            {
                              v769 = v745[v748];
                              if (v769 >= 1)
                              {
                                v770 = 0;
                                v771 = (_QWORD *)*v11;
                                v772 = 4 * *(_QWORD *)(v747 + 8 * v749);
                                v773 = 4 * v746[v749];
                                v774 = v767;
                                v775 = v768;
                                do
                                {
                                  v776 = v745[v749];
                                  if (v776 >= 1)
                                  {
                                    v777 = (_DWORD *)(v771[19] + v775);
                                    v778 = (_DWORD *)(v84[19] + v774);
                                    do
                                    {
                                      *v777 = *v778;
                                      v777 = (_DWORD *)((char *)v777 + v772);
                                      v778 = (_DWORD *)((char *)v778 + v773);
                                      --v776;
                                    }
                                    while (v776);
                                  }
                                  ++v770;
                                  v775 += v765;
                                  v774 += v766;
                                }
                                while (v770 != v769);
                              }
                              ++v764;
                              v768 += v759;
                              v767 += v760;
                            }
                            while (v764 != v763);
                          }
                          ++v758;
                          v761 += v1537;
                          v762 += v1522;
                        }
                        while (v758 != v1571);
                      }
                      v757 = v1485 + 1;
                      v1508 += v1446;
                      v1496 += v1440;
                    }
                    while (v1485 + 1 != v1475);
                  }
                  result = v1435 + v1414;
                }
                while (v1419 > v1435 + v1414);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 3:
      switch(a3)
      {
        case 0:
          if (v8[6])
          {
            v20 = 0;
            v21 = **(_DWORD **)(*(_QWORD *)result + 152);
            v22 = v8[19];
            do
              *(_BYTE *)(v22 + v20++) = v21;
            while (*(_QWORD *)(*(_QWORD *)a2 + 48) > v20);
          }
          break;
        case 1:
          v95 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v95)
          {
            v96 = *(int **)(*(_QWORD *)result + 152);
            v97 = (_BYTE *)v8[19];
            v98 = 4 * v95;
            do
            {
              v99 = *v96++;
              *v97++ = v99;
              v98 -= 4;
            }
            while (v98);
          }
          break;
        case 2:
          v100 = *a7;
          v101 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              if (**a4 >= 1)
              {
                v102 = 0;
                v103 = *(_QWORD *)(v101 + 152);
                v104 = v8[19];
                do
                {
                  *(_BYTE *)(v104 + v102) = *(_DWORD *)(v103 + 4 * v100);
                  v100 += **a5;
                  ++v102;
                }
                while (**a4 > (int)v102);
              }
              break;
            case 2:
              v344 = *a4;
              v345 = **a4;
              if (v345 >= 1)
              {
                v346 = 0;
                v347 = 0;
                v348 = *(_QWORD *)(v101 + 152);
                v349 = v8[19];
                do
                {
                  v350 = v344[1];
                  if (v350 < 1)
                  {
                    v351 = *a5;
                    v352 = (*a5)[1];
                  }
                  else
                  {
                    result = 0;
                    do
                    {
                      *(_BYTE *)(v349 + v347 + result) = *(_DWORD *)(v348 + 4 * v100);
                      v351 = *a5;
                      v352 = (*a5)[1];
                      v100 += v352;
                      v344 = *a4;
                      v350 = (*a4)[1];
                      ++result;
                    }
                    while ((int)result < v350);
                    v345 = *v344;
                    v347 += result;
                  }
                  v100 = *v351 + v100 - v352 * v350;
                  ++v346;
                }
                while (v346 < v345);
              }
              break;
            case 3:
              v353 = *a4;
              v354 = **a4;
              if (v354 >= 1)
              {
                v355 = 0;
                v356 = 0;
                v357 = *(_QWORD *)(v101 + 152);
                v358 = v8[19];
                do
                {
                  v359 = v353[1];
                  if (v359 < 1)
                  {
                    v363 = *a5;
                    v364 = (*a5)[1];
                  }
                  else
                  {
                    for (m = 0; m < v359; ++m)
                    {
                      v361 = v353[2];
                      if (v361 < 1)
                      {
                        v363 = *a5;
                        result = (*a5)[2];
                      }
                      else
                      {
                        v362 = 0;
                        do
                        {
                          *(_BYTE *)(v358 + v356 + v362) = *(_DWORD *)(v357 + 4 * v100);
                          v363 = *a5;
                          result = (*a5)[2];
                          v100 += result;
                          v353 = *a4;
                          v361 = (*a4)[2];
                          ++v362;
                        }
                        while ((int)v362 < v361);
                        v356 += v362;
                      }
                      v364 = v363[1];
                      v100 = v364 + v100 - result * v361;
                      v359 = v353[1];
                    }
                    v354 = *v353;
                  }
                  v100 = *v363 + v100 - v364 * v359;
                  ++v355;
                }
                while (v355 < v354);
              }
              break;
            case 4:
              v365 = *a4;
              v366 = **a4;
              if (v366 >= 1)
              {
                v367 = 0;
                v368 = 0;
                v369 = *(_QWORD *)(v101 + 152);
                v370 = v8[19];
                do
                {
                  v371 = v365[1];
                  if (v371 < 1)
                  {
                    v377 = *a5;
                    v379 = (*a5)[1];
                  }
                  else
                  {
                    for (n = 0; n < v371; ++n)
                    {
                      v373 = v365[2];
                      if (v373 < 1)
                      {
                        v377 = *a5;
                        v378 = (*a5)[2];
                      }
                      else
                      {
                        for (ii = 0; ii < v373; ++ii)
                        {
                          v375 = v365[3];
                          if (v375 < 1)
                          {
                            v377 = *a5;
                            result = (*a5)[3];
                          }
                          else
                          {
                            v376 = 0;
                            do
                            {
                              *(_BYTE *)(v370 + v368 + v376) = *(_DWORD *)(v369 + 4 * v100);
                              v377 = *a5;
                              result = (*a5)[3];
                              v100 += result;
                              v365 = *a4;
                              v375 = (*a4)[3];
                              ++v376;
                            }
                            while ((int)v376 < v375);
                            v368 += v376;
                          }
                          v378 = v377[2];
                          v100 = v378 + v100 - result * v375;
                          v373 = v365[2];
                        }
                      }
                      v379 = v377[1];
                      v100 = v379 + v100 - v378 * v373;
                      v371 = v365[1];
                    }
                    v366 = *v365;
                  }
                  v100 = *v377 + v100 - v379 * v371;
                  ++v367;
                }
                while (v367 < v366);
              }
              break;
            default:
              if (v8[6])
              {
                v335 = 0;
                v336 = *(_QWORD *)(v101 + 152) + 4 * v100;
                v337 = v8[19];
                do
                {
                  v338 = *a4;
                  v339 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v340 = 0;
                  v341 = (v339 - 1);
                  if ((int)v339 - 1 >= 0)
                  {
                    v342 = *a5;
                    LODWORD(result) = v335;
                    do
                    {
                      v343 = ldiv((int)result, v338[v341]);
                      result = v343.quot;
                      v340 += v342[v341--] * v343.rem;
                    }
                    while (v341 != -1);
                  }
                  *(_BYTE *)(v337 + v335++) = *(_DWORD *)(v336 + 4 * v340);
                }
                while (v335 < *(_QWORD *)(*v11 + 48));
              }
              break;
          }
          break;
        case 3:
          v1567 = *a7;
          v105 = *a8;
          v106 = *(_QWORD **)result;
          v107 = *(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result;
          switch(v107 >> 2)
          {
            case 1:
              v108 = (v107 << 30) - 0x100000000;
              v109 = *(int *)((char *)*a4 + (v108 >> 30));
              if (v109 >= 1)
              {
                v110 = v108 >> 29;
                v111 = *(uint64_t *)((char *)*a5 + v110);
                v112 = *(_QWORD *)(*a6 + v110);
                v113 = (_BYTE *)(v8[19] + v105);
                v114 = (_DWORD *)(v106[19] + 4 * v1567);
                v115 = 4 * v111;
                do
                {
                  *v113 = *v114;
                  v113 += v112;
                  v114 = (_DWORD *)((char *)v114 + v115);
                  --v109;
                }
                while (v109);
              }
              break;
            case 2:
              v911 = (v107 << 30) - 0x200000000;
              v912 = *(int *)((char *)*a4 + (v911 >> 30));
              if (v912 >= 1)
              {
                v913 = 0;
                v914 = v911 >> 29;
                v915 = *(uint64_t *)((char *)*a5 + v914);
                v916 = *(_QWORD *)(*a6 + v914);
                v917 = 4 * v1567;
                v918 = 4 * v915;
                do
                {
                  v919 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                  v920 = *(int *)((char *)*a4 + (v919 >> 30));
                  if (v920 >= 1)
                  {
                    v921 = v919 >> 29;
                    v922 = *(uint64_t *)((char *)*a5 + v921);
                    v923 = *(_QWORD *)(*a6 + v921);
                    v924 = *(_QWORD *)(*(_QWORD *)a2 + 152);
                    v925 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v917);
                    result = 4 * v922;
                    do
                    {
                      *(_BYTE *)(v924 + v105) = *v925;
                      v924 += v923;
                      v925 = (_DWORD *)((char *)v925 + result);
                      --v920;
                    }
                    while (v920);
                  }
                  v105 += v916;
                  ++v913;
                  v917 += v918;
                }
                while (v913 != v912);
              }
              break;
            case 3:
              v926 = (v107 << 30) - 0x300000000;
              v927 = *(int *)((char *)*a4 + (v926 >> 30));
              if (v927 >= 1)
              {
                v928 = 0;
                v929 = v926 >> 29;
                v930 = *(uint64_t *)((char *)*a5 + v929);
                v931 = *(_QWORD *)(*a6 + v929);
                v932 = 4 * v1567;
                v933 = 4 * v930;
                do
                {
                  v934 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x200000000;
                  v935 = *(int *)((char *)*a4 + (v934 >> 30));
                  if (v935 >= 1)
                  {
                    v936 = 0;
                    v937 = v934 >> 29;
                    v938 = *(uint64_t *)((char *)*a5 + v937);
                    v939 = *(_QWORD *)(*a6 + v937);
                    result = 4 * v938;
                    v940 = v932;
                    v941 = v105;
                    do
                    {
                      v942 = ((*(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12) << 30) - 0x100000000;
                      v943 = *(int *)((char *)*a4 + (v942 >> 30));
                      if (v943 >= 1)
                      {
                        v944 = v942 >> 29;
                        v945 = *(uint64_t *)((char *)*a5 + v944);
                        v946 = *(_QWORD *)(*a6 + v944);
                        v947 = *(_QWORD *)(*v11 + 152);
                        v948 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 152) + v940);
                        v949 = 4 * v945;
                        do
                        {
                          *(_BYTE *)(v947 + v941) = *v948;
                          v947 += v946;
                          v948 = (_DWORD *)((char *)v948 + v949);
                          --v943;
                        }
                        while (v943);
                      }
                      v941 += v939;
                      ++v936;
                      v940 += result;
                    }
                    while (v936 != v935);
                  }
                  v105 += v931;
                  ++v928;
                  v932 += v933;
                }
                while (v928 != v927);
              }
              break;
            case 4:
LABEL_552:
              break;
            case 5:
              v950 = (v107 << 30) - 0x500000000;
              v951 = *(int *)((char *)*a4 + (v950 >> 30));
              if (v951 >= 1)
              {
                v952 = v950 >> 29;
                v953 = *(uint64_t *)((char *)*a5 + v952);
                v954 = *(_QWORD *)(*a6 + v952);
                do
                {
                  v1567 += v953;
                  v105 += v954;
                  --v951;
                }
                while (v951);
              }
              break;
            default:
              LODWORD(v889) = 1;
              v890 = 0x3FFFFFFFFFFFFFFBLL;
              do
                v889 = a4[1][v890++] * (uint64_t)(int)v889;
              while (v890 * 4);
              if (v106[6])
              {
                result = 0;
                v1498 = *a8;
                v1510 = v889;
                do
                {
                  v891 = *a4;
                  v892 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 2;
                  v893 = (v892 - 1);
                  v1525 = v106;
                  v1540 = result;
                  v894 = 0;
                  if ((int)v892 - 1 >= 0)
                  {
                    v895 = *a5;
                    do
                    {
                      v896 = ldiv((int)result, v891[v893]);
                      LODWORD(result) = v896.quot;
                      v894 += v895[v893--] * v896.rem;
                    }
                    while (v893 != -1);
                  }
                  v897 = *(_QWORD *)*v11;
                  v898 = (unint64_t)(*(_QWORD *)(*v11 + 8) - v897) >> 2;
                  v899 = *a6;
                  v900 = 0;
                  v901 = (v898 - 1);
                  if ((int)v898 - 1 >= 0)
                  {
                    v902 = v1540;
                    do
                    {
                      v903 = ldiv(v902, *(int *)(v897 + 4 * v901));
                      v902 = v903.quot;
                      v900 += *(_QWORD *)(v899 + 8 * v901--) * v903.rem;
                    }
                    while (v901 != -1);
                  }
                  v106 = v1525;
                  v904 = ((v106[1] - *v106) << 30) - 0x500000000;
                  v905 = *(int *)((char *)v891 + (v904 >> 30));
                  if (v905 >= 1)
                  {
                    v906 = v894 + v1567;
                    v907 = v904 >> 29;
                    v908 = *(uint64_t *)((char *)*a5 + v907);
                    v909 = *(_QWORD *)(v899 + v907);
                    v910 = v900 + v1498;
                    do
                    {
                      v906 += v908;
                      v910 += v909;
                      --v905;
                    }
                    while (v905);
                    v106 = *(_QWORD **)v12;
                  }
                  result = v1540 + v1510;
                }
                while (v106[6] > (unint64_t)(v1540 + v1510));
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 4:
      switch(a3)
      {
        case 0:
          v23 = v8[6];
          if (v23)
          {
            v24 = **(_DWORD **)(*(_QWORD *)result + 152);
            v25 = (_DWORD *)v8[19];
            do
            {
              *v25++ = v24;
              --v23;
            }
            while (v23);
          }
          break;
        case 1:
LABEL_35:
          v32 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v32)
            result = (uint64_t)memmove((void *)v8[19], *(const void **)(*(_QWORD *)result + 152), 4 * v32);
          break;
        case 2:
          v116 = *a7;
          v117 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v118 = *a4;
              if (**a4 >= 1)
              {
                v119 = 0;
                v120 = *(_QWORD *)(v117 + 152);
                v121 = v8[19];
                v122 = **a5;
                v123 = (_DWORD *)(v120 + 4 * v116);
                do
                {
                  *(_DWORD *)(v121 + 4 * v119) = *v123;
                  v123 += v122;
                  ++v119;
                }
                while (*v118 > (int)v119);
              }
              break;
            case 2:
              v390 = *a4;
              v391 = **a4;
              if (v391 >= 1)
              {
                v392 = 0;
                v393 = 0;
                v394 = *(_QWORD *)(v117 + 152);
                v395 = v8[19];
                v396 = **a5;
                v397 = (*a5)[1];
                v398 = v390[1];
                do
                {
                  if (v398 >= 1)
                  {
                    v399 = 0;
                    do
                    {
                      *(_DWORD *)(v395 + 4 * v393 + 4 * v399) = *(_DWORD *)(v394 + 4 * v116);
                      v116 += v397;
                      v398 = v390[1];
                      ++v399;
                    }
                    while ((int)v399 < v398);
                    v391 = *v390;
                    v393 += v399;
                  }
                  result = v398;
                  v116 = v116 + v396 - v397 * v398;
                  ++v392;
                }
                while (v392 < v391);
              }
              break;
            case 3:
              v400 = *a4;
              result = **a4;
              if ((int)result >= 1)
              {
                v401 = 0;
                v402 = 0;
                v403 = *(_QWORD *)(v117 + 152);
                v404 = v8[19];
                v405 = *a5;
                v406 = **a5;
                v407 = (*a5)[1];
                v408 = v400[1];
                do
                {
                  if (v408 >= 1)
                  {
                    v409 = 0;
                    v410 = *a5;
                    v411 = v405[2];
                    v412 = v400[2];
                    do
                    {
                      if (v412 >= 1)
                      {
                        v413 = 0;
                        v414 = v410[2];
                        do
                        {
                          *(_DWORD *)(v404 + 4 * v402 + 4 * v413) = *(_DWORD *)(v403 + 4 * v116);
                          v116 += v414;
                          v412 = v400[2];
                          ++v413;
                        }
                        while ((int)v413 < v412);
                        v408 = v400[1];
                        v402 += v413;
                      }
                      v116 = v116 + v407 - v411 * v412;
                      ++v409;
                    }
                    while (v409 < v408);
                    result = *v400;
                  }
                  v116 = v116 + v406 - v407 * v408;
                  ++v401;
                }
                while (v401 < (int)result);
              }
              break;
            case 4:
              v415 = *a4;
              v416 = **a4;
              if (v416 >= 1)
              {
                v417 = 0;
                v418 = 0;
                v419 = *(_QWORD *)(v117 + 152);
                v420 = v8[19];
                v421 = *a5;
                v422 = **a5;
                v423 = (*a5)[1];
                v424 = v415[1];
                do
                {
                  if (v424 >= 1)
                  {
                    v425 = 0;
                    v426 = *a5;
                    v427 = v421[2];
                    v428 = v415[2];
                    do
                    {
                      if (v428 >= 1)
                      {
                        v429 = 0;
                        v430 = *a5;
                        v431 = v426[2];
                        v432 = v426[3];
                        v433 = v415[3];
                        do
                        {
                          if (v433 >= 1)
                          {
                            v434 = 0;
                            v435 = v430[3];
                            do
                            {
                              *(_DWORD *)(v420 + 4 * v418 + 4 * v434) = *(_DWORD *)(v419 + 4 * v116);
                              v116 += v435;
                              v433 = v415[3];
                              ++v434;
                            }
                            while ((int)v434 < v433);
                            v428 = v415[2];
                            v418 += v434;
                          }
                          v116 = v116 + v431 - v432 * v433;
                          ++v429;
                        }
                        while (v429 < v428);
                        v424 = v415[1];
                      }
                      v116 = v116 + v423 - v427 * v428;
                      ++v425;
                    }
                    while (v425 < v424);
                    v416 = *v415;
                  }
                  result = v424;
                  v116 = v116 + v422 - v423 * v424;
                  ++v417;
                }
                while (v417 < v416);
              }
              break;
            default:
              v380 = v8[6];
              if (v380)
              {
                v381 = 0;
                v382 = *(_QWORD *)(v117 + 152) + 4 * v116;
                v383 = v8[19];
                v384 = *a4;
                v385 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v386 = *a5;
                do
                {
                  v387 = 0;
                  if ((v385 & 0x80000000) == 0)
                  {
                    v388 = v385;
                    LODWORD(result) = v381;
                    do
                    {
                      v389 = ldiv((int)result, v384[v388]);
                      result = v389.quot;
                      v387 += v386[v388--] * v389.rem;
                    }
                    while (v388 != -1);
                  }
                  *(_DWORD *)(v383 + 4 * v381++) = *(_DWORD *)(v382 + 4 * v387);
                }
                while (v381 != v380);
              }
              break;
          }
          break;
        case 3:
          v1424 = *a8;
          v1430 = *a7;
          v124 = *(_QWORD **)result;
          v125 = v124[1] - *v124;
          switch(v125 >> 2)
          {
            case 1:
              v126 = (v125 << 30) - 0x100000000;
              v127 = *(int *)((char *)*a4 + (v126 >> 30));
              if (v127 >= 1)
              {
                v128 = v126 >> 29;
                v129 = *(uint64_t *)((char *)*a5 + v128);
                v130 = *(_QWORD *)(*a6 + v128);
                v131 = (_DWORD *)(v8[19] + 4 * v1424);
                v132 = (_DWORD *)(v124[19] + 4 * v1430);
                v133 = 4 * v130;
                v134 = 4 * v129;
                do
                {
                  *v131 = *v132;
                  v131 = (_DWORD *)((char *)v131 + v133);
                  v132 = (_DWORD *)((char *)v132 + v134);
                  --v127;
                }
                while (v127);
              }
              break;
            case 2:
              v993 = (v125 << 30) - 0x200000000;
              v994 = *a4;
              v995 = *(int *)((char *)*a4 + (v993 >> 30));
              if (v995 >= 1)
              {
                v996 = 0;
                v997 = v993 >> 29;
                v998 = *(uint64_t *)((char *)*a5 + v997);
                v999 = *(_QWORD *)(*a6 + v997);
                v1000 = (v125 << 30) - 0x100000000;
                v1001 = *(uint64_t *)((char *)*a5 + (v1000 >> 29));
                v1002 = *(_QWORD *)(*a6 + (v1000 >> 29));
                v1003 = v1000 >> 32;
                v1004 = 4 * v1424;
                v1005 = 4 * v999;
                v1006 = 4 * v1002;
                v1007 = 4 * v1430;
                v1008 = 4 * v998;
                result = 4 * v1001;
                do
                {
                  v1009 = v994[v1003];
                  if (v1009 >= 1)
                  {
                    v1010 = (_DWORD *)(v8[19] + v1004);
                    v1011 = (_DWORD *)(v124[19] + v1007);
                    do
                    {
                      *v1010 = *v1011;
                      v1010 = (_DWORD *)((char *)v1010 + v1006);
                      v1011 = (_DWORD *)((char *)v1011 + result);
                      --v1009;
                    }
                    while (v1009);
                  }
                  ++v996;
                  v1004 += v1005;
                  v1007 += v1008;
                }
                while (v996 != v995);
              }
              break;
            case 3:
              v1012 = (v125 << 30) - 0x300000000;
              v1013 = *a4;
              v1014 = *(int *)((char *)*a4 + (v1012 >> 30));
              if (v1014 >= 1)
              {
                v1015 = 0;
                v1016 = *a5;
                v1017 = v1012 >> 29;
                v1018 = *(uint64_t *)((char *)*a5 + (v1012 >> 29));
                v1019 = *a6;
                v1020 = *(_QWORD *)(*a6 + v1017);
                v1021 = v125 << 30;
                v1022 = (v125 << 30) - 0x200000000;
                v1023 = v1022 >> 32;
                v1022 >>= 29;
                v1024 = *(uint64_t *)((char *)*a5 + v1022);
                v1025 = *(_QWORD *)(*a6 + v1022);
                v1026 = (v1021 - 0x100000000) >> 32;
                v1027 = 4 * v1424;
                v1028 = 4 * v1020;
                v1029 = 4 * v1025;
                result = 4 * v1430;
                v1030 = 4 * v1018;
                v1031 = 4 * v1024;
                do
                {
                  v1032 = v1013[v1023];
                  if (v1032 >= 1)
                  {
                    v1033 = 0;
                    v1034 = (_QWORD *)*v11;
                    v1035 = 4 * *(_QWORD *)(v1019 + 8 * v1026);
                    v1036 = 4 * v1016[v1026];
                    v1037 = result;
                    v1038 = v1027;
                    do
                    {
                      v1039 = v1013[v1026];
                      if (v1039 >= 1)
                      {
                        v1040 = (_DWORD *)(v1034[19] + v1038);
                        v1041 = (_DWORD *)(v124[19] + v1037);
                        do
                        {
                          *v1040 = *v1041;
                          v1040 = (_DWORD *)((char *)v1040 + v1035);
                          v1041 = (_DWORD *)((char *)v1041 + v1036);
                          --v1039;
                        }
                        while (v1039);
                      }
                      ++v1033;
                      v1038 += v1029;
                      v1037 += v1031;
                    }
                    while (v1033 != v1032);
                  }
                  ++v1015;
                  v1027 += v1028;
                  result += v1030;
                }
                while (v1015 != v1014);
              }
              break;
            case 4:
              v1042 = (v125 << 30) - 0x400000000;
              v1043 = *a4;
              v1575 = *(int *)((char *)*a4 + (v1042 >> 30));
              if (v1575 >= 1)
              {
                v1044 = 0;
                v1045 = *a5;
                v1046 = v1042 >> 29;
                v1047 = v125 << 30;
                v1048 = *a6;
                v1558 = (v1047 - 0x300000000) >> 32;
                v1049 = (v1047 - 0x300000000) >> 29;
                v1050 = *(uint64_t *)((char *)*a5 + v1049);
                v1051 = *(_QWORD *)(*a6 + v1049);
                v1052 = (v1047 - 0x200000000) >> 32;
                v1053 = (v1047 - 0x100000000) >> 32;
                v1054 = 4 * v1424;
                v1542 = 4 * *(_QWORD *)(*a6 + v1046);
                result = 4 * v1051;
                v1055 = 4 * v1430;
                v1527 = 4 * *(uint64_t *)((char *)*a5 + v1046);
                v1056 = 4 * v1050;
                do
                {
                  v1057 = v1043[v1558];
                  if (v1057 >= 1)
                  {
                    v1058 = 0;
                    v1059 = 4 * *(_QWORD *)(v1048 + 8 * v1052);
                    v1060 = 4 * v1045[v1052];
                    v1061 = v1055;
                    v1062 = v1054;
                    do
                    {
                      v1063 = v1043[v1052];
                      if (v1063 >= 1)
                      {
                        v1064 = 0;
                        v1065 = (_QWORD *)*v11;
                        v1066 = 4 * *(_QWORD *)(v1048 + 8 * v1053);
                        v1067 = 4 * v1045[v1053];
                        v1068 = v1061;
                        v1069 = v1062;
                        do
                        {
                          v1070 = v1043[v1053];
                          if (v1070 >= 1)
                          {
                            v1071 = (_DWORD *)(v1065[19] + v1069);
                            v1072 = (_DWORD *)(v124[19] + v1068);
                            do
                            {
                              *v1071 = *v1072;
                              v1071 = (_DWORD *)((char *)v1071 + v1066);
                              v1072 = (_DWORD *)((char *)v1072 + v1067);
                              --v1070;
                            }
                            while (v1070);
                          }
                          ++v1064;
                          v1069 += v1059;
                          v1068 += v1060;
                        }
                        while (v1064 != v1063);
                      }
                      ++v1058;
                      v1062 += result;
                      v1061 += v1056;
                    }
                    while (v1058 != v1057);
                  }
                  ++v1044;
                  v1054 += v1542;
                  v1055 += v1527;
                }
                while (v1044 != v1575);
              }
              break;
            case 5:
              v1073 = (v125 << 30) - 0x500000000;
              v1074 = *a4;
              v1478 = *(int *)((char *)*a4 + (v1073 >> 30));
              if (v1478 >= 1)
              {
                v1488 = 0;
                v1075 = *a5;
                v1076 = v1073 >> 29;
                v1077 = *a6;
                v1078 = v125 << 30;
                v1079 = (v1078 - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v1079);
                v1468 = (v1078 - 0x400000000) >> 32;
                v1080 = *(_QWORD *)(*a6 + v1079);
                v1559 = (v1078 - 0x300000000) >> 32;
                v1081 = (v1078 - 0x200000000) >> 32;
                v1082 = (v1078 - 0x100000000) >> 32;
                v1512 = 4 * v1424;
                v1458 = 4 * *(_QWORD *)(*a6 + v1076);
                v1543 = 4 * v1080;
                v1500 = 4 * v1430;
                v1449 = 4 * *(uint64_t *)((char *)*a5 + v1076);
                v1528 = 4 * result;
                do
                {
                  v1576 = v1074[v1468];
                  if (v1576 >= 1)
                  {
                    v1083 = 0;
                    v1084 = 4 * *(_QWORD *)(v1077 + 8 * v1559);
                    v1085 = 4 * v1075[v1559];
                    v1086 = v1500;
                    v1087 = v1512;
                    do
                    {
                      v1088 = v1074[v1559];
                      if (v1088 >= 1)
                      {
                        v1089 = 0;
                        v1090 = 4 * *(_QWORD *)(v1077 + 8 * v1081);
                        v1091 = 4 * v1075[v1081];
                        v1092 = v1086;
                        v1093 = v1087;
                        do
                        {
                          v1094 = v1074[v1081];
                          if (v1094 >= 1)
                          {
                            v1095 = 0;
                            result = *v11;
                            v1096 = 4 * *(_QWORD *)(v1077 + 8 * v1082);
                            v1097 = 4 * v1075[v1082];
                            v1098 = v1092;
                            v1099 = v1093;
                            do
                            {
                              v1100 = v1074[v1082];
                              if (v1100 >= 1)
                              {
                                v1101 = (_DWORD *)(*(_QWORD *)(result + 152) + v1099);
                                v1102 = (_DWORD *)(v124[19] + v1098);
                                do
                                {
                                  *v1101 = *v1102;
                                  v1101 = (_DWORD *)((char *)v1101 + v1096);
                                  v1102 = (_DWORD *)((char *)v1102 + v1097);
                                  --v1100;
                                }
                                while (v1100);
                              }
                              ++v1095;
                              v1099 += v1090;
                              v1098 += v1091;
                            }
                            while (v1095 != v1094);
                          }
                          ++v1089;
                          v1093 += v1084;
                          v1092 += v1085;
                        }
                        while (v1089 != v1088);
                      }
                      ++v1083;
                      v1087 += v1543;
                      v1086 += v1528;
                    }
                    while (v1083 != v1576);
                  }
                  v1512 += v1458;
                  v1500 += v1449;
                  ++v1488;
                }
                while (v1488 != v1478);
              }
              break;
            default:
              v955 = (char *)a4[1];
              LODWORD(v956) = 1;
              v957 = -20;
              do
              {
                v956 = *(int *)&v955[v957] * (uint64_t)(int)v956;
                v957 += 4;
              }
              while (v957);
              v1420 = v124[6];
              if (v1420)
              {
                result = 0;
                v958 = (v125 << 30) - 0x500000000;
                v959 = *a4;
                v1457 = *v8;
                v960 = *a5;
                v1405 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1410 = ((unint64_t)(v955 - (char *)*a4) >> 2) - 1;
                v1401 = v958 >> 32;
                v961 = *a6;
                v1467 = ((v125 << 30) - 0x400000000) >> 32;
                v1557 = ((v125 << 30) - 0x300000000) >> 32;
                v962 = ((v125 << 30) - 0x200000000) >> 32;
                v963 = ((v125 << 30) - 0x100000000) >> 32;
                v1441 = 4 * *(uint64_t *)((char *)*a5 + (v958 >> 29));
                v1448 = 4 * *(_QWORD *)(*a6 + (v958 >> 29));
                v1415 = v956;
                do
                {
                  v964 = v1410;
                  v1436 = result;
                  v965 = 0;
                  if ((v1410 & 0x80000000) != 0)
                  {
                    v966 = v1405;
                  }
                  else
                  {
                    v966 = v1405;
                    do
                    {
                      v967 = ldiv((int)result, v959[v964]);
                      LODWORD(result) = v967.quot;
                      v965 += v960[v964--] * v967.rem;
                    }
                    while (v964 != -1);
                  }
                  v968 = 0;
                  if ((v966 & 0x80000000) == 0)
                  {
                    v969 = v1436;
                    do
                    {
                      v970 = ldiv(v969, *(int *)(v1457 + 4 * v966));
                      v969 = v970.quot;
                      v968 += *(_QWORD *)(v961 + 8 * v966--) * v970.rem;
                    }
                    while (v966 != -1);
                  }
                  v1477 = v959[v1401];
                  if (v1477 >= 1)
                  {
                    v971 = 0;
                    v1511 = 4 * (v968 + v1424);
                    v1541 = 4 * *(_QWORD *)(v961 + 8 * v1467);
                    v1499 = 4 * (v965 + v1430);
                    v1526 = 4 * v960[v1467];
                    do
                    {
                      v1487 = v971;
                      v1574 = v959[v1467];
                      if (v1574 >= 1)
                      {
                        v972 = 0;
                        v973 = 4 * *(_QWORD *)(v961 + 8 * v1557);
                        v974 = 4 * v960[v1557];
                        v976 = v1499;
                        v975 = v1511;
                        do
                        {
                          v977 = v959[v1557];
                          if (v977 >= 1)
                          {
                            v978 = 0;
                            v979 = 4 * *(_QWORD *)(v961 + 8 * v962);
                            v980 = 4 * v960[v962];
                            v981 = v976;
                            v982 = v975;
                            do
                            {
                              v983 = v959[v962];
                              if (v983 >= 1)
                              {
                                v984 = 0;
                                v985 = (_QWORD *)*v11;
                                v986 = 4 * *(_QWORD *)(v961 + 8 * v963);
                                v987 = 4 * v960[v963];
                                v988 = v981;
                                v989 = v982;
                                do
                                {
                                  v990 = v959[v963];
                                  if (v990 >= 1)
                                  {
                                    v991 = (_DWORD *)(v985[19] + v989);
                                    v992 = (_DWORD *)(v124[19] + v988);
                                    do
                                    {
                                      *v991 = *v992;
                                      v991 = (_DWORD *)((char *)v991 + v986);
                                      v992 = (_DWORD *)((char *)v992 + v987);
                                      --v990;
                                    }
                                    while (v990);
                                  }
                                  ++v984;
                                  v989 += v979;
                                  v988 += v980;
                                }
                                while (v984 != v983);
                              }
                              ++v978;
                              v982 += v973;
                              v981 += v974;
                            }
                            while (v978 != v977);
                          }
                          ++v972;
                          v975 += v1541;
                          v976 += v1526;
                        }
                        while (v972 != v1574);
                      }
                      v971 = v1487 + 1;
                      v1511 += v1448;
                      v1499 += v1441;
                    }
                    while (v1487 + 1 != v1477);
                  }
                  result = v1436 + v1415;
                }
                while (v1420 > v1436 + v1415);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 5:
      switch(a3)
      {
        case 0:
          v26 = v8[6];
          if (v26)
          {
            v27 = **(int **)(*(_QWORD *)result + 152);
            v28 = (_QWORD *)v8[19];
            do
            {
              *v28++ = v27;
              --v26;
            }
            while (v26);
          }
          break;
        case 1:
          v135 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v135)
          {
            v136 = *(int **)(*(_QWORD *)result + 152);
            v137 = (_QWORD *)v8[19];
            v138 = 4 * v135;
            do
            {
              v139 = *v136++;
              *v137++ = v139;
              v138 -= 4;
            }
            while (v138);
          }
          break;
        case 2:
          v140 = *a7;
          v141 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v142 = **a4;
              if ((int)v142 >= 1)
              {
                v143 = *(_QWORD *)(v141 + 152);
                v144 = (_QWORD *)v8[19];
                v145 = *a5;
                do
                {
                  *v144++ = *(int *)(v143 + 4 * v140);
                  v140 += *v145;
                  --v142;
                }
                while (v142);
              }
              break;
            case 2:
              v446 = **a4;
              if (v446 >= 1)
              {
                v447 = 0;
                v448 = 0;
                v449 = *(_QWORD *)(v141 + 152);
                v450 = v8[19];
                v451 = (*a4)[1];
                v452 = *a5;
                do
                {
                  if (v451 <= 0)
                  {
                    v454 = v452[1];
                  }
                  else
                  {
                    v453 = v451;
                    do
                    {
                      *(_QWORD *)(v450 + 8 * v448++) = *(int *)(v449 + 4 * v140);
                      v454 = v452[1];
                      v140 += v454;
                      --v453;
                    }
                    while (v453);
                  }
                  result = *v452;
                  v140 = v140 - v454 * v451 + *v452;
                  ++v447;
                }
                while (v447 != v446);
              }
              break;
            case 3:
              v455 = *a4;
              v456 = **a4;
              if (v456 >= 1)
              {
                v457 = 0;
                v458 = 0;
                v459 = *(_QWORD *)(v141 + 152);
                v460 = v8[19];
                v461 = v455[1];
                v462 = *a5;
                do
                {
                  if ((int)v461 <= 0)
                  {
                    v466 = v462[1];
                  }
                  else
                  {
                    v463 = 0;
                    result = v455[2];
                    v464 = *a5;
                    do
                    {
                      v465 = result;
                      if ((int)result >= 1)
                      {
                        do
                        {
                          *(_QWORD *)(v460 + 8 * v458++) = *(int *)(v459 + 4 * v140);
                          v140 += v464[2];
                          --v465;
                        }
                        while (v465);
                      }
                      v466 = v462[1];
                      v140 = v466 + v140 - v462[2] * (int)result;
                      ++v463;
                    }
                    while (v463 != (_DWORD)v461);
                  }
                  v140 = v140 - v466 * v461 + *v462;
                  ++v457;
                }
                while (v457 != v456);
              }
              break;
            case 4:
              v467 = *a4;
              v468 = **a4;
              if (v468 >= 1)
              {
                v469 = 0;
                v470 = 0;
                v471 = *(_QWORD *)(v141 + 152);
                v472 = v8[19];
                v473 = v467[1];
                v474 = *a5;
                do
                {
                  if ((int)v473 <= 0)
                  {
                    v481 = v474[1];
                  }
                  else
                  {
                    v475 = 0;
                    result = v467[2];
                    v476 = *a5;
                    do
                    {
                      if ((int)result >= 1)
                      {
                        v477 = 0;
                        v478 = v467[3];
                        v479 = *a5;
                        do
                        {
                          v480 = v478;
                          if (v478 >= 1)
                          {
                            do
                            {
                              *(_QWORD *)(v472 + 8 * v470++) = *(int *)(v471 + 4 * v140);
                              v140 += v479[3];
                              --v480;
                            }
                            while (v480);
                          }
                          v140 = v476[2] + v140 - v476[3] * v478;
                          ++v477;
                        }
                        while (v477 != (_DWORD)result);
                      }
                      v481 = v474[1];
                      v140 = v481 + v140 - v474[2] * result;
                      ++v475;
                    }
                    while (v475 != (_DWORD)v473);
                  }
                  v140 = v140 - v481 * v473 + *v474;
                  ++v469;
                }
                while (v469 != v468);
              }
              break;
            default:
              v436 = v8[6];
              if (v436)
              {
                v437 = 0;
                v438 = *(_QWORD *)(v141 + 152) + 4 * v140;
                v439 = v8[19];
                v440 = *a4;
                v441 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v442 = *a5;
                do
                {
                  v443 = 0;
                  if ((v441 & 0x80000000) == 0)
                  {
                    v444 = v441;
                    LODWORD(result) = v437;
                    do
                    {
                      v445 = ldiv((int)result, v440[v444]);
                      result = v445.quot;
                      v443 += v442[v444--] * v445.rem;
                    }
                    while (v444 != -1);
                  }
                  *(_QWORD *)(v439 + 8 * v437++) = *(int *)(v438 + 4 * v443);
                }
                while (v437 != v436);
              }
              break;
          }
          break;
        case 3:
          v1425 = *a8;
          v1431 = *a7;
          v146 = *(_QWORD **)result;
          v147 = v146[1] - *v146;
          switch(v147 >> 2)
          {
            case 1:
              v148 = (v147 << 30) - 0x100000000;
              v149 = *(int *)((char *)*a4 + (v148 >> 30));
              if (v149 >= 1)
              {
                v150 = v148 >> 29;
                v151 = *(uint64_t *)((char *)*a5 + v150);
                v152 = *(_QWORD *)(*a6 + v150);
                v153 = (_QWORD *)(v8[19] + 8 * v1425);
                v154 = (int *)(v146[19] + 4 * v1431);
                v155 = 8 * v152;
                v156 = 4 * v151;
                do
                {
                  *v153 = *v154;
                  v153 = (_QWORD *)((char *)v153 + v155);
                  v154 = (int *)((char *)v154 + v156);
                  --v149;
                }
                while (v149);
              }
              break;
            case 2:
              v1141 = (v147 << 30) - 0x200000000;
              v1142 = *(int *)((char *)*a4 + (v1141 >> 30));
              if (v1142 >= 1)
              {
                v1143 = 0;
                v1144 = v147 << 30;
                v1145 = *a5;
                v1144 -= 0x100000000;
                v1146 = *(int *)((char *)*a4 + (v1144 >> 30));
                v1147 = v1141 >> 29;
                v1148 = *(uint64_t *)((char *)*a5 + (v1141 >> 29));
                v1149 = *a6;
                v1150 = *(_QWORD *)(*a6 + v1147);
                v1151 = v1144 >> 32;
                v1152 = 8 * v1425;
                v1153 = 8 * v1150;
                v1154 = 4 * v1431;
                result = 4 * v1148;
                do
                {
                  if (v1146 >= 1)
                  {
                    v1155 = (_QWORD *)(v8[19] + v1152);
                    v1156 = 8 * *(_QWORD *)(v1149 + 8 * v1151);
                    v1157 = (int *)(v146[19] + v1154);
                    v1158 = 4 * v1145[v1151];
                    v1159 = v1146;
                    do
                    {
                      *v1155 = *v1157;
                      v1155 = (_QWORD *)((char *)v1155 + v1156);
                      v1157 = (int *)((char *)v1157 + v1158);
                      --v1159;
                    }
                    while (v1159);
                  }
                  ++v1143;
                  v1152 += v1153;
                  v1154 += result;
                }
                while (v1143 != v1142);
              }
              break;
            case 3:
              v1160 = (v147 << 30) - 0x300000000;
              v1161 = *a4;
              v1162 = *(int *)((char *)*a4 + (v1160 >> 30));
              if (v1162 >= 1)
              {
                v1163 = 0;
                v1164 = v147 << 30;
                v1165 = *a5;
                v1166 = v1160 >> 29;
                v1167 = *(uint64_t *)((char *)*a5 + (v1160 >> 29));
                v1168 = *a6;
                v1169 = *(_QWORD *)(*a6 + v1166);
                v1170 = v1164 - 0x200000000;
                v1171 = v1164 - 0x100000000;
                v1172 = *(int *)((char *)v1161 + ((v1164 - 0x200000000) >> 30));
                v1173 = v1170 >> 32;
                v1174 = v1171 >> 32;
                v1175 = 8 * v1425;
                v1176 = 8 * v1169;
                result = 4 * v1431;
                v1177 = 4 * v1167;
                do
                {
                  if (v1172 >= 1)
                  {
                    v1178 = 0;
                    v1179 = v1161[v1174];
                    v1180 = (_QWORD *)*v11;
                    v1181 = 8 * *(_QWORD *)(v1168 + 8 * v1173);
                    v1182 = 4 * v1165[v1173];
                    v1183 = result;
                    v1184 = v1175;
                    do
                    {
                      if (v1179 >= 1)
                      {
                        v1185 = (_QWORD *)(v1180[19] + v1184);
                        v1186 = 8 * *(_QWORD *)(v1168 + 8 * v1174);
                        v1187 = (int *)(v146[19] + v1183);
                        v1188 = 4 * v1165[v1174];
                        v1189 = v1179;
                        do
                        {
                          *v1185 = *v1187;
                          v1185 = (_QWORD *)((char *)v1185 + v1186);
                          v1187 = (int *)((char *)v1187 + v1188);
                          --v1189;
                        }
                        while (v1189);
                      }
                      ++v1178;
                      v1184 += v1181;
                      v1183 += v1182;
                    }
                    while (v1178 != v1172);
                  }
                  ++v1163;
                  v1175 += v1176;
                  result += v1177;
                }
                while (v1163 != v1162);
              }
              break;
            case 4:
              v1190 = (v147 << 30) - 0x400000000;
              v1191 = *a4;
              v1545 = *(int *)((char *)*a4 + (v1190 >> 30));
              if (v1545 >= 1)
              {
                v1577 = 0;
                v1192 = v147 << 30;
                v1193 = *a5;
                v1194 = v1190 >> 29;
                result = *(uint64_t *)((char *)*a5 + v1194);
                v1195 = *a6;
                v1514 = (v1192 - 0x300000000) >> 32;
                v1196 = *(int *)((char *)v1191 + ((v1192 - 0x300000000) >> 30));
                v1197 = (v1192 - 0x200000000) >> 32;
                v1198 = (v1192 - 0x100000000) >> 32;
                v1199 = 8 * v1425;
                v1561 = 8 * *(_QWORD *)(*a6 + v1194);
                v1200 = 4 * v1431;
                v1530 = 4 * result;
                do
                {
                  if (v1196 >= 1)
                  {
                    v1201 = 0;
                    v1202 = v1191[v1197];
                    v1203 = 8 * *(_QWORD *)(v1195 + 8 * v1514);
                    v1204 = 4 * v1193[v1514];
                    v1205 = v1200;
                    v1206 = v1199;
                    do
                    {
                      if (v1202 >= 1)
                      {
                        v1207 = 0;
                        result = *(_QWORD *)(v1195 + 8 * v1197);
                        v1208 = v1191[v1198];
                        v1209 = (_QWORD *)*v11;
                        v1210 = 8 * result;
                        v1211 = 4 * v1193[v1197];
                        v1212 = v1205;
                        v1213 = v1206;
                        do
                        {
                          if (v1208 >= 1)
                          {
                            v1214 = (_QWORD *)(v1209[19] + v1213);
                            v1215 = 8 * *(_QWORD *)(v1195 + 8 * v1198);
                            result = v146[19] + v1212;
                            v1216 = 4 * v1193[v1198];
                            v1217 = v1208;
                            do
                            {
                              *v1214 = *(int *)result;
                              v1214 = (_QWORD *)((char *)v1214 + v1215);
                              result += v1216;
                              --v1217;
                            }
                            while (v1217);
                          }
                          ++v1207;
                          v1213 += v1210;
                          v1212 += v1211;
                        }
                        while (v1207 != v1202);
                      }
                      ++v1201;
                      v1206 += v1203;
                      v1205 += v1204;
                    }
                    while (v1201 != v1196);
                  }
                  v1199 += v1561;
                  v1200 += v1530;
                  ++v1577;
                }
                while (v1577 != v1545);
              }
              break;
            case 5:
              v1218 = (v147 << 30) - 0x500000000;
              v1219 = *a4;
              v1470 = *(int *)((char *)*a4 + (v1218 >> 30));
              if (v1470 >= 1)
              {
                v1480 = 0;
                v1220 = v147 << 30;
                v1221 = *a5;
                v1222 = v1218 >> 29;
                v1223 = *a6;
                v1443 = (v1220 - 0x400000000) >> 32;
                v1562 = *(int *)((char *)v1219 + ((v1220 - 0x400000000) >> 30));
                v1224 = (v1220 - 0x200000000) >> 32;
                v1225 = (v1220 - 0x100000000) >> 32;
                v1502 = 8 * v1425;
                v1515 = (v1220 - 0x300000000) >> 32;
                v1490 = 4 * v1431;
                v1451 = 4 * *(uint64_t *)((char *)*a5 + v1222);
                v1460 = 8 * *(_QWORD *)(*a6 + v1222);
                do
                {
                  if (v1562 >= 1)
                  {
                    v1226 = 0;
                    v1227 = v1219[v1515];
                    v1531 = 4 * v1221[v1443];
                    v1546 = 8 * *(_QWORD *)(v1223 + 8 * v1443);
                    v1228 = v1490;
                    result = v1502;
                    do
                    {
                      v1578 = v1226;
                      if (v1227 >= 1)
                      {
                        v1229 = 0;
                        v1230 = v1219[v1224];
                        v1231 = 8 * *(_QWORD *)(v1223 + 8 * v1515);
                        v1232 = 4 * v1221[v1515];
                        v1233 = v1228;
                        v1234 = result;
                        do
                        {
                          if (v1230 >= 1)
                          {
                            v1235 = 0;
                            v1236 = v1219[v1225];
                            v1237 = (_QWORD *)*v11;
                            v1238 = 8 * *(_QWORD *)(v1223 + 8 * v1224);
                            v1239 = 4 * v1221[v1224];
                            v1240 = v1233;
                            v1241 = v1234;
                            do
                            {
                              if (v1236 >= 1)
                              {
                                v1242 = (_QWORD *)(v1237[19] + v1241);
                                v1243 = 8 * *(_QWORD *)(v1223 + 8 * v1225);
                                v1244 = (int *)(v146[19] + v1240);
                                v1245 = 4 * v1221[v1225];
                                v1246 = v1236;
                                do
                                {
                                  *v1242 = *v1244;
                                  v1242 = (_QWORD *)((char *)v1242 + v1243);
                                  v1244 = (int *)((char *)v1244 + v1245);
                                  --v1246;
                                }
                                while (v1246);
                              }
                              ++v1235;
                              v1241 += v1238;
                              v1240 += v1239;
                            }
                            while (v1235 != v1230);
                          }
                          ++v1229;
                          v1234 += v1231;
                          v1233 += v1232;
                        }
                        while (v1229 != v1227);
                      }
                      v1226 = v1578 + 1;
                      result += v1546;
                      v1228 += v1531;
                    }
                    while (v1578 + 1 != v1562);
                  }
                  v1502 += v1460;
                  v1490 += v1451;
                  ++v1480;
                }
                while (v1480 != v1470);
              }
              break;
            default:
              v1103 = (char *)a4[1];
              LODWORD(v1104) = 1;
              v1105 = -20;
              do
              {
                v1104 = *(int *)&v1103[v1105] * (uint64_t)(int)v1104;
                v1105 += 4;
              }
              while (v1105);
              v1421 = v146[6];
              if (v1421)
              {
                v1106 = 0;
                v1107 = (v147 << 30) - 0x500000000;
                v1108 = *a4;
                v1402 = *v8;
                v1109 = *a5;
                v1406 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1411 = ((unint64_t)(v1103 - (char *)*a4) >> 2) - 1;
                v1110 = *a6;
                v1398 = v1107 >> 32;
                v1469 = *(int *)((char *)*a4 + (v1107 >> 30));
                v1442 = ((v147 << 30) - 0x400000000) >> 32;
                v1513 = ((v147 << 30) - 0x300000000) >> 32;
                v1111 = ((v147 << 30) - 0x200000000) >> 32;
                v1112 = ((v147 << 30) - 0x100000000) >> 32;
                v1416 = v1104;
                do
                {
                  v1113 = v1411;
                  if ((v1411 & 0x80000000) != 0)
                  {
                    v1114 = 0;
                    v1115 = v1406;
                  }
                  else
                  {
                    v1114 = 0;
                    LODWORD(result) = v1106;
                    v1115 = v1406;
                    do
                    {
                      v1116 = ldiv((int)result, v1108[v1113]);
                      result = v1116.quot;
                      v1114 += v1109[v1113--] * v1116.rem;
                    }
                    while (v1113 != -1);
                  }
                  v1437 = v1106;
                  v1117 = 0;
                  if ((v1115 & 0x80000000) == 0)
                  {
                    LODWORD(result) = v1106;
                    do
                    {
                      v1118 = ldiv((int)result, *(int *)(v1402 + 4 * v1115));
                      result = v1118.quot;
                      v1117 += *(_QWORD *)(v1110 + 8 * v1115--) * v1118.rem;
                    }
                    while (v1115 != -1);
                  }
                  if (v1469 >= 1)
                  {
                    v1119 = 0;
                    v1560 = v1108[v1442];
                    v1459 = 8 * *(_QWORD *)(v1110 + 8 * v1398);
                    v1489 = 4 * (v1114 + v1431);
                    v1501 = 8 * (v1117 + v1425);
                    v1450 = 4 * v1109[v1398];
                    do
                    {
                      v1479 = v1119;
                      if (v1560 >= 1)
                      {
                        v1120 = 0;
                        v1121 = v1108[v1513];
                        v1529 = 4 * v1109[v1442];
                        v1544 = 8 * *(_QWORD *)(v1110 + 8 * v1442);
                        v1123 = v1489;
                        v1122 = v1501;
                        do
                        {
                          if (v1121 >= 1)
                          {
                            v1124 = 0;
                            v1125 = v1108[v1111];
                            v1126 = 8 * *(_QWORD *)(v1110 + 8 * v1513);
                            v1127 = 4 * v1109[v1513];
                            result = v1123;
                            v1128 = v1122;
                            do
                            {
                              if (v1125 >= 1)
                              {
                                v1129 = 0;
                                v1130 = v1108[v1112];
                                v1131 = *(uint64_t **)a2;
                                v1132 = 8 * *(_QWORD *)(v1110 + 8 * v1111);
                                v1133 = 4 * v1109[v1111];
                                v1134 = result;
                                v1135 = v1128;
                                do
                                {
                                  if (v1130 >= 1)
                                  {
                                    v1136 = (_QWORD *)(v1131[19] + v1135);
                                    v1137 = 8 * *(_QWORD *)(v1110 + 8 * v1112);
                                    v1138 = (int *)(v146[19] + v1134);
                                    v1139 = 4 * v1109[v1112];
                                    v1140 = v1130;
                                    do
                                    {
                                      *v1136 = *v1138;
                                      v1136 = (_QWORD *)((char *)v1136 + v1137);
                                      v1138 = (int *)((char *)v1138 + v1139);
                                      --v1140;
                                    }
                                    while (v1140);
                                  }
                                  ++v1129;
                                  v1135 += v1132;
                                  v1134 += v1133;
                                }
                                while (v1129 != v1125);
                              }
                              ++v1124;
                              v1128 += v1126;
                              result += v1127;
                            }
                            while (v1124 != v1121);
                          }
                          ++v1120;
                          v1122 += v1544;
                          v1123 += v1529;
                        }
                        while (v1120 != v1560);
                      }
                      v1119 = v1479 + 1;
                      v1501 += v1459;
                      v1489 += v1450;
                    }
                    while (v1479 + 1 != v1469);
                  }
                  v1106 += v1416;
                }
                while (v1421 > v1437 + v1416);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    case 6:
      switch(a3)
      {
        case 0:
          v29 = v8[6];
          if (v29)
          {
            v30 = (float)**(int **)(*(_QWORD *)result + 152);
            v31 = (float *)v8[19];
            do
            {
              *v31++ = v30;
              --v29;
            }
            while (v29);
          }
          break;
        case 1:
          v157 = *(_QWORD *)(*(_QWORD *)result + 160);
          if (v157)
          {
            v158 = *(int **)(*(_QWORD *)result + 152);
            v159 = (float *)v8[19];
            v160 = 4 * v157;
            do
            {
              v161 = *v158++;
              *v159++ = (float)v161;
              v160 -= 4;
            }
            while (v160);
          }
          break;
        case 2:
          v162 = *a7;
          v163 = *(_QWORD *)result;
          switch((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 8) - **(_QWORD **)result) >> 2)
          {
            case 1:
              v164 = **a4;
              if ((int)v164 >= 1)
              {
                v165 = (float *)v8[19];
                v166 = **a5;
                v167 = (int *)(*(_QWORD *)(v163 + 152) + 4 * v162);
                do
                {
                  *v165++ = (float)*v167;
                  v167 += v166;
                  --v164;
                }
                while (v164);
              }
              break;
            case 2:
              v492 = **a4;
              if (v492 >= 1)
              {
                v493 = 0;
                v494 = 0;
                v495 = *(_QWORD *)(v163 + 152);
                v496 = v8[19];
                v497 = (*a4)[1];
                v498 = (*a5)[1];
                v499 = **a5 - v498 * v497;
                do
                {
                  v500 = v497;
                  if ((int)v497 >= 1)
                  {
                    do
                    {
                      *(float *)(v496 + 4 * v494++) = (float)*(int *)(v495 + 4 * v162);
                      v162 += v498;
                      --v500;
                    }
                    while (v500);
                  }
                  v162 += v499;
                  ++v493;
                }
                while (v493 != v492);
              }
              break;
            case 3:
              v501 = *a4;
              v502 = **a4;
              if (v502 >= 1)
              {
                v503 = 0;
                result = 0;
                v504 = *(_QWORD *)(v163 + 152);
                v505 = v8[19];
                v506 = v501[1];
                v507 = *a5;
                v508 = (*a5)[1];
                v509 = **a5 - v508 * v506;
                do
                {
                  if ((int)v506 < 1)
                  {
                    v516 = result;
                  }
                  else
                  {
                    v510 = 0;
                    v511 = v501[2];
                    v512 = *a5;
                    v513 = v508 - v507[2] * v511;
                    do
                    {
                      if ((int)v511 < 1)
                      {
                        v516 = result;
                      }
                      else
                      {
                        v514 = v512[2];
                        v515 = v511;
                        do
                        {
                          v516 = result + 1;
                          *(float *)(v505 + 4 * result) = (float)*(int *)(v504 + 4 * v162);
                          v162 += v514;
                          ++result;
                          --v515;
                        }
                        while (v515);
                      }
                      v162 += v513;
                      ++v510;
                      result = v516;
                    }
                    while (v510 != (_DWORD)v506);
                  }
                  v162 += v509;
                  ++v503;
                  result = v516;
                }
                while (v503 != v502);
              }
              break;
            case 4:
              v517 = *a4;
              v518 = **a4;
              if (v518 >= 1)
              {
                v519 = 0;
                result = 0;
                v520 = *(_QWORD *)(v163 + 152);
                v521 = v8[19];
                v522 = v517[1];
                v523 = *a5;
                v524 = (*a5)[1];
                v525 = **a5 - v524 * v522;
                do
                {
                  if ((int)v522 < 1)
                  {
                    v536 = result;
                  }
                  else
                  {
                    v526 = 0;
                    v527 = v517[2];
                    v528 = *a5;
                    v529 = v524 - v523[2] * v527;
                    do
                    {
                      if ((int)v527 < 1)
                      {
                        v536 = result;
                      }
                      else
                      {
                        v530 = 0;
                        v531 = v517[3];
                        v532 = *a5;
                        v533 = v528[2] - v528[3] * v531;
                        do
                        {
                          if ((int)v531 < 1)
                          {
                            v536 = result;
                          }
                          else
                          {
                            v534 = v532[3];
                            v535 = v531;
                            do
                            {
                              v536 = result + 1;
                              *(float *)(v521 + 4 * result) = (float)*(int *)(v520 + 4 * v162);
                              v162 += v534;
                              ++result;
                              --v535;
                            }
                            while (v535);
                          }
                          v162 += v533;
                          ++v530;
                          result = v536;
                        }
                        while (v530 != (_DWORD)v527);
                      }
                      v162 += v529;
                      ++v526;
                      result = v536;
                    }
                    while (v526 != (_DWORD)v522);
                  }
                  v162 += v525;
                  ++v519;
                  result = v536;
                }
                while (v519 != v518);
              }
              break;
            default:
              v482 = v8[6];
              if (v482)
              {
                v483 = 0;
                v484 = *(_QWORD *)(v163 + 152) + 4 * v162;
                v485 = v8[19];
                v486 = *a4;
                v487 = ((unint64_t)((char *)a4[1] - (char *)*a4) >> 2) - 1;
                v488 = *a5;
                do
                {
                  v489 = 0;
                  if ((v487 & 0x80000000) == 0)
                  {
                    v490 = v487;
                    LODWORD(result) = v483;
                    do
                    {
                      v491 = ldiv((int)result, v486[v490]);
                      result = v491.quot;
                      v489 += v488[v490--] * v491.rem;
                    }
                    while (v490 != -1);
                  }
                  *(float *)(v485 + 4 * v483++) = (float)*(int *)(v484 + 4 * v489);
                }
                while (v483 != v482);
              }
              break;
          }
          break;
        case 3:
          v1432 = *a8;
          v1433 = *a7;
          v168 = *(_QWORD **)result;
          v169 = v168[1] - *v168;
          switch(v169 >> 2)
          {
            case 1:
              v170 = (v169 << 30) - 0x100000000;
              v171 = *(int *)((char *)*a4 + (v170 >> 30));
              if (v171 >= 1)
              {
                v172 = v170 >> 29;
                v173 = *(uint64_t *)((char *)*a5 + v172);
                v174 = *(_QWORD *)(*a6 + v172);
                v175 = (float *)(v8[19] + 4 * v1432);
                v176 = (int *)(v168[19] + 4 * v1433);
                v177 = 4 * v174;
                v178 = 4 * v173;
                do
                {
                  *v175 = (float)*v176;
                  v175 = (float *)((char *)v175 + v177);
                  v176 = (int *)((char *)v176 + v178);
                  --v171;
                }
                while (v171);
              }
              break;
            case 2:
              v1286 = (v169 << 30) - 0x200000000;
              v1287 = *(int *)((char *)*a4 + (v1286 >> 30));
              if (v1287 >= 1)
              {
                v1288 = 0;
                v1289 = v1286 >> 29;
                v1290 = *(uint64_t *)((char *)*a5 + v1289);
                v1291 = *(_QWORD *)(*a6 + v1289);
                v1292 = (v169 << 30) - 0x100000000;
                result = *(uint64_t *)((char *)*a5 + (v1292 >> 29));
                v1293 = *(_QWORD *)(*a6 + (v1292 >> 29));
                v1294 = *(int *)((char *)*a4 + (v1292 >> 30));
                v1295 = 4 * v1432;
                v1296 = 4 * v1291;
                v1297 = 4 * v1293;
                v1298 = 4 * v1433;
                v1299 = 4 * v1290;
                v1300 = 4 * result;
                do
                {
                  if (v1294 >= 1)
                  {
                    result = v8[19] + v1295;
                    v1301 = (int *)(v168[19] + v1298);
                    v1302 = v1294;
                    do
                    {
                      *(float *)result = (float)*v1301;
                      result += v1297;
                      v1301 = (int *)((char *)v1301 + v1300);
                      --v1302;
                    }
                    while (v1302);
                  }
                  ++v1288;
                  v1295 += v1296;
                  v1298 += v1299;
                }
                while (v1288 != v1287);
              }
              break;
            case 3:
              v1303 = (v169 << 30) - 0x300000000;
              v1304 = *a4;
              v1305 = *(int *)((char *)*a4 + (v1303 >> 30));
              if (v1305 >= 1)
              {
                v1306 = 0;
                v1307 = v169 << 30;
                v1308 = *a5;
                v1309 = v1303 >> 29;
                v1310 = *(uint64_t *)((char *)*a5 + (v1303 >> 29));
                v1311 = *a6;
                v1312 = *(_QWORD *)(*a6 + v1309);
                v1313 = (v1307 - 0x200000000) >> 29;
                v1314 = v1307 - 0x100000000;
                v1315 = *(uint64_t *)((char *)*a5 + v1313);
                v1316 = *(_QWORD *)(*a6 + v1313);
                v1317 = *(int *)((char *)v1304 + ((v1307 - 0x200000000) >> 30));
                v1318 = v1314 >> 32;
                v1319 = 4 * v1432;
                v1320 = 4 * v1312;
                v1321 = 4 * v1316;
                result = 4 * v1433;
                v1322 = 4 * v1310;
                v1323 = 4 * v1315;
                do
                {
                  if (v1317 >= 1)
                  {
                    v1324 = 0;
                    v1325 = v1304[v1318];
                    v1326 = (_QWORD *)*v11;
                    v1327 = 4 * *(_QWORD *)(v1311 + 8 * v1318);
                    v1328 = 4 * v1308[v1318];
                    v1329 = result;
                    v1330 = v1319;
                    do
                    {
                      if (v1325 >= 1)
                      {
                        v1331 = (float *)(v1326[19] + v1330);
                        v11 = (uint64_t *)a2;
                        v1332 = (int *)(v168[19] + v1329);
                        v1333 = v1325;
                        do
                        {
                          *v1331 = (float)*v1332;
                          v1331 = (float *)((char *)v1331 + v1327);
                          v1332 = (int *)((char *)v1332 + v1328);
                          --v1333;
                        }
                        while (v1333);
                      }
                      ++v1324;
                      v1330 += v1321;
                      v1329 += v1323;
                    }
                    while (v1324 != v1317);
                  }
                  ++v1306;
                  v1319 += v1320;
                  result += v1322;
                }
                while (v1306 != v1305);
              }
              break;
            case 4:
              v1334 = (v169 << 30) - 0x400000000;
              v1335 = *a4;
              v1580 = *(int *)((char *)*a4 + (v1334 >> 30));
              if (v1580 >= 1)
              {
                v1336 = 0;
                v1337 = *a5;
                v1338 = v1334 >> 29;
                v1339 = *a6;
                v1340 = v169 << 30;
                v1341 = (v1340 - 0x300000000) >> 29;
                v1342 = *(uint64_t *)((char *)*a5 + v1341);
                v1343 = *(_QWORD *)(*a6 + v1341);
                v1344 = v1340 - 0x200000000;
                v1345 = v1340 - 0x100000000;
                v1346 = *(int *)((char *)v1335 + ((v1340 - 0x300000000) >> 30));
                v1347 = v1344 >> 32;
                v1348 = v1345 >> 32;
                v1349 = 4 * v1432;
                v1564 = 4 * *(_QWORD *)(*a6 + v1338);
                result = 4 * v1343;
                v1350 = 4 * v1433;
                v1548 = 4 * *(uint64_t *)((char *)*a5 + v1338);
                v1351 = 4 * v1342;
                do
                {
                  if (v1346 >= 1)
                  {
                    v1352 = 0;
                    v1353 = v1335[v1347];
                    v1354 = 4 * *(_QWORD *)(v1339 + 8 * v1347);
                    v1355 = 4 * v1337[v1347];
                    v1356 = v1350;
                    v1357 = v1349;
                    do
                    {
                      if (v1353 >= 1)
                      {
                        v1358 = 0;
                        v1359 = v1335[v1348];
                        v1360 = (_QWORD *)*v11;
                        v1361 = 4 * *(_QWORD *)(v1339 + 8 * v1348);
                        v1362 = 4 * v1337[v1348];
                        v1363 = v1356;
                        v1364 = v1357;
                        do
                        {
                          if (v1359 >= 1)
                          {
                            v1365 = (float *)(v1360[19] + v1364);
                            v1366 = (int *)(v168[19] + v1363);
                            v1367 = v1359;
                            do
                            {
                              *v1365 = (float)*v1366;
                              v1365 = (float *)((char *)v1365 + v1361);
                              v1366 = (int *)((char *)v1366 + v1362);
                              --v1367;
                            }
                            while (v1367);
                          }
                          ++v1358;
                          v1364 += v1354;
                          v1363 += v1355;
                        }
                        while (v1358 != v1353);
                      }
                      ++v1352;
                      v1357 += result;
                      v1356 += v1351;
                    }
                    while (v1352 != v1346);
                  }
                  ++v1336;
                  v1349 += v1564;
                  v1350 += v1548;
                }
                while (v1336 != v1580);
              }
              break;
            case 5:
              v1368 = (v169 << 30) - 0x500000000;
              v1369 = *a4;
              v1492 = *(int *)((char *)*a4 + (v1368 >> 30));
              if (v1492 >= 1)
              {
                v1504 = 0;
                v1370 = *a5;
                v1371 = v1368 >> 29;
                v1372 = *a6;
                v1373 = ((v169 << 30) - 0x400000000) >> 29;
                result = *(uint64_t *)((char *)*a5 + v1373);
                v1374 = *(_QWORD *)(*a6 + v1373);
                v1581 = *(int *)((char *)v1369 + (((v169 << 30) - 0x400000000) >> 30));
                v1462 = ((v169 << 30) - 0x300000000) >> 32;
                v1375 = ((v169 << 30) - 0x200000000) >> 32;
                v1376 = ((v169 << 30) - 0x100000000) >> 32;
                v1533 = 4 * v1432;
                v1482 = 4 * *(_QWORD *)(*a6 + v1371);
                v1565 = 4 * v1374;
                v1517 = 4 * v1433;
                v1472 = 4 * *(uint64_t *)((char *)*a5 + v1371);
                v1549 = 4 * result;
                do
                {
                  if (v1581 >= 1)
                  {
                    v1377 = 0;
                    v1378 = v1369[v1462];
                    v1379 = 4 * *(_QWORD *)(v1372 + 8 * v1462);
                    v1380 = 4 * v1370[v1462];
                    v1381 = v1517;
                    v1382 = v1533;
                    do
                    {
                      if (v1378 >= 1)
                      {
                        v1383 = 0;
                        v1384 = v1369[v1375];
                        v1385 = 4 * *(_QWORD *)(v1372 + 8 * v1375);
                        v1386 = 4 * v1370[v1375];
                        v1387 = v1381;
                        v1388 = v1382;
                        do
                        {
                          if (v1384 >= 1)
                          {
                            v1389 = 0;
                            v1390 = v1369[v1376];
                            v1391 = (_QWORD *)*v11;
                            v1392 = 4 * *(_QWORD *)(v1372 + 8 * v1376);
                            v1393 = 4 * v1370[v1376];
                            v1394 = v1387;
                            v1395 = v1388;
                            do
                            {
                              if (v1390 >= 1)
                              {
                                v1396 = (float *)(v1391[19] + v1395);
                                v1397 = (int *)(v168[19] + v1394);
                                LODWORD(result) = v1390;
                                do
                                {
                                  *v1396 = (float)*v1397;
                                  v1396 = (float *)((char *)v1396 + v1392);
                                  v1397 = (int *)((char *)v1397 + v1393);
                                  result = (result - 1);
                                }
                                while ((_DWORD)result);
                              }
                              ++v1389;
                              v1395 += v1385;
                              v1394 += v1386;
                            }
                            while (v1389 != v1384);
                          }
                          ++v1383;
                          v1388 += v1379;
                          v1387 += v1380;
                        }
                        while (v1383 != v1378);
                      }
                      ++v1377;
                      v1382 += v1565;
                      v1381 += v1549;
                    }
                    while (v1377 != v1581);
                  }
                  v1533 += v1482;
                  v1517 += v1472;
                  ++v1504;
                }
                while (v1504 != v1492);
              }
              break;
            default:
              v1247 = (char *)a4[1];
              LODWORD(v1248) = 1;
              v1249 = -20;
              do
              {
                v1248 = *(int *)&v1247[v1249] * (uint64_t)(int)v1248;
                v1249 += 4;
              }
              while (v1249);
              v1427 = v168[6];
              if (v1427)
              {
                result = 0;
                v1250 = (v169 << 30) - 0x500000000;
                v1251 = *a4;
                v1481 = *v8;
                v1252 = *a5;
                v1412 = ((unint64_t)(v8[1] - *v8) >> 2) - 1;
                v1417 = ((unint64_t)(v1247 - (char *)*a4) >> 2) - 1;
                v1253 = *a6;
                v1491 = *(int *)((char *)*a4 + (v1250 >> 30));
                v1407 = ((v169 << 30) - 0x400000000) >> 32;
                v1254 = ((v169 << 30) - 0x200000000) >> 32;
                v1255 = ((v169 << 30) - 0x100000000) >> 32;
                v1471 = 4 * *(_QWORD *)(*a6 + (v1250 >> 29));
                v1452 = ((v169 << 30) - 0x300000000) >> 32;
                v1461 = 4 * *(uint64_t *)((char *)*a5 + (v1250 >> 29));
                v1422 = v1248;
                do
                {
                  v1256 = v1417;
                  v1444 = result;
                  v1257 = 0;
                  if ((v1417 & 0x80000000) != 0)
                  {
                    v1258 = v1412;
                  }
                  else
                  {
                    v1258 = v1412;
                    do
                    {
                      v1259 = ldiv((int)result, v1251[v1256]);
                      LODWORD(result) = v1259.quot;
                      v1257 += v1252[v1256--] * v1259.rem;
                    }
                    while (v1256 != -1);
                  }
                  v1260 = 0;
                  if ((v1258 & 0x80000000) == 0)
                  {
                    v1261 = v1444;
                    do
                    {
                      v1262 = ldiv(v1261, *(int *)(v1481 + 4 * v1258));
                      v1261 = v1262.quot;
                      v1260 += *(_QWORD *)(v1253 + 8 * v1258--) * v1262.rem;
                    }
                    while (v1258 != -1);
                  }
                  if (v1491 >= 1)
                  {
                    v1263 = 0;
                    v1579 = v1251[v1407];
                    v1532 = 4 * (v1260 + v1432);
                    v1563 = 4 * *(_QWORD *)(v1253 + 8 * v1407);
                    v1516 = 4 * (v1257 + v1433);
                    v1547 = 4 * v1252[v1407];
                    do
                    {
                      v1503 = v1263;
                      if (v1579 >= 1)
                      {
                        v1264 = 0;
                        v1265 = v1251[v1452];
                        v1266 = 4 * *(_QWORD *)(v1253 + 8 * v1452);
                        v1267 = 4 * v1252[v1452];
                        v1268 = v1516;
                        v1269 = v1532;
                        do
                        {
                          if (v1265 >= 1)
                          {
                            v1270 = 0;
                            v1271 = v1251[v1254];
                            v1272 = 4 * *(_QWORD *)(v1253 + 8 * v1254);
                            v1273 = 4 * v1252[v1254];
                            v1274 = v1268;
                            v1275 = v1269;
                            do
                            {
                              if (v1271 >= 1)
                              {
                                v1276 = 0;
                                v1277 = v1251[v1255];
                                v1278 = (_QWORD *)*v11;
                                v1279 = 4 * *(_QWORD *)(v1253 + 8 * v1255);
                                v1280 = 4 * v1252[v1255];
                                v1281 = v1274;
                                v1282 = v1275;
                                do
                                {
                                  if (v1277 >= 1)
                                  {
                                    v1283 = (float *)(v1278[19] + v1282);
                                    v1284 = (int *)(v168[19] + v1281);
                                    v1285 = v1277;
                                    do
                                    {
                                      *v1283 = (float)*v1284;
                                      v1283 = (float *)((char *)v1283 + v1279);
                                      v1284 = (int *)((char *)v1284 + v1280);
                                      --v1285;
                                    }
                                    while (v1285);
                                  }
                                  ++v1276;
                                  v1282 += v1272;
                                  v1281 += v1273;
                                }
                                while (v1276 != v1271);
                              }
                              ++v1270;
                              v1275 += v1266;
                              v1274 += v1267;
                            }
                            while (v1270 != v1265);
                          }
                          ++v1264;
                          v1269 += v1563;
                          v1268 += v1547;
                        }
                        while (v1264 != v1579);
                      }
                      v1263 = v1503 + 1;
                      v1532 += v1471;
                      v1516 += v1461;
                    }
                    while (v1503 + 1 != v1491);
                  }
                  result = v1444 + v1422;
                }
                while (v1427 > v1444 + v1422);
              }
              break;
          }
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

