_QWORD *mlx::core::arange(_QWORD *a1, int ***a2, double a3, double a4)
{
  mlx::core::scheduler *v7;
  _QWORD *result;
  uint64_t v9;
  int **v10;
  int *v11;
  int v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t *v16;
  int *v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int *v22;
  int *v23;
  unsigned int v24;
  unsigned int *v25;
  int *v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  void *exception;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a1[1] != *a1)
    mlx::core::arange();
  v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60) * (_QWORD)(*a2)[6]));
  v32[0] = &unk_2513463C8;
  v32[1] = mlx::core::allocator::free;
  v33 = v32;
  mlx::core::array::set_data(a2, (uint64_t)v7, (uint64_t)v32);
  result = v33;
  if (v33 == v32)
  {
    v9 = 4;
    result = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_7;
    v9 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
LABEL_7:
  v10 = *a2;
  switch(*((_DWORD *)*a2 + 14))
  {
    case 0:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x2426A8078](exception, "Bool type unsupported for arange.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    case 1:
      v11 = v10[6];
      if (v11)
      {
        v12 = (int)a3;
        v13 = v10[19];
        do
        {
          *(_BYTE *)v13 = v12;
          v13 = (int *)((char *)v13 + 1);
          v12 += (int)(a3 + a4) - (int)a3;
          v11 = (int *)((char *)v11 - 1);
        }
        while (v11);
      }
      break;
    case 2:
      v23 = v10[6];
      if (v23)
      {
        v24 = a3;
        v25 = (unsigned int *)v10[19];
        do
        {
          *v25++ = v24;
          v24 += (a3 + a4) - a3;
          v23 = (int *)((char *)v23 - 1);
        }
        while (v23);
      }
      break;
    case 3:
      v20 = v10[6];
      if (v20)
      {
        v21 = (int)a3;
        v22 = v10[19];
        do
        {
          *(_BYTE *)v22 = v21;
          v22 = (int *)((char *)v22 + 1);
          v21 += (int)(a3 + a4) - (int)a3;
          v20 = (int *)((char *)v20 - 1);
        }
        while (v20);
      }
      break;
    case 4:
      v17 = v10[6];
      if (v17)
      {
        v18 = (int)a3;
        v19 = v10[19];
        do
        {
          *v19++ = v18;
          v18 += (int)(a3 + a4) - (int)a3;
          v17 = (int *)((char *)v17 - 1);
        }
        while (v17);
      }
      break;
    case 5:
      v14 = v10[6];
      if (v14)
      {
        v15 = (uint64_t)a3;
        v16 = (uint64_t *)v10[19];
        do
        {
          *v16++ = v15;
          v15 += (uint64_t)(a3 + a4) - (uint64_t)a3;
          v14 = (int *)((char *)v14 - 1);
        }
        while (v14);
      }
      break;
    case 6:
      v26 = v10[6];
      if (v26)
      {
        v27 = a3;
        v28 = a3 + a4;
        v29 = (float *)v10[19];
        v30 = v28 - v27;
        do
        {
          *v29++ = v27;
          v27 = v30 + v27;
          v26 = (int *)((char *)v26 - 1);
        }
        while (v26);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2422E22A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void mlx::core::Abs::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  const mlx::core::array *v3;
  mlx::core::array *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  mlx::core::scheduler *v9;
  void **v10;
  uint64_t v11;
  int *v12;
  mlx::core::scheduler *v13;
  void **v14;
  uint64_t v15;
  int *v16;
  mlx::core::scheduler *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  mlx::core::scheduler *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  mlx::core::scheduler *v25;
  void **v26;
  uint64_t v27;
  uint64_t *v28;
  mlx::core::scheduler *v29;
  void **v30;
  uint64_t v31;
  float *v32;
  mlx::core::scheduler *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  ldiv_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  ldiv_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  ldiv_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int quot;
  ldiv_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  ldiv_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  ldiv_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  ldiv_t v138;
  void *v139;
  uint64_t (*v140)(mlx::core::allocator *);
  void **v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v3 = *(const mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Abs::eval();
  v139 = *(void **)(*(_QWORD *)v3 + 56);
  if (mlx::core::issubdtype((unsigned int *)&v139, &mlx::core::unsignedinteger))
  {
    mlx::core::array::copy_shared_buffer(a3, v3);
    return;
  }
  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  switch((int)v7)
  {
    case 0:
      v8 = *(char **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v139 = &unk_2513463C8;
        v140 = mlx::core::allocator::free;
        v141 = &v139;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v9, (uint64_t)&v139);
        v10 = v141;
        if (v141 == &v139)
        {
          v11 = 4;
          v10 = &v139;
        }
        else
        {
          if (!v141)
            goto LABEL_101;
          v11 = 5;
        }
        (*((void (**)(void))*v10 + v11))();
LABEL_101:
        v93 = *(_QWORD *)a3;
        v94 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v94)
        {
          v95 = 0;
          v96 = *(_QWORD *)(v93 + 152);
          v97 = *(uint64_t **)v3;
          v98 = *v97;
          v99 = ((unint64_t)(v97[1] - *v97) >> 2) - 1;
          do
          {
            v100 = 0;
            if ((v99 & 0x80000000) == 0)
            {
              v101 = v97[3];
              v102 = v99;
              quot = v95;
              do
              {
                v104 = ldiv(quot, *(int *)(v98 + 4 * v102));
                quot = v104.quot;
                v100 += *(_QWORD *)(v101 + 8 * v102--) * v104.rem;
              }
              while (v102 != -1);
            }
            *(_BYTE *)(v96 + v95++) = v8[(int)v100];
          }
          while (v95 != v94);
        }
        return;
      }
      v46 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v46)
      {
        v47 = *(_BYTE **)(*(_QWORD *)a3 + 152);
        do
        {
          v48 = *v8++;
          *v47++ = v48;
          --v46;
        }
        while (v46);
      }
      return;
    case 1:
      v24 = *(_QWORD *)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v25 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v139 = &unk_2513463C8;
        v140 = mlx::core::allocator::free;
        v141 = &v139;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v25, (uint64_t)&v139);
        v26 = v141;
        if (v141 == &v139)
        {
          v27 = 4;
          v26 = &v139;
        }
        else
        {
          if (!v141)
            goto LABEL_110;
          v27 = 5;
        }
        (*((void (**)(void))*v26 + v27))();
LABEL_110:
        if (*(_QWORD *)(*(_QWORD *)a3 + 48))
        {
          v105 = 0;
          v106 = *(_QWORD *)(*(_QWORD *)a3 + 152);
          do
          {
            v107 = **(_QWORD **)v3;
            v108 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v107) >> 2;
            v109 = 0;
            v110 = (v108 - 1);
            if ((int)v108 - 1 >= 0)
            {
              v111 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v112 = v105;
              do
              {
                v113 = ldiv(v112, *(int *)(v107 + 4 * v110));
                v112 = v113.quot;
                v109 += *(_QWORD *)(v111 + 8 * v110--) * v113.rem;
              }
              while (v110 != -1);
            }
            *(_BYTE *)(v106 + v105++) = *(_BYTE *)(v24 + (int)v109);
          }
          while (v105 < *(_QWORD *)(*(_QWORD *)a3 + 48));
        }
        return;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v49 = 0;
        v50 = *(_QWORD *)(*(_QWORD *)a3 + 152);
        do
        {
          *(_BYTE *)(v50 + v49) = *(_BYTE *)(v24 + v49);
          ++v49;
        }
        while (v49 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return;
    case 2:
      v16 = *(int **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v17 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v139 = &unk_2513463C8;
        v140 = mlx::core::allocator::free;
        v141 = &v139;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v17, (uint64_t)&v139);
        v18 = v141;
        if (v141 == &v139)
        {
          v19 = 4;
          v18 = &v139;
        }
        else
        {
          if (!v141)
            goto LABEL_81;
          v19 = 5;
        }
        (*((void (**)(void))*v18 + v19))();
LABEL_81:
        v71 = *(_QWORD *)a3;
        v72 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v72)
        {
          v73 = 0;
          v74 = *(_QWORD *)(v71 + 152);
          v75 = *(uint64_t **)v3;
          v76 = *v75;
          v77 = ((unint64_t)(v75[1] - *v75) >> 2) - 1;
          do
          {
            v78 = 0;
            if ((v77 & 0x80000000) == 0)
            {
              v79 = v75[3];
              v80 = v77;
              v81 = v73;
              do
              {
                v82 = ldiv(v81, *(int *)(v76 + 4 * v80));
                v81 = v82.quot;
                v78 += *(_QWORD *)(v79 + 8 * v80--) * v82.rem;
              }
              while (v80 != -1);
            }
            *(_DWORD *)(v74 + 4 * v73++) = v16[(int)v78];
          }
          while (v73 != v72);
        }
        return;
      }
      v40 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v40)
      {
        v41 = *(_DWORD **)(*(_QWORD *)a3 + 152);
        do
        {
          v42 = *v16++;
          *v41++ = v42;
          --v40;
        }
        while (v40);
      }
      return;
    case 3:
      v20 = *(_QWORD *)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v139 = &unk_2513463C8;
        v140 = mlx::core::allocator::free;
        v141 = &v139;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v21, (uint64_t)&v139);
        v22 = v141;
        if (v141 == &v139)
        {
          v23 = 4;
          v22 = &v139;
        }
        else
        {
          if (!v141)
            goto LABEL_90;
          v23 = 5;
        }
        (*((void (**)(void))*v22 + v23))();
LABEL_90:
        if (*(_QWORD *)(*(_QWORD *)a3 + 48))
        {
          v83 = 0;
          v84 = *(_QWORD *)(*(_QWORD *)a3 + 152);
          do
          {
            v85 = **(_QWORD **)v3;
            v86 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v85) >> 2;
            v87 = 0;
            v88 = (v86 - 1);
            if ((int)v86 - 1 >= 0)
            {
              v89 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v90 = v83;
              do
              {
                v91 = ldiv(v90, *(int *)(v85 + 4 * v88));
                v90 = v91.quot;
                v87 += *(_QWORD *)(v89 + 8 * v88--) * v91.rem;
              }
              while (v88 != -1);
            }
            v92 = *(char *)(v20 + (int)v87);
            if (v92 < 0)
              v92 = -v92;
            *(_BYTE *)(v84 + v83++) = v92;
          }
          while (v83 < *(_QWORD *)(*(_QWORD *)a3 + 48));
        }
        return;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v43 = 0;
        v44 = *(_QWORD *)(*(_QWORD *)a3 + 152);
        do
        {
          v45 = *(char *)(v20 + v43);
          if (v45 < 0)
            v45 = -v45;
          *(_BYTE *)(v44 + v43++) = v45;
        }
        while (v43 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return;
    case 4:
      v12 = *(int **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v139 = &unk_2513463C8;
        v140 = mlx::core::allocator::free;
        v141 = &v139;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v13, (uint64_t)&v139);
        v14 = v141;
        if (v141 == &v139)
        {
          v15 = 4;
          v14 = &v139;
        }
        else
        {
          if (!v141)
            goto LABEL_70;
          v15 = 5;
        }
        (*((void (**)(void))*v14 + v15))();
LABEL_70:
        v58 = *(_QWORD *)a3;
        v59 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v59)
        {
          v60 = 0;
          v61 = *(_QWORD *)(v58 + 152);
          v62 = *(uint64_t **)v3;
          v63 = *v62;
          v64 = ((unint64_t)(v62[1] - *v62) >> 2) - 1;
          do
          {
            v65 = 0;
            if ((v64 & 0x80000000) == 0)
            {
              v66 = v62[3];
              v67 = v64;
              v68 = v60;
              do
              {
                v69 = ldiv(v68, *(int *)(v63 + 4 * v67));
                v68 = v69.quot;
                v65 += *(_QWORD *)(v66 + 8 * v67--) * v69.rem;
              }
              while (v67 != -1);
            }
            v70 = v12[(int)v65];
            if (v70 < 0)
              v70 = -v70;
            *(_DWORD *)(v61 + 4 * v60++) = v70;
          }
          while (v60 != v59);
        }
        return;
      }
      v36 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v36)
      {
        v37 = *(int **)(*(_QWORD *)a3 + 152);
        do
        {
          v39 = *v12++;
          v38 = v39;
          if (v39 < 0)
            v38 = -v38;
          *v37++ = v38;
          --v36;
        }
        while (v36);
      }
      return;
    case 5:
      v28 = *(uint64_t **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v29 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v139 = &unk_2513463C8;
        v140 = mlx::core::allocator::free;
        v141 = &v139;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v29, (uint64_t)&v139);
        v30 = v141;
        if (v141 == &v139)
        {
          v31 = 4;
          v30 = &v139;
        }
        else
        {
          if (!v141)
            goto LABEL_119;
          v31 = 5;
        }
        (*((void (**)(void))*v30 + v31))();
LABEL_119:
        v114 = *(_QWORD *)a3;
        v115 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v115)
        {
          v116 = 0;
          v117 = *(_QWORD *)(v114 + 152);
          v118 = *(uint64_t **)v3;
          v119 = *v118;
          v120 = ((unint64_t)(v118[1] - *v118) >> 2) - 1;
          do
          {
            v121 = 0;
            if ((v120 & 0x80000000) == 0)
            {
              v122 = v118[3];
              v123 = v120;
              v124 = v116;
              do
              {
                v125 = ldiv(v124, *(int *)(v119 + 4 * v123));
                v124 = v125.quot;
                v121 += *(_QWORD *)(v122 + 8 * v123--) * v125.rem;
              }
              while (v123 != -1);
            }
            v126 = v28[(int)v121];
            if (v126 < 0)
              v126 = -v126;
            *(_QWORD *)(v117 + 8 * v116++) = v126;
          }
          while (v116 != v115);
        }
        return;
      }
      v51 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v51)
      {
        v52 = *(uint64_t **)(*(_QWORD *)a3 + 152);
        do
        {
          v54 = *v28++;
          v53 = v54;
          if (v54 < 0)
            v53 = -v53;
          *v52++ = v53;
          --v51;
        }
        while (v51);
      }
      return;
    case 6:
      v32 = *(float **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v33 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v139 = &unk_2513463C8;
        v140 = mlx::core::allocator::free;
        v141 = &v139;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v33, (uint64_t)&v139);
        v34 = v141;
        if (v141 == &v139)
        {
          v35 = 4;
          v34 = &v139;
        }
        else
        {
          if (!v141)
            goto LABEL_130;
          v35 = 5;
        }
        (*((void (**)(void))*v34 + v35))();
LABEL_130:
        v127 = *(_QWORD *)a3;
        v128 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v128)
        {
          v129 = 0;
          v130 = *(_QWORD *)(v127 + 152);
          v131 = *(uint64_t **)v3;
          v132 = *v131;
          v133 = ((unint64_t)(v131[1] - *v131) >> 2) - 1;
          do
          {
            v134 = 0;
            if ((v133 & 0x80000000) == 0)
            {
              v135 = v131[3];
              v136 = v133;
              v137 = v129;
              do
              {
                v138 = ldiv(v137, *(int *)(v132 + 4 * v136));
                v137 = v138.quot;
                v134 += *(_QWORD *)(v135 + 8 * v136--) * v138.rem;
              }
              while (v136 != -1);
            }
            *(float *)(v130 + 4 * v129++) = fabsf(v32[(int)v134]);
          }
          while (v129 != v128);
        }
        return;
      }
      v55 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v55)
      {
        v56 = *(float **)(*(_QWORD *)a3 + 152);
        do
        {
          v57 = *v32++;
          *v56++ = fabsf(v57);
          --v55;
        }
        while (v55);
      }
      return;
    default:
      return;
  }
}

void sub_2422E2C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *mlx::core::Arange::eval(uint64_t a1, _QWORD *a2, int ***a3)
{
  return mlx::core::arange(a2, a3, *(double *)(a1 + 24), *(double *)(a1 + 40));
}

void mlx::core::ArcCos::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcCos::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arccos] Cannot compute inverse cosine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = acosf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = acosf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E2F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

void mlx::core::ArcCosh::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcCosh::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arccosh] Cannot compute inverse hyperbolic cosine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = acoshf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = acoshf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E3298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::ArcSin::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcSin::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arcsin] Cannot compute inverse sine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = asinf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = asinf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E35C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::ArcSinh::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcSinh::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arcsinh] Cannot compute inverse hyperbolic sine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = asinhf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = asinhf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E38F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::ArcTan::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcTan::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arctan] Cannot compute inverse tangent of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = atanf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = atanf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E3C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::ArcTanh::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArcTanh::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[arctanh] Cannot compute inverse hyperbolic tangent of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = atanhf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = atanhf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E3F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t mlx::core::AsType::eval(int a1, uint64_t a2, mlx::core::array *this, float a4)
{
  mlx::core::array *v4;
  int v5;

  v4 = *(mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::AsType::eval();
  if ((*(_BYTE *)(*(_QWORD *)v4 + 168) & 1) != 0)
    v5 = 1;
  else
    v5 = 2;
  return mlx::core::copy(v4, this, v5, a4);
}

float mlx::core::Ceil::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  const mlx::core::array *v3;
  mlx::core::array *v5;
  uint64_t v6;
  float *v7;
  mlx::core::scheduler *v8;
  float result;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int quot;
  ldiv_t v26;
  _QWORD *v27;
  void *exception;
  _QWORD v29[3];
  void *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(const mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Ceil::eval();
  v30 = *(void **)(*(_QWORD *)v3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    mlx::core::array::copy_shared_buffer(a3, v3);
    return result;
  }
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
    mlx::core::operator<<(v27, v29);
    exception = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](exception, v29);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)a3 + 48) * BYTE4(v6)));
    v30 = &unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = &v30;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v30);
    v10 = v32;
    if (v32 == &v30)
    {
      v11 = 4;
      v10 = &v30;
    }
    else
    {
      if (!v32)
        goto LABEL_15;
      v11 = 5;
    }
    (*((void (**)(void))*v10 + v11))();
LABEL_15:
    v15 = *(_QWORD *)a3;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v15 + 152);
      v19 = *(uint64_t **)v3;
      v20 = *v19;
      v21 = ((unint64_t)(v19[1] - *v19) >> 2) - 1;
      do
      {
        v22 = 0;
        if ((v21 & 0x80000000) == 0)
        {
          v23 = v19[3];
          v24 = v21;
          quot = v17;
          do
          {
            v26 = ldiv(quot, *(int *)(v20 + 4 * v24));
            quot = v26.quot;
            v22 += *(_QWORD *)(v23 + 8 * v24--) * v26.rem;
          }
          while (v24 != -1);
        }
        result = ceilf(v7[(int)v22]);
        *(float *)(v18 + 4 * v17++) = result;
      }
      while (v17 != v16);
    }
    return result;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v12)
  {
    v13 = *(float **)(*(_QWORD *)a3 + 152);
    do
    {
      v14 = *v7++;
      result = ceilf(v14);
      *v13++ = result;
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_2422E42A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Concatenate::eval(uint64_t a1, mlx::core::array **a2, int ***a3)
{
  char *v6;
  uint64_t v7;
  char *v8;
  mlx::core::array *v9;
  mlx::core::array *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  int v24;
  mlx::core::scheduler *v25;
  _QWORD *v26;
  uint64_t v27;
  int **v28;
  mlx::core::array *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  void *v40[3];
  uint64_t v41[2];
  void *v42;
  void *v43;
  uint64_t v44;
  void *__p;
  char *v46;
  char *v47;
  void **v48;
  _QWORD v49[3];
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v47 = 0;
  v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v47, 1uLL);
  *(_DWORD *)v6 = 0;
  v8 = v6 + 4;
  __p = v6;
  v47 = &v6[4 * v7];
  v46 = v6 + 4;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      v11 = mlx::core::array::shape(v9, *(_DWORD *)(a1 + 20));
      v12 = v11;
      v13 = v46;
      if (v46 >= v47)
      {
        v14 = (char *)__p;
        v15 = (v46 - (_BYTE *)__p) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v47 - (_BYTE *)__p;
        if ((v47 - (_BYTE *)__p) >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v47, v18);
          v14 = (char *)__p;
          v13 = v46;
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v15];
        *(_DWORD *)v20 = v12;
        v8 = v20 + 4;
        while (v13 != v14)
        {
          v21 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        __p = v20;
        v46 = v8;
        v47 = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_DWORD *)v46 = v11;
        v8 = v13 + 4;
      }
      v46 = v8;
      v9 = (mlx::core::array *)((char *)v9 + 16);
    }
    while (v9 != v10);
  }
  v22 = (char *)__p + 4;
  if (__p != v8 && v22 != v8)
  {
    v24 = *(_DWORD *)__p;
    do
    {
      v24 += *(_DWORD *)v22;
      *(_DWORD *)v22 = v24;
      v22 += 4;
    }
    while (v22 != v8);
  }
  v25 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (_QWORD)(*a3)[6]));
  v49[0] = &unk_2513463C8;
  v49[1] = mlx::core::allocator::free;
  v50 = v49;
  mlx::core::array::set_data(a3, (uint64_t)v25, (uint64_t)v49);
  v26 = v50;
  if (v50 == v49)
  {
    v27 = 4;
    v26 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_30;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_30:
  v28 = *a3;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v42, v28[3], (uint64_t)v28[4], ((char *)v28[4] - (char *)v28[3]) >> 3);
  v29 = *a2;
  if (a2[1] != *a2)
  {
    v30 = 0;
    v31 = (_BYTE)(*a3)[21] & 0xF8;
    do
    {
      v32 = *((_QWORD *)v29 + 2 * v30);
      memset(v40, 0, sizeof(v40));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v40, *(const void **)v32, *(_QWORD *)(v32 + 8), (uint64_t)(*(_QWORD *)(v32 + 8) - *(_QWORD *)v32) >> 2);
      v33 = (uint64_t)(*a3)[7];
      v39 = 0uLL;
      v38 = 0;
      v37 = 0uLL;
      mlx::core::array::array(v41, (__int128 *)v40, v33, &v39, &v37);
      v48 = (void **)&v37;
      std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v48);
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      mlx::core::array::copy_shared_buffer(v41, (uint64_t)a3, (uint64_t)&v42, v31, *(_QWORD *)(v41[0] + 48), *((_QWORD *)v42 + *(int *)(a1 + 20)) * *((int *)__p + v30));
      mlx::core::copy_inplace((char *)*a2 + 16 * v30, v41, 3);
      mlx::core::array::~array((mlx::core::array *)v41);
      ++v30;
      v29 = *a2;
    }
    while (v30 < (a2[1] - *a2) >> 4);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (__p)
  {
    v46 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2422E46D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t mlx::core::array::shape(mlx::core::array *this, int a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)this;
  v3 = (uint64_t)(v2[1] - *v2) >> 2;
  v4 = a2;
  if (a2 < 0)
    v4 = v3 + a2;
  if (v3 <= v4)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned int *)(*v2 + 4 * v4);
}

void mlx::core::Cos::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Cos::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[cos] Cannot compute cosine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = cosf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = cosf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E4A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Cosh::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Cosh::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[cosh] Cannot compute hyperbolic cosine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = coshf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = coshf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E4D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Erf::eval(int a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  int *v5;
  uint64_t v6;
  mlx::core::scheduler *v7;
  int8x16_t v8;
  _QWORD *v9;
  uint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int quot;
  ldiv_t v22;
  std::logic_error *exception;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Erf::eval();
  v5 = (*a3)[7];
  if ((_DWORD)v5 != 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[erf] Error function only defined for arrays with real floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v5)));
    v24[0] = &unk_2513463C8;
    v24[1] = mlx::core::allocator::free;
    v25 = v24;
    mlx::core::array::set_data(a3, (uint64_t)v7, (uint64_t)v24);
    v9 = v25;
    if (v25 == v24)
    {
      v10 = 4;
      v9 = v24;
    }
    else
    {
      if (!v25)
        goto LABEL_13;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
    if ((*a3)[6])
    {
      v14 = 0;
      v15 = (*a3)[19];
      do
      {
        v16 = **(_QWORD **)v3;
        v17 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v16) >> 2;
        v18 = 0;
        v19 = (v17 - 1);
        if ((int)v17 - 1 >= 0)
        {
          v20 = *(_QWORD *)(*(_QWORD *)v3 + 24);
          quot = v14;
          do
          {
            v22 = ldiv(quot, *(int *)(v16 + 4 * v19));
            quot = v22.quot;
            v18 += *(_QWORD *)(v20 + 8 * v19--) * v22.rem;
          }
          while (v19 != -1);
        }
        v8.i32[0] = *(_DWORD *)(v6 + 4 * (int)v18);
        *(float *)&v15[v14++] = mlx::core::detail::Erf::operator()<float>(v8);
      }
      while (v14 < (unint64_t)(*a3)[6]);
    }
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)v3 + 160))
  {
    v12 = 0;
    v13 = (*a3)[19];
    do
    {
      v11.i32[0] = *(_DWORD *)(v6 + 4 * v12);
      *(float *)&v13[v12++] = mlx::core::detail::Erf::operator()<float>(v11);
    }
    while (v12 < *(_QWORD *)(*(_QWORD *)v3 + 160));
  }
}

void sub_2422E503C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::ErfInv::eval(int a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  int *v5;
  uint64_t v6;
  mlx::core::scheduler *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int quot;
  ldiv_t v20;
  std::logic_error *exception;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ErfInv::eval();
  v5 = (*a3)[7];
  if ((_DWORD)v5 != 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[erf_inv] Inverse error function only defined for arrays with real floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v5)));
    v22[0] = &unk_2513463C8;
    v22[1] = mlx::core::allocator::free;
    v23 = v22;
    mlx::core::array::set_data(a3, (uint64_t)v7, (uint64_t)v22);
    v8 = v23;
    if (v23 == v22)
    {
      v9 = 4;
      v8 = v22;
    }
    else
    {
      if (!v23)
        goto LABEL_13;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
    if ((*a3)[6])
    {
      v12 = 0;
      v13 = (*a3)[19];
      do
      {
        v14 = **(_QWORD **)v3;
        v15 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v14) >> 2;
        v16 = 0;
        v17 = (v15 - 1);
        if ((int)v15 - 1 >= 0)
        {
          v18 = *(_QWORD *)(*(_QWORD *)v3 + 24);
          quot = v12;
          do
          {
            v20 = ldiv(quot, *(int *)(v14 + 4 * v17));
            quot = v20.quot;
            v16 += *(_QWORD *)(v18 + 8 * v17--) * v20.rem;
          }
          while (v17 != -1);
        }
        *(float *)&v13[v12++] = mlx::core::detail::ErfInv::operator()<float>(*(float *)(v6 + 4 * (int)v16));
      }
      while (v12 < (unint64_t)(*a3)[6]);
    }
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)v3 + 160))
  {
    v10 = 0;
    v11 = (*a3)[19];
    do
    {
      *(float *)&v11[v10] = mlx::core::detail::ErfInv::operator()<float>(*(float *)(v6 + 4 * v10));
      ++v10;
    }
    while (v10 < *(_QWORD *)(*(_QWORD *)v3 + 160));
  }
}

void sub_2422E529C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Exp::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  uint64_t v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int quot;
  ldiv_t v21;
  std::logic_error *exception;
  _QWORD *v23;
  void *v24;
  _QWORD v25[3];
  int *v26;
  uint64_t (*v27[2])(mlx::core::allocator *);
  void **v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Exp::eval();
  v26 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v26, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[exp] Cannot exponentiate elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[unary_fp] Does not support ", 28);
    v25[0] = (*a3)[7];
    mlx::core::operator<<(v23, v25);
    v24 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, v25);
    MEMORY[0x2426A8084](v24, v25);
    __cxa_throw(v24, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v26 = (int *)&unk_2513463C8;
    v27[0] = mlx::core::allocator::free;
    v28 = (void **)&v26;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v26);
    v9 = v28;
    if (v28 == (void **)&v26)
    {
      v10 = 4;
      v9 = (void **)&v26;
    }
    else
    {
      if (!v28)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    if ((*a3)[6])
    {
      v13 = 0;
      v14 = (*a3)[19];
      do
      {
        v15 = **(_QWORD **)v3;
        v16 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v15) >> 2;
        v17 = 0;
        v18 = (v16 - 1);
        if ((int)v16 - 1 >= 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)v3 + 24);
          quot = v13;
          do
          {
            v21 = ldiv(quot, *(int *)(v15 + 4 * v18));
            quot = v21.quot;
            v17 += *(_QWORD *)(v19 + 8 * v18--) * v21.rem;
          }
          while (v18 != -1);
        }
        *(float *)&v14[v13++] = mlx::core::detail::Exp::operator()<float>(*(float *)(v7 + 4 * (int)v17));
      }
      while (v13 < (unint64_t)(*a3)[6]);
    }
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)v3 + 160))
  {
    v11 = 0;
    v12 = (*a3)[19];
    do
    {
      *(float *)&v12[v11] = mlx::core::detail::Exp::operator()<float>(*(float *)(v7 + 4 * v11));
      ++v11;
    }
    while (v11 < *(_QWORD *)(*(_QWORD *)v3 + 160));
  }
}

void sub_2422E55A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  int v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void mlx::core::Expm1::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Expm1::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[expm1] Cannot exponentiate elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = expm1f(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = expm1f(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E58D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

float mlx::core::Floor::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  const mlx::core::array *v3;
  mlx::core::array *v5;
  uint64_t v6;
  float *v7;
  mlx::core::scheduler *v8;
  float result;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int quot;
  ldiv_t v26;
  _QWORD *v27;
  void *exception;
  _QWORD v29[3];
  void *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(const mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Floor::eval();
  v30 = *(void **)(*(_QWORD *)v3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    mlx::core::array::copy_shared_buffer(a3, v3);
    return result;
  }
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
    mlx::core::operator<<(v27, v29);
    exception = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](exception, v29);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)a3 + 48) * BYTE4(v6)));
    v30 = &unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = &v30;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v30);
    v10 = v32;
    if (v32 == &v30)
    {
      v11 = 4;
      v10 = &v30;
    }
    else
    {
      if (!v32)
        goto LABEL_15;
      v11 = 5;
    }
    (*((void (**)(void))*v10 + v11))();
LABEL_15:
    v15 = *(_QWORD *)a3;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v15 + 152);
      v19 = *(uint64_t **)v3;
      v20 = *v19;
      v21 = ((unint64_t)(v19[1] - *v19) >> 2) - 1;
      do
      {
        v22 = 0;
        if ((v21 & 0x80000000) == 0)
        {
          v23 = v19[3];
          v24 = v21;
          quot = v17;
          do
          {
            v26 = ldiv(quot, *(int *)(v20 + 4 * v24));
            quot = v26.quot;
            v22 += *(_QWORD *)(v23 + 8 * v24--) * v26.rem;
          }
          while (v24 != -1);
        }
        result = floorf(v7[(int)v22]);
        *(float *)(v18 + 4 * v17++) = result;
      }
      while (v17 != v16);
    }
    return result;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v12)
  {
    v13 = *(float **)(*(_QWORD *)a3 + 152);
    do
    {
      v14 = *v7++;
      result = floorf(v14);
      *v13++ = result;
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_2422E5BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t mlx::core::Full::eval(int a1, uint64_t a2, mlx::core::array *this, float a4)
{
  mlx::core::array *v4;
  uint64_t v5;
  int v6;

  v4 = *(mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Full::eval();
  v5 = *(_QWORD *)v4;
  if (*(_DWORD *)(*(_QWORD *)v4 + 56) != *(_DWORD *)(*(_QWORD *)this + 56))
    mlx::core::Full::eval();
  if (*(_QWORD *)(v5 + 160) == 1)
  {
    v6 = 0;
  }
  else if ((*(_BYTE *)(v5 + 168) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v6 = 2;
  }
  return mlx::core::copy(v4, this, v6, a4);
}

void mlx::core::Log::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v6;
  int v7;
  uint64_t v8;
  float *v9;
  mlx::core::scheduler *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  mlx::core::scheduler *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  mlx::core::scheduler *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  float *v27;
  float v28;
  uint64_t v29;
  float *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  ldiv_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int quot;
  ldiv_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  ldiv_t v67;
  std::logic_error *exception;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  _QWORD v75[3];
  void *v76;
  _QWORD v77[2];
  void **v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Log::eval();
  v76 = *(void **)(*(_QWORD *)a3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v76, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[log] Cannot compute log of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v7 = *(_DWORD *)(a1 + 20);
  if (!v7)
  {
    v18 = *(_QWORD *)(*(_QWORD *)a3 + 56);
    if ((_DWORD)v18 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v76);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"[unary_fp] Does not support ", 28);
      v75[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
      mlx::core::operator<<(v73, v75);
      v74 = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v77, v75);
      MEMORY[0x2426A8084](v74, v75);
      __cxa_throw(v74, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    v19 = *(float **)(*(_QWORD *)v3 + 152);
    if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v26)
      {
        v27 = *(float **)(*(_QWORD *)a3 + 152);
        do
        {
          v28 = *v19++;
          *v27++ = log2f(v28);
          --v26;
        }
        while (v26);
      }
      return;
    }
    v20 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)a3 + 48) * BYTE4(v18)));
    v76 = &unk_2513463C8;
    v77[0] = mlx::core::allocator::free;
    v78 = &v76;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v20, (uint64_t)&v76);
    v21 = v78;
    if (v78 == &v76)
    {
      v22 = 4;
      v21 = &v76;
    }
    else
    {
      if (!v78)
        goto LABEL_44;
      v22 = 5;
    }
    (*((void (**)(void))*v21 + v22))();
LABEL_44:
    v44 = *(_QWORD *)a3;
    v45 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v45)
    {
      v46 = 0;
      v47 = *(_QWORD *)(v44 + 152);
      v48 = *(uint64_t **)v3;
      v49 = *v48;
      v50 = ((unint64_t)(v48[1] - *v48) >> 2) - 1;
      do
      {
        v51 = 0;
        if ((v50 & 0x80000000) == 0)
        {
          v52 = v48[3];
          v53 = v50;
          quot = v46;
          do
          {
            v55 = ldiv(quot, *(int *)(v49 + 4 * v53));
            quot = v55.quot;
            v51 += *(_QWORD *)(v52 + 8 * v53--) * v55.rem;
          }
          while (v53 != -1);
        }
        *(float *)(v47 + 4 * v46++) = log2f(v19[(int)v51]);
      }
      while (v46 != v45);
    }
    return;
  }
  if (v7 == 1)
  {
    v13 = *(_QWORD *)(*(_QWORD *)a3 + 56);
    if ((_DWORD)v13 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v76);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"[unary_fp] Does not support ", 28);
      v75[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
      mlx::core::operator<<(v71, v75);
      v72 = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v77, v75);
      MEMORY[0x2426A8084](v72, v75);
      __cxa_throw(v72, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    v14 = *(float **)(*(_QWORD *)v3 + 152);
    if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v23)
      {
        v24 = *(float **)(*(_QWORD *)a3 + 152);
        do
        {
          v25 = *v14++;
          *v24++ = log10f(v25);
          --v23;
        }
        while (v23);
      }
      return;
    }
    v15 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)a3 + 48) * BYTE4(v13)));
    v76 = &unk_2513463C8;
    v77[0] = mlx::core::allocator::free;
    v78 = &v76;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v15, (uint64_t)&v76);
    v16 = v78;
    if (v78 == &v76)
    {
      v17 = 4;
      v16 = &v76;
    }
    else
    {
      if (!v78)
        goto LABEL_35;
      v17 = 5;
    }
    (*((void (**)(void))*v16 + v17))();
LABEL_35:
    v32 = *(_QWORD *)a3;
    v33 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v33)
    {
      v34 = 0;
      v35 = *(_QWORD *)(v32 + 152);
      v36 = *(uint64_t **)v3;
      v37 = *v36;
      v38 = ((unint64_t)(v36[1] - *v36) >> 2) - 1;
      do
      {
        v39 = 0;
        if ((v38 & 0x80000000) == 0)
        {
          v40 = v36[3];
          v41 = v38;
          v42 = v34;
          do
          {
            v43 = ldiv(v42, *(int *)(v37 + 4 * v41));
            v42 = v43.quot;
            v39 += *(_QWORD *)(v40 + 8 * v41--) * v43.rem;
          }
          while (v41 != -1);
        }
        *(float *)(v35 + 4 * v34++) = log10f(v14[(int)v39]);
      }
      while (v34 != v33);
    }
    return;
  }
  if (v7 != 2)
    return;
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  if ((_DWORD)v8 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v76);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"[unary_fp] Does not support ", 28);
    v75[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
    mlx::core::operator<<(v69, v75);
    v70 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v77, v75);
    MEMORY[0x2426A8084](v70, v75);
    __cxa_throw(v70, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v9 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)a3 + 48) * BYTE4(v8)));
    v76 = &unk_2513463C8;
    v77[0] = mlx::core::allocator::free;
    v78 = &v76;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v10, (uint64_t)&v76);
    v11 = v78;
    if (v78 == &v76)
    {
      v12 = 4;
      v11 = &v76;
    }
    else
    {
      if (!v78)
        goto LABEL_53;
      v12 = 5;
    }
    (*((void (**)(void))*v11 + v12))();
LABEL_53:
    v56 = *(_QWORD *)a3;
    v57 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v57)
    {
      v58 = 0;
      v59 = *(_QWORD *)(v56 + 152);
      v60 = *(uint64_t **)v3;
      v61 = *v60;
      v62 = ((unint64_t)(v60[1] - *v60) >> 2) - 1;
      do
      {
        v63 = 0;
        if ((v62 & 0x80000000) == 0)
        {
          v64 = v60[3];
          v65 = v62;
          v66 = v58;
          do
          {
            v67 = ldiv(v66, *(int *)(v61 + 4 * v65));
            v66 = v67.quot;
            v63 += *(_QWORD *)(v64 + 8 * v65--) * v67.rem;
          }
          while (v65 != -1);
        }
        *(float *)(v59 + 4 * v58++) = logf(v9[(int)v63]);
      }
      while (v58 != v57);
    }
    return;
  }
  v29 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v29)
  {
    v30 = *(float **)(*(_QWORD *)a3 + 152);
    do
    {
      v31 = *v9++;
      *v30++ = logf(v31);
      --v29;
    }
    while (v29);
  }
}

void sub_2422E6304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Log1p::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Log1p::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[log1p] Cannot compute log of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = log1pf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = log1pf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422E665C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::LogicalNot::eval(int a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  int **v5;
  int *v6;
  char *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  int *v11;
  mlx::core::scheduler *v12;
  void **v13;
  uint64_t v14;
  int *v15;
  mlx::core::scheduler *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  mlx::core::scheduler *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  mlx::core::scheduler *v24;
  void **v25;
  uint64_t v26;
  uint64_t *v27;
  mlx::core::scheduler *v28;
  void **v29;
  uint64_t v30;
  float *v31;
  mlx::core::scheduler *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  int *v39;
  int v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  int *v44;
  char v45;
  unint64_t v46;
  int *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  float v53;
  float v54;
  int **v55;
  int *v56;
  int *v57;
  int *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  ldiv_t v66;
  int **v67;
  int *v68;
  int *v69;
  int *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  ldiv_t v78;
  unint64_t v79;
  int *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  ldiv_t v87;
  int **v88;
  int *v89;
  int *v90;
  int *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int quot;
  ldiv_t v99;
  unint64_t v100;
  int *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  ldiv_t v108;
  int **v109;
  int *v110;
  int *v111;
  int *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  ldiv_t v120;
  int **v121;
  int *v122;
  int *v123;
  int *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  ldiv_t v132;
  float v133;
  void *v134;
  uint64_t (*v135)(mlx::core::allocator *);
  void **v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::LogicalNot::eval();
  v5 = *a3;
  v6 = (*a3)[7];
  switch((int)v6)
  {
    case 0:
      v7 = *(char **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v134);
        v9 = v136;
        if (v136 == &v134)
        {
          v10 = 4;
          v9 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_91;
          v10 = 5;
        }
        (*((void (**)(void))*v9 + v10))();
LABEL_91:
        v88 = *a3;
        v89 = (*a3)[6];
        if (v89)
        {
          v90 = 0;
          v91 = v88[19];
          v92 = *(uint64_t **)v3;
          v93 = *v92;
          v94 = ((unint64_t)(v92[1] - *v92) >> 2) - 1;
          do
          {
            v95 = 0;
            if ((v94 & 0x80000000) == 0)
            {
              v96 = v92[3];
              v97 = v94;
              quot = (int)v90;
              do
              {
                v99 = ldiv(quot, *(int *)(v93 + 4 * v97));
                quot = v99.quot;
                v95 += *(_QWORD *)(v96 + 8 * v97--) * v99.rem;
              }
              while (v97 != -1);
            }
            *((_BYTE *)v90 + (_QWORD)v91) = v7[(int)v95] ^ 1;
            v90 = (int *)((char *)v90 + 1);
          }
          while (v90 != v89);
        }
        return;
      }
      v43 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v43)
      {
        v44 = (*a3)[19];
        do
        {
          v45 = *v7++;
          *(_BYTE *)v44 = v45 ^ 1;
          v44 = (int *)((char *)v44 + 1);
          --v43;
        }
        while (v43);
      }
      return;
    case 1:
      v23 = *(_QWORD *)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v24 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data(a3, (uint64_t)v24, (uint64_t)&v134);
        v25 = v136;
        if (v136 == &v134)
        {
          v26 = 4;
          v25 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_100;
          v26 = 5;
        }
        (*((void (**)(void))*v25 + v26))();
LABEL_100:
        if ((*a3)[6])
        {
          v100 = 0;
          v101 = (*a3)[19];
          do
          {
            v102 = **(_QWORD **)v3;
            v103 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v102) >> 2;
            v104 = 0;
            v105 = (v103 - 1);
            if ((int)v103 - 1 >= 0)
            {
              v106 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v107 = v100;
              do
              {
                v108 = ldiv(v107, *(int *)(v102 + 4 * v105));
                v107 = v108.quot;
                v104 += *(_QWORD *)(v106 + 8 * v105--) * v108.rem;
              }
              while (v105 != -1);
            }
            *((_BYTE *)v101 + v100++) = *(_BYTE *)(v23 + (int)v104) == 0;
          }
          while (v100 < (unint64_t)(*a3)[6]);
        }
        return;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v46 = 0;
        v47 = (*a3)[19];
        do
        {
          *((_BYTE *)v47 + v46) = *(_BYTE *)(v23 + v46) == 0;
          ++v46;
        }
        while (v46 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return;
    case 2:
      v15 = *(int **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v16 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data(a3, (uint64_t)v16, (uint64_t)&v134);
        v17 = v136;
        if (v136 == &v134)
        {
          v18 = 4;
          v17 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_73;
          v18 = 5;
        }
        (*((void (**)(void))*v17 + v18))();
LABEL_73:
        v67 = *a3;
        v68 = (*a3)[6];
        if (v68)
        {
          v69 = 0;
          v70 = v67[19];
          v71 = *(uint64_t **)v3;
          v72 = *v71;
          v73 = ((unint64_t)(v71[1] - *v71) >> 2) - 1;
          do
          {
            v74 = 0;
            if ((v73 & 0x80000000) == 0)
            {
              v75 = v71[3];
              v76 = v73;
              v77 = (int)v69;
              do
              {
                v78 = ldiv(v77, *(int *)(v72 + 4 * v76));
                v77 = v78.quot;
                v74 += *(_QWORD *)(v75 + 8 * v76--) * v78.rem;
              }
              while (v76 != -1);
            }
            v70[(_QWORD)v69] = v15[(int)v74] == 0;
            v69 = (int *)((char *)v69 + 1);
          }
          while (v69 != v68);
        }
        return;
      }
      v38 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v38)
      {
        v39 = (*a3)[19];
        do
        {
          v40 = *v15++;
          *v39++ = v40 == 0;
          --v38;
        }
        while (v38);
      }
      return;
    case 3:
      v19 = *(_QWORD *)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v20 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data(a3, (uint64_t)v20, (uint64_t)&v134);
        v21 = v136;
        if (v136 == &v134)
        {
          v22 = 4;
          v21 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_82;
          v22 = 5;
        }
        (*((void (**)(void))*v21 + v22))();
LABEL_82:
        if ((*a3)[6])
        {
          v79 = 0;
          v80 = (*a3)[19];
          do
          {
            v81 = **(_QWORD **)v3;
            v82 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v81) >> 2;
            v83 = 0;
            v84 = (v82 - 1);
            if ((int)v82 - 1 >= 0)
            {
              v85 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v86 = v79;
              do
              {
                v87 = ldiv(v86, *(int *)(v81 + 4 * v84));
                v86 = v87.quot;
                v83 += *(_QWORD *)(v85 + 8 * v84--) * v87.rem;
              }
              while (v84 != -1);
            }
            *((_BYTE *)v80 + v79++) = *(_BYTE *)(v19 + (int)v83) == 0;
          }
          while (v79 < (unint64_t)(*a3)[6]);
        }
        return;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v41 = 0;
        v42 = (*a3)[19];
        do
        {
          *((_BYTE *)v42 + v41) = *(_BYTE *)(v19 + v41) == 0;
          ++v41;
        }
        while (v41 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return;
    case 4:
      v11 = *(int **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v12 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data(a3, (uint64_t)v12, (uint64_t)&v134);
        v13 = v136;
        if (v136 == &v134)
        {
          v14 = 4;
          v13 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_64;
          v14 = 5;
        }
        (*((void (**)(void))*v13 + v14))();
LABEL_64:
        v55 = *a3;
        v56 = (*a3)[6];
        if (v56)
        {
          v57 = 0;
          v58 = v55[19];
          v59 = *(uint64_t **)v3;
          v60 = *v59;
          v61 = ((unint64_t)(v59[1] - *v59) >> 2) - 1;
          do
          {
            v62 = 0;
            if ((v61 & 0x80000000) == 0)
            {
              v63 = v59[3];
              v64 = v61;
              v65 = (int)v57;
              do
              {
                v66 = ldiv(v65, *(int *)(v60 + 4 * v64));
                v65 = v66.quot;
                v62 += *(_QWORD *)(v63 + 8 * v64--) * v66.rem;
              }
              while (v64 != -1);
            }
            v58[(_QWORD)v57] = v11[(int)v62] == 0;
            v57 = (int *)((char *)v57 + 1);
          }
          while (v57 != v56);
        }
        return;
      }
      v35 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v35)
      {
        v36 = (*a3)[19];
        do
        {
          v37 = *v11++;
          *v36++ = v37 == 0;
          --v35;
        }
        while (v35);
      }
      return;
    case 5:
      v27 = *(uint64_t **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v28 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data(a3, (uint64_t)v28, (uint64_t)&v134);
        v29 = v136;
        if (v136 == &v134)
        {
          v30 = 4;
          v29 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_109;
          v30 = 5;
        }
        (*((void (**)(void))*v29 + v30))();
LABEL_109:
        v109 = *a3;
        v110 = (*a3)[6];
        if (v110)
        {
          v111 = 0;
          v112 = v109[19];
          v113 = *(uint64_t **)v3;
          v114 = *v113;
          v115 = ((unint64_t)(v113[1] - *v113) >> 2) - 1;
          do
          {
            v116 = 0;
            if ((v115 & 0x80000000) == 0)
            {
              v117 = v113[3];
              v118 = v115;
              v119 = (int)v111;
              do
              {
                v120 = ldiv(v119, *(int *)(v114 + 4 * v118));
                v119 = v120.quot;
                v116 += *(_QWORD *)(v117 + 8 * v118--) * v120.rem;
              }
              while (v118 != -1);
            }
            *(_QWORD *)&v112[2 * (_QWORD)v111] = v27[(int)v116] == 0;
            v111 = (int *)((char *)v111 + 1);
          }
          while (v111 != v110);
        }
        return;
      }
      v48 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v48)
      {
        v49 = (*a3)[19];
        do
        {
          v50 = *v27++;
          *(_QWORD *)v49 = v50 == 0;
          v49 += 2;
          --v48;
        }
        while (v48);
      }
      return;
    case 6:
      v31 = *(float **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v32 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data(a3, (uint64_t)v32, (uint64_t)&v134);
        v33 = v136;
        if (v136 == &v134)
        {
          v34 = 4;
          v33 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_118;
          v34 = 5;
        }
        (*((void (**)(void))*v33 + v34))();
LABEL_118:
        v121 = *a3;
        v122 = (*a3)[6];
        if (v122)
        {
          v123 = 0;
          v124 = v121[19];
          v125 = *(uint64_t **)v3;
          v126 = *v125;
          v127 = ((unint64_t)(v125[1] - *v125) >> 2) - 1;
          do
          {
            v128 = 0;
            if ((v127 & 0x80000000) == 0)
            {
              v129 = v125[3];
              v130 = v127;
              v131 = (int)v123;
              do
              {
                v132 = ldiv(v131, *(int *)(v126 + 4 * v130));
                v131 = v132.quot;
                v128 += *(_QWORD *)(v129 + 8 * v130--) * v132.rem;
              }
              while (v130 != -1);
            }
            if (v31[(int)v128] == 0.0)
              v133 = 1.0;
            else
              v133 = 0.0;
            *(float *)&v124[(_QWORD)v123] = v133;
            v123 = (int *)((char *)v123 + 1);
          }
          while (v123 != v122);
        }
        return;
      }
      v51 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v51)
      {
        v52 = (float *)(*a3)[19];
        do
        {
          v53 = *v31++;
          if (v53 == 0.0)
            v54 = 1.0;
          else
            v54 = 0.0;
          *v52++ = v54;
          --v51;
        }
        while (v51);
      }
      return;
    default:
      return;
  }
}

void sub_2422E7058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::LogicalAnd::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::LogicalAnd::eval();
}

void mlx::core::`anonymous namespace'::binary<mlx::core::detail::LogicalAnd>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  BOOL v7;
  int v8;
  int v9;
  char *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  char v17;
  int v18;
  int v19;
  int *v20;
  int *v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  char v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  char *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  int v52;
  int v53;
  BOOL v54;
  char v55;
  int v56;
  int v57;
  char *v58;
  unsigned __int8 *v59;
  unsigned int v60;
  int v61;
  int v62;
  BOOL v63;
  char v64;
  int v65;
  char *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  char v74;
  _QWORD *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  char *v84;
  unsigned __int8 *v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  BOOL v90;
  char v91;
  int v92;
  char *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  BOOL v101;
  char v102;
  _QWORD *v103;
  _QWORD *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int *v113;
  int *v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  BOOL v119;
  int v120;
  int v121;
  int *v122;
  int *v123;
  int *v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  BOOL v130;
  int v131;
  _QWORD *v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  char *v141;
  unsigned __int8 *v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  BOOL v147;
  char v148;
  int v149;
  char *v150;
  unsigned __int8 *v151;
  int v152;
  unsigned int v153;
  int v154;
  int v155;
  BOOL v156;
  char v157;
  int v158;
  char *v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  BOOL v167;
  char v168;
  _QWORD *v169;
  _QWORD *v170;
  int *v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  unsigned int v177;
  int v178;
  int *v179;
  int *v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  BOOL v185;
  int v186;
  int v187;
  int *v188;
  int *v189;
  int v190;
  unsigned int v191;
  int v192;
  int v193;
  BOOL v194;
  int v195;
  int v196;
  int *v197;
  int *v198;
  int *v199;
  unsigned int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  BOOL v205;
  int v206;
  _QWORD *v207;
  _QWORD *v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  unsigned int v215;
  int v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  BOOL v223;
  uint64_t v224;
  int v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  int v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t *v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  int *v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  int v251;
  int v252;
  unsigned int v253;
  int v254;
  float *v255;
  float *v256;
  float v257;
  unsigned int v258;
  _BOOL4 v259;
  float v260;
  int v261;
  float *v262;
  float *v263;
  float v264;
  unsigned int v265;
  _BOOL4 v266;
  float v267;
  int v268;
  float *v269;
  float *v270;
  float *v271;
  unsigned int v272;
  float v273;
  float v274;
  float v275;
  _BOOL4 v276;
  _QWORD *v277;
  int *v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  int v282;
  int v283;
  unsigned int v284;
  int **v285;
  int *v286;
  uint64_t v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  _QWORD *v292;
  int *v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  unsigned int v299;
  int **v300;
  int *v301;
  uint64_t v302;
  int v303;
  int v304;
  int v305;
  unsigned int v306;
  _QWORD *v307;
  int *v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  int v313;
  unsigned int v314;
  _QWORD *v315;
  int *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int v320;
  int v321;
  unsigned int v322;
  _QWORD *v323;
  int *v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  int v328;
  int v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  int v341;
  unsigned int v342;
  int v343;
  unsigned int v344;
  int v345;
  unsigned int v346;
  int v347;
  int v348;
  int v349;
  unsigned int v350;
  int v351;
  int v352;
  int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  unint64_t v359;
  int v360;
  int v361;
  int v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  BOOL v373;
  char v374;
  uint64_t v375;
  _BYTE *v376;
  _BYTE *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  BOOL v381;
  char v382;
  unint64_t v383;
  int v384;
  int v385;
  int v386;
  unint64_t v387;
  int v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  BOOL v397;
  char v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int *v403;
  uint64_t v404;
  BOOL v405;
  char v406;
  unint64_t v407;
  int v408;
  int v409;
  int v410;
  unint64_t v411;
  int v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unsigned int v420;
  BOOL v421;
  int v422;
  uint64_t v423;
  _DWORD *v424;
  _DWORD *v425;
  int *v426;
  uint64_t v427;
  uint64_t v428;
  BOOL v429;
  int v430;
  unint64_t v431;
  int v432;
  int v433;
  int v434;
  unint64_t v435;
  int v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int *v441;
  uint64_t v442;
  uint64_t v443;
  unsigned int v444;
  BOOL v445;
  char v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int *v451;
  uint64_t v452;
  BOOL v453;
  char v454;
  unint64_t v455;
  int v456;
  int v457;
  int v458;
  unint64_t v459;
  int v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int v468;
  BOOL v469;
  int v470;
  uint64_t v471;
  _DWORD *v472;
  _DWORD *v473;
  int *v474;
  uint64_t v475;
  uint64_t v476;
  BOOL v477;
  int v478;
  unint64_t v479;
  int v480;
  int v481;
  int v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unsigned int v492;
  BOOL v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  _QWORD *v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  BOOL v501;
  uint64_t v502;
  unint64_t v503;
  int v504;
  int v505;
  int v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unsigned int v516;
  _BOOL4 v517;
  uint64_t v518;
  float *v519;
  float *v520;
  float *v521;
  uint64_t v522;
  uint64_t v523;
  _BOOL4 v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  ldiv_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  ldiv_t v535;
  BOOL v536;
  char v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  char *v557;
  uint64_t v558;
  BOOL v559;
  char v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  _QWORD *v570;
  uint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  BOOL v584;
  char v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  _QWORD *v594;
  _QWORD *v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  BOOL v610;
  char v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  ldiv_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  ldiv_t v627;
  BOOL v628;
  char v629;
  int v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int *v636;
  uint64_t v637;
  unint64_t v638;
  BOOL v639;
  char v640;
  _QWORD *v641;
  uint64_t v642;
  int *v643;
  uint64_t v644;
  unint64_t v645;
  int v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  int *v652;
  uint64_t v653;
  unint64_t v654;
  unint64_t v655;
  BOOL v656;
  char v657;
  _QWORD *v658;
  uint64_t v659;
  int *v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  unint64_t v664;
  int v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  int *v671;
  uint64_t v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  BOOL v676;
  char v677;
  _QWORD *v678;
  uint64_t v679;
  int *v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  unint64_t v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  int v691;
  ldiv_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  int v696;
  ldiv_t v697;
  BOOL v698;
  int v699;
  int v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t *v711;
  uint64_t v712;
  uint64_t v713;
  int v714;
  unint64_t i;
  BOOL v716;
  int v717;
  uint64_t v718;
  int v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t *v730;
  uint64_t v731;
  uint64_t v732;
  int v733;
  int v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t v737;
  int v738;
  unint64_t j;
  BOOL v740;
  int v741;
  uint64_t v742;
  uint64_t v743;
  int v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  int v759;
  unint64_t v760;
  uint64_t v761;
  uint64_t v762;
  int v763;
  int v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  unint64_t k;
  BOOL v770;
  int v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  int v782;
  ldiv_t v783;
  uint64_t v784;
  unint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  int v789;
  ldiv_t v790;
  BOOL v791;
  char v792;
  int v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  int *v799;
  uint64_t v800;
  unint64_t v801;
  BOOL v802;
  char v803;
  _QWORD *v804;
  uint64_t v805;
  int *v806;
  uint64_t v807;
  unint64_t v808;
  int v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  int *v815;
  uint64_t v816;
  unint64_t v817;
  unint64_t v818;
  BOOL v819;
  char v820;
  _QWORD *v821;
  uint64_t v822;
  int *v823;
  uint64_t v824;
  unint64_t v825;
  uint64_t v826;
  unint64_t v827;
  int v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  int *v834;
  uint64_t v835;
  unint64_t v836;
  unint64_t v837;
  unint64_t v838;
  BOOL v839;
  char v840;
  _QWORD *v841;
  uint64_t v842;
  int *v843;
  uint64_t v844;
  unint64_t v845;
  uint64_t v846;
  unint64_t v847;
  unint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  int v854;
  ldiv_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  int v859;
  ldiv_t v860;
  BOOL v861;
  int v862;
  int v863;
  unint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t *v874;
  uint64_t v875;
  uint64_t v876;
  int v877;
  unint64_t m;
  BOOL v879;
  int v880;
  uint64_t v881;
  int v882;
  unint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t *v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t *v893;
  uint64_t v894;
  uint64_t v895;
  int v896;
  int v897;
  unint64_t v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  unint64_t n;
  BOOL v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  int v907;
  unint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t *v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t *v918;
  uint64_t v919;
  uint64_t v920;
  int v921;
  int v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  int v926;
  int v927;
  unint64_t v928;
  uint64_t v929;
  uint64_t v930;
  int v931;
  unint64_t ii;
  BOOL v933;
  int v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  int v943;
  ldiv_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  int v948;
  ldiv_t v949;
  BOOL v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  unint64_t v960;
  uint64_t *v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t *v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t *v971;
  uint64_t v972;
  BOOL v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  _QWORD *v984;
  uint64_t v985;
  _QWORD *v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  unint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  BOOL v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  unint64_t v1007;
  _QWORD *v1008;
  _QWORD *v1009;
  uint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  unint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  BOOL v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  int v1031;
  ldiv_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  int v1036;
  ldiv_t v1037;
  _BOOL4 v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  unint64_t v1047;
  uint64_t *v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t *v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  float *v1058;
  uint64_t v1059;
  _BOOL4 v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  unint64_t v1069;
  _QWORD *v1070;
  uint64_t v1071;
  _QWORD *v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  unint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  _BOOL4 v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  _QWORD *v1093;
  _QWORD *v1094;
  uint64_t v1095;
  uint64_t v1096;
  unint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  unint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  _BOOL4 v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  int v1119;
  unsigned int v1120;
  BOOL v1121;
  char v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  int v1132;
  unsigned int v1133;
  BOOL v1134;
  char v1135;
  int v1136;
  unint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  int *v1141;
  uint64_t v1142;
  uint64_t v1143;
  int v1144;
  unsigned int v1145;
  BOOL v1146;
  char v1147;
  int v1148;
  unint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  int *v1153;
  uint64_t v1154;
  uint64_t v1155;
  int v1156;
  unsigned int v1157;
  BOOL v1158;
  char v1159;
  int v1160;
  unint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  int v1169;
  unsigned int v1170;
  BOOL v1171;
  int v1172;
  int v1173;
  unint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  int v1182;
  unsigned int v1183;
  BOOL v1184;
  int v1185;
  int v1186;
  unint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  int *v1191;
  uint64_t v1192;
  uint64_t v1193;
  int v1194;
  unsigned int v1195;
  BOOL v1196;
  char v1197;
  int v1198;
  unint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  int *v1203;
  uint64_t v1204;
  uint64_t v1205;
  int v1206;
  unsigned int v1207;
  BOOL v1208;
  char v1209;
  int v1210;
  unint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  int v1219;
  unsigned int v1220;
  BOOL v1221;
  int v1222;
  int v1223;
  unint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  int v1232;
  unsigned int v1233;
  BOOL v1234;
  int v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  unsigned int v1246;
  BOOL v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  unsigned int v1259;
  BOOL v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  float v1271;
  unsigned int v1272;
  _BOOL4 v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  float v1283;
  unsigned int v1284;
  _BOOL4 v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  unint64_t v1293;
  uint64_t *v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t *v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  unsigned int v1307;
  BOOL v1308;
  char v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  int v1313;
  ldiv_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  int v1318;
  ldiv_t v1319;
  uint64_t v1320;
  unsigned int v1321;
  BOOL v1322;
  char v1323;
  int v1324;
  unint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  int *v1329;
  uint64_t v1330;
  unint64_t v1331;
  uint64_t v1332;
  unsigned int v1333;
  BOOL v1334;
  char v1335;
  _QWORD *v1336;
  uint64_t v1337;
  unint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  unint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  int v1345;
  ldiv_t v1346;
  uint64_t v1347;
  unint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  int v1352;
  ldiv_t v1353;
  uint64_t v1354;
  unsigned int v1355;
  BOOL v1356;
  char v1357;
  int v1358;
  unint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t *v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t *v1368;
  uint64_t v1369;
  uint64_t v1370;
  int v1371;
  int v1372;
  unint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  unsigned int v1377;
  BOOL v1378;
  int v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  int v1385;
  ldiv_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  int v1390;
  ldiv_t v1391;
  uint64_t v1392;
  unsigned int v1393;
  BOOL v1394;
  int v1395;
  int v1396;
  unint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  int *v1401;
  uint64_t v1402;
  unint64_t v1403;
  uint64_t v1404;
  unsigned int v1405;
  BOOL v1406;
  char v1407;
  _QWORD *v1408;
  uint64_t v1409;
  unint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  unint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  int v1417;
  ldiv_t v1418;
  uint64_t v1419;
  unint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  int v1424;
  ldiv_t v1425;
  uint64_t v1426;
  unsigned int v1427;
  BOOL v1428;
  char v1429;
  int v1430;
  unint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t *v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t *v1440;
  uint64_t v1441;
  uint64_t v1442;
  int v1443;
  int v1444;
  unint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  unsigned int v1449;
  BOOL v1450;
  int v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  int v1457;
  ldiv_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  int v1462;
  ldiv_t v1463;
  uint64_t v1464;
  unsigned int v1465;
  BOOL v1466;
  int v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  unint64_t v1475;
  uint64_t *v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t *v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  unsigned int v1489;
  BOOL v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  int v1496;
  ldiv_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  int v1501;
  ldiv_t v1502;
  uint64_t v1503;
  unsigned int v1504;
  BOOL v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  unint64_t v1514;
  uint64_t *v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t *v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  unsigned int v1528;
  _BOOL4 v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  int v1534;
  ldiv_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  int v1539;
  ldiv_t v1540;
  uint64_t v1541;
  unsigned int v1542;
  _BOOL4 v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  unint64_t v1551;
  uint64_t *v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t *v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  int v1564;
  unsigned int v1565;
  BOOL v1566;
  char v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  int quot;
  ldiv_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  int v1576;
  ldiv_t v1577;
  uint64_t v1578;
  int v1579;
  unsigned int v1580;
  BOOL v1581;
  char v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  unint64_t v1590;
  uint64_t *v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t *v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  int v1603;
  unsigned int v1604;
  BOOL v1605;
  char v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  int v1610;
  ldiv_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  int v1615;
  ldiv_t v1616;
  uint64_t v1617;
  int v1618;
  unsigned int v1619;
  BOOL v1620;
  char v1621;
  int v1622;
  unint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  int *v1627;
  uint64_t v1628;
  unint64_t v1629;
  uint64_t v1630;
  int v1631;
  unsigned int v1632;
  BOOL v1633;
  char v1634;
  _QWORD *v1635;
  uint64_t v1636;
  unint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  unint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  int v1644;
  ldiv_t v1645;
  uint64_t v1646;
  unint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  int v1651;
  ldiv_t v1652;
  uint64_t v1653;
  int v1654;
  unsigned int v1655;
  BOOL v1656;
  char v1657;
  int v1658;
  unint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  int *v1663;
  uint64_t v1664;
  unint64_t v1665;
  uint64_t v1666;
  int v1667;
  unsigned int v1668;
  BOOL v1669;
  char v1670;
  _QWORD *v1671;
  uint64_t v1672;
  unint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  unint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  int v1680;
  ldiv_t v1681;
  uint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  int v1687;
  ldiv_t v1688;
  uint64_t v1689;
  int v1690;
  unsigned int v1691;
  BOOL v1692;
  char v1693;
  int v1694;
  unint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t *v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t *v1704;
  uint64_t v1705;
  uint64_t v1706;
  int v1707;
  int v1708;
  unint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  int v1712;
  unsigned int v1713;
  BOOL v1714;
  int v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  int v1721;
  ldiv_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  int v1726;
  ldiv_t v1727;
  uint64_t v1728;
  int v1729;
  unsigned int v1730;
  BOOL v1731;
  int v1732;
  int v1733;
  unint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t *v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t *v1743;
  uint64_t v1744;
  uint64_t v1745;
  int v1746;
  int v1747;
  unint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  int v1751;
  unsigned int v1752;
  BOOL v1753;
  int v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  int v1760;
  ldiv_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  int v1765;
  ldiv_t v1766;
  uint64_t v1767;
  int v1768;
  unsigned int v1769;
  BOOL v1770;
  int v1771;
  int v1772;
  unint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  int *v1777;
  uint64_t v1778;
  unint64_t v1779;
  uint64_t v1780;
  int v1781;
  unsigned int v1782;
  BOOL v1783;
  char v1784;
  _QWORD *v1785;
  uint64_t v1786;
  unint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  int v1794;
  ldiv_t v1795;
  uint64_t v1796;
  unint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  int v1801;
  ldiv_t v1802;
  uint64_t v1803;
  int v1804;
  unsigned int v1805;
  BOOL v1806;
  char v1807;
  int v1808;
  unint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  int *v1813;
  uint64_t v1814;
  unint64_t v1815;
  uint64_t v1816;
  int v1817;
  unsigned int v1818;
  BOOL v1819;
  char v1820;
  _QWORD *v1821;
  uint64_t v1822;
  unint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  unint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  int v1830;
  ldiv_t v1831;
  uint64_t v1832;
  unint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  int v1837;
  ldiv_t v1838;
  uint64_t v1839;
  int v1840;
  unsigned int v1841;
  BOOL v1842;
  char v1843;
  int v1844;
  unint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t *v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t *v1854;
  uint64_t v1855;
  uint64_t v1856;
  int v1857;
  int v1858;
  unint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  int v1862;
  unsigned int v1863;
  BOOL v1864;
  int v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  int v1871;
  ldiv_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  int v1876;
  ldiv_t v1877;
  uint64_t v1878;
  int v1879;
  unsigned int v1880;
  BOOL v1881;
  int v1882;
  int v1883;
  unint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t *v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t *v1893;
  uint64_t v1894;
  uint64_t v1895;
  int v1896;
  int v1897;
  unint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  int v1901;
  unsigned int v1902;
  BOOL v1903;
  int v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  int v1910;
  ldiv_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  int v1915;
  ldiv_t v1916;
  uint64_t v1917;
  int v1918;
  unsigned int v1919;
  BOOL v1920;
  int v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  unint64_t v1929;
  uint64_t *v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t *v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  unsigned int v1943;
  BOOL v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  int v1950;
  ldiv_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  int v1955;
  ldiv_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  unsigned int v1959;
  BOOL v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  unint64_t v1969;
  uint64_t *v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t *v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  unsigned int v1983;
  BOOL v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  int v1990;
  ldiv_t v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  int v1995;
  ldiv_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  unsigned int v1999;
  BOOL v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  unint64_t v2009;
  uint64_t *v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t *v2013;
  uint64_t v2014;
  uint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  float v2022;
  unsigned int v2023;
  _BOOL4 v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  int v2029;
  ldiv_t v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  int v2034;
  ldiv_t v2035;
  uint64_t v2036;
  float v2037;
  unsigned int v2038;
  _BOOL4 v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  unint64_t v2047;
  uint64_t *v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t *v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  float v2060;
  unsigned int v2061;
  _BOOL4 v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  int v2067;
  ldiv_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  int v2072;
  ldiv_t v2073;
  uint64_t v2074;
  float v2075;
  unsigned int v2076;
  _BOOL4 v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  uint64_t v2083;
  uint64_t v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  uint64_t v2091;
  uint64_t v2092;
  uint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  uint64_t v2102;
  uint64_t v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  unsigned int v2107;
  unsigned int v2108;
  uint64_t v2109;
  uint64_t v2110;
  unsigned int v2111;
  unsigned int v2112;
  unsigned int v2113;
  unsigned int v2114;
  uint64_t v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  int *v2123;
  int *v2124;
  int *v2125;
  int *v2126;
  int *v2127;
  int *v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t v2133;
  unint64_t v2134;
  uint64_t v2135;
  uint64_t v2136;
  unint64_t v2137;
  uint64_t v2138;
  unint64_t v2139;
  uint64_t v2140;
  unint64_t v2141;
  unint64_t v2142;
  unint64_t v2143;
  unint64_t v2144;
  unint64_t v2145;
  uint64_t v2146;
  uint64_t v2147;
  unint64_t v2148;
  unint64_t v2149;
  uint64_t v2150;
  uint64_t v2151;
  unint64_t v2152;
  unint64_t v2153;
  unint64_t v2154;
  unint64_t v2155;
  unint64_t v2156;
  unint64_t v2157;
  uint64_t v2158;
  unint64_t v2159;
  uint64_t v2160;
  uint64_t v2161;
  uint64_t v2162;
  uint64_t v2163;
  uint64_t v2164;
  unint64_t v2165;
  unint64_t v2166;
  uint64_t v2167;
  unint64_t v2168;
  uint64_t v2169;
  unint64_t v2170;
  unint64_t v2171;
  unint64_t v2172;
  unint64_t v2173;
  unint64_t v2174;
  uint64_t v2175;
  uint64_t v2176;
  unint64_t v2177;
  unint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  unint64_t v2181;
  unint64_t v2182;
  unint64_t v2183;
  unint64_t v2184;
  unint64_t v2185;
  unint64_t v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  uint64_t v2190;
  uint64_t v2191;
  uint64_t v2192;
  int *v2193;
  int *v2194;
  int v2195;
  uint64_t v2196;
  unint64_t v2197;
  unint64_t v2198;
  unint64_t v2199;
  unint64_t v2200;
  unint64_t v2201;
  unint64_t v2202;
  uint64_t v2203;
  uint64_t v2204;
  uint64_t v2205;
  uint64_t v2206;
  uint64_t v2207;
  uint64_t v2208;
  uint64_t v2209;
  uint64_t v2210;
  uint64_t v2211;
  uint64_t v2212;
  uint64_t v2213;
  uint64_t v2214;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          if (**(_BYTE **)(*a1 + 152))
            v7 = **(_BYTE **)(*a2 + 152) == 0;
          else
            v7 = 1;
          goto LABEL_32;
        case 1:
          v47 = *(_DWORD *)(*a2 + 160);
          if (v47 >= 1)
          {
            v48 = **(unsigned __int8 **)(*a1 + 152);
            v49 = *(char **)(*(_QWORD *)a3 + 152);
            v50 = *(unsigned __int8 **)(*a2 + 152);
            v51 = v47 + 1;
            do
            {
              v53 = *v50++;
              v52 = v53;
              if (v48)
                v54 = v52 == 0;
              else
                v54 = 1;
              v55 = !v54;
              *v49++ = v55;
              --v51;
            }
            while (v51 > 1);
          }
          return;
        case 2:
          v56 = *(_DWORD *)(*a1 + 160);
          if (v56 >= 1)
          {
            v57 = **(unsigned __int8 **)(*a2 + 152);
            v58 = *(char **)(*(_QWORD *)a3 + 152);
            v59 = *(unsigned __int8 **)(*a1 + 152);
            v60 = v56 + 1;
            do
            {
              v62 = *v59++;
              v61 = v62;
              if (v57)
                v63 = v61 == 0;
              else
                v63 = 1;
              v64 = !v63;
              *v58++ = v64;
              --v60;
            }
            while (v60 > 1);
          }
          return;
        case 3:
          v65 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v65 >= 1)
          {
            v66 = *(char **)(*(_QWORD *)a3 + 152);
            v67 = *(unsigned __int8 **)(*a2 + 152);
            v68 = *(unsigned __int8 **)(*a1 + 152);
            v69 = v65 + 1;
            do
            {
              v70 = *v68++;
              v7 = v70 == 0;
              v72 = *v67++;
              v71 = v72;
              v74 = !v7 && v71 != 0;
              *v66++ = v74;
              --v69;
            }
            while (v69 > 1);
          }
          return;
        default:
          v38 = *(_QWORD **)a3;
          v39 = (_QWORD *)*a1;
          v40 = *(int **)*a1;
          v41 = (v39[1] - (_QWORD)v40) >> 2;
          v42 = (v41 - 1);
          if ((int)v42 >= -1)
            v43 = -1;
          else
            v43 = v41 - 1;
          v44 = v43 + 1;
          v45 = v41 + 1;
          break;
      }
      while (1)
      {
        v46 = v45 - 2;
        if (v45 - 2 < 0)
          break;
        --v45;
        if (*(_QWORD *)(v39[3] + 8 * v46) != *(_QWORD *)(v38[3] + 8 * v46))
          goto LABEL_282;
      }
      v45 = v44;
LABEL_282:
      v277 = (_QWORD *)*a2;
      v278 = *(int **)*a2;
      v279 = (v277[1] - (_QWORD)v278) >> 2;
      v280 = (v279 - 1);
      if ((int)v280 >= -1)
        v281 = -1;
      else
        v281 = v279 - 1;
      v282 = v281 + 1;
      v283 = v279 + 1;
      while (1)
      {
        v284 = v283 - 2;
        if (v283 - 2 < 0)
          break;
        --v283;
        if (*(_QWORD *)(v277[3] + 8 * v284) != *(_QWORD *)(v38[3] + 8 * v284))
          goto LABEL_336;
      }
      v283 = v282;
LABEL_336:
      v331 = v41 + 1;
      while (1)
      {
        v332 = v331 - 2;
        if (v331 - 2 < 0)
          break;
        --v331;
        if (*(_QWORD *)(v39[3] + 8 * v332))
          goto LABEL_371;
      }
      v331 = v44;
LABEL_371:
      v345 = v279 + 1;
      while (1)
      {
        v346 = v345 - 2;
        if (v345 - 2 < 0)
          break;
        --v345;
        if (*(_QWORD *)(v277[3] + 8 * v346))
          goto LABEL_406;
      }
      v345 = v282;
LABEL_406:
      v359 = (uint64_t)(v38[1] - *v38) >> 2;
      if (v45 <= v283)
        v360 = v283;
      else
        v360 = v45;
      if (v45 <= v345)
        v45 = v345;
      if (v331 > v283)
        v283 = v331;
      if (v359 > v283)
      {
        v361 = 1;
      }
      else
      {
        v283 = (uint64_t)(v38[1] - *v38) >> 2;
        v361 = 4;
      }
      if (v359 > v45)
      {
        v362 = 2;
      }
      else
      {
        v45 = v283;
        v362 = v361;
      }
      if (v359 > v360)
      {
        v45 = v360;
        v362 = 3;
      }
      v2187 = v280;
      v2203 = v42;
      if (!v45)
        goto LABEL_441;
      v363 = *(_QWORD *)(v38[3] + 8 * (v45 - 1));
      if (v363 < 0x10)
        goto LABEL_441;
      switch(v362)
      {
        case 1:
          if (v45 == 2)
          {
            v1544 = *v40;
            if ((_DWORD)v1544)
            {
              v1545 = 0;
              v1546 = 0;
              v1547 = 0;
              v1548 = v39[19];
              v1549 = v277[19];
              v1550 = v38[19];
              v1551 = v40[1];
              v1552 = (uint64_t *)v39[3];
              v1553 = *v1552;
              v1554 = v1552[1];
              v1555 = (uint64_t *)v277[3];
              v1557 = *v1555;
              v1556 = v1555[1];
              if (v1551 <= 1)
                v1558 = 1;
              else
                v1558 = v40[1];
              v1559 = v1553 - v1554 * v1551;
              v1560 = v1557 - v1556 * v278[1];
              do
              {
                if ((_DWORD)v1551)
                {
                  v1561 = 0;
                  v1562 = v1549 + v1546;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      v1563 = 0;
                      v1564 = *(unsigned __int8 *)(v1548 + v1547);
                      v1565 = v363 + 1;
                      do
                      {
                        if (v1564)
                          v1566 = *(_BYTE *)(v1562 + v1563) == 0;
                        else
                          v1566 = 1;
                        v1567 = !v1566;
                        *(_BYTE *)(v1550 + v1563) = v1567;
                        --v1565;
                        ++v1563;
                      }
                      while (v1565 > 1);
                    }
                    v1547 += v1554;
                    v1546 += v1556;
                    v1550 += (int)v363;
                    ++v1561;
                    v1562 += v1556;
                  }
                  while (v1561 != v1558);
                }
                v1547 += v1559;
                v1546 += v1560;
                ++v1545;
              }
              while (v1545 != v1544);
            }
          }
          else if (v45 == 1)
          {
            v1110 = *v40;
            if ((_DWORD)v1110)
            {
              v1111 = 0;
              v1112 = 0;
              v1113 = v39[19];
              v1114 = v277[19];
              v1115 = v38[19];
              v1116 = *(_QWORD *)v39[3];
              v1117 = *(_QWORD *)v277[3];
              do
              {
                if ((int)v363 >= 1)
                {
                  v1118 = 0;
                  v1119 = *(unsigned __int8 *)(v1113 + v1112);
                  v1120 = v363 + 1;
                  do
                  {
                    if (v1119)
                      v1121 = *(_BYTE *)(v1114 + v1118) == 0;
                    else
                      v1121 = 1;
                    v1122 = !v1121;
                    *(_BYTE *)(v1115 + v1118) = v1122;
                    --v1120;
                    ++v1118;
                  }
                  while (v1120 > 1);
                }
                v1112 += v1116;
                v1115 += (int)v363;
                ++v1111;
                v1114 += v1117;
              }
              while (v1111 != v1110);
            }
          }
          else
          {
            v2144 = v38[6];
            if (v2144)
            {
              v2173 = 0;
              v2095 = v277[19];
              v2109 = v39[19];
              v1568 = v38[19];
              do
              {
                v1569 = 0;
                if ((v42 & 0x80000000) == 0)
                {
                  v1570 = v39[3];
                  quot = v2173;
                  do
                  {
                    v1572 = ldiv(quot, v40[v42]);
                    quot = v1572.quot;
                    v1569 += *(_QWORD *)(v1570 + 8 * v42--) * v1572.rem;
                  }
                  while (v42 != -1);
                }
                v1573 = v2187;
                if ((v2187 & 0x80000000) != 0)
                {
                  LODWORD(v1574) = 0;
                }
                else
                {
                  v1574 = 0;
                  v1575 = v277[3];
                  v1576 = v2173;
                  do
                  {
                    v1577 = ldiv(v1576, v278[v1573]);
                    v1576 = v1577.quot;
                    v1574 += *(_QWORD *)(v1575 + 8 * v1573--) * v1577.rem;
                  }
                  while (v1573 != -1);
                }
                v42 = v2203;
                if ((int)v363 >= 1)
                {
                  v1578 = 0;
                  v1579 = *(unsigned __int8 *)(v2109 + (int)v1569);
                  v1580 = v363 + 1;
                  do
                  {
                    if (v1579)
                      v1581 = *(_BYTE *)(v2095 + (int)v1574 + v1578) == 0;
                    else
                      v1581 = 1;
                    v1582 = !v1581;
                    *(_BYTE *)(v1568 + v1578) = v1582;
                    --v1580;
                    ++v1578;
                  }
                  while (v1580 > 1);
                }
                v1568 += (int)v363;
                v2173 += (int)v363;
              }
              while (v2173 < v2144);
            }
          }
          break;
        case 2:
          if (v45 == 2)
          {
            v1583 = *v40;
            if ((_DWORD)v1583)
            {
              v1584 = 0;
              v1585 = 0;
              v1586 = 0;
              v1587 = v39[19];
              v1588 = v277[19];
              v1589 = v38[19];
              v1590 = v40[1];
              v1591 = (uint64_t *)v39[3];
              v1592 = *v1591;
              v1593 = v1591[1];
              v1594 = (uint64_t *)v277[3];
              v1596 = *v1594;
              v1595 = v1594[1];
              if (v1590 <= 1)
                v1597 = 1;
              else
                v1597 = v40[1];
              v1598 = v1592 - v1593 * v1590;
              v1599 = v1596 - v1595 * v278[1];
              do
              {
                if ((_DWORD)v1590)
                {
                  v1600 = 0;
                  v1601 = v1587 + v1586;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      v1602 = 0;
                      v1603 = *(unsigned __int8 *)(v1588 + v1585);
                      v1604 = v363 + 1;
                      do
                      {
                        if (v1603)
                          v1605 = *(_BYTE *)(v1601 + v1602) == 0;
                        else
                          v1605 = 1;
                        v1606 = !v1605;
                        *(_BYTE *)(v1589 + v1602) = v1606;
                        --v1604;
                        ++v1602;
                      }
                      while (v1604 > 1);
                    }
                    v1586 += v1593;
                    v1585 += v1595;
                    v1589 += (int)v363;
                    ++v1600;
                    v1601 += v1593;
                  }
                  while (v1600 != v1597);
                }
                v1586 += v1598;
                v1585 += v1599;
                ++v1584;
              }
              while (v1584 != v1583);
            }
          }
          else if (v45 == 1)
          {
            v1123 = *v40;
            if ((_DWORD)v1123)
            {
              v1124 = 0;
              v1125 = 0;
              v1126 = v39[19];
              v1127 = v277[19];
              v1128 = v38[19];
              v1129 = *(_QWORD *)v39[3];
              v1130 = *(_QWORD *)v277[3];
              do
              {
                if ((int)v363 >= 1)
                {
                  v1131 = 0;
                  v1132 = *(unsigned __int8 *)(v1127 + v1125);
                  v1133 = v363 + 1;
                  do
                  {
                    if (v1132)
                      v1134 = *(_BYTE *)(v1126 + v1131) == 0;
                    else
                      v1134 = 1;
                    v1135 = !v1134;
                    *(_BYTE *)(v1128 + v1131) = v1135;
                    --v1133;
                    ++v1131;
                  }
                  while (v1133 > 1);
                }
                v1125 += v1130;
                v1128 += (int)v363;
                ++v1124;
                v1126 += v1129;
              }
              while (v1124 != v1123);
            }
          }
          else
          {
            v2145 = v38[6];
            if (v2145)
            {
              v2174 = 0;
              v2096 = v277[19];
              v2110 = v39[19];
              v1607 = v38[19];
              do
              {
                v1608 = 0;
                if ((v42 & 0x80000000) == 0)
                {
                  v1609 = v39[3];
                  v1610 = v2174;
                  do
                  {
                    v1611 = ldiv(v1610, v40[v42]);
                    v1610 = v1611.quot;
                    v1608 += *(_QWORD *)(v1609 + 8 * v42--) * v1611.rem;
                  }
                  while (v42 != -1);
                }
                v1612 = v2187;
                if ((v2187 & 0x80000000) != 0)
                {
                  LODWORD(v1613) = 0;
                }
                else
                {
                  v1613 = 0;
                  v1614 = v277[3];
                  v1615 = v2174;
                  do
                  {
                    v1616 = ldiv(v1615, v278[v1612]);
                    v1615 = v1616.quot;
                    v1613 += *(_QWORD *)(v1614 + 8 * v1612--) * v1616.rem;
                  }
                  while (v1612 != -1);
                }
                v42 = v2203;
                if ((int)v363 >= 1)
                {
                  v1617 = 0;
                  v1618 = *(unsigned __int8 *)(v2096 + (int)v1613);
                  v1619 = v363 + 1;
                  do
                  {
                    if (v1618)
                      v1620 = *(_BYTE *)(v2110 + (int)v1608 + v1617) == 0;
                    else
                      v1620 = 1;
                    v1621 = !v1620;
                    *(_BYTE *)(v1607 + v1617) = v1621;
                    --v1619;
                    ++v1617;
                  }
                  while (v1619 > 1);
                }
                v1607 += (int)v363;
                v2174 += (int)v363;
              }
              while (v2174 < v2145);
            }
          }
          break;
        case 3:
          if (v45 == 2)
          {
            v1286 = *v40;
            if ((_DWORD)v1286)
            {
              v1287 = 0;
              v1288 = 0;
              v1289 = 0;
              v1290 = v39[19];
              v1291 = v277[19];
              v1292 = v38[19];
              v1293 = v40[1];
              v1294 = (uint64_t *)v39[3];
              v1295 = *v1294;
              v1296 = v1294[1];
              v1297 = (uint64_t *)v277[3];
              v1299 = *v1297;
              v1298 = v1297[1];
              if (v1293 <= 1)
                v1300 = 1;
              else
                v1300 = v40[1];
              v1301 = v1295 - v1296 * v1293;
              v1302 = v1299 - v1298 * v278[1];
              do
              {
                if ((_DWORD)v1293)
                {
                  v1303 = 0;
                  v1304 = v1291 + v1288;
                  v1305 = v1290 + v1289;
                  do
                  {
                    if ((int)v363 >= 1)
                    {
                      v1306 = 0;
                      v1307 = v363 + 1;
                      do
                      {
                        if (*(_BYTE *)(v1305 + v1306))
                          v1308 = *(_BYTE *)(v1304 + v1306) == 0;
                        else
                          v1308 = 1;
                        v1309 = !v1308;
                        *(_BYTE *)(v1292 + v1306) = v1309;
                        --v1307;
                        ++v1306;
                      }
                      while (v1307 > 1);
                    }
                    v1289 += v1296;
                    v1288 += v1298;
                    v1292 += (int)v363;
                    ++v1303;
                    v1304 += v1298;
                    v1305 += v1296;
                  }
                  while (v1303 != v1300);
                }
                v1289 += v1301;
                v1288 += v1302;
                ++v1287;
              }
              while (v1287 != v1286);
            }
          }
          else if (v45 == 1)
          {
            v364 = *v40;
            if ((_DWORD)v364)
            {
              v365 = 0;
              v366 = v39[19];
              v367 = v277[19];
              v368 = v38[19];
              v369 = *(_QWORD *)v39[3];
              v370 = *(_QWORD *)v277[3];
              do
              {
                if ((int)v363 >= 1)
                {
                  v371 = 0;
                  v372 = v363 + 1;
                  do
                  {
                    if (*(_BYTE *)(v366 + v371))
                      v373 = *(_BYTE *)(v367 + v371) == 0;
                    else
                      v373 = 1;
                    v374 = !v373;
                    *(_BYTE *)(v368 + v371) = v374;
                    --v372;
                    ++v371;
                  }
                  while (v372 > 1);
                }
                v368 += (int)v363;
                ++v365;
                v367 += v370;
                v366 += v369;
              }
              while (v365 != v364);
            }
          }
          else
          {
            v2137 = v38[6];
            if (v2137)
            {
              v2166 = 0;
              v2090 = v277[19];
              v2106 = v39[19];
              v1310 = v38[19];
              do
              {
                v1311 = 0;
                if ((v42 & 0x80000000) == 0)
                {
                  v1312 = v39[3];
                  v1313 = v2166;
                  do
                  {
                    v1314 = ldiv(v1313, v40[v42]);
                    v1313 = v1314.quot;
                    v1311 += *(_QWORD *)(v1312 + 8 * v42--) * v1314.rem;
                  }
                  while (v42 != -1);
                }
                v1315 = v2187;
                if ((v2187 & 0x80000000) != 0)
                {
                  LODWORD(v1316) = 0;
                }
                else
                {
                  v1316 = 0;
                  v1317 = v277[3];
                  v1318 = v2166;
                  do
                  {
                    v1319 = ldiv(v1318, v278[v1315]);
                    v1318 = v1319.quot;
                    v1316 += *(_QWORD *)(v1317 + 8 * v1315--) * v1319.rem;
                  }
                  while (v1315 != -1);
                }
                v42 = v2203;
                if ((int)v363 >= 1)
                {
                  v1320 = 0;
                  v1321 = v363 + 1;
                  do
                  {
                    if (*(_BYTE *)(v2106 + (int)v1311 + v1320))
                      v1322 = *(_BYTE *)(v2090 + (int)v1316 + v1320) == 0;
                    else
                      v1322 = 1;
                    v1323 = !v1322;
                    *(_BYTE *)(v1310 + v1320) = v1323;
                    --v1321;
                    ++v1320;
                  }
                  while (v1321 > 1);
                }
                v1310 += (int)v363;
                v2166 += (int)v363;
              }
              while (v2166 < v2137);
            }
          }
          break;
        default:
LABEL_441:
          switch(v359)
          {
            case 1uLL:
              v375 = v38[6];
              if (v375)
              {
                v376 = (_BYTE *)v39[19];
                v377 = (_BYTE *)v277[19];
                v378 = (char *)v38[19];
                v379 = *(_QWORD *)v39[3];
                v380 = *(_QWORD *)v277[3];
                do
                {
                  if (*v376)
                    v381 = *v377 == 0;
                  else
                    v381 = 1;
                  v382 = !v381;
                  *v378++ = v382;
                  v377 += v380;
                  v376 += v379;
                  --v375;
                }
                while (v375);
              }
              break;
            case 2uLL:
              v538 = *v40;
              if ((_DWORD)v538)
              {
                v539 = 0;
                v540 = 0;
                v541 = 0;
                v542 = 0;
                v543 = v39[19];
                v544 = v277[19];
                v545 = v38[19];
                v546 = v40[1];
                v547 = (uint64_t *)v39[3];
                v548 = *v547;
                v549 = v547[1];
                v550 = (uint64_t *)v277[3];
                v551 = *v550;
                v552 = v550[1];
                v553 = v551 - v552 * v278[1];
                if (v546 <= 1)
                  v554 = 1;
                else
                  v554 = v40[1];
                v555 = v548 - v549 * v546;
                do
                {
                  if ((_DWORD)v546)
                  {
                    v556 = v540 + v554;
                    v557 = (char *)(v545 + v540);
                    v558 = v554;
                    do
                    {
                      if (*(_BYTE *)(v543 + v542))
                        v559 = *(_BYTE *)(v544 + v541) == 0;
                      else
                        v559 = 1;
                      v560 = !v559;
                      *v557++ = v560;
                      v542 += v549;
                      v541 += v552;
                      --v558;
                    }
                    while (v558);
                    v540 = v556;
                  }
                  v542 += v555;
                  v541 += v553;
                  ++v539;
                }
                while (v539 != v538);
              }
              break;
            case 3uLL:
              v561 = *v40;
              if ((_DWORD)v561)
              {
                v562 = 0;
                v563 = 0;
                v564 = 0;
                v565 = 0;
                v566 = v39[19];
                v567 = v277[19];
                v568 = v38[19];
                v569 = v40[1];
                v570 = (_QWORD *)v39[3];
                v571 = v570[1];
                v572 = (_QWORD *)v277[3];
                v573 = v572[1];
                v574 = *v572 - v573 * v278[1];
                if (v569 <= 1)
                  v575 = 1;
                else
                  v575 = v40[1];
                v576 = *v570 - v571 * v569;
                do
                {
                  if ((_DWORD)v569)
                  {
                    v577 = 0;
                    v578 = v40[2];
                    v579 = v570[2];
                    v580 = v572[2];
                    if (v578 <= 1)
                      v581 = 1;
                    else
                      v581 = v40[2];
                    v582 = v573 - v580 * v278[2];
                    do
                    {
                      v583 = v581;
                      if ((_DWORD)v578)
                      {
                        do
                        {
                          if (*(_BYTE *)(v566 + v565))
                            v584 = *(_BYTE *)(v567 + v564) == 0;
                          else
                            v584 = 1;
                          v585 = !v584;
                          *(_BYTE *)(v568 + v563++) = v585;
                          v565 += v579;
                          v564 += v580;
                          --v583;
                        }
                        while (v583);
                      }
                      v565 += v571 - v579 * v578;
                      v564 += v582;
                      ++v577;
                    }
                    while (v577 != v575);
                  }
                  v565 += v576;
                  v564 += v574;
                  ++v562;
                }
                while (v562 != v561);
              }
              break;
            case 4uLL:
              v2210 = *v40;
              if ((_DWORD)v2210)
              {
                v586 = 0;
                v587 = 0;
                v588 = 0;
                v589 = 0;
                v590 = v39[19];
                v591 = v277[19];
                v592 = v38[19];
                v593 = v40[1];
                v594 = (_QWORD *)v39[3];
                v595 = (_QWORD *)v277[3];
                v2116 = v595[1];
                v2130 = v594[1];
                if (v593 <= 1)
                  v596 = 1;
                else
                  v596 = v40[1];
                v2159 = *v594 - v594[1] * v593;
                v2192 = *v595 - v2116 * v278[1];
                do
                {
                  if ((_DWORD)v593)
                  {
                    v597 = 0;
                    v598 = v40[2];
                    v599 = v594[2];
                    v600 = v595[2];
                    if (v598 <= 1)
                      v601 = 1;
                    else
                      v601 = v40[2];
                    v602 = v2116 - v600 * v278[2];
                    do
                    {
                      if ((_DWORD)v598)
                      {
                        v603 = 0;
                        v604 = v40[3];
                        v605 = v594[3];
                        v606 = v595[3];
                        if (v604 <= 1)
                          v607 = 1;
                        else
                          v607 = v40[3];
                        v608 = v600 - v606 * v278[3];
                        do
                        {
                          v609 = v607;
                          if ((_DWORD)v604)
                          {
                            do
                            {
                              if (*(_BYTE *)(v590 + v589))
                                v610 = *(_BYTE *)(v591 + v588) == 0;
                              else
                                v610 = 1;
                              v611 = !v610;
                              *(_BYTE *)(v592 + v587++) = v611;
                              v589 += v605;
                              v588 += v606;
                              --v609;
                            }
                            while (v609);
                          }
                          v589 += v599 - v605 * v604;
                          v588 += v608;
                          ++v603;
                        }
                        while (v603 != v601);
                      }
                      v589 += v2130 - v599 * v598;
                      v588 += v602;
                      ++v597;
                    }
                    while (v597 != v596);
                  }
                  v589 += v2159;
                  v588 += v2192;
                  ++v586;
                }
                while (v586 != v2210);
              }
              break;
            default:
              v525 = v38[6];
              if (v525)
              {
                v526 = 0;
                v2129 = v277[19];
                v2158 = v39[19];
                v2115 = v38[19];
                do
                {
                  v527 = 0;
                  if ((v42 & 0x80000000) == 0)
                  {
                    v528 = v39[3];
                    v529 = v526;
                    do
                    {
                      v530 = ldiv(v529, v40[v42]);
                      v529 = v530.quot;
                      v527 += *(_QWORD *)(v528 + 8 * v42--) * v530.rem;
                    }
                    while (v42 != -1);
                  }
                  v531 = v2187;
                  if ((v2187 & 0x80000000) != 0)
                  {
                    LODWORD(v532) = 0;
                  }
                  else
                  {
                    v532 = 0;
                    v533 = v277[3];
                    v534 = v526;
                    do
                    {
                      v535 = ldiv(v534, v278[v531]);
                      v534 = v535.quot;
                      v532 += *(_QWORD *)(v533 + 8 * v531--) * v535.rem;
                    }
                    while (v531 != -1);
                  }
                  if (*(_BYTE *)(v2158 + (int)v527))
                    v536 = *(_BYTE *)(v2129 + (int)v532) == 0;
                  else
                    v536 = 1;
                  v537 = !v536;
                  *(_BYTE *)(v2115 + v526++) = v537;
                  v42 = v2203;
                }
                while (v526 != v525);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_29;
        case 1:
          v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            v10 = *(char **)(*(_QWORD *)a3 + 152);
            v11 = *(unsigned __int8 **)(*a2 + 152);
            v12 = **(unsigned __int8 **)(*a1 + 152);
            v13 = v9 + 1;
            do
            {
              v15 = *v11++;
              v14 = v15;
              if (v12)
                v16 = v14 == 0;
              else
                v16 = 1;
              v17 = !v16;
              *v10++ = v17;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          v83 = *(_DWORD *)(*a1 + 160);
          if (v83 >= 1)
          {
            v84 = *(char **)(*(_QWORD *)a3 + 152);
            v85 = *(unsigned __int8 **)(*a1 + 152);
            v86 = **(unsigned __int8 **)(*a2 + 152);
            v87 = v83 + 1;
            do
            {
              v89 = *v85++;
              v88 = v89;
              if (v86)
                v90 = v88 == 0;
              else
                v90 = 1;
              v91 = !v90;
              *v84++ = v91;
              --v87;
            }
            while (v87 > 1);
          }
          return;
        case 3:
          v92 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v92 >= 1)
          {
            v93 = *(char **)(*(_QWORD *)a3 + 152);
            v94 = *(unsigned __int8 **)(*a2 + 152);
            v95 = *(unsigned __int8 **)(*a1 + 152);
            v96 = v92 + 1;
            do
            {
              v98 = *v95++;
              v97 = v98;
              v100 = *v94++;
              v99 = v100;
              if (v97)
                v101 = v99 == 0;
              else
                v101 = 1;
              v102 = !v101;
              *v93++ = v102;
              --v96;
            }
            while (v96 > 1);
          }
          return;
        default:
          v75 = *(_QWORD **)a3;
          v76 = *a1;
          v77 = *(int **)*a1;
          v78 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v77) >> 2;
          v79 = v78 - 1;
          if ((int)v78 - 1 >= -1)
            v79 = -1;
          v80 = v79 + 1;
          v81 = v78 + 1;
          break;
      }
      while (1)
      {
        v82 = v81 - 2;
        if (v81 - 2 < 0)
          break;
        --v81;
        if (*(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v82) != *(_QWORD *)(v75[3] + 8 * v82))
          goto LABEL_290;
      }
      v81 = v80;
LABEL_290:
      v285 = (int **)*a2;
      v286 = *(int **)*a2;
      v287 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v286) >> 2;
      v288 = v287 - 1;
      if ((int)v287 - 1 >= -1)
        v288 = -1;
      v289 = v288 + 1;
      v290 = v287 + 1;
      while (1)
      {
        v291 = v290 - 2;
        if (v290 - 2 < 0)
          break;
        --v290;
        if (*(_QWORD *)&v285[3][2 * v291] != *(_QWORD *)(v75[3] + 8 * v291))
          goto LABEL_341;
      }
      v290 = v289;
LABEL_341:
      v333 = v78 + 1;
      while (1)
      {
        v334 = v333 - 2;
        if (v333 - 2 < 0)
          break;
        --v333;
        if (*(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v334))
          goto LABEL_376;
      }
      v333 = v80;
LABEL_376:
      v347 = v287 + 1;
      while (1)
      {
        v348 = v347 - 2;
        if (v347 - 2 < 0)
          break;
        --v347;
        if (*(_QWORD *)&v285[3][2 * v348])
          goto LABEL_453;
      }
      v347 = v289;
LABEL_453:
      v383 = (uint64_t)(v75[1] - *v75) >> 2;
      if (v81 <= v290)
        v384 = v290;
      else
        v384 = v81;
      if (v81 <= v347)
        v81 = v347;
      if (v333 > v290)
        v290 = v333;
      if (v383 > v290)
      {
        v385 = 1;
      }
      else
      {
        v290 = (uint64_t)(v75[1] - *v75) >> 2;
        v385 = 4;
      }
      if (v383 > v81)
      {
        v386 = 2;
      }
      else
      {
        v81 = v290;
        v386 = v385;
      }
      if (v383 > v384)
      {
        v81 = v384;
        v386 = 3;
      }
      if (!v81)
        goto LABEL_489;
      v387 = *(_QWORD *)(v75[3] + 8 * (v81 - 1));
      if (v387 < 0x10)
        goto LABEL_489;
      v2204 = *(_QWORD *)(v75[3] + 8 * (v81 - 1));
      switch(v386)
      {
        case 1:
          if (v81 == 2)
          {
            v1622 = *v77;
            if (*v77)
            {
              v1623 = 0;
              v1624 = 0;
              v1625 = 0;
              v1626 = *(_QWORD *)(v76 + 152);
              v1627 = v285[19];
              v1628 = v75[19];
              do
              {
                if (v77[1])
                {
                  v1629 = 0;
                  do
                  {
                    if ((int)v387 >= 1)
                    {
                      v1630 = 0;
                      v1631 = *(unsigned __int8 *)(v1626 + v1625);
                      v1632 = v387 + 1;
                      do
                      {
                        if (v1631)
                          v1633 = *((_BYTE *)v1627 + v1624 + v1630) == 0;
                        else
                          v1633 = 1;
                        v1634 = !v1633;
                        *(_BYTE *)(v1628 + v1630) = v1634;
                        --v1632;
                        ++v1630;
                      }
                      while (v1632 > 1);
                      v76 = *a1;
                      v285 = (int **)*a2;
                      v77 = *(int **)*a1;
                    }
                    v1635 = *(_QWORD **)(v76 + 24);
                    v1636 = v1635[1];
                    v1625 += v1636;
                    v1624 += *((_QWORD *)v285[3] + 1);
                    v1628 += (int)v387;
                    ++v1629;
                    v1637 = v77[1];
                  }
                  while (v1629 < v1637);
                  v1622 = *v77;
                  v286 = *v285;
                }
                else
                {
                  v1637 = 0;
                  v1635 = *(_QWORD **)(v76 + 24);
                  v1636 = v1635[1];
                }
                v1625 = *v1635 + v1625 - v1637 * v1636;
                v1624 = *(_QWORD *)v285[3] + v1624 - *((_QWORD *)v285[3] + 1) * v286[1];
                ++v1623;
              }
              while (v1623 < v1622);
            }
          }
          else if (v81 == 1)
          {
            v1136 = *v77;
            if (*v77)
            {
              v1137 = 0;
              v1138 = 0;
              v1139 = 0;
              v1140 = *(_QWORD *)(v76 + 152);
              v1141 = v285[19];
              v1142 = v75[19];
              do
              {
                if ((int)v387 >= 1)
                {
                  v1143 = 0;
                  v1144 = *(unsigned __int8 *)(v1140 + v1139);
                  v1145 = v387 + 1;
                  do
                  {
                    if (v1144)
                      v1146 = *((_BYTE *)v1141 + v1138 + v1143) == 0;
                    else
                      v1146 = 1;
                    v1147 = !v1146;
                    *(_BYTE *)(v1142 + v1143) = v1147;
                    --v1145;
                    ++v1143;
                  }
                  while (v1145 > 1);
                  v76 = *a1;
                  v285 = (int **)*a2;
                  v1136 = **(_DWORD **)*a1;
                }
                v1139 += **(_QWORD **)(v76 + 24);
                v1138 += *(_QWORD *)v285[3];
                v1142 += (int)v387;
                ++v1137;
              }
              while (v1137 < v1136);
            }
          }
          else if (v75[6])
          {
            v2125 = v285[19];
            v2146 = *(_QWORD *)(v76 + 152);
            v2175 = (int)v387;
            v2199 = 0;
            v2111 = v387 + 1;
            v1638 = v75[19];
            do
            {
              v1639 = *(_QWORD *)*a1;
              v1640 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1639) >> 2;
              v1641 = 0;
              v1642 = (v1640 - 1);
              if ((int)v1640 - 1 >= 0)
              {
                v1643 = *(_QWORD *)(*a1 + 24);
                v1644 = v2199;
                do
                {
                  v1645 = ldiv(v1644, *(int *)(v1639 + 4 * v1642));
                  v1644 = v1645.quot;
                  v1641 += *(_QWORD *)(v1643 + 8 * v1642--) * v1645.rem;
                }
                while (v1642 != -1);
              }
              v1646 = *(_QWORD *)*a2;
              v1647 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1646) >> 2;
              v1648 = 0;
              v1649 = (v1647 - 1);
              if ((int)v1647 - 1 >= 0)
              {
                v1650 = *(_QWORD *)(*a2 + 24);
                v1651 = v2199;
                do
                {
                  v1652 = ldiv(v1651, *(int *)(v1646 + 4 * v1649));
                  v1651 = v1652.quot;
                  v1648 += *(_QWORD *)(v1650 + 8 * v1649--) * v1652.rem;
                }
                while (v1649 != -1);
              }
              if ((int)v2204 >= 1)
              {
                v1653 = 0;
                v1654 = *(unsigned __int8 *)(v2146 + (int)v1641);
                v1655 = v2111;
                do
                {
                  if (v1654)
                    v1656 = *((_BYTE *)v2125 + (int)v1648 + v1653) == 0;
                  else
                    v1656 = 1;
                  v1657 = !v1656;
                  *(_BYTE *)(v1638 + v1653) = v1657;
                  --v1655;
                  ++v1653;
                }
                while (v1655 > 1);
                v75 = *(_QWORD **)a3;
              }
              v1638 += v2175;
              v2199 += v2175;
            }
            while (v2199 < v75[6]);
          }
          break;
        case 2:
          if (v81 == 2)
          {
            v1658 = *v77;
            if (*v77)
            {
              v1659 = 0;
              v1660 = 0;
              v1661 = 0;
              v1662 = *(_QWORD *)(v76 + 152);
              v1663 = v285[19];
              v1664 = v75[19];
              do
              {
                if (v77[1])
                {
                  v1665 = 0;
                  do
                  {
                    if ((int)v387 >= 1)
                    {
                      v1666 = 0;
                      v1667 = *((unsigned __int8 *)v1663 + v1660);
                      v1668 = v387 + 1;
                      do
                      {
                        if (v1667)
                          v1669 = *(_BYTE *)(v1662 + v1661 + v1666) == 0;
                        else
                          v1669 = 1;
                        v1670 = !v1669;
                        *(_BYTE *)(v1664 + v1666) = v1670;
                        --v1668;
                        ++v1666;
                      }
                      while (v1668 > 1);
                      v76 = *a1;
                      v285 = (int **)*a2;
                      v77 = *(int **)*a1;
                    }
                    v1671 = *(_QWORD **)(v76 + 24);
                    v1672 = v1671[1];
                    v1661 += v1672;
                    v1660 += *((_QWORD *)v285[3] + 1);
                    v1664 += (int)v387;
                    ++v1665;
                    v1673 = v77[1];
                  }
                  while (v1665 < v1673);
                  v1658 = *v77;
                  v286 = *v285;
                }
                else
                {
                  v1673 = 0;
                  v1671 = *(_QWORD **)(v76 + 24);
                  v1672 = v1671[1];
                }
                v1661 = *v1671 + v1661 - v1673 * v1672;
                v1660 = *(_QWORD *)v285[3] + v1660 - *((_QWORD *)v285[3] + 1) * v286[1];
                ++v1659;
              }
              while (v1659 < v1658);
            }
          }
          else if (v81 == 1)
          {
            v1148 = *v77;
            if (*v77)
            {
              v1149 = 0;
              v1150 = 0;
              v1151 = 0;
              v1152 = *(_QWORD *)(v76 + 152);
              v1153 = v285[19];
              v1154 = v75[19];
              do
              {
                if ((int)v387 >= 1)
                {
                  v1155 = 0;
                  v1156 = *((unsigned __int8 *)v1153 + v1150);
                  v1157 = v387 + 1;
                  do
                  {
                    if (v1156)
                      v1158 = *(_BYTE *)(v1152 + v1151 + v1155) == 0;
                    else
                      v1158 = 1;
                    v1159 = !v1158;
                    *(_BYTE *)(v1154 + v1155) = v1159;
                    --v1157;
                    ++v1155;
                  }
                  while (v1157 > 1);
                  v76 = *a1;
                  v285 = (int **)*a2;
                  v1148 = **(_DWORD **)*a1;
                }
                v1151 += **(_QWORD **)(v76 + 24);
                v1150 += *(_QWORD *)v285[3];
                v1154 += (int)v387;
                ++v1149;
              }
              while (v1149 < v1148);
            }
          }
          else if (v75[6])
          {
            v2126 = v285[19];
            v2147 = *(_QWORD *)(v76 + 152);
            v2176 = (int)v387;
            v2200 = 0;
            v2112 = v387 + 1;
            v1674 = v75[19];
            do
            {
              v1675 = *(_QWORD *)*a1;
              v1676 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1675) >> 2;
              v1677 = 0;
              v1678 = (v1676 - 1);
              if ((int)v1676 - 1 >= 0)
              {
                v1679 = *(_QWORD *)(*a1 + 24);
                v1680 = v2200;
                do
                {
                  v1681 = ldiv(v1680, *(int *)(v1675 + 4 * v1678));
                  v1680 = v1681.quot;
                  v1677 += *(_QWORD *)(v1679 + 8 * v1678--) * v1681.rem;
                }
                while (v1678 != -1);
              }
              v1682 = *(_QWORD *)*a2;
              v1683 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1682) >> 2;
              v1684 = 0;
              v1685 = (v1683 - 1);
              if ((int)v1683 - 1 >= 0)
              {
                v1686 = *(_QWORD *)(*a2 + 24);
                v1687 = v2200;
                do
                {
                  v1688 = ldiv(v1687, *(int *)(v1682 + 4 * v1685));
                  v1687 = v1688.quot;
                  v1684 += *(_QWORD *)(v1686 + 8 * v1685--) * v1688.rem;
                }
                while (v1685 != -1);
              }
              if ((int)v2204 >= 1)
              {
                v1689 = 0;
                v1690 = *((unsigned __int8 *)v2126 + (int)v1684);
                v1691 = v2112;
                do
                {
                  if (v1690)
                    v1692 = *(_BYTE *)(v2147 + (int)v1677 + v1689) == 0;
                  else
                    v1692 = 1;
                  v1693 = !v1692;
                  *(_BYTE *)(v1674 + v1689) = v1693;
                  --v1691;
                  ++v1689;
                }
                while (v1691 > 1);
                v75 = *(_QWORD **)a3;
              }
              v1674 += v2176;
              v2200 += v2176;
            }
            while (v2200 < v75[6]);
          }
          break;
        case 3:
          if (v81 == 2)
          {
            v1324 = *v77;
            if (*v77)
            {
              v1325 = 0;
              v1326 = 0;
              v1327 = 0;
              v1328 = *(_QWORD *)(v76 + 152);
              v1329 = v285[19];
              v1330 = v75[19];
              do
              {
                if (v77[1])
                {
                  v1331 = 0;
                  do
                  {
                    if ((int)v387 >= 1)
                    {
                      v1332 = 0;
                      v1333 = v387 + 1;
                      do
                      {
                        if (*(_BYTE *)(v1328 + v1327 + v1332))
                          v1334 = *((_BYTE *)v1329 + v1326 + v1332) == 0;
                        else
                          v1334 = 1;
                        v1335 = !v1334;
                        *(_BYTE *)(v1330 + v1332) = v1335;
                        --v1333;
                        ++v1332;
                      }
                      while (v1333 > 1);
                      v76 = *a1;
                      v285 = (int **)*a2;
                      v77 = *(int **)*a1;
                    }
                    v1336 = *(_QWORD **)(v76 + 24);
                    v1337 = v1336[1];
                    v1327 += v1337;
                    v1326 += *((_QWORD *)v285[3] + 1);
                    v1330 += (int)v387;
                    ++v1331;
                    v1338 = v77[1];
                  }
                  while (v1331 < v1338);
                  v1324 = *v77;
                  v286 = *v285;
                }
                else
                {
                  v1338 = 0;
                  v1336 = *(_QWORD **)(v76 + 24);
                  v1337 = v1336[1];
                }
                v1327 = *v1336 + v1327 - v1338 * v1337;
                v1326 = *(_QWORD *)v285[3] + v1326 - *((_QWORD *)v285[3] + 1) * v286[1];
                ++v1325;
              }
              while (v1325 < v1324);
            }
          }
          else if (v81 == 1)
          {
            v388 = *v77;
            if (*v77)
            {
              v389 = 0;
              v390 = 0;
              v391 = 0;
              v392 = *(_QWORD *)(v76 + 152);
              v393 = v285[19];
              v394 = v75[19];
              do
              {
                if ((int)v387 >= 1)
                {
                  v395 = 0;
                  v396 = v387 + 1;
                  do
                  {
                    if (*(_BYTE *)(v392 + v391 + v395))
                      v397 = *((_BYTE *)v393 + v390 + v395) == 0;
                    else
                      v397 = 1;
                    v398 = !v397;
                    *(_BYTE *)(v394 + v395) = v398;
                    --v396;
                    ++v395;
                  }
                  while (v396 > 1);
                  v76 = *a1;
                  v285 = (int **)*a2;
                  v388 = **(_DWORD **)*a1;
                }
                v391 += **(_QWORD **)(v76 + 24);
                v390 += *(_QWORD *)v285[3];
                v394 += (int)v387;
                ++v389;
              }
              while (v389 < v388);
            }
          }
          else if (v75[6])
          {
            v2123 = v285[19];
            v2138 = *(_QWORD *)(v76 + 152);
            v2167 = (int)v387;
            v2197 = 0;
            v2107 = v387 + 1;
            v1339 = v75[19];
            do
            {
              v1340 = *(_QWORD *)*a1;
              v1341 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1340) >> 2;
              v1342 = 0;
              v1343 = (v1341 - 1);
              if ((int)v1341 - 1 >= 0)
              {
                v1344 = *(_QWORD *)(*a1 + 24);
                v1345 = v2197;
                do
                {
                  v1346 = ldiv(v1345, *(int *)(v1340 + 4 * v1343));
                  v1345 = v1346.quot;
                  v1342 += *(_QWORD *)(v1344 + 8 * v1343--) * v1346.rem;
                }
                while (v1343 != -1);
              }
              v1347 = *(_QWORD *)*a2;
              v1348 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1347) >> 2;
              v1349 = 0;
              v1350 = (v1348 - 1);
              if ((int)v1348 - 1 >= 0)
              {
                v1351 = *(_QWORD *)(*a2 + 24);
                v1352 = v2197;
                do
                {
                  v1353 = ldiv(v1352, *(int *)(v1347 + 4 * v1350));
                  v1352 = v1353.quot;
                  v1349 += *(_QWORD *)(v1351 + 8 * v1350--) * v1353.rem;
                }
                while (v1350 != -1);
              }
              if ((int)v2204 >= 1)
              {
                v1354 = 0;
                v1355 = v2107;
                do
                {
                  if (*(_BYTE *)(v2138 + (int)v1342 + v1354))
                    v1356 = *((_BYTE *)v2123 + (int)v1349 + v1354) == 0;
                  else
                    v1356 = 1;
                  v1357 = !v1356;
                  *(_BYTE *)(v1339 + v1354) = v1357;
                  --v1355;
                  ++v1354;
                }
                while (v1355 > 1);
                v75 = *(_QWORD **)a3;
              }
              v1339 += v2167;
              v2197 += v2167;
            }
            while (v2197 < v75[6]);
          }
          break;
        default:
LABEL_489:
          switch(v383)
          {
            case 1uLL:
              if (v75[6])
              {
                v399 = 0;
                v400 = 0;
                v401 = 0;
                v402 = *(_QWORD *)(v76 + 152);
                v403 = v285[19];
                v404 = v75[19];
                do
                {
                  if (*(_BYTE *)(v402 + v401))
                    v405 = *((_BYTE *)v403 + v400) == 0;
                  else
                    v405 = 1;
                  v406 = !v405;
                  *(_BYTE *)(v404 + v399) = v406;
                  v401 += **(_QWORD **)(*a1 + 24);
                  v400 += **(_QWORD **)(*a2 + 24);
                  ++v399;
                }
                while (v399 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v630 = *v77;
              if (*v77)
              {
                v631 = 0;
                v632 = 0;
                v633 = 0;
                v634 = 0;
                v635 = *(_QWORD *)(v76 + 152);
                v636 = v285[19];
                v637 = v75[19];
                do
                {
                  if (v77[1])
                  {
                    v638 = 0;
                    do
                    {
                      if (*(_BYTE *)(v635 + v634))
                        v639 = *((_BYTE *)v636 + v633) == 0;
                      else
                        v639 = 1;
                      v640 = !v639;
                      *(_BYTE *)(v637 + v632 + v638) = v640;
                      v76 = *a1;
                      v641 = *(_QWORD **)(*a1 + 24);
                      v642 = v641[1];
                      v634 += v642;
                      v285 = (int **)*a2;
                      v643 = *(int **)(*a2 + 24);
                      v644 = *((_QWORD *)v643 + 1);
                      v633 += v644;
                      ++v638;
                      v77 = *(int **)*a1;
                      v645 = v77[1];
                    }
                    while (v638 < v645);
                    v630 = *v77;
                    v286 = *v285;
                    v632 += v638;
                  }
                  else
                  {
                    v645 = 0;
                    v641 = *(_QWORD **)(v76 + 24);
                    v642 = v641[1];
                    v643 = v285[3];
                    v644 = *((_QWORD *)v643 + 1);
                  }
                  v634 = *v641 + v634 - v645 * v642;
                  v633 = *(_QWORD *)v643 + v633 - v644 * v286[1];
                  ++v631;
                }
                while (v631 < v630);
              }
              break;
            case 3uLL:
              v646 = *v77;
              if (*v77)
              {
                v647 = 0;
                v648 = 0;
                v649 = 0;
                v650 = 0;
                v651 = *(_QWORD *)(v76 + 152);
                v652 = v285[19];
                v653 = v75[19];
                do
                {
                  if (v77[1])
                  {
                    v654 = 0;
                    do
                    {
                      if (v77[2])
                      {
                        v655 = 0;
                        do
                        {
                          if (*(_BYTE *)(v651 + v650))
                            v656 = *((_BYTE *)v652 + v649) == 0;
                          else
                            v656 = 1;
                          v657 = !v656;
                          *(_BYTE *)(v653 + v648 + v655) = v657;
                          v76 = *a1;
                          v658 = *(_QWORD **)(*a1 + 24);
                          v659 = v658[2];
                          v650 += v659;
                          v285 = (int **)*a2;
                          v660 = *(int **)(*a2 + 24);
                          v661 = *((_QWORD *)v660 + 2);
                          v649 += v661;
                          ++v655;
                          v77 = *(int **)*a1;
                          v662 = v77[2];
                        }
                        while (v655 < v662);
                        v286 = *v285;
                        v648 += v655;
                      }
                      else
                      {
                        v662 = 0;
                        v658 = *(_QWORD **)(v76 + 24);
                        v659 = v658[2];
                        v660 = v285[3];
                        v661 = *((_QWORD *)v660 + 2);
                      }
                      v663 = v658[1];
                      v650 = v663 + v650 - v662 * v659;
                      v649 = *((_QWORD *)v660 + 1) + v649 - v661 * v286[2];
                      ++v654;
                      v664 = v77[1];
                    }
                    while (v654 < v664);
                    v646 = *v77;
                  }
                  else
                  {
                    v664 = 0;
                    v658 = *(_QWORD **)(v76 + 24);
                    v663 = v658[1];
                  }
                  v650 = *v658 + v650 - v664 * v663;
                  v649 = *(_QWORD *)v285[3] + v649 - *((_QWORD *)v285[3] + 1) * v286[1];
                  ++v647;
                }
                while (v647 < v646);
              }
              break;
            case 4uLL:
              v665 = *v77;
              if (*v77)
              {
                v666 = 0;
                v667 = 0;
                v668 = 0;
                v669 = 0;
                v670 = *(_QWORD *)(v76 + 152);
                v671 = v285[19];
                v672 = v75[19];
                do
                {
                  if (v77[1])
                  {
                    v673 = 0;
                    do
                    {
                      if (v77[2])
                      {
                        v674 = 0;
                        do
                        {
                          if (v77[3])
                          {
                            v675 = 0;
                            do
                            {
                              if (*(_BYTE *)(v670 + v669))
                                v676 = *((_BYTE *)v671 + v668) == 0;
                              else
                                v676 = 1;
                              v677 = !v676;
                              *(_BYTE *)(v672 + v667 + v675) = v677;
                              v76 = *a1;
                              v678 = *(_QWORD **)(*a1 + 24);
                              v679 = v678[3];
                              v669 += v679;
                              v285 = (int **)*a2;
                              v680 = *(int **)(*a2 + 24);
                              v681 = *((_QWORD *)v680 + 3);
                              v668 += v681;
                              ++v675;
                              v77 = *(int **)*a1;
                              v682 = v77[3];
                            }
                            while (v675 < v682);
                            v286 = *v285;
                            v667 += v675;
                          }
                          else
                          {
                            v682 = 0;
                            v678 = *(_QWORD **)(v76 + 24);
                            v679 = v678[3];
                            v680 = v285[3];
                            v681 = *((_QWORD *)v680 + 3);
                          }
                          v683 = v678[2];
                          v669 = v683 + v669 - v682 * v679;
                          v668 = *((_QWORD *)v680 + 2) + v668 - v681 * v286[3];
                          ++v674;
                          v684 = v77[2];
                        }
                        while (v674 < v684);
                      }
                      else
                      {
                        v684 = 0;
                        v678 = *(_QWORD **)(v76 + 24);
                        v683 = v678[2];
                      }
                      v669 = v678[1] + v669 - v684 * v683;
                      v668 = *((_QWORD *)v285[3] + 1) + v668 - *((_QWORD *)v285[3] + 2) * v286[2];
                      ++v673;
                      v685 = v77[1];
                    }
                    while (v673 < v685);
                    v665 = *v77;
                  }
                  else
                  {
                    v685 = 0;
                  }
                  v669 = **(_QWORD **)(v76 + 24) + v669 - *(_QWORD *)(*(_QWORD *)(v76 + 24) + 8) * v685;
                  v668 = *(_QWORD *)v285[3] + v668 - *((_QWORD *)v285[3] + 1) * v286[1];
                  ++v666;
                }
                while (v666 < v665);
              }
              break;
            default:
              if (v75[6])
              {
                v612 = 0;
                v2193 = v285[19];
                v2211 = *(_QWORD *)(v76 + 152);
                v613 = v75[19];
                do
                {
                  v614 = *(_QWORD *)*a1;
                  v615 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v614) >> 2;
                  v616 = 0;
                  v617 = (v615 - 1);
                  if ((int)v615 - 1 >= 0)
                  {
                    v618 = *(_QWORD *)(*a1 + 24);
                    v619 = v612;
                    do
                    {
                      v620 = ldiv(v619, *(int *)(v614 + 4 * v617));
                      v619 = v620.quot;
                      v616 += *(_QWORD *)(v618 + 8 * v617--) * v620.rem;
                    }
                    while (v617 != -1);
                  }
                  v621 = *(_QWORD *)*a2;
                  v622 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v621) >> 2;
                  v623 = 0;
                  v624 = (v622 - 1);
                  if ((int)v622 - 1 >= 0)
                  {
                    v625 = *(_QWORD *)(*a2 + 24);
                    v626 = v612;
                    do
                    {
                      v627 = ldiv(v626, *(int *)(v621 + 4 * v624));
                      v626 = v627.quot;
                      v623 += *(_QWORD *)(v625 + 8 * v624--) * v627.rem;
                    }
                    while (v624 != -1);
                  }
                  if (*(_BYTE *)(v2211 + (int)v616))
                    v628 = *((_BYTE *)v2193 + (int)v623) == 0;
                  else
                    v628 = 1;
                  v629 = !v628;
                  *(_BYTE *)(v613 + v612++) = v629;
                }
                while (v612 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v18)
      {
        case 0:
          goto LABEL_37;
        case 1:
          v19 = *(_DWORD *)(*a2 + 160);
          if (v19 >= 1)
          {
            v20 = *(int **)(*(_QWORD *)a3 + 152);
            v21 = *(int **)(*a2 + 152);
            v22 = **(_DWORD **)(*a1 + 152);
            v23 = v19 + 1;
            do
            {
              v25 = *v21++;
              v24 = v25;
              if (v22)
                v26 = v24 == 0;
              else
                v26 = 1;
              v27 = !v26;
              *v20++ = v27;
              --v23;
            }
            while (v23 > 1);
          }
          return;
        case 2:
          v112 = *(_DWORD *)(*a1 + 160);
          if (v112 >= 1)
          {
            v113 = *(int **)(*(_QWORD *)a3 + 152);
            v114 = *(int **)(*a1 + 152);
            v115 = **(_DWORD **)(*a2 + 152);
            v116 = v112 + 1;
            do
            {
              v118 = *v114++;
              v117 = v118;
              if (v115)
                v119 = v117 == 0;
              else
                v119 = 1;
              v120 = !v119;
              *v113++ = v120;
              --v116;
            }
            while (v116 > 1);
          }
          return;
        case 3:
          v121 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v121 >= 1)
          {
            v122 = *(int **)(*(_QWORD *)a3 + 152);
            v123 = *(int **)(*a2 + 152);
            v124 = *(int **)(*a1 + 152);
            v125 = v121 + 1;
            do
            {
              v127 = *v124++;
              v126 = v127;
              v129 = *v123++;
              v128 = v129;
              if (v126)
                v130 = v128 == 0;
              else
                v130 = 1;
              v131 = !v130;
              *v122++ = v131;
              --v125;
            }
            while (v125 > 1);
          }
          return;
        default:
          v103 = *(_QWORD **)a3;
          v104 = (_QWORD *)*a1;
          v105 = *(int **)*a1;
          v106 = (v104[1] - (_QWORD)v105) >> 2;
          v107 = (v106 - 1);
          if ((int)v107 >= -1)
            v108 = -1;
          else
            v108 = v106 - 1;
          v109 = v108 + 1;
          v110 = v106 + 1;
          break;
      }
      while (1)
      {
        v111 = v110 - 2;
        if (v110 - 2 < 0)
          break;
        --v110;
        if (*(_QWORD *)(v104[3] + 8 * v111) != *(_QWORD *)(v103[3] + 8 * v111))
          goto LABEL_297;
      }
      v110 = v109;
LABEL_297:
      v292 = (_QWORD *)*a2;
      v293 = *(int **)*a2;
      v294 = (v292[1] - (_QWORD)v293) >> 2;
      v295 = (v294 - 1);
      if ((int)v295 >= -1)
        v296 = -1;
      else
        v296 = v294 - 1;
      v297 = v296 + 1;
      v298 = v294 + 1;
      while (1)
      {
        v299 = v298 - 2;
        if (v298 - 2 < 0)
          break;
        --v298;
        if (*(_QWORD *)(v292[3] + 8 * v299) != *(_QWORD *)(v103[3] + 8 * v299))
          goto LABEL_346;
      }
      v298 = v297;
LABEL_346:
      v335 = v106 + 1;
      while (1)
      {
        v336 = v335 - 2;
        if (v335 - 2 < 0)
          break;
        --v335;
        if (*(_QWORD *)(v104[3] + 8 * v336))
          goto LABEL_381;
      }
      v335 = v109;
LABEL_381:
      v349 = v294 + 1;
      while (1)
      {
        v350 = v349 - 2;
        if (v349 - 2 < 0)
          break;
        --v349;
        if (*(_QWORD *)(v292[3] + 8 * v350))
          goto LABEL_501;
      }
      v349 = v297;
LABEL_501:
      v407 = (uint64_t)(v103[1] - *v103) >> 2;
      if (v110 <= v298)
        v408 = v298;
      else
        v408 = v110;
      if (v110 <= v349)
        v110 = v349;
      if (v335 > v298)
        v298 = v335;
      if (v407 > v298)
      {
        v409 = 1;
      }
      else
      {
        v298 = (uint64_t)(v103[1] - *v103) >> 2;
        v409 = 4;
      }
      if (v407 > v110)
      {
        v410 = 2;
      }
      else
      {
        v110 = v298;
        v410 = v409;
      }
      if (v407 > v408)
      {
        v110 = v408;
        v410 = 3;
      }
      v2188 = v295;
      v2205 = v107;
      if (!v110)
        goto LABEL_537;
      v411 = *(_QWORD *)(v103[3] + 8 * (v110 - 1));
      if (v411 < 0x10)
        goto LABEL_537;
      switch(v410)
      {
        case 1:
          if (v110 == 2)
          {
            v1694 = *v105;
            if (*v105)
            {
              v1695 = 0;
              v1696 = 0;
              v1697 = 0;
              v1698 = v104[19];
              v1699 = v292[19];
              v1700 = v103[19];
              v1701 = (uint64_t *)v104[3];
              v1702 = *v1701;
              v1703 = v1701[1];
              v1704 = (uint64_t *)v292[3];
              v1705 = *v1704;
              v1706 = v1704[1];
              v1707 = v105[1];
              v1708 = v1707;
              do
              {
                if (v1708)
                {
                  v1709 = 0;
                  v1710 = v1699 + 4 * v1696;
                  do
                  {
                    if ((int)v411 >= 1)
                    {
                      v1711 = 0;
                      v1712 = *(_DWORD *)(v1698 + 4 * v1697);
                      v1713 = v411 + 1;
                      do
                      {
                        if (v1712)
                          v1714 = *(_DWORD *)(v1710 + v1711) == 0;
                        else
                          v1714 = 1;
                        v1715 = !v1714;
                        *(_DWORD *)(v1700 + v1711) = v1715;
                        --v1713;
                        v1711 += 4;
                      }
                      while (v1713 > 1);
                      v1707 = v105[1];
                    }
                    v1697 += v1703;
                    v1696 += v1706;
                    v1700 += 4 * (int)v411;
                    ++v1709;
                    v1710 += 4 * v1706;
                  }
                  while (v1709 < v1707);
                  v1716 = v1707;
                  v1694 = *v105;
                  v1708 = v1707;
                }
                else
                {
                  v1716 = 0;
                }
                v1697 = v1697 + v1702 - v1716 * v1703;
                v1696 = v1696 + v1705 - v1706 * v293[1];
                ++v1695;
              }
              while (v1695 < v1694);
            }
          }
          else if (v110 == 1)
          {
            v1160 = *v105;
            if (*v105)
            {
              v1161 = 0;
              v1162 = 0;
              v1163 = v104[19];
              v1164 = v292[19];
              v1165 = v103[19];
              v1166 = *(_QWORD *)v104[3];
              v1167 = 4 * *(_QWORD *)v292[3];
              do
              {
                if ((int)v411 >= 1)
                {
                  v1168 = 0;
                  v1169 = *(_DWORD *)(v1163 + 4 * v1162);
                  v1170 = v411 + 1;
                  do
                  {
                    if (v1169)
                      v1171 = *(_DWORD *)(v1164 + v1168) == 0;
                    else
                      v1171 = 1;
                    v1172 = !v1171;
                    *(_DWORD *)(v1165 + v1168) = v1172;
                    --v1170;
                    v1168 += 4;
                  }
                  while (v1170 > 1);
                  v1160 = *v105;
                }
                v1162 += v1166;
                ++v1161;
                v1165 += 4 * (int)v411;
                v1164 += v1167;
              }
              while (v1161 < v1160);
            }
          }
          else
          {
            v2148 = v103[6];
            if (v2148)
            {
              v2177 = 0;
              v2082 = v292[19];
              v2097 = v104[19];
              v1717 = v103[19];
              do
              {
                v1718 = 0;
                if ((v107 & 0x80000000) == 0)
                {
                  v1719 = v104[3];
                  v1720 = v107;
                  v1721 = v2177;
                  do
                  {
                    v1722 = ldiv(v1721, v105[v1720]);
                    v1721 = v1722.quot;
                    v1718 += *(_QWORD *)(v1719 + 8 * v1720--) * v1722.rem;
                  }
                  while (v1720 != -1);
                }
                v1723 = v2188;
                if ((v2188 & 0x80000000) != 0)
                {
                  LODWORD(v1724) = 0;
                }
                else
                {
                  v1724 = 0;
                  v1725 = v292[3];
                  v1726 = v2177;
                  do
                  {
                    v1727 = ldiv(v1726, v293[v1723]);
                    v1726 = v1727.quot;
                    v1724 += *(_QWORD *)(v1725 + 8 * v1723--) * v1727.rem;
                  }
                  while (v1723 != -1);
                }
                v107 = v2205;
                if ((int)v411 >= 1)
                {
                  v1728 = 0;
                  v1729 = *(_DWORD *)(v2097 + 4 * (int)v1718);
                  v1730 = v411 + 1;
                  do
                  {
                    if (v1729)
                      v1731 = *(_DWORD *)(v2082 + 4 * (int)v1724 + v1728) == 0;
                    else
                      v1731 = 1;
                    v1732 = !v1731;
                    *(_DWORD *)(v1717 + v1728) = v1732;
                    --v1730;
                    v1728 += 4;
                  }
                  while (v1730 > 1);
                }
                v1717 += 4 * (int)v411;
                v2177 += (int)v411;
              }
              while (v2177 < v2148);
            }
          }
          break;
        case 2:
          if (v110 == 2)
          {
            v1733 = *v105;
            if (*v105)
            {
              v1734 = 0;
              v1735 = 0;
              v1736 = 0;
              v1737 = v104[19];
              v1738 = v292[19];
              v1739 = v103[19];
              v1740 = (uint64_t *)v104[3];
              v1741 = *v1740;
              v1742 = v1740[1];
              v1743 = (uint64_t *)v292[3];
              v1744 = *v1743;
              v1745 = v1743[1];
              v1746 = v105[1];
              v1747 = v1746;
              do
              {
                if (v1747)
                {
                  v1748 = 0;
                  v1749 = v1737 + 4 * v1736;
                  do
                  {
                    if ((int)v411 >= 1)
                    {
                      v1750 = 0;
                      v1751 = *(_DWORD *)(v1738 + 4 * v1735);
                      v1752 = v411 + 1;
                      do
                      {
                        if (v1751)
                          v1753 = *(_DWORD *)(v1749 + v1750) == 0;
                        else
                          v1753 = 1;
                        v1754 = !v1753;
                        *(_DWORD *)(v1739 + v1750) = v1754;
                        --v1752;
                        v1750 += 4;
                      }
                      while (v1752 > 1);
                      v1746 = v105[1];
                    }
                    v1736 += v1742;
                    v1735 += v1745;
                    v1739 += 4 * (int)v411;
                    ++v1748;
                    v1749 += 4 * v1742;
                  }
                  while (v1748 < v1746);
                  v1755 = v1746;
                  v1733 = *v105;
                  v1747 = v1746;
                }
                else
                {
                  v1755 = 0;
                }
                v1736 = v1736 + v1741 - v1755 * v1742;
                v1735 = v1735 + v1744 - v1745 * v293[1];
                ++v1734;
              }
              while (v1734 < v1733);
            }
          }
          else if (v110 == 1)
          {
            v1173 = *v105;
            if (*v105)
            {
              v1174 = 0;
              v1175 = 0;
              v1176 = v104[19];
              v1177 = v292[19];
              v1178 = v103[19];
              v1179 = *(_QWORD *)v292[3];
              v1180 = 4 * *(_QWORD *)v104[3];
              do
              {
                if ((int)v411 >= 1)
                {
                  v1181 = 0;
                  v1182 = *(_DWORD *)(v1177 + 4 * v1175);
                  v1183 = v411 + 1;
                  do
                  {
                    if (v1182)
                      v1184 = *(_DWORD *)(v1176 + v1181) == 0;
                    else
                      v1184 = 1;
                    v1185 = !v1184;
                    *(_DWORD *)(v1178 + v1181) = v1185;
                    --v1183;
                    v1181 += 4;
                  }
                  while (v1183 > 1);
                  v1173 = *v105;
                }
                v1175 += v1179;
                ++v1174;
                v1178 += 4 * (int)v411;
                v1176 += v1180;
              }
              while (v1174 < v1173);
            }
          }
          else
          {
            v2149 = v103[6];
            if (v2149)
            {
              v2178 = 0;
              v2083 = v292[19];
              v2098 = v104[19];
              v1756 = v103[19];
              do
              {
                v1757 = 0;
                if ((v107 & 0x80000000) == 0)
                {
                  v1758 = v104[3];
                  v1759 = v107;
                  v1760 = v2178;
                  do
                  {
                    v1761 = ldiv(v1760, v105[v1759]);
                    v1760 = v1761.quot;
                    v1757 += *(_QWORD *)(v1758 + 8 * v1759--) * v1761.rem;
                  }
                  while (v1759 != -1);
                }
                v1762 = v2188;
                if ((v2188 & 0x80000000) != 0)
                {
                  LODWORD(v1763) = 0;
                }
                else
                {
                  v1763 = 0;
                  v1764 = v292[3];
                  v1765 = v2178;
                  do
                  {
                    v1766 = ldiv(v1765, v293[v1762]);
                    v1765 = v1766.quot;
                    v1763 += *(_QWORD *)(v1764 + 8 * v1762--) * v1766.rem;
                  }
                  while (v1762 != -1);
                }
                v107 = v2205;
                if ((int)v411 >= 1)
                {
                  v1767 = 0;
                  v1768 = *(_DWORD *)(v2083 + 4 * (int)v1763);
                  v1769 = v411 + 1;
                  do
                  {
                    if (v1768)
                      v1770 = *(_DWORD *)(v2098 + 4 * (int)v1757 + v1767) == 0;
                    else
                      v1770 = 1;
                    v1771 = !v1770;
                    *(_DWORD *)(v1756 + v1767) = v1771;
                    --v1769;
                    v1767 += 4;
                  }
                  while (v1769 > 1);
                }
                v1756 += 4 * (int)v411;
                v2178 += (int)v411;
              }
              while (v2178 < v2149);
            }
          }
          break;
        case 3:
          if (v110 == 2)
          {
            v1358 = *v105;
            if (*v105)
            {
              v1359 = 0;
              v1360 = 0;
              v1361 = 0;
              v1362 = v104[19];
              v1363 = v292[19];
              v1364 = v103[19];
              v1365 = (uint64_t *)v104[3];
              v1366 = *v1365;
              v1367 = v1365[1];
              v1368 = (uint64_t *)v292[3];
              v1369 = *v1368;
              v1370 = v1368[1];
              v1371 = v105[1];
              v1372 = v1371;
              do
              {
                if (v1372)
                {
                  v1373 = 0;
                  v1374 = v1363 + 4 * v1360;
                  v1375 = v1362 + 4 * v1361;
                  do
                  {
                    if ((int)v411 >= 1)
                    {
                      v1376 = 0;
                      v1377 = v411 + 1;
                      do
                      {
                        if (*(_DWORD *)(v1375 + v1376))
                          v1378 = *(_DWORD *)(v1374 + v1376) == 0;
                        else
                          v1378 = 1;
                        v1379 = !v1378;
                        *(_DWORD *)(v1364 + v1376) = v1379;
                        --v1377;
                        v1376 += 4;
                      }
                      while (v1377 > 1);
                      v1371 = v105[1];
                    }
                    v1361 += v1367;
                    v1360 += v1370;
                    v1364 += 4 * (int)v411;
                    ++v1373;
                    v1374 += 4 * v1370;
                    v1375 += 4 * v1367;
                  }
                  while (v1373 < v1371);
                  v1380 = v1371;
                  v1358 = *v105;
                  v1372 = v1371;
                }
                else
                {
                  v1380 = 0;
                }
                v1361 = v1361 + v1366 - v1380 * v1367;
                v1360 = v1360 + v1369 - v1370 * v293[1];
                ++v1359;
              }
              while (v1359 < v1358);
            }
          }
          else if (v110 == 1)
          {
            v412 = *v105;
            if (*v105)
            {
              v413 = 0;
              v414 = v104[19];
              v415 = v292[19];
              v416 = v103[19];
              v417 = 4 * *(_QWORD *)v292[3];
              v418 = 4 * *(_QWORD *)v104[3];
              do
              {
                if ((int)v411 >= 1)
                {
                  v419 = 0;
                  v420 = v411 + 1;
                  do
                  {
                    if (*(_DWORD *)(v414 + v419))
                      v421 = *(_DWORD *)(v415 + v419) == 0;
                    else
                      v421 = 1;
                    v422 = !v421;
                    *(_DWORD *)(v416 + v419) = v422;
                    --v420;
                    v419 += 4;
                  }
                  while (v420 > 1);
                  v412 = *v105;
                }
                ++v413;
                v416 += 4 * (int)v411;
                v415 += v417;
                v414 += v418;
              }
              while (v413 < v412);
            }
          }
          else
          {
            v2139 = v103[6];
            if (v2139)
            {
              v2168 = 0;
              v2078 = v292[19];
              v2091 = v104[19];
              v1381 = v103[19];
              do
              {
                v1382 = 0;
                if ((v107 & 0x80000000) == 0)
                {
                  v1383 = v104[3];
                  v1384 = v107;
                  v1385 = v2168;
                  do
                  {
                    v1386 = ldiv(v1385, v105[v1384]);
                    v1385 = v1386.quot;
                    v1382 += *(_QWORD *)(v1383 + 8 * v1384--) * v1386.rem;
                  }
                  while (v1384 != -1);
                }
                v1387 = v2188;
                if ((v2188 & 0x80000000) != 0)
                {
                  LODWORD(v1388) = 0;
                }
                else
                {
                  v1388 = 0;
                  v1389 = v292[3];
                  v1390 = v2168;
                  do
                  {
                    v1391 = ldiv(v1390, v293[v1387]);
                    v1390 = v1391.quot;
                    v1388 += *(_QWORD *)(v1389 + 8 * v1387--) * v1391.rem;
                  }
                  while (v1387 != -1);
                }
                v107 = v2205;
                if ((int)v411 >= 1)
                {
                  v1392 = 0;
                  v1393 = v411 + 1;
                  do
                  {
                    if (*(_DWORD *)(v2091 + 4 * (int)v1382 + v1392))
                      v1394 = *(_DWORD *)(v2078 + 4 * (int)v1388 + v1392) == 0;
                    else
                      v1394 = 1;
                    v1395 = !v1394;
                    *(_DWORD *)(v1381 + v1392) = v1395;
                    --v1393;
                    v1392 += 4;
                  }
                  while (v1393 > 1);
                }
                v1381 += 4 * (int)v411;
                v2168 += (int)v411;
              }
              while (v2168 < v2139);
            }
          }
          break;
        default:
LABEL_537:
          switch(v407)
          {
            case 1uLL:
              v423 = v103[6];
              if (v423)
              {
                v424 = (_DWORD *)v104[19];
                v425 = (_DWORD *)v292[19];
                v426 = (int *)v103[19];
                v427 = 4 * *(_QWORD *)v292[3];
                v428 = 4 * *(_QWORD *)v104[3];
                do
                {
                  if (*v424)
                    v429 = *v425 == 0;
                  else
                    v429 = 1;
                  v430 = !v429;
                  *v426++ = v430;
                  v425 = (_DWORD *)((char *)v425 + v427);
                  v424 = (_DWORD *)((char *)v424 + v428);
                  --v423;
                }
                while (v423);
              }
              break;
            case 2uLL:
              v700 = *v105;
              if (*v105)
              {
                v701 = 0;
                v702 = 0;
                v703 = 0;
                v704 = 0;
                v705 = v104[19];
                v706 = v292[19];
                v707 = v103[19];
                v708 = (uint64_t *)v104[3];
                v709 = *v708;
                v710 = v708[1];
                v711 = (uint64_t *)v292[3];
                v713 = *v711;
                v712 = v711[1];
                v714 = v105[1];
                do
                {
                  if (v714)
                  {
                    for (i = 0; i < v714; ++i)
                    {
                      if (*(_DWORD *)(v705 + 4 * v704))
                        v716 = *(_DWORD *)(v706 + 4 * v703) == 0;
                      else
                        v716 = 1;
                      v717 = !v716;
                      *(_DWORD *)(v707 + 4 * v702 + 4 * i) = v717;
                      v704 += v710;
                      v703 += v712;
                      v714 = v105[1];
                    }
                    v718 = v714;
                    v700 = *v105;
                    v702 += i;
                  }
                  else
                  {
                    v718 = 0;
                  }
                  v704 = v704 + v709 - v718 * v710;
                  v703 = v703 + v713 - v712 * v293[1];
                  ++v701;
                }
                while (v701 < v700);
              }
              break;
            case 3uLL:
              v719 = *v105;
              if (*v105)
              {
                v720 = 0;
                v721 = 0;
                v722 = 0;
                v723 = 0;
                v724 = v104[19];
                v725 = v292[19];
                v726 = v103[19];
                v727 = (uint64_t *)v104[3];
                v728 = *v727;
                v729 = v727[1];
                v730 = (uint64_t *)v292[3];
                v731 = *v730;
                v732 = v730[1];
                v733 = v105[1];
                v734 = v733;
                do
                {
                  if (v734)
                  {
                    v735 = 0;
                    v736 = v727[2];
                    v737 = v730[2];
                    v738 = v105[2];
                    do
                    {
                      if (v738)
                      {
                        for (j = 0; j < v738; ++j)
                        {
                          if (*(_DWORD *)(v724 + 4 * v723))
                            v740 = *(_DWORD *)(v725 + 4 * v722) == 0;
                          else
                            v740 = 1;
                          v741 = !v740;
                          *(_DWORD *)(v726 + 4 * v721 + 4 * j) = v741;
                          v723 += v736;
                          v722 += v737;
                          v738 = v105[2];
                        }
                        v742 = v738;
                        v733 = v105[1];
                        v721 += j;
                      }
                      else
                      {
                        v742 = 0;
                      }
                      v723 = v723 + v729 - v742 * v736;
                      v722 = v722 + v732 - v737 * v293[2];
                      ++v735;
                    }
                    while (v735 < v733);
                    v743 = v733;
                    v719 = *v105;
                    v734 = v733;
                  }
                  else
                  {
                    v743 = 0;
                  }
                  v723 = v723 + v728 - v743 * v729;
                  v722 = v722 + v731 - v732 * v293[1];
                  ++v720;
                }
                while (v720 < v719);
              }
              break;
            case 4uLL:
              v744 = *v105;
              if (*v105)
              {
                v745 = 0;
                v746 = 0;
                v747 = 0;
                v748 = 0;
                v749 = v104[19];
                v750 = v292[19];
                v751 = v103[19];
                v752 = (uint64_t *)v104[3];
                v753 = *v752;
                v754 = v752[1];
                v755 = (uint64_t *)v292[3];
                v756 = *v755;
                v757 = v755[1];
                v758 = v105[1];
                v759 = v758;
                do
                {
                  if (v759)
                  {
                    v760 = 0;
                    v761 = v752[2];
                    v762 = v755[2];
                    v763 = v105[2];
                    v764 = v763;
                    do
                    {
                      if (v764)
                      {
                        v765 = 0;
                        v766 = v752[3];
                        v767 = v755[3];
                        v768 = v105[3];
                        do
                        {
                          if (v768)
                          {
                            for (k = 0; k < v768; ++k)
                            {
                              if (*(_DWORD *)(v749 + 4 * v748))
                                v770 = *(_DWORD *)(v750 + 4 * v747) == 0;
                              else
                                v770 = 1;
                              v771 = !v770;
                              *(_DWORD *)(v751 + 4 * v746 + 4 * k) = v771;
                              v748 += v766;
                              v747 += v767;
                              v768 = v105[3];
                            }
                            v772 = v768;
                            v763 = v105[2];
                            v746 += k;
                          }
                          else
                          {
                            v772 = 0;
                          }
                          v748 = v748 + v761 - v772 * v766;
                          v747 = v747 + v762 - v767 * v293[3];
                          ++v765;
                        }
                        while (v765 < v763);
                        v773 = v763;
                        v758 = v105[1];
                        v764 = v763;
                      }
                      else
                      {
                        v773 = 0;
                      }
                      v748 = v748 + v754 - v773 * v761;
                      v747 = v747 + v757 - v762 * v293[2];
                      ++v760;
                    }
                    while (v760 < v758);
                    v774 = v758;
                    v744 = *v105;
                    v759 = v758;
                  }
                  else
                  {
                    v774 = 0;
                  }
                  v748 = v748 + v753 - v774 * v754;
                  v747 = v747 + v756 - v757 * v293[1];
                  ++v745;
                }
                while (v745 < v744);
              }
              break;
            default:
              v686 = v103[6];
              if (v686)
              {
                v687 = 0;
                v2131 = v292[19];
                v2160 = v104[19];
                v2117 = v103[19];
                do
                {
                  v688 = 0;
                  if ((v107 & 0x80000000) == 0)
                  {
                    v689 = v104[3];
                    v690 = v107;
                    v691 = v687;
                    do
                    {
                      v692 = ldiv(v691, v105[v690]);
                      v691 = v692.quot;
                      v688 += *(_QWORD *)(v689 + 8 * v690--) * v692.rem;
                    }
                    while (v690 != -1);
                  }
                  v693 = v2188;
                  if ((v2188 & 0x80000000) != 0)
                  {
                    LODWORD(v694) = 0;
                  }
                  else
                  {
                    v694 = 0;
                    v695 = v292[3];
                    v696 = v687;
                    do
                    {
                      v697 = ldiv(v696, v293[v693]);
                      v696 = v697.quot;
                      v694 += *(_QWORD *)(v695 + 8 * v693--) * v697.rem;
                    }
                    while (v693 != -1);
                  }
                  if (*(_DWORD *)(v2160 + 4 * (int)v688))
                    v698 = *(_DWORD *)(v2131 + 4 * (int)v694) == 0;
                  else
                    v698 = 1;
                  v699 = !v698;
                  *(_DWORD *)(v2117 + 4 * v687++) = v699;
                  v107 = v2205;
                }
                while (v687 != v686);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v28)
      {
        case 0:
LABEL_29:
          if (**(_BYTE **)(*a1 + 152))
            v7 = **(_BYTE **)(*a2 + 152) == 0;
          else
            v7 = 1;
LABEL_32:
          v29 = !v7;
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v29;
          return;
        case 1:
          v140 = *(_DWORD *)(*a2 + 160);
          if (v140 >= 1)
          {
            v141 = *(char **)(*(_QWORD *)a3 + 152);
            v142 = *(unsigned __int8 **)(*a2 + 152);
            v143 = **(unsigned __int8 **)(*a1 + 152);
            v144 = v140 + 1;
            do
            {
              v146 = *v142++;
              v145 = v146;
              if (v143)
                v147 = v145 == 0;
              else
                v147 = 1;
              v148 = !v147;
              *v141++ = v148;
              --v144;
            }
            while (v144 > 1);
          }
          return;
        case 2:
          v149 = *(_DWORD *)(*a1 + 160);
          if (v149 >= 1)
          {
            v150 = *(char **)(*(_QWORD *)a3 + 152);
            v151 = *(unsigned __int8 **)(*a1 + 152);
            v152 = **(unsigned __int8 **)(*a2 + 152);
            v153 = v149 + 1;
            do
            {
              v155 = *v151++;
              v154 = v155;
              if (v152)
                v156 = v154 == 0;
              else
                v156 = 1;
              v157 = !v156;
              *v150++ = v157;
              --v153;
            }
            while (v153 > 1);
          }
          return;
        case 3:
          v158 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v158 >= 1)
          {
            v159 = *(char **)(*(_QWORD *)a3 + 152);
            v160 = *(unsigned __int8 **)(*a2 + 152);
            v161 = *(unsigned __int8 **)(*a1 + 152);
            v162 = v158 + 1;
            do
            {
              v164 = *v161++;
              v163 = v164;
              v166 = *v160++;
              v165 = v166;
              if (v163)
                v167 = v165 == 0;
              else
                v167 = 1;
              v168 = !v167;
              *v159++ = v168;
              --v162;
            }
            while (v162 > 1);
          }
          return;
        default:
          v132 = *(_QWORD **)a3;
          v133 = *a1;
          v134 = *(int **)*a1;
          v135 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v134) >> 2;
          v136 = v135 - 1;
          if ((int)v135 - 1 >= -1)
            v136 = -1;
          v137 = v136 + 1;
          v138 = v135 + 1;
          while (1)
          {
            v139 = v138 - 2;
            if (v138 - 2 < 0)
              break;
            --v138;
            if (*(_QWORD *)(*(_QWORD *)(v133 + 24) + 8 * v139) != *(_QWORD *)(v132[3] + 8 * v139))
              goto LABEL_305;
          }
          v138 = v137;
LABEL_305:
          v300 = (int **)*a2;
          v301 = *(int **)*a2;
          v302 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v301) >> 2;
          v303 = v302 - 1;
          if ((int)v302 - 1 >= -1)
            v303 = -1;
          v304 = v303 + 1;
          v305 = v302 + 1;
          while (1)
          {
            v306 = v305 - 2;
            if (v305 - 2 < 0)
              break;
            --v305;
            if (*(_QWORD *)&v300[3][2 * v306] != *(_QWORD *)(v132[3] + 8 * v306))
              goto LABEL_351;
          }
          v305 = v304;
LABEL_351:
          v337 = v135 + 1;
          while (1)
          {
            v338 = v337 - 2;
            if (v337 - 2 < 0)
              break;
            --v337;
            if (*(_QWORD *)(*(_QWORD *)(v133 + 24) + 8 * v338))
              goto LABEL_386;
          }
          v337 = v137;
LABEL_386:
          v351 = v302 + 1;
          while (1)
          {
            v352 = v351 - 2;
            if (v351 - 2 < 0)
              break;
            --v351;
            if (*(_QWORD *)&v300[3][2 * v352])
              goto LABEL_549;
          }
          v351 = v304;
LABEL_549:
          v431 = (uint64_t)(v132[1] - *v132) >> 2;
          if (v138 <= v305)
            v432 = v305;
          else
            v432 = v138;
          if (v138 <= v351)
            v138 = v351;
          if (v337 > v305)
            v305 = v337;
          if (v431 > v305)
          {
            v433 = 1;
          }
          else
          {
            v305 = (uint64_t)(v132[1] - *v132) >> 2;
            v433 = 4;
          }
          if (v431 > v138)
          {
            v434 = 2;
          }
          else
          {
            v138 = v305;
            v434 = v433;
          }
          if (v431 > v432)
          {
            v138 = v432;
            v434 = 3;
          }
          if (!v138)
            goto LABEL_585;
          v435 = *(_QWORD *)(v132[3] + 8 * (v138 - 1));
          if (v435 < 0x10)
            goto LABEL_585;
          v2206 = *(_QWORD *)(v132[3] + 8 * (v138 - 1));
          switch(v434)
          {
            case 1:
              if (v138 == 2)
              {
                v1772 = *v134;
                if (*v134)
                {
                  v1773 = 0;
                  v1774 = 0;
                  v1775 = 0;
                  v1776 = *(_QWORD *)(v133 + 152);
                  v1777 = v300[19];
                  v1778 = v132[19];
                  do
                  {
                    if (v134[1])
                    {
                      v1779 = 0;
                      do
                      {
                        if ((int)v435 >= 1)
                        {
                          v1780 = 0;
                          v1781 = *(unsigned __int8 *)(v1776 + v1775);
                          v1782 = v435 + 1;
                          do
                          {
                            if (v1781)
                              v1783 = *((_BYTE *)v1777 + v1774 + v1780) == 0;
                            else
                              v1783 = 1;
                            v1784 = !v1783;
                            *(_BYTE *)(v1778 + v1780) = v1784;
                            --v1782;
                            ++v1780;
                          }
                          while (v1782 > 1);
                          v133 = *a1;
                          v300 = (int **)*a2;
                          v134 = *(int **)*a1;
                        }
                        v1785 = *(_QWORD **)(v133 + 24);
                        v1786 = v1785[1];
                        v1775 += v1786;
                        v1774 += *((_QWORD *)v300[3] + 1);
                        v1778 += (int)v435;
                        ++v1779;
                        v1787 = v134[1];
                      }
                      while (v1779 < v1787);
                      v1772 = *v134;
                      v301 = *v300;
                    }
                    else
                    {
                      v1787 = 0;
                      v1785 = *(_QWORD **)(v133 + 24);
                      v1786 = v1785[1];
                    }
                    v1775 = *v1785 + v1775 - v1787 * v1786;
                    v1774 = *(_QWORD *)v300[3] + v1774 - *((_QWORD *)v300[3] + 1) * v301[1];
                    ++v1773;
                  }
                  while (v1773 < v1772);
                }
              }
              else if (v138 == 1)
              {
                v1186 = *v134;
                if (*v134)
                {
                  v1187 = 0;
                  v1188 = 0;
                  v1189 = 0;
                  v1190 = *(_QWORD *)(v133 + 152);
                  v1191 = v300[19];
                  v1192 = v132[19];
                  do
                  {
                    if ((int)v435 >= 1)
                    {
                      v1193 = 0;
                      v1194 = *(unsigned __int8 *)(v1190 + v1189);
                      v1195 = v435 + 1;
                      do
                      {
                        if (v1194)
                          v1196 = *((_BYTE *)v1191 + v1188 + v1193) == 0;
                        else
                          v1196 = 1;
                        v1197 = !v1196;
                        *(_BYTE *)(v1192 + v1193) = v1197;
                        --v1195;
                        ++v1193;
                      }
                      while (v1195 > 1);
                      v133 = *a1;
                      v300 = (int **)*a2;
                      v1186 = **(_DWORD **)*a1;
                    }
                    v1189 += **(_QWORD **)(v133 + 24);
                    v1188 += *(_QWORD *)v300[3];
                    v1192 += (int)v435;
                    ++v1187;
                  }
                  while (v1187 < v1186);
                }
              }
              else if (v132[6])
              {
                v2127 = v300[19];
                v2150 = *(_QWORD *)(v133 + 152);
                v2179 = (int)v435;
                v2201 = 0;
                v2113 = v435 + 1;
                v1788 = v132[19];
                do
                {
                  v1789 = *(_QWORD *)*a1;
                  v1790 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1789) >> 2;
                  v1791 = 0;
                  v1792 = (v1790 - 1);
                  if ((int)v1790 - 1 >= 0)
                  {
                    v1793 = *(_QWORD *)(*a1 + 24);
                    v1794 = v2201;
                    do
                    {
                      v1795 = ldiv(v1794, *(int *)(v1789 + 4 * v1792));
                      v1794 = v1795.quot;
                      v1791 += *(_QWORD *)(v1793 + 8 * v1792--) * v1795.rem;
                    }
                    while (v1792 != -1);
                  }
                  v1796 = *(_QWORD *)*a2;
                  v1797 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1796) >> 2;
                  v1798 = 0;
                  v1799 = (v1797 - 1);
                  if ((int)v1797 - 1 >= 0)
                  {
                    v1800 = *(_QWORD *)(*a2 + 24);
                    v1801 = v2201;
                    do
                    {
                      v1802 = ldiv(v1801, *(int *)(v1796 + 4 * v1799));
                      v1801 = v1802.quot;
                      v1798 += *(_QWORD *)(v1800 + 8 * v1799--) * v1802.rem;
                    }
                    while (v1799 != -1);
                  }
                  if ((int)v2206 >= 1)
                  {
                    v1803 = 0;
                    v1804 = *(unsigned __int8 *)(v2150 + (int)v1791);
                    v1805 = v2113;
                    do
                    {
                      if (v1804)
                        v1806 = *((_BYTE *)v2127 + (int)v1798 + v1803) == 0;
                      else
                        v1806 = 1;
                      v1807 = !v1806;
                      *(_BYTE *)(v1788 + v1803) = v1807;
                      --v1805;
                      ++v1803;
                    }
                    while (v1805 > 1);
                    v132 = *(_QWORD **)a3;
                  }
                  v1788 += v2179;
                  v2201 += v2179;
                }
                while (v2201 < v132[6]);
              }
              break;
            case 2:
              if (v138 == 2)
              {
                v1808 = *v134;
                if (*v134)
                {
                  v1809 = 0;
                  v1810 = 0;
                  v1811 = 0;
                  v1812 = *(_QWORD *)(v133 + 152);
                  v1813 = v300[19];
                  v1814 = v132[19];
                  do
                  {
                    if (v134[1])
                    {
                      v1815 = 0;
                      do
                      {
                        if ((int)v435 >= 1)
                        {
                          v1816 = 0;
                          v1817 = *((unsigned __int8 *)v1813 + v1810);
                          v1818 = v435 + 1;
                          do
                          {
                            if (v1817)
                              v1819 = *(_BYTE *)(v1812 + v1811 + v1816) == 0;
                            else
                              v1819 = 1;
                            v1820 = !v1819;
                            *(_BYTE *)(v1814 + v1816) = v1820;
                            --v1818;
                            ++v1816;
                          }
                          while (v1818 > 1);
                          v133 = *a1;
                          v300 = (int **)*a2;
                          v134 = *(int **)*a1;
                        }
                        v1821 = *(_QWORD **)(v133 + 24);
                        v1822 = v1821[1];
                        v1811 += v1822;
                        v1810 += *((_QWORD *)v300[3] + 1);
                        v1814 += (int)v435;
                        ++v1815;
                        v1823 = v134[1];
                      }
                      while (v1815 < v1823);
                      v1808 = *v134;
                      v301 = *v300;
                    }
                    else
                    {
                      v1823 = 0;
                      v1821 = *(_QWORD **)(v133 + 24);
                      v1822 = v1821[1];
                    }
                    v1811 = *v1821 + v1811 - v1823 * v1822;
                    v1810 = *(_QWORD *)v300[3] + v1810 - *((_QWORD *)v300[3] + 1) * v301[1];
                    ++v1809;
                  }
                  while (v1809 < v1808);
                }
              }
              else if (v138 == 1)
              {
                v1198 = *v134;
                if (*v134)
                {
                  v1199 = 0;
                  v1200 = 0;
                  v1201 = 0;
                  v1202 = *(_QWORD *)(v133 + 152);
                  v1203 = v300[19];
                  v1204 = v132[19];
                  do
                  {
                    if ((int)v435 >= 1)
                    {
                      v1205 = 0;
                      v1206 = *((unsigned __int8 *)v1203 + v1200);
                      v1207 = v435 + 1;
                      do
                      {
                        if (v1206)
                          v1208 = *(_BYTE *)(v1202 + v1201 + v1205) == 0;
                        else
                          v1208 = 1;
                        v1209 = !v1208;
                        *(_BYTE *)(v1204 + v1205) = v1209;
                        --v1207;
                        ++v1205;
                      }
                      while (v1207 > 1);
                      v133 = *a1;
                      v300 = (int **)*a2;
                      v1198 = **(_DWORD **)*a1;
                    }
                    v1201 += **(_QWORD **)(v133 + 24);
                    v1200 += *(_QWORD *)v300[3];
                    v1204 += (int)v435;
                    ++v1199;
                  }
                  while (v1199 < v1198);
                }
              }
              else if (v132[6])
              {
                v2128 = v300[19];
                v2151 = *(_QWORD *)(v133 + 152);
                v2180 = (int)v435;
                v2202 = 0;
                v2114 = v435 + 1;
                v1824 = v132[19];
                do
                {
                  v1825 = *(_QWORD *)*a1;
                  v1826 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1825) >> 2;
                  v1827 = 0;
                  v1828 = (v1826 - 1);
                  if ((int)v1826 - 1 >= 0)
                  {
                    v1829 = *(_QWORD *)(*a1 + 24);
                    v1830 = v2202;
                    do
                    {
                      v1831 = ldiv(v1830, *(int *)(v1825 + 4 * v1828));
                      v1830 = v1831.quot;
                      v1827 += *(_QWORD *)(v1829 + 8 * v1828--) * v1831.rem;
                    }
                    while (v1828 != -1);
                  }
                  v1832 = *(_QWORD *)*a2;
                  v1833 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1832) >> 2;
                  v1834 = 0;
                  v1835 = (v1833 - 1);
                  if ((int)v1833 - 1 >= 0)
                  {
                    v1836 = *(_QWORD *)(*a2 + 24);
                    v1837 = v2202;
                    do
                    {
                      v1838 = ldiv(v1837, *(int *)(v1832 + 4 * v1835));
                      v1837 = v1838.quot;
                      v1834 += *(_QWORD *)(v1836 + 8 * v1835--) * v1838.rem;
                    }
                    while (v1835 != -1);
                  }
                  if ((int)v2206 >= 1)
                  {
                    v1839 = 0;
                    v1840 = *((unsigned __int8 *)v2128 + (int)v1834);
                    v1841 = v2114;
                    do
                    {
                      if (v1840)
                        v1842 = *(_BYTE *)(v2151 + (int)v1827 + v1839) == 0;
                      else
                        v1842 = 1;
                      v1843 = !v1842;
                      *(_BYTE *)(v1824 + v1839) = v1843;
                      --v1841;
                      ++v1839;
                    }
                    while (v1841 > 1);
                    v132 = *(_QWORD **)a3;
                  }
                  v1824 += v2180;
                  v2202 += v2180;
                }
                while (v2202 < v132[6]);
              }
              break;
            case 3:
              if (v138 == 2)
              {
                v1396 = *v134;
                if (*v134)
                {
                  v1397 = 0;
                  v1398 = 0;
                  v1399 = 0;
                  v1400 = *(_QWORD *)(v133 + 152);
                  v1401 = v300[19];
                  v1402 = v132[19];
                  do
                  {
                    if (v134[1])
                    {
                      v1403 = 0;
                      do
                      {
                        if ((int)v435 >= 1)
                        {
                          v1404 = 0;
                          v1405 = v435 + 1;
                          do
                          {
                            if (*(_BYTE *)(v1400 + v1399 + v1404))
                              v1406 = *((_BYTE *)v1401 + v1398 + v1404) == 0;
                            else
                              v1406 = 1;
                            v1407 = !v1406;
                            *(_BYTE *)(v1402 + v1404) = v1407;
                            --v1405;
                            ++v1404;
                          }
                          while (v1405 > 1);
                          v133 = *a1;
                          v300 = (int **)*a2;
                          v134 = *(int **)*a1;
                        }
                        v1408 = *(_QWORD **)(v133 + 24);
                        v1409 = v1408[1];
                        v1399 += v1409;
                        v1398 += *((_QWORD *)v300[3] + 1);
                        v1402 += (int)v435;
                        ++v1403;
                        v1410 = v134[1];
                      }
                      while (v1403 < v1410);
                      v1396 = *v134;
                      v301 = *v300;
                    }
                    else
                    {
                      v1410 = 0;
                      v1408 = *(_QWORD **)(v133 + 24);
                      v1409 = v1408[1];
                    }
                    v1399 = *v1408 + v1399 - v1410 * v1409;
                    v1398 = *(_QWORD *)v300[3] + v1398 - *((_QWORD *)v300[3] + 1) * v301[1];
                    ++v1397;
                  }
                  while (v1397 < v1396);
                }
              }
              else if (v138 == 1)
              {
                v436 = *v134;
                if (*v134)
                {
                  v437 = 0;
                  v438 = 0;
                  v439 = 0;
                  v440 = *(_QWORD *)(v133 + 152);
                  v441 = v300[19];
                  v442 = v132[19];
                  do
                  {
                    if ((int)v435 >= 1)
                    {
                      v443 = 0;
                      v444 = v435 + 1;
                      do
                      {
                        if (*(_BYTE *)(v440 + v439 + v443))
                          v445 = *((_BYTE *)v441 + v438 + v443) == 0;
                        else
                          v445 = 1;
                        v446 = !v445;
                        *(_BYTE *)(v442 + v443) = v446;
                        --v444;
                        ++v443;
                      }
                      while (v444 > 1);
                      v133 = *a1;
                      v300 = (int **)*a2;
                      v436 = **(_DWORD **)*a1;
                    }
                    v439 += **(_QWORD **)(v133 + 24);
                    v438 += *(_QWORD *)v300[3];
                    v442 += (int)v435;
                    ++v437;
                  }
                  while (v437 < v436);
                }
              }
              else if (v132[6])
              {
                v2124 = v300[19];
                v2140 = *(_QWORD *)(v133 + 152);
                v2169 = (int)v435;
                v2198 = 0;
                v2108 = v435 + 1;
                v1411 = v132[19];
                do
                {
                  v1412 = *(_QWORD *)*a1;
                  v1413 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1412) >> 2;
                  v1414 = 0;
                  v1415 = (v1413 - 1);
                  if ((int)v1413 - 1 >= 0)
                  {
                    v1416 = *(_QWORD *)(*a1 + 24);
                    v1417 = v2198;
                    do
                    {
                      v1418 = ldiv(v1417, *(int *)(v1412 + 4 * v1415));
                      v1417 = v1418.quot;
                      v1414 += *(_QWORD *)(v1416 + 8 * v1415--) * v1418.rem;
                    }
                    while (v1415 != -1);
                  }
                  v1419 = *(_QWORD *)*a2;
                  v1420 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1419) >> 2;
                  v1421 = 0;
                  v1422 = (v1420 - 1);
                  if ((int)v1420 - 1 >= 0)
                  {
                    v1423 = *(_QWORD *)(*a2 + 24);
                    v1424 = v2198;
                    do
                    {
                      v1425 = ldiv(v1424, *(int *)(v1419 + 4 * v1422));
                      v1424 = v1425.quot;
                      v1421 += *(_QWORD *)(v1423 + 8 * v1422--) * v1425.rem;
                    }
                    while (v1422 != -1);
                  }
                  if ((int)v2206 >= 1)
                  {
                    v1426 = 0;
                    v1427 = v2108;
                    do
                    {
                      if (*(_BYTE *)(v2140 + (int)v1414 + v1426))
                        v1428 = *((_BYTE *)v2124 + (int)v1421 + v1426) == 0;
                      else
                        v1428 = 1;
                      v1429 = !v1428;
                      *(_BYTE *)(v1411 + v1426) = v1429;
                      --v1427;
                      ++v1426;
                    }
                    while (v1427 > 1);
                    v132 = *(_QWORD **)a3;
                  }
                  v1411 += v2169;
                  v2198 += v2169;
                }
                while (v2198 < v132[6]);
              }
              break;
            default:
LABEL_585:
              switch(v431)
              {
                case 1uLL:
                  if (v132[6])
                  {
                    v447 = 0;
                    v448 = 0;
                    v449 = 0;
                    v450 = *(_QWORD *)(v133 + 152);
                    v451 = v300[19];
                    v452 = v132[19];
                    do
                    {
                      if (*(_BYTE *)(v450 + v449))
                        v453 = *((_BYTE *)v451 + v448) == 0;
                      else
                        v453 = 1;
                      v454 = !v453;
                      *(_BYTE *)(v452 + v447) = v454;
                      v449 += **(_QWORD **)(*a1 + 24);
                      v448 += **(_QWORD **)(*a2 + 24);
                      ++v447;
                    }
                    while (v447 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  v793 = *v134;
                  if (*v134)
                  {
                    v794 = 0;
                    v795 = 0;
                    v796 = 0;
                    v797 = 0;
                    v798 = *(_QWORD *)(v133 + 152);
                    v799 = v300[19];
                    v800 = v132[19];
                    do
                    {
                      if (v134[1])
                      {
                        v801 = 0;
                        do
                        {
                          if (*(_BYTE *)(v798 + v797))
                            v802 = *((_BYTE *)v799 + v796) == 0;
                          else
                            v802 = 1;
                          v803 = !v802;
                          *(_BYTE *)(v800 + v795 + v801) = v803;
                          v133 = *a1;
                          v804 = *(_QWORD **)(*a1 + 24);
                          v805 = v804[1];
                          v797 += v805;
                          v300 = (int **)*a2;
                          v806 = *(int **)(*a2 + 24);
                          v807 = *((_QWORD *)v806 + 1);
                          v796 += v807;
                          ++v801;
                          v134 = *(int **)*a1;
                          v808 = v134[1];
                        }
                        while (v801 < v808);
                        v793 = *v134;
                        v301 = *v300;
                        v795 += v801;
                      }
                      else
                      {
                        v808 = 0;
                        v804 = *(_QWORD **)(v133 + 24);
                        v805 = v804[1];
                        v806 = v300[3];
                        v807 = *((_QWORD *)v806 + 1);
                      }
                      v797 = *v804 + v797 - v808 * v805;
                      v796 = *(_QWORD *)v806 + v796 - v807 * v301[1];
                      ++v794;
                    }
                    while (v794 < v793);
                  }
                  break;
                case 3uLL:
                  v809 = *v134;
                  if (*v134)
                  {
                    v810 = 0;
                    v811 = 0;
                    v812 = 0;
                    v813 = 0;
                    v814 = *(_QWORD *)(v133 + 152);
                    v815 = v300[19];
                    v816 = v132[19];
                    do
                    {
                      if (v134[1])
                      {
                        v817 = 0;
                        do
                        {
                          if (v134[2])
                          {
                            v818 = 0;
                            do
                            {
                              if (*(_BYTE *)(v814 + v813))
                                v819 = *((_BYTE *)v815 + v812) == 0;
                              else
                                v819 = 1;
                              v820 = !v819;
                              *(_BYTE *)(v816 + v811 + v818) = v820;
                              v133 = *a1;
                              v821 = *(_QWORD **)(*a1 + 24);
                              v822 = v821[2];
                              v813 += v822;
                              v300 = (int **)*a2;
                              v823 = *(int **)(*a2 + 24);
                              v824 = *((_QWORD *)v823 + 2);
                              v812 += v824;
                              ++v818;
                              v134 = *(int **)*a1;
                              v825 = v134[2];
                            }
                            while (v818 < v825);
                            v301 = *v300;
                            v811 += v818;
                          }
                          else
                          {
                            v825 = 0;
                            v821 = *(_QWORD **)(v133 + 24);
                            v822 = v821[2];
                            v823 = v300[3];
                            v824 = *((_QWORD *)v823 + 2);
                          }
                          v826 = v821[1];
                          v813 = v826 + v813 - v825 * v822;
                          v812 = *((_QWORD *)v823 + 1) + v812 - v824 * v301[2];
                          ++v817;
                          v827 = v134[1];
                        }
                        while (v817 < v827);
                        v809 = *v134;
                      }
                      else
                      {
                        v827 = 0;
                        v821 = *(_QWORD **)(v133 + 24);
                        v826 = v821[1];
                      }
                      v813 = *v821 + v813 - v827 * v826;
                      v812 = *(_QWORD *)v300[3] + v812 - *((_QWORD *)v300[3] + 1) * v301[1];
                      ++v810;
                    }
                    while (v810 < v809);
                  }
                  break;
                case 4uLL:
                  v828 = *v134;
                  if (*v134)
                  {
                    v829 = 0;
                    v830 = 0;
                    v831 = 0;
                    v832 = 0;
                    v833 = *(_QWORD *)(v133 + 152);
                    v834 = v300[19];
                    v835 = v132[19];
                    do
                    {
                      if (v134[1])
                      {
                        v836 = 0;
                        do
                        {
                          if (v134[2])
                          {
                            v837 = 0;
                            do
                            {
                              if (v134[3])
                              {
                                v838 = 0;
                                do
                                {
                                  if (*(_BYTE *)(v833 + v832))
                                    v839 = *((_BYTE *)v834 + v831) == 0;
                                  else
                                    v839 = 1;
                                  v840 = !v839;
                                  *(_BYTE *)(v835 + v830 + v838) = v840;
                                  v133 = *a1;
                                  v841 = *(_QWORD **)(*a1 + 24);
                                  v842 = v841[3];
                                  v832 += v842;
                                  v300 = (int **)*a2;
                                  v843 = *(int **)(*a2 + 24);
                                  v844 = *((_QWORD *)v843 + 3);
                                  v831 += v844;
                                  ++v838;
                                  v134 = *(int **)*a1;
                                  v845 = v134[3];
                                }
                                while (v838 < v845);
                                v301 = *v300;
                                v830 += v838;
                              }
                              else
                              {
                                v845 = 0;
                                v841 = *(_QWORD **)(v133 + 24);
                                v842 = v841[3];
                                v843 = v300[3];
                                v844 = *((_QWORD *)v843 + 3);
                              }
                              v846 = v841[2];
                              v832 = v846 + v832 - v845 * v842;
                              v831 = *((_QWORD *)v843 + 2) + v831 - v844 * v301[3];
                              ++v837;
                              v847 = v134[2];
                            }
                            while (v837 < v847);
                          }
                          else
                          {
                            v847 = 0;
                            v841 = *(_QWORD **)(v133 + 24);
                            v846 = v841[2];
                          }
                          v832 = v841[1] + v832 - v847 * v846;
                          v831 = *((_QWORD *)v300[3] + 1) + v831 - *((_QWORD *)v300[3] + 2) * v301[2];
                          ++v836;
                          v848 = v134[1];
                        }
                        while (v836 < v848);
                        v828 = *v134;
                      }
                      else
                      {
                        v848 = 0;
                      }
                      v832 = **(_QWORD **)(v133 + 24) + v832 - *(_QWORD *)(*(_QWORD *)(v133 + 24) + 8) * v848;
                      v831 = *(_QWORD *)v300[3] + v831 - *((_QWORD *)v300[3] + 1) * v301[1];
                      ++v829;
                    }
                    while (v829 < v828);
                  }
                  break;
                default:
                  if (v132[6])
                  {
                    v775 = 0;
                    v2194 = v300[19];
                    v2212 = *(_QWORD *)(v133 + 152);
                    v776 = v132[19];
                    do
                    {
                      v777 = *(_QWORD *)*a1;
                      v778 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v777) >> 2;
                      v779 = 0;
                      v780 = (v778 - 1);
                      if ((int)v778 - 1 >= 0)
                      {
                        v781 = *(_QWORD *)(*a1 + 24);
                        v782 = v775;
                        do
                        {
                          v783 = ldiv(v782, *(int *)(v777 + 4 * v780));
                          v782 = v783.quot;
                          v779 += *(_QWORD *)(v781 + 8 * v780--) * v783.rem;
                        }
                        while (v780 != -1);
                      }
                      v784 = *(_QWORD *)*a2;
                      v785 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v784) >> 2;
                      v786 = 0;
                      v787 = (v785 - 1);
                      if ((int)v785 - 1 >= 0)
                      {
                        v788 = *(_QWORD *)(*a2 + 24);
                        v789 = v775;
                        do
                        {
                          v790 = ldiv(v789, *(int *)(v784 + 4 * v787));
                          v789 = v790.quot;
                          v786 += *(_QWORD *)(v788 + 8 * v787--) * v790.rem;
                        }
                        while (v787 != -1);
                      }
                      if (*(_BYTE *)(v2212 + (int)v779))
                        v791 = *((_BYTE *)v2194 + (int)v786) == 0;
                      else
                        v791 = 1;
                      v792 = !v791;
                      *(_BYTE *)(v776 + v775++) = v792;
                    }
                    while (v775 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v30)
      {
        case 0:
LABEL_37:
          if (**(_DWORD **)(*a1 + 152))
            v31 = **(_DWORD **)(*a2 + 152) == 0;
          else
            v31 = 1;
          v32 = !v31;
          **(_DWORD **)(*(_QWORD *)a3 + 152) = v32;
          return;
        case 1:
          v178 = *(_DWORD *)(*a2 + 160);
          if (v178 >= 1)
          {
            v179 = *(int **)(*(_QWORD *)a3 + 152);
            v180 = *(int **)(*a2 + 152);
            v181 = **(_DWORD **)(*a1 + 152);
            v182 = v178 + 1;
            do
            {
              v184 = *v180++;
              v183 = v184;
              if (v181)
                v185 = v183 == 0;
              else
                v185 = 1;
              v186 = !v185;
              *v179++ = v186;
              --v182;
            }
            while (v182 > 1);
          }
          return;
        case 2:
          v187 = *(_DWORD *)(*a1 + 160);
          if (v187 >= 1)
          {
            v188 = *(int **)(*(_QWORD *)a3 + 152);
            v189 = *(int **)(*a1 + 152);
            v190 = **(_DWORD **)(*a2 + 152);
            v191 = v187 + 1;
            do
            {
              v193 = *v189++;
              v192 = v193;
              if (v190)
                v194 = v192 == 0;
              else
                v194 = 1;
              v195 = !v194;
              *v188++ = v195;
              --v191;
            }
            while (v191 > 1);
          }
          return;
        case 3:
          v196 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v196 >= 1)
          {
            v197 = *(int **)(*(_QWORD *)a3 + 152);
            v198 = *(int **)(*a2 + 152);
            v199 = *(int **)(*a1 + 152);
            v200 = v196 + 1;
            do
            {
              v202 = *v199++;
              v201 = v202;
              v204 = *v198++;
              v203 = v204;
              if (v201)
                v205 = v203 == 0;
              else
                v205 = 1;
              v206 = !v205;
              *v197++ = v206;
              --v200;
            }
            while (v200 > 1);
          }
          return;
        default:
          v169 = *(_QWORD **)a3;
          v170 = (_QWORD *)*a1;
          v171 = *(int **)*a1;
          v172 = (v170[1] - (_QWORD)v171) >> 2;
          v173 = (v172 - 1);
          if ((int)v173 >= -1)
            v174 = -1;
          else
            v174 = v172 - 1;
          v175 = v174 + 1;
          v176 = v172 + 1;
          while (1)
          {
            v177 = v176 - 2;
            if (v176 - 2 < 0)
              break;
            --v176;
            if (*(_QWORD *)(v170[3] + 8 * v177) != *(_QWORD *)(v169[3] + 8 * v177))
              goto LABEL_312;
          }
          v176 = v175;
LABEL_312:
          v307 = (_QWORD *)*a2;
          v308 = *(int **)*a2;
          v309 = (v307[1] - (_QWORD)v308) >> 2;
          v310 = (v309 - 1);
          if ((int)v310 >= -1)
            v311 = -1;
          else
            v311 = v309 - 1;
          v312 = v311 + 1;
          v313 = v309 + 1;
          while (1)
          {
            v314 = v313 - 2;
            if (v313 - 2 < 0)
              break;
            --v313;
            if (*(_QWORD *)(v307[3] + 8 * v314) != *(_QWORD *)(v169[3] + 8 * v314))
              goto LABEL_356;
          }
          v313 = v312;
LABEL_356:
          v339 = v172 + 1;
          while (1)
          {
            v340 = v339 - 2;
            if (v339 - 2 < 0)
              break;
            --v339;
            if (*(_QWORD *)(v170[3] + 8 * v340))
              goto LABEL_391;
          }
          v339 = v175;
LABEL_391:
          v353 = v309 + 1;
          while (1)
          {
            v354 = v353 - 2;
            if (v353 - 2 < 0)
              break;
            --v353;
            if (*(_QWORD *)(v307[3] + 8 * v354))
              goto LABEL_597;
          }
          v353 = v312;
LABEL_597:
          v455 = (uint64_t)(v169[1] - *v169) >> 2;
          if (v176 <= v313)
            v456 = v313;
          else
            v456 = v176;
          if (v176 <= v353)
            v176 = v353;
          if (v339 > v313)
            v313 = v339;
          if (v455 > v313)
          {
            v457 = 1;
          }
          else
          {
            v313 = (uint64_t)(v169[1] - *v169) >> 2;
            v457 = 4;
          }
          if (v455 > v176)
          {
            v458 = 2;
          }
          else
          {
            v176 = v313;
            v458 = v457;
          }
          if (v455 > v456)
          {
            v176 = v456;
            v458 = 3;
          }
          v2189 = v310;
          v2207 = v173;
          if (!v176)
            goto LABEL_633;
          v459 = *(_QWORD *)(v169[3] + 8 * (v176 - 1));
          if (v459 < 0x10)
            goto LABEL_633;
          switch(v458)
          {
            case 1:
              if (v176 == 2)
              {
                v1844 = *v171;
                if (*v171)
                {
                  v1845 = 0;
                  v1846 = 0;
                  v1847 = 0;
                  v1848 = v170[19];
                  v1849 = v307[19];
                  v1850 = v169[19];
                  v1851 = (uint64_t *)v170[3];
                  v1852 = *v1851;
                  v1853 = v1851[1];
                  v1854 = (uint64_t *)v307[3];
                  v1855 = *v1854;
                  v1856 = v1854[1];
                  v1857 = v171[1];
                  v1858 = v1857;
                  do
                  {
                    if (v1858)
                    {
                      v1859 = 0;
                      v1860 = v1849 + 4 * v1846;
                      do
                      {
                        if ((int)v459 >= 1)
                        {
                          v1861 = 0;
                          v1862 = *(_DWORD *)(v1848 + 4 * v1847);
                          v1863 = v459 + 1;
                          do
                          {
                            if (v1862)
                              v1864 = *(_DWORD *)(v1860 + v1861) == 0;
                            else
                              v1864 = 1;
                            v1865 = !v1864;
                            *(_DWORD *)(v1850 + v1861) = v1865;
                            --v1863;
                            v1861 += 4;
                          }
                          while (v1863 > 1);
                          v1857 = v171[1];
                        }
                        v1847 += v1853;
                        v1846 += v1856;
                        v1850 += 4 * (int)v459;
                        ++v1859;
                        v1860 += 4 * v1856;
                      }
                      while (v1859 < v1857);
                      v1866 = v1857;
                      v1844 = *v171;
                      v1858 = v1857;
                    }
                    else
                    {
                      v1866 = 0;
                    }
                    v1847 = v1847 + v1852 - v1866 * v1853;
                    v1846 = v1846 + v1855 - v1856 * v308[1];
                    ++v1845;
                  }
                  while (v1845 < v1844);
                }
              }
              else if (v176 == 1)
              {
                v1210 = *v171;
                if (*v171)
                {
                  v1211 = 0;
                  v1212 = 0;
                  v1213 = v170[19];
                  v1214 = v307[19];
                  v1215 = v169[19];
                  v1216 = *(_QWORD *)v170[3];
                  v1217 = 4 * *(_QWORD *)v307[3];
                  do
                  {
                    if ((int)v459 >= 1)
                    {
                      v1218 = 0;
                      v1219 = *(_DWORD *)(v1213 + 4 * v1212);
                      v1220 = v459 + 1;
                      do
                      {
                        if (v1219)
                          v1221 = *(_DWORD *)(v1214 + v1218) == 0;
                        else
                          v1221 = 1;
                        v1222 = !v1221;
                        *(_DWORD *)(v1215 + v1218) = v1222;
                        --v1220;
                        v1218 += 4;
                      }
                      while (v1220 > 1);
                      v1210 = *v171;
                    }
                    v1212 += v1216;
                    ++v1211;
                    v1215 += 4 * (int)v459;
                    v1214 += v1217;
                  }
                  while (v1211 < v1210);
                }
              }
              else
              {
                v2152 = v169[6];
                if (v2152)
                {
                  v2181 = 0;
                  v2084 = v307[19];
                  v2099 = v170[19];
                  v1867 = v169[19];
                  do
                  {
                    v1868 = 0;
                    if ((v173 & 0x80000000) == 0)
                    {
                      v1869 = v170[3];
                      v1870 = v173;
                      v1871 = v2181;
                      do
                      {
                        v1872 = ldiv(v1871, v171[v1870]);
                        v1871 = v1872.quot;
                        v1868 += *(_QWORD *)(v1869 + 8 * v1870--) * v1872.rem;
                      }
                      while (v1870 != -1);
                    }
                    v1873 = v2189;
                    if ((v2189 & 0x80000000) != 0)
                    {
                      LODWORD(v1874) = 0;
                    }
                    else
                    {
                      v1874 = 0;
                      v1875 = v307[3];
                      v1876 = v2181;
                      do
                      {
                        v1877 = ldiv(v1876, v308[v1873]);
                        v1876 = v1877.quot;
                        v1874 += *(_QWORD *)(v1875 + 8 * v1873--) * v1877.rem;
                      }
                      while (v1873 != -1);
                    }
                    v173 = v2207;
                    if ((int)v459 >= 1)
                    {
                      v1878 = 0;
                      v1879 = *(_DWORD *)(v2099 + 4 * (int)v1868);
                      v1880 = v459 + 1;
                      do
                      {
                        if (v1879)
                          v1881 = *(_DWORD *)(v2084 + 4 * (int)v1874 + v1878) == 0;
                        else
                          v1881 = 1;
                        v1882 = !v1881;
                        *(_DWORD *)(v1867 + v1878) = v1882;
                        --v1880;
                        v1878 += 4;
                      }
                      while (v1880 > 1);
                    }
                    v1867 += 4 * (int)v459;
                    v2181 += (int)v459;
                  }
                  while (v2181 < v2152);
                }
              }
              break;
            case 2:
              if (v176 == 2)
              {
                v1883 = *v171;
                if (*v171)
                {
                  v1884 = 0;
                  v1885 = 0;
                  v1886 = 0;
                  v1887 = v170[19];
                  v1888 = v307[19];
                  v1889 = v169[19];
                  v1890 = (uint64_t *)v170[3];
                  v1891 = *v1890;
                  v1892 = v1890[1];
                  v1893 = (uint64_t *)v307[3];
                  v1894 = *v1893;
                  v1895 = v1893[1];
                  v1896 = v171[1];
                  v1897 = v1896;
                  do
                  {
                    if (v1897)
                    {
                      v1898 = 0;
                      v1899 = v1887 + 4 * v1886;
                      do
                      {
                        if ((int)v459 >= 1)
                        {
                          v1900 = 0;
                          v1901 = *(_DWORD *)(v1888 + 4 * v1885);
                          v1902 = v459 + 1;
                          do
                          {
                            if (v1901)
                              v1903 = *(_DWORD *)(v1899 + v1900) == 0;
                            else
                              v1903 = 1;
                            v1904 = !v1903;
                            *(_DWORD *)(v1889 + v1900) = v1904;
                            --v1902;
                            v1900 += 4;
                          }
                          while (v1902 > 1);
                          v1896 = v171[1];
                        }
                        v1886 += v1892;
                        v1885 += v1895;
                        v1889 += 4 * (int)v459;
                        ++v1898;
                        v1899 += 4 * v1892;
                      }
                      while (v1898 < v1896);
                      v1905 = v1896;
                      v1883 = *v171;
                      v1897 = v1896;
                    }
                    else
                    {
                      v1905 = 0;
                    }
                    v1886 = v1886 + v1891 - v1905 * v1892;
                    v1885 = v1885 + v1894 - v1895 * v308[1];
                    ++v1884;
                  }
                  while (v1884 < v1883);
                }
              }
              else if (v176 == 1)
              {
                v1223 = *v171;
                if (*v171)
                {
                  v1224 = 0;
                  v1225 = 0;
                  v1226 = v170[19];
                  v1227 = v307[19];
                  v1228 = v169[19];
                  v1229 = *(_QWORD *)v307[3];
                  v1230 = 4 * *(_QWORD *)v170[3];
                  do
                  {
                    if ((int)v459 >= 1)
                    {
                      v1231 = 0;
                      v1232 = *(_DWORD *)(v1227 + 4 * v1225);
                      v1233 = v459 + 1;
                      do
                      {
                        if (v1232)
                          v1234 = *(_DWORD *)(v1226 + v1231) == 0;
                        else
                          v1234 = 1;
                        v1235 = !v1234;
                        *(_DWORD *)(v1228 + v1231) = v1235;
                        --v1233;
                        v1231 += 4;
                      }
                      while (v1233 > 1);
                      v1223 = *v171;
                    }
                    v1225 += v1229;
                    ++v1224;
                    v1228 += 4 * (int)v459;
                    v1226 += v1230;
                  }
                  while (v1224 < v1223);
                }
              }
              else
              {
                v2153 = v169[6];
                if (v2153)
                {
                  v2182 = 0;
                  v2085 = v307[19];
                  v2100 = v170[19];
                  v1906 = v169[19];
                  do
                  {
                    v1907 = 0;
                    if ((v173 & 0x80000000) == 0)
                    {
                      v1908 = v170[3];
                      v1909 = v173;
                      v1910 = v2182;
                      do
                      {
                        v1911 = ldiv(v1910, v171[v1909]);
                        v1910 = v1911.quot;
                        v1907 += *(_QWORD *)(v1908 + 8 * v1909--) * v1911.rem;
                      }
                      while (v1909 != -1);
                    }
                    v1912 = v2189;
                    if ((v2189 & 0x80000000) != 0)
                    {
                      LODWORD(v1913) = 0;
                    }
                    else
                    {
                      v1913 = 0;
                      v1914 = v307[3];
                      v1915 = v2182;
                      do
                      {
                        v1916 = ldiv(v1915, v308[v1912]);
                        v1915 = v1916.quot;
                        v1913 += *(_QWORD *)(v1914 + 8 * v1912--) * v1916.rem;
                      }
                      while (v1912 != -1);
                    }
                    v173 = v2207;
                    if ((int)v459 >= 1)
                    {
                      v1917 = 0;
                      v1918 = *(_DWORD *)(v2085 + 4 * (int)v1913);
                      v1919 = v459 + 1;
                      do
                      {
                        if (v1918)
                          v1920 = *(_DWORD *)(v2100 + 4 * (int)v1907 + v1917) == 0;
                        else
                          v1920 = 1;
                        v1921 = !v1920;
                        *(_DWORD *)(v1906 + v1917) = v1921;
                        --v1919;
                        v1917 += 4;
                      }
                      while (v1919 > 1);
                    }
                    v1906 += 4 * (int)v459;
                    v2182 += (int)v459;
                  }
                  while (v2182 < v2153);
                }
              }
              break;
            case 3:
              if (v176 == 2)
              {
                v1430 = *v171;
                if (*v171)
                {
                  v1431 = 0;
                  v1432 = 0;
                  v1433 = 0;
                  v1434 = v170[19];
                  v1435 = v307[19];
                  v1436 = v169[19];
                  v1437 = (uint64_t *)v170[3];
                  v1438 = *v1437;
                  v1439 = v1437[1];
                  v1440 = (uint64_t *)v307[3];
                  v1441 = *v1440;
                  v1442 = v1440[1];
                  v1443 = v171[1];
                  v1444 = v1443;
                  do
                  {
                    if (v1444)
                    {
                      v1445 = 0;
                      v1446 = v1435 + 4 * v1432;
                      v1447 = v1434 + 4 * v1433;
                      do
                      {
                        if ((int)v459 >= 1)
                        {
                          v1448 = 0;
                          v1449 = v459 + 1;
                          do
                          {
                            if (*(_DWORD *)(v1447 + v1448))
                              v1450 = *(_DWORD *)(v1446 + v1448) == 0;
                            else
                              v1450 = 1;
                            v1451 = !v1450;
                            *(_DWORD *)(v1436 + v1448) = v1451;
                            --v1449;
                            v1448 += 4;
                          }
                          while (v1449 > 1);
                          v1443 = v171[1];
                        }
                        v1433 += v1439;
                        v1432 += v1442;
                        v1436 += 4 * (int)v459;
                        ++v1445;
                        v1446 += 4 * v1442;
                        v1447 += 4 * v1439;
                      }
                      while (v1445 < v1443);
                      v1452 = v1443;
                      v1430 = *v171;
                      v1444 = v1443;
                    }
                    else
                    {
                      v1452 = 0;
                    }
                    v1433 = v1433 + v1438 - v1452 * v1439;
                    v1432 = v1432 + v1441 - v1442 * v308[1];
                    ++v1431;
                  }
                  while (v1431 < v1430);
                }
              }
              else if (v176 == 1)
              {
                v460 = *v171;
                if (*v171)
                {
                  v461 = 0;
                  v462 = v170[19];
                  v463 = v307[19];
                  v464 = v169[19];
                  v465 = 4 * *(_QWORD *)v307[3];
                  v466 = 4 * *(_QWORD *)v170[3];
                  do
                  {
                    if ((int)v459 >= 1)
                    {
                      v467 = 0;
                      v468 = v459 + 1;
                      do
                      {
                        if (*(_DWORD *)(v462 + v467))
                          v469 = *(_DWORD *)(v463 + v467) == 0;
                        else
                          v469 = 1;
                        v470 = !v469;
                        *(_DWORD *)(v464 + v467) = v470;
                        --v468;
                        v467 += 4;
                      }
                      while (v468 > 1);
                      v460 = *v171;
                    }
                    ++v461;
                    v464 += 4 * (int)v459;
                    v463 += v465;
                    v462 += v466;
                  }
                  while (v461 < v460);
                }
              }
              else
              {
                v2141 = v169[6];
                if (v2141)
                {
                  v2170 = 0;
                  v2079 = v307[19];
                  v2092 = v170[19];
                  v1453 = v169[19];
                  do
                  {
                    v1454 = 0;
                    if ((v173 & 0x80000000) == 0)
                    {
                      v1455 = v170[3];
                      v1456 = v173;
                      v1457 = v2170;
                      do
                      {
                        v1458 = ldiv(v1457, v171[v1456]);
                        v1457 = v1458.quot;
                        v1454 += *(_QWORD *)(v1455 + 8 * v1456--) * v1458.rem;
                      }
                      while (v1456 != -1);
                    }
                    v1459 = v2189;
                    if ((v2189 & 0x80000000) != 0)
                    {
                      LODWORD(v1460) = 0;
                    }
                    else
                    {
                      v1460 = 0;
                      v1461 = v307[3];
                      v1462 = v2170;
                      do
                      {
                        v1463 = ldiv(v1462, v308[v1459]);
                        v1462 = v1463.quot;
                        v1460 += *(_QWORD *)(v1461 + 8 * v1459--) * v1463.rem;
                      }
                      while (v1459 != -1);
                    }
                    v173 = v2207;
                    if ((int)v459 >= 1)
                    {
                      v1464 = 0;
                      v1465 = v459 + 1;
                      do
                      {
                        if (*(_DWORD *)(v2092 + 4 * (int)v1454 + v1464))
                          v1466 = *(_DWORD *)(v2079 + 4 * (int)v1460 + v1464) == 0;
                        else
                          v1466 = 1;
                        v1467 = !v1466;
                        *(_DWORD *)(v1453 + v1464) = v1467;
                        --v1465;
                        v1464 += 4;
                      }
                      while (v1465 > 1);
                    }
                    v1453 += 4 * (int)v459;
                    v2170 += (int)v459;
                  }
                  while (v2170 < v2141);
                }
              }
              break;
            default:
LABEL_633:
              switch(v455)
              {
                case 1uLL:
                  v471 = v169[6];
                  if (v471)
                  {
                    v472 = (_DWORD *)v170[19];
                    v473 = (_DWORD *)v307[19];
                    v474 = (int *)v169[19];
                    v475 = 4 * *(_QWORD *)v307[3];
                    v476 = 4 * *(_QWORD *)v170[3];
                    do
                    {
                      if (*v472)
                        v477 = *v473 == 0;
                      else
                        v477 = 1;
                      v478 = !v477;
                      *v474++ = v478;
                      v473 = (_DWORD *)((char *)v473 + v475);
                      v472 = (_DWORD *)((char *)v472 + v476);
                      --v471;
                    }
                    while (v471);
                  }
                  break;
                case 2uLL:
                  v863 = *v171;
                  if (*v171)
                  {
                    v864 = 0;
                    v865 = 0;
                    v866 = 0;
                    v867 = 0;
                    v868 = v170[19];
                    v869 = v307[19];
                    v870 = v169[19];
                    v871 = (uint64_t *)v170[3];
                    v872 = *v871;
                    v873 = v871[1];
                    v874 = (uint64_t *)v307[3];
                    v876 = *v874;
                    v875 = v874[1];
                    v877 = v171[1];
                    do
                    {
                      if (v877)
                      {
                        for (m = 0; m < v877; ++m)
                        {
                          if (*(_DWORD *)(v868 + 4 * v867))
                            v879 = *(_DWORD *)(v869 + 4 * v866) == 0;
                          else
                            v879 = 1;
                          v880 = !v879;
                          *(_DWORD *)(v870 + 4 * v865 + 4 * m) = v880;
                          v867 += v873;
                          v866 += v875;
                          v877 = v171[1];
                        }
                        v881 = v877;
                        v863 = *v171;
                        v865 += m;
                      }
                      else
                      {
                        v881 = 0;
                      }
                      v867 = v867 + v872 - v881 * v873;
                      v866 = v866 + v876 - v875 * v308[1];
                      ++v864;
                    }
                    while (v864 < v863);
                  }
                  break;
                case 3uLL:
                  v882 = *v171;
                  if (*v171)
                  {
                    v883 = 0;
                    v884 = 0;
                    v885 = 0;
                    v886 = 0;
                    v887 = v170[19];
                    v888 = v307[19];
                    v889 = v169[19];
                    v890 = (uint64_t *)v170[3];
                    v891 = *v890;
                    v892 = v890[1];
                    v893 = (uint64_t *)v307[3];
                    v894 = *v893;
                    v895 = v893[1];
                    v896 = v171[1];
                    v897 = v896;
                    do
                    {
                      if (v897)
                      {
                        v898 = 0;
                        v899 = v890[2];
                        v900 = v893[2];
                        v901 = v171[2];
                        do
                        {
                          if (v901)
                          {
                            for (n = 0; n < v901; ++n)
                            {
                              if (*(_DWORD *)(v887 + 4 * v886))
                                v903 = *(_DWORD *)(v888 + 4 * v885) == 0;
                              else
                                v903 = 1;
                              v904 = !v903;
                              *(_DWORD *)(v889 + 4 * v884 + 4 * n) = v904;
                              v886 += v899;
                              v885 += v900;
                              v901 = v171[2];
                            }
                            v905 = v901;
                            v896 = v171[1];
                            v884 += n;
                          }
                          else
                          {
                            v905 = 0;
                          }
                          v886 = v886 + v892 - v905 * v899;
                          v885 = v885 + v895 - v900 * v308[2];
                          ++v898;
                        }
                        while (v898 < v896);
                        v906 = v896;
                        v882 = *v171;
                        v897 = v896;
                      }
                      else
                      {
                        v906 = 0;
                      }
                      v886 = v886 + v891 - v906 * v892;
                      v885 = v885 + v894 - v895 * v308[1];
                      ++v883;
                    }
                    while (v883 < v882);
                  }
                  break;
                case 4uLL:
                  v907 = *v171;
                  if (*v171)
                  {
                    v908 = 0;
                    v909 = 0;
                    v910 = 0;
                    v911 = 0;
                    v912 = v170[19];
                    v913 = v307[19];
                    v914 = v169[19];
                    v915 = (uint64_t *)v170[3];
                    v916 = *v915;
                    v917 = v915[1];
                    v918 = (uint64_t *)v307[3];
                    v919 = *v918;
                    v920 = v918[1];
                    v921 = v171[1];
                    v922 = v921;
                    do
                    {
                      if (v922)
                      {
                        v923 = 0;
                        v924 = v915[2];
                        v925 = v918[2];
                        v926 = v171[2];
                        v927 = v926;
                        do
                        {
                          if (v927)
                          {
                            v928 = 0;
                            v929 = v915[3];
                            v930 = v918[3];
                            v931 = v171[3];
                            do
                            {
                              if (v931)
                              {
                                for (ii = 0; ii < v931; ++ii)
                                {
                                  if (*(_DWORD *)(v912 + 4 * v911))
                                    v933 = *(_DWORD *)(v913 + 4 * v910) == 0;
                                  else
                                    v933 = 1;
                                  v934 = !v933;
                                  *(_DWORD *)(v914 + 4 * v909 + 4 * ii) = v934;
                                  v911 += v929;
                                  v910 += v930;
                                  v931 = v171[3];
                                }
                                v935 = v931;
                                v926 = v171[2];
                                v909 += ii;
                              }
                              else
                              {
                                v935 = 0;
                              }
                              v911 = v911 + v924 - v935 * v929;
                              v910 = v910 + v925 - v930 * v308[3];
                              ++v928;
                            }
                            while (v928 < v926);
                            v936 = v926;
                            v921 = v171[1];
                            v927 = v926;
                          }
                          else
                          {
                            v936 = 0;
                          }
                          v911 = v911 + v917 - v936 * v924;
                          v910 = v910 + v920 - v925 * v308[2];
                          ++v923;
                        }
                        while (v923 < v921);
                        v937 = v921;
                        v907 = *v171;
                        v922 = v921;
                      }
                      else
                      {
                        v937 = 0;
                      }
                      v911 = v911 + v916 - v937 * v917;
                      v910 = v910 + v919 - v920 * v308[1];
                      ++v908;
                    }
                    while (v908 < v907);
                  }
                  break;
                default:
                  v849 = v169[6];
                  if (v849)
                  {
                    v850 = 0;
                    v2132 = v307[19];
                    v2161 = v170[19];
                    v2118 = v169[19];
                    do
                    {
                      v851 = 0;
                      if ((v173 & 0x80000000) == 0)
                      {
                        v852 = v170[3];
                        v853 = v173;
                        v854 = v850;
                        do
                        {
                          v855 = ldiv(v854, v171[v853]);
                          v854 = v855.quot;
                          v851 += *(_QWORD *)(v852 + 8 * v853--) * v855.rem;
                        }
                        while (v853 != -1);
                      }
                      v856 = v2189;
                      if ((v2189 & 0x80000000) != 0)
                      {
                        LODWORD(v857) = 0;
                      }
                      else
                      {
                        v857 = 0;
                        v858 = v307[3];
                        v859 = v850;
                        do
                        {
                          v860 = ldiv(v859, v308[v856]);
                          v859 = v860.quot;
                          v857 += *(_QWORD *)(v858 + 8 * v856--) * v860.rem;
                        }
                        while (v856 != -1);
                      }
                      if (*(_DWORD *)(v2161 + 4 * (int)v851))
                        v861 = *(_DWORD *)(v2132 + 4 * (int)v857) == 0;
                      else
                        v861 = 1;
                      v862 = !v861;
                      *(_DWORD *)(v2118 + 4 * v850++) = v862;
                      v173 = v2207;
                    }
                    while (v850 != v849);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v33)
      {
        case 0:
          if (**(_QWORD **)(*a1 + 152))
            v34 = **(_QWORD **)(*a2 + 152) == 0;
          else
            v34 = 1;
          v35 = !v34;
          **(_QWORD **)(*(_QWORD *)a3 + 152) = v35;
          return;
        case 1:
          v216 = *(_DWORD *)(*a2 + 160);
          if (v216 >= 1)
          {
            v217 = *(uint64_t **)(*(_QWORD *)a3 + 152);
            v218 = *(uint64_t **)(*a2 + 152);
            v219 = **(_QWORD **)(*a1 + 152);
            v220 = v216 + 1;
            do
            {
              v222 = *v218++;
              v221 = v222;
              if (v219)
                v223 = v221 == 0;
              else
                v223 = 1;
              v224 = !v223;
              *v217++ = v224;
              --v220;
            }
            while (v220 > 1);
          }
          return;
        case 2:
          v225 = *(_DWORD *)(*a1 + 160);
          if (v225 >= 1)
          {
            v226 = *(uint64_t **)(*(_QWORD *)a3 + 152);
            v227 = *(uint64_t **)(*a1 + 152);
            v228 = **(_QWORD **)(*a2 + 152);
            v229 = v225 + 1;
            do
            {
              v231 = *v227++;
              v230 = v231;
              if (v228)
                v232 = v230 == 0;
              else
                v232 = 1;
              v233 = !v232;
              *v226++ = v233;
              --v229;
            }
            while (v229 > 1);
          }
          return;
        case 3:
          v234 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v234 >= 1)
          {
            v235 = *(uint64_t **)(*(_QWORD *)a3 + 152);
            v236 = *(uint64_t **)(*a2 + 152);
            v237 = *(uint64_t **)(*a1 + 152);
            v238 = v234 + 1;
            do
            {
              v240 = *v237++;
              v239 = v240;
              v242 = *v236++;
              v241 = v242;
              if (v239)
                v243 = v241 == 0;
              else
                v243 = 1;
              v244 = !v243;
              *v235++ = v244;
              --v238;
            }
            while (v238 > 1);
          }
          return;
        default:
          v207 = *(_QWORD **)a3;
          v208 = (_QWORD *)*a1;
          v209 = *(int **)*a1;
          v210 = (v208[1] - (_QWORD)v209) >> 2;
          v211 = (v210 - 1);
          if ((int)v211 >= -1)
            v212 = -1;
          else
            v212 = v210 - 1;
          v213 = v212 + 1;
          v214 = v210 + 1;
          while (1)
          {
            v215 = v214 - 2;
            if (v214 - 2 < 0)
              break;
            --v214;
            if (*(_QWORD *)(v208[3] + 8 * v215) != *(_QWORD *)(v207[3] + 8 * v215))
              goto LABEL_320;
          }
          v214 = v213;
LABEL_320:
          v315 = (_QWORD *)*a2;
          v316 = *(int **)*a2;
          v317 = (v315[1] - (_QWORD)v316) >> 2;
          v318 = (v317 - 1);
          if ((int)v318 >= -1)
            v319 = -1;
          else
            v319 = v317 - 1;
          v320 = v319 + 1;
          v321 = v317 + 1;
          while (1)
          {
            v322 = v321 - 2;
            if (v321 - 2 < 0)
              break;
            --v321;
            if (*(_QWORD *)(v315[3] + 8 * v322) != *(_QWORD *)(v207[3] + 8 * v322))
              goto LABEL_361;
          }
          v321 = v320;
LABEL_361:
          v341 = v210 + 1;
          while (1)
          {
            v342 = v341 - 2;
            if (v341 - 2 < 0)
              break;
            --v341;
            if (*(_QWORD *)(v208[3] + 8 * v342))
              goto LABEL_396;
          }
          v341 = v213;
LABEL_396:
          v355 = v317 + 1;
          while (1)
          {
            v356 = v355 - 2;
            if (v355 - 2 < 0)
              break;
            --v355;
            if (*(_QWORD *)(v315[3] + 8 * v356))
              goto LABEL_645;
          }
          v355 = v320;
LABEL_645:
          v479 = (uint64_t)(v207[1] - *v207) >> 2;
          if (v214 <= v321)
            v480 = v321;
          else
            v480 = v214;
          if (v214 <= v355)
            v214 = v355;
          if (v341 > v321)
            v321 = v341;
          if (v479 > v321)
          {
            v481 = 1;
          }
          else
          {
            v321 = (uint64_t)(v207[1] - *v207) >> 2;
            v481 = 4;
          }
          if (v479 > v214)
          {
            v482 = 2;
          }
          else
          {
            v214 = v321;
            v482 = v481;
          }
          if (v479 > v480)
          {
            v214 = v480;
            v482 = 3;
          }
          v2190 = v318;
          v2208 = v211;
          if (!v214)
            goto LABEL_680;
          v483 = *(_QWORD *)(v207[3] + 8 * (v214 - 1));
          if (v483 < 0x10)
            goto LABEL_680;
          switch(v482)
          {
            case 1:
              if (v214 == 2)
              {
                v1922 = *v209;
                if ((_DWORD)v1922)
                {
                  v1923 = 0;
                  v1924 = 0;
                  v1925 = 0;
                  v1926 = v208[19];
                  v1927 = v315[19];
                  v1928 = v207[19];
                  v1929 = v209[1];
                  v1930 = (uint64_t *)v208[3];
                  v1931 = *v1930;
                  v1932 = v1930[1];
                  v1933 = (uint64_t *)v315[3];
                  v1934 = *v1933;
                  v1935 = v1933[1];
                  if (v1929 <= 1)
                    v1936 = 1;
                  else
                    v1936 = v209[1];
                  v1937 = v1931 - v1932 * v1929;
                  v1938 = v1934 - v1935 * v316[1];
                  do
                  {
                    if ((_DWORD)v1929)
                    {
                      v1939 = 0;
                      v1940 = v1927 + 8 * v1924;
                      do
                      {
                        if ((int)v483 >= 1)
                        {
                          v1941 = 0;
                          v1942 = *(_QWORD *)(v1926 + 8 * v1925);
                          v1943 = v483 + 1;
                          do
                          {
                            if (v1942)
                              v1944 = *(_QWORD *)(v1940 + v1941) == 0;
                            else
                              v1944 = 1;
                            v1945 = !v1944;
                            *(_QWORD *)(v1928 + v1941) = v1945;
                            --v1943;
                            v1941 += 8;
                          }
                          while (v1943 > 1);
                        }
                        v1925 += v1932;
                        v1924 += v1935;
                        v1928 += 8 * (int)v483;
                        ++v1939;
                        v1940 += 8 * v1935;
                      }
                      while (v1939 != v1936);
                    }
                    v1925 += v1937;
                    v1924 += v1938;
                    ++v1923;
                  }
                  while (v1923 != v1922);
                }
              }
              else if (v214 == 1)
              {
                v1236 = *v209;
                if ((_DWORD)v1236)
                {
                  v1237 = 0;
                  v1238 = 0;
                  v1239 = v208[19];
                  v1240 = v315[19];
                  v1241 = v207[19];
                  v1242 = *(_QWORD *)v208[3];
                  v1243 = 8 * *(_QWORD *)v315[3];
                  do
                  {
                    if ((int)v483 >= 1)
                    {
                      v1244 = 0;
                      v1245 = *(_QWORD *)(v1239 + 8 * v1238);
                      v1246 = v483 + 1;
                      do
                      {
                        if (v1245)
                          v1247 = *(_QWORD *)(v1240 + v1244) == 0;
                        else
                          v1247 = 1;
                        v1248 = !v1247;
                        *(_QWORD *)(v1241 + v1244) = v1248;
                        --v1246;
                        v1244 += 8;
                      }
                      while (v1246 > 1);
                    }
                    v1238 += v1242;
                    ++v1237;
                    v1241 += 8 * (int)v483;
                    v1240 += v1243;
                  }
                  while (v1237 != v1236);
                }
              }
              else
              {
                v2154 = v207[6];
                if (v2154)
                {
                  v2183 = 0;
                  v2086 = v315[19];
                  v2101 = v208[19];
                  v1946 = v207[19];
                  do
                  {
                    v1947 = 0;
                    if ((v211 & 0x80000000) == 0)
                    {
                      v1948 = v208[3];
                      v1949 = v211;
                      v1950 = v2183;
                      do
                      {
                        v1951 = ldiv(v1950, v209[v1949]);
                        v1950 = v1951.quot;
                        v1947 += *(_QWORD *)(v1948 + 8 * v1949--) * v1951.rem;
                      }
                      while (v1949 != -1);
                    }
                    v1952 = v2190;
                    if ((v2190 & 0x80000000) != 0)
                    {
                      LODWORD(v1953) = 0;
                    }
                    else
                    {
                      v1953 = 0;
                      v1954 = v315[3];
                      v1955 = v2183;
                      do
                      {
                        v1956 = ldiv(v1955, v316[v1952]);
                        v1955 = v1956.quot;
                        v1953 += *(_QWORD *)(v1954 + 8 * v1952--) * v1956.rem;
                      }
                      while (v1952 != -1);
                    }
                    v211 = v2208;
                    if ((int)v483 >= 1)
                    {
                      v1957 = 0;
                      v1958 = *(_QWORD *)(v2101 + 8 * (int)v1947);
                      v1959 = v483 + 1;
                      do
                      {
                        if (v1958)
                          v1960 = *(_QWORD *)(v2086 + 8 * (int)v1953 + v1957) == 0;
                        else
                          v1960 = 1;
                        v1961 = !v1960;
                        *(_QWORD *)(v1946 + v1957) = v1961;
                        --v1959;
                        v1957 += 8;
                      }
                      while (v1959 > 1);
                    }
                    v1946 += 8 * (int)v483;
                    v2183 += (int)v483;
                  }
                  while (v2183 < v2154);
                }
              }
              break;
            case 2:
              if (v214 == 2)
              {
                v1962 = *v209;
                if ((_DWORD)v1962)
                {
                  v1963 = 0;
                  v1964 = 0;
                  v1965 = 0;
                  v1966 = v208[19];
                  v1967 = v315[19];
                  v1968 = v207[19];
                  v1969 = v209[1];
                  v1970 = (uint64_t *)v208[3];
                  v1971 = *v1970;
                  v1972 = v1970[1];
                  v1973 = (uint64_t *)v315[3];
                  v1974 = *v1973;
                  v1975 = v1973[1];
                  if (v1969 <= 1)
                    v1976 = 1;
                  else
                    v1976 = v209[1];
                  v1977 = v1971 - v1972 * v1969;
                  v1978 = v1974 - v1975 * v316[1];
                  do
                  {
                    if ((_DWORD)v1969)
                    {
                      v1979 = 0;
                      v1980 = v1966 + 8 * v1965;
                      do
                      {
                        if ((int)v483 >= 1)
                        {
                          v1981 = 0;
                          v1982 = *(_QWORD *)(v1967 + 8 * v1964);
                          v1983 = v483 + 1;
                          do
                          {
                            if (v1982)
                              v1984 = *(_QWORD *)(v1980 + v1981) == 0;
                            else
                              v1984 = 1;
                            v1985 = !v1984;
                            *(_QWORD *)(v1968 + v1981) = v1985;
                            --v1983;
                            v1981 += 8;
                          }
                          while (v1983 > 1);
                        }
                        v1965 += v1972;
                        v1964 += v1975;
                        v1968 += 8 * (int)v483;
                        ++v1979;
                        v1980 += 8 * v1972;
                      }
                      while (v1979 != v1976);
                    }
                    v1965 += v1977;
                    v1964 += v1978;
                    ++v1963;
                  }
                  while (v1963 != v1962);
                }
              }
              else if (v214 == 1)
              {
                v1249 = *v209;
                if ((_DWORD)v1249)
                {
                  v1250 = 0;
                  v1251 = 0;
                  v1252 = v208[19];
                  v1253 = v315[19];
                  v1254 = v207[19];
                  v1255 = *(_QWORD *)v315[3];
                  v1256 = 8 * *(_QWORD *)v208[3];
                  do
                  {
                    if ((int)v483 >= 1)
                    {
                      v1257 = 0;
                      v1258 = *(_QWORD *)(v1253 + 8 * v1251);
                      v1259 = v483 + 1;
                      do
                      {
                        if (v1258)
                          v1260 = *(_QWORD *)(v1252 + v1257) == 0;
                        else
                          v1260 = 1;
                        v1261 = !v1260;
                        *(_QWORD *)(v1254 + v1257) = v1261;
                        --v1259;
                        v1257 += 8;
                      }
                      while (v1259 > 1);
                    }
                    v1251 += v1255;
                    ++v1250;
                    v1254 += 8 * (int)v483;
                    v1252 += v1256;
                  }
                  while (v1250 != v1249);
                }
              }
              else
              {
                v2155 = v207[6];
                if (v2155)
                {
                  v2184 = 0;
                  v2087 = v315[19];
                  v2102 = v208[19];
                  v1986 = v207[19];
                  do
                  {
                    v1987 = 0;
                    if ((v211 & 0x80000000) == 0)
                    {
                      v1988 = v208[3];
                      v1989 = v211;
                      v1990 = v2184;
                      do
                      {
                        v1991 = ldiv(v1990, v209[v1989]);
                        v1990 = v1991.quot;
                        v1987 += *(_QWORD *)(v1988 + 8 * v1989--) * v1991.rem;
                      }
                      while (v1989 != -1);
                    }
                    v1992 = v2190;
                    if ((v2190 & 0x80000000) != 0)
                    {
                      LODWORD(v1993) = 0;
                    }
                    else
                    {
                      v1993 = 0;
                      v1994 = v315[3];
                      v1995 = v2184;
                      do
                      {
                        v1996 = ldiv(v1995, v316[v1992]);
                        v1995 = v1996.quot;
                        v1993 += *(_QWORD *)(v1994 + 8 * v1992--) * v1996.rem;
                      }
                      while (v1992 != -1);
                    }
                    v211 = v2208;
                    if ((int)v483 >= 1)
                    {
                      v1997 = 0;
                      v1998 = *(_QWORD *)(v2087 + 8 * (int)v1993);
                      v1999 = v483 + 1;
                      do
                      {
                        if (v1998)
                          v2000 = *(_QWORD *)(v2102 + 8 * (int)v1987 + v1997) == 0;
                        else
                          v2000 = 1;
                        v2001 = !v2000;
                        *(_QWORD *)(v1986 + v1997) = v2001;
                        --v1999;
                        v1997 += 8;
                      }
                      while (v1999 > 1);
                    }
                    v1986 += 8 * (int)v483;
                    v2184 += (int)v483;
                  }
                  while (v2184 < v2155);
                }
              }
              break;
            case 3:
              if (v214 == 2)
              {
                v1468 = *v209;
                if ((_DWORD)v1468)
                {
                  v1469 = 0;
                  v1470 = 0;
                  v1471 = 0;
                  v1472 = v208[19];
                  v1473 = v315[19];
                  v1474 = v207[19];
                  v1475 = v209[1];
                  v1476 = (uint64_t *)v208[3];
                  v1477 = *v1476;
                  v1478 = v1476[1];
                  v1479 = (uint64_t *)v315[3];
                  v1480 = *v1479;
                  v1481 = v1479[1];
                  if (v1475 <= 1)
                    v1482 = 1;
                  else
                    v1482 = v209[1];
                  v1483 = v1477 - v1478 * v1475;
                  v1484 = v1480 - v1481 * v316[1];
                  do
                  {
                    if ((_DWORD)v1475)
                    {
                      v1485 = 0;
                      v1486 = v1473 + 8 * v1470;
                      v1487 = v1472 + 8 * v1471;
                      do
                      {
                        if ((int)v483 >= 1)
                        {
                          v1488 = 0;
                          v1489 = v483 + 1;
                          do
                          {
                            if (*(_QWORD *)(v1487 + v1488))
                              v1490 = *(_QWORD *)(v1486 + v1488) == 0;
                            else
                              v1490 = 1;
                            v1491 = !v1490;
                            *(_QWORD *)(v1474 + v1488) = v1491;
                            --v1489;
                            v1488 += 8;
                          }
                          while (v1489 > 1);
                        }
                        v1471 += v1478;
                        v1470 += v1481;
                        v1474 += 8 * (int)v483;
                        ++v1485;
                        v1486 += 8 * v1481;
                        v1487 += 8 * v1478;
                      }
                      while (v1485 != v1482);
                    }
                    v1471 += v1483;
                    v1470 += v1484;
                    ++v1469;
                  }
                  while (v1469 != v1468);
                }
              }
              else if (v214 == 1)
              {
                v484 = *v209;
                if ((_DWORD)v484)
                {
                  v485 = 0;
                  v486 = v208[19];
                  v487 = v315[19];
                  v488 = v207[19];
                  v489 = 8 * *(_QWORD *)v315[3];
                  v490 = 8 * *(_QWORD *)v208[3];
                  do
                  {
                    if ((int)v483 >= 1)
                    {
                      v491 = 0;
                      v492 = v483 + 1;
                      do
                      {
                        if (*(_QWORD *)(v486 + v491))
                          v493 = *(_QWORD *)(v487 + v491) == 0;
                        else
                          v493 = 1;
                        v494 = !v493;
                        *(_QWORD *)(v488 + v491) = v494;
                        --v492;
                        v491 += 8;
                      }
                      while (v492 > 1);
                    }
                    ++v485;
                    v488 += 8 * (int)v483;
                    v487 += v489;
                    v486 += v490;
                  }
                  while (v485 != v484);
                }
              }
              else
              {
                v2142 = v207[6];
                if (v2142)
                {
                  v2171 = 0;
                  v2080 = v315[19];
                  v2093 = v208[19];
                  v1492 = v207[19];
                  do
                  {
                    v1493 = 0;
                    if ((v211 & 0x80000000) == 0)
                    {
                      v1494 = v208[3];
                      v1495 = v211;
                      v1496 = v2171;
                      do
                      {
                        v1497 = ldiv(v1496, v209[v1495]);
                        v1496 = v1497.quot;
                        v1493 += *(_QWORD *)(v1494 + 8 * v1495--) * v1497.rem;
                      }
                      while (v1495 != -1);
                    }
                    v1498 = v2190;
                    if ((v2190 & 0x80000000) != 0)
                    {
                      LODWORD(v1499) = 0;
                    }
                    else
                    {
                      v1499 = 0;
                      v1500 = v315[3];
                      v1501 = v2171;
                      do
                      {
                        v1502 = ldiv(v1501, v316[v1498]);
                        v1501 = v1502.quot;
                        v1499 += *(_QWORD *)(v1500 + 8 * v1498--) * v1502.rem;
                      }
                      while (v1498 != -1);
                    }
                    v211 = v2208;
                    if ((int)v483 >= 1)
                    {
                      v1503 = 0;
                      v1504 = v483 + 1;
                      do
                      {
                        if (*(_QWORD *)(v2093 + 8 * (int)v1493 + v1503))
                          v1505 = *(_QWORD *)(v2080 + 8 * (int)v1499 + v1503) == 0;
                        else
                          v1505 = 1;
                        v1506 = !v1505;
                        *(_QWORD *)(v1492 + v1503) = v1506;
                        --v1504;
                        v1503 += 8;
                      }
                      while (v1504 > 1);
                    }
                    v1492 += 8 * (int)v483;
                    v2171 += (int)v483;
                  }
                  while (v2171 < v2142);
                }
              }
              break;
            default:
LABEL_680:
              switch(v479)
              {
                case 1uLL:
                  v495 = v207[6];
                  if (v495)
                  {
                    v496 = (_QWORD *)v208[19];
                    v497 = (_QWORD *)v315[19];
                    v498 = (uint64_t *)v207[19];
                    v499 = 8 * *(_QWORD *)v315[3];
                    v500 = 8 * *(_QWORD *)v208[3];
                    do
                    {
                      if (*v496)
                        v501 = *v497 == 0;
                      else
                        v501 = 1;
                      v502 = !v501;
                      *v498++ = v502;
                      v497 = (_QWORD *)((char *)v497 + v499);
                      v496 = (_QWORD *)((char *)v496 + v500);
                      --v495;
                    }
                    while (v495);
                  }
                  break;
                case 2uLL:
                  v952 = *v209;
                  if ((_DWORD)v952)
                  {
                    v953 = 0;
                    v954 = 0;
                    v955 = 0;
                    v956 = 0;
                    v957 = v208[19];
                    v958 = v315[19];
                    v959 = v207[19];
                    v960 = v209[1];
                    v961 = (uint64_t *)v208[3];
                    v962 = *v961;
                    v963 = v961[1];
                    v964 = (uint64_t *)v315[3];
                    v965 = *v964;
                    v966 = v964[1];
                    v967 = v965 - v966 * v316[1];
                    if (v960 <= 1)
                      v968 = 1;
                    else
                      v968 = v209[1];
                    v969 = v962 - v963 * v960;
                    do
                    {
                      if ((_DWORD)v960)
                      {
                        v970 = v954 + v968;
                        v971 = (uint64_t *)(v959 + 8 * v954);
                        v972 = v968;
                        do
                        {
                          if (*(_QWORD *)(v957 + 8 * v956))
                            v973 = *(_QWORD *)(v958 + 8 * v955) == 0;
                          else
                            v973 = 1;
                          v974 = !v973;
                          *v971++ = v974;
                          v956 += v963;
                          v955 += v966;
                          --v972;
                        }
                        while (v972);
                        v954 = v970;
                      }
                      v956 += v969;
                      v955 += v967;
                      ++v953;
                    }
                    while (v953 != v952);
                  }
                  break;
                case 3uLL:
                  v975 = *v209;
                  if ((_DWORD)v975)
                  {
                    v976 = 0;
                    v977 = 0;
                    v978 = 0;
                    v979 = 0;
                    v980 = v208[19];
                    v981 = v315[19];
                    v982 = v207[19];
                    v983 = v209[1];
                    v984 = (_QWORD *)v208[3];
                    v985 = v984[1];
                    v986 = (_QWORD *)v315[3];
                    v987 = v986[1];
                    v988 = *v986 - v987 * v316[1];
                    if (v983 <= 1)
                      v989 = 1;
                    else
                      v989 = v209[1];
                    v990 = *v984 - v985 * v983;
                    do
                    {
                      if ((_DWORD)v983)
                      {
                        v991 = 0;
                        v992 = v209[2];
                        v993 = v984[2];
                        v994 = v986[2];
                        if (v992 <= 1)
                          v995 = 1;
                        else
                          v995 = v209[2];
                        v996 = v987 - v994 * v316[2];
                        do
                        {
                          v997 = v995;
                          if ((_DWORD)v992)
                          {
                            do
                            {
                              if (*(_QWORD *)(v980 + 8 * v979))
                                v998 = *(_QWORD *)(v981 + 8 * v978) == 0;
                              else
                                v998 = 1;
                              v999 = !v998;
                              *(_QWORD *)(v982 + 8 * v977++) = v999;
                              v979 += v993;
                              v978 += v994;
                              --v997;
                            }
                            while (v997);
                          }
                          v979 += v985 - v993 * v992;
                          v978 += v996;
                          ++v991;
                        }
                        while (v991 != v989);
                      }
                      v979 += v990;
                      v978 += v988;
                      ++v976;
                    }
                    while (v976 != v975);
                  }
                  break;
                case 4uLL:
                  v2213 = *v209;
                  if ((_DWORD)v2213)
                  {
                    v1000 = 0;
                    v1001 = 0;
                    v1002 = 0;
                    v1003 = 0;
                    v1004 = v208[19];
                    v1005 = v315[19];
                    v1006 = v207[19];
                    v1007 = v209[1];
                    v1008 = (_QWORD *)v208[3];
                    v1009 = (_QWORD *)v315[3];
                    v2105 = v1009[1];
                    v2120 = v1008[1];
                    v2163 = *v1009 - v2105 * v316[1];
                    v2195 = v209[1];
                    if (v1007 <= 1)
                      v1010 = 1;
                    else
                      v1010 = v209[1];
                    v2134 = *v1008 - v1008[1] * v1007;
                    do
                    {
                      if (v2195)
                      {
                        v1011 = 0;
                        v1012 = v209[2];
                        v1013 = v1008[2];
                        v1014 = v1009[2];
                        if (v1012 <= 1)
                          v1015 = 1;
                        else
                          v1015 = v209[2];
                        v1016 = v2105 - v1014 * v316[2];
                        do
                        {
                          if ((_DWORD)v1012)
                          {
                            v1017 = 0;
                            v1018 = v209[3];
                            v1019 = v1008[3];
                            v1020 = v1009[3];
                            if (v1018 <= 1)
                              v1021 = 1;
                            else
                              v1021 = v209[3];
                            v1022 = v1014 - v1020 * v316[3];
                            do
                            {
                              v1023 = v1021;
                              if ((_DWORD)v1018)
                              {
                                do
                                {
                                  if (*(_QWORD *)(v1004 + 8 * v1003))
                                    v1024 = *(_QWORD *)(v1005 + 8 * v1002) == 0;
                                  else
                                    v1024 = 1;
                                  v1025 = !v1024;
                                  *(_QWORD *)(v1006 + 8 * v1001++) = v1025;
                                  v1003 += v1019;
                                  v1002 += v1020;
                                  --v1023;
                                }
                                while (v1023);
                              }
                              v1003 += v1013 - v1019 * v1018;
                              v1002 += v1022;
                              ++v1017;
                            }
                            while (v1017 != v1015);
                          }
                          v1003 += v2120 - v1013 * v1012;
                          v1002 += v1016;
                          ++v1011;
                        }
                        while (v1011 != v1010);
                      }
                      v1003 += v2134;
                      v1002 += v2163;
                      ++v1000;
                    }
                    while (v1000 != v2213);
                  }
                  break;
                default:
                  v938 = v207[6];
                  if (v938)
                  {
                    v939 = 0;
                    v2133 = v315[19];
                    v2162 = v208[19];
                    v2119 = v207[19];
                    do
                    {
                      v940 = 0;
                      if ((v211 & 0x80000000) == 0)
                      {
                        v941 = v208[3];
                        v942 = v211;
                        v943 = v939;
                        do
                        {
                          v944 = ldiv(v943, v209[v942]);
                          v943 = v944.quot;
                          v940 += *(_QWORD *)(v941 + 8 * v942--) * v944.rem;
                        }
                        while (v942 != -1);
                      }
                      v945 = v2190;
                      if ((v2190 & 0x80000000) != 0)
                      {
                        LODWORD(v946) = 0;
                      }
                      else
                      {
                        v946 = 0;
                        v947 = v315[3];
                        v948 = v939;
                        do
                        {
                          v949 = ldiv(v948, v316[v945]);
                          v948 = v949.quot;
                          v946 += *(_QWORD *)(v947 + 8 * v945--) * v949.rem;
                        }
                        while (v945 != -1);
                      }
                      if (*(_QWORD *)(v2162 + 8 * (int)v940))
                        v950 = *(_QWORD *)(v2133 + 8 * (int)v946) == 0;
                      else
                        v950 = 1;
                      v951 = !v950;
                      *(_QWORD *)(v2119 + 8 * v939++) = v951;
                      v211 = v2208;
                    }
                    while (v939 != v938);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v36)
      {
        case 0:
          v37 = **(float **)(*a1 + 152) != 0.0;
          if (**(float **)(*a2 + 152) == 0.0)
            v37 = 0;
          **(float **)(*(_QWORD *)a3 + 152) = (float)v37;
          return;
        case 1:
          v254 = *(_DWORD *)(*a2 + 160);
          if (v254 >= 1)
          {
            v255 = *(float **)(*(_QWORD *)a3 + 152);
            v256 = *(float **)(*a2 + 152);
            v257 = **(float **)(*a1 + 152);
            v258 = v254 + 1;
            do
            {
              v259 = v257 != 0.0;
              v260 = *v256++;
              if (v260 == 0.0)
                v259 = 0;
              *v255++ = (float)v259;
              --v258;
            }
            while (v258 > 1);
          }
          return;
        case 2:
          v261 = *(_DWORD *)(*a1 + 160);
          if (v261 >= 1)
          {
            v262 = *(float **)(*(_QWORD *)a3 + 152);
            v263 = *(float **)(*a1 + 152);
            v264 = **(float **)(*a2 + 152);
            v265 = v261 + 1;
            do
            {
              v266 = v264 != 0.0;
              v267 = *v263++;
              if (v267 == 0.0)
                v266 = 0;
              *v262++ = (float)v266;
              --v265;
            }
            while (v265 > 1);
          }
          return;
        case 3:
          v268 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v268 >= 1)
          {
            v269 = *(float **)(*(_QWORD *)a3 + 152);
            v270 = *(float **)(*a2 + 152);
            v271 = *(float **)(*a1 + 152);
            v272 = v268 + 1;
            do
            {
              v273 = *v271++;
              v274 = v273;
              v275 = *v270++;
              v276 = v274 != 0.0;
              if (v275 == 0.0)
                v276 = 0;
              *v269++ = (float)v276;
              --v272;
            }
            while (v272 > 1);
          }
          return;
        default:
          v245 = *(_QWORD **)a3;
          v246 = (_QWORD *)*a1;
          v247 = *(int **)*a1;
          v248 = (v246[1] - (_QWORD)v247) >> 2;
          v249 = (v248 - 1);
          if ((int)v249 >= -1)
            v250 = -1;
          else
            v250 = v248 - 1;
          v251 = v250 + 1;
          v252 = v248 + 1;
          while (1)
          {
            v253 = v252 - 2;
            if (v252 - 2 < 0)
              break;
            --v252;
            if (*(_QWORD *)(v246[3] + 8 * v253) != *(_QWORD *)(v245[3] + 8 * v253))
              goto LABEL_328;
          }
          v252 = v251;
LABEL_328:
          v323 = (_QWORD *)*a2;
          v324 = *(int **)*a2;
          v325 = (v323[1] - (_QWORD)v324) >> 2;
          v326 = (v325 - 1);
          if ((int)v326 >= -1)
            v327 = -1;
          else
            v327 = v325 - 1;
          v328 = v327 + 1;
          v329 = v325 + 1;
          while (1)
          {
            v330 = v329 - 2;
            if (v329 - 2 < 0)
              break;
            --v329;
            if (*(_QWORD *)(v323[3] + 8 * v330) != *(_QWORD *)(v245[3] + 8 * v330))
              goto LABEL_366;
          }
          v329 = v328;
LABEL_366:
          v343 = v248 + 1;
          while (1)
          {
            v344 = v343 - 2;
            if (v343 - 2 < 0)
              break;
            --v343;
            if (*(_QWORD *)(v246[3] + 8 * v344))
              goto LABEL_401;
          }
          v343 = v251;
LABEL_401:
          v357 = v325 + 1;
          while (1)
          {
            v358 = v357 - 2;
            if (v357 - 2 < 0)
              break;
            --v357;
            if (*(_QWORD *)(v323[3] + 8 * v358))
              goto LABEL_692;
          }
          v357 = v328;
LABEL_692:
          v503 = (uint64_t)(v245[1] - *v245) >> 2;
          if (v252 <= v329)
            v504 = v329;
          else
            v504 = v252;
          if (v252 <= v357)
            v252 = v357;
          if (v343 > v329)
            v329 = v343;
          if (v503 > v329)
          {
            v505 = 1;
          }
          else
          {
            v329 = (uint64_t)(v245[1] - *v245) >> 2;
            v505 = v36;
          }
          if (v503 > v252)
          {
            v506 = 2;
          }
          else
          {
            v252 = v329;
            v506 = v505;
          }
          if (v503 > v504)
          {
            v252 = v504;
            v506 = 3;
          }
          v2191 = v326;
          v2209 = v249;
          if (!v252)
            goto LABEL_723;
          v507 = *(_QWORD *)(v245[3] + 8 * (v252 - 1));
          if (v507 < 0x10)
            goto LABEL_723;
          switch(v506)
          {
            case 1:
              if (v252 == 2)
              {
                v2002 = *v247;
                if ((_DWORD)v2002)
                {
                  v2003 = 0;
                  v2004 = 0;
                  v2005 = 0;
                  v2006 = v246[19];
                  v2007 = v323[19];
                  v2008 = v245[19];
                  v2009 = v247[1];
                  v2010 = (uint64_t *)v246[3];
                  v2011 = *v2010;
                  v2012 = v2010[1];
                  v2013 = (uint64_t *)v323[3];
                  v2014 = *v2013;
                  v2015 = v2013[1];
                  if (v2009 <= 1)
                    v2016 = 1;
                  else
                    v2016 = v247[1];
                  v2017 = v2011 - v2012 * v2009;
                  v2018 = v2014 - v2015 * v324[1];
                  do
                  {
                    if ((_DWORD)v2009)
                    {
                      v2019 = 0;
                      v2020 = v2007 + 4 * v2004;
                      do
                      {
                        if ((int)v507 >= 1)
                        {
                          v2021 = 0;
                          v2022 = *(float *)(v2006 + 4 * v2005);
                          v2023 = v507 + 1;
                          do
                          {
                            v2024 = v2022 != 0.0;
                            if (*(float *)(v2020 + v2021) == 0.0)
                              v2024 = 0;
                            *(float *)(v2008 + v2021) = (float)v2024;
                            --v2023;
                            v2021 += 4;
                          }
                          while (v2023 > 1);
                        }
                        v2005 += v2012;
                        v2004 += v2015;
                        v2008 += 4 * (int)v507;
                        ++v2019;
                        v2020 += 4 * v2015;
                      }
                      while (v2019 != v2016);
                    }
                    v2005 += v2017;
                    v2004 += v2018;
                    ++v2003;
                  }
                  while (v2003 != v2002);
                }
              }
              else if (v252 == 1)
              {
                v1262 = *v247;
                if ((_DWORD)v1262)
                {
                  v1263 = 0;
                  v1264 = 0;
                  v1265 = v246[19];
                  v1266 = v323[19];
                  v1267 = v245[19];
                  v1268 = *(_QWORD *)v246[3];
                  v1269 = 4 * *(_QWORD *)v323[3];
                  do
                  {
                    if ((int)v507 >= 1)
                    {
                      v1270 = 0;
                      v1271 = *(float *)(v1265 + 4 * v1264);
                      v1272 = v507 + 1;
                      do
                      {
                        v1273 = v1271 != 0.0;
                        if (*(float *)(v1266 + v1270) == 0.0)
                          v1273 = 0;
                        *(float *)(v1267 + v1270) = (float)v1273;
                        --v1272;
                        v1270 += 4;
                      }
                      while (v1272 > 1);
                    }
                    v1264 += v1268;
                    ++v1263;
                    v1267 += 4 * (int)v507;
                    v1266 += v1269;
                  }
                  while (v1263 != v1262);
                }
              }
              else
              {
                v2156 = v245[6];
                if (v2156)
                {
                  v2185 = 0;
                  v2088 = v323[19];
                  v2103 = v246[19];
                  v2025 = v245[19];
                  do
                  {
                    v2026 = 0;
                    if ((v249 & 0x80000000) == 0)
                    {
                      v2027 = v246[3];
                      v2028 = v249;
                      v2029 = v2185;
                      do
                      {
                        v2030 = ldiv(v2029, v247[v2028]);
                        v2029 = v2030.quot;
                        v2026 += *(_QWORD *)(v2027 + 8 * v2028--) * v2030.rem;
                      }
                      while (v2028 != -1);
                    }
                    v2031 = v2191;
                    if ((v2191 & 0x80000000) != 0)
                    {
                      LODWORD(v2032) = 0;
                    }
                    else
                    {
                      v2032 = 0;
                      v2033 = v323[3];
                      v2034 = v2185;
                      do
                      {
                        v2035 = ldiv(v2034, v324[v2031]);
                        v2034 = v2035.quot;
                        v2032 += *(_QWORD *)(v2033 + 8 * v2031--) * v2035.rem;
                      }
                      while (v2031 != -1);
                    }
                    v249 = v2209;
                    if ((int)v507 >= 1)
                    {
                      v2036 = 0;
                      v2037 = *(float *)(v2103 + 4 * (int)v2026);
                      v2038 = v507 + 1;
                      do
                      {
                        v2039 = v2037 != 0.0;
                        if (*(float *)(v2088 + 4 * (int)v2032 + v2036) == 0.0)
                          v2039 = 0;
                        *(float *)(v2025 + v2036) = (float)v2039;
                        --v2038;
                        v2036 += 4;
                      }
                      while (v2038 > 1);
                    }
                    v2025 += 4 * (int)v507;
                    v2185 += (int)v507;
                  }
                  while (v2185 < v2156);
                }
              }
              break;
            case 2:
              if (v252 == 2)
              {
                v2040 = *v247;
                if ((_DWORD)v2040)
                {
                  v2041 = 0;
                  v2042 = 0;
                  v2043 = 0;
                  v2044 = v246[19];
                  v2045 = v323[19];
                  v2046 = v245[19];
                  v2047 = v247[1];
                  v2048 = (uint64_t *)v246[3];
                  v2049 = *v2048;
                  v2050 = v2048[1];
                  v2051 = (uint64_t *)v323[3];
                  v2052 = *v2051;
                  v2053 = v2051[1];
                  if (v2047 <= 1)
                    v2054 = 1;
                  else
                    v2054 = v247[1];
                  v2055 = v2049 - v2050 * v2047;
                  v2056 = v2052 - v2053 * v324[1];
                  do
                  {
                    if ((_DWORD)v2047)
                    {
                      v2057 = 0;
                      v2058 = v2044 + 4 * v2043;
                      do
                      {
                        if ((int)v507 >= 1)
                        {
                          v2059 = 0;
                          v2060 = *(float *)(v2045 + 4 * v2042);
                          v2061 = v507 + 1;
                          do
                          {
                            v2062 = v2060 != 0.0;
                            if (*(float *)(v2058 + v2059) == 0.0)
                              v2062 = 0;
                            *(float *)(v2046 + v2059) = (float)v2062;
                            --v2061;
                            v2059 += 4;
                          }
                          while (v2061 > 1);
                        }
                        v2043 += v2050;
                        v2042 += v2053;
                        v2046 += 4 * (int)v507;
                        ++v2057;
                        v2058 += 4 * v2050;
                      }
                      while (v2057 != v2054);
                    }
                    v2043 += v2055;
                    v2042 += v2056;
                    ++v2041;
                  }
                  while (v2041 != v2040);
                }
              }
              else if (v252 == 1)
              {
                v1274 = *v247;
                if ((_DWORD)v1274)
                {
                  v1275 = 0;
                  v1276 = 0;
                  v1277 = v246[19];
                  v1278 = v323[19];
                  v1279 = v245[19];
                  v1280 = *(_QWORD *)v323[3];
                  v1281 = 4 * *(_QWORD *)v246[3];
                  do
                  {
                    if ((int)v507 >= 1)
                    {
                      v1282 = 0;
                      v1283 = *(float *)(v1278 + 4 * v1276);
                      v1284 = v507 + 1;
                      do
                      {
                        v1285 = v1283 != 0.0;
                        if (*(float *)(v1277 + v1282) == 0.0)
                          v1285 = 0;
                        *(float *)(v1279 + v1282) = (float)v1285;
                        --v1284;
                        v1282 += 4;
                      }
                      while (v1284 > 1);
                    }
                    v1276 += v1280;
                    ++v1275;
                    v1279 += 4 * (int)v507;
                    v1277 += v1281;
                  }
                  while (v1275 != v1274);
                }
              }
              else
              {
                v2157 = v245[6];
                if (v2157)
                {
                  v2186 = 0;
                  v2089 = v323[19];
                  v2104 = v246[19];
                  v2063 = v245[19];
                  do
                  {
                    v2064 = 0;
                    if ((v249 & 0x80000000) == 0)
                    {
                      v2065 = v246[3];
                      v2066 = v249;
                      v2067 = v2186;
                      do
                      {
                        v2068 = ldiv(v2067, v247[v2066]);
                        v2067 = v2068.quot;
                        v2064 += *(_QWORD *)(v2065 + 8 * v2066--) * v2068.rem;
                      }
                      while (v2066 != -1);
                    }
                    v2069 = v2191;
                    if ((v2191 & 0x80000000) != 0)
                    {
                      LODWORD(v2070) = 0;
                    }
                    else
                    {
                      v2070 = 0;
                      v2071 = v323[3];
                      v2072 = v2186;
                      do
                      {
                        v2073 = ldiv(v2072, v324[v2069]);
                        v2072 = v2073.quot;
                        v2070 += *(_QWORD *)(v2071 + 8 * v2069--) * v2073.rem;
                      }
                      while (v2069 != -1);
                    }
                    v249 = v2209;
                    if ((int)v507 >= 1)
                    {
                      v2074 = 0;
                      v2075 = *(float *)(v2089 + 4 * (int)v2070);
                      v2076 = v507 + 1;
                      do
                      {
                        v2077 = v2075 != 0.0;
                        if (*(float *)(v2104 + 4 * (int)v2064 + v2074) == 0.0)
                          v2077 = 0;
                        *(float *)(v2063 + v2074) = (float)v2077;
                        --v2076;
                        v2074 += 4;
                      }
                      while (v2076 > 1);
                    }
                    v2063 += 4 * (int)v507;
                    v2186 += (int)v507;
                  }
                  while (v2186 < v2157);
                }
              }
              break;
            case 3:
              if (v252 == 2)
              {
                v1507 = *v247;
                if ((_DWORD)v1507)
                {
                  v1508 = 0;
                  v1509 = 0;
                  v1510 = 0;
                  v1511 = v246[19];
                  v1512 = v323[19];
                  v1513 = v245[19];
                  v1514 = v247[1];
                  v1515 = (uint64_t *)v246[3];
                  v1516 = *v1515;
                  v1517 = v1515[1];
                  v1518 = (uint64_t *)v323[3];
                  v1519 = *v1518;
                  v1520 = v1518[1];
                  if (v1514 <= 1)
                    v1521 = 1;
                  else
                    v1521 = v247[1];
                  v1522 = v1516 - v1517 * v1514;
                  v1523 = v1519 - v1520 * v324[1];
                  do
                  {
                    if ((_DWORD)v1514)
                    {
                      v1524 = 0;
                      v1525 = v1512 + 4 * v1509;
                      v1526 = v1511 + 4 * v1510;
                      do
                      {
                        if ((int)v507 >= 1)
                        {
                          v1527 = 0;
                          v1528 = v507 + 1;
                          do
                          {
                            v1529 = *(float *)(v1526 + v1527) != 0.0;
                            if (*(float *)(v1525 + v1527) == 0.0)
                              v1529 = 0;
                            *(float *)(v1513 + v1527) = (float)v1529;
                            --v1528;
                            v1527 += 4;
                          }
                          while (v1528 > 1);
                        }
                        v1510 += v1517;
                        v1509 += v1520;
                        v1513 += 4 * (int)v507;
                        ++v1524;
                        v1525 += 4 * v1520;
                        v1526 += 4 * v1517;
                      }
                      while (v1524 != v1521);
                    }
                    v1510 += v1522;
                    v1509 += v1523;
                    ++v1508;
                  }
                  while (v1508 != v1507);
                }
              }
              else if (v252 == 1)
              {
                v508 = *v247;
                if ((_DWORD)v508)
                {
                  v509 = 0;
                  v510 = v246[19];
                  v511 = v323[19];
                  v512 = v245[19];
                  v513 = 4 * *(_QWORD *)v323[3];
                  v514 = 4 * *(_QWORD *)v246[3];
                  do
                  {
                    if ((int)v507 >= 1)
                    {
                      v515 = 0;
                      v516 = v507 + 1;
                      do
                      {
                        v517 = *(float *)(v510 + v515) != 0.0;
                        if (*(float *)(v511 + v515) == 0.0)
                          v517 = 0;
                        *(float *)(v512 + v515) = (float)v517;
                        --v516;
                        v515 += 4;
                      }
                      while (v516 > 1);
                    }
                    ++v509;
                    v512 += 4 * (int)v507;
                    v511 += v513;
                    v510 += v514;
                  }
                  while (v509 != v508);
                }
              }
              else
              {
                v2143 = v245[6];
                if (v2143)
                {
                  v2172 = 0;
                  v2081 = v323[19];
                  v2094 = v246[19];
                  v1530 = v245[19];
                  do
                  {
                    v1531 = 0;
                    if ((v249 & 0x80000000) == 0)
                    {
                      v1532 = v246[3];
                      v1533 = v249;
                      v1534 = v2172;
                      do
                      {
                        v1535 = ldiv(v1534, v247[v1533]);
                        v1534 = v1535.quot;
                        v1531 += *(_QWORD *)(v1532 + 8 * v1533--) * v1535.rem;
                      }
                      while (v1533 != -1);
                    }
                    v1536 = v2191;
                    if ((v2191 & 0x80000000) != 0)
                    {
                      LODWORD(v1537) = 0;
                    }
                    else
                    {
                      v1537 = 0;
                      v1538 = v323[3];
                      v1539 = v2172;
                      do
                      {
                        v1540 = ldiv(v1539, v324[v1536]);
                        v1539 = v1540.quot;
                        v1537 += *(_QWORD *)(v1538 + 8 * v1536--) * v1540.rem;
                      }
                      while (v1536 != -1);
                    }
                    v249 = v2209;
                    if ((int)v507 >= 1)
                    {
                      v1541 = 0;
                      v1542 = v507 + 1;
                      do
                      {
                        v1543 = *(float *)(v2094 + 4 * (int)v1531 + v1541) != 0.0;
                        if (*(float *)(v2081 + 4 * (int)v1537 + v1541) == 0.0)
                          v1543 = 0;
                        *(float *)(v1530 + v1541) = (float)v1543;
                        --v1542;
                        v1541 += 4;
                      }
                      while (v1542 > 1);
                    }
                    v1530 += 4 * (int)v507;
                    v2172 += (int)v507;
                  }
                  while (v2172 < v2143);
                }
              }
              break;
            default:
LABEL_723:
              switch(v503)
              {
                case 1uLL:
                  v518 = v245[6];
                  if (v518)
                  {
                    v519 = (float *)v246[19];
                    v520 = (float *)v323[19];
                    v521 = (float *)v245[19];
                    v522 = 4 * *(_QWORD *)v323[3];
                    v523 = 4 * *(_QWORD *)v246[3];
                    do
                    {
                      v524 = *v519 != 0.0;
                      if (*v520 == 0.0)
                        v524 = 0;
                      *v521++ = (float)v524;
                      v520 = (float *)((char *)v520 + v522);
                      v519 = (float *)((char *)v519 + v523);
                      --v518;
                    }
                    while (v518);
                  }
                  break;
                case 2uLL:
                  v1039 = *v247;
                  if ((_DWORD)v1039)
                  {
                    v1040 = 0;
                    v1041 = 0;
                    v1042 = 0;
                    v1043 = 0;
                    v1044 = v246[19];
                    v1045 = v323[19];
                    v1046 = v245[19];
                    v1047 = v247[1];
                    v1048 = (uint64_t *)v246[3];
                    v1049 = *v1048;
                    v1050 = v1048[1];
                    v1051 = (uint64_t *)v323[3];
                    v1052 = *v1051;
                    v1053 = v1051[1];
                    v1054 = v1052 - v1053 * v324[1];
                    if (v1047 <= 1)
                      v1055 = 1;
                    else
                      v1055 = v247[1];
                    v1056 = v1049 - v1050 * v1047;
                    do
                    {
                      if ((_DWORD)v1047)
                      {
                        v1057 = v1041 + v1055;
                        v1058 = (float *)(v1046 + 4 * v1041);
                        v1059 = v1055;
                        do
                        {
                          v1060 = *(float *)(v1044 + 4 * v1043) != 0.0;
                          if (*(float *)(v1045 + 4 * v1042) == 0.0)
                            v1060 = 0;
                          *v1058++ = (float)v1060;
                          v1043 += v1050;
                          v1042 += v1053;
                          --v1059;
                        }
                        while (v1059);
                        v1041 = v1057;
                      }
                      v1043 += v1056;
                      v1042 += v1054;
                      ++v1040;
                    }
                    while (v1040 != v1039);
                  }
                  break;
                case 3uLL:
                  v1061 = *v247;
                  if ((_DWORD)v1061)
                  {
                    v1062 = 0;
                    v1063 = 0;
                    v1064 = 0;
                    v1065 = 0;
                    v1066 = v246[19];
                    v1067 = v323[19];
                    v1068 = v245[19];
                    v1069 = v247[1];
                    v1070 = (_QWORD *)v246[3];
                    v1071 = v1070[1];
                    v1072 = (_QWORD *)v323[3];
                    v1073 = v1072[1];
                    v1074 = *v1072 - v1073 * v324[1];
                    if (v1069 <= 1)
                      v1075 = 1;
                    else
                      v1075 = v247[1];
                    v1076 = *v1070 - v1071 * v1069;
                    do
                    {
                      if ((_DWORD)v1069)
                      {
                        v1077 = 0;
                        v1078 = v247[2];
                        v1079 = v1070[2];
                        v1080 = v1072[2];
                        if (v1078 <= 1)
                          v1081 = 1;
                        else
                          v1081 = v247[2];
                        v1082 = v1073 - v1080 * v324[2];
                        do
                        {
                          v1083 = v1081;
                          if ((_DWORD)v1078)
                          {
                            do
                            {
                              v1084 = *(float *)(v1066 + 4 * v1065) != 0.0;
                              if (*(float *)(v1067 + 4 * v1064) == 0.0)
                                v1084 = 0;
                              *(float *)(v1068 + 4 * v1063++) = (float)v1084;
                              v1065 += v1079;
                              v1064 += v1080;
                              --v1083;
                            }
                            while (v1083);
                          }
                          v1065 += v1071 - v1079 * v1078;
                          v1064 += v1082;
                          ++v1077;
                        }
                        while (v1077 != v1075);
                      }
                      v1065 += v1076;
                      v1064 += v1074;
                      ++v1062;
                    }
                    while (v1062 != v1061);
                  }
                  break;
                case 4uLL:
                  v2214 = *v247;
                  if ((_DWORD)v2214)
                  {
                    v1085 = 0;
                    v1086 = 0;
                    v1087 = 0;
                    v1088 = 0;
                    v1089 = v246[19];
                    v1090 = v323[19];
                    v1091 = v245[19];
                    v1092 = v247[1];
                    v1093 = (_QWORD *)v246[3];
                    v1094 = (_QWORD *)v323[3];
                    v2122 = v1094[1];
                    v2136 = v1093[1];
                    if (v1092 <= 1)
                      v1095 = 1;
                    else
                      v1095 = v247[1];
                    v2165 = *v1093 - v1093[1] * v1092;
                    v2196 = *v1094 - v2122 * v324[1];
                    do
                    {
                      if ((_DWORD)v1092)
                      {
                        v1096 = 0;
                        v1097 = v247[2];
                        v1098 = v1093[2];
                        v1099 = v1094[2];
                        if (v1097 <= 1)
                          v1100 = 1;
                        else
                          v1100 = v247[2];
                        v1101 = v2122 - v1099 * v324[2];
                        do
                        {
                          if ((_DWORD)v1097)
                          {
                            v1102 = 0;
                            v1103 = v247[3];
                            v1104 = v1093[3];
                            v1105 = v1094[3];
                            if (v1103 <= 1)
                              v1106 = 1;
                            else
                              v1106 = v247[3];
                            v1107 = v1099 - v1105 * v324[3];
                            do
                            {
                              v1108 = v1106;
                              if ((_DWORD)v1103)
                              {
                                do
                                {
                                  v1109 = *(float *)(v1089 + 4 * v1088) != 0.0;
                                  if (*(float *)(v1090 + 4 * v1087) == 0.0)
                                    v1109 = 0;
                                  *(float *)(v1091 + 4 * v1086++) = (float)v1109;
                                  v1088 += v1104;
                                  v1087 += v1105;
                                  --v1108;
                                }
                                while (v1108);
                              }
                              v1088 += v1098 - v1104 * v1103;
                              v1087 += v1107;
                              ++v1102;
                            }
                            while (v1102 != v1100);
                          }
                          v1088 += v2136 - v1098 * v1097;
                          v1087 += v1101;
                          ++v1096;
                        }
                        while (v1096 != v1095);
                      }
                      v1088 += v2165;
                      v1087 += v2196;
                      ++v1085;
                    }
                    while (v1085 != v2214);
                  }
                  break;
                default:
                  v1026 = v245[6];
                  if (v1026)
                  {
                    v1027 = 0;
                    v2135 = v323[19];
                    v2164 = v246[19];
                    v2121 = v245[19];
                    do
                    {
                      v1028 = 0;
                      if ((v249 & 0x80000000) == 0)
                      {
                        v1029 = v246[3];
                        v1030 = v249;
                        v1031 = v1027;
                        do
                        {
                          v1032 = ldiv(v1031, v247[v1030]);
                          v1031 = v1032.quot;
                          v1028 += *(_QWORD *)(v1029 + 8 * v1030--) * v1032.rem;
                        }
                        while (v1030 != -1);
                      }
                      v1033 = v2191;
                      if ((v2191 & 0x80000000) != 0)
                      {
                        LODWORD(v1034) = 0;
                      }
                      else
                      {
                        v1034 = 0;
                        v1035 = v323[3];
                        v1036 = v1027;
                        do
                        {
                          v1037 = ldiv(v1036, v324[v1033]);
                          v1036 = v1037.quot;
                          v1034 += *(_QWORD *)(v1035 + 8 * v1033--) * v1037.rem;
                        }
                        while (v1033 != -1);
                      }
                      v1038 = *(float *)(v2164 + 4 * (int)v1028) != 0.0;
                      if (*(float *)(v2135 + 4 * (int)v1034) == 0.0)
                        v1038 = 0;
                      *(float *)(v2121 + 4 * v1027++) = (float)v1038;
                      v249 = v2209;
                    }
                    while (v1027 != v1026);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

void mlx::core::LogicalOr::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::LogicalOr::eval();
}

void mlx::core::`anonymous namespace'::binary<mlx::core::detail::LogicalOr>(uint64_t *a1, uint64_t *a2, mlx::core::array *a3)
{
  int binary_op_type;
  char v7;
  int v8;
  int v9;
  int v10;
  BOOL *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  int *v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _BOOL4 v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  char v37;
  _BYTE *v38;
  char *v39;
  unsigned int v40;
  char v41;
  int v42;
  char v43;
  _BYTE *v44;
  char *v45;
  unsigned int v46;
  char v47;
  int v48;
  _BYTE *v49;
  char *v50;
  char *v51;
  unsigned int v52;
  char v53;
  char v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  BOOL *v66;
  unsigned __int8 *v67;
  unsigned int v68;
  int v69;
  int v70;
  BOOL *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  _QWORD *v78;
  _QWORD *v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  _DWORD *v89;
  int *v90;
  unsigned int v91;
  int v92;
  int v93;
  _DWORD *v94;
  int *v95;
  int *v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  BOOL *v111;
  unsigned __int8 *v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  BOOL *v117;
  unsigned __int8 *v118;
  unsigned int v119;
  int v120;
  int v121;
  BOOL *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  _QWORD *v129;
  _QWORD *v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  int v139;
  _DWORD *v140;
  int *v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  _DWORD *v146;
  int *v147;
  unsigned int v148;
  int v149;
  int v150;
  _DWORD *v151;
  int *v152;
  int *v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  _QWORD *v158;
  _QWORD *v159;
  int *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t *v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  unsigned int v177;
  uint64_t v178;
  int v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t *v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  int *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  float *v197;
  float *v198;
  float v199;
  unsigned int v200;
  _BOOL4 v201;
  float v202;
  int v203;
  float *v204;
  float *v205;
  float v206;
  unsigned int v207;
  _BOOL4 v208;
  float v209;
  int v210;
  float *v211;
  float *v212;
  float *v213;
  unsigned int v214;
  float v215;
  float v216;
  float v217;
  _BOOL4 v218;
  _QWORD *v219;
  int *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  int **v227;
  int *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  _QWORD *v234;
  int *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  int **v242;
  int *v243;
  uint64_t v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  _QWORD *v249;
  int *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  unsigned int v256;
  _QWORD *v257;
  int *v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  unsigned int v264;
  _QWORD *v265;
  int *v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  unsigned int v284;
  int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  int v293;
  int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  unint64_t v301;
  int v302;
  int v303;
  int v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  _BYTE *v316;
  _BYTE *v317;
  _BYTE *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  int v322;
  int v323;
  int v324;
  unint64_t v325;
  int v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int *v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int *v339;
  uint64_t v340;
  unint64_t v341;
  int v342;
  int v343;
  int v344;
  unint64_t v345;
  int v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  _DWORD *v356;
  _DWORD *v357;
  _DWORD *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  int v362;
  int v363;
  int v364;
  unint64_t v365;
  int v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int *v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int *v379;
  uint64_t v380;
  unint64_t v381;
  int v382;
  int v383;
  int v384;
  unint64_t v385;
  int v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  _DWORD *v396;
  _DWORD *v397;
  _DWORD *v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  int v402;
  int v403;
  int v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  int v422;
  int v423;
  int v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  _BOOL4 v435;
  uint64_t v436;
  float *v437;
  float *v438;
  float *v439;
  uint64_t v440;
  uint64_t v441;
  _BOOL4 v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  ldiv_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  ldiv_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _BYTE *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  _QWORD *v506;
  _QWORD *v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  ldiv_t v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  ldiv_t v537;
  int v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int *v544;
  uint64_t v545;
  unint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  int *v549;
  uint64_t v550;
  unint64_t v551;
  int v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int *v558;
  uint64_t v559;
  unint64_t v560;
  unint64_t v561;
  _QWORD *v562;
  uint64_t v563;
  int *v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  unint64_t v568;
  int v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  int *v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  _QWORD *v580;
  uint64_t v581;
  int *v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  unint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  ldiv_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  ldiv_t v599;
  int v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t *v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  unint64_t i;
  uint64_t v616;
  int v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t *v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  int v632;
  unint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  unint64_t j;
  uint64_t v638;
  uint64_t v639;
  int v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t *v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  int v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int v659;
  int v660;
  unint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  unint64_t k;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  int v676;
  ldiv_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  int v683;
  ldiv_t v684;
  int v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  int *v691;
  uint64_t v692;
  unint64_t v693;
  _QWORD *v694;
  uint64_t v695;
  int *v696;
  uint64_t v697;
  unint64_t v698;
  int v699;
  unint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int *v705;
  uint64_t v706;
  unint64_t v707;
  unint64_t v708;
  _QWORD *v709;
  uint64_t v710;
  int *v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  unint64_t v715;
  int v716;
  unint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  int *v722;
  uint64_t v723;
  unint64_t v724;
  unint64_t v725;
  unint64_t v726;
  _QWORD *v727;
  uint64_t v728;
  int *v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  ldiv_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  ldiv_t v746;
  int v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t *v758;
  uint64_t v759;
  uint64_t v760;
  int v761;
  unint64_t m;
  uint64_t v763;
  int v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t *v775;
  uint64_t v776;
  uint64_t v777;
  int v778;
  int v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  unint64_t n;
  uint64_t v785;
  uint64_t v786;
  int v787;
  unint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t *v798;
  uint64_t v799;
  uint64_t v800;
  int v801;
  int v802;
  unint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int v806;
  int v807;
  unint64_t v808;
  uint64_t v809;
  uint64_t v810;
  int v811;
  unint64_t ii;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  int v821;
  ldiv_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  ldiv_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t *v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  _QWORD *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  _QWORD *v858;
  uint64_t v859;
  _QWORD *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  unint64_t v879;
  _QWORD *v880;
  _QWORD *v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  unint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  ldiv_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  int v906;
  ldiv_t v907;
  _BOOL4 v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  unint64_t v917;
  uint64_t *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  float *v928;
  uint64_t v929;
  _BOOL4 v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unint64_t v939;
  _QWORD *v940;
  uint64_t v941;
  _QWORD *v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  unint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  _BOOL4 v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  unint64_t v962;
  _QWORD *v963;
  _QWORD *v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  _BOOL4 v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  char v989;
  unsigned int v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  char v1000;
  unsigned int v1001;
  int v1002;
  unint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int *v1007;
  uint64_t v1008;
  uint64_t v1009;
  int v1010;
  unsigned int v1011;
  int v1012;
  unint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  int *v1017;
  uint64_t v1018;
  uint64_t v1019;
  int v1020;
  unsigned int v1021;
  int v1022;
  unint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  int v1031;
  unsigned int v1032;
  int v1033;
  unint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  int v1042;
  unsigned int v1043;
  int v1044;
  unint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  int *v1049;
  uint64_t v1050;
  uint64_t v1051;
  int v1052;
  unsigned int v1053;
  int v1054;
  unint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  int *v1059;
  uint64_t v1060;
  uint64_t v1061;
  int v1062;
  unsigned int v1063;
  int v1064;
  unint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  int v1073;
  unsigned int v1074;
  int v1075;
  unint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  int v1084;
  unsigned int v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  unsigned int v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  unsigned int v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  float v1117;
  unsigned int v1118;
  _BOOL4 v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  float v1129;
  unsigned int v1130;
  _BOOL4 v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  unint64_t v1139;
  uint64_t *v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t *v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  unsigned int v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  int v1157;
  ldiv_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  int v1162;
  ldiv_t v1163;
  uint64_t v1164;
  unsigned int v1165;
  int v1166;
  unint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  int *v1171;
  uint64_t v1172;
  unint64_t v1173;
  uint64_t v1174;
  unsigned int v1175;
  _QWORD *v1176;
  uint64_t v1177;
  unint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  unint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  int v1185;
  ldiv_t v1186;
  uint64_t v1187;
  unint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  int v1192;
  ldiv_t v1193;
  uint64_t v1194;
  unsigned int v1195;
  int v1196;
  unint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t *v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t *v1206;
  uint64_t v1207;
  uint64_t v1208;
  int v1209;
  int v1210;
  unint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  unsigned int v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  int v1221;
  ldiv_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  int v1226;
  ldiv_t v1227;
  uint64_t v1228;
  unsigned int v1229;
  int v1230;
  unint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  int *v1235;
  uint64_t v1236;
  unint64_t v1237;
  uint64_t v1238;
  unsigned int v1239;
  _QWORD *v1240;
  uint64_t v1241;
  unint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  unint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  ldiv_t v1250;
  uint64_t v1251;
  unint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  int v1256;
  ldiv_t v1257;
  uint64_t v1258;
  unsigned int v1259;
  int v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t *v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t *v1270;
  uint64_t v1271;
  uint64_t v1272;
  int v1273;
  int v1274;
  unint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  unsigned int v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  int v1285;
  ldiv_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  int v1290;
  ldiv_t v1291;
  uint64_t v1292;
  unsigned int v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  unint64_t v1301;
  uint64_t *v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  unsigned int v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  int v1320;
  ldiv_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  int v1325;
  ldiv_t v1326;
  uint64_t v1327;
  unsigned int v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  unint64_t v1336;
  uint64_t *v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t *v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  unsigned int v1350;
  _BOOL4 v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  int v1356;
  ldiv_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  int v1361;
  ldiv_t v1362;
  uint64_t v1363;
  unsigned int v1364;
  _BOOL4 v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  unint64_t v1373;
  uint64_t *v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t *v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  char v1386;
  unsigned int v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  int quot;
  ldiv_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  int v1396;
  ldiv_t v1397;
  uint64_t v1398;
  char v1399;
  unsigned int v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  unint64_t v1408;
  uint64_t *v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t *v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  char v1421;
  unsigned int v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  int v1426;
  ldiv_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  int v1431;
  ldiv_t v1432;
  uint64_t v1433;
  char v1434;
  unsigned int v1435;
  int v1436;
  unint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  int *v1441;
  uint64_t v1442;
  unint64_t v1443;
  uint64_t v1444;
  int v1445;
  unsigned int v1446;
  _QWORD *v1447;
  uint64_t v1448;
  unint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  unint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  int v1456;
  ldiv_t v1457;
  uint64_t v1458;
  unint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  int v1463;
  ldiv_t v1464;
  uint64_t v1465;
  int v1466;
  unsigned int v1467;
  int v1468;
  unint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  int *v1473;
  uint64_t v1474;
  unint64_t v1475;
  uint64_t v1476;
  int v1477;
  unsigned int v1478;
  _QWORD *v1479;
  uint64_t v1480;
  unint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  int v1488;
  ldiv_t v1489;
  uint64_t v1490;
  unint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  int v1495;
  ldiv_t v1496;
  uint64_t v1497;
  int v1498;
  unsigned int v1499;
  int v1500;
  unint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t *v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t *v1510;
  uint64_t v1511;
  uint64_t v1512;
  int v1513;
  int v1514;
  unint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  int v1518;
  unsigned int v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  int v1525;
  ldiv_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  int v1530;
  ldiv_t v1531;
  uint64_t v1532;
  int v1533;
  unsigned int v1534;
  int v1535;
  unint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t *v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t *v1545;
  uint64_t v1546;
  uint64_t v1547;
  int v1548;
  int v1549;
  unint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  int v1553;
  unsigned int v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  int v1560;
  ldiv_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  int v1565;
  ldiv_t v1566;
  uint64_t v1567;
  int v1568;
  unsigned int v1569;
  int v1570;
  unint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  int *v1575;
  uint64_t v1576;
  unint64_t v1577;
  uint64_t v1578;
  int v1579;
  unsigned int v1580;
  _QWORD *v1581;
  uint64_t v1582;
  unint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  unint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  int v1590;
  ldiv_t v1591;
  uint64_t v1592;
  unint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  int v1597;
  ldiv_t v1598;
  uint64_t v1599;
  int v1600;
  unsigned int v1601;
  int v1602;
  unint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  int *v1607;
  uint64_t v1608;
  unint64_t v1609;
  uint64_t v1610;
  int v1611;
  unsigned int v1612;
  _QWORD *v1613;
  uint64_t v1614;
  unint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  unint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  int v1622;
  ldiv_t v1623;
  uint64_t v1624;
  unint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  int v1629;
  ldiv_t v1630;
  uint64_t v1631;
  int v1632;
  unsigned int v1633;
  int v1634;
  unint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t *v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t *v1644;
  uint64_t v1645;
  uint64_t v1646;
  int v1647;
  int v1648;
  unint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  int v1652;
  unsigned int v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  int v1659;
  ldiv_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  int v1664;
  ldiv_t v1665;
  uint64_t v1666;
  int v1667;
  unsigned int v1668;
  int v1669;
  unint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t *v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t *v1679;
  uint64_t v1680;
  uint64_t v1681;
  int v1682;
  int v1683;
  unint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  int v1687;
  unsigned int v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  int v1694;
  ldiv_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  int v1699;
  ldiv_t v1700;
  uint64_t v1701;
  int v1702;
  unsigned int v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  unint64_t v1711;
  uint64_t *v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t *v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  unsigned int v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  int v1730;
  ldiv_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  int v1735;
  ldiv_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  unsigned int v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  unint64_t v1747;
  uint64_t *v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t *v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  unsigned int v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  int v1766;
  ldiv_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  int v1771;
  ldiv_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  unsigned int v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  unint64_t v1783;
  uint64_t *v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t *v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  float v1796;
  unsigned int v1797;
  _BOOL4 v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  int v1803;
  ldiv_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  int v1808;
  ldiv_t v1809;
  uint64_t v1810;
  float v1811;
  unsigned int v1812;
  _BOOL4 v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  unint64_t v1821;
  uint64_t *v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t *v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  float v1834;
  unsigned int v1835;
  _BOOL4 v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  int v1841;
  ldiv_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  int v1846;
  ldiv_t v1847;
  uint64_t v1848;
  float v1849;
  unsigned int v1850;
  _BOOL4 v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  unsigned int v1882;
  unsigned int v1883;
  uint64_t v1884;
  uint64_t v1885;
  unsigned int v1886;
  unsigned int v1887;
  unsigned int v1888;
  unsigned int v1889;
  uint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  int *v1898;
  int *v1899;
  int *v1900;
  int *v1901;
  int *v1902;
  int *v1903;
  uint64_t v1904;
  unint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  unint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  unint64_t v1912;
  uint64_t v1913;
  unint64_t v1914;
  uint64_t v1915;
  unint64_t v1916;
  unint64_t v1917;
  unint64_t v1918;
  unint64_t v1919;
  unint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  unint64_t v1923;
  unint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  unint64_t v1927;
  unint64_t v1928;
  unint64_t v1929;
  unint64_t v1930;
  unint64_t v1931;
  unint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  unint64_t v1940;
  unint64_t v1941;
  uint64_t v1942;
  unint64_t v1943;
  uint64_t v1944;
  unint64_t v1945;
  unint64_t v1946;
  unint64_t v1947;
  unint64_t v1948;
  unint64_t v1949;
  uint64_t v1950;
  uint64_t v1951;
  unint64_t v1952;
  unint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  unint64_t v1956;
  unint64_t v1957;
  unint64_t v1958;
  unint64_t v1959;
  unint64_t v1960;
  unint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  int v1967;
  int *v1968;
  int *v1969;
  int v1970;
  uint64_t v1971;
  unint64_t v1972;
  unint64_t v1973;
  unint64_t v1974;
  unint64_t v1975;
  unint64_t v1976;
  unint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  uint64_t v1988;
  uint64_t v1989;

  switch(*(_DWORD *)(*(_QWORD *)a3 + 56))
  {
    case 0:
      switch(binary_op_type)
      {
        case 0:
          v7 = **(_BYTE **)(*a2 + 152) | **(_BYTE **)(*a1 + 152);
          goto LABEL_16;
        case 1:
          v36 = *(_DWORD *)(*a2 + 160);
          if (v36 >= 1)
          {
            v37 = **(_BYTE **)(*a1 + 152);
            v38 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v39 = *(char **)(*a2 + 152);
            v40 = v36 + 1;
            do
            {
              v41 = *v39++;
              *v38++ = v41 | v37;
              --v40;
            }
            while (v40 > 1);
          }
          return;
        case 2:
          v42 = *(_DWORD *)(*a1 + 160);
          if (v42 >= 1)
          {
            v43 = **(_BYTE **)(*a2 + 152);
            v44 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v45 = *(char **)(*a1 + 152);
            v46 = v42 + 1;
            do
            {
              v47 = *v45++;
              *v44++ = v47 | v43;
              --v46;
            }
            while (v46 > 1);
          }
          return;
        case 3:
          v48 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v48 >= 1)
          {
            v49 = *(_BYTE **)(*(_QWORD *)a3 + 152);
            v50 = *(char **)(*a2 + 152);
            v51 = *(char **)(*a1 + 152);
            v52 = v48 + 1;
            do
            {
              v54 = *v51++;
              v53 = v54;
              v55 = *v50++;
              *v49++ = v55 | v53;
              --v52;
            }
            while (v52 > 1);
          }
          return;
        default:
          v27 = *(_QWORD **)a3;
          v28 = (_QWORD *)*a1;
          v29 = *(int **)*a1;
          v30 = (v28[1] - (_QWORD)v29) >> 2;
          v31 = (v30 - 1);
          if ((int)v31 >= -1)
            v32 = -1;
          else
            v32 = v30 - 1;
          v33 = v32 + 1;
          v34 = v30 + 1;
          break;
      }
      while (1)
      {
        v35 = v34 - 2;
        if (v34 - 2 < 0)
          break;
        --v34;
        if (*(_QWORD *)(v28[3] + 8 * v35) != *(_QWORD *)(v27[3] + 8 * v35))
          goto LABEL_155;
      }
      v34 = v33;
LABEL_155:
      v219 = (_QWORD *)*a2;
      v220 = *(int **)*a2;
      v221 = (v219[1] - (_QWORD)v220) >> 2;
      v222 = (v221 - 1);
      if ((int)v222 >= -1)
        v223 = -1;
      else
        v223 = v221 - 1;
      v224 = v223 + 1;
      v225 = v221 + 1;
      while (1)
      {
        v226 = v225 - 2;
        if (v225 - 2 < 0)
          break;
        --v225;
        if (*(_QWORD *)(v219[3] + 8 * v226) != *(_QWORD *)(v27[3] + 8 * v226))
          goto LABEL_209;
      }
      v225 = v224;
LABEL_209:
      v273 = v30 + 1;
      while (1)
      {
        v274 = v273 - 2;
        if (v273 - 2 < 0)
          break;
        --v273;
        if (*(_QWORD *)(v28[3] + 8 * v274))
          goto LABEL_244;
      }
      v273 = v33;
LABEL_244:
      v287 = v221 + 1;
      while (1)
      {
        v288 = v287 - 2;
        if (v287 - 2 < 0)
          break;
        --v287;
        if (*(_QWORD *)(v219[3] + 8 * v288))
          goto LABEL_279;
      }
      v287 = v224;
LABEL_279:
      v301 = (uint64_t)(v27[1] - *v27) >> 2;
      if (v34 <= v225)
        v302 = v225;
      else
        v302 = v34;
      if (v34 <= v287)
        v34 = v287;
      if (v273 > v225)
        v225 = v273;
      if (v301 > v225)
      {
        v303 = 1;
      }
      else
      {
        v225 = (uint64_t)(v27[1] - *v27) >> 2;
        v303 = 4;
      }
      if (v301 > v34)
      {
        v304 = 2;
      }
      else
      {
        v34 = v225;
        v304 = v303;
      }
      if (v301 > v302)
      {
        v34 = v302;
        v304 = 3;
      }
      v1962 = v222;
      v1978 = v31;
      if (!v34)
        goto LABEL_308;
      v305 = *(_QWORD *)(v27[3] + 8 * (v34 - 1));
      if (v305 < 0x10)
        goto LABEL_308;
      switch(v304)
      {
        case 1:
          if (v34 == 2)
          {
            v1366 = *v29;
            if ((_DWORD)v1366)
            {
              v1367 = 0;
              v1368 = 0;
              v1369 = 0;
              v1370 = v28[19];
              v1371 = v219[19];
              v1372 = v27[19];
              v1373 = v29[1];
              v1374 = (uint64_t *)v28[3];
              v1375 = *v1374;
              v1376 = v1374[1];
              v1377 = (uint64_t *)v219[3];
              v1379 = *v1377;
              v1378 = v1377[1];
              if (v1373 <= 1)
                v1380 = 1;
              else
                v1380 = v29[1];
              v1381 = v1375 - v1376 * v1373;
              v1382 = v1379 - v1378 * v220[1];
              do
              {
                if ((_DWORD)v1373)
                {
                  v1383 = 0;
                  v1384 = v1371 + v1368;
                  do
                  {
                    if ((int)v305 >= 1)
                    {
                      v1385 = 0;
                      v1386 = *(_BYTE *)(v1370 + v1369);
                      v1387 = v305 + 1;
                      do
                      {
                        *(_BYTE *)(v1372 + v1385) = *(_BYTE *)(v1384 + v1385) | v1386;
                        --v1387;
                        ++v1385;
                      }
                      while (v1387 > 1);
                    }
                    v1369 += v1376;
                    v1368 += v1378;
                    v1372 += (int)v305;
                    ++v1383;
                    v1384 += v1378;
                  }
                  while (v1383 != v1380);
                }
                v1369 += v1381;
                v1368 += v1382;
                ++v1367;
              }
              while (v1367 != v1366);
            }
          }
          else if (v34 == 1)
          {
            v980 = *v29;
            if ((_DWORD)v980)
            {
              v981 = 0;
              v982 = 0;
              v983 = v28[19];
              v984 = v219[19];
              v985 = v27[19];
              v986 = *(_QWORD *)v28[3];
              v987 = *(_QWORD *)v219[3];
              do
              {
                if ((int)v305 >= 1)
                {
                  v988 = 0;
                  v989 = *(_BYTE *)(v983 + v982);
                  v990 = v305 + 1;
                  do
                  {
                    *(_BYTE *)(v985 + v988) = *(_BYTE *)(v984 + v988) | v989;
                    --v990;
                    ++v988;
                  }
                  while (v990 > 1);
                }
                v982 += v986;
                v985 += (int)v305;
                ++v981;
                v984 += v987;
              }
              while (v981 != v980);
            }
          }
          else
          {
            v1919 = v27[6];
            if (v1919)
            {
              v1948 = 0;
              v1869 = v219[19];
              v1884 = v28[19];
              v1388 = v27[19];
              do
              {
                v1389 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  v1390 = v28[3];
                  quot = v1948;
                  do
                  {
                    v1392 = ldiv(quot, v29[v31]);
                    quot = v1392.quot;
                    v1389 += *(_QWORD *)(v1390 + 8 * v31--) * v1392.rem;
                  }
                  while (v31 != -1);
                }
                v1393 = v1962;
                if ((v1962 & 0x80000000) != 0)
                {
                  LODWORD(v1394) = 0;
                }
                else
                {
                  v1394 = 0;
                  v1395 = v219[3];
                  v1396 = v1948;
                  do
                  {
                    v1397 = ldiv(v1396, v220[v1393]);
                    v1396 = v1397.quot;
                    v1394 += *(_QWORD *)(v1395 + 8 * v1393--) * v1397.rem;
                  }
                  while (v1393 != -1);
                }
                v31 = v1978;
                if ((int)v305 >= 1)
                {
                  v1398 = 0;
                  v1399 = *(_BYTE *)(v1884 + (int)v1389);
                  v1400 = v305 + 1;
                  do
                  {
                    *(_BYTE *)(v1388 + v1398) = *(_BYTE *)(v1869 + (int)v1394 + v1398) | v1399;
                    --v1400;
                    ++v1398;
                  }
                  while (v1400 > 1);
                }
                v1388 += (int)v305;
                v1948 += (int)v305;
              }
              while (v1948 < v1919);
            }
          }
          break;
        case 2:
          if (v34 == 2)
          {
            v1401 = *v29;
            if ((_DWORD)v1401)
            {
              v1402 = 0;
              v1403 = 0;
              v1404 = 0;
              v1405 = v28[19];
              v1406 = v219[19];
              v1407 = v27[19];
              v1408 = v29[1];
              v1409 = (uint64_t *)v28[3];
              v1410 = *v1409;
              v1411 = v1409[1];
              v1412 = (uint64_t *)v219[3];
              v1414 = *v1412;
              v1413 = v1412[1];
              if (v1408 <= 1)
                v1415 = 1;
              else
                v1415 = v29[1];
              v1416 = v1410 - v1411 * v1408;
              v1417 = v1414 - v1413 * v220[1];
              do
              {
                if ((_DWORD)v1408)
                {
                  v1418 = 0;
                  v1419 = v1405 + v1404;
                  do
                  {
                    if ((int)v305 >= 1)
                    {
                      v1420 = 0;
                      v1421 = *(_BYTE *)(v1406 + v1403);
                      v1422 = v305 + 1;
                      do
                      {
                        *(_BYTE *)(v1407 + v1420) = *(_BYTE *)(v1419 + v1420) | v1421;
                        --v1422;
                        ++v1420;
                      }
                      while (v1422 > 1);
                    }
                    v1404 += v1411;
                    v1403 += v1413;
                    v1407 += (int)v305;
                    ++v1418;
                    v1419 += v1411;
                  }
                  while (v1418 != v1415);
                }
                v1404 += v1416;
                v1403 += v1417;
                ++v1402;
              }
              while (v1402 != v1401);
            }
          }
          else if (v34 == 1)
          {
            v991 = *v29;
            if ((_DWORD)v991)
            {
              v992 = 0;
              v993 = 0;
              v994 = v28[19];
              v995 = v219[19];
              v996 = v27[19];
              v997 = *(_QWORD *)v28[3];
              v998 = *(_QWORD *)v219[3];
              do
              {
                if ((int)v305 >= 1)
                {
                  v999 = 0;
                  v1000 = *(_BYTE *)(v995 + v993);
                  v1001 = v305 + 1;
                  do
                  {
                    *(_BYTE *)(v996 + v999) = *(_BYTE *)(v994 + v999) | v1000;
                    --v1001;
                    ++v999;
                  }
                  while (v1001 > 1);
                }
                v993 += v998;
                v996 += (int)v305;
                ++v992;
                v994 += v997;
              }
              while (v992 != v991);
            }
          }
          else
          {
            v1920 = v27[6];
            if (v1920)
            {
              v1949 = 0;
              v1870 = v219[19];
              v1885 = v28[19];
              v1423 = v27[19];
              do
              {
                v1424 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  v1425 = v28[3];
                  v1426 = v1949;
                  do
                  {
                    v1427 = ldiv(v1426, v29[v31]);
                    v1426 = v1427.quot;
                    v1424 += *(_QWORD *)(v1425 + 8 * v31--) * v1427.rem;
                  }
                  while (v31 != -1);
                }
                v1428 = v1962;
                if ((v1962 & 0x80000000) != 0)
                {
                  LODWORD(v1429) = 0;
                }
                else
                {
                  v1429 = 0;
                  v1430 = v219[3];
                  v1431 = v1949;
                  do
                  {
                    v1432 = ldiv(v1431, v220[v1428]);
                    v1431 = v1432.quot;
                    v1429 += *(_QWORD *)(v1430 + 8 * v1428--) * v1432.rem;
                  }
                  while (v1428 != -1);
                }
                v31 = v1978;
                if ((int)v305 >= 1)
                {
                  v1433 = 0;
                  v1434 = *(_BYTE *)(v1870 + (int)v1429);
                  v1435 = v305 + 1;
                  do
                  {
                    *(_BYTE *)(v1423 + v1433) = *(_BYTE *)(v1885 + (int)v1424 + v1433) | v1434;
                    --v1435;
                    ++v1433;
                  }
                  while (v1435 > 1);
                }
                v1423 += (int)v305;
                v1949 += (int)v305;
              }
              while (v1949 < v1920);
            }
          }
          break;
        case 3:
          if (v34 == 2)
          {
            v1132 = *v29;
            if ((_DWORD)v1132)
            {
              v1133 = 0;
              v1134 = 0;
              v1135 = 0;
              v1136 = v28[19];
              v1137 = v219[19];
              v1138 = v27[19];
              v1139 = v29[1];
              v1140 = (uint64_t *)v28[3];
              v1141 = *v1140;
              v1142 = v1140[1];
              v1143 = (uint64_t *)v219[3];
              v1145 = *v1143;
              v1144 = v1143[1];
              if (v1139 <= 1)
                v1146 = 1;
              else
                v1146 = v29[1];
              v1147 = v1141 - v1142 * v1139;
              v1148 = v1145 - v1144 * v220[1];
              do
              {
                if ((_DWORD)v1139)
                {
                  v1149 = 0;
                  v1150 = v1137 + v1134;
                  v1151 = v1136 + v1135;
                  do
                  {
                    if ((int)v305 >= 1)
                    {
                      v1152 = 0;
                      v1153 = v305 + 1;
                      do
                      {
                        *(_BYTE *)(v1138 + v1152) = *(_BYTE *)(v1150 + v1152) | *(_BYTE *)(v1151 + v1152);
                        --v1153;
                        ++v1152;
                      }
                      while (v1153 > 1);
                    }
                    v1135 += v1142;
                    v1134 += v1144;
                    v1138 += (int)v305;
                    ++v1149;
                    v1150 += v1144;
                    v1151 += v1142;
                  }
                  while (v1149 != v1146);
                }
                v1135 += v1147;
                v1134 += v1148;
                ++v1133;
              }
              while (v1133 != v1132);
            }
          }
          else if (v34 == 1)
          {
            v306 = *v29;
            if ((_DWORD)v306)
            {
              v307 = 0;
              v308 = v28[19];
              v309 = v219[19];
              v310 = v27[19];
              v311 = *(_QWORD *)v28[3];
              v312 = *(_QWORD *)v219[3];
              do
              {
                if ((int)v305 >= 1)
                {
                  v313 = 0;
                  v314 = v305 + 1;
                  do
                  {
                    *(_BYTE *)(v310 + v313) = *(_BYTE *)(v309 + v313) | *(_BYTE *)(v308 + v313);
                    --v314;
                    ++v313;
                  }
                  while (v314 > 1);
                }
                v310 += (int)v305;
                ++v307;
                v309 += v312;
                v308 += v311;
              }
              while (v307 != v306);
            }
          }
          else
          {
            v1912 = v27[6];
            if (v1912)
            {
              v1941 = 0;
              v1864 = v219[19];
              v1881 = v28[19];
              v1154 = v27[19];
              do
              {
                v1155 = 0;
                if ((v31 & 0x80000000) == 0)
                {
                  v1156 = v28[3];
                  v1157 = v1941;
                  do
                  {
                    v1158 = ldiv(v1157, v29[v31]);
                    v1157 = v1158.quot;
                    v1155 += *(_QWORD *)(v1156 + 8 * v31--) * v1158.rem;
                  }
                  while (v31 != -1);
                }
                v1159 = v1962;
                if ((v1962 & 0x80000000) != 0)
                {
                  LODWORD(v1160) = 0;
                }
                else
                {
                  v1160 = 0;
                  v1161 = v219[3];
                  v1162 = v1941;
                  do
                  {
                    v1163 = ldiv(v1162, v220[v1159]);
                    v1162 = v1163.quot;
                    v1160 += *(_QWORD *)(v1161 + 8 * v1159--) * v1163.rem;
                  }
                  while (v1159 != -1);
                }
                v31 = v1978;
                if ((int)v305 >= 1)
                {
                  v1164 = 0;
                  v1165 = v305 + 1;
                  do
                  {
                    *(_BYTE *)(v1154 + v1164) = *(_BYTE *)(v1864 + (int)v1160 + v1164) | *(_BYTE *)(v1881
                                                                                                  + (int)v1155
                                                                                                  + v1164);
                    --v1165;
                    ++v1164;
                  }
                  while (v1165 > 1);
                }
                v1154 += (int)v305;
                v1941 += (int)v305;
              }
              while (v1941 < v1912);
            }
          }
          break;
        default:
LABEL_308:
          switch(v301)
          {
            case 1uLL:
              v315 = v27[6];
              if (v315)
              {
                v316 = (_BYTE *)v28[19];
                v317 = (_BYTE *)v219[19];
                v318 = (_BYTE *)v27[19];
                v319 = *(_QWORD *)v28[3];
                v320 = *(_QWORD *)v219[3];
                do
                {
                  *v318++ = *v317 | *v316;
                  v317 += v320;
                  v316 += v319;
                  --v315;
                }
                while (v315);
              }
              break;
            case 2uLL:
              v454 = *v29;
              if ((_DWORD)v454)
              {
                v455 = 0;
                v456 = 0;
                v457 = 0;
                v458 = 0;
                v459 = v28[19];
                v460 = v219[19];
                v461 = v27[19];
                v462 = v29[1];
                v463 = (uint64_t *)v28[3];
                v464 = *v463;
                v465 = v463[1];
                v466 = (uint64_t *)v219[3];
                v467 = *v466;
                v468 = v466[1];
                v469 = v467 - v468 * v220[1];
                if (v462 <= 1)
                  v470 = 1;
                else
                  v470 = v29[1];
                v471 = v464 - v465 * v462;
                do
                {
                  if ((_DWORD)v462)
                  {
                    v472 = v456 + v470;
                    v473 = (_BYTE *)(v461 + v456);
                    v474 = v470;
                    do
                    {
                      *v473++ = *(_BYTE *)(v460 + v457) | *(_BYTE *)(v459 + v458);
                      v458 += v465;
                      v457 += v468;
                      --v474;
                    }
                    while (v474);
                    v456 = v472;
                  }
                  v458 += v471;
                  v457 += v469;
                  ++v455;
                }
                while (v455 != v454);
              }
              break;
            case 3uLL:
              v475 = *v29;
              if ((_DWORD)v475)
              {
                v476 = 0;
                v477 = 0;
                v478 = 0;
                v479 = 0;
                v480 = v28[19];
                v481 = v219[19];
                v482 = v27[19];
                v483 = v29[1];
                v484 = (_QWORD *)v28[3];
                v485 = v484[1];
                v486 = (_QWORD *)v219[3];
                v487 = v486[1];
                v488 = *v486 - v487 * v220[1];
                if (v483 <= 1)
                  v489 = 1;
                else
                  v489 = v29[1];
                v490 = *v484 - v485 * v483;
                do
                {
                  if ((_DWORD)v483)
                  {
                    v491 = 0;
                    v492 = v29[2];
                    v493 = v484[2];
                    v494 = v486[2];
                    if (v492 <= 1)
                      v495 = 1;
                    else
                      v495 = v29[2];
                    v496 = v487 - v494 * v220[2];
                    do
                    {
                      v497 = v495;
                      if ((_DWORD)v492)
                      {
                        do
                        {
                          *(_BYTE *)(v482 + v477++) = *(_BYTE *)(v481 + v478) | *(_BYTE *)(v480 + v479);
                          v479 += v493;
                          v478 += v494;
                          --v497;
                        }
                        while (v497);
                      }
                      v479 += v485 - v493 * v492;
                      v478 += v496;
                      ++v491;
                    }
                    while (v491 != v489);
                  }
                  v479 += v490;
                  v478 += v488;
                  ++v476;
                }
                while (v476 != v475);
              }
              break;
            case 4uLL:
              v1985 = *v29;
              if ((_DWORD)v1985)
              {
                v498 = 0;
                v499 = 0;
                v500 = 0;
                v501 = 0;
                v502 = v28[19];
                v503 = v219[19];
                v504 = v27[19];
                v505 = v29[1];
                v506 = (_QWORD *)v28[3];
                v507 = (_QWORD *)v219[3];
                v1879 = v507[1];
                v1891 = v506[1];
                v1934 = *v507 - v1879 * v220[1];
                v1967 = v29[1];
                if (v505 <= 1)
                  v508 = 1;
                else
                  v508 = v29[1];
                v1905 = *v506 - v506[1] * v505;
                do
                {
                  if (v1967)
                  {
                    v509 = 0;
                    v510 = v29[2];
                    v511 = v506[2];
                    v512 = v507[2];
                    if (v510 <= 1)
                      v513 = 1;
                    else
                      v513 = v29[2];
                    v514 = v1879 - v512 * v220[2];
                    do
                    {
                      if ((_DWORD)v510)
                      {
                        v515 = 0;
                        v516 = v29[3];
                        v517 = v506[3];
                        v518 = v507[3];
                        if (v516 <= 1)
                          v519 = 1;
                        else
                          v519 = v29[3];
                        v520 = v512 - v518 * v220[3];
                        do
                        {
                          v521 = v519;
                          if ((_DWORD)v516)
                          {
                            do
                            {
                              *(_BYTE *)(v504 + v499++) = *(_BYTE *)(v503 + v500) | *(_BYTE *)(v502 + v501);
                              v501 += v517;
                              v500 += v518;
                              --v521;
                            }
                            while (v521);
                          }
                          v501 += v511 - v517 * v516;
                          v500 += v520;
                          ++v515;
                        }
                        while (v515 != v513);
                      }
                      v501 += v1891 - v511 * v510;
                      v500 += v514;
                      ++v509;
                    }
                    while (v509 != v508);
                  }
                  v501 += v1905;
                  v500 += v1934;
                  ++v498;
                }
                while (v498 != v1985);
              }
              break;
            default:
              v443 = v27[6];
              if (v443)
              {
                v444 = 0;
                v1904 = v219[19];
                v1933 = v28[19];
                v1890 = v27[19];
                do
                {
                  v445 = 0;
                  if ((v31 & 0x80000000) == 0)
                  {
                    v446 = v28[3];
                    v447 = v444;
                    do
                    {
                      v448 = ldiv(v447, v29[v31]);
                      v447 = v448.quot;
                      v445 += *(_QWORD *)(v446 + 8 * v31--) * v448.rem;
                    }
                    while (v31 != -1);
                  }
                  v449 = v1962;
                  if ((v1962 & 0x80000000) != 0)
                  {
                    LODWORD(v450) = 0;
                  }
                  else
                  {
                    v450 = 0;
                    v451 = v219[3];
                    v452 = v444;
                    do
                    {
                      v453 = ldiv(v452, v220[v449]);
                      v452 = v453.quot;
                      v450 += *(_QWORD *)(v451 + 8 * v449--) * v453.rem;
                    }
                    while (v449 != -1);
                  }
                  *(_BYTE *)(v1890 + v444++) = *(_BYTE *)(v1904 + (int)v450) | *(_BYTE *)(v1933 + (int)v445);
                  v31 = v1978;
                }
                while (v444 != v443);
              }
              break;
          }
          break;
      }
      return;
    case 1:
      switch(v8)
      {
        case 0:
          goto LABEL_15;
        case 1:
          v9 = *(_DWORD *)(*a2 + 160);
          if (v9 >= 1)
          {
            v10 = **(unsigned __int8 **)(*a1 + 152);
            v11 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v12 = *(unsigned __int8 **)(*a2 + 152);
            v13 = v9 + 1;
            do
            {
              v14 = *v12++;
              *v11++ = (v14 | v10) != 0;
              --v13;
            }
            while (v13 > 1);
          }
          return;
        case 2:
          v64 = *(_DWORD *)(*a1 + 160);
          if (v64 >= 1)
          {
            v65 = **(unsigned __int8 **)(*a2 + 152);
            v66 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v67 = *(unsigned __int8 **)(*a1 + 152);
            v68 = v64 + 1;
            do
            {
              v69 = *v67++;
              *v66++ = (v69 | v65) != 0;
              --v68;
            }
            while (v68 > 1);
          }
          return;
        case 3:
          v70 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v70 >= 1)
          {
            v71 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v72 = *(unsigned __int8 **)(*a2 + 152);
            v73 = *(unsigned __int8 **)(*a1 + 152);
            v74 = v70 + 1;
            do
            {
              v76 = *v73++;
              v75 = v76;
              v77 = *v72++;
              *v71++ = (v77 | v75) != 0;
              --v74;
            }
            while (v74 > 1);
          }
          return;
        default:
          v56 = *(_QWORD **)a3;
          v57 = *a1;
          v58 = *(int **)*a1;
          v59 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v58) >> 2;
          v60 = v59 - 1;
          if ((int)v59 - 1 >= -1)
            v60 = -1;
          v61 = v60 + 1;
          v62 = v59 + 1;
          break;
      }
      while (1)
      {
        v63 = v62 - 2;
        if (v62 - 2 < 0)
          break;
        --v62;
        if (*(_QWORD *)(*(_QWORD *)(v57 + 24) + 8 * v63) != *(_QWORD *)(v56[3] + 8 * v63))
          goto LABEL_163;
      }
      v62 = v61;
LABEL_163:
      v227 = (int **)*a2;
      v228 = *(int **)*a2;
      v229 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v228) >> 2;
      v230 = v229 - 1;
      if ((int)v229 - 1 >= -1)
        v230 = -1;
      v231 = v230 + 1;
      v232 = v229 + 1;
      while (1)
      {
        v233 = v232 - 2;
        if (v232 - 2 < 0)
          break;
        --v232;
        if (*(_QWORD *)&v227[3][2 * v233] != *(_QWORD *)(v56[3] + 8 * v233))
          goto LABEL_214;
      }
      v232 = v231;
LABEL_214:
      v275 = v59 + 1;
      while (1)
      {
        v276 = v275 - 2;
        if (v275 - 2 < 0)
          break;
        --v275;
        if (*(_QWORD *)(*(_QWORD *)(v57 + 24) + 8 * v276))
          goto LABEL_249;
      }
      v275 = v61;
LABEL_249:
      v289 = v229 + 1;
      while (1)
      {
        v290 = v289 - 2;
        if (v289 - 2 < 0)
          break;
        --v289;
        if (*(_QWORD *)&v227[3][2 * v290])
          goto LABEL_314;
      }
      v289 = v231;
LABEL_314:
      v321 = (uint64_t)(v56[1] - *v56) >> 2;
      if (v62 <= v232)
        v322 = v232;
      else
        v322 = v62;
      if (v62 <= v289)
        v62 = v289;
      if (v275 > v232)
        v232 = v275;
      if (v321 > v232)
      {
        v323 = 1;
      }
      else
      {
        v232 = (uint64_t)(v56[1] - *v56) >> 2;
        v323 = 4;
      }
      if (v321 > v62)
      {
        v324 = 2;
      }
      else
      {
        v62 = v232;
        v324 = v323;
      }
      if (v321 > v322)
      {
        v62 = v322;
        v324 = 3;
      }
      if (!v62)
        goto LABEL_344;
      v325 = *(_QWORD *)(v56[3] + 8 * (v62 - 1));
      if (v325 < 0x10)
        goto LABEL_344;
      v1979 = *(_QWORD *)(v56[3] + 8 * (v62 - 1));
      switch(v324)
      {
        case 1:
          if (v62 == 2)
          {
            v1436 = *v58;
            if (*v58)
            {
              v1437 = 0;
              v1438 = 0;
              v1439 = 0;
              v1440 = *(_QWORD *)(v57 + 152);
              v1441 = v227[19];
              v1442 = v56[19];
              do
              {
                if (v58[1])
                {
                  v1443 = 0;
                  do
                  {
                    if ((int)v325 >= 1)
                    {
                      v1444 = 0;
                      v1445 = *(unsigned __int8 *)(v1440 + v1439);
                      v1446 = v325 + 1;
                      do
                      {
                        *(_BYTE *)(v1442 + v1444) = (*((unsigned __int8 *)v1441 + v1438 + v1444) | v1445) != 0;
                        --v1446;
                        ++v1444;
                      }
                      while (v1446 > 1);
                      v57 = *a1;
                      v227 = (int **)*a2;
                      v58 = *(int **)*a1;
                    }
                    v1447 = *(_QWORD **)(v57 + 24);
                    v1448 = v1447[1];
                    v1439 += v1448;
                    v1438 += *((_QWORD *)v227[3] + 1);
                    v1442 += (int)v325;
                    ++v1443;
                    v1449 = v58[1];
                  }
                  while (v1443 < v1449);
                  v1436 = *v58;
                  v228 = *v227;
                }
                else
                {
                  v1449 = 0;
                  v1447 = *(_QWORD **)(v57 + 24);
                  v1448 = v1447[1];
                }
                v1439 = *v1447 + v1439 - v1449 * v1448;
                v1438 = *(_QWORD *)v227[3] + v1438 - *((_QWORD *)v227[3] + 1) * v228[1];
                ++v1437;
              }
              while (v1437 < v1436);
            }
          }
          else if (v62 == 1)
          {
            v1002 = *v58;
            if (*v58)
            {
              v1003 = 0;
              v1004 = 0;
              v1005 = 0;
              v1006 = *(_QWORD *)(v57 + 152);
              v1007 = v227[19];
              v1008 = v56[19];
              do
              {
                if ((int)v325 >= 1)
                {
                  v1009 = 0;
                  v1010 = *(unsigned __int8 *)(v1006 + v1005);
                  v1011 = v325 + 1;
                  do
                  {
                    *(_BYTE *)(v1008 + v1009) = (*((unsigned __int8 *)v1007 + v1004 + v1009) | v1010) != 0;
                    --v1011;
                    ++v1009;
                  }
                  while (v1011 > 1);
                  v57 = *a1;
                  v227 = (int **)*a2;
                  v1002 = **(_DWORD **)*a1;
                }
                v1005 += **(_QWORD **)(v57 + 24);
                v1004 += *(_QWORD *)v227[3];
                v1008 += (int)v325;
                ++v1003;
              }
              while (v1003 < v1002);
            }
          }
          else if (v56[6])
          {
            v1900 = v227[19];
            v1921 = *(_QWORD *)(v57 + 152);
            v1950 = (int)v325;
            v1974 = 0;
            v1886 = v325 + 1;
            v1450 = v56[19];
            do
            {
              v1451 = *(_QWORD *)*a1;
              v1452 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1451) >> 2;
              v1453 = 0;
              v1454 = (v1452 - 1);
              if ((int)v1452 - 1 >= 0)
              {
                v1455 = *(_QWORD *)(*a1 + 24);
                v1456 = v1974;
                do
                {
                  v1457 = ldiv(v1456, *(int *)(v1451 + 4 * v1454));
                  v1456 = v1457.quot;
                  v1453 += *(_QWORD *)(v1455 + 8 * v1454--) * v1457.rem;
                }
                while (v1454 != -1);
              }
              v1458 = *(_QWORD *)*a2;
              v1459 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1458) >> 2;
              v1460 = 0;
              v1461 = (v1459 - 1);
              if ((int)v1459 - 1 >= 0)
              {
                v1462 = *(_QWORD *)(*a2 + 24);
                v1463 = v1974;
                do
                {
                  v1464 = ldiv(v1463, *(int *)(v1458 + 4 * v1461));
                  v1463 = v1464.quot;
                  v1460 += *(_QWORD *)(v1462 + 8 * v1461--) * v1464.rem;
                }
                while (v1461 != -1);
              }
              if ((int)v1979 >= 1)
              {
                v1465 = 0;
                v1466 = *(unsigned __int8 *)(v1921 + (int)v1453);
                v1467 = v1886;
                do
                {
                  *(_BYTE *)(v1450 + v1465) = (*((unsigned __int8 *)v1900 + (int)v1460 + v1465) | v1466) != 0;
                  --v1467;
                  ++v1465;
                }
                while (v1467 > 1);
                v56 = *(_QWORD **)a3;
              }
              v1450 += v1950;
              v1974 += v1950;
            }
            while (v1974 < v56[6]);
          }
          break;
        case 2:
          if (v62 == 2)
          {
            v1468 = *v58;
            if (*v58)
            {
              v1469 = 0;
              v1470 = 0;
              v1471 = 0;
              v1472 = *(_QWORD *)(v57 + 152);
              v1473 = v227[19];
              v1474 = v56[19];
              do
              {
                if (v58[1])
                {
                  v1475 = 0;
                  do
                  {
                    if ((int)v325 >= 1)
                    {
                      v1476 = 0;
                      v1477 = *((unsigned __int8 *)v1473 + v1470);
                      v1478 = v325 + 1;
                      do
                      {
                        *(_BYTE *)(v1474 + v1476) = (*(unsigned __int8 *)(v1472 + v1471 + v1476) | v1477) != 0;
                        --v1478;
                        ++v1476;
                      }
                      while (v1478 > 1);
                      v57 = *a1;
                      v227 = (int **)*a2;
                      v58 = *(int **)*a1;
                    }
                    v1479 = *(_QWORD **)(v57 + 24);
                    v1480 = v1479[1];
                    v1471 += v1480;
                    v1470 += *((_QWORD *)v227[3] + 1);
                    v1474 += (int)v325;
                    ++v1475;
                    v1481 = v58[1];
                  }
                  while (v1475 < v1481);
                  v1468 = *v58;
                  v228 = *v227;
                }
                else
                {
                  v1481 = 0;
                  v1479 = *(_QWORD **)(v57 + 24);
                  v1480 = v1479[1];
                }
                v1471 = *v1479 + v1471 - v1481 * v1480;
                v1470 = *(_QWORD *)v227[3] + v1470 - *((_QWORD *)v227[3] + 1) * v228[1];
                ++v1469;
              }
              while (v1469 < v1468);
            }
          }
          else if (v62 == 1)
          {
            v1012 = *v58;
            if (*v58)
            {
              v1013 = 0;
              v1014 = 0;
              v1015 = 0;
              v1016 = *(_QWORD *)(v57 + 152);
              v1017 = v227[19];
              v1018 = v56[19];
              do
              {
                if ((int)v325 >= 1)
                {
                  v1019 = 0;
                  v1020 = *((unsigned __int8 *)v1017 + v1014);
                  v1021 = v325 + 1;
                  do
                  {
                    *(_BYTE *)(v1018 + v1019) = (*(unsigned __int8 *)(v1016 + v1015 + v1019) | v1020) != 0;
                    --v1021;
                    ++v1019;
                  }
                  while (v1021 > 1);
                  v57 = *a1;
                  v227 = (int **)*a2;
                  v1012 = **(_DWORD **)*a1;
                }
                v1015 += **(_QWORD **)(v57 + 24);
                v1014 += *(_QWORD *)v227[3];
                v1018 += (int)v325;
                ++v1013;
              }
              while (v1013 < v1012);
            }
          }
          else if (v56[6])
          {
            v1901 = v227[19];
            v1922 = *(_QWORD *)(v57 + 152);
            v1951 = (int)v325;
            v1975 = 0;
            v1887 = v325 + 1;
            v1482 = v56[19];
            do
            {
              v1483 = *(_QWORD *)*a1;
              v1484 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1483) >> 2;
              v1485 = 0;
              v1486 = (v1484 - 1);
              if ((int)v1484 - 1 >= 0)
              {
                v1487 = *(_QWORD *)(*a1 + 24);
                v1488 = v1975;
                do
                {
                  v1489 = ldiv(v1488, *(int *)(v1483 + 4 * v1486));
                  v1488 = v1489.quot;
                  v1485 += *(_QWORD *)(v1487 + 8 * v1486--) * v1489.rem;
                }
                while (v1486 != -1);
              }
              v1490 = *(_QWORD *)*a2;
              v1491 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1490) >> 2;
              v1492 = 0;
              v1493 = (v1491 - 1);
              if ((int)v1491 - 1 >= 0)
              {
                v1494 = *(_QWORD *)(*a2 + 24);
                v1495 = v1975;
                do
                {
                  v1496 = ldiv(v1495, *(int *)(v1490 + 4 * v1493));
                  v1495 = v1496.quot;
                  v1492 += *(_QWORD *)(v1494 + 8 * v1493--) * v1496.rem;
                }
                while (v1493 != -1);
              }
              if ((int)v1979 >= 1)
              {
                v1497 = 0;
                v1498 = *((unsigned __int8 *)v1901 + (int)v1492);
                v1499 = v1887;
                do
                {
                  *(_BYTE *)(v1482 + v1497) = (*(unsigned __int8 *)(v1922 + (int)v1485 + v1497) | v1498) != 0;
                  --v1499;
                  ++v1497;
                }
                while (v1499 > 1);
                v56 = *(_QWORD **)a3;
              }
              v1482 += v1951;
              v1975 += v1951;
            }
            while (v1975 < v56[6]);
          }
          break;
        case 3:
          if (v62 == 2)
          {
            v1166 = *v58;
            if (*v58)
            {
              v1167 = 0;
              v1168 = 0;
              v1169 = 0;
              v1170 = *(_QWORD *)(v57 + 152);
              v1171 = v227[19];
              v1172 = v56[19];
              do
              {
                if (v58[1])
                {
                  v1173 = 0;
                  do
                  {
                    if ((int)v325 >= 1)
                    {
                      v1174 = 0;
                      v1175 = v325 + 1;
                      do
                      {
                        *(_BYTE *)(v1172 + v1174) = (*((unsigned __int8 *)v1171 + v1168 + v1174) | *(unsigned __int8 *)(v1170 + v1169 + v1174)) != 0;
                        --v1175;
                        ++v1174;
                      }
                      while (v1175 > 1);
                      v57 = *a1;
                      v227 = (int **)*a2;
                      v58 = *(int **)*a1;
                    }
                    v1176 = *(_QWORD **)(v57 + 24);
                    v1177 = v1176[1];
                    v1169 += v1177;
                    v1168 += *((_QWORD *)v227[3] + 1);
                    v1172 += (int)v325;
                    ++v1173;
                    v1178 = v58[1];
                  }
                  while (v1173 < v1178);
                  v1166 = *v58;
                  v228 = *v227;
                }
                else
                {
                  v1178 = 0;
                  v1176 = *(_QWORD **)(v57 + 24);
                  v1177 = v1176[1];
                }
                v1169 = *v1176 + v1169 - v1178 * v1177;
                v1168 = *(_QWORD *)v227[3] + v1168 - *((_QWORD *)v227[3] + 1) * v228[1];
                ++v1167;
              }
              while (v1167 < v1166);
            }
          }
          else if (v62 == 1)
          {
            v326 = *v58;
            if (*v58)
            {
              v327 = 0;
              v328 = 0;
              v329 = 0;
              v330 = *(_QWORD *)(v57 + 152);
              v331 = v227[19];
              v332 = v56[19];
              do
              {
                if ((int)v325 >= 1)
                {
                  v333 = 0;
                  v334 = v325 + 1;
                  do
                  {
                    *(_BYTE *)(v332 + v333) = (*((unsigned __int8 *)v331 + v328 + v333) | *(unsigned __int8 *)(v330 + v329 + v333)) != 0;
                    --v334;
                    ++v333;
                  }
                  while (v334 > 1);
                  v57 = *a1;
                  v227 = (int **)*a2;
                  v326 = **(_DWORD **)*a1;
                }
                v329 += **(_QWORD **)(v57 + 24);
                v328 += *(_QWORD *)v227[3];
                v332 += (int)v325;
                ++v327;
              }
              while (v327 < v326);
            }
          }
          else if (v56[6])
          {
            v1898 = v227[19];
            v1913 = *(_QWORD *)(v57 + 152);
            v1942 = (int)v325;
            v1972 = 0;
            v1882 = v325 + 1;
            v1179 = v56[19];
            do
            {
              v1180 = *(_QWORD *)*a1;
              v1181 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1180) >> 2;
              v1182 = 0;
              v1183 = (v1181 - 1);
              if ((int)v1181 - 1 >= 0)
              {
                v1184 = *(_QWORD *)(*a1 + 24);
                v1185 = v1972;
                do
                {
                  v1186 = ldiv(v1185, *(int *)(v1180 + 4 * v1183));
                  v1185 = v1186.quot;
                  v1182 += *(_QWORD *)(v1184 + 8 * v1183--) * v1186.rem;
                }
                while (v1183 != -1);
              }
              v1187 = *(_QWORD *)*a2;
              v1188 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1187) >> 2;
              v1189 = 0;
              v1190 = (v1188 - 1);
              if ((int)v1188 - 1 >= 0)
              {
                v1191 = *(_QWORD *)(*a2 + 24);
                v1192 = v1972;
                do
                {
                  v1193 = ldiv(v1192, *(int *)(v1187 + 4 * v1190));
                  v1192 = v1193.quot;
                  v1189 += *(_QWORD *)(v1191 + 8 * v1190--) * v1193.rem;
                }
                while (v1190 != -1);
              }
              if ((int)v1979 >= 1)
              {
                v1194 = 0;
                v1195 = v1882;
                do
                {
                  *(_BYTE *)(v1179 + v1194) = (*((unsigned __int8 *)v1898 + (int)v1189 + v1194) | *(unsigned __int8 *)(v1913 + (int)v1182 + v1194)) != 0;
                  --v1195;
                  ++v1194;
                }
                while (v1195 > 1);
                v56 = *(_QWORD **)a3;
              }
              v1179 += v1942;
              v1972 += v1942;
            }
            while (v1972 < v56[6]);
          }
          break;
        default:
LABEL_344:
          switch(v321)
          {
            case 1uLL:
              if (v56[6])
              {
                v335 = 0;
                v336 = 0;
                v337 = 0;
                v338 = *(_QWORD *)(v57 + 152);
                v339 = v227[19];
                v340 = v56[19];
                do
                {
                  *(_BYTE *)(v340 + v335) = (*((unsigned __int8 *)v339 + v336) | *(unsigned __int8 *)(v338 + v337)) != 0;
                  v337 += **(_QWORD **)(*a1 + 24);
                  v336 += **(_QWORD **)(*a2 + 24);
                  ++v335;
                }
                while (v335 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
            case 2uLL:
              v538 = *v58;
              if (*v58)
              {
                v539 = 0;
                v540 = 0;
                v541 = 0;
                v542 = 0;
                v543 = *(_QWORD *)(v57 + 152);
                v544 = v227[19];
                v545 = v56[19];
                do
                {
                  if (v58[1])
                  {
                    v546 = 0;
                    do
                    {
                      *(_BYTE *)(v545 + v540 + v546) = (*((unsigned __int8 *)v544 + v541) | *(unsigned __int8 *)(v543 + v542)) != 0;
                      v57 = *a1;
                      v547 = *(_QWORD **)(*a1 + 24);
                      v548 = v547[1];
                      v542 += v548;
                      v227 = (int **)*a2;
                      v549 = *(int **)(*a2 + 24);
                      v550 = *((_QWORD *)v549 + 1);
                      v541 += v550;
                      ++v546;
                      v58 = *(int **)*a1;
                      v551 = v58[1];
                    }
                    while (v546 < v551);
                    v538 = *v58;
                    v228 = *v227;
                    v540 += v546;
                  }
                  else
                  {
                    v551 = 0;
                    v547 = *(_QWORD **)(v57 + 24);
                    v548 = v547[1];
                    v549 = v227[3];
                    v550 = *((_QWORD *)v549 + 1);
                  }
                  v542 = *v547 + v542 - v551 * v548;
                  v541 = *(_QWORD *)v549 + v541 - v550 * v228[1];
                  ++v539;
                }
                while (v539 < v538);
              }
              break;
            case 3uLL:
              v552 = *v58;
              if (*v58)
              {
                v553 = 0;
                v554 = 0;
                v555 = 0;
                v556 = 0;
                v557 = *(_QWORD *)(v57 + 152);
                v558 = v227[19];
                v559 = v56[19];
                do
                {
                  if (v58[1])
                  {
                    v560 = 0;
                    do
                    {
                      if (v58[2])
                      {
                        v561 = 0;
                        do
                        {
                          *(_BYTE *)(v559 + v554 + v561) = (*((unsigned __int8 *)v558 + v555) | *(unsigned __int8 *)(v557 + v556)) != 0;
                          v57 = *a1;
                          v562 = *(_QWORD **)(*a1 + 24);
                          v563 = v562[2];
                          v556 += v563;
                          v227 = (int **)*a2;
                          v564 = *(int **)(*a2 + 24);
                          v565 = *((_QWORD *)v564 + 2);
                          v555 += v565;
                          ++v561;
                          v58 = *(int **)*a1;
                          v566 = v58[2];
                        }
                        while (v561 < v566);
                        v228 = *v227;
                        v554 += v561;
                      }
                      else
                      {
                        v566 = 0;
                        v562 = *(_QWORD **)(v57 + 24);
                        v563 = v562[2];
                        v564 = v227[3];
                        v565 = *((_QWORD *)v564 + 2);
                      }
                      v567 = v562[1];
                      v556 = v567 + v556 - v566 * v563;
                      v555 = *((_QWORD *)v564 + 1) + v555 - v565 * v228[2];
                      ++v560;
                      v568 = v58[1];
                    }
                    while (v560 < v568);
                    v552 = *v58;
                  }
                  else
                  {
                    v568 = 0;
                    v562 = *(_QWORD **)(v57 + 24);
                    v567 = v562[1];
                  }
                  v556 = *v562 + v556 - v568 * v567;
                  v555 = *(_QWORD *)v227[3] + v555 - *((_QWORD *)v227[3] + 1) * v228[1];
                  ++v553;
                }
                while (v553 < v552);
              }
              break;
            case 4uLL:
              v569 = *v58;
              if (*v58)
              {
                v570 = 0;
                v571 = 0;
                v572 = 0;
                v573 = 0;
                v574 = *(_QWORD *)(v57 + 152);
                v575 = v227[19];
                v576 = v56[19];
                do
                {
                  if (v58[1])
                  {
                    v577 = 0;
                    do
                    {
                      if (v58[2])
                      {
                        v578 = 0;
                        do
                        {
                          if (v58[3])
                          {
                            v579 = 0;
                            do
                            {
                              *(_BYTE *)(v576 + v571 + v579) = (*((unsigned __int8 *)v575 + v572) | *(unsigned __int8 *)(v574 + v573)) != 0;
                              v57 = *a1;
                              v580 = *(_QWORD **)(*a1 + 24);
                              v581 = v580[3];
                              v573 += v581;
                              v227 = (int **)*a2;
                              v582 = *(int **)(*a2 + 24);
                              v583 = *((_QWORD *)v582 + 3);
                              v572 += v583;
                              ++v579;
                              v58 = *(int **)*a1;
                              v584 = v58[3];
                            }
                            while (v579 < v584);
                            v228 = *v227;
                            v571 += v579;
                          }
                          else
                          {
                            v584 = 0;
                            v580 = *(_QWORD **)(v57 + 24);
                            v581 = v580[3];
                            v582 = v227[3];
                            v583 = *((_QWORD *)v582 + 3);
                          }
                          v585 = v580[2];
                          v573 = v585 + v573 - v584 * v581;
                          v572 = *((_QWORD *)v582 + 2) + v572 - v583 * v228[3];
                          ++v578;
                          v586 = v58[2];
                        }
                        while (v578 < v586);
                      }
                      else
                      {
                        v586 = 0;
                        v580 = *(_QWORD **)(v57 + 24);
                        v585 = v580[2];
                      }
                      v573 = v580[1] + v573 - v586 * v585;
                      v572 = *((_QWORD *)v227[3] + 1) + v572 - *((_QWORD *)v227[3] + 2) * v228[2];
                      ++v577;
                      v587 = v58[1];
                    }
                    while (v577 < v587);
                    v569 = *v58;
                  }
                  else
                  {
                    v587 = 0;
                  }
                  v573 = **(_QWORD **)(v57 + 24) + v573 - *(_QWORD *)(*(_QWORD *)(v57 + 24) + 8) * v587;
                  v572 = *(_QWORD *)v227[3] + v572 - *((_QWORD *)v227[3] + 1) * v228[1];
                  ++v570;
                }
                while (v570 < v569);
              }
              break;
            default:
              if (v56[6])
              {
                v522 = 0;
                v1968 = v227[19];
                v1986 = *(_QWORD *)(v57 + 152);
                v523 = v56[19];
                do
                {
                  v524 = *(_QWORD *)*a1;
                  v525 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v524) >> 2;
                  v526 = 0;
                  v527 = (v525 - 1);
                  if ((int)v525 - 1 >= 0)
                  {
                    v528 = *(_QWORD *)(*a1 + 24);
                    v529 = v522;
                    do
                    {
                      v530 = ldiv(v529, *(int *)(v524 + 4 * v527));
                      v529 = v530.quot;
                      v526 += *(_QWORD *)(v528 + 8 * v527--) * v530.rem;
                    }
                    while (v527 != -1);
                  }
                  v531 = *(_QWORD *)*a2;
                  v532 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v531) >> 2;
                  v533 = 0;
                  v534 = (v532 - 1);
                  if ((int)v532 - 1 >= 0)
                  {
                    v535 = *(_QWORD *)(*a2 + 24);
                    v536 = v522;
                    do
                    {
                      v537 = ldiv(v536, *(int *)(v531 + 4 * v534));
                      v536 = v537.quot;
                      v533 += *(_QWORD *)(v535 + 8 * v534--) * v537.rem;
                    }
                    while (v534 != -1);
                  }
                  *(_BYTE *)(v523 + v522++) = (*((unsigned __int8 *)v1968 + (int)v533) | *(unsigned __int8 *)(v1986 + (int)v526)) != 0;
                }
                while (v522 < *(_QWORD *)(*(_QWORD *)a3 + 48));
              }
              break;
          }
          break;
      }
      return;
    case 2:
      switch(v15)
      {
        case 0:
          goto LABEL_18;
        case 1:
          v16 = *(_DWORD *)(*a2 + 160);
          if (v16 >= 1)
          {
            v17 = **(_DWORD **)(*a1 + 152);
            v18 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v19 = *(int **)(*a2 + 152);
            v20 = v16 + 1;
            do
            {
              v21 = *v19++;
              *v18++ = (v21 | v17) != 0;
              --v20;
            }
            while (v20 > 1);
          }
          return;
        case 2:
          v87 = *(_DWORD *)(*a1 + 160);
          if (v87 >= 1)
          {
            v88 = **(_DWORD **)(*a2 + 152);
            v89 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v90 = *(int **)(*a1 + 152);
            v91 = v87 + 1;
            do
            {
              v92 = *v90++;
              *v89++ = (v92 | v88) != 0;
              --v91;
            }
            while (v91 > 1);
          }
          return;
        case 3:
          v93 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v93 >= 1)
          {
            v94 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v95 = *(int **)(*a2 + 152);
            v96 = *(int **)(*a1 + 152);
            v97 = v93 + 1;
            do
            {
              v99 = *v96++;
              v98 = v99;
              v100 = *v95++;
              *v94++ = (v100 | v98) != 0;
              --v97;
            }
            while (v97 > 1);
          }
          return;
        default:
          v78 = *(_QWORD **)a3;
          v79 = (_QWORD *)*a1;
          v80 = *(int **)*a1;
          v81 = (v79[1] - (_QWORD)v80) >> 2;
          v82 = (v81 - 1);
          if ((int)v82 >= -1)
            v83 = -1;
          else
            v83 = v81 - 1;
          v84 = v83 + 1;
          v85 = v81 + 1;
          break;
      }
      while (1)
      {
        v86 = v85 - 2;
        if (v85 - 2 < 0)
          break;
        --v85;
        if (*(_QWORD *)(v79[3] + 8 * v86) != *(_QWORD *)(v78[3] + 8 * v86))
          goto LABEL_170;
      }
      v85 = v84;
LABEL_170:
      v234 = (_QWORD *)*a2;
      v235 = *(int **)*a2;
      v236 = (v234[1] - (_QWORD)v235) >> 2;
      v237 = (v236 - 1);
      if ((int)v237 >= -1)
        v238 = -1;
      else
        v238 = v236 - 1;
      v239 = v238 + 1;
      v240 = v236 + 1;
      while (1)
      {
        v241 = v240 - 2;
        if (v240 - 2 < 0)
          break;
        --v240;
        if (*(_QWORD *)(v234[3] + 8 * v241) != *(_QWORD *)(v78[3] + 8 * v241))
          goto LABEL_219;
      }
      v240 = v239;
LABEL_219:
      v277 = v81 + 1;
      while (1)
      {
        v278 = v277 - 2;
        if (v277 - 2 < 0)
          break;
        --v277;
        if (*(_QWORD *)(v79[3] + 8 * v278))
          goto LABEL_254;
      }
      v277 = v84;
LABEL_254:
      v291 = v236 + 1;
      while (1)
      {
        v292 = v291 - 2;
        if (v291 - 2 < 0)
          break;
        --v291;
        if (*(_QWORD *)(v234[3] + 8 * v292))
          goto LABEL_350;
      }
      v291 = v239;
LABEL_350:
      v341 = (uint64_t)(v78[1] - *v78) >> 2;
      if (v85 <= v240)
        v342 = v240;
      else
        v342 = v85;
      if (v85 <= v291)
        v85 = v291;
      if (v277 > v240)
        v240 = v277;
      if (v341 > v240)
      {
        v343 = 1;
      }
      else
      {
        v240 = (uint64_t)(v78[1] - *v78) >> 2;
        v343 = 4;
      }
      if (v341 > v85)
      {
        v344 = 2;
      }
      else
      {
        v85 = v240;
        v344 = v343;
      }
      if (v341 > v342)
      {
        v85 = v342;
        v344 = 3;
      }
      v1963 = v237;
      v1980 = v82;
      if (!v85)
        goto LABEL_380;
      v345 = *(_QWORD *)(v78[3] + 8 * (v85 - 1));
      if (v345 < 0x10)
        goto LABEL_380;
      switch(v344)
      {
        case 1:
          if (v85 == 2)
          {
            v1500 = *v80;
            if (*v80)
            {
              v1501 = 0;
              v1502 = 0;
              v1503 = 0;
              v1504 = v79[19];
              v1505 = v234[19];
              v1506 = v78[19];
              v1507 = (uint64_t *)v79[3];
              v1508 = *v1507;
              v1509 = v1507[1];
              v1510 = (uint64_t *)v234[3];
              v1511 = *v1510;
              v1512 = v1510[1];
              v1513 = v80[1];
              v1514 = v1513;
              do
              {
                if (v1514)
                {
                  v1515 = 0;
                  v1516 = v1505 + 4 * v1502;
                  do
                  {
                    if ((int)v345 >= 1)
                    {
                      v1517 = 0;
                      v1518 = *(_DWORD *)(v1504 + 4 * v1503);
                      v1519 = v345 + 1;
                      do
                      {
                        *(_DWORD *)(v1506 + v1517) = (*(_DWORD *)(v1516 + v1517) | v1518) != 0;
                        --v1519;
                        v1517 += 4;
                      }
                      while (v1519 > 1);
                      v1513 = v80[1];
                    }
                    v1503 += v1509;
                    v1502 += v1512;
                    v1506 += 4 * (int)v345;
                    ++v1515;
                    v1516 += 4 * v1512;
                  }
                  while (v1515 < v1513);
                  v1520 = v1513;
                  v1500 = *v80;
                  v1514 = v1513;
                }
                else
                {
                  v1520 = 0;
                }
                v1503 = v1503 + v1508 - v1520 * v1509;
                v1502 = v1502 + v1511 - v1512 * v235[1];
                ++v1501;
              }
              while (v1501 < v1500);
            }
          }
          else if (v85 == 1)
          {
            v1022 = *v80;
            if (*v80)
            {
              v1023 = 0;
              v1024 = 0;
              v1025 = v79[19];
              v1026 = v234[19];
              v1027 = v78[19];
              v1028 = *(_QWORD *)v79[3];
              v1029 = 4 * *(_QWORD *)v234[3];
              do
              {
                if ((int)v345 >= 1)
                {
                  v1030 = 0;
                  v1031 = *(_DWORD *)(v1025 + 4 * v1024);
                  v1032 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1027 + v1030) = (*(_DWORD *)(v1026 + v1030) | v1031) != 0;
                    --v1032;
                    v1030 += 4;
                  }
                  while (v1032 > 1);
                  v1022 = *v80;
                }
                v1024 += v1028;
                ++v1023;
                v1027 += 4 * (int)v345;
                v1026 += v1029;
              }
              while (v1023 < v1022);
            }
          }
          else
          {
            v1923 = v78[6];
            if (v1923)
            {
              v1952 = 0;
              v1856 = v234[19];
              v1871 = v79[19];
              v1521 = v78[19];
              do
              {
                v1522 = 0;
                if ((v82 & 0x80000000) == 0)
                {
                  v1523 = v79[3];
                  v1524 = v82;
                  v1525 = v1952;
                  do
                  {
                    v1526 = ldiv(v1525, v80[v1524]);
                    v1525 = v1526.quot;
                    v1522 += *(_QWORD *)(v1523 + 8 * v1524--) * v1526.rem;
                  }
                  while (v1524 != -1);
                }
                v1527 = v1963;
                if ((v1963 & 0x80000000) != 0)
                {
                  LODWORD(v1528) = 0;
                }
                else
                {
                  v1528 = 0;
                  v1529 = v234[3];
                  v1530 = v1952;
                  do
                  {
                    v1531 = ldiv(v1530, v235[v1527]);
                    v1530 = v1531.quot;
                    v1528 += *(_QWORD *)(v1529 + 8 * v1527--) * v1531.rem;
                  }
                  while (v1527 != -1);
                }
                v82 = v1980;
                if ((int)v345 >= 1)
                {
                  v1532 = 0;
                  v1533 = *(_DWORD *)(v1871 + 4 * (int)v1522);
                  v1534 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1521 + v1532) = (*(_DWORD *)(v1856 + 4 * (int)v1528 + v1532) | v1533) != 0;
                    --v1534;
                    v1532 += 4;
                  }
                  while (v1534 > 1);
                }
                v1521 += 4 * (int)v345;
                v1952 += (int)v345;
              }
              while (v1952 < v1923);
            }
          }
          break;
        case 2:
          if (v85 == 2)
          {
            v1535 = *v80;
            if (*v80)
            {
              v1536 = 0;
              v1537 = 0;
              v1538 = 0;
              v1539 = v79[19];
              v1540 = v234[19];
              v1541 = v78[19];
              v1542 = (uint64_t *)v79[3];
              v1543 = *v1542;
              v1544 = v1542[1];
              v1545 = (uint64_t *)v234[3];
              v1546 = *v1545;
              v1547 = v1545[1];
              v1548 = v80[1];
              v1549 = v1548;
              do
              {
                if (v1549)
                {
                  v1550 = 0;
                  v1551 = v1539 + 4 * v1538;
                  do
                  {
                    if ((int)v345 >= 1)
                    {
                      v1552 = 0;
                      v1553 = *(_DWORD *)(v1540 + 4 * v1537);
                      v1554 = v345 + 1;
                      do
                      {
                        *(_DWORD *)(v1541 + v1552) = (*(_DWORD *)(v1551 + v1552) | v1553) != 0;
                        --v1554;
                        v1552 += 4;
                      }
                      while (v1554 > 1);
                      v1548 = v80[1];
                    }
                    v1538 += v1544;
                    v1537 += v1547;
                    v1541 += 4 * (int)v345;
                    ++v1550;
                    v1551 += 4 * v1544;
                  }
                  while (v1550 < v1548);
                  v1555 = v1548;
                  v1535 = *v80;
                  v1549 = v1548;
                }
                else
                {
                  v1555 = 0;
                }
                v1538 = v1538 + v1543 - v1555 * v1544;
                v1537 = v1537 + v1546 - v1547 * v235[1];
                ++v1536;
              }
              while (v1536 < v1535);
            }
          }
          else if (v85 == 1)
          {
            v1033 = *v80;
            if (*v80)
            {
              v1034 = 0;
              v1035 = 0;
              v1036 = v79[19];
              v1037 = v234[19];
              v1038 = v78[19];
              v1039 = *(_QWORD *)v234[3];
              v1040 = 4 * *(_QWORD *)v79[3];
              do
              {
                if ((int)v345 >= 1)
                {
                  v1041 = 0;
                  v1042 = *(_DWORD *)(v1037 + 4 * v1035);
                  v1043 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1038 + v1041) = (*(_DWORD *)(v1036 + v1041) | v1042) != 0;
                    --v1043;
                    v1041 += 4;
                  }
                  while (v1043 > 1);
                  v1033 = *v80;
                }
                v1035 += v1039;
                ++v1034;
                v1038 += 4 * (int)v345;
                v1036 += v1040;
              }
              while (v1034 < v1033);
            }
          }
          else
          {
            v1924 = v78[6];
            if (v1924)
            {
              v1953 = 0;
              v1857 = v234[19];
              v1872 = v79[19];
              v1556 = v78[19];
              do
              {
                v1557 = 0;
                if ((v82 & 0x80000000) == 0)
                {
                  v1558 = v79[3];
                  v1559 = v82;
                  v1560 = v1953;
                  do
                  {
                    v1561 = ldiv(v1560, v80[v1559]);
                    v1560 = v1561.quot;
                    v1557 += *(_QWORD *)(v1558 + 8 * v1559--) * v1561.rem;
                  }
                  while (v1559 != -1);
                }
                v1562 = v1963;
                if ((v1963 & 0x80000000) != 0)
                {
                  LODWORD(v1563) = 0;
                }
                else
                {
                  v1563 = 0;
                  v1564 = v234[3];
                  v1565 = v1953;
                  do
                  {
                    v1566 = ldiv(v1565, v235[v1562]);
                    v1565 = v1566.quot;
                    v1563 += *(_QWORD *)(v1564 + 8 * v1562--) * v1566.rem;
                  }
                  while (v1562 != -1);
                }
                v82 = v1980;
                if ((int)v345 >= 1)
                {
                  v1567 = 0;
                  v1568 = *(_DWORD *)(v1857 + 4 * (int)v1563);
                  v1569 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1556 + v1567) = (*(_DWORD *)(v1872 + 4 * (int)v1557 + v1567) | v1568) != 0;
                    --v1569;
                    v1567 += 4;
                  }
                  while (v1569 > 1);
                }
                v1556 += 4 * (int)v345;
                v1953 += (int)v345;
              }
              while (v1953 < v1924);
            }
          }
          break;
        case 3:
          if (v85 == 2)
          {
            v1196 = *v80;
            if (*v80)
            {
              v1197 = 0;
              v1198 = 0;
              v1199 = 0;
              v1200 = v79[19];
              v1201 = v234[19];
              v1202 = v78[19];
              v1203 = (uint64_t *)v79[3];
              v1204 = *v1203;
              v1205 = v1203[1];
              v1206 = (uint64_t *)v234[3];
              v1207 = *v1206;
              v1208 = v1206[1];
              v1209 = v80[1];
              v1210 = v1209;
              do
              {
                if (v1210)
                {
                  v1211 = 0;
                  v1212 = v1201 + 4 * v1198;
                  v1213 = v1200 + 4 * v1199;
                  do
                  {
                    if ((int)v345 >= 1)
                    {
                      v1214 = 0;
                      v1215 = v345 + 1;
                      do
                      {
                        *(_DWORD *)(v1202 + v1214) = (*(_DWORD *)(v1212 + v1214) | *(_DWORD *)(v1213 + v1214)) != 0;
                        --v1215;
                        v1214 += 4;
                      }
                      while (v1215 > 1);
                      v1209 = v80[1];
                    }
                    v1199 += v1205;
                    v1198 += v1208;
                    v1202 += 4 * (int)v345;
                    ++v1211;
                    v1212 += 4 * v1208;
                    v1213 += 4 * v1205;
                  }
                  while (v1211 < v1209);
                  v1216 = v1209;
                  v1196 = *v80;
                  v1210 = v1209;
                }
                else
                {
                  v1216 = 0;
                }
                v1199 = v1199 + v1204 - v1216 * v1205;
                v1198 = v1198 + v1207 - v1208 * v235[1];
                ++v1197;
              }
              while (v1197 < v1196);
            }
          }
          else if (v85 == 1)
          {
            v346 = *v80;
            if (*v80)
            {
              v347 = 0;
              v348 = v79[19];
              v349 = v234[19];
              v350 = v78[19];
              v351 = 4 * *(_QWORD *)v234[3];
              v352 = 4 * *(_QWORD *)v79[3];
              do
              {
                if ((int)v345 >= 1)
                {
                  v353 = 0;
                  v354 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v350 + v353) = (*(_DWORD *)(v349 + v353) | *(_DWORD *)(v348 + v353)) != 0;
                    --v354;
                    v353 += 4;
                  }
                  while (v354 > 1);
                  v346 = *v80;
                }
                ++v347;
                v350 += 4 * (int)v345;
                v349 += v351;
                v348 += v352;
              }
              while (v347 < v346);
            }
          }
          else
          {
            v1914 = v78[6];
            if (v1914)
            {
              v1943 = 0;
              v1852 = v234[19];
              v1865 = v79[19];
              v1217 = v78[19];
              do
              {
                v1218 = 0;
                if ((v82 & 0x80000000) == 0)
                {
                  v1219 = v79[3];
                  v1220 = v82;
                  v1221 = v1943;
                  do
                  {
                    v1222 = ldiv(v1221, v80[v1220]);
                    v1221 = v1222.quot;
                    v1218 += *(_QWORD *)(v1219 + 8 * v1220--) * v1222.rem;
                  }
                  while (v1220 != -1);
                }
                v1223 = v1963;
                if ((v1963 & 0x80000000) != 0)
                {
                  LODWORD(v1224) = 0;
                }
                else
                {
                  v1224 = 0;
                  v1225 = v234[3];
                  v1226 = v1943;
                  do
                  {
                    v1227 = ldiv(v1226, v235[v1223]);
                    v1226 = v1227.quot;
                    v1224 += *(_QWORD *)(v1225 + 8 * v1223--) * v1227.rem;
                  }
                  while (v1223 != -1);
                }
                v82 = v1980;
                if ((int)v345 >= 1)
                {
                  v1228 = 0;
                  v1229 = v345 + 1;
                  do
                  {
                    *(_DWORD *)(v1217 + v1228) = (*(_DWORD *)(v1852 + 4 * (int)v1224 + v1228) | *(_DWORD *)(v1865 + 4 * (int)v1218 + v1228)) != 0;
                    --v1229;
                    v1228 += 4;
                  }
                  while (v1229 > 1);
                }
                v1217 += 4 * (int)v345;
                v1943 += (int)v345;
              }
              while (v1943 < v1914);
            }
          }
          break;
        default:
LABEL_380:
          switch(v341)
          {
            case 1uLL:
              v355 = v78[6];
              if (v355)
              {
                v356 = (_DWORD *)v79[19];
                v357 = (_DWORD *)v234[19];
                v358 = (_DWORD *)v78[19];
                v359 = 4 * *(_QWORD *)v234[3];
                v360 = 4 * *(_QWORD *)v79[3];
                do
                {
                  *v358++ = (*v357 | *v356) != 0;
                  v357 = (_DWORD *)((char *)v357 + v359);
                  v356 = (_DWORD *)((char *)v356 + v360);
                  --v355;
                }
                while (v355);
              }
              break;
            case 2uLL:
              v600 = *v80;
              if (*v80)
              {
                v601 = 0;
                v602 = 0;
                v603 = 0;
                v604 = 0;
                v605 = v79[19];
                v606 = v234[19];
                v607 = v78[19];
                v608 = (uint64_t *)v79[3];
                v609 = *v608;
                v610 = v608[1];
                v611 = (uint64_t *)v234[3];
                v613 = *v611;
                v612 = v611[1];
                v614 = v80[1];
                do
                {
                  if (v614)
                  {
                    for (i = 0; i < v614; ++i)
                    {
                      *(_DWORD *)(v607 + 4 * v602 + 4 * i) = (*(_DWORD *)(v606 + 4 * v603) | *(_DWORD *)(v605 + 4 * v604)) != 0;
                      v604 += v610;
                      v603 += v612;
                      v614 = v80[1];
                    }
                    v616 = v614;
                    v600 = *v80;
                    v602 += i;
                  }
                  else
                  {
                    v616 = 0;
                  }
                  v604 = v604 + v609 - v616 * v610;
                  v603 = v603 + v613 - v612 * v235[1];
                  ++v601;
                }
                while (v601 < v600);
              }
              break;
            case 3uLL:
              v617 = *v80;
              if (*v80)
              {
                v618 = 0;
                v619 = 0;
                v620 = 0;
                v621 = 0;
                v622 = v79[19];
                v623 = v234[19];
                v624 = v78[19];
                v625 = (uint64_t *)v79[3];
                v626 = *v625;
                v627 = v625[1];
                v628 = (uint64_t *)v234[3];
                v629 = *v628;
                v630 = v628[1];
                v631 = v80[1];
                v632 = v631;
                do
                {
                  if (v632)
                  {
                    v633 = 0;
                    v634 = v625[2];
                    v635 = v628[2];
                    v636 = v80[2];
                    do
                    {
                      if (v636)
                      {
                        for (j = 0; j < v636; ++j)
                        {
                          *(_DWORD *)(v624 + 4 * v619 + 4 * j) = (*(_DWORD *)(v623 + 4 * v620) | *(_DWORD *)(v622 + 4 * v621)) != 0;
                          v621 += v634;
                          v620 += v635;
                          v636 = v80[2];
                        }
                        v638 = v636;
                        v631 = v80[1];
                        v619 += j;
                      }
                      else
                      {
                        v638 = 0;
                      }
                      v621 = v621 + v627 - v638 * v634;
                      v620 = v620 + v630 - v635 * v235[2];
                      ++v633;
                    }
                    while (v633 < v631);
                    v639 = v631;
                    v617 = *v80;
                    v632 = v631;
                  }
                  else
                  {
                    v639 = 0;
                  }
                  v621 = v621 + v626 - v639 * v627;
                  v620 = v620 + v629 - v630 * v235[1];
                  ++v618;
                }
                while (v618 < v617);
              }
              break;
            case 4uLL:
              v640 = *v80;
              if (*v80)
              {
                v641 = 0;
                v642 = 0;
                v643 = 0;
                v644 = 0;
                v645 = v79[19];
                v646 = v234[19];
                v647 = v78[19];
                v648 = (uint64_t *)v79[3];
                v649 = *v648;
                v650 = v648[1];
                v651 = (uint64_t *)v234[3];
                v652 = *v651;
                v653 = v651[1];
                v654 = v80[1];
                v655 = v654;
                do
                {
                  if (v655)
                  {
                    v656 = 0;
                    v657 = v648[2];
                    v658 = v651[2];
                    v659 = v80[2];
                    v660 = v659;
                    do
                    {
                      if (v660)
                      {
                        v661 = 0;
                        v662 = v648[3];
                        v663 = v651[3];
                        v664 = v80[3];
                        do
                        {
                          if (v664)
                          {
                            for (k = 0; k < v664; ++k)
                            {
                              *(_DWORD *)(v647 + 4 * v642 + 4 * k) = (*(_DWORD *)(v646 + 4 * v643) | *(_DWORD *)(v645 + 4 * v644)) != 0;
                              v644 += v662;
                              v643 += v663;
                              v664 = v80[3];
                            }
                            v666 = v664;
                            v659 = v80[2];
                            v642 += k;
                          }
                          else
                          {
                            v666 = 0;
                          }
                          v644 = v644 + v657 - v666 * v662;
                          v643 = v643 + v658 - v663 * v235[3];
                          ++v661;
                        }
                        while (v661 < v659);
                        v667 = v659;
                        v654 = v80[1];
                        v660 = v659;
                      }
                      else
                      {
                        v667 = 0;
                      }
                      v644 = v644 + v650 - v667 * v657;
                      v643 = v643 + v653 - v658 * v235[2];
                      ++v656;
                    }
                    while (v656 < v654);
                    v668 = v654;
                    v640 = *v80;
                    v655 = v654;
                  }
                  else
                  {
                    v668 = 0;
                  }
                  v644 = v644 + v649 - v668 * v650;
                  v643 = v643 + v652 - v653 * v235[1];
                  ++v641;
                }
                while (v641 < v640);
              }
              break;
            default:
              v588 = v78[6];
              if (v588)
              {
                v589 = 0;
                v1906 = v234[19];
                v1935 = v79[19];
                v1892 = v78[19];
                do
                {
                  v590 = 0;
                  if ((v82 & 0x80000000) == 0)
                  {
                    v591 = v79[3];
                    v592 = v82;
                    v593 = v589;
                    do
                    {
                      v594 = ldiv(v593, v80[v592]);
                      v593 = v594.quot;
                      v590 += *(_QWORD *)(v591 + 8 * v592--) * v594.rem;
                    }
                    while (v592 != -1);
                  }
                  v595 = v1963;
                  if ((v1963 & 0x80000000) != 0)
                  {
                    LODWORD(v596) = 0;
                  }
                  else
                  {
                    v596 = 0;
                    v597 = v234[3];
                    v598 = v589;
                    do
                    {
                      v599 = ldiv(v598, v235[v595]);
                      v598 = v599.quot;
                      v596 += *(_QWORD *)(v597 + 8 * v595--) * v599.rem;
                    }
                    while (v595 != -1);
                  }
                  *(_DWORD *)(v1892 + 4 * v589++) = (*(_DWORD *)(v1906 + 4 * (int)v596) | *(_DWORD *)(v1935 + 4 * (int)v590)) != 0;
                  v82 = v1980;
                }
                while (v589 != v588);
              }
              break;
          }
          break;
      }
      return;
    case 3:
      switch(v22)
      {
        case 0:
LABEL_15:
          v7 = (**(unsigned __int8 **)(*a2 + 152) | **(unsigned __int8 **)(*a1 + 152)) != 0;
LABEL_16:
          **(_BYTE **)(*(_QWORD *)a3 + 152) = v7;
          return;
        case 1:
          v109 = *(_DWORD *)(*a2 + 160);
          if (v109 >= 1)
          {
            v110 = **(unsigned __int8 **)(*a1 + 152);
            v111 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v112 = *(unsigned __int8 **)(*a2 + 152);
            v113 = v109 + 1;
            do
            {
              v114 = *v112++;
              *v111++ = (v114 | v110) != 0;
              --v113;
            }
            while (v113 > 1);
          }
          return;
        case 2:
          v115 = *(_DWORD *)(*a1 + 160);
          if (v115 >= 1)
          {
            v116 = **(unsigned __int8 **)(*a2 + 152);
            v117 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v118 = *(unsigned __int8 **)(*a1 + 152);
            v119 = v115 + 1;
            do
            {
              v120 = *v118++;
              *v117++ = (v120 | v116) != 0;
              --v119;
            }
            while (v119 > 1);
          }
          return;
        case 3:
          v121 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v121 >= 1)
          {
            v122 = *(BOOL **)(*(_QWORD *)a3 + 152);
            v123 = *(unsigned __int8 **)(*a2 + 152);
            v124 = *(unsigned __int8 **)(*a1 + 152);
            v125 = v121 + 1;
            do
            {
              v127 = *v124++;
              v126 = v127;
              v128 = *v123++;
              *v122++ = (v128 | v126) != 0;
              --v125;
            }
            while (v125 > 1);
          }
          return;
        default:
          v101 = *(_QWORD **)a3;
          v102 = *a1;
          v103 = *(int **)*a1;
          v104 = (*(_QWORD *)(*a1 + 8) - (_QWORD)v103) >> 2;
          v105 = v104 - 1;
          if ((int)v104 - 1 >= -1)
            v105 = -1;
          v106 = v105 + 1;
          v107 = v104 + 1;
          while (1)
          {
            v108 = v107 - 2;
            if (v107 - 2 < 0)
              break;
            --v107;
            if (*(_QWORD *)(*(_QWORD *)(v102 + 24) + 8 * v108) != *(_QWORD *)(v101[3] + 8 * v108))
              goto LABEL_178;
          }
          v107 = v106;
LABEL_178:
          v242 = (int **)*a2;
          v243 = *(int **)*a2;
          v244 = (*(_QWORD *)(*a2 + 8) - (_QWORD)v243) >> 2;
          v245 = v244 - 1;
          if ((int)v244 - 1 >= -1)
            v245 = -1;
          v246 = v245 + 1;
          v247 = v244 + 1;
          while (1)
          {
            v248 = v247 - 2;
            if (v247 - 2 < 0)
              break;
            --v247;
            if (*(_QWORD *)&v242[3][2 * v248] != *(_QWORD *)(v101[3] + 8 * v248))
              goto LABEL_224;
          }
          v247 = v246;
LABEL_224:
          v279 = v104 + 1;
          while (1)
          {
            v280 = v279 - 2;
            if (v279 - 2 < 0)
              break;
            --v279;
            if (*(_QWORD *)(*(_QWORD *)(v102 + 24) + 8 * v280))
              goto LABEL_259;
          }
          v279 = v106;
LABEL_259:
          v293 = v244 + 1;
          while (1)
          {
            v294 = v293 - 2;
            if (v293 - 2 < 0)
              break;
            --v293;
            if (*(_QWORD *)&v242[3][2 * v294])
              goto LABEL_386;
          }
          v293 = v246;
LABEL_386:
          v361 = (uint64_t)(v101[1] - *v101) >> 2;
          if (v107 <= v247)
            v362 = v247;
          else
            v362 = v107;
          if (v107 <= v293)
            v107 = v293;
          if (v279 > v247)
            v247 = v279;
          if (v361 > v247)
          {
            v363 = 1;
          }
          else
          {
            v247 = (uint64_t)(v101[1] - *v101) >> 2;
            v363 = 4;
          }
          if (v361 > v107)
          {
            v364 = 2;
          }
          else
          {
            v107 = v247;
            v364 = v363;
          }
          if (v361 > v362)
          {
            v107 = v362;
            v364 = 3;
          }
          if (!v107)
            goto LABEL_416;
          v365 = *(_QWORD *)(v101[3] + 8 * (v107 - 1));
          if (v365 < 0x10)
            goto LABEL_416;
          v1981 = *(_QWORD *)(v101[3] + 8 * (v107 - 1));
          switch(v364)
          {
            case 1:
              if (v107 == 2)
              {
                v1570 = *v103;
                if (*v103)
                {
                  v1571 = 0;
                  v1572 = 0;
                  v1573 = 0;
                  v1574 = *(_QWORD *)(v102 + 152);
                  v1575 = v242[19];
                  v1576 = v101[19];
                  do
                  {
                    if (v103[1])
                    {
                      v1577 = 0;
                      do
                      {
                        if ((int)v365 >= 1)
                        {
                          v1578 = 0;
                          v1579 = *(unsigned __int8 *)(v1574 + v1573);
                          v1580 = v365 + 1;
                          do
                          {
                            *(_BYTE *)(v1576 + v1578) = (*((unsigned __int8 *)v1575 + v1572 + v1578) | v1579) != 0;
                            --v1580;
                            ++v1578;
                          }
                          while (v1580 > 1);
                          v102 = *a1;
                          v242 = (int **)*a2;
                          v103 = *(int **)*a1;
                        }
                        v1581 = *(_QWORD **)(v102 + 24);
                        v1582 = v1581[1];
                        v1573 += v1582;
                        v1572 += *((_QWORD *)v242[3] + 1);
                        v1576 += (int)v365;
                        ++v1577;
                        v1583 = v103[1];
                      }
                      while (v1577 < v1583);
                      v1570 = *v103;
                      v243 = *v242;
                    }
                    else
                    {
                      v1583 = 0;
                      v1581 = *(_QWORD **)(v102 + 24);
                      v1582 = v1581[1];
                    }
                    v1573 = *v1581 + v1573 - v1583 * v1582;
                    v1572 = *(_QWORD *)v242[3] + v1572 - *((_QWORD *)v242[3] + 1) * v243[1];
                    ++v1571;
                  }
                  while (v1571 < v1570);
                }
              }
              else if (v107 == 1)
              {
                v1044 = *v103;
                if (*v103)
                {
                  v1045 = 0;
                  v1046 = 0;
                  v1047 = 0;
                  v1048 = *(_QWORD *)(v102 + 152);
                  v1049 = v242[19];
                  v1050 = v101[19];
                  do
                  {
                    if ((int)v365 >= 1)
                    {
                      v1051 = 0;
                      v1052 = *(unsigned __int8 *)(v1048 + v1047);
                      v1053 = v365 + 1;
                      do
                      {
                        *(_BYTE *)(v1050 + v1051) = (*((unsigned __int8 *)v1049 + v1046 + v1051) | v1052) != 0;
                        --v1053;
                        ++v1051;
                      }
                      while (v1053 > 1);
                      v102 = *a1;
                      v242 = (int **)*a2;
                      v1044 = **(_DWORD **)*a1;
                    }
                    v1047 += **(_QWORD **)(v102 + 24);
                    v1046 += *(_QWORD *)v242[3];
                    v1050 += (int)v365;
                    ++v1045;
                  }
                  while (v1045 < v1044);
                }
              }
              else if (v101[6])
              {
                v1902 = v242[19];
                v1925 = *(_QWORD *)(v102 + 152);
                v1954 = (int)v365;
                v1976 = 0;
                v1888 = v365 + 1;
                v1584 = v101[19];
                do
                {
                  v1585 = *(_QWORD *)*a1;
                  v1586 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1585) >> 2;
                  v1587 = 0;
                  v1588 = (v1586 - 1);
                  if ((int)v1586 - 1 >= 0)
                  {
                    v1589 = *(_QWORD *)(*a1 + 24);
                    v1590 = v1976;
                    do
                    {
                      v1591 = ldiv(v1590, *(int *)(v1585 + 4 * v1588));
                      v1590 = v1591.quot;
                      v1587 += *(_QWORD *)(v1589 + 8 * v1588--) * v1591.rem;
                    }
                    while (v1588 != -1);
                  }
                  v1592 = *(_QWORD *)*a2;
                  v1593 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1592) >> 2;
                  v1594 = 0;
                  v1595 = (v1593 - 1);
                  if ((int)v1593 - 1 >= 0)
                  {
                    v1596 = *(_QWORD *)(*a2 + 24);
                    v1597 = v1976;
                    do
                    {
                      v1598 = ldiv(v1597, *(int *)(v1592 + 4 * v1595));
                      v1597 = v1598.quot;
                      v1594 += *(_QWORD *)(v1596 + 8 * v1595--) * v1598.rem;
                    }
                    while (v1595 != -1);
                  }
                  if ((int)v1981 >= 1)
                  {
                    v1599 = 0;
                    v1600 = *(unsigned __int8 *)(v1925 + (int)v1587);
                    v1601 = v1888;
                    do
                    {
                      *(_BYTE *)(v1584 + v1599) = (*((unsigned __int8 *)v1902 + (int)v1594 + v1599) | v1600) != 0;
                      --v1601;
                      ++v1599;
                    }
                    while (v1601 > 1);
                    v101 = *(_QWORD **)a3;
                  }
                  v1584 += v1954;
                  v1976 += v1954;
                }
                while (v1976 < v101[6]);
              }
              break;
            case 2:
              if (v107 == 2)
              {
                v1602 = *v103;
                if (*v103)
                {
                  v1603 = 0;
                  v1604 = 0;
                  v1605 = 0;
                  v1606 = *(_QWORD *)(v102 + 152);
                  v1607 = v242[19];
                  v1608 = v101[19];
                  do
                  {
                    if (v103[1])
                    {
                      v1609 = 0;
                      do
                      {
                        if ((int)v365 >= 1)
                        {
                          v1610 = 0;
                          v1611 = *((unsigned __int8 *)v1607 + v1604);
                          v1612 = v365 + 1;
                          do
                          {
                            *(_BYTE *)(v1608 + v1610) = (*(unsigned __int8 *)(v1606 + v1605 + v1610) | v1611) != 0;
                            --v1612;
                            ++v1610;
                          }
                          while (v1612 > 1);
                          v102 = *a1;
                          v242 = (int **)*a2;
                          v103 = *(int **)*a1;
                        }
                        v1613 = *(_QWORD **)(v102 + 24);
                        v1614 = v1613[1];
                        v1605 += v1614;
                        v1604 += *((_QWORD *)v242[3] + 1);
                        v1608 += (int)v365;
                        ++v1609;
                        v1615 = v103[1];
                      }
                      while (v1609 < v1615);
                      v1602 = *v103;
                      v243 = *v242;
                    }
                    else
                    {
                      v1615 = 0;
                      v1613 = *(_QWORD **)(v102 + 24);
                      v1614 = v1613[1];
                    }
                    v1605 = *v1613 + v1605 - v1615 * v1614;
                    v1604 = *(_QWORD *)v242[3] + v1604 - *((_QWORD *)v242[3] + 1) * v243[1];
                    ++v1603;
                  }
                  while (v1603 < v1602);
                }
              }
              else if (v107 == 1)
              {
                v1054 = *v103;
                if (*v103)
                {
                  v1055 = 0;
                  v1056 = 0;
                  v1057 = 0;
                  v1058 = *(_QWORD *)(v102 + 152);
                  v1059 = v242[19];
                  v1060 = v101[19];
                  do
                  {
                    if ((int)v365 >= 1)
                    {
                      v1061 = 0;
                      v1062 = *((unsigned __int8 *)v1059 + v1056);
                      v1063 = v365 + 1;
                      do
                      {
                        *(_BYTE *)(v1060 + v1061) = (*(unsigned __int8 *)(v1058 + v1057 + v1061) | v1062) != 0;
                        --v1063;
                        ++v1061;
                      }
                      while (v1063 > 1);
                      v102 = *a1;
                      v242 = (int **)*a2;
                      v1054 = **(_DWORD **)*a1;
                    }
                    v1057 += **(_QWORD **)(v102 + 24);
                    v1056 += *(_QWORD *)v242[3];
                    v1060 += (int)v365;
                    ++v1055;
                  }
                  while (v1055 < v1054);
                }
              }
              else if (v101[6])
              {
                v1903 = v242[19];
                v1926 = *(_QWORD *)(v102 + 152);
                v1955 = (int)v365;
                v1977 = 0;
                v1889 = v365 + 1;
                v1616 = v101[19];
                do
                {
                  v1617 = *(_QWORD *)*a1;
                  v1618 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1617) >> 2;
                  v1619 = 0;
                  v1620 = (v1618 - 1);
                  if ((int)v1618 - 1 >= 0)
                  {
                    v1621 = *(_QWORD *)(*a1 + 24);
                    v1622 = v1977;
                    do
                    {
                      v1623 = ldiv(v1622, *(int *)(v1617 + 4 * v1620));
                      v1622 = v1623.quot;
                      v1619 += *(_QWORD *)(v1621 + 8 * v1620--) * v1623.rem;
                    }
                    while (v1620 != -1);
                  }
                  v1624 = *(_QWORD *)*a2;
                  v1625 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1624) >> 2;
                  v1626 = 0;
                  v1627 = (v1625 - 1);
                  if ((int)v1625 - 1 >= 0)
                  {
                    v1628 = *(_QWORD *)(*a2 + 24);
                    v1629 = v1977;
                    do
                    {
                      v1630 = ldiv(v1629, *(int *)(v1624 + 4 * v1627));
                      v1629 = v1630.quot;
                      v1626 += *(_QWORD *)(v1628 + 8 * v1627--) * v1630.rem;
                    }
                    while (v1627 != -1);
                  }
                  if ((int)v1981 >= 1)
                  {
                    v1631 = 0;
                    v1632 = *((unsigned __int8 *)v1903 + (int)v1626);
                    v1633 = v1889;
                    do
                    {
                      *(_BYTE *)(v1616 + v1631) = (*(unsigned __int8 *)(v1926 + (int)v1619 + v1631) | v1632) != 0;
                      --v1633;
                      ++v1631;
                    }
                    while (v1633 > 1);
                    v101 = *(_QWORD **)a3;
                  }
                  v1616 += v1955;
                  v1977 += v1955;
                }
                while (v1977 < v101[6]);
              }
              break;
            case 3:
              if (v107 == 2)
              {
                v1230 = *v103;
                if (*v103)
                {
                  v1231 = 0;
                  v1232 = 0;
                  v1233 = 0;
                  v1234 = *(_QWORD *)(v102 + 152);
                  v1235 = v242[19];
                  v1236 = v101[19];
                  do
                  {
                    if (v103[1])
                    {
                      v1237 = 0;
                      do
                      {
                        if ((int)v365 >= 1)
                        {
                          v1238 = 0;
                          v1239 = v365 + 1;
                          do
                          {
                            *(_BYTE *)(v1236 + v1238) = (*((unsigned __int8 *)v1235 + v1232 + v1238) | *(unsigned __int8 *)(v1234 + v1233 + v1238)) != 0;
                            --v1239;
                            ++v1238;
                          }
                          while (v1239 > 1);
                          v102 = *a1;
                          v242 = (int **)*a2;
                          v103 = *(int **)*a1;
                        }
                        v1240 = *(_QWORD **)(v102 + 24);
                        v1241 = v1240[1];
                        v1233 += v1241;
                        v1232 += *((_QWORD *)v242[3] + 1);
                        v1236 += (int)v365;
                        ++v1237;
                        v1242 = v103[1];
                      }
                      while (v1237 < v1242);
                      v1230 = *v103;
                      v243 = *v242;
                    }
                    else
                    {
                      v1242 = 0;
                      v1240 = *(_QWORD **)(v102 + 24);
                      v1241 = v1240[1];
                    }
                    v1233 = *v1240 + v1233 - v1242 * v1241;
                    v1232 = *(_QWORD *)v242[3] + v1232 - *((_QWORD *)v242[3] + 1) * v243[1];
                    ++v1231;
                  }
                  while (v1231 < v1230);
                }
              }
              else if (v107 == 1)
              {
                v366 = *v103;
                if (*v103)
                {
                  v367 = 0;
                  v368 = 0;
                  v369 = 0;
                  v370 = *(_QWORD *)(v102 + 152);
                  v371 = v242[19];
                  v372 = v101[19];
                  do
                  {
                    if ((int)v365 >= 1)
                    {
                      v373 = 0;
                      v374 = v365 + 1;
                      do
                      {
                        *(_BYTE *)(v372 + v373) = (*((unsigned __int8 *)v371 + v368 + v373) | *(unsigned __int8 *)(v370 + v369 + v373)) != 0;
                        --v374;
                        ++v373;
                      }
                      while (v374 > 1);
                      v102 = *a1;
                      v242 = (int **)*a2;
                      v366 = **(_DWORD **)*a1;
                    }
                    v369 += **(_QWORD **)(v102 + 24);
                    v368 += *(_QWORD *)v242[3];
                    v372 += (int)v365;
                    ++v367;
                  }
                  while (v367 < v366);
                }
              }
              else if (v101[6])
              {
                v1899 = v242[19];
                v1915 = *(_QWORD *)(v102 + 152);
                v1944 = (int)v365;
                v1973 = 0;
                v1883 = v365 + 1;
                v1243 = v101[19];
                do
                {
                  v1244 = *(_QWORD *)*a1;
                  v1245 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v1244) >> 2;
                  v1246 = 0;
                  v1247 = (v1245 - 1);
                  if ((int)v1245 - 1 >= 0)
                  {
                    v1248 = *(_QWORD *)(*a1 + 24);
                    v1249 = v1973;
                    do
                    {
                      v1250 = ldiv(v1249, *(int *)(v1244 + 4 * v1247));
                      v1249 = v1250.quot;
                      v1246 += *(_QWORD *)(v1248 + 8 * v1247--) * v1250.rem;
                    }
                    while (v1247 != -1);
                  }
                  v1251 = *(_QWORD *)*a2;
                  v1252 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v1251) >> 2;
                  v1253 = 0;
                  v1254 = (v1252 - 1);
                  if ((int)v1252 - 1 >= 0)
                  {
                    v1255 = *(_QWORD *)(*a2 + 24);
                    v1256 = v1973;
                    do
                    {
                      v1257 = ldiv(v1256, *(int *)(v1251 + 4 * v1254));
                      v1256 = v1257.quot;
                      v1253 += *(_QWORD *)(v1255 + 8 * v1254--) * v1257.rem;
                    }
                    while (v1254 != -1);
                  }
                  if ((int)v1981 >= 1)
                  {
                    v1258 = 0;
                    v1259 = v1883;
                    do
                    {
                      *(_BYTE *)(v1243 + v1258) = (*((unsigned __int8 *)v1899 + (int)v1253 + v1258) | *(unsigned __int8 *)(v1915 + (int)v1246 + v1258)) != 0;
                      --v1259;
                      ++v1258;
                    }
                    while (v1259 > 1);
                    v101 = *(_QWORD **)a3;
                  }
                  v1243 += v1944;
                  v1973 += v1944;
                }
                while (v1973 < v101[6]);
              }
              break;
            default:
LABEL_416:
              switch(v361)
              {
                case 1uLL:
                  if (v101[6])
                  {
                    v375 = 0;
                    v376 = 0;
                    v377 = 0;
                    v378 = *(_QWORD *)(v102 + 152);
                    v379 = v242[19];
                    v380 = v101[19];
                    do
                    {
                      *(_BYTE *)(v380 + v375) = (*((unsigned __int8 *)v379 + v376) | *(unsigned __int8 *)(v378 + v377)) != 0;
                      v377 += **(_QWORD **)(*a1 + 24);
                      v376 += **(_QWORD **)(*a2 + 24);
                      ++v375;
                    }
                    while (v375 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
                case 2uLL:
                  v685 = *v103;
                  if (*v103)
                  {
                    v686 = 0;
                    v687 = 0;
                    v688 = 0;
                    v689 = 0;
                    v690 = *(_QWORD *)(v102 + 152);
                    v691 = v242[19];
                    v692 = v101[19];
                    do
                    {
                      if (v103[1])
                      {
                        v693 = 0;
                        do
                        {
                          *(_BYTE *)(v692 + v687 + v693) = (*((unsigned __int8 *)v691 + v688) | *(unsigned __int8 *)(v690 + v689)) != 0;
                          v102 = *a1;
                          v694 = *(_QWORD **)(*a1 + 24);
                          v695 = v694[1];
                          v689 += v695;
                          v242 = (int **)*a2;
                          v696 = *(int **)(*a2 + 24);
                          v697 = *((_QWORD *)v696 + 1);
                          v688 += v697;
                          ++v693;
                          v103 = *(int **)*a1;
                          v698 = v103[1];
                        }
                        while (v693 < v698);
                        v685 = *v103;
                        v243 = *v242;
                        v687 += v693;
                      }
                      else
                      {
                        v698 = 0;
                        v694 = *(_QWORD **)(v102 + 24);
                        v695 = v694[1];
                        v696 = v242[3];
                        v697 = *((_QWORD *)v696 + 1);
                      }
                      v689 = *v694 + v689 - v698 * v695;
                      v688 = *(_QWORD *)v696 + v688 - v697 * v243[1];
                      ++v686;
                    }
                    while (v686 < v685);
                  }
                  break;
                case 3uLL:
                  v699 = *v103;
                  if (*v103)
                  {
                    v700 = 0;
                    v701 = 0;
                    v702 = 0;
                    v703 = 0;
                    v704 = *(_QWORD *)(v102 + 152);
                    v705 = v242[19];
                    v706 = v101[19];
                    do
                    {
                      if (v103[1])
                      {
                        v707 = 0;
                        do
                        {
                          if (v103[2])
                          {
                            v708 = 0;
                            do
                            {
                              *(_BYTE *)(v706 + v701 + v708) = (*((unsigned __int8 *)v705 + v702) | *(unsigned __int8 *)(v704 + v703)) != 0;
                              v102 = *a1;
                              v709 = *(_QWORD **)(*a1 + 24);
                              v710 = v709[2];
                              v703 += v710;
                              v242 = (int **)*a2;
                              v711 = *(int **)(*a2 + 24);
                              v712 = *((_QWORD *)v711 + 2);
                              v702 += v712;
                              ++v708;
                              v103 = *(int **)*a1;
                              v713 = v103[2];
                            }
                            while (v708 < v713);
                            v243 = *v242;
                            v701 += v708;
                          }
                          else
                          {
                            v713 = 0;
                            v709 = *(_QWORD **)(v102 + 24);
                            v710 = v709[2];
                            v711 = v242[3];
                            v712 = *((_QWORD *)v711 + 2);
                          }
                          v714 = v709[1];
                          v703 = v714 + v703 - v713 * v710;
                          v702 = *((_QWORD *)v711 + 1) + v702 - v712 * v243[2];
                          ++v707;
                          v715 = v103[1];
                        }
                        while (v707 < v715);
                        v699 = *v103;
                      }
                      else
                      {
                        v715 = 0;
                        v709 = *(_QWORD **)(v102 + 24);
                        v714 = v709[1];
                      }
                      v703 = *v709 + v703 - v715 * v714;
                      v702 = *(_QWORD *)v242[3] + v702 - *((_QWORD *)v242[3] + 1) * v243[1];
                      ++v700;
                    }
                    while (v700 < v699);
                  }
                  break;
                case 4uLL:
                  v716 = *v103;
                  if (*v103)
                  {
                    v717 = 0;
                    v718 = 0;
                    v719 = 0;
                    v720 = 0;
                    v721 = *(_QWORD *)(v102 + 152);
                    v722 = v242[19];
                    v723 = v101[19];
                    do
                    {
                      if (v103[1])
                      {
                        v724 = 0;
                        do
                        {
                          if (v103[2])
                          {
                            v725 = 0;
                            do
                            {
                              if (v103[3])
                              {
                                v726 = 0;
                                do
                                {
                                  *(_BYTE *)(v723 + v718 + v726) = (*((unsigned __int8 *)v722 + v719) | *(unsigned __int8 *)(v721 + v720)) != 0;
                                  v102 = *a1;
                                  v727 = *(_QWORD **)(*a1 + 24);
                                  v728 = v727[3];
                                  v720 += v728;
                                  v242 = (int **)*a2;
                                  v729 = *(int **)(*a2 + 24);
                                  v730 = *((_QWORD *)v729 + 3);
                                  v719 += v730;
                                  ++v726;
                                  v103 = *(int **)*a1;
                                  v731 = v103[3];
                                }
                                while (v726 < v731);
                                v243 = *v242;
                                v718 += v726;
                              }
                              else
                              {
                                v731 = 0;
                                v727 = *(_QWORD **)(v102 + 24);
                                v728 = v727[3];
                                v729 = v242[3];
                                v730 = *((_QWORD *)v729 + 3);
                              }
                              v732 = v727[2];
                              v720 = v732 + v720 - v731 * v728;
                              v719 = *((_QWORD *)v729 + 2) + v719 - v730 * v243[3];
                              ++v725;
                              v733 = v103[2];
                            }
                            while (v725 < v733);
                          }
                          else
                          {
                            v733 = 0;
                            v727 = *(_QWORD **)(v102 + 24);
                            v732 = v727[2];
                          }
                          v720 = v727[1] + v720 - v733 * v732;
                          v719 = *((_QWORD *)v242[3] + 1) + v719 - *((_QWORD *)v242[3] + 2) * v243[2];
                          ++v724;
                          v734 = v103[1];
                        }
                        while (v724 < v734);
                        v716 = *v103;
                      }
                      else
                      {
                        v734 = 0;
                      }
                      v720 = **(_QWORD **)(v102 + 24) + v720 - *(_QWORD *)(*(_QWORD *)(v102 + 24) + 8) * v734;
                      v719 = *(_QWORD *)v242[3] + v719 - *((_QWORD *)v242[3] + 1) * v243[1];
                      ++v717;
                    }
                    while (v717 < v716);
                  }
                  break;
                default:
                  if (v101[6])
                  {
                    v669 = 0;
                    v1969 = v242[19];
                    v1987 = *(_QWORD *)(v102 + 152);
                    v670 = v101[19];
                    do
                    {
                      v671 = *(_QWORD *)*a1;
                      v672 = (unint64_t)(*(_QWORD *)(*a1 + 8) - v671) >> 2;
                      v673 = 0;
                      v674 = (v672 - 1);
                      if ((int)v672 - 1 >= 0)
                      {
                        v675 = *(_QWORD *)(*a1 + 24);
                        v676 = v669;
                        do
                        {
                          v677 = ldiv(v676, *(int *)(v671 + 4 * v674));
                          v676 = v677.quot;
                          v673 += *(_QWORD *)(v675 + 8 * v674--) * v677.rem;
                        }
                        while (v674 != -1);
                      }
                      v678 = *(_QWORD *)*a2;
                      v679 = (unint64_t)(*(_QWORD *)(*a2 + 8) - v678) >> 2;
                      v680 = 0;
                      v681 = (v679 - 1);
                      if ((int)v679 - 1 >= 0)
                      {
                        v682 = *(_QWORD *)(*a2 + 24);
                        v683 = v669;
                        do
                        {
                          v684 = ldiv(v683, *(int *)(v678 + 4 * v681));
                          v683 = v684.quot;
                          v680 += *(_QWORD *)(v682 + 8 * v681--) * v684.rem;
                        }
                        while (v681 != -1);
                      }
                      *(_BYTE *)(v670 + v669++) = (*((unsigned __int8 *)v1969 + (int)v680) | *(unsigned __int8 *)(v1987 + (int)v673)) != 0;
                    }
                    while (v669 < *(_QWORD *)(*(_QWORD *)a3 + 48));
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 4:
      switch(v23)
      {
        case 0:
LABEL_18:
          **(_DWORD **)(*(_QWORD *)a3 + 152) = (**(_DWORD **)(*a2 + 152) | **(_DWORD **)(*a1 + 152)) != 0;
          return;
        case 1:
          v138 = *(_DWORD *)(*a2 + 160);
          if (v138 >= 1)
          {
            v139 = **(_DWORD **)(*a1 + 152);
            v140 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v141 = *(int **)(*a2 + 152);
            v142 = v138 + 1;
            do
            {
              v143 = *v141++;
              *v140++ = (v143 | v139) != 0;
              --v142;
            }
            while (v142 > 1);
          }
          return;
        case 2:
          v144 = *(_DWORD *)(*a1 + 160);
          if (v144 >= 1)
          {
            v145 = **(_DWORD **)(*a2 + 152);
            v146 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v147 = *(int **)(*a1 + 152);
            v148 = v144 + 1;
            do
            {
              v149 = *v147++;
              *v146++ = (v149 | v145) != 0;
              --v148;
            }
            while (v148 > 1);
          }
          return;
        case 3:
          v150 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v150 >= 1)
          {
            v151 = *(_DWORD **)(*(_QWORD *)a3 + 152);
            v152 = *(int **)(*a2 + 152);
            v153 = *(int **)(*a1 + 152);
            v154 = v150 + 1;
            do
            {
              v156 = *v153++;
              v155 = v156;
              v157 = *v152++;
              *v151++ = (v157 | v155) != 0;
              --v154;
            }
            while (v154 > 1);
          }
          return;
        default:
          v129 = *(_QWORD **)a3;
          v130 = (_QWORD *)*a1;
          v131 = *(int **)*a1;
          v132 = (v130[1] - (_QWORD)v131) >> 2;
          v133 = (v132 - 1);
          if ((int)v133 >= -1)
            v134 = -1;
          else
            v134 = v132 - 1;
          v135 = v134 + 1;
          v136 = v132 + 1;
          while (1)
          {
            v137 = v136 - 2;
            if (v136 - 2 < 0)
              break;
            --v136;
            if (*(_QWORD *)(v130[3] + 8 * v137) != *(_QWORD *)(v129[3] + 8 * v137))
              goto LABEL_185;
          }
          v136 = v135;
LABEL_185:
          v249 = (_QWORD *)*a2;
          v250 = *(int **)*a2;
          v251 = (v249[1] - (_QWORD)v250) >> 2;
          v252 = (v251 - 1);
          if ((int)v252 >= -1)
            v253 = -1;
          else
            v253 = v251 - 1;
          v254 = v253 + 1;
          v255 = v251 + 1;
          while (1)
          {
            v256 = v255 - 2;
            if (v255 - 2 < 0)
              break;
            --v255;
            if (*(_QWORD *)(v249[3] + 8 * v256) != *(_QWORD *)(v129[3] + 8 * v256))
              goto LABEL_229;
          }
          v255 = v254;
LABEL_229:
          v281 = v132 + 1;
          while (1)
          {
            v282 = v281 - 2;
            if (v281 - 2 < 0)
              break;
            --v281;
            if (*(_QWORD *)(v130[3] + 8 * v282))
              goto LABEL_264;
          }
          v281 = v135;
LABEL_264:
          v295 = v251 + 1;
          while (1)
          {
            v296 = v295 - 2;
            if (v295 - 2 < 0)
              break;
            --v295;
            if (*(_QWORD *)(v249[3] + 8 * v296))
              goto LABEL_422;
          }
          v295 = v254;
LABEL_422:
          v381 = (uint64_t)(v129[1] - *v129) >> 2;
          if (v136 <= v255)
            v382 = v255;
          else
            v382 = v136;
          if (v136 <= v295)
            v136 = v295;
          if (v281 > v255)
            v255 = v281;
          if (v381 > v255)
          {
            v383 = 1;
          }
          else
          {
            v255 = (uint64_t)(v129[1] - *v129) >> 2;
            v383 = 4;
          }
          if (v381 > v136)
          {
            v384 = 2;
          }
          else
          {
            v136 = v255;
            v384 = v383;
          }
          if (v381 > v382)
          {
            v136 = v382;
            v384 = 3;
          }
          v1964 = v252;
          v1982 = v133;
          if (!v136)
            goto LABEL_452;
          v385 = *(_QWORD *)(v129[3] + 8 * (v136 - 1));
          if (v385 < 0x10)
            goto LABEL_452;
          switch(v384)
          {
            case 1:
              if (v136 == 2)
              {
                v1634 = *v131;
                if (*v131)
                {
                  v1635 = 0;
                  v1636 = 0;
                  v1637 = 0;
                  v1638 = v130[19];
                  v1639 = v249[19];
                  v1640 = v129[19];
                  v1641 = (uint64_t *)v130[3];
                  v1642 = *v1641;
                  v1643 = v1641[1];
                  v1644 = (uint64_t *)v249[3];
                  v1645 = *v1644;
                  v1646 = v1644[1];
                  v1647 = v131[1];
                  v1648 = v1647;
                  do
                  {
                    if (v1648)
                    {
                      v1649 = 0;
                      v1650 = v1639 + 4 * v1636;
                      do
                      {
                        if ((int)v385 >= 1)
                        {
                          v1651 = 0;
                          v1652 = *(_DWORD *)(v1638 + 4 * v1637);
                          v1653 = v385 + 1;
                          do
                          {
                            *(_DWORD *)(v1640 + v1651) = (*(_DWORD *)(v1650 + v1651) | v1652) != 0;
                            --v1653;
                            v1651 += 4;
                          }
                          while (v1653 > 1);
                          v1647 = v131[1];
                        }
                        v1637 += v1643;
                        v1636 += v1646;
                        v1640 += 4 * (int)v385;
                        ++v1649;
                        v1650 += 4 * v1646;
                      }
                      while (v1649 < v1647);
                      v1654 = v1647;
                      v1634 = *v131;
                      v1648 = v1647;
                    }
                    else
                    {
                      v1654 = 0;
                    }
                    v1637 = v1637 + v1642 - v1654 * v1643;
                    v1636 = v1636 + v1645 - v1646 * v250[1];
                    ++v1635;
                  }
                  while (v1635 < v1634);
                }
              }
              else if (v136 == 1)
              {
                v1064 = *v131;
                if (*v131)
                {
                  v1065 = 0;
                  v1066 = 0;
                  v1067 = v130[19];
                  v1068 = v249[19];
                  v1069 = v129[19];
                  v1070 = *(_QWORD *)v130[3];
                  v1071 = 4 * *(_QWORD *)v249[3];
                  do
                  {
                    if ((int)v385 >= 1)
                    {
                      v1072 = 0;
                      v1073 = *(_DWORD *)(v1067 + 4 * v1066);
                      v1074 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1069 + v1072) = (*(_DWORD *)(v1068 + v1072) | v1073) != 0;
                        --v1074;
                        v1072 += 4;
                      }
                      while (v1074 > 1);
                      v1064 = *v131;
                    }
                    v1066 += v1070;
                    ++v1065;
                    v1069 += 4 * (int)v385;
                    v1068 += v1071;
                  }
                  while (v1065 < v1064);
                }
              }
              else
              {
                v1927 = v129[6];
                if (v1927)
                {
                  v1956 = 0;
                  v1858 = v249[19];
                  v1873 = v130[19];
                  v1655 = v129[19];
                  do
                  {
                    v1656 = 0;
                    if ((v133 & 0x80000000) == 0)
                    {
                      v1657 = v130[3];
                      v1658 = v133;
                      v1659 = v1956;
                      do
                      {
                        v1660 = ldiv(v1659, v131[v1658]);
                        v1659 = v1660.quot;
                        v1656 += *(_QWORD *)(v1657 + 8 * v1658--) * v1660.rem;
                      }
                      while (v1658 != -1);
                    }
                    v1661 = v1964;
                    if ((v1964 & 0x80000000) != 0)
                    {
                      LODWORD(v1662) = 0;
                    }
                    else
                    {
                      v1662 = 0;
                      v1663 = v249[3];
                      v1664 = v1956;
                      do
                      {
                        v1665 = ldiv(v1664, v250[v1661]);
                        v1664 = v1665.quot;
                        v1662 += *(_QWORD *)(v1663 + 8 * v1661--) * v1665.rem;
                      }
                      while (v1661 != -1);
                    }
                    v133 = v1982;
                    if ((int)v385 >= 1)
                    {
                      v1666 = 0;
                      v1667 = *(_DWORD *)(v1873 + 4 * (int)v1656);
                      v1668 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1655 + v1666) = (*(_DWORD *)(v1858 + 4 * (int)v1662 + v1666) | v1667) != 0;
                        --v1668;
                        v1666 += 4;
                      }
                      while (v1668 > 1);
                    }
                    v1655 += 4 * (int)v385;
                    v1956 += (int)v385;
                  }
                  while (v1956 < v1927);
                }
              }
              break;
            case 2:
              if (v136 == 2)
              {
                v1669 = *v131;
                if (*v131)
                {
                  v1670 = 0;
                  v1671 = 0;
                  v1672 = 0;
                  v1673 = v130[19];
                  v1674 = v249[19];
                  v1675 = v129[19];
                  v1676 = (uint64_t *)v130[3];
                  v1677 = *v1676;
                  v1678 = v1676[1];
                  v1679 = (uint64_t *)v249[3];
                  v1680 = *v1679;
                  v1681 = v1679[1];
                  v1682 = v131[1];
                  v1683 = v1682;
                  do
                  {
                    if (v1683)
                    {
                      v1684 = 0;
                      v1685 = v1673 + 4 * v1672;
                      do
                      {
                        if ((int)v385 >= 1)
                        {
                          v1686 = 0;
                          v1687 = *(_DWORD *)(v1674 + 4 * v1671);
                          v1688 = v385 + 1;
                          do
                          {
                            *(_DWORD *)(v1675 + v1686) = (*(_DWORD *)(v1685 + v1686) | v1687) != 0;
                            --v1688;
                            v1686 += 4;
                          }
                          while (v1688 > 1);
                          v1682 = v131[1];
                        }
                        v1672 += v1678;
                        v1671 += v1681;
                        v1675 += 4 * (int)v385;
                        ++v1684;
                        v1685 += 4 * v1678;
                      }
                      while (v1684 < v1682);
                      v1689 = v1682;
                      v1669 = *v131;
                      v1683 = v1682;
                    }
                    else
                    {
                      v1689 = 0;
                    }
                    v1672 = v1672 + v1677 - v1689 * v1678;
                    v1671 = v1671 + v1680 - v1681 * v250[1];
                    ++v1670;
                  }
                  while (v1670 < v1669);
                }
              }
              else if (v136 == 1)
              {
                v1075 = *v131;
                if (*v131)
                {
                  v1076 = 0;
                  v1077 = 0;
                  v1078 = v130[19];
                  v1079 = v249[19];
                  v1080 = v129[19];
                  v1081 = *(_QWORD *)v249[3];
                  v1082 = 4 * *(_QWORD *)v130[3];
                  do
                  {
                    if ((int)v385 >= 1)
                    {
                      v1083 = 0;
                      v1084 = *(_DWORD *)(v1079 + 4 * v1077);
                      v1085 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1080 + v1083) = (*(_DWORD *)(v1078 + v1083) | v1084) != 0;
                        --v1085;
                        v1083 += 4;
                      }
                      while (v1085 > 1);
                      v1075 = *v131;
                    }
                    v1077 += v1081;
                    ++v1076;
                    v1080 += 4 * (int)v385;
                    v1078 += v1082;
                  }
                  while (v1076 < v1075);
                }
              }
              else
              {
                v1928 = v129[6];
                if (v1928)
                {
                  v1957 = 0;
                  v1859 = v249[19];
                  v1874 = v130[19];
                  v1690 = v129[19];
                  do
                  {
                    v1691 = 0;
                    if ((v133 & 0x80000000) == 0)
                    {
                      v1692 = v130[3];
                      v1693 = v133;
                      v1694 = v1957;
                      do
                      {
                        v1695 = ldiv(v1694, v131[v1693]);
                        v1694 = v1695.quot;
                        v1691 += *(_QWORD *)(v1692 + 8 * v1693--) * v1695.rem;
                      }
                      while (v1693 != -1);
                    }
                    v1696 = v1964;
                    if ((v1964 & 0x80000000) != 0)
                    {
                      LODWORD(v1697) = 0;
                    }
                    else
                    {
                      v1697 = 0;
                      v1698 = v249[3];
                      v1699 = v1957;
                      do
                      {
                        v1700 = ldiv(v1699, v250[v1696]);
                        v1699 = v1700.quot;
                        v1697 += *(_QWORD *)(v1698 + 8 * v1696--) * v1700.rem;
                      }
                      while (v1696 != -1);
                    }
                    v133 = v1982;
                    if ((int)v385 >= 1)
                    {
                      v1701 = 0;
                      v1702 = *(_DWORD *)(v1859 + 4 * (int)v1697);
                      v1703 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1690 + v1701) = (*(_DWORD *)(v1874 + 4 * (int)v1691 + v1701) | v1702) != 0;
                        --v1703;
                        v1701 += 4;
                      }
                      while (v1703 > 1);
                    }
                    v1690 += 4 * (int)v385;
                    v1957 += (int)v385;
                  }
                  while (v1957 < v1928);
                }
              }
              break;
            case 3:
              if (v136 == 2)
              {
                v1260 = *v131;
                if (*v131)
                {
                  v1261 = 0;
                  v1262 = 0;
                  v1263 = 0;
                  v1264 = v130[19];
                  v1265 = v249[19];
                  v1266 = v129[19];
                  v1267 = (uint64_t *)v130[3];
                  v1268 = *v1267;
                  v1269 = v1267[1];
                  v1270 = (uint64_t *)v249[3];
                  v1271 = *v1270;
                  v1272 = v1270[1];
                  v1273 = v131[1];
                  v1274 = v1273;
                  do
                  {
                    if (v1274)
                    {
                      v1275 = 0;
                      v1276 = v1265 + 4 * v1262;
                      v1277 = v1264 + 4 * v1263;
                      do
                      {
                        if ((int)v385 >= 1)
                        {
                          v1278 = 0;
                          v1279 = v385 + 1;
                          do
                          {
                            *(_DWORD *)(v1266 + v1278) = (*(_DWORD *)(v1276 + v1278) | *(_DWORD *)(v1277 + v1278)) != 0;
                            --v1279;
                            v1278 += 4;
                          }
                          while (v1279 > 1);
                          v1273 = v131[1];
                        }
                        v1263 += v1269;
                        v1262 += v1272;
                        v1266 += 4 * (int)v385;
                        ++v1275;
                        v1276 += 4 * v1272;
                        v1277 += 4 * v1269;
                      }
                      while (v1275 < v1273);
                      v1280 = v1273;
                      v1260 = *v131;
                      v1274 = v1273;
                    }
                    else
                    {
                      v1280 = 0;
                    }
                    v1263 = v1263 + v1268 - v1280 * v1269;
                    v1262 = v1262 + v1271 - v1272 * v250[1];
                    ++v1261;
                  }
                  while (v1261 < v1260);
                }
              }
              else if (v136 == 1)
              {
                v386 = *v131;
                if (*v131)
                {
                  v387 = 0;
                  v388 = v130[19];
                  v389 = v249[19];
                  v390 = v129[19];
                  v391 = 4 * *(_QWORD *)v249[3];
                  v392 = 4 * *(_QWORD *)v130[3];
                  do
                  {
                    if ((int)v385 >= 1)
                    {
                      v393 = 0;
                      v394 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v390 + v393) = (*(_DWORD *)(v389 + v393) | *(_DWORD *)(v388 + v393)) != 0;
                        --v394;
                        v393 += 4;
                      }
                      while (v394 > 1);
                      v386 = *v131;
                    }
                    ++v387;
                    v390 += 4 * (int)v385;
                    v389 += v391;
                    v388 += v392;
                  }
                  while (v387 < v386);
                }
              }
              else
              {
                v1916 = v129[6];
                if (v1916)
                {
                  v1945 = 0;
                  v1853 = v249[19];
                  v1866 = v130[19];
                  v1281 = v129[19];
                  do
                  {
                    v1282 = 0;
                    if ((v133 & 0x80000000) == 0)
                    {
                      v1283 = v130[3];
                      v1284 = v133;
                      v1285 = v1945;
                      do
                      {
                        v1286 = ldiv(v1285, v131[v1284]);
                        v1285 = v1286.quot;
                        v1282 += *(_QWORD *)(v1283 + 8 * v1284--) * v1286.rem;
                      }
                      while (v1284 != -1);
                    }
                    v1287 = v1964;
                    if ((v1964 & 0x80000000) != 0)
                    {
                      LODWORD(v1288) = 0;
                    }
                    else
                    {
                      v1288 = 0;
                      v1289 = v249[3];
                      v1290 = v1945;
                      do
                      {
                        v1291 = ldiv(v1290, v250[v1287]);
                        v1290 = v1291.quot;
                        v1288 += *(_QWORD *)(v1289 + 8 * v1287--) * v1291.rem;
                      }
                      while (v1287 != -1);
                    }
                    v133 = v1982;
                    if ((int)v385 >= 1)
                    {
                      v1292 = 0;
                      v1293 = v385 + 1;
                      do
                      {
                        *(_DWORD *)(v1281 + v1292) = (*(_DWORD *)(v1853 + 4 * (int)v1288 + v1292) | *(_DWORD *)(v1866 + 4 * (int)v1282 + v1292)) != 0;
                        --v1293;
                        v1292 += 4;
                      }
                      while (v1293 > 1);
                    }
                    v1281 += 4 * (int)v385;
                    v1945 += (int)v385;
                  }
                  while (v1945 < v1916);
                }
              }
              break;
            default:
LABEL_452:
              switch(v381)
              {
                case 1uLL:
                  v395 = v129[6];
                  if (v395)
                  {
                    v396 = (_DWORD *)v130[19];
                    v397 = (_DWORD *)v249[19];
                    v398 = (_DWORD *)v129[19];
                    v399 = 4 * *(_QWORD *)v249[3];
                    v400 = 4 * *(_QWORD *)v130[3];
                    do
                    {
                      *v398++ = (*v397 | *v396) != 0;
                      v397 = (_DWORD *)((char *)v397 + v399);
                      v396 = (_DWORD *)((char *)v396 + v400);
                      --v395;
                    }
                    while (v395);
                  }
                  break;
                case 2uLL:
                  v747 = *v131;
                  if (*v131)
                  {
                    v748 = 0;
                    v749 = 0;
                    v750 = 0;
                    v751 = 0;
                    v752 = v130[19];
                    v753 = v249[19];
                    v754 = v129[19];
                    v755 = (uint64_t *)v130[3];
                    v756 = *v755;
                    v757 = v755[1];
                    v758 = (uint64_t *)v249[3];
                    v760 = *v758;
                    v759 = v758[1];
                    v761 = v131[1];
                    do
                    {
                      if (v761)
                      {
                        for (m = 0; m < v761; ++m)
                        {
                          *(_DWORD *)(v754 + 4 * v749 + 4 * m) = (*(_DWORD *)(v753 + 4 * v750) | *(_DWORD *)(v752 + 4 * v751)) != 0;
                          v751 += v757;
                          v750 += v759;
                          v761 = v131[1];
                        }
                        v763 = v761;
                        v747 = *v131;
                        v749 += m;
                      }
                      else
                      {
                        v763 = 0;
                      }
                      v751 = v751 + v756 - v763 * v757;
                      v750 = v750 + v760 - v759 * v250[1];
                      ++v748;
                    }
                    while (v748 < v747);
                  }
                  break;
                case 3uLL:
                  v764 = *v131;
                  if (*v131)
                  {
                    v765 = 0;
                    v766 = 0;
                    v767 = 0;
                    v768 = 0;
                    v769 = v130[19];
                    v770 = v249[19];
                    v771 = v129[19];
                    v772 = (uint64_t *)v130[3];
                    v773 = *v772;
                    v774 = v772[1];
                    v775 = (uint64_t *)v249[3];
                    v776 = *v775;
                    v777 = v775[1];
                    v778 = v131[1];
                    v779 = v778;
                    do
                    {
                      if (v779)
                      {
                        v780 = 0;
                        v781 = v772[2];
                        v782 = v775[2];
                        v783 = v131[2];
                        do
                        {
                          if (v783)
                          {
                            for (n = 0; n < v783; ++n)
                            {
                              *(_DWORD *)(v771 + 4 * v766 + 4 * n) = (*(_DWORD *)(v770 + 4 * v767) | *(_DWORD *)(v769 + 4 * v768)) != 0;
                              v768 += v781;
                              v767 += v782;
                              v783 = v131[2];
                            }
                            v785 = v783;
                            v778 = v131[1];
                            v766 += n;
                          }
                          else
                          {
                            v785 = 0;
                          }
                          v768 = v768 + v774 - v785 * v781;
                          v767 = v767 + v777 - v782 * v250[2];
                          ++v780;
                        }
                        while (v780 < v778);
                        v786 = v778;
                        v764 = *v131;
                        v779 = v778;
                      }
                      else
                      {
                        v786 = 0;
                      }
                      v768 = v768 + v773 - v786 * v774;
                      v767 = v767 + v776 - v777 * v250[1];
                      ++v765;
                    }
                    while (v765 < v764);
                  }
                  break;
                case 4uLL:
                  v787 = *v131;
                  if (*v131)
                  {
                    v788 = 0;
                    v789 = 0;
                    v790 = 0;
                    v791 = 0;
                    v792 = v130[19];
                    v793 = v249[19];
                    v794 = v129[19];
                    v795 = (uint64_t *)v130[3];
                    v796 = *v795;
                    v797 = v795[1];
                    v798 = (uint64_t *)v249[3];
                    v799 = *v798;
                    v800 = v798[1];
                    v801 = v131[1];
                    v802 = v801;
                    do
                    {
                      if (v802)
                      {
                        v803 = 0;
                        v804 = v795[2];
                        v805 = v798[2];
                        v806 = v131[2];
                        v807 = v806;
                        do
                        {
                          if (v807)
                          {
                            v808 = 0;
                            v809 = v795[3];
                            v810 = v798[3];
                            v811 = v131[3];
                            do
                            {
                              if (v811)
                              {
                                for (ii = 0; ii < v811; ++ii)
                                {
                                  *(_DWORD *)(v794 + 4 * v789 + 4 * ii) = (*(_DWORD *)(v793 + 4 * v790) | *(_DWORD *)(v792 + 4 * v791)) != 0;
                                  v791 += v809;
                                  v790 += v810;
                                  v811 = v131[3];
                                }
                                v813 = v811;
                                v806 = v131[2];
                                v789 += ii;
                              }
                              else
                              {
                                v813 = 0;
                              }
                              v791 = v791 + v804 - v813 * v809;
                              v790 = v790 + v805 - v810 * v250[3];
                              ++v808;
                            }
                            while (v808 < v806);
                            v814 = v806;
                            v801 = v131[1];
                            v807 = v806;
                          }
                          else
                          {
                            v814 = 0;
                          }
                          v791 = v791 + v797 - v814 * v804;
                          v790 = v790 + v800 - v805 * v250[2];
                          ++v803;
                        }
                        while (v803 < v801);
                        v815 = v801;
                        v787 = *v131;
                        v802 = v801;
                      }
                      else
                      {
                        v815 = 0;
                      }
                      v791 = v791 + v796 - v815 * v797;
                      v790 = v790 + v799 - v800 * v250[1];
                      ++v788;
                    }
                    while (v788 < v787);
                  }
                  break;
                default:
                  v735 = v129[6];
                  if (v735)
                  {
                    v736 = 0;
                    v1907 = v249[19];
                    v1936 = v130[19];
                    v1893 = v129[19];
                    do
                    {
                      v737 = 0;
                      if ((v133 & 0x80000000) == 0)
                      {
                        v738 = v130[3];
                        v739 = v133;
                        v740 = v736;
                        do
                        {
                          v741 = ldiv(v740, v131[v739]);
                          v740 = v741.quot;
                          v737 += *(_QWORD *)(v738 + 8 * v739--) * v741.rem;
                        }
                        while (v739 != -1);
                      }
                      v742 = v1964;
                      if ((v1964 & 0x80000000) != 0)
                      {
                        LODWORD(v743) = 0;
                      }
                      else
                      {
                        v743 = 0;
                        v744 = v249[3];
                        v745 = v736;
                        do
                        {
                          v746 = ldiv(v745, v250[v742]);
                          v745 = v746.quot;
                          v743 += *(_QWORD *)(v744 + 8 * v742--) * v746.rem;
                        }
                        while (v742 != -1);
                      }
                      *(_DWORD *)(v1893 + 4 * v736++) = (*(_DWORD *)(v1907 + 4 * (int)v743) | *(_DWORD *)(v1936 + 4 * (int)v737)) != 0;
                      v133 = v1982;
                    }
                    while (v736 != v735);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 5:
      switch(v24)
      {
        case 0:
          **(_QWORD **)(*(_QWORD *)a3 + 152) = (**(_QWORD **)(*a2 + 152) | **(_QWORD **)(*a1 + 152)) != 0;
          return;
        case 1:
          v167 = *(_DWORD *)(*a2 + 160);
          if (v167 >= 1)
          {
            v168 = **(_QWORD **)(*a1 + 152);
            v169 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v170 = *(uint64_t **)(*a2 + 152);
            v171 = v167 + 1;
            do
            {
              v172 = *v170++;
              *v169++ = (v172 | v168) != 0;
              --v171;
            }
            while (v171 > 1);
          }
          return;
        case 2:
          v173 = *(_DWORD *)(*a1 + 160);
          if (v173 >= 1)
          {
            v174 = **(_QWORD **)(*a2 + 152);
            v175 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v176 = *(uint64_t **)(*a1 + 152);
            v177 = v173 + 1;
            do
            {
              v178 = *v176++;
              *v175++ = (v178 | v174) != 0;
              --v177;
            }
            while (v177 > 1);
          }
          return;
        case 3:
          v179 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v179 >= 1)
          {
            v180 = *(_QWORD **)(*(_QWORD *)a3 + 152);
            v181 = *(uint64_t **)(*a2 + 152);
            v182 = *(uint64_t **)(*a1 + 152);
            v183 = v179 + 1;
            do
            {
              v185 = *v182++;
              v184 = v185;
              v186 = *v181++;
              *v180++ = (v186 | v184) != 0;
              --v183;
            }
            while (v183 > 1);
          }
          return;
        default:
          v158 = *(_QWORD **)a3;
          v159 = (_QWORD *)*a1;
          v160 = *(int **)*a1;
          v161 = (v159[1] - (_QWORD)v160) >> 2;
          v162 = (v161 - 1);
          if ((int)v162 >= -1)
            v163 = -1;
          else
            v163 = v161 - 1;
          v164 = v163 + 1;
          v165 = v161 + 1;
          while (1)
          {
            v166 = v165 - 2;
            if (v165 - 2 < 0)
              break;
            --v165;
            if (*(_QWORD *)(v159[3] + 8 * v166) != *(_QWORD *)(v158[3] + 8 * v166))
              goto LABEL_193;
          }
          v165 = v164;
LABEL_193:
          v257 = (_QWORD *)*a2;
          v258 = *(int **)*a2;
          v259 = (v257[1] - (_QWORD)v258) >> 2;
          v260 = (v259 - 1);
          if ((int)v260 >= -1)
            v261 = -1;
          else
            v261 = v259 - 1;
          v262 = v261 + 1;
          v263 = v259 + 1;
          while (1)
          {
            v264 = v263 - 2;
            if (v263 - 2 < 0)
              break;
            --v263;
            if (*(_QWORD *)(v257[3] + 8 * v264) != *(_QWORD *)(v158[3] + 8 * v264))
              goto LABEL_234;
          }
          v263 = v262;
LABEL_234:
          v283 = v161 + 1;
          while (1)
          {
            v284 = v283 - 2;
            if (v283 - 2 < 0)
              break;
            --v283;
            if (*(_QWORD *)(v159[3] + 8 * v284))
              goto LABEL_269;
          }
          v283 = v164;
LABEL_269:
          v297 = v259 + 1;
          while (1)
          {
            v298 = v297 - 2;
            if (v297 - 2 < 0)
              break;
            --v297;
            if (*(_QWORD *)(v257[3] + 8 * v298))
              goto LABEL_458;
          }
          v297 = v262;
LABEL_458:
          v401 = (uint64_t)(v158[1] - *v158) >> 2;
          if (v165 <= v263)
            v402 = v263;
          else
            v402 = v165;
          if (v165 <= v297)
            v165 = v297;
          if (v283 > v263)
            v263 = v283;
          if (v401 > v263)
          {
            v403 = 1;
          }
          else
          {
            v263 = (uint64_t)(v158[1] - *v158) >> 2;
            v403 = 4;
          }
          if (v401 > v165)
          {
            v404 = 2;
          }
          else
          {
            v165 = v263;
            v404 = v403;
          }
          if (v401 > v402)
          {
            v165 = v402;
            v404 = 3;
          }
          v1965 = v260;
          v1983 = v162;
          if (!v165)
            goto LABEL_487;
          v405 = *(_QWORD *)(v158[3] + 8 * (v165 - 1));
          if (v405 < 0x10)
            goto LABEL_487;
          switch(v404)
          {
            case 1:
              if (v165 == 2)
              {
                v1704 = *v160;
                if ((_DWORD)v1704)
                {
                  v1705 = 0;
                  v1706 = 0;
                  v1707 = 0;
                  v1708 = v159[19];
                  v1709 = v257[19];
                  v1710 = v158[19];
                  v1711 = v160[1];
                  v1712 = (uint64_t *)v159[3];
                  v1713 = *v1712;
                  v1714 = v1712[1];
                  v1715 = (uint64_t *)v257[3];
                  v1716 = *v1715;
                  v1717 = v1715[1];
                  if (v1711 <= 1)
                    v1718 = 1;
                  else
                    v1718 = v160[1];
                  v1719 = v1713 - v1714 * v1711;
                  v1720 = v1716 - v1717 * v258[1];
                  do
                  {
                    if ((_DWORD)v1711)
                    {
                      v1721 = 0;
                      v1722 = v1709 + 8 * v1706;
                      do
                      {
                        if ((int)v405 >= 1)
                        {
                          v1723 = 0;
                          v1724 = *(_QWORD *)(v1708 + 8 * v1707);
                          v1725 = v405 + 1;
                          do
                          {
                            *(_QWORD *)(v1710 + v1723) = (*(_QWORD *)(v1722 + v1723) | v1724) != 0;
                            --v1725;
                            v1723 += 8;
                          }
                          while (v1725 > 1);
                        }
                        v1707 += v1714;
                        v1706 += v1717;
                        v1710 += 8 * (int)v405;
                        ++v1721;
                        v1722 += 8 * v1717;
                      }
                      while (v1721 != v1718);
                    }
                    v1707 += v1719;
                    v1706 += v1720;
                    ++v1705;
                  }
                  while (v1705 != v1704);
                }
              }
              else if (v165 == 1)
              {
                v1086 = *v160;
                if ((_DWORD)v1086)
                {
                  v1087 = 0;
                  v1088 = 0;
                  v1089 = v159[19];
                  v1090 = v257[19];
                  v1091 = v158[19];
                  v1092 = *(_QWORD *)v159[3];
                  v1093 = 8 * *(_QWORD *)v257[3];
                  do
                  {
                    if ((int)v405 >= 1)
                    {
                      v1094 = 0;
                      v1095 = *(_QWORD *)(v1089 + 8 * v1088);
                      v1096 = v405 + 1;
                      do
                      {
                        *(_QWORD *)(v1091 + v1094) = (*(_QWORD *)(v1090 + v1094) | v1095) != 0;
                        --v1096;
                        v1094 += 8;
                      }
                      while (v1096 > 1);
                    }
                    v1088 += v1092;
                    ++v1087;
                    v1091 += 8 * (int)v405;
                    v1090 += v1093;
                  }
                  while (v1087 != v1086);
                }
              }
              else
              {
                v1929 = v158[6];
                if (v1929)
                {
                  v1958 = 0;
                  v1860 = v257[19];
                  v1875 = v159[19];
                  v1726 = v158[19];
                  do
                  {
                    v1727 = 0;
                    if ((v162 & 0x80000000) == 0)
                    {
                      v1728 = v159[3];
                      v1729 = v162;
                      v1730 = v1958;
                      do
                      {
                        v1731 = ldiv(v1730, v160[v1729]);
                        v1730 = v1731.quot;
                        v1727 += *(_QWORD *)(v1728 + 8 * v1729--) * v1731.rem;
                      }
                      while (v1729 != -1);
                    }
                    v1732 = v1965;
                    if ((v1965 & 0x80000000) != 0)
                    {
                      LODWORD(v1733) = 0;
                    }
                    else
                    {
                      v1733 = 0;
                      v1734 = v257[3];
                      v1735 = v1958;
                      do
                      {
                        v1736 = ldiv(v1735, v258[v1732]);
                        v1735 = v1736.quot;
                        v1733 += *(_QWORD *)(v1734 + 8 * v1732--) * v1736.rem;
                      }
                      while (v1732 != -1);
                    }
                    v162 = v1983;
                    if ((int)v405 >= 1)
                    {
                      v1737 = 0;
                      v1738 = *(_QWORD *)(v1875 + 8 * (int)v1727);
                      v1739 = v405 + 1;
                      do
                      {
                        *(_QWORD *)(v1726 + v1737) = (*(_QWORD *)(v1860 + 8 * (int)v1733 + v1737) | v1738) != 0;
                        --v1739;
                        v1737 += 8;
                      }
                      while (v1739 > 1);
                    }
                    v1726 += 8 * (int)v405;
                    v1958 += (int)v405;
                  }
                  while (v1958 < v1929);
                }
              }
              break;
            case 2:
              if (v165 == 2)
              {
                v1740 = *v160;
                if ((_DWORD)v1740)
                {
                  v1741 = 0;
                  v1742 = 0;
                  v1743 = 0;
                  v1744 = v159[19];
                  v1745 = v257[19];
                  v1746 = v158[19];
                  v1747 = v160[1];
                  v1748 = (uint64_t *)v159[3];
                  v1749 = *v1748;
                  v1750 = v1748[1];
                  v1751 = (uint64_t *)v257[3];
                  v1752 = *v1751;
                  v1753 = v1751[1];
                  if (v1747 <= 1)
                    v1754 = 1;
                  else
                    v1754 = v160[1];
                  v1755 = v1749 - v1750 * v1747;
                  v1756 = v1752 - v1753 * v258[1];
                  do
                  {
                    if ((_DWORD)v1747)
                    {
                      v1757 = 0;
                      v1758 = v1744 + 8 * v1743;
                      do
                      {
                        if ((int)v405 >= 1)
                        {
                          v1759 = 0;
                          v1760 = *(_QWORD *)(v1745 + 8 * v1742);
                          v1761 = v405 + 1;
                          do
                          {
                            *(_QWORD *)(v1746 + v1759) = (*(_QWORD *)(v1758 + v1759) | v1760) != 0;
                            --v1761;
                            v1759 += 8;
                          }
                          while (v1761 > 1);
                        }
                        v1743 += v1750;
                        v1742 += v1753;
                        v1746 += 8 * (int)v405;
                        ++v1757;
                        v1758 += 8 * v1750;
                      }
                      while (v1757 != v1754);
                    }
                    v1743 += v1755;
                    v1742 += v1756;
                    ++v1741;
                  }
                  while (v1741 != v1740);
                }
              }
              else if (v165 == 1)
              {
                v1097 = *v160;
                if ((_DWORD)v1097)
                {
                  v1098 = 0;
                  v1099 = 0;
                  v1100 = v159[19];
                  v1101 = v257[19];
                  v1102 = v158[19];
                  v1103 = *(_QWORD *)v257[3];
                  v1104 = 8 * *(_QWORD *)v159[3];
                  do
                  {
                    if ((int)v405 >= 1)
                    {
                      v1105 = 0;
                      v1106 = *(_QWORD *)(v1101 + 8 * v1099);
                      v1107 = v405 + 1;
                      do
                      {
                        *(_QWORD *)(v1102 + v1105) = (*(_QWORD *)(v1100 + v1105) | v1106) != 0;
                        --v1107;
                        v1105 += 8;
                      }
                      while (v1107 > 1);
                    }
                    v1099 += v1103;
                    ++v1098;
                    v1102 += 8 * (int)v405;
                    v1100 += v1104;
                  }
                  while (v1098 != v1097);
                }
              }
              else
              {
                v1930 = v158[6];
                if (v1930)
                {
                  v1959 = 0;
                  v1861 = v257[19];
                  v1876 = v159[19];
                  v1762 = v158[19];
                  do
                  {
                    v1763 = 0;
                    if ((v162 & 0x80000000) == 0)
                    {
                      v1764 = v159[3];
                      v1765 = v162;
                      v1766 = v1959;
                      do
                      {
                        v1767 = ldiv(v1766, v160[v1765]);
                        v1766 = v1767.quot;
                        v1763 += *(_QWORD *)(v1764 + 8 * v1765--) * v1767.rem;
                      }
                      while (v1765 != -1);
                    }
                    v1768 = v1965;
                    if ((v1965 & 0x80000000) != 0)
                    {
                      LODWORD(v1769) = 0;
                    }
                    else
                    {
                      v1769 = 0;
                      v1770 = v257[3];
                      v1771 = v1959;
                      do
                      {
                        v1772 = ldiv(v1771, v258[v1768]);
                        v1771 = v1772.quot;
                        v1769 += *(_QWORD *)(v1770 + 8 * v1768--) * v1772.rem;
                      }
                      while (v1768 != -1);
                    }
                    v162 = v1983;
                    if ((int)v405 >= 1)
                    {
                      v1773 = 0;
                      v1774 = *(_QWORD *)(v1861 + 8 * (int)v1769);
                      v1775 = v405 + 1;
                      do
                      {
                        *(_QWORD *)(v1762 + v1773) = (*(_QWORD *)(v1876 + 8 * (int)v1763 + v1773) | v1774) != 0;
                        --v1775;
                        v1773 += 8;
                      }
                      while (v1775 > 1);
                    }
                    v1762 += 8 * (int)v405;
                    v1959 += (int)v405;
                  }
                  while (v1959 < v1930);
                }
              }
              break;
            case 3:
              if (v165 == 2)
              {
                v1294 = *v160;
                if ((_DWORD)v1294)
                {
                  v1295 = 0;
                  v1296 = 0;
                  v1297 = 0;
                  v1298 = v159[19];
                  v1299 = v257[19];
                  v1300 = v158[19];
                  v1301 = v160[1];
                  v1302 = (uint64_t *)v159[3];
                  v1303 = *v1302;
                  v1304 = v1302[1];
                  v1305 = (uint64_t *)v257[3];
                  v1306 = *v1305;
                  v1307 = v1305[1];
                  if (v1301 <= 1)
                    v1308 = 1;
                  else
                    v1308 = v160[1];
                  v1309 = v1303 - v1304 * v1301;
                  v1310 = v1306 - v1307 * v258[1];
                  do
                  {
                    if ((_DWORD)v1301)
                    {
                      v1311 = 0;
                      v1312 = v1299 + 8 * v1296;
                      v1313 = v1298 + 8 * v1297;
                      do
                      {
                        if ((int)v405 >= 1)
                        {
                          v1314 = 0;
                          v1315 = v405 + 1;
                          do
                          {
                            *(_QWORD *)(v1300 + v1314) = (*(_QWORD *)(v1312 + v1314) | *(_QWORD *)(v1313 + v1314)) != 0;
                            --v1315;
                            v1314 += 8;
                          }
                          while (v1315 > 1);
                        }
                        v1297 += v1304;
                        v1296 += v1307;
                        v1300 += 8 * (int)v405;
                        ++v1311;
                        v1312 += 8 * v1307;
                        v1313 += 8 * v1304;
                      }
                      while (v1311 != v1308);
                    }
                    v1297 += v1309;
                    v1296 += v1310;
                    ++v1295;
                  }
                  while (v1295 != v1294);
                }
              }
              else if (v165 == 1)
              {
                v406 = *v160;
                if ((_DWORD)v406)
                {
                  v407 = 0;
                  v408 = v159[19];
                  v409 = v257[19];
                  v410 = v158[19];
                  v411 = 8 * *(_QWORD *)v257[3];
                  v412 = 8 * *(_QWORD *)v159[3];
                  do
                  {
                    if ((int)v405 >= 1)
                    {
                      v413 = 0;
                      v414 = v405 + 1;
                      do
                      {
                        *(_QWORD *)(v410 + v413) = (*(_QWORD *)(v409 + v413) | *(_QWORD *)(v408 + v413)) != 0;
                        --v414;
                        v413 += 8;
                      }
                      while (v414 > 1);
                    }
                    ++v407;
                    v410 += 8 * (int)v405;
                    v409 += v411;
                    v408 += v412;
                  }
                  while (v407 != v406);
                }
              }
              else
              {
                v1917 = v158[6];
                if (v1917)
                {
                  v1946 = 0;
                  v1854 = v257[19];
                  v1867 = v159[19];
                  v1316 = v158[19];
                  do
                  {
                    v1317 = 0;
                    if ((v162 & 0x80000000) == 0)
                    {
                      v1318 = v159[3];
                      v1319 = v162;
                      v1320 = v1946;
                      do
                      {
                        v1321 = ldiv(v1320, v160[v1319]);
                        v1320 = v1321.quot;
                        v1317 += *(_QWORD *)(v1318 + 8 * v1319--) * v1321.rem;
                      }
                      while (v1319 != -1);
                    }
                    v1322 = v1965;
                    if ((v1965 & 0x80000000) != 0)
                    {
                      LODWORD(v1323) = 0;
                    }
                    else
                    {
                      v1323 = 0;
                      v1324 = v257[3];
                      v1325 = v1946;
                      do
                      {
                        v1326 = ldiv(v1325, v258[v1322]);
                        v1325 = v1326.quot;
                        v1323 += *(_QWORD *)(v1324 + 8 * v1322--) * v1326.rem;
                      }
                      while (v1322 != -1);
                    }
                    v162 = v1983;
                    if ((int)v405 >= 1)
                    {
                      v1327 = 0;
                      v1328 = v405 + 1;
                      do
                      {
                        *(_QWORD *)(v1316 + v1327) = (*(_QWORD *)(v1854 + 8 * (int)v1323 + v1327) | *(_QWORD *)(v1867 + 8 * (int)v1317 + v1327)) != 0;
                        --v1328;
                        v1327 += 8;
                      }
                      while (v1328 > 1);
                    }
                    v1316 += 8 * (int)v405;
                    v1946 += (int)v405;
                  }
                  while (v1946 < v1917);
                }
              }
              break;
            default:
LABEL_487:
              switch(v401)
              {
                case 1uLL:
                  v415 = v158[6];
                  if (v415)
                  {
                    v416 = (_QWORD *)v159[19];
                    v417 = (_QWORD *)v257[19];
                    v418 = (_QWORD *)v158[19];
                    v419 = 8 * *(_QWORD *)v257[3];
                    v420 = 8 * *(_QWORD *)v159[3];
                    do
                    {
                      *v418++ = (*v417 | *v416) != 0;
                      v417 = (_QWORD *)((char *)v417 + v419);
                      v416 = (_QWORD *)((char *)v416 + v420);
                      --v415;
                    }
                    while (v415);
                  }
                  break;
                case 2uLL:
                  v828 = *v160;
                  if ((_DWORD)v828)
                  {
                    v829 = 0;
                    v830 = 0;
                    v831 = 0;
                    v832 = 0;
                    v833 = v159[19];
                    v834 = v257[19];
                    v835 = v158[19];
                    v836 = v160[1];
                    v837 = (uint64_t *)v159[3];
                    v838 = *v837;
                    v839 = v837[1];
                    v840 = (uint64_t *)v257[3];
                    v841 = *v840;
                    v842 = v840[1];
                    v843 = v841 - v842 * v258[1];
                    if (v836 <= 1)
                      v844 = 1;
                    else
                      v844 = v160[1];
                    v845 = v838 - v839 * v836;
                    do
                    {
                      if ((_DWORD)v836)
                      {
                        v846 = v830 + v844;
                        v847 = (_QWORD *)(v835 + 8 * v830);
                        v848 = v844;
                        do
                        {
                          *v847++ = (*(_QWORD *)(v834 + 8 * v831) | *(_QWORD *)(v833 + 8 * v832)) != 0;
                          v832 += v839;
                          v831 += v842;
                          --v848;
                        }
                        while (v848);
                        v830 = v846;
                      }
                      v832 += v845;
                      v831 += v843;
                      ++v829;
                    }
                    while (v829 != v828);
                  }
                  break;
                case 3uLL:
                  v849 = *v160;
                  if ((_DWORD)v849)
                  {
                    v850 = 0;
                    v851 = 0;
                    v852 = 0;
                    v853 = 0;
                    v854 = v159[19];
                    v855 = v257[19];
                    v856 = v158[19];
                    v857 = v160[1];
                    v858 = (_QWORD *)v159[3];
                    v859 = v858[1];
                    v860 = (_QWORD *)v257[3];
                    v861 = v860[1];
                    v862 = *v860 - v861 * v258[1];
                    if (v857 <= 1)
                      v863 = 1;
                    else
                      v863 = v160[1];
                    v864 = *v858 - v859 * v857;
                    do
                    {
                      if ((_DWORD)v857)
                      {
                        v865 = 0;
                        v866 = v160[2];
                        v867 = v858[2];
                        v868 = v860[2];
                        if (v866 <= 1)
                          v869 = 1;
                        else
                          v869 = v160[2];
                        v870 = v861 - v868 * v258[2];
                        do
                        {
                          v871 = v869;
                          if ((_DWORD)v866)
                          {
                            do
                            {
                              *(_QWORD *)(v856 + 8 * v851++) = (*(_QWORD *)(v855 + 8 * v852) | *(_QWORD *)(v854 + 8 * v853)) != 0;
                              v853 += v867;
                              v852 += v868;
                              --v871;
                            }
                            while (v871);
                          }
                          v853 += v859 - v867 * v866;
                          v852 += v870;
                          ++v865;
                        }
                        while (v865 != v863);
                      }
                      v853 += v864;
                      v852 += v862;
                      ++v850;
                    }
                    while (v850 != v849);
                  }
                  break;
                case 4uLL:
                  v1988 = *v160;
                  if ((_DWORD)v1988)
                  {
                    v872 = 0;
                    v873 = 0;
                    v874 = 0;
                    v875 = 0;
                    v876 = v159[19];
                    v877 = v257[19];
                    v878 = v158[19];
                    v879 = v160[1];
                    v880 = (_QWORD *)v159[3];
                    v881 = (_QWORD *)v257[3];
                    v1880 = v881[1];
                    v1895 = v880[1];
                    v1938 = *v881 - v1880 * v258[1];
                    v1970 = v160[1];
                    if (v879 <= 1)
                      v882 = 1;
                    else
                      v882 = v160[1];
                    v1909 = *v880 - v880[1] * v879;
                    do
                    {
                      if (v1970)
                      {
                        v883 = 0;
                        v884 = v160[2];
                        v885 = v880[2];
                        v886 = v881[2];
                        if (v884 <= 1)
                          v887 = 1;
                        else
                          v887 = v160[2];
                        v888 = v1880 - v886 * v258[2];
                        do
                        {
                          if ((_DWORD)v884)
                          {
                            v889 = 0;
                            v890 = v160[3];
                            v891 = v880[3];
                            v892 = v881[3];
                            if (v890 <= 1)
                              v893 = 1;
                            else
                              v893 = v160[3];
                            v894 = v886 - v892 * v258[3];
                            do
                            {
                              v895 = v893;
                              if ((_DWORD)v890)
                              {
                                do
                                {
                                  *(_QWORD *)(v878 + 8 * v873++) = (*(_QWORD *)(v877 + 8 * v874) | *(_QWORD *)(v876 + 8 * v875)) != 0;
                                  v875 += v891;
                                  v874 += v892;
                                  --v895;
                                }
                                while (v895);
                              }
                              v875 += v885 - v891 * v890;
                              v874 += v894;
                              ++v889;
                            }
                            while (v889 != v887);
                          }
                          v875 += v1895 - v885 * v884;
                          v874 += v888;
                          ++v883;
                        }
                        while (v883 != v882);
                      }
                      v875 += v1909;
                      v874 += v1938;
                      ++v872;
                    }
                    while (v872 != v1988);
                  }
                  break;
                default:
                  v816 = v158[6];
                  if (v816)
                  {
                    v817 = 0;
                    v1908 = v257[19];
                    v1937 = v159[19];
                    v1894 = v158[19];
                    do
                    {
                      v818 = 0;
                      if ((v162 & 0x80000000) == 0)
                      {
                        v819 = v159[3];
                        v820 = v162;
                        v821 = v817;
                        do
                        {
                          v822 = ldiv(v821, v160[v820]);
                          v821 = v822.quot;
                          v818 += *(_QWORD *)(v819 + 8 * v820--) * v822.rem;
                        }
                        while (v820 != -1);
                      }
                      v823 = v1965;
                      if ((v1965 & 0x80000000) != 0)
                      {
                        LODWORD(v824) = 0;
                      }
                      else
                      {
                        v824 = 0;
                        v825 = v257[3];
                        v826 = v817;
                        do
                        {
                          v827 = ldiv(v826, v258[v823]);
                          v826 = v827.quot;
                          v824 += *(_QWORD *)(v825 + 8 * v823--) * v827.rem;
                        }
                        while (v823 != -1);
                      }
                      *(_QWORD *)(v1894 + 8 * v817++) = (*(_QWORD *)(v1908 + 8 * (int)v824) | *(_QWORD *)(v1937 + 8 * (int)v818)) != 0;
                      v162 = v1983;
                    }
                    while (v817 != v816);
                  }
                  break;
              }
              break;
          }
          break;
      }
      return;
    case 6:
      switch(v25)
      {
        case 0:
          v26 = **(float **)(*a1 + 152) != 0.0;
          if (**(float **)(*a2 + 152) != 0.0)
            v26 = 1;
          **(float **)(*(_QWORD *)a3 + 152) = (float)v26;
          return;
        case 1:
          v196 = *(_DWORD *)(*a2 + 160);
          if (v196 >= 1)
          {
            v197 = *(float **)(*(_QWORD *)a3 + 152);
            v198 = *(float **)(*a2 + 152);
            v199 = **(float **)(*a1 + 152);
            v200 = v196 + 1;
            do
            {
              v201 = v199 != 0.0;
              v202 = *v198++;
              if (v202 != 0.0)
                v201 = 1;
              *v197++ = (float)v201;
              --v200;
            }
            while (v200 > 1);
          }
          return;
        case 2:
          v203 = *(_DWORD *)(*a1 + 160);
          if (v203 >= 1)
          {
            v204 = *(float **)(*(_QWORD *)a3 + 152);
            v205 = *(float **)(*a1 + 152);
            v206 = **(float **)(*a2 + 152);
            v207 = v203 + 1;
            do
            {
              v208 = v206 != 0.0;
              v209 = *v205++;
              if (v209 != 0.0)
                v208 = 1;
              *v204++ = (float)v208;
              --v207;
            }
            while (v207 > 1);
          }
          return;
        case 3:
          v210 = *(_DWORD *)(*(_QWORD *)a3 + 48);
          if (v210 >= 1)
          {
            v211 = *(float **)(*(_QWORD *)a3 + 152);
            v212 = *(float **)(*a2 + 152);
            v213 = *(float **)(*a1 + 152);
            v214 = v210 + 1;
            do
            {
              v215 = *v213++;
              v216 = v215;
              v217 = *v212++;
              v218 = v216 != 0.0;
              if (v217 != 0.0)
                v218 = 1;
              *v211++ = (float)v218;
              --v214;
            }
            while (v214 > 1);
          }
          return;
        default:
          v187 = *(_QWORD **)a3;
          v188 = (_QWORD *)*a1;
          v189 = *(int **)*a1;
          v190 = (v188[1] - (_QWORD)v189) >> 2;
          v191 = (v190 - 1);
          if ((int)v191 >= -1)
            v192 = -1;
          else
            v192 = v190 - 1;
          v193 = v192 + 1;
          v194 = v190 + 1;
          while (1)
          {
            v195 = v194 - 2;
            if (v194 - 2 < 0)
              break;
            --v194;
            if (*(_QWORD *)(v188[3] + 8 * v195) != *(_QWORD *)(v187[3] + 8 * v195))
              goto LABEL_201;
          }
          v194 = v193;
LABEL_201:
          v265 = (_QWORD *)*a2;
          v266 = *(int **)*a2;
          v267 = (v265[1] - (_QWORD)v266) >> 2;
          v268 = (v267 - 1);
          if ((int)v268 >= -1)
            v269 = -1;
          else
            v269 = v267 - 1;
          v270 = v269 + 1;
          v271 = v267 + 1;
          while (1)
          {
            v272 = v271 - 2;
            if (v271 - 2 < 0)
              break;
            --v271;
            if (*(_QWORD *)(v265[3] + 8 * v272) != *(_QWORD *)(v187[3] + 8 * v272))
              goto LABEL_239;
          }
          v271 = v270;
LABEL_239:
          v285 = v190 + 1;
          while (1)
          {
            v286 = v285 - 2;
            if (v285 - 2 < 0)
              break;
            --v285;
            if (*(_QWORD *)(v188[3] + 8 * v286))
              goto LABEL_274;
          }
          v285 = v193;
LABEL_274:
          v299 = v267 + 1;
          while (1)
          {
            v300 = v299 - 2;
            if (v299 - 2 < 0)
              break;
            --v299;
            if (*(_QWORD *)(v265[3] + 8 * v300))
              goto LABEL_493;
          }
          v299 = v270;
LABEL_493:
          v421 = (uint64_t)(v187[1] - *v187) >> 2;
          if (v194 <= v271)
            v422 = v271;
          else
            v422 = v194;
          if (v194 <= v299)
            v194 = v299;
          if (v285 > v271)
            v271 = v285;
          if (v421 > v271)
          {
            v423 = 1;
          }
          else
          {
            v271 = (uint64_t)(v187[1] - *v187) >> 2;
            v423 = 4;
          }
          if (v421 > v194)
          {
            v424 = 2;
          }
          else
          {
            v194 = v271;
            v424 = v423;
          }
          if (v421 > v422)
          {
            v194 = v422;
            v424 = 3;
          }
          v1966 = v268;
          v1984 = v191;
          if (!v194)
            goto LABEL_524;
          v425 = *(_QWORD *)(v187[3] + 8 * (v194 - 1));
          if (v425 < 0x10)
            goto LABEL_524;
          switch(v424)
          {
            case 1:
              if (v194 == 2)
              {
                v1776 = *v189;
                if ((_DWORD)v1776)
                {
                  v1777 = 0;
                  v1778 = 0;
                  v1779 = 0;
                  v1780 = v188[19];
                  v1781 = v265[19];
                  v1782 = v187[19];
                  v1783 = v189[1];
                  v1784 = (uint64_t *)v188[3];
                  v1785 = *v1784;
                  v1786 = v1784[1];
                  v1787 = (uint64_t *)v265[3];
                  v1788 = *v1787;
                  v1789 = v1787[1];
                  if (v1783 <= 1)
                    v1790 = 1;
                  else
                    v1790 = v189[1];
                  v1791 = v1785 - v1786 * v1783;
                  v1792 = v1788 - v1789 * v266[1];
                  do
                  {
                    if ((_DWORD)v1783)
                    {
                      v1793 = 0;
                      v1794 = v1781 + 4 * v1778;
                      do
                      {
                        if ((int)v425 >= 1)
                        {
                          v1795 = 0;
                          v1796 = *(float *)(v1780 + 4 * v1779);
                          v1797 = v425 + 1;
                          do
                          {
                            v1798 = v1796 != 0.0;
                            if (*(float *)(v1794 + v1795) != 0.0)
                              v1798 = 1;
                            *(float *)(v1782 + v1795) = (float)v1798;
                            --v1797;
                            v1795 += 4;
                          }
                          while (v1797 > 1);
                        }
                        v1779 += v1786;
                        v1778 += v1789;
                        v1782 += 4 * (int)v425;
                        ++v1793;
                        v1794 += 4 * v1789;
                      }
                      while (v1793 != v1790);
                    }
                    v1779 += v1791;
                    v1778 += v1792;
                    ++v1777;
                  }
                  while (v1777 != v1776);
                }
              }
              else if (v194 == 1)
              {
                v1108 = *v189;
                if ((_DWORD)v1108)
                {
                  v1109 = 0;
                  v1110 = 0;
                  v1111 = v188[19];
                  v1112 = v265[19];
                  v1113 = v187[19];
                  v1114 = *(_QWORD *)v188[3];
                  v1115 = 4 * *(_QWORD *)v265[3];
                  do
                  {
                    if ((int)v425 >= 1)
                    {
                      v1116 = 0;
                      v1117 = *(float *)(v1111 + 4 * v1110);
                      v1118 = v425 + 1;
                      do
                      {
                        v1119 = v1117 != 0.0;
                        if (*(float *)(v1112 + v1116) != 0.0)
                          v1119 = 1;
                        *(float *)(v1113 + v1116) = (float)v1119;
                        --v1118;
                        v1116 += 4;
                      }
                      while (v1118 > 1);
                    }
                    v1110 += v1114;
                    ++v1109;
                    v1113 += 4 * (int)v425;
                    v1112 += v1115;
                  }
                  while (v1109 != v1108);
                }
              }
              else
              {
                v1931 = v187[6];
                if (v1931)
                {
                  v1960 = 0;
                  v1862 = v265[19];
                  v1877 = v188[19];
                  v1799 = v187[19];
                  do
                  {
                    v1800 = 0;
                    if ((v191 & 0x80000000) == 0)
                    {
                      v1801 = v188[3];
                      v1802 = v191;
                      v1803 = v1960;
                      do
                      {
                        v1804 = ldiv(v1803, v189[v1802]);
                        v1803 = v1804.quot;
                        v1800 += *(_QWORD *)(v1801 + 8 * v1802--) * v1804.rem;
                      }
                      while (v1802 != -1);
                    }
                    v1805 = v1966;
                    if ((v1966 & 0x80000000) != 0)
                    {
                      LODWORD(v1806) = 0;
                    }
                    else
                    {
                      v1806 = 0;
                      v1807 = v265[3];
                      v1808 = v1960;
                      do
                      {
                        v1809 = ldiv(v1808, v266[v1805]);
                        v1808 = v1809.quot;
                        v1806 += *(_QWORD *)(v1807 + 8 * v1805--) * v1809.rem;
                      }
                      while (v1805 != -1);
                    }
                    v191 = v1984;
                    if ((int)v425 >= 1)
                    {
                      v1810 = 0;
                      v1811 = *(float *)(v1877 + 4 * (int)v1800);
                      v1812 = v425 + 1;
                      do
                      {
                        v1813 = v1811 != 0.0;
                        if (*(float *)(v1862 + 4 * (int)v1806 + v1810) != 0.0)
                          v1813 = 1;
                        *(float *)(v1799 + v1810) = (float)v1813;
                        --v1812;
                        v1810 += 4;
                      }
                      while (v1812 > 1);
                    }
                    v1799 += 4 * (int)v425;
                    v1960 += (int)v425;
                  }
                  while (v1960 < v1931);
                }
              }
              break;
            case 2:
              if (v194 == 2)
              {
                v1814 = *v189;
                if ((_DWORD)v1814)
                {
                  v1815 = 0;
                  v1816 = 0;
                  v1817 = 0;
                  v1818 = v188[19];
                  v1819 = v265[19];
                  v1820 = v187[19];
                  v1821 = v189[1];
                  v1822 = (uint64_t *)v188[3];
                  v1823 = *v1822;
                  v1824 = v1822[1];
                  v1825 = (uint64_t *)v265[3];
                  v1826 = *v1825;
                  v1827 = v1825[1];
                  if (v1821 <= 1)
                    v1828 = 1;
                  else
                    v1828 = v189[1];
                  v1829 = v1823 - v1824 * v1821;
                  v1830 = v1826 - v1827 * v266[1];
                  do
                  {
                    if ((_DWORD)v1821)
                    {
                      v1831 = 0;
                      v1832 = v1818 + 4 * v1817;
                      do
                      {
                        if ((int)v425 >= 1)
                        {
                          v1833 = 0;
                          v1834 = *(float *)(v1819 + 4 * v1816);
                          v1835 = v425 + 1;
                          do
                          {
                            v1836 = v1834 != 0.0;
                            if (*(float *)(v1832 + v1833) != 0.0)
                              v1836 = 1;
                            *(float *)(v1820 + v1833) = (float)v1836;
                            --v1835;
                            v1833 += 4;
                          }
                          while (v1835 > 1);
                        }
                        v1817 += v1824;
                        v1816 += v1827;
                        v1820 += 4 * (int)v425;
                        ++v1831;
                        v1832 += 4 * v1824;
                      }
                      while (v1831 != v1828);
                    }
                    v1817 += v1829;
                    v1816 += v1830;
                    ++v1815;
                  }
                  while (v1815 != v1814);
                }
              }
              else if (v194 == 1)
              {
                v1120 = *v189;
                if ((_DWORD)v1120)
                {
                  v1121 = 0;
                  v1122 = 0;
                  v1123 = v188[19];
                  v1124 = v265[19];
                  v1125 = v187[19];
                  v1126 = *(_QWORD *)v265[3];
                  v1127 = 4 * *(_QWORD *)v188[3];
                  do
                  {
                    if ((int)v425 >= 1)
                    {
                      v1128 = 0;
                      v1129 = *(float *)(v1124 + 4 * v1122);
                      v1130 = v425 + 1;
                      do
                      {
                        v1131 = v1129 != 0.0;
                        if (*(float *)(v1123 + v1128) != 0.0)
                          v1131 = 1;
                        *(float *)(v1125 + v1128) = (float)v1131;
                        --v1130;
                        v1128 += 4;
                      }
                      while (v1130 > 1);
                    }
                    v1122 += v1126;
                    ++v1121;
                    v1125 += 4 * (int)v425;
                    v1123 += v1127;
                  }
                  while (v1121 != v1120);
                }
              }
              else
              {
                v1932 = v187[6];
                if (v1932)
                {
                  v1961 = 0;
                  v1863 = v265[19];
                  v1878 = v188[19];
                  v1837 = v187[19];
                  do
                  {
                    v1838 = 0;
                    if ((v191 & 0x80000000) == 0)
                    {
                      v1839 = v188[3];
                      v1840 = v191;
                      v1841 = v1961;
                      do
                      {
                        v1842 = ldiv(v1841, v189[v1840]);
                        v1841 = v1842.quot;
                        v1838 += *(_QWORD *)(v1839 + 8 * v1840--) * v1842.rem;
                      }
                      while (v1840 != -1);
                    }
                    v1843 = v1966;
                    if ((v1966 & 0x80000000) != 0)
                    {
                      LODWORD(v1844) = 0;
                    }
                    else
                    {
                      v1844 = 0;
                      v1845 = v265[3];
                      v1846 = v1961;
                      do
                      {
                        v1847 = ldiv(v1846, v266[v1843]);
                        v1846 = v1847.quot;
                        v1844 += *(_QWORD *)(v1845 + 8 * v1843--) * v1847.rem;
                      }
                      while (v1843 != -1);
                    }
                    v191 = v1984;
                    if ((int)v425 >= 1)
                    {
                      v1848 = 0;
                      v1849 = *(float *)(v1863 + 4 * (int)v1844);
                      v1850 = v425 + 1;
                      do
                      {
                        v1851 = v1849 != 0.0;
                        if (*(float *)(v1878 + 4 * (int)v1838 + v1848) != 0.0)
                          v1851 = 1;
                        *(float *)(v1837 + v1848) = (float)v1851;
                        --v1850;
                        v1848 += 4;
                      }
                      while (v1850 > 1);
                    }
                    v1837 += 4 * (int)v425;
                    v1961 += (int)v425;
                  }
                  while (v1961 < v1932);
                }
              }
              break;
            case 3:
              if (v194 == 2)
              {
                v1329 = *v189;
                if ((_DWORD)v1329)
                {
                  v1330 = 0;
                  v1331 = 0;
                  v1332 = 0;
                  v1333 = v188[19];
                  v1334 = v265[19];
                  v1335 = v187[19];
                  v1336 = v189[1];
                  v1337 = (uint64_t *)v188[3];
                  v1338 = *v1337;
                  v1339 = v1337[1];
                  v1340 = (uint64_t *)v265[3];
                  v1341 = *v1340;
                  v1342 = v1340[1];
                  if (v1336 <= 1)
                    v1343 = 1;
                  else
                    v1343 = v189[1];
                  v1344 = v1338 - v1339 * v1336;
                  v1345 = v1341 - v1342 * v266[1];
                  do
                  {
                    if ((_DWORD)v1336)
                    {
                      v1346 = 0;
                      v1347 = v1334 + 4 * v1331;
                      v1348 = v1333 + 4 * v1332;
                      do
                      {
                        if ((int)v425 >= 1)
                        {
                          v1349 = 0;
                          v1350 = v425 + 1;
                          do
                          {
                            v1351 = *(float *)(v1348 + v1349) != 0.0;
                            if (*(float *)(v1347 + v1349) != 0.0)
                              v1351 = 1;
                            *(float *)(v1335 + v1349) = (float)v1351;
                            --v1350;
                            v1349 += 4;
                          }
                          while (v1350 > 1);
                        }
                        v1332 += v1339;
                        v1331 += v1342;
                        v1335 += 4 * (int)v425;
                        ++v1346;
                        v1347 += 4 * v1342;
                        v1348 += 4 * v1339;
                      }
                      while (v1346 != v1343);
                    }
                    v1332 += v1344;
                    v1331 += v1345;
                    ++v1330;
                  }
                  while (v1330 != v1329);
                }
              }
              else if (v194 == 1)
              {
                v426 = *v189;
                if ((_DWORD)v426)
                {
                  v427 = 0;
                  v428 = v188[19];
                  v429 = v265[19];
                  v430 = v187[19];
                  v431 = 4 * *(_QWORD *)v265[3];
                  v432 = 4 * *(_QWORD *)v188[3];
                  do
                  {
                    if ((int)v425 >= 1)
                    {
                      v433 = 0;
                      v434 = v425 + 1;
                      do
                      {
                        v435 = *(float *)(v428 + v433) != 0.0;
                        if (*(float *)(v429 + v433) != 0.0)
                          v435 = 1;
                        *(float *)(v430 + v433) = (float)v435;
                        --v434;
                        v433 += 4;
                      }
                      while (v434 > 1);
                    }
                    ++v427;
                    v430 += 4 * (int)v425;
                    v429 += v431;
                    v428 += v432;
                  }
                  while (v427 != v426);
                }
              }
              else
              {
                v1918 = v187[6];
                if (v1918)
                {
                  v1947 = 0;
                  v1855 = v265[19];
                  v1868 = v188[19];
                  v1352 = v187[19];
                  do
                  {
                    v1353 = 0;
                    if ((v191 & 0x80000000) == 0)
                    {
                      v1354 = v188[3];
                      v1355 = v191;
                      v1356 = v1947;
                      do
                      {
                        v1357 = ldiv(v1356, v189[v1355]);
                        v1356 = v1357.quot;
                        v1353 += *(_QWORD *)(v1354 + 8 * v1355--) * v1357.rem;
                      }
                      while (v1355 != -1);
                    }
                    v1358 = v1966;
                    if ((v1966 & 0x80000000) != 0)
                    {
                      LODWORD(v1359) = 0;
                    }
                    else
                    {
                      v1359 = 0;
                      v1360 = v265[3];
                      v1361 = v1947;
                      do
                      {
                        v1362 = ldiv(v1361, v266[v1358]);
                        v1361 = v1362.quot;
                        v1359 += *(_QWORD *)(v1360 + 8 * v1358--) * v1362.rem;
                      }
                      while (v1358 != -1);
                    }
                    v191 = v1984;
                    if ((int)v425 >= 1)
                    {
                      v1363 = 0;
                      v1364 = v425 + 1;
                      do
                      {
                        v1365 = *(float *)(v1868 + 4 * (int)v1353 + v1363) != 0.0;
                        if (*(float *)(v1855 + 4 * (int)v1359 + v1363) != 0.0)
                          v1365 = 1;
                        *(float *)(v1352 + v1363) = (float)v1365;
                        --v1364;
                        v1363 += 4;
                      }
                      while (v1364 > 1);
                    }
                    v1352 += 4 * (int)v425;
                    v1947 += (int)v425;
                  }
                  while (v1947 < v1918);
                }
              }
              break;
            default:
LABEL_524:
              switch(v421)
              {
                case 1uLL:
                  v436 = v187[6];
                  if (v436)
                  {
                    v437 = (float *)v188[19];
                    v438 = (float *)v265[19];
                    v439 = (float *)v187[19];
                    v440 = 4 * *(_QWORD *)v265[3];
                    v441 = 4 * *(_QWORD *)v188[3];
                    do
                    {
                      v442 = *v437 != 0.0;
                      if (*v438 != 0.0)
                        v442 = 1;
                      *v439++ = (float)v442;
                      v438 = (float *)((char *)v438 + v440);
                      v437 = (float *)((char *)v437 + v441);
                      --v436;
                    }
                    while (v436);
                  }
                  break;
                case 2uLL:
                  v909 = *v189;
                  if ((_DWORD)v909)
                  {
                    v910 = 0;
                    v911 = 0;
                    v912 = 0;
                    v913 = 0;
                    v914 = v188[19];
                    v915 = v265[19];
                    v916 = v187[19];
                    v917 = v189[1];
                    v918 = (uint64_t *)v188[3];
                    v919 = *v918;
                    v920 = v918[1];
                    v921 = (uint64_t *)v265[3];
                    v922 = *v921;
                    v923 = v921[1];
                    v924 = v922 - v923 * v266[1];
                    if (v917 <= 1)
                      v925 = 1;
                    else
                      v925 = v189[1];
                    v926 = v919 - v920 * v917;
                    do
                    {
                      if ((_DWORD)v917)
                      {
                        v927 = v911 + v925;
                        v928 = (float *)(v916 + 4 * v911);
                        v929 = v925;
                        do
                        {
                          v930 = *(float *)(v914 + 4 * v913) != 0.0;
                          if (*(float *)(v915 + 4 * v912) != 0.0)
                            v930 = 1;
                          *v928++ = (float)v930;
                          v913 += v920;
                          v912 += v923;
                          --v929;
                        }
                        while (v929);
                        v911 = v927;
                      }
                      v913 += v926;
                      v912 += v924;
                      ++v910;
                    }
                    while (v910 != v909);
                  }
                  break;
                case 3uLL:
                  v931 = *v189;
                  if ((_DWORD)v931)
                  {
                    v932 = 0;
                    v933 = 0;
                    v934 = 0;
                    v935 = 0;
                    v936 = v188[19];
                    v937 = v265[19];
                    v938 = v187[19];
                    v939 = v189[1];
                    v940 = (_QWORD *)v188[3];
                    v941 = v940[1];
                    v942 = (_QWORD *)v265[3];
                    v943 = v942[1];
                    v944 = *v942 - v943 * v266[1];
                    if (v939 <= 1)
                      v945 = 1;
                    else
                      v945 = v189[1];
                    v946 = *v940 - v941 * v939;
                    do
                    {
                      if ((_DWORD)v939)
                      {
                        v947 = 0;
                        v948 = v189[2];
                        v949 = v940[2];
                        v950 = v942[2];
                        if (v948 <= 1)
                          v951 = 1;
                        else
                          v951 = v189[2];
                        v952 = v943 - v950 * v266[2];
                        do
                        {
                          v953 = v951;
                          if ((_DWORD)v948)
                          {
                            do
                            {
                              v954 = *(float *)(v936 + 4 * v935) != 0.0;
                              if (*(float *)(v937 + 4 * v934) != 0.0)
                                v954 = 1;
                              *(float *)(v938 + 4 * v933++) = (float)v954;
                              v935 += v949;
                              v934 += v950;
                              --v953;
                            }
                            while (v953);
                          }
                          v935 += v941 - v949 * v948;
                          v934 += v952;
                          ++v947;
                        }
                        while (v947 != v945);
                      }
                      v935 += v946;
                      v934 += v944;
                      ++v932;
                    }
                    while (v932 != v931);
                  }
                  break;
                case 4uLL:
                  v1989 = *v189;
                  if ((_DWORD)v1989)
                  {
                    v955 = 0;
                    v956 = 0;
                    v957 = 0;
                    v958 = 0;
                    v959 = v188[19];
                    v960 = v265[19];
                    v961 = v187[19];
                    v962 = v189[1];
                    v963 = (_QWORD *)v188[3];
                    v964 = (_QWORD *)v265[3];
                    v1897 = v964[1];
                    v1911 = v963[1];
                    if (v962 <= 1)
                      v965 = 1;
                    else
                      v965 = v189[1];
                    v1940 = *v963 - v963[1] * v962;
                    v1971 = *v964 - v1897 * v266[1];
                    do
                    {
                      if ((_DWORD)v962)
                      {
                        v966 = 0;
                        v967 = v189[2];
                        v968 = v963[2];
                        v969 = v964[2];
                        if (v967 <= 1)
                          v970 = 1;
                        else
                          v970 = v189[2];
                        v971 = v1897 - v969 * v266[2];
                        do
                        {
                          if ((_DWORD)v967)
                          {
                            v972 = 0;
                            v973 = v189[3];
                            v974 = v963[3];
                            v975 = v964[3];
                            if (v973 <= 1)
                              v976 = 1;
                            else
                              v976 = v189[3];
                            v977 = v969 - v975 * v266[3];
                            do
                            {
                              v978 = v976;
                              if ((_DWORD)v973)
                              {
                                do
                                {
                                  v979 = *(float *)(v959 + 4 * v958) != 0.0;
                                  if (*(float *)(v960 + 4 * v957) != 0.0)
                                    v979 = 1;
                                  *(float *)(v961 + 4 * v956++) = (float)v979;
                                  v958 += v974;
                                  v957 += v975;
                                  --v978;
                                }
                                while (v978);
                              }
                              v958 += v968 - v974 * v973;
                              v957 += v977;
                              ++v972;
                            }
                            while (v972 != v970);
                          }
                          v958 += v1911 - v968 * v967;
                          v957 += v971;
                          ++v966;
                        }
                        while (v966 != v965);
                      }
                      v958 += v1940;
                      v957 += v1971;
                      ++v955;
                    }
                    while (v955 != v1989);
                  }
                  break;
                default:
                  v896 = v187[6];
                  if (v896)
                  {
                    v897 = 0;
                    v1910 = v265[19];
                    v1939 = v188[19];
                    v1896 = v187[19];
                    do
                    {
                      v898 = 0;
                      if ((v191 & 0x80000000) == 0)
                      {
                        v899 = v188[3];
                        v900 = v191;
                        v901 = v897;
                        do
                        {
                          v902 = ldiv(v901, v189[v900]);
                          v901 = v902.quot;
                          v898 += *(_QWORD *)(v899 + 8 * v900--) * v902.rem;
                        }
                        while (v900 != -1);
                      }
                      v903 = v1966;
                      if ((v1966 & 0x80000000) != 0)
                      {
                        LODWORD(v904) = 0;
                      }
                      else
                      {
                        v904 = 0;
                        v905 = v265[3];
                        v906 = v897;
                        do
                        {
                          v907 = ldiv(v906, v266[v903]);
                          v906 = v907.quot;
                          v904 += *(_QWORD *)(v905 + 8 * v903--) * v907.rem;
                        }
                        while (v903 != -1);
                      }
                      v908 = *(float *)(v1939 + 4 * (int)v898) != 0.0;
                      if (*(float *)(v1910 + 4 * (int)v904) != 0.0)
                        v908 = 1;
                      *(float *)(v1896 + 4 * v897++) = (float)v908;
                      v191 = v1984;
                    }
                    while (v897 != v896);
                  }
                  break;
              }
              break;
          }
          return;
      }
    default:
      return;
  }
}

float mlx::core::Negative::eval(int a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  int **v5;
  int *v6;
  char *v7;
  mlx::core::scheduler *v8;
  float result;
  void **v10;
  uint64_t v11;
  int *v12;
  mlx::core::scheduler *v13;
  void **v14;
  uint64_t v15;
  int *v16;
  mlx::core::scheduler *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  mlx::core::scheduler *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  mlx::core::scheduler *v25;
  void **v26;
  uint64_t v27;
  uint64_t *v28;
  mlx::core::scheduler *v29;
  void **v30;
  uint64_t v31;
  float *v32;
  mlx::core::scheduler *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  int *v40;
  int v41;
  unint64_t v42;
  int *v43;
  uint64_t v44;
  int *v45;
  char v46;
  unint64_t v47;
  int *v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float v54;
  int **v55;
  int *v56;
  int *v57;
  int *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  ldiv_t v66;
  int **v67;
  int *v68;
  int *v69;
  int *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  ldiv_t v78;
  unint64_t v79;
  int *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  ldiv_t v87;
  int **v88;
  int *v89;
  int *v90;
  int *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int quot;
  ldiv_t v99;
  unint64_t v100;
  int *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  ldiv_t v108;
  int **v109;
  int *v110;
  int *v111;
  int *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  ldiv_t v120;
  int **v121;
  int *v122;
  int *v123;
  int *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  ldiv_t v132;
  void *v133;
  uint64_t (*v134)(mlx::core::allocator *);
  void **v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Negative::eval();
  v5 = *a3;
  v6 = (*a3)[7];
  switch((int)v6)
  {
    case 0:
      v7 = *(char **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v133);
        v10 = v135;
        if (v135 == &v133)
        {
          v11 = 4;
          v10 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_88;
          v11 = 5;
        }
        (*((void (**)(void))*v10 + v11))();
LABEL_88:
        v88 = *a3;
        v89 = (*a3)[6];
        if (v89)
        {
          v90 = 0;
          v91 = v88[19];
          v92 = *(uint64_t **)v3;
          v93 = *v92;
          v94 = ((unint64_t)(v92[1] - *v92) >> 2) - 1;
          do
          {
            v95 = 0;
            if ((v94 & 0x80000000) == 0)
            {
              v96 = v92[3];
              v97 = v94;
              quot = (int)v90;
              do
              {
                v99 = ldiv(quot, *(int *)(v93 + 4 * v97));
                quot = v99.quot;
                v95 += *(_QWORD *)(v96 + 8 * v97--) * v99.rem;
              }
              while (v97 != -1);
            }
            *((_BYTE *)v90 + (_QWORD)v91) = v7[(int)v95];
            v90 = (int *)((char *)v90 + 1);
          }
          while (v90 != v89);
        }
        return result;
      }
      v44 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v44)
      {
        v45 = (*a3)[19];
        do
        {
          v46 = *v7++;
          *(_BYTE *)v45 = v46;
          v45 = (int *)((char *)v45 + 1);
          --v44;
        }
        while (v44);
      }
      return result;
    case 1:
      v24 = *(_QWORD *)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v25 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v25, (uint64_t)&v133);
        v26 = v135;
        if (v135 == &v133)
        {
          v27 = 4;
          v26 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_97;
          v27 = 5;
        }
        (*((void (**)(void))*v26 + v27))();
LABEL_97:
        if ((*a3)[6])
        {
          v100 = 0;
          v101 = (*a3)[19];
          do
          {
            v102 = **(_QWORD **)v3;
            v103 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v102) >> 2;
            v104 = 0;
            v105 = (v103 - 1);
            if ((int)v103 - 1 >= 0)
            {
              v106 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v107 = v100;
              do
              {
                v108 = ldiv(v107, *(int *)(v102 + 4 * v105));
                v107 = v108.quot;
                v104 += *(_QWORD *)(v106 + 8 * v105--) * v108.rem;
              }
              while (v105 != -1);
            }
            *((_BYTE *)v101 + v100++) = -*(_BYTE *)(v24 + (int)v104);
          }
          while (v100 < (unint64_t)(*a3)[6]);
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v47 = 0;
        v48 = (*a3)[19];
        do
        {
          *((_BYTE *)v48 + v47) = -*(_BYTE *)(v24 + v47);
          ++v47;
        }
        while (v47 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 2:
      v16 = *(int **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v17 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v17, (uint64_t)&v133);
        v18 = v135;
        if (v135 == &v133)
        {
          v19 = 4;
          v18 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_70;
          v19 = 5;
        }
        (*((void (**)(void))*v18 + v19))();
LABEL_70:
        v67 = *a3;
        v68 = (*a3)[6];
        if (v68)
        {
          v69 = 0;
          v70 = v67[19];
          v71 = *(uint64_t **)v3;
          v72 = *v71;
          v73 = ((unint64_t)(v71[1] - *v71) >> 2) - 1;
          do
          {
            v74 = 0;
            if ((v73 & 0x80000000) == 0)
            {
              v75 = v71[3];
              v76 = v73;
              v77 = (int)v69;
              do
              {
                v78 = ldiv(v77, *(int *)(v72 + 4 * v76));
                v77 = v78.quot;
                v74 += *(_QWORD *)(v75 + 8 * v76--) * v78.rem;
              }
              while (v76 != -1);
            }
            v70[(_QWORD)v69] = -v16[(int)v74];
            v69 = (int *)((char *)v69 + 1);
          }
          while (v69 != v68);
        }
        return result;
      }
      v39 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v39)
      {
        v40 = (*a3)[19];
        do
        {
          v41 = *v16++;
          *v40++ = -v41;
          --v39;
        }
        while (v39);
      }
      return result;
    case 3:
      v20 = *(_QWORD *)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v21, (uint64_t)&v133);
        v22 = v135;
        if (v135 == &v133)
        {
          v23 = 4;
          v22 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_79;
          v23 = 5;
        }
        (*((void (**)(void))*v22 + v23))();
LABEL_79:
        if ((*a3)[6])
        {
          v79 = 0;
          v80 = (*a3)[19];
          do
          {
            v81 = **(_QWORD **)v3;
            v82 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v81) >> 2;
            v83 = 0;
            v84 = (v82 - 1);
            if ((int)v82 - 1 >= 0)
            {
              v85 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v86 = v79;
              do
              {
                v87 = ldiv(v86, *(int *)(v81 + 4 * v84));
                v86 = v87.quot;
                v83 += *(_QWORD *)(v85 + 8 * v84--) * v87.rem;
              }
              while (v84 != -1);
            }
            *((_BYTE *)v80 + v79++) = -*(_BYTE *)(v20 + (int)v83);
          }
          while (v79 < (unint64_t)(*a3)[6]);
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v42 = 0;
        v43 = (*a3)[19];
        do
        {
          *((_BYTE *)v43 + v42) = -*(_BYTE *)(v20 + v42);
          ++v42;
        }
        while (v42 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 4:
      v12 = *(int **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v13, (uint64_t)&v133);
        v14 = v135;
        if (v135 == &v133)
        {
          v15 = 4;
          v14 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_61;
          v15 = 5;
        }
        (*((void (**)(void))*v14 + v15))();
LABEL_61:
        v55 = *a3;
        v56 = (*a3)[6];
        if (v56)
        {
          v57 = 0;
          v58 = v55[19];
          v59 = *(uint64_t **)v3;
          v60 = *v59;
          v61 = ((unint64_t)(v59[1] - *v59) >> 2) - 1;
          do
          {
            v62 = 0;
            if ((v61 & 0x80000000) == 0)
            {
              v63 = v59[3];
              v64 = v61;
              v65 = (int)v57;
              do
              {
                v66 = ldiv(v65, *(int *)(v60 + 4 * v64));
                v65 = v66.quot;
                v62 += *(_QWORD *)(v63 + 8 * v64--) * v66.rem;
              }
              while (v64 != -1);
            }
            v58[(_QWORD)v57] = -v12[(int)v62];
            v57 = (int *)((char *)v57 + 1);
          }
          while (v57 != v56);
        }
        return result;
      }
      v36 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v36)
      {
        v37 = (*a3)[19];
        do
        {
          v38 = *v12++;
          *v37++ = -v38;
          --v36;
        }
        while (v36);
      }
      return result;
    case 5:
      v28 = *(uint64_t **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v29 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v29, (uint64_t)&v133);
        v30 = v135;
        if (v135 == &v133)
        {
          v31 = 4;
          v30 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_106;
          v31 = 5;
        }
        (*((void (**)(void))*v30 + v31))();
LABEL_106:
        v109 = *a3;
        v110 = (*a3)[6];
        if (v110)
        {
          v111 = 0;
          v112 = v109[19];
          v113 = *(uint64_t **)v3;
          v114 = *v113;
          v115 = ((unint64_t)(v113[1] - *v113) >> 2) - 1;
          do
          {
            v116 = 0;
            if ((v115 & 0x80000000) == 0)
            {
              v117 = v113[3];
              v118 = v115;
              v119 = (int)v111;
              do
              {
                v120 = ldiv(v119, *(int *)(v114 + 4 * v118));
                v119 = v120.quot;
                v116 += *(_QWORD *)(v117 + 8 * v118--) * v120.rem;
              }
              while (v118 != -1);
            }
            *(_QWORD *)&v112[2 * (_QWORD)v111] = -v28[(int)v116];
            v111 = (int *)((char *)v111 + 1);
          }
          while (v111 != v110);
        }
        return result;
      }
      v49 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v49)
      {
        v50 = (*a3)[19];
        do
        {
          v51 = *v28++;
          *(_QWORD *)v50 = -v51;
          v50 += 2;
          --v49;
        }
        while (v49);
      }
      return result;
    case 6:
      v32 = *(float **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v33 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v33, (uint64_t)&v133);
        v34 = v135;
        if (v135 == &v133)
        {
          v35 = 4;
          v34 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_115;
          v35 = 5;
        }
        (*((void (**)(void))*v34 + v35))();
LABEL_115:
        v121 = *a3;
        v122 = (*a3)[6];
        if (v122)
        {
          v123 = 0;
          v124 = v121[19];
          v125 = *(uint64_t **)v3;
          v126 = *v125;
          v127 = ((unint64_t)(v125[1] - *v125) >> 2) - 1;
          do
          {
            v128 = 0;
            if ((v127 & 0x80000000) == 0)
            {
              v129 = v125[3];
              v130 = v127;
              v131 = (int)v123;
              do
              {
                v132 = ldiv(v131, *(int *)(v126 + 4 * v130));
                v131 = v132.quot;
                v128 += *(_QWORD *)(v129 + 8 * v130--) * v132.rem;
              }
              while (v130 != -1);
            }
            result = -v32[(int)v128];
            *(float *)&v124[(_QWORD)v123] = result;
            v123 = (int *)((char *)v123 + 1);
          }
          while (v123 != v122);
        }
        return result;
      }
      v52 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v52)
      {
        v53 = (float *)(*a3)[19];
        do
        {
          v54 = *v32++;
          result = -v54;
          *v53++ = -v54;
          --v52;
        }
        while (v52);
      }
      return result;
    default:
      return result;
  }
}

void sub_2422F4C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Pad::eval(_QWORD *a1, uint64_t **a2, mlx::core::array *this, float a4)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  void *__p[3];
  uint64_t v26[2];
  void **v27;

  v4 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 32)
    mlx::core::Pad::eval();
  v6 = v4[2];
  if (*(_QWORD *)(v6 + 48) != 1)
    mlx::core::Pad::eval();
  v7 = *(_DWORD *)(v6 + 56);
  if (v7 != *(_DWORD *)(*v4 + 56) || v7 != *(_DWORD *)(*(_QWORD *)this + 56))
    mlx::core::Pad::eval();
  mlx::core::copy((mlx::core::array *)(v4 + 2), this, 0, a4);
  v9 = (int *)a1[3];
  v10 = 0;
  v11 = a1[4] - (_QWORD)v9;
  if (v11)
  {
    v12 = v11 >> 2;
    v13 = (int *)a1[6];
    if ((unint64_t)(v11 >> 2) <= 1)
      v12 = 1;
    do
    {
      v15 = *v9++;
      v14 = v15;
      if ((v15 & 0x80000000) != 0)
        v14 += (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2;
      else
        v14 = v14;
      v16 = *v13++;
      v10 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8 * v14) * v16;
      --v12;
    }
    while (v12);
  }
  v17 = *v4;
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
  v18 = *(_QWORD *)(*(_QWORD *)this + 56);
  v24 = 0uLL;
  v23 = 0;
  v22 = 0uLL;
  mlx::core::array::array(v26, (__int128 *)__p, v18, &v24, &v22);
  v27 = (void **)&v22;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v27);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  mlx::core::array::copy_shared_buffer(v26, (uint64_t)this, *(_QWORD *)this + 24, *(_BYTE *)(*(_QWORD *)this + 168), *(_QWORD *)(v26[0] + 48), v10);
  mlx::core::copy_inplace(v4, v26, 3);
  mlx::core::array::~array((mlx::core::array *)v26);
}

void sub_2422F4E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 - 40) = v16;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *mlx::core::RandomBits::eval(uint64_t a1, uint64_t ***a2, int ***a3)
{
  uint64_t **v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  mlx::core::scheduler *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int quot;
  ldiv_t v26;
  uint64_t v27;
  ldiv_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t __len;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int __src;
  unint64_t v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 16)
    mlx::core::RandomBits::eval();
  v6 = (*v3)[6];
  v7 = (unint64_t)(*a3)[6];
  v8 = *((unsigned __int8 *)*a3 + 60);
  v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(v8 * v7));
  v44[0] = &unk_2513463C8;
  v44[1] = mlx::core::allocator::free;
  v45 = v44;
  mlx::core::array::set_data(a3, (uint64_t)v9, (uint64_t)v44);
  result = v45;
  if (v45 == v44)
  {
    v11 = 4;
    result = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_7;
    v11 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
LABEL_7:
  if (v6 >= 2)
  {
    v12 = 0;
    v13 = v6 >> 1;
    v14 = v8 * (v7 / (v6 >> 1));
    v15 = (**a2)[19];
    v16 = (v14 + 3) >> 3;
    v40 = v14 + 3;
    v41 = v15;
    v17 = (*a3)[19];
    v38 = (v14 + 3) & 4;
    v39 = v16 + (v38 >> 2);
    v34 = v16;
    __len = v14 & 3;
    if (v6 >> 1 <= 1)
      v13 = 1;
    v36 = v13;
    v37 = v8 * (v7 / (v6 >> 1));
    if (v16 <= 2)
      v18 = 2;
    else
      v18 = (v14 + 3) >> 3;
    do
    {
      v19 = **v3;
      v20 = (unint64_t)((*v3)[1] - v19) >> 2;
      v21 = (v20 - 1);
      if ((int)v20 - 1 < 0)
      {
        v22 = 0;
        v27 = 0;
      }
      else
      {
        v22 = 0;
        v23 = (*v3)[3];
        v24 = (v20 - 1);
        quot = 2 * v12;
        do
        {
          v26 = ldiv(quot, *(int *)(v19 + 4 * v24));
          quot = v26.quot;
          v22 += *(_QWORD *)(v23 + 8 * v24--) * v26.rem;
        }
        while (v24 != -1);
        v27 = 0;
        LODWORD(result) = (2 * v12) | 1;
        do
        {
          v28 = ldiv((int)result, *(int *)(v19 + 4 * v21));
          result = (_QWORD *)v28.quot;
          v27 += *(_QWORD *)(v23 + 8 * v21--) * v28.rem;
        }
        while (v21 != -1);
        v16 = v34;
      }
      v43 = *(unsigned int *)(v41 + 4 * v22) | ((unint64_t)*(unsigned int *)(v41 + 4 * v27) << 32);
      if (v40 < 0x10)
      {
        v33 = 0;
        v31 = v39;
        LODWORD(v30) = 1;
      }
      else
      {
        v29 = 0;
        v30 = 1;
        v31 = v39;
        do
        {
          v32 = v30;
          result = (_QWORD *)mlx::core::random::threefry2x32_hash(&v43, (v30 - 1) | (v31 << 32));
          v17[v29] = (int)result;
          v17[v31++] = HIDWORD(result);
          ++v30;
          v29 = v32;
        }
        while (v18 != v32 + 1);
        v33 = v32;
      }
      if (v33 >= v16)
      {
        LODWORD(v30) = v33;
      }
      else
      {
        result = (_QWORD *)mlx::core::random::threefry2x32_hash(&v43, v33 | ((unint64_t)v31 << 32));
        __src = HIDWORD(result);
        v17[v33] = (int)result;
        if (__len)
          result = memmove(&v17[v31], &__src, __len);
        else
          v17[v31] = HIDWORD(result);
      }
      if (v38)
      {
        result = (_QWORD *)mlx::core::random::threefry2x32_hash(&v43, v30);
        v17[v16] = (int)result;
      }
      ++v12;
      v17 = (int *)((char *)v17 + v37);
    }
    while (v12 != v36);
  }
  return result;
}

void sub_2422F5154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Reshape::eval(uint64_t a1, uint64_t a2, const mlx::core::array *a3)
{
  uint64_t **v3;
  float v6;
  _BYTE v7[8];
  void *__p[3];

  v3 = *(uint64_t ***)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Reshape::eval();
  mlx::core::Reshape::prepare_reshape(*(uint64_t ***)a2, a3, (uint64_t)v7);
  if (v7[0])
    mlx::core::copy((mlx::core::array *)v3, a3, 2 * ((*v3)[20] != 1), v6);
  else
    mlx::core::Reshape::shared_buffer_reshape(a1, (uint64_t)v3, (uint64_t)__p, (uint64_t *)a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2422F5238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float mlx::core::Round::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  const mlx::core::array *v3;
  mlx::core::array *v5;
  uint64_t v6;
  float *v7;
  mlx::core::scheduler *v8;
  float result;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int quot;
  ldiv_t v26;
  _QWORD *v27;
  void *exception;
  _QWORD v29[3];
  void *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(const mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Round::eval();
  v30 = *(void **)(*(_QWORD *)v3 + 56);
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    mlx::core::array::copy_shared_buffer(a3, v3);
    return result;
  }
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
    mlx::core::operator<<(v27, v29);
    exception = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](exception, v29);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(*(_QWORD *)a3 + 48) * BYTE4(v6)));
    v30 = &unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = &v30;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v30);
    v10 = v32;
    if (v32 == &v30)
    {
      v11 = 4;
      v10 = &v30;
    }
    else
    {
      if (!v32)
        goto LABEL_15;
      v11 = 5;
    }
    (*((void (**)(void))*v10 + v11))();
LABEL_15:
    v15 = *(_QWORD *)a3;
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v15 + 152);
      v19 = *(uint64_t **)v3;
      v20 = *v19;
      v21 = ((unint64_t)(v19[1] - *v19) >> 2) - 1;
      do
      {
        v22 = 0;
        if ((v21 & 0x80000000) == 0)
        {
          v23 = v19[3];
          v24 = v21;
          quot = v17;
          do
          {
            v26 = ldiv(quot, *(int *)(v20 + 4 * v24));
            quot = v26.quot;
            v22 += *(_QWORD *)(v23 + 8 * v24--) * v26.rem;
          }
          while (v24 != -1);
        }
        result = rintf(v7[(int)v22]);
        *(float *)(v18 + 4 * v17++) = result;
      }
      while (v17 != v16);
    }
    return result;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v12)
  {
    v13 = *(float **)(*(_QWORD *)a3 + 152);
    do
    {
      v14 = *v7++;
      result = rintf(v14);
      *v13++ = result;
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_2422F54C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Sigmoid::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  uint64_t v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int quot;
  ldiv_t v21;
  std::logic_error *exception;
  _QWORD *v23;
  void *v24;
  _QWORD v25[3];
  int *v26;
  uint64_t (*v27[2])(mlx::core::allocator *);
  void **v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sigmoid::eval();
  v26 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v26, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[sigmoid] Cannot sigmoid of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v26);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"[unary_fp] Does not support ", 28);
    v25[0] = (*a3)[7];
    mlx::core::operator<<(v23, v25);
    v24 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v27, v25);
    MEMORY[0x2426A8084](v24, v25);
    __cxa_throw(v24, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v26 = (int *)&unk_2513463C8;
    v27[0] = mlx::core::allocator::free;
    v28 = (void **)&v26;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v26);
    v9 = v28;
    if (v28 == (void **)&v26)
    {
      v10 = 4;
      v9 = (void **)&v26;
    }
    else
    {
      if (!v28)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    if ((*a3)[6])
    {
      v13 = 0;
      v14 = (*a3)[19];
      do
      {
        v15 = **(_QWORD **)v3;
        v16 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v15) >> 2;
        v17 = 0;
        v18 = (v16 - 1);
        if ((int)v16 - 1 >= 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)v3 + 24);
          quot = v13;
          do
          {
            v21 = ldiv(quot, *(int *)(v15 + 4 * v18));
            quot = v21.quot;
            v17 += *(_QWORD *)(v19 + 8 * v18--) * v21.rem;
          }
          while (v18 != -1);
        }
        *(float *)&v14[v13++] = mlx::core::detail::Sigmoid::operator()<float>(*(float *)(v7 + 4 * (int)v17));
      }
      while (v13 < (unint64_t)(*a3)[6]);
    }
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)v3 + 160))
  {
    v11 = 0;
    v12 = (*a3)[19];
    do
    {
      *(float *)&v12[v11] = mlx::core::detail::Sigmoid::operator()<float>(*(float *)(v7 + 4 * v11));
      ++v11;
    }
    while (v11 < *(_QWORD *)(*(_QWORD *)v3 + 160));
  }
}

void sub_2422F5804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  int v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

float mlx::core::Sign::eval(int a1, uint64_t a2, mlx::core::array *a3)
{
  const mlx::core::array *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  mlx::core::scheduler *v9;
  float result;
  void **v11;
  uint64_t v12;
  int *v13;
  mlx::core::scheduler *v14;
  void **v15;
  uint64_t v16;
  int *v17;
  mlx::core::scheduler *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  mlx::core::scheduler *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  mlx::core::scheduler *v26;
  void **v27;
  uint64_t v28;
  uint64_t *v29;
  mlx::core::scheduler *v30;
  void **v31;
  uint64_t v32;
  float *v33;
  mlx::core::scheduler *v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  ldiv_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  ldiv_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  ldiv_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int quot;
  ldiv_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  ldiv_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  ldiv_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  ldiv_t v133;
  void *v134;
  uint64_t (*v135)(mlx::core::allocator *);
  void **v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v3 = *(const mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sign::eval();
  v5 = *(uint64_t **)v3;
  if (!*(_DWORD *)(*(_QWORD *)v3 + 56))
  {
    mlx::core::array::copy_shared_buffer(a3, *(const mlx::core::array **)a2);
    return result;
  }
  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  switch((int)v7)
  {
    case 0:
      v8 = (char *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v9, (uint64_t)&v134);
        v11 = v136;
        if (v136 == &v134)
        {
          v12 = 4;
          v11 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_90;
          v12 = 5;
        }
        (*((void (**)(void))*v11 + v12))();
LABEL_90:
        v89 = *(_QWORD *)a3;
        v90 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v90)
        {
          v91 = 0;
          v92 = *(_QWORD *)(v89 + 152);
          v93 = *(uint64_t **)v3;
          v94 = *v93;
          v95 = ((unint64_t)(v93[1] - *v93) >> 2) - 1;
          do
          {
            v96 = 0;
            if ((v95 & 0x80000000) == 0)
            {
              v97 = v93[3];
              v98 = v95;
              quot = v91;
              do
              {
                v100 = ldiv(quot, *(int *)(v94 + 4 * v98));
                quot = v100.quot;
                v96 += *(_QWORD *)(v97 + 8 * v98--) * v100.rem;
              }
              while (v98 != -1);
            }
            *(_BYTE *)(v92 + v91++) = v8[(int)v96];
          }
          while (v91 != v90);
        }
        return result;
      }
      v45 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v45)
      {
        v46 = *(_BYTE **)(*(_QWORD *)a3 + 152);
        do
        {
          v47 = *v8++;
          *v46++ = v47;
          --v45;
        }
        while (v45);
      }
      return result;
    case 1:
      v25 = v5[19];
      if ((v5[21] & 1) == 0)
      {
        v26 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v26, (uint64_t)&v134);
        v27 = v136;
        if (v136 == &v134)
        {
          v28 = 4;
          v27 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_99;
          v28 = 5;
        }
        (*((void (**)(void))*v27 + v28))();
LABEL_99:
        if (*(_QWORD *)(*(_QWORD *)a3 + 48))
        {
          v101 = 0;
          v102 = *(_QWORD *)(*(_QWORD *)a3 + 152);
          do
          {
            v103 = **(_QWORD **)v3;
            v104 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v103) >> 2;
            v105 = 0;
            v106 = (v104 - 1);
            if ((int)v104 - 1 >= 0)
            {
              v107 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v108 = v101;
              do
              {
                v109 = ldiv(v108, *(int *)(v103 + 4 * v106));
                v108 = v109.quot;
                v105 += *(_QWORD *)(v107 + 8 * v106--) * v109.rem;
              }
              while (v106 != -1);
            }
            *(_BYTE *)(v102 + v101++) = *(_BYTE *)(v25 + (int)v105) != 0;
          }
          while (v101 < *(_QWORD *)(*(_QWORD *)a3 + 48));
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v48 = 0;
        v49 = *(_QWORD *)(*(_QWORD *)a3 + 152);
        do
        {
          *(_BYTE *)(v49 + v48) = *(_BYTE *)(v25 + v48) != 0;
          ++v48;
        }
        while (v48 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 2:
      v17 = (int *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v18 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v18, (uint64_t)&v134);
        v19 = v136;
        if (v136 == &v134)
        {
          v20 = 4;
          v19 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_72;
          v20 = 5;
        }
        (*((void (**)(void))*v19 + v20))();
LABEL_72:
        v68 = *(_QWORD *)a3;
        v69 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v69)
        {
          v70 = 0;
          v71 = *(_QWORD *)(v68 + 152);
          v72 = *(uint64_t **)v3;
          v73 = *v72;
          v74 = ((unint64_t)(v72[1] - *v72) >> 2) - 1;
          do
          {
            v75 = 0;
            if ((v74 & 0x80000000) == 0)
            {
              v76 = v72[3];
              v77 = v74;
              v78 = v70;
              do
              {
                v79 = ldiv(v78, *(int *)(v73 + 4 * v77));
                v78 = v79.quot;
                v75 += *(_QWORD *)(v76 + 8 * v77--) * v79.rem;
              }
              while (v77 != -1);
            }
            *(_DWORD *)(v71 + 4 * v70++) = v17[(int)v75] != 0;
          }
          while (v70 != v69);
        }
        return result;
      }
      v40 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v40)
      {
        v41 = *(_DWORD **)(*(_QWORD *)a3 + 152);
        do
        {
          v42 = *v17++;
          *v41++ = v42 != 0;
          --v40;
        }
        while (v40);
      }
      return result;
    case 3:
      v21 = v5[19];
      if ((v5[21] & 1) == 0)
      {
        v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v22, (uint64_t)&v134);
        v23 = v136;
        if (v136 == &v134)
        {
          v24 = 4;
          v23 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_81;
          v24 = 5;
        }
        (*((void (**)(void))*v23 + v24))();
LABEL_81:
        if (*(_QWORD *)(*(_QWORD *)a3 + 48))
        {
          v80 = 0;
          v81 = *(_QWORD *)(*(_QWORD *)a3 + 152);
          do
          {
            v82 = **(_QWORD **)v3;
            v83 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v82) >> 2;
            v84 = 0;
            v85 = (v83 - 1);
            if ((int)v83 - 1 >= 0)
            {
              v86 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v87 = v80;
              do
              {
                v88 = ldiv(v87, *(int *)(v82 + 4 * v85));
                v87 = v88.quot;
                v84 += *(_QWORD *)(v86 + 8 * v85--) * v88.rem;
              }
              while (v85 != -1);
            }
            *(_BYTE *)(v81 + v80++) = (*(_BYTE *)(v21 + (int)v84) != 0) | (*(char *)(v21 + (int)v84) >> 7);
          }
          while (v80 < *(_QWORD *)(*(_QWORD *)a3 + 48));
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v43 = 0;
        v44 = *(_QWORD *)(*(_QWORD *)a3 + 152);
        do
        {
          *(_BYTE *)(v44 + v43) = (*(_BYTE *)(v21 + v43) != 0) | (*(char *)(v21 + v43) >> 7);
          ++v43;
        }
        while (v43 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 4:
      v13 = (int *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v14 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v14, (uint64_t)&v134);
        v15 = v136;
        if (v136 == &v134)
        {
          v16 = 4;
          v15 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_63;
          v16 = 5;
        }
        (*((void (**)(void))*v15 + v16))();
LABEL_63:
        v56 = *(_QWORD *)a3;
        v57 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v57)
        {
          v58 = 0;
          v59 = *(_QWORD *)(v56 + 152);
          v60 = *(uint64_t **)v3;
          v61 = *v60;
          v62 = ((unint64_t)(v60[1] - *v60) >> 2) - 1;
          do
          {
            v63 = 0;
            if ((v62 & 0x80000000) == 0)
            {
              v64 = v60[3];
              v65 = v62;
              v66 = v58;
              do
              {
                v67 = ldiv(v66, *(int *)(v61 + 4 * v65));
                v66 = v67.quot;
                v63 += *(_QWORD *)(v64 + 8 * v65--) * v67.rem;
              }
              while (v65 != -1);
            }
            *(_DWORD *)(v59 + 4 * v58++) = (v13[(int)v63] != 0) | (v13[(int)v63] >> 31);
          }
          while (v58 != v57);
        }
        return result;
      }
      v37 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v37)
      {
        v38 = *(int **)(*(_QWORD *)a3 + 152);
        do
        {
          v39 = *v13++;
          *v38++ = (v39 != 0) | (v39 >> 31);
          --v37;
        }
        while (v37);
      }
      return result;
    case 5:
      v29 = (uint64_t *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v30 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v30, (uint64_t)&v134);
        v31 = v136;
        if (v136 == &v134)
        {
          v32 = 4;
          v31 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_108;
          v32 = 5;
        }
        (*((void (**)(void))*v31 + v32))();
LABEL_108:
        v110 = *(_QWORD *)a3;
        v111 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v111)
        {
          v112 = 0;
          v113 = *(_QWORD *)(v110 + 152);
          v114 = *(uint64_t **)v3;
          v115 = *v114;
          v116 = ((unint64_t)(v114[1] - *v114) >> 2) - 1;
          do
          {
            v117 = 0;
            if ((v116 & 0x80000000) == 0)
            {
              v118 = v114[3];
              v119 = v116;
              v120 = v112;
              do
              {
                v121 = ldiv(v120, *(int *)(v115 + 4 * v119));
                v120 = v121.quot;
                v117 += *(_QWORD *)(v118 + 8 * v119--) * v121.rem;
              }
              while (v119 != -1);
            }
            *(_QWORD *)(v113 + 8 * v112++) = (v29[(int)v117] != 0) | (unint64_t)(v29[(int)v117] >> 63);
          }
          while (v112 != v111);
        }
        return result;
      }
      v50 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v50)
      {
        v51 = *(unint64_t **)(*(_QWORD *)a3 + 152);
        do
        {
          v52 = *v29++;
          *v51++ = (v52 != 0) | (unint64_t)(v52 >> 63);
          --v50;
        }
        while (v50);
      }
      return result;
    case 6:
      v33 = (float *)v5[19];
      if ((v5[21] & 1) == 0)
      {
        v34 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v6 + 48) * BYTE4(v7)));
        v134 = &unk_2513463C8;
        v135 = mlx::core::allocator::free;
        v136 = &v134;
        mlx::core::array::set_data((int ***)a3, (uint64_t)v34, (uint64_t)&v134);
        v35 = v136;
        if (v136 == &v134)
        {
          v36 = 4;
          v35 = &v134;
        }
        else
        {
          if (!v136)
            goto LABEL_117;
          v36 = 5;
        }
        (*((void (**)(void))*v35 + v36))();
LABEL_117:
        v122 = *(_QWORD *)a3;
        v123 = *(_QWORD *)(*(_QWORD *)a3 + 48);
        if (v123)
        {
          v124 = 0;
          v125 = *(_QWORD *)(v122 + 152);
          v126 = *(uint64_t **)v3;
          v127 = *v126;
          v128 = ((unint64_t)(v126[1] - *v126) >> 2) - 1;
          do
          {
            v129 = 0;
            if ((v128 & 0x80000000) == 0)
            {
              v130 = v126[3];
              v131 = v128;
              v132 = v124;
              do
              {
                v133 = ldiv(v132, *(int *)(v127 + 4 * v131));
                v132 = v133.quot;
                v129 += *(_QWORD *)(v130 + 8 * v131--) * v133.rem;
              }
              while (v131 != -1);
            }
            result = (float)(int)((__PAIR64__(v33[(int)v129] > 0.0, LODWORD(v33[(int)v129])) - COERCE_UNSIGNED_INT(0.0)) >> 32);
            *(float *)(v125 + 4 * v124++) = result;
          }
          while (v124 != v123);
        }
        return result;
      }
      v53 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v53)
      {
        v54 = *(float **)(*(_QWORD *)a3 + 152);
        do
        {
          v55 = *v33++;
          result = (float)(int)((__PAIR64__(v55 > 0.0, LODWORD(v55)) - COERCE_UNSIGNED_INT(0.0)) >> 32);
          *v54++ = result;
          --v53;
        }
        while (v53);
      }
      return result;
    default:
      return result;
  }
}

void sub_2422F6248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Sin::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sin::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[sin] Cannot compute sine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = sinf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = sinf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422F6538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Sinh::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sinh::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[sinh] Cannot compute hyperbolic sine of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = sinhf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = sinhf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422F6868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Slice::eval(mlx::core::Slice *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v3;
  mlx::core::scheduler *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  float v13;
  void *__p;
  void *v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t ***)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Slice::eval();
  if (*(_QWORD *)(*a3 + 48))
  {
    mlx::core::Slice::prepare_slice(a1, *(uint64_t ***)a2, (uint64_t)v17);
    if (!v17[0])
    {
      v15 = 0;
      v16 = 0;
      __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long *>,std::__wrap_iter<long long *>>((char *)&__p, (uint64_t *)v19, v20, ((char *)v20 - (_BYTE *)v19) >> 3);
      mlx::core::Slice::shared_buffer_slice((uint64_t)a1, (uint64_t)v3, (uint64_t **)&__p, v18, a3);
LABEL_14:
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = (uint64_t *)v19;
        operator delete(v19);
      }
      return;
    }
    v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*a3 + 60)
                                                                     * *(_QWORD *)(*a3 + 48)));
    v21[0] = &unk_2513463C8;
    v21[1] = mlx::core::allocator::free;
    v22 = v21;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v6, (uint64_t)v21);
    v7 = v22;
    if (v22 == v21)
    {
      v8 = 4;
      v7 = v21;
    }
    else
    {
      if (!v22)
      {
LABEL_13:
        v11 = *(uint64_t **)(*a3 + 24);
        v12 = *(uint64_t **)(*a3 + 32);
        v15 = 0;
        v16 = 0;
        __p = 0;
        std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)&__p, v11, v12, v12 - v11);
        mlx::core::copy_inplace<long long>((uint64_t)v3, (uint64_t **)a3, (int **)*a3, (uint64_t **)&v19, (uint64_t *)&__p, v18, 0, 2u, v13);
        goto LABEL_14;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_13;
  }
  v23[0] = &unk_2513463C8;
  v23[1] = mlx::core::allocator::free;
  v24 = v23;
  mlx::core::array::set_data((int ***)a3, 0, (uint64_t)v23);
  v9 = v24;
  if (v24 == v23)
  {
    v10 = 4;
    v9 = v23;
  }
  else
  {
    if (!v24)
      return;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
}

void sub_2422F6B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void mlx::core::SliceUpdate::eval(mlx::core::SliceUpdate *a1, uint64_t a2, mlx::core::array *this, float a4)
{
  int ***v4;
  int **v7;
  int *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int **v14;
  uint64_t *v15;
  uint64_t *v16;
  float v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22[3];
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(int ****)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 32)
    mlx::core::SliceUpdate::eval();
  if (*(_QWORD *)(*(_QWORD *)this + 48))
  {
    if (v4[2][6])
    {
      v7 = *v4;
      if (((_BYTE)(*v4)[21] & 1) != 0)
      {
        v12 = v7[6];
        v8 = v7[20];
        if (v12 == v8)
          v9 = 1;
        else
          v9 = 2;
      }
      else
      {
        v8 = v7[20];
        v9 = 2;
      }
      if (v8 == (int *)1)
        v13 = 0;
      else
        v13 = v9;
      mlx::core::copy(*(mlx::core::array **)a2, this, v13, a4);
      mlx::core::SliceUpdate::prepare_slice(a1, this, &v21);
      v14 = v4[2];
      v15 = (uint64_t *)v14[3];
      v16 = (uint64_t *)v14[4];
      __p = 0;
      v19 = 0;
      v20 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)&__p, v15, v16, v16 - v15);
      mlx::core::copy_inplace<long long>((uint64_t)(v4 + 2), (uint64_t **)this, v4[2], (uint64_t **)&__p, (uint64_t *)v22, 0, v21, 3u, v17);
      if (__p)
      {
        v19 = __p;
        operator delete(__p);
      }
      if (v22[0])
      {
        v22[1] = v22[0];
        operator delete(v22[0]);
      }
    }
    else
    {
      mlx::core::array::copy_shared_buffer(this, *(const mlx::core::array **)a2);
    }
  }
  else
  {
    v23[0] = &unk_2513463C8;
    v23[1] = mlx::core::allocator::free;
    v24 = v23;
    mlx::core::array::set_data((int ***)this, 0, (uint64_t)v23);
    v10 = v24;
    if (v24 == v23)
    {
      v11 = 4;
      v10 = v23;
    }
    else
    {
      if (!v24)
        return;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
}

void sub_2422F6D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

float mlx::core::Square::eval(int a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  int **v5;
  int *v6;
  char *v7;
  mlx::core::scheduler *v8;
  float result;
  void **v10;
  uint64_t v11;
  int *v12;
  mlx::core::scheduler *v13;
  void **v14;
  uint64_t v15;
  int *v16;
  mlx::core::scheduler *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  mlx::core::scheduler *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  mlx::core::scheduler *v25;
  void **v26;
  uint64_t v27;
  uint64_t *v28;
  mlx::core::scheduler *v29;
  void **v30;
  uint64_t v31;
  float *v32;
  mlx::core::scheduler *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  int *v40;
  int v41;
  unint64_t v42;
  int *v43;
  uint64_t v44;
  int *v45;
  char v46;
  unint64_t v47;
  int *v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float v54;
  int **v55;
  int *v56;
  int *v57;
  int *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  ldiv_t v66;
  int **v67;
  int *v68;
  int *v69;
  int *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  ldiv_t v78;
  unint64_t v79;
  int *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  ldiv_t v87;
  int **v88;
  int *v89;
  int *v90;
  int *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int quot;
  ldiv_t v99;
  unint64_t v100;
  int *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  ldiv_t v108;
  int **v109;
  int *v110;
  int *v111;
  int *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  ldiv_t v120;
  int **v121;
  int *v122;
  int *v123;
  int *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  ldiv_t v132;
  void *v133;
  uint64_t (*v134)(mlx::core::allocator *);
  void **v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Square::eval();
  v5 = *a3;
  v6 = (*a3)[7];
  switch((int)v6)
  {
    case 0:
      v7 = *(char **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v133);
        v10 = v135;
        if (v135 == &v133)
        {
          v11 = 4;
          v10 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_88;
          v11 = 5;
        }
        (*((void (**)(void))*v10 + v11))();
LABEL_88:
        v88 = *a3;
        v89 = (*a3)[6];
        if (v89)
        {
          v90 = 0;
          v91 = v88[19];
          v92 = *(uint64_t **)v3;
          v93 = *v92;
          v94 = ((unint64_t)(v92[1] - *v92) >> 2) - 1;
          do
          {
            v95 = 0;
            if ((v94 & 0x80000000) == 0)
            {
              v96 = v92[3];
              v97 = v94;
              quot = (int)v90;
              do
              {
                v99 = ldiv(quot, *(int *)(v93 + 4 * v97));
                quot = v99.quot;
                v95 += *(_QWORD *)(v96 + 8 * v97--) * v99.rem;
              }
              while (v97 != -1);
            }
            *((_BYTE *)v90 + (_QWORD)v91) = v7[(int)v95];
            v90 = (int *)((char *)v90 + 1);
          }
          while (v90 != v89);
        }
        return result;
      }
      v44 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v44)
      {
        v45 = (*a3)[19];
        do
        {
          v46 = *v7++;
          *(_BYTE *)v45 = v46;
          v45 = (int *)((char *)v45 + 1);
          --v44;
        }
        while (v44);
      }
      return result;
    case 1:
      v24 = *(_QWORD *)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v25 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v25, (uint64_t)&v133);
        v26 = v135;
        if (v135 == &v133)
        {
          v27 = 4;
          v26 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_97;
          v27 = 5;
        }
        (*((void (**)(void))*v26 + v27))();
LABEL_97:
        if ((*a3)[6])
        {
          v100 = 0;
          v101 = (*a3)[19];
          do
          {
            v102 = **(_QWORD **)v3;
            v103 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v102) >> 2;
            v104 = 0;
            v105 = (v103 - 1);
            if ((int)v103 - 1 >= 0)
            {
              v106 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v107 = v100;
              do
              {
                v108 = ldiv(v107, *(int *)(v102 + 4 * v105));
                v107 = v108.quot;
                v104 += *(_QWORD *)(v106 + 8 * v105--) * v108.rem;
              }
              while (v105 != -1);
            }
            *((_BYTE *)v101 + v100++) = *(_BYTE *)(v24 + (int)v104) * *(_BYTE *)(v24 + (int)v104);
          }
          while (v100 < (unint64_t)(*a3)[6]);
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v47 = 0;
        v48 = (*a3)[19];
        do
        {
          *((_BYTE *)v48 + v47) = *(_BYTE *)(v24 + v47) * *(_BYTE *)(v24 + v47);
          ++v47;
        }
        while (v47 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 2:
      v16 = *(int **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v17 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v17, (uint64_t)&v133);
        v18 = v135;
        if (v135 == &v133)
        {
          v19 = 4;
          v18 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_70;
          v19 = 5;
        }
        (*((void (**)(void))*v18 + v19))();
LABEL_70:
        v67 = *a3;
        v68 = (*a3)[6];
        if (v68)
        {
          v69 = 0;
          v70 = v67[19];
          v71 = *(uint64_t **)v3;
          v72 = *v71;
          v73 = ((unint64_t)(v71[1] - *v71) >> 2) - 1;
          do
          {
            v74 = 0;
            if ((v73 & 0x80000000) == 0)
            {
              v75 = v71[3];
              v76 = v73;
              v77 = (int)v69;
              do
              {
                v78 = ldiv(v77, *(int *)(v72 + 4 * v76));
                v77 = v78.quot;
                v74 += *(_QWORD *)(v75 + 8 * v76--) * v78.rem;
              }
              while (v76 != -1);
            }
            v70[(_QWORD)v69] = v16[(int)v74] * v16[(int)v74];
            v69 = (int *)((char *)v69 + 1);
          }
          while (v69 != v68);
        }
        return result;
      }
      v39 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v39)
      {
        v40 = (*a3)[19];
        do
        {
          v41 = *v16++;
          *v40++ = v41 * v41;
          --v39;
        }
        while (v39);
      }
      return result;
    case 3:
      v20 = *(_QWORD *)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v21, (uint64_t)&v133);
        v22 = v135;
        if (v135 == &v133)
        {
          v23 = 4;
          v22 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_79;
          v23 = 5;
        }
        (*((void (**)(void))*v22 + v23))();
LABEL_79:
        if ((*a3)[6])
        {
          v79 = 0;
          v80 = (*a3)[19];
          do
          {
            v81 = **(_QWORD **)v3;
            v82 = (unint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - v81) >> 2;
            v83 = 0;
            v84 = (v82 - 1);
            if ((int)v82 - 1 >= 0)
            {
              v85 = *(_QWORD *)(*(_QWORD *)v3 + 24);
              v86 = v79;
              do
              {
                v87 = ldiv(v86, *(int *)(v81 + 4 * v84));
                v86 = v87.quot;
                v83 += *(_QWORD *)(v85 + 8 * v84--) * v87.rem;
              }
              while (v84 != -1);
            }
            *((_BYTE *)v80 + v79++) = *(_BYTE *)(v20 + (int)v83) * *(_BYTE *)(v20 + (int)v83);
          }
          while (v79 < (unint64_t)(*a3)[6]);
        }
        return result;
      }
      if (*(_QWORD *)(*(_QWORD *)v3 + 160))
      {
        v42 = 0;
        v43 = (*a3)[19];
        do
        {
          *((_BYTE *)v43 + v42) = *(_BYTE *)(v20 + v42) * *(_BYTE *)(v20 + v42);
          ++v42;
        }
        while (v42 < *(_QWORD *)(*(_QWORD *)v3 + 160));
      }
      return result;
    case 4:
      v12 = *(int **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v13, (uint64_t)&v133);
        v14 = v135;
        if (v135 == &v133)
        {
          v15 = 4;
          v14 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_61;
          v15 = 5;
        }
        (*((void (**)(void))*v14 + v15))();
LABEL_61:
        v55 = *a3;
        v56 = (*a3)[6];
        if (v56)
        {
          v57 = 0;
          v58 = v55[19];
          v59 = *(uint64_t **)v3;
          v60 = *v59;
          v61 = ((unint64_t)(v59[1] - *v59) >> 2) - 1;
          do
          {
            v62 = 0;
            if ((v61 & 0x80000000) == 0)
            {
              v63 = v59[3];
              v64 = v61;
              v65 = (int)v57;
              do
              {
                v66 = ldiv(v65, *(int *)(v60 + 4 * v64));
                v65 = v66.quot;
                v62 += *(_QWORD *)(v63 + 8 * v64--) * v66.rem;
              }
              while (v64 != -1);
            }
            v58[(_QWORD)v57] = v12[(int)v62] * v12[(int)v62];
            v57 = (int *)((char *)v57 + 1);
          }
          while (v57 != v56);
        }
        return result;
      }
      v36 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v36)
      {
        v37 = (*a3)[19];
        do
        {
          v38 = *v12++;
          *v37++ = v38 * v38;
          --v36;
        }
        while (v36);
      }
      return result;
    case 5:
      v28 = *(uint64_t **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v29 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v29, (uint64_t)&v133);
        v30 = v135;
        if (v135 == &v133)
        {
          v31 = 4;
          v30 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_106;
          v31 = 5;
        }
        (*((void (**)(void))*v30 + v31))();
LABEL_106:
        v109 = *a3;
        v110 = (*a3)[6];
        if (v110)
        {
          v111 = 0;
          v112 = v109[19];
          v113 = *(uint64_t **)v3;
          v114 = *v113;
          v115 = ((unint64_t)(v113[1] - *v113) >> 2) - 1;
          do
          {
            v116 = 0;
            if ((v115 & 0x80000000) == 0)
            {
              v117 = v113[3];
              v118 = v115;
              v119 = (int)v111;
              do
              {
                v120 = ldiv(v119, *(int *)(v114 + 4 * v118));
                v119 = v120.quot;
                v116 += *(_QWORD *)(v117 + 8 * v118--) * v120.rem;
              }
              while (v118 != -1);
            }
            *(_QWORD *)&v112[2 * (_QWORD)v111] = v28[(int)v116] * v28[(int)v116];
            v111 = (int *)((char *)v111 + 1);
          }
          while (v111 != v110);
        }
        return result;
      }
      v49 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v49)
      {
        v50 = (*a3)[19];
        do
        {
          v51 = *v28++;
          *(_QWORD *)v50 = v51 * v51;
          v50 += 2;
          --v49;
        }
        while (v49);
      }
      return result;
    case 6:
      v32 = *(float **)(*(_QWORD *)v3 + 152);
      if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
      {
        v33 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v5[6] * BYTE4(v6)));
        v133 = &unk_2513463C8;
        v134 = mlx::core::allocator::free;
        v135 = &v133;
        mlx::core::array::set_data(a3, (uint64_t)v33, (uint64_t)&v133);
        v34 = v135;
        if (v135 == &v133)
        {
          v35 = 4;
          v34 = &v133;
        }
        else
        {
          if (!v135)
            goto LABEL_115;
          v35 = 5;
        }
        (*((void (**)(void))*v34 + v35))();
LABEL_115:
        v121 = *a3;
        v122 = (*a3)[6];
        if (v122)
        {
          v123 = 0;
          v124 = v121[19];
          v125 = *(uint64_t **)v3;
          v126 = *v125;
          v127 = ((unint64_t)(v125[1] - *v125) >> 2) - 1;
          do
          {
            v128 = 0;
            if ((v127 & 0x80000000) == 0)
            {
              v129 = v125[3];
              v130 = v127;
              v131 = (int)v123;
              do
              {
                v132 = ldiv(v131, *(int *)(v126 + 4 * v130));
                v131 = v132.quot;
                v128 += *(_QWORD *)(v129 + 8 * v130--) * v132.rem;
              }
              while (v130 != -1);
            }
            result = v32[(int)v128] * v32[(int)v128];
            *(float *)&v124[(_QWORD)v123] = result;
            v123 = (int *)((char *)v123 + 1);
          }
          while (v123 != v122);
        }
        return result;
      }
      v52 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v52)
      {
        v53 = (float *)(*a3)[19];
        do
        {
          v54 = *v32++;
          result = v54 * v54;
          *v53++ = v54 * v54;
          --v52;
        }
        while (v52);
      }
      return result;
    default:
      return result;
  }
}

void sub_2422F7720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Sqrt::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  float *v11;
  mlx::core::scheduler *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  uint64_t v18;
  float *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  ldiv_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int quot;
  ldiv_t v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  void *exception;
  _QWORD v49[3];
  void *v50;
  _QWORD v51[2];
  void **v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sqrt::eval();
  v5 = *(_QWORD *)a3;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 56);
  if (!*(_BYTE *)(a1 + 20))
  {
    if (v6 != 6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v50);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"[unary_fp] Does not support ", 28);
      v49[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
      mlx::core::operator<<(v47, v49);
      exception = __cxa_allocate_exception(0x10uLL);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51, v49);
      MEMORY[0x2426A8084](exception, v49);
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    v11 = *(float **)(*(_QWORD *)v3 + 152);
    if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      if (v18)
      {
        v19 = *(float **)(*(_QWORD *)a3 + 152);
        do
        {
          v20 = *v11++;
          *v19++ = sqrtf(v20);
          --v18;
        }
        while (v18);
      }
      return;
    }
    v12 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v5 + 48) * BYTE4(v6)));
    v50 = &unk_2513463C8;
    v51[0] = mlx::core::allocator::free;
    v52 = &v50;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v12, (uint64_t)&v50);
    v13 = v52;
    if (v52 == &v50)
    {
      v14 = 4;
      v13 = &v50;
    }
    else
    {
      if (!v52)
        goto LABEL_34;
      v14 = 5;
    }
    (*((void (**)(void))*v13 + v14))();
LABEL_34:
    v33 = *(_QWORD *)a3;
    v34 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v34)
    {
      v35 = 0;
      v36 = *(_QWORD *)(v33 + 152);
      v37 = *(uint64_t **)v3;
      v38 = *v37;
      v39 = ((unint64_t)(v37[1] - *v37) >> 2) - 1;
      do
      {
        v40 = 0;
        if ((v39 & 0x80000000) == 0)
        {
          v41 = v37[3];
          v42 = v39;
          quot = v35;
          do
          {
            v44 = ldiv(quot, *(int *)(v38 + 4 * v42));
            quot = v44.quot;
            v40 += *(_QWORD *)(v41 + 8 * v42--) * v44.rem;
          }
          while (v42 != -1);
        }
        *(float *)(v36 + 4 * v35++) = sqrtf(v11[(int)v40]);
      }
      while (v35 != v34);
    }
    return;
  }
  if (v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v50);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"[unary_fp] Does not support ", 28);
    v49[0] = *(_QWORD *)(*(_QWORD *)a3 + 56);
    mlx::core::operator<<(v45, v49);
    v46 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51, v49);
    MEMORY[0x2426A8084](v46, v49);
    __cxa_throw(v46, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(_QWORD *)(v5 + 48) * BYTE4(v6)));
    v50 = &unk_2513463C8;
    v51[0] = mlx::core::allocator::free;
    v52 = &v50;
    mlx::core::array::set_data((int ***)a3, (uint64_t)v8, (uint64_t)&v50);
    v9 = v52;
    if (v52 == &v50)
    {
      v10 = 4;
      v9 = &v50;
    }
    else
    {
      if (!v52)
        goto LABEL_25;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_25:
    v21 = *(_QWORD *)a3;
    v22 = *(_QWORD *)(*(_QWORD *)a3 + 48);
    if (v22)
    {
      v23 = 0;
      v24 = *(_QWORD *)(v21 + 152);
      v25 = *(uint64_t **)v3;
      v26 = *v25;
      v27 = ((unint64_t)(v25[1] - *v25) >> 2) - 1;
      do
      {
        v28 = 0;
        if ((v27 & 0x80000000) == 0)
        {
          v29 = v25[3];
          v30 = v27;
          v31 = v23;
          do
          {
            v32 = ldiv(v31, *(int *)(v26 + 4 * v30));
            v31 = v32.quot;
            v28 += *(_QWORD *)(v29 + 8 * v30--) * v32.rem;
          }
          while (v30 != -1);
        }
        *(float *)(v24 + 4 * v23++) = 1.0 / sqrtf(v7[(int)v28]);
      }
      while (v23 != v22);
    }
    return;
  }
  v15 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v15)
  {
    v16 = *(float **)(*(_QWORD *)a3 + 152);
    do
    {
      v17 = *v7++;
      *v16++ = 1.0 / sqrtf(v17);
      --v15;
    }
    while (v15);
  }
}

void sub_2422F7B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Tan::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Tan::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tan] Cannot compute tangent of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = tanf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = tanf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422F7EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void mlx::core::Tanh::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::_anonymous_namespace_ *v3;
  mlx::core::array *v5;
  int *v6;
  float *v7;
  mlx::core::scheduler *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  int **v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int quot;
  ldiv_t v25;
  std::logic_error *exception;
  _QWORD *v27;
  void *v28;
  _QWORD v29[3];
  int *v30;
  uint64_t (*v31[2])(mlx::core::allocator *);
  void **v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::_anonymous_namespace_ **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Tanh::eval();
  v30 = (*a3)[7];
  if (!mlx::core::issubdtype((unsigned int *)&v30, &mlx::core::inexact))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[tanh] Cannot compute hyperbolic tangent of elements in array with non floating point type.");
    __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
  }
  v6 = (*a3)[7];
  if ((_DWORD)v6 != 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"[unary_fp] Does not support ", 28);
    v29[0] = (*a3)[7];
    mlx::core::operator<<(v27, v29);
    v28 = __cxa_allocate_exception(0x10uLL);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v31, v29);
    MEMORY[0x2426A8084](v28, v29);
    __cxa_throw(v28, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = *(float **)(*(_QWORD *)v3 + 152);
  if ((*(_BYTE *)(*(_QWORD *)v3 + 168) & 1) == 0)
  {
    v8 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)(*a3)[6] * BYTE4(v6)));
    v30 = (int *)&unk_2513463C8;
    v31[0] = mlx::core::allocator::free;
    v32 = (void **)&v30;
    mlx::core::array::set_data(a3, (uint64_t)v8, (uint64_t)&v30);
    v9 = v32;
    if (v32 == (void **)&v30)
    {
      v10 = 4;
      v9 = (void **)&v30;
    }
    else
    {
      if (!v32)
        goto LABEL_14;
      v10 = 5;
    }
    (*((void (**)(void))*v9 + v10))();
LABEL_14:
    v14 = *a3;
    v15 = (*a3)[6];
    if (v15)
    {
      v16 = 0;
      v17 = v14[19];
      v18 = *(uint64_t **)v3;
      v19 = *v18;
      v20 = ((unint64_t)(v18[1] - *v18) >> 2) - 1;
      do
      {
        v21 = 0;
        if ((v20 & 0x80000000) == 0)
        {
          v22 = v18[3];
          v23 = v20;
          quot = (int)v16;
          do
          {
            v25 = ldiv(quot, *(int *)(v19 + 4 * v23));
            quot = v25.quot;
            v21 += *(_QWORD *)(v22 + 8 * v23--) * v25.rem;
          }
          while (v23 != -1);
        }
        *(float *)&v17[(_QWORD)v16] = tanhf(v7[(int)v21]);
        v16 = (int *)((char *)v16 + 1);
      }
      while (v16 != v15);
    }
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  if (v11)
  {
    v12 = (float *)(*a3)[19];
    do
    {
      v13 = *v7++;
      *v12++ = tanhf(v13);
      --v11;
    }
    while (v11);
  }
}

void sub_2422F81F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251345D08, MEMORY[0x24BEDAAF0]);
}

void sub_2422F82F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void std::vector<int>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251345D10, MEMORY[0x24BEDAB00]);
}

void sub_2422F83D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2422F8468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2422F8554(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        mlx::core::array::~array((mlx::core::array *)(v4 - 16));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_2422F8674(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long *>,std::__wrap_iter<long long *>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_2422F86E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::~__func()
{
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_2513463C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_2513463C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void (*)(mlx::core::allocator::Buffer),std::allocator<void (*)(mlx::core::allocator::Buffer)>,void ()(mlx::core::allocator::Buffer)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void mlx::core::`anonymous namespace'::set_unary_output_data(mlx::core::_anonymous_namespace_ *this, const mlx::core::array *a2, mlx::core::array *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  mlx::core::scheduler *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 __p;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD **)this;
    if (!v6)
    {
      v8 = v7[18];
      if (v8)
      {
        if (!*(_QWORD *)(v8 + 8) && ((*(_QWORD *)(*(_QWORD *)a2 + 56) ^ v7[7]) & 0xFF00000000) == 0)
        {
          mlx::core::array::copy_shared_buffer(a2, this);
          return;
        }
      }
    }
  }
  else
  {
    v7 = *(_QWORD **)this;
  }
  v9 = v7[20];
  v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)a2 + 60) * v9));
  v11 = *(_QWORD *)this;
  v16 = 0;
  __p = 0uLL;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v11 + 24), *(_QWORD *)(v11 + 32), (uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 3);
  v12 = *(_BYTE *)(*(_QWORD *)this + 168);
  v17[0] = &unk_2513463C8;
  v17[1] = mlx::core::allocator::free;
  v18 = v17;
  mlx::core::array::set_data((uint64_t *)a2, (uint64_t)v10, v9, &__p, v12, (uint64_t)v17);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_13;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_13:
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  mlx::core::scheduler *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 __p;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD **)this;
    if (!v6)
    {
      v8 = v7[18];
      if (v8)
      {
        if (!*(_QWORD *)(v8 + 8) && ((*(_QWORD *)(*(_QWORD *)a2 + 56) ^ v7[7]) & 0xFF00000000) == 0)
        {
          mlx::core::array::copy_shared_buffer(a2, this);
          return;
        }
      }
    }
  }
  else
  {
    v7 = *(_QWORD **)this;
  }
  v9 = v7[20];
  v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)a2 + 60) * v9));
  v11 = *(_QWORD *)this;
  v16 = 0;
  __p = 0uLL;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v11 + 24), *(_QWORD *)(v11 + 32), (uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 3);
  v12 = *(_BYTE *)(*(_QWORD *)this + 168);
  v17[0] = &unk_2513463C8;
  v17[1] = mlx::core::allocator::free;
  v18 = v17;
  mlx::core::array::set_data((uint64_t *)a2, (uint64_t)v10, v9, &__p, v12, (uint64_t)v17);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_13;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_13:
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_2422F8994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_2422F8AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x2426A8294](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2426A8294](a1 + 112);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x2426A80B4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x2426A80C0](v13);
  return a1;
}

void sub_2422F8C54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x2426A80C0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2422F8C34);
}

void sub_2422F8C9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_2422F8DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<mlx::core::Primitive>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

float mlx::core::detail::Erf::operator()<float>(int8x16_t a1)
{
  float v1;
  float v2;
  int8x16_t v3;
  int8x16_t v4;
  float result;

  v1 = fabsf(*(float *)a1.i32);
  v2 = *(float *)a1.i32 * *(float *)a1.i32;
  if (v1 <= 0.92773)
    return *(float *)a1.i32
         + (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v2 * -0.00059676)
                                                                                         + 0.0049912)
                                                                                 * v2)
                                                                         + -0.026768)
                                                                 * v2)
                                                         + 0.11282)
                                                 * v2)
                                         + -0.37613)
                                 * v2)
                         + 0.12838)
                 * *(float *)a1.i32);
  *(float *)v3.i32 = 1.0
                   - expf(-(float)(v1
                                 - (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v1 * -0.003884) + 0.024255)
                                                                                                 + (float)((float)((float)(v1 * -0.000017285) + 0.0003832) * v2))
                                                                                         * v1)
                                                                                 + -0.10678)
                                                                         * v1)
                                                                 + -0.63485)
                                                         * v1)
                                                 + -0.12872)
                                         * v1)));
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  LODWORD(result) = vbslq_s8(v4, v3, a1).u32[0];
  return result;
}

float mlx::core::detail::ErfInv::operator()<float>(float a1)
{
  float v2;
  float v3;
  float v4;

  v2 = logf((float)(a1 * (float)(0.0 - a1)) + 1.0);
  if (fabsf(v2) <= 6.125)
  {
    v3 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v2 * 0.0000000054388) + 0.00000014329) * v2) + 0.0000012277)
                                                                                               * v2)
                                                                                       + 0.00000011296)
                                                                               * v2)
                                                                       + -0.000056153)
                                                               * v2)
                                                       + -0.0001477)
                                               * v2)
                                       + 0.0023147)
                               * v2)
                       + 0.011539)
               * v2)
       + -0.23202;
    v4 = 0.88623;
  }
  else
  {
    v3 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v2 * 3.037e-10) + 0.000000029324)
                                                                                               * v2)
                                                                                       + 0.0000012215)
                                                                               * v2)
                                                                       + 0.000028411)
                                                               * v2)
                                                       + 0.00039355)
                                               * v2)
                                       + 0.003027)
                               * v2)
                       + 0.0048319)
               * v2)
       + -0.26465;
    v4 = 0.84002;
  }
  return (float)(v4 + (float)(v3 * v2)) * a1;
}

float mlx::core::detail::Exp::operator()<float>(float a1)
{
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = 0.0;
  if (a1 != -INFINITY)
  {
    v1 = a1;
    if (a1 != INFINITY)
    {
      v2 = a1 * 1.442695;
      if (v2 > 80.0)
        v2 = 80.0;
      v3 = fmaxf(v2, -80.0);
      v4 = floor(v3 + 0.5);
      return (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v3 - v4) * 0.00015353) + 0.0013399)
                                                                                           * (float)(v3 - v4))
                                                                                   + 0.0096184)
                                                                           * (float)(v3 - v4))
                                                                   + 0.055503)
                                                           * (float)(v3 - v4))
                                                   + 0.24023)
                                           * (float)(v3 - v4))
                                   + 0.69315)
                           * (float)(v3 - v4))
                   + 1.0)
           * COERCE_FLOAT(((int)v4 << 23) + 1065353216);
    }
  }
  return v1;
}

uint64_t mlx::core::`anonymous namespace'::get_binary_op_type(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 160);
  if (*(_QWORD *)(*a1 + 160) == 1)
  {
    if (v4 == 1)
      return 0;
    if ((*(_BYTE *)(v3 + 168) & 1) != 0)
      return 1;
  }
  else if (v4 == 1)
  {
    v6 = *(_BYTE *)(v2 + 168);
    if ((v6 & 1) != 0)
      return 2;
    goto LABEL_9;
  }
  v6 = *(_BYTE *)(v2 + 168);
LABEL_9:
  if ((v6 & 2) != 0 && (*(_BYTE *)(v3 + 168) & 2) != 0 || (v6 & 4) != 0 && (*(_BYTE *)(v3 + 168) & 4) != 0)
    return 3;
  else
    return 4;
}

void mlx::core::`anonymous namespace'::set_binary_op_output_data(const mlx::core::array *a1, mlx::core::array *a2, mlx::core::array *this, int a4)
{
  mlx::core::scheduler *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mlx::core::scheduler *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  mlx::core::scheduler *v30;
  _QWORD *v31;
  uint64_t v32;
  mlx::core::scheduler *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  mlx::core::scheduler *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 __p;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  switch(a4)
  {
    case 0:
      v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)*(unsigned __int8 *)(*(_QWORD *)this + 60));
      v8 = *(_QWORD *)a1;
      v59 = 0;
      v58 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v58, *(const void **)(v8 + 24), *(_QWORD *)(v8 + 32), (uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 3);
      v9 = *(_BYTE *)(*(_QWORD *)a1 + 168);
      v68[0] = &unk_2513463C8;
      v68[1] = mlx::core::allocator::free;
      v69 = v68;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v7, 1, &v58, v9, (uint64_t)v68);
      v10 = v69;
      if (v69 == v68)
      {
        v11 = 4;
        v10 = v68;
      }
      else
      {
        if (!v69)
          goto LABEL_41;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_41:
      v45 = (void *)v58.n128_u64[0];
      if (v58.n128_u64[0])
      {
        v58.n128_u64[1] = v58.n128_u64[0];
        goto LABEL_57;
      }
      return;
    case 1:
      v12 = *((_QWORD *)a2 + 1);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        v14 = *(_QWORD **)a2;
        if (!v13)
        {
          v15 = v14[18];
          if (v15)
          {
            if (!*(_QWORD *)(v15 + 8) && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ v14[7]) & 0xFF00000000) == 0)
              goto LABEL_78;
          }
        }
      }
      else
      {
        v14 = *(_QWORD **)a2;
      }
      v33 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * v14[20]));
      v34 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(*(_QWORD *)a2 + 160);
      v57 = 0;
      v56 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v56, *(const void **)(v34 + 24), *(_QWORD *)(v34 + 32), (uint64_t)(*(_QWORD *)(v34 + 32) - *(_QWORD *)(v34 + 24)) >> 3);
      v36 = *(_BYTE *)(*(_QWORD *)a2 + 168);
      v66[0] = &unk_2513463C8;
      v66[1] = mlx::core::allocator::free;
      v67 = v66;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v33, v35, &v56, v36, (uint64_t)v66);
      v37 = v67;
      if (v67 == v66)
      {
        v38 = 4;
        v37 = v66;
      }
      else
      {
        if (!v67)
          goto LABEL_47;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_47:
      v45 = (void *)v56.n128_u64[0];
      if (v56.n128_u64[0])
      {
        v56.n128_u64[1] = v56.n128_u64[0];
        goto LABEL_57;
      }
      return;
    case 2:
      v16 = *((_QWORD *)a1 + 1);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        v18 = *(_QWORD **)a1;
        if (!v17)
        {
          v19 = v18[18];
          if (v19)
          {
            if (!*(_QWORD *)(v19 + 8) && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ v18[7]) & 0xFF00000000) == 0)
              goto LABEL_62;
          }
        }
      }
      else
      {
        v18 = *(_QWORD **)a1;
      }
      v39 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * v18[20]));
      v40 = *(_QWORD *)a1;
      v41 = *(_QWORD *)(*(_QWORD *)a1 + 160);
      v55 = 0;
      v54 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v54, *(const void **)(v40 + 24), *(_QWORD *)(v40 + 32), (uint64_t)(*(_QWORD *)(v40 + 32) - *(_QWORD *)(v40 + 24)) >> 3);
      v42 = *(_BYTE *)(*(_QWORD *)a1 + 168);
      v64[0] = &unk_2513463C8;
      v64[1] = mlx::core::allocator::free;
      v65 = v64;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v39, v41, &v54, v42, (uint64_t)v64);
      v43 = v65;
      if (v65 == v64)
      {
        v44 = 4;
        v43 = v64;
      }
      else
      {
        if (!v65)
          goto LABEL_51;
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_51:
      v45 = (void *)v54.n128_u64[0];
      if (v54.n128_u64[0])
      {
        v54.n128_u64[1] = v54.n128_u64[0];
        goto LABEL_57;
      }
      return;
    case 3:
      v20 = *((_QWORD *)a1 + 1);
      if (v20)
      {
        if (!*(_QWORD *)(v20 + 8))
        {
          v46 = *(_QWORD *)(*(_QWORD *)a1 + 144);
          if (v46)
          {
            if (!*(_QWORD *)(v46 + 8)
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(*(_QWORD *)a1 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_62;
            }
          }
        }
      }
      v21 = *((_QWORD *)a2 + 1);
      if (v21)
      {
        if (!*(_QWORD *)(v21 + 8))
        {
          v51 = *(_QWORD *)(*(_QWORD *)a2 + 144);
          if (v51)
          {
            if (!*(_QWORD *)(v51 + 8)
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(*(_QWORD *)a2 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_78;
            }
          }
        }
      }
      v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * *(_QWORD *)(*(_QWORD *)a1 + 160)));
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD *)(*(_QWORD *)a1 + 160);
      v53 = 0;
      __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v23 + 24), *(_QWORD *)(v23 + 32), (uint64_t)(*(_QWORD *)(v23 + 32) - *(_QWORD *)(v23 + 24)) >> 3);
      v25 = *(_BYTE *)(*(_QWORD *)a1 + 168);
      v62[0] = &unk_2513463C8;
      v62[1] = mlx::core::allocator::free;
      v63 = v62;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v22, v24, &__p, v25, (uint64_t)v62);
      v26 = v63;
      if (v63 == v62)
      {
        v27 = 4;
        v26 = v62;
      }
      else
      {
        if (!v63)
          goto LABEL_55;
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_55:
      v45 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
LABEL_57:
        operator delete(v45);
      }
      return;
    case 4:
      v28 = *((_QWORD *)a1 + 1);
      if (v28)
      {
        if (!*(_QWORD *)(v28 + 8))
        {
          v47 = *(_QWORD *)a1;
          v48 = *(_QWORD *)(*(_QWORD *)a1 + 144);
          if (v48)
          {
            if (!*(_QWORD *)(v48 + 8)
              && (*(_BYTE *)(v47 + 168) & 2) != 0
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(v47 + 56)) & 0xFF00000000) == 0
              && *(_QWORD *)(v47 + 48) == *(_QWORD *)(*(_QWORD *)this + 48))
            {
LABEL_62:
              mlx::core::array::copy_shared_buffer(this, a1);
              return;
            }
          }
        }
      }
      v29 = *((_QWORD *)a2 + 1);
      if (v29)
      {
        if (!*(_QWORD *)(v29 + 8))
        {
          v49 = *(_QWORD *)a2;
          v50 = *(_QWORD *)(*(_QWORD *)a2 + 144);
          if (v50)
          {
            if (!*(_QWORD *)(v50 + 8)
              && (*(_BYTE *)(v49 + 168) & 2) != 0
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(v49 + 56)) & 0xFF00000000) == 0
              && *(_QWORD *)(v49 + 48) == *(_QWORD *)(*(_QWORD *)this + 48))
            {
LABEL_78:
              mlx::core::array::copy_shared_buffer(this, a2);
              return;
            }
          }
        }
      }
      v30 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * *(_QWORD *)(*(_QWORD *)this + 48)));
      v60[0] = &unk_2513463C8;
      v60[1] = mlx::core::allocator::free;
      v61 = v60;
      mlx::core::array::set_data((int ***)this, (uint64_t)v30, (uint64_t)v60);
      v31 = v61;
      if (v61 == v60)
      {
        v32 = 4;
        v31 = v60;
        goto LABEL_44;
      }
      if (v61)
      {
        v32 = 5;
LABEL_44:
        (*(void (**)(void))(*v31 + 8 * v32))();
      }
      return;
    default:
      return;
  }
}

{
  mlx::core::scheduler *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mlx::core::scheduler *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  mlx::core::scheduler *v30;
  _QWORD *v31;
  uint64_t v32;
  mlx::core::scheduler *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  mlx::core::scheduler *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 __p;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  switch(a4)
  {
    case 0:
      v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)*(unsigned __int8 *)(*(_QWORD *)this + 60));
      v8 = *(_QWORD *)a1;
      v59 = 0;
      v58 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v58, *(const void **)(v8 + 24), *(_QWORD *)(v8 + 32), (uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 3);
      v9 = *(_BYTE *)(*(_QWORD *)a1 + 168);
      v68[0] = &unk_2513463C8;
      v68[1] = mlx::core::allocator::free;
      v69 = v68;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v7, 1, &v58, v9, (uint64_t)v68);
      v10 = v69;
      if (v69 == v68)
      {
        v11 = 4;
        v10 = v68;
      }
      else
      {
        if (!v69)
          goto LABEL_41;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_41:
      v45 = (void *)v58.n128_u64[0];
      if (v58.n128_u64[0])
      {
        v58.n128_u64[1] = v58.n128_u64[0];
        goto LABEL_57;
      }
      return;
    case 1:
      v12 = *((_QWORD *)a2 + 1);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        v14 = *(_QWORD **)a2;
        if (!v13)
        {
          v15 = v14[18];
          if (v15)
          {
            if (!*(_QWORD *)(v15 + 8) && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ v14[7]) & 0xFF00000000) == 0)
              goto LABEL_78;
          }
        }
      }
      else
      {
        v14 = *(_QWORD **)a2;
      }
      v33 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * v14[20]));
      v34 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(*(_QWORD *)a2 + 160);
      v57 = 0;
      v56 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v56, *(const void **)(v34 + 24), *(_QWORD *)(v34 + 32), (uint64_t)(*(_QWORD *)(v34 + 32) - *(_QWORD *)(v34 + 24)) >> 3);
      v36 = *(_BYTE *)(*(_QWORD *)a2 + 168);
      v66[0] = &unk_2513463C8;
      v66[1] = mlx::core::allocator::free;
      v67 = v66;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v33, v35, &v56, v36, (uint64_t)v66);
      v37 = v67;
      if (v67 == v66)
      {
        v38 = 4;
        v37 = v66;
      }
      else
      {
        if (!v67)
          goto LABEL_47;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_47:
      v45 = (void *)v56.n128_u64[0];
      if (v56.n128_u64[0])
      {
        v56.n128_u64[1] = v56.n128_u64[0];
        goto LABEL_57;
      }
      return;
    case 2:
      v16 = *((_QWORD *)a1 + 1);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        v18 = *(_QWORD **)a1;
        if (!v17)
        {
          v19 = v18[18];
          if (v19)
          {
            if (!*(_QWORD *)(v19 + 8) && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ v18[7]) & 0xFF00000000) == 0)
              goto LABEL_62;
          }
        }
      }
      else
      {
        v18 = *(_QWORD **)a1;
      }
      v39 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * v18[20]));
      v40 = *(_QWORD *)a1;
      v41 = *(_QWORD *)(*(_QWORD *)a1 + 160);
      v55 = 0;
      v54 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v54, *(const void **)(v40 + 24), *(_QWORD *)(v40 + 32), (uint64_t)(*(_QWORD *)(v40 + 32) - *(_QWORD *)(v40 + 24)) >> 3);
      v42 = *(_BYTE *)(*(_QWORD *)a1 + 168);
      v64[0] = &unk_2513463C8;
      v64[1] = mlx::core::allocator::free;
      v65 = v64;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v39, v41, &v54, v42, (uint64_t)v64);
      v43 = v65;
      if (v65 == v64)
      {
        v44 = 4;
        v43 = v64;
      }
      else
      {
        if (!v65)
          goto LABEL_51;
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_51:
      v45 = (void *)v54.n128_u64[0];
      if (v54.n128_u64[0])
      {
        v54.n128_u64[1] = v54.n128_u64[0];
        goto LABEL_57;
      }
      return;
    case 3:
      v20 = *((_QWORD *)a1 + 1);
      if (v20)
      {
        if (!*(_QWORD *)(v20 + 8))
        {
          v46 = *(_QWORD *)(*(_QWORD *)a1 + 144);
          if (v46)
          {
            if (!*(_QWORD *)(v46 + 8)
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(*(_QWORD *)a1 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_62;
            }
          }
        }
      }
      v21 = *((_QWORD *)a2 + 1);
      if (v21)
      {
        if (!*(_QWORD *)(v21 + 8))
        {
          v51 = *(_QWORD *)(*(_QWORD *)a2 + 144);
          if (v51)
          {
            if (!*(_QWORD *)(v51 + 8)
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(*(_QWORD *)a2 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_78;
            }
          }
        }
      }
      v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * *(_QWORD *)(*(_QWORD *)a1 + 160)));
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD *)(*(_QWORD *)a1 + 160);
      v53 = 0;
      __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v23 + 24), *(_QWORD *)(v23 + 32), (uint64_t)(*(_QWORD *)(v23 + 32) - *(_QWORD *)(v23 + 24)) >> 3);
      v25 = *(_BYTE *)(*(_QWORD *)a1 + 168);
      v62[0] = &unk_2513463C8;
      v62[1] = mlx::core::allocator::free;
      v63 = v62;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v22, v24, &__p, v25, (uint64_t)v62);
      v26 = v63;
      if (v63 == v62)
      {
        v27 = 4;
        v26 = v62;
      }
      else
      {
        if (!v63)
          goto LABEL_55;
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_55:
      v45 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
LABEL_57:
        operator delete(v45);
      }
      return;
    case 4:
      v28 = *((_QWORD *)a1 + 1);
      if (v28)
      {
        if (!*(_QWORD *)(v28 + 8))
        {
          v47 = *(_QWORD *)a1;
          v48 = *(_QWORD *)(*(_QWORD *)a1 + 144);
          if (v48)
          {
            if (!*(_QWORD *)(v48 + 8)
              && (*(_BYTE *)(v47 + 168) & 2) != 0
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(v47 + 56)) & 0xFF00000000) == 0
              && *(_QWORD *)(v47 + 48) == *(_QWORD *)(*(_QWORD *)this + 48))
            {
LABEL_62:
              mlx::core::array::copy_shared_buffer(this, a1);
              return;
            }
          }
        }
      }
      v29 = *((_QWORD *)a2 + 1);
      if (v29)
      {
        if (!*(_QWORD *)(v29 + 8))
        {
          v49 = *(_QWORD *)a2;
          v50 = *(_QWORD *)(*(_QWORD *)a2 + 144);
          if (v50)
          {
            if (!*(_QWORD *)(v50 + 8)
              && (*(_BYTE *)(v49 + 168) & 2) != 0
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(v49 + 56)) & 0xFF00000000) == 0
              && *(_QWORD *)(v49 + 48) == *(_QWORD *)(*(_QWORD *)this + 48))
            {
LABEL_78:
              mlx::core::array::copy_shared_buffer(this, a2);
              return;
            }
          }
        }
      }
      v30 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * *(_QWORD *)(*(_QWORD *)this + 48)));
      v60[0] = &unk_2513463C8;
      v60[1] = mlx::core::allocator::free;
      v61 = v60;
      mlx::core::array::set_data((int ***)this, (uint64_t)v30, (uint64_t)v60);
      v31 = v61;
      if (v61 == v60)
      {
        v32 = 4;
        v31 = v60;
        goto LABEL_44;
      }
      if (v61)
      {
        v32 = 5;
LABEL_44:
        (*(void (**)(void))(*v31 + 8 * v32))();
      }
      return;
    default:
      return;
  }
}

{
  mlx::core::scheduler *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mlx::core::scheduler *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  mlx::core::scheduler *v30;
  _QWORD *v31;
  uint64_t v32;
  mlx::core::scheduler *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  mlx::core::scheduler *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 __p;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  switch(a4)
  {
    case 0:
      v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)*(unsigned __int8 *)(*(_QWORD *)this + 60));
      v8 = *(_QWORD *)a1;
      v59 = 0;
      v58 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v58, *(const void **)(v8 + 24), *(_QWORD *)(v8 + 32), (uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 3);
      v9 = *(_BYTE *)(*(_QWORD *)a1 + 168);
      v68[0] = &unk_2513463C8;
      v68[1] = mlx::core::allocator::free;
      v69 = v68;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v7, 1, &v58, v9, (uint64_t)v68);
      v10 = v69;
      if (v69 == v68)
      {
        v11 = 4;
        v10 = v68;
      }
      else
      {
        if (!v69)
          goto LABEL_41;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_41:
      v45 = (void *)v58.n128_u64[0];
      if (v58.n128_u64[0])
      {
        v58.n128_u64[1] = v58.n128_u64[0];
        goto LABEL_57;
      }
      return;
    case 1:
      v12 = *((_QWORD *)a2 + 1);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        v14 = *(_QWORD **)a2;
        if (!v13)
        {
          v15 = v14[18];
          if (v15)
          {
            if (!*(_QWORD *)(v15 + 8) && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ v14[7]) & 0xFF00000000) == 0)
              goto LABEL_78;
          }
        }
      }
      else
      {
        v14 = *(_QWORD **)a2;
      }
      v33 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * v14[20]));
      v34 = *(_QWORD *)a2;
      v35 = *(_QWORD *)(*(_QWORD *)a2 + 160);
      v57 = 0;
      v56 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v56, *(const void **)(v34 + 24), *(_QWORD *)(v34 + 32), (uint64_t)(*(_QWORD *)(v34 + 32) - *(_QWORD *)(v34 + 24)) >> 3);
      v36 = *(_BYTE *)(*(_QWORD *)a2 + 168);
      v66[0] = &unk_2513463C8;
      v66[1] = mlx::core::allocator::free;
      v67 = v66;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v33, v35, &v56, v36, (uint64_t)v66);
      v37 = v67;
      if (v67 == v66)
      {
        v38 = 4;
        v37 = v66;
      }
      else
      {
        if (!v67)
          goto LABEL_47;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_47:
      v45 = (void *)v56.n128_u64[0];
      if (v56.n128_u64[0])
      {
        v56.n128_u64[1] = v56.n128_u64[0];
        goto LABEL_57;
      }
      return;
    case 2:
      v16 = *((_QWORD *)a1 + 1);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        v18 = *(_QWORD **)a1;
        if (!v17)
        {
          v19 = v18[18];
          if (v19)
          {
            if (!*(_QWORD *)(v19 + 8) && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ v18[7]) & 0xFF00000000) == 0)
              goto LABEL_62;
          }
        }
      }
      else
      {
        v18 = *(_QWORD **)a1;
      }
      v39 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * v18[20]));
      v40 = *(_QWORD *)a1;
      v41 = *(_QWORD *)(*(_QWORD *)a1 + 160);
      v55 = 0;
      v54 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v54, *(const void **)(v40 + 24), *(_QWORD *)(v40 + 32), (uint64_t)(*(_QWORD *)(v40 + 32) - *(_QWORD *)(v40 + 24)) >> 3);
      v42 = *(_BYTE *)(*(_QWORD *)a1 + 168);
      v64[0] = &unk_2513463C8;
      v64[1] = mlx::core::allocator::free;
      v65 = v64;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v39, v41, &v54, v42, (uint64_t)v64);
      v43 = v65;
      if (v65 == v64)
      {
        v44 = 4;
        v43 = v64;
      }
      else
      {
        if (!v65)
          goto LABEL_51;
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_51:
      v45 = (void *)v54.n128_u64[0];
      if (v54.n128_u64[0])
      {
        v54.n128_u64[1] = v54.n128_u64[0];
        goto LABEL_57;
      }
      return;
    case 3:
      v20 = *((_QWORD *)a1 + 1);
      if (v20)
      {
        if (!*(_QWORD *)(v20 + 8))
        {
          v46 = *(_QWORD *)(*(_QWORD *)a1 + 144);
          if (v46)
          {
            if (!*(_QWORD *)(v46 + 8)
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(*(_QWORD *)a1 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_62;
            }
          }
        }
      }
      v21 = *((_QWORD *)a2 + 1);
      if (v21)
      {
        if (!*(_QWORD *)(v21 + 8))
        {
          v51 = *(_QWORD *)(*(_QWORD *)a2 + 144);
          if (v51)
          {
            if (!*(_QWORD *)(v51 + 8)
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(*(_QWORD *)a2 + 56)) & 0xFF00000000) == 0)
            {
              goto LABEL_78;
            }
          }
        }
      }
      v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * *(_QWORD *)(*(_QWORD *)a1 + 160)));
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD *)(*(_QWORD *)a1 + 160);
      v53 = 0;
      __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v23 + 24), *(_QWORD *)(v23 + 32), (uint64_t)(*(_QWORD *)(v23 + 32) - *(_QWORD *)(v23 + 24)) >> 3);
      v25 = *(_BYTE *)(*(_QWORD *)a1 + 168);
      v62[0] = &unk_2513463C8;
      v62[1] = mlx::core::allocator::free;
      v63 = v62;
      mlx::core::array::set_data((uint64_t *)this, (uint64_t)v22, v24, &__p, v25, (uint64_t)v62);
      v26 = v63;
      if (v63 == v62)
      {
        v27 = 4;
        v26 = v62;
      }
      else
      {
        if (!v63)
          goto LABEL_55;
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_55:
      v45 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
LABEL_57:
        operator delete(v45);
      }
      return;
    case 4:
      v28 = *((_QWORD *)a1 + 1);
      if (v28)
      {
        if (!*(_QWORD *)(v28 + 8))
        {
          v47 = *(_QWORD *)a1;
          v48 = *(_QWORD *)(*(_QWORD *)a1 + 144);
          if (v48)
          {
            if (!*(_QWORD *)(v48 + 8)
              && (*(_BYTE *)(v47 + 168) & 2) != 0
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(v47 + 56)) & 0xFF00000000) == 0
              && *(_QWORD *)(v47 + 48) == *(_QWORD *)(*(_QWORD *)this + 48))
            {
LABEL_62:
              mlx::core::array::copy_shared_buffer(this, a1);
              return;
            }
          }
        }
      }
      v29 = *((_QWORD *)a2 + 1);
      if (v29)
      {
        if (!*(_QWORD *)(v29 + 8))
        {
          v49 = *(_QWORD *)a2;
          v50 = *(_QWORD *)(*(_QWORD *)a2 + 144);
          if (v50)
          {
            if (!*(_QWORD *)(v50 + 8)
              && (*(_BYTE *)(v49 + 168) & 2) != 0
              && ((*(_QWORD *)(*(_QWORD *)this + 56) ^ *(_QWORD *)(v49 + 56)) & 0xFF00000000) == 0
              && *(_QWORD *)(v49 + 48) == *(_QWORD *)(*(_QWORD *)this + 48))
            {
LABEL_78:
              mlx::core::array::copy_shared_buffer(this, a2);
              return;
            }
          }
        }
      }
      v30 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*(unsigned __int8 *)(*(_QWORD *)this + 60)
                                                                        * *(_QWORD *)(*(_QWORD *)this + 48)));
      v60[0] = &unk_2513463C8;
      v60[1] = mlx::core::allocator::free;
      v61 = v60;
      mlx::core::array::set_data((int ***)this, (uint64_t)v30, (uint64_t)v60);
      v31 = v61;
      if (v61 == v60)
      {
        v32 = 4;
        v31 = v60;
        goto LABEL_44;
      }
      if (v61)
      {
        v32 = 5;
LABEL_44:
        (*(void (**)(void))(*v31 + 8 * v32))();
      }
      return;
    default:
      return;
  }
}

void sub_2422F9934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  char *v29;
  char *v31;
  uint64_t v32;

  v31 = a29;
  if (a29 == v29)
  {
    v32 = 4;
    v31 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float mlx::core::detail::Sigmoid::operator()<float>(float a1)
{
  float v1;
  float v2;
  float v3;
  float v4;

  v1 = 0.0;
  if (a1 != INFINITY)
  {
    v1 = -a1;
    if (a1 != -INFINITY)
    {
      v2 = v1 * 1.442695;
      if (v2 > 80.0)
        v2 = 80.0;
      v3 = fmaxf(v2, -80.0);
      v4 = floor(v3 + 0.5);
      v1 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v3 - v4) * 0.00015353)
                                                                                                 + 0.0013399)
                                                                                         * (float)(v3 - v4))
                                                                                 + 0.0096184)
                                                                         * (float)(v3 - v4))
                                                                 + 0.055503)
                                                         * (float)(v3 - v4))
                                                 + 0.24023)
                                         * (float)(v3 - v4))
                                 + 0.69315)
                         * (float)(v3 - v4))
                 + 1.0)
         * COERCE_FLOAT(((int)v4 << 23) + 1065353216);
    }
  }
  return 1.0 / (float)(v1 + 1.0);
}

uint64_t mlx::core::promote_types(int *a1, int *a2)
{
}

uint64_t mlx::core::kindof(int *a1)
{
}

uint64_t mlx::core::TypeToDtype<BOOL>::operator mlx::core::Dtype()
{
  return 0x100000000;
}

uint64_t mlx::core::TypeToDtype<unsigned char>::operator mlx::core::Dtype()
{
  return 0x100000001;
}

uint64_t mlx::core::TypeToDtype<unsigned int>::operator mlx::core::Dtype()
{
  return 0x400000002;
}

uint64_t mlx::core::TypeToDtype<signed char>::operator mlx::core::Dtype()
{
  return 0x100000003;
}

uint64_t mlx::core::TypeToDtype<int>::operator mlx::core::Dtype()
{
  return 0x400000004;
}

uint64_t mlx::core::TypeToDtype<long long>::operator mlx::core::Dtype()
{
  return 0x800000005;
}

uint64_t mlx::core::TypeToDtype<float>::operator mlx::core::Dtype()
{
  return 0x400000006;
}

uint64_t mlx::core::TypeToDtype<double>::operator mlx::core::Dtype()
{
  return 0x400000006;
}

BOOL mlx::core::issubdtype(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t mlx::core::issubdtype()
{
  return 0;
}

uint64_t mlx::core::issubdtype(unsigned int *a1, unsigned int *a2)
{
                                                                 + *a2];
}

uint64_t mlx::core::issubdtype(mlx::core *this, const Category *a2, const Category *a3)
{
}

uint64_t mlx::core::dtype_to_array_protocol@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  unsigned int v6;
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  if (*((unsigned __int8 *)a1 + 4) <= 1u)
    v4 = "|";
  else
    v4 = "<";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)v4, 1);
  mlx::core::operator<<(&v7, (int *)&v6);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a2);
  v7 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[0] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2426A8294](&v10);
}

void sub_2422F9D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::dtype_from_array_protocol(char *a1, uint64_t a2)
{
  int v2;
  int v3;
  std::logic_error *exception;
  std::string v6;
  std::string v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  if (a2 != 2)
  {
    if (a2 != 3)
      goto LABEL_26;
    ++a1;
  }
  v2 = a1[1];
  v3 = *a1;
  if (v3 > 104)
  {
    if (v3 == 105)
    {
      if (v2 != 49)
      {
        if (v2 == 56)
          return 0x800000005;
        if (v2 != 52)
          goto LABEL_26;
        return 0x400000004;
      }
      return 0x100000003;
    }
    else
    {
      if (v3 != 117)
        goto LABEL_26;
      if (v2 == 49)
      {
        return 0x100000001;
      }
      else
      {
        if (v2 != 52)
          goto LABEL_26;
        return 0x400000002;
      }
    }
  }
  else
  {
    if (v3 != 98)
    {
      if (v3 == 102 && v2 == 52)
        return 0x400000006;
LABEL_26:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string<std::string_view,0>(&v6, (uint64_t)v8);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("[from_str] Invalid array protocol type-string: ", &v6, &v7);
      std::logic_error::logic_error(exception, &v7);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_251345D20, MEMORY[0x24BEDAB88]);
    }
    if (v2 != 49)
    {
      if (v2 != 52)
      {
        if (v2 != 56)
          goto LABEL_26;
        return 0x800000005;
      }
      return 0x400000004;
    }
    return 0x100000000;
  }
}

void sub_2422F9EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

_QWORD *std::string::basic_string<std::string_view,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((_BYTE *)v5 + v3) = 0;
  return __dst;
}

char *mlx::core::AsStrided::eval(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t *v12;
  int *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  char v24;
  char v25;
  char v26;
  void *exception;

  v3 = *a2;
  if (a2[1] - v3 != 16)
    mlx::core::AsStrided::eval();
  v5 = *(_BYTE *)(*(_QWORD *)v3 + 168);
  if ((v5 & 2) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "AsStrided must be used with row contiguous arrays only.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v6 = a1[6];
  v7 = a1[7] - v6;
  v8 = (v7 >> 3) - 1;
  if ((v8 & 0x80000000) != 0)
  {
    v25 = v5 & 0xF8;
    v24 = 1;
    v26 = 2;
LABEL_21:
    LOBYTE(v9) = 4;
    return mlx::core::array::copy_shared_buffer(a3, v3, (uint64_t)(a1 + 6), v9 | (v25 | v26 | v24), *(_QWORD *)(*a3 + 48), a1[9]);
  }
  v9 = (v7 >> 3);
  v10 = 1;
  v11 = (int *)a1[3];
  v12 = (uint64_t *)a1[6];
  v13 = v11;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  do
  {
    v17 = v8;
    v18 = v15 == *(_QWORD *)(v6 + 8 * v8) || v11[v8] == 1;
    v10 &= v18;
    v19 = *v12++;
    v22 = v16 == v19;
    v21 = *v13++;
    v20 = v21;
    v22 = v22 || v20 == 1;
    v23 = v22;
    v14 &= v23;
    v15 *= v11[v17];
    v16 *= v20;
    v8 = v17 - 1;
    --v9;
  }
  while (v9);
  v24 = (v10 | v14) & 1;
  v25 = v5 & 0xF8;
  if (v10)
    v26 = 2;
  else
    v26 = 0;
  if ((v14 & 1) != 0)
    goto LABEL_21;
  return mlx::core::array::copy_shared_buffer(a3, v3, (uint64_t)(a1 + 6), v9 | (v25 | v26 | v24), *(_QWORD *)(*a3 + 48), a1[9]);
}

void sub_2422FA174(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::Broadcast::eval(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v3;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[3];
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t ***)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Broadcast::eval();
  if (*(_QWORD *)(*a3 + 48))
  {
    v5 = (uint64_t)(*(_QWORD *)(*a3 + 8) - *(_QWORD *)*a3) >> 2;
    v17 = 0;
    std::vector<unsigned long>::vector(__p, v5, &v17);
    v6 = (_QWORD *)*a3;
    v7 = *v3;
    v8 = **v3;
    v9 = ((*v3)[1] - v8) >> 2;
    v10 = (v9 - 1);
    if ((int)v9 - 1 >= 0)
    {
      v11 = (char *)__p[0] + 8 * (int)(((v6[1] - *v6) >> 2) - v9);
      do
      {
        if (*(_DWORD *)(v8 + 4 * v10) == 1)
          v12 = 0;
        else
          v12 = *(_QWORD *)(v7[3] + 8 * v10);
        *(_QWORD *)&v11[8 * v10] = v12;
      }
      while (v10-- > 0);
    }
    if (v6[6] <= (unint64_t)v7[6])
      v14 = *((_BYTE *)v7 + 168);
    else
      v14 = v7[21] & 0xF9;
    mlx::core::array::copy_shared_buffer(a3, (uint64_t)v3, (uint64_t)__p, v14, v7[20], 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    v19[0] = &unk_2513463C8;
    v19[1] = mlx::core::allocator::free;
    v20 = v19;
    mlx::core::array::set_data((int ***)a3, 0, (uint64_t)v19);
    v15 = v20;
    if (v20 == v19)
    {
      v16 = 4;
      v15 = v19;
    }
    else
    {
      if (!v20)
        return;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
}

void sub_2422FA31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

char *mlx::core::Copy::eval(int a1, uint64_t a2, mlx::core::array *this)
{
  const mlx::core::array *v3;

  v3 = *(const mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - (_QWORD)v3 != 16)
    mlx::core::Copy::eval();
  return mlx::core::array::copy_shared_buffer(this, v3);
}

char *mlx::core::CustomVJP::eval(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *result;

  v3 = (uint64_t)(a2[1] - *a2) >> 4;
  v4 = *a3;
  v5 = a3[1];
  v6 = v5 - *a3;
  if (v3 <= v6 >> 4)
    mlx::core::CustomVJP::eval();
  if (v5 != v4)
  {
    v9 = 0;
    v10 = 0;
    v11 = 16 * (int)(v3 - (v6 >> 4));
    do
    {
      result = mlx::core::array::copy_shared_buffer((mlx::core::array *)(v4 + v9), (const mlx::core::array *)(*a2 + v11 + v9));
      ++v10;
      v4 = *a3;
      v9 += 16;
    }
    while (v10 < (a3[1] - *a3) >> 4);
  }
  return result;
}

char *mlx::core::Depends::eval(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *result;

  v3 = *a3;
  v4 = a3[1];
  if (a2[1] - *a2 <= (unint64_t)(v4 - *a3))
    mlx::core::Depends::eval();
  if (v4 != v3)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = mlx::core::array::copy_shared_buffer((mlx::core::array *)(v3 + v7), (const mlx::core::array *)(*a2 + v7));
      ++v8;
      v3 = *a3;
      v7 += 16;
    }
    while (v8 < (a3[1] - *a3) >> 4);
  }
  return result;
}

_QWORD *mlx::core::NumberOfElements::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::scheduler *v6;
  _QWORD *result;
  uint64_t v8;
  int *v9;
  int *v10;
  double v11;
  double v12;
  int **v13;
  int v14;
  int v15;
  float v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::NumberOfElements::eval();
  v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (_QWORD)(*a3)[6]));
  v17[0] = &unk_2513463C8;
  v17[1] = mlx::core::allocator::free;
  v18 = v17;
  mlx::core::array::set_data(a3, (uint64_t)v6, (uint64_t)v17);
  result = v18;
  if (v18 == v17)
  {
    v8 = 4;
    result = v17;
    goto LABEL_6;
  }
  if (v18)
  {
    v8 = 5;
LABEL_6:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  v9 = *(int **)(a1 + 24);
  v10 = *(int **)(a1 + 32);
  v11 = 1.0;
  while (v9 != v10)
  {
    result = (_QWORD *)mlx::core::array::shape(*(mlx::core::array **)a2, *v9);
    v11 = v11 * (double)(int)result;
    ++v9;
  }
  v12 = 1.0 / v11;
  if (!*(_BYTE *)(a1 + 48))
    v12 = v11;
  v13 = *a3;
  switch(*((_DWORD *)*a3 + 14))
  {
    case 0:
      LOBYTE(v14) = v12 != 0.0;
      goto LABEL_16;
    case 1:
    case 3:
      v14 = (int)v12;
LABEL_16:
      *(_BYTE *)v13[19] = v14;
      return result;
    case 2:
      v15 = v12;
      goto LABEL_18;
    case 4:
      v15 = (int)v12;
LABEL_18:
      *v13[19] = v15;
      break;
    case 5:
      *(_QWORD *)v13[19] = (uint64_t)v12;
      break;
    case 6:
      v16 = v12;
      *(float *)v13[19] = v16;
      break;
    default:
      return result;
  }
  return result;
}

void sub_2422FA660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void mlx::core::Reshape::prepare_reshape(uint64_t **a1@<X1>, const mlx::core::array *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  char v35;
  _QWORD *v36;
  void *__p;
  char *v38;
  char *v39;
  void *v40;
  _BYTE *v41;
  _QWORD *v42;

  v6 = *a1;
  if (!(*a1)[6] || (v6[21] & 2) != 0)
  {
    v32 = *(_QWORD *)a2;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a3 + 8), *(const void **)(v32 + 24), *(_QWORD *)(v32 + 32), (uint64_t)(*(_QWORD *)(v32 + 32) - *(_QWORD *)(v32 + 24)) >> 3);
    return;
  }
  if ((*a1)[1] == *v6)
  {
    v33 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2;
    __p = 0;
    std::vector<unsigned long>::vector(&v40, v33, &__p);
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a3 + 8), v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
    goto LABEL_55;
  }
  mlx::core::collapse_contiguous_dims<mlx::core::array const&,void>(a1, &v40);
  v36 = v42;
  __p = 0;
  v38 = 0;
  v39 = 0;
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) == **(_QWORD **)a2)
  {
    v12 = 0;
    v34 = 0;
    v35 = 0;
    goto LABEL_52;
  }
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = mlx::core::array::shape(a2, v7);
    if (v8 < (unint64_t)((v41 - (_BYTE *)v40) >> 2))
    {
      v10 = *((_DWORD *)v40 + v8);
      v11 = v10 / v9;
      if (!(v10 % v9))
      {
        *((_DWORD *)v40 + v8) = v11;
        v20 = *(_QWORD *)(*v36 + 8 * v8) * v11;
        v21 = v38;
        if (v38 >= v39)
        {
          v24 = (char *)__p;
          v25 = (v38 - (_BYTE *)__p) >> 3;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = v39 - (_BYTE *)__p;
          if ((v39 - (_BYTE *)__p) >> 2 > v26)
            v26 = v27 >> 2;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v39, v28);
            v24 = (char *)__p;
            v21 = v38;
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[8 * v25];
          *(_QWORD *)v30 = v20;
          v12 = (uint64_t)(v30 + 8);
          while (v21 != v24)
          {
            v31 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v30 - 1) = v31;
            v30 -= 8;
          }
          __p = v30;
          v38 = (char *)v12;
          v39 = &v29[8 * v28];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_QWORD *)v38 = v20;
          v12 = (uint64_t)(v21 + 8);
        }
        v38 = (char *)v12;
        if (*((_DWORD *)v40 + v8) == 1)
          ++v8;
        goto LABEL_28;
      }
    }
    v12 = (uint64_t)v38;
    if (v9 != 1)
      break;
    if (v38 >= v39)
    {
      v13 = (char *)__p;
      v14 = (v38 - (_BYTE *)__p) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v16 = v39 - (_BYTE *)__p;
      if ((v39 - (_BYTE *)__p) >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v39, v17);
        v13 = (char *)__p;
        v19 = v38;
      }
      else
      {
        v18 = 0;
        v19 = v38;
      }
      v22 = &v18[8 * v14];
      *(_QWORD *)v22 = *((_QWORD *)v38 - 1);
      v12 = (uint64_t)(v22 + 8);
      while (v19 != v13)
      {
        v23 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v22 - 1) = v23;
        v22 -= 8;
      }
      __p = v22;
      v38 = (char *)v12;
      v39 = &v18[8 * v17];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_QWORD *)v38 = *((_QWORD *)v38 - 1);
      v12 += 8;
    }
    v38 = (char *)v12;
LABEL_28:
    if (++v7 >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2))
    {
      v35 = 0;
      goto LABEL_51;
    }
  }
  v35 = 1;
LABEL_51:
  v34 = __p;
LABEL_52:
  *(_BYTE *)a3 = v35;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a3 + 8), v34, v12, (v12 - (uint64_t)v34) >> 3);
  if (__p)
  {
    v38 = (char *)__p;
    operator delete(__p);
  }
  __p = &v42;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_55:
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
}

void sub_2422FAA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::collapse_contiguous_dims<mlx::core::array const&,void>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t **v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t **v10;
  char *v11;
  char *v12;
  uint64_t ***v13;
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v3 = a1[1];
  v15[0] = *a1;
  v15[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = &v10;
  v14 = 0;
  v7 = (uint64_t **)operator new(0x10uLL);
  v10 = v7;
  v12 = (char *)(v7 + 2);
  *v7 = v4;
  v7[1] = v3;
  if (v3)
  {
    v8 = (unint64_t *)(v3 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = (char *)(v7 + 2);
  mlx::core::collapse_contiguous_dims(&v10, a2);
  v13 = &v10;
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  mlx::core::array::~array((mlx::core::array *)v15);
}

void sub_2422FAB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  mlx::core::array::~array((mlx::core::array *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<int>,std::vector<std::vector<unsigned long>>>::~tuple(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 24);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

char *mlx::core::Reshape::shared_buffer_reshape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4;
  int *v5;
  int *v6;
  int *v7;
  int v9;
  int *v10;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  char v15;

  v4 = *(_BYTE *)(*(_QWORD *)a2 + 168);
  if ((v4 & 2) != 0)
  {
    v5 = *(int **)*a4;
    v6 = *(int **)(*a4 + 8);
    v7 = v5 + 1;
    if (v5 != v6 && v7 != v6)
    {
      v9 = *v5;
      v10 = v5 + 1;
      do
      {
        v12 = *v10++;
        v11 = v12;
        v13 = v9 < v12;
        if (v9 <= v12)
          v9 = v11;
        if (v13)
          v5 = v7;
        v7 = v10;
      }
      while (v10 != v6);
    }
    v14 = *(_QWORD *)(*a4 + 48);
    if (v14 >= 2)
      v15 = 4 * (v14 == *v5);
    else
      v15 = 4;
    v4 = v15 | v4 & 0xFB;
  }
  return mlx::core::array::copy_shared_buffer(a4, a2, a3, v4, *(_QWORD *)(*(_QWORD *)a2 + 160), 0);
}

void mlx::core::Split::eval(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  int *end;
  unint64_t v7;
  uint64_t v8;
  int ***v9;
  unsigned int v10;
  int *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  std::vector<int>::value_type __x;
  std::vector<int> v37;

  v3 = *a2;
  if (a2[1] - *a2 != 16)
    mlx::core::Split::eval();
  __x = 0;
  std::vector<int>::vector(&v37, 1uLL, &__x);
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v37, (uint64_t)v37.__end_, *(char **)(a1 + 24), *(char **)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  end = v37.__end_;
  if (v37.__end_ != v37.__begin_)
  {
    v7 = 0;
    end = v37.__begin_;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)v3 + 24);
      v9 = (int ***)(*a3 + 16 * v7);
      v10 = *(unsigned __int8 *)(*(_QWORD *)v3 + 168) | 6;
      v11 = **v9;
      v12 = (char *)(*v9)[1] - (char *)v11;
      v13 = (v12 >> 2) - 1;
      if (v13 < 0)
        goto LABEL_29;
      v14 = (v12 >> 2);
      v15 = *(uint64_t **)(*(_QWORD *)v3 + 24);
      v16 = *(_QWORD *)(*(_QWORD *)v3 + 160);
      v17 = **v9;
      v18 = 1;
      v19 = 1;
      v20 = 1;
      do
      {
        v21 = v10;
        v23 = *v15++;
        v22 = v23;
        v25 = *v17++;
        v24 = v25;
        v27 = v22 == v19 || v24 == 1;
        if ((v27 & (v21 >> 2)) != 0)
          v28 = 4;
        else
          v28 = 0;
        v29 = v11[v13];
        v31 = *(_QWORD *)(v8 + 8 * v13) == v18 || v29 == 1;
        if ((v31 & (v21 >> 1)) != 0)
          v32 = 2;
        else
          v32 = 0;
        v10 = v28 | v21 & 0xFFFFFFF9 | v32;
        v19 *= v24;
        v18 *= v29;
        if (v22)
          v33 = v24;
        else
          v33 = 1;
        v20 *= v33;
        --v13;
        --v14;
      }
      while (v14);
      if (v20 == 1)
      {
LABEL_29:
        v34 = v10 | 1;
        v35 = 1;
      }
      else
      {
        v34 = v28 & 0xFE | v21 & 0xF8 | v32 & 0xFE | v21 & ((v32 | v28) != 0);
        if (v20 == v16)
          v35 = *(_QWORD *)(*(_QWORD *)v3 + 160);
        else
          v35 = v20;
        if (v20 == v16)
          v34 = v28 | v21 & 0xF9 | v32;
      }
      mlx::core::array::copy_shared_buffer((uint64_t *)(*a3 + 16 * v7), v3, *(_QWORD *)v3 + 24, v34, v35, *(_QWORD *)(v8 + 8 * *(int *)(a1 + 48)) * end[v7]);
      ++v7;
      end = v37.__begin_;
    }
    while (v7 < v37.__end_ - v37.__begin_);
  }
  if (end)
  {
    v37.__end_ = end;
    operator delete(end);
  }
}

void sub_2422FAE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mlx::core::Slice::prepare_slice(mlx::core::Slice *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t *v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  _BYTE *v24;

  v6 = ((*a2)[1] - **a2) >> 2;
  v22 = 0;
  std::vector<long long>::vector(&__p, v6, &v22);
  v8 = **a2;
  v7 = (*a2)[1];
  v9 = v7 - v8;
  if (v7 == v8)
  {
    v11 = 0;
    LOBYTE(v10) = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = v9 >> 2;
    v13 = (int *)*((_QWORD *)this + 3);
    v14 = (uint64_t *)(*a2)[3];
    v15 = (int *)*((_QWORD *)this + 9);
    v16 = __p;
    if (v12 <= 1)
      v12 = 1;
    do
    {
      v18 = *v13++;
      v17 = v18;
      v20 = *v14++;
      v19 = v20;
      v21 = *v15++;
      v11 += v19 * v17;
      *v16++ = v19 * v21;
      v10 |= v21 >> 31;
      --v12;
    }
    while (v12);
  }
  *(_BYTE *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a3 + 16), __p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
}

void sub_2422FAF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *mlx::core::Slice::shared_buffer_slice(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;

  v7 = *(_QWORD *)*a5;
  v8 = *(_QWORD *)(*a5 + 8) - v7;
  v9 = (v8 >> 2) - 1;
  if (v9 < 0)
  {
    v29 = 257;
    v17 = 1;
  }
  else
  {
    v10 = (v8 >> 2);
    v11 = 1;
    v12 = *a3;
    v13 = *(int **)*a5;
    v14 = 1;
    v15 = 1;
    LODWORD(v16) = 1;
    v17 = 1;
    do
    {
      v19 = *v12++;
      v18 = v19;
      v22 = v19 == v14;
      v21 = *v13++;
      v20 = v21;
      v22 = v22 || v20 == 1;
      v23 = v22;
      v16 = v16 & v23;
      v24 = *(int *)(v7 + 4 * v9);
      v26 = (*a3)[v9] == v11 || v24 == 1;
      v15 &= v26;
      v14 *= v20;
      v11 *= v24;
      if (v18)
        v27 = v20;
      else
        v27 = 1;
      v17 *= v27;
      --v9;
      --v10;
    }
    while (v10);
    v28 = 256;
    if (!v15)
      v28 = 0;
    v29 = v28 | v16;
  }
  v30 = *(unsigned __int8 *)(*(_QWORD *)a2 + 168);
  v31 = (4 * (v29 >> 8)) | (2 * v29) | v30 & 0xFFFFFFF9;
  if (v17 == 1)
  {
    LOBYTE(v29) = (4 * BYTE1(v29)) | (2 * v29) | v30 & 0xF9 | 1;
  }
  else
  {
    LODWORD(v29) = (4 * (v29 >> 8)) | (2 * v29) | v30 & 0xFFFFFFF8 | (v29 | (v29 >> 8)) & v30;
    if (v17 == *(_QWORD *)(*(_QWORD *)a2 + 160))
      LOBYTE(v29) = v31;
  }
  return mlx::core::array::copy_shared_buffer(a5, a2, (uint64_t)a3, v29, v17, a4);
}

void mlx::core::SliceUpdate::prepare_slice(mlx::core::SliceUpdate *this@<X0>, const mlx::core::array *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t *v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  _BYTE *v21;

  v6 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2;
  v19 = 0;
  std::vector<long long>::vector(&__p, v6, &v19);
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2;
  if (v7)
  {
    v8 = 0;
    v9 = v7 >> 2;
    v10 = (int *)*((_QWORD *)this + 3);
    v11 = *(uint64_t **)(*(_QWORD *)a2 + 24);
    v12 = (int *)*((_QWORD *)this + 9);
    v13 = __p;
    if (v9 <= 1)
      v9 = 1;
    do
    {
      v15 = *v10++;
      v14 = v15;
      v17 = *v11++;
      v16 = v17;
      v8 += v17 * v14;
      v18 = *v12++;
      *v13++ = v16 * v18;
      --v9;
    }
    while (v9);
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a3 + 1, __p, (uint64_t)v21, (v21 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_2422FB118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *mlx::core::StopGradient::eval(int a1, uint64_t a2, mlx::core::array *this)
{
  const mlx::core::array *v3;

  v3 = *(const mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - (_QWORD)v3 != 16)
    mlx::core::StopGradient::eval();
  return mlx::core::array::copy_shared_buffer(this, v3);
}

void mlx::core::Transpose::eval(uint64_t a1, uint64_t *a2, mlx::core::array *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  int v25;
  uint64_t *v26;
  void *__p[3];

  if (a2[1] - *a2 != 16)
    mlx::core::Transpose::eval();
  std::vector<unsigned long>::vector(__p, (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 8) - **(_QWORD **)a3) >> 2);
  v6 = *a2;
  v7 = *(int **)(a1 + 24);
  v8 = *(_QWORD *)*a2;
  v9 = *(_QWORD *)(a1 + 32) - (_QWORD)v7;
  if (v9)
  {
    v10 = v9 >> 2;
    v11 = *(_QWORD *)(v8 + 24);
    v12 = __p[0];
    if (v10 <= 1)
      v10 = 1;
    do
    {
      v13 = *v7++;
      *v12++ = *(_QWORD *)(v11 + 8 * v13);
      --v10;
    }
    while (v10);
  }
  v14 = *(unsigned __int8 *)(v8 + 168);
  if ((v14 & 1) != 0 && *(_QWORD *)(v8 + 160) == *(_QWORD *)(v8 + 48))
  {
    v14 |= 6u;
    v15 = *(_QWORD *)(*(_QWORD *)a3 + 8) - **(_QWORD **)a3;
    if (v15)
    {
      v26 = (uint64_t *)v6;
      v16 = 0;
      v17 = (v15 >> 2) - 1;
      v18 = 1;
      v19 = 1;
      do
      {
        v20 = *((_QWORD *)__p[0] + v16) == v19 || mlx::core::array::shape(a3, v16) == 1;
        if ((v20 & (v14 >> 2)) != 0)
          v21 = 4;
        else
          v21 = 0;
        v22 = mlx::core::array::shape(a3, v16);
        v23 = *((_QWORD *)__p[0] + v17) == v18 || mlx::core::array::shape(a3, v17) == 1;
        v24 = mlx::core::array::shape(a3, v17);
        v19 *= v22;
        if ((v23 & (v14 >> 1)) != 0)
          v25 = 2;
        else
          v25 = 0;
        v14 = v21 | v14 & 0xFFFFFFF9 | v25;
        v18 *= v24;
        ++v16;
        --v17;
      }
      while (v16 < (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 8) - **(_QWORD **)a3) >> 2);
      v6 = (uint64_t)v26;
      v8 = *v26;
    }
  }
  mlx::core::array::copy_shared_buffer((uint64_t *)a3, v6, (uint64_t)__p, v14, *(_QWORD *)(v8 + 160), 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2422FB348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2422FB3CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::collapse_contiguous_dims(uint64_t ***a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v3;
  uint64_t **v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD v10[3];
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  void **v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v6 = 0;
    v8 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if ((unint64_t)v6 >= v13)
      {
        v6 = (_QWORD *)std::vector<std::vector<unsigned long>>::__emplace_back_slow_path<std::vector<unsigned long> const&>(&v11, (uint64_t)(v7 + 3));
      }
      else
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6, (const void *)v7[3], v7[4], (v7[4] - v7[3]) >> 3);
        v6 += 3;
      }
      v12 = v6;
      v3 += 2;
    }
    while (v3 != v4);
    v3 = *a1;
    v8 = v11;
  }
  v9 = *v3;
  memset(v10, 0, sizeof(v10));
  std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v10, v8, (uint64_t)v6, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v8) >> 3));
  mlx::core::collapse_contiguous_dims<unsigned long>(v9, (uint64_t)v10, a2);
  v14 = (void **)v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)&v11;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_2422FB4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = (void **)&a13;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void mlx::core::collapse_contiguous_dims<unsigned long>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  int *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int *v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD **v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v77[3];
  void *v78;
  char *v79;
  char *v80;
  void *__p;
  char *v82;
  char *v83;
  void **v84;

  __p = 0;
  v82 = 0;
  v83 = 0;
  if (a1[1] != *a1)
  {
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, 1uLL);
    *(_DWORD *)v4 = 0;
    v6 = v4 + 4;
    __p = v4;
    v83 = &v4[4 * v5];
    v82 = v4 + 4;
    v7 = *a1;
    if ((unint64_t)(a1[1] - *a1) < 5)
    {
      v21 = v6;
    }
    else
    {
      v8 = 1;
      do
      {
        v9 = *(_QWORD **)a2;
        v10 = *(_QWORD **)(a2 + 8);
        if (*(_QWORD **)a2 != v10)
        {
          v11 = *(int *)(v7 + 4 * v8);
          while (*(_QWORD *)(*v9 + 8 * v8) * v11 == *(_QWORD *)(*v9 + 8 * (v8 - 1)))
          {
            v9 += 3;
            if (v9 == v10)
              goto LABEL_26;
          }
          if (v6 >= v83)
          {
            v13 = (char *)__p;
            v14 = (v6 - (_BYTE *)__p) >> 2;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v16 = v83 - (_BYTE *)__p;
            if ((v83 - (_BYTE *)__p) >> 1 > v15)
              v15 = v16 >> 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, v17);
              v13 = (char *)__p;
              v6 = v82;
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[4 * v14];
            *(_DWORD *)v19 = -1;
            v12 = v19 + 4;
            while (v6 != v13)
            {
              v20 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            __p = v19;
            v82 = v12;
            v83 = &v18[4 * v17];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)v6 = -1;
            v12 = v6 + 4;
          }
          v82 = v12;
          v6 = v12;
        }
LABEL_26:
        if (v6 >= v83)
        {
          v22 = (char *)__p;
          v23 = (v6 - (_BYTE *)__p) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v25 = v83 - (_BYTE *)__p;
          if ((v83 - (_BYTE *)__p) >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, v26);
            v22 = (char *)__p;
            v6 = v82;
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v8;
          v21 = v28 + 4;
          while (v6 != v22)
          {
            v29 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          __p = v28;
          v82 = v21;
          v83 = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v6 = v8;
          v21 = v6 + 4;
        }
        v82 = v21;
        ++v8;
        v7 = *a1;
        v6 = v21;
      }
      while (v8 < (a1[1] - *a1) >> 2);
    }
    if (v21 >= v83)
    {
      v31 = (char *)__p;
      v32 = (v21 - (_BYTE *)__p) >> 2;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v34 = v83 - (_BYTE *)__p;
      if ((v83 - (_BYTE *)__p) >> 1 > v33)
        v33 = v34 >> 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
        v35 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, v35);
        v31 = (char *)__p;
        v21 = v82;
      }
      else
      {
        v36 = 0;
      }
      v37 = &v36[4 * v32];
      v38 = &v36[4 * v35];
      *(_DWORD *)v37 = -1;
      v30 = v37 + 4;
      while (v21 != v31)
      {
        v39 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v37 - 1) = v39;
        v37 -= 4;
      }
      __p = v37;
      v82 = v30;
      v83 = v38;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *(_DWORD *)v21 = -1;
      v30 = v21 + 4;
    }
    v82 = v30;
  }
  v78 = 0;
  v79 = 0;
  v80 = 0;
  std::vector<std::vector<unsigned long>>::vector(v77, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v40 = (int *)__p;
  if (v82 != __p)
  {
    v41 = 0;
    v42 = 0;
    do
    {
      v43 = *(_DWORD *)(*a1 + 4 * v40[v41]);
      v44 = v40[v42 + 1];
      if (v44 != -1)
      {
        v45 = &v40[v42 + 2];
        do
        {
          v43 *= *(_DWORD *)(*a1 + 4 * v44);
          v46 = *v45++;
          v44 = v46;
          ++v42;
        }
        while (v46 != -1);
      }
      v47 = v79;
      if (v79 >= v80)
      {
        v49 = (char *)v78;
        v50 = (v79 - (_BYTE *)v78) >> 2;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v52 = v80 - (_BYTE *)v78;
        if ((v80 - (_BYTE *)v78) >> 1 > v51)
          v51 = v52 >> 1;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80, v53);
          v49 = (char *)v78;
          v47 = v79;
        }
        else
        {
          v54 = 0;
        }
        v55 = &v54[4 * v50];
        *(_DWORD *)v55 = v43;
        v48 = v55 + 4;
        while (v47 != v49)
        {
          v56 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *((_DWORD *)v55 - 1) = v56;
          v55 -= 4;
        }
        v78 = v55;
        v79 = v48;
        v80 = &v54[4 * v53];
        if (v49)
          operator delete(v49);
      }
      else
      {
        *(_DWORD *)v79 = v43;
        v48 = v47 + 4;
      }
      v79 = v48;
      v57 = *(_QWORD **)a2;
      if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
      {
        v58 = 0;
        do
        {
          v59 = v77[0] + 24 * v58;
          v60 = *((int *)__p + v42);
          v61 = v57[3 * v58];
          v63 = (_QWORD **)(v59 + 8);
          v62 = *(_QWORD **)(v59 + 8);
          v65 = (_QWORD *)(v59 + 16);
          v64 = *(_QWORD *)(v59 + 16);
          if ((unint64_t)v62 >= v64)
          {
            v67 = *(_QWORD **)v59;
            v68 = ((uint64_t)v62 - *(_QWORD *)v59) >> 3;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v70 = v64 - (_QWORD)v67;
            if (v70 >> 2 > v69)
              v69 = v70 >> 2;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
              v71 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            if (v71)
            {
              v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v65, v71);
              v62 = *v63;
              v67 = *(_QWORD **)v59;
            }
            else
            {
              v72 = 0;
            }
            v73 = &v72[8 * v68];
            *(_QWORD *)v73 = *(_QWORD *)(v61 + 8 * v60);
            v66 = v73 + 8;
            while (v62 != v67)
            {
              v74 = *--v62;
              *((_QWORD *)v73 - 1) = v74;
              v73 -= 8;
            }
            *(_QWORD *)v59 = v73;
            *v63 = v66;
            *v65 = &v72[8 * v71];
            if (v67)
              operator delete(v67);
          }
          else
          {
            *v62 = *(_QWORD *)(v61 + 8 * v60);
            v66 = v62 + 1;
          }
          *v63 = v66;
          ++v58;
          v57 = *(_QWORD **)a2;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) > v58);
      }
      v42 += 2;
      v41 = v42;
      v40 = (int *)__p;
    }
    while (v42 < (unint64_t)((v82 - (_BYTE *)__p) >> 2));
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIiNS_9allocatorIiEEEENS3_INS3_ImNS4_ImEEEENS4_IS8_EEEEEEC2B8ne180100IJLm0ELm1EEJS6_SA_EJEJEJRS6_RSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(a3, (uint64_t)&v78, v77);
  v84 = (void **)v77;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v84);
  if (v78)
  {
    v79 = (char *)v78;
    operator delete(v78);
  }
  if (__p)
  {
    v82 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2422FBB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<unsigned long>>::__emplace_back_slow_path<std::vector<unsigned long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_2422FBC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *std::vector<std::vector<unsigned long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2422FBF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIiNS_9allocatorIiEEEENS3_INS3_ImNS4_ImEEEENS4_IS8_EEEEEEC2B8ne180100IJLm0ELm1EEJS6_SA_EJEJEJRS6_RSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(a1 + 3, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_2422FC0F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<unsigned long>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2422FC178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2422FC234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_2422FC32C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int *v5;
  int *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  std::__split_buffer<int> __v;

  v5 = (int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2422FC51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2422FC67C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2422FC6F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2422FC768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::load_safetensors()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[load_safetensors] Compile with MLX_BUILD_SAFETENSORS=ON to enable safetensors support.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[load_safetensors] Compile with MLX_BUILD_SAFETENSORS=ON to enable safetensors support.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2422FC7C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2422FC810(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::save_safetensors()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[save_safetensors] Compile with MLX_BUILD_SAFETENSORS=ON to enable safetensors support.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x2426A8078](exception, "[save_safetensors] Compile with MLX_BUILD_SAFETENSORS=ON to enable safetensors support.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
}

void sub_2422FC860(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2422FC8B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::ArgSort::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::array *v3;
  int v4;
  mlx::core::scheduler *v5;
  void **v6;
  uint64_t v7;
  int v8;
  mlx::core::scheduler *v9;
  void **v10;
  uint64_t v11;
  int v12;
  mlx::core::scheduler *v13;
  void **v14;
  uint64_t v15;
  int v16;
  mlx::core::scheduler *v17;
  void **v18;
  uint64_t v19;
  int v20;
  mlx::core::scheduler *v21;
  void **v22;
  uint64_t v23;
  int v24;
  mlx::core::scheduler *v25;
  void **v26;
  uint64_t v27;
  int v28;
  mlx::core::scheduler *v29;
  void **v30;
  uint64_t v31;
  const void **v32;
  unint64_t v33;
  int v34;
  const void **v35;
  char *v36;
  int64_t v37;
  const void **v38;
  uint64_t v39;
  char *v40;
  int64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  ldiv_t v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int *v58;
  uint64_t v59;
  const void **v60;
  unint64_t v61;
  int v62;
  const void **v63;
  char *v64;
  int64_t v65;
  const void **v66;
  uint64_t v67;
  char *v68;
  int64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  ldiv_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int *v86;
  uint64_t v87;
  const void **v88;
  unint64_t v89;
  int v90;
  const void **v91;
  char *v92;
  int64_t v93;
  const void **v94;
  uint64_t v95;
  char *v96;
  int64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  ldiv_t v109;
  uint64_t v110;
  unsigned int *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int *v114;
  uint64_t v115;
  const void **v116;
  unint64_t v117;
  int v118;
  const void **v119;
  char *v120;
  int64_t v121;
  const void **v122;
  uint64_t v123;
  char *v124;
  int64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  int quot;
  ldiv_t v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int *v142;
  uint64_t v143;
  const void **v144;
  unint64_t v145;
  int v146;
  const void **v147;
  char *v148;
  int64_t v149;
  const void **v150;
  uint64_t v151;
  char *v152;
  int64_t v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  int v164;
  ldiv_t v165;
  uint64_t v166;
  unsigned int *v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int *v170;
  uint64_t v171;
  const void **v172;
  unint64_t v173;
  int v174;
  const void **v175;
  char *v176;
  int64_t v177;
  const void **v178;
  uint64_t v179;
  char *v180;
  int64_t v181;
  unint64_t v182;
  int v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  int *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  int v192;
  ldiv_t v193;
  uint64_t v194;
  unsigned int *v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int *v198;
  uint64_t v199;
  const void **v200;
  unint64_t v201;
  int v202;
  const void **v203;
  char *v204;
  int64_t v205;
  const void **v206;
  uint64_t v207;
  char *v208;
  int64_t v209;
  unint64_t v210;
  int v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  int *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  int v220;
  ldiv_t v221;
  uint64_t v222;
  unsigned int *v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  mlx::core::array *v235;
  void *__p;
  char *v238;
  uint64_t v239;
  void *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  void *v245;
  uint64_t (*v246)(mlx::core::allocator *);
  void **v247;
  uint64_t v248;

  v248 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArgSort::eval();
  v235 = *(mlx::core::array **)a2;
  switch(*(_DWORD *)(*(_QWORD *)v3 + 56))
  {
    case 0:
      v4 = *(_DWORD *)(a1 + 20);
      v5 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                       * (_QWORD)(*a3)[6]));
      v245 = &unk_2513463C8;
      v246 = mlx::core::allocator::free;
      v247 = &v245;
      mlx::core::array::set_data(a3, (uint64_t)v5, (uint64_t)&v245);
      v6 = v247;
      if (v247 == &v245)
      {
        v7 = 4;
        v6 = &v245;
      }
      else
      {
        if (!v247)
        {
LABEL_98:
          v116 = *(const void ***)v3;
          if (v4 < 0)
            v4 += (unint64_t)((_BYTE *)v116[1] - (_BYTE *)*v116) >> 2;
          v117 = (unint64_t)v116[6];
          v118 = mlx::core::array::shape(v3, v4);
          v119 = *(const void ***)v3;
          v240 = 0;
          v241 = 0;
          v242 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v240, *v119, (uint64_t)v119[1], ((_BYTE *)v119[1] - (_BYTE *)*v119) >> 2);
          v120 = (char *)v240 + 4 * v4;
          v121 = v241 - (v120 + 4);
          if (v241 != v120 + 4)
            memmove((char *)v240 + 4 * v4, v120 + 4, v241 - (v120 + 4));
          v241 = &v120[v121];
          v122 = *(const void ***)v3;
          __p = 0;
          v238 = 0;
          v239 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v122[3], (uint64_t)v122[4], ((_BYTE *)v122[4] - (_BYTE *)v122[3]) >> 3);
          v123 = v4;
          v124 = (char *)__p + 8 * v4;
          v125 = v238 - (v124 + 8);
          if (v238 != v124 + 8)
            memmove(v124, v124 + 8, v238 - (v124 + 8));
          v238 = &v124[v125];
          v126 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * v123);
          v127 = mlx::core::array::shape(v3, v123);
          if (v117 >= v118)
          {
            v128 = 0;
            v129 = v126 * v127;
            v130 = v117 / v118;
            if (v130 <= 1)
              v130 = 1;
            v231 = v130;
            do
            {
              v131 = (int *)v240;
              v132 = (unint64_t)(v241 - (_BYTE *)v240) >> 2;
              v133 = 0;
              v134 = (v132 - 1);
              if ((int)v132 - 1 >= 0)
              {
                v135 = __p;
                quot = v128;
                do
                {
                  v137 = ldiv(quot, v131[v134]);
                  quot = v137.quot;
                  v133 += v135[v134--] * v137.rem;
                }
                while (v134 != -1);
              }
              v138 = *(_QWORD *)(*(_QWORD *)v235 + 152);
              v139 = (unsigned int *)&(*a3)[19][v133];
              if (v129)
              {
                v140 = 0;
                v141 = 0;
                do
                {
                  v139[v140] = v141++;
                  v140 += v126;
                }
                while (v129 != v140);
              }
              v243 = v138 + v133;
              v244 = v126;
              if ((int)(v129 / v126) <= 128)
              {
              }
              else
              {
                v142 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v129 / v126));
                if (v142)
                  operator delete(v142);
              }
              ++v128;
            }
            while (v128 != v231);
          }
          goto LABEL_191;
        }
        v7 = 5;
      }
      (*((void (**)(void))*v6 + v7))();
      goto LABEL_98;
    case 1:
      v20 = *(_DWORD *)(a1 + 20);
      v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v245 = &unk_2513463C8;
      v246 = mlx::core::allocator::free;
      v247 = &v245;
      mlx::core::array::set_data(a3, (uint64_t)v21, (uint64_t)&v245);
      v22 = v247;
      if (v247 == &v245)
      {
        v23 = 4;
        v22 = &v245;
      }
      else
      {
        if (!v247)
          goto LABEL_122;
        v23 = 5;
      }
      (*((void (**)(void))*v22 + v23))();
LABEL_122:
      v144 = *(const void ***)v3;
      if (v20 < 0)
        v20 += (unint64_t)((_BYTE *)v144[1] - (_BYTE *)*v144) >> 2;
      v145 = (unint64_t)v144[6];
      v146 = mlx::core::array::shape(v3, v20);
      v147 = *(const void ***)v3;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v240, *v147, (uint64_t)v147[1], ((_BYTE *)v147[1] - (_BYTE *)*v147) >> 2);
      v148 = (char *)v240 + 4 * v20;
      v149 = v241 - (v148 + 4);
      if (v241 != v148 + 4)
        memmove((char *)v240 + 4 * v20, v148 + 4, v241 - (v148 + 4));
      v241 = &v148[v149];
      v150 = *(const void ***)v3;
      __p = 0;
      v238 = 0;
      v239 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v150[3], (uint64_t)v150[4], ((_BYTE *)v150[4] - (_BYTE *)v150[3]) >> 3);
      v151 = v20;
      v152 = (char *)__p + 8 * v20;
      v153 = v238 - (v152 + 8);
      if (v238 != v152 + 8)
        memmove(v152, v152 + 8, v238 - (v152 + 8));
      v238 = &v152[v153];
      v154 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * v151);
      v155 = mlx::core::array::shape(v3, v151);
      if (v145 >= v146)
      {
        v156 = 0;
        v157 = v154 * v155;
        v158 = v145 / v146;
        if (v158 <= 1)
          v158 = 1;
        v232 = v158;
        do
        {
          v159 = (int *)v240;
          v160 = (unint64_t)(v241 - (_BYTE *)v240) >> 2;
          v161 = 0;
          v162 = (v160 - 1);
          if ((int)v160 - 1 >= 0)
          {
            v163 = __p;
            v164 = v156;
            do
            {
              v165 = ldiv(v164, v159[v162]);
              v164 = v165.quot;
              v161 += v163[v162--] * v165.rem;
            }
            while (v162 != -1);
          }
          v166 = *(_QWORD *)(*(_QWORD *)v235 + 152);
          v167 = (unsigned int *)&(*a3)[19][v161];
          if (v157)
          {
            v168 = 0;
            v169 = 0;
            do
            {
              v167[v168] = v169++;
              v168 += v154;
            }
            while (v157 != v168);
          }
          v243 = v166 + v161;
          v244 = v154;
          if ((int)(v157 / v154) <= 128)
          {
          }
          else
          {
            v170 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v157 / v154));
            if (v170)
              operator delete(v170);
          }
          ++v156;
        }
        while (v156 != v232);
      }
      goto LABEL_191;
    case 2:
      v12 = *(_DWORD *)(a1 + 20);
      v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v245 = &unk_2513463C8;
      v246 = mlx::core::allocator::free;
      v247 = &v245;
      mlx::core::array::set_data(a3, (uint64_t)v13, (uint64_t)&v245);
      v14 = v247;
      if (v247 == &v245)
      {
        v15 = 4;
        v14 = &v245;
      }
      else
      {
        if (!v247)
          goto LABEL_50;
        v15 = 5;
      }
      (*((void (**)(void))*v14 + v15))();
LABEL_50:
      v60 = *(const void ***)v3;
      if (v12 < 0)
        v12 += (unint64_t)((_BYTE *)v60[1] - (_BYTE *)*v60) >> 2;
      v61 = (unint64_t)v60[6];
      v62 = mlx::core::array::shape(v3, v12);
      v63 = *(const void ***)v3;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v240, *v63, (uint64_t)v63[1], ((_BYTE *)v63[1] - (_BYTE *)*v63) >> 2);
      v64 = (char *)v240 + 4 * v12;
      v65 = v241 - (v64 + 4);
      if (v241 != v64 + 4)
        memmove((char *)v240 + 4 * v12, v64 + 4, v241 - (v64 + 4));
      v241 = &v64[v65];
      v66 = *(const void ***)v3;
      __p = 0;
      v238 = 0;
      v239 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v66[3], (uint64_t)v66[4], ((_BYTE *)v66[4] - (_BYTE *)v66[3]) >> 3);
      v67 = v12;
      v68 = (char *)__p + 8 * v12;
      v69 = v238 - (v68 + 8);
      if (v238 != v68 + 8)
        memmove(v68, v68 + 8, v238 - (v68 + 8));
      v238 = &v68[v69];
      v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * v67);
      v71 = mlx::core::array::shape(v3, v67);
      if (v61 >= v62)
      {
        v72 = 0;
        v73 = v70 * v71;
        v74 = v61 / v62;
        if (v74 <= 1)
          v74 = 1;
        v229 = v74;
        do
        {
          v75 = (int *)v240;
          v76 = (unint64_t)(v241 - (_BYTE *)v240) >> 2;
          v77 = 0;
          v78 = (v76 - 1);
          if ((int)v76 - 1 >= 0)
          {
            v79 = __p;
            v80 = v72;
            do
            {
              v81 = ldiv(v80, v75[v78]);
              v80 = v81.quot;
              v77 += v79[v78--] * v81.rem;
            }
            while (v78 != -1);
          }
          v82 = *(_QWORD *)(*(_QWORD *)v235 + 152);
          v83 = (unsigned int *)&(*a3)[19][v77];
          if (v73)
          {
            v84 = 0;
            v85 = 0;
            do
            {
              v83[v84] = v85++;
              v84 += v70;
            }
            while (v73 != v84);
          }
          v243 = v82 + 4 * v77;
          v244 = v70;
          if ((int)(v73 / v70) <= 128)
          {
          }
          else
          {
            v86 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v73 / v70));
            if (v86)
              operator delete(v86);
          }
          ++v72;
        }
        while (v72 != v229);
      }
      goto LABEL_191;
    case 3:
      v16 = *(_DWORD *)(a1 + 20);
      v17 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v245 = &unk_2513463C8;
      v246 = mlx::core::allocator::free;
      v247 = &v245;
      mlx::core::array::set_data(a3, (uint64_t)v17, (uint64_t)&v245);
      v18 = v247;
      if (v247 == &v245)
      {
        v19 = 4;
        v18 = &v245;
      }
      else
      {
        if (!v247)
          goto LABEL_74;
        v19 = 5;
      }
      (*((void (**)(void))*v18 + v19))();
LABEL_74:
      v88 = *(const void ***)v3;
      if (v16 < 0)
        v16 += (unint64_t)((_BYTE *)v88[1] - (_BYTE *)*v88) >> 2;
      v89 = (unint64_t)v88[6];
      v90 = mlx::core::array::shape(v3, v16);
      v91 = *(const void ***)v3;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v240, *v91, (uint64_t)v91[1], ((_BYTE *)v91[1] - (_BYTE *)*v91) >> 2);
      v92 = (char *)v240 + 4 * v16;
      v93 = v241 - (v92 + 4);
      if (v241 != v92 + 4)
        memmove((char *)v240 + 4 * v16, v92 + 4, v241 - (v92 + 4));
      v241 = &v92[v93];
      v94 = *(const void ***)v3;
      __p = 0;
      v238 = 0;
      v239 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v94[3], (uint64_t)v94[4], ((_BYTE *)v94[4] - (_BYTE *)v94[3]) >> 3);
      v95 = v16;
      v96 = (char *)__p + 8 * v16;
      v97 = v238 - (v96 + 8);
      if (v238 != v96 + 8)
        memmove(v96, v96 + 8, v238 - (v96 + 8));
      v238 = &v96[v97];
      v98 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * v95);
      v99 = mlx::core::array::shape(v3, v95);
      if (v89 >= v90)
      {
        v100 = 0;
        v101 = v98 * v99;
        v102 = v89 / v90;
        if (v102 <= 1)
          v102 = 1;
        v230 = v102;
        do
        {
          v103 = (int *)v240;
          v104 = (unint64_t)(v241 - (_BYTE *)v240) >> 2;
          v105 = 0;
          v106 = (v104 - 1);
          if ((int)v104 - 1 >= 0)
          {
            v107 = __p;
            v108 = v100;
            do
            {
              v109 = ldiv(v108, v103[v106]);
              v108 = v109.quot;
              v105 += v107[v106--] * v109.rem;
            }
            while (v106 != -1);
          }
          v110 = *(_QWORD *)(*(_QWORD *)v235 + 152);
          v111 = (unsigned int *)&(*a3)[19][v105];
          if (v101)
          {
            v112 = 0;
            v113 = 0;
            do
            {
              v111[v112] = v113++;
              v112 += v98;
            }
            while (v101 != v112);
          }
          v243 = v110 + v105;
          v244 = v98;
          if ((int)(v101 / v98) <= 128)
          {
          }
          else
          {
            v114 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v101 / v98));
            if (v114)
              operator delete(v114);
          }
          ++v100;
        }
        while (v100 != v230);
      }
      goto LABEL_191;
    case 4:
      v8 = *(_DWORD *)(a1 + 20);
      v9 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                       * (_QWORD)(*a3)[6]));
      v245 = &unk_2513463C8;
      v246 = mlx::core::allocator::free;
      v247 = &v245;
      mlx::core::array::set_data(a3, (uint64_t)v9, (uint64_t)&v245);
      v10 = v247;
      if (v247 == &v245)
      {
        v11 = 4;
        v10 = &v245;
      }
      else
      {
        if (!v247)
          goto LABEL_26;
        v11 = 5;
      }
      (*((void (**)(void))*v10 + v11))();
LABEL_26:
      v32 = *(const void ***)v3;
      if (v8 < 0)
        v8 += (unint64_t)((_BYTE *)v32[1] - (_BYTE *)*v32) >> 2;
      v33 = (unint64_t)v32[6];
      v34 = mlx::core::array::shape(v3, v8);
      v35 = *(const void ***)v3;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v240, *v35, (uint64_t)v35[1], ((_BYTE *)v35[1] - (_BYTE *)*v35) >> 2);
      v36 = (char *)v240 + 4 * v8;
      v37 = v241 - (v36 + 4);
      if (v241 != v36 + 4)
        memmove((char *)v240 + 4 * v8, v36 + 4, v241 - (v36 + 4));
      v241 = &v36[v37];
      v38 = *(const void ***)v3;
      __p = 0;
      v238 = 0;
      v239 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v38[3], (uint64_t)v38[4], ((_BYTE *)v38[4] - (_BYTE *)v38[3]) >> 3);
      v39 = v8;
      v40 = (char *)__p + 8 * v8;
      v41 = v238 - (v40 + 8);
      if (v238 != v40 + 8)
        memmove(v40, v40 + 8, v238 - (v40 + 8));
      v238 = &v40[v41];
      v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * v39);
      v43 = mlx::core::array::shape(v3, v39);
      if (v33 >= v34)
      {
        v44 = 0;
        v45 = v42 * v43;
        v46 = v33 / v34;
        if (v46 <= 1)
          v46 = 1;
        v228 = v46;
        do
        {
          v47 = (int *)v240;
          v48 = (unint64_t)(v241 - (_BYTE *)v240) >> 2;
          v49 = 0;
          v50 = (v48 - 1);
          if ((int)v48 - 1 >= 0)
          {
            v51 = __p;
            v52 = v44;
            do
            {
              v53 = ldiv(v52, v47[v50]);
              v52 = v53.quot;
              v49 += v51[v50--] * v53.rem;
            }
            while (v50 != -1);
          }
          v54 = *(_QWORD *)(*(_QWORD *)v235 + 152);
          v55 = (unsigned int *)&(*a3)[19][v49];
          if (v45)
          {
            v56 = 0;
            v57 = 0;
            do
            {
              v55[v56] = v57++;
              v56 += v42;
            }
            while (v45 != v56);
          }
          v243 = v54 + 4 * v49;
          v244 = v42;
          if ((int)(v45 / v42) <= 128)
          {
          }
          else
          {
            v58 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v45 / v42));
            if (v58)
              operator delete(v58);
          }
          ++v44;
        }
        while (v44 != v228);
      }
      goto LABEL_191;
    case 5:
      v24 = *(_DWORD *)(a1 + 20);
      v25 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v245 = &unk_2513463C8;
      v246 = mlx::core::allocator::free;
      v247 = &v245;
      mlx::core::array::set_data(a3, (uint64_t)v25, (uint64_t)&v245);
      v26 = v247;
      if (v247 == &v245)
      {
        v27 = 4;
        v26 = &v245;
      }
      else
      {
        if (!v247)
          goto LABEL_146;
        v27 = 5;
      }
      (*((void (**)(void))*v26 + v27))();
LABEL_146:
      v172 = *(const void ***)v3;
      if (v24 < 0)
        v24 += (unint64_t)((_BYTE *)v172[1] - (_BYTE *)*v172) >> 2;
      v173 = (unint64_t)v172[6];
      v174 = mlx::core::array::shape(v3, v24);
      v175 = *(const void ***)v3;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v240, *v175, (uint64_t)v175[1], ((_BYTE *)v175[1] - (_BYTE *)*v175) >> 2);
      v176 = (char *)v240 + 4 * v24;
      v177 = v241 - (v176 + 4);
      if (v241 != v176 + 4)
        memmove((char *)v240 + 4 * v24, v176 + 4, v241 - (v176 + 4));
      v241 = &v176[v177];
      v178 = *(const void ***)v3;
      __p = 0;
      v238 = 0;
      v239 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v178[3], (uint64_t)v178[4], ((_BYTE *)v178[4] - (_BYTE *)v178[3]) >> 3);
      v179 = v24;
      v180 = (char *)__p + 8 * v24;
      v181 = v238 - (v180 + 8);
      if (v238 != v180 + 8)
        memmove(v180, v180 + 8, v238 - (v180 + 8));
      v238 = &v180[v181];
      v182 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * v179);
      v183 = mlx::core::array::shape(v3, v179);
      if (v173 >= v174)
      {
        v184 = 0;
        v185 = v182 * v183;
        v186 = v173 / v174;
        if (v186 <= 1)
          v186 = 1;
        v233 = v186;
        do
        {
          v187 = (int *)v240;
          v188 = (unint64_t)(v241 - (_BYTE *)v240) >> 2;
          v189 = 0;
          v190 = (v188 - 1);
          if ((int)v188 - 1 >= 0)
          {
            v191 = __p;
            v192 = v184;
            do
            {
              v193 = ldiv(v192, v187[v190]);
              v192 = v193.quot;
              v189 += v191[v190--] * v193.rem;
            }
            while (v190 != -1);
          }
          v194 = *(_QWORD *)(*(_QWORD *)v235 + 152);
          v195 = (unsigned int *)&(*a3)[19][v189];
          if (v185)
          {
            v196 = 0;
            v197 = 0;
            do
            {
              v195[v196] = v197++;
              v196 += v182;
            }
            while (v185 != v196);
          }
          v243 = v194 + 8 * v189;
          v244 = v182;
          if ((int)(v185 / v182) <= 128)
          {
          }
          else
          {
            v198 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v185 / v182));
            if (v198)
              operator delete(v198);
          }
          ++v184;
        }
        while (v184 != v233);
      }
      goto LABEL_191;
    case 6:
      v28 = *(_DWORD *)(a1 + 20);
      v29 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v245 = &unk_2513463C8;
      v246 = mlx::core::allocator::free;
      v247 = &v245;
      mlx::core::array::set_data(a3, (uint64_t)v29, (uint64_t)&v245);
      v30 = v247;
      if (v247 == &v245)
      {
        v31 = 4;
        v30 = &v245;
      }
      else
      {
        if (!v247)
          goto LABEL_170;
        v31 = 5;
      }
      (*((void (**)(void))*v30 + v31))();
LABEL_170:
      v200 = *(const void ***)v3;
      if (v28 < 0)
        v28 += (unint64_t)((_BYTE *)v200[1] - (_BYTE *)*v200) >> 2;
      v201 = (unint64_t)v200[6];
      v202 = mlx::core::array::shape(v3, v28);
      v203 = *(const void ***)v3;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v240, *v203, (uint64_t)v203[1], ((_BYTE *)v203[1] - (_BYTE *)*v203) >> 2);
      v204 = (char *)v240 + 4 * v28;
      v205 = v241 - (v204 + 4);
      if (v241 != v204 + 4)
        memmove((char *)v240 + 4 * v28, v204 + 4, v241 - (v204 + 4));
      v241 = &v204[v205];
      v206 = *(const void ***)v3;
      __p = 0;
      v238 = 0;
      v239 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v206[3], (uint64_t)v206[4], ((_BYTE *)v206[4] - (_BYTE *)v206[3]) >> 3);
      v207 = v28;
      v208 = (char *)__p + 8 * v28;
      v209 = v238 - (v208 + 8);
      if (v238 != v208 + 8)
        memmove(v208, v208 + 8, v238 - (v208 + 8));
      v238 = &v208[v209];
      v210 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * v207);
      v211 = mlx::core::array::shape(v3, v207);
      if (v201 >= v202)
      {
        v212 = 0;
        v213 = v210 * v211;
        v214 = v201 / v202;
        if (v214 <= 1)
          v214 = 1;
        v234 = v214;
        do
        {
          v215 = (int *)v240;
          v216 = (unint64_t)(v241 - (_BYTE *)v240) >> 2;
          v217 = 0;
          v218 = (v216 - 1);
          if ((int)v216 - 1 >= 0)
          {
            v219 = __p;
            v220 = v212;
            do
            {
              v221 = ldiv(v220, v215[v218]);
              v220 = v221.quot;
              v217 += v219[v218--] * v221.rem;
            }
            while (v218 != -1);
          }
          v222 = *(_QWORD *)(*(_QWORD *)v235 + 152);
          v223 = (unsigned int *)&(*a3)[19][v217];
          if (v213)
          {
            v224 = 0;
            v225 = 0;
            do
            {
              v223[v224] = v225++;
              v224 += v210;
            }
            while (v213 != v224);
          }
          v243 = v222 + 4 * v217;
          v244 = v210;
          if ((int)(v213 / v210) <= 128)
          {
          }
          else
          {
            v226 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v213 / v210));
            if (v226)
              operator delete(v226);
          }
          ++v212;
        }
        while (v212 != v234);
      }
LABEL_191:
      if (__p)
      {
        v238 = (char *)__p;
        operator delete(__p);
      }
      if (v240)
      {
        v241 = (char *)v240;
        operator delete(v240);
      }
      return;
    default:
      return;
  }
}

void sub_2422FDB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void mlx::core::Sort::eval(uint64_t a1, uint64_t a2, mlx::core::array *this, float a4)
{
  mlx::core::array *v4;
  const void **v5;
  int v7;
  int v8;
  const void **v9;
  unint64_t v10;
  int v11;
  const void **v12;
  char *v13;
  int64_t v14;
  const void **v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int quot;
  ldiv_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  const void **v36;
  unint64_t v37;
  int v38;
  const void **v39;
  char *v40;
  int64_t v41;
  const void **v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  ldiv_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  int v62;
  const void **v63;
  unint64_t v64;
  int v65;
  const void **v66;
  char *v67;
  int64_t v68;
  const void **v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  ldiv_t v84;
  unsigned int *v85;
  unsigned int *v86;
  uint64_t v87;
  int v88;
  int v89;
  const void **v90;
  unint64_t v91;
  int v92;
  const void **v93;
  char *v94;
  int64_t v95;
  const void **v96;
  uint64_t v97;
  char *v98;
  int64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  int v110;
  ldiv_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  int v115;
  int v116;
  const void **v117;
  unint64_t v118;
  int v119;
  const void **v120;
  char *v121;
  int64_t v122;
  const void **v123;
  uint64_t v124;
  char *v125;
  int64_t v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  int *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  int v137;
  ldiv_t v138;
  int *v139;
  int *v140;
  uint64_t v141;
  int v142;
  int v143;
  const void **v144;
  unint64_t v145;
  int v146;
  const void **v147;
  char *v148;
  int64_t v149;
  const void **v150;
  uint64_t v151;
  char *v152;
  int64_t v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  int v164;
  ldiv_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  int v169;
  int v170;
  const void **v171;
  unint64_t v172;
  int v173;
  const void **v174;
  char *v175;
  int64_t v176;
  const void **v177;
  uint64_t v178;
  char *v179;
  int64_t v180;
  unint64_t v181;
  int v182;
  float v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  int *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  int v192;
  ldiv_t v193;
  float *v194;
  float *v195;
  uint64_t v196;
  float v197;
  void *__p;
  char *v199;
  uint64_t v200;
  void *v201;
  char *v202;
  uint64_t v203;

  v4 = *(mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Sort::eval();
  v5 = *(const void ***)v4;
  switch(*(_DWORD *)(*(_QWORD *)v4 + 56))
  {
    case 0:
      v7 = *(_DWORD *)(a1 + 20);
      if (((_BYTE)v5[21] & 1) != 0)
        v8 = 1;
      else
        v8 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, this, v8, a4);
      v9 = *(const void ***)v4;
      if (v7 < 0)
        v7 += (unint64_t)((_BYTE *)v9[1] - (_BYTE *)*v9) >> 2;
      v10 = (unint64_t)v9[6];
      v11 = mlx::core::array::shape(v4, v7);
      v12 = *(const void ***)v4;
      v201 = 0;
      v202 = 0;
      v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v12, (uint64_t)v12[1], ((_BYTE *)v12[1] - (_BYTE *)*v12) >> 2);
      v13 = (char *)v201 + 4 * v7;
      v14 = v202 - (v13 + 4);
      if (v202 != v13 + 4)
        memmove((char *)v201 + 4 * v7, v13 + 4, v202 - (v13 + 4));
      v202 = &v13[v14];
      v15 = *(const void ***)v4;
      __p = 0;
      v199 = 0;
      v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v15[3], (uint64_t)v15[4], ((_BYTE *)v15[4] - (_BYTE *)v15[3]) >> 3);
      v16 = v7;
      v17 = (char *)__p + 8 * v7;
      v18 = v199 - (v17 + 8);
      if (v199 != v17 + 8)
        memmove(v17, v17 + 8, v199 - (v17 + 8));
      v199 = &v17[v18];
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v16);
      v20 = mlx::core::array::shape(v4, v16);
      if (v10 >= v11)
      {
        v21 = 0;
        v22 = v19 * v20;
        if (v10 / v11 <= 1)
          v23 = 1;
        else
          v23 = v10 / v11;
        do
        {
          v24 = (int *)v201;
          v25 = (unint64_t)(v202 - (_BYTE *)v201) >> 2;
          v26 = 0;
          v27 = (v25 - 1);
          if ((int)v25 - 1 >= 0)
          {
            v28 = __p;
            quot = v21;
            do
            {
              v30 = ldiv(quot, v24[v27]);
              quot = v30.quot;
              v26 += v28[v27--] * v30.rem;
            }
            while (v27 != -1);
          }
          v31 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 152) + v26);
          if ((int)(v22 / v19) <= 128)
          {
          }
          else
          {
            v32 = (unsigned __int8 *)std::get_temporary_buffer[abi:ne180100]<BOOL>((v22 / v19));
            if (v32)
              operator delete(v32);
          }
          ++v21;
        }
        while (v21 != v23);
      }
      goto LABEL_156;
    case 1:
      v34 = *(_DWORD *)(a1 + 20);
      if (((_BYTE)v5[21] & 1) != 0)
        v35 = 1;
      else
        v35 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, this, v35, a4);
      v36 = *(const void ***)v4;
      if (v34 < 0)
        v34 += (unint64_t)((_BYTE *)v36[1] - (_BYTE *)*v36) >> 2;
      v37 = (unint64_t)v36[6];
      v38 = mlx::core::array::shape(v4, v34);
      v39 = *(const void ***)v4;
      v201 = 0;
      v202 = 0;
      v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v39, (uint64_t)v39[1], ((_BYTE *)v39[1] - (_BYTE *)*v39) >> 2);
      v40 = (char *)v201 + 4 * v34;
      v41 = v202 - (v40 + 4);
      if (v202 != v40 + 4)
        memmove((char *)v201 + 4 * v34, v40 + 4, v202 - (v40 + 4));
      v202 = &v40[v41];
      v42 = *(const void ***)v4;
      __p = 0;
      v199 = 0;
      v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v42[3], (uint64_t)v42[4], ((_BYTE *)v42[4] - (_BYTE *)v42[3]) >> 3);
      v43 = v34;
      v44 = (char *)__p + 8 * v34;
      v45 = v199 - (v44 + 8);
      if (v199 != v44 + 8)
        memmove(v44, v44 + 8, v199 - (v44 + 8));
      v199 = &v44[v45];
      v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v43);
      v47 = mlx::core::array::shape(v4, v43);
      if (v37 >= v38)
      {
        v48 = 0;
        v49 = v46 * v47;
        if (v37 / v38 <= 1)
          v50 = 1;
        else
          v50 = v37 / v38;
        do
        {
          v51 = (int *)v201;
          v52 = (unint64_t)(v202 - (_BYTE *)v201) >> 2;
          v53 = 0;
          v54 = (v52 - 1);
          if ((int)v52 - 1 >= 0)
          {
            v55 = __p;
            v56 = v48;
            do
            {
              v57 = ldiv(v56, v51[v54]);
              v56 = v57.quot;
              v53 += v55[v54--] * v57.rem;
            }
            while (v54 != -1);
          }
          v58 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)this + 152) + v53);
          if ((int)(v49 / v46) <= 128)
          {
          }
          else
          {
            v59 = (unsigned __int8 *)std::get_temporary_buffer[abi:ne180100]<BOOL>((v49 / v46));
            if (v59)
              operator delete(v59);
          }
          ++v48;
        }
        while (v48 != v50);
      }
      goto LABEL_156;
    case 2:
      v61 = *(_DWORD *)(a1 + 20);
      if (((_BYTE)v5[21] & 1) != 0)
        v62 = 1;
      else
        v62 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, this, v62, a4);
      v63 = *(const void ***)v4;
      if (v61 < 0)
        v61 += (unint64_t)((_BYTE *)v63[1] - (_BYTE *)*v63) >> 2;
      v64 = (unint64_t)v63[6];
      v65 = mlx::core::array::shape(v4, v61);
      v66 = *(const void ***)v4;
      v201 = 0;
      v202 = 0;
      v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v66, (uint64_t)v66[1], ((_BYTE *)v66[1] - (_BYTE *)*v66) >> 2);
      v67 = (char *)v201 + 4 * v61;
      v68 = v202 - (v67 + 4);
      if (v202 != v67 + 4)
        memmove((char *)v201 + 4 * v61, v67 + 4, v202 - (v67 + 4));
      v202 = &v67[v68];
      v69 = *(const void ***)v4;
      __p = 0;
      v199 = 0;
      v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v69[3], (uint64_t)v69[4], ((_BYTE *)v69[4] - (_BYTE *)v69[3]) >> 3);
      v70 = v61;
      v71 = (char *)__p + 8 * v61;
      v72 = v199 - (v71 + 8);
      if (v199 != v71 + 8)
        memmove(v71, v71 + 8, v199 - (v71 + 8));
      v199 = &v71[v72];
      v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v70);
      v74 = mlx::core::array::shape(v4, v70);
      if (v64 >= v65)
      {
        v75 = 0;
        v76 = v73 * v74;
        if (v64 / v65 <= 1)
          v77 = 1;
        else
          v77 = v64 / v65;
        do
        {
          v78 = (int *)v201;
          v79 = (unint64_t)(v202 - (_BYTE *)v201) >> 2;
          v80 = 0;
          v81 = (v79 - 1);
          if ((int)v79 - 1 >= 0)
          {
            v82 = __p;
            v83 = v75;
            do
            {
              v84 = ldiv(v83, v78[v81]);
              v83 = v84.quot;
              v80 += v82[v81--] * v84.rem;
            }
            while (v81 != -1);
          }
          v85 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 152) + 4 * v80);
          if ((int)(v76 / v73) <= 128)
          {
          }
          else
          {
            v86 = (unsigned int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v76 / v73));
            if (v86)
              operator delete(v86);
          }
          ++v75;
        }
        while (v75 != v77);
      }
      goto LABEL_156;
    case 3:
      v88 = *(_DWORD *)(a1 + 20);
      if (((_BYTE)v5[21] & 1) != 0)
        v89 = 1;
      else
        v89 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, this, v89, a4);
      v90 = *(const void ***)v4;
      if (v88 < 0)
        v88 += (unint64_t)((_BYTE *)v90[1] - (_BYTE *)*v90) >> 2;
      v91 = (unint64_t)v90[6];
      v92 = mlx::core::array::shape(v4, v88);
      v93 = *(const void ***)v4;
      v201 = 0;
      v202 = 0;
      v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v93, (uint64_t)v93[1], ((_BYTE *)v93[1] - (_BYTE *)*v93) >> 2);
      v94 = (char *)v201 + 4 * v88;
      v95 = v202 - (v94 + 4);
      if (v202 != v94 + 4)
        memmove((char *)v201 + 4 * v88, v94 + 4, v202 - (v94 + 4));
      v202 = &v94[v95];
      v96 = *(const void ***)v4;
      __p = 0;
      v199 = 0;
      v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v96[3], (uint64_t)v96[4], ((_BYTE *)v96[4] - (_BYTE *)v96[3]) >> 3);
      v97 = v88;
      v98 = (char *)__p + 8 * v88;
      v99 = v199 - (v98 + 8);
      if (v199 != v98 + 8)
        memmove(v98, v98 + 8, v199 - (v98 + 8));
      v199 = &v98[v99];
      v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v97);
      v101 = mlx::core::array::shape(v4, v97);
      if (v91 >= v92)
      {
        v102 = 0;
        v103 = v100 * v101;
        if (v91 / v92 <= 1)
          v104 = 1;
        else
          v104 = v91 / v92;
        do
        {
          v105 = (int *)v201;
          v106 = (unint64_t)(v202 - (_BYTE *)v201) >> 2;
          v107 = 0;
          v108 = (v106 - 1);
          if ((int)v106 - 1 >= 0)
          {
            v109 = __p;
            v110 = v102;
            do
            {
              v111 = ldiv(v110, v105[v108]);
              v110 = v111.quot;
              v107 += v109[v108--] * v111.rem;
            }
            while (v108 != -1);
          }
          v112 = (char *)(*(_QWORD *)(*(_QWORD *)this + 152) + v107);
          if ((int)(v103 / v100) <= 128)
          {
          }
          else
          {
            v113 = (char *)std::get_temporary_buffer[abi:ne180100]<BOOL>((v103 / v100));
            if (v113)
              operator delete(v113);
          }
          ++v102;
        }
        while (v102 != v104);
      }
      goto LABEL_156;
    case 4:
      v115 = *(_DWORD *)(a1 + 20);
      if (((_BYTE)v5[21] & 1) != 0)
        v116 = 1;
      else
        v116 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, this, v116, a4);
      v117 = *(const void ***)v4;
      if (v115 < 0)
        v115 += (unint64_t)((_BYTE *)v117[1] - (_BYTE *)*v117) >> 2;
      v118 = (unint64_t)v117[6];
      v119 = mlx::core::array::shape(v4, v115);
      v120 = *(const void ***)v4;
      v201 = 0;
      v202 = 0;
      v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v120, (uint64_t)v120[1], ((_BYTE *)v120[1] - (_BYTE *)*v120) >> 2);
      v121 = (char *)v201 + 4 * v115;
      v122 = v202 - (v121 + 4);
      if (v202 != v121 + 4)
        memmove((char *)v201 + 4 * v115, v121 + 4, v202 - (v121 + 4));
      v202 = &v121[v122];
      v123 = *(const void ***)v4;
      __p = 0;
      v199 = 0;
      v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v123[3], (uint64_t)v123[4], ((_BYTE *)v123[4] - (_BYTE *)v123[3]) >> 3);
      v124 = v115;
      v125 = (char *)__p + 8 * v115;
      v126 = v199 - (v125 + 8);
      if (v199 != v125 + 8)
        memmove(v125, v125 + 8, v199 - (v125 + 8));
      v199 = &v125[v126];
      v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v124);
      v128 = mlx::core::array::shape(v4, v124);
      if (v118 >= v119)
      {
        v129 = 0;
        v130 = v127 * v128;
        if (v118 / v119 <= 1)
          v131 = 1;
        else
          v131 = v118 / v119;
        do
        {
          v132 = (int *)v201;
          v133 = (unint64_t)(v202 - (_BYTE *)v201) >> 2;
          v134 = 0;
          v135 = (v133 - 1);
          if ((int)v133 - 1 >= 0)
          {
            v136 = __p;
            v137 = v129;
            do
            {
              v138 = ldiv(v137, v132[v135]);
              v137 = v138.quot;
              v134 += v136[v135--] * v138.rem;
            }
            while (v135 != -1);
          }
          v139 = (int *)(*(_QWORD *)(*(_QWORD *)this + 152) + 4 * v134);
          if ((int)(v130 / v127) <= 128)
          {
          }
          else
          {
            v140 = (int *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v130 / v127));
            if (v140)
              operator delete(v140);
          }
          ++v129;
        }
        while (v129 != v131);
      }
      goto LABEL_156;
    case 5:
      v142 = *(_DWORD *)(a1 + 20);
      if (((_BYTE)v5[21] & 1) != 0)
        v143 = 1;
      else
        v143 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, this, v143, a4);
      v144 = *(const void ***)v4;
      if (v142 < 0)
        v142 += (unint64_t)((_BYTE *)v144[1] - (_BYTE *)*v144) >> 2;
      v145 = (unint64_t)v144[6];
      v146 = mlx::core::array::shape(v4, v142);
      v147 = *(const void ***)v4;
      v201 = 0;
      v202 = 0;
      v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v147, (uint64_t)v147[1], ((_BYTE *)v147[1] - (_BYTE *)*v147) >> 2);
      v148 = (char *)v201 + 4 * v142;
      v149 = v202 - (v148 + 4);
      if (v202 != v148 + 4)
        memmove((char *)v201 + 4 * v142, v148 + 4, v202 - (v148 + 4));
      v202 = &v148[v149];
      v150 = *(const void ***)v4;
      __p = 0;
      v199 = 0;
      v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v150[3], (uint64_t)v150[4], ((_BYTE *)v150[4] - (_BYTE *)v150[3]) >> 3);
      v151 = v142;
      v152 = (char *)__p + 8 * v142;
      v153 = v199 - (v152 + 8);
      if (v199 != v152 + 8)
        memmove(v152, v152 + 8, v199 - (v152 + 8));
      v199 = &v152[v153];
      v154 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v151);
      v155 = mlx::core::array::shape(v4, v151);
      if (v145 >= v146)
      {
        v156 = 0;
        v157 = v154 * v155;
        if (v145 / v146 <= 1)
          v158 = 1;
        else
          v158 = v145 / v146;
        do
        {
          v159 = (int *)v201;
          v160 = (unint64_t)(v202 - (_BYTE *)v201) >> 2;
          v161 = 0;
          v162 = (v160 - 1);
          if ((int)v160 - 1 >= 0)
          {
            v163 = __p;
            v164 = v156;
            do
            {
              v165 = ldiv(v164, v159[v162]);
              v164 = v165.quot;
              v161 += v163[v162--] * v165.rem;
            }
            while (v162 != -1);
          }
          v166 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v161);
          if ((int)(v157 / v154) <= 128)
          {
          }
          else
          {
            v167 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<long long>((v157 / v154));
            if (v167)
              operator delete(v167);
          }
          ++v156;
        }
        while (v156 != v158);
      }
      goto LABEL_156;
    case 6:
      v169 = *(_DWORD *)(a1 + 20);
      if (((_BYTE)v5[21] & 1) != 0)
        v170 = 1;
      else
        v170 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, this, v170, a4);
      v171 = *(const void ***)v4;
      if (v169 < 0)
        v169 += (unint64_t)((_BYTE *)v171[1] - (_BYTE *)*v171) >> 2;
      v172 = (unint64_t)v171[6];
      v173 = mlx::core::array::shape(v4, v169);
      v174 = *(const void ***)v4;
      v201 = 0;
      v202 = 0;
      v203 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v201, *v174, (uint64_t)v174[1], ((_BYTE *)v174[1] - (_BYTE *)*v174) >> 2);
      v175 = (char *)v201 + 4 * v169;
      v176 = v202 - (v175 + 4);
      if (v202 != v175 + 4)
        memmove((char *)v201 + 4 * v169, v175 + 4, v202 - (v175 + 4));
      v202 = &v175[v176];
      v177 = *(const void ***)v4;
      __p = 0;
      v199 = 0;
      v200 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v177[3], (uint64_t)v177[4], ((_BYTE *)v177[4] - (_BYTE *)v177[3]) >> 3);
      v178 = v169;
      v179 = (char *)__p + 8 * v169;
      v180 = v199 - (v179 + 8);
      if (v199 != v179 + 8)
        memmove(v179, v179 + 8, v199 - (v179 + 8));
      v199 = &v179[v180];
      v181 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v178);
      v182 = mlx::core::array::shape(v4, v178);
      if (v172 >= v173)
      {
        v184 = 0;
        v185 = v181 * v182;
        if (v172 / v173 <= 1)
          v186 = 1;
        else
          v186 = v172 / v173;
        do
        {
          v187 = (int *)v201;
          v188 = (unint64_t)(v202 - (_BYTE *)v201) >> 2;
          v189 = 0;
          v190 = (v188 - 1);
          if ((int)v188 - 1 >= 0)
          {
            v191 = __p;
            v192 = v184;
            do
            {
              v193 = ldiv(v192, v187[v190]);
              v192 = v193.quot;
              v189 += v191[v190--] * v193.rem;
            }
            while (v190 != -1);
          }
          v194 = (float *)(*(_QWORD *)(*(_QWORD *)this + 152) + 4 * v189);
          if ((int)(v185 / v181) <= 128)
          {
          }
          else
          {
            v195 = (float *)std::get_temporary_buffer[abi:ne180100]<unsigned int>((v185 / v181));
            if (v195)
              operator delete(v195);
          }
          ++v184;
        }
        while (v184 != v186);
      }
LABEL_156:
      if (__p)
      {
        v199 = (char *)__p;
        operator delete(__p);
      }
      if (v201)
      {
        v202 = (char *)v201;
        operator delete(v201);
      }
      break;
    default:
      return;
  }
}

void sub_2422FEA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void mlx::core::ArgPartition::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::array *v3;
  int v4;
  uint64_t v5;
  mlx::core::scheduler *v6;
  void **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  mlx::core::scheduler *v11;
  void **v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  mlx::core::scheduler *v16;
  void **v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  mlx::core::scheduler *v21;
  void **v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  mlx::core::scheduler *v26;
  void **v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  mlx::core::scheduler *v31;
  void **v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  mlx::core::scheduler *v36;
  void **v37;
  uint64_t v38;
  const void **v39;
  unint64_t v40;
  int v41;
  const void **v42;
  char *v43;
  int64_t v44;
  const void **v45;
  char *v46;
  int64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  ldiv_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int *v66;
  unint64_t v67;
  unsigned int *v68;
  unint64_t v69;
  unsigned int *v70;
  int *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  BOOL v77;
  int *v78;
  unsigned int *v79;
  uint64_t v80;
  int v81;
  unsigned int *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned int *v90;
  uint64_t v91;
  int v92;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int *v98;
  unsigned int *v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v111;
  int v112;
  int *v114;
  uint64_t v115;
  int v116;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unsigned int *v130;
  uint64_t v131;
  unint64_t v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int *v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  BOOL v141;
  int v142;
  const void **v143;
  unint64_t v144;
  int v145;
  const void **v146;
  char *v147;
  int64_t v148;
  const void **v149;
  char *v150;
  int64_t v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  int v163;
  ldiv_t v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  unsigned int *v170;
  unint64_t v171;
  unsigned int *v172;
  unint64_t v173;
  unsigned int *v174;
  int *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  BOOL v181;
  int *v182;
  unsigned int *v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int *v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int *v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  int *v202;
  unsigned int *v203;
  int *v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v215;
  unsigned int v216;
  int *v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int *v234;
  uint64_t v235;
  unint64_t v236;
  unsigned int *v237;
  unsigned int *v238;
  unsigned int *v239;
  int *v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  BOOL v245;
  int v246;
  const void **v247;
  unint64_t v248;
  int v249;
  const void **v250;
  char *v251;
  int64_t v252;
  const void **v253;
  char *v254;
  int64_t v255;
  unint64_t v256;
  int v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  int *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  int v267;
  ldiv_t v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  unsigned int *v274;
  unint64_t v275;
  unsigned int *v276;
  unint64_t v277;
  unsigned int *v278;
  int *v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  BOOL v285;
  int *v286;
  unsigned int *v287;
  uint64_t v288;
  unsigned int *v290;
  unint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  unsigned int *v296;
  uint64_t v297;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  int *v303;
  unsigned int *v304;
  int *v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  uint64_t v311;
  uint64_t v312;
  int v313;
  int v314;
  uint64_t v316;
  int *v318;
  uint64_t v319;
  uint64_t v321;
  int v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v327;
  uint64_t v328;
  int v329;
  int v330;
  unsigned int *v331;
  uint64_t v332;
  unint64_t v333;
  unsigned int *v334;
  unsigned int *v335;
  unsigned int *v336;
  int *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  int v341;
  BOOL v342;
  int v343;
  const void **v344;
  unint64_t v345;
  int v346;
  const void **v347;
  char *v348;
  int64_t v349;
  const void **v350;
  char *v351;
  int64_t v352;
  unint64_t v353;
  int v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  int *v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  _QWORD *v363;
  int v364;
  ldiv_t v365;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  unsigned int *v371;
  unint64_t v372;
  unsigned int *v373;
  unint64_t v374;
  unsigned int *v375;
  int *v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  BOOL v382;
  int *v383;
  unsigned int *v384;
  uint64_t v385;
  unsigned int v386;
  unsigned int *v388;
  unint64_t v389;
  uint64_t v390;
  unsigned int v391;
  uint64_t v392;
  unsigned int v393;
  unsigned int *v395;
  uint64_t v396;
  unsigned int v397;
  uint64_t v399;
  uint64_t v400;
  unsigned int v401;
  unsigned int v402;
  int *v403;
  unsigned int *v404;
  int *v405;
  uint64_t v406;
  uint64_t v407;
  unsigned int v408;
  unsigned int v409;
  uint64_t v411;
  uint64_t v412;
  unsigned int v413;
  unsigned int v414;
  uint64_t v416;
  unsigned int v417;
  int *v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v423;
  unsigned int v424;
  uint64_t v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t v428;
  unsigned int v429;
  uint64_t v431;
  uint64_t v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int *v435;
  uint64_t v436;
  unint64_t v437;
  unsigned int *v438;
  unsigned int *v439;
  unsigned int *v440;
  int *v441;
  uint64_t v442;
  uint64_t v443;
  unsigned int v444;
  unsigned int v445;
  BOOL v446;
  int v447;
  const void **v448;
  unint64_t v449;
  int v450;
  const void **v451;
  char *v452;
  int64_t v453;
  const void **v454;
  char *v455;
  int64_t v456;
  unint64_t v457;
  int v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  int *v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  int quot;
  ldiv_t v469;
  uint64_t v470;
  int *v471;
  uint64_t v472;
  int v473;
  uint64_t v474;
  unsigned int *v475;
  unint64_t v476;
  unsigned int *v477;
  unint64_t v478;
  unsigned int *v479;
  int *v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int v484;
  unsigned int v485;
  BOOL v486;
  int *v487;
  unsigned int *v488;
  uint64_t v489;
  unsigned int v490;
  unsigned int *v492;
  unint64_t v493;
  uint64_t v494;
  unsigned int v495;
  uint64_t v496;
  unsigned int v497;
  unsigned int *v499;
  uint64_t v500;
  unsigned int v501;
  uint64_t v503;
  uint64_t v504;
  unsigned int v505;
  unsigned int v506;
  int *v507;
  unsigned int *v508;
  int *v509;
  uint64_t v510;
  uint64_t v511;
  unsigned int v512;
  unsigned int v513;
  uint64_t v515;
  uint64_t v516;
  unsigned int v517;
  unsigned int v518;
  uint64_t v520;
  unsigned int v521;
  int *v523;
  uint64_t v524;
  unsigned int v525;
  uint64_t v527;
  unsigned int v528;
  uint64_t v529;
  unsigned int v530;
  uint64_t v531;
  uint64_t v532;
  unsigned int v533;
  uint64_t v535;
  uint64_t v536;
  unsigned int v537;
  unsigned int v538;
  unsigned int *v539;
  uint64_t v540;
  unint64_t v541;
  unsigned int *v542;
  unsigned int *v543;
  unsigned int *v544;
  int *v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int v548;
  unsigned int v549;
  BOOL v550;
  int v551;
  const void **v552;
  unint64_t v553;
  int v554;
  const void **v555;
  char *v556;
  int64_t v557;
  const void **v558;
  char *v559;
  int64_t v560;
  unint64_t v561;
  int v562;
  uint64_t v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v566;
  int *v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  _QWORD *v571;
  int v572;
  ldiv_t v573;
  uint64_t v574;
  int *v575;
  uint64_t v576;
  int v577;
  uint64_t v578;
  unsigned int *v579;
  unint64_t v580;
  unsigned int *v581;
  unint64_t v582;
  unsigned int *v583;
  int *v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  BOOL v590;
  int *v591;
  unsigned int *v592;
  uint64_t v593;
  uint64_t v594;
  unsigned int *v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  int *v611;
  unsigned int *v612;
  int *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v624;
  uint64_t v625;
  int *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unsigned int *v643;
  uint64_t v644;
  unint64_t v645;
  unsigned int *v646;
  unsigned int *v647;
  unsigned int *v648;
  int *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  BOOL v654;
  int v655;
  const void **v656;
  unint64_t v657;
  int v658;
  const void **v659;
  char *v660;
  int64_t v661;
  const void **v662;
  char *v663;
  int64_t v664;
  unint64_t v665;
  int v666;
  uint64_t v667;
  unint64_t v668;
  unint64_t v669;
  uint64_t v670;
  int *v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  _QWORD *v675;
  int v676;
  ldiv_t v677;
  uint64_t v678;
  int *v679;
  uint64_t v680;
  int v681;
  uint64_t v682;
  unsigned int *v683;
  unint64_t v684;
  unsigned int *v685;
  unint64_t v686;
  unsigned int *v687;
  int *v688;
  int v689;
  uint64_t v690;
  uint64_t v691;
  float v692;
  float v693;
  unsigned int *v694;
  unsigned int *v695;
  unint64_t v696;
  uint64_t v697;
  float v698;
  uint64_t v699;
  float v700;
  unsigned int *v701;
  uint64_t v702;
  float v703;
  uint64_t v704;
  uint64_t v705;
  float v706;
  float v707;
  int *v708;
  unsigned int *v709;
  int *v710;
  uint64_t v711;
  uint64_t v712;
  float v713;
  float v714;
  uint64_t v715;
  uint64_t v716;
  float v717;
  float v718;
  int *v719;
  uint64_t v720;
  float v721;
  uint64_t v722;
  float v723;
  int *v724;
  uint64_t v725;
  float v726;
  uint64_t v727;
  float v728;
  uint64_t v729;
  float v730;
  uint64_t v731;
  uint64_t v733;
  float v734;
  uint64_t v735;
  uint64_t v736;
  float v737;
  float v738;
  unsigned int *v739;
  uint64_t v740;
  unint64_t v741;
  unsigned int *v742;
  unsigned int *v743;
  unsigned int *v744;
  int *v745;
  uint64_t v746;
  uint64_t v747;
  float v748;
  float v749;
  int v750;
  unint64_t v751;
  unint64_t v752;
  unint64_t v753;
  unint64_t v754;
  unint64_t v755;
  unint64_t v756;
  unint64_t v757;
  unint64_t v758;
  unint64_t v759;
  unint64_t v760;
  unint64_t v761;
  unint64_t v762;
  unint64_t v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  unint64_t v767;
  unint64_t v768;
  unint64_t v769;
  unint64_t v770;
  unint64_t v771;
  mlx::core::array *v772;
  void *__p;
  char *v775;
  uint64_t v776;
  void *v777;
  char *v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  void *v782;
  uint64_t (*v783)(mlx::core::allocator *);
  void **v784;
  uint64_t v785;

  v785 = *MEMORY[0x24BDAC8D0];
  v3 = *(mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::ArgPartition::eval();
  v772 = *(mlx::core::array **)a2;
  switch(*(_DWORD *)(*(_QWORD *)v3 + 56))
  {
    case 0:
      v4 = *(_DWORD *)(a1 + 20);
      v5 = *(unsigned int *)(a1 + 24);
      v6 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                       * (_QWORD)(*a3)[6]));
      v782 = &unk_2513463C8;
      v783 = mlx::core::allocator::free;
      v784 = &v782;
      mlx::core::array::set_data(a3, (uint64_t)v6, (uint64_t)&v782);
      v7 = v784;
      if (v784 == &v782)
      {
        v8 = 4;
        v7 = &v782;
      }
      else
      {
        if (!v784)
          goto LABEL_458;
        v8 = 5;
      }
      (*((void (**)(void))*v7 + v8))();
LABEL_458:
      v344 = *(const void ***)v3;
      if ((v5 & 0x80000000) != 0)
        v5 += ((_BYTE *)v344[1] - (_BYTE *)*v344) >> 2;
      v345 = (unint64_t)v344[6];
      v346 = mlx::core::array::shape(v3, v5);
      v347 = *(const void ***)v3;
      v777 = 0;
      v778 = 0;
      v779 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v777, *v347, (uint64_t)v347[1], ((_BYTE *)v347[1] - (_BYTE *)*v347) >> 2);
      v348 = (char *)v777 + 4 * (int)v5;
      v349 = v778 - (v348 + 4);
      if (v778 != v348 + 4)
        memmove((char *)v777 + 4 * (int)v5, v348 + 4, v778 - (v348 + 4));
      v778 = &v348[v349];
      v350 = *(const void ***)v3;
      __p = 0;
      v775 = 0;
      v776 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v350[3], (uint64_t)v350[4], ((_BYTE *)v350[4] - (_BYTE *)v350[3]) >> 3);
      v351 = (char *)__p + 8 * (int)v5;
      v352 = v775 - (v351 + 8);
      if (v775 != v351 + 8)
        memmove((char *)__p + 8 * (int)v5, v351 + 8, v775 - (v351 + 8));
      v775 = &v351[v352];
      v353 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * (int)v5);
      v354 = mlx::core::array::shape(v3, v5);
      if (v345 < v346)
        goto LABEL_898;
      v355 = 0;
      v356 = v345 / v346;
      v357 = 4 * v353 * v354;
      v358 = 4 * v353;
      v768 = v353 * v354;
      if (v356 <= 1)
        v356 = 1;
      v754 = v356;
      v761 = v353 * ((v354 & (v4 >> 31)) + v4);
      break;
    case 1:
      v24 = *(_DWORD *)(a1 + 20);
      v25 = *(unsigned int *)(a1 + 24);
      v26 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v782 = &unk_2513463C8;
      v783 = mlx::core::allocator::free;
      v784 = &v782;
      mlx::core::array::set_data(a3, (uint64_t)v26, (uint64_t)&v782);
      v27 = v784;
      if (v784 == &v782)
      {
        v28 = 4;
        v27 = &v782;
      }
      else
      {
        if (!v784)
          goto LABEL_602;
        v28 = 5;
      }
      (*((void (**)(void))*v27 + v28))();
LABEL_602:
      v448 = *(const void ***)v3;
      if ((v25 & 0x80000000) != 0)
        v25 += ((_BYTE *)v448[1] - (_BYTE *)*v448) >> 2;
      v449 = (unint64_t)v448[6];
      v450 = mlx::core::array::shape(v3, v25);
      v451 = *(const void ***)v3;
      v777 = 0;
      v778 = 0;
      v779 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v777, *v451, (uint64_t)v451[1], ((_BYTE *)v451[1] - (_BYTE *)*v451) >> 2);
      v452 = (char *)v777 + 4 * (int)v25;
      v453 = v778 - (v452 + 4);
      if (v778 != v452 + 4)
        memmove((char *)v777 + 4 * (int)v25, v452 + 4, v778 - (v452 + 4));
      v778 = &v452[v453];
      v454 = *(const void ***)v3;
      __p = 0;
      v775 = 0;
      v776 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v454[3], (uint64_t)v454[4], ((_BYTE *)v454[4] - (_BYTE *)v454[3]) >> 3);
      v455 = (char *)__p + 8 * (int)v25;
      v456 = v775 - (v455 + 8);
      if (v775 != v455 + 8)
        memmove((char *)__p + 8 * (int)v25, v455 + 8, v775 - (v455 + 8));
      v775 = &v455[v456];
      v457 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * (int)v25);
      v458 = mlx::core::array::shape(v3, v25);
      if (v449 < v450)
        goto LABEL_898;
      v459 = 0;
      v460 = v449 / v450;
      v461 = 4 * v457 * v458;
      v462 = 4 * v457;
      v769 = v457 * v458;
      if (v460 <= 1)
        v460 = 1;
      v755 = v460;
      v762 = v457 * ((v458 & (v24 >> 31)) + v24);
      do
      {
        v463 = (int *)v777;
        v464 = (unint64_t)(v778 - (_BYTE *)v777) >> 2;
        v465 = 0;
        v466 = (v464 - 1);
        if ((int)v464 - 1 >= 0)
        {
          v467 = __p;
          quot = v459;
          do
          {
            v469 = ldiv(quot, v463[v466]);
            quot = v469.quot;
            v465 += v467[v466--] * v469.rem;
          }
          while (v466 != -1);
        }
        v470 = *(_QWORD *)(*(_QWORD *)v3 + 152);
        v471 = &(*a3)[19][v465];
        if (v769)
        {
          v472 = 0;
          v473 = 0;
          do
          {
            *(int *)((char *)v471 + v472) = v473++;
            v472 += v462;
          }
          while (v461 != v472);
        }
        v474 = v470 + v465;
        v780 = v474;
        v781 = v457;
        if (v762 != v769)
        {
          v475 = (unsigned int *)&v471[v769];
          v476 = v457;
          v477 = (unsigned int *)&v471[v762];
          do
          {
            v478 = (((char *)v475 - (char *)v471) >> 2) / v457;
            if (v478 < 2)
              break;
            if ((_DWORD)v478 == 3)
            {
              break;
            }
            if ((_DWORD)v478 == 2)
            {
              v535 = v475[-v457];
              v536 = *v471;
              v537 = *(unsigned __int8 *)(v474 + v476 * v535);
              v538 = *(unsigned __int8 *)(v474 + v476 * v536);
              if (v537 < v538 || v535 < v536 && v537 == v538)
              {
                *v471 = v535;
                v475[-v457] = v536;
              }
              break;
            }
            if ((int)v478 <= 7)
            {
              v539 = &v475[-v457];
              if (v539 != (unsigned int *)v471)
              {
                v540 = v780;
                v541 = v781;
                v542 = (unsigned int *)&v471[(unint64_t)v462 / 4];
                do
                {
                  v543 = (unsigned int *)&v471[v457];
                  if (v471 != (int *)v475 && v543 != v475)
                  {
                    v544 = v542;
                    v545 = v471;
                    do
                    {
                      v546 = *v544;
                      v547 = *v545;
                      v548 = *(unsigned __int8 *)(v540 + v541 * v546);
                      v549 = *(unsigned __int8 *)(v540 + v541 * v547);
                      if (v548 < v549
                        || (v546 < v547 ? (v550 = v548 == v549) : (v550 = 0), v550))
                      {
                        v545 = (int *)v544;
                      }
                      v544 = (unsigned int *)((char *)v544 + v462);
                    }
                    while (v544 != v475);
                    if (v545 != v471)
                    {
                      v551 = *v471;
                      *v471 = *v545;
                      *v545 = v551;
                    }
                  }
                  v542 = (unsigned int *)((char *)v542 + v462);
                  v471 += v457;
                }
                while (v543 != v539);
              }
              break;
            }
            v479 = (unsigned int *)&v471[(v478 >> 1) * v457];
            v480 = (int *)&v475[-v457];
            v482 = *v471;
            v483 = *v479;
            v474 = v780;
            v476 = v781;
            v484 = *(unsigned __int8 *)(v780 + v781 * v482);
            v485 = *(unsigned __int8 *)(v780 + v781 * v483);
            if (v484 < v485 || (v482 < v483 ? (v486 = v484 == v485) : (v486 = 0), v486))
            {
              v488 = &v475[-v457];
LABEL_641:
              v492 = (unsigned int *)&v471[v457];
              if (v492 < v488)
              {
                v493 = v457;
                while (1)
                {
                  v494 = *v479;
                  v495 = *(unsigned __int8 *)(v474 + v476 * v494);
                  while (1)
                  {
                    v496 = *v492;
                    v497 = *(unsigned __int8 *)(v474 + v476 * v496);
                    if (v497 >= v495 && (v496 >= v494 || v497 != v495))
                      break;
                    v492 = (unsigned int *)((char *)v492 + v462);
                  }
                  v499 = &v488[-v457];
                  do
                  {
                    v488 = v499;
                    v500 = *v499;
                    v501 = *(unsigned __int8 *)(v474 + v476 * v500);
                    if (v501 < v495)
                      break;
                    v499 -= v457;
                  }
                  while (v500 >= v494 || v501 != v495);
                  if (v492 >= v488)
                    break;
                  *v492 = v500;
                  *v488 = v496;
                  ++v481;
                  if (v492 == v479 && v493 == v457)
                  {
                    v479 = v488;
                    v493 = v457;
                  }
                  v492 = (unsigned int *)((char *)v492 + v462);
                }
              }
              if (v492 != v479)
              {
                v503 = *v479;
                v504 = *v492;
                v505 = *(unsigned __int8 *)(v474 + v476 * v503);
                v506 = *(unsigned __int8 *)(v474 + v476 * v504);
                if (v505 < v506 || v503 < v504 && v505 == v506)
                {
                  *v492 = v503;
                  *v479 = v504;
                  ++v481;
                }
              }
              if (v492 == v477)
                break;
              if (!v481)
              {
                v508 = v492;
                if (v492 <= v477)
                {
                  while (&v508[(unint64_t)v462 / 4] != v475)
                  {
                    v515 = v508[v457];
                    v516 = *v508;
                    v517 = *(unsigned __int8 *)(v474 + v476 * v515);
                    v518 = *(unsigned __int8 *)(v474 + v476 * v516);
                    if (v517 >= v518)
                    {
                      v508 = (unsigned int *)((char *)v508 + v462);
                      if (v515 >= v516 || v517 != v518)
                        continue;
                    }
                    goto LABEL_668;
                  }
                }
                else
                {
                  v509 = v471;
                  while (&v509[(unint64_t)v462 / 4] != (int *)v492)
                  {
                    v510 = v509[v457];
                    v511 = *v509;
                    v512 = *(unsigned __int8 *)(v474 + v476 * v510);
                    v513 = *(unsigned __int8 *)(v474 + v476 * v511);
                    if (v512 >= v513)
                    {
                      v509 = (int *)((char *)v509 + v462);
                      if (v510 >= v511 || v512 != v513)
                        continue;
                    }
                    goto LABEL_668;
                  }
                }
                break;
              }
LABEL_668:
              if (v492 <= v477)
              {
                v507 = (int *)&v492[v457];
              }
              else
              {
                v475 = v492;
                v507 = v471;
              }
            }
            else
            {
              v487 = (int *)&v475[-2 * v457];
              while (v487 != v471)
              {
                v488 = (unsigned int *)v487;
                v489 = *v487;
                v490 = *(unsigned __int8 *)(v780 + v781 * v489);
                if (v490 >= v485)
                {
                  v487 -= v457;
                  if (v489 >= v483 || v490 != v485)
                    continue;
                }
                *v471 = v489;
                *v488 = v482;
                ++v481;
                goto LABEL_641;
              }
              v507 = &v471[v457];
              v520 = *v480;
              v521 = *(unsigned __int8 *)(v780 + v781 * v520);
              if (v484 >= v521 && (v482 >= v520 || v484 != v521))
              {
                if (v507 == v480)
                  break;
                v523 = v471;
                while (1)
                {
                  v524 = v523[v457];
                  v525 = *(unsigned __int8 *)(v780 + v781 * v524);
                  if (v484 < v525)
                    break;
                  if (v482 < v524 && v484 == v525)
                    break;
                  v523 = (int *)((char *)v523 + v462);
                  if (&v523[(unint64_t)v462 / 4] == v480)
                    goto LABEL_619;
                }
                v523[v457] = v520;
                *v480 = v524;
                v507 = &v523[2 * v457];
              }
              if (v507 == v480)
                break;
              while (1)
              {
                v527 = *v471;
                v528 = *(unsigned __int8 *)(v474 + v476 * v527);
                v529 = *v507;
                v530 = *(unsigned __int8 *)(v474 + v476 * v529);
                LODWORD(v531) = *v507;
                while (v528 >= v530)
                {
                  if (v528 == v530 && v527 < v529)
                  {
                    LODWORD(v531) = v529;
                    goto LABEL_713;
                  }
                  v507 = (int *)((char *)v507 + v462);
                  v531 = *v507;
                  v530 = *(unsigned __int8 *)(v474 + v476 * v531);
                  LODWORD(v529) = *v507;
                }
                do
                {
                  do
                  {
LABEL_713:
                    v480 -= v457;
                    v532 = *v480;
                    v533 = *(unsigned __int8 *)(v474 + v476 * v532);
                  }
                  while (v528 < v533);
                }
                while (v527 < v532 && v528 == v533);
                if (v507 >= v480)
                  break;
                *v507 = v532;
                *v480 = v531;
                v507 += v457;
              }
              if (v507 > (int *)v477)
                break;
            }
            v471 = v507;
          }
          while (v475 != v477);
        }
LABEL_619:
        ++v459;
        v3 = v772;
      }
      while (v459 != v755);
      goto LABEL_898;
    case 2:
      v14 = *(_DWORD *)(a1 + 20);
      v15 = *(unsigned int *)(a1 + 24);
      v16 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v782 = &unk_2513463C8;
      v783 = mlx::core::allocator::free;
      v784 = &v782;
      mlx::core::array::set_data(a3, (uint64_t)v16, (uint64_t)&v782);
      v17 = v784;
      if (v784 == &v782)
      {
        v18 = 4;
        v17 = &v782;
      }
      else
      {
        if (!v784)
          goto LABEL_170;
        v18 = 5;
      }
      (*((void (**)(void))*v17 + v18))();
LABEL_170:
      v143 = *(const void ***)v3;
      if ((v15 & 0x80000000) != 0)
        v15 += ((_BYTE *)v143[1] - (_BYTE *)*v143) >> 2;
      v144 = (unint64_t)v143[6];
      v145 = mlx::core::array::shape(v3, v15);
      v146 = *(const void ***)v3;
      v777 = 0;
      v778 = 0;
      v779 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v777, *v146, (uint64_t)v146[1], ((_BYTE *)v146[1] - (_BYTE *)*v146) >> 2);
      v147 = (char *)v777 + 4 * (int)v15;
      v148 = v778 - (v147 + 4);
      if (v778 != v147 + 4)
        memmove((char *)v777 + 4 * (int)v15, v147 + 4, v778 - (v147 + 4));
      v778 = &v147[v148];
      v149 = *(const void ***)v3;
      __p = 0;
      v775 = 0;
      v776 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v149[3], (uint64_t)v149[4], ((_BYTE *)v149[4] - (_BYTE *)v149[3]) >> 3);
      v150 = (char *)__p + 8 * (int)v15;
      v151 = v775 - (v150 + 8);
      if (v775 != v150 + 8)
        memmove((char *)__p + 8 * (int)v15, v150 + 8, v775 - (v150 + 8));
      v775 = &v150[v151];
      v152 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * (int)v15);
      v153 = mlx::core::array::shape(v3, v15);
      if (v144 < v145)
        goto LABEL_898;
      v154 = 0;
      v155 = v144 / v145;
      v156 = 4 * v152 * v153;
      v157 = 4 * v152;
      v766 = v152 * v153;
      if (v155 <= 1)
        v155 = 1;
      v752 = v155;
      v759 = v152 * ((v153 & (v14 >> 31)) + v14);
      do
      {
        v158 = (int *)v777;
        v159 = (unint64_t)(v778 - (_BYTE *)v777) >> 2;
        v160 = 0;
        v161 = (v159 - 1);
        if ((int)v159 - 1 >= 0)
        {
          v162 = __p;
          v163 = v154;
          do
          {
            v164 = ldiv(v163, v158[v161]);
            v163 = v164.quot;
            v160 += v162[v161--] * v164.rem;
          }
          while (v161 != -1);
        }
        v165 = *(_QWORD *)(*(_QWORD *)v3 + 152);
        v166 = &(*a3)[19][v160];
        if (v766)
        {
          v167 = 0;
          v168 = 0;
          do
          {
            *(int *)((char *)v166 + v167) = v168++;
            v167 += v157;
          }
          while (v156 != v167);
        }
        v169 = v165 + 4 * v160;
        v780 = v169;
        v781 = v152;
        if (v759 != v766)
        {
          v170 = (unsigned int *)&v166[v766];
          v171 = v152;
          v172 = (unsigned int *)&v166[v759];
          do
          {
            v173 = (((char *)v170 - (char *)v166) >> 2) / v152;
            if (v173 < 2)
              break;
            if ((_DWORD)v173 == 3)
            {
              break;
            }
            if ((_DWORD)v173 == 2)
            {
              v230 = v170[-v152];
              v231 = *v166;
              v232 = *(_DWORD *)(v169 + 4 * v171 * v230);
              v233 = *(_DWORD *)(v169 + 4 * v171 * v231);
              if (v232 < v233 || v230 < v231 && v232 == v233)
              {
                *v166 = v230;
                v170[-v152] = v231;
              }
              break;
            }
            if ((int)v173 <= 7)
            {
              v234 = &v170[-v152];
              if (v234 != (unsigned int *)v166)
              {
                v235 = v780;
                v236 = v781;
                v237 = (unsigned int *)&v166[(unint64_t)v157 / 4];
                do
                {
                  v238 = (unsigned int *)&v166[v152];
                  if (v166 != (int *)v170 && v238 != v170)
                  {
                    v239 = v237;
                    v240 = v166;
                    do
                    {
                      v241 = *v239;
                      v242 = *v240;
                      v243 = *(_DWORD *)(v235 + 4 * v236 * v241);
                      v244 = *(_DWORD *)(v235 + 4 * v236 * v242);
                      if (v243 < v244
                        || (v241 < v242 ? (v245 = v243 == v244) : (v245 = 0), v245))
                      {
                        v240 = (int *)v239;
                      }
                      v239 = (unsigned int *)((char *)v239 + v157);
                    }
                    while (v239 != v170);
                    if (v240 != v166)
                    {
                      v246 = *v166;
                      *v166 = *v240;
                      *v240 = v246;
                    }
                  }
                  v237 = (unsigned int *)((char *)v237 + v157);
                  v166 += v152;
                }
                while (v238 != v234);
              }
              break;
            }
            v174 = (unsigned int *)&v166[(v173 >> 1) * v152];
            v175 = (int *)&v170[-v152];
            v177 = *v166;
            v178 = *v174;
            v169 = v780;
            v171 = v781;
            v179 = *(_DWORD *)(v780 + 4 * v781 * v177);
            v180 = *(_DWORD *)(v780 + 4 * v781 * v178);
            if (v179 < v180 || (v177 < v178 ? (v181 = v179 == v180) : (v181 = 0), v181))
            {
              v183 = &v170[-v152];
LABEL_209:
              v187 = (unsigned int *)&v166[v152];
              if (v187 < v183)
              {
                v188 = v152;
                while (1)
                {
                  v189 = *v174;
                  v190 = *(_DWORD *)(v169 + 4 * v171 * v189);
                  while (1)
                  {
                    v191 = *v187;
                    v192 = *(_DWORD *)(v169 + 4 * v171 * v191);
                    if (v192 >= v190 && (v191 >= v189 || v192 != v190))
                      break;
                    v187 = (unsigned int *)((char *)v187 + v157);
                  }
                  v194 = &v183[-v152];
                  do
                  {
                    v183 = v194;
                    v195 = *v194;
                    v196 = *(_DWORD *)(v169 + 4 * v171 * v195);
                    if (v196 < v190)
                      break;
                    v194 -= v152;
                  }
                  while (v195 >= v189 || v196 != v190);
                  if (v187 >= v183)
                    break;
                  *v187 = v195;
                  *v183 = v191;
                  ++v176;
                  if (v187 == v174 && v188 == v152)
                  {
                    v174 = v183;
                    v188 = v152;
                  }
                  v187 = (unsigned int *)((char *)v187 + v157);
                }
              }
              if (v187 != v174)
              {
                v198 = *v174;
                v199 = *v187;
                v200 = *(_DWORD *)(v169 + 4 * v171 * v198);
                v201 = *(_DWORD *)(v169 + 4 * v171 * v199);
                if (v200 < v201 || v198 < v199 && v200 == v201)
                {
                  *v187 = v198;
                  *v174 = v199;
                  ++v176;
                }
              }
              if (v187 == v172)
                break;
              if (!v176)
              {
                v203 = v187;
                if (v187 <= v172)
                {
                  while (&v203[(unint64_t)v157 / 4] != v170)
                  {
                    v210 = v203[v152];
                    v211 = *v203;
                    v212 = *(_DWORD *)(v169 + 4 * v171 * v210);
                    v213 = *(_DWORD *)(v169 + 4 * v171 * v211);
                    if (v212 >= v213)
                    {
                      v203 = (unsigned int *)((char *)v203 + v157);
                      if (v210 >= v211 || v212 != v213)
                        continue;
                    }
                    goto LABEL_236;
                  }
                }
                else
                {
                  v204 = v166;
                  while (&v204[(unint64_t)v157 / 4] != (int *)v187)
                  {
                    v205 = v204[v152];
                    v206 = *v204;
                    v207 = *(_DWORD *)(v169 + 4 * v171 * v205);
                    v208 = *(_DWORD *)(v169 + 4 * v171 * v206);
                    if (v207 >= v208)
                    {
                      v204 = (int *)((char *)v204 + v157);
                      if (v205 >= v206 || v207 != v208)
                        continue;
                    }
                    goto LABEL_236;
                  }
                }
                break;
              }
LABEL_236:
              if (v187 <= v172)
              {
                v202 = (int *)&v187[v152];
              }
              else
              {
                v170 = v187;
                v202 = v166;
              }
            }
            else
            {
              v182 = (int *)&v170[-2 * v152];
              while (v182 != v166)
              {
                v183 = (unsigned int *)v182;
                v184 = *v182;
                v185 = *(_DWORD *)(v780 + 4 * v781 * v184);
                if (v185 >= v180)
                {
                  v182 -= v152;
                  if (v184 >= v178 || v185 != v180)
                    continue;
                }
                *v166 = v184;
                *v183 = v177;
                ++v176;
                goto LABEL_209;
              }
              v202 = &v166[v152];
              v215 = *v175;
              v216 = *(_DWORD *)(v780 + 4 * v781 * v215);
              if (v179 >= v216 && (v177 >= v215 || v179 != v216))
              {
                if (v202 == v175)
                  break;
                v218 = v166;
                while (1)
                {
                  v219 = v218[v152];
                  v220 = *(_DWORD *)(v780 + 4 * v781 * v219);
                  if (v179 < v220)
                    break;
                  if (v177 < v219 && v179 == v220)
                    break;
                  v218 = (int *)((char *)v218 + v157);
                  if (&v218[(unint64_t)v157 / 4] == v175)
                    goto LABEL_187;
                }
                v218[v152] = v215;
                *v175 = v219;
                v202 = &v218[2 * v152];
              }
              if (v202 == v175)
                break;
              while (1)
              {
                v222 = *v166;
                v223 = *(_DWORD *)(v169 + 4 * v171 * v222);
                v224 = *v202;
                v225 = *(_DWORD *)(v169 + 4 * v171 * v224);
                LODWORD(v226) = *v202;
                while (v223 >= v225)
                {
                  if (v223 == v225 && v222 < v224)
                  {
                    LODWORD(v226) = v224;
                    goto LABEL_281;
                  }
                  v202 = (int *)((char *)v202 + v157);
                  v226 = *v202;
                  v225 = *(_DWORD *)(v169 + 4 * v171 * v226);
                  LODWORD(v224) = *v202;
                }
                do
                {
                  do
                  {
LABEL_281:
                    v175 -= v152;
                    v227 = *v175;
                    v228 = *(_DWORD *)(v169 + 4 * v171 * v227);
                  }
                  while (v223 < v228);
                }
                while (v222 < v227 && v223 == v228);
                if (v202 >= v175)
                  break;
                *v202 = v227;
                *v175 = v226;
                v202 += v152;
              }
              if (v202 > (int *)v172)
                break;
            }
            v166 = v202;
          }
          while (v170 != v172);
        }
LABEL_187:
        ++v154;
        v3 = v772;
      }
      while (v154 != v752);
      goto LABEL_898;
    case 3:
      v19 = *(_DWORD *)(a1 + 20);
      v20 = *(unsigned int *)(a1 + 24);
      v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v782 = &unk_2513463C8;
      v783 = mlx::core::allocator::free;
      v784 = &v782;
      mlx::core::array::set_data(a3, (uint64_t)v21, (uint64_t)&v782);
      v22 = v784;
      if (v784 == &v782)
      {
        v23 = 4;
        v22 = &v782;
      }
      else
      {
        if (!v784)
          goto LABEL_314;
        v23 = 5;
      }
      (*((void (**)(void))*v22 + v23))();
LABEL_314:
      v247 = *(const void ***)v3;
      if ((v20 & 0x80000000) != 0)
        v20 += ((_BYTE *)v247[1] - (_BYTE *)*v247) >> 2;
      v248 = (unint64_t)v247[6];
      v249 = mlx::core::array::shape(v3, v20);
      v250 = *(const void ***)v3;
      v777 = 0;
      v778 = 0;
      v779 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v777, *v250, (uint64_t)v250[1], ((_BYTE *)v250[1] - (_BYTE *)*v250) >> 2);
      v251 = (char *)v777 + 4 * (int)v20;
      v252 = v778 - (v251 + 4);
      if (v778 != v251 + 4)
        memmove((char *)v777 + 4 * (int)v20, v251 + 4, v778 - (v251 + 4));
      v778 = &v251[v252];
      v253 = *(const void ***)v3;
      __p = 0;
      v775 = 0;
      v776 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v253[3], (uint64_t)v253[4], ((_BYTE *)v253[4] - (_BYTE *)v253[3]) >> 3);
      v254 = (char *)__p + 8 * (int)v20;
      v255 = v775 - (v254 + 8);
      if (v775 != v254 + 8)
        memmove((char *)__p + 8 * (int)v20, v254 + 8, v775 - (v254 + 8));
      v775 = &v254[v255];
      v256 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * (int)v20);
      v257 = mlx::core::array::shape(v3, v20);
      if (v248 < v249)
        goto LABEL_898;
      v258 = 0;
      v259 = v248 / v249;
      v260 = 4 * v256 * v257;
      v261 = 4 * v256;
      v767 = v256 * v257;
      if (v259 <= 1)
        v259 = 1;
      v753 = v259;
      v760 = v256 * ((v257 & (v19 >> 31)) + v19);
      do
      {
        v262 = (int *)v777;
        v263 = (unint64_t)(v778 - (_BYTE *)v777) >> 2;
        v264 = 0;
        v265 = (v263 - 1);
        if ((int)v263 - 1 >= 0)
        {
          v266 = __p;
          v267 = v258;
          do
          {
            v268 = ldiv(v267, v262[v265]);
            v267 = v268.quot;
            v264 += v266[v265--] * v268.rem;
          }
          while (v265 != -1);
        }
        v269 = *(_QWORD *)(*(_QWORD *)v3 + 152);
        v270 = &(*a3)[19][v264];
        if (v767)
        {
          v271 = 0;
          v272 = 0;
          do
          {
            *(int *)((char *)v270 + v271) = v272++;
            v271 += v261;
          }
          while (v260 != v271);
        }
        v273 = v269 + v264;
        v780 = v273;
        v781 = v256;
        if (v760 != v767)
        {
          v274 = (unsigned int *)&v270[v767];
          v275 = v256;
          v276 = (unsigned int *)&v270[v760];
          do
          {
            v277 = (((char *)v274 - (char *)v270) >> 2) / v256;
            if (v277 < 2)
              break;
            if ((_DWORD)v277 == 3)
            {
              break;
            }
            if ((_DWORD)v277 == 2)
            {
              v327 = v274[-v256];
              v328 = *v270;
              v329 = *(char *)(v273 + v275 * v327);
              v330 = *(char *)(v273 + v275 * v328);
              if (v329 < v330 || v327 < v328 && v329 == v330)
              {
                *v270 = v327;
                v274[-v256] = v328;
              }
              break;
            }
            if ((int)v277 <= 7)
            {
              v331 = &v274[-v256];
              if (v331 != (unsigned int *)v270)
              {
                v332 = v780;
                v333 = v781;
                v334 = (unsigned int *)&v270[(unint64_t)v261 / 4];
                do
                {
                  v335 = (unsigned int *)&v270[v256];
                  if (v270 != (int *)v274 && v335 != v274)
                  {
                    v336 = v334;
                    v337 = v270;
                    do
                    {
                      v338 = *v336;
                      v339 = *v337;
                      v340 = *(char *)(v332 + v333 * v338);
                      v341 = *(char *)(v332 + v333 * v339);
                      if (v340 < v341
                        || (v338 < v339 ? (v342 = v340 == v341) : (v342 = 0), v342))
                      {
                        v337 = (int *)v336;
                      }
                      v336 = (unsigned int *)((char *)v336 + v261);
                    }
                    while (v336 != v274);
                    if (v337 != v270)
                    {
                      v343 = *v270;
                      *v270 = *v337;
                      *v337 = v343;
                    }
                  }
                  v334 = (unsigned int *)((char *)v334 + v261);
                  v270 += v256;
                }
                while (v335 != v331);
              }
              break;
            }
            v278 = (unsigned int *)&v270[(v277 >> 1) * v256];
            v279 = (int *)&v274[-v256];
            v281 = *v270;
            v282 = *v278;
            v273 = v780;
            v275 = v781;
            v283 = *(unsigned __int8 *)(v780 + v781 * v281);
            if (*(char *)(v780 + v781 * v282) > (char)v283
              || ((v284 = *(unsigned __int8 *)(v780 + v781 * v282), v281 < v282)
                ? (v285 = v283 == v284)
                : (v285 = 0),
                  v285))
            {
              v287 = &v274[-v256];
LABEL_353:
              v290 = (unsigned int *)&v270[v256];
              if (v290 < v287)
              {
                v291 = v256;
                while (1)
                {
                  v292 = *v278;
                  v293 = *(unsigned __int8 *)(v273 + v275 * v292);
                  while (1)
                  {
                    v294 = *v290;
                    if (*(char *)(v273 + v275 * v294) >= (char)v293
                      && (v294 >= v292 || *(unsigned __int8 *)(v273 + v275 * v294) != v293))
                    {
                      break;
                    }
                    v290 = (unsigned int *)((char *)v290 + v261);
                  }
                  v296 = &v287[-v256];
                  do
                  {
                    v287 = v296;
                    v297 = *v296;
                    if (*(char *)(v273 + v275 * v297) < (char)v293)
                      break;
                    v296 -= v256;
                  }
                  while (v297 >= v292 || *(unsigned __int8 *)(v273 + v275 * v297) != v293);
                  if (v290 >= v287)
                    break;
                  *v290 = v297;
                  *v287 = v294;
                  ++v280;
                  if (v290 == v278 && v291 == v256)
                  {
                    v278 = v287;
                    v291 = v256;
                  }
                  v290 = (unsigned int *)((char *)v290 + v261);
                }
              }
              if (v290 != v278)
              {
                v299 = *v278;
                v300 = *v290;
                v301 = *(char *)(v273 + v275 * v299);
                v302 = *(char *)(v273 + v275 * v300);
                if (v301 < v302 || v299 < v300 && v301 == v302)
                {
                  *v290 = v299;
                  *v278 = v300;
                  ++v280;
                }
              }
              if (v290 == v276)
                break;
              if (!v280)
              {
                v304 = v290;
                if (v290 <= v276)
                {
                  while (&v304[(unint64_t)v261 / 4] != v274)
                  {
                    v311 = v304[v256];
                    v312 = *v304;
                    v313 = *(char *)(v273 + v275 * v311);
                    v314 = *(char *)(v273 + v275 * v312);
                    if (v313 >= v314)
                    {
                      v304 = (unsigned int *)((char *)v304 + v261);
                      if (v311 >= v312 || v313 != v314)
                        continue;
                    }
                    goto LABEL_380;
                  }
                }
                else
                {
                  v305 = v270;
                  while (&v305[(unint64_t)v261 / 4] != (int *)v290)
                  {
                    v306 = v305[v256];
                    v307 = *v305;
                    v308 = *(char *)(v273 + v275 * v306);
                    v309 = *(char *)(v273 + v275 * v307);
                    if (v308 >= v309)
                    {
                      v305 = (int *)((char *)v305 + v261);
                      if (v306 >= v307 || v308 != v309)
                        continue;
                    }
                    goto LABEL_380;
                  }
                }
                break;
              }
LABEL_380:
              if (v290 <= v276)
              {
                v303 = (int *)&v290[v256];
              }
              else
              {
                v274 = v290;
                v303 = v270;
              }
            }
            else
            {
              v286 = (int *)&v274[-2 * v256];
              while (v286 != v270)
              {
                v287 = (unsigned int *)v286;
                v288 = *v286;
                if (*(char *)(v780 + v781 * v288) >= (char)v284)
                {
                  v286 -= v256;
                  if (v288 >= v282 || *(unsigned __int8 *)(v780 + v781 * v288) != v284)
                    continue;
                }
                *v270 = v288;
                *v287 = v281;
                ++v280;
                goto LABEL_353;
              }
              v303 = &v270[v256];
              v316 = *v279;
              if (*(char *)(v780 + v781 * v316) <= (char)v283
                && (v281 >= v316 || v283 != *(unsigned __int8 *)(v780 + v781 * v316)))
              {
                if (v303 == v279)
                  break;
                v318 = v270;
                while (1)
                {
                  v319 = v318[v256];
                  if (*(char *)(v780 + v781 * v319) > (char)v283)
                    break;
                  if (v281 < v319 && v283 == *(unsigned __int8 *)(v780 + v781 * v319))
                    break;
                  v318 = (int *)((char *)v318 + v261);
                  if (&v318[(unint64_t)v261 / 4] == v279)
                    goto LABEL_331;
                }
                v318[v256] = v316;
                *v279 = v319;
                v303 = &v318[2 * v256];
              }
              if (v303 == v279)
                break;
              while (1)
              {
                v321 = *v270;
                v322 = *(unsigned __int8 *)(v273 + v275 * v321);
                v323 = *v303;
                if (*(char *)(v273 + v275 * v321) >= *(char *)(v273 + v275 * v323))
                {
                  v324 = *(unsigned __int8 *)(v273 + v275 * v323);
                  do
                  {
                    if (v322 == v324 && v321 < v323)
                      break;
                    v303 = (int *)((char *)v303 + v261);
                    v323 = *v303;
                    v324 = *(unsigned __int8 *)(v273 + v275 * v323);
                  }
                  while (*(char *)(v273 + v275 * v323) <= (char)v322);
                }
                do
                {
                  do
                  {
                    v279 -= v256;
                    v325 = *v279;
                  }
                  while (*(char *)(v273 + v275 * v325) > (char)v322);
                }
                while (v321 < v325 && v322 == *(unsigned __int8 *)(v273 + v275 * v325));
                if (v303 >= v279)
                  break;
                *v303 = v325;
                *v279 = v323;
                v303 += v256;
              }
              if (v303 > (int *)v276)
                break;
            }
            v270 = v303;
          }
          while (v274 != v276);
        }
LABEL_331:
        ++v258;
        v3 = v772;
      }
      while (v258 != v753);
      goto LABEL_898;
    case 4:
      v9 = *(_DWORD *)(a1 + 20);
      v10 = *(unsigned int *)(a1 + 24);
      v11 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v782 = &unk_2513463C8;
      v783 = mlx::core::allocator::free;
      v784 = &v782;
      mlx::core::array::set_data(a3, (uint64_t)v11, (uint64_t)&v782);
      v12 = v784;
      if (v784 == &v782)
      {
        v13 = 4;
        v12 = &v782;
      }
      else
      {
        if (!v784)
          goto LABEL_26;
        v13 = 5;
      }
      (*((void (**)(void))*v12 + v13))();
LABEL_26:
      v39 = *(const void ***)v3;
      if ((v10 & 0x80000000) != 0)
        v10 += ((_BYTE *)v39[1] - (_BYTE *)*v39) >> 2;
      v40 = (unint64_t)v39[6];
      v41 = mlx::core::array::shape(v3, v10);
      v42 = *(const void ***)v3;
      v777 = 0;
      v778 = 0;
      v779 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v777, *v42, (uint64_t)v42[1], ((_BYTE *)v42[1] - (_BYTE *)*v42) >> 2);
      v43 = (char *)v777 + 4 * (int)v10;
      v44 = v778 - (v43 + 4);
      if (v778 != v43 + 4)
        memmove((char *)v777 + 4 * (int)v10, v43 + 4, v778 - (v43 + 4));
      v778 = &v43[v44];
      v45 = *(const void ***)v3;
      __p = 0;
      v775 = 0;
      v776 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v45[3], (uint64_t)v45[4], ((_BYTE *)v45[4] - (_BYTE *)v45[3]) >> 3);
      v46 = (char *)__p + 8 * (int)v10;
      v47 = v775 - (v46 + 8);
      if (v775 != v46 + 8)
        memmove((char *)__p + 8 * (int)v10, v46 + 8, v775 - (v46 + 8));
      v775 = &v46[v47];
      v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * (int)v10);
      v49 = mlx::core::array::shape(v3, v10);
      if (v40 < v41)
        goto LABEL_898;
      v50 = 0;
      v51 = v40 / v41;
      v52 = 4 * v48 * v49;
      v53 = 4 * v48;
      v765 = v48 * v49;
      if (v51 <= 1)
        v51 = 1;
      v751 = v51;
      v758 = v48 * ((v49 & (v9 >> 31)) + v9);
      do
      {
        v54 = (int *)v777;
        v55 = (unint64_t)(v778 - (_BYTE *)v777) >> 2;
        v56 = 0;
        v57 = (v55 - 1);
        if ((int)v55 - 1 >= 0)
        {
          v58 = __p;
          v59 = v50;
          do
          {
            v60 = ldiv(v59, v54[v57]);
            v59 = v60.quot;
            v56 += v58[v57--] * v60.rem;
          }
          while (v57 != -1);
        }
        v61 = *(_QWORD *)(*(_QWORD *)v3 + 152);
        v62 = &(*a3)[19][v56];
        if (v765)
        {
          v63 = 0;
          v64 = 0;
          do
          {
            *(int *)((char *)v62 + v63) = v64++;
            v63 += v53;
          }
          while (v52 != v63);
        }
        v65 = v61 + 4 * v56;
        v780 = v65;
        v781 = v48;
        if (v758 != v765)
        {
          v66 = (unsigned int *)&v62[v765];
          v67 = v48;
          v68 = (unsigned int *)&v62[v758];
          do
          {
            v69 = (((char *)v66 - (char *)v62) >> 2) / v48;
            if (v69 < 2)
              break;
            if ((_DWORD)v69 == 3)
            {
              break;
            }
            if ((_DWORD)v69 == 2)
            {
              v126 = v66[-v48];
              v127 = *v62;
              v128 = *(_DWORD *)(v65 + 4 * v67 * v126);
              v129 = *(_DWORD *)(v65 + 4 * v67 * v127);
              if (v128 < v129 || v126 < v127 && v128 == v129)
              {
                *v62 = v126;
                v66[-v48] = v127;
              }
              break;
            }
            if ((int)v69 <= 7)
            {
              v130 = &v66[-v48];
              if (v130 != (unsigned int *)v62)
              {
                v131 = v780;
                v132 = v781;
                v133 = (unsigned int *)&v62[(unint64_t)v53 / 4];
                do
                {
                  v134 = (unsigned int *)&v62[v48];
                  if (v62 != (int *)v66 && v134 != v66)
                  {
                    v135 = v133;
                    v136 = v62;
                    do
                    {
                      v137 = *v135;
                      v138 = *v136;
                      v139 = *(_DWORD *)(v131 + 4 * v132 * v137);
                      v140 = *(_DWORD *)(v131 + 4 * v132 * v138);
                      if (v139 < v140
                        || (v137 < v138 ? (v141 = v139 == v140) : (v141 = 0), v141))
                      {
                        v136 = (int *)v135;
                      }
                      v135 = (unsigned int *)((char *)v135 + v53);
                    }
                    while (v135 != v66);
                    if (v136 != v62)
                    {
                      v142 = *v62;
                      *v62 = *v136;
                      *v136 = v142;
                    }
                  }
                  v133 = (unsigned int *)((char *)v133 + v53);
                  v62 += v48;
                }
                while (v134 != v130);
              }
              break;
            }
            v70 = (unsigned int *)&v62[(v69 >> 1) * v48];
            v71 = (int *)&v66[-v48];
            v73 = *v62;
            v74 = *v70;
            v65 = v780;
            v67 = v781;
            v75 = *(_DWORD *)(v780 + 4 * v781 * v73);
            v76 = *(_DWORD *)(v780 + 4 * v781 * v74);
            if (v75 < v76 || (v73 < v74 ? (v77 = v75 == v76) : (v77 = 0), v77))
            {
              v79 = &v66[-v48];
LABEL_65:
              v83 = (unsigned int *)&v62[v48];
              if (v83 < v79)
              {
                v84 = v48;
                while (1)
                {
                  v85 = *v70;
                  v86 = *(_DWORD *)(v65 + 4 * v67 * v85);
                  while (1)
                  {
                    v87 = *v83;
                    v88 = *(_DWORD *)(v65 + 4 * v67 * v87);
                    if (v88 >= v86 && (v87 >= v85 || v88 != v86))
                      break;
                    v83 = (unsigned int *)((char *)v83 + v53);
                  }
                  v90 = &v79[-v48];
                  do
                  {
                    v79 = v90;
                    v91 = *v90;
                    v92 = *(_DWORD *)(v65 + 4 * v67 * v91);
                    if (v92 < v86)
                      break;
                    v90 -= v48;
                  }
                  while (v91 >= v85 || v92 != v86);
                  if (v83 >= v79)
                    break;
                  *v83 = v91;
                  *v79 = v87;
                  ++v72;
                  if (v83 == v70 && v84 == v48)
                  {
                    v70 = v79;
                    v84 = v48;
                  }
                  v83 = (unsigned int *)((char *)v83 + v53);
                }
              }
              if (v83 != v70)
              {
                v94 = *v70;
                v95 = *v83;
                v96 = *(_DWORD *)(v65 + 4 * v67 * v94);
                v97 = *(_DWORD *)(v65 + 4 * v67 * v95);
                if (v96 < v97 || v94 < v95 && v96 == v97)
                {
                  *v83 = v94;
                  *v70 = v95;
                  ++v72;
                }
              }
              if (v83 == v68)
                break;
              if (!v72)
              {
                v99 = v83;
                if (v83 <= v68)
                {
                  while (&v99[(unint64_t)v53 / 4] != v66)
                  {
                    v106 = v99[v48];
                    v107 = *v99;
                    v108 = *(_DWORD *)(v65 + 4 * v67 * v106);
                    v109 = *(_DWORD *)(v65 + 4 * v67 * v107);
                    if (v108 >= v109)
                    {
                      v99 = (unsigned int *)((char *)v99 + v53);
                      if (v106 >= v107 || v108 != v109)
                        continue;
                    }
                    goto LABEL_92;
                  }
                }
                else
                {
                  v100 = v62;
                  while (&v100[(unint64_t)v53 / 4] != (int *)v83)
                  {
                    v101 = v100[v48];
                    v102 = *v100;
                    v103 = *(_DWORD *)(v65 + 4 * v67 * v101);
                    v104 = *(_DWORD *)(v65 + 4 * v67 * v102);
                    if (v103 >= v104)
                    {
                      v100 = (int *)((char *)v100 + v53);
                      if (v101 >= v102 || v103 != v104)
                        continue;
                    }
                    goto LABEL_92;
                  }
                }
                break;
              }
LABEL_92:
              if (v83 <= v68)
              {
                v98 = (int *)&v83[v48];
              }
              else
              {
                v66 = v83;
                v98 = v62;
              }
            }
            else
            {
              v78 = (int *)&v66[-2 * v48];
              while (v78 != v62)
              {
                v79 = (unsigned int *)v78;
                v80 = *v78;
                v81 = *(_DWORD *)(v780 + 4 * v781 * v80);
                if (v81 >= v76)
                {
                  v78 -= v48;
                  if (v80 >= v74 || v81 != v76)
                    continue;
                }
                *v62 = v80;
                *v79 = v73;
                ++v72;
                goto LABEL_65;
              }
              v98 = &v62[v48];
              v111 = *v71;
              v112 = *(_DWORD *)(v780 + 4 * v781 * v111);
              if (v75 >= v112 && (v73 >= v111 || v75 != v112))
              {
                if (v98 == v71)
                  break;
                v114 = v62;
                while (1)
                {
                  v115 = v114[v48];
                  v116 = *(_DWORD *)(v780 + 4 * v781 * v115);
                  if (v75 < v116)
                    break;
                  if (v73 < v115 && v75 == v116)
                    break;
                  v114 = (int *)((char *)v114 + v53);
                  if (&v114[(unint64_t)v53 / 4] == v71)
                    goto LABEL_43;
                }
                v114[v48] = v111;
                *v71 = v115;
                v98 = &v114[2 * v48];
              }
              if (v98 == v71)
                break;
              while (1)
              {
                v118 = *v62;
                v119 = *(_DWORD *)(v65 + 4 * v67 * v118);
                v120 = *v98;
                v121 = *(_DWORD *)(v65 + 4 * v67 * v120);
                LODWORD(v122) = *v98;
                while (v119 >= v121)
                {
                  if (v119 == v121 && v118 < v120)
                  {
                    LODWORD(v122) = v120;
                    goto LABEL_137;
                  }
                  v98 = (int *)((char *)v98 + v53);
                  v122 = *v98;
                  v121 = *(_DWORD *)(v65 + 4 * v67 * v122);
                  LODWORD(v120) = *v98;
                }
                do
                {
                  do
                  {
LABEL_137:
                    v71 -= v48;
                    v123 = *v71;
                    v124 = *(_DWORD *)(v65 + 4 * v67 * v123);
                  }
                  while (v119 < v124);
                }
                while (v118 < v123 && v119 == v124);
                if (v98 >= v71)
                  break;
                *v98 = v123;
                *v71 = v122;
                v98 += v48;
              }
              if (v98 > (int *)v68)
                break;
            }
            v62 = v98;
          }
          while (v66 != v68);
        }
LABEL_43:
        ++v50;
        v3 = v772;
      }
      while (v50 != v751);
      goto LABEL_898;
    case 5:
      v29 = *(_DWORD *)(a1 + 20);
      v30 = *(unsigned int *)(a1 + 24);
      v31 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v782 = &unk_2513463C8;
      v783 = mlx::core::allocator::free;
      v784 = &v782;
      mlx::core::array::set_data(a3, (uint64_t)v31, (uint64_t)&v782);
      v32 = v784;
      if (v784 == &v782)
      {
        v33 = 4;
        v32 = &v782;
      }
      else
      {
        if (!v784)
          goto LABEL_746;
        v33 = 5;
      }
      (*((void (**)(void))*v32 + v33))();
LABEL_746:
      v552 = *(const void ***)v3;
      if ((v30 & 0x80000000) != 0)
        v30 += ((_BYTE *)v552[1] - (_BYTE *)*v552) >> 2;
      v553 = (unint64_t)v552[6];
      v554 = mlx::core::array::shape(v3, v30);
      v555 = *(const void ***)v3;
      v777 = 0;
      v778 = 0;
      v779 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v777, *v555, (uint64_t)v555[1], ((_BYTE *)v555[1] - (_BYTE *)*v555) >> 2);
      v556 = (char *)v777 + 4 * (int)v30;
      v557 = v778 - (v556 + 4);
      if (v778 != v556 + 4)
        memmove((char *)v777 + 4 * (int)v30, v556 + 4, v778 - (v556 + 4));
      v778 = &v556[v557];
      v558 = *(const void ***)v3;
      __p = 0;
      v775 = 0;
      v776 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v558[3], (uint64_t)v558[4], ((_BYTE *)v558[4] - (_BYTE *)v558[3]) >> 3);
      v559 = (char *)__p + 8 * (int)v30;
      v560 = v775 - (v559 + 8);
      if (v775 != v559 + 8)
        memmove((char *)__p + 8 * (int)v30, v559 + 8, v775 - (v559 + 8));
      v775 = &v559[v560];
      v561 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * (int)v30);
      v562 = mlx::core::array::shape(v3, v30);
      if (v553 < v554)
        goto LABEL_898;
      v563 = 0;
      v564 = v553 / v554;
      v565 = 4 * v561 * v562;
      v566 = 4 * v561;
      v770 = v561 * v562;
      if (v564 <= 1)
        v564 = 1;
      v756 = v564;
      v763 = v561 * ((v562 & (v29 >> 31)) + v29);
      do
      {
        v567 = (int *)v777;
        v568 = (unint64_t)(v778 - (_BYTE *)v777) >> 2;
        v569 = 0;
        v570 = (v568 - 1);
        if ((int)v568 - 1 >= 0)
        {
          v571 = __p;
          v572 = v563;
          do
          {
            v573 = ldiv(v572, v567[v570]);
            v572 = v573.quot;
            v569 += v571[v570--] * v573.rem;
          }
          while (v570 != -1);
        }
        v574 = *(_QWORD *)(*(_QWORD *)v3 + 152);
        v575 = &(*a3)[19][v569];
        if (v770)
        {
          v576 = 0;
          v577 = 0;
          do
          {
            *(int *)((char *)v575 + v576) = v577++;
            v576 += v566;
          }
          while (v565 != v576);
        }
        v578 = v574 + 8 * v569;
        v780 = v578;
        v781 = v561;
        if (v763 != v770)
        {
          v579 = (unsigned int *)&v575[v770];
          v580 = v561;
          v581 = (unsigned int *)&v575[v763];
          do
          {
            v582 = (((char *)v579 - (char *)v575) >> 2) / v561;
            if (v582 < 2)
              break;
            if ((_DWORD)v582 == 3)
            {
              break;
            }
            if ((_DWORD)v582 == 2)
            {
              v639 = v579[-v561];
              v640 = *v575;
              v641 = *(_QWORD *)(v578 + 8 * v580 * v639);
              v642 = *(_QWORD *)(v578 + 8 * v580 * v640);
              if (v641 < v642 || v639 < v640 && v641 == v642)
              {
                *v575 = v639;
                v579[-v561] = v640;
              }
              break;
            }
            if ((int)v582 <= 7)
            {
              v643 = &v579[-v561];
              if (v643 != (unsigned int *)v575)
              {
                v644 = v780;
                v645 = v781;
                v646 = (unsigned int *)&v575[(unint64_t)v566 / 4];
                do
                {
                  v647 = (unsigned int *)&v575[v561];
                  if (v575 != (int *)v579 && v647 != v579)
                  {
                    v648 = v646;
                    v649 = v575;
                    do
                    {
                      v650 = *v648;
                      v651 = *v649;
                      v652 = *(_QWORD *)(v644 + 8 * v645 * v650);
                      v653 = *(_QWORD *)(v644 + 8 * v645 * v651);
                      if (v652 < v653
                        || (v650 < v651 ? (v654 = v652 == v653) : (v654 = 0), v654))
                      {
                        v649 = (int *)v648;
                      }
                      v648 = (unsigned int *)((char *)v648 + v566);
                    }
                    while (v648 != v579);
                    if (v649 != v575)
                    {
                      v655 = *v575;
                      *v575 = *v649;
                      *v649 = v655;
                    }
                  }
                  v646 = (unsigned int *)((char *)v646 + v566);
                  v575 += v561;
                }
                while (v647 != v643);
              }
              break;
            }
            v583 = (unsigned int *)&v575[(v582 >> 1) * v561];
            v584 = (int *)&v579[-v561];
            v586 = *v575;
            v587 = *v583;
            v578 = v780;
            v580 = v781;
            v588 = *(_QWORD *)(v780 + 8 * v781 * v586);
            v589 = *(_QWORD *)(v780 + 8 * v781 * v587);
            if (v588 < v589 || (v586 < v587 ? (v590 = v588 == v589) : (v590 = 0), v590))
            {
              v592 = &v579[-v561];
LABEL_785:
              v596 = (unsigned int *)&v575[v561];
              if (v596 < v592)
              {
                v597 = v561;
                while (1)
                {
                  v598 = *v583;
                  v599 = *(_QWORD *)(v578 + 8 * v580 * v598);
                  while (1)
                  {
                    v600 = *v596;
                    v601 = *(_QWORD *)(v578 + 8 * v580 * v600);
                    if (v601 >= v599 && (v600 >= v598 || v601 != v599))
                      break;
                    v596 = (unsigned int *)((char *)v596 + v566);
                  }
                  v603 = &v592[-v561];
                  do
                  {
                    v592 = v603;
                    v604 = *v603;
                    v605 = *(_QWORD *)(v578 + 8 * v580 * v604);
                    if (v605 < v599)
                      break;
                    v603 -= v561;
                  }
                  while (v604 >= v598 || v605 != v599);
                  if (v596 >= v592)
                    break;
                  *v596 = v604;
                  *v592 = v600;
                  ++v585;
                  if (v596 == v583 && v597 == v561)
                  {
                    v583 = v592;
                    v597 = v561;
                  }
                  v596 = (unsigned int *)((char *)v596 + v566);
                }
              }
              if (v596 != v583)
              {
                v607 = *v583;
                v608 = *v596;
                v609 = *(_QWORD *)(v578 + 8 * v580 * v607);
                v610 = *(_QWORD *)(v578 + 8 * v580 * v608);
                if (v609 < v610 || v607 < v608 && v609 == v610)
                {
                  *v596 = v607;
                  *v583 = v608;
                  ++v585;
                }
              }
              if (v596 == v581)
                break;
              if (!v585)
              {
                v612 = v596;
                if (v596 <= v581)
                {
                  while (&v612[(unint64_t)v566 / 4] != v579)
                  {
                    v619 = v612[v561];
                    v620 = *v612;
                    v621 = *(_QWORD *)(v578 + 8 * v580 * v619);
                    v622 = *(_QWORD *)(v578 + 8 * v580 * v620);
                    if (v621 >= v622)
                    {
                      v612 = (unsigned int *)((char *)v612 + v566);
                      if (v619 >= v620 || v621 != v622)
                        continue;
                    }
                    goto LABEL_812;
                  }
                }
                else
                {
                  v613 = v575;
                  while (&v613[(unint64_t)v566 / 4] != (int *)v596)
                  {
                    v614 = v613[v561];
                    v615 = *v613;
                    v616 = *(_QWORD *)(v578 + 8 * v580 * v614);
                    v617 = *(_QWORD *)(v578 + 8 * v580 * v615);
                    if (v616 >= v617)
                    {
                      v613 = (int *)((char *)v613 + v566);
                      if (v614 >= v615 || v616 != v617)
                        continue;
                    }
                    goto LABEL_812;
                  }
                }
                break;
              }
LABEL_812:
              if (v596 <= v581)
              {
                v611 = (int *)&v596[v561];
              }
              else
              {
                v579 = v596;
                v611 = v575;
              }
            }
            else
            {
              v591 = (int *)&v579[-2 * v561];
              while (v591 != v575)
              {
                v592 = (unsigned int *)v591;
                v593 = *v591;
                v594 = *(_QWORD *)(v780 + 8 * v781 * v593);
                if (v594 >= v589)
                {
                  v591 -= v561;
                  if (v593 >= v587 || v594 != v589)
                    continue;
                }
                *v575 = v593;
                *v592 = v586;
                ++v585;
                goto LABEL_785;
              }
              v611 = &v575[v561];
              v624 = *v584;
              v625 = *(_QWORD *)(v780 + 8 * v781 * v624);
              if (v588 >= v625 && (v586 >= v624 || v588 != v625))
              {
                if (v611 == v584)
                  break;
                v627 = v575;
                while (1)
                {
                  v628 = v627[v561];
                  v629 = *(_QWORD *)(v780 + 8 * v781 * v628);
                  if (v588 < v629)
                    break;
                  if (v586 < v628 && v588 == v629)
                    break;
                  v627 = (int *)((char *)v627 + v566);
                  if (&v627[(unint64_t)v566 / 4] == v584)
                    goto LABEL_763;
                }
                v627[v561] = v624;
                *v584 = v628;
                v611 = &v627[2 * v561];
              }
              if (v611 == v584)
                break;
              while (2)
              {
                v631 = *v575;
                v632 = *(_QWORD *)(v578 + 8 * v580 * v631);
                v633 = *v611;
                v634 = *(_QWORD *)(v578 + 8 * v580 * v633);
                LODWORD(v635) = *v611;
                while (v632 >= v634)
                {
                  if (v632 == v634 && v631 < v633)
                  {
                    LODWORD(v635) = v633;
                    goto LABEL_859;
                  }
                  v611 = (int *)((char *)v611 + v566);
                  v635 = *v611;
                  v634 = *(_QWORD *)(v578 + 8 * v580 * v635);
                  LODWORD(v633) = *v611;
                }
                do
                {
                  do
                  {
LABEL_859:
                    v584 -= v561;
                    v636 = *v584;
                    v637 = *(_QWORD *)(v578 + 8 * v580 * v636);
                  }
                  while (v632 < v637);
                }
                while (v631 < v636 && v632 == v637);
                if (v611 < v584)
                {
                  *v611 = v636;
                  *v584 = v635;
                  v611 += v561;
                  continue;
                }
                break;
              }
              if (v611 > (int *)v581)
                break;
            }
            v575 = v611;
          }
          while (v579 != v581);
        }
LABEL_763:
        ++v563;
        v3 = v772;
      }
      while (v563 != v756);
      goto LABEL_898;
    case 6:
      v34 = *(_DWORD *)(a1 + 20);
      v35 = *(unsigned int *)(a1 + 24);
      v36 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                        * (_QWORD)(*a3)[6]));
      v782 = &unk_2513463C8;
      v783 = mlx::core::allocator::free;
      v784 = &v782;
      mlx::core::array::set_data(a3, (uint64_t)v36, (uint64_t)&v782);
      v37 = v784;
      if (v784 == &v782)
      {
        v38 = 4;
        v37 = &v782;
      }
      else
      {
        if (!v784)
          goto LABEL_891;
        v38 = 5;
      }
      (*((void (**)(void))*v37 + v38))();
LABEL_891:
      v656 = *(const void ***)v3;
      if ((v35 & 0x80000000) != 0)
        v35 += ((_BYTE *)v656[1] - (_BYTE *)*v656) >> 2;
      v657 = (unint64_t)v656[6];
      v658 = mlx::core::array::shape(v3, v35);
      v659 = *(const void ***)v3;
      v777 = 0;
      v778 = 0;
      v779 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v777, *v659, (uint64_t)v659[1], ((_BYTE *)v659[1] - (_BYTE *)*v659) >> 2);
      v660 = (char *)v777 + 4 * (int)v35;
      v661 = v778 - (v660 + 4);
      if (v778 != v660 + 4)
        memmove((char *)v777 + 4 * (int)v35, v660 + 4, v778 - (v660 + 4));
      v778 = &v660[v661];
      v662 = *(const void ***)v3;
      __p = 0;
      v775 = 0;
      v776 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v662[3], (uint64_t)v662[4], ((_BYTE *)v662[4] - (_BYTE *)v662[3]) >> 3);
      v663 = (char *)__p + 8 * (int)v35;
      v664 = v775 - (v663 + 8);
      if (v775 != v663 + 8)
        memmove((char *)__p + 8 * (int)v35, v663 + 8, v775 - (v663 + 8));
      v775 = &v663[v664];
      v665 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 24) + 8 * (int)v35);
      v666 = mlx::core::array::shape(v3, v35);
      if (v657 < v658)
        goto LABEL_898;
      v667 = 0;
      v668 = v657 / v658;
      v669 = 4 * v665 * v666;
      v670 = 4 * v665;
      v771 = v665 * v666;
      if (v668 <= 1)
        v668 = 1;
      v757 = v668;
      v764 = v665 * ((v666 & (v34 >> 31)) + v34);
      do
      {
        v671 = (int *)v777;
        v672 = (unint64_t)(v778 - (_BYTE *)v777) >> 2;
        v673 = 0;
        v674 = (v672 - 1);
        if ((int)v672 - 1 >= 0)
        {
          v675 = __p;
          v676 = v667;
          do
          {
            v677 = ldiv(v676, v671[v674]);
            v676 = v677.quot;
            v673 += v675[v674--] * v677.rem;
          }
          while (v674 != -1);
        }
        v678 = *(_QWORD *)(*(_QWORD *)v772 + 152);
        v679 = &(*a3)[19][v673];
        if (v771)
        {
          v680 = 0;
          v681 = 0;
          do
          {
            *(int *)((char *)v679 + v680) = v681++;
            v680 += v670;
          }
          while (v669 != v680);
        }
        v682 = v678 + 4 * v673;
        v780 = v682;
        v781 = v665;
        if (v764 != v771)
        {
          v683 = (unsigned int *)&v679[v771];
          v684 = v665;
          v685 = (unsigned int *)&v679[v764];
          do
          {
            v686 = (((char *)v683 - (char *)v679) >> 2) / v665;
            if (v686 < 2)
              break;
            if ((_DWORD)v686 == 3)
            {
              break;
            }
            if ((_DWORD)v686 == 2)
            {
              v735 = v683[-v665];
              v736 = *v679;
              v737 = *(float *)(v682 + 4 * v684 * v735);
              v738 = *(float *)(v682 + 4 * v684 * v736);
              if (v737 < v738 || v735 < v736 && v737 == v738)
              {
                *v679 = v735;
                v683[-v665] = v736;
              }
              break;
            }
            if ((int)v686 <= 7)
            {
              v739 = &v683[-v665];
              if (v739 != (unsigned int *)v679)
              {
                v740 = v780;
                v741 = v781;
                v742 = (unsigned int *)&v679[(unint64_t)v670 / 4];
                do
                {
                  v743 = (unsigned int *)&v679[v665];
                  if (v679 != (int *)v683 && v743 != v683)
                  {
                    v744 = v742;
                    v745 = v679;
                    do
                    {
                      v746 = *v744;
                      v747 = *v745;
                      v748 = *(float *)(v740 + 4 * v741 * v746);
                      v749 = *(float *)(v740 + 4 * v741 * v747);
                      if (v748 < v749 || v746 < v747 && v748 == v749)
                        v745 = (int *)v744;
                      v744 = (unsigned int *)((char *)v744 + v670);
                    }
                    while (v744 != v683);
                    if (v745 != v679)
                    {
                      v750 = *v679;
                      *v679 = *v745;
                      *v745 = v750;
                    }
                  }
                  v742 = (unsigned int *)((char *)v742 + v670);
                  v679 += v665;
                }
                while (v743 != v739);
              }
              break;
            }
            v687 = (unsigned int *)&v679[(v686 >> 1) * v665];
            v688 = (int *)&v683[-v665];
            v690 = *v679;
            v691 = *v687;
            v682 = v780;
            v684 = v781;
            v692 = *(float *)(v780 + 4 * v781 * v690);
            v693 = *(float *)(v780 + 4 * v781 * v691);
            if (v692 < v693 || v690 < v691 && v692 == v693)
            {
              v694 = &v683[-v665];
LABEL_924:
              v695 = (unsigned int *)&v679[v665];
              if (v695 < v694)
              {
                v696 = v665;
                while (1)
                {
                  v697 = *v687;
                  v698 = *(float *)(v682 + 4 * v684 * v697);
                  while (1)
                  {
                    v699 = *v695;
                    v700 = *(float *)(v682 + 4 * v684 * v699);
                    if (v700 >= v698 && (v699 >= v697 || v700 != v698))
                      break;
                    v695 = (unsigned int *)((char *)v695 + v670);
                  }
                  v701 = &v694[-v665];
                  do
                  {
                    v694 = v701;
                    v702 = *v701;
                    v703 = *(float *)(v682 + 4 * v684 * v702);
                    if (v703 < v698)
                      break;
                    v701 -= v665;
                  }
                  while (v702 >= v697 || v703 != v698);
                  if (v695 >= v694)
                    break;
                  *v695 = v702;
                  *v694 = v699;
                  ++v689;
                  if (v695 == v687 && v696 == v665)
                  {
                    v687 = v694;
                    v696 = v665;
                  }
                  v695 = (unsigned int *)((char *)v695 + v670);
                }
              }
              if (v695 != v687)
              {
                v704 = *v687;
                v705 = *v695;
                v706 = *(float *)(v682 + 4 * v684 * v704);
                v707 = *(float *)(v682 + 4 * v684 * v705);
                if (v706 < v707 || v704 < v705 && v706 == v707)
                {
                  *v695 = v704;
                  *v687 = v705;
                  ++v689;
                }
              }
              if (v695 == v685)
                break;
              if (!v689)
              {
                v709 = v695;
                if (v695 <= v685)
                {
                  while (&v709[(unint64_t)v670 / 4] != v683)
                  {
                    v715 = v709[v665];
                    v716 = *v709;
                    v717 = *(float *)(v682 + 4 * v684 * v715);
                    v718 = *(float *)(v682 + 4 * v684 * v716);
                    if (v717 >= v718)
                    {
                      v709 = (unsigned int *)((char *)v709 + v670);
                      if (v715 >= v716 || v717 != v718)
                        continue;
                    }
                    goto LABEL_946;
                  }
                }
                else
                {
                  v710 = v679;
                  while (&v710[(unint64_t)v670 / 4] != (int *)v695)
                  {
                    v711 = v710[v665];
                    v712 = *v710;
                    v713 = *(float *)(v682 + 4 * v684 * v711);
                    v714 = *(float *)(v682 + 4 * v684 * v712);
                    if (v713 >= v714)
                    {
                      v710 = (int *)((char *)v710 + v670);
                      if (v711 >= v712 || v713 != v714)
                        continue;
                    }
                    goto LABEL_946;
                  }
                }
                break;
              }
LABEL_946:
              if (v695 <= v685)
              {
                v708 = (int *)&v695[v665];
              }
              else
              {
                v683 = v695;
                v708 = v679;
              }
            }
            else
            {
              v719 = (int *)&v683[-2 * v665];
              while (v719 != v679)
              {
                v694 = (unsigned int *)v719;
                v720 = *v719;
                v721 = *(float *)(v780 + 4 * v781 * v720);
                if (v721 >= v693)
                {
                  v719 -= v665;
                  if (v720 >= v691 || v721 != v693)
                    continue;
                }
                *v679 = v720;
                *v694 = v690;
                ++v689;
                goto LABEL_924;
              }
              v708 = &v679[v665];
              v722 = *v688;
              v723 = *(float *)(v780 + 4 * v781 * v722);
              if (v692 >= v723 && (v690 >= v722 || v692 != v723))
              {
                if (v708 == v688)
                  break;
                v724 = v679;
                while (1)
                {
                  v725 = v724[v665];
                  v726 = *(float *)(v780 + 4 * v781 * v725);
                  if (v692 < v726 || v690 < v725 && v692 == v726)
                    break;
                  v724 = (int *)((char *)v724 + v670);
                  if (&v724[(unint64_t)v670 / 4] == v688)
                    goto LABEL_913;
                }
                v724[v665] = v722;
                *v688 = v725;
                v708 = &v724[2 * v665];
              }
              if (v708 == v688)
                break;
              while (1)
              {
                v727 = *v679;
                v728 = *(float *)(v682 + 4 * v684 * v727);
                v729 = *v708;
                v730 = *(float *)(v682 + 4 * v684 * v729);
                LODWORD(v731) = *v708;
                if (v728 >= v730)
                {
                  while (v728 != v730 || v727 >= v729)
                  {
                    v708 = (int *)((char *)v708 + v670);
                    v731 = *v708;
                    v730 = *(float *)(v682 + 4 * v684 * v731);
                    LODWORD(v729) = *v708;
                    if (v728 < v730)
                      goto LABEL_988;
                  }
                  LODWORD(v731) = v729;
                }
                do
                {
                  do
                  {
LABEL_988:
                    v688 -= v665;
                    v733 = *v688;
                    v734 = *(float *)(v682 + 4 * v684 * v733);
                  }
                  while (v728 < v734);
                }
                while (v727 < v733 && v728 == v734);
                if (v708 >= v688)
                  break;
                *v708 = v733;
                *v688 = v731;
                v708 += v665;
              }
              if (v708 > (int *)v685)
                break;
            }
            v679 = v708;
          }
          while (v683 != v685);
        }
LABEL_913:
        ++v667;
      }
      while (v667 != v757);
LABEL_898:
      if (__p)
      {
        v775 = (char *)__p;
        operator delete(__p);
      }
      if (v777)
      {
        v778 = (char *)v777;
        operator delete(v777);
      }
      return;
    default:
      return;
  }
LABEL_468:
  v359 = (int *)v777;
  v360 = (unint64_t)(v778 - (_BYTE *)v777) >> 2;
  v361 = 0;
  v362 = (v360 - 1);
  if ((int)v360 - 1 >= 0)
  {
    v363 = __p;
    v364 = v355;
    do
    {
      v365 = ldiv(v364, v359[v362]);
      v364 = v365.quot;
      v361 += v363[v362--] * v365.rem;
    }
    while (v362 != -1);
  }
  v366 = *(_QWORD *)(*(_QWORD *)v3 + 152);
  v367 = &(*a3)[19][v361];
  if (v768)
  {
    v368 = 0;
    v369 = 0;
    do
    {
      *(int *)((char *)v367 + v368) = v369++;
      v368 += v358;
    }
    while (v357 != v368);
  }
  v370 = v366 + v361;
  v780 = v370;
  v781 = v353;
  if (v761 == v768)
    goto LABEL_475;
  v371 = (unsigned int *)&v367[v768];
  v372 = v353;
  v373 = (unsigned int *)&v367[v761];
  while (1)
  {
    v374 = (((char *)v371 - (char *)v367) >> 2) / v353;
    if (v374 < 2)
      goto LABEL_475;
    if ((_DWORD)v374 == 3)
    {
      goto LABEL_475;
    }
    if ((_DWORD)v374 == 2)
    {
      v431 = v371[-v353];
      v432 = *v367;
      v433 = *(unsigned __int8 *)(v370 + v372 * v431);
      v434 = *(unsigned __int8 *)(v370 + v372 * v432);
      if (v433 < v434 || v431 < v432 && v433 == v434)
      {
        *v367 = v431;
        v371[-v353] = v432;
      }
      goto LABEL_475;
    }
    if ((int)v374 <= 7)
    {
      v435 = &v371[-v353];
      if (v435 != (unsigned int *)v367)
      {
        v436 = v780;
        v437 = v781;
        v438 = (unsigned int *)&v367[(unint64_t)v358 / 4];
        do
        {
          v439 = (unsigned int *)&v367[v353];
          if (v367 != (int *)v371 && v439 != v371)
          {
            v440 = v438;
            v441 = v367;
            do
            {
              v442 = *v440;
              v443 = *v441;
              v444 = *(unsigned __int8 *)(v436 + v437 * v442);
              v445 = *(unsigned __int8 *)(v436 + v437 * v443);
              if (v444 < v445 || (v442 < v443 ? (v446 = v444 == v445) : (v446 = 0), v446))
                v441 = (int *)v440;
              v440 = (unsigned int *)((char *)v440 + v358);
            }
            while (v440 != v371);
            if (v441 != v367)
            {
              v447 = *v367;
              *v367 = *v441;
              *v441 = v447;
            }
          }
          v438 = (unsigned int *)((char *)v438 + v358);
          v367 += v353;
        }
        while (v439 != v435);
      }
      goto LABEL_475;
    }
    v375 = (unsigned int *)&v367[(v374 >> 1) * v353];
    v376 = (int *)&v371[-v353];
    v378 = *v367;
    v379 = *v375;
    v370 = v780;
    v372 = v781;
    v380 = *(unsigned __int8 *)(v780 + v781 * v378);
    v381 = *(unsigned __int8 *)(v780 + v781 * v379);
    if (v380 < v381 || (v378 < v379 ? (v382 = v380 == v381) : (v382 = 0), v382))
    {
      v384 = &v371[-v353];
LABEL_497:
      v388 = (unsigned int *)&v367[v353];
      if (v388 < v384)
      {
        v389 = v353;
        while (1)
        {
          v390 = *v375;
          v391 = *(unsigned __int8 *)(v370 + v372 * v390);
          while (1)
          {
            v392 = *v388;
            v393 = *(unsigned __int8 *)(v370 + v372 * v392);
            if (v393 >= v391 && (v392 >= v390 || v393 != v391))
              break;
            v388 = (unsigned int *)((char *)v388 + v358);
          }
          v395 = &v384[-v353];
          do
          {
            v384 = v395;
            v396 = *v395;
            v397 = *(unsigned __int8 *)(v370 + v372 * v396);
            if (v397 < v391)
              break;
            v395 -= v353;
          }
          while (v396 >= v390 || v397 != v391);
          if (v388 >= v384)
            break;
          *v388 = v396;
          *v384 = v392;
          ++v377;
          if (v388 == v375 && v389 == v353)
          {
            v375 = v384;
            v389 = v353;
          }
          v388 = (unsigned int *)((char *)v388 + v358);
        }
      }
      if (v388 != v375)
      {
        v399 = *v375;
        v400 = *v388;
        v401 = *(unsigned __int8 *)(v370 + v372 * v399);
        v402 = *(unsigned __int8 *)(v370 + v372 * v400);
        if (v401 < v402 || v399 < v400 && v401 == v402)
        {
          *v388 = v399;
          *v375 = v400;
          ++v377;
        }
      }
      if (v388 == v373)
        goto LABEL_475;
      if (!v377)
      {
        v404 = v388;
        if (v388 <= v373)
        {
          while (&v404[(unint64_t)v358 / 4] != v371)
          {
            v411 = v404[v353];
            v412 = *v404;
            v413 = *(unsigned __int8 *)(v370 + v372 * v411);
            v414 = *(unsigned __int8 *)(v370 + v372 * v412);
            if (v413 >= v414)
            {
              v404 = (unsigned int *)((char *)v404 + v358);
              if (v411 >= v412 || v413 != v414)
                continue;
            }
            goto LABEL_524;
          }
        }
        else
        {
          v405 = v367;
          while (&v405[(unint64_t)v358 / 4] != (int *)v388)
          {
            v406 = v405[v353];
            v407 = *v405;
            v408 = *(unsigned __int8 *)(v370 + v372 * v406);
            v409 = *(unsigned __int8 *)(v370 + v372 * v407);
            if (v408 >= v409)
            {
              v405 = (int *)((char *)v405 + v358);
              if (v406 >= v407 || v408 != v409)
                continue;
            }
            goto LABEL_524;
          }
        }
LABEL_475:
        ++v355;
        v3 = v772;
        if (v355 == v754)
          goto LABEL_898;
        goto LABEL_468;
      }
LABEL_524:
      if (v388 <= v373)
      {
        v403 = (int *)&v388[v353];
      }
      else
      {
        v371 = v388;
        v403 = v367;
      }
    }
    else
    {
      v383 = (int *)&v371[-2 * v353];
      while (v383 != v367)
      {
        v384 = (unsigned int *)v383;
        v385 = *v383;
        v386 = *(unsigned __int8 *)(v780 + v781 * v385);
        if (v386 >= v381)
        {
          v383 -= v353;
          if (v385 >= v379 || v386 != v381)
            continue;
        }
        *v367 = v385;
        *v384 = v378;
        ++v377;
        goto LABEL_497;
      }
      v403 = &v367[v353];
      v416 = *v376;
      v417 = *(unsigned __int8 *)(v780 + v781 * v416);
      if (v380 >= v417 && (v378 >= v416 || v380 != v417))
      {
        if (v403 == v376)
          goto LABEL_475;
        v419 = v367;
        while (1)
        {
          v420 = v419[v353];
          v421 = *(unsigned __int8 *)(v780 + v781 * v420);
          if (v380 < v421)
            break;
          if (v378 < v420 && v380 == v421)
            break;
          v419 = (int *)((char *)v419 + v358);
          if (&v419[(unint64_t)v358 / 4] == v376)
            goto LABEL_475;
        }
        v419[v353] = v416;
        *v376 = v420;
        v403 = &v419[2 * v353];
      }
      if (v403 == v376)
        goto LABEL_475;
      while (1)
      {
        v423 = *v367;
        v424 = *(unsigned __int8 *)(v370 + v372 * v423);
        v425 = *v403;
        v426 = *(unsigned __int8 *)(v370 + v372 * v425);
        LODWORD(v427) = *v403;
        while (1)
        {
          if (v424 < v426)
            goto LABEL_569;
          if (v424 == v426 && v423 < v425)
            break;
          v403 = (int *)((char *)v403 + v358);
          v427 = *v403;
          v426 = *(unsigned __int8 *)(v370 + v372 * v427);
          LODWORD(v425) = *v403;
        }
        LODWORD(v427) = v425;
        do
        {
          do
          {
LABEL_569:
            v376 -= v353;
            v428 = *v376;
            v429 = *(unsigned __int8 *)(v370 + v372 * v428);
          }
          while (v424 < v429);
        }
        while (v423 < v428 && v424 == v429);
        if (v403 >= v376)
          break;
        *v403 = v428;
        *v376 = v427;
        v403 += v353;
      }
      if (v403 > (int *)v373)
        goto LABEL_475;
    }
    v367 = v403;
    if (v371 == v373)
      goto LABEL_475;
  }
}

void sub_242301CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void mlx::core::Partition::eval(uint64_t a1, uint64_t a2, mlx::core::array *a3, float a4)
{
  mlx::core::array *v4;
  const void **v5;
  int v6;
  int v7;
  int v8;
  const void **v9;
  unint64_t v10;
  int v11;
  const void **v12;
  char *v13;
  int64_t v14;
  const void **v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int quot;
  ldiv_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  int v66;
  int v67;
  int v68;
  const void **v69;
  unint64_t v70;
  int v71;
  const void **v72;
  char *v73;
  int64_t v74;
  const void **v75;
  uint64_t v76;
  char *v77;
  int64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  int v90;
  ldiv_t v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unsigned __int8 *v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned __int8 *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  int v129;
  int v130;
  int v131;
  const void **v132;
  unint64_t v133;
  int v134;
  const void **v135;
  char *v136;
  int64_t v137;
  const void **v138;
  uint64_t v139;
  char *v140;
  int64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  int v152;
  ldiv_t v153;
  unsigned int *v154;
  unsigned int *v155;
  unsigned int *v156;
  unint64_t v157;
  unsigned int *v158;
  unsigned int *v159;
  int v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int *v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int v187;
  int v188;
  int v189;
  int v190;
  const void **v191;
  unint64_t v192;
  int v193;
  const void **v194;
  char *v195;
  int64_t v196;
  const void **v197;
  uint64_t v198;
  char *v199;
  int64_t v200;
  unint64_t v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  int *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  int v212;
  ldiv_t v213;
  char *v214;
  char *v215;
  char *v216;
  unint64_t v217;
  char *v218;
  char *v219;
  int v220;
  int v221;
  int v222;
  char *v223;
  int v224;
  char *v225;
  unint64_t v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  char *v232;
  char *v233;
  char *v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  char *v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  char *v247;
  char *v248;
  char v249;
  char v250;
  int v251;
  int v252;
  int v253;
  const void **v254;
  unint64_t v255;
  int v256;
  const void **v257;
  char *v258;
  int64_t v259;
  const void **v260;
  uint64_t v261;
  char *v262;
  int64_t v263;
  unint64_t v264;
  int v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  int *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  int v274;
  ldiv_t v275;
  int *v276;
  int *v277;
  int *v278;
  unint64_t v279;
  int *v280;
  int *v281;
  int v282;
  int v283;
  int *v284;
  int v285;
  int *v286;
  unint64_t v287;
  int v288;
  int v289;
  int v290;
  int *v291;
  int *v292;
  int *v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int *v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int *v304;
  int *v305;
  int *v306;
  int v307;
  int *v308;
  int v309;
  int v310;
  int v311;
  int v312;
  const void **v313;
  unint64_t v314;
  int v315;
  const void **v316;
  char *v317;
  int64_t v318;
  const void **v319;
  uint64_t v320;
  char *v321;
  int64_t v322;
  unint64_t v323;
  int v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  int *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  int v333;
  ldiv_t v334;
  uint64_t *v335;
  uint64_t *v336;
  uint64_t *v337;
  unint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  int v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t *v351;
  uint64_t *v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t *v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  int v369;
  int v370;
  int v371;
  const void **v372;
  unint64_t v373;
  int v374;
  const void **v375;
  char *v376;
  int64_t v377;
  const void **v378;
  uint64_t v379;
  char *v380;
  int64_t v381;
  unint64_t v382;
  int v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  int *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _QWORD *v391;
  int v392;
  ldiv_t v393;
  float *v394;
  float *v395;
  float *v396;
  unint64_t v397;
  float *v398;
  float *v399;
  int v400;
  float v401;
  float *v402;
  float *v403;
  float *v404;
  unint64_t v405;
  float v406;
  float v407;
  float v408;
  float *v409;
  float *v410;
  float *v411;
  BOOL v412;
  float *v413;
  float v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float *v419;
  float *v420;
  float *v421;
  float v422;
  float *v423;
  float v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  void *__p;
  char *v446;
  uint64_t v447;
  void *v448;
  char *v449;
  uint64_t v450;

  v4 = *(mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Partition::eval();
  v5 = *(const void ***)v4;
  switch(*(_DWORD *)(*(_QWORD *)v4 + 56))
  {
    case 0:
      v6 = *(_DWORD *)(a1 + 20);
      v7 = *(_DWORD *)(a1 + 24);
      if (((_BYTE)v5[21] & 1) != 0)
        v8 = 1;
      else
        v8 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, a3, v8, a4);
      v9 = *(const void ***)v4;
      if (v7 < 0)
        v7 += (unint64_t)((_BYTE *)v9[1] - (_BYTE *)*v9) >> 2;
      v10 = (unint64_t)v9[6];
      v11 = mlx::core::array::shape(v4, v7);
      v12 = *(const void ***)v4;
      v448 = 0;
      v449 = 0;
      v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v12, (uint64_t)v12[1], ((_BYTE *)v12[1] - (_BYTE *)*v12) >> 2);
      v13 = (char *)v448 + 4 * v7;
      v14 = v449 - (v13 + 4);
      if (v449 != v13 + 4)
        memmove((char *)v448 + 4 * v7, v13 + 4, v449 - (v13 + 4));
      v449 = &v13[v14];
      v15 = *(const void ***)v4;
      __p = 0;
      v446 = 0;
      v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v15[3], (uint64_t)v15[4], ((_BYTE *)v15[4] - (_BYTE *)v15[3]) >> 3);
      v16 = v7;
      v17 = (char *)__p + 8 * v7;
      v18 = v446 - (v17 + 8);
      if (v446 != v17 + 8)
        memmove(v17, v17 + 8, v446 - (v17 + 8));
      v446 = &v17[v18];
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v16);
      v20 = mlx::core::array::shape(v4, v16);
      if (v10 < v11)
        goto LABEL_539;
      v21 = 0;
      v430 = v19 * v20;
      v437 = v19 * ((v20 & (v6 >> 31)) + v6);
      if (v10 / v11 <= 1)
        v22 = 1;
      else
        v22 = v10 / v11;
      v429 = v22;
      while (1)
      {
        v23 = (int *)v448;
        v24 = (unint64_t)(v449 - (_BYTE *)v448) >> 2;
        v25 = 0;
        v26 = (v24 - 1);
        if ((int)v24 - 1 >= 0)
        {
          v27 = __p;
          quot = v21;
          do
          {
            v29 = ldiv(quot, v23[v26]);
            quot = v29.quot;
            v25 += v27[v26--] * v29.rem;
          }
          while (v26 != -1);
        }
        if (v437 == v430)
          goto LABEL_21;
        v30 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a3 + 152) + v25);
        v31 = &v30[v437];
        v32 = &v30[v430];
        do
        {
          v33 = (v32 - v30) / v19;
          if (v33 < 2)
            break;
          if ((_DWORD)v33 == 3)
          {
            break;
          }
          if ((_DWORD)v33 == 2)
          {
            v60 = v32[-v19];
            v61 = *v30;
            if (v60 < v61)
            {
              *v30 = v60;
              v32[-v19] = v61;
            }
            break;
          }
          if ((int)v33 <= 7)
          {
            if (&v32[-v19] == v30)
              break;
LABEL_81:
            v62 = v32;
            if (v30 == v32)
            {
LABEL_87:
              if (v62 != v30)
              {
                v65 = *v30;
                *v30 = *v62;
                *v62 = v65;
              }
            }
            else
            {
              v63 = &v30[v19];
              if (&v30[v19] != v32)
              {
                v64 = *v30;
                v62 = v30;
                do
                {
                  if (*v63 < v64)
                  {
                    v64 = *v63;
                    v62 = v63;
                  }
                  v63 += v19;
                }
                while (v63 != v32);
                goto LABEL_87;
              }
            }
            v30 += v19;
            if (v30 == &v32[-v19])
              break;
            goto LABEL_81;
          }
          v34 = &v30[(v33 >> 1) * v19];
          v35 = &v32[-v19];
          v37 = *v30;
          v38 = *v34;
          if (v37 < v38)
            goto LABEL_33;
          v39 = v32;
          while (&v39[-2 * v19] != v30)
          {
            v40 = v39[-2 * v19];
            v39 -= v19;
            if (v40 < v38)
            {
              *v30 = v40;
              v35 = &v39[-v19];
              v39[-v19] = v37;
              ++v36;
LABEL_33:
              v41 = &v30[v19];
              if (&v30[v19] < v35)
              {
                v42 = v19;
                while (1)
                {
                  v43 = *v34;
                  while (1)
                  {
                    v44 = *v41;
                    if (v44 >= v43)
                      break;
                    v41 += v19;
                  }
                  do
                  {
                    v35 -= v19;
                    v45 = *v35;
                  }
                  while (v45 >= v43);
                  if (v41 >= v35)
                    break;
                  *v41 = v45;
                  *v35 = v44;
                  ++v36;
                  if (v34 == v41 && v42 == v19)
                  {
                    v34 = v35;
                    v42 = v19;
                  }
                  v41 += v19;
                }
              }
              if (v41 != v34)
              {
                v46 = *v34;
                v47 = *v41;
                if (v46 < v47)
                {
                  *v41 = v46;
                  *v34 = v47;
                  ++v36;
                }
              }
              if (v41 != v31)
              {
                if (v36)
                {
LABEL_48:
                  if (v41 <= v31)
                  {
                    v48 = &v41[v19];
                  }
                  else
                  {
                    v32 = v41;
                    v48 = v30;
                  }
                  goto LABEL_75;
                }
                v49 = v41;
                if (v41 <= v31)
                {
                  while (&v49[v19] != v32)
                  {
                    v53 = v49[v19];
                    v54 = *v49;
                    v49 += v19;
                    if (v53 < v54)
                      goto LABEL_48;
                  }
                }
                else
                {
                  v50 = v30;
                  while (&v50[v19] != v41)
                  {
                    v51 = v50[v19];
                    v52 = *v50;
                    v50 += v19;
                    if (v51 < v52)
                      goto LABEL_48;
                  }
                }
              }
              goto LABEL_21;
            }
          }
          v48 = &v30[v19];
          v55 = *v35;
          if (v37 >= v55)
          {
            if (v48 == v35)
              break;
            v56 = v30;
            while (1)
            {
              v57 = v56[v19];
              if (v37 < v57)
                break;
              v56 += v19;
              if (&v56[v19] == v35)
                goto LABEL_21;
            }
            v56[v19] = v55;
            *v35 = v57;
            v48 = &v56[2 * v19];
          }
          if (v48 == v35)
            break;
          while (1)
          {
            v58 = *v30;
            while (v58 >= *v48)
              v48 += v19;
            do
            {
              v35 -= v19;
              v59 = *v35;
            }
            while (v58 < v59);
            if (v48 >= v35)
              break;
            *v48 = v59;
            *v35 = 1;
            v48 += v19;
          }
          if (v48 > v31)
            break;
LABEL_75:
          v30 = v48;
        }
        while (v32 != v31);
LABEL_21:
        if (++v21 == v429)
          goto LABEL_539;
      }
    case 1:
      v66 = *(_DWORD *)(a1 + 20);
      v67 = *(_DWORD *)(a1 + 24);
      if (((_BYTE)v5[21] & 1) != 0)
        v68 = 1;
      else
        v68 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, a3, v68, a4);
      v69 = *(const void ***)v4;
      if (v67 < 0)
        v67 += (unint64_t)((_BYTE *)v69[1] - (_BYTE *)*v69) >> 2;
      v70 = (unint64_t)v69[6];
      v71 = mlx::core::array::shape(v4, v67);
      v72 = *(const void ***)v4;
      v448 = 0;
      v449 = 0;
      v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v72, (uint64_t)v72[1], ((_BYTE *)v72[1] - (_BYTE *)*v72) >> 2);
      v73 = (char *)v448 + 4 * v67;
      v74 = v449 - (v73 + 4);
      if (v449 != v73 + 4)
        memmove((char *)v448 + 4 * v67, v73 + 4, v449 - (v73 + 4));
      v449 = &v73[v74];
      v75 = *(const void ***)v4;
      __p = 0;
      v446 = 0;
      v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v75[3], (uint64_t)v75[4], ((_BYTE *)v75[4] - (_BYTE *)v75[3]) >> 3);
      v76 = v67;
      v77 = (char *)__p + 8 * v67;
      v78 = v446 - (v77 + 8);
      if (v446 != v77 + 8)
        memmove(v77, v77 + 8, v446 - (v77 + 8));
      v446 = &v77[v78];
      v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v76);
      v80 = mlx::core::array::shape(v4, v76);
      if (v70 < v71)
        goto LABEL_539;
      v81 = 0;
      v82 = v70 / v71;
      v83 = v79 * ((v80 & (v66 >> 31)) + v66);
      v84 = v79 * v80;
      if (v82 <= 1)
        v82 = 1;
      v431 = v82;
      v438 = v83;
      break;
    case 2:
      v129 = *(_DWORD *)(a1 + 20);
      v130 = *(_DWORD *)(a1 + 24);
      if (((_BYTE)v5[21] & 1) != 0)
        v131 = 1;
      else
        v131 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, a3, v131, a4);
      v132 = *(const void ***)v4;
      if (v130 < 0)
        v130 += (unint64_t)((_BYTE *)v132[1] - (_BYTE *)*v132) >> 2;
      v133 = (unint64_t)v132[6];
      v134 = mlx::core::array::shape(v4, v130);
      v135 = *(const void ***)v4;
      v448 = 0;
      v449 = 0;
      v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v135, (uint64_t)v135[1], ((_BYTE *)v135[1] - (_BYTE *)*v135) >> 2);
      v136 = (char *)v448 + 4 * v130;
      v137 = v449 - (v136 + 4);
      if (v449 != v136 + 4)
        memmove((char *)v448 + 4 * v130, v136 + 4, v449 - (v136 + 4));
      v449 = &v136[v137];
      v138 = *(const void ***)v4;
      __p = 0;
      v446 = 0;
      v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v138[3], (uint64_t)v138[4], ((_BYTE *)v138[4] - (_BYTE *)v138[3]) >> 3);
      v139 = v130;
      v140 = (char *)__p + 8 * v130;
      v141 = v446 - (v140 + 8);
      if (v446 != v140 + 8)
        memmove(v140, v140 + 8, v446 - (v140 + 8));
      v446 = &v140[v141];
      v142 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v139);
      v143 = mlx::core::array::shape(v4, v139);
      if (v133 < v134)
        goto LABEL_539;
      v144 = 0;
      v145 = v133 / v134;
      v432 = v142 * v143;
      v439 = v142 * ((v143 & (v129 >> 31)) + v129);
      if (v145 <= 1)
        v145 = 1;
      v425 = v145;
      v146 = 4 * v142;
      while (1)
      {
        v147 = (int *)v448;
        v148 = (unint64_t)(v449 - (_BYTE *)v448) >> 2;
        v149 = 0;
        v150 = (v148 - 1);
        if ((int)v148 - 1 >= 0)
        {
          v151 = __p;
          v152 = v144;
          do
          {
            v153 = ldiv(v152, v147[v150]);
            v152 = v153.quot;
            v149 += v151[v150--] * v153.rem;
          }
          while (v150 != -1);
        }
        if (v439 == v432)
          goto LABEL_195;
        v154 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)a3 + 152) + 4 * v149);
        v155 = &v154[v439];
        v156 = &v154[v432];
        do
        {
          v157 = (v156 - v154) / v142;
          if (v157 < 2)
            break;
          if ((_DWORD)v157 == 3)
          {
            break;
          }
          if ((_DWORD)v157 == 2)
          {
            v180 = v156[-v142];
            v181 = *v154;
            if (v180 < *v154)
            {
              *v154 = v180;
              v156[-v142] = v181;
            }
            break;
          }
          if ((int)v157 <= 7)
          {
            v182 = &v156[-v142];
            if (v182 == v154)
              break;
            v183 = &v154[(unint64_t)v146 / 4];
LABEL_256:
            v184 = v156;
            if (v154 == v156)
            {
LABEL_262:
              if (v184 != v154)
              {
                v187 = *v154;
                *v154 = *v184;
                *v184 = v187;
              }
            }
            else if (&v154[v142] != v156)
            {
              v185 = *v154;
              v186 = v183;
              v184 = v154;
              do
              {
                if (*v186 < v185)
                {
                  v185 = *v186;
                  v184 = v186;
                }
                v186 = (unsigned int *)((char *)v186 + v146);
              }
              while (v186 != v156);
              goto LABEL_262;
            }
            v154 += v142;
            v183 = (unsigned int *)((char *)v183 + v146);
            if (v154 == v182)
              break;
            goto LABEL_256;
          }
          v158 = &v154[(v157 >> 1) * v142];
          v159 = &v156[-v142];
          v161 = *v154;
          if (*v154 < *v158)
            goto LABEL_207;
          v162 = v156;
          while (&v162[-2 * v142] != v154)
          {
            v163 = v162[-2 * v142];
            v162 -= v142;
            if (v163 < *v158)
            {
              *v154 = v163;
              v159 = &v162[-v142];
              *v159 = v161;
              ++v160;
LABEL_207:
              v164 = &v154[v142];
              if (v164 < v159)
              {
                v165 = v142;
                while (1)
                {
                  v166 = *v158;
                  while (1)
                  {
                    v167 = *v164;
                    if (*v164 >= v166)
                      break;
                    v164 = (unsigned int *)((char *)v164 + v146);
                  }
                  do
                    v159 -= v142;
                  while (*v159 >= v166);
                  if (v164 >= v159)
                    break;
                  *v164 = *v159;
                  *v159 = v167;
                  ++v160;
                  if (v158 == v164 && v165 == v142)
                  {
                    v158 = v159;
                    v165 = v142;
                  }
                  v164 += v142;
                }
              }
              if (v164 != v158)
              {
                v168 = *v164;
                if (*v158 < *v164)
                {
                  *v164 = *v158;
                  *v158 = v168;
                  ++v160;
                }
              }
              if (v164 != v155)
              {
                if (v160)
                {
LABEL_222:
                  if (v164 <= v155)
                  {
                    v169 = &v164[v142];
                  }
                  else
                  {
                    v156 = v164;
                    v169 = v154;
                  }
                  goto LABEL_249;
                }
                v170 = v164;
                if (v164 <= v155)
                {
                  while (&v170[(unint64_t)v146 / 4] != v156)
                  {
                    v174 = v170[v142];
                    v175 = *v170;
                    v170 = (unsigned int *)((char *)v170 + v146);
                    if (v174 < v175)
                      goto LABEL_222;
                  }
                }
                else
                {
                  v171 = v154;
                  while (&v171[(unint64_t)v146 / 4] != v164)
                  {
                    v172 = v171[v142];
                    v173 = *v171;
                    v171 = (unsigned int *)((char *)v171 + v146);
                    if (v172 < v173)
                      goto LABEL_222;
                  }
                }
              }
              goto LABEL_195;
            }
          }
          v169 = &v154[v142];
          if (v161 >= *v159)
          {
            if (v169 == v159)
              break;
            v176 = v154;
            while (1)
            {
              v177 = v176[v142];
              if (v161 < v177)
                break;
              v176 = (unsigned int *)((char *)v176 + v146);
              if (&v176[(unint64_t)v146 / 4] == v159)
                goto LABEL_195;
            }
            v176[v142] = *v159;
            *v159 = v177;
            v169 = &v176[2 * v142];
          }
          if (v169 == v159)
            break;
          while (1)
          {
            v178 = *v154;
            while (1)
            {
              v179 = *v169;
              if (v178 < *v169)
                break;
              v169 = (unsigned int *)((char *)v169 + v146);
            }
            do
              v159 -= v142;
            while (v178 < *v159);
            if (v169 >= v159)
              break;
            *v169 = *v159;
            *v159 = v179;
            v169 += v142;
          }
          if (v169 > v155)
            break;
LABEL_249:
          v154 = v169;
        }
        while (v156 != v155);
LABEL_195:
        if (++v144 == v425)
          goto LABEL_539;
      }
    case 3:
      v188 = *(_DWORD *)(a1 + 20);
      v189 = *(_DWORD *)(a1 + 24);
      if (((_BYTE)v5[21] & 1) != 0)
        v190 = 1;
      else
        v190 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, a3, v190, a4);
      v191 = *(const void ***)v4;
      if (v189 < 0)
        v189 += (unint64_t)((_BYTE *)v191[1] - (_BYTE *)*v191) >> 2;
      v192 = (unint64_t)v191[6];
      v193 = mlx::core::array::shape(v4, v189);
      v194 = *(const void ***)v4;
      v448 = 0;
      v449 = 0;
      v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v194, (uint64_t)v194[1], ((_BYTE *)v194[1] - (_BYTE *)*v194) >> 2);
      v195 = (char *)v448 + 4 * v189;
      v196 = v449 - (v195 + 4);
      if (v449 != v195 + 4)
        memmove((char *)v448 + 4 * v189, v195 + 4, v449 - (v195 + 4));
      v449 = &v195[v196];
      v197 = *(const void ***)v4;
      __p = 0;
      v446 = 0;
      v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v197[3], (uint64_t)v197[4], ((_BYTE *)v197[4] - (_BYTE *)v197[3]) >> 3);
      v198 = v189;
      v199 = (char *)__p + 8 * v189;
      v200 = v446 - (v199 + 8);
      if (v446 != v199 + 8)
        memmove(v199, v199 + 8, v446 - (v199 + 8));
      v446 = &v199[v200];
      v201 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v198);
      v202 = mlx::core::array::shape(v4, v198);
      if (v192 < v193)
        goto LABEL_539;
      v203 = 0;
      v204 = v192 / v193;
      v205 = v201 * ((v202 & (v188 >> 31)) + v188);
      v206 = v201 * v202;
      if (v204 <= 1)
        v204 = 1;
      v433 = v204;
      v440 = v205;
      while (1)
      {
        v207 = (int *)v448;
        v208 = (unint64_t)(v449 - (_BYTE *)v448) >> 2;
        v209 = 0;
        v210 = (v208 - 1);
        if ((int)v208 - 1 >= 0)
        {
          v211 = __p;
          v212 = v203;
          do
          {
            v213 = ldiv(v212, v207[v210]);
            v212 = v213.quot;
            v209 += v211[v210--] * v213.rem;
          }
          while (v210 != -1);
        }
        if (v440 == v206)
          goto LABEL_283;
        v214 = (char *)(*(_QWORD *)(*(_QWORD *)a3 + 152) + v209);
        v215 = &v214[v440];
        v216 = &v214[v206];
        do
        {
          v217 = (v216 - v214) / v201;
          if (v217 < 2)
            break;
          if ((_DWORD)v217 == 3)
          {
            break;
          }
          if ((_DWORD)v217 == 2)
          {
            v245 = v216[-v201];
            v246 = *v214;
            if (v245 < v246)
            {
              *v214 = v245;
              v216[-v201] = v246;
            }
            break;
          }
          if ((int)v217 <= 7)
          {
            if (&v216[-v201] == v214)
              break;
LABEL_343:
            v247 = v216;
            if (v214 == v216)
            {
LABEL_349:
              if (v247 != v214)
              {
                v250 = *v214;
                *v214 = *v247;
                *v247 = v250;
              }
            }
            else
            {
              v248 = &v214[v201];
              if (&v214[v201] != v216)
              {
                v249 = *v214;
                v247 = v214;
                do
                {
                  if (*v248 < v249)
                  {
                    v249 = *v248;
                    v247 = v248;
                  }
                  v248 += v201;
                }
                while (v248 != v216);
                goto LABEL_349;
              }
            }
            v214 += v201;
            if (v214 == &v216[-v201])
              break;
            goto LABEL_343;
          }
          v218 = &v214[(v217 >> 1) * v201];
          v219 = &v216[-v201];
          v221 = *v214;
          v222 = *v218;
          if (v221 < v222)
            goto LABEL_295;
          v223 = v216;
          while (&v223[-2 * v201] != v214)
          {
            v224 = v223[-2 * v201];
            v223 -= v201;
            if (v224 < v222)
            {
              *v214 = v224;
              v219 = &v223[-v201];
              v223[-v201] = v221;
              ++v220;
LABEL_295:
              v225 = &v214[v201];
              if (&v214[v201] < v219)
              {
                v226 = v201;
                while (1)
                {
                  v227 = *v218;
                  while (1)
                  {
                    v228 = *v225;
                    if (v228 >= v227)
                      break;
                    v225 += v201;
                  }
                  do
                  {
                    v219 -= v201;
                    v229 = *v219;
                  }
                  while (v229 >= v227);
                  if (v225 >= v219)
                    break;
                  *v225 = v229;
                  *v219 = v228;
                  ++v220;
                  if (v218 == v225 && v226 == v201)
                  {
                    v218 = v219;
                    v226 = v201;
                  }
                  v225 += v201;
                }
              }
              if (v225 != v218)
              {
                v230 = *v218;
                v231 = *v225;
                if (v230 < v231)
                {
                  *v225 = v230;
                  *v218 = v231;
                  ++v220;
                }
              }
              if (v225 != v215)
              {
                if (v220)
                {
LABEL_310:
                  if (v225 <= v215)
                  {
                    v232 = &v225[v201];
                  }
                  else
                  {
                    v216 = v225;
                    v232 = v214;
                  }
                  goto LABEL_337;
                }
                v233 = v225;
                if (v225 <= v215)
                {
                  while (&v233[v201] != v216)
                  {
                    v237 = v233[v201];
                    v238 = *v233;
                    v233 += v201;
                    if (v237 < v238)
                      goto LABEL_310;
                  }
                }
                else
                {
                  v234 = v214;
                  while (&v234[v201] != v225)
                  {
                    v235 = v234[v201];
                    v236 = *v234;
                    v234 += v201;
                    if (v235 < v236)
                      goto LABEL_310;
                  }
                }
              }
              goto LABEL_283;
            }
          }
          v232 = &v214[v201];
          v239 = *v219;
          if (v221 >= v239)
          {
            if (v232 == v219)
              break;
            v240 = v214;
            while (1)
            {
              v241 = v240[v201];
              if (v221 < v241)
                break;
              v240 += v201;
              if (&v240[v201] == v219)
                goto LABEL_283;
            }
            v240[v201] = v239;
            *v219 = v241;
            v232 = &v240[2 * v201];
          }
          if (v232 == v219)
            break;
          while (1)
          {
            v242 = *v214;
            while (1)
            {
              v243 = *v232;
              if (v242 < v243)
                break;
              v232 += v201;
            }
            do
            {
              v219 -= v201;
              v244 = *v219;
            }
            while (v242 < v244);
            if (v232 >= v219)
              break;
            *v232 = v244;
            *v219 = v243;
            v232 += v201;
          }
          if (v232 > v215)
            break;
LABEL_337:
          v214 = v232;
        }
        while (v216 != v215);
LABEL_283:
        if (++v203 == v433)
          goto LABEL_539;
      }
    case 4:
      v251 = *(_DWORD *)(a1 + 20);
      v252 = *(_DWORD *)(a1 + 24);
      if (((_BYTE)v5[21] & 1) != 0)
        v253 = 1;
      else
        v253 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, a3, v253, a4);
      v254 = *(const void ***)v4;
      if (v252 < 0)
        v252 += (unint64_t)((_BYTE *)v254[1] - (_BYTE *)*v254) >> 2;
      v255 = (unint64_t)v254[6];
      v256 = mlx::core::array::shape(v4, v252);
      v257 = *(const void ***)v4;
      v448 = 0;
      v449 = 0;
      v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v257, (uint64_t)v257[1], ((_BYTE *)v257[1] - (_BYTE *)*v257) >> 2);
      v258 = (char *)v448 + 4 * v252;
      v259 = v449 - (v258 + 4);
      if (v449 != v258 + 4)
        memmove((char *)v448 + 4 * v252, v258 + 4, v449 - (v258 + 4));
      v449 = &v258[v259];
      v260 = *(const void ***)v4;
      __p = 0;
      v446 = 0;
      v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v260[3], (uint64_t)v260[4], ((_BYTE *)v260[4] - (_BYTE *)v260[3]) >> 3);
      v261 = v252;
      v262 = (char *)__p + 8 * v252;
      v263 = v446 - (v262 + 8);
      if (v446 != v262 + 8)
        memmove(v262, v262 + 8, v446 - (v262 + 8));
      v446 = &v262[v263];
      v264 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v261);
      v265 = mlx::core::array::shape(v4, v261);
      if (v255 < v256)
        goto LABEL_539;
      v266 = 0;
      v267 = v255 / v256;
      v434 = v264 * v265;
      v441 = v264 * ((v265 & (v251 >> 31)) + v251);
      if (v267 <= 1)
        v267 = 1;
      v426 = v267;
      v268 = 4 * v264;
      while (1)
      {
        v269 = (int *)v448;
        v270 = (unint64_t)(v449 - (_BYTE *)v448) >> 2;
        v271 = 0;
        v272 = (v270 - 1);
        if ((int)v270 - 1 >= 0)
        {
          v273 = __p;
          v274 = v266;
          do
          {
            v275 = ldiv(v274, v269[v272]);
            v274 = v275.quot;
            v271 += v273[v272--] * v275.rem;
          }
          while (v272 != -1);
        }
        if (v441 == v434)
          goto LABEL_370;
        v276 = (int *)(*(_QWORD *)(*(_QWORD *)a3 + 152) + 4 * v271);
        v277 = &v276[v441];
        v278 = &v276[v434];
        do
        {
          v279 = (v278 - v276) / v264;
          if (v279 < 2)
            break;
          if ((_DWORD)v279 == 3)
          {
            break;
          }
          if ((_DWORD)v279 == 2)
          {
            v302 = v278[-v264];
            v303 = *v276;
            if (v302 < *v276)
            {
              *v276 = v302;
              v278[-v264] = v303;
            }
            break;
          }
          if ((int)v279 <= 7)
          {
            v304 = &v278[-v264];
            if (v304 == v276)
              break;
            v305 = &v276[(unint64_t)v268 / 4];
LABEL_431:
            v306 = v278;
            if (v276 == v278)
            {
LABEL_437:
              if (v306 != v276)
              {
                v309 = *v276;
                *v276 = *v306;
                *v306 = v309;
              }
            }
            else if (&v276[v264] != v278)
            {
              v307 = *v276;
              v308 = v305;
              v306 = v276;
              do
              {
                if (*v308 < v307)
                {
                  v307 = *v308;
                  v306 = v308;
                }
                v308 = (int *)((char *)v308 + v268);
              }
              while (v308 != v278);
              goto LABEL_437;
            }
            v276 += v264;
            v305 = (int *)((char *)v305 + v268);
            if (v276 == v304)
              break;
            goto LABEL_431;
          }
          v280 = &v276[(v279 >> 1) * v264];
          v281 = &v278[-v264];
          v283 = *v276;
          if (*v276 < *v280)
            goto LABEL_382;
          v284 = v278;
          while (&v284[-2 * v264] != v276)
          {
            v285 = v284[-2 * v264];
            v284 -= v264;
            if (v285 < *v280)
            {
              *v276 = v285;
              v281 = &v284[-v264];
              *v281 = v283;
              ++v282;
LABEL_382:
              v286 = &v276[v264];
              if (v286 < v281)
              {
                v287 = v264;
                while (1)
                {
                  v288 = *v280;
                  while (1)
                  {
                    v289 = *v286;
                    if (*v286 >= v288)
                      break;
                    v286 = (int *)((char *)v286 + v268);
                  }
                  do
                    v281 -= v264;
                  while (*v281 >= v288);
                  if (v286 >= v281)
                    break;
                  *v286 = *v281;
                  *v281 = v289;
                  ++v282;
                  if (v280 == v286 && v287 == v264)
                  {
                    v280 = v281;
                    v287 = v264;
                  }
                  v286 += v264;
                }
              }
              if (v286 != v280)
              {
                v290 = *v286;
                if (*v280 < *v286)
                {
                  *v286 = *v280;
                  *v280 = v290;
                  ++v282;
                }
              }
              if (v286 != v277)
              {
                if (v282)
                {
LABEL_397:
                  if (v286 <= v277)
                  {
                    v291 = &v286[v264];
                  }
                  else
                  {
                    v278 = v286;
                    v291 = v276;
                  }
                  goto LABEL_424;
                }
                v292 = v286;
                if (v286 <= v277)
                {
                  while (&v292[(unint64_t)v268 / 4] != v278)
                  {
                    v296 = v292[v264];
                    v297 = *v292;
                    v292 = (int *)((char *)v292 + v268);
                    if (v296 < v297)
                      goto LABEL_397;
                  }
                }
                else
                {
                  v293 = v276;
                  while (&v293[(unint64_t)v268 / 4] != v286)
                  {
                    v294 = v293[v264];
                    v295 = *v293;
                    v293 = (int *)((char *)v293 + v268);
                    if (v294 < v295)
                      goto LABEL_397;
                  }
                }
              }
              goto LABEL_370;
            }
          }
          v291 = &v276[v264];
          if (v283 >= *v281)
          {
            if (v291 == v281)
              break;
            v298 = v276;
            while (1)
            {
              v299 = v298[v264];
              if (v283 < v299)
                break;
              v298 = (int *)((char *)v298 + v268);
              if (&v298[(unint64_t)v268 / 4] == v281)
                goto LABEL_370;
            }
            v298[v264] = *v281;
            *v281 = v299;
            v291 = &v298[2 * v264];
          }
          if (v291 == v281)
            break;
          while (1)
          {
            v300 = *v276;
            while (1)
            {
              v301 = *v291;
              if (v300 < *v291)
                break;
              v291 = (int *)((char *)v291 + v268);
            }
            do
              v281 -= v264;
            while (v300 < *v281);
            if (v291 >= v281)
              break;
            *v291 = *v281;
            *v281 = v301;
            v291 += v264;
          }
          if (v291 > v277)
            break;
LABEL_424:
          v276 = v291;
        }
        while (v278 != v277);
LABEL_370:
        if (++v266 == v426)
          goto LABEL_539;
      }
    case 5:
      v310 = *(_DWORD *)(a1 + 20);
      v311 = *(_DWORD *)(a1 + 24);
      if (((_BYTE)v5[21] & 1) != 0)
        v312 = 1;
      else
        v312 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, a3, v312, a4);
      v313 = *(const void ***)v4;
      if (v311 < 0)
        v311 += (unint64_t)((_BYTE *)v313[1] - (_BYTE *)*v313) >> 2;
      v314 = (unint64_t)v313[6];
      v315 = mlx::core::array::shape(v4, v311);
      v316 = *(const void ***)v4;
      v448 = 0;
      v449 = 0;
      v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v316, (uint64_t)v316[1], ((_BYTE *)v316[1] - (_BYTE *)*v316) >> 2);
      v317 = (char *)v448 + 4 * v311;
      v318 = v449 - (v317 + 4);
      if (v449 != v317 + 4)
        memmove((char *)v448 + 4 * v311, v317 + 4, v449 - (v317 + 4));
      v449 = &v317[v318];
      v319 = *(const void ***)v4;
      __p = 0;
      v446 = 0;
      v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v319[3], (uint64_t)v319[4], ((_BYTE *)v319[4] - (_BYTE *)v319[3]) >> 3);
      v320 = v311;
      v321 = (char *)__p + 8 * v311;
      v322 = v446 - (v321 + 8);
      if (v446 != v321 + 8)
        memmove(v321, v321 + 8, v446 - (v321 + 8));
      v446 = &v321[v322];
      v323 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v320);
      v324 = mlx::core::array::shape(v4, v320);
      if (v314 < v315)
        goto LABEL_539;
      v325 = 0;
      v326 = v314 / v315;
      v435 = v323 * v324;
      v442 = v323 * ((v324 & (v310 >> 31)) + v310);
      if (v326 <= 1)
        v326 = 1;
      v427 = v326;
      v327 = 8 * v323;
      while (1)
      {
        v328 = (int *)v448;
        v329 = (unint64_t)(v449 - (_BYTE *)v448) >> 2;
        v330 = 0;
        v331 = (v329 - 1);
        if ((int)v329 - 1 >= 0)
        {
          v332 = __p;
          v333 = v325;
          do
          {
            v334 = ldiv(v333, v328[v331]);
            v333 = v334.quot;
            v330 += v332[v331--] * v334.rem;
          }
          while (v331 != -1);
        }
        if (v442 == v435)
          goto LABEL_458;
        v335 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a3 + 152) + 8 * v330);
        v336 = &v335[v442];
        v337 = &v335[v435];
        do
        {
          v338 = (v337 - v335) / v323;
          if (v338 < 2)
            break;
          if ((_DWORD)v338 == 3)
          {
            break;
          }
          if ((_DWORD)v338 == 2)
          {
            v361 = v337[-v323];
            v362 = *v335;
            if (v361 < *v335)
            {
              *v335 = v361;
              v337[-v323] = v362;
            }
            break;
          }
          if ((int)v338 <= 7)
          {
            v363 = &v337[-v323];
            if (v363 == v335)
              break;
            v364 = &v335[(unint64_t)v327 / 8];
LABEL_519:
            v365 = v337;
            if (v335 == v337)
            {
LABEL_525:
              if (v365 != v335)
              {
                v368 = *v335;
                *v335 = *v365;
                *v365 = v368;
              }
            }
            else if (&v335[v323] != v337)
            {
              v366 = *v335;
              v367 = v364;
              v365 = v335;
              do
              {
                if (*v367 < v366)
                {
                  v366 = *v367;
                  v365 = v367;
                }
                v367 = (uint64_t *)((char *)v367 + v327);
              }
              while (v367 != v337);
              goto LABEL_525;
            }
            v335 += v323;
            v364 = (uint64_t *)((char *)v364 + v327);
            if (v335 == v363)
              break;
            goto LABEL_519;
          }
          v339 = &v335[(v338 >> 1) * v323];
          v340 = &v337[-v323];
          v342 = *v335;
          if (*v335 < *v339)
            goto LABEL_470;
          v343 = v337;
          while (&v343[-2 * v323] != v335)
          {
            v344 = v343[-2 * v323];
            v343 -= v323;
            if (v344 < *v339)
            {
              *v335 = v344;
              v340 = &v343[-v323];
              *v340 = v342;
              ++v341;
LABEL_470:
              v345 = &v335[v323];
              if (v345 < v340)
              {
                v346 = v323;
                while (1)
                {
                  v347 = *v339;
                  while (1)
                  {
                    v348 = *v345;
                    if (*v345 >= v347)
                      break;
                    v345 = (uint64_t *)((char *)v345 + v327);
                  }
                  do
                    v340 -= v323;
                  while (*v340 >= v347);
                  if (v345 >= v340)
                    break;
                  *v345 = *v340;
                  *v340 = v348;
                  ++v341;
                  if (v339 == v345 && v346 == v323)
                  {
                    v339 = v340;
                    v346 = v323;
                  }
                  v345 += v323;
                }
              }
              if (v345 != v339)
              {
                v349 = *v345;
                if (*v339 < *v345)
                {
                  *v345 = *v339;
                  *v339 = v349;
                  ++v341;
                }
              }
              if (v345 != v336)
              {
                if (v341)
                {
LABEL_485:
                  if (v345 <= v336)
                  {
                    v350 = &v345[v323];
                  }
                  else
                  {
                    v337 = v345;
                    v350 = v335;
                  }
                  goto LABEL_512;
                }
                v351 = v345;
                if (v345 <= v336)
                {
                  while (1)
                  {
                    v355 = &v351[(unint64_t)v327 / 8];
                    if (&v351[(unint64_t)v327 / 8] == v337)
                      break;
                    v356 = *v351;
                    v351 = (uint64_t *)((char *)v351 + v327);
                    if (*v355 < v356)
                      goto LABEL_485;
                  }
                }
                else
                {
                  v352 = v335;
                  while (1)
                  {
                    v353 = &v352[(unint64_t)v327 / 8];
                    if (&v352[(unint64_t)v327 / 8] == v345)
                      break;
                    v354 = *v352;
                    v352 = (uint64_t *)((char *)v352 + v327);
                    if (*v353 < v354)
                      goto LABEL_485;
                  }
                }
              }
              goto LABEL_458;
            }
          }
          v350 = &v335[v323];
          if (v342 >= *v340)
          {
            if (v350 == v340)
              break;
            v357 = v335;
            while (1)
            {
              v358 = v357[v323];
              if (v342 < v358)
                break;
              v357 = (uint64_t *)((char *)v357 + v327);
              if (&v357[(unint64_t)v327 / 8] == v340)
                goto LABEL_458;
            }
            v357[v323] = *v340;
            *v340 = v358;
            v350 = &v357[2 * v323];
          }
          if (v350 == v340)
            break;
          while (1)
          {
            v359 = *v335;
            while (1)
            {
              v360 = *v350;
              if (v359 < *v350)
                break;
              v350 = (uint64_t *)((char *)v350 + v327);
            }
            do
              v340 -= v323;
            while (v359 < *v340);
            if (v350 >= v340)
              break;
            *v350 = *v340;
            *v340 = v360;
            v350 += v323;
          }
          if (v350 > v336)
            break;
LABEL_512:
          v335 = v350;
        }
        while (v337 != v336);
LABEL_458:
        if (++v325 == v427)
          goto LABEL_539;
      }
    case 6:
      v370 = *(_DWORD *)(a1 + 20);
      v369 = *(_DWORD *)(a1 + 24);
      if (((_BYTE)v5[21] & 1) != 0)
        v371 = 1;
      else
        v371 = 2;
      mlx::core::copy(*(mlx::core::array **)a2, a3, v371, a4);
      v372 = *(const void ***)v4;
      if (v369 < 0)
        v369 += (unint64_t)((_BYTE *)v372[1] - (_BYTE *)*v372) >> 2;
      v373 = (unint64_t)v372[6];
      v374 = mlx::core::array::shape(v4, v369);
      v375 = *(const void ***)v4;
      v448 = 0;
      v449 = 0;
      v450 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v448, *v375, (uint64_t)v375[1], ((_BYTE *)v375[1] - (_BYTE *)*v375) >> 2);
      v376 = (char *)v448 + 4 * v369;
      v377 = v449 - (v376 + 4);
      if (v449 != v376 + 4)
        memmove((char *)v448 + 4 * v369, v376 + 4, v449 - (v376 + 4));
      v449 = &v376[v377];
      v378 = *(const void ***)v4;
      __p = 0;
      v446 = 0;
      v447 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v378[3], (uint64_t)v378[4], ((_BYTE *)v378[4] - (_BYTE *)v378[3]) >> 3);
      v379 = v369;
      v380 = (char *)__p + 8 * v369;
      v381 = v446 - (v380 + 8);
      if (v446 != v380 + 8)
        memmove(v380, v380 + 8, v446 - (v380 + 8));
      v446 = &v380[v381];
      v382 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8 * v379);
      v383 = mlx::core::array::shape(v4, v379);
      if (v373 < v374)
        goto LABEL_539;
      v384 = 0;
      v385 = v373 / v374;
      v436 = v382 * v383;
      v443 = v382 * ((v383 & (v370 >> 31)) + v370);
      if (v385 <= 1)
        v385 = 1;
      v428 = v385;
      v386 = 4 * v382;
      while (1)
      {
        v387 = (int *)v448;
        v388 = (unint64_t)(v449 - (_BYTE *)v448) >> 2;
        v389 = 0;
        v390 = (v388 - 1);
        if ((int)v388 - 1 >= 0)
        {
          v391 = __p;
          v392 = v384;
          do
          {
            v393 = ldiv(v392, v387[v390]);
            v392 = v393.quot;
            v389 += v391[v390--] * v393.rem;
          }
          while (v390 != -1);
        }
        if (v443 == v436)
          goto LABEL_551;
        v394 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 152) + 4 * v389);
        v395 = &v394[v443];
        v396 = &v394[v436];
        do
        {
          v397 = (v396 - v394) / v382;
          if (v397 < 2)
            break;
          if ((_DWORD)v397 == 3)
          {
            break;
          }
          if ((_DWORD)v397 == 2)
          {
            v417 = v396[-v382];
            v418 = *v394;
            if (v417 < *v394)
            {
              *v394 = v417;
              v396[-v382] = v418;
            }
            break;
          }
          if ((int)v397 <= 7)
          {
            v419 = &v396[-v382];
            if (v419 == v394)
              break;
            v420 = &v394[(unint64_t)v386 / 4];
LABEL_614:
            v421 = v396;
            if (v394 == v396)
            {
LABEL_620:
              if (v421 != v394)
              {
                v424 = *v394;
                *v394 = *v421;
                *v421 = v424;
              }
            }
            else if (&v394[v382] != v396)
            {
              v422 = *v394;
              v423 = v420;
              v421 = v394;
              do
              {
                if (*v423 < v422)
                {
                  v422 = *v423;
                  v421 = v423;
                }
                v423 = (float *)((char *)v423 + v386);
              }
              while (v423 != v396);
              goto LABEL_620;
            }
            v394 += v382;
            v420 = (float *)((char *)v420 + v386);
            if (v394 == v419)
              break;
            goto LABEL_614;
          }
          v398 = &v394[(v397 >> 1) * v382];
          v399 = &v396[-v382];
          v401 = *v394;
          if (*v394 < *v398)
            goto LABEL_563;
          v402 = v396;
          while (1)
          {
            v403 = &v402[-2 * v382];
            if (v403 == v394)
              break;
            v402 -= v382;
            if (*v403 < *v398)
            {
              *v394 = *v403;
              v399 = &v402[-v382];
              *v399 = v401;
              ++v400;
LABEL_563:
              v404 = &v394[v382];
              if (v404 < v399)
              {
                v405 = v382;
                while (1)
                {
                  v406 = *v398;
                  while (1)
                  {
                    v407 = *v404;
                    if (*v404 >= v406)
                      break;
                    v404 = (float *)((char *)v404 + v386);
                  }
                  do
                    v399 -= v382;
                  while (*v399 >= v406);
                  if (v404 >= v399)
                    break;
                  *v404 = *v399;
                  *v399 = v407;
                  ++v400;
                  if (v398 == v404 && v405 == v382)
                  {
                    v398 = v399;
                    v405 = v382;
                  }
                  v404 += v382;
                }
              }
              if (v404 != v398)
              {
                v408 = *v404;
                if (*v398 < *v404)
                {
                  *v404 = *v398;
                  *v398 = v408;
                  ++v400;
                }
              }
              if (v404 != v395)
              {
                if (v400)
                {
LABEL_578:
                  if (v404 <= v395)
                  {
                    v409 = &v404[v382];
                  }
                  else
                  {
                    v396 = v404;
                    v409 = v394;
                  }
                  goto LABEL_607;
                }
                v410 = v404;
                if (v404 <= v395)
                {
                  while (&v410[(unint64_t)v386 / 4] != v396)
                  {
                    v412 = v410[v382] < *v410;
                    v410 = (float *)((char *)v410 + v386);
                    if (v412)
                      goto LABEL_578;
                  }
                }
                else
                {
                  v411 = v394;
                  while (&v411[(unint64_t)v386 / 4] != v404)
                  {
                    v412 = v411[v382] < *v411;
                    v411 = (float *)((char *)v411 + v386);
                    if (v412)
                      goto LABEL_578;
                  }
                }
              }
              goto LABEL_551;
            }
          }
          v409 = &v394[v382];
          if (v401 >= *v399)
          {
            if (v409 == v399)
              break;
            v413 = v394;
            while (1)
            {
              v414 = v413[v382];
              if (v401 < v414)
                break;
              v413 = (float *)((char *)v413 + v386);
              if (&v413[(unint64_t)v386 / 4] == v399)
                goto LABEL_551;
            }
            v413[v382] = *v399;
            *v399 = v414;
            v409 = &v413[2 * v382];
          }
          if (v409 == v399)
            break;
          while (1)
          {
            v415 = *v394;
            while (1)
            {
              v416 = *v409;
              if (v415 < *v409)
                break;
              v409 = (float *)((char *)v409 + v386);
            }
            do
              v399 -= v382;
            while (v415 < *v399);
            if (v409 >= v399)
              break;
            *v409 = *v399;
            *v399 = v416;
            v409 += v382;
          }
          if (v409 > v395)
            break;
LABEL_607:
          v394 = v409;
        }
        while (v396 != v395);
LABEL_551:
        if (++v384 == v428)
          goto LABEL_539;
      }
    default:
      return;
  }
  do
  {
    v85 = (int *)v448;
    v86 = (unint64_t)(v449 - (_BYTE *)v448) >> 2;
    v87 = 0;
    v88 = (v86 - 1);
    if ((int)v86 - 1 >= 0)
    {
      v89 = __p;
      v90 = v81;
      do
      {
        v91 = ldiv(v90, v85[v88]);
        v90 = v91.quot;
        v87 += v89[v88--] * v91.rem;
      }
      while (v88 != -1);
    }
    if (v438 == v84)
      goto LABEL_108;
    v92 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a3 + 152) + v87);
    v93 = &v92[v438];
    v94 = &v92[v84];
    while (1)
    {
      v95 = (v94 - v92) / v79;
      if (v95 < 2)
        goto LABEL_108;
      if ((_DWORD)v95 == 3)
      {
        goto LABEL_108;
      }
      if ((_DWORD)v95 == 2)
      {
        v123 = v94[-v79];
        v124 = *v92;
        if (v123 < v124)
        {
          *v92 = v123;
          v94[-v79] = v124;
        }
        goto LABEL_108;
      }
      if ((int)v95 <= 7)
      {
        if (&v94[-v79] == v92)
          goto LABEL_108;
        while (1)
        {
          v125 = v94;
          if (v92 == v94)
            goto LABEL_174;
          v126 = &v92[v79];
          if (&v92[v79] != v94)
            break;
LABEL_176:
          v92 += v79;
          if (v92 == &v94[-v79])
            goto LABEL_108;
        }
        v127 = *v92;
        v125 = v92;
        do
        {
          if (*v126 < v127)
          {
            v127 = *v126;
            v125 = v126;
          }
          v126 += v79;
        }
        while (v126 != v94);
LABEL_174:
        if (v125 != v92)
        {
          v128 = *v92;
          *v92 = *v125;
          *v125 = v128;
        }
        goto LABEL_176;
      }
      v96 = &v92[(v95 >> 1) * v79];
      v97 = &v94[-v79];
      v99 = *v92;
      v100 = *v96;
      if (v99 < v100)
        break;
      v101 = v94;
      while (&v101[-2 * v79] != v92)
      {
        v102 = v101[-2 * v79];
        v101 -= v79;
        if (v102 < v100)
        {
          *v92 = v102;
          v97 = &v101[-v79];
          v101[-v79] = v99;
          ++v98;
          goto LABEL_120;
        }
      }
      v110 = &v92[v79];
      v117 = *v97;
      if (v99 >= v117)
      {
        if (v110 == v97)
          goto LABEL_108;
        v118 = v92;
        while (1)
        {
          v119 = v118[v79];
          if (v99 < v119)
            break;
          v118 += v79;
          if (&v118[v79] == v97)
            goto LABEL_108;
        }
        v118[v79] = v117;
        *v97 = v119;
        v110 = &v118[2 * v79];
      }
      if (v110 == v97)
        goto LABEL_108;
      while (1)
      {
        v120 = *v92;
        while (1)
        {
          v121 = *v110;
          if (v120 < v121)
            break;
          v110 += v79;
        }
        do
        {
          v97 -= v79;
          v122 = *v97;
        }
        while (v120 < v122);
        if (v110 >= v97)
          break;
        *v110 = v122;
        *v97 = v121;
        v110 += v79;
      }
      if (v110 > v93)
        goto LABEL_108;
LABEL_162:
      v92 = v110;
      if (v94 == v93)
        goto LABEL_108;
    }
LABEL_120:
    v103 = &v92[v79];
    if (&v92[v79] < v97)
    {
      v104 = v79;
      while (1)
      {
        v105 = *v96;
        while (1)
        {
          v106 = *v103;
          if (v106 >= v105)
            break;
          v103 += v79;
        }
        do
        {
          v97 -= v79;
          v107 = *v97;
        }
        while (v107 >= v105);
        if (v103 >= v97)
          break;
        *v103 = v107;
        *v97 = v106;
        ++v98;
        if (v96 == v103 && v104 == v79)
        {
          v96 = v97;
          v104 = v79;
        }
        v103 += v79;
      }
    }
    if (v103 != v96)
    {
      v108 = *v96;
      v109 = *v103;
      if (v108 < v109)
      {
        *v103 = v108;
        *v96 = v109;
        ++v98;
      }
    }
    if (v103 == v93)
      goto LABEL_108;
    if (v98)
    {
LABEL_135:
      if (v103 <= v93)
      {
        v110 = &v103[v79];
      }
      else
      {
        v94 = v103;
        v110 = v92;
      }
      goto LABEL_162;
    }
    v111 = v103;
    if (v103 <= v93)
    {
      while (&v111[v79] != v94)
      {
        v115 = v111[v79];
        v116 = *v111;
        v111 += v79;
        if (v115 < v116)
          goto LABEL_135;
      }
    }
    else
    {
      v112 = v92;
      while (&v112[v79] != v103)
      {
        v113 = v112[v79];
        v114 = *v112;
        v112 += v79;
        if (v113 < v114)
          goto LABEL_135;
      }
    }
LABEL_108:
    ++v81;
  }
  while (v81 != v431);
LABEL_539:
  if (__p)
  {
    v446 = (char *)__p;
    operator delete(__p);
  }
  if (v448)
  {
    v449 = (char *)v448;
    operator delete(v448);
  }
}

void sub_242304010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<unsigned int>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x1FFFFFFFFFFFFFFFLL)
    v1 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(4 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<BOOL,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v33;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;

  if (a6 >= 2)
  {
    v11 = (int *)a2;
    if (a6 == 2)
    {
      v12 = a4[-a3];
      v13 = *a2;
      v14 = a5[1];
      v15 = *(unsigned __int8 *)(*a5 + v14 * v12);
      v16 = *(unsigned __int8 *)(*a5 + v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (v17 = v15 == v16) : (v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      v18 = result;
      if ((int)a6 > 128)
      {
        v35 = a7;
        v36 = a6 >> 1;
        v37 = a6;
        v52 = a6 - (a6 >> 1);
        v38 = &a2[result * v36];
        if (a6 <= a8)
        {
          v39 = &v35[v36];
          v40 = *a5;
          v41 = a5[1];
          v42 = 4 * v18;
          v43 = v39;
          v44 = &v35[v37];
          while (v43 != v44)
          {
            v45 = *v43;
            v46 = *v35;
            v47 = *(unsigned __int8 *)(v40 + v41 * v45);
            v48 = *(unsigned __int8 *)(v40 + v41 * v46);
            if (v47 < v48 || (v45 < v46 ? (v49 = v47 == v48) : (v49 = 0), v49))
            {
              *v11 = v45;
              ++v43;
            }
            else
            {
              *v11 = v46;
              ++v35;
            }
            v11 = (int *)((char *)v11 + v42);
            if (v35 == v39)
            {
              while (v43 != v44)
              {
                v50 = *v43++;
                *v11 = v50;
                v11 = (int *)((char *)v11 + v42);
              }
              return result;
            }
          }
          while (v35 != v39)
          {
            v51 = *v35++;
            *v11 = v51;
            v11 = (int *)((char *)v11 + v42);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v19 = &a2[result];
        if (v19 != a4)
        {
          v20 = 0;
          v21 = *a5;
          v22 = a5[1];
          v23 = 4 * result;
          v24 = a2;
          do
          {
            v25 = v19;
            v26 = *v19;
            v27 = *v24;
            v28 = *(unsigned __int8 *)(v21 + v22 * v26);
            result = *(unsigned __int8 *)(v21 + v22 * v27);
            if (v28 < result
              || (v26 < v27 ? (v29 = v28 == (_DWORD)result) : (v29 = 0), v29))
            {
              *v25 = v27;
              if (v24 == a2)
              {
LABEL_30:
                v33 = a2;
              }
              else
              {
                v30 = v20;
                while (1)
                {
                  v31 = *(unsigned int *)((char *)a2 + v30 + -4 * v18);
                  result = *(unsigned __int8 *)(v21 + v22 * v31);
                  if (v28 >= result && (v26 >= v31 || v28 != (_DWORD)result))
                    break;
                  *(unsigned int *)((char *)a2 + v30) = v31;
                  v30 -= v23;
                  if (!v30)
                    goto LABEL_30;
                }
                v33 = (unsigned int *)((char *)a2 + v30);
              }
              *v33 = v26;
            }
            v19 = &v25[v18];
            v20 += v23;
            v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<BOOL,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  unsigned int *v7;
  unsigned int *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;

  if (a6)
  {
    v7 = a7;
    v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      v13 = a4[-a3];
      v14 = *a2;
      v15 = a5[1];
      v16 = *(unsigned __int8 *)(*a5 + v15 * v13);
      v17 = *(unsigned __int8 *)(*a5 + v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        v9 = &a4[-a3];
      }
      *a7 = v13;
      v7 = a7 + 1;
      goto LABEL_8;
    }
    v18 = result;
    if ((int)a6 > 8)
    {
      v37 = a6 >> 1;
      v38 = &a2[result * v37];
      if (v18 * v37)
      {
        v39 = *a5;
        v40 = a5[1];
        v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          v42 = *v41;
          v43 = *v9;
          v44 = *(unsigned __int8 *)(v39 + v40 * v42);
          v45 = *(unsigned __int8 *)(v39 + v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (v46 = v44 == v45) : (v46 = 0), v46))
          {
            *v7 = v42;
            v41 += v18;
          }
          else
          {
            *v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38)
            goto LABEL_47;
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      v19 = &a2[result];
      if (v19 != a4)
      {
        v20 = 0;
        v21 = *a5;
        v22 = a5[1];
        v23 = a7;
        v24 = a7;
        do
        {
          v26 = *v24++;
          v25 = v26;
          v27 = *v19;
          v28 = *(unsigned __int8 *)(v21 + v22 * v27);
          v29 = *(unsigned __int8 *)(v21 + v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (v30 = v28 == v29) : (v30 = 0), v30))
          {
            v23[1] = v25;
            v31 = a7;
            if (v23 != a7)
            {
              v32 = v20;
              do
              {
                v33 = *v19;
                v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                v35 = *(unsigned __int8 *)(v21 + v22 * v33);
                result = *(unsigned __int8 *)(v21 + v22 * v34);
                if (v35 >= result && (v33 >= v34 || v35 != (_DWORD)result))
                {
                  v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              v31 = a7;
            }
LABEL_30:
            *v31 = *v19;
          }
          else
          {
            *v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<BOOL,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result;
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  unsigned int v35;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  int *v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  int *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int *v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  BOOL v74;
  int v75;
  unsigned int *v76;
  int v77;
  int *v78;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  int *v84;
  unsigned int *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int *v89;

  result = a9;
  if (a9)
  {
    v13 = a7;
    v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8)
        return result;
      v16 = 0;
      v17 = *a4;
      v18 = *v13;
      v19 = v13[1];
      v20 = *(unsigned __int8 *)(*v13 + v19 * v17);
      v21 = -a8;
      while (1)
      {
        v22 = a2[v16];
        v23 = *(unsigned __int8 *)(v18 + v19 * v22);
        if (v20 < v23)
          break;
        if (v17 < v22 && v20 == v23)
          break;
        v16 += a1;
        if (__CFADD__(v21++, 1))
          return result;
      }
      v83 = a5;
      v84 = a6;
      v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0)
          v37 = -v21;
        else
          v37 = 1 - v21;
        v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        v38 = (a6 - a4) / a5;
        if ((_DWORD)v38)
        {
          v39 = *v31;
          v40 = *(unsigned __int8 *)(v18 + v19 * v39);
          v27 = a4;
          do
          {
            v41 = v38 >> 1;
            v42 = &v27[a3 * v41];
            v43 = *v42;
            v44 = *(unsigned __int8 *)(v18 + v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (v45 = v44 == v40) : (v45 = 0), v45))
            {
              v27 = &v42[a3];
              LODWORD(v41) = v38 + ~(_DWORD)v41;
            }
            LODWORD(v38) = v41;
          }
          while ((_DWORD)v41);
        }
        else
        {
          v27 = a4;
        }
        v87 = (v37 >> 1);
        v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0)
          v26 = result;
        else
          v26 = result + 1;
        v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if ((_DWORD)v28)
        {
          v29 = *v27;
          v30 = *(unsigned __int8 *)(v18 + v19 * v29);
          v31 = &a2[v16];
          do
          {
            v32 = v28 >> 1;
            v33 = &v31[a1 * v32];
            v34 = *v33;
            v35 = *(unsigned __int8 *)(v18 + v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              v31 = &v33[a1];
              LODWORD(v32) = v28 + ~(_DWORD)v32;
            }
            LODWORD(v28) = v32;
          }
          while ((_DWORD)v32);
        }
        else
        {
          v31 = &a2[v16];
        }
        v86 = (v26 >> 1);
        v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      v82 = result - v86;
      v46 = result;
      v80 = a3;
      v81 = a1;
      a1 = v88;
      v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        v49 = v89;
        v13 = a7;
        v27 = v31;
        a3 = v81;
        v47 = v78;
        v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        v48 = v82;
      }
      result = v48;
      a2 = v47;
      a4 = v27;
      if (!(_DWORD)v48)
        return result;
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        v62 = 0;
        v63 = 4 * a1;
        v64 = a2;
        do
        {
          a10[v62++] = *v64;
          v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          v65 = &a10[v62];
          v66 = (uint64_t)&a10[v62 - 1];
          v67 = *v13;
          v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            v69 = *a4;
            v70 = v85;
            v71 = *v85;
            v72 = *(unsigned __int8 *)(v67 + v68 * v69);
            v73 = *(unsigned __int8 *)(v67 + v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (v74 = v72 == v73) : (v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            v85 = v70;
            if (v65 == v70)
              return result;
          }
          v76 = v85 - 1;
          do
          {
            v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      v50 = 0;
      v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        v52 = &a10[v50];
        v53 = *v13;
        v54 = v13[1];
        v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          v56 = &a4[-a3];
          v57 = *(v52 - 1);
          v58 = *v56;
          v59 = *(unsigned __int8 *)(v53 + v54 * v57);
          result = *(unsigned __int8 *)(v53 + v54 * v58);
          if (v59 >= result)
          {
            v61 = v57 < v58 && v59 == (_DWORD)result;
            v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              v56 = a4;
              --v52;
            }
          }
          else
          {
            v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60)
            return result;
        }
        do
        {
          v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

unint64_t std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>@<X0>(unint64_t result@<X0>, int *a2@<X1>, unint64_t a3@<X2>, int *a4@<X3>, unint64_t a5@<X4>, int *a6@<X5>, unint64_t *a7@<X8>)
{
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  int *v24;
  int *v25;
  int *v26;
  unint64_t v27;

  if (a2 == a4 && result == a3)
  {
    *a7 = a5;
    a7[1] = (unint64_t)a6;
  }
  else if (a4 == a6 && a3 == a5)
  {
    *a7 = result;
    a7[1] = (unint64_t)a2;
    a5 = a3;
  }
  else
  {
    if (&a2[result] == a4 && result == a3)
    {
      v7 = *a2;
      if (a4 != a6)
      {
        v8 = 0;
        do
        {
          a2[v8] = a4[v8];
          v8 += result;
        }
        while (&a4[v8] != a6);
        a2 = (int *)((char *)a2 + v8 * 4);
      }
      *a2 = v7;
      a4 = a2;
    }
    else if (&a4[a3] == a6 && a3 == a5)
    {
      v9 = &a6[-a3];
      v10 = *v9;
      a4 = a6;
      if (v9 != a2)
      {
        v11 = 0;
        do
        {
          v9[v11] = a6[v11 + -2 * a3];
          v11 -= a3;
        }
        while (&v9[v11] != a2);
        a4 = &a6[v11];
      }
      *a2 = v10;
      result = a5;
    }
    else
    {
      v12 = (a4 - a2) / a3;
      v13 = (a6 - a4) / a5;
      if ((_DWORD)v12 == (_DWORD)v13)
      {
        if (a2 != a4 && a4 != a6)
        {
          v14 = a4;
          do
          {
            v15 = *a2;
            *a2 = *v14;
            *v14 = v15;
            a2 += result;
            v14 += a3;
          }
          while (a2 != a4 && v14 != a6);
        }
        result = a3;
      }
      else
      {
        v17 = (a6 - a4) / a5;
        v18 = (a4 - a2) / a3;
        do
        {
          v19 = v18;
          LODWORD(v18) = v17;
          LODWORD(v17) = v19 % (int)v17;
        }
        while ((_DWORD)v17);
        v20 = result * (int)v18;
        if (v20)
        {
          v21 = &a2[v20];
          v22 = (int)v12 * result;
          do
          {
            v21 -= result;
            v23 = *v21;
            v24 = &v21[v22];
            v25 = v21;
            do
            {
              v26 = v24;
              *v25 = *v24;
              v27 = (a6 - v24) / a5;
              if ((int)v12 >= (int)v27)
                v24 = &a2[((int)v12 - (int)v27) * result];
              else
                v24 = &v26[v22];
              v25 = v26;
            }
            while (v24 != v21);
            *v26 = v23;
          }
          while (v21 != a2);
        }
        a4 = &a2[(int)v13 * result];
      }
    }
    *a7 = result;
    a7[1] = (unint64_t)a4;
  }
  a7[2] = a5;
  a7[3] = (unint64_t)a6;
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<unsigned char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int *v34;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  unsigned int v52;
  unsigned int v53;

  if (a6 >= 2)
  {
    v11 = (int *)a2;
    if (a6 == 2)
    {
      v12 = a4[-a3];
      v13 = *a2;
      v14 = a5[1];
      v15 = *(unsigned __int8 *)(*a5 + v14 * v12);
      v16 = *(unsigned __int8 *)(*a5 + v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (v17 = v15 == v16) : (v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      v18 = result;
      if ((int)a6 > 128)
      {
        v36 = a7;
        v37 = a6 >> 1;
        v38 = a6;
        v53 = a6 - (a6 >> 1);
        v39 = &a2[result * v37];
        if (a6 <= a8)
        {
          v40 = &v36[v37];
          v41 = *a5;
          v42 = a5[1];
          v43 = 4 * v18;
          v44 = v40;
          v45 = &v36[v38];
          while (v44 != v45)
          {
            v46 = *v44;
            v47 = *v36;
            v48 = *(unsigned __int8 *)(v41 + v42 * v46);
            v49 = *(unsigned __int8 *)(v41 + v42 * v47);
            if (v48 < v49 || (v46 < v47 ? (v50 = v48 == v49) : (v50 = 0), v50))
            {
              *v11 = v46;
              ++v44;
            }
            else
            {
              *v11 = v47;
              ++v36;
            }
            v11 = (int *)((char *)v11 + v43);
            if (v36 == v40)
            {
              while (v44 != v45)
              {
                v51 = *v44++;
                *v11 = v51;
                v11 = (int *)((char *)v11 + v43);
              }
              return result;
            }
          }
          while (v36 != v40)
          {
            v52 = *v36++;
            *v11 = v52;
            v11 = (int *)((char *)v11 + v43);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v19 = &a2[result];
        if (v19 != a4)
        {
          v20 = 0;
          v21 = *a5;
          v22 = a5[1];
          v23 = 4 * result;
          v24 = (int *)a2;
          do
          {
            v25 = (int *)v19;
            v26 = *v19;
            v27 = *v24;
            result = *(unsigned __int8 *)(v21 + v22 * v26);
            v28 = *(unsigned __int8 *)(v21 + v22 * v27);
            if (result < v28
              || (v26 < v27 ? (v29 = (_DWORD)result == v28) : (v29 = 0), v29))
            {
              *v25 = v27;
              if (v24 == v11)
              {
LABEL_30:
                v34 = v11;
              }
              else
              {
                v30 = v20;
                while (1)
                {
                  v31 = *(unsigned int *)((char *)v11 + v30 + -4 * v18);
                  result = *(unsigned __int8 *)(v21 + v22 * v26);
                  v32 = *(unsigned __int8 *)(v21 + v22 * v31);
                  if (result >= v32 && (v26 >= v31 || (_DWORD)result != v32))
                    break;
                  *(int *)((char *)v11 + v30) = v31;
                  v30 -= v23;
                  if (!v30)
                    goto LABEL_30;
                }
                v34 = (int *)((char *)v11 + v30);
              }
              *v34 = v26;
            }
            v19 = (unsigned int *)&v25[v18];
            v20 += v23;
            v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<unsigned char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  unsigned int *v7;
  unsigned int *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;

  if (a6)
  {
    v7 = a7;
    v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      v13 = a4[-a3];
      v14 = *a2;
      v15 = a5[1];
      v16 = *(unsigned __int8 *)(*a5 + v15 * v13);
      v17 = *(unsigned __int8 *)(*a5 + v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        v9 = &a4[-a3];
      }
      *a7 = v13;
      v7 = a7 + 1;
      goto LABEL_8;
    }
    v18 = result;
    if ((int)a6 > 8)
    {
      v37 = a6 >> 1;
      v38 = &a2[result * v37];
      if (v18 * v37)
      {
        v39 = *a5;
        v40 = a5[1];
        v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          v42 = *v41;
          v43 = *v9;
          v44 = *(unsigned __int8 *)(v39 + v40 * v42);
          v45 = *(unsigned __int8 *)(v39 + v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (v46 = v44 == v45) : (v46 = 0), v46))
          {
            *v7 = v42;
            v41 += v18;
          }
          else
          {
            *v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38)
            goto LABEL_47;
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      v19 = &a2[result];
      if (v19 != a4)
      {
        v20 = 0;
        v21 = *a5;
        v22 = a5[1];
        v23 = a7;
        v24 = a7;
        do
        {
          v26 = *v24++;
          v25 = v26;
          v27 = *v19;
          v28 = *(unsigned __int8 *)(v21 + v22 * v27);
          v29 = *(unsigned __int8 *)(v21 + v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (v30 = v28 == v29) : (v30 = 0), v30))
          {
            v23[1] = v25;
            v31 = a7;
            if (v23 != a7)
            {
              v32 = v20;
              do
              {
                v33 = *v19;
                v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                v35 = *(unsigned __int8 *)(v21 + v22 * v33);
                result = *(unsigned __int8 *)(v21 + v22 * v34);
                if (v35 >= result && (v33 >= v34 || v35 != (_DWORD)result))
                {
                  v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              v31 = a7;
            }
LABEL_30:
            *v31 = *v19;
          }
          else
          {
            *v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<unsigned int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int *v34;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  unsigned int v52;
  unsigned int v53;

  if (a6 >= 2)
  {
    v11 = (int *)a2;
    if (a6 == 2)
    {
      v12 = a4[-a3];
      v13 = *a2;
      v14 = a5[1];
      v15 = *(_DWORD *)(*a5 + 4 * v14 * v12);
      v16 = *(_DWORD *)(*a5 + 4 * v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (v17 = v15 == v16) : (v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      v18 = result;
      if ((int)a6 > 128)
      {
        v36 = a7;
        v37 = a6 >> 1;
        v38 = a6;
        v53 = a6 - (a6 >> 1);
        v39 = &a2[result * v37];
        if (a6 <= a8)
        {
          v40 = &v36[v37];
          v41 = *a5;
          v42 = a5[1];
          v43 = 4 * v18;
          v44 = v40;
          v45 = &v36[v38];
          while (v44 != v45)
          {
            v46 = *v44;
            v47 = *v36;
            v48 = *(_DWORD *)(v41 + 4 * v42 * v46);
            v49 = *(_DWORD *)(v41 + 4 * v42 * v47);
            if (v48 < v49 || (v46 < v47 ? (v50 = v48 == v49) : (v50 = 0), v50))
            {
              *v11 = v46;
              ++v44;
            }
            else
            {
              *v11 = v47;
              ++v36;
            }
            v11 = (int *)((char *)v11 + v43);
            if (v36 == v40)
            {
              while (v44 != v45)
              {
                v51 = *v44++;
                *v11 = v51;
                v11 = (int *)((char *)v11 + v43);
              }
              return result;
            }
          }
          while (v36 != v40)
          {
            v52 = *v36++;
            *v11 = v52;
            v11 = (int *)((char *)v11 + v43);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v19 = &a2[result];
        if (v19 != a4)
        {
          v20 = 0;
          v21 = *a5;
          v22 = a5[1];
          v23 = 4 * result;
          v24 = (int *)a2;
          do
          {
            v25 = (int *)v19;
            v26 = *v19;
            v27 = *v24;
            result = *(unsigned int *)(v21 + 4 * v22 * v26);
            v28 = *(_DWORD *)(v21 + 4 * v22 * v27);
            if (result < v28
              || (v26 < v27 ? (v29 = (_DWORD)result == v28) : (v29 = 0), v29))
            {
              *v25 = v27;
              if (v24 == v11)
              {
LABEL_30:
                v34 = v11;
              }
              else
              {
                v30 = v20;
                while (1)
                {
                  v31 = *(unsigned int *)((char *)v11 + v30 + -4 * v18);
                  result = *(unsigned int *)(v21 + 4 * v22 * v26);
                  v32 = *(_DWORD *)(v21 + 4 * v22 * v31);
                  if (result >= v32 && (v26 >= v31 || (_DWORD)result != v32))
                    break;
                  *(int *)((char *)v11 + v30) = v31;
                  v30 -= v23;
                  if (!v30)
                    goto LABEL_30;
                }
                v34 = (int *)((char *)v11 + v30);
              }
              *v34 = v26;
            }
            v19 = (unsigned int *)&v25[v18];
            v20 += v23;
            v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<unsigned int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  unsigned int *v7;
  unsigned int *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;

  if (a6)
  {
    v7 = a7;
    v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      v13 = a4[-a3];
      v14 = *a2;
      v15 = a5[1];
      v16 = *(_DWORD *)(*a5 + 4 * v15 * v13);
      v17 = *(_DWORD *)(*a5 + 4 * v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        v9 = &a4[-a3];
      }
      *a7 = v13;
      v7 = a7 + 1;
      goto LABEL_8;
    }
    v18 = result;
    if ((int)a6 > 8)
    {
      v37 = a6 >> 1;
      v38 = &a2[result * v37];
      if (v18 * v37)
      {
        v39 = *a5;
        v40 = a5[1];
        v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          v42 = *v41;
          v43 = *v9;
          v44 = *(_DWORD *)(v39 + 4 * v40 * v42);
          v45 = *(_DWORD *)(v39 + 4 * v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (v46 = v44 == v45) : (v46 = 0), v46))
          {
            *v7 = v42;
            v41 += v18;
          }
          else
          {
            *v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38)
            goto LABEL_47;
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      v19 = &a2[result];
      if (v19 != a4)
      {
        v20 = 0;
        v21 = *a5;
        v22 = a5[1];
        v23 = a7;
        v24 = a7;
        do
        {
          v26 = *v24++;
          v25 = v26;
          v27 = *v19;
          v28 = *(_DWORD *)(v21 + 4 * v22 * v27);
          v29 = *(_DWORD *)(v21 + 4 * v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (v30 = v28 == v29) : (v30 = 0), v30))
          {
            v23[1] = v25;
            v31 = a7;
            if (v23 != a7)
            {
              v32 = v20;
              do
              {
                v33 = *v19;
                v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                v35 = *(_DWORD *)(v21 + 4 * v22 * v33);
                result = *(unsigned int *)(v21 + 4 * v22 * v34);
                if (v35 >= result && (v33 >= v34 || v35 != (_DWORD)result))
                {
                  v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              v31 = a7;
            }
LABEL_30:
            *v31 = *v19;
          }
          else
          {
            *v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<unsigned int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result;
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  unsigned int v35;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  int *v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  int *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int *v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  BOOL v74;
  int v75;
  unsigned int *v76;
  int v77;
  int *v78;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  int *v84;
  unsigned int *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int *v89;

  result = a9;
  if (a9)
  {
    v13 = a7;
    v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8)
        return result;
      v16 = 0;
      v17 = *a4;
      v18 = *v13;
      v19 = v13[1];
      v20 = *(_DWORD *)(*v13 + 4 * v19 * v17);
      v21 = -a8;
      while (1)
      {
        v22 = a2[v16];
        v23 = *(_DWORD *)(v18 + 4 * v19 * v22);
        if (v20 < v23)
          break;
        if (v17 < v22 && v20 == v23)
          break;
        v16 += a1;
        if (__CFADD__(v21++, 1))
          return result;
      }
      v83 = a5;
      v84 = a6;
      v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0)
          v37 = -v21;
        else
          v37 = 1 - v21;
        v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        v38 = (a6 - a4) / a5;
        if ((_DWORD)v38)
        {
          v39 = *v31;
          v40 = *(_DWORD *)(v18 + 4 * v19 * v39);
          v27 = a4;
          do
          {
            v41 = v38 >> 1;
            v42 = &v27[a3 * v41];
            v43 = *v42;
            v44 = *(_DWORD *)(v18 + 4 * v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (v45 = v44 == v40) : (v45 = 0), v45))
            {
              v27 = &v42[a3];
              LODWORD(v41) = v38 + ~(_DWORD)v41;
            }
            LODWORD(v38) = v41;
          }
          while ((_DWORD)v41);
        }
        else
        {
          v27 = a4;
        }
        v87 = (v37 >> 1);
        v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0)
          v26 = result;
        else
          v26 = result + 1;
        v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if ((_DWORD)v28)
        {
          v29 = *v27;
          v30 = *(_DWORD *)(v18 + 4 * v19 * v29);
          v31 = &a2[v16];
          do
          {
            v32 = v28 >> 1;
            v33 = &v31[a1 * v32];
            v34 = *v33;
            v35 = *(_DWORD *)(v18 + 4 * v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              v31 = &v33[a1];
              LODWORD(v32) = v28 + ~(_DWORD)v32;
            }
            LODWORD(v28) = v32;
          }
          while ((_DWORD)v32);
        }
        else
        {
          v31 = &a2[v16];
        }
        v86 = (v26 >> 1);
        v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      v82 = result - v86;
      v46 = result;
      v80 = a3;
      v81 = a1;
      a1 = v88;
      v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        v49 = v89;
        v13 = a7;
        v27 = v31;
        a3 = v81;
        v47 = v78;
        v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        v48 = v82;
      }
      result = v48;
      a2 = v47;
      a4 = v27;
      if (!(_DWORD)v48)
        return result;
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        v62 = 0;
        v63 = 4 * a1;
        v64 = a2;
        do
        {
          a10[v62++] = *v64;
          v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          v65 = &a10[v62];
          v66 = (uint64_t)&a10[v62 - 1];
          v67 = *v13;
          v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            v69 = *a4;
            v70 = v85;
            v71 = *v85;
            v72 = *(_DWORD *)(v67 + 4 * v68 * v69);
            v73 = *(_DWORD *)(v67 + 4 * v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (v74 = v72 == v73) : (v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            v85 = v70;
            if (v65 == v70)
              return result;
          }
          v76 = v85 - 1;
          do
          {
            v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      v50 = 0;
      v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        v52 = &a10[v50];
        v53 = *v13;
        v54 = v13[1];
        v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          v56 = &a4[-a3];
          v57 = *(v52 - 1);
          v58 = *v56;
          v59 = *(_DWORD *)(v53 + 4 * v54 * v57);
          result = *(unsigned int *)(v53 + 4 * v54 * v58);
          if (v59 >= result)
          {
            v61 = v57 < v58 && v59 == (_DWORD)result;
            v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              v56 = a4;
              --v52;
            }
          }
          else
          {
            v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60)
            return result;
        }
        do
        {
          v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<signed char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int *v34;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  unsigned int v52;
  unsigned int v53;

  if (a6 >= 2)
  {
    v11 = (int *)a2;
    if (a6 == 2)
    {
      v12 = a4[-a3];
      v13 = *a2;
      v14 = a5[1];
      v15 = *(char *)(*a5 + v14 * v12);
      v16 = *(char *)(*a5 + v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (v17 = v15 == v16) : (v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      v18 = result;
      if ((int)a6 > 128)
      {
        v36 = a7;
        v37 = a6 >> 1;
        v38 = a6;
        v53 = a6 - (a6 >> 1);
        v39 = &a2[result * v37];
        if (a6 <= a8)
        {
          v40 = &v36[v37];
          v41 = *a5;
          v42 = a5[1];
          v43 = 4 * v18;
          v44 = v40;
          v45 = &v36[v38];
          while (v44 != v45)
          {
            v46 = *v44;
            v47 = *v36;
            v48 = *(char *)(v41 + v42 * v46);
            v49 = *(char *)(v41 + v42 * v47);
            if (v48 < v49 || (v46 < v47 ? (v50 = v48 == v49) : (v50 = 0), v50))
            {
              *v11 = v46;
              ++v44;
            }
            else
            {
              *v11 = v47;
              ++v36;
            }
            v11 = (int *)((char *)v11 + v43);
            if (v36 == v40)
            {
              while (v44 != v45)
              {
                v51 = *v44++;
                *v11 = v51;
                v11 = (int *)((char *)v11 + v43);
              }
              return result;
            }
          }
          while (v36 != v40)
          {
            v52 = *v36++;
            *v11 = v52;
            v11 = (int *)((char *)v11 + v43);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v19 = &a2[result];
        if (v19 != a4)
        {
          v20 = 0;
          v21 = *a5;
          v22 = a5[1];
          v23 = 4 * result;
          v24 = (int *)a2;
          do
          {
            v25 = (int *)v19;
            v26 = *v19;
            v27 = *v24;
            result = *(char *)(v21 + v22 * v26);
            v28 = *(char *)(v21 + v22 * v27);
            if ((int)result < v28
              || (v26 < v27 ? (v29 = (_DWORD)result == v28) : (v29 = 0), v29))
            {
              *v25 = v27;
              if (v24 == v11)
              {
LABEL_30:
                v34 = v11;
              }
              else
              {
                v30 = v20;
                while (1)
                {
                  v31 = *(unsigned int *)((char *)v11 + v30 + -4 * v18);
                  result = *(char *)(v21 + v22 * v26);
                  v32 = *(char *)(v21 + v22 * v31);
                  if ((int)result >= v32 && (v26 >= v31 || (_DWORD)result != v32))
                    break;
                  *(int *)((char *)v11 + v30) = v31;
                  v30 -= v23;
                  if (!v30)
                    goto LABEL_30;
                }
                v34 = (int *)((char *)v11 + v30);
              }
              *v34 = v26;
            }
            v19 = (unsigned int *)&v25[v18];
            v20 += v23;
            v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<signed char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  unsigned int *v7;
  unsigned int *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  BOOL v46;

  if (a6)
  {
    v7 = a7;
    v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      v13 = a4[-a3];
      v14 = *a2;
      v15 = a5[1];
      v16 = *(char *)(*a5 + v15 * v13);
      v17 = *(char *)(*a5 + v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        v9 = &a4[-a3];
      }
      *a7 = v13;
      v7 = a7 + 1;
      goto LABEL_8;
    }
    v18 = result;
    if ((int)a6 > 8)
    {
      v37 = a6 >> 1;
      v38 = &a2[result * v37];
      if (v18 * v37)
      {
        v39 = *a5;
        v40 = a5[1];
        v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          v42 = *v41;
          v43 = *v9;
          v44 = *(char *)(v39 + v40 * v42);
          v45 = *(char *)(v39 + v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (v46 = v44 == v45) : (v46 = 0), v46))
          {
            *v7 = v42;
            v41 += v18;
          }
          else
          {
            *v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38)
            goto LABEL_47;
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      v19 = &a2[result];
      if (v19 != a4)
      {
        v20 = 0;
        v21 = *a5;
        v22 = a5[1];
        v23 = a7;
        v24 = a7;
        do
        {
          v26 = *v24++;
          v25 = v26;
          v27 = *v19;
          v28 = *(char *)(v21 + v22 * v27);
          v29 = *(char *)(v21 + v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (v30 = v28 == v29) : (v30 = 0), v30))
          {
            v23[1] = v25;
            v31 = a7;
            if (v23 != a7)
            {
              v32 = v20;
              do
              {
                v33 = *v19;
                v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                v35 = *(char *)(v21 + v22 * v33);
                result = *(char *)(v21 + v22 * v34);
                if (v35 >= (int)result && (v33 >= v34 || v35 != (_DWORD)result))
                {
                  v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              v31 = a7;
            }
LABEL_30:
            *v31 = *v19;
          }
          else
          {
            *v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<signed char,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result;
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  int v46;
  int *v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  int *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int *v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  int v72;
  int v73;
  BOOL v74;
  int v75;
  unsigned int *v76;
  int v77;
  int *v78;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  int *v84;
  unsigned int *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int *v89;

  result = a9;
  if (a9)
  {
    v13 = a7;
    v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8)
        return result;
      v16 = 0;
      v17 = *a4;
      v18 = *v13;
      v19 = v13[1];
      v20 = *(char *)(*v13 + v19 * v17);
      v21 = -a8;
      while (1)
      {
        v22 = a2[v16];
        v23 = *(char *)(v18 + v19 * v22);
        if (v20 < v23)
          break;
        if (v17 < v22 && v20 == v23)
          break;
        v16 += a1;
        if (__CFADD__(v21++, 1))
          return result;
      }
      v83 = a5;
      v84 = a6;
      v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0)
          v37 = -v21;
        else
          v37 = 1 - v21;
        v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        v38 = (a6 - a4) / a5;
        if ((_DWORD)v38)
        {
          v39 = *v31;
          v40 = *(char *)(v18 + v19 * v39);
          v27 = a4;
          do
          {
            v41 = v38 >> 1;
            v42 = &v27[a3 * v41];
            v43 = *v42;
            v44 = *(char *)(v18 + v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (v45 = v44 == v40) : (v45 = 0), v45))
            {
              v27 = &v42[a3];
              LODWORD(v41) = v38 + ~(_DWORD)v41;
            }
            LODWORD(v38) = v41;
          }
          while ((_DWORD)v41);
        }
        else
        {
          v27 = a4;
        }
        v87 = (v37 >> 1);
        v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0)
          v26 = result;
        else
          v26 = result + 1;
        v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if ((_DWORD)v28)
        {
          v29 = *v27;
          v30 = *(char *)(v18 + v19 * v29);
          v31 = &a2[v16];
          do
          {
            v32 = v28 >> 1;
            v33 = &v31[a1 * v32];
            v34 = *v33;
            v35 = *(char *)(v18 + v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              v31 = &v33[a1];
              LODWORD(v32) = v28 + ~(_DWORD)v32;
            }
            LODWORD(v28) = v32;
          }
          while ((_DWORD)v32);
        }
        else
        {
          v31 = &a2[v16];
        }
        v86 = (v26 >> 1);
        v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      v82 = result - v86;
      v46 = result;
      v80 = a3;
      v81 = a1;
      a1 = v88;
      v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        v49 = v89;
        v13 = a7;
        v27 = v31;
        a3 = v81;
        v47 = v78;
        v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        v48 = v82;
      }
      result = v48;
      a2 = v47;
      a4 = v27;
      if (!(_DWORD)v48)
        return result;
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        v62 = 0;
        v63 = 4 * a1;
        v64 = a2;
        do
        {
          a10[v62++] = *v64;
          v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          v65 = &a10[v62];
          v66 = (uint64_t)&a10[v62 - 1];
          v67 = *v13;
          v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            v69 = *a4;
            v70 = v85;
            v71 = *v85;
            v72 = *(char *)(v67 + v68 * v69);
            v73 = *(char *)(v67 + v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (v74 = v72 == v73) : (v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            v85 = v70;
            if (v65 == v70)
              return result;
          }
          v76 = v85 - 1;
          do
          {
            v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      v50 = 0;
      v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        v52 = &a10[v50];
        v53 = *v13;
        v54 = v13[1];
        v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          v56 = &a4[-a3];
          v57 = *(v52 - 1);
          v58 = *v56;
          v59 = *(char *)(v53 + v54 * v57);
          result = *(char *)(v53 + v54 * v58);
          if (v59 >= (int)result)
          {
            v61 = v57 < v58 && v59 == (_DWORD)result;
            v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              v56 = a4;
              --v52;
            }
          }
          else
          {
            v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60)
            return result;
        }
        do
        {
          v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int *v34;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  unsigned int v52;
  unsigned int v53;

  if (a6 >= 2)
  {
    v11 = (int *)a2;
    if (a6 == 2)
    {
      v12 = a4[-a3];
      v13 = *a2;
      v14 = a5[1];
      v15 = *(_DWORD *)(*a5 + 4 * v14 * v12);
      v16 = *(_DWORD *)(*a5 + 4 * v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (v17 = v15 == v16) : (v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      v18 = result;
      if ((int)a6 > 128)
      {
        v36 = a7;
        v37 = a6 >> 1;
        v38 = a6;
        v53 = a6 - (a6 >> 1);
        v39 = &a2[result * v37];
        if (a6 <= a8)
        {
          v40 = &v36[v37];
          v41 = *a5;
          v42 = a5[1];
          v43 = 4 * v18;
          v44 = v40;
          v45 = &v36[v38];
          while (v44 != v45)
          {
            v46 = *v44;
            v47 = *v36;
            v48 = *(_DWORD *)(v41 + 4 * v42 * v46);
            v49 = *(_DWORD *)(v41 + 4 * v42 * v47);
            if (v48 < v49 || (v46 < v47 ? (v50 = v48 == v49) : (v50 = 0), v50))
            {
              *v11 = v46;
              ++v44;
            }
            else
            {
              *v11 = v47;
              ++v36;
            }
            v11 = (int *)((char *)v11 + v43);
            if (v36 == v40)
            {
              while (v44 != v45)
              {
                v51 = *v44++;
                *v11 = v51;
                v11 = (int *)((char *)v11 + v43);
              }
              return result;
            }
          }
          while (v36 != v40)
          {
            v52 = *v36++;
            *v11 = v52;
            v11 = (int *)((char *)v11 + v43);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v19 = &a2[result];
        if (v19 != a4)
        {
          v20 = 0;
          v21 = *a5;
          v22 = a5[1];
          v23 = 4 * result;
          v24 = (int *)a2;
          do
          {
            v25 = (int *)v19;
            v26 = *v19;
            v27 = *v24;
            result = *(unsigned int *)(v21 + 4 * v22 * v26);
            v28 = *(_DWORD *)(v21 + 4 * v22 * v27);
            if ((int)result < v28
              || (v26 < v27 ? (v29 = (_DWORD)result == v28) : (v29 = 0), v29))
            {
              *v25 = v27;
              if (v24 == v11)
              {
LABEL_30:
                v34 = v11;
              }
              else
              {
                v30 = v20;
                while (1)
                {
                  v31 = *(unsigned int *)((char *)v11 + v30 + -4 * v18);
                  result = *(unsigned int *)(v21 + 4 * v22 * v26);
                  v32 = *(_DWORD *)(v21 + 4 * v22 * v31);
                  if ((int)result >= v32 && (v26 >= v31 || (_DWORD)result != v32))
                    break;
                  *(int *)((char *)v11 + v30) = v31;
                  v30 -= v23;
                  if (!v30)
                    goto LABEL_30;
                }
                v34 = (int *)((char *)v11 + v30);
              }
              *v34 = v26;
            }
            v19 = (unsigned int *)&v25[v18];
            v20 += v23;
            v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  unsigned int *v7;
  unsigned int *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  BOOL v46;

  if (a6)
  {
    v7 = a7;
    v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      v13 = a4[-a3];
      v14 = *a2;
      v15 = a5[1];
      v16 = *(_DWORD *)(*a5 + 4 * v15 * v13);
      v17 = *(_DWORD *)(*a5 + 4 * v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        v9 = &a4[-a3];
      }
      *a7 = v13;
      v7 = a7 + 1;
      goto LABEL_8;
    }
    v18 = result;
    if ((int)a6 > 8)
    {
      v37 = a6 >> 1;
      v38 = &a2[result * v37];
      if (v18 * v37)
      {
        v39 = *a5;
        v40 = a5[1];
        v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          v42 = *v41;
          v43 = *v9;
          v44 = *(_DWORD *)(v39 + 4 * v40 * v42);
          v45 = *(_DWORD *)(v39 + 4 * v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (v46 = v44 == v45) : (v46 = 0), v46))
          {
            *v7 = v42;
            v41 += v18;
          }
          else
          {
            *v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38)
            goto LABEL_47;
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      v19 = &a2[result];
      if (v19 != a4)
      {
        v20 = 0;
        v21 = *a5;
        v22 = a5[1];
        v23 = a7;
        v24 = a7;
        do
        {
          v26 = *v24++;
          v25 = v26;
          v27 = *v19;
          v28 = *(_DWORD *)(v21 + 4 * v22 * v27);
          v29 = *(_DWORD *)(v21 + 4 * v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (v30 = v28 == v29) : (v30 = 0), v30))
          {
            v23[1] = v25;
            v31 = a7;
            if (v23 != a7)
            {
              v32 = v20;
              do
              {
                v33 = *v19;
                v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                v35 = *(_DWORD *)(v21 + 4 * v22 * v33);
                result = *(unsigned int *)(v21 + 4 * v22 * v34);
                if (v35 >= (int)result && (v33 >= v34 || v35 != (_DWORD)result))
                {
                  v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              v31 = a7;
            }
LABEL_30:
            *v31 = *v19;
          }
          else
          {
            *v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<int,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result;
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  int v46;
  int *v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  int *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int *v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  int v72;
  int v73;
  BOOL v74;
  int v75;
  unsigned int *v76;
  int v77;
  int *v78;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  int *v84;
  unsigned int *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int *v89;

  result = a9;
  if (a9)
  {
    v13 = a7;
    v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8)
        return result;
      v16 = 0;
      v17 = *a4;
      v18 = *v13;
      v19 = v13[1];
      v20 = *(_DWORD *)(*v13 + 4 * v19 * v17);
      v21 = -a8;
      while (1)
      {
        v22 = a2[v16];
        v23 = *(_DWORD *)(v18 + 4 * v19 * v22);
        if (v20 < v23)
          break;
        if (v17 < v22 && v20 == v23)
          break;
        v16 += a1;
        if (__CFADD__(v21++, 1))
          return result;
      }
      v83 = a5;
      v84 = a6;
      v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0)
          v37 = -v21;
        else
          v37 = 1 - v21;
        v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        v38 = (a6 - a4) / a5;
        if ((_DWORD)v38)
        {
          v39 = *v31;
          v40 = *(_DWORD *)(v18 + 4 * v19 * v39);
          v27 = a4;
          do
          {
            v41 = v38 >> 1;
            v42 = &v27[a3 * v41];
            v43 = *v42;
            v44 = *(_DWORD *)(v18 + 4 * v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (v45 = v44 == v40) : (v45 = 0), v45))
            {
              v27 = &v42[a3];
              LODWORD(v41) = v38 + ~(_DWORD)v41;
            }
            LODWORD(v38) = v41;
          }
          while ((_DWORD)v41);
        }
        else
        {
          v27 = a4;
        }
        v87 = (v37 >> 1);
        v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0)
          v26 = result;
        else
          v26 = result + 1;
        v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if ((_DWORD)v28)
        {
          v29 = *v27;
          v30 = *(_DWORD *)(v18 + 4 * v19 * v29);
          v31 = &a2[v16];
          do
          {
            v32 = v28 >> 1;
            v33 = &v31[a1 * v32];
            v34 = *v33;
            v35 = *(_DWORD *)(v18 + 4 * v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              v31 = &v33[a1];
              LODWORD(v32) = v28 + ~(_DWORD)v32;
            }
            LODWORD(v28) = v32;
          }
          while ((_DWORD)v32);
        }
        else
        {
          v31 = &a2[v16];
        }
        v86 = (v26 >> 1);
        v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      v82 = result - v86;
      v46 = result;
      v80 = a3;
      v81 = a1;
      a1 = v88;
      v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        v49 = v89;
        v13 = a7;
        v27 = v31;
        a3 = v81;
        v47 = v78;
        v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        v48 = v82;
      }
      result = v48;
      a2 = v47;
      a4 = v27;
      if (!(_DWORD)v48)
        return result;
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        v62 = 0;
        v63 = 4 * a1;
        v64 = a2;
        do
        {
          a10[v62++] = *v64;
          v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          v65 = &a10[v62];
          v66 = (uint64_t)&a10[v62 - 1];
          v67 = *v13;
          v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            v69 = *a4;
            v70 = v85;
            v71 = *v85;
            v72 = *(_DWORD *)(v67 + 4 * v68 * v69);
            v73 = *(_DWORD *)(v67 + 4 * v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (v74 = v72 == v73) : (v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            v85 = v70;
            if (v65 == v70)
              return result;
          }
          v76 = v85 - 1;
          do
          {
            v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      v50 = 0;
      v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        v52 = &a10[v50];
        v53 = *v13;
        v54 = v13[1];
        v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          v56 = &a4[-a3];
          v57 = *(v52 - 1);
          v58 = *v56;
          v59 = *(_DWORD *)(v53 + 4 * v54 * v57);
          result = *(unsigned int *)(v53 + 4 * v54 * v58);
          if (v59 >= (int)result)
          {
            v61 = v57 < v58 && v59 == (_DWORD)result;
            v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              v56 = a4;
              --v52;
            }
          }
          else
          {
            v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60)
            return result;
        }
        do
        {
          v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<long long,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v33;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;

  if (a6 >= 2)
  {
    v11 = (int *)a2;
    if (a6 == 2)
    {
      v12 = a4[-a3];
      v13 = *a2;
      v14 = a5[1];
      v15 = *(_QWORD *)(*a5 + 8 * v14 * v12);
      v16 = *(_QWORD *)(*a5 + 8 * v14 * v13);
      if (v15 < v16 || (v12 < v13 ? (v17 = v15 == v16) : (v17 = 0), v17))
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      v18 = result;
      if ((int)a6 > 128)
      {
        v35 = a7;
        v36 = a6 >> 1;
        v37 = a6;
        v52 = a6 - (a6 >> 1);
        v38 = &a2[result * v36];
        if (a6 <= a8)
        {
          v39 = &v35[v36];
          v40 = *a5;
          v41 = a5[1];
          v42 = 4 * v18;
          v43 = v39;
          v44 = &v35[v37];
          while (v43 != v44)
          {
            v45 = *v43;
            v46 = *v35;
            v47 = *(_QWORD *)(v40 + 8 * v41 * v45);
            v48 = *(_QWORD *)(v40 + 8 * v41 * v46);
            if (v47 < v48 || (v45 < v46 ? (v49 = v47 == v48) : (v49 = 0), v49))
            {
              *v11 = v45;
              ++v43;
            }
            else
            {
              *v11 = v46;
              ++v35;
            }
            v11 = (int *)((char *)v11 + v42);
            if (v35 == v39)
            {
              while (v43 != v44)
              {
                v50 = *v43++;
                *v11 = v50;
                v11 = (int *)((char *)v11 + v42);
              }
              return result;
            }
          }
          while (v35 != v39)
          {
            v51 = *v35++;
            *v11 = v51;
            v11 = (int *)((char *)v11 + v42);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v19 = &a2[result];
        if (v19 != a4)
        {
          v20 = 0;
          v21 = *a5;
          v22 = a5[1];
          v23 = 4 * result;
          v24 = a2;
          do
          {
            v25 = v19;
            v26 = *v19;
            v27 = *v24;
            v28 = *(_QWORD *)(v21 + 8 * v22 * v26);
            result = *(_QWORD *)(v21 + 8 * v22 * v27);
            if (v28 < result || (v26 < v27 ? (v29 = v28 == result) : (v29 = 0), v29))
            {
              *v25 = v27;
              if (v24 == a2)
              {
LABEL_30:
                v33 = a2;
              }
              else
              {
                v30 = v20;
                while (1)
                {
                  v31 = *(unsigned int *)((char *)a2 + v30 + -4 * v18);
                  result = *(_QWORD *)(v21 + 8 * v22 * v31);
                  if (v28 >= result && (v26 >= v31 || v28 != result))
                    break;
                  *(unsigned int *)((char *)a2 + v30) = v31;
                  v30 -= v23;
                  if (!v30)
                    goto LABEL_30;
                }
                v33 = (unsigned int *)((char *)a2 + v30);
              }
              *v33 = v26;
            }
            v19 = &v25[v18];
            v20 += v23;
            v24 = v25;
          }
          while (v19 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<long long,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  unsigned int *v7;
  unsigned int *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;

  if (a6)
  {
    v7 = a7;
    v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      v13 = a4[-a3];
      v14 = *a2;
      v15 = a5[1];
      v16 = *(_QWORD *)(*a5 + 8 * v15 * v13);
      v17 = *(_QWORD *)(*a5 + 8 * v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        v9 = &a4[-a3];
      }
      *a7 = v13;
      v7 = a7 + 1;
      goto LABEL_8;
    }
    v18 = result;
    if ((int)a6 > 8)
    {
      v37 = a6 >> 1;
      v38 = &a2[result * v37];
      if (v18 * v37)
      {
        v39 = *a5;
        v40 = a5[1];
        v41 = &v9[v18 * v37];
        while (v41 != a4 || v18 != a3)
        {
          v42 = *v41;
          v43 = *v9;
          v44 = *(_QWORD *)(v39 + 8 * v40 * v42);
          v45 = *(_QWORD *)(v39 + 8 * v40 * v43);
          if (v44 < v45 || (v42 < v43 ? (v46 = v44 == v45) : (v46 = 0), v46))
          {
            *v7 = v42;
            v41 += v18;
          }
          else
          {
            *v7 = v43;
            v9 += v18;
          }
          ++v7;
          if (v9 == v38)
            goto LABEL_47;
        }
        for (; v9 != v38; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        v41 = &v9[v18 * v37];
LABEL_47:
        while (v41 != a4)
        {
          *v7++ = *v41;
          v41 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      v19 = &a2[result];
      if (v19 != a4)
      {
        v20 = 0;
        v21 = *a5;
        v22 = a5[1];
        v23 = a7;
        v24 = a7;
        do
        {
          v26 = *v24++;
          v25 = v26;
          v27 = *v19;
          v28 = *(_QWORD *)(v21 + 8 * v22 * v27);
          v29 = *(_QWORD *)(v21 + 8 * v22 * v26);
          if (v28 < v29 || (v27 < v25 ? (v30 = v28 == v29) : (v30 = 0), v30))
          {
            v23[1] = v25;
            v31 = a7;
            if (v23 != a7)
            {
              v32 = v20;
              do
              {
                v33 = *v19;
                v34 = *(unsigned int *)((char *)a7 + v32 - 4);
                v35 = *(_QWORD *)(v21 + 8 * v22 * v33);
                result = *(_QWORD *)(v21 + 8 * v22 * v34);
                if (v35 >= result && (v33 >= v34 || v35 != result))
                {
                  v31 = (unsigned int *)((char *)a7 + v32);
                  goto LABEL_30;
                }
                *(unsigned int *)((char *)a7 + v32) = v34;
                v32 -= 4;
              }
              while (v32);
              v31 = a7;
            }
LABEL_30:
            *v31 = *v19;
          }
          else
          {
            *v24 = v27;
          }
          v19 += v18;
          v20 += 4;
          v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<long long,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t a1, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, unsigned int a9, unsigned int *a10, uint64_t a11)
{
  uint64_t result;
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  int *v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  int *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  int v75;
  unsigned int *v76;
  int v77;
  int *v78;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  int *v84;
  unsigned int *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int *v89;

  result = a9;
  if (a9)
  {
    v13 = a7;
    v85 = a10;
    while ((int)result > a11 && a8 > a11)
    {
      if (!a8)
        return result;
      v16 = 0;
      v17 = *a4;
      v18 = *v13;
      v19 = v13[1];
      v20 = *(_QWORD *)(*v13 + 8 * v19 * v17);
      v21 = -a8;
      while (1)
      {
        v22 = a2[v16];
        v23 = *(_QWORD *)(v18 + 8 * v19 * v22);
        if (v20 < v23)
          break;
        if (v17 < v22 && v20 == v23)
          break;
        v16 += a1;
        if (__CFADD__(v21++, 1))
          return result;
      }
      v83 = a5;
      v84 = a6;
      v78 = &a2[v16];
      if (-v21 >= (int)result)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0)
          v37 = -v21;
        else
          v37 = 1 - v21;
        v31 = &a2[a1 * ((uint64_t)v37 >> 1) + v16];
        v38 = (a6 - a4) / a5;
        if ((_DWORD)v38)
        {
          v39 = *v31;
          v40 = *(_QWORD *)(v18 + 8 * v19 * v39);
          v27 = a4;
          do
          {
            v41 = v38 >> 1;
            v42 = &v27[a3 * v41];
            v43 = *v42;
            v44 = *(_QWORD *)(v18 + 8 * v19 * v43);
            if (v44 < v40 || (v43 < v39 ? (v45 = v44 == v40) : (v45 = 0), v45))
            {
              v27 = &v42[a3];
              LODWORD(v41) = v38 + ~(_DWORD)v41;
            }
            LODWORD(v38) = v41;
          }
          while ((_DWORD)v41);
        }
        else
        {
          v27 = a4;
        }
        v87 = (v37 >> 1);
        v86 = (v27 - a4) / a3;
      }
      else
      {
        if ((int)result >= 0)
          v26 = result;
        else
          v26 = result + 1;
        v27 = &a4[a3 * ((uint64_t)v26 >> 1)];
        v28 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if ((_DWORD)v28)
        {
          v29 = *v27;
          v30 = *(_QWORD *)(v18 + 8 * v19 * v29);
          v31 = &a2[v16];
          do
          {
            v32 = v28 >> 1;
            v33 = &v31[a1 * v32];
            v34 = *v33;
            v35 = *(_QWORD *)(v18 + 8 * v19 * v34);
            if (v30 >= v35 && (v29 >= v34 || v30 != v35))
            {
              v31 = &v33[a1];
              LODWORD(v32) = v28 + ~(_DWORD)v32;
            }
            LODWORD(v28) = v32;
          }
          while ((_DWORD)v32);
        }
        else
        {
          v31 = &a2[v16];
        }
        v86 = (v26 >> 1);
        v87 = (((char *)v31 - (char *)a2 - v16 * 4) >> 2) / a1;
      }
      v82 = result - v86;
      v46 = result;
      v80 = a3;
      v81 = a1;
      a1 = v88;
      v47 = v89;
      if ((int)v87 + (int)v86 >= v46 - ((int)v87 + (int)v86) - v21)
      {
        v49 = v89;
        v13 = a7;
        v27 = v31;
        a3 = v81;
        v47 = v78;
        v48 = v86;
        a8 = v87;
        a5 = a1;
        a6 = v49;
        a1 = v81;
      }
      else
      {
        v13 = a7;
        a5 = v83;
        a6 = v84;
        a3 = v80;
        a8 = -(int)v87 - v21;
        v48 = v82;
      }
      result = v48;
      a2 = v47;
      a4 = v27;
      if (!(_DWORD)v48)
        return result;
    }
    if (a8 <= (int)result)
    {
      if (a2 != a4)
      {
        v62 = 0;
        v63 = 4 * a1;
        v64 = a2;
        do
        {
          a10[v62++] = *v64;
          v64 = (int *)((char *)v64 + v63);
        }
        while (v64 != a4);
        if (v62 * 4)
        {
          v65 = &a10[v62];
          v66 = (uint64_t)&a10[v62 - 1];
          v67 = *v13;
          v68 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            v69 = *a4;
            v70 = v85;
            v71 = *v85;
            v72 = *(_QWORD *)(v67 + 8 * v68 * v69);
            v73 = *(_QWORD *)(v67 + 8 * v68 * v71);
            if (v72 < v73 || (v69 < v71 ? (v74 = v72 == v73) : (v74 = 0), v74))
            {
              *a2 = v69;
              a4 += a3;
            }
            else
            {
              *a2 = v71;
              v70 = v85 + 1;
            }
            a2 = (int *)((char *)a2 + v63);
            v85 = v70;
            if (v65 == v70)
              return result;
          }
          v76 = v85 - 1;
          do
          {
            v77 = v76[1];
            ++v76;
            *a2 = v77;
            a2 = (int *)((char *)a2 + v63);
          }
          while ((unsigned int *)v66 != v76);
        }
      }
    }
    else if (a4 != a6)
    {
      v50 = 0;
      v51 = a4;
      do
      {
        a10[v50++] = *v51;
        v51 += a3;
      }
      while (v51 != a6);
      if (v50 * 4)
      {
        v52 = &a10[v50];
        v53 = *v13;
        v54 = v13[1];
        v55 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != a1)
        {
          v56 = &a4[-a3];
          v57 = *(v52 - 1);
          v58 = *v56;
          v59 = *(_QWORD *)(v53 + 8 * v54 * v57);
          result = *(_QWORD *)(v53 + 8 * v54 * v58);
          if (v59 >= result)
          {
            v61 = v57 < v58 && v59 == result;
            v60 = a10;
            if (!v61)
            {
              LODWORD(v58) = *(v52 - 1);
              v56 = a4;
              --v52;
            }
          }
          else
          {
            v60 = a10;
          }
          a6 -= a5;
          *a6 = v58;
          a4 = v56;
          if (v52 == v60)
            return result;
        }
        do
        {
          v75 = *--v52;
          a6[v55] = v75;
          v55 -= a5;
        }
        while (v52 != a10);
      }
    }
  }
  return result;
}

unint64_t std::__stable_sort<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<float,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  unsigned int *v32;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  int v48;
  unsigned int v49;
  unsigned int v50;

  if (a6 >= 2)
  {
    v11 = (int *)a2;
    if (a6 == 2)
    {
      v12 = a4[-a3];
      v13 = *a2;
      v14 = a5[1];
      v15 = *(float *)(*a5 + 4 * v14 * v12);
      v16 = *(float *)(*a5 + 4 * v14 * v13);
      if (v15 < v16 || v12 < v13 && v15 == v16)
      {
        *a2 = v12;
        a4[-a3] = v13;
      }
    }
    else
    {
      v17 = result;
      if ((int)a6 > 128)
      {
        v34 = a7;
        v35 = a6 >> 1;
        v36 = a6;
        v50 = a6 - (a6 >> 1);
        v37 = &a2[result * v35];
        if (a6 <= a8)
        {
          v38 = &v34[v35];
          v39 = *a5;
          v40 = a5[1];
          v41 = 4 * v17;
          v42 = v38;
          v43 = &v34[v36];
          while (v42 != v43)
          {
            v44 = *v42;
            v45 = *v34;
            v46 = *(float *)(v39 + 4 * v40 * v44);
            v47 = *(float *)(v39 + 4 * v40 * v45);
            if (v46 < v47 || v44 < v45 && v46 == v47)
            {
              *v11 = v44;
              ++v42;
            }
            else
            {
              *v11 = v45;
              ++v34;
            }
            v11 = (int *)((char *)v11 + v41);
            if (v34 == v38)
            {
              while (v42 != v43)
              {
                v48 = *v42++;
                *v11 = v48;
                v11 = (int *)((char *)v11 + v41);
              }
              return result;
            }
          }
          while (v34 != v38)
          {
            v49 = *v34++;
            *v11 = v49;
            v11 = (int *)((char *)v11 + v41);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v18 = &a2[result];
        if (v18 != a4)
        {
          v19 = 0;
          v20 = *a5;
          v21 = a5[1];
          v22 = 4 * result;
          v23 = a2;
          do
          {
            v24 = v23;
            v23 = v18;
            v25 = *v18;
            v26 = *v24;
            v27 = *(float *)(v20 + 4 * v21 * v25);
            v28 = *(float *)(v20 + 4 * v21 * v26);
            if (v27 < v28 || v25 < v26 && v27 == v28)
            {
              *v23 = v26;
              if (v24 == a2)
              {
LABEL_21:
                v32 = a2;
              }
              else
              {
                v29 = v19;
                while (1)
                {
                  v30 = *(unsigned int *)((char *)a2 + v29 + -4 * result);
                  v31 = *(float *)(v20 + 4 * v21 * v30);
                  if (v27 >= v31 && (v25 >= v30 || v27 != v31))
                    break;
                  *(unsigned int *)((char *)a2 + v29) = v30;
                  v29 -= v22;
                  if (!v29)
                    goto LABEL_21;
                }
                v32 = (unsigned int *)((char *)a2 + v29);
              }
              *v32 = v25;
            }
            v18 = &v23[result];
            v19 += v22;
          }
          while (v18 != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<float,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t *a5, unsigned int a6, unsigned int *a7)
{
  unsigned int *v7;
  unsigned int *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  float v28;
  float v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;

  if (a6)
  {
    v7 = a7;
    v9 = a2;
    if (a6 == 1)
    {
LABEL_8:
      *v7 = *v9;
      return result;
    }
    if (a6 == 2)
    {
      v13 = a4[-a3];
      v14 = *a2;
      v15 = a5[1];
      v16 = *(float *)(*a5 + 4 * v15 * v13);
      v17 = *(float *)(*a5 + 4 * v15 * v14);
      if (v16 >= v17 && (v13 >= v14 || v16 != v17))
      {
        LODWORD(v13) = *a2;
        v9 = &a4[-a3];
      }
      *a7 = v13;
      v7 = a7 + 1;
      goto LABEL_8;
    }
    v18 = result;
    if ((int)a6 > 8)
    {
      v36 = a6 >> 1;
      v37 = &a2[result * v36];
      if (v18 * v36)
      {
        v38 = *a5;
        v39 = a5[1];
        v40 = &v9[v18 * v36];
        while (v40 != a4 || v18 != a3)
        {
          v41 = *v40;
          v42 = *v9;
          v43 = *(float *)(v38 + 4 * v39 * v41);
          v44 = *(float *)(v38 + 4 * v39 * v42);
          if (v43 < v44 || v41 < v42 && v43 == v44)
          {
            *v7 = v41;
            v40 += v18;
          }
          else
          {
            *v7 = v42;
            v9 += v18;
          }
          ++v7;
          if (v9 == v37)
            goto LABEL_41;
        }
        for (; v9 != v37; v9 += v18)
          *v7++ = *v9;
      }
      else
      {
        v40 = &v9[v18 * v36];
LABEL_41:
        while (v40 != a4)
        {
          *v7++ = *v40;
          v40 += v18;
        }
      }
    }
    else if (a2 != a4)
    {
      *a7 = *a2;
      v19 = &a2[result];
      if (v19 != a4)
      {
        v20 = 0;
        v21 = *a5;
        v22 = a5[1];
        v23 = a7;
        v24 = a7;
        do
        {
          v26 = *v24++;
          v25 = v26;
          v27 = *v19;
          v28 = *(float *)(v21 + 4 * v22 * v27);
          v29 = *(float *)(v21 + 4 * v22 * v26);
          if (v28 < v29 || v27 < v25 && v28 == v29)
          {
            v23[1] = v25;
            v30 = a7;
            if (v23 != a7)
            {
              v31 = v20;
              while (1)
              {
                v32 = *v19;
                v33 = *(unsigned int *)((char *)a7 + v31 - 4);
                v34 = *(float *)(v21 + 4 * v22 * v32);
                v35 = *(float *)(v21 + 4 * v22 * v33);
                if (v34 >= v35 && (v32 >= v33 || v34 != v35))
                  break;
                *(unsigned int *)((char *)a7 + v31) = v33;
                v31 -= 4;
                if (!v31)
                {
                  v30 = a7;
                  goto LABEL_26;
                }
              }
              v30 = (unsigned int *)((char *)a7 + v31);
            }
LABEL_26:
            *v30 = *v19;
          }
          else
          {
            *v24 = v27;
          }
          v19 += result;
          v20 += 4;
          v23 = v24;
        }
        while (v19 != a4);
      }
    }
  }
  return result;
}

unint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argsort<float,unsigned int>(mlx::core::array const&,mlx::core::array&,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(unint64_t result, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, uint64_t *a7, int a8, int a9, unsigned int *a10, uint64_t a11)
{
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int v21;
  uint64_t v22;
  float v23;
  int v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  int *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  float v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  float v42;
  int v43;
  int *v44;
  unint64_t v45;
  int v46;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  float v71;
  float v72;
  int v73;
  unsigned int *v74;
  int v75;
  int *v76;
  unint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  int *v82;
  unsigned int *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int *v87;

  v11 = a9;
  if (a9)
  {
    LODWORD(v12) = a8;
    v13 = a7;
    v83 = a10;
    while (v11 > a11 && (int)v12 > a11)
    {
      if (!(_DWORD)v12)
        return result;
      v16 = 0;
      v17 = *a4;
      v18 = *v13;
      v19 = v13[1];
      v20 = *(float *)(*v13 + 4 * v19 * v17);
      v21 = -(int)v12;
      while (1)
      {
        v22 = a2[v16];
        v23 = *(float *)(v18 + 4 * v19 * v22);
        if (v20 < v23 || v17 < v22 && v20 == v23)
          break;
        v16 += result;
        if (__CFADD__(v21++, 1))
          return result;
      }
      v81 = a5;
      v82 = a6;
      v76 = &a2[v16];
      if (-v21 >= v11)
      {
        if (v21 == -1)
        {
          a2[v16] = v17;
          *a4 = v22;
          return result;
        }
        if (v21 <= 0)
          v35 = -v21;
        else
          v35 = 1 - v21;
        v30 = &a2[result * ((uint64_t)v35 >> 1) + v16];
        v36 = (a6 - a4) / a5;
        if ((_DWORD)v36)
        {
          v37 = *v30;
          v38 = *(float *)(v18 + 4 * v19 * v37);
          v26 = a4;
          do
          {
            v39 = v36 >> 1;
            v40 = &v26[a3 * v39];
            v41 = *v40;
            v42 = *(float *)(v18 + 4 * v19 * v41);
            if (v42 < v38 || v41 < v37 && v42 == v38)
            {
              v26 = &v40[a3];
              LODWORD(v39) = v36 + ~(_DWORD)v39;
            }
            LODWORD(v36) = v39;
          }
          while ((_DWORD)v39);
        }
        else
        {
          v26 = a4;
        }
        v85 = (v35 >> 1);
        v84 = (v26 - a4) / a3;
      }
      else
      {
        if (v11 >= 0)
          v25 = v11;
        else
          v25 = v11 + 1;
        v26 = &a4[a3 * ((uint64_t)v25 >> 1)];
        v27 = (((char *)a4 - (char *)a2 - v16 * 4) >> 2) / a3;
        if ((_DWORD)v27)
        {
          v28 = *v26;
          v29 = *(float *)(v18 + 4 * v19 * v28);
          v30 = &a2[v16];
          do
          {
            v31 = v27 >> 1;
            v32 = &v30[result * v31];
            v33 = *v32;
            v34 = *(float *)(v18 + 4 * v19 * v33);
            if (v29 >= v34 && (v28 >= v33 || v29 != v34))
            {
              v30 = &v32[result];
              LODWORD(v31) = v27 + ~(_DWORD)v31;
            }
            LODWORD(v27) = v31;
          }
          while ((_DWORD)v31);
        }
        else
        {
          v30 = &a2[v16];
        }
        LODWORD(v84) = v25 >> 1;
        v85 = (((char *)v30 - (char *)a2 - v16 * 4) >> 2) / result;
      }
      v12 = -(v85 + v21);
      v80 = v11 - v84;
      v78 = a3;
      v79 = result;
      v43 = v11;
      v44 = v87;
      if ((int)v85 + (int)v84 >= v43 - ((int)v85 + (int)v84) - v21)
      {
        v47 = v87;
        v13 = a7;
        v48 = v86;
        v26 = v30;
        result = v79;
        a3 = v79;
        v44 = v76;
        v46 = v84;
        LODWORD(v12) = v85;
        a5 = v48;
        a6 = v47;
      }
      else
      {
        v45 = v86;
        v13 = a7;
        result = v45;
        a5 = v81;
        a6 = v82;
        a3 = v78;
        v46 = v80;
      }
      v11 = v46;
      a2 = v44;
      a4 = v26;
      if (!v46)
        return result;
    }
    if ((int)v12 <= v11)
    {
      if (a2 != a4)
      {
        v61 = 0;
        v62 = 4 * result;
        v63 = a2;
        do
        {
          a10[v61++] = *v63;
          v63 = (int *)((char *)v63 + v62);
        }
        while (v63 != a4);
        if (v61 * 4)
        {
          v64 = &a10[v61];
          v65 = (uint64_t)&a10[v61 - 1];
          v66 = *v13;
          v67 = v13[1];
          while (a4 != a6 || a3 != a5)
          {
            v68 = *a4;
            v69 = v83;
            v70 = *v83;
            v71 = *(float *)(v66 + 4 * v67 * v68);
            v72 = *(float *)(v66 + 4 * v67 * v70);
            if (v71 < v72 || v68 < v70 && v71 == v72)
            {
              *a2 = v68;
              a4 += a3;
            }
            else
            {
              *a2 = v70;
              v69 = v83 + 1;
            }
            a2 = (int *)((char *)a2 + v62);
            v83 = v69;
            if (v64 == v69)
              return result;
          }
          v74 = v83 - 1;
          do
          {
            v75 = v74[1];
            ++v74;
            *a2 = v75;
            a2 = (int *)((char *)a2 + v62);
          }
          while ((unsigned int *)v65 != v74);
        }
      }
    }
    else if (a4 != a6)
    {
      v49 = 0;
      v50 = a4;
      do
      {
        a10[v49++] = *v50;
        v50 += a3;
      }
      while (v50 != a6);
      if (v49 * 4)
      {
        v51 = &a10[v49];
        v52 = *v13;
        v53 = v13[1];
        v54 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != result)
        {
          v55 = &a4[-a3];
          v56 = *(v51 - 1);
          v57 = *v55;
          v58 = *(float *)(v52 + 4 * v53 * v56);
          v59 = *(float *)(v52 + 4 * v53 * v57);
          if (v58 >= v59)
          {
            v60 = a10;
            if (v56 >= v57 || v58 != v59)
            {
              LODWORD(v57) = *(v51 - 1);
              v55 = a4;
              --v51;
            }
          }
          else
          {
            v60 = a10;
          }
          a6 -= a5;
          *a6 = v57;
          a4 = v55;
          if (v51 == v60)
            return result;
        }
        do
        {
          v73 = *--v51;
          a6[v54] = v73;
          v54 -= a5;
        }
        while (v51 != a10);
      }
    }
  }
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<BOOL>(uint64_t __sz)
{
  size_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (__sz < 1)
    return 0;
  v1 = __sz;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<BOOL,int>>(uint64_t result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unsigned int a5, unsigned __int8 *a6, uint64_t a7)
{
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;

  if (a5 >= 2)
  {
    v9 = a2;
    if (a5 == 2)
    {
      v10 = a4[-a3];
      v11 = *a2;
      if (v10 < v11)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      v12 = result;
      if ((int)a5 > 128)
      {
        v23 = a6;
        v24 = a5 >> 1;
        v25 = a5;
        v26 = a5 - (a5 >> 1);
        v27 = &a2[result * v24];
        if (a5 <= a7)
        {
          v28 = &v23[v24];
          v29 = &v23[v25];
          v30 = &v23[v24];
          while (v30 != v29)
          {
            v31 = *v30;
            v32 = *v23;
            v33 = v31 >= v32;
            if (v31 < v32)
              v34 = 0;
            else
              v34 = *v23;
            if (v33)
              ++v23;
            if (!v33)
              ++v30;
            *v9 = v34;
            v9 += v12;
            if (v23 == v28)
            {
              while (v30 != v29)
              {
                v35 = *v30++;
                *v9 = v35;
                v9 += v12;
              }
              return result;
            }
          }
          while (v23 != v28)
          {
            v36 = *v23++;
            *v9 = v36;
            v9 += v12;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v13 = &a2[result];
        if (&a2[result] != a4)
        {
          v14 = 0;
          v15 = &a2[-result];
          v16 = a2;
          do
          {
            v17 = *v16;
            v16 = v13;
            v18 = *v13;
            if (v18 < v17)
            {
              v19 = 0;
              while (1)
              {
                v16[v19] = 1;
                if (v14 == v19)
                  break;
                v20 = v15[v19];
                v19 -= result;
                if (v18 >= v20)
                {
                  v21 = &v16[v19];
                  goto LABEL_17;
                }
              }
              v21 = a2;
LABEL_17:
              *v21 = v18;
            }
            v13 = &v16[result];
            v15 += result;
            v14 -= result;
          }
          while (&v16[result] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<BOOL,int>>(uint64_t result, _BYTE *a2, uint64_t a3, _BYTE *a4, unsigned int a5, _BYTE *a6)
{
  _BYTE *v6;
  _BYTE *v8;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  if (a5)
  {
    v6 = a6;
    v8 = a2;
    if (a5 == 1)
    {
LABEL_9:
      *v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      v11 = a4[-a3];
      v12 = *a2;
      v13 = v11 >= v12;
      if (v11 >= v12)
        LOBYTE(v11) = *a2;
      *a6 = v11;
      v6 = a6 + 1;
      if (v13)
        v8 = &a4[-a3];
      goto LABEL_9;
    }
    v14 = result;
    if ((int)a5 > 8)
    {
      v25 = a5 >> 1;
      v26 = &a2[result * v25];
      if (v14 * v25)
      {
        v27 = &v8[v14 * v25];
        while (v27 != a4 || v14 != a3)
        {
          v28 = *v27;
          v29 = *v8;
          v30 = v28 >= v29;
          if (v28 >= v29)
            v31 = *v8;
          else
            v31 = 0;
          if (v30)
            v32 = 0;
          else
            v32 = v14;
          v27 += v32;
          if (v30)
            v33 = v14;
          else
            v33 = 0;
          v8 += v33;
          *v6++ = v31;
          if (v8 == v26)
            goto LABEL_45;
        }
        while (v8 != v26)
        {
          *v6++ = *v8;
          v8 += v14;
        }
      }
      else
      {
        v27 = &v8[v14 * v25];
LABEL_45:
        while (v27 != a4)
        {
          *v6++ = *v27;
          v27 += v14;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      v15 = &a2[result];
      if (&a2[result] != a4)
      {
        v16 = 0;
        v17 = a6;
        v18 = a6;
        do
        {
          v20 = *v18++;
          v19 = v20;
          v21 = *v15;
          if (v21 >= v20)
          {
            *v18 = v21;
          }
          else
          {
            v17[1] = v19;
            v22 = a6;
            if (v17 != a6)
            {
              v23 = v16;
              while (1)
              {
                v22 = &a6[v23];
                v24 = a6[v23 - 1];
                if (*v15 >= v24)
                  break;
                *v22 = v24;
                if (!--v23)
                {
                  v22 = a6;
                  break;
                }
              }
            }
            *v22 = *v15;
          }
          v15 += result;
          ++v16;
          v17 = v18;
        }
        while (v15 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<BOOL,int>>(uint64_t result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned __int8 *a6, int a7, int a8, unsigned __int8 *a9, uint64_t a10)
{
  unint64_t v12;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unsigned __int8 v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  uint64_t v61;
  int v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 *v66;
  unint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  BOOL v75;
  unsigned __int8 v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned __int8 v84;
  unint64_t v85;
  unsigned __int8 *v86;
  unsigned __int8 v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;

  if (!a8)
    return result;
  v12 = result;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7)
      return result;
    v16 = 0;
    v17 = *a4;
    v18 = -a7;
    while (1)
    {
      v19 = a2[v16];
      if (v17 < v19)
        break;
      v16 += v12;
      v75 = __CFADD__(v18++, 1);
      if (v75)
        return result;
    }
    v20 = &a2[v16];
    if (-v18 >= a8)
    {
      if (v18 == -1)
      {
        a2[v16] = v17;
        *a4 = v19;
        return result;
      }
      if (v18 <= 0)
        v29 = -v18;
      else
        v29 = 1 - v18;
      v24 = &a2[v12 * ((uint64_t)v29 >> 1) + v16];
      v30 = (a6 - a4) / a5;
      if ((_DWORD)v30)
      {
        v22 = a4;
        do
        {
          v31 = v30 >> 1;
          v32 = &v22[a3 * v31];
          v33 = *v32;
          v34 = &v32[a3];
          LODWORD(v30) = v30 + ~(v30 >> 1);
          if (v33 < *v24)
            v22 = v34;
          else
            LODWORD(v30) = v31;
        }
        while ((_DWORD)v30);
      }
      else
      {
        v22 = a4;
      }
      v36 = (v29 >> 1);
      v35 = (v22 - a4) / a3;
    }
    else
    {
      if (a8 >= 0)
        v21 = a8;
      else
        v21 = a8 + 1;
      v22 = &a4[a3 * ((uint64_t)v21 >> 1)];
      v23 = (a4 - a2 - v16) / a3;
      if ((_DWORD)v23)
      {
        v24 = &a2[v16];
        do
        {
          v25 = v23 >> 1;
          v26 = &v24[v12 * v25];
          v27 = *v26;
          v28 = &v26[v12];
          LODWORD(v23) = v23 + ~(v23 >> 1);
          if (*v22 < v27)
            LODWORD(v23) = v25;
          else
            v24 = v28;
        }
        while ((_DWORD)v23);
      }
      else
      {
        v24 = &a2[v16];
      }
      v35 = (v21 >> 1);
      v36 = (v24 - a2 - v16) / v12;
    }
    if (v24 != a4 || (v37 = v22, v38 = v12, v12 != a3))
    {
      v37 = v24;
      v38 = v12;
      if (a4 != v22)
      {
        if (&v24[v12] == a4 && v12 == a3)
        {
          v39 = 0;
          v40 = *v24;
          do
          {
            v24[v39] = a4[v39];
            v39 += v12;
          }
          while (&a4[v39] != v22);
          a4 = &v24[v39];
          v24[v39] = v40;
          v38 = v12;
        }
        else
        {
          if (&a4[a3] == v22)
          {
            v59 = &v22[-a3];
            v60 = v22[-a3];
            if (&v22[-a3] == v24)
            {
              a4 = v22;
            }
            else
            {
              v61 = 0;
              do
              {
                v59[v61] = v22[v61 + -2 * a3];
                v61 -= a3;
              }
              while (&v59[v61] != v24);
              a4 = &v22[v61];
            }
            *v24 = v60;
          }
          else
          {
            v41 = (v22 - a4) / a3;
            v42 = v41;
            v43 = (a4 - v24) / a3;
            v44 = v43;
            if ((_DWORD)v43 != (_DWORD)v41)
            {
              do
              {
                v49 = v44;
                v44 = v42;
                v42 = v49 % v42;
              }
              while (v42);
              v50 = v36;
              v51 = v12 * v44;
              if (v51)
              {
                v52 = &v24[v51];
                v53 = (int)v43 * v12;
                do
                {
                  v52 -= v12;
                  v54 = *v52;
                  v55 = &v52[v53];
                  v56 = v52;
                  do
                  {
                    v57 = v55;
                    *v56 = *v55;
                    v58 = (v22 - v55) / a3;
                    if ((int)v43 >= (int)v58)
                      v55 = &v24[((int)v43 - (int)v58) * v12];
                    else
                      v55 = &v57[v53];
                    v56 = v57;
                  }
                  while (v55 != v52);
                  *v57 = v54;
                }
                while (v52 != v24);
              }
              a4 = &v24[(int)v41 * v12];
              v38 = v12;
              v36 = v50;
              goto LABEL_74;
            }
            if (v24 != a4)
            {
              v45 = v24;
              v46 = a4;
              do
              {
                v47 = *v45;
                *v45 = *v46;
                *v46 = v47;
                v45 += v12;
                v46 += a3;
              }
              while (v45 != a4 && v46 != v22);
            }
          }
          v38 = a3;
        }
LABEL_74:
        v37 = a4;
      }
    }
    a7 = -(v36 + v18);
    v62 = a8 - v35;
    v90 = a10;
    v88 = a10;
    if ((int)v36 + (int)v35 >= a8 - ((int)v36 + (int)v35) - v18)
    {
      v89 = v37;
      v63 = a9;
      v62 = v35;
      a7 = v36;
      a3 = v12;
      v22 = v24;
      v37 = v20;
      a5 = v38;
      a6 = v89;
    }
    else
    {
      v63 = a9;
      v64 = v12;
      v65 = v12;
      v66 = v24;
      v67 = a5;
      v68 = a6;
      a5 = v67;
      a6 = v68;
      v12 = v38;
    }
    a8 = v62;
    a2 = v37;
    a4 = v22;
    a9 = v63;
    a10 = v90;
    if (!v62)
      return result;
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      v77 = 0;
      v78 = a2;
      do
      {
        a9[v77] = *v78;
        v78 += v12;
        ++v77;
      }
      while (v78 != a4);
      if (v77)
      {
        v79 = &a9[v77];
        v80 = (uint64_t)&a9[v77 - 1];
        while (a4 != a6 || a3 != a5)
        {
          v81 = *a4;
          v82 = *a9;
          v83 = v81 >= v82;
          if (v81 < v82)
            v84 = 0;
          else
            v84 = *a9;
          if (v83)
            ++a9;
          if (v83)
            v85 = 0;
          else
            v85 = a3;
          a4 += v85;
          *a2 = v84;
          a2 += v12;
          if (v79 == a9)
            return result;
        }
        v86 = a9 - 1;
        do
        {
          v87 = *++v86;
          *a2 = v87;
          a2 += v12;
        }
        while ((unsigned __int8 *)v80 != v86);
      }
    }
  }
  else if (a4 != a6)
  {
    v69 = 0;
    v70 = a4;
    do
    {
      a9[v69] = *v70;
      v70 += a3;
      ++v69;
    }
    while (v70 != a6);
    if (v69)
    {
      v71 = &a9[v69];
      v72 = -(uint64_t)a5;
      while (a4 != a2 || a3 != v12)
      {
        v73 = *(v71 - 1);
        v74 = a4[-a3];
        a6 -= a5;
        v75 = v73 >= v74;
        if (v73 <= v74)
          LOBYTE(v73) = a4[-a3];
        if (v75)
          --v71;
        else
          a4 -= a3;
        *a6 = v73;
        if (v71 == a9)
          return result;
      }
      do
      {
        v76 = *--v71;
        a6[v72] = v76;
        v72 -= a5;
      }
      while (v71 != a9);
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<unsigned char,int>>(uint64_t result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unsigned int a5, unsigned __int8 *a6, uint64_t a7)
{
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;

  if (a5 >= 2)
  {
    v9 = a2;
    if (a5 == 2)
    {
      v10 = a4[-a3];
      v11 = *a2;
      if (v10 < v11)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      v12 = result;
      if ((int)a5 > 128)
      {
        v22 = a6;
        v23 = a5 >> 1;
        v24 = a5;
        v25 = a5 - (a5 >> 1);
        v26 = &a2[result * v23];
        if (a5 <= a7)
        {
          v27 = &v22[v23];
          v28 = &v22[v24];
          v29 = &v22[v23];
          while (v29 != v28)
          {
            v30 = *v29;
            if (v30 < *v22)
              ++v29;
            else
              LOBYTE(v30) = *v22++;
            *v9 = v30;
            v9 += v12;
            if (v22 == v27)
            {
              while (v29 != v28)
              {
                v31 = *v29++;
                *v9 = v31;
                v9 += v12;
              }
              return result;
            }
          }
          while (v22 != v27)
          {
            v32 = *v22++;
            *v9 = v32;
            v9 += v12;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v13 = &a2[result];
        if (&a2[result] != a4)
        {
          v14 = 0;
          v15 = &a2[-result];
          v16 = a2;
          do
          {
            v17 = *v16;
            v16 = v13;
            v18 = *v13;
            if (v18 < v17)
            {
              v19 = 0;
              while (1)
              {
                v16[v19] = v17;
                if (v14 == v19)
                  break;
                v17 = v15[v19];
                v19 -= result;
                if (v18 >= v17)
                {
                  v20 = &v16[v19];
                  goto LABEL_17;
                }
              }
              v20 = a2;
LABEL_17:
              *v20 = v18;
            }
            v13 = &v16[result];
            v15 += result;
            v14 -= result;
          }
          while (&v16[result] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<unsigned char,int>>(uint64_t result, _BYTE *a2, uint64_t a3, _BYTE *a4, unsigned int a5, _BYTE *a6)
{
  _BYTE *v6;
  _BYTE *v8;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;

  if (a5)
  {
    v6 = a6;
    v8 = a2;
    if (a5 == 1)
    {
LABEL_9:
      *v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      v11 = a4[-a3];
      v12 = *a2;
      v13 = v11 >= v12;
      if (v11 >= v12)
        LOBYTE(v11) = *a2;
      *a6 = v11;
      v6 = a6 + 1;
      if (v13)
        v8 = &a4[-a3];
      goto LABEL_9;
    }
    v14 = result;
    if ((int)a5 > 8)
    {
      v25 = a5 >> 1;
      v26 = &a2[result * v25];
      if (v14 * v25)
      {
        v27 = &v8[v14 * v25];
        while (v27 != a4 || v14 != a3)
        {
          v28 = *v27;
          v29 = *v8;
          v30 = v28 >= v29;
          if (v28 < v29)
          {
            v31 = v14;
          }
          else
          {
            LOBYTE(v28) = *v8;
            v31 = 0;
          }
          v27 += v31;
          if (v30)
            v32 = v14;
          else
            v32 = 0;
          v8 += v32;
          *v6++ = v28;
          if (v8 == v26)
            goto LABEL_42;
        }
        while (v8 != v26)
        {
          *v6++ = *v8;
          v8 += v14;
        }
      }
      else
      {
        v27 = &v8[v14 * v25];
LABEL_42:
        while (v27 != a4)
        {
          *v6++ = *v27;
          v27 += v14;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      v15 = &a2[result];
      if (&a2[result] != a4)
      {
        v16 = 0;
        v17 = a6;
        v18 = a6;
        do
        {
          v20 = *v18++;
          v19 = v20;
          v21 = *v15;
          if (v21 >= v20)
          {
            *v18 = v21;
          }
          else
          {
            v17[1] = v19;
            v22 = a6;
            if (v17 != a6)
            {
              v23 = v16;
              while (1)
              {
                v22 = &a6[v23];
                v24 = a6[v23 - 1];
                if (*v15 >= v24)
                  break;
                *v22 = v24;
                if (!--v23)
                {
                  v22 = a6;
                  break;
                }
              }
            }
            *v22 = *v15;
          }
          v15 += result;
          ++v16;
          v17 = v18;
        }
        while (v15 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<unsigned char,int>>(uint64_t result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned __int8 *a6, int a7, int a8, unsigned __int8 *a9, uint64_t a10)
{
  unint64_t v12;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unsigned __int8 v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  uint64_t v61;
  int v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 *v66;
  unint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  BOOL v75;
  unsigned __int8 v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  unsigned __int8 *v83;
  unsigned __int8 v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;

  if (!a8)
    return result;
  v12 = result;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7)
      return result;
    v16 = 0;
    v17 = *a4;
    v18 = -a7;
    while (1)
    {
      v19 = a2[v16];
      if (v17 < v19)
        break;
      v16 += v12;
      v75 = __CFADD__(v18++, 1);
      if (v75)
        return result;
    }
    v20 = &a2[v16];
    if (-v18 >= a8)
    {
      if (v18 == -1)
      {
        a2[v16] = v17;
        *a4 = v19;
        return result;
      }
      if (v18 <= 0)
        v29 = -v18;
      else
        v29 = 1 - v18;
      v24 = &a2[v12 * ((uint64_t)v29 >> 1) + v16];
      v30 = (a6 - a4) / a5;
      if ((_DWORD)v30)
      {
        v22 = a4;
        do
        {
          v31 = v30 >> 1;
          v32 = &v22[a3 * v31];
          v33 = *v32;
          v34 = &v32[a3];
          LODWORD(v30) = v30 + ~(v30 >> 1);
          if (v33 < *v24)
            v22 = v34;
          else
            LODWORD(v30) = v31;
        }
        while ((_DWORD)v30);
      }
      else
      {
        v22 = a4;
      }
      v36 = (v29 >> 1);
      v35 = (v22 - a4) / a3;
    }
    else
    {
      if (a8 >= 0)
        v21 = a8;
      else
        v21 = a8 + 1;
      v22 = &a4[a3 * ((uint64_t)v21 >> 1)];
      v23 = (a4 - a2 - v16) / a3;
      if ((_DWORD)v23)
      {
        v24 = &a2[v16];
        do
        {
          v25 = v23 >> 1;
          v26 = &v24[v12 * v25];
          v27 = *v26;
          v28 = &v26[v12];
          LODWORD(v23) = v23 + ~(v23 >> 1);
          if (*v22 < v27)
            LODWORD(v23) = v25;
          else
            v24 = v28;
        }
        while ((_DWORD)v23);
      }
      else
      {
        v24 = &a2[v16];
      }
      v35 = (v21 >> 1);
      v36 = (v24 - a2 - v16) / v12;
    }
    if (v24 != a4 || (v37 = v22, v38 = v12, v12 != a3))
    {
      v37 = v24;
      v38 = v12;
      if (a4 != v22)
      {
        if (&v24[v12] == a4 && v12 == a3)
        {
          v39 = 0;
          v40 = *v24;
          do
          {
            v24[v39] = a4[v39];
            v39 += v12;
          }
          while (&a4[v39] != v22);
          a4 = &v24[v39];
          v24[v39] = v40;
          v38 = v12;
        }
        else
        {
          if (&a4[a3] == v22)
          {
            v59 = &v22[-a3];
            v60 = v22[-a3];
            if (&v22[-a3] == v24)
            {
              a4 = v22;
            }
            else
            {
              v61 = 0;
              do
              {
                v59[v61] = v22[v61 + -2 * a3];
                v61 -= a3;
              }
              while (&v59[v61] != v24);
              a4 = &v22[v61];
            }
            *v24 = v60;
          }
          else
          {
            v41 = (v22 - a4) / a3;
            v42 = v41;
            v43 = (a4 - v24) / a3;
            v44 = v43;
            if ((_DWORD)v43 != (_DWORD)v41)
            {
              do
              {
                v49 = v44;
                v44 = v42;
                v42 = v49 % v42;
              }
              while (v42);
              v50 = v36;
              v51 = v12 * v44;
              if (v51)
              {
                v52 = &v24[v51];
                v53 = (int)v43 * v12;
                do
                {
                  v52 -= v12;
                  v54 = *v52;
                  v55 = &v52[v53];
                  v56 = v52;
                  do
                  {
                    v57 = v55;
                    *v56 = *v55;
                    v58 = (v22 - v55) / a3;
                    if ((int)v43 >= (int)v58)
                      v55 = &v24[((int)v43 - (int)v58) * v12];
                    else
                      v55 = &v57[v53];
                    v56 = v57;
                  }
                  while (v55 != v52);
                  *v57 = v54;
                }
                while (v52 != v24);
              }
              a4 = &v24[(int)v41 * v12];
              v38 = v12;
              v36 = v50;
              goto LABEL_74;
            }
            if (v24 != a4)
            {
              v45 = v24;
              v46 = a4;
              do
              {
                v47 = *v45;
                *v45 = *v46;
                *v46 = v47;
                v45 += v12;
                v46 += a3;
              }
              while (v45 != a4 && v46 != v22);
            }
          }
          v38 = a3;
        }
LABEL_74:
        v37 = a4;
      }
    }
    a7 = -(v36 + v18);
    v62 = a8 - v35;
    v87 = a10;
    v85 = a10;
    if ((int)v36 + (int)v35 >= a8 - ((int)v36 + (int)v35) - v18)
    {
      v86 = v37;
      v63 = a9;
      v62 = v35;
      a7 = v36;
      a3 = v12;
      v22 = v24;
      v37 = v20;
      a5 = v38;
      a6 = v86;
    }
    else
    {
      v63 = a9;
      v64 = v12;
      v65 = v12;
      v66 = v24;
      v67 = a5;
      v68 = a6;
      a5 = v67;
      a6 = v68;
      v12 = v38;
    }
    a8 = v62;
    a2 = v37;
    a4 = v22;
    a9 = v63;
    a10 = v87;
    if (!v62)
      return result;
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      v77 = 0;
      v78 = a2;
      do
      {
        a9[v77] = *v78;
        v78 += v12;
        ++v77;
      }
      while (v78 != a4);
      if (v77)
      {
        v79 = &a9[v77];
        v80 = (uint64_t)&a9[v77 - 1];
        while (a4 != a6 || a3 != a5)
        {
          v81 = *a4;
          if (v81 < *a9)
          {
            v82 = a3;
          }
          else
          {
            LOBYTE(v81) = *a9++;
            v82 = 0;
          }
          a4 += v82;
          *a2 = v81;
          a2 += v12;
          if (v79 == a9)
            return result;
        }
        v83 = a9 - 1;
        do
        {
          v84 = *++v83;
          *a2 = v84;
          a2 += v12;
        }
        while ((unsigned __int8 *)v80 != v83);
      }
    }
  }
  else if (a4 != a6)
  {
    v69 = 0;
    v70 = a4;
    do
    {
      a9[v69] = *v70;
      v70 += a3;
      ++v69;
    }
    while (v70 != a6);
    if (v69)
    {
      v71 = &a9[v69];
      v72 = -(uint64_t)a5;
      while (a4 != a2 || a3 != v12)
      {
        v73 = *(v71 - 1);
        v74 = a4[-a3];
        a6 -= a5;
        v75 = v73 >= v74;
        if (v73 <= v74)
          LOBYTE(v73) = a4[-a3];
        if (v75)
          --v71;
        else
          a4 -= a3;
        *a6 = v73;
        if (v71 == a9)
          return result;
      }
      do
      {
        v76 = *--v71;
        a6[v72] = v76;
        v72 -= a5;
      }
      while (v71 != a9);
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, unint64_t a3, unsigned int *a4, unsigned int a5, unsigned int *a6, uint64_t a7)
{
  int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  int *v30;
  int *v31;
  int v32;
  _BOOL4 v33;
  int v34;
  int v35;

  if (a5 >= 2)
  {
    v9 = (int *)a2;
    if (a5 == 2)
    {
      v10 = a4[-a3];
      v11 = *a2;
      if (v10 < *a2)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      v12 = result;
      if ((int)a5 > 128)
      {
        v23 = (int *)a6;
        v24 = a5 >> 1;
        v25 = a5;
        v26 = a5 - (a5 >> 1);
        v27 = &a2[result * v24];
        if (a5 <= a7)
        {
          v28 = (unsigned int *)&v23[v24];
          v29 = 4 * v12;
          v30 = (int *)v28;
          v31 = &v23[v25];
          while (v30 != v31)
          {
            v32 = *v30;
            v33 = *v30 < *v23;
            if (*v30 >= *v23)
              v32 = *v23;
            v23 += *v30 >= *v23;
            v30 += v33;
            *v9 = v32;
            v9 = (int *)((char *)v9 + v29);
            if (v23 == (int *)v28)
            {
              while (v30 != v31)
              {
                v34 = *v30++;
                *v9 = v34;
                v9 = (int *)((char *)v9 + v29);
              }
              return result;
            }
          }
          while (v23 != (int *)v28)
          {
            v35 = *v23++;
            *v9 = v35;
            v9 = (int *)((char *)v9 + v29);
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v13 = &a2[result];
        if (v13 != a4)
        {
          v14 = 0;
          v15 = 4 * result;
          v16 = a2;
          v17 = &a2[-result];
          do
          {
            v18 = *v16;
            v16 = v13;
            v19 = *v13;
            if (v19 < v18)
            {
              v20 = 0;
              while (1)
              {
                *(unsigned int *)((char *)v16 + v20) = v18;
                if (v14 == v20)
                  break;
                v18 = *(unsigned int *)((char *)v17 + v20);
                v20 -= v15;
                if (v19 >= v18)
                {
                  v21 = (unsigned int *)((char *)v16 + v20);
                  goto LABEL_17;
                }
              }
              v21 = a2;
LABEL_17:
              *v21 = v19;
            }
            v13 = &v16[(unint64_t)v15 / 4];
            v17 = (unsigned int *)((char *)v17 + v15);
            v14 -= v15;
          }
          while (&v16[(unint64_t)v15 / 4] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, unsigned int *a2, uint64_t a3, unsigned int *a4, unsigned int a5, unsigned int *a6)
{
  int *v6;
  unsigned int *v8;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  int *v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  if (a5)
  {
    v6 = (int *)a6;
    v8 = a2;
    if (a5 == 1)
    {
LABEL_9:
      *v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      v11 = a4[-a3];
      v12 = v11 >= *a2;
      if (v11 >= *a2)
        v11 = *a2;
      *a6 = v11;
      v6 = (int *)(a6 + 1);
      if (v12)
        v8 = &a4[-a3];
      goto LABEL_9;
    }
    v13 = result;
    if ((int)a5 > 8)
    {
      v23 = a5 >> 1;
      v24 = &a2[result * v23];
      if (v13 * v23)
      {
        v25 = (int *)&v8[v13 * v23];
        while (v25 != (int *)a4 || v13 != a3)
        {
          v26 = *v25;
          v27 = *v25 >= *v8;
          if (*v25 < *v8)
          {
            v28 = v13;
          }
          else
          {
            v26 = *v8;
            v28 = 0;
          }
          v25 += v28;
          if (v27)
            v29 = v13;
          else
            v29 = 0;
          v8 += v29;
          *v6++ = v26;
          if (v8 == v24)
            goto LABEL_38;
        }
        for (; v8 != v24; v8 += v13)
          *v6++ = *v8;
      }
      else
      {
        v25 = (int *)&v8[v13 * v23];
LABEL_38:
        while (v25 != (int *)a4)
        {
          *v6++ = *v25;
          v25 += v13;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      v14 = &a2[result];
      if (v14 != a4)
      {
        v15 = 0;
        v16 = a6;
        v17 = a6;
        do
        {
          v19 = *v17++;
          v18 = v19;
          if (*v14 >= v19)
          {
            *v17 = *v14;
          }
          else
          {
            v16[1] = v18;
            v20 = a6;
            if (v16 != a6)
            {
              v21 = v15;
              while (1)
              {
                v20 = (unsigned int *)((char *)a6 + v21);
                v22 = *(unsigned int *)((char *)a6 + v21 - 4);
                if (*v14 >= v22)
                  break;
                *v20 = v22;
                v21 -= 4;
                if (!v21)
                {
                  v20 = a6;
                  break;
                }
              }
            }
            *v20 = *v14;
          }
          v14 += result;
          v15 += 4;
          v16 = v17;
        }
        while (v14 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t result, int *a2, unint64_t a3, int *a4, unint64_t a5, int *a6, int a7, int a8, int *a9, uint64_t a10)
{
  int v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int *v21;
  int v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  unsigned int v27;
  int *v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  unsigned int v34;
  int *v35;
  int *v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int *v40;
  unint64_t v41;
  uint64_t v42;
  int *v43;
  int *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int *v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  unint64_t v56;
  int v57;
  int *v58;
  int v59;
  int *v60;
  unint64_t v61;
  unint64_t v62;
  int *v63;
  unint64_t v64;
  uint64_t v65;
  int *v66;
  unint64_t v67;
  int *v68;

  if (a8)
  {
    v10 = a8;
    LODWORD(v11) = a7;
    v13 = result;
    while (v10 > a10 && (int)v11 > a10)
    {
      if (!(_DWORD)v11)
        return result;
      v17 = 0;
      v18 = *a4;
      v19 = -(int)v11;
      while (1)
      {
        v20 = a2[v17];
        if (v18 < v20)
          break;
        v17 += v13;
        v48 = __CFADD__(v19++, 1);
        if (v48)
          return result;
      }
      v21 = &a2[v17];
      v62 = a5;
      v63 = a6;
      v65 = a10;
      v66 = a9;
      v60 = &a2[v17];
      if (-v19 >= v10)
      {
        if (v19 == -1)
        {
          a2[v17] = v18;
          *a4 = v20;
          return result;
        }
        if (v19 <= 0)
          v30 = -v19;
        else
          v30 = 1 - v19;
        v21 = &a2[v13 * ((uint64_t)v30 >> 1) + v17];
        v31 = (a6 - a4) / a5;
        if ((_DWORD)v31)
        {
          v23 = a4;
          do
          {
            v32 = v31 >> 1;
            v33 = &v23[a3 * v32];
            v34 = *v33;
            v35 = &v33[a3];
            LODWORD(v31) = v31 + ~(v31 >> 1);
            if (v34 < *v21)
              v23 = v35;
            else
              LODWORD(v31) = v32;
          }
          while ((_DWORD)v31);
        }
        else
        {
          v23 = a4;
        }
        v29 = (v30 >> 1);
        v64 = (v23 - a4) / a3;
      }
      else
      {
        if (v10 >= 0)
          v22 = v10;
        else
          v22 = v10 + 1;
        v23 = &a4[a3 * ((uint64_t)v22 >> 1)];
        v24 = (((char *)a4 - (char *)a2 - v17 * 4) >> 2) / a3;
        while ((_DWORD)v24)
        {
          v25 = v24 >> 1;
          v26 = &v21[v13 * v25];
          v27 = *v26;
          v28 = &v26[v13];
          LODWORD(v24) = v24 + ~(v24 >> 1);
          if (*v23 < v27)
            LODWORD(v24) = v25;
          else
            v21 = v28;
        }
        v64 = (v22 >> 1);
        v29 = (((char *)v21 - (char *)a2 - v17 * 4) >> 2) / v13;
      }
      v11 = -(v29 + v19);
      v61 = a3;
      if ((int)v29 + (int)v64 >= v10 - ((int)v29 + (int)v64) - v19)
      {
        v40 = v68;
        v41 = v67;
        v23 = v21;
        a3 = v13;
        a2 = v60;
        v39 = v64;
        LODWORD(v11) = v29;
        a5 = v41;
        a6 = v40;
      }
      else
      {
        v36 = &a2[v17];
        v37 = v13;
        v38 = v13;
        v13 = v67;
        a2 = v68;
        a5 = v62;
        a6 = v63;
        a3 = v61;
        v39 = v10 - v64;
      }
      v10 = v39;
      a4 = v23;
      a10 = v65;
      a9 = v66;
      if (!v39)
        return result;
    }
    if ((int)v11 <= v10)
    {
      if (a2 != a4)
      {
        v49 = 0;
        v50 = 4 * v13;
        v51 = a2;
        do
        {
          a9[v49++] = *v51;
          v51 = (int *)((char *)v51 + v50);
        }
        while (v51 != a4);
        if (v49 * 4)
        {
          v52 = &a9[v49];
          v53 = (uint64_t)&a9[v49 - 1];
          while (a4 != a6 || a3 != a5)
          {
            v54 = *a4;
            v55 = *a4 >= *a9;
            if (*a4 >= *a9)
              v54 = *a9;
            a9 += *a4 >= *a9;
            if (v55)
              v56 = 0;
            else
              v56 = a3;
            a4 += v56;
            *a2 = v54;
            a2 = (int *)((char *)a2 + v50);
            if (v52 == a9)
              return result;
          }
          v58 = a9 - 1;
          do
          {
            v59 = v58[1];
            ++v58;
            *a2 = v59;
            a2 = (int *)((char *)a2 + v50);
          }
          while ((int *)v53 != v58);
        }
      }
    }
    else if (a4 != a6)
    {
      v42 = 0;
      v43 = a4;
      do
      {
        a9[v42++] = *v43;
        v43 += a3;
      }
      while (v43 != a6);
      if (v42 * 4)
      {
        v44 = &a9[v42];
        v45 = 0x3FFFFFFFFFFFFFFFLL * a5;
        while (a4 != a2 || a3 != v13)
        {
          v46 = *(v44 - 1);
          v47 = a4[-a3];
          a6 -= a5;
          v48 = v46 >= v47;
          if (v46 <= v47)
            v46 = a4[-a3];
          if (v48)
            --v44;
          else
            a4 -= a3;
          *a6 = v46;
          if (v44 == a9)
            return result;
        }
        do
        {
          v57 = *--v44;
          a6[v45] = v57;
          v45 -= a5;
        }
        while (v44 != a9);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<signed char,int>>(uint64_t result, char *a2, unint64_t a3, char *a4, unsigned int a5, char *a6, uint64_t a7)
{
  char *v9;
  int v10;
  int v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  char v31;
  char v32;

  if (a5 >= 2)
  {
    v9 = a2;
    if (a5 == 2)
    {
      v10 = a4[-a3];
      v11 = *a2;
      if (v10 < v11)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      v12 = result;
      if ((int)a5 > 128)
      {
        v22 = a6;
        v23 = a5 >> 1;
        v24 = a5;
        v25 = a5 - (a5 >> 1);
        v26 = &a2[result * v23];
        if (a5 <= a7)
        {
          v27 = &v22[v23];
          v28 = &v22[v24];
          v29 = &v22[v23];
          while (v29 != v28)
          {
            v30 = *v29;
            if (v30 < *v22)
              ++v29;
            else
              LOBYTE(v30) = *v22++;
            *v9 = v30;
            v9 += v12;
            if (v22 == v27)
            {
              while (v29 != v28)
              {
                v31 = *v29++;
                *v9 = v31;
                v9 += v12;
              }
              return result;
            }
          }
          while (v22 != v27)
          {
            v32 = *v22++;
            *v9 = v32;
            v9 += v12;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v13 = &a2[result];
        if (&a2[result] != a4)
        {
          v14 = 0;
          v15 = &a2[-result];
          v16 = a2;
          do
          {
            v17 = *v16;
            v16 = v13;
            v18 = *v13;
            if (v18 < v17)
            {
              v19 = 0;
              while (1)
              {
                v16[v19] = v17;
                if (v14 == v19)
                  break;
                v17 = v15[v19];
                v19 -= result;
                if (v18 >= v17)
                {
                  v20 = &v16[v19];
                  goto LABEL_17;
                }
              }
              v20 = a2;
LABEL_17:
              *v20 = v18;
            }
            v13 = &v16[result];
            v15 += result;
            v14 -= result;
          }
          while (&v16[result] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<signed char,int>>(uint64_t result, _BYTE *a2, uint64_t a3, _BYTE *a4, unsigned int a5, _BYTE *a6)
{
  _BYTE *v6;
  _BYTE *v8;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  int v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;

  if (a5)
  {
    v6 = a6;
    v8 = a2;
    if (a5 == 1)
    {
LABEL_8:
      *v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      v11 = (char)a4[-a3];
      v12 = (char)*a2;
      v13 = v11 < v12;
      if (v11 >= v12)
        LOBYTE(v11) = *a2;
      *a6 = v11;
      v6 = a6 + 1;
      if (!v13)
        v8 = &a4[-a3];
      goto LABEL_8;
    }
    v14 = result;
    if ((int)a5 > 8)
    {
      v25 = a5 >> 1;
      v26 = &a2[result * v25];
      if (v14 * v25)
      {
        v27 = &v8[v14 * v25];
        while (v27 != a4 || v14 != a3)
        {
          v28 = (char)*v27;
          v29 = (char)*v8;
          v30 = v28 < v29;
          if (v28 < v29)
          {
            v31 = v14;
          }
          else
          {
            LOBYTE(v28) = *v8;
            v31 = 0;
          }
          v27 += v31;
          if (v30)
            v32 = 0;
          else
            v32 = v14;
          v8 += v32;
          *v6++ = v28;
          if (v8 == v26)
            goto LABEL_41;
        }
        while (v8 != v26)
        {
          *v6++ = *v8;
          v8 += v14;
        }
      }
      else
      {
        v27 = &v8[v14 * v25];
LABEL_41:
        while (v27 != a4)
        {
          *v6++ = *v27;
          v27 += v14;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      v15 = &a2[result];
      if (&a2[result] != a4)
      {
        v16 = 0;
        v17 = a6;
        v18 = a6;
        do
        {
          v20 = (char)*v18++;
          v19 = v20;
          v21 = (char)*v15;
          if (v21 >= v20)
          {
            *v18 = v21;
          }
          else
          {
            v17[1] = v19;
            v22 = a6;
            if (v17 != a6)
            {
              v23 = v16;
              while (1)
              {
                v22 = &a6[v23];
                v24 = (char)a6[v23 - 1];
                if ((char)*v15 >= v24)
                  break;
                *v22 = v24;
                if (!--v23)
                {
                  v22 = a6;
                  break;
                }
              }
            }
            *v22 = *v15;
          }
          v15 += result;
          ++v16;
          v17 = v18;
        }
        while (v15 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<signed char,int>>(uint64_t result, char *a2, unint64_t a3, char *a4, unint64_t a5, char *a6, int a7, int a8, char *a9, uint64_t a10)
{
  unint64_t v12;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  char *v21;
  int v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  char *v46;
  char *v47;
  char v48;
  int v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char v61;
  uint64_t v62;
  int v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  int v75;
  BOOL v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  char *v84;
  char v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  if (!a8)
    return result;
  v12 = result;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7)
      return result;
    v16 = 0;
    v17 = *a4;
    v18 = -a7;
    while (1)
    {
      v19 = a2[v16];
      if (v17 < v19)
        break;
      v16 += v12;
      if (__CFADD__(v18++, 1))
        return result;
    }
    v21 = &a2[v16];
    if (-v18 >= a8)
    {
      if (v18 == -1)
      {
        a2[v16] = v17;
        *a4 = v19;
        return result;
      }
      if (v18 <= 0)
        v30 = -v18;
      else
        v30 = 1 - v18;
      v25 = &a2[v12 * ((uint64_t)v30 >> 1) + v16];
      v31 = (a6 - a4) / a5;
      if ((_DWORD)v31)
      {
        v23 = a4;
        do
        {
          v32 = v31 >> 1;
          v33 = &v23[a3 * v32];
          v34 = *v33;
          v35 = &v33[a3];
          LODWORD(v31) = v31 + ~(v31 >> 1);
          if (v34 < *v25)
            v23 = v35;
          else
            LODWORD(v31) = v32;
        }
        while ((_DWORD)v31);
      }
      else
      {
        v23 = a4;
      }
      v37 = (v30 >> 1);
      v36 = (v23 - a4) / a3;
    }
    else
    {
      if (a8 >= 0)
        v22 = a8;
      else
        v22 = a8 + 1;
      v23 = &a4[a3 * ((uint64_t)v22 >> 1)];
      v24 = (a4 - a2 - v16) / a3;
      if ((_DWORD)v24)
      {
        v25 = &a2[v16];
        do
        {
          v26 = v24 >> 1;
          v27 = &v25[v12 * v26];
          v28 = *v27;
          v29 = &v27[v12];
          LODWORD(v24) = v24 + ~(v24 >> 1);
          if (*v23 < v28)
            LODWORD(v24) = v26;
          else
            v25 = v29;
        }
        while ((_DWORD)v24);
      }
      else
      {
        v25 = &a2[v16];
      }
      v36 = (v22 >> 1);
      v37 = (v25 - a2 - v16) / v12;
    }
    if (v25 != a4 || (v38 = v23, v39 = v12, v12 != a3))
    {
      v38 = v25;
      v39 = v12;
      if (a4 != v23)
      {
        if (&v25[v12] == a4 && v12 == a3)
        {
          v40 = 0;
          v41 = *v25;
          do
          {
            v25[v40] = a4[v40];
            v40 += v12;
          }
          while (&a4[v40] != v23);
          a4 = &v25[v40];
          v25[v40] = v41;
          v39 = v12;
        }
        else
        {
          if (&a4[a3] == v23)
          {
            v60 = &v23[-a3];
            v61 = v23[-a3];
            if (&v23[-a3] == v25)
            {
              a4 = v23;
            }
            else
            {
              v62 = 0;
              do
              {
                v60[v62] = v23[v62 + -2 * a3];
                v62 -= a3;
              }
              while (&v60[v62] != v25);
              a4 = &v23[v62];
            }
            *v25 = v61;
          }
          else
          {
            v42 = (v23 - a4) / a3;
            v43 = v42;
            v44 = (a4 - v25) / a3;
            v45 = v44;
            if ((_DWORD)v44 != (_DWORD)v42)
            {
              do
              {
                v50 = v45;
                v45 = v43;
                v43 = v50 % v43;
              }
              while (v43);
              v51 = v37;
              v52 = v12 * v45;
              if (v52)
              {
                v53 = &v25[v52];
                v54 = (int)v44 * v12;
                do
                {
                  v53 -= v12;
                  v55 = *v53;
                  v56 = &v53[v54];
                  v57 = v53;
                  do
                  {
                    v58 = v56;
                    *v57 = *v56;
                    v59 = (v23 - v56) / a3;
                    if ((int)v44 >= (int)v59)
                      v56 = &v25[((int)v44 - (int)v59) * v12];
                    else
                      v56 = &v58[v54];
                    v57 = v58;
                  }
                  while (v56 != v53);
                  *v58 = v55;
                }
                while (v53 != v25);
              }
              a4 = &v25[(int)v42 * v12];
              v39 = v12;
              v37 = v51;
              goto LABEL_74;
            }
            if (v25 != a4)
            {
              v46 = v25;
              v47 = a4;
              do
              {
                v48 = *v46;
                *v46 = *v47;
                *v47 = v48;
                v46 += v12;
                v47 += a3;
              }
              while (v46 != a4 && v47 != v23);
            }
          }
          v39 = a3;
        }
LABEL_74:
        v38 = a4;
      }
    }
    a7 = -(v37 + v18);
    v63 = a8 - v36;
    v88 = a10;
    v86 = a10;
    if ((int)v37 + (int)v36 >= a8 - ((int)v37 + (int)v36) - v18)
    {
      v87 = v38;
      v64 = a9;
      v63 = v36;
      a7 = v37;
      a3 = v12;
      v23 = v25;
      v38 = v21;
      a5 = v39;
      a6 = v87;
    }
    else
    {
      v64 = a9;
      v65 = v12;
      v66 = v12;
      v67 = v25;
      v68 = a5;
      v69 = a6;
      a5 = v68;
      a6 = v69;
      v12 = v39;
    }
    a8 = v63;
    a2 = v38;
    a4 = v23;
    a9 = v64;
    a10 = v88;
    if (!v63)
      return result;
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      v78 = 0;
      v79 = a2;
      do
      {
        a9[v78] = *v79;
        v79 += v12;
        ++v78;
      }
      while (v79 != a4);
      if (v78)
      {
        v80 = &a9[v78];
        v81 = (uint64_t)&a9[v78 - 1];
        while (a4 != a6 || a3 != a5)
        {
          v82 = *a4;
          if (v82 < *a9)
          {
            v83 = a3;
          }
          else
          {
            LOBYTE(v82) = *a9++;
            v83 = 0;
          }
          a4 += v83;
          *a2 = v82;
          a2 += v12;
          if (v80 == a9)
            return result;
        }
        v84 = a9 - 1;
        do
        {
          v85 = *++v84;
          *a2 = v85;
          a2 += v12;
        }
        while ((char *)v81 != v84);
      }
    }
  }
  else if (a4 != a6)
  {
    v70 = 0;
    v71 = a4;
    do
    {
      a9[v70] = *v71;
      v71 += a3;
      ++v70;
    }
    while (v71 != a6);
    if (v70)
    {
      v72 = &a9[v70];
      v73 = -(uint64_t)a5;
      while (a4 != a2 || a3 != v12)
      {
        v74 = *(v72 - 1);
        v75 = a4[-a3];
        a6 -= a5;
        v76 = v74 < v75;
        if (v74 <= v75)
          LOBYTE(v74) = a4[-a3];
        if (v76)
          a4 -= a3;
        else
          --v72;
        *a6 = v74;
        if (v72 == a9)
          return result;
      }
      do
      {
        v77 = *--v72;
        a6[v73] = v77;
        v73 -= a5;
      }
      while (v72 != a9);
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<int,int>>(uint64_t result, int *a2, unint64_t a3, int *a4, unsigned int a5, int *a6, uint64_t a7)
{
  char *v9;
  int v10;
  int v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int *v31;
  int v32;
  _BOOL4 v33;
  int v34;
  int v35;

  if (a5 >= 2)
  {
    v9 = (char *)a2;
    if (a5 == 2)
    {
      v10 = a4[-a3];
      v11 = *a2;
      if (v10 < *a2)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      v12 = result;
      if ((int)a5 > 128)
      {
        v23 = a6;
        v24 = a5 >> 1;
        v25 = a5;
        v26 = a5 - (a5 >> 1);
        v27 = &a2[result * v24];
        if (a5 <= a7)
        {
          v28 = &v23[v24];
          v29 = 4 * v12;
          v30 = v28;
          v31 = &v23[v25];
          while (v30 != v31)
          {
            v32 = *v30;
            v33 = *v30 < *v23;
            if (*v30 >= *v23)
              v32 = *v23;
            v23 += *v30 >= *v23;
            v30 += v33;
            *(_DWORD *)v9 = v32;
            v9 += v29;
            if (v23 == v28)
            {
              while (v30 != v31)
              {
                v34 = *v30++;
                *(_DWORD *)v9 = v34;
                v9 += v29;
              }
              return result;
            }
          }
          while (v23 != v28)
          {
            v35 = *v23++;
            *(_DWORD *)v9 = v35;
            v9 += v29;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v13 = &a2[result];
        if (v13 != a4)
        {
          v14 = 0;
          v15 = 4 * result;
          v16 = a2;
          v17 = &a2[-result];
          do
          {
            v18 = *v16;
            v16 = v13;
            v19 = *v13;
            if (v19 < v18)
            {
              v20 = 0;
              while (1)
              {
                *(int *)((char *)v16 + v20) = v18;
                if (v14 == v20)
                  break;
                v18 = *(int *)((char *)v17 + v20);
                v20 -= v15;
                if (v19 >= v18)
                {
                  v21 = (int *)((char *)v16 + v20);
                  goto LABEL_17;
                }
              }
              v21 = a2;
LABEL_17:
              *v21 = v19;
            }
            v13 = &v16[(unint64_t)v15 / 4];
            v17 = (int *)((char *)v17 + v15);
            v14 -= v15;
          }
          while (&v16[(unint64_t)v15 / 4] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<int,int>>(uint64_t result, int *a2, uint64_t a3, int *a4, unsigned int a5, int *a6)
{
  int *v6;
  int *v8;
  int v11;
  BOOL v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  if (a5)
  {
    v6 = a6;
    v8 = a2;
    if (a5 == 1)
    {
LABEL_8:
      *v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      v11 = a4[-a3];
      v12 = v11 < *a2;
      if (v11 >= *a2)
        v11 = *a2;
      *a6 = v11;
      v6 = a6 + 1;
      if (!v12)
        v8 = &a4[-a3];
      goto LABEL_8;
    }
    v13 = result;
    if ((int)a5 > 8)
    {
      v23 = a5 >> 1;
      v24 = &a2[result * v23];
      if (v13 * v23)
      {
        v25 = &v8[v13 * v23];
        while (v25 != a4 || v13 != a3)
        {
          v26 = *v25;
          v27 = *v25 < *v8;
          if (*v25 < *v8)
          {
            v28 = v13;
          }
          else
          {
            v26 = *v8;
            v28 = 0;
          }
          v25 += v28;
          if (v27)
            v29 = 0;
          else
            v29 = v13;
          v8 += v29;
          *v6++ = v26;
          if (v8 == v24)
            goto LABEL_37;
        }
        for (; v8 != v24; v8 += v13)
          *v6++ = *v8;
      }
      else
      {
        v25 = &v8[v13 * v23];
LABEL_37:
        while (v25 != a4)
        {
          *v6++ = *v25;
          v25 += v13;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      v14 = &a2[result];
      if (v14 != a4)
      {
        v15 = 0;
        v16 = a6;
        v17 = a6;
        do
        {
          v19 = *v17++;
          v18 = v19;
          if (*v14 >= v19)
          {
            *v17 = *v14;
          }
          else
          {
            v16[1] = v18;
            v20 = a6;
            if (v16 != a6)
            {
              v21 = v15;
              while (1)
              {
                v20 = (int *)((char *)a6 + v21);
                v22 = *(int *)((char *)a6 + v21 - 4);
                if (*v14 >= v22)
                  break;
                *v20 = v22;
                v21 -= 4;
                if (!v21)
                {
                  v20 = a6;
                  break;
                }
              }
            }
            *v20 = *v14;
          }
          v14 += result;
          v15 += 4;
          v16 = v17;
        }
        while (v14 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<int,int>>(uint64_t result, char *a2, unint64_t a3, char *a4, unint64_t a5, char *a6, int a7, int a8, _DWORD *a9, uint64_t a10)
{
  unint64_t v13;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v23;
  int v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int v30;
  char *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  char *v48;
  int *v49;
  int v50;
  int v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  int v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  unint64_t v86;
  int v87;
  _DWORD *v88;
  int v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;

  if (!a8)
    return result;
  v13 = result;
  result = 0xFFFFFFFFLL;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7)
      return result;
    v17 = 0;
    v18 = *(_DWORD *)a4;
    v19 = -a7;
    v20 = 4 * v13;
    while (1)
    {
      v21 = *(_DWORD *)&a2[v17];
      if (v18 < v21)
        break;
      v17 += v20;
      if (__CFADD__(v19++, 1))
        return result;
    }
    v23 = &a2[v17];
    if (-v19 >= a8)
    {
      if (v19 == -1)
      {
        *(_DWORD *)&a2[v17] = v18;
        *(_DWORD *)a4 = v21;
        return result;
      }
      if (v19 <= 0)
        v32 = -v19;
      else
        v32 = 1 - v19;
      v27 = &a2[4 * v13 * ((uint64_t)v32 >> 1) + v17];
      v33 = ((a6 - a4) >> 2) / a5;
      if ((_DWORD)v33)
      {
        v25 = a4;
        do
        {
          v34 = v33 >> 1;
          v35 = &v25[4 * a3 * v34];
          v36 = *(_DWORD *)v35;
          v37 = &v35[4 * a3];
          LODWORD(v33) = v33 + ~(v33 >> 1);
          if (v36 < *(_DWORD *)v27)
            v25 = v37;
          else
            LODWORD(v33) = v34;
        }
        while ((_DWORD)v33);
      }
      else
      {
        v25 = a4;
      }
      v39 = (v32 >> 1);
      v38 = ((v25 - a4) >> 2) / a3;
    }
    else
    {
      if (a8 >= 0)
        v24 = a8;
      else
        v24 = a8 + 1;
      v25 = &a4[4 * a3 * ((uint64_t)v24 >> 1)];
      v26 = ((a4 - a2 - v17) >> 2) / a3;
      if ((_DWORD)v26)
      {
        v27 = &a2[v17];
        do
        {
          v28 = v26 >> 1;
          v29 = &v27[4 * v13 * v28];
          v30 = *(_DWORD *)v29;
          v31 = &v29[4 * v13];
          LODWORD(v26) = v26 + ~(v26 >> 1);
          if (*(_DWORD *)v25 < v30)
            LODWORD(v26) = v28;
          else
            v27 = v31;
        }
        while ((_DWORD)v26);
      }
      else
      {
        v27 = &a2[v17];
      }
      v38 = (v24 >> 1);
      v39 = ((v27 - a2 - v17) >> 2) / v13;
    }
    if (v27 != a4 || (v40 = v25, v41 = v13, v13 != a3))
    {
      v40 = v27;
      v41 = v13;
      if (a4 != v25)
      {
        if (&v27[4 * v13] == a4 && v13 == a3)
        {
          v42 = 0;
          v43 = *(_DWORD *)v27;
          do
          {
            *(_DWORD *)&v27[v42] = *(_DWORD *)&a4[v42];
            v42 += v20;
          }
          while (&a4[v42] != v25);
          a4 = &v27[v42];
          *(_DWORD *)&v27[v42] = v43;
          v41 = v13;
        }
        else
        {
          if (&a4[4 * a3] == v25)
          {
            v62 = &v25[-4 * a3];
            v63 = *(_DWORD *)v62;
            if (v62 == v27)
            {
              a4 = v25;
            }
            else
            {
              v64 = 0;
              do
              {
                *(_DWORD *)&v62[v64] = *(_DWORD *)&v25[v64 + -8 * a3];
                v64 -= 4 * a3;
              }
              while (&v62[v64] != v27);
              a4 = &v25[v64];
            }
            *(_DWORD *)v27 = v63;
          }
          else
          {
            v44 = ((v25 - a4) >> 2) / a3;
            v45 = v44;
            v46 = ((a4 - v27) >> 2) / a3;
            v47 = v46;
            if ((_DWORD)v46 != (_DWORD)v44)
            {
              do
              {
                v52 = v47;
                v47 = v45;
                v45 = v52 % v45;
              }
              while (v45);
              v53 = v39;
              v54 = v13 * v47;
              if (v54)
              {
                v55 = &v27[4 * v54];
                v56 = (int)v46 * v13;
                do
                {
                  v55 -= 4 * v13;
                  v57 = *(_DWORD *)v55;
                  v58 = &v55[4 * v56];
                  v59 = v55;
                  do
                  {
                    v60 = v58;
                    *(_DWORD *)v59 = *(_DWORD *)v58;
                    v61 = ((v25 - v58) >> 2) / a3;
                    if ((int)v46 >= (int)v61)
                      v58 = &v27[4 * ((int)v46 - (int)v61) * v13];
                    else
                      v58 = &v60[4 * v56];
                    v59 = v60;
                  }
                  while (v58 != v55);
                  *(_DWORD *)v60 = v57;
                }
                while (v55 != v27);
              }
              a4 = &v27[4 * (int)v44 * v13];
              v41 = v13;
              v39 = v53;
              goto LABEL_74;
            }
            if (v27 != a4)
            {
              v48 = a4;
              v49 = (int *)v27;
              do
              {
                v50 = *v49;
                *v49 = *(_DWORD *)v48;
                *(_DWORD *)v48 = v50;
                v49 = (int *)((char *)v49 + v20);
                v48 += 4 * a3;
              }
              while (v49 != (int *)a4 && v48 != v25);
            }
          }
          v41 = a3;
        }
LABEL_74:
        v40 = a4;
      }
    }
    a7 = -(v39 + v19);
    v65 = a8 - v38;
    v92 = a10;
    v90 = a10;
    if ((int)v39 + (int)v38 >= a8 - ((int)v39 + (int)v38) - v19)
    {
      v91 = v40;
      v66 = a9;
      v65 = v38;
      a7 = v39;
      a3 = v13;
      v25 = v27;
      v40 = v23;
      a5 = v41;
      a6 = v91;
    }
    else
    {
      v66 = a9;
      v67 = v13;
      v68 = v13;
      v69 = v27;
      v70 = a6;
      v71 = a5;
      a5 = v71;
      a6 = v70;
      v13 = v41;
    }
    a8 = v65;
    a2 = v40;
    a4 = v25;
    a9 = v66;
    a10 = v92;
    result = 0xFFFFFFFFLL;
    if (!v65)
      return result;
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      v79 = 0;
      v80 = 4 * v13;
      v81 = a2;
      do
      {
        a9[v79++] = *v81;
        v81 = (_DWORD *)((char *)v81 + v80);
      }
      while (v81 != (_DWORD *)a4);
      if (v79 * 4)
      {
        v82 = &a9[v79];
        v83 = (uint64_t)&a9[v79 - 1];
        while (a4 != a6 || a3 != a5)
        {
          v84 = *(_DWORD *)a4;
          v85 = *(_DWORD *)a4 < *a9;
          if (*(_DWORD *)a4 >= *a9)
            v84 = *a9;
          a9 += *(_DWORD *)a4 >= *a9;
          if (v85)
            v86 = a3;
          else
            v86 = 0;
          a4 += 4 * v86;
          *(_DWORD *)a2 = v84;
          a2 += v80;
          if (v82 == a9)
            return result;
        }
        v88 = a9 - 1;
        do
        {
          v89 = v88[1];
          ++v88;
          *(_DWORD *)a2 = v89;
          a2 += v80;
        }
        while ((_DWORD *)v83 != v88);
      }
    }
  }
  else if (a4 != a6)
  {
    v72 = 0;
    v73 = a4;
    do
    {
      a9[v72++] = *(_DWORD *)v73;
      v73 += 4 * a3;
    }
    while (v73 != a6);
    if (v72 * 4)
    {
      v74 = &a9[v72];
      v75 = -4 * a5;
      while (a4 != a2 || a3 != v13)
      {
        v76 = *(v74 - 1);
        v77 = *(_DWORD *)&a4[-4 * a3];
        a6 -= 4 * a5;
        v78 = v76 < v77;
        if (v76 <= v77)
          v76 = *(_DWORD *)&a4[-4 * a3];
        if (v78)
          a4 -= 4 * a3;
        else
          --v74;
        *(_DWORD *)a6 = v76;
        if (v74 == a9)
          return result;
      }
      do
      {
        v87 = *--v74;
        *(_DWORD *)&a6[v75] = v87;
        v75 -= 4 * a5;
      }
      while (v74 != a9);
    }
  }
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<long long>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<long long,int>>(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;

  if (a5 >= 2)
  {
    v9 = (char *)a2;
    if (a5 == 2)
    {
      v10 = a4[-a3];
      v11 = *a2;
      if (v10 < *a2)
      {
        *a2 = v10;
        a4[-a3] = v11;
      }
    }
    else
    {
      v12 = result;
      if ((int)a5 > 128)
      {
        v23 = a6;
        v24 = a5 >> 1;
        v25 = a5;
        v26 = a5 - (a5 >> 1);
        v27 = &a2[result * v24];
        if (a5 <= a7)
        {
          v28 = &v23[v24];
          v29 = 8 * v12;
          v30 = v28;
          v31 = &v23[v25];
          while (v30 != v31)
          {
            v32 = *v30;
            v33 = *v30 < *v23;
            if (*v30 >= *v23)
              v32 = *v23;
            v23 += *v30 >= *v23;
            v30 += v33;
            *(_QWORD *)v9 = v32;
            v9 += v29;
            if (v23 == v28)
            {
              while (v30 != v31)
              {
                v34 = *v30++;
                *(_QWORD *)v9 = v34;
                v9 += v29;
              }
              return result;
            }
          }
          while (v23 != v28)
          {
            v35 = *v23++;
            *(_QWORD *)v9 = v35;
            v9 += v29;
          }
        }
        else
        {
        }
      }
      else if (a2 != a4 || result != a3)
      {
        v13 = &a2[result];
        if (v13 != a4)
        {
          v14 = 0;
          v15 = 8 * result;
          v16 = a2;
          v17 = &a2[-result];
          do
          {
            v18 = *v16;
            v16 = v13;
            v19 = *v13;
            if (v19 < v18)
            {
              v20 = 0;
              while (1)
              {
                *(uint64_t *)((char *)v16 + v20) = v18;
                if (v14 == v20)
                  break;
                v18 = *(uint64_t *)((char *)v17 + v20);
                v20 -= v15;
                if (v19 >= v18)
                {
                  v21 = (uint64_t *)((char *)v16 + v20);
                  goto LABEL_17;
                }
              }
              v21 = a2;
LABEL_17:
              *v21 = v19;
            }
            v13 = &v16[(unint64_t)v15 / 8];
            v17 = (uint64_t *)((char *)v17 + v15);
            v14 -= v15;
          }
          while (&v16[(unint64_t)v15 / 8] != a4);
        }
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<long long,int>>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t *a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  if (a5)
  {
    v6 = a6;
    v8 = a2;
    if (a5 == 1)
    {
LABEL_8:
      *v6 = *v8;
      return result;
    }
    if (a5 == 2)
    {
      v11 = &a4[-a3];
      v12 = *v11;
      v13 = *v11 < *a2;
      if (*v11 >= *a2)
        v12 = *a2;
      *a6 = v12;
      v6 = a6 + 1;
      if (!v13)
        v8 = &a4[-a3];
      goto LABEL_8;
    }
    v14 = result;
    if ((int)a5 > 8)
    {
      v24 = a5 >> 1;
      v25 = &a2[result * v24];
      if (v14 * v24)
      {
        v26 = &v8[v14 * v24];
        while (v26 != a4 || v14 != a3)
        {
          v27 = *v26;
          v28 = *v26 < *v8;
          if (*v26 < *v8)
          {
            v29 = v14;
          }
          else
          {
            v27 = *v8;
            v29 = 0;
          }
          v26 += v29;
          if (v28)
            v30 = 0;
          else
            v30 = v14;
          v8 += v30;
          *v6++ = v27;
          if (v8 == v25)
            goto LABEL_37;
        }
        for (; v8 != v25; v8 += v14)
          *v6++ = *v8;
      }
      else
      {
        v26 = &v8[v14 * v24];
LABEL_37:
        while (v26 != a4)
        {
          *v6++ = *v26;
          v26 += v14;
        }
      }
    }
    else if (a2 != a4)
    {
      *a6 = *a2;
      v15 = &a2[result];
      if (v15 != a4)
      {
        v16 = 0;
        v17 = a6;
        v18 = a6;
        do
        {
          v20 = *v18++;
          v19 = v20;
          if (*v15 >= v20)
          {
            *v18 = *v15;
          }
          else
          {
            v17[1] = v19;
            v21 = a6;
            if (v17 != a6)
            {
              v22 = v16;
              while (1)
              {
                v21 = (uint64_t *)((char *)a6 + v22);
                v23 = *(uint64_t *)((char *)a6 + v22 - 8);
                if (*v15 >= v23)
                  break;
                *v21 = v23;
                v22 -= 8;
                if (!v22)
                {
                  v21 = a6;
                  break;
                }
              }
            }
            *v21 = *v15;
          }
          v15 += result;
          v16 += 8;
          v17 = v18;
        }
        while (v15 != a4);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<long long,int>>(uint64_t result, char *a2, unint64_t a3, char *a4, unint64_t a5, char *a6, int a7, int a8, _QWORD *a9, uint64_t a10)
{
  unint64_t v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  int v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  int v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;

  if (!a8)
    return result;
  v13 = result;
  result = 0xFFFFFFFFLL;
  while (a8 > a10 && a7 > a10)
  {
    if (!a7)
      return result;
    v17 = 0;
    v18 = *(_QWORD *)a4;
    v19 = -a7;
    v20 = 8 * v13;
    while (1)
    {
      v21 = *(_QWORD *)&a2[v17];
      if (v18 < v21)
        break;
      v17 += v20;
      if (__CFADD__(v19++, 1))
        return result;
    }
    v23 = &a2[v17];
    if (-v19 >= a8)
    {
      if (v19 == -1)
      {
        *(_QWORD *)&a2[v17] = v18;
        *(_QWORD *)a4 = v21;
        return result;
      }
      if (v19 <= 0)
        v32 = -v19;
      else
        v32 = 1 - v19;
      v27 = &a2[8 * v13 * ((uint64_t)v32 >> 1) + v17];
      v33 = ((a6 - a4) >> 3) / a5;
      if ((_DWORD)v33)
      {
        v25 = a4;
        do
        {
          v34 = v33 >> 1;
          v35 = &v25[8 * a3 * v34];
          v36 = *(_QWORD *)v35;
          v37 = &v35[8 * a3];
          LODWORD(v33) = v33 + ~(v33 >> 1);
          if (v36 < *(_QWORD *)v27)
            v25 = v37;
          else
            LODWORD(v33) = v34;
        }
        while ((_DWORD)v33);
      }
      else
      {
        v25 = a4;
      }
      v39 = (v32 >> 1);
      v38 = ((v25 - a4) >> 3) / a3;
    }
    else
    {
      if (a8 >= 0)
        v24 = a8;
      else
        v24 = a8 + 1;
      v25 = &a4[8 * a3 * ((uint64_t)v24 >> 1)];
      v26 = ((a4 - a2 - v17) >> 3) / a3;
      if ((_DWORD)v26)
      {
        v27 = &a2[v17];
        do
        {
          v28 = v26 >> 1;
          v29 = &v27[8 * v13 * v28];
          v30 = *(_QWORD *)v29;
          v31 = &v29[8 * v13];
          LODWORD(v26) = v26 + ~(v26 >> 1);
          if (*(_QWORD *)v25 < v30)
            LODWORD(v26) = v28;
          else
            v27 = v31;
        }
        while ((_DWORD)v26);
      }
      else
      {
        v27 = &a2[v17];
      }
      v38 = (v24 >> 1);
      v39 = ((v27 - a2 - v17) >> 3) / v13;
    }
    if (v27 != a4 || (v40 = v25, v41 = v13, v13 != a3))
    {
      v40 = v27;
      v41 = v13;
      if (a4 != v25)
      {
        if (&v27[8 * v13] == a4 && v13 == a3)
        {
          v42 = 0;
          v43 = *(_QWORD *)v27;
          do
          {
            *(_QWORD *)&v27[v42] = *(_QWORD *)&a4[v42];
            v42 += v20;
          }
          while (&a4[v42] != v25);
          a4 = &v27[v42];
          *(_QWORD *)&v27[v42] = v43;
          v41 = v13;
        }
        else
        {
          if (&a4[8 * a3] == v25)
          {
            v62 = &v25[-8 * a3];
            v63 = *(_QWORD *)v62;
            if (v62 == v27)
            {
              a4 = v25;
            }
            else
            {
              v64 = 0;
              do
              {
                *(_QWORD *)&v62[v64] = *(_QWORD *)&v25[v64 + -16 * a3];
                v64 -= 8 * a3;
              }
              while (&v62[v64] != v27);
              a4 = &v25[v64];
            }
            *(_QWORD *)v27 = v63;
          }
          else
          {
            v44 = ((v25 - a4) >> 3) / a3;
            v45 = v44;
            v46 = ((a4 - v27) >> 3) / a3;
            v47 = v46;
            if ((_DWORD)v46 != (_DWORD)v44)
            {
              do
              {
                v52 = v47;
                v47 = v45;
                v45 = v52 % v45;
              }
              while (v45);
              v53 = v39;
              v54 = v13 * v47;
              if (v54)
              {
                v55 = &v27[8 * v54];
                v56 = (int)v46 * v13;
                do
                {
                  v55 -= 8 * v13;
                  v57 = *(_QWORD *)v55;
                  v58 = &v55[8 * v56];
                  v59 = v55;
                  do
                  {
                    v60 = v58;
                    *(_QWORD *)v59 = *(_QWORD *)v58;
                    v61 = ((v25 - v58) >> 3) / a3;
                    if ((int)v46 >= (int)v61)
                      v58 = &v27[8 * ((int)v46 - (int)v61) * v13];
                    else
                      v58 = &v60[8 * v56];
                    v59 = v60;
                  }
                  while (v58 != v55);
                  *(_QWORD *)v60 = v57;
                }
                while (v55 != v27);
              }
              a4 = &v27[8 * (int)v44 * v13];
              v41 = v13;
              v39 = v53;
              goto LABEL_74;
            }
            if (v27 != a4)
            {
              v48 = a4;
              v49 = (uint64_t *)v27;
              do
              {
                v50 = *v49;
                *v49 = *(_QWORD *)v48;
                *(_QWORD *)v48 = v50;
                v49 = (uint64_t *)((char *)v49 + v20);
                v48 += 8 * a3;
              }
              while (v49 != (uint64_t *)a4 && v48 != v25);
            }
          }
          v41 = a3;
        }
LABEL_74:
        v40 = a4;
      }
    }
    a7 = -(v39 + v19);
    v65 = a8 - v38;
    v92 = a10;
    v90 = a10;
    if ((int)v39 + (int)v38 >= a8 - ((int)v39 + (int)v38) - v19)
    {
      v91 = v40;
      v66 = a9;
      v65 = v38;
      a7 = v39;
      a3 = v13;
      v25 = v27;
      v40 = v23;
      a5 = v41;
      a6 = v91;
    }
    else
    {
      v66 = a9;
      v67 = v13;
      v68 = v13;
      v69 = v27;
      v70 = a6;
      v71 = a5;
      a5 = v71;
      a6 = v70;
      v13 = v41;
    }
    a8 = v65;
    a2 = v40;
    a4 = v25;
    a9 = v66;
    a10 = v92;
    result = 0xFFFFFFFFLL;
    if (!v65)
      return result;
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      v79 = 0;
      v80 = 8 * v13;
      v81 = a2;
      do
      {
        a9[v79++] = *v81;
        v81 = (_QWORD *)((char *)v81 + v80);
      }
      while (v81 != (_QWORD *)a4);
      if (v79 * 8)
      {
        v82 = &a9[v79];
        v83 = (uint64_t)&a9[v79 - 1];
        while (a4 != a6 || a3 != a5)
        {
          v84 = *(_QWORD *)a4;
          v85 = *(_QWORD *)a4 < *a9;
          if (*(_QWORD *)a4 >= *a9)
            v84 = *a9;
          a9 += *(_QWORD *)a4 >= *a9;
          if (v85)
            v86 = a3;
          else
            v86 = 0;
          a4 += 8 * v86;
          *(_QWORD *)a2 = v84;
          a2 += v80;
          if (v82 == a9)
            return result;
        }
        v88 = a9 - 1;
        do
        {
          v89 = v88[1];
          ++v88;
          *(_QWORD *)a2 = v89;
          a2 += v80;
        }
        while ((_QWORD *)v83 != v88);
      }
    }
  }
  else if (a4 != a6)
  {
    v72 = 0;
    v73 = a4;
    do
    {
      a9[v72++] = *(_QWORD *)v73;
      v73 += 8 * a3;
    }
    while (v73 != a6);
    if (v72 * 8)
    {
      v74 = &a9[v72];
      v75 = -8 * a5;
      while (a4 != a2 || a3 != v13)
      {
        v76 = *(v74 - 1);
        v77 = *(_QWORD *)&a4[-8 * a3];
        a6 -= 8 * a5;
        v78 = v76 < v77;
        if (v76 <= v77)
          v76 = *(_QWORD *)&a4[-8 * a3];
        if (v78)
          a4 -= 8 * a3;
        else
          --v74;
        *(_QWORD *)a6 = v76;
        if (v74 == a9)
          return result;
      }
      do
      {
        v87 = *--v74;
        *(_QWORD *)&a6[v75] = v87;
        v75 -= 8 * a5;
      }
      while (v74 != a9);
    }
  }
  return result;
}

float std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<float,int>>(unint64_t a1, float *a2, unint64_t a3, float *a4, unsigned int a5, float *a6, uint64_t a7, float result)
{
  float *v10;
  float *v11;
  float v12;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float v19;
  uint64_t v20;
  float *v21;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  float *v30;
  uint64_t v31;
  float *v32;
  float *v33;
  _BOOL4 v34;
  float v35;
  float v36;

  if (a5 >= 2)
  {
    v10 = a2;
    if (a5 == 2)
    {
      v11 = &a4[-a3];
      result = *v11;
      v12 = *a2;
      if (*v11 < *a2)
      {
        *a2 = result;
        a4[-a3] = v12;
      }
    }
    else if ((int)a5 > 128)
    {
      v23 = a6;
      v24 = a5 >> 1;
      v25 = a5;
      v26 = a5 - (a5 >> 1);
      v27 = &a2[a1 * v24];
      if (a5 <= a7)
      {
        v30 = &v23[v24];
        v31 = 4 * a1;
        v32 = v30;
        v33 = &v23[v25];
        while (v32 != v33)
        {
          result = *v32;
          v34 = *v32 < *v23;
          if (*v32 >= *v23)
            result = *v23;
          v23 += *v32 >= *v23;
          v32 += v34;
          *v10 = result;
          v10 = (float *)((char *)v10 + v31);
          if (v23 == v30)
          {
            while (v32 != v33)
            {
              v35 = *v32++;
              result = v35;
              *v10 = v35;
              v10 = (float *)((char *)v10 + v31);
            }
            return result;
          }
        }
        while (v23 != v30)
        {
          v36 = *v23++;
          result = v36;
          *v10 = v36;
          v10 = (float *)((char *)v10 + v31);
        }
      }
      else
      {
      }
    }
    else if (a2 != a4 || a1 != a3)
    {
      v14 = &a2[a1];
      if (v14 != a4)
      {
        v15 = 0;
        v16 = 4 * a1;
        v17 = a2;
        v18 = &a2[-a1];
        do
        {
          v19 = *v17;
          v17 = v14;
          result = *v14;
          if (*v14 < v19)
          {
            v20 = 0;
            while (1)
            {
              *(float *)((char *)v17 + v20) = v19;
              if (v15 == v20)
                break;
              v19 = *(float *)((char *)v18 + v20);
              v20 -= v16;
              if (result >= v19)
              {
                v21 = (float *)((char *)v17 + v20);
                goto LABEL_17;
              }
            }
            v21 = a2;
LABEL_17:
            *v21 = result;
          }
          v14 = &v17[(unint64_t)v16 / 4];
          v18 = (float *)((char *)v18 + v16);
          v15 -= v16;
        }
        while (&v17[(unint64_t)v16 / 4] != a4);
      }
    }
  }
  return result;
}

float std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<float,int>>(uint64_t a1, float *a2, uint64_t a3, float *a4, unsigned int a5, float *a6, float result)
{
  float *v7;
  float *v9;
  float *v12;
  float v13;
  BOOL v14;
  float *v16;
  uint64_t v17;
  float *v18;
  float *v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float *v25;
  float *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  if (a5)
  {
    v7 = a6;
    v9 = a2;
    if (a5 == 1)
    {
LABEL_8:
      result = *v9;
      *v7 = *v9;
      return result;
    }
    if (a5 == 2)
    {
      v12 = &a4[-a3];
      v13 = *v12;
      v14 = *v12 < *a2;
      if (*v12 >= *a2)
        v13 = *a2;
      *a6 = v13;
      v7 = a6 + 1;
      if (!v14)
        v9 = &a4[-a3];
      goto LABEL_8;
    }
    if ((int)a5 > 8)
    {
      v24 = a5 >> 1;
      v25 = &a2[a1 * v24];
      if (a1 * v24)
      {
        v26 = &v9[a1 * v24];
        while (v26 != a4 || a1 != a3)
        {
          result = *v26;
          v27 = *v26 < *v9;
          if (*v26 < *v9)
          {
            v28 = a1;
          }
          else
          {
            result = *v9;
            v28 = 0;
          }
          v26 += v28;
          if (v27)
            v29 = 0;
          else
            v29 = a1;
          v9 += v29;
          *v7++ = result;
          if (v9 == v25)
            goto LABEL_37;
        }
        for (; v9 != v25; v9 += a1)
        {
          result = *v9;
          *v7++ = *v9;
        }
      }
      else
      {
        v26 = &v9[a1 * v24];
LABEL_37:
        while (v26 != a4)
        {
          result = *v26;
          *v7++ = *v26;
          v26 += a1;
        }
      }
    }
    else if (a2 != a4)
    {
      result = *a2;
      *a6 = *a2;
      v16 = &a2[a1];
      if (v16 != a4)
      {
        v17 = 0;
        v18 = a6;
        v19 = a6;
        do
        {
          v20 = *v19++;
          result = v20;
          if (*v16 >= v20)
          {
            *v19 = *v16;
          }
          else
          {
            v18[1] = result;
            v21 = a6;
            if (v18 != a6)
            {
              v22 = v17;
              while (1)
              {
                v21 = (float *)((char *)a6 + v22);
                v23 = *(float *)((char *)a6 + v22 - 4);
                if (*v16 >= v23)
                  break;
                *v21 = v23;
                v22 -= 4;
                if (!v22)
                {
                  v21 = a6;
                  break;
                }
              }
            }
            result = *v16;
            *v21 = *v16;
          }
          v16 += a1;
          v17 += 4;
          v18 = v19;
        }
        while (v16 != a4);
      }
    }
  }
  return result;
}

float std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<float,int>>(unint64_t a1, float *a2, unint64_t a3, float *a4, unint64_t a5, float *a6, int a7, int a8, float result, float *a10, uint64_t a11)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  float v20;
  float *v22;
  int v23;
  float *v24;
  unint64_t v25;
  float *v26;
  uint64_t v27;
  float *v28;
  float v29;
  float *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  float *v34;
  float v35;
  float *v36;
  unint64_t v37;
  unint64_t v38;
  float *v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  float *v47;
  float *v48;
  int v49;
  int v51;
  unint64_t v52;
  uint64_t v53;
  float *v54;
  uint64_t v55;
  int v56;
  float *v57;
  float *v58;
  float *v59;
  unint64_t v60;
  float *v61;
  int v62;
  uint64_t v63;
  int v64;
  float *v65;
  unint64_t v66;
  unint64_t v67;
  float *v68;
  unint64_t v69;
  float *v70;
  uint64_t v71;
  float *v72;
  float *v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  float *v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  float v83;
  float *v84;
  float v85;
  float *v86;
  float *v87;
  uint64_t v88;

  if (!a8)
    return result;
  while (a8 > a11 && a7 > a11)
  {
    if (!a7)
      return result;
    v17 = 0;
    result = *a4;
    v18 = -a7;
    v19 = 4 * a1;
    while (1)
    {
      v20 = *(float *)((char *)a2 + v17);
      if (result < v20)
        break;
      v17 += v19;
      if (__CFADD__(v18++, 1))
        return result;
    }
    v22 = (float *)((char *)a2 + v17);
    if (-v18 >= a8)
    {
      if (v18 == -1)
      {
        *(float *)((char *)a2 + v17) = result;
        *a4 = v20;
        return result;
      }
      v31 = (-v18 < 0) - v18;
      v26 = (float *)((char *)&a2[a1 * ((uint64_t)v31 >> 1)] + v17);
      v32 = (a6 - a4) / a5;
      if ((_DWORD)v32)
      {
        v24 = a4;
        do
        {
          v33 = v32 >> 1;
          v34 = &v24[a3 * v33];
          v35 = *v34;
          v36 = &v34[a3];
          LODWORD(v32) = v32 + ~(v32 >> 1);
          if (v35 < *v26)
            v24 = v36;
          else
            LODWORD(v32) = v33;
        }
        while ((_DWORD)v32);
      }
      else
      {
        v24 = a4;
      }
      v38 = (v31 >> 1);
      v37 = (v24 - a4) / a3;
    }
    else
    {
      if (a8 >= 0)
        v23 = a8;
      else
        v23 = a8 + 1;
      v24 = &a4[a3 * ((uint64_t)v23 >> 1)];
      v25 = (((char *)a4 - (char *)a2 - v17) >> 2) / a3;
      if ((_DWORD)v25)
      {
        v26 = (float *)((char *)a2 + v17);
        do
        {
          v27 = v25 >> 1;
          v28 = &v26[a1 * v27];
          v29 = *v28;
          v30 = &v28[a1];
          LODWORD(v25) = v25 + ~(v25 >> 1);
          if (*v24 < v29)
            LODWORD(v25) = v27;
          else
            v26 = v30;
        }
        while ((_DWORD)v25);
      }
      else
      {
        v26 = (float *)((char *)a2 + v17);
      }
      v37 = (v23 >> 1);
      v38 = (((char *)v26 - (char *)a2 - v17) >> 2) / a1;
    }
    if (v26 != a4 || (v39 = v24, v40 = a1, a1 != a3))
    {
      v39 = v26;
      v40 = a1;
      if (a4 != v24)
      {
        if (&v26[a1] == a4 && a1 == a3)
        {
          v41 = 0;
          v42 = *v26;
          do
          {
            *(float *)((char *)v26 + v41) = *(float *)((char *)a4 + v41);
            v41 += v19;
          }
          while ((float *)((char *)a4 + v41) != v24);
          a4 = (float *)((char *)v26 + v41);
          *(float *)((char *)v26 + v41) = v42;
          v40 = a1;
        }
        else
        {
          if (&a4[a3] == v24)
          {
            v61 = &v24[-a3];
            v62 = *(_DWORD *)v61;
            if (v61 == v26)
            {
              a4 = v24;
            }
            else
            {
              v63 = 0;
              do
              {
                v61[v63] = v24[v63 + -2 * a3];
                v63 -= a3;
              }
              while (&v61[v63] != v26);
              a4 = &v24[v63];
            }
            *(_DWORD *)v26 = v62;
          }
          else
          {
            v43 = (v24 - a4) / a3;
            v44 = v43;
            v45 = (a4 - v26) / a3;
            v46 = v45;
            if ((_DWORD)v45 != (_DWORD)v43)
            {
              do
              {
                v51 = v46;
                v46 = v44;
                v44 = v51 % v44;
              }
              while (v44);
              v52 = v38;
              v53 = a1 * v46;
              if (v53)
              {
                v54 = &v26[v53];
                v55 = (int)v45 * a1;
                do
                {
                  v54 -= a1;
                  v56 = *(_DWORD *)v54;
                  v57 = &v54[v55];
                  v58 = v54;
                  do
                  {
                    v59 = v57;
                    *v58 = *v57;
                    v60 = (v24 - v57) / a3;
                    if ((int)v45 >= (int)v60)
                      v57 = &v26[((int)v45 - (int)v60) * a1];
                    else
                      v57 = &v59[v55];
                    v58 = v59;
                  }
                  while (v57 != v54);
                  *(_DWORD *)v59 = v56;
                }
                while (v54 != v26);
              }
              a4 = &v26[(int)v43 * a1];
              v40 = a1;
              v38 = v52;
              goto LABEL_70;
            }
            if (v26 != a4)
            {
              v47 = a4;
              v48 = v26;
              do
              {
                v49 = *(_DWORD *)v48;
                *v48 = *v47;
                *(_DWORD *)v47 = v49;
                v48 = (float *)((char *)v48 + v19);
                v47 += a3;
              }
              while (v48 != a4 && v47 != v24);
            }
          }
          v40 = a3;
        }
LABEL_70:
        v39 = a4;
      }
    }
    a7 = -(v38 + v18);
    v64 = a8 - v37;
    v88 = a11;
    if ((int)v38 + (int)v37 >= a8 - ((int)v38 + (int)v37) - v18)
    {
      v87 = v39;
      v65 = a10;
      v64 = v37;
      a7 = v38;
      a3 = a1;
      v24 = v26;
      v39 = v22;
      a5 = v40;
      a6 = v87;
    }
    else
    {
      v86 = a10;
      v65 = a10;
      v66 = a1;
      v67 = a1;
      v68 = v26;
      v69 = a5;
      v70 = a6;
      a5 = v69;
      a6 = v70;
      a1 = v40;
    }
    a8 = v64;
    a2 = v39;
    a4 = v24;
    a10 = v65;
    a11 = v88;
    if (!v64)
      return result;
  }
  if (a7 <= a8)
  {
    if (a2 != a4)
    {
      v76 = 0;
      v77 = 4 * a1;
      v78 = a2;
      do
      {
        result = *v78;
        a10[v76++] = *v78;
        v78 = (float *)((char *)v78 + v77);
      }
      while (v78 != a4);
      if (v76 * 4)
      {
        v79 = &a10[v76];
        v80 = (uint64_t)&a10[v76 - 1];
        while (a4 != a6 || a3 != a5)
        {
          result = *a4;
          v81 = *a4 < *a10;
          if (*a4 >= *a10)
            result = *a10;
          a10 += *a4 >= *a10;
          if (v81)
            v82 = a3;
          else
            v82 = 0;
          a4 += v82;
          *a2 = result;
          a2 = (float *)((char *)a2 + v77);
          if (v79 == a10)
            return result;
        }
        v84 = a10 - 1;
        do
        {
          v85 = v84[1];
          ++v84;
          result = v85;
          *a2 = v85;
          a2 = (float *)((char *)a2 + v77);
        }
        while ((float *)v80 != v84);
      }
    }
  }
  else if (a4 != a6)
  {
    v71 = 0;
    v72 = a4;
    do
    {
      result = *v72;
      a10[v71++] = *v72;
      v72 += a3;
    }
    while (v72 != a6);
    if (v71 * 4)
    {
      v73 = &a10[v71];
      v74 = 0x3FFFFFFFFFFFFFFFLL * a5;
      while (a4 != a2 || a3 != a1)
      {
        v75 = &a4[-a3];
        result = *(v73 - 1);
        a6 -= a5;
        if (result >= *v75)
        {
          --v73;
        }
        else
        {
          result = *v75;
          a4 -= a3;
        }
        *a6 = result;
        if (v73 == a10)
          return result;
      }
      do
      {
        v83 = *--v73;
        result = v83;
        a6[v74] = v83;
        v74 -= a5;
      }
      while (v73 != a10);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argpartition<BOOL,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;

  v7 = *a4;
  v8 = *a2;
  v9 = *a7;
  v10 = a7[1];
  v11 = *(unsigned __int8 *)(*a7 + v10 * v7);
  v12 = *(unsigned __int8 *)(*a7 + v10 * v8);
  if (v11 < v12 || (v7 < v8 ? (v13 = v11 == v12) : (v13 = 0), v13))
  {
    v21 = *a6;
    v22 = *(unsigned __int8 *)(v9 + v10 * v21);
    if (v22 < v11 || v21 < v7 && v22 == v11)
    {
      *a2 = v21;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    v23 = *a6;
    v24 = *(unsigned __int8 *)(v9 + v10 * v23);
    if (v24 < v12 || (result = 1, v23 < v8) && v24 == v12)
    {
      *a4 = v23;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    v14 = *a6;
    v15 = *(unsigned __int8 *)(v9 + v10 * v14);
    if (v15 < v11 || (result = 0, v14 < v7) && v15 == v11)
    {
      *a4 = v14;
      *a6 = v7;
      v17 = *a4;
      v18 = *a2;
      v19 = *(unsigned __int8 *)(v9 + v10 * v17);
      v20 = *(unsigned __int8 *)(v9 + v10 * v18);
      if (v19 < v20 || (result = 1, v17 < v18) && v19 == v20)
      {
        *a2 = v17;
        *a4 = v18;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argpartition<unsigned char,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v7 = *a4;
  v8 = *a2;
  v9 = *a7;
  v10 = a7[1];
  v11 = *(unsigned __int8 *)(*a7 + v10 * v7);
  v12 = v10 * v8;
  v13 = *(unsigned __int8 *)(*a7 + v10 * v8);
  if (v11 < v13 || (v7 < v8 ? (v14 = v11 == v13) : (v14 = 0), v14))
  {
    v22 = *a6;
    v23 = *(unsigned __int8 *)(v9 + v10 * v22);
    if (v23 < v11 || v22 < v7 && v23 == v11)
    {
      *a2 = v22;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    v24 = *a6;
    v25 = *(unsigned __int8 *)(v9 + v10 * v24);
    v26 = *(unsigned __int8 *)(v9 + v12);
    if (v25 < v26 || (result = 1, v24 < v8) && v25 == v26)
    {
      *a4 = v24;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    v15 = *a6;
    v16 = *(unsigned __int8 *)(v9 + v10 * v15);
    if (v16 < v11 || (result = 0, v15 < v7) && v16 == v11)
    {
      *a4 = v15;
      *a6 = v7;
      v18 = *a4;
      v19 = *a2;
      v20 = *(unsigned __int8 *)(v9 + v10 * v18);
      v21 = *(unsigned __int8 *)(v9 + v10 * v19);
      if (v20 < v21 || (result = 1, v18 < v19) && v20 == v21)
      {
        *a2 = v18;
        *a4 = v19;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argpartition<unsigned int,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v7 = *a4;
  v8 = *a2;
  v9 = *a7;
  v10 = a7[1];
  v11 = *(_DWORD *)(*a7 + 4 * v10 * v7);
  v12 = v10 * v8;
  v13 = *(_DWORD *)(*a7 + 4 * v10 * v8);
  if (v11 < v13 || (v7 < v8 ? (v14 = v11 == v13) : (v14 = 0), v14))
  {
    v22 = *a6;
    v23 = *(_DWORD *)(v9 + 4 * v10 * v22);
    if (v23 < v11 || v22 < v7 && v23 == v11)
    {
      *a2 = v22;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    v24 = *a6;
    v25 = *(_DWORD *)(v9 + 4 * v10 * v24);
    v26 = *(_DWORD *)(v9 + 4 * v12);
    if (v25 < v26 || (result = 1, v24 < v8) && v25 == v26)
    {
      *a4 = v24;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    v15 = *a6;
    v16 = *(_DWORD *)(v9 + 4 * v10 * v15);
    if (v16 < v11 || (result = 0, v15 < v7) && v16 == v11)
    {
      *a4 = v15;
      *a6 = v7;
      v18 = *a4;
      v19 = *a2;
      v20 = *(_DWORD *)(v9 + 4 * v10 * v18);
      v21 = *(_DWORD *)(v9 + 4 * v10 * v19);
      if (v20 < v21 || (result = 1, v18 < v19) && v20 == v21)
      {
        *a2 = v18;
        *a4 = v19;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argpartition<signed char,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  v7 = *a4;
  v8 = *a7;
  v9 = a7[1];
  v10 = *a2;
  v11 = *(unsigned __int8 *)(*a7 + v9 * v7);
  v12 = v9 * v10;
  if (*(char *)(*a7 + v9 * v7) < *(char *)(*a7 + v9 * v10)
    || (v7 < v10 ? (v13 = v11 == *(unsigned __int8 *)(*a7 + v9 * v10)) : (v13 = 0), v13))
  {
    v20 = *a6;
    if (*(char *)(v8 + v9 * v20) < (char)v11
      || v20 < v7 && *(unsigned __int8 *)(v8 + v9 * v20) == v11)
    {
      *a2 = v20;
      *a6 = v10;
      return 1;
    }
    *a2 = v7;
    *a4 = v10;
    v21 = *a6;
    v22 = *(char *)(v8 + v9 * v21);
    v23 = *(char *)(v8 + v12);
    if (v22 < v23 || (result = 1, v21 < v10) && v22 == v23)
    {
      *a4 = v21;
      *a6 = v10;
      return 2;
    }
  }
  else
  {
    v14 = *a6;
    if (*(char *)(v8 + v9 * v14) < (char)v11
      || (result = 0, v14 < v7) && *(unsigned __int8 *)(v8 + v9 * v14) == v11)
    {
      *a4 = v14;
      *a6 = v7;
      v16 = *a4;
      v17 = *a2;
      v18 = *(char *)(v8 + v9 * v16);
      v19 = *(char *)(v8 + v9 * v17);
      if (v18 < v19 || (result = 1, v16 < v17) && v18 == v19)
      {
        *a2 = v16;
        *a4 = v17;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argpartition<int,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;

  v7 = *a4;
  v8 = *a2;
  v9 = *a7;
  v10 = a7[1];
  v11 = *(_DWORD *)(*a7 + 4 * v10 * v7);
  v12 = v10 * v8;
  v13 = *(_DWORD *)(*a7 + 4 * v10 * v8);
  if (v11 < v13 || (v7 < v8 ? (v14 = v11 == v13) : (v14 = 0), v14))
  {
    v22 = *a6;
    v23 = *(_DWORD *)(v9 + 4 * v10 * v22);
    if (v23 < v11 || v22 < v7 && v23 == v11)
    {
      *a2 = v22;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    v24 = *a6;
    v25 = *(_DWORD *)(v9 + 4 * v10 * v24);
    v26 = *(_DWORD *)(v9 + 4 * v12);
    if (v25 < v26 || (result = 1, v24 < v8) && v25 == v26)
    {
      *a4 = v24;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    v15 = *a6;
    v16 = *(_DWORD *)(v9 + 4 * v10 * v15);
    if (v16 < v11 || (result = 0, v15 < v7) && v16 == v11)
    {
      *a4 = v15;
      *a6 = v7;
      v18 = *a4;
      v19 = *a2;
      v20 = *(_DWORD *)(v9 + 4 * v10 * v18);
      v21 = *(_DWORD *)(v9 + 4 * v10 * v19);
      if (v20 < v21 || (result = 1, v18 < v19) && v20 == v21)
      {
        *a2 = v18;
        *a4 = v19;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argpartition<long long,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *a4;
  v8 = *a2;
  v9 = *a7;
  v10 = a7[1];
  v11 = *(_QWORD *)(*a7 + 8 * v10 * v7);
  v12 = *(_QWORD *)(*a7 + 8 * v10 * v8);
  if (v11 < v12 || (v7 < v8 ? (v13 = v11 == v12) : (v13 = 0), v13))
  {
    v21 = *a6;
    v22 = *(_QWORD *)(v9 + 8 * v10 * v21);
    if (v22 < v11 || v21 < v7 && v22 == v11)
    {
      *a2 = v21;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    v23 = *a6;
    v24 = *(_QWORD *)(v9 + 8 * v10 * v23);
    if (v24 < v12 || (result = 1, v23 < v8) && v24 == v12)
    {
      *a4 = v23;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    v14 = *a6;
    v15 = *(_QWORD *)(v9 + 8 * v10 * v14);
    if (v15 < v11 || (result = 0, v14 < v7) && v15 == v11)
    {
      *a4 = v14;
      *a6 = v7;
      v17 = *a4;
      v18 = *a2;
      v19 = *(_QWORD *)(v9 + 8 * v10 * v17);
      v20 = *(_QWORD *)(v9 + 8 * v10 * v18);
      if (v19 < v20 || (result = 1, v17 < v18) && v19 == v20)
      {
        *a2 = v17;
        *a4 = v18;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void mlx::core::`anonymous namespace'::argpartition<float,unsigned int>(mlx::core::array const&,mlx::core::array&,int,int)::{lambda(unsigned int,unsigned int)#1} &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t result;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;

  v7 = *a4;
  v8 = *a2;
  v9 = *a7;
  v10 = a7[1];
  v11 = *(float *)(*a7 + 4 * v10 * v7);
  v12 = *(float *)(*a7 + 4 * v10 * v8);
  if (v11 < v12 || v7 < v8 && v11 == v12)
  {
    v13 = *a6;
    v14 = *(float *)(v9 + 4 * v10 * v13);
    if (v14 < v11 || v13 < v7 && v14 == v11)
    {
      *a2 = v13;
      *a6 = v8;
      return 1;
    }
    *a2 = v7;
    *a4 = v8;
    v22 = *a6;
    v23 = *(float *)(v9 + 4 * v10 * v22);
    if (v23 < v12 || (result = 1, v22 < v8) && v23 == v12)
    {
      *a4 = v22;
      *a6 = v8;
      return 2;
    }
  }
  else
  {
    v16 = *a6;
    v17 = *(float *)(v9 + 4 * v10 * v16);
    if (v17 < v11 || (result = 0, v16 < v7) && v17 == v11)
    {
      *a4 = v16;
      *a6 = v7;
      v18 = *a4;
      v19 = *a2;
      v20 = *(float *)(v9 + 4 * v10 * v18);
      v21 = *(float *)(v9 + 4 * v10 * v19);
      if (v20 < v21 || (result = 1, v18 < v19) && v20 == v21)
      {
        *a2 = v18;
        *a4 = v19;
        return 2;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<BOOL,int>>(uint64_t a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5, _BYTE *a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v6 = *a4;
  v7 = *a2;
  if (v6 < v7)
  {
    *a2 = v6;
    *a4 = v7;
    v8 = *a6;
    if (v8 < v7)
    {
      *a4 = v8;
      *a6 = v7;
      return 2;
    }
    return 1;
  }
  v9 = *a6;
  if (v9 < v6)
  {
    *a4 = v9;
    *a6 = v6;
    v10 = *a4;
    v11 = *a2;
    if (v10 < v11)
    {
      *a2 = v10;
      *a4 = v11;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<unsigned char,int>>(uint64_t a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5, _BYTE *a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v6 = *a4;
  v7 = *a2;
  v8 = *a6;
  if (v6 < v7)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    v11 = *a6;
    if (v11 >= v7)
      return 1;
    *a4 = v11;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = *a4;
    v10 = *a2;
    if (v9 >= v10)
      return 1;
    *a2 = v9;
    *a4 = v10;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<unsigned int,int>>(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t a5, unsigned int *a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v6 = *a4;
  v7 = *a2;
  v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7)
      return 1;
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = *a2;
    if (*a4 >= *a2)
      return 1;
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<signed char,int>>(uint64_t a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5, _BYTE *a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v6 = (char)*a4;
  v7 = (char)*a2;
  v8 = (char)*a6;
  if (v6 < v7)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    v11 = (char)*a6;
    if (v11 >= v7)
      return 1;
    *a4 = v11;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = (char)*a4;
    v10 = (char)*a2;
    if (v9 >= v10)
      return 1;
    *a2 = v9;
    *a4 = v10;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<int,int>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6)
{
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = *a4;
  v7 = *a2;
  v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7)
      return 1;
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = *a2;
    if (*a4 >= *a2)
      return 1;
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<long long,int>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *a4;
  v7 = *a2;
  v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7)
      return 1;
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = *a2;
    if (*a4 >= *a2)
      return 1;
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,mlx::core::`anonymous namespace'::StridedIterator<float,int>>(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;

  v6 = *a4;
  v7 = *a2;
  v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7)
      return 1;
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = *a2;
    if (*a4 >= *a2)
      return 1;
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

void mlx::core::Reduce::eval_cpu(uint64_t a1, mlx::core::array **a2, int ***a3)
{
  mlx::core::array *v3;
  int v6;
  mlx::core::scheduler *v7;
  void **v8;
  uint64_t v9;
  mlx::core::scheduler *v10;
  void **v11;
  uint64_t v12;
  mlx::core::scheduler *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  float *v17;
  const float *v18;
  vDSP_Length v19;
  float v20;
  _QWORD *v21;
  const float *v22;
  vDSP_Length v23;
  _QWORD *v24;
  const float *v25;
  vDSP_Length v26;
  _BYTE *v27;
  unint64_t v28;
  int *v29;
  const float *v30;
  vDSP_Length v31;
  float v32;
  _BYTE *v33;
  unint64_t v34;
  int *v35;
  const float *v36;
  vDSP_Length v37;
  float v38;
  _BYTE *v39;
  unint64_t v40;
  int *v41;
  const float *v42;
  vDSP_Length v43;
  unint64_t v44;
  int *v45;
  void **v46;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  ldiv_t v53;
  _QWORD *v54;
  void **v55;
  void **v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  int *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  ldiv_t v69;
  _QWORD *v70;
  void **v71;
  void **p_C;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  int *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  ldiv_t v85;
  _QWORD *v86;
  void **v87;
  void **v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  ldiv_t v102;
  float *v103;
  float v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int quot;
  ldiv_t v110;
  float *v111;
  float v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  ldiv_t v118;
  float *v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  ldiv_t v126;
  _QWORD *v127;
  void **v128;
  void **v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  float32x4_t *v138;
  _OWORD *v139;
  int *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  ldiv_t v146;
  _QWORD *v147;
  void **v148;
  void **v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  int *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  ldiv_t v161;
  _QWORD *v162;
  void **v163;
  void **v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  ldiv_t v176;
  _QWORD *v177;
  void **v178;
  void **v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  float32x4_t *v188;
  _OWORD *v189;
  int *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  ldiv_t v196;
  _QWORD *v197;
  void **v198;
  void **v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  float32x4_t *v208;
  _OWORD *v209;
  int *v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  ldiv_t v216;
  _QWORD *v217;
  void **v218;
  void **v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  ldiv_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  ldiv_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  ldiv_t v242;
  int v243;
  void *__b;
  int v245;
  float *v246;
  unint64_t v247;
  void *__p;
  void *v249;
  uint64_t v250;
  int v251;
  void *v252;
  _BYTE *v253;
  void *v254;
  char *v255;
  char v256;
  int __N;
  _BYTE __N_4[24];
  _BYTE *v259;
  int *__C;
  uint64_t v261;
  void **v262;
  void *v263;
  uint64_t (*v264)(mlx::core::allocator *);
  void **v265;
  _QWORD v266[3];
  _QWORD *v267;
  uint64_t v268;

  v268 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (a2[1] - *a2 != 16)
    mlx::core::Reduce::eval_cpu();
  if (*(_DWORD *)(*(_QWORD *)v3 + 56) != 6)
    goto LABEL_9;
  v6 = *(_DWORD *)(a1 + 20);
  if (v6 == 5)
  {
    v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (_QWORD)(*a3)[6]));
    v263 = &unk_2513463C8;
    v264 = mlx::core::allocator::free;
    v265 = &v263;
    mlx::core::array::set_data(a3, (uint64_t)v13, (uint64_t)&v263);
    v14 = v265;
    if (v265 == &v263)
    {
      v15 = 4;
      v14 = &v263;
    }
    else
    {
      if (!v265)
      {
LABEL_27:
        v249 = 0;
        v250 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
        v21 = (_QWORD *)(a1 + 24);
        if (__p)
        {
          v249 = __p;
          operator delete(__p);
        }
        if (v251 == 1)
        {
          v33 = v253;
          if (v253 - (_BYTE *)v252 == 4)
          {
            if ((*a3)[6])
            {
              v34 = 0;
              v35 = (*a3)[19];
              v36 = *(const float **)(*(_QWORD *)v3 + 152);
              v37 = *(int *)v252;
              do
              {
                v35[v34] = -8388608;
                LODWORD(__C) = 0;
                vDSP_maxv(v36, 1, (float *)&__C, v37);
                v38 = *(float *)&v35[v34];
                if (v38 < *(float *)&__C)
                  v38 = *(float *)&__C;
                *(float *)&v35[v34++] = v38;
                v36 += v37;
              }
              while ((unint64_t)(*a3)[6] > v34);
            }
            goto LABEL_374;
          }
          goto LABEL_89;
        }
        if (!v251)
        {
          v17 = (float *)(*a3)[19];
          *v17 = -INFINITY;
          v22 = *(const float **)(*(_QWORD *)v3 + 152);
          v23 = *(int *)(*(_QWORD *)v3 + 48);
          LODWORD(__C) = 0;
          vDSP_maxv(v22, 1, (float *)&__C, v23);
          v20 = *v17;
          if (*v17 < *(float *)&__C)
            v20 = *(float *)&__C;
          goto LABEL_41;
        }
        if ((v251 & 0xFFFFFFFD) == 1)
        {
          v33 = v253;
LABEL_89:
          __N = 0;
          __N = *((_DWORD *)v33 - 1);
          v253 = v33 - 4;
          v255 -= 8;
          v62 = *(_QWORD *)(*(_QWORD *)v3 + 152);
          v246 = (float *)(*a3)[19];
          v247 = v62;
          v45 = __C;
          v46 = v262;
          v63 = (*a3)[6];
          if (v253 == v252)
          {
            if (v63)
            {
              v105 = 0;
              v106 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
              do
              {
                v107 = 0;
                if ((v106 & 0x80000000) == 0)
                {
                  v108 = v106;
                  quot = v105;
                  do
                  {
                    v110 = ldiv(quot, v45[v108]);
                    quot = v110.quot;
                    v107 += (_QWORD)v46[v108--] * v110.rem;
                  }
                  while (v108 != -1);
                }
                v111 = v246;
                *v246 = -INFINITY;
                LODWORD(__C) = 0;
                vDSP_maxv((const float *)(v247 + 4 * (int)v107), 1, (float *)&__C, __N);
                v112 = *v111;
                if (*v111 < *(float *)&__C)
                  v112 = *(float *)&__C;
                *v111 = v112;
                ++v105;
                ++v246;
              }
              while ((unint64_t)(*a3)[6] > v105);
            }
            goto LABEL_370;
          }
          if (!v63)
            goto LABEL_370;
          v64 = 0;
          v65 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
          while (1)
          {
            v245 = 0;
            v66 = 0;
            if ((v65 & 0x80000000) == 0)
            {
              v67 = v65;
              v68 = v64;
              do
              {
                v69 = ldiv(v68, v45[v67]);
                v68 = v69.quot;
                v66 += (_QWORD)v46[v67--] * v69.rem;
              }
              while (v67 != -1);
            }
            v245 = v66;
            *v246 = -INFINITY;
            v259 = 0;
            v70 = operator new(0x30uLL);
            *v70 = &off_251346778;
            v70[1] = &v243;
            v70[2] = &v247;
            v70[3] = &v245;
            v70[4] = &v246;
            v70[5] = &__N;
            v259 = v70;
            v267 = 0;
            v71 = (void **)operator new(0x28uLL);
            *v71 = &off_251346518;
            v71[1] = &v252;
            v71[2] = &v254;
            v71[3] = v266;
            v71[4] = __N_4;
            v262 = v71;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v266);
            p_C = v262;
            if (v262 == (void **)&__C)
            {
              p_C = (void **)&__C;
              v73 = 4;
            }
            else
            {
              if (!v262)
                goto LABEL_100;
              v73 = 5;
            }
            (*((void (**)(void))*p_C + v73))();
LABEL_100:
            LODWORD(__C) = 0;
            LODWORD(__b) = 0;
            if (!v267)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, void **))(*v267 + 48))(v267, &__C, &__b);
            v74 = v267;
            if (v267 == v266)
            {
              v74 = v266;
              v75 = 4;
            }
            else
            {
              if (!v267)
                goto LABEL_106;
              v75 = 5;
            }
            (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_106:
            v76 = v259;
            if (v259 == __N_4)
            {
              v76 = __N_4;
              v77 = 4;
              goto LABEL_110;
            }
            if (v259)
            {
              v77 = 5;
LABEL_110:
              (*(void (**)(void))(*v76 + 8 * v77))();
            }
            ++v64;
            ++v246;
            if ((unint64_t)(*a3)[6] <= v64)
              goto LABEL_370;
          }
        }
        if (v251 == 2)
        {
          v95 = v253;
          if (v253 - (_BYTE *)v252 == 4)
          {
            v185 = *((int *)v253 - 1);
            v186 = *((_QWORD *)v255 - 1);
            v253 -= 4;
            v255 -= 8;
            if ((*a3)[6])
            {
              LODWORD(v187) = 0;
              v188 = (float32x4_t *)(*a3)[19];
              v189 = *(_OWORD **)(*(_QWORD *)v3 + 152);
              do
              {
                if (v186)
                  memset_pattern16(v188, &unk_2425A28F0, 4 * v186);
                _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS3_EEEclEPKfPfim(v189, v188, v185, v186);
                v187 = (int)v187 + (int)v186;
                v188 = (float32x4_t *)((char *)v188 + 4 * v186);
                v189 = (_OWORD *)((char *)v189 + 4 * v186 * v185);
              }
              while (v187 < (unint64_t)(*a3)[6]);
            }
            goto LABEL_374;
          }
LABEL_285:
          v245 = 0;
          v245 = *((_DWORD *)v95 - 1);
          v247 = 0;
          v247 = *((_QWORD *)v255 - 1);
          v253 = v95 - 4;
          v255 -= 8;
          v246 = *(float **)(*(_QWORD *)v3 + 152);
          __b = (*a3)[19];
          v45 = __C;
          v46 = v262;
          v190 = (*a3)[6];
          if (v253 == v252)
          {
            if (v190)
            {
              v231 = 0;
              v232 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
              do
              {
                v233 = 0;
                if ((v232 & 0x80000000) == 0)
                {
                  v234 = v232;
                  v235 = v231;
                  do
                  {
                    v236 = ldiv(v235, v45[v234]);
                    v235 = v236.quot;
                    v233 += (_QWORD)v46[v234--] * v236.rem;
                  }
                  while (v234 != -1);
                }
                if (v247)
                  memset_pattern16(__b, &unk_2425A28F0, 4 * v247);
                _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS3_EEEclEPKfPfim(&v246[(int)v233], (float32x4_t *)__b, v245, v247);
                __b = (char *)__b + 4 * v247;
                v231 += v247;
              }
              while ((unint64_t)(*a3)[6] > v231);
            }
            goto LABEL_370;
          }
          if (!v190)
            goto LABEL_370;
          v191 = 0;
          v192 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
          while (1)
          {
            v243 = 0;
            v193 = 0;
            if ((v192 & 0x80000000) == 0)
            {
              v194 = v192;
              v195 = v191;
              do
              {
                v196 = ldiv(v195, v45[v194]);
                v195 = v196.quot;
                v193 += (_QWORD)v46[v194--] * v196.rem;
              }
              while (v194 != -1);
            }
            v243 = v193;
            if (v247)
              memset_pattern16(__b, &unk_2425A28F0, 4 * v247);
            v259 = 0;
            v197 = operator new(0x38uLL);
            *v197 = &off_2513467F8;
            v197[1] = &v256;
            v197[2] = &v246;
            v197[3] = &v243;
            v197[4] = &__b;
            v197[5] = &v245;
            v197[6] = &v247;
            v259 = v197;
            v267 = 0;
            v198 = (void **)operator new(0x28uLL);
            *v198 = &off_251346518;
            v198[1] = &v252;
            v198[2] = &v254;
            v198[3] = v266;
            v198[4] = __N_4;
            v262 = v198;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v266);
            v199 = v262;
            if (v262 == (void **)&__C)
            {
              v199 = (void **)&__C;
              v200 = 4;
            }
            else
            {
              if (!v262)
                goto LABEL_298;
              v200 = 5;
            }
            (*((void (**)(void))*v199 + v200))();
LABEL_298:
            LODWORD(__C) = 0;
            __N = 0;
            if (!v267)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int *))(*v267 + 48))(v267, &__C, &__N);
            v201 = v267;
            if (v267 == v266)
            {
              v201 = v266;
              v202 = 4;
            }
            else
            {
              if (!v267)
                goto LABEL_304;
              v202 = 5;
            }
            (*(void (**)(void))(*v201 + 8 * v202))();
LABEL_304:
            v203 = v259;
            if (v259 == __N_4)
            {
              v203 = __N_4;
              v204 = 4;
              goto LABEL_308;
            }
            if (v259)
            {
              v204 = 5;
LABEL_308:
              (*(void (**)(void))(*v203 + 8 * v204))();
            }
            __b = (char *)__b + 4 * v247;
            v191 += v247;
            if ((unint64_t)(*a3)[6] <= v191)
              goto LABEL_370;
          }
        }
        if (v251 != 5)
        {
          if (v251 != 4)
            goto LABEL_374;
          v95 = v253;
          goto LABEL_285;
        }
        v247 = *(_QWORD *)(*(_QWORD *)v3 + 152);
        v155 = (*a3)[19];
        v45 = __C;
        v46 = v262;
        if (!(*a3)[6])
          goto LABEL_370;
        v156 = 0;
        v157 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
        while (1)
        {
          LODWORD(__b) = 0;
          v158 = 0;
          if ((v157 & 0x80000000) == 0)
          {
            v159 = v157;
            v160 = v156;
            do
            {
              v161 = ldiv(v160, v45[v159]);
              v160 = v161.quot;
              v158 += (_QWORD)v46[v159--] * v161.rem;
            }
            while (v159 != -1);
          }
          LODWORD(__b) = v158;
          __N = -8388608;
          v259 = 0;
          v162 = operator new(0x28uLL);
          *v162 = &off_251346878;
          v162[1] = &v245;
          v162[2] = &__N;
          v162[3] = &v247;
          v162[4] = &__b;
          v259 = v162;
          v267 = 0;
          v163 = (void **)operator new(0x28uLL);
          *v163 = &off_251346518;
          v163[1] = &v252;
          v163[2] = &v254;
          v163[3] = v266;
          v163[4] = __N_4;
          v262 = v163;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v266);
          v164 = v262;
          if (v262 == (void **)&__C)
          {
            v164 = (void **)&__C;
            v165 = 4;
          }
          else
          {
            if (!v262)
              goto LABEL_242;
            v165 = 5;
          }
          (*((void (**)(void))*v164 + v165))();
LABEL_242:
          LODWORD(__C) = 0;
          LODWORD(v246) = 0;
          if (!v267)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, float **))(*v267 + 48))(v267, &__C, &v246);
          v166 = v267;
          if (v267 == v266)
          {
            v166 = v266;
            v167 = 4;
          }
          else
          {
            if (!v267)
              goto LABEL_248;
            v167 = 5;
          }
          (*(void (**)(void))(*v166 + 8 * v167))();
LABEL_248:
          v168 = v259;
          if (v259 == __N_4)
          {
            v168 = __N_4;
            v169 = 4;
            goto LABEL_252;
          }
          if (v259)
          {
            v169 = 5;
LABEL_252:
            (*(void (**)(void))(*v168 + 8 * v169))();
          }
          *v155++ = __N;
          if ((unint64_t)(*a3)[6] <= ++v156)
            goto LABEL_370;
        }
      }
      v15 = 5;
    }
    (*((void (**)(void))*v14 + v15))();
    goto LABEL_27;
  }
  if (v6 == 4)
  {
    v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (_QWORD)(*a3)[6]));
    v263 = &unk_2513463C8;
    v264 = mlx::core::allocator::free;
    v265 = &v263;
    mlx::core::array::set_data(a3, (uint64_t)v10, (uint64_t)&v263);
    v11 = v265;
    if (v265 == &v263)
    {
      v12 = 4;
      v11 = &v263;
    }
    else
    {
      if (!v265)
      {
LABEL_18:
        v249 = 0;
        v250 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
        v16 = (_QWORD *)(a1 + 24);
        if (__p)
        {
          v249 = __p;
          operator delete(__p);
        }
        if (v251 == 1)
        {
          v27 = v253;
          if (v253 - (_BYTE *)v252 == 4)
          {
            if ((*a3)[6])
            {
              v28 = 0;
              v29 = (*a3)[19];
              v30 = *(const float **)(*(_QWORD *)v3 + 152);
              v31 = *(int *)v252;
              do
              {
                v29[v28] = 2139095040;
                LODWORD(__C) = 0;
                vDSP_minv(v30, 1, (float *)&__C, v31);
                v32 = *(float *)&v29[v28];
                if (v32 > *(float *)&__C)
                  v32 = *(float *)&__C;
                *(float *)&v29[v28++] = v32;
                v30 += v31;
              }
              while ((unint64_t)(*a3)[6] > v28);
            }
            goto LABEL_374;
          }
          goto LABEL_63;
        }
        if (!v251)
        {
          v17 = (float *)(*a3)[19];
          *v17 = INFINITY;
          v18 = *(const float **)(*(_QWORD *)v3 + 152);
          v19 = *(int *)(*(_QWORD *)v3 + 48);
          LODWORD(__C) = 0;
          vDSP_minv(v18, 1, (float *)&__C, v19);
          v20 = *v17;
          if (*v17 > *(float *)&__C)
            v20 = *(float *)&__C;
          goto LABEL_41;
        }
        if ((v251 & 0xFFFFFFFD) == 1)
        {
          v27 = v253;
LABEL_63:
          __N = 0;
          __N = *((_DWORD *)v27 - 1);
          v253 = v27 - 4;
          v255 -= 8;
          v44 = *(_QWORD *)(*(_QWORD *)v3 + 152);
          v246 = (float *)(*a3)[19];
          v247 = v44;
          v45 = __C;
          v46 = v262;
          v47 = (*a3)[6];
          if (v253 == v252)
          {
            if (v47)
            {
              v97 = 0;
              v98 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
              do
              {
                v99 = 0;
                if ((v98 & 0x80000000) == 0)
                {
                  v100 = v98;
                  v101 = v97;
                  do
                  {
                    v102 = ldiv(v101, v45[v100]);
                    v101 = v102.quot;
                    v99 += (_QWORD)v46[v100--] * v102.rem;
                  }
                  while (v100 != -1);
                }
                v103 = v246;
                *v246 = INFINITY;
                LODWORD(__C) = 0;
                vDSP_minv((const float *)(v247 + 4 * (int)v99), 1, (float *)&__C, __N);
                v104 = *v103;
                if (*v103 > *(float *)&__C)
                  v104 = *(float *)&__C;
                *v103 = v104;
                ++v97;
                ++v246;
              }
              while ((unint64_t)(*a3)[6] > v97);
            }
            goto LABEL_370;
          }
          if (!v47)
            goto LABEL_370;
          v48 = 0;
          v49 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
          while (1)
          {
            v245 = 0;
            v50 = 0;
            if ((v49 & 0x80000000) == 0)
            {
              v51 = v49;
              v52 = v48;
              do
              {
                v53 = ldiv(v52, v45[v51]);
                v52 = v53.quot;
                v50 += (_QWORD)v46[v51--] * v53.rem;
              }
              while (v51 != -1);
            }
            v245 = v50;
            *v246 = INFINITY;
            v259 = 0;
            v54 = operator new(0x30uLL);
            *v54 = &off_2513468F8;
            v54[1] = &v243;
            v54[2] = &v247;
            v54[3] = &v245;
            v54[4] = &v246;
            v54[5] = &__N;
            v259 = v54;
            v267 = 0;
            v55 = (void **)operator new(0x28uLL);
            *v55 = &off_251346518;
            v55[1] = &v252;
            v55[2] = &v254;
            v55[3] = v266;
            v55[4] = __N_4;
            v262 = v55;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v266);
            v56 = v262;
            if (v262 == (void **)&__C)
            {
              v56 = (void **)&__C;
              v57 = 4;
            }
            else
            {
              if (!v262)
                goto LABEL_74;
              v57 = 5;
            }
            (*((void (**)(void))*v56 + v57))();
LABEL_74:
            LODWORD(__C) = 0;
            LODWORD(__b) = 0;
            if (!v267)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, void **))(*v267 + 48))(v267, &__C, &__b);
            v58 = v267;
            if (v267 == v266)
            {
              v58 = v266;
              v59 = 4;
            }
            else
            {
              if (!v267)
                goto LABEL_80;
              v59 = 5;
            }
            (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_80:
            v60 = v259;
            if (v259 == __N_4)
            {
              v60 = __N_4;
              v61 = 4;
              goto LABEL_84;
            }
            if (v259)
            {
              v61 = 5;
LABEL_84:
              (*(void (**)(void))(*v60 + 8 * v61))();
            }
            ++v48;
            ++v246;
            if ((unint64_t)(*a3)[6] <= v48)
              goto LABEL_370;
          }
        }
        if (v251 == 2)
        {
          v94 = v253;
          if (v253 - (_BYTE *)v252 == 4)
          {
            v135 = *((int *)v253 - 1);
            v136 = *((_QWORD *)v255 - 1);
            v253 -= 4;
            v255 -= 8;
            if ((*a3)[6])
            {
              LODWORD(v137) = 0;
              v138 = (float32x4_t *)(*a3)[19];
              v139 = *(_OWORD **)(*(_QWORD *)v3 + 152);
              do
              {
                if (v136)
                  memset_pattern16(v138, &unk_2425A28E0, 4 * v136);
                _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS3_EEEclEPKfPfim(v139, v138, v135, v136);
                v137 = (int)v137 + (int)v136;
                v138 = (float32x4_t *)((char *)v138 + 4 * v136);
                v139 = (_OWORD *)((char *)v139 + 4 * v136 * v135);
              }
              while (v137 < (unint64_t)(*a3)[6]);
            }
            goto LABEL_374;
          }
LABEL_206:
          v245 = 0;
          v245 = *((_DWORD *)v94 - 1);
          v247 = 0;
          v247 = *((_QWORD *)v255 - 1);
          v253 = v94 - 4;
          v255 -= 8;
          v246 = *(float **)(*(_QWORD *)v3 + 152);
          __b = (*a3)[19];
          v45 = __C;
          v46 = v262;
          v140 = (*a3)[6];
          if (v253 == v252)
          {
            if (v140)
            {
              v225 = 0;
              v226 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
              do
              {
                v227 = 0;
                if ((v226 & 0x80000000) == 0)
                {
                  v228 = v226;
                  v229 = v225;
                  do
                  {
                    v230 = ldiv(v229, v45[v228]);
                    v229 = v230.quot;
                    v227 += (_QWORD)v46[v228--] * v230.rem;
                  }
                  while (v228 != -1);
                }
                if (v247)
                  memset_pattern16(__b, &unk_2425A28E0, 4 * v247);
                _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS3_EEEclEPKfPfim(&v246[(int)v227], (float32x4_t *)__b, v245, v247);
                __b = (char *)__b + 4 * v247;
                v225 += v247;
              }
              while ((unint64_t)(*a3)[6] > v225);
            }
            goto LABEL_370;
          }
          if (!v140)
            goto LABEL_370;
          v141 = 0;
          v142 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
          while (1)
          {
            v243 = 0;
            v143 = 0;
            if ((v142 & 0x80000000) == 0)
            {
              v144 = v142;
              v145 = v141;
              do
              {
                v146 = ldiv(v145, v45[v144]);
                v145 = v146.quot;
                v143 += (_QWORD)v46[v144--] * v146.rem;
              }
              while (v144 != -1);
            }
            v243 = v143;
            if (v247)
              memset_pattern16(__b, &unk_2425A28E0, 4 * v247);
            v259 = 0;
            v147 = operator new(0x38uLL);
            *v147 = &off_251346978;
            v147[1] = &v256;
            v147[2] = &v246;
            v147[3] = &v243;
            v147[4] = &__b;
            v147[5] = &v245;
            v147[6] = &v247;
            v259 = v147;
            v267 = 0;
            v148 = (void **)operator new(0x28uLL);
            *v148 = &off_251346518;
            v148[1] = &v252;
            v148[2] = &v254;
            v148[3] = v266;
            v148[4] = __N_4;
            v262 = v148;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v266);
            v149 = v262;
            if (v262 == (void **)&__C)
            {
              v149 = (void **)&__C;
              v150 = 4;
            }
            else
            {
              if (!v262)
                goto LABEL_219;
              v150 = 5;
            }
            (*((void (**)(void))*v149 + v150))();
LABEL_219:
            LODWORD(__C) = 0;
            __N = 0;
            if (!v267)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int *))(*v267 + 48))(v267, &__C, &__N);
            v151 = v267;
            if (v267 == v266)
            {
              v151 = v266;
              v152 = 4;
            }
            else
            {
              if (!v267)
                goto LABEL_225;
              v152 = 5;
            }
            (*(void (**)(void))(*v151 + 8 * v152))();
LABEL_225:
            v153 = v259;
            if (v259 == __N_4)
            {
              v153 = __N_4;
              v154 = 4;
              goto LABEL_229;
            }
            if (v259)
            {
              v154 = 5;
LABEL_229:
              (*(void (**)(void))(*v153 + 8 * v154))();
            }
            __b = (char *)__b + 4 * v247;
            v141 += v247;
            if ((unint64_t)(*a3)[6] <= v141)
              goto LABEL_370;
          }
        }
        if (v251 != 5)
        {
          if (v251 != 4)
            goto LABEL_374;
          v94 = v253;
          goto LABEL_206;
        }
        v247 = *(_QWORD *)(*(_QWORD *)v3 + 152);
        v120 = (*a3)[19];
        v45 = __C;
        v46 = v262;
        if (!(*a3)[6])
          goto LABEL_370;
        v121 = 0;
        v122 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
        while (1)
        {
          LODWORD(__b) = 0;
          v123 = 0;
          if ((v122 & 0x80000000) == 0)
          {
            v124 = v122;
            v125 = v121;
            do
            {
              v126 = ldiv(v125, v45[v124]);
              v125 = v126.quot;
              v123 += (_QWORD)v46[v124--] * v126.rem;
            }
            while (v124 != -1);
          }
          LODWORD(__b) = v123;
          __N = 2139095040;
          v259 = 0;
          v127 = operator new(0x28uLL);
          *v127 = &off_2513469F8;
          v127[1] = &v245;
          v127[2] = &__N;
          v127[3] = &v247;
          v127[4] = &__b;
          v259 = v127;
          v267 = 0;
          v128 = (void **)operator new(0x28uLL);
          *v128 = &off_251346518;
          v128[1] = &v252;
          v128[2] = &v254;
          v128[3] = v266;
          v128[4] = __N_4;
          v262 = v128;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v266);
          v129 = v262;
          if (v262 == (void **)&__C)
          {
            v129 = (void **)&__C;
            v130 = 4;
          }
          else
          {
            if (!v262)
              goto LABEL_186;
            v130 = 5;
          }
          (*((void (**)(void))*v129 + v130))();
LABEL_186:
          LODWORD(__C) = 0;
          LODWORD(v246) = 0;
          if (!v267)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, float **))(*v267 + 48))(v267, &__C, &v246);
          v131 = v267;
          if (v267 == v266)
          {
            v131 = v266;
            v132 = 4;
          }
          else
          {
            if (!v267)
              goto LABEL_192;
            v132 = 5;
          }
          (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_192:
          v133 = v259;
          if (v259 == __N_4)
          {
            v133 = __N_4;
            v134 = 4;
            goto LABEL_196;
          }
          if (v259)
          {
            v134 = 5;
LABEL_196:
            (*(void (**)(void))(*v133 + 8 * v134))();
          }
          *v120++ = __N;
          if ((unint64_t)(*a3)[6] <= ++v121)
            goto LABEL_370;
        }
      }
      v12 = 5;
    }
    (*((void (**)(void))*v11 + v12))();
    goto LABEL_18;
  }
  if (v6 != 2)
  {
LABEL_9:
    mlx::core::Reduce::eval(a1, (uint64_t)a2, a3);
    return;
  }
  v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60) * (_QWORD)(*a3)[6]));
  v263 = &unk_2513463C8;
  v264 = mlx::core::allocator::free;
  v265 = &v263;
  mlx::core::array::set_data(a3, (uint64_t)v7, (uint64_t)&v263);
  v8 = v265;
  if (v265 == &v263)
  {
    v9 = 4;
    v8 = &v263;
  }
  else
  {
    if (!v265)
      goto LABEL_36;
    v9 = 5;
  }
  (*((void (**)(void))*v8 + v9))();
LABEL_36:
  v249 = 0;
  v250 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v24 = (_QWORD *)(a1 + 24);
  if (__p)
  {
    v249 = __p;
    operator delete(__p);
  }
  if (v251 == 1)
  {
    v39 = v253;
    if (v253 - (_BYTE *)v252 == 4)
    {
      if ((*a3)[6])
      {
        v40 = 0;
        v41 = (*a3)[19];
        v42 = *(const float **)(*(_QWORD *)v3 + 152);
        v43 = *(int *)v252;
        do
        {
          v41[v40] = 0;
          LODWORD(__C) = 0;
          vDSP_sve(v42, 1, (float *)&__C, v43);
          *(float *)&v41[v40] = *(float *)&__C + *(float *)&v41[v40];
          ++v40;
          v42 += v43;
        }
        while ((unint64_t)(*a3)[6] > v40);
      }
      goto LABEL_374;
    }
LABEL_115:
    __N = 0;
    __N = *((_DWORD *)v39 - 1);
    v253 = v39 - 4;
    v255 -= 8;
    v78 = *(_QWORD *)(*(_QWORD *)v3 + 152);
    v246 = (float *)(*a3)[19];
    v247 = v78;
    v45 = __C;
    v46 = v262;
    v79 = (*a3)[6];
    if (v253 == v252)
    {
      if (v79)
      {
        v113 = 0;
        v114 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
        do
        {
          v115 = 0;
          if ((v114 & 0x80000000) == 0)
          {
            v116 = v114;
            v117 = v113;
            do
            {
              v118 = ldiv(v117, v45[v116]);
              v117 = v118.quot;
              v115 += (_QWORD)v46[v116--] * v118.rem;
            }
            while (v116 != -1);
          }
          v119 = v246;
          *v246 = 0.0;
          LODWORD(__C) = 0;
          vDSP_sve((const float *)(v247 + 4 * (int)v115), 1, (float *)&__C, __N);
          *v119 = *(float *)&__C + *v119;
          ++v113;
          ++v246;
        }
        while ((unint64_t)(*a3)[6] > v113);
      }
    }
    else if (v79)
    {
      v80 = 0;
      v81 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
      while (1)
      {
        v245 = 0;
        v82 = 0;
        if ((v81 & 0x80000000) == 0)
        {
          v83 = v81;
          v84 = v80;
          do
          {
            v85 = ldiv(v84, v45[v83]);
            v84 = v85.quot;
            v82 += (_QWORD)v46[v83--] * v85.rem;
          }
          while (v83 != -1);
        }
        v245 = v82;
        *v246 = 0.0;
        v259 = 0;
        v86 = operator new(0x30uLL);
        *v86 = &off_2513465E8;
        v86[1] = &v243;
        v86[2] = &v247;
        v86[3] = &v245;
        v86[4] = &v246;
        v86[5] = &__N;
        v259 = v86;
        v267 = 0;
        v87 = (void **)operator new(0x28uLL);
        *v87 = &off_251346518;
        v87[1] = &v252;
        v87[2] = &v254;
        v87[3] = v266;
        v87[4] = __N_4;
        v262 = v87;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v266);
        v88 = v262;
        if (v262 == (void **)&__C)
        {
          v88 = (void **)&__C;
          v89 = 4;
        }
        else
        {
          if (!v262)
            goto LABEL_126;
          v89 = 5;
        }
        (*((void (**)(void))*v88 + v89))();
LABEL_126:
        LODWORD(__C) = 0;
        LODWORD(__b) = 0;
        if (!v267)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, void **))(*v267 + 48))(v267, &__C, &__b);
        v90 = v267;
        if (v267 == v266)
        {
          v90 = v266;
          v91 = 4;
        }
        else
        {
          if (!v267)
            goto LABEL_132;
          v91 = 5;
        }
        (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_132:
        v92 = v259;
        if (v259 == __N_4)
        {
          v92 = __N_4;
          v93 = 4;
          goto LABEL_136;
        }
        if (v259)
        {
          v93 = 5;
LABEL_136:
          (*(void (**)(void))(*v92 + 8 * v93))();
        }
        ++v80;
        ++v246;
        if ((unint64_t)(*a3)[6] <= v80)
          goto LABEL_370;
      }
    }
    goto LABEL_370;
  }
  if (v251)
  {
    if ((v251 & 0xFFFFFFFD) == 1)
    {
      v39 = v253;
      goto LABEL_115;
    }
    if (v251 == 2)
    {
      v96 = v253;
      if (v253 - (_BYTE *)v252 == 4)
      {
        v205 = *((int *)v253 - 1);
        v206 = *((_QWORD *)v255 - 1);
        v253 -= 4;
        v255 -= 8;
        if ((*a3)[6])
        {
          LODWORD(v207) = 0;
          v208 = (float32x4_t *)(*a3)[19];
          v209 = *(_OWORD **)(*(_QWORD *)v3 + 152);
          do
          {
            if (v206)
              bzero(v208, 4 * v206);
            _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS3_EEEclEPKfPfim(v209, v208, v205, v206);
            v207 = (int)v207 + (int)v206;
            v208 = (float32x4_t *)((char *)v208 + 4 * v206);
            v209 = (_OWORD *)((char *)v209 + 4 * v206 * v205);
          }
          while (v207 < (unint64_t)(*a3)[6]);
        }
        goto LABEL_374;
      }
      goto LABEL_318;
    }
    if (v251 != 5)
    {
      if (v251 != 4)
        goto LABEL_374;
      v96 = v253;
LABEL_318:
      v245 = 0;
      v245 = *((_DWORD *)v96 - 1);
      v247 = 0;
      v247 = *((_QWORD *)v255 - 1);
      v253 = v96 - 4;
      v255 -= 8;
      v246 = *(float **)(*(_QWORD *)v3 + 152);
      __b = (*a3)[19];
      v45 = __C;
      v46 = v262;
      v210 = (*a3)[6];
      if (v253 == v252)
      {
        if (v210)
        {
          v237 = 0;
          v238 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
          do
          {
            v239 = 0;
            if ((v238 & 0x80000000) == 0)
            {
              v240 = v238;
              v241 = v237;
              do
              {
                v242 = ldiv(v241, v45[v240]);
                v241 = v242.quot;
                v239 += (_QWORD)v46[v240--] * v242.rem;
              }
              while (v240 != -1);
            }
            if (v247)
              bzero(__b, 4 * v247);
            _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS3_EEEclEPKfPfim(&v246[(int)v239], (float32x4_t *)__b, v245, v247);
            __b = (char *)__b + 4 * v247;
            v237 += v247;
          }
          while ((unint64_t)(*a3)[6] > v237);
        }
        goto LABEL_370;
      }
      if (v210)
      {
        v211 = 0;
        v212 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
        do
        {
          v243 = 0;
          v213 = 0;
          if ((v212 & 0x80000000) == 0)
          {
            v214 = v212;
            v215 = v211;
            do
            {
              v216 = ldiv(v215, v45[v214]);
              v215 = v216.quot;
              v213 += (_QWORD)v46[v214--] * v216.rem;
            }
            while (v214 != -1);
          }
          v243 = v213;
          if (v247)
            bzero(__b, 4 * v247);
          v259 = 0;
          v217 = operator new(0x38uLL);
          *v217 = &off_251346678;
          v217[1] = &v256;
          v217[2] = &v246;
          v217[3] = &v243;
          v217[4] = &__b;
          v217[5] = &v245;
          v217[6] = &v247;
          v259 = v217;
          v267 = 0;
          v218 = (void **)operator new(0x28uLL);
          *v218 = &off_251346518;
          v218[1] = &v252;
          v218[2] = &v254;
          v218[3] = v266;
          v218[4] = __N_4;
          v262 = v218;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v266);
          v219 = v262;
          if (v262 == (void **)&__C)
          {
            v219 = (void **)&__C;
            v220 = 4;
          }
          else
          {
            if (!v262)
              goto LABEL_331;
            v220 = 5;
          }
          (*((void (**)(void))*v219 + v220))();
LABEL_331:
          LODWORD(__C) = 0;
          __N = 0;
          if (!v267)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v267 + 48))(v267, &__C, &__N);
          v221 = v267;
          if (v267 == v266)
          {
            v221 = v266;
            v222 = 4;
          }
          else
          {
            if (!v267)
              goto LABEL_337;
            v222 = 5;
          }
          (*(void (**)(void))(*v221 + 8 * v222))();
LABEL_337:
          v223 = v259;
          if (v259 == __N_4)
          {
            v223 = __N_4;
            v224 = 4;
            goto LABEL_341;
          }
          if (v259)
          {
            v224 = 5;
LABEL_341:
            (*(void (**)(void))(*v223 + 8 * v224))();
          }
          __b = (char *)__b + 4 * v247;
          v211 += v247;
        }
        while ((unint64_t)(*a3)[6] > v211);
      }
LABEL_370:
      if (v46)
        operator delete(v46);
      if (v45)
        operator delete(v45);
      goto LABEL_374;
    }
    v247 = *(_QWORD *)(*(_QWORD *)v3 + 152);
    v170 = (*a3)[19];
    v45 = __C;
    v46 = v262;
    if (!(*a3)[6])
      goto LABEL_370;
    v171 = 0;
    v172 = ((unint64_t)(v261 - (_QWORD)__C) >> 2) - 1;
    while (1)
    {
      LODWORD(__b) = 0;
      v173 = 0;
      if ((v172 & 0x80000000) == 0)
      {
        v174 = v172;
        v175 = v171;
        do
        {
          v176 = ldiv(v175, v45[v174]);
          v175 = v176.quot;
          v173 += (_QWORD)v46[v174--] * v176.rem;
        }
        while (v174 != -1);
      }
      LODWORD(__b) = v173;
      __N = 0;
      v259 = 0;
      v177 = operator new(0x28uLL);
      *v177 = &off_2513466F8;
      v177[1] = &v245;
      v177[2] = &__N;
      v177[3] = &v247;
      v177[4] = &__b;
      v259 = v177;
      v267 = 0;
      v178 = (void **)operator new(0x28uLL);
      *v178 = &off_251346518;
      v178[1] = &v252;
      v178[2] = &v254;
      v178[3] = v266;
      v178[4] = __N_4;
      v262 = v178;
      std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&__C, v266);
      v179 = v262;
      if (v262 == (void **)&__C)
      {
        v179 = (void **)&__C;
        v180 = 4;
      }
      else
      {
        if (!v262)
          goto LABEL_265;
        v180 = 5;
      }
      (*((void (**)(void))*v179 + v180))();
LABEL_265:
      LODWORD(__C) = 0;
      LODWORD(v246) = 0;
      if (!v267)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, int **, float **))(*v267 + 48))(v267, &__C, &v246);
      v181 = v267;
      if (v267 == v266)
      {
        v181 = v266;
        v182 = 4;
      }
      else
      {
        if (!v267)
          goto LABEL_271;
        v182 = 5;
      }
      (*(void (**)(void))(*v181 + 8 * v182))();
LABEL_271:
      v183 = v259;
      if (v259 == __N_4)
      {
        v183 = __N_4;
        v184 = 4;
        goto LABEL_275;
      }
      if (v259)
      {
        v184 = 5;
LABEL_275:
        (*(void (**)(void))(*v183 + 8 * v184))();
      }
      *v170++ = __N;
      if ((unint64_t)(*a3)[6] <= ++v171)
        goto LABEL_370;
    }
  }
  v17 = (float *)(*a3)[19];
  *v17 = 0.0;
  v25 = *(const float **)(*(_QWORD *)v3 + 152);
  v26 = *(int *)(*(_QWORD *)v3 + 48);
  LODWORD(__C) = 0;
  vDSP_sve(v25, 1, (float *)&__C, v26);
  v20 = *(float *)&__C + *v17;
LABEL_41:
  *v17 = v20;
LABEL_374:
  if (v254)
  {
    v255 = (char *)v254;
    operator delete(v254);
  }
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
}

void sub_24230F2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  mlx::core::ReductionPlan::~ReductionPlan((mlx::core::ReductionPlan *)&a19);
  _Unwind_Resume(a1);
}

uint64_t mlx::core::UnaryPrimitive::eval_cpu(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, *a3);
}

uint64_t mlx::core::UnaryPrimitive::eval_gpu(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(a1, a2, *a3);
}

_QWORD *mlx::core::Reduce::print(_QWORD *result, _QWORD *a2)
{
  const char *v2;

  switch(*((_DWORD *)result + 5))
  {
    case 0:
      v2 = "And";
      goto LABEL_9;
    case 1:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Or", 2);
    case 2:
      v2 = "Sum";
      goto LABEL_9;
    case 3:
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Prod", 4);
    case 4:
      v2 = "Min";
      goto LABEL_9;
    case 5:
      v2 = "Max";
LABEL_9:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v2, 3);
      break;
    default:
      return result;
  }
  return result;
}

void mlx::core::Reduce::~Reduce(mlx::core::Reduce *this)
{
  void *v2;

  *(_QWORD *)this = off_251346478;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_251346478;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2426A82C4);
}

void mlx::core::`anonymous namespace'::get_reduction_plan(mlx::core::array *this@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int *v7;
  int v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  int v15;
  int v16;
  int **v17;
  int v18;
  int v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  int *v65;
  unint64_t v66;
  uint64_t v67;
  int *v68;
  int *v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  int *v79;
  int v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int **v115;
  _QWORD v116[3];
  __int128 v117;
  uint64_t v118;
  _QWORD v119[3];
  __int128 v120;
  uint64_t v121;
  _QWORD v122[3];
  __int128 v123;
  uint64_t v124;
  void *__p;
  _QWORD *v126;
  unint64_t v127;
  _QWORD v128[3];
  __int128 v129;
  uint64_t v130;
  _QWORD v131[3];
  __int128 v132;
  uint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  _QWORD v139[3];

  v6 = *(_QWORD *)this;
  v7 = *a2;
  if (*(_QWORD *)(*(_QWORD *)this + 48) == *(_QWORD *)(*(_QWORD *)this + 160)
    && (char *)a2[1] - (char *)v7 == *(_QWORD *)(v6 + 8) - *(_QWORD *)v6
    && (*(_BYTE *)(v6 + 168) & 1) != 0)
  {
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    return;
  }
  if ((*(_BYTE *)(v6 + 168) & 2) == 0)
  {
LABEL_56:
    v137 = 0;
    v138 = 0;
    v139[0] = 0;
    v115 = a2;
    v49 = a2[1];
    if (v7 == v49)
    {
      v55 = 0;
      v65 = 0;
    }
    else
    {
      do
      {
        v50 = *v7;
        v51 = mlx::core::array::shape(this, *v7);
        v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8 * v50);
        v53 = v51;
        v54 = v138;
        if ((unint64_t)v138 >= v139[0])
        {
          v56 = (v138 - v137) >> 4;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v58 = v139[0] - (_QWORD)v137;
          if ((uint64_t)(v139[0] - (_QWORD)v137) >> 3 > v57)
            v57 = v58 >> 3;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
            v59 = 0xFFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v139, v59);
          else
            v60 = 0;
          v61 = &v60[16 * v56];
          *(_QWORD *)v61 = v53;
          *((_QWORD *)v61 + 1) = v52;
          v63 = v137;
          v62 = v138;
          v64 = v61;
          if (v138 != v137)
          {
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v62 - 1);
              v64 -= 16;
              v62 -= 16;
            }
            while (v62 != v63);
            v62 = v137;
          }
          v55 = (unint64_t)(v61 + 16);
          v137 = v64;
          v138 = v61 + 16;
          v139[0] = &v60[16 * v59];
          if (v62)
            operator delete(v62);
        }
        else
        {
          *(_QWORD *)v138 = v51;
          *((_QWORD *)v54 + 1) = v52;
          v55 = (unint64_t)(v54 + 16);
        }
        v138 = (char *)v55;
        ++v7;
      }
      while (v7 != v49);
      v65 = (int *)v137;
    }
    v66 = 126 - 2 * __clz((uint64_t)(v55 - (_QWORD)v65) >> 4);
    if ((int *)v55 == v65)
      v67 = 0;
    else
      v67 = v66;
    v68 = (int *)v137;
    v69 = (int *)v138;
    v70 = (unint64_t)(v138 - v137) >> 4;
    v71 = (v70 - 1);
    if ((int)v71 >= 1)
    {
      v72 = &v137[16 * v71];
      do
      {
        v73 = (v70 - 2);
        v70 = v71;
        v74 = (char *)&v68[4 * v71];
        v75 = *(int *)v74;
        v76 = *((_QWORD *)v74 + 1);
        v77 = (char *)&v68[4 * v73];
        if (*((_QWORD *)v77 + 1) == v76 * v75)
        {
          v78 = *(_DWORD *)v77;
          v79 = (int *)(v74 + 16);
          if (v74 + 16 != (char *)v69)
          {
            v74 = v72;
            do
            {
              *(v79 - 4) = *v79;
              *((_QWORD *)v79 - 1) = *((_QWORD *)v79 + 1);
              v79 += 4;
              v74 += 16;
            }
            while (v79 != v69);
          }
          v138 = v74;
          *(_DWORD *)v77 = v78 * v75;
          *(_QWORD *)&v68[4 * v73 + 2] = v76;
          v69 = (int *)v74;
        }
        v71 = v70 - 1;
        v72 -= 16;
      }
      while ((int)v70 - 1 > 0);
    }
    v134 = 0;
    v135 = 0;
    v136 = 0;
    __p = 0;
    v126 = 0;
    v127 = 0;
    do
    {
      v80 = *v68;
      v81 = *((_QWORD *)v68 + 1);
      v82 = v135;
      if ((unint64_t)v135 >= v136)
      {
        v84 = v134;
        v85 = (v135 - v134) >> 2;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v87 = v136 - (_QWORD)v134;
        if ((uint64_t)(v136 - (_QWORD)v134) >> 1 > v86)
          v86 = v87 >> 1;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
          v88 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (v88)
        {
          v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v136, v88);
          v84 = v134;
          v82 = v135;
        }
        else
        {
          v89 = 0;
        }
        v90 = &v89[4 * v85];
        *(_DWORD *)v90 = v80;
        v83 = v90 + 4;
        while (v82 != v84)
        {
          v91 = *((_DWORD *)v82 - 1);
          v82 -= 4;
          *((_DWORD *)v90 - 1) = v91;
          v90 -= 4;
        }
        v134 = v90;
        v135 = v83;
        v136 = (unint64_t)&v89[4 * v88];
        if (v84)
          operator delete(v84);
      }
      else
      {
        *(_DWORD *)v135 = v80;
        v83 = v82 + 4;
      }
      v135 = v83;
      v92 = v126;
      if ((unint64_t)v126 >= v127)
      {
        v94 = __p;
        v95 = ((char *)v126 - (_BYTE *)__p) >> 3;
        v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v97 = v127 - (_QWORD)__p;
        if ((uint64_t)(v127 - (_QWORD)__p) >> 2 > v96)
          v96 = v97 >> 2;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
          v98 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v98 = v96;
        if (v98)
        {
          v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v98);
          v94 = __p;
          v92 = v126;
        }
        else
        {
          v99 = 0;
        }
        v100 = &v99[8 * v95];
        *(_QWORD *)v100 = v81;
        v93 = v100 + 8;
        while (v92 != v94)
        {
          v101 = *--v92;
          *((_QWORD *)v100 - 1) = v101;
          v100 -= 8;
        }
        __p = v100;
        v126 = v93;
        v127 = (unint64_t)&v99[8 * v98];
        if (v94)
          operator delete(v94);
      }
      else
      {
        *v126 = v81;
        v93 = v92 + 1;
      }
      v126 = v93;
      v68 += 4;
    }
    while (v68 != v69);
    v102 = *(v93 - 1);
    if (v102 == 1)
    {
      v123 = 0uLL;
      v124 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v123, v134, (uint64_t)v135, (v135 - v134) >> 2);
      v103 = a3;
      memset(v122, 0, sizeof(v122));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v122, __p, (uint64_t)v126, ((char *)v126 - (_BYTE *)__p) >> 3);
      *(_DWORD *)a3 = 3;
      *(_OWORD *)(a3 + 8) = v123;
      v105 = v124;
      v123 = 0uLL;
      v124 = 0;
      v106 = v122[0];
      *(_QWORD *)(a3 + 24) = v105;
      *(_QWORD *)(a3 + 32) = v106;
      v107 = v122;
    }
    else
    {
      v103 = a3;
      if (v102)
      {
        v108 = (*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2;
        if ((int)v108 - 1 < 0)
        {
          v110 = 1;
        }
        else
        {
          v109 = 8 * (v108 - 1);
          v110 = 1;
          do
          {
            LODWORD(v108) = v108 - 1;
            if ((_DWORD)v108 != *(v115[1] - 1))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + v109) != v110)
                break;
              v110 *= mlx::core::array::shape(this, v108);
            }
            v109 -= 8;
          }
          while ((int)v108 > 0);
          v102 = *(v126 - 1);
        }
        v104 = v134;
        if (v102 <= v110)
        {
          v120 = 0uLL;
          v121 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v120, v134, (uint64_t)v135, (v135 - v134) >> 2);
          memset(v119, 0, sizeof(v119));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v119, __p, (uint64_t)v126, ((char *)v126 - (_BYTE *)__p) >> 3);
          *(_DWORD *)a3 = 4;
          *(_OWORD *)(a3 + 8) = v120;
          v113 = v121;
          v120 = 0uLL;
          v121 = 0;
          v114 = v119[0];
          *(_QWORD *)(a3 + 24) = v113;
          *(_QWORD *)(a3 + 32) = v114;
          v107 = v119;
          goto LABEL_137;
        }
      }
      else
      {
        v104 = v134;
      }
      v117 = 0uLL;
      v118 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v117, v104, (uint64_t)v135, (v135 - v104) >> 2);
      memset(v116, 0, sizeof(v116));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v116, __p, (uint64_t)v126, ((char *)v126 - (_BYTE *)__p) >> 3);
      *(_DWORD *)a3 = 5;
      *(_OWORD *)(a3 + 8) = v117;
      v111 = v118;
      v117 = 0uLL;
      v118 = 0;
      v112 = v116[0];
      *(_QWORD *)(a3 + 24) = v111;
      *(_QWORD *)(a3 + 32) = v112;
      v107 = v116;
    }
LABEL_137:
    *(_OWORD *)(v103 + 40) = *(_OWORD *)(v107 + 1);
    v107[1] = 0;
    v107[2] = 0;
    *v107 = 0;
    if (__p)
    {
      v126 = __p;
      operator delete(__p);
    }
    if (v134)
    {
      v135 = v134;
      operator delete(v134);
    }
    if (v137)
    {
      v138 = v137;
      operator delete(v137);
    }
    return;
  }
  v8 = mlx::core::array::shape(this, *v7);
  v9 = (char *)operator new(4uLL);
  v137 = v9;
  *(_DWORD *)v9 = v8;
  v138 = v9 + 4;
  v139[0] = v9 + 4;
  v10 = *a2;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8 * **a2);
  v12 = (char *)operator new(8uLL);
  v134 = v12;
  *(_QWORD *)v12 = v11;
  v13 = v12 + 8;
  v135 = v13;
  v136 = (unint64_t)v13;
  if ((unint64_t)((char *)a2[1] - (char *)v10) >= 5)
  {
    v14 = 1;
    do
    {
      v15 = v10[v14];
      if (v15 - 1 == v10[v14 - 1])
      {
        v16 = mlx::core::array::shape(this, v15);
        *((_DWORD *)v138 - 1) *= v16;
        v17 = a2;
        v10 = *a2;
        *((_QWORD *)v135 - 1) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8 * (*a2)[v14]);
      }
      else
      {
        v18 = mlx::core::array::shape(this, v15);
        v19 = v18;
        v20 = v138;
        if ((unint64_t)v138 >= v139[0])
        {
          v22 = v137;
          v23 = (v138 - v137) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v25 = v139[0] - (_QWORD)v137;
          if ((uint64_t)(v139[0] - (_QWORD)v137) >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v139, v26);
            v22 = v137;
            v20 = v138;
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v19;
          v21 = v28 + 4;
          while (v20 != v22)
          {
            v29 = *((_DWORD *)v20 - 1);
            v20 = (_QWORD *)((char *)v20 - 4);
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          v137 = v28;
          v138 = v21;
          v139[0] = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v138 = v18;
          v21 = (char *)v20 + 4;
        }
        v138 = v21;
        v30 = (*a2)[v14];
        v31 = *(_QWORD *)(*(_QWORD *)this + 24);
        v32 = v135;
        if ((unint64_t)v135 >= v136)
        {
          v34 = v134;
          v35 = (v135 - v134) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = v136 - (_QWORD)v134;
          if ((uint64_t)(v136 - (_QWORD)v134) >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, v38);
            v34 = v134;
            v32 = v135;
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[8 * v35];
          *(_QWORD *)v40 = *(_QWORD *)(v31 + 8 * v30);
          v33 = v40 + 8;
          while (v32 != v34)
          {
            v41 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v40 - 1) = v41;
            v40 -= 8;
          }
          v134 = v40;
          v135 = v33;
          v136 = (unint64_t)&v39[8 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_QWORD *)v135 = *(_QWORD *)(v31 + 8 * v30);
          v33 = v32 + 8;
        }
        v135 = v33;
        v17 = a2;
        v10 = *a2;
      }
      ++v14;
    }
    while (v14 < v17[1] - v10);
    v13 = v135;
  }
  v42 = *((_QWORD *)v13 - 1);
  if (v42)
  {
    if (v42 == 1)
    {
      v132 = 0uLL;
      v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v132, v137, (uint64_t)v138, (v138 - v137) >> 2);
      memset(v131, 0, sizeof(v131));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v131, v134, (uint64_t)v135, (v135 - v134) >> 3);
      *(_DWORD *)a3 = 1;
      *(_OWORD *)(a3 + 8) = v132;
      v43 = v133;
      v132 = 0uLL;
      v133 = 0;
      v44 = v131[0];
      *(_QWORD *)(a3 + 24) = v43;
      *(_QWORD *)(a3 + 32) = v44;
      v45 = v131;
    }
    else
    {
      v129 = 0uLL;
      v130 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v129, v137, (uint64_t)v138, (v138 - v137) >> 2);
      memset(v128, 0, sizeof(v128));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v128, v134, (uint64_t)v135, (v135 - v134) >> 3);
      *(_DWORD *)a3 = 2;
      *(_OWORD *)(a3 + 8) = v129;
      v47 = v130;
      v129 = 0uLL;
      v130 = 0;
      v48 = v128[0];
      *(_QWORD *)(a3 + 24) = v47;
      *(_QWORD *)(a3 + 32) = v48;
      v45 = v128;
    }
    v46 = 0;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(v45 + 1);
    v45[1] = 0;
    v45[2] = 0;
    *v45 = 0;
  }
  else
  {
    v46 = 1;
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (v46)
  {
    v7 = *a2;
    goto LABEL_56;
  }
}

{
  uint64_t v6;
  int *v7;
  int v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  int v15;
  int v16;
  int **v17;
  int v18;
  int v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  int *v65;
  unint64_t v66;
  uint64_t v67;
  int *v68;
  int *v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  int *v79;
  int v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int **v115;
  _QWORD v116[3];
  __int128 v117;
  uint64_t v118;
  _QWORD v119[3];
  __int128 v120;
  uint64_t v121;
  _QWORD v122[3];
  __int128 v123;
  uint64_t v124;
  void *__p;
  _QWORD *v126;
  unint64_t v127;
  _QWORD v128[3];
  __int128 v129;
  uint64_t v130;
  _QWORD v131[3];
  __int128 v132;
  uint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  _QWORD v139[3];

  v6 = *(_QWORD *)this;
  v7 = *a2;
  if (*(_QWORD *)(*(_QWORD *)this + 48) == *(_QWORD *)(*(_QWORD *)this + 160)
    && (char *)a2[1] - (char *)v7 == *(_QWORD *)(v6 + 8) - *(_QWORD *)v6
    && (*(_BYTE *)(v6 + 168) & 1) != 0)
  {
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    return;
  }
  if ((*(_BYTE *)(v6 + 168) & 2) == 0)
  {
LABEL_56:
    v137 = 0;
    v138 = 0;
    v139[0] = 0;
    v115 = a2;
    v49 = a2[1];
    if (v7 == v49)
    {
      v55 = 0;
      v65 = 0;
    }
    else
    {
      do
      {
        v50 = *v7;
        v51 = mlx::core::array::shape(this, *v7);
        v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8 * v50);
        v53 = v51;
        v54 = v138;
        if ((unint64_t)v138 >= v139[0])
        {
          v56 = (v138 - v137) >> 4;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v58 = v139[0] - (_QWORD)v137;
          if ((uint64_t)(v139[0] - (_QWORD)v137) >> 3 > v57)
            v57 = v58 >> 3;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
            v59 = 0xFFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v139, v59);
          else
            v60 = 0;
          v61 = &v60[16 * v56];
          *(_QWORD *)v61 = v53;
          *((_QWORD *)v61 + 1) = v52;
          v63 = v137;
          v62 = v138;
          v64 = v61;
          if (v138 != v137)
          {
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v62 - 1);
              v64 -= 16;
              v62 -= 16;
            }
            while (v62 != v63);
            v62 = v137;
          }
          v55 = (unint64_t)(v61 + 16);
          v137 = v64;
          v138 = v61 + 16;
          v139[0] = &v60[16 * v59];
          if (v62)
            operator delete(v62);
        }
        else
        {
          *(_QWORD *)v138 = v51;
          *((_QWORD *)v54 + 1) = v52;
          v55 = (unint64_t)(v54 + 16);
        }
        v138 = (char *)v55;
        ++v7;
      }
      while (v7 != v49);
      v65 = (int *)v137;
    }
    v66 = 126 - 2 * __clz((uint64_t)(v55 - (_QWORD)v65) >> 4);
    if ((int *)v55 == v65)
      v67 = 0;
    else
      v67 = v66;
    v68 = (int *)v137;
    v69 = (int *)v138;
    v70 = (unint64_t)(v138 - v137) >> 4;
    v71 = (v70 - 1);
    if ((int)v71 >= 1)
    {
      v72 = &v137[16 * v71];
      do
      {
        v73 = (v70 - 2);
        v70 = v71;
        v74 = (char *)&v68[4 * v71];
        v75 = *(int *)v74;
        v76 = *((_QWORD *)v74 + 1);
        v77 = (char *)&v68[4 * v73];
        if (*((_QWORD *)v77 + 1) == v76 * v75)
        {
          v78 = *(_DWORD *)v77;
          v79 = (int *)(v74 + 16);
          if (v74 + 16 != (char *)v69)
          {
            v74 = v72;
            do
            {
              *(v79 - 4) = *v79;
              *((_QWORD *)v79 - 1) = *((_QWORD *)v79 + 1);
              v79 += 4;
              v74 += 16;
            }
            while (v79 != v69);
          }
          v138 = v74;
          *(_DWORD *)v77 = v78 * v75;
          *(_QWORD *)&v68[4 * v73 + 2] = v76;
          v69 = (int *)v74;
        }
        v71 = v70 - 1;
        v72 -= 16;
      }
      while ((int)v70 - 1 > 0);
    }
    v134 = 0;
    v135 = 0;
    v136 = 0;
    __p = 0;
    v126 = 0;
    v127 = 0;
    do
    {
      v80 = *v68;
      v81 = *((_QWORD *)v68 + 1);
      v82 = v135;
      if ((unint64_t)v135 >= v136)
      {
        v84 = v134;
        v85 = (v135 - v134) >> 2;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v87 = v136 - (_QWORD)v134;
        if ((uint64_t)(v136 - (_QWORD)v134) >> 1 > v86)
          v86 = v87 >> 1;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
          v88 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (v88)
        {
          v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v136, v88);
          v84 = v134;
          v82 = v135;
        }
        else
        {
          v89 = 0;
        }
        v90 = &v89[4 * v85];
        *(_DWORD *)v90 = v80;
        v83 = v90 + 4;
        while (v82 != v84)
        {
          v91 = *((_DWORD *)v82 - 1);
          v82 -= 4;
          *((_DWORD *)v90 - 1) = v91;
          v90 -= 4;
        }
        v134 = v90;
        v135 = v83;
        v136 = (unint64_t)&v89[4 * v88];
        if (v84)
          operator delete(v84);
      }
      else
      {
        *(_DWORD *)v135 = v80;
        v83 = v82 + 4;
      }
      v135 = v83;
      v92 = v126;
      if ((unint64_t)v126 >= v127)
      {
        v94 = __p;
        v95 = ((char *)v126 - (_BYTE *)__p) >> 3;
        v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v97 = v127 - (_QWORD)__p;
        if ((uint64_t)(v127 - (_QWORD)__p) >> 2 > v96)
          v96 = v97 >> 2;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
          v98 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v98 = v96;
        if (v98)
        {
          v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v98);
          v94 = __p;
          v92 = v126;
        }
        else
        {
          v99 = 0;
        }
        v100 = &v99[8 * v95];
        *(_QWORD *)v100 = v81;
        v93 = v100 + 8;
        while (v92 != v94)
        {
          v101 = *--v92;
          *((_QWORD *)v100 - 1) = v101;
          v100 -= 8;
        }
        __p = v100;
        v126 = v93;
        v127 = (unint64_t)&v99[8 * v98];
        if (v94)
          operator delete(v94);
      }
      else
      {
        *v126 = v81;
        v93 = v92 + 1;
      }
      v126 = v93;
      v68 += 4;
    }
    while (v68 != v69);
    v102 = *(v93 - 1);
    if (v102 == 1)
    {
      v123 = 0uLL;
      v124 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v123, v134, (uint64_t)v135, (v135 - v134) >> 2);
      v103 = a3;
      memset(v122, 0, sizeof(v122));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v122, __p, (uint64_t)v126, ((char *)v126 - (_BYTE *)__p) >> 3);
      *(_DWORD *)a3 = 3;
      *(_OWORD *)(a3 + 8) = v123;
      v105 = v124;
      v123 = 0uLL;
      v124 = 0;
      v106 = v122[0];
      *(_QWORD *)(a3 + 24) = v105;
      *(_QWORD *)(a3 + 32) = v106;
      v107 = v122;
    }
    else
    {
      v103 = a3;
      if (v102)
      {
        v108 = (*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2;
        if ((int)v108 - 1 < 0)
        {
          v110 = 1;
        }
        else
        {
          v109 = 8 * (v108 - 1);
          v110 = 1;
          do
          {
            LODWORD(v108) = v108 - 1;
            if ((_DWORD)v108 != *(v115[1] - 1))
            {
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + v109) != v110)
                break;
              v110 *= mlx::core::array::shape(this, v108);
            }
            v109 -= 8;
          }
          while ((int)v108 > 0);
          v102 = *(v126 - 1);
        }
        v104 = v134;
        if (v102 <= v110)
        {
          v120 = 0uLL;
          v121 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v120, v134, (uint64_t)v135, (v135 - v134) >> 2);
          memset(v119, 0, sizeof(v119));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v119, __p, (uint64_t)v126, ((char *)v126 - (_BYTE *)__p) >> 3);
          *(_DWORD *)a3 = 4;
          *(_OWORD *)(a3 + 8) = v120;
          v113 = v121;
          v120 = 0uLL;
          v121 = 0;
          v114 = v119[0];
          *(_QWORD *)(a3 + 24) = v113;
          *(_QWORD *)(a3 + 32) = v114;
          v107 = v119;
          goto LABEL_137;
        }
      }
      else
      {
        v104 = v134;
      }
      v117 = 0uLL;
      v118 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v117, v104, (uint64_t)v135, (v135 - v104) >> 2);
      memset(v116, 0, sizeof(v116));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v116, __p, (uint64_t)v126, ((char *)v126 - (_BYTE *)__p) >> 3);
      *(_DWORD *)a3 = 5;
      *(_OWORD *)(a3 + 8) = v117;
      v111 = v118;
      v117 = 0uLL;
      v118 = 0;
      v112 = v116[0];
      *(_QWORD *)(a3 + 24) = v111;
      *(_QWORD *)(a3 + 32) = v112;
      v107 = v116;
    }
LABEL_137:
    *(_OWORD *)(v103 + 40) = *(_OWORD *)(v107 + 1);
    v107[1] = 0;
    v107[2] = 0;
    *v107 = 0;
    if (__p)
    {
      v126 = __p;
      operator delete(__p);
    }
    if (v134)
    {
      v135 = v134;
      operator delete(v134);
    }
    if (v137)
    {
      v138 = v137;
      operator delete(v137);
    }
    return;
  }
  v8 = mlx::core::array::shape(this, *v7);
  v9 = (char *)operator new(4uLL);
  v137 = v9;
  *(_DWORD *)v9 = v8;
  v138 = v9 + 4;
  v139[0] = v9 + 4;
  v10 = *a2;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8 * **a2);
  v12 = (char *)operator new(8uLL);
  v134 = v12;
  *(_QWORD *)v12 = v11;
  v13 = v12 + 8;
  v135 = v13;
  v136 = (unint64_t)v13;
  if ((unint64_t)((char *)a2[1] - (char *)v10) >= 5)
  {
    v14 = 1;
    do
    {
      v15 = v10[v14];
      if (v15 - 1 == v10[v14 - 1])
      {
        v16 = mlx::core::array::shape(this, v15);
        *((_DWORD *)v138 - 1) *= v16;
        v17 = a2;
        v10 = *a2;
        *((_QWORD *)v135 - 1) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8 * (*a2)[v14]);
      }
      else
      {
        v18 = mlx::core::array::shape(this, v15);
        v19 = v18;
        v20 = v138;
        if ((unint64_t)v138 >= v139[0])
        {
          v22 = v137;
          v23 = (v138 - v137) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v25 = v139[0] - (_QWORD)v137;
          if ((uint64_t)(v139[0] - (_QWORD)v137) >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v139, v26);
            v22 = v137;
            v20 = v138;
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v19;
          v21 = v28 + 4;
          while (v20 != v22)
          {
            v29 = *((_DWORD *)v20 - 1);
            v20 = (_QWORD *)((char *)v20 - 4);
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          v137 = v28;
          v138 = v21;
          v139[0] = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v138 = v18;
          v21 = (char *)v20 + 4;
        }
        v138 = v21;
        v30 = (*a2)[v14];
        v31 = *(_QWORD *)(*(_QWORD *)this + 24);
        v32 = v135;
        if ((unint64_t)v135 >= v136)
        {
          v34 = v134;
          v35 = (v135 - v134) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = v136 - (_QWORD)v134;
          if ((uint64_t)(v136 - (_QWORD)v134) >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v136, v38);
            v34 = v134;
            v32 = v135;
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[8 * v35];
          *(_QWORD *)v40 = *(_QWORD *)(v31 + 8 * v30);
          v33 = v40 + 8;
          while (v32 != v34)
          {
            v41 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v40 - 1) = v41;
            v40 -= 8;
          }
          v134 = v40;
          v135 = v33;
          v136 = (unint64_t)&v39[8 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_QWORD *)v135 = *(_QWORD *)(v31 + 8 * v30);
          v33 = v32 + 8;
        }
        v135 = v33;
        v17 = a2;
        v10 = *a2;
      }
      ++v14;
    }
    while (v14 < v17[1] - v10);
    v13 = v135;
  }
  v42 = *((_QWORD *)v13 - 1);
  if (v42)
  {
    if (v42 == 1)
    {
      v132 = 0uLL;
      v133 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v132, v137, (uint64_t)v138, (v138 - v137) >> 2);
      memset(v131, 0, sizeof(v131));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v131, v134, (uint64_t)v135, (v135 - v134) >> 3);
      *(_DWORD *)a3 = 1;
      *(_OWORD *)(a3 + 8) = v132;
      v43 = v133;
      v132 = 0uLL;
      v133 = 0;
      v44 = v131[0];
      *(_QWORD *)(a3 + 24) = v43;
      *(_QWORD *)(a3 + 32) = v44;
      v45 = v131;
    }
    else
    {
      v129 = 0uLL;
      v130 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v129, v137, (uint64_t)v138, (v138 - v137) >> 2);
      memset(v128, 0, sizeof(v128));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v128, v134, (uint64_t)v135, (v135 - v134) >> 3);
      *(_DWORD *)a3 = 2;
      *(_OWORD *)(a3 + 8) = v129;
      v47 = v130;
      v129 = 0uLL;
      v130 = 0;
      v48 = v128[0];
      *(_QWORD *)(a3 + 24) = v47;
      *(_QWORD *)(a3 + 32) = v48;
      v45 = v128;
    }
    v46 = 0;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(v45 + 1);
    v45[1] = 0;
    v45[2] = 0;
    *v45 = 0;
  }
  else
  {
    v46 = 1;
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (v46)
  {
    v7 = *a2;
    goto LABEL_56;
  }
}

void sub_242310038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  v40 = *(void **)(v38 - 144);
  if (v40)
  {
    *(_QWORD *)(v38 - 136) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v38 - 120);
  if (v41)
  {
    *(_QWORD *)(v38 - 112) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void mlx::core::`anonymous namespace'::shapes_without_reduction_axes(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  void *__p;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;

  v6 = *a1;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
  v7 = *a1;
  v16 = 0;
  v17 = 0;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v7 + 24), *(_QWORD *)(v7 + 32), (uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 3);
  v8 = (a2[1] - *a2) >> 2;
  if ((int)v8 - 1 >= 0)
  {
    v9 = 4 * (v8 - 1);
    do
    {
      v10 = *(int *)(*a2 + v9);
      v11 = (char *)v18 + 4 * v10;
      v12 = v19 - (v11 + 4);
      if (v19 != v11 + 4)
        memmove((char *)v18 + 4 * v10, v11 + 4, v19 - (v11 + 4));
      v19 = &v11[v12];
      v13 = (char *)__p + 8 * v10;
      v14 = v16 - (v13 + 8);
      if (v16 != v13 + 8)
        memmove((char *)__p + 8 * v10, v13 + 8, v16 - (v13 + 8));
      v16 = &v13[v14];
      LODWORD(v8) = v8 - 1;
      v9 -= 4;
    }
    while ((int)v8 > 0);
  }
  std::pair<std::vector<int>,std::vector<unsigned long>>::pair[abi:ne180100]<std::vector<int>&,std::vector<unsigned long>&,0>(a3, (uint64_t)&v18, (uint64_t)&__p);
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = (char *)v18;
    operator delete(v18);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  void *__p;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;

  v6 = *a1;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
  v7 = *a1;
  v16 = 0;
  v17 = 0;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v7 + 24), *(_QWORD *)(v7 + 32), (uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 3);
  v8 = (a2[1] - *a2) >> 2;
  if ((int)v8 - 1 >= 0)
  {
    v9 = 4 * (v8 - 1);
    do
    {
      v10 = *(int *)(*a2 + v9);
      v11 = (char *)v18 + 4 * v10;
      v12 = v19 - (v11 + 4);
      if (v19 != v11 + 4)
        memmove((char *)v18 + 4 * v10, v11 + 4, v19 - (v11 + 4));
      v19 = &v11[v12];
      v13 = (char *)__p + 8 * v10;
      v14 = v16 - (v13 + 8);
      if (v16 != v13 + 8)
        memmove((char *)__p + 8 * v10, v13 + 8, v16 - (v13 + 8));
      v16 = &v13[v14];
      LODWORD(v8) = v8 - 1;
      v9 -= 4;
    }
    while ((int)v8 > 0);
  }
  std::pair<std::vector<int>,std::vector<unsigned long>>::pair[abi:ne180100]<std::vector<int>&,std::vector<unsigned long>&,0>(a3, (uint64_t)&v18, (uint64_t)&__p);
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = (char *)v18;
    operator delete(v18);
  }
}

void sub_242310248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

_OWORD *_ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS3_EEEclEPKfPfim(_OWORD *result, float32x4_t *a2, int a3, unint64_t a4)
{
  int i;
  unint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;

  if (a3 >= 1)
  {
    for (i = 0; i != a3; ++i)
    {
      v5 = a4;
      v6 = a2;
      if (a4 >= 0x10)
      {
        do
        {
          v7 = *((float32x4_t *)result + 2);
          v8 = *((float32x4_t *)result + 3);
          v9 = *(float32x4_t *)result;
          v10 = *((float32x4_t *)result + 1);
          result += 4;
          v11 = vaddq_f32(v10, v6[1]);
          v12 = vaddq_f32(v9, *v6);
          v13 = vaddq_f32(v8, v6[3]);
          v6[2] = vaddq_f32(v7, v6[2]);
          v6[3] = v13;
          *v6 = v12;
          v6[1] = v11;
          v6 += 4;
          v5 -= 16;
        }
        while (v5 > 0xF);
      }
      for (; v5; --v5)
      {
        v14 = *(float *)result;
        result = (_OWORD *)((char *)result + 4);
        v6->f32[0] = v6->f32[0] + v14;
        v6 = (float32x4_t *)((char *)v6 + 4);
      }
    }
  }
  return result;
}

void mlx::core::ReductionPlan::~ReductionPlan(mlx::core::ReductionPlan *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

int *std::__introsort<std::_ClassicAlgPolicy,mlx::core::`anonymous namespace'::get_reduction_plan(mlx::core::array const&,std::vector<int>)::$_0 &,std::pair<int,unsigned long> *,false>(int *result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  _DWORD *v56;
  BOOL v58;
  uint64_t v59;
  _DWORD *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t v105;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(_QWORD *)(a2 - 8);
        v43 = *(_QWORD *)(v8 + 8);
        if (v42 > v43)
        {
          v44 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v44;
          *(_QWORD *)(v8 + 8) = v42;
          *(_QWORD *)(a2 - 8) = v43;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v45 = *(_QWORD *)(a2 - 8);
        v46 = *(_QWORD *)(v8 + 56);
        if (v45 > v46)
        {
          v47 = *(_DWORD *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v47;
          *(_QWORD *)(v8 + 56) = v45;
          *(_QWORD *)(a2 - 8) = v46;
          v48 = *(_QWORD *)(v8 + 56);
          v49 = *(_QWORD *)(v8 + 40);
          if (v48 > v49)
          {
            v50 = *(_DWORD *)(v8 + 32);
            v51 = *(_DWORD *)(v8 + 48);
            *(_DWORD *)(v8 + 32) = v51;
            *(_DWORD *)(v8 + 48) = v50;
            *(_QWORD *)(v8 + 40) = v48;
            *(_QWORD *)(v8 + 56) = v49;
            v52 = *(_QWORD *)(v8 + 24);
            if (v48 > v52)
            {
              v53 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v51;
              *(_DWORD *)(v8 + 32) = v53;
              *(_QWORD *)(v8 + 24) = v48;
              *(_QWORD *)(v8 + 40) = v52;
              v54 = *(_QWORD *)(v8 + 8);
              if (v48 > v54)
              {
                v55 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v51;
                *(_DWORD *)(v8 + 16) = v55;
                *(_QWORD *)(v8 + 8) = v48;
                *(_QWORD *)(v8 + 24) = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v56 = (_DWORD *)(v8 + 16);
          v58 = v8 == a2 || v56 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = (_DWORD *)v8;
              do
              {
                v61 = *((_QWORD *)v60 + 3);
                v62 = *((_QWORD *)v60 + 1);
                v60 = v56;
                if (v61 > v62)
                {
                  v63 = *v56;
                  v64 = v59;
                  while (1)
                  {
                    v65 = v8 + v64;
                    *(_DWORD *)(v65 + 16) = *(_DWORD *)(v8 + v64);
                    *(_QWORD *)(v65 + 24) = *(_QWORD *)(v8 + v64 + 8);
                    if (!v64)
                      break;
                    v64 -= 16;
                    if (v61 <= *(_QWORD *)(v65 - 8))
                    {
                      v66 = v8 + v64 + 16;
                      goto LABEL_79;
                    }
                  }
                  v66 = v8;
LABEL_79:
                  *(_DWORD *)v66 = v63;
                  *(_QWORD *)(v66 + 8) = v61;
                }
                v56 = v60 + 4;
                v59 += 16;
              }
              while (v60 + 4 != (_DWORD *)a2);
            }
          }
          else if (!v58)
          {
            v99 = (unint64_t *)(v8 + 24);
            do
            {
              v100 = *(_QWORD *)(v7 + 24);
              v101 = *(_QWORD *)(v7 + 8);
              v7 = (uint64_t)v56;
              if (v100 > v101)
              {
                v102 = *(_QWORD *)v56;
                v103 = v99;
                do
                {
                  v104 = v103;
                  *((_DWORD *)v103 - 2) = *((_DWORD *)v103 - 6);
                  v105 = *(v103 - 2);
                  v103 -= 2;
                  *v104 = v105;
                }
                while (v100 > *(v104 - 4));
                *((_DWORD *)v103 - 2) = v102;
                *v103 = v100;
              }
              v56 = (_DWORD *)(v7 + 16);
              v99 += 2;
            }
            while (v7 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v67 = (v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = v8 + 16 * v70;
                if (2 * v69 + 2 < (uint64_t)v10)
                {
                  v72 = *(_QWORD *)(v71 + 8);
                  v73 = *(_QWORD *)(v71 + 24);
                  v71 += 16 * (v72 > v73);
                  if (v72 > v73)
                    v70 = 2 * v69 + 2;
                }
                v74 = v8 + 16 * v69;
                v75 = *(_QWORD *)(v74 + 8);
                if (*(_QWORD *)(v71 + 8) <= v75)
                {
                  v76 = *(_DWORD *)v74;
                  do
                  {
                    v77 = v74;
                    v74 = v71;
                    *(_DWORD *)v77 = *(_DWORD *)v71;
                    *(_QWORD *)(v77 + 8) = *(_QWORD *)(v71 + 8);
                    if (v67 < v70)
                      break;
                    v78 = (2 * v70) | 1;
                    v71 = v8 + 16 * v78;
                    v79 = 2 * v70 + 2;
                    if (v79 < (uint64_t)v10)
                    {
                      v80 = *(_QWORD *)(v71 + 8);
                      v81 = *(_QWORD *)(v71 + 24);
                      v71 += 16 * (v80 > v81);
                      if (v80 > v81)
                        v78 = v79;
                    }
                    result = *(int **)(v71 + 8);
                    v70 = v78;
                  }
                  while ((unint64_t)result <= v75);
                  *(_DWORD *)v74 = v76;
                  *(_QWORD *)(v74 + 8) = v75;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v82 = (unint64_t)v9 >> 4;
            do
            {
              v83 = 0;
              v84 = *(_DWORD *)v8;
              v85 = *(_QWORD *)(v8 + 8);
              v86 = v8;
              do
              {
                v87 = v86 + 16 * v83 + 16;
                v88 = (2 * v83) | 1;
                v89 = 2 * v83 + 2;
                if (v89 < v82)
                {
                  v90 = *(_QWORD *)(v87 + 8);
                  v91 = *(_QWORD *)(v87 + 24);
                  v87 += 16 * (v90 > v91);
                  if (v90 > v91)
                    v88 = v89;
                }
                *(_DWORD *)v86 = *(_DWORD *)v87;
                *(_QWORD *)(v86 + 8) = *(_QWORD *)(v87 + 8);
                v86 = v87;
                v83 = v88;
              }
              while (v88 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
              if (v87 == a2 - 16)
              {
                *(_DWORD *)v87 = v84;
                *(_QWORD *)(v87 + 8) = v85;
              }
              else
              {
                *(_DWORD *)v87 = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v87 + 8) = *(_QWORD *)(a2 - 8);
                *(_DWORD *)(a2 - 16) = v84;
                *(_QWORD *)(a2 - 8) = v85;
                v92 = v87 - v8 + 16;
                if (v92 >= 17)
                {
                  v93 = (((unint64_t)v92 >> 4) - 2) >> 1;
                  v94 = v8 + 16 * v93;
                  v95 = *(_QWORD *)(v87 + 8);
                  if (*(_QWORD *)(v94 + 8) > v95)
                  {
                    v96 = *(_DWORD *)v87;
                    do
                    {
                      v97 = v87;
                      v87 = v94;
                      *(_DWORD *)v97 = *(_DWORD *)v94;
                      *(_QWORD *)(v97 + 8) = *(_QWORD *)(v94 + 8);
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = v8 + 16 * v93;
                    }
                    while (*(_QWORD *)(v94 + 8) > v95);
                    *(_DWORD *)v87 = v96;
                    *(_QWORD *)(v87 + 8) = v95;
                  }
                }
              }
              a2 -= 16;
            }
            while (v82-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = v8 + 16 * (v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
        }
        else
        {
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v14;
        }
        --a3;
        v15 = *(_QWORD *)v7;
        if ((a4 & 1) == 0)
        {
          v16 = *(_QWORD *)(v7 + 8);
          if (*(_QWORD *)(v7 - 8) > v16)
            goto LABEL_12;
          if (v16 <= *(_QWORD *)(a2 - 8))
          {
            v33 = v7 + 16;
            do
            {
              v8 = v33;
              if (v33 >= a2)
                break;
              v34 = *(_QWORD *)(v33 + 8);
              v33 += 16;
            }
            while (v16 <= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = v31 + 16;
              v32 = *(_QWORD *)(v31 + 24);
              v31 += 16;
            }
            while (v16 <= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 16;
              v37 = *(_QWORD *)(v36 - 8);
              v36 -= 16;
            }
            while (v16 > v37);
          }
          while (v8 < v35)
          {
            v38 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v35;
            *(_DWORD *)v35 = v38;
            v39 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v35 + 8);
            *(_QWORD *)(v35 + 8) = v39;
            do
            {
              v40 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v16 <= v40);
            do
            {
              v41 = *(_QWORD *)(v35 - 8);
              v35 -= 16;
            }
            while (v16 > v41);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v15;
          *(_QWORD *)(v8 - 8) = v16;
          continue;
        }
        v16 = *(_QWORD *)(v7 + 8);
LABEL_12:
        v17 = 0;
        do
        {
          v18 = *(_QWORD *)(v7 + v17 + 24);
          v17 += 16;
        }
        while (v18 > v16);
        v19 = v7 + v17;
        v20 = a2;
        if (v17 == 16)
        {
          v23 = a2;
          while (v19 < v23)
          {
            v21 = v23 - 16;
            v24 = *(_QWORD *)(v23 - 8);
            v23 -= 16;
            if (v24 > v16)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 16;
            v22 = *(_QWORD *)(v20 - 8);
            v20 -= 16;
          }
          while (v22 <= v16);
        }
LABEL_22:
        v8 = v19;
        if (v19 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v25;
            *(_DWORD *)v25 = v26;
            v27 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(v25 + 8) = v27;
            do
            {
              v28 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v28 > v16);
            do
            {
              v29 = *(_QWORD *)(v25 - 8);
              v25 -= 16;
            }
            while (v29 <= v16);
          }
          while (v8 < v25);
        }
        if (v8 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v15;
        *(_QWORD *)(v8 - 8) = v16;
        if (v19 < v21)
        {
LABEL_33:
          a4 = 0;
          continue;
        }
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 16;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  _DWORD *v56;
  BOOL v58;
  uint64_t v59;
  _DWORD *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t v105;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(_QWORD *)(a2 - 8);
        v43 = *(_QWORD *)(v8 + 8);
        if (v42 > v43)
        {
          v44 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v44;
          *(_QWORD *)(v8 + 8) = v42;
          *(_QWORD *)(a2 - 8) = v43;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v45 = *(_QWORD *)(a2 - 8);
        v46 = *(_QWORD *)(v8 + 56);
        if (v45 > v46)
        {
          v47 = *(_DWORD *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v47;
          *(_QWORD *)(v8 + 56) = v45;
          *(_QWORD *)(a2 - 8) = v46;
          v48 = *(_QWORD *)(v8 + 56);
          v49 = *(_QWORD *)(v8 + 40);
          if (v48 > v49)
          {
            v50 = *(_DWORD *)(v8 + 32);
            v51 = *(_DWORD *)(v8 + 48);
            *(_DWORD *)(v8 + 32) = v51;
            *(_DWORD *)(v8 + 48) = v50;
            *(_QWORD *)(v8 + 40) = v48;
            *(_QWORD *)(v8 + 56) = v49;
            v52 = *(_QWORD *)(v8 + 24);
            if (v48 > v52)
            {
              v53 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v51;
              *(_DWORD *)(v8 + 32) = v53;
              *(_QWORD *)(v8 + 24) = v48;
              *(_QWORD *)(v8 + 40) = v52;
              v54 = *(_QWORD *)(v8 + 8);
              if (v48 > v54)
              {
                v55 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v51;
                *(_DWORD *)(v8 + 16) = v55;
                *(_QWORD *)(v8 + 8) = v48;
                *(_QWORD *)(v8 + 24) = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v56 = (_DWORD *)(v8 + 16);
          v58 = v8 == a2 || v56 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = (_DWORD *)v8;
              do
              {
                v61 = *((_QWORD *)v60 + 3);
                v62 = *((_QWORD *)v60 + 1);
                v60 = v56;
                if (v61 > v62)
                {
                  v63 = *v56;
                  v64 = v59;
                  while (1)
                  {
                    v65 = v8 + v64;
                    *(_DWORD *)(v65 + 16) = *(_DWORD *)(v8 + v64);
                    *(_QWORD *)(v65 + 24) = *(_QWORD *)(v8 + v64 + 8);
                    if (!v64)
                      break;
                    v64 -= 16;
                    if (v61 <= *(_QWORD *)(v65 - 8))
                    {
                      v66 = v8 + v64 + 16;
                      goto LABEL_79;
                    }
                  }
                  v66 = v8;
LABEL_79:
                  *(_DWORD *)v66 = v63;
                  *(_QWORD *)(v66 + 8) = v61;
                }
                v56 = v60 + 4;
                v59 += 16;
              }
              while (v60 + 4 != (_DWORD *)a2);
            }
          }
          else if (!v58)
          {
            v99 = (unint64_t *)(v8 + 24);
            do
            {
              v100 = *(_QWORD *)(v7 + 24);
              v101 = *(_QWORD *)(v7 + 8);
              v7 = (uint64_t)v56;
              if (v100 > v101)
              {
                v102 = *(_QWORD *)v56;
                v103 = v99;
                do
                {
                  v104 = v103;
                  *((_DWORD *)v103 - 2) = *((_DWORD *)v103 - 6);
                  v105 = *(v103 - 2);
                  v103 -= 2;
                  *v104 = v105;
                }
                while (v100 > *(v104 - 4));
                *((_DWORD *)v103 - 2) = v102;
                *v103 = v100;
              }
              v56 = (_DWORD *)(v7 + 16);
              v99 += 2;
            }
            while (v7 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v67 = (v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = v8 + 16 * v70;
                if (2 * v69 + 2 < (uint64_t)v10)
                {
                  v72 = *(_QWORD *)(v71 + 8);
                  v73 = *(_QWORD *)(v71 + 24);
                  v71 += 16 * (v72 > v73);
                  if (v72 > v73)
                    v70 = 2 * v69 + 2;
                }
                v74 = v8 + 16 * v69;
                v75 = *(_QWORD *)(v74 + 8);
                if (*(_QWORD *)(v71 + 8) <= v75)
                {
                  v76 = *(_DWORD *)v74;
                  do
                  {
                    v77 = v74;
                    v74 = v71;
                    *(_DWORD *)v77 = *(_DWORD *)v71;
                    *(_QWORD *)(v77 + 8) = *(_QWORD *)(v71 + 8);
                    if (v67 < v70)
                      break;
                    v78 = (2 * v70) | 1;
                    v71 = v8 + 16 * v78;
                    v79 = 2 * v70 + 2;
                    if (v79 < (uint64_t)v10)
                    {
                      v80 = *(_QWORD *)(v71 + 8);
                      v81 = *(_QWORD *)(v71 + 24);
                      v71 += 16 * (v80 > v81);
                      if (v80 > v81)
                        v78 = v79;
                    }
                    result = *(int **)(v71 + 8);
                    v70 = v78;
                  }
                  while ((unint64_t)result <= v75);
                  *(_DWORD *)v74 = v76;
                  *(_QWORD *)(v74 + 8) = v75;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v82 = (unint64_t)v9 >> 4;
            do
            {
              v83 = 0;
              v84 = *(_DWORD *)v8;
              v85 = *(_QWORD *)(v8 + 8);
              v86 = v8;
              do
              {
                v87 = v86 + 16 * v83 + 16;
                v88 = (2 * v83) | 1;
                v89 = 2 * v83 + 2;
                if (v89 < v82)
                {
                  v90 = *(_QWORD *)(v87 + 8);
                  v91 = *(_QWORD *)(v87 + 24);
                  v87 += 16 * (v90 > v91);
                  if (v90 > v91)
                    v88 = v89;
                }
                *(_DWORD *)v86 = *(_DWORD *)v87;
                *(_QWORD *)(v86 + 8) = *(_QWORD *)(v87 + 8);
                v86 = v87;
                v83 = v88;
              }
              while (v88 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
              if (v87 == a2 - 16)
              {
                *(_DWORD *)v87 = v84;
                *(_QWORD *)(v87 + 8) = v85;
              }
              else
              {
                *(_DWORD *)v87 = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v87 + 8) = *(_QWORD *)(a2 - 8);
                *(_DWORD *)(a2 - 16) = v84;
                *(_QWORD *)(a2 - 8) = v85;
                v92 = v87 - v8 + 16;
                if (v92 >= 17)
                {
                  v93 = (((unint64_t)v92 >> 4) - 2) >> 1;
                  v94 = v8 + 16 * v93;
                  v95 = *(_QWORD *)(v87 + 8);
                  if (*(_QWORD *)(v94 + 8) > v95)
                  {
                    v96 = *(_DWORD *)v87;
                    do
                    {
                      v97 = v87;
                      v87 = v94;
                      *(_DWORD *)v97 = *(_DWORD *)v94;
                      *(_QWORD *)(v97 + 8) = *(_QWORD *)(v94 + 8);
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = v8 + 16 * v93;
                    }
                    while (*(_QWORD *)(v94 + 8) > v95);
                    *(_DWORD *)v87 = v96;
                    *(_QWORD *)(v87 + 8) = v95;
                  }
                }
              }
              a2 -= 16;
            }
            while (v82-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = v8 + 16 * (v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
        }
        else
        {
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v14;
        }
        --a3;
        v15 = *(_QWORD *)v7;
        if ((a4 & 1) == 0)
        {
          v16 = *(_QWORD *)(v7 + 8);
          if (*(_QWORD *)(v7 - 8) > v16)
            goto LABEL_12;
          if (v16 <= *(_QWORD *)(a2 - 8))
          {
            v33 = v7 + 16;
            do
            {
              v8 = v33;
              if (v33 >= a2)
                break;
              v34 = *(_QWORD *)(v33 + 8);
              v33 += 16;
            }
            while (v16 <= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = v31 + 16;
              v32 = *(_QWORD *)(v31 + 24);
              v31 += 16;
            }
            while (v16 <= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 16;
              v37 = *(_QWORD *)(v36 - 8);
              v36 -= 16;
            }
            while (v16 > v37);
          }
          while (v8 < v35)
          {
            v38 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v35;
            *(_DWORD *)v35 = v38;
            v39 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v35 + 8);
            *(_QWORD *)(v35 + 8) = v39;
            do
            {
              v40 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v16 <= v40);
            do
            {
              v41 = *(_QWORD *)(v35 - 8);
              v35 -= 16;
            }
            while (v16 > v41);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v15;
          *(_QWORD *)(v8 - 8) = v16;
          continue;
        }
        v16 = *(_QWORD *)(v7 + 8);
LABEL_12:
        v17 = 0;
        do
        {
          v18 = *(_QWORD *)(v7 + v17 + 24);
          v17 += 16;
        }
        while (v18 > v16);
        v19 = v7 + v17;
        v20 = a2;
        if (v17 == 16)
        {
          v23 = a2;
          while (v19 < v23)
          {
            v21 = v23 - 16;
            v24 = *(_QWORD *)(v23 - 8);
            v23 -= 16;
            if (v24 > v16)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 16;
            v22 = *(_QWORD *)(v20 - 8);
            v20 -= 16;
          }
          while (v22 <= v16);
        }
LABEL_22:
        v8 = v19;
        if (v19 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v25;
            *(_DWORD *)v25 = v26;
            v27 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(v25 + 8) = v27;
            do
            {
              v28 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v28 > v16);
            do
            {
              v29 = *(_QWORD *)(v25 - 8);
              v25 -= 16;
            }
            while (v29 <= v16);
          }
          while (v8 < v25);
        }
        if (v8 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v15;
        *(_QWORD *)(v8 - 8) = v16;
        if (v19 < v21)
        {
LABEL_33:
          a4 = 0;
          continue;
        }
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 16;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::`anonymous namespace'::get_reduction_plan(mlx::core::array const&,std::vector<int>)::$_0 &,std::pair<int,unsigned long> *>(int *result, int *a2, int *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)a3 + 1);
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      *((_QWORD *)a2 + 1) = v5;
      *((_QWORD *)a3 + 1) = v3;
      v8 = *((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)result + 1);
      if (v8 > v9)
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
        *((_QWORD *)result + 1) = v8;
        *((_QWORD *)a2 + 1) = v9;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      *a2 = v6;
      *((_QWORD *)result + 1) = v3;
      *((_QWORD *)a2 + 1) = v4;
      v11 = *((_QWORD *)a3 + 1);
      if (v11 <= v4)
        return result;
      *a2 = *a3;
      *a3 = v6;
      *((_QWORD *)a2 + 1) = v11;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      *((_QWORD *)result + 1) = v5;
    }
    *((_QWORD *)a3 + 1) = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::`anonymous namespace'::get_reduction_plan(mlx::core::array const&,std::vector<int>)::$_0 &,std::pair<int,unsigned long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 8);
      v7 = *(_QWORD *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(_QWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v18 = *(_QWORD *)(a2 - 8);
      v19 = *(_QWORD *)(a1 + 56);
      if (v18 > v19)
      {
        v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a2 - 8) = v19;
        v21 = *(_QWORD *)(a1 + 56);
        v22 = *(_QWORD *)(a1 + 40);
        if (v21 > v22)
        {
          v23 = *(_DWORD *)(a1 + 32);
          v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(_QWORD *)(a1 + 40) = v21;
          *(_QWORD *)(a1 + 56) = v22;
          v25 = *(_QWORD *)(a1 + 24);
          if (v21 > v25)
          {
            v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(_QWORD *)(a1 + 24) = v21;
            *(_QWORD *)(a1 + 40) = v25;
            v27 = *(_QWORD *)(a1 + 8);
            if (v21 > v27)
            {
              v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(_QWORD *)(a1 + 8) = v21;
              *(_QWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)(v10 + 8);
    if (v13 > *(_QWORD *)(v9 + 8))
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(_QWORD *)(v16 + 56) = *(_QWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 <= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(_QWORD *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 8);
      v7 = *(_QWORD *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(_QWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v18 = *(_QWORD *)(a2 - 8);
      v19 = *(_QWORD *)(a1 + 56);
      if (v18 > v19)
      {
        v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a2 - 8) = v19;
        v21 = *(_QWORD *)(a1 + 56);
        v22 = *(_QWORD *)(a1 + 40);
        if (v21 > v22)
        {
          v23 = *(_DWORD *)(a1 + 32);
          v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(_QWORD *)(a1 + 40) = v21;
          *(_QWORD *)(a1 + 56) = v22;
          v25 = *(_QWORD *)(a1 + 24);
          if (v21 > v25)
          {
            v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(_QWORD *)(a1 + 24) = v21;
            *(_QWORD *)(a1 + 40) = v25;
            v27 = *(_QWORD *)(a1 + 8);
            if (v21 > v27)
            {
              v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(_QWORD *)(a1 + 8) = v21;
              *(_QWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)(v10 + 8);
    if (v13 > *(_QWORD *)(v9 + 8))
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(_QWORD *)(v16 + 56) = *(_QWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 <= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(_QWORD *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mlx::core::`anonymous namespace'::get_reduction_plan(mlx::core::array const&,std::vector<int>)::$_0 &,std::pair<int,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *result;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 8);
  if (v9 > v10)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a4 + 8) = v10;
    v12 = *(_QWORD *)(a3 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v12 > v13)
    {
      v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v14;
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a3 + 8) = v13;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(_QWORD *)(a1 + 8);
      if (v15 > v16)
      {
        v17 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v17;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

_QWORD *std::pair<std::vector<int>,std::vector<unsigned long>>::pair[abi:ne180100]<std::vector<int>&,std::vector<unsigned long>&,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  return a1;
}

void sub_242310ED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(int,int)>::operator()(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void std::__function::__func<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::~__func()
{
  JUMPOUT(0x2426A82C4);
}

{
  JUMPOUT(0x2426A82C4);
}

__n128 std::__function::__func<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_251346518;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_251346A78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251346518;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

{
  __n128 result;

  *(_QWORD *)a2 = &off_251346A78;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::operator()(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = result;
  v4 = *a2;
  v5 = *a3;
  v6 = **(_QWORD **)(result + 8);
  v7 = *(_DWORD *)(v6 + 4 * v4);
  if (((*(_QWORD *)(*(_QWORD *)(result + 8) + 8) - v6) >> 2) - 1 <= v4)
  {
    if (v7 >= 1)
    {
      v10 = *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * v4);
      do
      {
        v11 = *(_QWORD *)(v3 + 32);
        v13 = v5;
        v12 = *(_QWORD *)(v11 + 24);
        if (!v12)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v13);
        v5 += v10;
        --v7;
      }
      while (v7);
    }
  }
  else if (v7 >= 1)
  {
    v8 = *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * v4);
    v9 = v4 + 1;
    do
    {
      result = std::function<void ()(int,int)>::operator()(*(_QWORD *)(v3 + 24), v9, v5);
      v5 += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = result;
  v4 = *a2;
  v5 = *a3;
  v6 = **(_QWORD **)(result + 8);
  v7 = *(_DWORD *)(v6 + 4 * v4);
  if (((*(_QWORD *)(*(_QWORD *)(result + 8) + 8) - v6) >> 2) - 1 <= v4)
  {
    if (v7 >= 1)
    {
      v10 = *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * v4);
      do
      {
        v11 = *(_QWORD *)(v3 + 32);
        v13 = v5;
        v12 = *(_QWORD *)(v11 + 24);
        if (!v12)
          std::__throw_bad_function_call[abi:ne180100]();
        result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v13);
        v5 += v10;
        --v7;
      }
      while (v7);
    }
  }
  else if (v7 >= 1)
  {
    v8 = *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * v4);
    v9 = v4 + 1;
    do
    {
      result = std::function<void ()(int,int)>::operator()(*(_QWORD *)(v3 + 24), v9, v5);
      v5 += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t std::__function::__func<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1},std::allocator<mlx::core::`anonymous namespace'::nd_loop(std::function<void ()(int)>,std::vector<int> const&,std::vector<unsigned long> const&)::{lambda(int,int)#1}>,void ()(int,int)>::target_type()
{
}

{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2426A82C4);
}

_QWORD *std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_242311290(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEED0Ev()
{
  JUMPOUT(0x2426A82C4);
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_2513465E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_2513465E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  const float *v2;
  float *v3;
  vDSP_Length v4;
  float result;
  float __C;

  v2 = (const float *)(**(_QWORD **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2);
  v3 = **(float ***)(a1 + 32);
  v4 = **(int **)(a1 + 40);
  __C = 0.0;
  vDSP_sve(v2, 1, &__C, v4);
  result = __C + *v3;
  *v3 = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEED0Ev()
{
  JUMPOUT(0x2426A82C4);
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_251346678;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_251346678;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_OWORD *_ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  return _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS3_EEEclEPKfPfim((_OWORD *)(**(_QWORD **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2), **(float32x4_t ***)(a1 + 32), **(_DWORD **)(a1 + 40), **(_QWORD **)(a1 + 48));
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEED0Ev()
{
  JUMPOUT(0x2426A82C4);
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_2513466F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2513466F8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  float *v2;
  float result;

  v2 = *(float **)(a1 + 16);
  result = *(float *)(**(_QWORD **)(a1 + 24) + 4 * **(int **)(a1 + 32) + 4 * *a2) + *v2;
  *v2 = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12SumReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__0ZNSB_8eval_cpuESI_SJ_E3__1EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12SumReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__0ZNS8_8eval_cpuESG_SH_E3__1EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_;
}

_OWORD *_ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS3_EEEclEPKfPfim(_OWORD *result, float32x4_t *a2, int a3, unint64_t a4)
{
  int i;
  unint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  __int32 v15;

  if (a3 >= 1)
  {
    for (i = 0; i != a3; ++i)
    {
      v5 = a4;
      v6 = a2;
      if (a4 >= 0x10)
      {
        do
        {
          v8 = *((float32x4_t *)result + 2);
          v7 = *((float32x4_t *)result + 3);
          v10 = *(float32x4_t *)result;
          v9 = *((float32x4_t *)result + 1);
          result += 4;
          v11 = vmaxnmq_f32(v10, *v6);
          v12 = vmaxnmq_f32(v9, v6[1]);
          v13 = vmaxnmq_f32(v7, v6[3]);
          v6[2] = vmaxnmq_f32(v8, v6[2]);
          v6[3] = v13;
          *v6 = v11;
          v6[1] = v12;
          v6 += 4;
          v5 -= 16;
        }
        while (v5 > 0xF);
      }
      for (; v5; --v5)
      {
        v14 = *(float *)result;
        result = (_OWORD *)((char *)result + 4);
        v15 = LODWORD(v14);
        if (v6->f32[0] >= v14)
          v15 = v6->i32[0];
        v6->i32[0] = v15;
        v6 = (float32x4_t *)((char *)v6 + 4);
      }
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEED0Ev()
{
  JUMPOUT(0x2426A82C4);
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_251346778;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_251346778;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  const float *v2;
  float *v3;
  vDSP_Length v4;
  float v5;
  float __C;

  v2 = (const float *)(**(_QWORD **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2);
  v3 = **(float ***)(a1 + 32);
  v4 = **(int **)(a1 + 40);
  __C = 0.0;
  vDSP_maxv(v2, 1, &__C, v4);
  v5 = *v3;
  if (*v3 < __C)
    v5 = __C;
  *v3 = v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEED0Ev()
{
  JUMPOUT(0x2426A82C4);
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_2513467F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_2513467F8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_OWORD *_ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  return _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS3_EEEclEPKfPfim((_OWORD *)(**(_QWORD **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2), **(float32x4_t ***)(a1 + 32), **(_DWORD **)(a1 + 40), **(_QWORD **)(a1 + 48));
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEED0Ev()
{
  JUMPOUT(0x2426A82C4);
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_251346878;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251346878;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEEclEOi(uint64_t result, int *a2)
{
  float *v2;
  float v3;

  v2 = *(float **)(result + 16);
  v3 = *(float *)(**(_QWORD **)(result + 24) + 4 * **(int **)(result + 32) + 4 * *a2);
  if (*v2 >= v3)
    v3 = *v2;
  *v2 = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MaxReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__2ZNSB_8eval_cpuESI_SJ_E3__3EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MaxReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__2ZNS8_8eval_cpuESG_SH_E3__3EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_;
}

_OWORD *_ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS3_EEEclEPKfPfim(_OWORD *result, float32x4_t *a2, int a3, unint64_t a4)
{
  int i;
  unint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  __int32 v15;

  if (a3 >= 1)
  {
    for (i = 0; i != a3; ++i)
    {
      v5 = a4;
      v6 = a2;
      if (a4 >= 0x10)
      {
        do
        {
          v8 = *((float32x4_t *)result + 2);
          v7 = *((float32x4_t *)result + 3);
          v10 = *(float32x4_t *)result;
          v9 = *((float32x4_t *)result + 1);
          result += 4;
          v11 = vminnmq_f32(v10, *v6);
          v12 = vminnmq_f32(v9, v6[1]);
          v13 = vminnmq_f32(v7, v6[3]);
          v6[2] = vminnmq_f32(v8, v6[2]);
          v6[3] = v13;
          *v6 = v11;
          v6[1] = v12;
          v6 += 4;
          v5 -= 16;
        }
        while (v5 > 0xF);
      }
      for (; v5; --v5)
      {
        v14 = *(float *)result;
        result = (_OWORD *)((char *)result + 4);
        v15 = LODWORD(v14);
        if (v14 >= v6->f32[0])
          v15 = v6->i32[0];
        v6->i32[0] = v15;
        v6 = (float32x4_t *)((char *)v6 + 4);
      }
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEED0Ev()
{
  JUMPOUT(0x2426A82C4);
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_2513468F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_2513468F8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  const float *v2;
  float *v3;
  vDSP_Length v4;
  float v5;
  float __C;

  v2 = (const float *)(**(_QWORD **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2);
  v3 = **(float ***)(a1 + 32);
  v4 = **(int **)(a1 + 40);
  __C = 0.0;
  vDSP_minv(v2, 1, &__C, v4);
  v5 = *v3;
  if (*v3 > __C)
    v5 = __C;
  *v3 = v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEED0Ev()
{
  JUMPOUT(0x2426A82C4);
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_251346978;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_251346978;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_OWORD *_ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEEclEOi(uint64_t a1, int *a2)
{
  return _ZN3mlx4core12_GLOBAL__N_113StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS3_EEEclEPKfPfim((_OWORD *)(**(_QWORD **)(a1 + 16) + 4 * **(int **)(a1 + 24) + 4 * *a2), **(float32x4_t ***)(a1 + 32), **(_DWORD **)(a1 + 40), **(_QWORD **)(a1 + 48));
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE0_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE0_;
}

void _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEED0Ev()
{
  JUMPOUT(0x2426A82C4);
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_2513469F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2513469F8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEEclEOi(uint64_t result, int *a2)
{
  float *v2;
  float v3;

  v2 = *(float **)(result + 16);
  v3 = *(float *)(**(_QWORD **)(result + 24) + 4 * **(int **)(result + 32) + 4 * *a2);
  if (*v2 <= v3)
    v3 = *v2;
  *v2 = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS4_13StridedReduceIfDv16_fLi16ENS4_12MinReductionIfS7_EEEEZNS3_6Reduce8eval_cpuERKNS_6vectorINS3_5arrayENS_9allocatorISD_EEEERSD_E3__4ZNSB_8eval_cpuESI_SJ_E3__5EEvRKSD_SJ_RKNSC_IiNSE_IiEEEET0_T1_T2_T3_EUliE1_NSE_ISW_EEFviEE11target_typeEv()
{
  return &_ZTIZN3mlx4core12_GLOBAL__N_112reduction_opIffNS1_13StridedReduceIfDv16_fLi16ENS1_12MinReductionIfS4_EEEEZNS0_6Reduce8eval_cpuERKNSt3__16vectorINS0_5arrayENS9_9allocatorISB_EEEERSB_E3__4ZNS8_8eval_cpuESG_SH_E3__5EEvRKSB_SH_RKNSA_IiNSC_IiEEEET0_T1_T2_T3_EUliE1_;
}

void mlx::core::inverse_impl(mlx::core *this, const mlx::core::array *a2, mlx::core::array *a3, float a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mlx::core::scheduler *v13;
  int v14;
  int v15;
  _QWORD v16[4];
  mlx::core::scheduler *v17;
  _QWORD v18[4];
  _QWORD v19[4];
  mlx::core::scheduler *v20;
  _QWORD v21[6];

  v21[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)this + 168) & 2) != 0)
    v5 = 1;
  else
    v5 = 2;
  mlx::core::copy(this, a2, v5, a4);
  v6 = *(_QWORD *)this;
  v7 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v7 == **(_QWORD **)this)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v8 = *(int *)(v7 - 4);
  v14 = 0;
  v15 = v8;
  v9 = *(_QWORD *)(v6 + 48);
  v10 = (v8 * v8);
  v19[0] = &unk_2513463C8;
  v19[1] = mlx::core::allocator::free;
  v19[3] = v19;
  v20 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * v8));
  v21[0] = &unk_2513463C8;
  v21[1] = mlx::core::allocator::free;
  v21[3] = v21;
  if (v9 >= v10)
  {
    v11 = 0;
    if (v9 / v10 <= 1)
      v12 = 1;
    else
      v12 = v9 / v10;
    do
    {
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v20);
      sgetrf_NEWLAPACK();
      sgetri_NEWLAPACK();
      v13 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(4 * (int)0.0));
      v16[0] = &unk_2513463C8;
      v16[1] = mlx::core::allocator::free;
      v16[3] = v16;
      v17 = v13;
      v18[0] = &unk_2513463C8;
      v18[1] = mlx::core::allocator::free;
      v18[3] = v18;
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v20);
      mlx::core::allocator::Buffer::raw_ptr((mlx::core::allocator::Buffer *)&v17);
      sgetri_NEWLAPACK();
      mlx::core::array::Data::~Data((mlx::core::array::Data *)&v17);
      ++v11;
    }
    while (v12 != v11);
  }
  mlx::core::array::Data::~Data((mlx::core::array::Data *)&v20);
}

void sub_2423120E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  void *v17;
  int v18;
  uint64_t v19;

  if (*(char *)(v19 - 185) < 0)
  {
    operator delete(*(void **)(v19 - 208));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
      mlx::core::array::Data::~Data((mlx::core::array::Data *)(v19 - 136));
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_2423122B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x2426A8294](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2426A8294](a1 + 128);
  return a1;
}

void mlx::core::Inverse::eval(int a1, mlx::core **a2, mlx::core::array *a3, float a4)
{
  void *exception;

  if (*(_DWORD *)(*(_QWORD *)*a2 + 56) != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x2426A8078](exception, "[Inverse::eval] only supports float32.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  mlx::core::inverse_impl(*a2, a3, a3, a4);
}

void sub_2423123C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mlx::core::array::Data::~Data(mlx::core::array::Data *this)
{
  uint64_t v2;
  mlx::core::array::Data *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v3 = (mlx::core::array::Data *)*((_QWORD *)this + 4);
  if (v3 == (mlx::core::array::Data *)((char *)this + 8))
  {
    v4 = 4;
    v3 = (mlx::core::array::Data *)((char *)this + 8);
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

void mlx::core::Scan::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  int v16;
  int **v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  mlx::core::scheduler *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  mlx::core::scheduler *v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  mlx::core::scheduler *v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  mlx::core::scheduler *v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  mlx::core::scheduler *v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  mlx::core::scheduler *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  mlx::core::scheduler *v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  mlx::core::scheduler *v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  mlx::core::scheduler *v71;
  void **v72;
  uint64_t v73;
  mlx::core::scheduler *v74;
  void **v75;
  uint64_t v76;
  mlx::core::scheduler *v77;
  void **v78;
  uint64_t v79;
  mlx::core::scheduler *v80;
  void **v81;
  uint64_t v82;
  mlx::core::scheduler *v83;
  void **v84;
  uint64_t v85;
  mlx::core::scheduler *v86;
  void **v87;
  uint64_t v88;
  mlx::core::scheduler *v89;
  void **v90;
  uint64_t v91;
  mlx::core::scheduler *v92;
  void **v93;
  uint64_t v94;
  mlx::core::scheduler *v95;
  void **v96;
  uint64_t v97;
  mlx::core::scheduler *v98;
  void **v99;
  uint64_t v100;
  mlx::core::scheduler *v101;
  void **v102;
  uint64_t v103;
  mlx::core::scheduler *v104;
  void **v105;
  uint64_t v106;
  mlx::core::scheduler *v107;
  void **v108;
  uint64_t v109;
  mlx::core::scheduler *v110;
  void **v111;
  uint64_t v112;
  mlx::core::scheduler *v113;
  void **v114;
  uint64_t v115;
  mlx::core::scheduler *v116;
  void **v117;
  uint64_t v118;
  mlx::core::scheduler *v119;
  void **v120;
  uint64_t v121;
  mlx::core::scheduler *v122;
  void **v123;
  uint64_t v124;
  int v125;
  mlx::core::scheduler *v126;
  void **v127;
  uint64_t v128;
  mlx::core::scheduler *v129;
  void **v130;
  uint64_t v131;
  mlx::core::scheduler *v132;
  void **v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  int *v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  int *v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  unsigned __int8 *v157;
  uint64_t v158;
  int *v159;
  unsigned __int8 *v160;
  int v161;
  int i;
  int v163;
  int v164;
  uint64_t v165;
  BOOL *v166;
  BOOL *v167;
  unint64_t v168;
  unint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  BOOL *v173;
  BOOL *v174;
  BOOL v175;
  int v176;
  char v177;
  unint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  BOOL *v186;
  BOOL *v187;
  int n;
  int v189;
  char v190;
  uint64_t v191;
  int *v192;
  int *v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  int *v199;
  int *v200;
  int v201;
  int v202;
  int v203;
  unint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  int *v212;
  char *v213;
  int i67;
  int v215;
  int v216;
  uint64_t v217;
  int *v218;
  int *v219;
  unint64_t v220;
  unint64_t v221;
  int v222;
  int v223;
  uint64_t v224;
  int *v225;
  int *v226;
  int v227;
  int v228;
  int v229;
  unint64_t v230;
  int v231;
  int v232;
  uint64_t v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  int *v238;
  char *v239;
  int i71;
  int v241;
  int v242;
  uint64_t v243;
  int *v244;
  int *v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  int *v251;
  int *v252;
  int v253;
  int v254;
  int v255;
  unint64_t v256;
  int v257;
  int v258;
  uint64_t v259;
  unint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  int *v264;
  char *v265;
  int i35;
  int v267;
  int v268;
  uint64_t v269;
  int *v270;
  int *v271;
  unint64_t v272;
  unint64_t v273;
  int v274;
  int v275;
  uint64_t v276;
  int *v277;
  int *v278;
  int v279;
  int v280;
  int v281;
  unint64_t v282;
  int v283;
  int v284;
  uint64_t v285;
  unint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  int *v290;
  char *v291;
  int i39;
  int v293;
  int v294;
  uint64_t v295;
  unsigned __int8 *v296;
  int *v297;
  unint64_t v298;
  unint64_t v299;
  int v300;
  int v301;
  uint64_t v302;
  _BYTE *v303;
  unsigned __int8 *v304;
  int v305;
  int v306;
  int v307;
  unint64_t v308;
  int v309;
  int v310;
  uint64_t v311;
  unint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  unsigned __int8 *v317;
  int i51;
  int v319;
  char v320;
  uint64_t v321;
  unsigned __int8 *v322;
  int *v323;
  unint64_t v324;
  unint64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  _BYTE *v329;
  unsigned __int8 *v330;
  int v331;
  int v332;
  int v333;
  unint64_t v334;
  int v335;
  int v336;
  uint64_t v337;
  unint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  unsigned __int8 *v343;
  int i19;
  int v345;
  char v346;
  uint64_t v347;
  unsigned __int8 *v348;
  int *v349;
  unint64_t v350;
  unint64_t v351;
  int v352;
  int v353;
  uint64_t v354;
  _BYTE *v355;
  unsigned __int8 *v356;
  int v357;
  int v358;
  int v359;
  unint64_t v360;
  int v361;
  int v362;
  uint64_t v363;
  unint64_t v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  unsigned __int8 *v369;
  int i55;
  int v371;
  char v372;
  uint64_t v373;
  unsigned __int8 *v374;
  int *v375;
  unint64_t v376;
  unint64_t v377;
  int v378;
  int v379;
  uint64_t v380;
  _BYTE *v381;
  unsigned __int8 *v382;
  int v383;
  int v384;
  int v385;
  unint64_t v386;
  int v387;
  int v388;
  uint64_t v389;
  unint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  char *v394;
  unsigned __int8 *v395;
  int i23;
  int v397;
  char v398;
  uint64_t v399;
  char *v400;
  int *v401;
  unint64_t v402;
  unint64_t v403;
  int v404;
  int v405;
  uint64_t v406;
  int *v407;
  char *v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  unint64_t v412;
  int v413;
  int v414;
  uint64_t v415;
  unint64_t v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  int *v420;
  char *v421;
  int i83;
  int v423;
  uint64_t v424;
  uint64_t v425;
  float *v426;
  float *v427;
  unint64_t v428;
  unint64_t v429;
  int v430;
  int v431;
  uint64_t v432;
  float *v433;
  float *v434;
  float v435;
  int v436;
  float v437;
  unint64_t v438;
  int v439;
  int v440;
  uint64_t v441;
  unint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  float *v446;
  float *v447;
  int i99;
  int v449;
  float v450;
  uint64_t v451;
  char *v452;
  int *v453;
  unint64_t v454;
  unint64_t v455;
  int v456;
  int v457;
  uint64_t v458;
  int *v459;
  char *v460;
  uint64_t v461;
  int v462;
  uint64_t v463;
  unint64_t v464;
  int v465;
  int v466;
  uint64_t v467;
  unint64_t v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  int *v472;
  char *v473;
  int i87;
  int v475;
  uint64_t v476;
  uint64_t v477;
  float *v478;
  float *v479;
  unint64_t v480;
  unint64_t v481;
  int v482;
  int v483;
  uint64_t v484;
  float *v485;
  float *v486;
  float v487;
  int v488;
  float v489;
  unint64_t v490;
  int v491;
  int v492;
  uint64_t v493;
  unint64_t v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  float *v498;
  float *v499;
  int i103;
  int v501;
  float v502;
  uint64_t v503;
  int *v504;
  int *v505;
  unint64_t v506;
  unint64_t v507;
  int v508;
  int v509;
  int v510;
  uint64_t v511;
  int *v512;
  int *v513;
  int v514;
  int v515;
  int v516;
  int v517;
  unint64_t v518;
  int v519;
  int v520;
  uint64_t v521;
  unint64_t v522;
  int v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int *v527;
  char *v528;
  int i59;
  int v530;
  int v531;
  int v532;
  uint64_t v533;
  int *v534;
  int *v535;
  unint64_t v536;
  unint64_t v537;
  int v538;
  int v539;
  uint64_t v540;
  int *v541;
  int *v542;
  int v543;
  int v544;
  int v545;
  int v546;
  unint64_t v547;
  int v548;
  int v549;
  uint64_t v550;
  unint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  int *v556;
  char *v557;
  int i63;
  int v559;
  int v560;
  int v561;
  uint64_t v562;
  int *v563;
  int *v564;
  unint64_t v565;
  unint64_t v566;
  int v567;
  int v568;
  int v569;
  uint64_t v570;
  int *v571;
  int *v572;
  unsigned int v573;
  int v574;
  unsigned int v575;
  unsigned int v576;
  unint64_t v577;
  int v578;
  int v579;
  uint64_t v580;
  unint64_t v581;
  int v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  int *v586;
  char *v587;
  int i27;
  int v589;
  int v590;
  unsigned int v591;
  uint64_t v592;
  int *v593;
  int *v594;
  unint64_t v595;
  unint64_t v596;
  int v597;
  int v598;
  uint64_t v599;
  int *v600;
  int *v601;
  unsigned int v602;
  int v603;
  unsigned int v604;
  unsigned int v605;
  unint64_t v606;
  int v607;
  int v608;
  uint64_t v609;
  unint64_t v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  int *v615;
  char *v616;
  int i31;
  int v618;
  int v619;
  unsigned int v620;
  uint64_t v621;
  char *v622;
  int *v623;
  unint64_t v624;
  unint64_t v625;
  int v626;
  int v627;
  int v628;
  uint64_t v629;
  _BYTE *v630;
  char *v631;
  char v632;
  int v633;
  char v634;
  int v635;
  unint64_t v636;
  int v637;
  int v638;
  uint64_t v639;
  unint64_t v640;
  int v641;
  uint64_t v642;
  uint64_t v643;
  char *v644;
  char *v645;
  int i43;
  int v647;
  char v648;
  int v649;
  uint64_t v650;
  char *v651;
  int *v652;
  unint64_t v653;
  unint64_t v654;
  int v655;
  int v656;
  uint64_t v657;
  _BYTE *v658;
  char *v659;
  char v660;
  int v661;
  char v662;
  int v663;
  unint64_t v664;
  int v665;
  int v666;
  uint64_t v667;
  unint64_t v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  char *v672;
  char *v673;
  int i47;
  int v675;
  char v676;
  int v677;
  uint64_t v678;
  char *v679;
  int *v680;
  unint64_t v681;
  unint64_t v682;
  int v683;
  int v684;
  int v685;
  uint64_t v686;
  _BYTE *v687;
  char *v688;
  unsigned __int8 v689;
  int v690;
  unsigned __int8 v691;
  unsigned int v692;
  unint64_t v693;
  int v694;
  int v695;
  uint64_t v696;
  unint64_t v697;
  int v698;
  uint64_t v699;
  uint64_t v700;
  _BYTE *v701;
  char *v702;
  int i11;
  int v704;
  char v705;
  unsigned int v706;
  uint64_t v707;
  unsigned __int8 *v708;
  int *v709;
  unint64_t v710;
  unint64_t v711;
  int v712;
  int v713;
  uint64_t v714;
  _BYTE *v715;
  unsigned __int8 *v716;
  unsigned __int8 v717;
  int v718;
  unsigned __int8 v719;
  unsigned int v720;
  unint64_t v721;
  int v722;
  int v723;
  uint64_t v724;
  unint64_t v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  _BYTE *v729;
  unsigned __int8 *v730;
  int i15;
  int v732;
  char v733;
  unsigned int v734;
  uint64_t v735;
  char *v736;
  int *v737;
  unint64_t v738;
  unint64_t v739;
  int v740;
  int v741;
  int v742;
  uint64_t v743;
  int *v744;
  char *v745;
  uint64_t v746;
  int v747;
  uint64_t v748;
  uint64_t v749;
  unint64_t v750;
  int v751;
  int v752;
  uint64_t v753;
  unint64_t v754;
  int v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  int *v759;
  char *v760;
  int i75;
  int v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t *v766;
  int *v767;
  unint64_t v768;
  unint64_t v769;
  int v770;
  int v771;
  uint64_t v772;
  int *v773;
  uint64_t *v774;
  uint64_t v775;
  int v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  int v780;
  int v781;
  uint64_t v782;
  unint64_t v783;
  int v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int *v788;
  char *v789;
  int i79;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  float *v795;
  float *v796;
  unint64_t v797;
  unint64_t v798;
  int v799;
  int v800;
  uint64_t v801;
  float *v802;
  float *v803;
  float v804;
  int v805;
  float v806;
  float v807;
  unint64_t v808;
  int v809;
  int v810;
  uint64_t v811;
  unint64_t v812;
  int v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  float *v817;
  float *v818;
  int i91;
  int v820;
  float v821;
  float v822;
  uint64_t v823;
  float *v824;
  float *v825;
  unint64_t v826;
  unint64_t v827;
  int v828;
  int v829;
  uint64_t v830;
  float *v831;
  float *v832;
  float v833;
  int v834;
  float v835;
  float v836;
  unint64_t v837;
  int v838;
  int v839;
  uint64_t v840;
  unint64_t v841;
  int v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  float *v846;
  float *v847;
  int i95;
  int v849;
  float v850;
  float v851;
  uint64_t v852;
  unsigned __int8 *v853;
  int *v854;
  unint64_t v855;
  unint64_t v856;
  int v857;
  int v858;
  uint64_t v859;
  _BYTE *v860;
  unsigned __int8 *v861;
  int v862;
  int v863;
  int v864;
  unint64_t v865;
  int v866;
  int v867;
  uint64_t v868;
  unint64_t v869;
  int v870;
  uint64_t v871;
  uint64_t v872;
  char *v873;
  unsigned __int8 *v874;
  int mm;
  int v876;
  char v877;
  uint64_t v878;
  unsigned __int8 *v879;
  int *v880;
  unint64_t v881;
  unint64_t v882;
  int v883;
  int v884;
  uint64_t v885;
  _BYTE *v886;
  unsigned __int8 *v887;
  unsigned __int8 v888;
  int v889;
  unsigned __int8 v890;
  unsigned int v891;
  unint64_t v892;
  int v893;
  int v894;
  uint64_t v895;
  unint64_t v896;
  int v897;
  uint64_t v898;
  uint64_t v899;
  _BYTE *v900;
  unsigned __int8 *v901;
  int i3;
  int v903;
  char v904;
  unsigned int v905;
  uint64_t v906;
  unsigned __int8 *v907;
  int *v908;
  unint64_t v909;
  unint64_t v910;
  int v911;
  int v912;
  int v913;
  uint64_t v914;
  _BYTE *v915;
  unsigned __int8 *v916;
  int v917;
  int v918;
  int v919;
  unint64_t v920;
  int v921;
  int v922;
  uint64_t v923;
  unint64_t v924;
  int v925;
  uint64_t v926;
  uint64_t v927;
  char *v928;
  unsigned __int8 *v929;
  int i7;
  int v931;
  char v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  uint64_t v938;
  int *v939;
  unsigned __int8 *v940;
  int v941;
  int k;
  int v943;
  int v944;
  int v945;
  BOOL v946;
  int v947;
  char v948;
  int v949;
  int jj;
  int v951;
  char v952;
  int v953;
  int v954;
  int v955;
  int v956;
  int v957;
  int i69;
  int v959;
  int v960;
  int v961;
  int v962;
  int v963;
  int v964;
  int v965;
  int i73;
  int v967;
  int v968;
  int v969;
  int v970;
  int v971;
  int v972;
  int v973;
  int i37;
  int v975;
  int v976;
  int v977;
  int v978;
  int v979;
  int v980;
  int v981;
  int i41;
  int v983;
  int v984;
  int v985;
  int v986;
  int v987;
  int v988;
  int v989;
  int i53;
  int v991;
  char v992;
  int v993;
  int v994;
  int v995;
  int v996;
  int v997;
  int i21;
  int v999;
  char v1000;
  int v1001;
  int v1002;
  int v1003;
  int v1004;
  int v1005;
  int i57;
  int v1007;
  char v1008;
  int v1009;
  int v1010;
  int v1011;
  int v1012;
  int v1013;
  int i25;
  int v1015;
  char v1016;
  int v1017;
  uint64_t v1018;
  int v1019;
  uint64_t v1020;
  int v1021;
  int i85;
  int v1023;
  uint64_t v1024;
  int v1025;
  float v1026;
  int v1027;
  float v1028;
  int v1029;
  int i101;
  int v1031;
  float v1032;
  int v1033;
  uint64_t v1034;
  int v1035;
  uint64_t v1036;
  int v1037;
  int i89;
  int v1039;
  uint64_t v1040;
  int v1041;
  float v1042;
  int v1043;
  float v1044;
  int v1045;
  int i105;
  int v1047;
  float v1048;
  int v1049;
  int v1050;
  int v1051;
  int v1052;
  int v1053;
  int v1054;
  int i61;
  int v1056;
  int v1057;
  int v1058;
  int v1059;
  int v1060;
  int v1061;
  int v1062;
  int v1063;
  int v1064;
  int i65;
  int v1066;
  int v1067;
  int v1068;
  int v1069;
  unsigned int v1070;
  int v1071;
  unsigned int v1072;
  unsigned int v1073;
  int v1074;
  int i29;
  int v1076;
  int v1077;
  unsigned int v1078;
  int v1079;
  unsigned int v1080;
  int v1081;
  unsigned int v1082;
  unsigned int v1083;
  int v1084;
  int i33;
  int v1086;
  int v1087;
  unsigned int v1088;
  int v1089;
  char v1090;
  int v1091;
  char v1092;
  int v1093;
  int v1094;
  int i45;
  int v1096;
  char v1097;
  int v1098;
  int v1099;
  char v1100;
  int v1101;
  char v1102;
  int v1103;
  int v1104;
  int i49;
  int v1106;
  char v1107;
  int v1108;
  int v1109;
  unsigned __int8 v1110;
  int v1111;
  unsigned __int8 v1112;
  unsigned int v1113;
  int v1114;
  int i13;
  int v1116;
  char v1117;
  unsigned int v1118;
  int v1119;
  unsigned __int8 v1120;
  int v1121;
  unsigned __int8 v1122;
  unsigned int v1123;
  int v1124;
  int i17;
  int v1126;
  char v1127;
  unsigned int v1128;
  int v1129;
  uint64_t v1130;
  int v1131;
  uint64_t v1132;
  uint64_t v1133;
  int v1134;
  int i77;
  int v1136;
  uint64_t v1137;
  uint64_t v1138;
  int v1139;
  uint64_t v1140;
  int v1141;
  uint64_t v1142;
  uint64_t v1143;
  int v1144;
  int i81;
  int v1146;
  uint64_t v1147;
  uint64_t v1148;
  int v1149;
  float v1150;
  int v1151;
  float v1152;
  float v1153;
  int v1154;
  int i93;
  int v1156;
  float v1157;
  float v1158;
  int v1159;
  float v1160;
  int v1161;
  float v1162;
  float v1163;
  int v1164;
  int i97;
  int v1166;
  float v1167;
  float v1168;
  int v1169;
  uint64_t v1170;
  int *v1171;
  unsigned __int8 *v1172;
  int v1173;
  int v1174;
  int v1175;
  int v1176;
  uint64_t v1177;
  uint64_t v1178;
  int *v1179;
  unsigned __int8 *v1180;
  int j;
  int v1182;
  int v1183;
  uint64_t v1184;
  BOOL *v1185;
  BOOL *v1186;
  BOOL v1187;
  int v1188;
  char v1189;
  int v1190;
  uint64_t v1191;
  uint64_t v1192;
  BOOL *v1193;
  BOOL *v1194;
  int ii;
  int v1196;
  int v1197;
  uint64_t v1198;
  int *v1199;
  int *v1200;
  int v1201;
  int v1202;
  int v1203;
  int v1204;
  uint64_t v1205;
  uint64_t v1206;
  int *v1207;
  int *v1208;
  int i68;
  int v1210;
  int v1211;
  uint64_t v1212;
  int *v1213;
  int *v1214;
  int v1215;
  int v1216;
  int v1217;
  int v1218;
  uint64_t v1219;
  uint64_t v1220;
  int *v1221;
  int *v1222;
  int i72;
  int v1224;
  int v1225;
  uint64_t v1226;
  int *v1227;
  int *v1228;
  int v1229;
  int v1230;
  int v1231;
  int v1232;
  uint64_t v1233;
  uint64_t v1234;
  int *v1235;
  int *v1236;
  int i36;
  int v1238;
  int v1239;
  uint64_t v1240;
  int *v1241;
  int *v1242;
  int v1243;
  int v1244;
  int v1245;
  int v1246;
  uint64_t v1247;
  uint64_t v1248;
  int *v1249;
  int *v1250;
  int i40;
  int v1252;
  int v1253;
  uint64_t v1254;
  _BYTE *v1255;
  unsigned __int8 *v1256;
  int v1257;
  int v1258;
  int v1259;
  int v1260;
  uint64_t v1261;
  uint64_t v1262;
  char *v1263;
  unsigned __int8 *v1264;
  int i52;
  int v1266;
  int v1267;
  uint64_t v1268;
  _BYTE *v1269;
  unsigned __int8 *v1270;
  int v1271;
  int v1272;
  int v1273;
  int v1274;
  uint64_t v1275;
  uint64_t v1276;
  char *v1277;
  unsigned __int8 *v1278;
  int i20;
  int v1280;
  int v1281;
  uint64_t v1282;
  _BYTE *v1283;
  unsigned __int8 *v1284;
  int v1285;
  int v1286;
  int v1287;
  int v1288;
  uint64_t v1289;
  uint64_t v1290;
  char *v1291;
  unsigned __int8 *v1292;
  int i56;
  int v1294;
  int v1295;
  uint64_t v1296;
  _BYTE *v1297;
  unsigned __int8 *v1298;
  int v1299;
  int v1300;
  int v1301;
  int v1302;
  uint64_t v1303;
  uint64_t v1304;
  char *v1305;
  unsigned __int8 *v1306;
  int i24;
  int v1308;
  int v1309;
  uint64_t v1310;
  int *v1311;
  char *v1312;
  uint64_t v1313;
  int v1314;
  uint64_t v1315;
  int v1316;
  uint64_t v1317;
  uint64_t v1318;
  int *v1319;
  char *v1320;
  int i84;
  int v1322;
  int v1323;
  uint64_t v1324;
  float *v1325;
  float *v1326;
  float v1327;
  int v1328;
  float v1329;
  int v1330;
  uint64_t v1331;
  uint64_t v1332;
  float *v1333;
  float *v1334;
  int i100;
  int v1336;
  int v1337;
  uint64_t v1338;
  int *v1339;
  char *v1340;
  int v1341;
  uint64_t v1342;
  uint64_t v1343;
  int v1344;
  uint64_t v1345;
  uint64_t v1346;
  int *v1347;
  char *v1348;
  int i88;
  int v1350;
  int v1351;
  uint64_t v1352;
  float *v1353;
  float *v1354;
  float v1355;
  int v1356;
  float v1357;
  int v1358;
  uint64_t v1359;
  uint64_t v1360;
  float *v1361;
  float *v1362;
  int i104;
  int v1364;
  int v1365;
  int v1366;
  int v1367;
  int v1368;
  int v1369;
  int i1;
  int v1371;
  char v1372;
  uint64_t v1373;
  uint64_t v1374;
  size_t v1375;
  int *v1376;
  int v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  int *v1381;
  int *v1382;
  int i60;
  int v1384;
  int v1385;
  int v1386;
  uint64_t v1387;
  int *v1388;
  int *v1389;
  int v1390;
  int v1391;
  int v1392;
  int v1393;
  int v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  int *v1398;
  int *v1399;
  int i64;
  int v1401;
  int v1402;
  uint64_t v1403;
  uint64_t v1404;
  size_t v1405;
  int *v1406;
  int v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  int *v1411;
  int *v1412;
  int i28;
  int v1414;
  unsigned int v1415;
  int v1416;
  uint64_t v1417;
  int *v1418;
  unsigned int *v1419;
  unsigned int v1420;
  int v1421;
  unsigned int v1422;
  unsigned int v1423;
  int v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  int *v1428;
  int *v1429;
  int i32;
  int v1431;
  unsigned int v1432;
  uint64_t v1433;
  unint64_t v1434;
  uint64_t v1435;
  int v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  char *v1440;
  char *v1441;
  int i44;
  int v1443;
  int v1444;
  int v1445;
  uint64_t v1446;
  _BYTE *v1447;
  char *v1448;
  char v1449;
  int v1450;
  char v1451;
  int v1452;
  int v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  char *v1457;
  char *v1458;
  int i48;
  int v1460;
  int v1461;
  uint64_t v1462;
  unint64_t v1463;
  uint64_t v1464;
  int v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  _BYTE *v1469;
  char *v1470;
  int i12;
  int v1472;
  unsigned int v1473;
  int v1474;
  uint64_t v1475;
  _BYTE *v1476;
  unsigned __int8 *v1477;
  unsigned __int8 v1478;
  int v1479;
  unsigned __int8 v1480;
  unsigned int v1481;
  int v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  _BYTE *v1486;
  unsigned __int8 *v1487;
  int i16;
  int v1489;
  unsigned int v1490;
  int v1491;
  unsigned __int8 v1492;
  int v1493;
  unsigned __int8 v1494;
  unsigned int v1495;
  int v1496;
  int i5;
  int v1498;
  char v1499;
  unsigned int v1500;
  uint64_t v1501;
  uint64_t v1502;
  size_t v1503;
  int *v1504;
  int v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  int *v1509;
  char *v1510;
  int i76;
  int v1512;
  uint64_t v1513;
  int v1514;
  uint64_t v1515;
  int *v1516;
  uint64_t *v1517;
  uint64_t v1518;
  int v1519;
  uint64_t v1520;
  uint64_t v1521;
  int v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  int *v1526;
  uint64_t *v1527;
  int i80;
  int v1529;
  uint64_t v1530;
  int v1531;
  int v1532;
  int v1533;
  int v1534;
  int v1535;
  int i9;
  int v1537;
  char v1538;
  int v1539;
  uint64_t v1540;
  float *v1541;
  float *v1542;
  int v1543;
  float v1544;
  float v1545;
  float v1546;
  int v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  float *v1551;
  unint64_t v1552;
  float *v1553;
  float *v1554;
  int i92;
  int v1556;
  float v1557;
  int v1558;
  uint64_t v1559;
  float *v1560;
  float *v1561;
  int v1562;
  float v1563;
  float v1564;
  float v1565;
  int v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  float *v1570;
  unint64_t v1571;
  float *v1572;
  float *v1573;
  int i96;
  int v1575;
  float v1576;
  int v1577;
  int v1578;
  int v1579;
  int v1580;
  int v1581;
  int m;
  int v1583;
  int v1584;
  BOOL v1585;
  int v1586;
  char v1587;
  int v1588;
  int kk;
  int v1590;
  int v1591;
  uint64_t v1592;
  _BYTE *v1593;
  unsigned __int8 *v1594;
  int v1595;
  int v1596;
  int v1597;
  int v1598;
  uint64_t v1599;
  uint64_t v1600;
  char *v1601;
  unsigned __int8 *v1602;
  int nn;
  int v1604;
  int v1605;
  uint64_t v1606;
  _BYTE *v1607;
  unsigned __int8 *v1608;
  unsigned __int8 v1609;
  int v1610;
  unsigned __int8 v1611;
  unsigned int v1612;
  int v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  _BYTE *v1617;
  unsigned __int8 *v1618;
  int i4;
  int v1620;
  unsigned int v1621;
  uint64_t v1622;
  unint64_t v1623;
  uint64_t v1624;
  int v1625;
  uint64_t v1626;
  uint64_t v1627;
  char *v1628;
  unsigned __int8 *v1629;
  int i8;
  int v1631;
  int v1632;
  int v1633;
  int v1634;
  int v1635;
  int v1636;
  int i70;
  int v1638;
  int v1639;
  int v1640;
  int v1641;
  int v1642;
  int v1643;
  int i74;
  int v1645;
  int v1646;
  int v1647;
  int v1648;
  int v1649;
  int v1650;
  int i38;
  int v1652;
  int v1653;
  int v1654;
  int v1655;
  int v1656;
  int v1657;
  int i42;
  int v1659;
  int v1660;
  int v1661;
  int v1662;
  int v1663;
  int v1664;
  int i54;
  int v1666;
  int v1667;
  int v1668;
  int v1669;
  int v1670;
  int v1671;
  int i22;
  int v1673;
  int v1674;
  int v1675;
  int v1676;
  int v1677;
  int v1678;
  int i58;
  int v1680;
  int v1681;
  int v1682;
  int v1683;
  int v1684;
  int v1685;
  int i26;
  int v1687;
  int v1688;
  uint64_t v1689;
  int v1690;
  uint64_t v1691;
  int v1692;
  int i86;
  int v1694;
  int v1695;
  float v1696;
  int v1697;
  float v1698;
  int v1699;
  int i102;
  int v1701;
  int v1702;
  int v1703;
  uint64_t v1704;
  uint64_t v1705;
  int v1706;
  int i90;
  int v1708;
  int v1709;
  float v1710;
  int v1711;
  float v1712;
  int v1713;
  int i106;
  int v1715;
  uint64_t v1716;
  int v1717;
  int i62;
  int v1719;
  int v1720;
  int v1721;
  int v1722;
  int v1723;
  int v1724;
  int v1725;
  int v1726;
  int i66;
  int v1728;
  int v1729;
  uint64_t v1730;
  int v1731;
  int i30;
  int v1733;
  unsigned int v1734;
  int v1735;
  unsigned int v1736;
  int v1737;
  unsigned int v1738;
  unsigned int v1739;
  int v1740;
  int i34;
  int v1742;
  unsigned int v1743;
  uint64_t v1744;
  int v1745;
  int i46;
  int v1747;
  int v1748;
  int v1749;
  char v1750;
  int v1751;
  char v1752;
  int v1753;
  int v1754;
  int i50;
  int v1756;
  int v1757;
  uint64_t v1758;
  int v1759;
  int i14;
  int v1761;
  unsigned int v1762;
  int v1763;
  unsigned __int8 v1764;
  int v1765;
  unsigned __int8 v1766;
  unsigned int v1767;
  int v1768;
  int i18;
  int v1770;
  unsigned int v1771;
  uint64_t v1772;
  int v1773;
  int i78;
  int v1775;
  uint64_t v1776;
  int v1777;
  uint64_t v1778;
  int v1779;
  uint64_t v1780;
  uint64_t v1781;
  int v1782;
  int i82;
  int v1784;
  uint64_t v1785;
  int v1786;
  int v1787;
  float v1788;
  float v1789;
  float v1790;
  int v1791;
  unint64_t v1792;
  float *v1793;
  int i94;
  int v1795;
  float v1796;
  int v1797;
  int v1798;
  float v1799;
  float v1800;
  float v1801;
  int v1802;
  unint64_t v1803;
  float *v1804;
  int i98;
  int v1806;
  float v1807;
  int v1808;
  int v1809;
  int v1810;
  int v1811;
  int v1812;
  int i2;
  int v1814;
  int v1815;
  unsigned __int8 v1816;
  int v1817;
  unsigned __int8 v1818;
  unsigned int v1819;
  int v1820;
  int i6;
  int v1822;
  unsigned int v1823;
  uint64_t v1824;
  int v1825;
  int i10;
  int v1827;
  void *exception;
  __int128 v1829;
  uint64_t v1830;
  __int128 v1831;
  void *__p[3];
  _QWORD v1833[2];
  void **v1834;
  void *v1835;
  uint64_t (*v1836)(mlx::core::allocator *);
  uint64_t *v1837;
  uint64_t v1838;

  v1838 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Scan::eval();
  v6 = *v3;
  v7 = v3[1];
  v1833[0] = v6;
  v1833[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if ((*(_BYTE *)(v6 + 168) & 2) == 0)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
    v10 = *(_QWORD *)(v1833[0] + 56);
    v1831 = 0uLL;
    v1830 = 0;
    v1829 = 0uLL;
    mlx::core::array::array(&v1835, (__int128 *)__p, v10, &v1831, &v1829);
    v1834 = (void **)&v1829;
    std::vector<mlx::core::array>::__destroy_vector::operator()[abi:ne180100](&v1834);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v1831 + 1);
    if (*((_QWORD *)&v1831 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v1831 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    mlx::core::copy((mlx::core::array *)v1833, (mlx::core::array *)&v1835, 2, v11);
    if ((void *)v1833[0] != v1835)
      std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](v1833, (uint64_t *)&v1835);
    mlx::core::array::~array((mlx::core::array *)&v1835);
    v6 = v1833[0];
  }
  v15 = *(void **)(v6 + 56);
  switch((int)v15)
  {
    case 0:
      v16 = *(_DWORD *)(a1 + 20);
      if (v16 == 2)
      {
        v17 = *a3;
        v18 = (*a3)[7];
        if ((_DWORD)v18 == 4)
        {
          v19 = *(int *)(a1 + 24);
          v20 = *(unsigned __int8 *)(a1 + 28);
          v21 = *(unsigned __int8 *)(a1 + 29);
          v22 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v17[6] * BYTE4(v18)));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v22, (uint64_t)&v1835);
          v23 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v24 = 4;
            v23 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_123;
            v24 = 5;
          }
          (*((void (**)(void))*v23 + v24))();
LABEL_123:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) != 0)
          {
            v135 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v19);
            v136 = *(unsigned __int8 **)(v1833[0] + 152);
            v137 = (*a3)[19];
            v138 = *(_QWORD *)(v1833[0] + 48);
            v139 = v138 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v19);
            if (v135 == 1)
            {
              v140 = mlx::core::array::shape((mlx::core::array *)v1833, v19);
              if (v20)
              {
                if (v21)
                {
                  if ((int)v139 >= 1)
                  {
                    v141 = 0;
                    v142 = v140 - 1;
                    do
                    {
                      v143 = &v137[v142];
                      v144 = &v136[v142];
                      v145 = v136[v142];
                      *v143 = v145;
                      v146 = v140 - 1;
                      if (v140 >= 2)
                      {
                        do
                        {
                          v147 = *--v144;
                          v145 += v147;
                          *--v143 = v145;
                          --v146;
                        }
                        while (v146);
                      }
                      v137 = &v143[v140];
                      v136 = &v144[v140];
                      ++v141;
                    }
                    while (v141 != (_DWORD)v139);
                  }
                }
                else if ((int)v139 >= 1)
                {
                  v1169 = 0;
                  v1170 = v140 - 1;
                  do
                  {
                    v1171 = &v137[v1170];
                    v1172 = &v136[v1170];
                    *v1171 = 0;
                    if (v140 >= 2)
                    {
                      v1173 = 0;
                      v1174 = v140 - 1;
                      do
                      {
                        v1175 = *v1172--;
                        v1173 += v1175;
                        *--v1171 = v1173;
                        --v1174;
                      }
                      while (v1174);
                    }
                    v137 = &v1171[v140];
                    v136 = &v1172[v140];
                    ++v1169;
                  }
                  while (v1169 != (_DWORD)v139);
                }
              }
              else if (v21)
              {
                if ((int)v139 >= 1)
                {
                  v933 = 0;
                  do
                  {
                    v934 = *v136;
                    *v137 = v934;
                    v935 = v140 - 1;
                    if (v140 >= 2)
                    {
                      do
                      {
                        v936 = *++v136;
                        v934 += v936;
                        v137[1] = v934;
                        ++v137;
                        --v935;
                      }
                      while (v935);
                    }
                    ++v137;
                    ++v136;
                    ++v933;
                  }
                  while (v933 != (_DWORD)v139);
                }
              }
              else if ((int)v139 >= 1)
              {
                v1577 = 0;
                do
                {
                  *v137 = 0;
                  if (v140 >= 2)
                  {
                    v1578 = 0;
                    v1579 = v140 - 1;
                    do
                    {
                      v1580 = *v136++;
                      v1578 += v1580;
                      v137[1] = v1578;
                      ++v137;
                      --v1579;
                    }
                    while (v1579);
                  }
                  ++v137;
                  ++v136;
                  ++v1577;
                }
                while (v1577 != (_DWORD)v139);
              }
            }
            else
            {
              v148 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v19);
              v149 = mlx::core::array::shape((mlx::core::array *)v1833, v19);
              v150 = v149;
              v151 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v19);
              v152 = v139 / v148;
              if (v20)
              {
                if (v21)
                {
                  if ((int)v152 >= 1)
                  {
                    v153 = 0;
                    v154 = (v149 - 1) * (int)v151;
                    v155 = v149 * (uint64_t)(int)v151;
                    do
                    {
                      v156 = &v137[v154];
                      v157 = &v136[v154];
                      if ((_DWORD)v151)
                      {
                        v158 = (int)v151;
                        v159 = &v137[v154];
                        v160 = &v136[v154];
                        do
                        {
                          v161 = *v160++;
                          *v159++ = v161;
                          --v158;
                        }
                        while (v158);
                      }
                      if (v149 >= 2)
                      {
                        for (i = 1; i != v149; ++i)
                        {
                          v163 = v151;
                          if ((int)v151 >= 1)
                          {
                            do
                            {
                              v164 = *--v157;
                              *(v156 - 1) = v156[(int)v151 - 1] + v164;
                              --v156;
                              --v163;
                            }
                            while (v163);
                          }
                        }
                      }
                      v137 = &v156[v155];
                      v136 = &v157[v155];
                      ++v153;
                    }
                    while (v153 != (_DWORD)v152);
                  }
                }
                else if ((int)v152 >= 1)
                {
                  v1176 = 0;
                  v1177 = (v149 - 1) * (int)v151;
                  v1178 = v149 * (uint64_t)(int)v151;
                  do
                  {
                    v1179 = &v137[v1177];
                    if ((int)v151 >= 1)
                      bzero(v1179, 4 * ((int)v151 - (unint64_t)(((int)v151 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                    v1180 = &v136[v1177];
                    if (v150 > 1)
                    {
                      for (j = 1; j != v150; ++j)
                      {
                        v1182 = v151;
                        if ((int)v151 >= 1)
                        {
                          do
                          {
                            *(v1179 - 1) = v1179[(int)v151 - 1] + v1180[(int)v151 - 1];
                            --v1179;
                            --v1180;
                            --v1182;
                          }
                          while (v1182);
                        }
                      }
                    }
                    v137 = &v1179[v1178];
                    v136 = &v1180[v1178];
                    ++v1176;
                  }
                  while (v1176 != (_DWORD)v152);
                }
              }
              else if (v21)
              {
                if ((int)v152 >= 1)
                {
                  v937 = 0;
                  do
                  {
                    if ((_DWORD)v151)
                    {
                      v938 = (int)v151;
                      v939 = v137;
                      v940 = v136;
                      do
                      {
                        v941 = *v940++;
                        *v939++ = v941;
                        --v938;
                      }
                      while (v938);
                    }
                    v136 += (int)v151;
                    v137 += (int)v151;
                    if (v149 >= 2)
                    {
                      for (k = 1; k != v149; ++k)
                      {
                        v943 = v151;
                        if ((int)v151 >= 1)
                        {
                          do
                          {
                            v944 = *v136++;
                            *v137 = v137[-(int)v151] + v944;
                            ++v137;
                            --v943;
                          }
                          while (v943);
                        }
                      }
                    }
                    ++v937;
                  }
                  while (v937 != (_DWORD)v152);
                }
              }
              else if ((int)v152 >= 1)
              {
                v1581 = 0;
                do
                {
                  if ((int)v151 >= 1)
                    bzero(v137, 4 * ((int)v151 - (unint64_t)(((int)v151 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v137 += (int)v151;
                  v136 += (int)v151;
                  if (v150 > 1)
                  {
                    for (m = 1; m != v150; ++m)
                    {
                      v1583 = v151;
                      if ((int)v151 >= 1)
                      {
                        do
                        {
                          *v137 = v137[-(int)v151] + v136[-(int)v151];
                          ++v137;
                          ++v136;
                          --v1583;
                        }
                        while (v1583);
                      }
                    }
                  }
                  ++v1581;
                }
                while (v1581 != (_DWORD)v152);
              }
            }
            goto LABEL_2618;
          }
LABEL_2620:
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x2426A8078](exception, "Scan op supports only contiguous inputs");
          __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
        }
        v68 = *(int *)(a1 + 24);
        v69 = *(unsigned __int8 *)(a1 + 28);
        v70 = *(unsigned __int8 *)(a1 + 29);
        v71 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(BYTE4(v18) * (_QWORD)v17[6]));
        v1835 = &unk_2513463C8;
        v1836 = mlx::core::allocator::free;
        v1837 = (uint64_t *)&v1835;
        mlx::core::array::set_data(a3, (uint64_t)v71, (uint64_t)&v1835);
        v72 = (void **)v1837;
        if (v1837 == (uint64_t *)&v1835)
        {
          v73 = 4;
          v72 = &v1835;
        }
        else
        {
          if (!v1837)
          {
LABEL_149:
            if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
              goto LABEL_2620;
            v165 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v68);
            v166 = *(BOOL **)(v1833[0] + 152);
            v167 = (BOOL *)(*a3)[19];
            v168 = *(_QWORD *)(v1833[0] + 48);
            v169 = v168 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v68);
            if (v165 == 1)
            {
              v170 = mlx::core::array::shape((mlx::core::array *)v1833, v68);
              if (v69)
              {
                if (v70)
                {
                  if ((int)v169 >= 1)
                  {
                    v171 = 0;
                    v172 = v170 - 1;
                    do
                    {
                      v173 = &v167[v172];
                      v174 = &v166[v172];
                      v175 = v166[v172];
                      v167[v172] = v175;
                      v176 = v170 - 1;
                      if (v170 >= 2)
                      {
                        do
                        {
                          v177 = *--v174;
                          v175 = v175 != -v177;
                          *--v173 = v175;
                          --v176;
                        }
                        while (v176);
                      }
                      v167 = &v173[v170];
                      v166 = &v174[v170];
                      ++v171;
                    }
                    while (v171 != (_DWORD)v169);
                  }
                }
                else if ((int)v169 >= 1)
                {
                  v1183 = 0;
                  v1184 = v170 - 1;
                  do
                  {
                    v1185 = &v167[v1184];
                    v1186 = &v166[v1184];
                    v167[v1184] = 0;
                    if (v170 >= 2)
                    {
                      v1187 = 0;
                      v1188 = v170 - 1;
                      do
                      {
                        v1189 = *v1186--;
                        v1187 = v1187 != -v1189;
                        *--v1185 = v1187;
                        --v1188;
                      }
                      while (v1188);
                    }
                    v167 = &v1185[v170];
                    v166 = &v1186[v170];
                    ++v1183;
                  }
                  while (v1183 != (_DWORD)v169);
                }
              }
              else if (v70)
              {
                if ((int)v169 >= 1)
                {
                  v945 = 0;
                  do
                  {
                    v946 = *v166;
                    *v167 = *v166;
                    v947 = v170 - 1;
                    if (v170 >= 2)
                    {
                      do
                      {
                        v948 = *++v166;
                        v946 = v946 != -v948;
                        *++v167 = v946;
                        --v947;
                      }
                      while (v947);
                    }
                    ++v167;
                    ++v166;
                    ++v945;
                  }
                  while (v945 != (_DWORD)v169);
                }
              }
              else if ((int)v169 >= 1)
              {
                v1584 = 0;
                do
                {
                  *v167 = 0;
                  if (v170 >= 2)
                  {
                    v1585 = 0;
                    v1586 = v170 - 1;
                    do
                    {
                      v1587 = *v166++;
                      v1585 = v1585 != -v1587;
                      *++v167 = v1585;
                      --v1586;
                    }
                    while (v1586);
                  }
                  ++v167;
                  ++v166;
                  ++v1584;
                }
                while (v1584 != (_DWORD)v169);
              }
            }
            else
            {
              v178 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v68);
              v179 = mlx::core::array::shape((mlx::core::array *)v1833, v68);
              v180 = v179;
              v181 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v68);
              v182 = v169 / v178;
              if (v69)
              {
                if (v70)
                {
                  if ((int)v182 >= 1)
                  {
                    v183 = 0;
                    v184 = (v179 - 1) * (int)v181;
                    v185 = v179 * (uint64_t)(int)v181;
                    do
                    {
                      v186 = &v167[v184];
                      v187 = &v166[v184];
                      if ((_DWORD)v181)
                        memmove(v186, v187, (int)v181);
                      if (v180 >= 2)
                      {
                        for (n = 1; n != v180; ++n)
                        {
                          v189 = v181;
                          if ((int)v181 >= 1)
                          {
                            do
                            {
                              v190 = *--v187;
                              *(v186 - 1) = v186[(int)v181 - 1] != -v190;
                              --v186;
                              --v189;
                            }
                            while (v189);
                          }
                        }
                      }
                      v167 = &v186[v185];
                      v166 = &v187[v185];
                      ++v183;
                    }
                    while (v183 != (_DWORD)v182);
                  }
                }
                else if ((int)v182 >= 1)
                {
                  v1190 = 0;
                  v1191 = (v179 - 1) * (int)v181;
                  v1192 = v179 * (uint64_t)(int)v181;
                  do
                  {
                    v1193 = &v167[v1191];
                    if ((int)v181 >= 1)
                      bzero(v1193, (int)v181);
                    v1194 = &v166[v1191];
                    if (v180 > 1)
                    {
                      for (ii = 1; ii != v180; ++ii)
                      {
                        v1196 = v181;
                        if ((int)v181 >= 1)
                        {
                          do
                          {
                            *(v1193 - 1) = v1193[(int)v181 - 1] != -v1194[(int)v181 - 1];
                            --v1193;
                            --v1194;
                            --v1196;
                          }
                          while (v1196);
                        }
                      }
                    }
                    v167 = &v1193[v1192];
                    v166 = &v1194[v1192];
                    ++v1190;
                  }
                  while (v1190 != (_DWORD)v182);
                }
              }
              else if (v70)
              {
                if ((int)v182 >= 1)
                {
                  v949 = 0;
                  do
                  {
                    if ((_DWORD)v181)
                      memmove(v167, v166, (int)v181);
                    v166 += (int)v181;
                    v167 += (int)v181;
                    if (v180 >= 2)
                    {
                      for (jj = 1; jj != v180; ++jj)
                      {
                        v951 = v181;
                        if ((int)v181 >= 1)
                        {
                          do
                          {
                            v952 = *v166++;
                            *v167 = v167[-(int)v181] != -v952;
                            ++v167;
                            --v951;
                          }
                          while (v951);
                        }
                      }
                    }
                    ++v949;
                  }
                  while (v949 != (_DWORD)v182);
                }
              }
              else if ((int)v182 >= 1)
              {
                v1588 = 0;
                do
                {
                  if ((int)v181 >= 1)
                    bzero(v167, (int)v181);
                  v167 += (int)v181;
                  v166 += (int)v181;
                  if (v180 > 1)
                  {
                    for (kk = 1; kk != v180; ++kk)
                    {
                      v1590 = v181;
                      if ((int)v181 >= 1)
                      {
                        do
                        {
                          *v167 = v167[-(int)v181] != -v166[-(int)v181];
                          ++v167;
                          ++v166;
                          --v1590;
                        }
                        while (v1590);
                      }
                    }
                  }
                  ++v1588;
                }
                while (v1588 != (_DWORD)v182);
              }
            }
            goto LABEL_2618;
          }
          v73 = 5;
        }
        (*((void (**)(void))*v72 + v73))();
        goto LABEL_149;
      }
      v62 = *(int *)(a1 + 24);
      v63 = *(unsigned __int8 *)(a1 + 28);
      v64 = *(unsigned __int8 *)(a1 + 29);
      if (v16)
      {
        if (v16 != 1)
        {
          if (v16 != 3)
            goto LABEL_2618;
          v65 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v65, (uint64_t)&v1835);
          v66 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v67 = 4;
            v66 = &v1835;
          }
          else
          {
            if (!v1837)
            {
LABEL_822:
              if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
                goto LABEL_2620;
              v852 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v62);
              v853 = *(unsigned __int8 **)(v1833[0] + 152);
              v854 = (*a3)[19];
              v855 = *(_QWORD *)(v1833[0] + 48);
              v856 = v855 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v62);
              if (v852 == 1)
              {
                v857 = mlx::core::array::shape((mlx::core::array *)v1833, v62);
                if (v63)
                {
                  if (v64)
                  {
                    if ((int)v856 >= 1)
                    {
                      v858 = 0;
                      v859 = v857 - 1;
                      do
                      {
                        v860 = (char *)v854 + v859;
                        v861 = &v853[v859];
                        v862 = v853[v859];
                        *((_BYTE *)v854 + v859) = v862;
                        v863 = v857 - 1;
                        if (v857 >= 2)
                        {
                          do
                          {
                            v864 = *--v861;
                            v862 *= v864;
                            *--v860 = v862;
                            --v863;
                          }
                          while (v863);
                        }
                        v854 = (int *)&v860[v857];
                        v853 = &v861[v857];
                        ++v858;
                      }
                      while (v858 != (_DWORD)v856);
                    }
                  }
                  else if ((int)v856 >= 1)
                  {
                    v1591 = 0;
                    v1592 = v857 - 1;
                    do
                    {
                      v1593 = (char *)v854 + v1592;
                      v1594 = &v853[v1592];
                      *((_BYTE *)v854 + v1592) = 1;
                      if (v857 >= 2)
                      {
                        v1595 = 1;
                        v1596 = v857 - 1;
                        do
                        {
                          v1597 = *v1594--;
                          v1595 *= v1597;
                          *--v1593 = v1595;
                          --v1596;
                        }
                        while (v1596);
                      }
                      v854 = (int *)&v1593[v857];
                      v853 = &v1594[v857];
                      ++v1591;
                    }
                    while (v1591 != (_DWORD)v856);
                  }
                }
                else if (v64)
                {
                  if ((int)v856 >= 1)
                  {
                    v1365 = 0;
                    do
                    {
                      v1366 = *v853;
                      *(_BYTE *)v854 = v1366;
                      v1367 = v857 - 1;
                      if (v857 >= 2)
                      {
                        do
                        {
                          v1368 = *++v853;
                          v1366 *= v1368;
                          *((_BYTE *)v854 + 1) = v1366;
                          v854 = (int *)((char *)v854 + 1);
                          --v1367;
                        }
                        while (v1367);
                      }
                      v854 = (int *)((char *)v854 + 1);
                      ++v853;
                      ++v1365;
                    }
                    while (v1365 != (_DWORD)v856);
                  }
                }
                else if ((int)v856 >= 1)
                {
                  v1808 = 0;
                  do
                  {
                    *(_BYTE *)v854 = 1;
                    if (v857 >= 2)
                    {
                      v1809 = 1;
                      v1810 = v857 - 1;
                      do
                      {
                        v1811 = *v853++;
                        v1809 *= v1811;
                        *((_BYTE *)v854 + 1) = v1809;
                        v854 = (int *)((char *)v854 + 1);
                        --v1810;
                      }
                      while (v1810);
                    }
                    v854 = (int *)((char *)v854 + 1);
                    ++v853;
                    ++v1808;
                  }
                  while (v1808 != (_DWORD)v856);
                }
              }
              else
              {
                v865 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v62);
                v866 = mlx::core::array::shape((mlx::core::array *)v1833, v62);
                v867 = v866;
                v868 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v62);
                v869 = v856 / v865;
                if (v63)
                {
                  if (v64)
                  {
                    if ((int)v869 >= 1)
                    {
                      v870 = 0;
                      v871 = (v866 - 1) * (int)v868;
                      v872 = v866 * (uint64_t)(int)v868;
                      do
                      {
                        v873 = (char *)v854 + v871;
                        v874 = &v853[v871];
                        if ((_DWORD)v868)
                          memmove(v873, v874, (int)v868);
                        if (v867 >= 2)
                        {
                          for (mm = 1; mm != v867; ++mm)
                          {
                            v876 = v868;
                            if ((int)v868 >= 1)
                            {
                              do
                              {
                                v877 = *--v874;
                                *(v873 - 1) = v877 * v873[(int)v868 - 1];
                                --v873;
                                --v876;
                              }
                              while (v876);
                            }
                          }
                        }
                        v854 = (int *)&v873[v872];
                        v853 = &v874[v872];
                        ++v870;
                      }
                      while (v870 != (_DWORD)v869);
                    }
                  }
                  else if ((int)v869 >= 1)
                  {
                    v1598 = 0;
                    v1599 = (v866 - 1) * (int)v868;
                    v1600 = v866 * (uint64_t)(int)v868;
                    do
                    {
                      v1601 = (char *)v854 + v1599;
                      if ((int)v868 >= 1)
                        memset(v1601, 1, (int)v868);
                      v1602 = &v853[v1599];
                      if (v867 > 1)
                      {
                        for (nn = 1; nn != v867; ++nn)
                        {
                          v1604 = v868;
                          if ((int)v868 >= 1)
                          {
                            do
                            {
                              *(v1601 - 1) = v1602[(int)v868 - 1] * v1601[(int)v868 - 1];
                              --v1601;
                              --v1602;
                              --v1604;
                            }
                            while (v1604);
                          }
                        }
                      }
                      v854 = (int *)&v1601[v1600];
                      v853 = &v1602[v1600];
                      ++v1598;
                    }
                    while (v1598 != (_DWORD)v869);
                  }
                }
                else if (v64)
                {
                  if ((int)v869 >= 1)
                  {
                    v1369 = 0;
                    do
                    {
                      if ((_DWORD)v868)
                        memmove(v854, v853, (int)v868);
                      v853 += (int)v868;
                      v854 = (int *)((char *)v854 + (int)v868);
                      if (v867 >= 2)
                      {
                        for (i1 = 1; i1 != v867; ++i1)
                        {
                          v1371 = v868;
                          if ((int)v868 >= 1)
                          {
                            do
                            {
                              v1372 = *v853++;
                              *(_BYTE *)v854 = v1372 * *((_BYTE *)v854 - (int)v868);
                              v854 = (int *)((char *)v854 + 1);
                              --v1371;
                            }
                            while (v1371);
                          }
                        }
                      }
                      ++v1369;
                    }
                    while (v1369 != (_DWORD)v869);
                  }
                }
                else if ((int)v869 >= 1)
                {
                  v1812 = 0;
                  do
                  {
                    if ((int)v868 >= 1)
                      memset(v854, 1, (int)v868);
                    v854 = (int *)((char *)v854 + (int)v868);
                    v853 += (int)v868;
                    if (v867 > 1)
                    {
                      for (i2 = 1; i2 != v867; ++i2)
                      {
                        v1814 = v868;
                        if ((int)v868 >= 1)
                        {
                          do
                          {
                            *(_BYTE *)v854 = v853[-(int)v868] * *((_BYTE *)v854 - (int)v868);
                            v854 = (int *)((char *)v854 + 1);
                            ++v853;
                            --v1814;
                          }
                          while (v1814);
                        }
                      }
                    }
                    ++v1812;
                  }
                  while (v1812 != (_DWORD)v869);
                }
              }
              goto LABEL_2618;
            }
            v67 = 5;
          }
          (*((void (**)(void))*v66 + v67))();
          goto LABEL_822;
        }
        v1835 = v15;
        mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
        v129 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                           * (_QWORD)(*a3)[6]));
        v1835 = &unk_2513463C8;
        v1836 = mlx::core::allocator::free;
        v1837 = (uint64_t *)&v1835;
        mlx::core::array::set_data(a3, (uint64_t)v129, (uint64_t)&v1835);
        v130 = (void **)v1837;
        if (v1837 == (uint64_t *)&v1835)
        {
          v131 = 4;
          v130 = &v1835;
        }
        else
        {
          if (!v1837)
          {
LABEL_847:
            if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
              goto LABEL_2620;
            v878 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v62);
            v879 = *(unsigned __int8 **)(v1833[0] + 152);
            v880 = (*a3)[19];
            v881 = *(_QWORD *)(v1833[0] + 48);
            v882 = v881 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v62);
            if (v878 == 1)
            {
              v883 = mlx::core::array::shape((mlx::core::array *)v1833, v62);
              if (v63)
              {
                if (v64)
                {
                  if ((int)v882 >= 1)
                  {
                    v884 = 0;
                    v885 = v883 - 1;
                    do
                    {
                      v886 = (char *)v880 + v885;
                      v887 = &v879[v885];
                      v888 = v879[v885];
                      *((_BYTE *)v880 + v885) = v888;
                      v889 = v883 - 1;
                      if (v883 >= 2)
                      {
                        do
                        {
                          v891 = *--v887;
                          v890 = v891;
                          if (v891 < v888)
                            v888 = v890;
                          *--v886 = v888;
                          --v889;
                        }
                        while (v889);
                      }
                      v880 = (int *)&v886[v883];
                      v879 = &v887[v883];
                      ++v884;
                    }
                    while (v884 != (_DWORD)v882);
                  }
                }
                else if ((int)v882 >= 1)
                {
                  v1605 = 0;
                  v1606 = v883 - 1;
                  do
                  {
                    v1607 = (char *)v880 + v1606;
                    v1608 = &v879[v1606];
                    *((_BYTE *)v880 + v1606) = 1;
                    if (v883 >= 2)
                    {
                      v1609 = 1;
                      v1610 = v883 - 1;
                      do
                      {
                        v1612 = *v1608--;
                        v1611 = v1612;
                        if (v1612 < v1609)
                          v1609 = v1611;
                        *--v1607 = v1609;
                        --v1610;
                      }
                      while (v1610);
                    }
                    v880 = (int *)&v1607[v883];
                    v879 = &v1608[v883];
                    ++v1605;
                  }
                  while (v1605 != (_DWORD)v882);
                }
              }
              else if (v64)
              {
                if ((int)v882 >= 1)
                {
                  v1491 = 0;
                  do
                  {
                    v1492 = *v879;
                    *(_BYTE *)v880 = *v879;
                    v1493 = v883 - 1;
                    if (v883 >= 2)
                    {
                      do
                      {
                        v1495 = *++v879;
                        v1494 = v1495;
                        if (v1495 < v1492)
                          v1492 = v1494;
                        *((_BYTE *)v880 + 1) = v1492;
                        v880 = (int *)((char *)v880 + 1);
                        --v1493;
                      }
                      while (v1493);
                    }
                    v880 = (int *)((char *)v880 + 1);
                    ++v879;
                    ++v1491;
                  }
                  while (v1491 != (_DWORD)v882);
                }
              }
              else if ((int)v882 >= 1)
              {
                v1815 = 0;
                do
                {
                  *(_BYTE *)v880 = 1;
                  if (v883 >= 2)
                  {
                    v1816 = 1;
                    v1817 = v883 - 1;
                    do
                    {
                      v1819 = *v879++;
                      v1818 = v1819;
                      if (v1819 < v1816)
                        v1816 = v1818;
                      *((_BYTE *)v880 + 1) = v1816;
                      v880 = (int *)((char *)v880 + 1);
                      --v1817;
                    }
                    while (v1817);
                  }
                  v880 = (int *)((char *)v880 + 1);
                  ++v879;
                  ++v1815;
                }
                while (v1815 != (_DWORD)v882);
              }
            }
            else
            {
              v892 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v62);
              v893 = mlx::core::array::shape((mlx::core::array *)v1833, v62);
              v894 = v893;
              v895 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v62);
              v896 = v882 / v892;
              if (v63)
              {
                if (v64)
                {
                  if ((int)v896 >= 1)
                  {
                    v897 = 0;
                    v898 = (v893 - 1) * (int)v895;
                    v899 = v893 * (uint64_t)(int)v895;
                    do
                    {
                      v900 = (char *)v880 + v898;
                      v901 = &v879[v898];
                      if ((_DWORD)v895)
                        memmove(v900, v901, (int)v895);
                      if (v894 >= 2)
                      {
                        for (i3 = 1; i3 != v894; ++i3)
                        {
                          v903 = v895;
                          if ((int)v895 >= 1)
                          {
                            do
                            {
                              v905 = *--v901;
                              v904 = v905;
                              if (v905 >= v900[(int)v895 - 1])
                                v904 = v900[(int)v895 - 1];
                              *--v900 = v904;
                              --v903;
                            }
                            while (v903);
                          }
                        }
                      }
                      v880 = (int *)&v900[v899];
                      v879 = &v901[v899];
                      ++v897;
                    }
                    while (v897 != (_DWORD)v896);
                  }
                }
                else if ((int)v896 >= 1)
                {
                  v1613 = 0;
                  v1614 = (v893 - 1) * (int)v895;
                  v1615 = v893 * (uint64_t)(int)v895;
                  v1616 = (int)v895 - 1;
                  do
                  {
                    v1617 = (char *)v880 + v1614;
                    if ((int)v895 >= 1)
                      memset(v1617, 1, (int)v895);
                    v1618 = &v879[v1614];
                    if (v894 > 1)
                    {
                      for (i4 = 1; i4 != v894; ++i4)
                      {
                        v1620 = v895;
                        if ((int)v895 >= 1)
                        {
                          do
                          {
                            v1621 = v1618[v1616];
                            if (v1621 >= v1617[v1616])
                              LOBYTE(v1621) = v1617[v1616];
                            *--v1617 = v1621;
                            --v1618;
                            --v1620;
                          }
                          while (v1620);
                        }
                      }
                    }
                    v880 = (int *)&v1617[v1615];
                    v879 = &v1618[v1615];
                    ++v1613;
                  }
                  while (v1613 != (_DWORD)v896);
                }
              }
              else if (v64)
              {
                if ((int)v896 >= 1)
                {
                  v1496 = 0;
                  do
                  {
                    if ((_DWORD)v895)
                      memmove(v880, v879, (int)v895);
                    v879 += (int)v895;
                    v880 = (int *)((char *)v880 + (int)v895);
                    if (v894 >= 2)
                    {
                      for (i5 = 1; i5 != v894; ++i5)
                      {
                        v1498 = v895;
                        if ((int)v895 >= 1)
                        {
                          do
                          {
                            v1500 = *v879++;
                            v1499 = v1500;
                            if (v1500 >= *((unsigned __int8 *)v880 - (int)v895))
                              v1499 = *((_BYTE *)v880 - (int)v895);
                            *(_BYTE *)v880 = v1499;
                            v880 = (int *)((char *)v880 + 1);
                            --v1498;
                          }
                          while (v1498);
                        }
                      }
                    }
                    ++v1496;
                  }
                  while (v1496 != (_DWORD)v896);
                }
              }
              else if ((int)v896 >= 1)
              {
                v1820 = 0;
                do
                {
                  if ((int)v895 >= 1)
                    memset(v880, 1, (int)v895);
                  v880 = (int *)((char *)v880 + (int)v895);
                  v879 += (int)v895;
                  if (v894 > 1)
                  {
                    for (i6 = 1; i6 != v894; ++i6)
                    {
                      v1822 = v895;
                      if ((int)v895 >= 1)
                      {
                        do
                        {
                          v1823 = v879[-(int)v895];
                          if (v1823 >= *((unsigned __int8 *)v880 - (int)v895))
                            LOBYTE(v1823) = *((_BYTE *)v880 - (int)v895);
                          *(_BYTE *)v880 = v1823;
                          v880 = (int *)((char *)v880 + 1);
                          ++v879;
                          --v1822;
                        }
                        while (v1822);
                      }
                    }
                  }
                  ++v1820;
                }
                while (v1820 != (_DWORD)v896);
              }
            }
            goto LABEL_2618;
          }
          v131 = 5;
        }
        (*((void (**)(void))*v130 + v131))();
        goto LABEL_847;
      }
      v1835 = v15;
      mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
      v132 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                         * (_QWORD)(*a3)[6]));
      v1835 = &unk_2513463C8;
      v1836 = mlx::core::allocator::free;
      v1837 = (uint64_t *)&v1835;
      mlx::core::array::set_data(a3, (uint64_t)v132, (uint64_t)&v1835);
      v133 = (void **)v1837;
      if (v1837 == (uint64_t *)&v1835)
      {
        v134 = 4;
        v133 = &v1835;
      }
      else
      {
        if (!v1837)
          goto LABEL_876;
        v134 = 5;
      }
      (*((void (**)(void))*v133 + v134))();
LABEL_876:
      if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
        goto LABEL_2620;
      v906 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v62);
      v907 = *(unsigned __int8 **)(v1833[0] + 152);
      v908 = (*a3)[19];
      v909 = *(_QWORD *)(v1833[0] + 48);
      v910 = v909 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v62);
      if (v906 == 1)
      {
        v911 = mlx::core::array::shape((mlx::core::array *)v1833, v62);
        v912 = v911;
        if (v63)
        {
          if (v64)
          {
            if ((int)v910 >= 1)
            {
              v913 = 0;
              v914 = v911 - 1;
              do
              {
                v915 = (char *)v908 + v914;
                v916 = &v907[v914];
                v917 = v907[v914];
                *((_BYTE *)v908 + v914) = v917;
                v918 = v911 - 1;
                if (v911 >= 2)
                {
                  do
                  {
                    v919 = *--v916;
                    v917 |= v919;
                    *--v915 = v917;
                    --v918;
                  }
                  while (v918);
                }
                v908 = (int *)&v915[v911];
                v907 = &v916[v911];
                ++v913;
              }
              while (v913 != (_DWORD)v910);
            }
          }
          else if ((int)v910 >= 1)
          {
            v1622 = v911 - 1;
            v1623 = ~(unint64_t)(v911 - 2) + v1622;
            do
            {
              *((_BYTE *)v908 + v1622) = 1;
              v1624 = v912 - 1;
              if (v912 >= 2)
              {
                memset((char *)v908 + v1623, 1, (v912 - 1));
                v1624 = ~(unint64_t)(v912 - 2) + v1622;
              }
              v908 = (int *)((char *)v908 + v1624 + v912);
              LODWORD(v910) = v910 - 1;
            }
            while ((_DWORD)v910);
          }
        }
        else if (v64)
        {
          if ((int)v910 >= 1)
          {
            v1531 = 0;
            do
            {
              v1532 = *v907;
              *(_BYTE *)v908 = v1532;
              v1533 = v911 - 1;
              if (v911 >= 2)
              {
                do
                {
                  v1534 = *++v907;
                  v1532 |= v1534;
                  *((_BYTE *)v908 + 1) = v1532;
                  v908 = (int *)((char *)v908 + 1);
                  --v1533;
                }
                while (v1533);
              }
              v908 = (int *)((char *)v908 + 1);
              ++v907;
              ++v1531;
            }
            while (v1531 != (_DWORD)v910);
          }
        }
        else if ((int)v910 >= 1)
        {
          v1824 = (v911 - 2) + 1;
          do
          {
            *(_BYTE *)v908 = 1;
            if (v912 >= 2)
            {
              memset((char *)v908 + 1, 1, (v912 - 1));
              v908 = (int *)((char *)v908 + v1824);
            }
            v908 = (int *)((char *)v908 + 1);
            LODWORD(v910) = v910 - 1;
          }
          while ((_DWORD)v910);
        }
      }
      else
      {
        v920 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v62);
        v921 = mlx::core::array::shape((mlx::core::array *)v1833, v62);
        v922 = v921;
        v923 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v62);
        v924 = v910 / v920;
        if (v63)
        {
          if (v64)
          {
            if ((int)v924 >= 1)
            {
              v925 = 0;
              v926 = (v921 - 1) * (int)v923;
              v927 = v921 * (uint64_t)(int)v923;
              do
              {
                v928 = (char *)v908 + v926;
                v929 = &v907[v926];
                if ((_DWORD)v923)
                  memmove(v928, v929, (int)v923);
                if (v922 >= 2)
                {
                  for (i7 = 1; i7 != v922; ++i7)
                  {
                    v931 = v923;
                    if ((int)v923 >= 1)
                    {
                      do
                      {
                        v932 = *--v929;
                        *(v928 - 1) = v928[(int)v923 - 1] | v932;
                        --v928;
                        --v931;
                      }
                      while (v931);
                    }
                  }
                }
                v908 = (int *)&v928[v927];
                v907 = &v929[v927];
                ++v925;
              }
              while (v925 != (_DWORD)v924);
            }
          }
          else if ((int)v924 >= 1)
          {
            v1625 = 0;
            v1626 = (v921 - 1) * (int)v923;
            v1627 = v921 * (uint64_t)(int)v923;
            do
            {
              v1628 = (char *)v908 + v1626;
              if ((int)v923 >= 1)
                memset(v1628, 1, (int)v923);
              v1629 = &v907[v1626];
              if (v922 > 1)
              {
                for (i8 = 1; i8 != v922; ++i8)
                {
                  v1631 = v923;
                  if ((int)v923 >= 1)
                  {
                    do
                    {
                      *(v1628 - 1) = v1628[(int)v923 - 1] | v1629[(int)v923 - 1];
                      --v1628;
                      --v1629;
                      --v1631;
                    }
                    while (v1631);
                  }
                }
              }
              v908 = (int *)&v1628[v1627];
              v907 = &v1629[v1627];
              ++v1625;
            }
            while (v1625 != (_DWORD)v924);
          }
        }
        else if (v64)
        {
          if ((int)v924 >= 1)
          {
            v1535 = 0;
            do
            {
              if ((_DWORD)v923)
                memmove(v908, v907, (int)v923);
              v907 += (int)v923;
              v908 = (int *)((char *)v908 + (int)v923);
              if (v922 >= 2)
              {
                for (i9 = 1; i9 != v922; ++i9)
                {
                  v1537 = v923;
                  if ((int)v923 >= 1)
                  {
                    do
                    {
                      v1538 = *v907++;
                      *(_BYTE *)v908 = *((_BYTE *)v908 - (int)v923) | v1538;
                      v908 = (int *)((char *)v908 + 1);
                      --v1537;
                    }
                    while (v1537);
                  }
                }
              }
              ++v1535;
            }
            while (v1535 != (_DWORD)v924);
          }
        }
        else if ((int)v924 >= 1)
        {
          v1825 = 0;
          do
          {
            if ((int)v923 >= 1)
              memset(v908, 1, (int)v923);
            v908 = (int *)((char *)v908 + (int)v923);
            v907 += (int)v923;
            if (v922 > 1)
            {
              for (i10 = 1; i10 != v922; ++i10)
              {
                v1827 = v923;
                if ((int)v923 >= 1)
                {
                  do
                  {
                    *(_BYTE *)v908 = *((_BYTE *)v908 - (int)v923) | v907[-(int)v923];
                    v908 = (int *)((char *)v908 + 1);
                    ++v907;
                    --v1827;
                  }
                  while (v1827);
                }
              }
            }
            ++v1825;
          }
          while (v1825 != (_DWORD)v924);
        }
      }
LABEL_2618:
      mlx::core::array::~array((mlx::core::array *)v1833);
      return;
    case 1:
      v43 = *(int *)(a1 + 24);
      v44 = *(unsigned __int8 *)(a1 + 28);
      v45 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v46 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v46, (uint64_t)&v1835);
          v47 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v48 = 4;
            v47 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_648;
            v48 = 5;
          }
          (*((void (**)(void))*v47 + v48))();
LABEL_648:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v678 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
          v679 = *(char **)(v1833[0] + 152);
          v680 = (*a3)[19];
          v681 = *(_QWORD *)(v1833[0] + 48);
          v682 = v681 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v43);
          if (v678 == 1)
          {
            v683 = mlx::core::array::shape((mlx::core::array *)v1833, v43);
            v684 = v683;
            if (v44)
            {
              if (v45)
              {
                if ((int)v682 >= 1)
                {
                  v685 = 0;
                  v686 = v683 - 1;
                  do
                  {
                    v687 = (char *)v680 + v686;
                    v688 = &v679[v686];
                    v689 = v679[v686];
                    *((_BYTE *)v680 + v686) = v689;
                    v690 = v683 - 1;
                    if (v683 >= 2)
                    {
                      do
                      {
                        v692 = *--v688;
                        v691 = v692;
                        if (v692 > v689)
                          v689 = v691;
                        *--v687 = v689;
                        --v690;
                      }
                      while (v690);
                    }
                    v680 = (int *)&v687[v683];
                    v679 = &v688[v683];
                    ++v685;
                  }
                  while (v685 != (_DWORD)v682);
                }
              }
              else if ((int)v682 >= 1)
              {
                v1462 = v683 - 1;
                v1463 = ~(unint64_t)(v683 - 2) + v1462;
                do
                {
                  *((_BYTE *)v680 + v1462) = -1;
                  v1464 = v684 - 1;
                  if (v684 >= 2)
                  {
                    memset((char *)v680 + v1463, 255, (v684 - 1));
                    v1464 = ~(unint64_t)(v684 - 2) + v1462;
                  }
                  v680 = (int *)((char *)v680 + v1464 + v684);
                  LODWORD(v682) = v682 - 1;
                }
                while ((_DWORD)v682);
              }
            }
            else if (v45)
            {
              if ((int)v682 >= 1)
              {
                v1109 = 0;
                do
                {
                  v1110 = *v679;
                  *(_BYTE *)v680 = *v679;
                  v1111 = v683 - 1;
                  if (v683 >= 2)
                  {
                    do
                    {
                      v1113 = *++v679;
                      v1112 = v1113;
                      if (v1113 > v1110)
                        v1110 = v1112;
                      *((_BYTE *)v680 + 1) = v1110;
                      v680 = (int *)((char *)v680 + 1);
                      --v1111;
                    }
                    while (v1111);
                  }
                  v680 = (int *)((char *)v680 + 1);
                  ++v679;
                  ++v1109;
                }
                while (v1109 != (_DWORD)v682);
              }
            }
            else if ((int)v682 >= 1)
            {
              v1758 = (v683 - 2) + 1;
              do
              {
                *(_BYTE *)v680 = -1;
                if (v684 >= 2)
                {
                  memset((char *)v680 + 1, 255, (v684 - 1));
                  v680 = (int *)((char *)v680 + v1758);
                }
                v680 = (int *)((char *)v680 + 1);
                LODWORD(v682) = v682 - 1;
              }
              while ((_DWORD)v682);
            }
          }
          else
          {
            v693 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
            v694 = mlx::core::array::shape((mlx::core::array *)v1833, v43);
            v695 = v694;
            v696 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
            v697 = v682 / v693;
            if (v44)
            {
              if (v45)
              {
                if ((int)v697 >= 1)
                {
                  v698 = 0;
                  v699 = (v694 - 1) * (int)v696;
                  v700 = v694 * (uint64_t)(int)v696;
                  do
                  {
                    v701 = (char *)v680 + v699;
                    v702 = &v679[v699];
                    if ((_DWORD)v696)
                      memmove(v701, v702, (int)v696);
                    if (v695 >= 2)
                    {
                      for (i11 = 1; i11 != v695; ++i11)
                      {
                        v704 = v696;
                        if ((int)v696 >= 1)
                        {
                          do
                          {
                            v706 = *--v702;
                            v705 = v706;
                            if (v706 <= v701[(int)v696 - 1])
                              v705 = v701[(int)v696 - 1];
                            *--v701 = v705;
                            --v704;
                          }
                          while (v704);
                        }
                      }
                    }
                    v680 = (int *)&v701[v700];
                    v679 = &v702[v700];
                    ++v698;
                  }
                  while (v698 != (_DWORD)v697);
                }
              }
              else if ((int)v697 >= 1)
              {
                v1465 = 0;
                v1466 = (v694 - 1) * (int)v696;
                v1467 = v694 * (uint64_t)(int)v696;
                v1468 = (int)v696 - 1;
                do
                {
                  v1469 = (char *)v680 + v1466;
                  if ((int)v696 >= 1)
                    memset(v1469, 255, (int)v696);
                  v1470 = &v679[v1466];
                  if (v695 > 1)
                  {
                    for (i12 = 1; i12 != v695; ++i12)
                    {
                      v1472 = v696;
                      if ((int)v696 >= 1)
                      {
                        do
                        {
                          v1473 = v1470[v1468];
                          if (v1473 <= v1469[v1468])
                            LOBYTE(v1473) = v1469[v1468];
                          *--v1469 = v1473;
                          --v1470;
                          --v1472;
                        }
                        while (v1472);
                      }
                    }
                  }
                  v680 = (int *)&v1469[v1467];
                  v679 = &v1470[v1467];
                  ++v1465;
                }
                while (v1465 != (_DWORD)v697);
              }
            }
            else if (v45)
            {
              if ((int)v697 >= 1)
              {
                v1114 = 0;
                do
                {
                  if ((_DWORD)v696)
                    memmove(v680, v679, (int)v696);
                  v679 += (int)v696;
                  v680 = (int *)((char *)v680 + (int)v696);
                  if (v695 >= 2)
                  {
                    for (i13 = 1; i13 != v695; ++i13)
                    {
                      v1116 = v696;
                      if ((int)v696 >= 1)
                      {
                        do
                        {
                          v1118 = *v679++;
                          v1117 = v1118;
                          if (v1118 <= *((unsigned __int8 *)v680 - (int)v696))
                            v1117 = *((_BYTE *)v680 - (int)v696);
                          *(_BYTE *)v680 = v1117;
                          v680 = (int *)((char *)v680 + 1);
                          --v1116;
                        }
                        while (v1116);
                      }
                    }
                  }
                  ++v1114;
                }
                while (v1114 != (_DWORD)v697);
              }
            }
            else if ((int)v697 >= 1)
            {
              v1759 = 0;
              do
              {
                if ((int)v696 >= 1)
                  memset(v680, 255, (int)v696);
                v680 = (int *)((char *)v680 + (int)v696);
                v679 += (int)v696;
                if (v695 > 1)
                {
                  for (i14 = 1; i14 != v695; ++i14)
                  {
                    v1761 = v696;
                    if ((int)v696 >= 1)
                    {
                      do
                      {
                        v1762 = v679[-(int)v696];
                        if (v1762 <= *((unsigned __int8 *)v680 - (int)v696))
                          LOBYTE(v1762) = *((_BYTE *)v680 - (int)v696);
                        *(_BYTE *)v680 = v1762;
                        v680 = (int *)((char *)v680 + 1);
                        ++v679;
                        --v1761;
                      }
                      while (v1761);
                    }
                  }
                }
                ++v1759;
              }
              while (v1759 != (_DWORD)v697);
            }
          }
          goto LABEL_2618;
        case 1:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v110 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v110, (uint64_t)&v1835);
          v111 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v112 = 4;
            v111 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_677;
            v112 = 5;
          }
          (*((void (**)(void))*v111 + v112))();
LABEL_677:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v707 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
          v708 = *(unsigned __int8 **)(v1833[0] + 152);
          v709 = (*a3)[19];
          v710 = *(_QWORD *)(v1833[0] + 48);
          v711 = v710 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v43);
          if (v707 == 1)
          {
            v712 = mlx::core::array::shape((mlx::core::array *)v1833, v43);
            if (v44)
            {
              if (v45)
              {
                if ((int)v711 >= 1)
                {
                  v713 = 0;
                  v714 = v712 - 1;
                  do
                  {
                    v715 = (char *)v709 + v714;
                    v716 = &v708[v714];
                    v717 = v708[v714];
                    *((_BYTE *)v709 + v714) = v717;
                    v718 = v712 - 1;
                    if (v712 >= 2)
                    {
                      do
                      {
                        v720 = *--v716;
                        v719 = v720;
                        if (v720 < v717)
                          v717 = v719;
                        *--v715 = v717;
                        --v718;
                      }
                      while (v718);
                    }
                    v709 = (int *)&v715[v712];
                    v708 = &v716[v712];
                    ++v713;
                  }
                  while (v713 != (_DWORD)v711);
                }
              }
              else if ((int)v711 >= 1)
              {
                v1474 = 0;
                v1475 = v712 - 1;
                do
                {
                  v1476 = (char *)v709 + v1475;
                  v1477 = &v708[v1475];
                  *((_BYTE *)v709 + v1475) = -1;
                  if (v712 >= 2)
                  {
                    v1478 = -1;
                    v1479 = v712 - 1;
                    do
                    {
                      v1481 = *v1477--;
                      v1480 = v1481;
                      if (v1481 < v1478)
                        v1478 = v1480;
                      *--v1476 = v1478;
                      --v1479;
                    }
                    while (v1479);
                  }
                  v709 = (int *)&v1476[v712];
                  v708 = &v1477[v712];
                  ++v1474;
                }
                while (v1474 != (_DWORD)v711);
              }
            }
            else if (v45)
            {
              if ((int)v711 >= 1)
              {
                v1119 = 0;
                do
                {
                  v1120 = *v708;
                  *(_BYTE *)v709 = *v708;
                  v1121 = v712 - 1;
                  if (v712 >= 2)
                  {
                    do
                    {
                      v1123 = *++v708;
                      v1122 = v1123;
                      if (v1123 < v1120)
                        v1120 = v1122;
                      *((_BYTE *)v709 + 1) = v1120;
                      v709 = (int *)((char *)v709 + 1);
                      --v1121;
                    }
                    while (v1121);
                  }
                  v709 = (int *)((char *)v709 + 1);
                  ++v708;
                  ++v1119;
                }
                while (v1119 != (_DWORD)v711);
              }
            }
            else if ((int)v711 >= 1)
            {
              v1763 = 0;
              do
              {
                *(_BYTE *)v709 = -1;
                if (v712 >= 2)
                {
                  v1764 = -1;
                  v1765 = v712 - 1;
                  do
                  {
                    v1767 = *v708++;
                    v1766 = v1767;
                    if (v1767 < v1764)
                      v1764 = v1766;
                    *((_BYTE *)v709 + 1) = v1764;
                    v709 = (int *)((char *)v709 + 1);
                    --v1765;
                  }
                  while (v1765);
                }
                v709 = (int *)((char *)v709 + 1);
                ++v708;
                ++v1763;
              }
              while (v1763 != (_DWORD)v711);
            }
          }
          else
          {
            v721 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
            v722 = mlx::core::array::shape((mlx::core::array *)v1833, v43);
            v723 = v722;
            v724 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
            v725 = v711 / v721;
            if (v44)
            {
              if (v45)
              {
                if ((int)v725 >= 1)
                {
                  v726 = 0;
                  v727 = (v722 - 1) * (int)v724;
                  v728 = v722 * (uint64_t)(int)v724;
                  do
                  {
                    v729 = (char *)v709 + v727;
                    v730 = &v708[v727];
                    if ((_DWORD)v724)
                      memmove(v729, v730, (int)v724);
                    if (v723 >= 2)
                    {
                      for (i15 = 1; i15 != v723; ++i15)
                      {
                        v732 = v724;
                        if ((int)v724 >= 1)
                        {
                          do
                          {
                            v734 = *--v730;
                            v733 = v734;
                            if (v734 >= v729[(int)v724 - 1])
                              v733 = v729[(int)v724 - 1];
                            *--v729 = v733;
                            --v732;
                          }
                          while (v732);
                        }
                      }
                    }
                    v709 = (int *)&v729[v728];
                    v708 = &v730[v728];
                    ++v726;
                  }
                  while (v726 != (_DWORD)v725);
                }
              }
              else if ((int)v725 >= 1)
              {
                v1482 = 0;
                v1483 = (v722 - 1) * (int)v724;
                v1484 = v722 * (uint64_t)(int)v724;
                v1485 = (int)v724 - 1;
                do
                {
                  v1486 = (char *)v709 + v1483;
                  if ((int)v724 >= 1)
                    memset(v1486, 255, (int)v724);
                  v1487 = &v708[v1483];
                  if (v723 > 1)
                  {
                    for (i16 = 1; i16 != v723; ++i16)
                    {
                      v1489 = v724;
                      if ((int)v724 >= 1)
                      {
                        do
                        {
                          v1490 = v1487[v1485];
                          if (v1490 >= v1486[v1485])
                            LOBYTE(v1490) = v1486[v1485];
                          *--v1486 = v1490;
                          --v1487;
                          --v1489;
                        }
                        while (v1489);
                      }
                    }
                  }
                  v709 = (int *)&v1486[v1484];
                  v708 = &v1487[v1484];
                  ++v1482;
                }
                while (v1482 != (_DWORD)v725);
              }
            }
            else if (v45)
            {
              if ((int)v725 >= 1)
              {
                v1124 = 0;
                do
                {
                  if ((_DWORD)v724)
                    memmove(v709, v708, (int)v724);
                  v708 += (int)v724;
                  v709 = (int *)((char *)v709 + (int)v724);
                  if (v723 >= 2)
                  {
                    for (i17 = 1; i17 != v723; ++i17)
                    {
                      v1126 = v724;
                      if ((int)v724 >= 1)
                      {
                        do
                        {
                          v1128 = *v708++;
                          v1127 = v1128;
                          if (v1128 >= *((unsigned __int8 *)v709 - (int)v724))
                            v1127 = *((_BYTE *)v709 - (int)v724);
                          *(_BYTE *)v709 = v1127;
                          v709 = (int *)((char *)v709 + 1);
                          --v1126;
                        }
                        while (v1126);
                      }
                    }
                  }
                  ++v1124;
                }
                while (v1124 != (_DWORD)v725);
              }
            }
            else if ((int)v725 >= 1)
            {
              v1768 = 0;
              do
              {
                if ((int)v724 >= 1)
                  memset(v709, 255, (int)v724);
                v709 = (int *)((char *)v709 + (int)v724);
                v708 += (int)v724;
                if (v723 > 1)
                {
                  for (i18 = 1; i18 != v723; ++i18)
                  {
                    v1770 = v724;
                    if ((int)v724 >= 1)
                    {
                      do
                      {
                        v1771 = v708[-(int)v724];
                        if (v1771 >= *((unsigned __int8 *)v709 - (int)v724))
                          LOBYTE(v1771) = *((_BYTE *)v709 - (int)v724);
                        *(_BYTE *)v709 = v1771;
                        v709 = (int *)((char *)v709 + 1);
                        ++v708;
                        --v1770;
                      }
                      while (v1770);
                    }
                  }
                }
                ++v1768;
              }
              while (v1768 != (_DWORD)v725);
            }
          }
          goto LABEL_2618;
        case 2:
          v95 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v95, (uint64_t)&v1835);
          v96 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v97 = 4;
            v96 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_299;
            v97 = 5;
          }
          (*((void (**)(void))*v96 + v97))();
LABEL_299:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v321 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
          v322 = *(unsigned __int8 **)(v1833[0] + 152);
          v323 = (*a3)[19];
          v324 = *(_QWORD *)(v1833[0] + 48);
          v325 = v324 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v43);
          if (v321 == 1)
          {
            v326 = mlx::core::array::shape((mlx::core::array *)v1833, v43);
            if (v44)
            {
              if (v45)
              {
                if ((int)v325 >= 1)
                {
                  v327 = 0;
                  v328 = v326 - 1;
                  do
                  {
                    v329 = (char *)v323 + v328;
                    v330 = &v322[v328];
                    v331 = v322[v328];
                    *((_BYTE *)v323 + v328) = v331;
                    v332 = v326 - 1;
                    if (v326 >= 2)
                    {
                      do
                      {
                        v333 = *--v330;
                        v331 += v333;
                        *--v329 = v331;
                        --v332;
                      }
                      while (v332);
                    }
                    v323 = (int *)&v329[v326];
                    v322 = &v330[v326];
                    ++v327;
                  }
                  while (v327 != (_DWORD)v325);
                }
              }
              else if ((int)v325 >= 1)
              {
                v1267 = 0;
                v1268 = v326 - 1;
                do
                {
                  v1269 = (char *)v323 + v1268;
                  v1270 = &v322[v1268];
                  *((_BYTE *)v323 + v1268) = 0;
                  if (v326 >= 2)
                  {
                    v1271 = 0;
                    v1272 = v326 - 1;
                    do
                    {
                      v1273 = *v1270--;
                      v1271 += v1273;
                      *--v1269 = v1271;
                      --v1272;
                    }
                    while (v1272);
                  }
                  v323 = (int *)&v1269[v326];
                  v322 = &v1270[v326];
                  ++v1267;
                }
                while (v1267 != (_DWORD)v325);
              }
            }
            else if (v45)
            {
              if ((int)v325 >= 1)
              {
                v993 = 0;
                do
                {
                  v994 = *v322;
                  *(_BYTE *)v323 = v994;
                  v995 = v326 - 1;
                  if (v326 >= 2)
                  {
                    do
                    {
                      v996 = *++v322;
                      v994 += v996;
                      *((_BYTE *)v323 + 1) = v994;
                      v323 = (int *)((char *)v323 + 1);
                      --v995;
                    }
                    while (v995);
                  }
                  v323 = (int *)((char *)v323 + 1);
                  ++v322;
                  ++v993;
                }
                while (v993 != (_DWORD)v325);
              }
            }
            else if ((int)v325 >= 1)
            {
              v1667 = 0;
              do
              {
                *(_BYTE *)v323 = 0;
                if (v326 >= 2)
                {
                  v1668 = 0;
                  v1669 = v326 - 1;
                  do
                  {
                    v1670 = *v322++;
                    v1668 += v1670;
                    *((_BYTE *)v323 + 1) = v1668;
                    v323 = (int *)((char *)v323 + 1);
                    --v1669;
                  }
                  while (v1669);
                }
                v323 = (int *)((char *)v323 + 1);
                ++v322;
                ++v1667;
              }
              while (v1667 != (_DWORD)v325);
            }
          }
          else
          {
            v334 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
            v335 = mlx::core::array::shape((mlx::core::array *)v1833, v43);
            v336 = v335;
            v337 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
            v338 = v325 / v334;
            if (v44)
            {
              if (v45)
              {
                if ((int)v338 >= 1)
                {
                  v339 = 0;
                  v340 = (v335 - 1) * (int)v337;
                  v341 = v335 * (uint64_t)(int)v337;
                  do
                  {
                    v342 = (char *)v323 + v340;
                    v343 = &v322[v340];
                    if ((_DWORD)v337)
                      memmove(v342, v343, (int)v337);
                    if (v336 >= 2)
                    {
                      for (i19 = 1; i19 != v336; ++i19)
                      {
                        v345 = v337;
                        if ((int)v337 >= 1)
                        {
                          do
                          {
                            v346 = *--v343;
                            *(v342 - 1) = v346 + v342[(int)v337 - 1];
                            --v342;
                            --v345;
                          }
                          while (v345);
                        }
                      }
                    }
                    v323 = (int *)&v342[v341];
                    v322 = &v343[v341];
                    ++v339;
                  }
                  while (v339 != (_DWORD)v338);
                }
              }
              else if ((int)v338 >= 1)
              {
                v1274 = 0;
                v1275 = (v335 - 1) * (int)v337;
                v1276 = v335 * (uint64_t)(int)v337;
                do
                {
                  v1277 = (char *)v323 + v1275;
                  if ((int)v337 >= 1)
                    bzero(v1277, (int)v337);
                  v1278 = &v322[v1275];
                  if (v336 > 1)
                  {
                    for (i20 = 1; i20 != v336; ++i20)
                    {
                      v1280 = v337;
                      if ((int)v337 >= 1)
                      {
                        do
                        {
                          *(v1277 - 1) = v1278[(int)v337 - 1] + v1277[(int)v337 - 1];
                          --v1277;
                          --v1278;
                          --v1280;
                        }
                        while (v1280);
                      }
                    }
                  }
                  v323 = (int *)&v1277[v1276];
                  v322 = &v1278[v1276];
                  ++v1274;
                }
                while (v1274 != (_DWORD)v338);
              }
            }
            else if (v45)
            {
              if ((int)v338 >= 1)
              {
                v997 = 0;
                do
                {
                  if ((_DWORD)v337)
                    memmove(v323, v322, (int)v337);
                  v322 += (int)v337;
                  v323 = (int *)((char *)v323 + (int)v337);
                  if (v336 >= 2)
                  {
                    for (i21 = 1; i21 != v336; ++i21)
                    {
                      v999 = v337;
                      if ((int)v337 >= 1)
                      {
                        do
                        {
                          v1000 = *v322++;
                          *(_BYTE *)v323 = v1000 + *((_BYTE *)v323 - (int)v337);
                          v323 = (int *)((char *)v323 + 1);
                          --v999;
                        }
                        while (v999);
                      }
                    }
                  }
                  ++v997;
                }
                while (v997 != (_DWORD)v338);
              }
            }
            else if ((int)v338 >= 1)
            {
              v1671 = 0;
              do
              {
                if ((int)v337 >= 1)
                  bzero(v323, (int)v337);
                v323 = (int *)((char *)v323 + (int)v337);
                v322 += (int)v337;
                if (v336 > 1)
                {
                  for (i22 = 1; i22 != v336; ++i22)
                  {
                    v1673 = v337;
                    if ((int)v337 >= 1)
                    {
                      do
                      {
                        *(_BYTE *)v323 = v322[-(int)v337] + *((_BYTE *)v323 - (int)v337);
                        v323 = (int *)((char *)v323 + 1);
                        ++v322;
                        --v1673;
                      }
                      while (v1673);
                    }
                  }
                }
                ++v1671;
              }
              while (v1671 != (_DWORD)v338);
            }
          }
          goto LABEL_2618;
        case 3:
          v104 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v104, (uint64_t)&v1835);
          v105 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v106 = 4;
            v105 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_349;
            v106 = 5;
          }
          (*((void (**)(void))*v105 + v106))();
LABEL_349:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v373 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
          v374 = *(unsigned __int8 **)(v1833[0] + 152);
          v375 = (*a3)[19];
          v376 = *(_QWORD *)(v1833[0] + 48);
          v377 = v376 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v43);
          if (v373 == 1)
          {
            v378 = mlx::core::array::shape((mlx::core::array *)v1833, v43);
            if (v44)
            {
              if (v45)
              {
                if ((int)v377 >= 1)
                {
                  v379 = 0;
                  v380 = v378 - 1;
                  do
                  {
                    v381 = (char *)v375 + v380;
                    v382 = &v374[v380];
                    v383 = v374[v380];
                    *((_BYTE *)v375 + v380) = v383;
                    v384 = v378 - 1;
                    if (v378 >= 2)
                    {
                      do
                      {
                        v385 = *--v382;
                        v383 *= v385;
                        *--v381 = v383;
                        --v384;
                      }
                      while (v384);
                    }
                    v375 = (int *)&v381[v378];
                    v374 = &v382[v378];
                    ++v379;
                  }
                  while (v379 != (_DWORD)v377);
                }
              }
              else if ((int)v377 >= 1)
              {
                v1295 = 0;
                v1296 = v378 - 1;
                do
                {
                  v1297 = (char *)v375 + v1296;
                  v1298 = &v374[v1296];
                  *((_BYTE *)v375 + v1296) = 1;
                  if (v378 >= 2)
                  {
                    v1299 = 1;
                    v1300 = v378 - 1;
                    do
                    {
                      v1301 = *v1298--;
                      v1299 *= v1301;
                      *--v1297 = v1299;
                      --v1300;
                    }
                    while (v1300);
                  }
                  v375 = (int *)&v1297[v378];
                  v374 = &v1298[v378];
                  ++v1295;
                }
                while (v1295 != (_DWORD)v377);
              }
            }
            else if (v45)
            {
              if ((int)v377 >= 1)
              {
                v1009 = 0;
                do
                {
                  v1010 = *v374;
                  *(_BYTE *)v375 = v1010;
                  v1011 = v378 - 1;
                  if (v378 >= 2)
                  {
                    do
                    {
                      v1012 = *++v374;
                      v1010 *= v1012;
                      *((_BYTE *)v375 + 1) = v1010;
                      v375 = (int *)((char *)v375 + 1);
                      --v1011;
                    }
                    while (v1011);
                  }
                  v375 = (int *)((char *)v375 + 1);
                  ++v374;
                  ++v1009;
                }
                while (v1009 != (_DWORD)v377);
              }
            }
            else if ((int)v377 >= 1)
            {
              v1681 = 0;
              do
              {
                *(_BYTE *)v375 = 1;
                if (v378 >= 2)
                {
                  v1682 = 1;
                  v1683 = v378 - 1;
                  do
                  {
                    v1684 = *v374++;
                    v1682 *= v1684;
                    *((_BYTE *)v375 + 1) = v1682;
                    v375 = (int *)((char *)v375 + 1);
                    --v1683;
                  }
                  while (v1683);
                }
                v375 = (int *)((char *)v375 + 1);
                ++v374;
                ++v1681;
              }
              while (v1681 != (_DWORD)v377);
            }
          }
          else
          {
            v386 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
            v387 = mlx::core::array::shape((mlx::core::array *)v1833, v43);
            v388 = v387;
            v389 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v43);
            v390 = v377 / v386;
            if (v44)
            {
              if (v45)
              {
                if ((int)v390 >= 1)
                {
                  v391 = 0;
                  v392 = (v387 - 1) * (int)v389;
                  v393 = v387 * (uint64_t)(int)v389;
                  do
                  {
                    v394 = (char *)v375 + v392;
                    v395 = &v374[v392];
                    if ((_DWORD)v389)
                      memmove(v394, v395, (int)v389);
                    if (v388 >= 2)
                    {
                      for (i23 = 1; i23 != v388; ++i23)
                      {
                        v397 = v389;
                        if ((int)v389 >= 1)
                        {
                          do
                          {
                            v398 = *--v395;
                            *(v394 - 1) = v398 * v394[(int)v389 - 1];
                            --v394;
                            --v397;
                          }
                          while (v397);
                        }
                      }
                    }
                    v375 = (int *)&v394[v393];
                    v374 = &v395[v393];
                    ++v391;
                  }
                  while (v391 != (_DWORD)v390);
                }
              }
              else if ((int)v390 >= 1)
              {
                v1302 = 0;
                v1303 = (v387 - 1) * (int)v389;
                v1304 = v387 * (uint64_t)(int)v389;
                do
                {
                  v1305 = (char *)v375 + v1303;
                  if ((int)v389 >= 1)
                    memset(v1305, 1, (int)v389);
                  v1306 = &v374[v1303];
                  if (v388 > 1)
                  {
                    for (i24 = 1; i24 != v388; ++i24)
                    {
                      v1308 = v389;
                      if ((int)v389 >= 1)
                      {
                        do
                        {
                          *(v1305 - 1) = v1306[(int)v389 - 1] * v1305[(int)v389 - 1];
                          --v1305;
                          --v1306;
                          --v1308;
                        }
                        while (v1308);
                      }
                    }
                  }
                  v375 = (int *)&v1305[v1304];
                  v374 = &v1306[v1304];
                  ++v1302;
                }
                while (v1302 != (_DWORD)v390);
              }
            }
            else if (v45)
            {
              if ((int)v390 >= 1)
              {
                v1013 = 0;
                do
                {
                  if ((_DWORD)v389)
                    memmove(v375, v374, (int)v389);
                  v374 += (int)v389;
                  v375 = (int *)((char *)v375 + (int)v389);
                  if (v388 >= 2)
                  {
                    for (i25 = 1; i25 != v388; ++i25)
                    {
                      v1015 = v389;
                      if ((int)v389 >= 1)
                      {
                        do
                        {
                          v1016 = *v374++;
                          *(_BYTE *)v375 = v1016 * *((_BYTE *)v375 - (int)v389);
                          v375 = (int *)((char *)v375 + 1);
                          --v1015;
                        }
                        while (v1015);
                      }
                    }
                  }
                  ++v1013;
                }
                while (v1013 != (_DWORD)v390);
              }
            }
            else if ((int)v390 >= 1)
            {
              v1685 = 0;
              do
              {
                if ((int)v389 >= 1)
                  memset(v375, 1, (int)v389);
                v375 = (int *)((char *)v375 + (int)v389);
                v374 += (int)v389;
                if (v388 > 1)
                {
                  for (i26 = 1; i26 != v388; ++i26)
                  {
                    v1687 = v389;
                    if ((int)v389 >= 1)
                    {
                      do
                      {
                        *(_BYTE *)v375 = v374[-(int)v389] * *((_BYTE *)v375 - (int)v389);
                        v375 = (int *)((char *)v375 + 1);
                        ++v374;
                        --v1687;
                      }
                      while (v1687);
                    }
                  }
                }
                ++v1685;
              }
              while (v1685 != (_DWORD)v390);
            }
          }
          break;
        default:
          goto LABEL_2618;
      }
      goto LABEL_2618;
    case 2:
      v31 = *(int *)(a1 + 24);
      v32 = *(unsigned __int8 *)(a1 + 28);
      v33 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v34 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v34, (uint64_t)&v1835);
          v35 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v36 = 4;
            v35 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_532;
            v36 = 5;
          }
          (*((void (**)(void))*v35 + v36))();
LABEL_532:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v562 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
          v563 = *(int **)(v1833[0] + 152);
          v564 = (*a3)[19];
          v565 = *(_QWORD *)(v1833[0] + 48);
          v566 = v565 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v31);
          if (v562 == 1)
          {
            v567 = mlx::core::array::shape((mlx::core::array *)v1833, v31);
            v568 = v567;
            if (v32)
            {
              if (v33)
              {
                if ((int)v566 >= 1)
                {
                  v569 = 0;
                  v570 = v567 - 1;
                  do
                  {
                    v571 = &v564[v570];
                    v572 = &v563[v570];
                    v573 = *v572;
                    *v571 = *v572;
                    v574 = v567 - 1;
                    if (v567 >= 2)
                    {
                      do
                      {
                        v576 = *--v572;
                        v575 = v576;
                        if (v576 > v573)
                          v573 = v575;
                        *--v571 = v573;
                        --v574;
                      }
                      while (v574);
                    }
                    v564 = &v571[v567];
                    v563 = &v572[v567];
                    ++v569;
                  }
                  while (v569 != (_DWORD)v566);
                }
              }
              else if ((int)v566 >= 1)
              {
                v1403 = v567 - 1;
                v1404 = 4 * v1403 - 4 * (v567 - 2) - 4;
                v1405 = 4 * (v567 - 1);
                do
                {
                  v1406 = &v564[v1403];
                  *v1406 = -1;
                  if (v568 >= 2)
                  {
                    v1406 = (int *)((char *)v564 + v1404);
                    memset((char *)v564 + v1404, 255, v1405);
                  }
                  v564 = &v1406[v568];
                  LODWORD(v566) = v566 - 1;
                }
                while ((_DWORD)v566);
              }
            }
            else if (v33)
            {
              if ((int)v566 >= 1)
              {
                v1069 = 0;
                do
                {
                  v1070 = *v563;
                  *v564 = *v563;
                  v1071 = v567 - 1;
                  if (v567 >= 2)
                  {
                    do
                    {
                      v1073 = v563[1];
                      ++v563;
                      v1072 = v1073;
                      if (v1073 > v1070)
                        v1070 = v1072;
                      v564[1] = v1070;
                      ++v564;
                      --v1071;
                    }
                    while (v1071);
                  }
                  ++v564;
                  ++v563;
                  ++v1069;
                }
                while (v1069 != (_DWORD)v566);
              }
            }
            else if ((int)v566 >= 1)
            {
              v1730 = 4 * (v567 - 2) + 4;
              do
              {
                *v564 = -1;
                if (v568 >= 2)
                {
                  memset(v564 + 1, 255, 4 * (v568 - 1));
                  v564 = (int *)((char *)v564 + v1730);
                }
                ++v564;
                LODWORD(v566) = v566 - 1;
              }
              while ((_DWORD)v566);
            }
          }
          else
          {
            v577 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
            v578 = mlx::core::array::shape((mlx::core::array *)v1833, v31);
            v579 = v578;
            v580 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
            v581 = v566 / v577;
            if (v32)
            {
              if (v33)
              {
                if ((int)v581 >= 1)
                {
                  v582 = 0;
                  v583 = (v578 - 1) * (int)v580;
                  v584 = v578 * (int)v580;
                  do
                  {
                    v586 = &v564[v583];
                    v587 = (char *)&v563[v583];
                    if ((_DWORD)v580)
                      memmove(v586, v587, 4 * (int)v580);
                    if (v579 >= 2)
                    {
                      for (i27 = 1; i27 != v579; ++i27)
                      {
                        v589 = v580;
                        if ((int)v580 >= 1)
                        {
                          do
                          {
                            v591 = *((_DWORD *)v587 - 1);
                            v587 -= 4;
                            v590 = v591;
                            v585 = 4 * (int)v580 - 4;
                            if (v591 <= *(int *)((char *)v586 + v585))
                              v590 = *(int *)((char *)v586 + v585);
                            *--v586 = v590;
                            --v589;
                          }
                          while (v589);
                        }
                      }
                    }
                    v564 = &v586[v584];
                    v563 = (int *)&v587[4 * v584];
                    ++v582;
                  }
                  while (v582 != (_DWORD)v581);
                }
              }
              else if ((int)v581 >= 1)
              {
                v1407 = 0;
                v1408 = (v578 - 1) * (int)v580;
                v1409 = v578 * (int)v580;
                v1410 = 4 * (int)v580 - 4;
                do
                {
                  v1411 = &v564[v1408];
                  if ((int)v580 >= 1)
                    memset(v1411, 255, 4 * ((int)v580 - (unint64_t)(((int)v580 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1412 = &v563[v1408];
                  if (v579 > 1)
                  {
                    for (i28 = 1; i28 != v579; ++i28)
                    {
                      v1414 = v580;
                      if ((int)v580 >= 1)
                      {
                        do
                        {
                          v1415 = *(int *)((char *)v1412 + v1410);
                          if (v1415 <= *(int *)((char *)v1411 + v1410))
                            v1415 = *(int *)((char *)v1411 + v1410);
                          *--v1411 = v1415;
                          --v1412;
                          --v1414;
                        }
                        while (v1414);
                      }
                    }
                  }
                  v564 = &v1411[v1409];
                  v563 = &v1412[v1409];
                  ++v1407;
                }
                while (v1407 != (_DWORD)v581);
              }
            }
            else if (v33)
            {
              if ((int)v581 >= 1)
              {
                v1074 = 0;
                do
                {
                  if ((_DWORD)v580)
                    memmove(v564, v563, 4 * (int)v580);
                  v563 += (int)v580;
                  v564 += (int)v580;
                  if (v579 >= 2)
                  {
                    for (i29 = 1; i29 != v579; ++i29)
                    {
                      v1076 = v580;
                      if ((int)v580 >= 1)
                      {
                        do
                        {
                          v1078 = *v563++;
                          v1077 = v1078;
                          if (v1078 <= v564[-(int)v580])
                            v1077 = v564[-(int)v580];
                          *v564++ = v1077;
                          --v1076;
                        }
                        while (v1076);
                      }
                    }
                  }
                  ++v1074;
                }
                while (v1074 != (_DWORD)v581);
              }
            }
            else if ((int)v581 >= 1)
            {
              v1731 = 0;
              do
              {
                if ((int)v580 >= 1)
                  memset(v564, 255, 4 * ((int)v580 - (unint64_t)(((int)v580 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v564 += (int)v580;
                v563 += (int)v580;
                if (v579 > 1)
                {
                  for (i30 = 1; i30 != v579; ++i30)
                  {
                    v1733 = v580;
                    if ((int)v580 >= 1)
                    {
                      do
                      {
                        v1734 = v563[-(int)v580];
                        if (v1734 <= v564[-(int)v580])
                          v1734 = v564[-(int)v580];
                        *v564++ = v1734;
                        ++v563;
                        --v1733;
                      }
                      while (v1733);
                    }
                  }
                }
                ++v1731;
              }
              while (v1731 != (_DWORD)v581);
            }
          }
          goto LABEL_2618;
        case 1:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v92 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v92, (uint64_t)&v1835);
          v93 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v94 = 4;
            v93 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_561;
            v94 = 5;
          }
          (*((void (**)(void))*v93 + v94))();
LABEL_561:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v592 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
          v593 = *(int **)(v1833[0] + 152);
          v594 = (*a3)[19];
          v595 = *(_QWORD *)(v1833[0] + 48);
          v596 = v595 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v31);
          if (v592 == 1)
          {
            v597 = mlx::core::array::shape((mlx::core::array *)v1833, v31);
            if (v32)
            {
              if (v33)
              {
                if ((int)v596 >= 1)
                {
                  v598 = 0;
                  v599 = v597 - 1;
                  do
                  {
                    v600 = &v594[v599];
                    v601 = &v593[v599];
                    v602 = *v601;
                    *v600 = *v601;
                    v603 = v597 - 1;
                    if (v597 >= 2)
                    {
                      do
                      {
                        v605 = *--v601;
                        v604 = v605;
                        if (v605 < v602)
                          v602 = v604;
                        *--v600 = v602;
                        --v603;
                      }
                      while (v603);
                    }
                    v594 = &v600[v597];
                    v593 = &v601[v597];
                    ++v598;
                  }
                  while (v598 != (_DWORD)v596);
                }
              }
              else if ((int)v596 >= 1)
              {
                v1416 = 0;
                v1417 = v597 - 1;
                do
                {
                  v1418 = &v594[v1417];
                  v1419 = (unsigned int *)&v593[v1417];
                  *v1418 = -1;
                  if (v597 >= 2)
                  {
                    v1420 = -1;
                    v1421 = v597 - 1;
                    do
                    {
                      v1423 = *v1419--;
                      v1422 = v1423;
                      if (v1423 < v1420)
                        v1420 = v1422;
                      *--v1418 = v1420;
                      --v1421;
                    }
                    while (v1421);
                  }
                  v594 = &v1418[v597];
                  v593 = (int *)&v1419[v597];
                  ++v1416;
                }
                while (v1416 != (_DWORD)v596);
              }
            }
            else if (v33)
            {
              if ((int)v596 >= 1)
              {
                v1079 = 0;
                do
                {
                  v1080 = *v593;
                  *v594 = *v593;
                  v1081 = v597 - 1;
                  if (v597 >= 2)
                  {
                    do
                    {
                      v1083 = v593[1];
                      ++v593;
                      v1082 = v1083;
                      if (v1083 < v1080)
                        v1080 = v1082;
                      v594[1] = v1080;
                      ++v594;
                      --v1081;
                    }
                    while (v1081);
                  }
                  ++v594;
                  ++v593;
                  ++v1079;
                }
                while (v1079 != (_DWORD)v596);
              }
            }
            else if ((int)v596 >= 1)
            {
              v1735 = 0;
              do
              {
                *v594 = -1;
                if (v597 >= 2)
                {
                  v1736 = -1;
                  v1737 = v597 - 1;
                  do
                  {
                    v1739 = *v593++;
                    v1738 = v1739;
                    if (v1739 < v1736)
                      v1736 = v1738;
                    v594[1] = v1736;
                    ++v594;
                    --v1737;
                  }
                  while (v1737);
                }
                ++v594;
                ++v593;
                ++v1735;
              }
              while (v1735 != (_DWORD)v596);
            }
          }
          else
          {
            v606 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
            v607 = mlx::core::array::shape((mlx::core::array *)v1833, v31);
            v608 = v607;
            v609 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
            v610 = v596 / v606;
            if (v32)
            {
              if (v33)
              {
                if ((int)v610 >= 1)
                {
                  v611 = 0;
                  v612 = (v607 - 1) * (int)v609;
                  v613 = v607 * (int)v609;
                  do
                  {
                    v615 = &v594[v612];
                    v616 = (char *)&v593[v612];
                    if ((_DWORD)v609)
                      memmove(v615, v616, 4 * (int)v609);
                    if (v608 >= 2)
                    {
                      for (i31 = 1; i31 != v608; ++i31)
                      {
                        v618 = v609;
                        if ((int)v609 >= 1)
                        {
                          do
                          {
                            v620 = *((_DWORD *)v616 - 1);
                            v616 -= 4;
                            v619 = v620;
                            v614 = 4 * (int)v609 - 4;
                            if (v620 >= *(int *)((char *)v615 + v614))
                              v619 = *(int *)((char *)v615 + v614);
                            *--v615 = v619;
                            --v618;
                          }
                          while (v618);
                        }
                      }
                    }
                    v594 = &v615[v613];
                    v593 = (int *)&v616[4 * v613];
                    ++v611;
                  }
                  while (v611 != (_DWORD)v610);
                }
              }
              else if ((int)v610 >= 1)
              {
                v1424 = 0;
                v1425 = (v607 - 1) * (int)v609;
                v1426 = v607 * (int)v609;
                v1427 = 4 * (int)v609 - 4;
                do
                {
                  v1428 = &v594[v1425];
                  if ((int)v609 >= 1)
                    memset(v1428, 255, 4 * ((int)v609 - (unint64_t)(((int)v609 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1429 = &v593[v1425];
                  if (v608 > 1)
                  {
                    for (i32 = 1; i32 != v608; ++i32)
                    {
                      v1431 = v609;
                      if ((int)v609 >= 1)
                      {
                        do
                        {
                          v1432 = *(int *)((char *)v1429 + v1427);
                          if (v1432 >= *(int *)((char *)v1428 + v1427))
                            v1432 = *(int *)((char *)v1428 + v1427);
                          *--v1428 = v1432;
                          --v1429;
                          --v1431;
                        }
                        while (v1431);
                      }
                    }
                  }
                  v594 = &v1428[v1426];
                  v593 = &v1429[v1426];
                  ++v1424;
                }
                while (v1424 != (_DWORD)v610);
              }
            }
            else if (v33)
            {
              if ((int)v610 >= 1)
              {
                v1084 = 0;
                do
                {
                  if ((_DWORD)v609)
                    memmove(v594, v593, 4 * (int)v609);
                  v593 += (int)v609;
                  v594 += (int)v609;
                  if (v608 >= 2)
                  {
                    for (i33 = 1; i33 != v608; ++i33)
                    {
                      v1086 = v609;
                      if ((int)v609 >= 1)
                      {
                        do
                        {
                          v1088 = *v593++;
                          v1087 = v1088;
                          if (v1088 >= v594[-(int)v609])
                            v1087 = v594[-(int)v609];
                          *v594++ = v1087;
                          --v1086;
                        }
                        while (v1086);
                      }
                    }
                  }
                  ++v1084;
                }
                while (v1084 != (_DWORD)v610);
              }
            }
            else if ((int)v610 >= 1)
            {
              v1740 = 0;
              do
              {
                if ((int)v609 >= 1)
                  memset(v594, 255, 4 * ((int)v609 - (unint64_t)(((int)v609 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v594 += (int)v609;
                v593 += (int)v609;
                if (v608 > 1)
                {
                  for (i34 = 1; i34 != v608; ++i34)
                  {
                    v1742 = v609;
                    if ((int)v609 >= 1)
                    {
                      do
                      {
                        v1743 = v593[-(int)v609];
                        if (v1743 >= v594[-(int)v609])
                          v1743 = v594[-(int)v609];
                        *v594++ = v1743;
                        ++v593;
                        --v1742;
                      }
                      while (v1742);
                    }
                  }
                }
                ++v1740;
              }
              while (v1740 != (_DWORD)v610);
            }
          }
          goto LABEL_2618;
        case 2:
          v83 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v83, (uint64_t)&v1835);
          v84 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v85 = 4;
            v84 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_224;
            v85 = 5;
          }
          (*((void (**)(void))*v84 + v85))();
LABEL_224:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v243 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
          v244 = *(int **)(v1833[0] + 152);
          v245 = (*a3)[19];
          v246 = *(_QWORD *)(v1833[0] + 48);
          v247 = v246 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v31);
          if (v243 == 1)
          {
            v248 = mlx::core::array::shape((mlx::core::array *)v1833, v31);
            if (v32)
            {
              if (v33)
              {
                if ((int)v247 >= 1)
                {
                  v249 = 0;
                  v250 = v248 - 1;
                  do
                  {
                    v251 = &v245[v250];
                    v252 = &v244[v250];
                    v253 = *v252;
                    *v251 = *v252;
                    v254 = v248 - 1;
                    if (v248 >= 2)
                    {
                      do
                      {
                        v255 = *--v252;
                        v253 += v255;
                        *--v251 = v253;
                        --v254;
                      }
                      while (v254);
                    }
                    v245 = &v251[v248];
                    v244 = &v252[v248];
                    ++v249;
                  }
                  while (v249 != (_DWORD)v247);
                }
              }
              else if ((int)v247 >= 1)
              {
                v1225 = 0;
                v1226 = v248 - 1;
                do
                {
                  v1227 = &v245[v1226];
                  v1228 = &v244[v1226];
                  *v1227 = 0;
                  if (v248 >= 2)
                  {
                    v1229 = 0;
                    v1230 = v248 - 1;
                    do
                    {
                      v1231 = *v1228--;
                      v1229 += v1231;
                      *--v1227 = v1229;
                      --v1230;
                    }
                    while (v1230);
                  }
                  v245 = &v1227[v248];
                  v244 = &v1228[v248];
                  ++v1225;
                }
                while (v1225 != (_DWORD)v247);
              }
            }
            else if (v33)
            {
              if ((int)v247 >= 1)
              {
                v969 = 0;
                do
                {
                  v970 = *v244;
                  *v245 = *v244;
                  v971 = v248 - 1;
                  if (v248 >= 2)
                  {
                    do
                    {
                      v972 = v244[1];
                      ++v244;
                      v970 += v972;
                      v245[1] = v970;
                      ++v245;
                      --v971;
                    }
                    while (v971);
                  }
                  ++v245;
                  ++v244;
                  ++v969;
                }
                while (v969 != (_DWORD)v247);
              }
            }
            else if ((int)v247 >= 1)
            {
              v1646 = 0;
              do
              {
                *v245 = 0;
                if (v248 >= 2)
                {
                  v1647 = 0;
                  v1648 = v248 - 1;
                  do
                  {
                    v1649 = *v244++;
                    v1647 += v1649;
                    v245[1] = v1647;
                    ++v245;
                    --v1648;
                  }
                  while (v1648);
                }
                ++v245;
                ++v244;
                ++v1646;
              }
              while (v1646 != (_DWORD)v247);
            }
          }
          else
          {
            v256 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
            v257 = mlx::core::array::shape((mlx::core::array *)v1833, v31);
            v258 = v257;
            v259 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
            v260 = v247 / v256;
            if (v32)
            {
              if (v33)
              {
                if ((int)v260 >= 1)
                {
                  v261 = 0;
                  v262 = (v257 - 1) * (int)v259;
                  v263 = v257 * (int)v259;
                  do
                  {
                    v264 = &v245[v262];
                    v265 = (char *)&v244[v262];
                    if ((_DWORD)v259)
                      memmove(v264, v265, 4 * (int)v259);
                    if (v258 >= 2)
                    {
                      for (i35 = 1; i35 != v258; ++i35)
                      {
                        v267 = v259;
                        if ((int)v259 >= 1)
                        {
                          do
                          {
                            v268 = *((_DWORD *)v265 - 1);
                            v265 -= 4;
                            *(v264 - 1) = v268 + v264[(int)v259 - 1];
                            --v264;
                            --v267;
                          }
                          while (v267);
                        }
                      }
                    }
                    v245 = &v264[v263];
                    v244 = (int *)&v265[4 * v263];
                    ++v261;
                  }
                  while (v261 != (_DWORD)v260);
                }
              }
              else if ((int)v260 >= 1)
              {
                v1232 = 0;
                v1233 = (v257 - 1) * (int)v259;
                v1234 = v257 * (int)v259;
                do
                {
                  v1235 = &v245[v1233];
                  if ((int)v259 >= 1)
                    bzero(v1235, 4 * ((int)v259 - (unint64_t)(((int)v259 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1236 = &v244[v1233];
                  if (v258 > 1)
                  {
                    for (i36 = 1; i36 != v258; ++i36)
                    {
                      v1238 = v259;
                      if ((int)v259 >= 1)
                      {
                        do
                        {
                          *(v1235 - 1) = v1236[(int)v259 - 1] + v1235[(int)v259 - 1];
                          --v1235;
                          --v1236;
                          --v1238;
                        }
                        while (v1238);
                      }
                    }
                  }
                  v245 = &v1235[v1234];
                  v244 = &v1236[v1234];
                  ++v1232;
                }
                while (v1232 != (_DWORD)v260);
              }
            }
            else if (v33)
            {
              if ((int)v260 >= 1)
              {
                v973 = 0;
                do
                {
                  if ((_DWORD)v259)
                    memmove(v245, v244, 4 * (int)v259);
                  v244 += (int)v259;
                  v245 += (int)v259;
                  if (v258 >= 2)
                  {
                    for (i37 = 1; i37 != v258; ++i37)
                    {
                      v975 = v259;
                      if ((int)v259 >= 1)
                      {
                        do
                        {
                          v976 = *v244++;
                          *v245 = v976 + v245[-(int)v259];
                          ++v245;
                          --v975;
                        }
                        while (v975);
                      }
                    }
                  }
                  ++v973;
                }
                while (v973 != (_DWORD)v260);
              }
            }
            else if ((int)v260 >= 1)
            {
              v1650 = 0;
              do
              {
                if ((int)v259 >= 1)
                  bzero(v245, 4 * ((int)v259 - (unint64_t)(((int)v259 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v245 += (int)v259;
                v244 += (int)v259;
                if (v258 > 1)
                {
                  for (i38 = 1; i38 != v258; ++i38)
                  {
                    v1652 = v259;
                    if ((int)v259 >= 1)
                    {
                      do
                      {
                        *v245 = v244[-(int)v259] + v245[-(int)v259];
                        ++v245;
                        ++v244;
                        --v1652;
                      }
                      while (v1652);
                    }
                  }
                }
                ++v1650;
              }
              while (v1650 != (_DWORD)v260);
            }
          }
          goto LABEL_2618;
        case 3:
          v86 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v86, (uint64_t)&v1835);
          v87 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v88 = 4;
            v87 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_249;
            v88 = 5;
          }
          (*((void (**)(void))*v87 + v88))();
LABEL_249:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v269 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
          v270 = *(int **)(v1833[0] + 152);
          v271 = (*a3)[19];
          v272 = *(_QWORD *)(v1833[0] + 48);
          v273 = v272 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v31);
          if (v269 == 1)
          {
            v274 = mlx::core::array::shape((mlx::core::array *)v1833, v31);
            if (v32)
            {
              if (v33)
              {
                if ((int)v273 >= 1)
                {
                  v275 = 0;
                  v276 = v274 - 1;
                  do
                  {
                    v277 = &v271[v276];
                    v278 = &v270[v276];
                    v279 = *v278;
                    *v277 = *v278;
                    v280 = v274 - 1;
                    if (v274 >= 2)
                    {
                      do
                      {
                        v281 = *--v278;
                        v279 *= v281;
                        *--v277 = v279;
                        --v280;
                      }
                      while (v280);
                    }
                    v271 = &v277[v274];
                    v270 = &v278[v274];
                    ++v275;
                  }
                  while (v275 != (_DWORD)v273);
                }
              }
              else if ((int)v273 >= 1)
              {
                v1239 = 0;
                v1240 = v274 - 1;
                do
                {
                  v1241 = &v271[v1240];
                  v1242 = &v270[v1240];
                  *v1241 = 1;
                  if (v274 >= 2)
                  {
                    v1243 = 1;
                    v1244 = v274 - 1;
                    do
                    {
                      v1245 = *v1242--;
                      v1243 *= v1245;
                      *--v1241 = v1243;
                      --v1244;
                    }
                    while (v1244);
                  }
                  v271 = &v1241[v274];
                  v270 = &v1242[v274];
                  ++v1239;
                }
                while (v1239 != (_DWORD)v273);
              }
            }
            else if (v33)
            {
              if ((int)v273 >= 1)
              {
                v977 = 0;
                do
                {
                  v978 = *v270;
                  *v271 = *v270;
                  v979 = v274 - 1;
                  if (v274 >= 2)
                  {
                    do
                    {
                      v980 = v270[1];
                      ++v270;
                      v978 *= v980;
                      v271[1] = v978;
                      ++v271;
                      --v979;
                    }
                    while (v979);
                  }
                  ++v271;
                  ++v270;
                  ++v977;
                }
                while (v977 != (_DWORD)v273);
              }
            }
            else if ((int)v273 >= 1)
            {
              v1653 = 0;
              do
              {
                *v271 = 1;
                if (v274 >= 2)
                {
                  v1654 = 1;
                  v1655 = v274 - 1;
                  do
                  {
                    v1656 = *v270++;
                    v1654 *= v1656;
                    v271[1] = v1654;
                    ++v271;
                    --v1655;
                  }
                  while (v1655);
                }
                ++v271;
                ++v270;
                ++v1653;
              }
              while (v1653 != (_DWORD)v273);
            }
          }
          else
          {
            v282 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
            v283 = mlx::core::array::shape((mlx::core::array *)v1833, v31);
            v284 = v283;
            v285 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v31);
            v286 = v273 / v282;
            if (v32)
            {
              if (v33)
              {
                if ((int)v286 >= 1)
                {
                  v287 = 0;
                  v288 = (v283 - 1) * (int)v285;
                  v289 = v283 * (int)v285;
                  do
                  {
                    v290 = &v271[v288];
                    v291 = (char *)&v270[v288];
                    if ((_DWORD)v285)
                      memmove(v290, v291, 4 * (int)v285);
                    if (v284 >= 2)
                    {
                      for (i39 = 1; i39 != v284; ++i39)
                      {
                        v293 = v285;
                        if ((int)v285 >= 1)
                        {
                          do
                          {
                            v294 = *((_DWORD *)v291 - 1);
                            v291 -= 4;
                            *(v290 - 1) = v294 * v290[(int)v285 - 1];
                            --v290;
                            --v293;
                          }
                          while (v293);
                        }
                      }
                    }
                    v271 = &v290[v289];
                    v270 = (int *)&v291[4 * v289];
                    ++v287;
                  }
                  while (v287 != (_DWORD)v286);
                }
              }
              else if ((int)v286 >= 1)
              {
                v1246 = 0;
                v1247 = (v283 - 1) * (int)v285;
                v1248 = v283 * (int)v285;
                do
                {
                  v1249 = &v271[v1247];
                  if ((int)v285 >= 1)
                    memset_pattern16(v1249, &unk_2425A2960, 4 * ((int)v285 - (unint64_t)(((int)v285 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1250 = &v270[v1247];
                  if (v284 > 1)
                  {
                    for (i40 = 1; i40 != v284; ++i40)
                    {
                      v1252 = v285;
                      if ((int)v285 >= 1)
                      {
                        do
                        {
                          *(v1249 - 1) = v1250[(int)v285 - 1] * v1249[(int)v285 - 1];
                          --v1249;
                          --v1250;
                          --v1252;
                        }
                        while (v1252);
                      }
                    }
                  }
                  v271 = &v1249[v1248];
                  v270 = &v1250[v1248];
                  ++v1246;
                }
                while (v1246 != (_DWORD)v286);
              }
            }
            else if (v33)
            {
              if ((int)v286 >= 1)
              {
                v981 = 0;
                do
                {
                  if ((_DWORD)v285)
                    memmove(v271, v270, 4 * (int)v285);
                  v270 += (int)v285;
                  v271 += (int)v285;
                  if (v284 >= 2)
                  {
                    for (i41 = 1; i41 != v284; ++i41)
                    {
                      v983 = v285;
                      if ((int)v285 >= 1)
                      {
                        do
                        {
                          v984 = *v270++;
                          *v271 = v984 * v271[-(int)v285];
                          ++v271;
                          --v983;
                        }
                        while (v983);
                      }
                    }
                  }
                  ++v981;
                }
                while (v981 != (_DWORD)v286);
              }
            }
            else if ((int)v286 >= 1)
            {
              v1657 = 0;
              do
              {
                if ((int)v285 >= 1)
                  memset_pattern16(v271, &unk_2425A2960, 4 * ((int)v285 - (unint64_t)(((int)v285 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v271 += (int)v285;
                v270 += (int)v285;
                if (v284 > 1)
                {
                  for (i42 = 1; i42 != v284; ++i42)
                  {
                    v1659 = v285;
                    if ((int)v285 >= 1)
                    {
                      do
                      {
                        *v271 = v270[-(int)v285] * v271[-(int)v285];
                        ++v271;
                        ++v270;
                        --v1659;
                      }
                      while (v1659);
                    }
                  }
                }
                ++v1657;
              }
              while (v1657 != (_DWORD)v286);
            }
          }
          break;
        default:
          goto LABEL_2618;
      }
      goto LABEL_2618;
    case 3:
      v37 = *(int *)(a1 + 24);
      v38 = *(unsigned __int8 *)(a1 + 28);
      v39 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v40 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v40, (uint64_t)&v1835);
          v41 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v42 = 4;
            v41 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_590;
            v42 = 5;
          }
          (*((void (**)(void))*v41 + v42))();
LABEL_590:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v621 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
          v622 = *(char **)(v1833[0] + 152);
          v623 = (*a3)[19];
          v624 = *(_QWORD *)(v1833[0] + 48);
          v625 = v624 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v37);
          if (v621 == 1)
          {
            v626 = mlx::core::array::shape((mlx::core::array *)v1833, v37);
            v627 = v626;
            if (v38)
            {
              if (v39)
              {
                if ((int)v625 >= 1)
                {
                  v628 = 0;
                  v629 = v626 - 1;
                  do
                  {
                    v630 = (char *)v623 + v629;
                    v631 = &v622[v629];
                    v632 = v622[v629];
                    *((_BYTE *)v623 + v629) = v632;
                    v633 = v626 - 1;
                    if (v626 >= 2)
                    {
                      do
                      {
                        v635 = *--v631;
                        v634 = v635;
                        if (v635 > v632)
                          v632 = v634;
                        *--v630 = v632;
                        --v633;
                      }
                      while (v633);
                    }
                    v623 = (int *)&v630[v626];
                    v622 = &v631[v626];
                    ++v628;
                  }
                  while (v628 != (_DWORD)v625);
                }
              }
              else if ((int)v625 >= 1)
              {
                v1433 = v626 - 1;
                v1434 = ~(unint64_t)(v626 - 2) + v1433;
                do
                {
                  *((_BYTE *)v623 + v1433) = 127;
                  v1435 = v627 - 1;
                  if (v627 >= 2)
                  {
                    memset((char *)v623 + v1434, 127, (v627 - 1));
                    v1435 = ~(unint64_t)(v627 - 2) + v1433;
                  }
                  v623 = (int *)((char *)v623 + v1435 + v627);
                  LODWORD(v625) = v625 - 1;
                }
                while ((_DWORD)v625);
              }
            }
            else if (v39)
            {
              if ((int)v625 >= 1)
              {
                v1089 = 0;
                do
                {
                  v1090 = *v622;
                  *(_BYTE *)v623 = *v622;
                  v1091 = v626 - 1;
                  if (v626 >= 2)
                  {
                    do
                    {
                      v1093 = *++v622;
                      v1092 = v1093;
                      if (v1093 > v1090)
                        v1090 = v1092;
                      *((_BYTE *)v623 + 1) = v1090;
                      v623 = (int *)((char *)v623 + 1);
                      --v1091;
                    }
                    while (v1091);
                  }
                  v623 = (int *)((char *)v623 + 1);
                  ++v622;
                  ++v1089;
                }
                while (v1089 != (_DWORD)v625);
              }
            }
            else if ((int)v625 >= 1)
            {
              v1744 = (v626 - 2) + 1;
              do
              {
                *(_BYTE *)v623 = 127;
                if (v627 >= 2)
                {
                  memset((char *)v623 + 1, 127, (v627 - 1));
                  v623 = (int *)((char *)v623 + v1744);
                }
                v623 = (int *)((char *)v623 + 1);
                LODWORD(v625) = v625 - 1;
              }
              while ((_DWORD)v625);
            }
          }
          else
          {
            v636 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
            v637 = mlx::core::array::shape((mlx::core::array *)v1833, v37);
            v638 = v637;
            v639 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
            v640 = v625 / v636;
            if (v38)
            {
              if (v39)
              {
                if ((int)v640 >= 1)
                {
                  v641 = 0;
                  v642 = (v637 - 1) * (int)v639;
                  v643 = v637 * (uint64_t)(int)v639;
                  do
                  {
                    v644 = (char *)v623 + v642;
                    v645 = &v622[v642];
                    if ((_DWORD)v639)
                      memmove(v644, v645, (int)v639);
                    if (v638 >= 2)
                    {
                      for (i43 = 1; i43 != v638; ++i43)
                      {
                        v647 = v639;
                        if ((int)v639 >= 1)
                        {
                          do
                          {
                            v649 = *--v645;
                            v648 = v649;
                            if (v649 <= v644[(int)v639 - 1])
                              v648 = v644[(int)v639 - 1];
                            *--v644 = v648;
                            --v647;
                          }
                          while (v647);
                        }
                      }
                    }
                    v623 = (int *)&v644[v643];
                    v622 = &v645[v643];
                    ++v641;
                  }
                  while (v641 != (_DWORD)v640);
                }
              }
              else if ((int)v640 >= 1)
              {
                v1436 = 0;
                v1437 = (v637 - 1) * (int)v639;
                v1438 = v637 * (uint64_t)(int)v639;
                v1439 = (int)v639 - 1;
                do
                {
                  v1440 = (char *)v623 + v1437;
                  if ((int)v639 >= 1)
                    memset(v1440, 127, (int)v639);
                  v1441 = &v622[v1437];
                  if (v638 > 1)
                  {
                    for (i44 = 1; i44 != v638; ++i44)
                    {
                      v1443 = v639;
                      if ((int)v639 >= 1)
                      {
                        do
                        {
                          v1444 = v1441[v1439];
                          if (v1444 <= v1440[v1439])
                            LOBYTE(v1444) = v1440[v1439];
                          *--v1440 = v1444;
                          --v1441;
                          --v1443;
                        }
                        while (v1443);
                      }
                    }
                  }
                  v623 = (int *)&v1440[v1438];
                  v622 = &v1441[v1438];
                  ++v1436;
                }
                while (v1436 != (_DWORD)v640);
              }
            }
            else if (v39)
            {
              if ((int)v640 >= 1)
              {
                v1094 = 0;
                do
                {
                  if ((_DWORD)v639)
                    memmove(v623, v622, (int)v639);
                  v622 += (int)v639;
                  v623 = (int *)((char *)v623 + (int)v639);
                  if (v638 >= 2)
                  {
                    for (i45 = 1; i45 != v638; ++i45)
                    {
                      v1096 = v639;
                      if ((int)v639 >= 1)
                      {
                        do
                        {
                          v1098 = *v622++;
                          v1097 = v1098;
                          if (v1098 <= *((char *)v623 - (int)v639))
                            v1097 = *((_BYTE *)v623 - (int)v639);
                          *(_BYTE *)v623 = v1097;
                          v623 = (int *)((char *)v623 + 1);
                          --v1096;
                        }
                        while (v1096);
                      }
                    }
                  }
                  ++v1094;
                }
                while (v1094 != (_DWORD)v640);
              }
            }
            else if ((int)v640 >= 1)
            {
              v1745 = 0;
              do
              {
                if ((int)v639 >= 1)
                  memset(v623, 127, (int)v639);
                v623 = (int *)((char *)v623 + (int)v639);
                v622 += (int)v639;
                if (v638 > 1)
                {
                  for (i46 = 1; i46 != v638; ++i46)
                  {
                    v1747 = v639;
                    if ((int)v639 >= 1)
                    {
                      do
                      {
                        v1748 = v622[-(int)v639];
                        if (v1748 <= *((char *)v623 - (int)v639))
                          LOBYTE(v1748) = *((_BYTE *)v623 - (int)v639);
                        *(_BYTE *)v623 = v1748;
                        v623 = (int *)((char *)v623 + 1);
                        ++v622;
                        --v1747;
                      }
                      while (v1747);
                    }
                  }
                }
                ++v1745;
              }
              while (v1745 != (_DWORD)v640);
            }
          }
          goto LABEL_2618;
        case 1:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v101 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v101, (uint64_t)&v1835);
          v102 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v103 = 4;
            v102 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_619;
            v103 = 5;
          }
          (*((void (**)(void))*v102 + v103))();
LABEL_619:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v650 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
          v651 = *(char **)(v1833[0] + 152);
          v652 = (*a3)[19];
          v653 = *(_QWORD *)(v1833[0] + 48);
          v654 = v653 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v37);
          if (v650 == 1)
          {
            v655 = mlx::core::array::shape((mlx::core::array *)v1833, v37);
            if (v38)
            {
              if (v39)
              {
                if ((int)v654 >= 1)
                {
                  v656 = 0;
                  v657 = v655 - 1;
                  do
                  {
                    v658 = (char *)v652 + v657;
                    v659 = &v651[v657];
                    v660 = v651[v657];
                    *((_BYTE *)v652 + v657) = v660;
                    v661 = v655 - 1;
                    if (v655 >= 2)
                    {
                      do
                      {
                        v663 = *--v659;
                        v662 = v663;
                        if (v663 < v660)
                          v660 = v662;
                        *--v658 = v660;
                        --v661;
                      }
                      while (v661);
                    }
                    v652 = (int *)&v658[v655];
                    v651 = &v659[v655];
                    ++v656;
                  }
                  while (v656 != (_DWORD)v654);
                }
              }
              else if ((int)v654 >= 1)
              {
                v1445 = 0;
                v1446 = v655 - 1;
                do
                {
                  v1447 = (char *)v652 + v1446;
                  v1448 = &v651[v1446];
                  *((_BYTE *)v652 + v1446) = 127;
                  if (v655 >= 2)
                  {
                    v1449 = 127;
                    v1450 = v655 - 1;
                    do
                    {
                      v1452 = *v1448--;
                      v1451 = v1452;
                      if (v1452 < v1449)
                        v1449 = v1451;
                      *--v1447 = v1449;
                      --v1450;
                    }
                    while (v1450);
                  }
                  v652 = (int *)&v1447[v655];
                  v651 = &v1448[v655];
                  ++v1445;
                }
                while (v1445 != (_DWORD)v654);
              }
            }
            else if (v39)
            {
              if ((int)v654 >= 1)
              {
                v1099 = 0;
                do
                {
                  v1100 = *v651;
                  *(_BYTE *)v652 = *v651;
                  v1101 = v655 - 1;
                  if (v655 >= 2)
                  {
                    do
                    {
                      v1103 = *++v651;
                      v1102 = v1103;
                      if (v1103 < v1100)
                        v1100 = v1102;
                      *((_BYTE *)v652 + 1) = v1100;
                      v652 = (int *)((char *)v652 + 1);
                      --v1101;
                    }
                    while (v1101);
                  }
                  v652 = (int *)((char *)v652 + 1);
                  ++v651;
                  ++v1099;
                }
                while (v1099 != (_DWORD)v654);
              }
            }
            else if ((int)v654 >= 1)
            {
              v1749 = 0;
              do
              {
                *(_BYTE *)v652 = 127;
                if (v655 >= 2)
                {
                  v1750 = 127;
                  v1751 = v655 - 1;
                  do
                  {
                    v1753 = *v651++;
                    v1752 = v1753;
                    if (v1753 < v1750)
                      v1750 = v1752;
                    *((_BYTE *)v652 + 1) = v1750;
                    v652 = (int *)((char *)v652 + 1);
                    --v1751;
                  }
                  while (v1751);
                }
                v652 = (int *)((char *)v652 + 1);
                ++v651;
                ++v1749;
              }
              while (v1749 != (_DWORD)v654);
            }
          }
          else
          {
            v664 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
            v665 = mlx::core::array::shape((mlx::core::array *)v1833, v37);
            v666 = v665;
            v667 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
            v668 = v654 / v664;
            if (v38)
            {
              if (v39)
              {
                if ((int)v668 >= 1)
                {
                  v669 = 0;
                  v670 = (v665 - 1) * (int)v667;
                  v671 = v665 * (uint64_t)(int)v667;
                  do
                  {
                    v672 = (char *)v652 + v670;
                    v673 = &v651[v670];
                    if ((_DWORD)v667)
                      memmove(v672, v673, (int)v667);
                    if (v666 >= 2)
                    {
                      for (i47 = 1; i47 != v666; ++i47)
                      {
                        v675 = v667;
                        if ((int)v667 >= 1)
                        {
                          do
                          {
                            v677 = *--v673;
                            v676 = v677;
                            if (v677 >= v672[(int)v667 - 1])
                              v676 = v672[(int)v667 - 1];
                            *--v672 = v676;
                            --v675;
                          }
                          while (v675);
                        }
                      }
                    }
                    v652 = (int *)&v672[v671];
                    v651 = &v673[v671];
                    ++v669;
                  }
                  while (v669 != (_DWORD)v668);
                }
              }
              else if ((int)v668 >= 1)
              {
                v1453 = 0;
                v1454 = (v665 - 1) * (int)v667;
                v1455 = v665 * (uint64_t)(int)v667;
                v1456 = (int)v667 - 1;
                do
                {
                  v1457 = (char *)v652 + v1454;
                  if ((int)v667 >= 1)
                    memset(v1457, 127, (int)v667);
                  v1458 = &v651[v1454];
                  if (v666 > 1)
                  {
                    for (i48 = 1; i48 != v666; ++i48)
                    {
                      v1460 = v667;
                      if ((int)v667 >= 1)
                      {
                        do
                        {
                          v1461 = v1458[v1456];
                          if (v1461 >= v1457[v1456])
                            LOBYTE(v1461) = v1457[v1456];
                          *--v1457 = v1461;
                          --v1458;
                          --v1460;
                        }
                        while (v1460);
                      }
                    }
                  }
                  v652 = (int *)&v1457[v1455];
                  v651 = &v1458[v1455];
                  ++v1453;
                }
                while (v1453 != (_DWORD)v668);
              }
            }
            else if (v39)
            {
              if ((int)v668 >= 1)
              {
                v1104 = 0;
                do
                {
                  if ((_DWORD)v667)
                    memmove(v652, v651, (int)v667);
                  v651 += (int)v667;
                  v652 = (int *)((char *)v652 + (int)v667);
                  if (v666 >= 2)
                  {
                    for (i49 = 1; i49 != v666; ++i49)
                    {
                      v1106 = v667;
                      if ((int)v667 >= 1)
                      {
                        do
                        {
                          v1108 = *v651++;
                          v1107 = v1108;
                          if (v1108 >= *((char *)v652 - (int)v667))
                            v1107 = *((_BYTE *)v652 - (int)v667);
                          *(_BYTE *)v652 = v1107;
                          v652 = (int *)((char *)v652 + 1);
                          --v1106;
                        }
                        while (v1106);
                      }
                    }
                  }
                  ++v1104;
                }
                while (v1104 != (_DWORD)v668);
              }
            }
            else if ((int)v668 >= 1)
            {
              v1754 = 0;
              do
              {
                if ((int)v667 >= 1)
                  memset(v652, 127, (int)v667);
                v652 = (int *)((char *)v652 + (int)v667);
                v651 += (int)v667;
                if (v666 > 1)
                {
                  for (i50 = 1; i50 != v666; ++i50)
                  {
                    v1756 = v667;
                    if ((int)v667 >= 1)
                    {
                      do
                      {
                        v1757 = v651[-(int)v667];
                        if (v1757 >= *((char *)v652 - (int)v667))
                          LOBYTE(v1757) = *((_BYTE *)v652 - (int)v667);
                        *(_BYTE *)v652 = v1757;
                        v652 = (int *)((char *)v652 + 1);
                        ++v651;
                        --v1756;
                      }
                      while (v1756);
                    }
                  }
                }
                ++v1754;
              }
              while (v1754 != (_DWORD)v668);
            }
          }
          goto LABEL_2618;
        case 2:
          v89 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v89, (uint64_t)&v1835);
          v90 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v91 = 4;
            v90 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_274;
            v91 = 5;
          }
          (*((void (**)(void))*v90 + v91))();
LABEL_274:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v295 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
          v296 = *(unsigned __int8 **)(v1833[0] + 152);
          v297 = (*a3)[19];
          v298 = *(_QWORD *)(v1833[0] + 48);
          v299 = v298 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v37);
          if (v295 == 1)
          {
            v300 = mlx::core::array::shape((mlx::core::array *)v1833, v37);
            if (v38)
            {
              if (v39)
              {
                if ((int)v299 >= 1)
                {
                  v301 = 0;
                  v302 = v300 - 1;
                  do
                  {
                    v303 = (char *)v297 + v302;
                    v304 = &v296[v302];
                    v305 = v296[v302];
                    *((_BYTE *)v297 + v302) = v305;
                    v306 = v300 - 1;
                    if (v300 >= 2)
                    {
                      do
                      {
                        v307 = *--v304;
                        v305 += v307;
                        *--v303 = v305;
                        --v306;
                      }
                      while (v306);
                    }
                    v297 = (int *)&v303[v300];
                    v296 = &v304[v300];
                    ++v301;
                  }
                  while (v301 != (_DWORD)v299);
                }
              }
              else if ((int)v299 >= 1)
              {
                v1253 = 0;
                v1254 = v300 - 1;
                do
                {
                  v1255 = (char *)v297 + v1254;
                  v1256 = &v296[v1254];
                  *((_BYTE *)v297 + v1254) = 0;
                  if (v300 >= 2)
                  {
                    v1257 = 0;
                    v1258 = v300 - 1;
                    do
                    {
                      v1259 = *v1256--;
                      v1257 += v1259;
                      *--v1255 = v1257;
                      --v1258;
                    }
                    while (v1258);
                  }
                  v297 = (int *)&v1255[v300];
                  v296 = &v1256[v300];
                  ++v1253;
                }
                while (v1253 != (_DWORD)v299);
              }
            }
            else if (v39)
            {
              if ((int)v299 >= 1)
              {
                v985 = 0;
                do
                {
                  v986 = *v296;
                  *(_BYTE *)v297 = v986;
                  v987 = v300 - 1;
                  if (v300 >= 2)
                  {
                    do
                    {
                      v988 = *++v296;
                      v986 += v988;
                      *((_BYTE *)v297 + 1) = v986;
                      v297 = (int *)((char *)v297 + 1);
                      --v987;
                    }
                    while (v987);
                  }
                  v297 = (int *)((char *)v297 + 1);
                  ++v296;
                  ++v985;
                }
                while (v985 != (_DWORD)v299);
              }
            }
            else if ((int)v299 >= 1)
            {
              v1660 = 0;
              do
              {
                *(_BYTE *)v297 = 0;
                if (v300 >= 2)
                {
                  v1661 = 0;
                  v1662 = v300 - 1;
                  do
                  {
                    v1663 = *v296++;
                    v1661 += v1663;
                    *((_BYTE *)v297 + 1) = v1661;
                    v297 = (int *)((char *)v297 + 1);
                    --v1662;
                  }
                  while (v1662);
                }
                v297 = (int *)((char *)v297 + 1);
                ++v296;
                ++v1660;
              }
              while (v1660 != (_DWORD)v299);
            }
          }
          else
          {
            v308 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
            v309 = mlx::core::array::shape((mlx::core::array *)v1833, v37);
            v310 = v309;
            v311 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
            v312 = v299 / v308;
            if (v38)
            {
              if (v39)
              {
                if ((int)v312 >= 1)
                {
                  v313 = 0;
                  v314 = (v309 - 1) * (int)v311;
                  v315 = v309 * (uint64_t)(int)v311;
                  do
                  {
                    v316 = (char *)v297 + v314;
                    v317 = &v296[v314];
                    if ((_DWORD)v311)
                      memmove(v316, v317, (int)v311);
                    if (v310 >= 2)
                    {
                      for (i51 = 1; i51 != v310; ++i51)
                      {
                        v319 = v311;
                        if ((int)v311 >= 1)
                        {
                          do
                          {
                            v320 = *--v317;
                            *(v316 - 1) = v320 + v316[(int)v311 - 1];
                            --v316;
                            --v319;
                          }
                          while (v319);
                        }
                      }
                    }
                    v297 = (int *)&v316[v315];
                    v296 = &v317[v315];
                    ++v313;
                  }
                  while (v313 != (_DWORD)v312);
                }
              }
              else if ((int)v312 >= 1)
              {
                v1260 = 0;
                v1261 = (v309 - 1) * (int)v311;
                v1262 = v309 * (uint64_t)(int)v311;
                do
                {
                  v1263 = (char *)v297 + v1261;
                  if ((int)v311 >= 1)
                    bzero(v1263, (int)v311);
                  v1264 = &v296[v1261];
                  if (v310 > 1)
                  {
                    for (i52 = 1; i52 != v310; ++i52)
                    {
                      v1266 = v311;
                      if ((int)v311 >= 1)
                      {
                        do
                        {
                          *(v1263 - 1) = v1264[(int)v311 - 1] + v1263[(int)v311 - 1];
                          --v1263;
                          --v1264;
                          --v1266;
                        }
                        while (v1266);
                      }
                    }
                  }
                  v297 = (int *)&v1263[v1262];
                  v296 = &v1264[v1262];
                  ++v1260;
                }
                while (v1260 != (_DWORD)v312);
              }
            }
            else if (v39)
            {
              if ((int)v312 >= 1)
              {
                v989 = 0;
                do
                {
                  if ((_DWORD)v311)
                    memmove(v297, v296, (int)v311);
                  v296 += (int)v311;
                  v297 = (int *)((char *)v297 + (int)v311);
                  if (v310 >= 2)
                  {
                    for (i53 = 1; i53 != v310; ++i53)
                    {
                      v991 = v311;
                      if ((int)v311 >= 1)
                      {
                        do
                        {
                          v992 = *v296++;
                          *(_BYTE *)v297 = v992 + *((_BYTE *)v297 - (int)v311);
                          v297 = (int *)((char *)v297 + 1);
                          --v991;
                        }
                        while (v991);
                      }
                    }
                  }
                  ++v989;
                }
                while (v989 != (_DWORD)v312);
              }
            }
            else if ((int)v312 >= 1)
            {
              v1664 = 0;
              do
              {
                if ((int)v311 >= 1)
                  bzero(v297, (int)v311);
                v297 = (int *)((char *)v297 + (int)v311);
                v296 += (int)v311;
                if (v310 > 1)
                {
                  for (i54 = 1; i54 != v310; ++i54)
                  {
                    v1666 = v311;
                    if ((int)v311 >= 1)
                    {
                      do
                      {
                        *(_BYTE *)v297 = v296[-(int)v311] + *((_BYTE *)v297 - (int)v311);
                        v297 = (int *)((char *)v297 + 1);
                        ++v296;
                        --v1666;
                      }
                      while (v1666);
                    }
                  }
                }
                ++v1664;
              }
              while (v1664 != (_DWORD)v312);
            }
          }
          goto LABEL_2618;
        case 3:
          v98 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v98, (uint64_t)&v1835);
          v99 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v100 = 4;
            v99 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_324;
            v100 = 5;
          }
          (*((void (**)(void))*v99 + v100))();
LABEL_324:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v347 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
          v348 = *(unsigned __int8 **)(v1833[0] + 152);
          v349 = (*a3)[19];
          v350 = *(_QWORD *)(v1833[0] + 48);
          v351 = v350 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v37);
          if (v347 == 1)
          {
            v352 = mlx::core::array::shape((mlx::core::array *)v1833, v37);
            if (v38)
            {
              if (v39)
              {
                if ((int)v351 >= 1)
                {
                  v353 = 0;
                  v354 = v352 - 1;
                  do
                  {
                    v355 = (char *)v349 + v354;
                    v356 = &v348[v354];
                    v357 = v348[v354];
                    *((_BYTE *)v349 + v354) = v357;
                    v358 = v352 - 1;
                    if (v352 >= 2)
                    {
                      do
                      {
                        v359 = *--v356;
                        v357 *= v359;
                        *--v355 = v357;
                        --v358;
                      }
                      while (v358);
                    }
                    v349 = (int *)&v355[v352];
                    v348 = &v356[v352];
                    ++v353;
                  }
                  while (v353 != (_DWORD)v351);
                }
              }
              else if ((int)v351 >= 1)
              {
                v1281 = 0;
                v1282 = v352 - 1;
                do
                {
                  v1283 = (char *)v349 + v1282;
                  v1284 = &v348[v1282];
                  *((_BYTE *)v349 + v1282) = 1;
                  if (v352 >= 2)
                  {
                    v1285 = 1;
                    v1286 = v352 - 1;
                    do
                    {
                      v1287 = *v1284--;
                      v1285 *= v1287;
                      *--v1283 = v1285;
                      --v1286;
                    }
                    while (v1286);
                  }
                  v349 = (int *)&v1283[v352];
                  v348 = &v1284[v352];
                  ++v1281;
                }
                while (v1281 != (_DWORD)v351);
              }
            }
            else if (v39)
            {
              if ((int)v351 >= 1)
              {
                v1001 = 0;
                do
                {
                  v1002 = *v348;
                  *(_BYTE *)v349 = v1002;
                  v1003 = v352 - 1;
                  if (v352 >= 2)
                  {
                    do
                    {
                      v1004 = *++v348;
                      v1002 *= v1004;
                      *((_BYTE *)v349 + 1) = v1002;
                      v349 = (int *)((char *)v349 + 1);
                      --v1003;
                    }
                    while (v1003);
                  }
                  v349 = (int *)((char *)v349 + 1);
                  ++v348;
                  ++v1001;
                }
                while (v1001 != (_DWORD)v351);
              }
            }
            else if ((int)v351 >= 1)
            {
              v1674 = 0;
              do
              {
                *(_BYTE *)v349 = 1;
                if (v352 >= 2)
                {
                  v1675 = 1;
                  v1676 = v352 - 1;
                  do
                  {
                    v1677 = *v348++;
                    v1675 *= v1677;
                    *((_BYTE *)v349 + 1) = v1675;
                    v349 = (int *)((char *)v349 + 1);
                    --v1676;
                  }
                  while (v1676);
                }
                v349 = (int *)((char *)v349 + 1);
                ++v348;
                ++v1674;
              }
              while (v1674 != (_DWORD)v351);
            }
          }
          else
          {
            v360 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
            v361 = mlx::core::array::shape((mlx::core::array *)v1833, v37);
            v362 = v361;
            v363 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v37);
            v364 = v351 / v360;
            if (v38)
            {
              if (v39)
              {
                if ((int)v364 >= 1)
                {
                  v365 = 0;
                  v366 = (v361 - 1) * (int)v363;
                  v367 = v361 * (uint64_t)(int)v363;
                  do
                  {
                    v368 = (char *)v349 + v366;
                    v369 = &v348[v366];
                    if ((_DWORD)v363)
                      memmove(v368, v369, (int)v363);
                    if (v362 >= 2)
                    {
                      for (i55 = 1; i55 != v362; ++i55)
                      {
                        v371 = v363;
                        if ((int)v363 >= 1)
                        {
                          do
                          {
                            v372 = *--v369;
                            *(v368 - 1) = v372 * v368[(int)v363 - 1];
                            --v368;
                            --v371;
                          }
                          while (v371);
                        }
                      }
                    }
                    v349 = (int *)&v368[v367];
                    v348 = &v369[v367];
                    ++v365;
                  }
                  while (v365 != (_DWORD)v364);
                }
              }
              else if ((int)v364 >= 1)
              {
                v1288 = 0;
                v1289 = (v361 - 1) * (int)v363;
                v1290 = v361 * (uint64_t)(int)v363;
                do
                {
                  v1291 = (char *)v349 + v1289;
                  if ((int)v363 >= 1)
                    memset(v1291, 1, (int)v363);
                  v1292 = &v348[v1289];
                  if (v362 > 1)
                  {
                    for (i56 = 1; i56 != v362; ++i56)
                    {
                      v1294 = v363;
                      if ((int)v363 >= 1)
                      {
                        do
                        {
                          *(v1291 - 1) = v1292[(int)v363 - 1] * v1291[(int)v363 - 1];
                          --v1291;
                          --v1292;
                          --v1294;
                        }
                        while (v1294);
                      }
                    }
                  }
                  v349 = (int *)&v1291[v1290];
                  v348 = &v1292[v1290];
                  ++v1288;
                }
                while (v1288 != (_DWORD)v364);
              }
            }
            else if (v39)
            {
              if ((int)v364 >= 1)
              {
                v1005 = 0;
                do
                {
                  if ((_DWORD)v363)
                    memmove(v349, v348, (int)v363);
                  v348 += (int)v363;
                  v349 = (int *)((char *)v349 + (int)v363);
                  if (v362 >= 2)
                  {
                    for (i57 = 1; i57 != v362; ++i57)
                    {
                      v1007 = v363;
                      if ((int)v363 >= 1)
                      {
                        do
                        {
                          v1008 = *v348++;
                          *(_BYTE *)v349 = v1008 * *((_BYTE *)v349 - (int)v363);
                          v349 = (int *)((char *)v349 + 1);
                          --v1007;
                        }
                        while (v1007);
                      }
                    }
                  }
                  ++v1005;
                }
                while (v1005 != (_DWORD)v364);
              }
            }
            else if ((int)v364 >= 1)
            {
              v1678 = 0;
              do
              {
                if ((int)v363 >= 1)
                  memset(v349, 1, (int)v363);
                v349 = (int *)((char *)v349 + (int)v363);
                v348 += (int)v363;
                if (v362 > 1)
                {
                  for (i58 = 1; i58 != v362; ++i58)
                  {
                    v1680 = v363;
                    if ((int)v363 >= 1)
                    {
                      do
                      {
                        *(_BYTE *)v349 = v348[-(int)v363] * *((_BYTE *)v349 - (int)v363);
                        v349 = (int *)((char *)v349 + 1);
                        ++v348;
                        --v1680;
                      }
                      while (v1680);
                    }
                  }
                }
                ++v1678;
              }
              while (v1678 != (_DWORD)v364);
            }
          }
          break;
        default:
          goto LABEL_2618;
      }
      goto LABEL_2618;
    case 4:
      v25 = *(int *)(a1 + 24);
      v26 = *(unsigned __int8 *)(a1 + 28);
      v27 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v28 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v28, (uint64_t)&v1835);
          v29 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v30 = 4;
            v29 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_474;
            v30 = 5;
          }
          (*((void (**)(void))*v29 + v30))();
LABEL_474:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v503 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
          v504 = *(int **)(v1833[0] + 152);
          v505 = (*a3)[19];
          v506 = *(_QWORD *)(v1833[0] + 48);
          v507 = v506 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v25);
          if (v503 == 1)
          {
            v508 = mlx::core::array::shape((mlx::core::array *)v1833, v25);
            v509 = v508;
            if (v26)
            {
              if (v27)
              {
                if ((int)v507 >= 1)
                {
                  v510 = 0;
                  v511 = v508 - 1;
                  do
                  {
                    v512 = &v505[v511];
                    v513 = &v504[v511];
                    v514 = *v513;
                    *v512 = *v513;
                    v515 = v508 - 1;
                    if (v508 >= 2)
                    {
                      do
                      {
                        v517 = *--v513;
                        v516 = v517;
                        if (v517 > v514)
                          v514 = v516;
                        *--v512 = v514;
                        --v515;
                      }
                      while (v515);
                    }
                    v505 = &v512[v508];
                    v504 = &v513[v508];
                    ++v510;
                  }
                  while (v510 != (_DWORD)v507);
                }
              }
              else if ((int)v507 >= 1)
              {
                v1373 = v508 - 1;
                v1374 = 4 * v1373 - 4 * (v508 - 2) - 4;
                v1375 = 4 * (v508 - 1);
                do
                {
                  v1376 = &v505[v1373];
                  *v1376 = 0x7FFFFFFF;
                  if (v509 >= 2)
                  {
                    v1376 = (int *)((char *)v505 + v1374);
                    memset_pattern16((char *)v505 + v1374, &unk_2425A29A0, v1375);
                  }
                  v505 = &v1376[v509];
                  LODWORD(v507) = v507 - 1;
                }
                while ((_DWORD)v507);
              }
            }
            else if (v27)
            {
              if ((int)v507 >= 1)
              {
                v1049 = 0;
                do
                {
                  v1050 = *v504;
                  *v505 = *v504;
                  v1051 = v508 - 1;
                  if (v508 >= 2)
                  {
                    do
                    {
                      v1053 = v504[1];
                      ++v504;
                      v1052 = v1053;
                      if (v1053 > v1050)
                        v1050 = v1052;
                      v505[1] = v1050;
                      ++v505;
                      --v1051;
                    }
                    while (v1051);
                  }
                  ++v505;
                  ++v504;
                  ++v1049;
                }
                while (v1049 != (_DWORD)v507);
              }
            }
            else if ((int)v507 >= 1)
            {
              v1716 = 4 * (v508 - 2) + 4;
              do
              {
                *v505 = 0x7FFFFFFF;
                if (v509 >= 2)
                {
                  memset_pattern16(v505 + 1, &unk_2425A29A0, 4 * (v509 - 1));
                  v505 = (int *)((char *)v505 + v1716);
                }
                ++v505;
                LODWORD(v507) = v507 - 1;
              }
              while ((_DWORD)v507);
            }
          }
          else
          {
            v518 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
            v519 = mlx::core::array::shape((mlx::core::array *)v1833, v25);
            v520 = v519;
            v521 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
            v522 = v507 / v518;
            if (v26)
            {
              if (v27)
              {
                if ((int)v522 >= 1)
                {
                  v523 = 0;
                  v524 = (v519 - 1) * (int)v521;
                  v525 = v519 * (int)v521;
                  do
                  {
                    v527 = &v505[v524];
                    v528 = (char *)&v504[v524];
                    if ((_DWORD)v521)
                      memmove(v527, v528, 4 * (int)v521);
                    if (v520 >= 2)
                    {
                      for (i59 = 1; i59 != v520; ++i59)
                      {
                        v530 = v521;
                        if ((int)v521 >= 1)
                        {
                          do
                          {
                            v532 = *((_DWORD *)v528 - 1);
                            v528 -= 4;
                            v531 = v532;
                            v526 = 4 * (int)v521 - 4;
                            if (v532 <= *(int *)((char *)v527 + v526))
                              v531 = *(int *)((char *)v527 + v526);
                            *--v527 = v531;
                            --v530;
                          }
                          while (v530);
                        }
                      }
                    }
                    v505 = &v527[v525];
                    v504 = (int *)&v528[4 * v525];
                    ++v523;
                  }
                  while (v523 != (_DWORD)v522);
                }
              }
              else if ((int)v522 >= 1)
              {
                v1377 = 0;
                v1378 = (v519 - 1) * (int)v521;
                v1379 = v519 * (int)v521;
                v1380 = 4 * (int)v521 - 4;
                do
                {
                  v1381 = &v505[v1378];
                  if ((int)v521 >= 1)
                    memset_pattern16(v1381, &unk_2425A29A0, 4 * ((int)v521 - (unint64_t)(((int)v521 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1382 = &v504[v1378];
                  if (v520 > 1)
                  {
                    for (i60 = 1; i60 != v520; ++i60)
                    {
                      v1384 = v521;
                      if ((int)v521 >= 1)
                      {
                        do
                        {
                          v1385 = *(int *)((char *)v1382 + v1380);
                          if (v1385 <= *(int *)((char *)v1381 + v1380))
                            v1385 = *(int *)((char *)v1381 + v1380);
                          *--v1381 = v1385;
                          --v1382;
                          --v1384;
                        }
                        while (v1384);
                      }
                    }
                  }
                  v505 = &v1381[v1379];
                  v504 = &v1382[v1379];
                  ++v1377;
                }
                while (v1377 != (_DWORD)v522);
              }
            }
            else if (v27)
            {
              if ((int)v522 >= 1)
              {
                v1054 = 0;
                do
                {
                  if ((_DWORD)v521)
                    memmove(v505, v504, 4 * (int)v521);
                  v504 += (int)v521;
                  v505 += (int)v521;
                  if (v520 >= 2)
                  {
                    for (i61 = 1; i61 != v520; ++i61)
                    {
                      v1056 = v521;
                      if ((int)v521 >= 1)
                      {
                        do
                        {
                          v1058 = *v504++;
                          v1057 = v1058;
                          if (v1058 <= v505[-(int)v521])
                            v1057 = v505[-(int)v521];
                          *v505++ = v1057;
                          --v1056;
                        }
                        while (v1056);
                      }
                    }
                  }
                  ++v1054;
                }
                while (v1054 != (_DWORD)v522);
              }
            }
            else if ((int)v522 >= 1)
            {
              v1717 = 0;
              do
              {
                if ((int)v521 >= 1)
                  memset_pattern16(v505, &unk_2425A29A0, 4 * ((int)v521 - (unint64_t)(((int)v521 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v505 += (int)v521;
                v504 += (int)v521;
                if (v520 > 1)
                {
                  for (i62 = 1; i62 != v520; ++i62)
                  {
                    v1719 = v521;
                    if ((int)v521 >= 1)
                    {
                      do
                      {
                        v1720 = v504[-(int)v521];
                        if (v1720 <= v505[-(int)v521])
                          v1720 = v505[-(int)v521];
                        *v505++ = v1720;
                        ++v504;
                        --v1719;
                      }
                      while (v1719);
                    }
                  }
                }
                ++v1717;
              }
              while (v1717 != (_DWORD)v522);
            }
          }
          goto LABEL_2618;
        case 1:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v80 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v80, (uint64_t)&v1835);
          v81 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v82 = 4;
            v81 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_503;
            v82 = 5;
          }
          (*((void (**)(void))*v81 + v82))();
LABEL_503:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v533 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
          v534 = *(int **)(v1833[0] + 152);
          v535 = (*a3)[19];
          v536 = *(_QWORD *)(v1833[0] + 48);
          v537 = v536 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v25);
          if (v533 == 1)
          {
            v538 = mlx::core::array::shape((mlx::core::array *)v1833, v25);
            if (v26)
            {
              if (v27)
              {
                if ((int)v537 >= 1)
                {
                  v539 = 0;
                  v540 = v538 - 1;
                  do
                  {
                    v541 = &v535[v540];
                    v542 = &v534[v540];
                    v543 = *v542;
                    *v541 = *v542;
                    v544 = v538 - 1;
                    if (v538 >= 2)
                    {
                      do
                      {
                        v546 = *--v542;
                        v545 = v546;
                        if (v546 < v543)
                          v543 = v545;
                        *--v541 = v543;
                        --v544;
                      }
                      while (v544);
                    }
                    v535 = &v541[v538];
                    v534 = &v542[v538];
                    ++v539;
                  }
                  while (v539 != (_DWORD)v537);
                }
              }
              else if ((int)v537 >= 1)
              {
                v1386 = 0;
                v1387 = v538 - 1;
                do
                {
                  v1388 = &v535[v1387];
                  v1389 = &v534[v1387];
                  *v1388 = 0x7FFFFFFF;
                  if (v538 >= 2)
                  {
                    v1390 = 0x7FFFFFFF;
                    v1391 = v538 - 1;
                    do
                    {
                      v1393 = *v1389--;
                      v1392 = v1393;
                      if (v1393 < v1390)
                        v1390 = v1392;
                      *--v1388 = v1390;
                      --v1391;
                    }
                    while (v1391);
                  }
                  v535 = &v1388[v538];
                  v534 = &v1389[v538];
                  ++v1386;
                }
                while (v1386 != (_DWORD)v537);
              }
            }
            else if (v27)
            {
              if ((int)v537 >= 1)
              {
                v1059 = 0;
                do
                {
                  v1060 = *v534;
                  *v535 = *v534;
                  v1061 = v538 - 1;
                  if (v538 >= 2)
                  {
                    do
                    {
                      v1063 = v534[1];
                      ++v534;
                      v1062 = v1063;
                      if (v1063 < v1060)
                        v1060 = v1062;
                      v535[1] = v1060;
                      ++v535;
                      --v1061;
                    }
                    while (v1061);
                  }
                  ++v535;
                  ++v534;
                  ++v1059;
                }
                while (v1059 != (_DWORD)v537);
              }
            }
            else if ((int)v537 >= 1)
            {
              v1721 = 0;
              do
              {
                *v535 = 0x7FFFFFFF;
                if (v538 >= 2)
                {
                  v1722 = 0x7FFFFFFF;
                  v1723 = v538 - 1;
                  do
                  {
                    v1725 = *v534++;
                    v1724 = v1725;
                    if (v1725 < v1722)
                      v1722 = v1724;
                    v535[1] = v1722;
                    ++v535;
                    --v1723;
                  }
                  while (v1723);
                }
                ++v535;
                ++v534;
                ++v1721;
              }
              while (v1721 != (_DWORD)v537);
            }
          }
          else
          {
            v547 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
            v548 = mlx::core::array::shape((mlx::core::array *)v1833, v25);
            v549 = v548;
            v550 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
            v551 = v537 / v547;
            if (v26)
            {
              if (v27)
              {
                if ((int)v551 >= 1)
                {
                  v552 = 0;
                  v553 = (v548 - 1) * (int)v550;
                  v554 = v548 * (int)v550;
                  do
                  {
                    v556 = &v535[v553];
                    v557 = (char *)&v534[v553];
                    if ((_DWORD)v550)
                      memmove(v556, v557, 4 * (int)v550);
                    if (v549 >= 2)
                    {
                      for (i63 = 1; i63 != v549; ++i63)
                      {
                        v559 = v550;
                        if ((int)v550 >= 1)
                        {
                          do
                          {
                            v561 = *((_DWORD *)v557 - 1);
                            v557 -= 4;
                            v560 = v561;
                            v555 = 4 * (int)v550 - 4;
                            if (v561 >= *(int *)((char *)v556 + v555))
                              v560 = *(int *)((char *)v556 + v555);
                            *--v556 = v560;
                            --v559;
                          }
                          while (v559);
                        }
                      }
                    }
                    v535 = &v556[v554];
                    v534 = (int *)&v557[4 * v554];
                    ++v552;
                  }
                  while (v552 != (_DWORD)v551);
                }
              }
              else if ((int)v551 >= 1)
              {
                v1394 = 0;
                v1395 = (v548 - 1) * (int)v550;
                v1396 = v548 * (int)v550;
                v1397 = 4 * (int)v550 - 4;
                do
                {
                  v1398 = &v535[v1395];
                  if ((int)v550 >= 1)
                    memset_pattern16(v1398, &unk_2425A29A0, 4 * ((int)v550 - (unint64_t)(((int)v550 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1399 = &v534[v1395];
                  if (v549 > 1)
                  {
                    for (i64 = 1; i64 != v549; ++i64)
                    {
                      v1401 = v550;
                      if ((int)v550 >= 1)
                      {
                        do
                        {
                          v1402 = *(int *)((char *)v1399 + v1397);
                          if (v1402 >= *(int *)((char *)v1398 + v1397))
                            v1402 = *(int *)((char *)v1398 + v1397);
                          *--v1398 = v1402;
                          --v1399;
                          --v1401;
                        }
                        while (v1401);
                      }
                    }
                  }
                  v535 = &v1398[v1396];
                  v534 = &v1399[v1396];
                  ++v1394;
                }
                while (v1394 != (_DWORD)v551);
              }
            }
            else if (v27)
            {
              if ((int)v551 >= 1)
              {
                v1064 = 0;
                do
                {
                  if ((_DWORD)v550)
                    memmove(v535, v534, 4 * (int)v550);
                  v534 += (int)v550;
                  v535 += (int)v550;
                  if (v549 >= 2)
                  {
                    for (i65 = 1; i65 != v549; ++i65)
                    {
                      v1066 = v550;
                      if ((int)v550 >= 1)
                      {
                        do
                        {
                          v1068 = *v534++;
                          v1067 = v1068;
                          if (v1068 >= v535[-(int)v550])
                            v1067 = v535[-(int)v550];
                          *v535++ = v1067;
                          --v1066;
                        }
                        while (v1066);
                      }
                    }
                  }
                  ++v1064;
                }
                while (v1064 != (_DWORD)v551);
              }
            }
            else if ((int)v551 >= 1)
            {
              v1726 = 0;
              do
              {
                if ((int)v550 >= 1)
                  memset_pattern16(v535, &unk_2425A29A0, 4 * ((int)v550 - (unint64_t)(((int)v550 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v535 += (int)v550;
                v534 += (int)v550;
                if (v549 > 1)
                {
                  for (i66 = 1; i66 != v549; ++i66)
                  {
                    v1728 = v550;
                    if ((int)v550 >= 1)
                    {
                      do
                      {
                        v1729 = v534[-(int)v550];
                        if (v1729 >= v535[-(int)v550])
                          v1729 = v535[-(int)v550];
                        *v535++ = v1729;
                        ++v534;
                        --v1728;
                      }
                      while (v1728);
                    }
                  }
                }
                ++v1726;
              }
              while (v1726 != (_DWORD)v551);
            }
          }
          goto LABEL_2618;
        case 2:
          v74 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v74, (uint64_t)&v1835);
          v75 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v76 = 4;
            v75 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_174;
            v76 = 5;
          }
          (*((void (**)(void))*v75 + v76))();
LABEL_174:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v191 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
          v192 = *(int **)(v1833[0] + 152);
          v193 = (*a3)[19];
          v194 = *(_QWORD *)(v1833[0] + 48);
          v195 = v194 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v25);
          if (v191 == 1)
          {
            v196 = mlx::core::array::shape((mlx::core::array *)v1833, v25);
            if (v26)
            {
              if (v27)
              {
                if ((int)v195 >= 1)
                {
                  v197 = 0;
                  v198 = v196 - 1;
                  do
                  {
                    v199 = &v193[v198];
                    v200 = &v192[v198];
                    v201 = *v200;
                    *v199 = *v200;
                    v202 = v196 - 1;
                    if (v196 >= 2)
                    {
                      do
                      {
                        v203 = *--v200;
                        v201 += v203;
                        *--v199 = v201;
                        --v202;
                      }
                      while (v202);
                    }
                    v193 = &v199[v196];
                    v192 = &v200[v196];
                    ++v197;
                  }
                  while (v197 != (_DWORD)v195);
                }
              }
              else if ((int)v195 >= 1)
              {
                v1197 = 0;
                v1198 = v196 - 1;
                do
                {
                  v1199 = &v193[v1198];
                  v1200 = &v192[v1198];
                  *v1199 = 0;
                  if (v196 >= 2)
                  {
                    v1201 = 0;
                    v1202 = v196 - 1;
                    do
                    {
                      v1203 = *v1200--;
                      v1201 += v1203;
                      *--v1199 = v1201;
                      --v1202;
                    }
                    while (v1202);
                  }
                  v193 = &v1199[v196];
                  v192 = &v1200[v196];
                  ++v1197;
                }
                while (v1197 != (_DWORD)v195);
              }
            }
            else if (v27)
            {
              if ((int)v195 >= 1)
              {
                v953 = 0;
                do
                {
                  v954 = *v192;
                  *v193 = *v192;
                  v955 = v196 - 1;
                  if (v196 >= 2)
                  {
                    do
                    {
                      v956 = v192[1];
                      ++v192;
                      v954 += v956;
                      v193[1] = v954;
                      ++v193;
                      --v955;
                    }
                    while (v955);
                  }
                  ++v193;
                  ++v192;
                  ++v953;
                }
                while (v953 != (_DWORD)v195);
              }
            }
            else if ((int)v195 >= 1)
            {
              v1632 = 0;
              do
              {
                *v193 = 0;
                if (v196 >= 2)
                {
                  v1633 = 0;
                  v1634 = v196 - 1;
                  do
                  {
                    v1635 = *v192++;
                    v1633 += v1635;
                    v193[1] = v1633;
                    ++v193;
                    --v1634;
                  }
                  while (v1634);
                }
                ++v193;
                ++v192;
                ++v1632;
              }
              while (v1632 != (_DWORD)v195);
            }
          }
          else
          {
            v204 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
            v205 = mlx::core::array::shape((mlx::core::array *)v1833, v25);
            v206 = v205;
            v207 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
            v208 = v195 / v204;
            if (v26)
            {
              if (v27)
              {
                if ((int)v208 >= 1)
                {
                  v209 = 0;
                  v210 = (v205 - 1) * (int)v207;
                  v211 = v205 * (int)v207;
                  do
                  {
                    v212 = &v193[v210];
                    v213 = (char *)&v192[v210];
                    if ((_DWORD)v207)
                      memmove(v212, v213, 4 * (int)v207);
                    if (v206 >= 2)
                    {
                      for (i67 = 1; i67 != v206; ++i67)
                      {
                        v215 = v207;
                        if ((int)v207 >= 1)
                        {
                          do
                          {
                            v216 = *((_DWORD *)v213 - 1);
                            v213 -= 4;
                            *(v212 - 1) = v216 + v212[(int)v207 - 1];
                            --v212;
                            --v215;
                          }
                          while (v215);
                        }
                      }
                    }
                    v193 = &v212[v211];
                    v192 = (int *)&v213[4 * v211];
                    ++v209;
                  }
                  while (v209 != (_DWORD)v208);
                }
              }
              else if ((int)v208 >= 1)
              {
                v1204 = 0;
                v1205 = (v205 - 1) * (int)v207;
                v1206 = v205 * (int)v207;
                do
                {
                  v1207 = &v193[v1205];
                  if ((int)v207 >= 1)
                    bzero(v1207, 4 * ((int)v207 - (unint64_t)(((int)v207 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1208 = &v192[v1205];
                  if (v206 > 1)
                  {
                    for (i68 = 1; i68 != v206; ++i68)
                    {
                      v1210 = v207;
                      if ((int)v207 >= 1)
                      {
                        do
                        {
                          *(v1207 - 1) = v1208[(int)v207 - 1] + v1207[(int)v207 - 1];
                          --v1207;
                          --v1208;
                          --v1210;
                        }
                        while (v1210);
                      }
                    }
                  }
                  v193 = &v1207[v1206];
                  v192 = &v1208[v1206];
                  ++v1204;
                }
                while (v1204 != (_DWORD)v208);
              }
            }
            else if (v27)
            {
              if ((int)v208 >= 1)
              {
                v957 = 0;
                do
                {
                  if ((_DWORD)v207)
                    memmove(v193, v192, 4 * (int)v207);
                  v192 += (int)v207;
                  v193 += (int)v207;
                  if (v206 >= 2)
                  {
                    for (i69 = 1; i69 != v206; ++i69)
                    {
                      v959 = v207;
                      if ((int)v207 >= 1)
                      {
                        do
                        {
                          v960 = *v192++;
                          *v193 = v960 + v193[-(int)v207];
                          ++v193;
                          --v959;
                        }
                        while (v959);
                      }
                    }
                  }
                  ++v957;
                }
                while (v957 != (_DWORD)v208);
              }
            }
            else if ((int)v208 >= 1)
            {
              v1636 = 0;
              do
              {
                if ((int)v207 >= 1)
                  bzero(v193, 4 * ((int)v207 - (unint64_t)(((int)v207 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v193 += (int)v207;
                v192 += (int)v207;
                if (v206 > 1)
                {
                  for (i70 = 1; i70 != v206; ++i70)
                  {
                    v1638 = v207;
                    if ((int)v207 >= 1)
                    {
                      do
                      {
                        *v193 = v192[-(int)v207] + v193[-(int)v207];
                        ++v193;
                        ++v192;
                        --v1638;
                      }
                      while (v1638);
                    }
                  }
                }
                ++v1636;
              }
              while (v1636 != (_DWORD)v208);
            }
          }
          goto LABEL_2618;
        case 3:
          v77 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v77, (uint64_t)&v1835);
          v78 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v79 = 4;
            v78 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_199;
            v79 = 5;
          }
          (*((void (**)(void))*v78 + v79))();
LABEL_199:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v217 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
          v218 = *(int **)(v1833[0] + 152);
          v219 = (*a3)[19];
          v220 = *(_QWORD *)(v1833[0] + 48);
          v221 = v220 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v25);
          if (v217 == 1)
          {
            v222 = mlx::core::array::shape((mlx::core::array *)v1833, v25);
            if (v26)
            {
              if (v27)
              {
                if ((int)v221 >= 1)
                {
                  v223 = 0;
                  v224 = v222 - 1;
                  do
                  {
                    v225 = &v219[v224];
                    v226 = &v218[v224];
                    v227 = *v226;
                    *v225 = *v226;
                    v228 = v222 - 1;
                    if (v222 >= 2)
                    {
                      do
                      {
                        v229 = *--v226;
                        v227 *= v229;
                        *--v225 = v227;
                        --v228;
                      }
                      while (v228);
                    }
                    v219 = &v225[v222];
                    v218 = &v226[v222];
                    ++v223;
                  }
                  while (v223 != (_DWORD)v221);
                }
              }
              else if ((int)v221 >= 1)
              {
                v1211 = 0;
                v1212 = v222 - 1;
                do
                {
                  v1213 = &v219[v1212];
                  v1214 = &v218[v1212];
                  *v1213 = 1;
                  if (v222 >= 2)
                  {
                    v1215 = 1;
                    v1216 = v222 - 1;
                    do
                    {
                      v1217 = *v1214--;
                      v1215 *= v1217;
                      *--v1213 = v1215;
                      --v1216;
                    }
                    while (v1216);
                  }
                  v219 = &v1213[v222];
                  v218 = &v1214[v222];
                  ++v1211;
                }
                while (v1211 != (_DWORD)v221);
              }
            }
            else if (v27)
            {
              if ((int)v221 >= 1)
              {
                v961 = 0;
                do
                {
                  v962 = *v218;
                  *v219 = *v218;
                  v963 = v222 - 1;
                  if (v222 >= 2)
                  {
                    do
                    {
                      v964 = v218[1];
                      ++v218;
                      v962 *= v964;
                      v219[1] = v962;
                      ++v219;
                      --v963;
                    }
                    while (v963);
                  }
                  ++v219;
                  ++v218;
                  ++v961;
                }
                while (v961 != (_DWORD)v221);
              }
            }
            else if ((int)v221 >= 1)
            {
              v1639 = 0;
              do
              {
                *v219 = 1;
                if (v222 >= 2)
                {
                  v1640 = 1;
                  v1641 = v222 - 1;
                  do
                  {
                    v1642 = *v218++;
                    v1640 *= v1642;
                    v219[1] = v1640;
                    ++v219;
                    --v1641;
                  }
                  while (v1641);
                }
                ++v219;
                ++v218;
                ++v1639;
              }
              while (v1639 != (_DWORD)v221);
            }
          }
          else
          {
            v230 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
            v231 = mlx::core::array::shape((mlx::core::array *)v1833, v25);
            v232 = v231;
            v233 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v25);
            v234 = v221 / v230;
            if (v26)
            {
              if (v27)
              {
                if ((int)v234 >= 1)
                {
                  v235 = 0;
                  v236 = (v231 - 1) * (int)v233;
                  v237 = v231 * (int)v233;
                  do
                  {
                    v238 = &v219[v236];
                    v239 = (char *)&v218[v236];
                    if ((_DWORD)v233)
                      memmove(v238, v239, 4 * (int)v233);
                    if (v232 >= 2)
                    {
                      for (i71 = 1; i71 != v232; ++i71)
                      {
                        v241 = v233;
                        if ((int)v233 >= 1)
                        {
                          do
                          {
                            v242 = *((_DWORD *)v239 - 1);
                            v239 -= 4;
                            *(v238 - 1) = v242 * v238[(int)v233 - 1];
                            --v238;
                            --v241;
                          }
                          while (v241);
                        }
                      }
                    }
                    v219 = &v238[v237];
                    v218 = (int *)&v239[4 * v237];
                    ++v235;
                  }
                  while (v235 != (_DWORD)v234);
                }
              }
              else if ((int)v234 >= 1)
              {
                v1218 = 0;
                v1219 = (v231 - 1) * (int)v233;
                v1220 = v231 * (int)v233;
                do
                {
                  v1221 = &v219[v1219];
                  if ((int)v233 >= 1)
                    memset_pattern16(v1221, &unk_2425A2960, 4 * ((int)v233 - (unint64_t)(((int)v233 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1222 = &v218[v1219];
                  if (v232 > 1)
                  {
                    for (i72 = 1; i72 != v232; ++i72)
                    {
                      v1224 = v233;
                      if ((int)v233 >= 1)
                      {
                        do
                        {
                          *(v1221 - 1) = v1222[(int)v233 - 1] * v1221[(int)v233 - 1];
                          --v1221;
                          --v1222;
                          --v1224;
                        }
                        while (v1224);
                      }
                    }
                  }
                  v219 = &v1221[v1220];
                  v218 = &v1222[v1220];
                  ++v1218;
                }
                while (v1218 != (_DWORD)v234);
              }
            }
            else if (v27)
            {
              if ((int)v234 >= 1)
              {
                v965 = 0;
                do
                {
                  if ((_DWORD)v233)
                    memmove(v219, v218, 4 * (int)v233);
                  v218 += (int)v233;
                  v219 += (int)v233;
                  if (v232 >= 2)
                  {
                    for (i73 = 1; i73 != v232; ++i73)
                    {
                      v967 = v233;
                      if ((int)v233 >= 1)
                      {
                        do
                        {
                          v968 = *v218++;
                          *v219 = v968 * v219[-(int)v233];
                          ++v219;
                          --v967;
                        }
                        while (v967);
                      }
                    }
                  }
                  ++v965;
                }
                while (v965 != (_DWORD)v234);
              }
            }
            else if ((int)v234 >= 1)
            {
              v1643 = 0;
              do
              {
                if ((int)v233 >= 1)
                  memset_pattern16(v219, &unk_2425A2960, 4 * ((int)v233 - (unint64_t)(((int)v233 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v219 += (int)v233;
                v218 += (int)v233;
                if (v232 > 1)
                {
                  for (i74 = 1; i74 != v232; ++i74)
                  {
                    v1645 = v233;
                    if ((int)v233 >= 1)
                    {
                      do
                      {
                        *v219 = v218[-(int)v233] * v219[-(int)v233];
                        ++v219;
                        ++v218;
                        --v1645;
                      }
                      while (v1645);
                    }
                  }
                }
                ++v1643;
              }
              while (v1643 != (_DWORD)v234);
            }
          }
          break;
        default:
          goto LABEL_2618;
      }
      goto LABEL_2618;
    case 5:
      v49 = *(int *)(a1 + 24);
      v50 = *(unsigned __int8 *)(a1 + 28);
      v51 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v52 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v52, (uint64_t)&v1835);
          v53 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v54 = 4;
            v53 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_706;
            v54 = 5;
          }
          (*((void (**)(void))*v53 + v54))();
LABEL_706:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v735 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
          v736 = *(char **)(v1833[0] + 152);
          v737 = (*a3)[19];
          v738 = *(_QWORD *)(v1833[0] + 48);
          v739 = v738 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v49);
          if (v735 == 1)
          {
            v740 = mlx::core::array::shape((mlx::core::array *)v1833, v49);
            v741 = v740;
            if (v50)
            {
              if (v51)
              {
                if ((int)v739 >= 1)
                {
                  v742 = 0;
                  v743 = v740 - 1;
                  do
                  {
                    v744 = &v737[2 * v743];
                    v745 = &v736[8 * v743];
                    v746 = *(_QWORD *)v745;
                    *(_QWORD *)v744 = *(_QWORD *)v745;
                    v747 = v740 - 1;
                    if (v740 >= 2)
                    {
                      do
                      {
                        v749 = *((_QWORD *)v745 - 1);
                        v745 -= 8;
                        v748 = v749;
                        if (v749 > v746)
                          v746 = v748;
                        *((_QWORD *)v744 - 1) = v746;
                        v744 -= 2;
                        --v747;
                      }
                      while (v747);
                    }
                    v737 = &v744[2 * v740];
                    v736 = &v745[8 * v740];
                    ++v742;
                  }
                  while (v742 != (_DWORD)v739);
                }
              }
              else if ((int)v739 >= 1)
              {
                v1501 = v740 - 1;
                v1502 = 8 * v1501 - 8 * (v740 - 2) - 8;
                v1503 = 8 * (v740 - 1);
                do
                {
                  v1504 = &v737[2 * v1501];
                  *(_QWORD *)v1504 = 0x7FFFFFFFFFFFFFFFLL;
                  if (v741 >= 2)
                  {
                    v1504 = (int *)((char *)v737 + v1502);
                    memset_pattern16((char *)v737 + v1502, &unk_2425A2990, v1503);
                  }
                  v737 = &v1504[2 * v741];
                  LODWORD(v739) = v739 - 1;
                }
                while ((_DWORD)v739);
              }
            }
            else if (v51)
            {
              if ((int)v739 >= 1)
              {
                v1129 = 0;
                do
                {
                  v1130 = *(_QWORD *)v736;
                  *(_QWORD *)v737 = *(_QWORD *)v736;
                  v1131 = v740 - 1;
                  if (v740 >= 2)
                  {
                    do
                    {
                      v1133 = *((_QWORD *)v736 + 1);
                      v736 += 8;
                      v1132 = v1133;
                      if (v1133 > v1130)
                        v1130 = v1132;
                      *((_QWORD *)v737 + 1) = v1130;
                      v737 += 2;
                      --v1131;
                    }
                    while (v1131);
                  }
                  v737 += 2;
                  v736 += 8;
                  ++v1129;
                }
                while (v1129 != (_DWORD)v739);
              }
            }
            else if ((int)v739 >= 1)
            {
              v1772 = 8 * (v740 - 2) + 8;
              do
              {
                *(_QWORD *)v737 = 0x7FFFFFFFFFFFFFFFLL;
                if (v741 >= 2)
                {
                  memset_pattern16(v737 + 2, &unk_2425A2990, 8 * (v741 - 1));
                  v737 = (int *)((char *)v737 + v1772);
                }
                v737 += 2;
                LODWORD(v739) = v739 - 1;
              }
              while ((_DWORD)v739);
            }
          }
          else
          {
            v750 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
            v751 = mlx::core::array::shape((mlx::core::array *)v1833, v49);
            v752 = v751;
            v753 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
            v754 = v739 / v750;
            if (v50)
            {
              if (v51)
              {
                if ((int)v754 >= 1)
                {
                  v755 = 0;
                  v756 = (v751 - 1) * (int)v753;
                  v757 = v751 * (int)v753;
                  v758 = 8 * (int)v753 - 8;
                  do
                  {
                    v759 = &v737[2 * v756];
                    v760 = &v736[8 * v756];
                    if ((_DWORD)v753)
                      memmove(v759, v760, 8 * (int)v753);
                    if (v752 >= 2)
                    {
                      for (i75 = 1; i75 != v752; ++i75)
                      {
                        v762 = v753;
                        if ((int)v753 >= 1)
                        {
                          do
                          {
                            v764 = *((_QWORD *)v760 - 1);
                            v760 -= 8;
                            v763 = v764;
                            if (v764 <= *(_QWORD *)((char *)v759 + v758))
                              v763 = *(_QWORD *)((char *)v759 + v758);
                            *((_QWORD *)v759 - 1) = v763;
                            v759 -= 2;
                            --v762;
                          }
                          while (v762);
                        }
                      }
                    }
                    v737 = &v759[2 * v757];
                    v736 = &v760[8 * v757];
                    ++v755;
                  }
                  while (v755 != (_DWORD)v754);
                }
              }
              else if ((int)v754 >= 1)
              {
                v1505 = 0;
                v1506 = (v751 - 1) * (int)v753;
                v1507 = v751 * (int)v753;
                v1508 = 8 * (int)v753 - 8;
                do
                {
                  v1509 = &v737[2 * v1506];
                  if ((int)v753 >= 1)
                    memset_pattern16(v1509, &unk_2425A2990, 8 * ((int)v753 - (unint64_t)(((int)v753 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                  v1510 = &v736[8 * v1506];
                  if (v752 > 1)
                  {
                    for (i76 = 1; i76 != v752; ++i76)
                    {
                      v1512 = v753;
                      if ((int)v753 >= 1)
                      {
                        do
                        {
                          v1513 = *(_QWORD *)&v1510[v1508];
                          if (v1513 <= *(_QWORD *)((char *)v1509 + v1508))
                            v1513 = *(_QWORD *)((char *)v1509 + v1508);
                          *((_QWORD *)v1509 - 1) = v1513;
                          v1509 -= 2;
                          v1510 -= 8;
                          --v1512;
                        }
                        while (v1512);
                      }
                    }
                  }
                  v737 = &v1509[2 * v1507];
                  v736 = &v1510[8 * v1507];
                  ++v1505;
                }
                while (v1505 != (_DWORD)v754);
              }
            }
            else if (v51)
            {
              if ((int)v754 >= 1)
              {
                v1134 = 0;
                do
                {
                  if ((_DWORD)v753)
                    memmove(v737, v736, 8 * (int)v753);
                  v736 += 8 * (int)v753;
                  v737 += 2 * (int)v753;
                  if (v752 >= 2)
                  {
                    for (i77 = 1; i77 != v752; ++i77)
                    {
                      v1136 = v753;
                      if ((int)v753 >= 1)
                      {
                        do
                        {
                          v1138 = *(_QWORD *)v736;
                          v736 += 8;
                          v1137 = v1138;
                          if (v1138 <= *(_QWORD *)&v737[-2 * (int)v753])
                            v1137 = *(_QWORD *)&v737[-2 * (int)v753];
                          *(_QWORD *)v737 = v1137;
                          v737 += 2;
                          --v1136;
                        }
                        while (v1136);
                      }
                    }
                  }
                  ++v1134;
                }
                while (v1134 != (_DWORD)v754);
              }
            }
            else if ((int)v754 >= 1)
            {
              v1773 = 0;
              do
              {
                if ((int)v753 >= 1)
                  memset_pattern16(v737, &unk_2425A2990, 8 * ((int)v753 - (unint64_t)(((int)v753 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                v737 += 2 * (int)v753;
                v736 += 8 * (int)v753;
                if (v752 > 1)
                {
                  for (i78 = 1; i78 != v752; ++i78)
                  {
                    v1775 = v753;
                    if ((int)v753 >= 1)
                    {
                      do
                      {
                        v1776 = *(_QWORD *)&v736[-8 * (int)v753];
                        if (v1776 <= *(_QWORD *)&v737[-2 * (int)v753])
                          v1776 = *(_QWORD *)&v737[-2 * (int)v753];
                        *(_QWORD *)v737 = v1776;
                        v737 += 2;
                        v736 += 8;
                        --v1775;
                      }
                      while (v1775);
                    }
                  }
                }
                ++v1773;
              }
              while (v1773 != (_DWORD)v754);
            }
          }
          goto LABEL_2618;
        case 1:
          v1835 = v15;
          mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating);
          v122 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v122, (uint64_t)&v1835);
          v123 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v124 = 4;
            v123 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_735;
            v124 = 5;
          }
          (*((void (**)(void))*v123 + v124))();
LABEL_735:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v765 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
          v766 = *(uint64_t **)(v1833[0] + 152);
          v767 = (*a3)[19];
          v768 = *(_QWORD *)(v1833[0] + 48);
          v769 = v768 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v49);
          if (v765 == 1)
          {
            v770 = mlx::core::array::shape((mlx::core::array *)v1833, v49);
            if (v50)
            {
              if (v51)
              {
                if ((int)v769 >= 1)
                {
                  v771 = 0;
                  v772 = v770 - 1;
                  do
                  {
                    v773 = &v767[2 * v772];
                    v774 = &v766[v772];
                    v775 = *v774;
                    *(_QWORD *)v773 = *v774;
                    v776 = v770 - 1;
                    if (v770 >= 2)
                    {
                      do
                      {
                        v778 = *--v774;
                        v777 = v778;
                        if (v778 < v775)
                          v775 = v777;
                        *((_QWORD *)v773 - 1) = v775;
                        v773 -= 2;
                        --v776;
                      }
                      while (v776);
                    }
                    v767 = &v773[2 * v770];
                    v766 = &v774[v770];
                    ++v771;
                  }
                  while (v771 != (_DWORD)v769);
                }
              }
              else if ((int)v769 >= 1)
              {
                v1514 = 0;
                v1515 = v770 - 1;
                do
                {
                  v1516 = &v767[2 * v1515];
                  v1517 = &v766[v1515];
                  *(_QWORD *)v1516 = 0x7FFFFFFFFFFFFFFFLL;
                  if (v770 >= 2)
                  {
                    v1518 = 0x7FFFFFFFFFFFFFFFLL;
                    v1519 = v770 - 1;
                    do
                    {
                      v1521 = *v1517--;
                      v1520 = v1521;
                      if (v1521 < v1518)
                        v1518 = v1520;
                      *((_QWORD *)v1516 - 1) = v1518;
                      v1516 -= 2;
                      --v1519;
                    }
                    while (v1519);
                  }
                  v767 = &v1516[2 * v770];
                  v766 = &v1517[v770];
                  ++v1514;
                }
                while (v1514 != (_DWORD)v769);
              }
            }
            else if (v51)
            {
              if ((int)v769 >= 1)
              {
                v1139 = 0;
                do
                {
                  v1140 = *v766;
                  *(_QWORD *)v767 = *v766;
                  v1141 = v770 - 1;
                  if (v770 >= 2)
                  {
                    do
                    {
                      v1143 = v766[1];
                      ++v766;
                      v1142 = v1143;
                      if (v1143 < v1140)
                        v1140 = v1142;
                      *((_QWORD *)v767 + 1) = v1140;
                      v767 += 2;
                      --v1141;
                    }
                    while (v1141);
                  }
                  v767 += 2;
                  ++v766;
                  ++v1139;
                }
                while (v1139 != (_DWORD)v769);
              }
            }
            else if ((int)v769 >= 1)
            {
              v1777 = 0;
              do
              {
                *(_QWORD *)v767 = 0x7FFFFFFFFFFFFFFFLL;
                if (v770 >= 2)
                {
                  v1778 = 0x7FFFFFFFFFFFFFFFLL;
                  v1779 = v770 - 1;
                  do
                  {
                    v1781 = *v766++;
                    v1780 = v1781;
                    if (v1781 < v1778)
                      v1778 = v1780;
                    *((_QWORD *)v767 + 1) = v1778;
                    v767 += 2;
                    --v1779;
                  }
                  while (v1779);
                }
                v767 += 2;
                ++v766;
                ++v1777;
              }
              while (v1777 != (_DWORD)v769);
            }
          }
          else
          {
            v779 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
            v780 = mlx::core::array::shape((mlx::core::array *)v1833, v49);
            v781 = v780;
            v782 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
            v783 = v769 / v779;
            if (v50)
            {
              if (v51)
              {
                if ((int)v783 >= 1)
                {
                  v784 = 0;
                  v785 = (v780 - 1) * (int)v782;
                  v786 = v780 * (int)v782;
                  v787 = 8 * (int)v782 - 8;
                  do
                  {
                    v788 = &v767[2 * v785];
                    v789 = (char *)&v766[v785];
                    if ((_DWORD)v782)
                      memmove(v788, v789, 8 * (int)v782);
                    if (v781 >= 2)
                    {
                      for (i79 = 1; i79 != v781; ++i79)
                      {
                        v791 = v782;
                        if ((int)v782 >= 1)
                        {
                          do
                          {
                            v793 = *((_QWORD *)v789 - 1);
                            v789 -= 8;
                            v792 = v793;
                            if (v793 >= *(_QWORD *)((char *)v788 + v787))
                              v792 = *(_QWORD *)((char *)v788 + v787);
                            *((_QWORD *)v788 - 1) = v792;
                            v788 -= 2;
                            --v791;
                          }
                          while (v791);
                        }
                      }
                    }
                    v767 = &v788[2 * v786];
                    v766 = (uint64_t *)&v789[8 * v786];
                    ++v784;
                  }
                  while (v784 != (_DWORD)v783);
                }
              }
              else if ((int)v783 >= 1)
              {
                v1522 = 0;
                v1523 = (v780 - 1) * (int)v782;
                v1524 = v780 * (int)v782;
                v1525 = 8 * (int)v782 - 8;
                do
                {
                  v1526 = &v767[2 * v1523];
                  if ((int)v782 >= 1)
                    memset_pattern16(v1526, &unk_2425A2990, 8 * ((int)v782 - (unint64_t)(((int)v782 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                  v1527 = &v766[v1523];
                  if (v781 > 1)
                  {
                    for (i80 = 1; i80 != v781; ++i80)
                    {
                      v1529 = v782;
                      if ((int)v782 >= 1)
                      {
                        do
                        {
                          v1530 = *(uint64_t *)((char *)v1527 + v1525);
                          if (v1530 >= *(_QWORD *)((char *)v1526 + v1525))
                            v1530 = *(_QWORD *)((char *)v1526 + v1525);
                          *((_QWORD *)v1526 - 1) = v1530;
                          v1526 -= 2;
                          --v1527;
                          --v1529;
                        }
                        while (v1529);
                      }
                    }
                  }
                  v767 = &v1526[2 * v1524];
                  v766 = &v1527[v1524];
                  ++v1522;
                }
                while (v1522 != (_DWORD)v783);
              }
            }
            else if (v51)
            {
              if ((int)v783 >= 1)
              {
                v1144 = 0;
                do
                {
                  if ((_DWORD)v782)
                    memmove(v767, v766, 8 * (int)v782);
                  v766 += (int)v782;
                  v767 += 2 * (int)v782;
                  if (v781 >= 2)
                  {
                    for (i81 = 1; i81 != v781; ++i81)
                    {
                      v1146 = v782;
                      if ((int)v782 >= 1)
                      {
                        do
                        {
                          v1148 = *v766++;
                          v1147 = v1148;
                          if (v1148 >= *(_QWORD *)&v767[-2 * (int)v782])
                            v1147 = *(_QWORD *)&v767[-2 * (int)v782];
                          *(_QWORD *)v767 = v1147;
                          v767 += 2;
                          --v1146;
                        }
                        while (v1146);
                      }
                    }
                  }
                  ++v1144;
                }
                while (v1144 != (_DWORD)v783);
              }
            }
            else if ((int)v783 >= 1)
            {
              v1782 = 0;
              do
              {
                if ((int)v782 >= 1)
                  memset_pattern16(v767, &unk_2425A2990, 8 * ((int)v782 - (unint64_t)(((int)v782 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                v767 += 2 * (int)v782;
                v766 += (int)v782;
                if (v781 > 1)
                {
                  for (i82 = 1; i82 != v781; ++i82)
                  {
                    v1784 = v782;
                    if ((int)v782 >= 1)
                    {
                      do
                      {
                        v1785 = v766[-(int)v782];
                        if (v1785 >= *(_QWORD *)&v767[-2 * (int)v782])
                          v1785 = *(_QWORD *)&v767[-2 * (int)v782];
                        *(_QWORD *)v767 = v1785;
                        v767 += 2;
                        ++v766;
                        --v1784;
                      }
                      while (v1784);
                    }
                  }
                }
                ++v1782;
              }
              while (v1782 != (_DWORD)v783);
            }
          }
          goto LABEL_2618;
        case 2:
          v107 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v107, (uint64_t)&v1835);
          v108 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v109 = 4;
            v108 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_374;
            v109 = 5;
          }
          (*((void (**)(void))*v108 + v109))();
LABEL_374:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v399 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
          v400 = *(char **)(v1833[0] + 152);
          v401 = (*a3)[19];
          v402 = *(_QWORD *)(v1833[0] + 48);
          v403 = v402 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v49);
          if (v399 == 1)
          {
            v404 = mlx::core::array::shape((mlx::core::array *)v1833, v49);
            if (v50)
            {
              if (v51)
              {
                if ((int)v403 >= 1)
                {
                  v405 = 0;
                  v406 = v404 - 1;
                  do
                  {
                    v407 = &v401[2 * v406];
                    v408 = &v400[8 * v406];
                    v409 = *(_QWORD *)v408;
                    *(_QWORD *)v407 = *(_QWORD *)v408;
                    v410 = v404 - 1;
                    if (v404 >= 2)
                    {
                      do
                      {
                        v411 = *((_QWORD *)v408 - 1);
                        v408 -= 8;
                        v409 += v411;
                        *((_QWORD *)v407 - 1) = v409;
                        v407 -= 2;
                        --v410;
                      }
                      while (v410);
                    }
                    v401 = &v407[2 * v404];
                    v400 = &v408[8 * v404];
                    ++v405;
                  }
                  while (v405 != (_DWORD)v403);
                }
              }
              else if ((int)v403 >= 1)
              {
                v1309 = 0;
                v1310 = v404 - 1;
                do
                {
                  v1311 = &v401[2 * v1310];
                  v1312 = &v400[8 * v1310];
                  *(_QWORD *)v1311 = 0;
                  if (v404 >= 2)
                  {
                    v1313 = 0;
                    v1314 = v404 - 1;
                    do
                    {
                      v1315 = *(_QWORD *)v1312;
                      v1312 -= 8;
                      v1313 += v1315;
                      *((_QWORD *)v1311 - 1) = v1313;
                      v1311 -= 2;
                      --v1314;
                    }
                    while (v1314);
                  }
                  v401 = &v1311[2 * v404];
                  v400 = &v1312[8 * v404];
                  ++v1309;
                }
                while (v1309 != (_DWORD)v403);
              }
            }
            else if (v51)
            {
              if ((int)v403 >= 1)
              {
                v1017 = 0;
                do
                {
                  v1018 = *(_QWORD *)v400;
                  *(_QWORD *)v401 = *(_QWORD *)v400;
                  v1019 = v404 - 1;
                  if (v404 >= 2)
                  {
                    do
                    {
                      v1020 = *((_QWORD *)v400 + 1);
                      v400 += 8;
                      v1018 += v1020;
                      *((_QWORD *)v401 + 1) = v1018;
                      v401 += 2;
                      --v1019;
                    }
                    while (v1019);
                  }
                  v401 += 2;
                  v400 += 8;
                  ++v1017;
                }
                while (v1017 != (_DWORD)v403);
              }
            }
            else if ((int)v403 >= 1)
            {
              v1688 = 0;
              do
              {
                *(_QWORD *)v401 = 0;
                if (v404 >= 2)
                {
                  v1689 = 0;
                  v1690 = v404 - 1;
                  do
                  {
                    v1691 = *(_QWORD *)v400;
                    v400 += 8;
                    v1689 += v1691;
                    *((_QWORD *)v401 + 1) = v1689;
                    v401 += 2;
                    --v1690;
                  }
                  while (v1690);
                }
                v401 += 2;
                v400 += 8;
                ++v1688;
              }
              while (v1688 != (_DWORD)v403);
            }
          }
          else
          {
            v412 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
            v413 = mlx::core::array::shape((mlx::core::array *)v1833, v49);
            v414 = v413;
            v415 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
            v416 = v403 / v412;
            if (v50)
            {
              if (v51)
              {
                if ((int)v416 >= 1)
                {
                  v417 = 0;
                  v418 = (v413 - 1) * (int)v415;
                  v419 = v413 * (int)v415;
                  do
                  {
                    v420 = &v401[2 * v418];
                    v421 = &v400[8 * v418];
                    if ((_DWORD)v415)
                      memmove(v420, v421, 8 * (int)v415);
                    if (v414 >= 2)
                    {
                      for (i83 = 1; i83 != v414; ++i83)
                      {
                        v423 = v415;
                        if ((int)v415 >= 1)
                        {
                          do
                          {
                            v424 = *((_QWORD *)v421 - 1);
                            v421 -= 8;
                            *((_QWORD *)v420 - 1) = v424 + *(_QWORD *)&v420[2 * (int)v415 - 2];
                            v420 -= 2;
                            --v423;
                          }
                          while (v423);
                        }
                      }
                    }
                    v401 = &v420[2 * v419];
                    v400 = &v421[8 * v419];
                    ++v417;
                  }
                  while (v417 != (_DWORD)v416);
                }
              }
              else if ((int)v416 >= 1)
              {
                v1316 = 0;
                v1317 = (v413 - 1) * (int)v415;
                v1318 = v413 * (int)v415;
                do
                {
                  v1319 = &v401[2 * v1317];
                  if ((int)v415 >= 1)
                    bzero(v1319, 8 * ((int)v415 - (unint64_t)(((int)v415 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                  v1320 = &v400[8 * v1317];
                  if (v414 > 1)
                  {
                    for (i84 = 1; i84 != v414; ++i84)
                    {
                      v1322 = v415;
                      if ((int)v415 >= 1)
                      {
                        do
                        {
                          *((_QWORD *)v1319 - 1) = *(_QWORD *)&v1320[8 * (int)v415 - 8]
                                                 + *(_QWORD *)&v1319[2 * (int)v415 - 2];
                          v1319 -= 2;
                          v1320 -= 8;
                          --v1322;
                        }
                        while (v1322);
                      }
                    }
                  }
                  v401 = &v1319[2 * v1318];
                  v400 = &v1320[8 * v1318];
                  ++v1316;
                }
                while (v1316 != (_DWORD)v416);
              }
            }
            else if (v51)
            {
              if ((int)v416 >= 1)
              {
                v1021 = 0;
                do
                {
                  if ((_DWORD)v415)
                    memmove(v401, v400, 8 * (int)v415);
                  v400 += 8 * (int)v415;
                  v401 += 2 * (int)v415;
                  if (v414 >= 2)
                  {
                    for (i85 = 1; i85 != v414; ++i85)
                    {
                      v1023 = v415;
                      if ((int)v415 >= 1)
                      {
                        do
                        {
                          v1024 = *(_QWORD *)v400;
                          v400 += 8;
                          *(_QWORD *)v401 = v1024 + *(_QWORD *)&v401[-2 * (int)v415];
                          v401 += 2;
                          --v1023;
                        }
                        while (v1023);
                      }
                    }
                  }
                  ++v1021;
                }
                while (v1021 != (_DWORD)v416);
              }
            }
            else if ((int)v416 >= 1)
            {
              v1692 = 0;
              do
              {
                if ((int)v415 >= 1)
                  bzero(v401, 8 * ((int)v415 - (unint64_t)(((int)v415 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                v401 += 2 * (int)v415;
                v400 += 8 * (int)v415;
                if (v414 > 1)
                {
                  for (i86 = 1; i86 != v414; ++i86)
                  {
                    v1694 = v415;
                    if ((int)v415 >= 1)
                    {
                      do
                      {
                        *(_QWORD *)v401 = *(_QWORD *)&v400[-8 * (int)v415] + *(_QWORD *)&v401[-2 * (int)v415];
                        v401 += 2;
                        v400 += 8;
                        --v1694;
                      }
                      while (v1694);
                    }
                  }
                }
                ++v1692;
              }
              while (v1692 != (_DWORD)v416);
            }
          }
          goto LABEL_2618;
        case 3:
          v116 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v116, (uint64_t)&v1835);
          v117 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v118 = 4;
            v117 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_424;
            v118 = 5;
          }
          (*((void (**)(void))*v117 + v118))();
LABEL_424:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v451 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
          v452 = *(char **)(v1833[0] + 152);
          v453 = (*a3)[19];
          v454 = *(_QWORD *)(v1833[0] + 48);
          v455 = v454 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v49);
          if (v451 == 1)
          {
            v456 = mlx::core::array::shape((mlx::core::array *)v1833, v49);
            if (v50)
            {
              if (v51)
              {
                if ((int)v455 >= 1)
                {
                  v457 = 0;
                  v458 = v456 - 1;
                  do
                  {
                    v459 = &v453[2 * v458];
                    v460 = &v452[8 * v458];
                    v461 = *(_QWORD *)v460;
                    *(_QWORD *)v459 = *(_QWORD *)v460;
                    v462 = v456 - 1;
                    if (v456 >= 2)
                    {
                      do
                      {
                        v463 = *((_QWORD *)v460 - 1);
                        v460 -= 8;
                        v461 *= v463;
                        *((_QWORD *)v459 - 1) = v461;
                        v459 -= 2;
                        --v462;
                      }
                      while (v462);
                    }
                    v453 = &v459[2 * v456];
                    v452 = &v460[8 * v456];
                    ++v457;
                  }
                  while (v457 != (_DWORD)v455);
                }
              }
              else if ((int)v455 >= 1)
              {
                v1337 = 0;
                v1338 = v456 - 1;
                do
                {
                  v1339 = &v453[2 * v1338];
                  v1340 = &v452[8 * v1338];
                  *(_QWORD *)v1339 = 1;
                  if (v456 >= 2)
                  {
                    v1341 = v456 - 1;
                    v1342 = 1;
                    do
                    {
                      v1343 = *(_QWORD *)v1340;
                      v1340 -= 8;
                      v1342 *= v1343;
                      *((_QWORD *)v1339 - 1) = v1342;
                      v1339 -= 2;
                      --v1341;
                    }
                    while (v1341);
                  }
                  v453 = &v1339[2 * v456];
                  v452 = &v1340[8 * v456];
                  ++v1337;
                }
                while (v1337 != (_DWORD)v455);
              }
            }
            else if (v51)
            {
              if ((int)v455 >= 1)
              {
                v1033 = 0;
                do
                {
                  v1034 = *(_QWORD *)v452;
                  *(_QWORD *)v453 = *(_QWORD *)v452;
                  v1035 = v456 - 1;
                  if (v456 >= 2)
                  {
                    do
                    {
                      v1036 = *((_QWORD *)v452 + 1);
                      v452 += 8;
                      v1034 *= v1036;
                      *((_QWORD *)v453 + 1) = v1034;
                      v453 += 2;
                      --v1035;
                    }
                    while (v1035);
                  }
                  v453 += 2;
                  v452 += 8;
                  ++v1033;
                }
                while (v1033 != (_DWORD)v455);
              }
            }
            else if ((int)v455 >= 1)
            {
              v1702 = 0;
              do
              {
                *(_QWORD *)v453 = 1;
                if (v456 >= 2)
                {
                  v1703 = v456 - 1;
                  v1704 = 1;
                  do
                  {
                    v1705 = *(_QWORD *)v452;
                    v452 += 8;
                    v1704 *= v1705;
                    *((_QWORD *)v453 + 1) = v1704;
                    v453 += 2;
                    --v1703;
                  }
                  while (v1703);
                }
                v453 += 2;
                v452 += 8;
                ++v1702;
              }
              while (v1702 != (_DWORD)v455);
            }
          }
          else
          {
            v464 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
            v465 = mlx::core::array::shape((mlx::core::array *)v1833, v49);
            v466 = v465;
            v467 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v49);
            v468 = v455 / v464;
            if (v50)
            {
              if (v51)
              {
                if ((int)v468 >= 1)
                {
                  v469 = 0;
                  v470 = (v465 - 1) * (int)v467;
                  v471 = v465 * (int)v467;
                  do
                  {
                    v472 = &v453[2 * v470];
                    v473 = &v452[8 * v470];
                    if ((_DWORD)v467)
                      memmove(v472, v473, 8 * (int)v467);
                    if (v466 >= 2)
                    {
                      for (i87 = 1; i87 != v466; ++i87)
                      {
                        v475 = v467;
                        if ((int)v467 >= 1)
                        {
                          do
                          {
                            v476 = *((_QWORD *)v473 - 1);
                            v473 -= 8;
                            *((_QWORD *)v472 - 1) = v476 * *(_QWORD *)&v472[2 * (int)v467 - 2];
                            v472 -= 2;
                            --v475;
                          }
                          while (v475);
                        }
                      }
                    }
                    v453 = &v472[2 * v471];
                    v452 = &v473[8 * v471];
                    ++v469;
                  }
                  while (v469 != (_DWORD)v468);
                }
              }
              else if ((int)v468 >= 1)
              {
                v1344 = 0;
                v1345 = (v465 - 1) * (int)v467;
                v1346 = v465 * (int)v467;
                do
                {
                  v1347 = &v453[2 * v1345];
                  if ((int)v467 >= 1)
                    memset_pattern16(v1347, &unk_2425A2970, 8 * ((int)v467 - (unint64_t)(((int)v467 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                  v1348 = &v452[8 * v1345];
                  if (v466 > 1)
                  {
                    for (i88 = 1; i88 != v466; ++i88)
                    {
                      v1350 = v467;
                      if ((int)v467 >= 1)
                      {
                        do
                        {
                          *((_QWORD *)v1347 - 1) = *(_QWORD *)&v1348[8 * (int)v467 - 8]
                                                 * *(_QWORD *)&v1347[2 * (int)v467 - 2];
                          v1347 -= 2;
                          v1348 -= 8;
                          --v1350;
                        }
                        while (v1350);
                      }
                    }
                  }
                  v453 = &v1347[2 * v1346];
                  v452 = &v1348[8 * v1346];
                  ++v1344;
                }
                while (v1344 != (_DWORD)v468);
              }
            }
            else if (v51)
            {
              if ((int)v468 >= 1)
              {
                v1037 = 0;
                do
                {
                  if ((_DWORD)v467)
                    memmove(v453, v452, 8 * (int)v467);
                  v452 += 8 * (int)v467;
                  v453 += 2 * (int)v467;
                  if (v466 >= 2)
                  {
                    for (i89 = 1; i89 != v466; ++i89)
                    {
                      v1039 = v467;
                      if ((int)v467 >= 1)
                      {
                        do
                        {
                          v1040 = *(_QWORD *)v452;
                          v452 += 8;
                          *(_QWORD *)v453 = v1040 * *(_QWORD *)&v453[-2 * (int)v467];
                          v453 += 2;
                          --v1039;
                        }
                        while (v1039);
                      }
                    }
                  }
                  ++v1037;
                }
                while (v1037 != (_DWORD)v468);
              }
            }
            else if ((int)v468 >= 1)
            {
              v1706 = 0;
              do
              {
                if ((int)v467 >= 1)
                  memset_pattern16(v453, &unk_2425A2970, 8 * ((int)v467 - (unint64_t)(((int)v467 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
                v453 += 2 * (int)v467;
                v452 += 8 * (int)v467;
                if (v466 > 1)
                {
                  for (i90 = 1; i90 != v466; ++i90)
                  {
                    v1708 = v467;
                    if ((int)v467 >= 1)
                    {
                      do
                      {
                        *(_QWORD *)v453 = *(_QWORD *)&v452[-8 * (int)v467] * *(_QWORD *)&v453[-2 * (int)v467];
                        v453 += 2;
                        v452 += 8;
                        --v1708;
                      }
                      while (v1708);
                    }
                  }
                }
                ++v1706;
              }
              while (v1706 != (_DWORD)v468);
            }
          }
          break;
        default:
          goto LABEL_2618;
      }
      goto LABEL_2618;
    case 6:
      v55 = *(int *)(a1 + 24);
      v56 = *(unsigned __int8 *)(a1 + 28);
      v57 = *(unsigned __int8 *)(a1 + 29);
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          v1835 = v15;
          if (mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating))
            *(float *)&v58 = -INFINITY;
          else
            *(float *)&v58 = 3.4028e38;
          v59 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                            * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v59, (uint64_t)&v1835);
          v60 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v61 = 4;
            v60 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_764;
            v61 = 5;
          }
          (*((void (**)(void))*v60 + v61))();
LABEL_764:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v794 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
          v795 = *(float **)(v1833[0] + 152);
          v796 = (float *)(*a3)[19];
          v797 = *(_QWORD *)(v1833[0] + 48);
          v798 = v797 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v55);
          if (v794 == 1)
          {
            v799 = mlx::core::array::shape((mlx::core::array *)v1833, v55);
            if (v56)
            {
              if (v57)
              {
                if ((int)v798 >= 1)
                {
                  v800 = 0;
                  v801 = v799 - 1;
                  do
                  {
                    v802 = &v796[v801];
                    v803 = &v795[v801];
                    v804 = *v803;
                    *v802 = *v803;
                    v805 = v799 - 1;
                    if (v799 >= 2)
                    {
                      do
                      {
                        v806 = *--v803;
                        v807 = v806;
                        if (v806 >= v804)
                          v804 = v807;
                        *--v802 = v804;
                        --v805;
                      }
                      while (v805);
                    }
                    v796 = &v802[v799];
                    v795 = &v803[v799];
                    ++v800;
                  }
                  while (v800 != (_DWORD)v798);
                }
              }
              else if ((int)v798 >= 1)
              {
                v1539 = 0;
                v1540 = v799 - 1;
                do
                {
                  v1541 = &v796[v1540];
                  v1542 = &v795[v1540];
                  *v1541 = *(float *)&v58;
                  v1543 = v799 - 1;
                  v1544 = *(float *)&v58;
                  if (v799 >= 2)
                  {
                    do
                    {
                      v1545 = *v1542--;
                      v1546 = v1545;
                      if (v1545 >= v1544)
                        v1544 = v1546;
                      *--v1541 = v1544;
                      --v1543;
                    }
                    while (v1543);
                  }
                  v796 = &v1541[v799];
                  v795 = &v1542[v799];
                  ++v1539;
                }
                while (v1539 != (_DWORD)v798);
              }
            }
            else if (v57)
            {
              if ((int)v798 >= 1)
              {
                v1149 = 0;
                do
                {
                  v1150 = *v795;
                  *v796 = *v795;
                  v1151 = v799 - 1;
                  if (v799 >= 2)
                  {
                    do
                    {
                      v1152 = v795[1];
                      ++v795;
                      v1153 = v1152;
                      if (v1152 >= v1150)
                        v1150 = v1153;
                      v796[1] = v1150;
                      ++v796;
                      --v1151;
                    }
                    while (v1151);
                  }
                  ++v796;
                  ++v795;
                  ++v1149;
                }
                while (v1149 != (_DWORD)v798);
              }
            }
            else if ((int)v798 >= 1)
            {
              v1786 = 0;
              do
              {
                *v796 = *(float *)&v58;
                v1787 = v799 - 1;
                v1788 = *(float *)&v58;
                if (v799 >= 2)
                {
                  do
                  {
                    v1789 = *v795++;
                    v1790 = v1789;
                    if (v1789 >= v1788)
                      v1788 = v1790;
                    v796[1] = v1788;
                    ++v796;
                    --v1787;
                  }
                  while (v1787);
                }
                ++v796;
                ++v795;
                ++v1786;
              }
              while (v1786 != (_DWORD)v798);
            }
          }
          else
          {
            v808 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
            v809 = mlx::core::array::shape((mlx::core::array *)v1833, v55);
            v810 = v809;
            v811 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
            v812 = v798 / v808;
            if (v56)
            {
              if (v57)
              {
                if ((int)v812 >= 1)
                {
                  v813 = 0;
                  v814 = (v809 - 1) * (int)v811;
                  v815 = v809 * (int)v811;
                  v816 = 4 * (int)v811 - 4;
                  do
                  {
                    v817 = &v796[v814];
                    v818 = &v795[v814];
                    if ((_DWORD)v811)
                      memmove(v817, v818, 4 * (int)v811);
                    if (v810 >= 2)
                    {
                      for (i91 = 1; i91 != v810; ++i91)
                      {
                        v820 = v811;
                        if ((int)v811 >= 1)
                        {
                          do
                          {
                            v821 = *--v818;
                            v822 = v821;
                            if (v821 < *(float *)((char *)v817 + v816))
                              v822 = *(float *)((char *)v817 + v816);
                            *--v817 = v822;
                            --v820;
                          }
                          while (v820);
                        }
                      }
                    }
                    v796 = &v817[v815];
                    v795 = &v818[v815];
                    ++v813;
                  }
                  while (v813 != (_DWORD)v812);
                }
              }
              else if ((int)v812 >= 1)
              {
                v1547 = 0;
                v1548 = (v809 - 1) * (int)v811;
                v1549 = v809 * (int)v811;
                v1550 = 4 * (int)v811 - 4;
                do
                {
                  v1551 = &v796[v1548];
                  if ((int)v811 >= 1)
                  {
                    v1552 = ((int)v811 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                    v1553 = &v796[v1548];
                    do
                    {
                      *v1553++ = *(float *)&v58;
                      --v1552;
                    }
                    while (v1552 > 1);
                  }
                  v1554 = &v795[v1548];
                  if (v809 > 1)
                  {
                    for (i92 = 1; i92 != v809; ++i92)
                    {
                      v1556 = v811;
                      if ((int)v811 >= 1)
                      {
                        do
                        {
                          v1557 = *(float *)((char *)v1554 + v1550);
                          if (v1557 < *(float *)((char *)v1551 + v1550))
                            v1557 = *(float *)((char *)v1551 + v1550);
                          *--v1551 = v1557;
                          --v1554;
                          --v1556;
                        }
                        while (v1556);
                      }
                    }
                  }
                  v796 = &v1551[v1549];
                  v795 = &v1554[v1549];
                  ++v1547;
                }
                while (v1547 != (_DWORD)v812);
              }
            }
            else if (v57)
            {
              if ((int)v812 >= 1)
              {
                v1154 = 0;
                do
                {
                  if ((_DWORD)v811)
                    memmove(v796, v795, 4 * (int)v811);
                  v795 += (int)v811;
                  v796 += (int)v811;
                  if (v810 >= 2)
                  {
                    for (i93 = 1; i93 != v810; ++i93)
                    {
                      v1156 = v811;
                      if ((int)v811 >= 1)
                      {
                        do
                        {
                          v1157 = *v795++;
                          v1158 = v1157;
                          if (v1157 < v796[-(int)v811])
                            v1158 = v796[-(int)v811];
                          *v796++ = v1158;
                          --v1156;
                        }
                        while (v1156);
                      }
                    }
                  }
                  ++v1154;
                }
                while (v1154 != (_DWORD)v812);
              }
            }
            else if ((int)v812 >= 1)
            {
              v1791 = 0;
              do
              {
                if ((int)v811 >= 1)
                {
                  v1792 = ((int)v811 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                  v1793 = v796;
                  do
                  {
                    *v1793++ = *(float *)&v58;
                    --v1792;
                  }
                  while (v1792 > 1);
                }
                v796 += (int)v811;
                v795 += (int)v811;
                if (v809 > 1)
                {
                  for (i94 = 1; i94 != v809; ++i94)
                  {
                    v1795 = v811;
                    if ((int)v811 >= 1)
                    {
                      do
                      {
                        v1796 = v795[-(int)v811];
                        if (v1796 < v796[-(int)v811])
                          v1796 = v796[-(int)v811];
                        *v796++ = v1796;
                        ++v795;
                        --v1795;
                      }
                      while (v1795);
                    }
                  }
                }
                ++v1791;
              }
              while (v1791 != (_DWORD)v812);
            }
          }
          goto LABEL_2618;
        case 1:
          v1835 = v15;
          if (mlx::core::issubdtype((unsigned int *)&v1835, (unsigned int *)&mlx::core::floating))
            *(float *)&v125 = INFINITY;
          else
            *(float *)&v125 = 3.4028e38;
          v126 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v126, (uint64_t)&v1835);
          v127 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v128 = 4;
            v127 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_793;
            v128 = 5;
          }
          (*((void (**)(void))*v127 + v128))();
LABEL_793:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v823 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
          v824 = *(float **)(v1833[0] + 152);
          v825 = (float *)(*a3)[19];
          v826 = *(_QWORD *)(v1833[0] + 48);
          v827 = v826 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v55);
          if (v823 == 1)
          {
            v828 = mlx::core::array::shape((mlx::core::array *)v1833, v55);
            if (v56)
            {
              if (v57)
              {
                if ((int)v827 >= 1)
                {
                  v829 = 0;
                  v830 = v828 - 1;
                  do
                  {
                    v831 = &v825[v830];
                    v832 = &v824[v830];
                    v833 = *v832;
                    *v831 = *v832;
                    v834 = v828 - 1;
                    if (v828 >= 2)
                    {
                      do
                      {
                        v835 = *--v832;
                        v836 = v835;
                        if (v835 < v833)
                          v833 = v836;
                        *--v831 = v833;
                        --v834;
                      }
                      while (v834);
                    }
                    v825 = &v831[v828];
                    v824 = &v832[v828];
                    ++v829;
                  }
                  while (v829 != (_DWORD)v827);
                }
              }
              else if ((int)v827 >= 1)
              {
                v1558 = 0;
                v1559 = v828 - 1;
                do
                {
                  v1560 = &v825[v1559];
                  v1561 = &v824[v1559];
                  *v1560 = *(float *)&v125;
                  v1562 = v828 - 1;
                  v1563 = *(float *)&v125;
                  if (v828 >= 2)
                  {
                    do
                    {
                      v1564 = *v1561--;
                      v1565 = v1564;
                      if (v1564 < v1563)
                        v1563 = v1565;
                      *--v1560 = v1563;
                      --v1562;
                    }
                    while (v1562);
                  }
                  v825 = &v1560[v828];
                  v824 = &v1561[v828];
                  ++v1558;
                }
                while (v1558 != (_DWORD)v827);
              }
            }
            else if (v57)
            {
              if ((int)v827 >= 1)
              {
                v1159 = 0;
                do
                {
                  v1160 = *v824;
                  *v825 = *v824;
                  v1161 = v828 - 1;
                  if (v828 >= 2)
                  {
                    do
                    {
                      v1162 = v824[1];
                      ++v824;
                      v1163 = v1162;
                      if (v1162 < v1160)
                        v1160 = v1163;
                      v825[1] = v1160;
                      ++v825;
                      --v1161;
                    }
                    while (v1161);
                  }
                  ++v825;
                  ++v824;
                  ++v1159;
                }
                while (v1159 != (_DWORD)v827);
              }
            }
            else if ((int)v827 >= 1)
            {
              v1797 = 0;
              do
              {
                *v825 = *(float *)&v125;
                v1798 = v828 - 1;
                v1799 = *(float *)&v125;
                if (v828 >= 2)
                {
                  do
                  {
                    v1800 = *v824++;
                    v1801 = v1800;
                    if (v1800 < v1799)
                      v1799 = v1801;
                    v825[1] = v1799;
                    ++v825;
                    --v1798;
                  }
                  while (v1798);
                }
                ++v825;
                ++v824;
                ++v1797;
              }
              while (v1797 != (_DWORD)v827);
            }
          }
          else
          {
            v837 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
            v838 = mlx::core::array::shape((mlx::core::array *)v1833, v55);
            v839 = v838;
            v840 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
            v841 = v827 / v837;
            if (v56)
            {
              if (v57)
              {
                if ((int)v841 >= 1)
                {
                  v842 = 0;
                  v843 = (v838 - 1) * (int)v840;
                  v844 = v838 * (int)v840;
                  v845 = 4 * (int)v840 - 4;
                  do
                  {
                    v846 = &v825[v843];
                    v847 = &v824[v843];
                    if ((_DWORD)v840)
                      memmove(v846, v847, 4 * (int)v840);
                    if (v839 >= 2)
                    {
                      for (i95 = 1; i95 != v839; ++i95)
                      {
                        v849 = v840;
                        if ((int)v840 >= 1)
                        {
                          do
                          {
                            v850 = *--v847;
                            v851 = v850;
                            if (v850 >= *(float *)((char *)v846 + v845))
                              v851 = *(float *)((char *)v846 + v845);
                            *--v846 = v851;
                            --v849;
                          }
                          while (v849);
                        }
                      }
                    }
                    v825 = &v846[v844];
                    v824 = &v847[v844];
                    ++v842;
                  }
                  while (v842 != (_DWORD)v841);
                }
              }
              else if ((int)v841 >= 1)
              {
                v1566 = 0;
                v1567 = (v838 - 1) * (int)v840;
                v1568 = v838 * (int)v840;
                v1569 = 4 * (int)v840 - 4;
                do
                {
                  v1570 = &v825[v1567];
                  if ((int)v840 >= 1)
                  {
                    v1571 = ((int)v840 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                    v1572 = &v825[v1567];
                    do
                    {
                      *v1572++ = *(float *)&v125;
                      --v1571;
                    }
                    while (v1571 > 1);
                  }
                  v1573 = &v824[v1567];
                  if (v838 > 1)
                  {
                    for (i96 = 1; i96 != v838; ++i96)
                    {
                      v1575 = v840;
                      if ((int)v840 >= 1)
                      {
                        do
                        {
                          v1576 = *(float *)((char *)v1573 + v1569);
                          if (v1576 >= *(float *)((char *)v1570 + v1569))
                            v1576 = *(float *)((char *)v1570 + v1569);
                          *--v1570 = v1576;
                          --v1573;
                          --v1575;
                        }
                        while (v1575);
                      }
                    }
                  }
                  v825 = &v1570[v1568];
                  v824 = &v1573[v1568];
                  ++v1566;
                }
                while (v1566 != (_DWORD)v841);
              }
            }
            else if (v57)
            {
              if ((int)v841 >= 1)
              {
                v1164 = 0;
                do
                {
                  if ((_DWORD)v840)
                    memmove(v825, v824, 4 * (int)v840);
                  v824 += (int)v840;
                  v825 += (int)v840;
                  if (v839 >= 2)
                  {
                    for (i97 = 1; i97 != v839; ++i97)
                    {
                      v1166 = v840;
                      if ((int)v840 >= 1)
                      {
                        do
                        {
                          v1167 = *v824++;
                          v1168 = v1167;
                          if (v1167 >= v825[-(int)v840])
                            v1168 = v825[-(int)v840];
                          *v825++ = v1168;
                          --v1166;
                        }
                        while (v1166);
                      }
                    }
                  }
                  ++v1164;
                }
                while (v1164 != (_DWORD)v841);
              }
            }
            else if ((int)v841 >= 1)
            {
              v1802 = 0;
              do
              {
                if ((int)v840 >= 1)
                {
                  v1803 = ((int)v840 & 0x3FFFFFFFFFFFFFFFLL) + 1;
                  v1804 = v825;
                  do
                  {
                    *v1804++ = *(float *)&v125;
                    --v1803;
                  }
                  while (v1803 > 1);
                }
                v825 += (int)v840;
                v824 += (int)v840;
                if (v838 > 1)
                {
                  for (i98 = 1; i98 != v838; ++i98)
                  {
                    v1806 = v840;
                    if ((int)v840 >= 1)
                    {
                      do
                      {
                        v1807 = v824[-(int)v840];
                        if (v1807 >= v825[-(int)v840])
                          v1807 = v825[-(int)v840];
                        *v825++ = v1807;
                        ++v824;
                        --v1806;
                      }
                      while (v1806);
                    }
                  }
                }
                ++v1802;
              }
              while (v1802 != (_DWORD)v841);
            }
          }
          goto LABEL_2618;
        case 2:
          v113 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v113, (uint64_t)&v1835);
          v114 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v115 = 4;
            v114 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_399;
            v115 = 5;
          }
          (*((void (**)(void))*v114 + v115))();
LABEL_399:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v425 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
          v426 = *(float **)(v1833[0] + 152);
          v427 = (float *)(*a3)[19];
          v428 = *(_QWORD *)(v1833[0] + 48);
          v429 = v428 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v55);
          if (v425 == 1)
          {
            v430 = mlx::core::array::shape((mlx::core::array *)v1833, v55);
            if (v56)
            {
              if (v57)
              {
                if ((int)v429 >= 1)
                {
                  v431 = 0;
                  v432 = v430 - 1;
                  do
                  {
                    v433 = &v427[v432];
                    v434 = &v426[v432];
                    v435 = *v434;
                    *v433 = *v434;
                    v436 = v430 - 1;
                    if (v430 >= 2)
                    {
                      do
                      {
                        v437 = *--v434;
                        v435 = v435 + v437;
                        *--v433 = v435;
                        --v436;
                      }
                      while (v436);
                    }
                    v427 = &v433[v430];
                    v426 = &v434[v430];
                    ++v431;
                  }
                  while (v431 != (_DWORD)v429);
                }
              }
              else if ((int)v429 >= 1)
              {
                v1323 = 0;
                v1324 = v430 - 1;
                do
                {
                  v1325 = &v427[v1324];
                  v1326 = &v426[v1324];
                  *v1325 = 0.0;
                  if (v430 >= 2)
                  {
                    v1327 = 0.0;
                    v1328 = v430 - 1;
                    do
                    {
                      v1329 = *v1326--;
                      v1327 = v1327 + v1329;
                      *--v1325 = v1327;
                      --v1328;
                    }
                    while (v1328);
                  }
                  v427 = &v1325[v430];
                  v426 = &v1326[v430];
                  ++v1323;
                }
                while (v1323 != (_DWORD)v429);
              }
            }
            else if (v57)
            {
              if ((int)v429 >= 1)
              {
                v1025 = 0;
                do
                {
                  v1026 = *v426;
                  *v427 = *v426;
                  v1027 = v430 - 1;
                  if (v430 >= 2)
                  {
                    do
                    {
                      v1028 = v426[1];
                      ++v426;
                      v1026 = v1026 + v1028;
                      v427[1] = v1026;
                      ++v427;
                      --v1027;
                    }
                    while (v1027);
                  }
                  ++v427;
                  ++v426;
                  ++v1025;
                }
                while (v1025 != (_DWORD)v429);
              }
            }
            else if ((int)v429 >= 1)
            {
              v1695 = 0;
              do
              {
                *v427 = 0.0;
                if (v430 >= 2)
                {
                  v1696 = 0.0;
                  v1697 = v430 - 1;
                  do
                  {
                    v1698 = *v426++;
                    v1696 = v1696 + v1698;
                    v427[1] = v1696;
                    ++v427;
                    --v1697;
                  }
                  while (v1697);
                }
                ++v427;
                ++v426;
                ++v1695;
              }
              while (v1695 != (_DWORD)v429);
            }
          }
          else
          {
            v438 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
            v439 = mlx::core::array::shape((mlx::core::array *)v1833, v55);
            v440 = v439;
            v441 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
            v442 = v429 / v438;
            if (v56)
            {
              if (v57)
              {
                if ((int)v442 >= 1)
                {
                  v443 = 0;
                  v444 = (v439 - 1) * (int)v441;
                  v445 = v439 * (int)v441;
                  do
                  {
                    v446 = &v427[v444];
                    v447 = &v426[v444];
                    if ((_DWORD)v441)
                      memmove(v446, v447, 4 * (int)v441);
                    if (v440 >= 2)
                    {
                      for (i99 = 1; i99 != v440; ++i99)
                      {
                        v449 = v441;
                        if ((int)v441 >= 1)
                        {
                          do
                          {
                            v450 = *--v447;
                            *(v446 - 1) = v446[(int)v441 - 1] + v450;
                            --v446;
                            --v449;
                          }
                          while (v449);
                        }
                      }
                    }
                    v427 = &v446[v445];
                    v426 = &v447[v445];
                    ++v443;
                  }
                  while (v443 != (_DWORD)v442);
                }
              }
              else if ((int)v442 >= 1)
              {
                v1330 = 0;
                v1331 = (v439 - 1) * (int)v441;
                v1332 = v439 * (int)v441;
                do
                {
                  v1333 = &v427[v1331];
                  if ((int)v441 >= 1)
                    bzero(v1333, 4 * ((int)v441 - (unint64_t)(((int)v441 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1334 = &v426[v1331];
                  if (v440 > 1)
                  {
                    for (i100 = 1; i100 != v440; ++i100)
                    {
                      v1336 = v441;
                      if ((int)v441 >= 1)
                      {
                        do
                        {
                          *(v1333 - 1) = v1333[(int)v441 - 1] + v1334[(int)v441 - 1];
                          --v1333;
                          --v1334;
                          --v1336;
                        }
                        while (v1336);
                      }
                    }
                  }
                  v427 = &v1333[v1332];
                  v426 = &v1334[v1332];
                  ++v1330;
                }
                while (v1330 != (_DWORD)v442);
              }
            }
            else if (v57)
            {
              if ((int)v442 >= 1)
              {
                v1029 = 0;
                do
                {
                  if ((_DWORD)v441)
                    memmove(v427, v426, 4 * (int)v441);
                  v426 += (int)v441;
                  v427 += (int)v441;
                  if (v440 >= 2)
                  {
                    for (i101 = 1; i101 != v440; ++i101)
                    {
                      v1031 = v441;
                      if ((int)v441 >= 1)
                      {
                        do
                        {
                          v1032 = *v426++;
                          *v427 = v427[-(int)v441] + v1032;
                          ++v427;
                          --v1031;
                        }
                        while (v1031);
                      }
                    }
                  }
                  ++v1029;
                }
                while (v1029 != (_DWORD)v442);
              }
            }
            else if ((int)v442 >= 1)
            {
              v1699 = 0;
              do
              {
                if ((int)v441 >= 1)
                  bzero(v427, 4 * ((int)v441 - (unint64_t)(((int)v441 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v427 += (int)v441;
                v426 += (int)v441;
                if (v440 > 1)
                {
                  for (i102 = 1; i102 != v440; ++i102)
                  {
                    v1701 = v441;
                    if ((int)v441 >= 1)
                    {
                      do
                      {
                        *v427 = v427[-(int)v441] + v426[-(int)v441];
                        ++v427;
                        ++v426;
                        --v1701;
                      }
                      while (v1701);
                    }
                  }
                }
                ++v1699;
              }
              while (v1699 != (_DWORD)v442);
            }
          }
          goto LABEL_2618;
        case 3:
          v119 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a3 + 60)
                                                                             * (_QWORD)(*a3)[6]));
          v1835 = &unk_2513463C8;
          v1836 = mlx::core::allocator::free;
          v1837 = (uint64_t *)&v1835;
          mlx::core::array::set_data(a3, (uint64_t)v119, (uint64_t)&v1835);
          v120 = (void **)v1837;
          if (v1837 == (uint64_t *)&v1835)
          {
            v121 = 4;
            v120 = &v1835;
          }
          else
          {
            if (!v1837)
              goto LABEL_449;
            v121 = 5;
          }
          (*((void (**)(void))*v120 + v121))();
LABEL_449:
          if ((*(_BYTE *)(v1833[0] + 168) & 2) == 0)
            goto LABEL_2620;
          v477 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
          v478 = *(float **)(v1833[0] + 152);
          v479 = (float *)(*a3)[19];
          v480 = *(_QWORD *)(v1833[0] + 48);
          v481 = v480 / (int)mlx::core::array::shape((mlx::core::array *)v1833, v55);
          if (v477 == 1)
          {
            v482 = mlx::core::array::shape((mlx::core::array *)v1833, v55);
            if (v56)
            {
              if (v57)
              {
                if ((int)v481 >= 1)
                {
                  v483 = 0;
                  v484 = v482 - 1;
                  do
                  {
                    v485 = &v479[v484];
                    v486 = &v478[v484];
                    v487 = *v486;
                    *v485 = *v486;
                    v488 = v482 - 1;
                    if (v482 >= 2)
                    {
                      do
                      {
                        v489 = *--v486;
                        v487 = v487 * v489;
                        *--v485 = v487;
                        --v488;
                      }
                      while (v488);
                    }
                    v479 = &v485[v482];
                    v478 = &v486[v482];
                    ++v483;
                  }
                  while (v483 != (_DWORD)v481);
                }
              }
              else if ((int)v481 >= 1)
              {
                v1351 = 0;
                v1352 = v482 - 1;
                do
                {
                  v1353 = &v479[v1352];
                  v1354 = &v478[v1352];
                  *v1353 = 1.0;
                  if (v482 >= 2)
                  {
                    v1355 = 1.0;
                    v1356 = v482 - 1;
                    do
                    {
                      v1357 = *v1354--;
                      v1355 = v1355 * v1357;
                      *--v1353 = v1355;
                      --v1356;
                    }
                    while (v1356);
                  }
                  v479 = &v1353[v482];
                  v478 = &v1354[v482];
                  ++v1351;
                }
                while (v1351 != (_DWORD)v481);
              }
            }
            else if (v57)
            {
              if ((int)v481 >= 1)
              {
                v1041 = 0;
                do
                {
                  v1042 = *v478;
                  *v479 = *v478;
                  v1043 = v482 - 1;
                  if (v482 >= 2)
                  {
                    do
                    {
                      v1044 = v478[1];
                      ++v478;
                      v1042 = v1042 * v1044;
                      v479[1] = v1042;
                      ++v479;
                      --v1043;
                    }
                    while (v1043);
                  }
                  ++v479;
                  ++v478;
                  ++v1041;
                }
                while (v1041 != (_DWORD)v481);
              }
            }
            else if ((int)v481 >= 1)
            {
              v1709 = 0;
              do
              {
                *v479 = 1.0;
                if (v482 >= 2)
                {
                  v1710 = 1.0;
                  v1711 = v482 - 1;
                  do
                  {
                    v1712 = *v478++;
                    v1710 = v1710 * v1712;
                    v479[1] = v1710;
                    ++v479;
                    --v1711;
                  }
                  while (v1711);
                }
                ++v479;
                ++v478;
                ++v1709;
              }
              while (v1709 != (_DWORD)v481);
            }
          }
          else
          {
            v490 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
            v491 = mlx::core::array::shape((mlx::core::array *)v1833, v55);
            v492 = v491;
            v493 = *(_QWORD *)(*(_QWORD *)(v1833[0] + 24) + 8 * v55);
            v494 = v481 / v490;
            if (v56)
            {
              if (v57)
              {
                if ((int)v494 >= 1)
                {
                  v495 = 0;
                  v496 = (v491 - 1) * (int)v493;
                  v497 = v491 * (int)v493;
                  do
                  {
                    v498 = &v479[v496];
                    v499 = &v478[v496];
                    if ((_DWORD)v493)
                      memmove(v498, v499, 4 * (int)v493);
                    if (v492 >= 2)
                    {
                      for (i103 = 1; i103 != v492; ++i103)
                      {
                        v501 = v493;
                        if ((int)v493 >= 1)
                        {
                          do
                          {
                            v502 = *--v499;
                            *(v498 - 1) = v498[(int)v493 - 1] * v502;
                            --v498;
                            --v501;
                          }
                          while (v501);
                        }
                      }
                    }
                    v479 = &v498[v497];
                    v478 = &v499[v497];
                    ++v495;
                  }
                  while (v495 != (_DWORD)v494);
                }
              }
              else if ((int)v494 >= 1)
              {
                v1358 = 0;
                v1359 = (v491 - 1) * (int)v493;
                v1360 = v491 * (int)v493;
                do
                {
                  v1361 = &v479[v1359];
                  if ((int)v493 >= 1)
                    memset_pattern16(v1361, &unk_2425A2980, 4 * ((int)v493 - (unint64_t)(((int)v493 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                  v1362 = &v478[v1359];
                  if (v492 > 1)
                  {
                    for (i104 = 1; i104 != v492; ++i104)
                    {
                      v1364 = v493;
                      if ((int)v493 >= 1)
                      {
                        do
                        {
                          *(v1361 - 1) = v1361[(int)v493 - 1] * v1362[(int)v493 - 1];
                          --v1361;
                          --v1362;
                          --v1364;
                        }
                        while (v1364);
                      }
                    }
                  }
                  v479 = &v1361[v1360];
                  v478 = &v1362[v1360];
                  ++v1358;
                }
                while (v1358 != (_DWORD)v494);
              }
            }
            else if (v57)
            {
              if ((int)v494 >= 1)
              {
                v1045 = 0;
                do
                {
                  if ((_DWORD)v493)
                    memmove(v479, v478, 4 * (int)v493);
                  v478 += (int)v493;
                  v479 += (int)v493;
                  if (v492 >= 2)
                  {
                    for (i105 = 1; i105 != v492; ++i105)
                    {
                      v1047 = v493;
                      if ((int)v493 >= 1)
                      {
                        do
                        {
                          v1048 = *v478++;
                          *v479 = v479[-(int)v493] * v1048;
                          ++v479;
                          --v1047;
                        }
                        while (v1047);
                      }
                    }
                  }
                  ++v1045;
                }
                while (v1045 != (_DWORD)v494);
              }
            }
            else if ((int)v494 >= 1)
            {
              v1713 = 0;
              do
              {
                if ((int)v493 >= 1)
                  memset_pattern16(v479, &unk_2425A2980, 4 * ((int)v493 - (unint64_t)(((int)v493 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
                v479 += (int)v493;
                v478 += (int)v493;
                if (v492 > 1)
                {
                  for (i106 = 1; i106 != v492; ++i106)
                  {
                    v1715 = v493;
                    if ((int)v493 >= 1)
                    {
                      do
                      {
                        *v479 = v479[-(int)v493] * v478[-(int)v493];
                        ++v479;
                        ++v478;
                        --v1715;
                      }
                      while (v1715);
                    }
                  }
                }
                ++v1713;
              }
              while (v1713 != (_DWORD)v494);
            }
          }
          break;
        default:
          goto LABEL_2618;
      }
      goto LABEL_2618;
    default:
      goto LABEL_2618;
  }
}

void sub_24231B608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;

  __cxa_free_exception(v25);
  mlx::core::array::~array((mlx::core::array *)&a19);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<mlx::core::array::ArrayDesc>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void mlx::core::Reduce::eval(uint64_t a1, uint64_t a2, int ***a3)
{
  mlx::core::array *v4;

  v4 = *(mlx::core::array **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    mlx::core::Reduce::eval();
  switch(*(_DWORD *)(*(_QWORD *)v4 + 56))
  {
    case 0:
      break;
    case 1:
    case 3:
      break;
    case 2:
      break;
    case 4:
      break;
    case 5:
      break;
    case 6:
      break;
    default:
      return;
  }
}

void mlx::core::`anonymous namespace'::reduce_dispatch_out<BOOL>(mlx::core::array *a1, int ***a2, int a3, uint64_t a4)
{
  mlx::core::scheduler *v7;
  void **v8;
  uint64_t v9;
  mlx::core::scheduler *v10;
  void **v11;
  uint64_t v12;
  int **v13;
  int *v14;
  mlx::core::scheduler *v15;
  void **v16;
  uint64_t v17;
  mlx::core::scheduler *v18;
  void **v19;
  uint64_t v20;
  mlx::core::scheduler *v21;
  void **v22;
  uint64_t v23;
  mlx::core::scheduler *v24;
  void **v25;
  uint64_t v26;
  char *v27;
  int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  char v31;
  int v32;
  char *v33;
  int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  char v37;
  int v38;
  char *v39;
  int v40;
  unsigned __int8 *v41;
  unsigned int v42;
  char v43;
  int v44;
  int *v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  int *v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  unsigned int v55;
  int v56;
  _BYTE *v57;
  int *v58;
  int *v59;
  uint64_t v60;
  char *v61;
  unsigned __int8 *v62;
  char v63;
  unsigned int v64;
  unsigned __int8 *v65;
  int v66;
  _BYTE *v67;
  int *v68;
  int *v69;
  uint64_t v70;
  char *v71;
  unsigned __int8 *v72;
  char v73;
  unsigned int v74;
  unsigned __int8 *v75;
  int v76;
  _BYTE *v77;
  int *v78;
  int *v79;
  uint64_t v80;
  char *v81;
  unsigned __int8 *v82;
  char v83;
  unsigned int v84;
  unsigned __int8 *v85;
  int v86;
  _BYTE *v87;
  int *v88;
  int *v89;
  uint64_t v90;
  int *v91;
  unsigned __int8 *v92;
  int v93;
  unsigned int v94;
  unsigned __int8 *v95;
  int v96;
  size_t v97;
  int *v98;
  void **v99;
  int *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  ldiv_t v106;
  _QWORD *v107;
  void **v108;
  void **v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _BYTE *v115;
  int *v116;
  int *v117;
  uint64_t v118;
  int *v119;
  unsigned __int8 *v120;
  int v121;
  unsigned int v122;
  unsigned __int8 *v123;
  int v124;
  size_t v125;
  int *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  ldiv_t v132;
  _QWORD *v133;
  void **v134;
  void **v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  size_t v141;
  int *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int quot;
  ldiv_t v148;
  _QWORD *v149;
  void **v150;
  void **v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  size_t v157;
  int *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  ldiv_t v164;
  _QWORD *v165;
  void **v166;
  void **v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  size_t v173;
  int *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  ldiv_t v180;
  _QWORD *v181;
  void **v182;
  void **v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  _BYTE *v189;
  _BYTE *v190;
  _BYTE *v191;
  _BYTE *v192;
  _BYTE *v193;
  mlx::core::scheduler *v194;
  void **v195;
  uint64_t v196;
  mlx::core::scheduler *v197;
  void **v198;
  uint64_t v199;
  mlx::core::scheduler *v200;
  void **v201;
  uint64_t v202;
  mlx::core::scheduler *v203;
  void **v204;
  uint64_t v205;
  mlx::core::scheduler *v206;
  void **v207;
  uint64_t v208;
  mlx::core::scheduler *v209;
  void **v210;
  uint64_t v211;
  int *v212;
  uint64_t v213;
  char *v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  ldiv_t v220;
  unsigned __int8 *v221;
  char v222;
  unsigned int v223;
  int v224;
  int *v225;
  uint64_t v226;
  char *v227;
  int v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  ldiv_t v233;
  unsigned __int8 *v234;
  char v235;
  unsigned int v236;
  int v237;
  int *v238;
  uint64_t v239;
  char *v240;
  int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  ldiv_t v246;
  unsigned __int8 *v247;
  char v248;
  unsigned int v249;
  int v250;
  int *v251;
  uint64_t v252;
  int *v253;
  int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  ldiv_t v259;
  int v260;
  unsigned __int8 *v261;
  unsigned int v262;
  int v263;
  int *v264;
  uint64_t v265;
  int *v266;
  int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  ldiv_t v272;
  int v273;
  unsigned __int8 *v274;
  unsigned int v275;
  int v276;
  int *v277;
  int v278;
  int v279;
  unsigned __int8 *v280;
  unsigned int v281;
  int v282;
  int v283;
  unsigned __int8 *v284;
  unsigned int v285;
  int v286;
  int *v287;
  int v288;
  int v289;
  unsigned __int8 *v290;
  unsigned int v291;
  int v292;
  BOOL *v293;
  int v294;
  BOOL v295;
  char *v296;
  unsigned int v297;
  char v298;
  int *v299;
  int v300;
  int v301;
  unsigned __int8 *v302;
  unsigned int v303;
  int v304;
  int *v305;
  int v306;
  uint64_t v307;
  unsigned __int8 *v308;
  unsigned int v309;
  unsigned int v310;
  float *v311;
  int v312;
  unsigned __int8 *v313;
  unsigned int v314;
  float v315;
  float v317;
  _BYTE *v318;
  int *v319;
  int *v320;
  uint64_t v321;
  int *v322;
  unsigned __int8 *v323;
  int v324;
  unsigned int v325;
  unsigned __int8 *v326;
  int v327;
  _BYTE *v328;
  int *v329;
  int *v330;
  uint64_t v331;
  int *v332;
  unsigned __int8 *v333;
  int v334;
  unsigned int v335;
  unsigned __int8 *v336;
  int v337;
  _BYTE *v338;
  unint64_t v339;
  uint64_t v340;
  int *v341;
  unsigned __int8 *v342;
  int v343;
  unsigned int v344;
  unsigned __int8 *v345;
  int v346;
  _BYTE *v347;
  int *v348;
  int *v349;
  uint64_t v350;
  BOOL *v351;
  char *v352;
  BOOL v353;
  unsigned int v354;
  char *v355;
  char v356;
  _BYTE *v357;
  unint64_t v358;
  uint64_t v359;
  int *v360;
  unsigned __int8 *v361;
  int v362;
  unsigned int v363;
  unsigned __int8 *v364;
  int v365;
  size_t v366;
  int *v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  ldiv_t v373;
  _QWORD *v374;
  void **v375;
  void **v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  int *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  ldiv_t v388;
  _QWORD *v389;
  void **v390;
  void **v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  _BYTE *v397;
  int *v398;
  int *v399;
  uint64_t v400;
  int *v401;
  unsigned __int8 *v402;
  uint64_t v403;
  unsigned int v404;
  unsigned __int8 *v405;
  unsigned int v406;
  uint64_t v407;
  size_t v408;
  int *v409;
  unint64_t v410;
  int *v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  uint64_t i11;
  BOOL v416;
  char v417;
  size_t v418;
  unint64_t v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  ldiv_t v425;
  _QWORD *v426;
  void **v427;
  void **v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  _BYTE *v434;
  int *v435;
  int *v436;
  uint64_t v437;
  float *v438;
  unsigned __int8 *v439;
  float v440;
  unsigned int v441;
  unsigned __int8 *v442;
  float v444;
  size_t v445;
  int *v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  ldiv_t v452;
  _QWORD *v453;
  void **v454;
  void **v455;
  uint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  _QWORD *v459;
  uint64_t v460;
  size_t v461;
  int *v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  ldiv_t v468;
  _QWORD *v469;
  void **v470;
  void **v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  int *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  ldiv_t v483;
  _QWORD *v484;
  void **v485;
  void **v486;
  uint64_t v487;
  _QWORD *v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  size_t v492;
  int *v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  ldiv_t v499;
  _QWORD *v500;
  void **v501;
  void **v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  size_t v508;
  int *v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  ldiv_t v515;
  _QWORD *v516;
  void **v517;
  void **v518;
  uint64_t v519;
  _QWORD *v520;
  uint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  int *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  ldiv_t v530;
  _QWORD *v531;
  void **v532;
  void **v533;
  uint64_t v534;
  _QWORD *v535;
  uint64_t v536;
  _QWORD *v537;
  uint64_t v538;
  int *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  ldiv_t v545;
  _QWORD *v546;
  void **v547;
  void **v548;
  uint64_t v549;
  _QWORD *v550;
  uint64_t v551;
  _QWORD *v552;
  uint64_t v553;
  uint64_t v554;
  size_t v555;
  int *v556;
  unint64_t v557;
  int *v558;
  uint64_t v559;
  int v560;
  uint64_t v561;
  uint64_t i9;
  BOOL v563;
  char v564;
  size_t v565;
  unint64_t v566;
  int v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  ldiv_t v572;
  _QWORD *v573;
  void **v574;
  void **v575;
  uint64_t v576;
  _QWORD *v577;
  uint64_t v578;
  _QWORD *v579;
  uint64_t v580;
  uint64_t v581;
  size_t v582;
  int *v583;
  unint64_t v584;
  int *v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  uint64_t i;
  BOOL v590;
  char v591;
  size_t v592;
  unint64_t v593;
  int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  ldiv_t v599;
  _QWORD *v600;
  void **v601;
  void **v602;
  uint64_t v603;
  _QWORD *v604;
  uint64_t v605;
  _QWORD *v606;
  uint64_t v607;
  uint64_t v608;
  size_t v609;
  int *v610;
  unint64_t v611;
  int *v612;
  uint64_t v613;
  int v614;
  uint64_t v615;
  uint64_t k;
  size_t v617;
  unint64_t v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  int v623;
  ldiv_t v624;
  _QWORD *v625;
  void **v626;
  void **v627;
  uint64_t v628;
  _QWORD *v629;
  uint64_t v630;
  _QWORD *v631;
  uint64_t v632;
  size_t v633;
  int *v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  ldiv_t v640;
  _QWORD *v641;
  void **v642;
  void **v643;
  uint64_t v644;
  _QWORD *v645;
  uint64_t v646;
  _QWORD *v647;
  uint64_t v648;
  int *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  ldiv_t v655;
  _QWORD *v656;
  void **v657;
  void **v658;
  uint64_t v659;
  _QWORD *v660;
  uint64_t v661;
  _QWORD *v662;
  uint64_t v663;
  size_t v664;
  int *v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int v670;
  ldiv_t v671;
  _QWORD *v672;
  void **v673;
  void **v674;
  uint64_t v675;
  _QWORD *v676;
  uint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  uint64_t v680;
  size_t v681;
  int *v682;
  unint64_t v683;
  int *v684;
  uint64_t v685;
  int v686;
  uint64_t v687;
  uint64_t i13;
  size_t v689;
  unint64_t v690;
  int v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  int v695;
  ldiv_t v696;
  _QWORD *v697;
  void **v698;
  void **v699;
  uint64_t v700;
  _QWORD *v701;
  uint64_t v702;
  _QWORD *v703;
  uint64_t v704;
  int v705;
  char *v706;
  uint64_t v707;
  size_t v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  int v712;
  ldiv_t v713;
  int v714;
  char *v715;
  uint64_t i12;
  BOOL v717;
  char v718;
  int v719;
  char *v720;
  uint64_t v721;
  size_t v722;
  int v723;
  uint64_t v724;
  uint64_t v725;
  int v726;
  ldiv_t v727;
  int v728;
  char *v729;
  uint64_t i10;
  BOOL v731;
  char v732;
  int v733;
  char *v734;
  uint64_t v735;
  size_t v736;
  int v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  ldiv_t v741;
  int v742;
  char *v743;
  uint64_t j;
  BOOL v745;
  char v746;
  int v747;
  char *v748;
  uint64_t v749;
  size_t v750;
  int v751;
  uint64_t v752;
  uint64_t v753;
  int v754;
  ldiv_t v755;
  int v756;
  char *v757;
  uint64_t m;
  int v759;
  char *v760;
  uint64_t v761;
  size_t v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  int v766;
  ldiv_t v767;
  int v768;
  char *v769;
  uint64_t i14;
  _BYTE *v771;
  _BYTE *v772;
  _BYTE *v773;
  _BYTE *v774;
  _BYTE *v775;
  _BYTE *v776;
  _BYTE *v777;
  int *v778;
  int *v779;
  size_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  int v784;
  ldiv_t v785;
  int v786;
  unsigned __int8 *v787;
  unsigned int v788;
  int v789;
  int *v790;
  int *v791;
  size_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  int v796;
  ldiv_t v797;
  int v798;
  unsigned __int8 *v799;
  unsigned int v800;
  int v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int v806;
  ldiv_t v807;
  int *v808;
  unsigned __int8 *v809;
  int v810;
  unsigned int v811;
  int v812;
  int *v813;
  uint64_t v814;
  BOOL *v815;
  int v816;
  unsigned int v817;
  uint64_t v818;
  uint64_t v819;
  int v820;
  ldiv_t v821;
  BOOL v822;
  char *v823;
  unsigned int v824;
  char v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  ldiv_t v831;
  int *v832;
  unsigned __int8 *v833;
  int v834;
  unsigned int v835;
  int v836;
  int *v837;
  uint64_t v838;
  int *v839;
  int v840;
  unsigned int v841;
  uint64_t v842;
  uint64_t v843;
  int v844;
  ldiv_t v845;
  uint64_t v846;
  unsigned __int8 *v847;
  unsigned int v848;
  unsigned int v849;
  int *v850;
  uint64_t v851;
  float *v852;
  int v853;
  unsigned int v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  ldiv_t v858;
  unsigned __int8 *v859;
  float v860;
  unsigned int v861;
  float v863;
  int *v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  int v869;
  ldiv_t v870;
  _QWORD *v871;
  void **v872;
  void **v873;
  uint64_t v874;
  _QWORD *v875;
  uint64_t v876;
  _QWORD *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  int *v881;
  unint64_t v882;
  int *v883;
  uint64_t v884;
  int v885;
  uint64_t v886;
  uint64_t i3;
  size_t v888;
  unint64_t v889;
  int v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  int v894;
  ldiv_t v895;
  _QWORD *v896;
  void **v897;
  void **v898;
  uint64_t v899;
  _QWORD *v900;
  uint64_t v901;
  _QWORD *v902;
  uint64_t v903;
  int *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  int v909;
  ldiv_t v910;
  _QWORD *v911;
  void **v912;
  void **v913;
  uint64_t v914;
  _QWORD *v915;
  uint64_t v916;
  _QWORD *v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int *v921;
  unint64_t v922;
  int *v923;
  uint64_t v924;
  int v925;
  uint64_t v926;
  uint64_t mm;
  size_t v928;
  unint64_t v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  int v934;
  ldiv_t v935;
  _QWORD *v936;
  void **v937;
  void **v938;
  uint64_t v939;
  _QWORD *v940;
  uint64_t v941;
  _QWORD *v942;
  uint64_t v943;
  int *v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  int v949;
  ldiv_t v950;
  _QWORD *v951;
  void **v952;
  void **v953;
  uint64_t v954;
  _QWORD *v955;
  uint64_t v956;
  _QWORD *v957;
  uint64_t v958;
  int *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  int v964;
  ldiv_t v965;
  _QWORD *v966;
  void **v967;
  void **v968;
  uint64_t v969;
  _QWORD *v970;
  uint64_t v971;
  _QWORD *v972;
  uint64_t v973;
  int *v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  int v979;
  ldiv_t v980;
  _QWORD *v981;
  void **v982;
  void **v983;
  uint64_t v984;
  _QWORD *v985;
  uint64_t v986;
  _QWORD *v987;
  uint64_t v988;
  uint64_t v989;
  size_t v990;
  unint64_t v991;
  int *v992;
  uint64_t v993;
  int v994;
  uint64_t v995;
  uint64_t i1;
  size_t v997;
  int *v998;
  int v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  int v1003;
  ldiv_t v1004;
  _QWORD *v1005;
  void **v1006;
  void **v1007;
  uint64_t v1008;
  _QWORD *v1009;
  uint64_t v1010;
  _QWORD *v1011;
  uint64_t v1012;
  uint64_t v1013;
  size_t v1014;
  int *v1015;
  unint64_t v1016;
  int *v1017;
  uint64_t v1018;
  int v1019;
  uint64_t v1020;
  uint64_t n;
  size_t v1022;
  unint64_t v1023;
  int v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  int v1028;
  ldiv_t v1029;
  _QWORD *v1030;
  void **v1031;
  void **v1032;
  uint64_t v1033;
  _QWORD *v1034;
  uint64_t v1035;
  _QWORD *v1036;
  uint64_t v1037;
  uint64_t v1038;
  size_t v1039;
  unint64_t v1040;
  int *v1041;
  uint64_t v1042;
  int v1043;
  uint64_t v1044;
  uint64_t jj;
  size_t v1046;
  int *v1047;
  int v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  int v1052;
  ldiv_t v1053;
  _QWORD *v1054;
  void **v1055;
  void **v1056;
  uint64_t v1057;
  _QWORD *v1058;
  uint64_t v1059;
  _QWORD *v1060;
  uint64_t v1061;
  int *v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  int v1067;
  ldiv_t v1068;
  _QWORD *v1069;
  void **v1070;
  void **v1071;
  uint64_t v1072;
  _QWORD *v1073;
  uint64_t v1074;
  _QWORD *v1075;
  uint64_t v1076;
  int *v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  int v1082;
  ldiv_t v1083;
  _QWORD *v1084;
  void **v1085;
  void **v1086;
  uint64_t v1087;
  _QWORD *v1088;
  uint64_t v1089;
  _QWORD *v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  int *v1094;
  unint64_t v1095;
  int *v1096;
  uint64_t v1097;
  int v1098;
  uint64_t v1099;
  uint64_t i5;
  size_t v1101;
  unint64_t v1102;
  int v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  int v1107;
  ldiv_t v1108;
  _QWORD *v1109;
  void **v1110;
  void **v1111;
  uint64_t v1112;
  _QWORD *v1113;
  uint64_t v1114;
  _QWORD *v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  int *v1119;
  unint64_t v1120;
  int *v1121;
  uint64_t v1122;
  int v1123;
  uint64_t v1124;
  uint64_t i7;
  float v1126;
  size_t v1127;
  unint64_t v1128;
  int v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  int v1133;
  ldiv_t v1134;
  _QWORD *v1135;
  void **v1136;
  void **v1137;
  uint64_t v1138;
  _QWORD *v1139;
  uint64_t v1140;
  _QWORD *v1141;
  uint64_t v1142;
  int v1143;
  char *v1144;
  uint64_t v1145;
  size_t v1146;
  size_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  int v1150;
  ldiv_t v1151;
  int v1152;
  int v1153;
  char *v1154;
  uint64_t i4;
  int v1156;
  char *v1157;
  uint64_t v1158;
  size_t v1159;
  size_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  int v1163;
  ldiv_t v1164;
  int v1165;
  int v1166;
  char *v1167;
  uint64_t nn;
  int v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  int v1173;
  int ***v1174;
  ldiv_t v1175;
  _BYTE *v1176;
  size_t v1177;
  int v1178;
  int v1179;
  char *v1180;
  size_t v1181;
  _BYTE *i2;
  char v1183;
  int v1184;
  unsigned __int8 *v1185;
  uint64_t v1186;
  size_t v1187;
  int v1188;
  uint64_t v1189;
  uint64_t v1190;
  int v1191;
  ldiv_t v1192;
  int v1193;
  char *v1194;
  uint64_t ii;
  int v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  int v1200;
  int ***v1201;
  ldiv_t v1202;
  _BYTE *v1203;
  size_t v1204;
  int v1205;
  int v1206;
  char *v1207;
  size_t v1208;
  _BYTE *kk;
  char v1210;
  int v1211;
  char *v1212;
  uint64_t v1213;
  size_t v1214;
  int v1215;
  size_t v1216;
  uint64_t v1217;
  int v1218;
  ldiv_t v1219;
  int v1220;
  char *v1221;
  uint64_t i6;
  int v1223;
  char *v1224;
  uint64_t v1225;
  size_t v1226;
  int v1227;
  size_t v1228;
  uint64_t v1229;
  int v1230;
  ldiv_t v1231;
  int v1232;
  char *v1233;
  uint64_t i8;
  float v1235;
  int *v1236;
  int *v1237;
  size_t v1239;
  size_t v1240;
  size_t v1241;
  size_t v1242;
  size_t v1243;
  int *v1244;
  int *v1245;
  int *v1246;
  int *v1247;
  int *v1248;
  size_t v1249;
  size_t v1250;
  size_t v1251;
  int *v1252;
  int *v1253;
  int *v1254;
  uint64_t v1255;
  uint64_t v1256;
  int v1257;
  void *__b;
  int v1259;
  int *v1260;
  size_t __len;
  void *__p;
  void *v1263;
  uint64_t v1264;
  int v1265;
  void *v1266;
  _BYTE *v1267;
  void *v1268;
  char *v1269;
  char v1270;
  int v1271;
  _BYTE v1272[24];
  _BYTE *v1273;
  int *v1274;
  uint64_t v1275;
  void **v1276;
  void *v1277;
  uint64_t (*v1278)(mlx::core::allocator *);
  void **v1279;
  _QWORD v1280[3];
  _QWORD *v1281;
  uint64_t v1282;

  v1282 = *MEMORY[0x24BDAC8D0];
  switch(a3)
  {
    case 0:
      v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                       * (_QWORD)(*a2)[6]));
      v1277 = &unk_2513463C8;
      v1278 = mlx::core::allocator::free;
      v1279 = &v1277;
      mlx::core::array::set_data(a2, (uint64_t)v7, (uint64_t)&v1277);
      v8 = v1279;
      if (v1279 == &v1277)
      {
        v9 = 4;
        v8 = &v1277;
      }
      else
      {
        if (!v1279)
          goto LABEL_43;
        v9 = 5;
      }
      (*((void (**)(void))*v8 + v9))();
LABEL_43:
      v1263 = 0;
      v1264 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1263 = __p;
        operator delete(__p);
      }
      if (v1265 == 1)
      {
        v77 = v1267;
        if (v1267 - (_BYTE *)v1266 == 4)
        {
          v78 = (*a2)[6];
          if (v78)
          {
            v79 = 0;
            v80 = *(int *)v1266;
            v81 = (char *)(*a2)[19];
            v82 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *v81 = 1;
              if ((int)v80 >= 1)
              {
                v83 = 1;
                v84 = v80 + 1;
                v85 = v82;
                do
                {
                  v86 = *v85++;
                  v83 &= v86 != 0;
                  *v81 = v83;
                  --v84;
                }
                while (v84 > 1);
              }
              v79 = (int *)((char *)v79 + 1);
              ++v81;
              v82 += v80;
            }
            while (v79 != v78);
          }
          goto LABEL_1751;
        }
        goto LABEL_165;
      }
      if (!v1265)
      {
        v39 = (char *)(*a2)[19];
        *v39 = 1;
        v40 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v40 >= 1)
        {
          v41 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v42 = v40 + 1;
          v43 = 1;
          do
          {
            v44 = *v41++;
            v43 &= v44 != 0;
            *v39 = v43;
            --v42;
          }
          while (v42 > 1);
        }
        goto LABEL_1751;
      }
      if ((v1265 & 0xFFFFFFFD) == 1)
      {
        v77 = v1267;
LABEL_165:
        v1271 = 0;
        v1271 = *((_DWORD *)v77 - 1);
        v1267 = v77 - 4;
        v1269 -= 8;
        v141 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1260 = (*a2)[19];
        __len = v141;
        v98 = v1274;
        v99 = v1276;
        v142 = (*a2)[6];
        if (v1267 != v1266)
        {
          if (!v142)
            goto LABEL_1747;
          v143 = 0;
          v144 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          while (1)
          {
            v1259 = 0;
            v145 = 0;
            if ((v144 & 0x80000000) == 0)
            {
              v146 = v144;
              quot = v143;
              do
              {
                v148 = ldiv(quot, v98[v146]);
                quot = v148.quot;
                v145 += (_QWORD)v99[v146--] * v148.rem;
              }
              while (v146 != -1);
            }
            v1259 = v145;
            *(_BYTE *)v1260 = 1;
            v1273 = 0;
            v149 = operator new(0x30uLL);
            *v149 = &off_251346AF8;
            v149[1] = &v1257;
            v149[2] = &__len;
            v149[3] = &v1259;
            v149[4] = &v1260;
            v149[5] = &v1271;
            v1273 = v149;
            v1281 = 0;
            v150 = (void **)operator new(0x28uLL);
            *v150 = &off_251346A78;
            v150[1] = &v1266;
            v150[2] = &v1268;
            v150[3] = v1280;
            v150[4] = v1272;
            v1276 = v150;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
            v151 = v1276;
            if (v1276 == (void **)&v1274)
            {
              v151 = (void **)&v1274;
              v152 = 4;
            }
            else
            {
              if (!v1276)
                goto LABEL_176;
              v152 = 5;
            }
            (*((void (**)(void))*v151 + v152))();
LABEL_176:
            LODWORD(v1274) = 0;
            LODWORD(__b) = 0;
            if (!v1281)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
            v153 = v1281;
            if (v1281 == v1280)
            {
              v153 = v1280;
              v154 = 4;
            }
            else
            {
              if (!v1281)
                goto LABEL_182;
              v154 = 5;
            }
            (*(void (**)(void))(*v153 + 8 * v154))();
LABEL_182:
            v155 = v1273;
            if (v1273 == v1272)
            {
              v155 = v1272;
              v156 = 4;
              goto LABEL_186;
            }
            if (v1273)
            {
              v156 = 5;
LABEL_186:
              (*(void (**)(void))(*v155 + 8 * v156))();
            }
            ++v143;
            v1260 = (int *)((char *)v1260 + 1);
            if ((unint64_t)(*a2)[6] <= v143)
              goto LABEL_1747;
          }
        }
        if (v142)
        {
          v238 = 0;
          v239 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          v240 = (char *)v1260;
          v1241 = __len;
          v241 = v1271;
          v242 = v1271 + 1;
          do
          {
            v243 = 0;
            if ((v239 & 0x80000000) == 0)
            {
              v244 = v239;
              v245 = (int)v238;
              do
              {
                v246 = ldiv(v245, v98[v244]);
                v245 = v246.quot;
                v243 += (_QWORD)v99[v244--] * v246.rem;
              }
              while (v244 != -1);
            }
            *v240 = 1;
            if (v241 >= 1)
            {
              v247 = (unsigned __int8 *)(v1241 + (int)v243);
              v248 = 1;
              v249 = v242;
              do
              {
                v250 = *v247++;
                v248 &= v250 != 0;
                *v240 = v248;
                --v249;
              }
              while (v249 > 1);
            }
            v238 = (int *)((char *)v238 + 1);
            ++v240;
          }
          while (v238 != v142);
        }
        goto LABEL_1747;
      }
      switch(v1265)
      {
        case 2:
          v191 = v1267;
          if (v1267 - (_BYTE *)v1266 == 4)
          {
            v581 = *((int *)v1267 - 1);
            v582 = *((_QWORD *)v1269 - 1);
            v1267 -= 4;
            v1269 -= 8;
            v583 = (*a2)[6];
            if (v583)
            {
              LODWORD(v584) = 0;
              v585 = (*a2)[19];
              v586 = *(_QWORD *)(*(_QWORD *)a1 + 152);
              do
              {
                if (v582)
                  memset(v585, 1, v582);
                if ((int)v581 >= 1)
                {
                  v587 = 0;
                  v588 = v586;
                  do
                  {
                    if (v582)
                    {
                      for (i = 0; i != v582; ++i)
                      {
                        if (*(_BYTE *)(v588 + i))
                          v590 = *((_BYTE *)v585 + i) == 0;
                        else
                          v590 = 1;
                        v591 = !v590;
                        *((_BYTE *)v585 + i) = v591;
                      }
                      v588 += i;
                    }
                    ++v587;
                  }
                  while (v587 != (_DWORD)v581);
                }
                v586 += v582 * v581;
                v585 = (int *)((char *)v585 + v582);
                v584 = (int)v584 + (int)v582;
              }
              while (v584 < (unint64_t)v583);
            }
            break;
          }
LABEL_799:
          v1259 = 0;
          v1259 = *((_DWORD *)v191 - 1);
          __len = 0;
          v592 = *((_QWORD *)v1269 - 1);
          v1267 = v191 - 4;
          v1269 -= 8;
          v1260 = *(int **)(*(_QWORD *)a1 + 152);
          __len = v592;
          __b = (*a2)[19];
          v98 = v1274;
          v99 = v1276;
          v593 = (unint64_t)(*a2)[6];
          if (v1267 == v1266)
          {
            if (v593)
            {
              v733 = 0;
              v734 = (char *)__b;
              v735 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
              v736 = __len;
              v1246 = v1260;
              v737 = v1259;
              do
              {
                v738 = 0;
                if ((v735 & 0x80000000) == 0)
                {
                  v739 = v735;
                  v740 = v733;
                  do
                  {
                    v741 = ldiv(v740, v98[v739]);
                    v740 = v741.quot;
                    v738 += (_QWORD)v99[v739--] * v741.rem;
                  }
                  while (v739 != -1);
                }
                if (v736)
                  memset(v734, 1, v736);
                if (v737 >= 1)
                {
                  v742 = 0;
                  v743 = (char *)v1246 + (int)v738;
                  do
                  {
                    if (v736)
                    {
                      for (j = 0; j != v736; ++j)
                      {
                        if (v743[j])
                          v745 = v734[j] == 0;
                        else
                          v745 = 1;
                        v746 = !v745;
                        v734[j] = v746;
                      }
                      v743 += j;
                    }
                    ++v742;
                  }
                  while (v742 != v737);
                }
                v734 += v736;
                v733 += v736;
              }
              while (v593 > v733);
            }
            goto LABEL_1747;
          }
          if (v593)
          {
            v594 = 0;
            v595 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            do
            {
              v1257 = 0;
              v596 = 0;
              if ((v595 & 0x80000000) == 0)
              {
                v597 = v595;
                v598 = v594;
                do
                {
                  v599 = ldiv(v598, v98[v597]);
                  v598 = v599.quot;
                  v596 += (_QWORD)v99[v597--] * v599.rem;
                }
                while (v597 != -1);
              }
              v1257 = v596;
              if (__len)
                memset(__b, 1, __len);
              v1273 = 0;
              v600 = operator new(0x38uLL);
              *v600 = &off_251346B78;
              v600[1] = &v1270;
              v600[2] = &v1260;
              v600[3] = &v1257;
              v600[4] = &__b;
              v600[5] = &v1259;
              v600[6] = &__len;
              v1273 = v600;
              v1281 = 0;
              v601 = (void **)operator new(0x28uLL);
              *v601 = &off_251346A78;
              v601[1] = &v1266;
              v601[2] = &v1268;
              v601[3] = v1280;
              v601[4] = v1272;
              v1276 = v601;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v602 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v602 = (void **)&v1274;
                v603 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_812;
                v603 = 5;
              }
              (*((void (**)(void))*v602 + v603))();
LABEL_812:
              LODWORD(v1274) = 0;
              v1271 = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
              v604 = v1281;
              if (v1281 == v1280)
              {
                v604 = v1280;
                v605 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_818;
                v605 = 5;
              }
              (*(void (**)(void))(*v604 + 8 * v605))();
LABEL_818:
              v606 = v1273;
              if (v1273 == v1272)
              {
                v606 = v1272;
                v607 = 4;
                goto LABEL_822;
              }
              if (v1273)
              {
                v607 = 5;
LABEL_822:
                (*(void (**)(void))(*v606 + 8 * v607))();
              }
              __b = (char *)__b + __len;
              v594 += __len;
            }
            while ((unint64_t)(*a2)[6] > v594);
          }
LABEL_1747:
          if (v99)
            operator delete(v99);
          if (v98)
            operator delete(v98);
          break;
        case 5:
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v524 = (*a2)[19];
          v98 = v1274;
          v99 = v1276;
          if (!(*a2)[6])
            goto LABEL_1747;
          v525 = 0;
          v526 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v527 = 0;
            if ((v526 & 0x80000000) == 0)
            {
              v528 = v526;
              v529 = v525;
              do
              {
                v530 = ldiv(v529, v98[v528]);
                v529 = v530.quot;
                v527 += (_QWORD)v99[v528--] * v530.rem;
              }
              while (v528 != -1);
            }
            LODWORD(__b) = v527;
            LOBYTE(v1259) = 1;
            v1273 = 0;
            v531 = operator new(0x28uLL);
            *v531 = &off_251346BF8;
            v531[1] = &v1271;
            v531[2] = &v1259;
            v531[3] = &__len;
            v531[4] = &__b;
            v1273 = v531;
            v1281 = 0;
            v532 = (void **)operator new(0x28uLL);
            *v532 = &off_251346A78;
            v532[1] = &v1266;
            v532[2] = &v1268;
            v532[3] = v1280;
            v532[4] = v1272;
            v1276 = v532;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
            v533 = v1276;
            if (v1276 == (void **)&v1274)
            {
              v533 = (void **)&v1274;
              v534 = 4;
            }
            else
            {
              if (!v1276)
                goto LABEL_697;
              v534 = 5;
            }
            (*((void (**)(void))*v533 + v534))();
LABEL_697:
            LODWORD(v1274) = 0;
            LODWORD(v1260) = 0;
            if (!v1281)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
            v535 = v1281;
            if (v1281 == v1280)
            {
              v535 = v1280;
              v536 = 4;
            }
            else
            {
              if (!v1281)
                goto LABEL_703;
              v536 = 5;
            }
            (*(void (**)(void))(*v535 + 8 * v536))();
LABEL_703:
            v537 = v1273;
            if (v1273 == v1272)
            {
              v537 = v1272;
              v538 = 4;
              goto LABEL_707;
            }
            if (v1273)
            {
              v538 = 5;
LABEL_707:
              (*(void (**)(void))(*v537 + 8 * v538))();
            }
            *(_BYTE *)v524 = v1259;
            v524 = (int *)((char *)v524 + 1);
            if ((unint64_t)(*a2)[6] <= ++v525)
              goto LABEL_1747;
          }
        case 4:
          v191 = v1267;
          goto LABEL_799;
      }
LABEL_1751:
      if (v1268)
      {
        v1269 = (char *)v1268;
        operator delete(v1268);
      }
      if (v1266)
      {
        v1267 = v1266;
        operator delete(v1266);
      }
      return;
    case 1:
      v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1277 = &unk_2513463C8;
      v1278 = mlx::core::allocator::free;
      v1279 = &v1277;
      mlx::core::array::set_data(a2, (uint64_t)v21, (uint64_t)&v1277);
      v22 = v1279;
      if (v1279 == &v1277)
      {
        v23 = 4;
        v22 = &v1277;
      }
      else
      {
        if (!v1279)
          goto LABEL_53;
        v23 = 5;
      }
      (*((void (**)(void))*v22 + v23))();
LABEL_53:
      v1263 = 0;
      v1264 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1263 = __p;
        operator delete(__p);
      }
      if (v1265 == 1)
      {
        v87 = v1267;
        if (v1267 - (_BYTE *)v1266 == 4)
        {
          v88 = (*a2)[6];
          if (v88)
          {
            v89 = 0;
            v90 = *(int *)v1266;
            v91 = (*a2)[19];
            v92 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *(_BYTE *)v91 = 0;
              if ((int)v90 >= 1)
              {
                v93 = 0;
                v94 = v90 + 1;
                v95 = v92;
                do
                {
                  v96 = *v95++;
                  v93 |= v96;
                  *(_BYTE *)v91 = v93;
                  --v94;
                }
                while (v94 > 1);
              }
              v89 = (int *)((char *)v89 + 1);
              v91 = (int *)((char *)v91 + 1);
              v92 += v90;
            }
            while (v89 != v88);
          }
          goto LABEL_1751;
        }
        goto LABEL_191;
      }
      if (!v1265)
      {
        v45 = (*a2)[19];
        *(_BYTE *)v45 = 0;
        v46 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v46 >= 1)
        {
          v47 = 0;
          v48 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v49 = v46 + 1;
          do
          {
            v50 = *v48++;
            v47 |= v50;
            *(_BYTE *)v45 = v47;
            --v49;
          }
          while (v49 > 1);
        }
        goto LABEL_1751;
      }
      if ((v1265 & 0xFFFFFFFD) == 1)
      {
        v87 = v1267;
LABEL_191:
        v1271 = 0;
        v1271 = *((_DWORD *)v87 - 1);
        v1267 = v87 - 4;
        v1269 -= 8;
        v157 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1260 = (*a2)[19];
        __len = v157;
        v98 = v1274;
        v99 = v1276;
        v158 = (*a2)[6];
        if (v1267 == v1266)
        {
          if (v158)
          {
            v251 = 0;
            v252 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            v253 = v1260;
            v1242 = __len;
            v254 = v1271;
            v255 = v1271 + 1;
            do
            {
              v256 = 0;
              if ((v252 & 0x80000000) == 0)
              {
                v257 = v252;
                v258 = (int)v251;
                do
                {
                  v259 = ldiv(v258, v98[v257]);
                  v258 = v259.quot;
                  v256 += (_QWORD)v99[v257--] * v259.rem;
                }
                while (v257 != -1);
              }
              *(_BYTE *)v253 = 0;
              if (v254 >= 1)
              {
                v260 = 0;
                v261 = (unsigned __int8 *)(v1242 + (int)v256);
                v262 = v255;
                do
                {
                  v263 = *v261++;
                  v260 |= v263;
                  *(_BYTE *)v253 = v260;
                  --v262;
                }
                while (v262 > 1);
              }
              v251 = (int *)((char *)v251 + 1);
              v253 = (int *)((char *)v253 + 1);
            }
            while (v251 != v158);
          }
          goto LABEL_1747;
        }
        if (!v158)
          goto LABEL_1747;
        v159 = 0;
        v160 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
        while (1)
        {
          v1259 = 0;
          v161 = 0;
          if ((v160 & 0x80000000) == 0)
          {
            v162 = v160;
            v163 = v159;
            do
            {
              v164 = ldiv(v163, v98[v162]);
              v163 = v164.quot;
              v161 += (_QWORD)v99[v162--] * v164.rem;
            }
            while (v162 != -1);
          }
          v1259 = v161;
          *(_BYTE *)v1260 = 0;
          v1273 = 0;
          v165 = operator new(0x30uLL);
          *v165 = &off_251346C78;
          v165[1] = &v1257;
          v165[2] = &__len;
          v165[3] = &v1259;
          v165[4] = &v1260;
          v165[5] = &v1271;
          v1273 = v165;
          v1281 = 0;
          v166 = (void **)operator new(0x28uLL);
          *v166 = &off_251346A78;
          v166[1] = &v1266;
          v166[2] = &v1268;
          v166[3] = v1280;
          v166[4] = v1272;
          v1276 = v166;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
          v167 = v1276;
          if (v1276 == (void **)&v1274)
          {
            v167 = (void **)&v1274;
            v168 = 4;
          }
          else
          {
            if (!v1276)
              goto LABEL_202;
            v168 = 5;
          }
          (*((void (**)(void))*v167 + v168))();
LABEL_202:
          LODWORD(v1274) = 0;
          LODWORD(__b) = 0;
          if (!v1281)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
          v169 = v1281;
          if (v1281 == v1280)
          {
            v169 = v1280;
            v170 = 4;
          }
          else
          {
            if (!v1281)
              goto LABEL_208;
            v170 = 5;
          }
          (*(void (**)(void))(*v169 + 8 * v170))();
LABEL_208:
          v171 = v1273;
          if (v1273 == v1272)
          {
            v171 = v1272;
            v172 = 4;
            goto LABEL_212;
          }
          if (v1273)
          {
            v172 = 5;
LABEL_212:
            (*(void (**)(void))(*v171 + 8 * v172))();
          }
          ++v159;
          v1260 = (int *)((char *)v1260 + 1);
          if ((unint64_t)(*a2)[6] <= v159)
            goto LABEL_1747;
        }
      }
      if (v1265 == 2)
      {
        v192 = v1267;
        if (v1267 - (_BYTE *)v1266 == 4)
        {
          v608 = *((int *)v1267 - 1);
          v609 = *((_QWORD *)v1269 - 1);
          v1267 -= 4;
          v1269 -= 8;
          v610 = (*a2)[6];
          if (v610)
          {
            LODWORD(v611) = 0;
            v612 = (*a2)[19];
            v613 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            do
            {
              if (v609)
                bzero(v612, v609);
              if ((int)v608 >= 1)
              {
                v614 = 0;
                v615 = v613;
                do
                {
                  if (v609)
                  {
                    for (k = 0; k != v609; ++k)
                      *((_BYTE *)v612 + k) |= *(_BYTE *)(v615 + k);
                    v615 += k;
                  }
                  ++v614;
                }
                while (v614 != (_DWORD)v608);
              }
              v613 += v609 * v608;
              v612 = (int *)((char *)v612 + v609);
              v611 = (int)v611 + (int)v609;
            }
            while (v611 < (unint64_t)v610);
          }
          goto LABEL_1751;
        }
LABEL_839:
        v1259 = 0;
        v1259 = *((_DWORD *)v192 - 1);
        __len = 0;
        v617 = *((_QWORD *)v1269 - 1);
        v1267 = v192 - 4;
        v1269 -= 8;
        v1260 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v617;
        __b = (*a2)[19];
        v98 = v1274;
        v99 = v1276;
        v618 = (unint64_t)(*a2)[6];
        if (v1267 == v1266)
        {
          if (v618)
          {
            v747 = 0;
            v748 = (char *)__b;
            v749 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            v750 = __len;
            v1247 = v1260;
            v751 = v1259;
            do
            {
              v752 = 0;
              if ((v749 & 0x80000000) == 0)
              {
                v753 = v749;
                v754 = v747;
                do
                {
                  v755 = ldiv(v754, v98[v753]);
                  v754 = v755.quot;
                  v752 += (_QWORD)v99[v753--] * v755.rem;
                }
                while (v753 != -1);
              }
              if (v750)
                bzero(v748, v750);
              if (v751 >= 1)
              {
                v756 = 0;
                v757 = (char *)v1247 + (int)v752;
                do
                {
                  if (v750)
                  {
                    for (m = 0; m != v750; ++m)
                      v748[m] |= v757[m];
                    v757 += m;
                  }
                  ++v756;
                }
                while (v756 != v751);
              }
              v748 += v750;
              v747 += v750;
            }
            while (v618 > v747);
          }
          goto LABEL_1747;
        }
        if (!v618)
          goto LABEL_1747;
        v619 = 0;
        v620 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
        while (1)
        {
          v1257 = 0;
          v621 = 0;
          if ((v620 & 0x80000000) == 0)
          {
            v622 = v620;
            v623 = v619;
            do
            {
              v624 = ldiv(v623, v98[v622]);
              v623 = v624.quot;
              v621 += (_QWORD)v99[v622--] * v624.rem;
            }
            while (v622 != -1);
          }
          v1257 = v621;
          if (__len)
            bzero(__b, __len);
          v1273 = 0;
          v625 = operator new(0x38uLL);
          *v625 = &off_251346CF8;
          v625[1] = &v1270;
          v625[2] = &v1260;
          v625[3] = &v1257;
          v625[4] = &__b;
          v625[5] = &v1259;
          v625[6] = &__len;
          v1273 = v625;
          v1281 = 0;
          v626 = (void **)operator new(0x28uLL);
          *v626 = &off_251346A78;
          v626[1] = &v1266;
          v626[2] = &v1268;
          v626[3] = v1280;
          v626[4] = v1272;
          v1276 = v626;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
          v627 = v1276;
          if (v1276 == (void **)&v1274)
          {
            v627 = (void **)&v1274;
            v628 = 4;
          }
          else
          {
            if (!v1276)
              goto LABEL_852;
            v628 = 5;
          }
          (*((void (**)(void))*v627 + v628))();
LABEL_852:
          LODWORD(v1274) = 0;
          v1271 = 0;
          if (!v1281)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
          v629 = v1281;
          if (v1281 == v1280)
          {
            v629 = v1280;
            v630 = 4;
          }
          else
          {
            if (!v1281)
              goto LABEL_858;
            v630 = 5;
          }
          (*(void (**)(void))(*v629 + 8 * v630))();
LABEL_858:
          v631 = v1273;
          if (v1273 == v1272)
          {
            v631 = v1272;
            v632 = 4;
            goto LABEL_862;
          }
          if (v1273)
          {
            v632 = 5;
LABEL_862:
            (*(void (**)(void))(*v631 + 8 * v632))();
          }
          __b = (char *)__b + __len;
          v619 += __len;
          if ((unint64_t)(*a2)[6] <= v619)
            goto LABEL_1747;
        }
      }
      if (v1265 != 5)
      {
        if (v1265 != 4)
          goto LABEL_1751;
        v192 = v1267;
        goto LABEL_839;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v539 = (*a2)[19];
      v98 = v1274;
      v99 = v1276;
      if (!(*a2)[6])
        goto LABEL_1747;
      v540 = 0;
      v541 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
      while (1)
      {
        LODWORD(__b) = 0;
        v542 = 0;
        if ((v541 & 0x80000000) == 0)
        {
          v543 = v541;
          v544 = v540;
          do
          {
            v545 = ldiv(v544, v98[v543]);
            v544 = v545.quot;
            v542 += (_QWORD)v99[v543--] * v545.rem;
          }
          while (v543 != -1);
        }
        LODWORD(__b) = v542;
        LOBYTE(v1259) = 0;
        v1273 = 0;
        v546 = operator new(0x28uLL);
        *v546 = &off_251346D78;
        v546[1] = &v1271;
        v546[2] = &v1259;
        v546[3] = &__len;
        v546[4] = &__b;
        v1273 = v546;
        v1281 = 0;
        v547 = (void **)operator new(0x28uLL);
        *v547 = &off_251346A78;
        v547[1] = &v1266;
        v547[2] = &v1268;
        v547[3] = v1280;
        v547[4] = v1272;
        v1276 = v547;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
        v548 = v1276;
        if (v1276 == (void **)&v1274)
        {
          v548 = (void **)&v1274;
          v549 = 4;
        }
        else
        {
          if (!v1276)
            goto LABEL_720;
          v549 = 5;
        }
        (*((void (**)(void))*v548 + v549))();
LABEL_720:
        LODWORD(v1274) = 0;
        LODWORD(v1260) = 0;
        if (!v1281)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
        v550 = v1281;
        if (v1281 == v1280)
        {
          v550 = v1280;
          v551 = 4;
        }
        else
        {
          if (!v1281)
            goto LABEL_726;
          v551 = 5;
        }
        (*(void (**)(void))(*v550 + 8 * v551))();
LABEL_726:
        v552 = v1273;
        if (v1273 == v1272)
        {
          v552 = v1272;
          v553 = 4;
          goto LABEL_730;
        }
        if (v1273)
        {
          v553 = 5;
LABEL_730:
          (*(void (**)(void))(*v552 + 8 * v553))();
        }
        *(_BYTE *)v539 = v1259;
        v539 = (int *)((char *)v539 + 1);
        if ((unint64_t)(*a2)[6] <= ++v540)
          goto LABEL_1747;
      }
    case 2:
      v13 = *a2;
      v14 = (*a2)[7];
      switch((int)v14)
      {
        case 0:
          v15 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1277 = &unk_2513463C8;
          v1278 = mlx::core::allocator::free;
          v1279 = &v1277;
          mlx::core::array::set_data(a2, (uint64_t)v15, (uint64_t)&v1277);
          v16 = v1279;
          if (v1279 == &v1277)
          {
            v17 = 4;
            v16 = &v1277;
          }
          else
          {
            if (!v1279)
              goto LABEL_361;
            v17 = 5;
          }
          (*((void (**)(void))*v16 + v17))();
LABEL_361:
          v1263 = 0;
          v1264 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1263 = __p;
            operator delete(__p);
          }
          if (v1265 == 1)
          {
            v347 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v348 = (*a2)[6];
              if (v348)
              {
                v349 = 0;
                v350 = *(int *)v1266;
                v351 = (BOOL *)(*a2)[19];
                v352 = *(char **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v351 = 0;
                  if ((int)v350 >= 1)
                  {
                    v353 = 0;
                    v354 = v350 + 1;
                    v355 = v352;
                    do
                    {
                      v356 = *v355++;
                      v353 = v353 != -v356;
                      *v351 = v353;
                      --v354;
                    }
                    while (v354 > 1);
                  }
                  v349 = (int *)((char *)v349 + 1);
                  ++v351;
                  v352 += v350;
                }
                while (v349 != v348);
              }
              goto LABEL_1751;
            }
            goto LABEL_637;
          }
          if (!v1265)
          {
            v293 = (BOOL *)(*a2)[19];
            *v293 = 0;
            v294 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v294 >= 1)
            {
              v295 = 0;
              v296 = *(char **)(*(_QWORD *)a1 + 152);
              v297 = v294 + 1;
              do
              {
                v298 = *v296++;
                v295 = v295 != -v298;
                *v293 = v295;
                --v297;
              }
              while (v297 > 1);
            }
            goto LABEL_1751;
          }
          if ((v1265 & 0xFFFFFFFD) == 1)
          {
            v347 = v1267;
LABEL_637:
            v1271 = 0;
            v1271 = *((_DWORD *)v347 - 1);
            v1267 = v347 - 4;
            v1269 -= 8;
            v492 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1260 = (*a2)[19];
            __len = v492;
            v98 = v1274;
            v99 = v1276;
            v493 = (*a2)[6];
            if (v1267 == v1266)
            {
              if (v493)
              {
                v813 = 0;
                v814 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                v815 = (BOOL *)v1260;
                v1249 = __len;
                v816 = v1271;
                v817 = v1271 + 1;
                do
                {
                  v818 = 0;
                  if ((v814 & 0x80000000) == 0)
                  {
                    v819 = v814;
                    v820 = (int)v813;
                    do
                    {
                      v821 = ldiv(v820, v98[v819]);
                      v820 = v821.quot;
                      v818 += (_QWORD)v99[v819--] * v821.rem;
                    }
                    while (v819 != -1);
                  }
                  *v815 = 0;
                  if (v816 >= 1)
                  {
                    v822 = 0;
                    v823 = (char *)(v1249 + (int)v818);
                    v824 = v817;
                    do
                    {
                      v825 = *v823++;
                      v822 = v822 != -v825;
                      *v815 = v822;
                      --v824;
                    }
                    while (v824 > 1);
                  }
                  v813 = (int *)((char *)v813 + 1);
                  ++v815;
                }
                while (v813 != v493);
              }
              goto LABEL_1747;
            }
            if (!v493)
              goto LABEL_1747;
            v494 = 0;
            v495 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1259 = 0;
              v496 = 0;
              if ((v495 & 0x80000000) == 0)
              {
                v497 = v495;
                v498 = v494;
                do
                {
                  v499 = ldiv(v498, v98[v497]);
                  v498 = v499.quot;
                  v496 += (_QWORD)v99[v497--] * v499.rem;
                }
                while (v497 != -1);
              }
              v1259 = v496;
              *(_BYTE *)v1260 = 0;
              v1273 = 0;
              v500 = operator new(0x30uLL);
              *v500 = &off_251346DF8;
              v500[1] = &v1257;
              v500[2] = &__len;
              v500[3] = &v1259;
              v500[4] = &v1260;
              v500[5] = &v1271;
              v1273 = v500;
              v1281 = 0;
              v501 = (void **)operator new(0x28uLL);
              *v501 = &off_251346A78;
              v501[1] = &v1266;
              v501[2] = &v1268;
              v501[3] = v1280;
              v501[4] = v1272;
              v1276 = v501;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v502 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v502 = (void **)&v1274;
                v503 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_648;
                v503 = 5;
              }
              (*((void (**)(void))*v502 + v503))();
LABEL_648:
              LODWORD(v1274) = 0;
              LODWORD(__b) = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
              v504 = v1281;
              if (v1281 == v1280)
              {
                v504 = v1280;
                v505 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_654;
                v505 = 5;
              }
              (*(void (**)(void))(*v504 + 8 * v505))();
LABEL_654:
              v506 = v1273;
              if (v1273 == v1272)
              {
                v506 = v1272;
                v507 = 4;
                goto LABEL_658;
              }
              if (v1273)
              {
                v507 = 5;
LABEL_658:
                (*(void (**)(void))(*v506 + 8 * v507))();
              }
              ++v494;
              v1260 = (int *)((char *)v1260 + 1);
              if ((unint64_t)(*a2)[6] <= v494)
                goto LABEL_1747;
            }
          }
          if (v1265 == 2)
          {
            v774 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v1013 = *((int *)v1267 - 1);
              v1014 = *((_QWORD *)v1269 - 1);
              v1267 -= 4;
              v1269 -= 8;
              v1015 = (*a2)[6];
              if (v1015)
              {
                LODWORD(v1016) = 0;
                v1017 = (*a2)[19];
                v1018 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1014)
                    bzero(v1017, v1014);
                  if ((int)v1013 >= 1)
                  {
                    v1019 = 0;
                    v1020 = v1018;
                    do
                    {
                      if (v1014)
                      {
                        for (n = 0; n != v1014; ++n)
                          *((_BYTE *)v1017 + n) = *((unsigned __int8 *)v1017 + n) != -*(_BYTE *)(v1020 + n);
                        v1020 += n;
                      }
                      ++v1019;
                    }
                    while (v1019 != (_DWORD)v1013);
                  }
                  v1018 += v1014 * v1013;
                  v1017 = (int *)((char *)v1017 + v1014);
                  v1016 = (int)v1016 + (int)v1014;
                }
                while (v1016 < (unint64_t)v1015);
              }
              goto LABEL_1751;
            }
LABEL_1434:
            v1259 = 0;
            v1259 = *((_DWORD *)v774 - 1);
            __len = 0;
            v1022 = *((_QWORD *)v1269 - 1);
            v1267 = v774 - 4;
            v1269 -= 8;
            v1260 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1022;
            __b = (*a2)[19];
            v98 = v1274;
            v99 = v1276;
            v1023 = (unint64_t)(*a2)[6];
            if (v1267 == v1266)
            {
              if (v1023)
              {
                v1184 = 0;
                v1185 = (unsigned __int8 *)__b;
                v1186 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                v1187 = __len;
                v1254 = v1260;
                v1188 = v1259;
                do
                {
                  v1189 = 0;
                  if ((v1186 & 0x80000000) == 0)
                  {
                    v1190 = v1186;
                    v1191 = v1184;
                    do
                    {
                      v1192 = ldiv(v1191, v98[v1190]);
                      v1191 = v1192.quot;
                      v1189 += (_QWORD)v99[v1190--] * v1192.rem;
                    }
                    while (v1190 != -1);
                  }
                  if (v1187)
                    bzero(v1185, v1187);
                  if (v1188 >= 1)
                  {
                    v1193 = 0;
                    v1194 = (char *)v1254 + (int)v1189;
                    do
                    {
                      if (v1187)
                      {
                        for (ii = 0; ii != v1187; ++ii)
                          v1185[ii] = v1185[ii] != -v1194[ii];
                        v1194 += ii;
                      }
                      ++v1193;
                    }
                    while (v1193 != v1188);
                  }
                  v1185 += v1187;
                  v1184 += v1187;
                }
                while (v1023 > v1184);
              }
              goto LABEL_1747;
            }
            if (!v1023)
              goto LABEL_1747;
            v1024 = 0;
            v1025 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1257 = 0;
              v1026 = 0;
              if ((v1025 & 0x80000000) == 0)
              {
                v1027 = v1025;
                v1028 = v1024;
                do
                {
                  v1029 = ldiv(v1028, v98[v1027]);
                  v1028 = v1029.quot;
                  v1026 += (_QWORD)v99[v1027--] * v1029.rem;
                }
                while (v1027 != -1);
              }
              v1257 = v1026;
              if (__len)
                bzero(__b, __len);
              v1273 = 0;
              v1030 = operator new(0x38uLL);
              *v1030 = &off_251346E78;
              v1030[1] = &v1270;
              v1030[2] = &v1260;
              v1030[3] = &v1257;
              v1030[4] = &__b;
              v1030[5] = &v1259;
              v1030[6] = &__len;
              v1273 = v1030;
              v1281 = 0;
              v1031 = (void **)operator new(0x28uLL);
              *v1031 = &off_251346A78;
              v1031[1] = &v1266;
              v1031[2] = &v1268;
              v1031[3] = v1280;
              v1031[4] = v1272;
              v1276 = v1031;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v1032 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v1032 = (void **)&v1274;
                v1033 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_1447;
                v1033 = 5;
              }
              (*((void (**)(void))*v1032 + v1033))();
LABEL_1447:
              LODWORD(v1274) = 0;
              v1271 = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
              v1034 = v1281;
              if (v1281 == v1280)
              {
                v1034 = v1280;
                v1035 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_1453;
                v1035 = 5;
              }
              (*(void (**)(void))(*v1034 + 8 * v1035))();
LABEL_1453:
              v1036 = v1273;
              if (v1273 == v1272)
              {
                v1036 = v1272;
                v1037 = 4;
                goto LABEL_1457;
              }
              if (v1273)
              {
                v1037 = 5;
LABEL_1457:
                (*(void (**)(void))(*v1036 + 8 * v1037))();
              }
              __b = (char *)__b + __len;
              v1024 += __len;
              if ((unint64_t)(*a2)[6] <= v1024)
                goto LABEL_1747;
            }
          }
          if (v1265 != 5)
          {
            if (v1265 != 4)
              goto LABEL_1751;
            v774 = v1267;
            goto LABEL_1434;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v959 = (*a2)[19];
          v98 = v1274;
          v99 = v1276;
          if (!(*a2)[6])
            goto LABEL_1747;
          v960 = 0;
          v961 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v962 = 0;
            if ((v961 & 0x80000000) == 0)
            {
              v963 = v961;
              v964 = v960;
              do
              {
                v965 = ldiv(v964, v98[v963]);
                v964 = v965.quot;
                v962 += (_QWORD)v99[v963--] * v965.rem;
              }
              while (v963 != -1);
            }
            LODWORD(__b) = v962;
            LOBYTE(v1259) = 0;
            v1273 = 0;
            v966 = operator new(0x28uLL);
            *v966 = &off_251346EF8;
            v966[1] = &v1271;
            v966[2] = &v1259;
            v966[3] = &__len;
            v966[4] = &__b;
            v1273 = v966;
            v1281 = 0;
            v967 = (void **)operator new(0x28uLL);
            *v967 = &off_251346A78;
            v967[1] = &v1266;
            v967[2] = &v1268;
            v967[3] = v1280;
            v967[4] = v1272;
            v1276 = v967;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
            v968 = v1276;
            if (v1276 == (void **)&v1274)
            {
              v968 = (void **)&v1274;
              v969 = 4;
            }
            else
            {
              if (!v1276)
                goto LABEL_1344;
              v969 = 5;
            }
            (*((void (**)(void))*v968 + v969))();
LABEL_1344:
            LODWORD(v1274) = 0;
            LODWORD(v1260) = 0;
            if (!v1281)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
            v970 = v1281;
            if (v1281 == v1280)
            {
              v970 = v1280;
              v971 = 4;
            }
            else
            {
              if (!v1281)
                goto LABEL_1350;
              v971 = 5;
            }
            (*(void (**)(void))(*v970 + 8 * v971))();
LABEL_1350:
            v972 = v1273;
            if (v1273 == v1272)
            {
              v972 = v1272;
              v973 = 4;
              goto LABEL_1354;
            }
            if (v1273)
            {
              v973 = 5;
LABEL_1354:
              (*(void (**)(void))(*v972 + 8 * v973))();
            }
            *(_BYTE *)v959 = v1259;
            v959 = (int *)((char *)v959 + 1);
            if ((unint64_t)(*a2)[6] <= ++v960)
              goto LABEL_1747;
          }
        case 1:
          v203 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1277 = &unk_2513463C8;
          v1278 = mlx::core::allocator::free;
          v1279 = &v1277;
          mlx::core::array::set_data(a2, (uint64_t)v203, (uint64_t)&v1277);
          v204 = v1279;
          if (v1279 == &v1277)
          {
            v205 = 4;
            v204 = &v1277;
          }
          else
          {
            if (!v1279)
              goto LABEL_371;
            v205 = 5;
          }
          (*((void (**)(void))*v204 + v205))();
LABEL_371:
          v1263 = 0;
          v1264 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1263 = __p;
            operator delete(__p);
          }
          if (v1265 == 1)
          {
            v357 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              if ((*a2)[6])
              {
                v358 = 0;
                v359 = *(int *)v1266;
                v360 = (*a2)[19];
                v361 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *(_BYTE *)v360 = 0;
                  if ((int)v359 >= 1)
                  {
                    v362 = 0;
                    v363 = v359 + 1;
                    v364 = v361;
                    do
                    {
                      v365 = *v364++;
                      v362 += v365;
                      *(_BYTE *)v360 = v362;
                      --v363;
                    }
                    while (v363 > 1);
                  }
                  ++v358;
                  v360 = (int *)((char *)v360 + 1);
                  v361 += v359;
                }
                while ((unint64_t)(*a2)[6] > v358);
              }
              goto LABEL_1751;
            }
            goto LABEL_663;
          }
          if (!v1265)
          {
            v299 = (*a2)[19];
            *(_BYTE *)v299 = 0;
            v300 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v300 >= 1)
            {
              v301 = 0;
              v302 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v303 = v300 + 1;
              do
              {
                v304 = *v302++;
                v301 += v304;
                *(_BYTE *)v299 = v301;
                --v303;
              }
              while (v303 > 1);
            }
            goto LABEL_1751;
          }
          if ((v1265 & 0xFFFFFFFD) == 1)
          {
            v357 = v1267;
LABEL_663:
            v1271 = 0;
            v1271 = *((_DWORD *)v357 - 1);
            v1267 = v357 - 4;
            v1269 -= 8;
            v508 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1260 = (*a2)[19];
            __len = v508;
            v98 = v1274;
            v99 = v1276;
            v509 = (*a2)[6];
            if (v1267 == v1266)
            {
              if (v509)
              {
                v826 = 0;
                v827 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                do
                {
                  v828 = 0;
                  if ((v827 & 0x80000000) == 0)
                  {
                    v829 = v827;
                    v830 = v826;
                    do
                    {
                      v831 = ldiv(v830, v98[v829]);
                      v830 = v831.quot;
                      v828 += (_QWORD)v99[v829--] * v831.rem;
                    }
                    while (v829 != -1);
                  }
                  *(_BYTE *)v1260 = 0;
                  v832 = v1260;
                  if (v1271 >= 1)
                  {
                    v833 = (unsigned __int8 *)(__len + (int)v828);
                    v834 = *(unsigned __int8 *)v1260;
                    v835 = v1271 + 1;
                    do
                    {
                      v836 = *v833++;
                      v834 += v836;
                      *(_BYTE *)v832 = v834;
                      --v835;
                    }
                    while (v835 > 1);
                    v832 = v1260;
                  }
                  ++v826;
                  v1260 = (int *)((char *)v832 + 1);
                }
                while ((unint64_t)(*a2)[6] > v826);
              }
              goto LABEL_1747;
            }
            if (!v509)
              goto LABEL_1747;
            v510 = 0;
            v511 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1259 = 0;
              v512 = 0;
              if ((v511 & 0x80000000) == 0)
              {
                v513 = v511;
                v514 = v510;
                do
                {
                  v515 = ldiv(v514, v98[v513]);
                  v514 = v515.quot;
                  v512 += (_QWORD)v99[v513--] * v515.rem;
                }
                while (v513 != -1);
              }
              v1259 = v512;
              *(_BYTE *)v1260 = 0;
              v1273 = 0;
              v516 = operator new(0x30uLL);
              *v516 = &off_251346F78;
              v516[1] = &v1257;
              v516[2] = &__len;
              v516[3] = &v1259;
              v516[4] = &v1260;
              v516[5] = &v1271;
              v1273 = v516;
              v1281 = 0;
              v517 = (void **)operator new(0x28uLL);
              *v517 = &off_251346A78;
              v517[1] = &v1266;
              v517[2] = &v1268;
              v517[3] = v1280;
              v517[4] = v1272;
              v1276 = v517;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v518 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v518 = (void **)&v1274;
                v519 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_674;
                v519 = 5;
              }
              (*((void (**)(void))*v518 + v519))();
LABEL_674:
              LODWORD(v1274) = 0;
              LODWORD(__b) = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
              v520 = v1281;
              if (v1281 == v1280)
              {
                v520 = v1280;
                v521 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_680;
                v521 = 5;
              }
              (*(void (**)(void))(*v520 + 8 * v521))();
LABEL_680:
              v522 = v1273;
              if (v1273 == v1272)
              {
                v522 = v1272;
                v523 = 4;
                goto LABEL_684;
              }
              if (v1273)
              {
                v523 = 5;
LABEL_684:
                (*(void (**)(void))(*v522 + 8 * v523))();
              }
              ++v510;
              v1260 = (int *)((char *)v1260 + 1);
              if ((unint64_t)(*a2)[6] <= v510)
                goto LABEL_1747;
            }
          }
          if (v1265 == 2)
          {
            v775 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v1038 = *((int *)v1267 - 1);
              v1039 = *((_QWORD *)v1269 - 1);
              v1267 -= 4;
              v1269 -= 8;
              if ((*a2)[6])
              {
                LODWORD(v1040) = 0;
                v1041 = (*a2)[19];
                v1042 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1039)
                    bzero(v1041, v1039);
                  if ((int)v1038 >= 1)
                  {
                    v1043 = 0;
                    v1044 = v1042;
                    do
                    {
                      if (v1039)
                      {
                        for (jj = 0; jj != v1039; ++jj)
                          *((_BYTE *)v1041 + jj) += *(_BYTE *)(v1044 + jj);
                        v1044 += jj;
                      }
                      ++v1043;
                    }
                    while (v1043 != (_DWORD)v1038);
                  }
                  v1042 += v1039 * v1038;
                  v1041 = (int *)((char *)v1041 + v1039);
                  v1040 = (int)v1040 + (int)v1039;
                }
                while (v1040 < (unint64_t)(*a2)[6]);
              }
              goto LABEL_1751;
            }
LABEL_1474:
            v1259 = 0;
            v1259 = *((_DWORD *)v775 - 1);
            __len = 0;
            v1046 = *((_QWORD *)v1269 - 1);
            v1267 = v775 - 4;
            v1269 -= 8;
            v1260 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1046;
            __b = (*a2)[19];
            v98 = v1274;
            v99 = v1276;
            v1047 = (*a2)[6];
            if (v1267 == v1266)
            {
              if (v1047)
              {
                v1196 = 0;
                v1197 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                do
                {
                  v1198 = 0;
                  if ((v1197 & 0x80000000) != 0)
                  {
                    v1201 = a2;
                  }
                  else
                  {
                    v1199 = v1197;
                    v1200 = v1196;
                    v1201 = a2;
                    do
                    {
                      v1202 = ldiv(v1200, v98[v1199]);
                      v1200 = v1202.quot;
                      v1198 += (_QWORD)v99[v1199--] * v1202.rem;
                    }
                    while (v1199 != -1);
                  }
                  v1203 = __b;
                  if (__len)
                  {
                    bzero(__b, __len);
                    v1204 = __len;
                    v1203 = __b;
                  }
                  else
                  {
                    v1204 = 0;
                  }
                  v1205 = v1259;
                  if (v1259 >= 1)
                  {
                    v1206 = 0;
                    v1207 = (char *)v1260 + (int)v1198;
                    do
                    {
                      v1208 = v1204;
                      for (kk = v1203; v1208; --v1208)
                      {
                        v1210 = *v1207++;
                        *kk++ += v1210;
                      }
                      ++v1206;
                    }
                    while (v1206 != v1205);
                    v1204 = __len;
                    v1203 = __b;
                  }
                  __b = &v1203[v1204];
                  v1196 += v1204;
                }
                while ((unint64_t)(*v1201)[6] > v1196);
              }
              goto LABEL_1747;
            }
            if (!v1047)
              goto LABEL_1747;
            v1048 = 0;
            v1049 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1257 = 0;
              v1050 = 0;
              if ((v1049 & 0x80000000) == 0)
              {
                v1051 = v1049;
                v1052 = v1048;
                do
                {
                  v1053 = ldiv(v1052, v98[v1051]);
                  v1052 = v1053.quot;
                  v1050 += (_QWORD)v99[v1051--] * v1053.rem;
                }
                while (v1051 != -1);
              }
              v1257 = v1050;
              if (__len)
                bzero(__b, __len);
              v1273 = 0;
              v1054 = operator new(0x38uLL);
              *v1054 = &off_251346FF8;
              v1054[1] = &v1270;
              v1054[2] = &v1260;
              v1054[3] = &v1257;
              v1054[4] = &__b;
              v1054[5] = &v1259;
              v1054[6] = &__len;
              v1273 = v1054;
              v1281 = 0;
              v1055 = (void **)operator new(0x28uLL);
              *v1055 = &off_251346A78;
              v1055[1] = &v1266;
              v1055[2] = &v1268;
              v1055[3] = v1280;
              v1055[4] = v1272;
              v1276 = v1055;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v1056 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v1056 = (void **)&v1274;
                v1057 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_1487;
                v1057 = 5;
              }
              (*((void (**)(void))*v1056 + v1057))();
LABEL_1487:
              LODWORD(v1274) = 0;
              v1271 = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
              v1058 = v1281;
              if (v1281 == v1280)
              {
                v1058 = v1280;
                v1059 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_1493;
                v1059 = 5;
              }
              (*(void (**)(void))(*v1058 + 8 * v1059))();
LABEL_1493:
              v1060 = v1273;
              if (v1273 == v1272)
              {
                v1060 = v1272;
                v1061 = 4;
                goto LABEL_1497;
              }
              if (v1273)
              {
                v1061 = 5;
LABEL_1497:
                (*(void (**)(void))(*v1060 + 8 * v1061))();
              }
              __b = (char *)__b + __len;
              v1048 += __len;
              if ((unint64_t)(*a2)[6] <= v1048)
                goto LABEL_1747;
            }
          }
          if (v1265 != 5)
          {
            if (v1265 != 4)
              goto LABEL_1751;
            v775 = v1267;
            goto LABEL_1474;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v974 = (*a2)[19];
          v98 = v1274;
          v99 = v1276;
          if (!(*a2)[6])
            goto LABEL_1747;
          v975 = 0;
          v976 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v977 = 0;
            if ((v976 & 0x80000000) == 0)
            {
              v978 = v976;
              v979 = v975;
              do
              {
                v980 = ldiv(v979, v98[v978]);
                v979 = v980.quot;
                v977 += (_QWORD)v99[v978--] * v980.rem;
              }
              while (v978 != -1);
            }
            LODWORD(__b) = v977;
            LOBYTE(v1259) = 0;
            v1273 = 0;
            v981 = operator new(0x28uLL);
            *v981 = &off_251347078;
            v981[1] = &v1271;
            v981[2] = &v1259;
            v981[3] = &__len;
            v981[4] = &__b;
            v1273 = v981;
            v1281 = 0;
            v982 = (void **)operator new(0x28uLL);
            *v982 = &off_251346A78;
            v982[1] = &v1266;
            v982[2] = &v1268;
            v982[3] = v1280;
            v982[4] = v1272;
            v1276 = v982;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
            v983 = v1276;
            if (v1276 == (void **)&v1274)
            {
              v983 = (void **)&v1274;
              v984 = 4;
            }
            else
            {
              if (!v1276)
                goto LABEL_1367;
              v984 = 5;
            }
            (*((void (**)(void))*v983 + v984))();
LABEL_1367:
            LODWORD(v1274) = 0;
            LODWORD(v1260) = 0;
            if (!v1281)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
            v985 = v1281;
            if (v1281 == v1280)
            {
              v985 = v1280;
              v986 = 4;
            }
            else
            {
              if (!v1281)
                goto LABEL_1373;
              v986 = 5;
            }
            (*(void (**)(void))(*v985 + 8 * v986))();
LABEL_1373:
            v987 = v1273;
            if (v1273 == v1272)
            {
              v987 = v1272;
              v988 = 4;
              goto LABEL_1377;
            }
            if (v1273)
            {
              v988 = 5;
LABEL_1377:
              (*(void (**)(void))(*v987 + 8 * v988))();
            }
            *(_BYTE *)v974 = v1259;
            v974 = (int *)((char *)v974 + 1);
            if ((unint64_t)(*a2)[6] <= ++v975)
              goto LABEL_1747;
          }
        case 2:
          v197 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1277 = &unk_2513463C8;
          v1278 = mlx::core::allocator::free;
          v1279 = &v1277;
          mlx::core::array::set_data(a2, (uint64_t)v197, (uint64_t)&v1277);
          v198 = v1279;
          if (v1279 == &v1277)
          {
            v199 = 4;
            v198 = &v1277;
          }
          else
          {
            if (!v1279)
              goto LABEL_341;
            v199 = 5;
          }
          (*((void (**)(void))*v198 + v199))();
LABEL_341:
          v1263 = 0;
          v1264 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1263 = __p;
            operator delete(__p);
          }
          if (v1265 == 1)
          {
            v328 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v329 = (*a2)[6];
              if (v329)
              {
                v330 = 0;
                v331 = *(int *)v1266;
                v332 = (*a2)[19];
                v333 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v332 = 0;
                  if ((int)v331 >= 1)
                  {
                    v334 = 0;
                    v335 = v331 + 1;
                    v336 = v333;
                    do
                    {
                      v337 = *v336++;
                      v334 += v337;
                      --v335;
                    }
                    while (v335 > 1);
                    *v332 = v334;
                  }
                  v330 = (int *)((char *)v330 + 1);
                  ++v332;
                  v333 += v331;
                }
                while (v330 != v329);
              }
              goto LABEL_1751;
            }
            goto LABEL_562;
          }
          if (!v1265)
          {
            v277 = (*a2)[19];
            *v277 = 0;
            v283 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v283 < 1)
              goto LABEL_1751;
            v279 = 0;
            v284 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            v285 = v283 + 1;
            do
            {
              v286 = *v284++;
              v279 += v286;
              --v285;
            }
            while (v285 > 1);
LABEL_348:
            *v277 = v279;
            goto LABEL_1751;
          }
          if ((v1265 & 0xFFFFFFFD) == 1)
          {
            v328 = v1267;
LABEL_562:
            v1271 = 0;
            v1271 = *((_DWORD *)v328 - 1);
            v1267 = v328 - 4;
            v1269 -= 8;
            v445 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1260 = (*a2)[19];
            __len = v445;
            v98 = v1274;
            v99 = v1276;
            v446 = (*a2)[6];
            if (v1267 == v1266)
            {
              if (v446)
              {
                v790 = 0;
                v791 = v1260;
                v792 = __len;
                v793 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                do
                {
                  v794 = 0;
                  if ((v793 & 0x80000000) == 0)
                  {
                    v795 = v793;
                    v796 = (int)v790;
                    do
                    {
                      v797 = ldiv(v796, v98[v795]);
                      v796 = v797.quot;
                      v794 += (_QWORD)v99[v795--] * v797.rem;
                    }
                    while (v795 != -1);
                  }
                  *v791 = 0;
                  if (v1271 >= 1)
                  {
                    v798 = 0;
                    v799 = (unsigned __int8 *)(v792 + (int)v794);
                    v800 = v1271 + 1;
                    do
                    {
                      v801 = *v799++;
                      v798 += v801;
                      --v800;
                    }
                    while (v800 > 1);
                    *v791 = v798;
                  }
                  v790 = (int *)((char *)v790 + 1);
                  ++v791;
                }
                while (v790 != v446);
              }
              goto LABEL_1747;
            }
            if (!v446)
              goto LABEL_1747;
            v447 = 0;
            v448 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1259 = 0;
              v449 = 0;
              if ((v448 & 0x80000000) == 0)
              {
                v450 = v448;
                v451 = v447;
                do
                {
                  v452 = ldiv(v451, v98[v450]);
                  v451 = v452.quot;
                  v449 += (_QWORD)v99[v450--] * v452.rem;
                }
                while (v450 != -1);
              }
              v1259 = v449;
              *v1260 = 0;
              v1273 = 0;
              v453 = operator new(0x30uLL);
              *v453 = &off_2513470F8;
              v453[1] = &v1257;
              v453[2] = &__len;
              v453[3] = &v1259;
              v453[4] = &v1260;
              v453[5] = &v1271;
              v1273 = v453;
              v1281 = 0;
              v454 = (void **)operator new(0x28uLL);
              *v454 = &off_251346A78;
              v454[1] = &v1266;
              v454[2] = &v1268;
              v454[3] = v1280;
              v454[4] = v1272;
              v1276 = v454;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v455 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v455 = (void **)&v1274;
                v456 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_573;
                v456 = 5;
              }
              (*((void (**)(void))*v455 + v456))();
LABEL_573:
              LODWORD(v1274) = 0;
              LODWORD(__b) = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
              v457 = v1281;
              if (v1281 == v1280)
              {
                v457 = v1280;
                v458 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_579;
                v458 = 5;
              }
              (*(void (**)(void))(*v457 + 8 * v458))();
LABEL_579:
              v459 = v1273;
              if (v1273 == v1272)
              {
                v459 = v1272;
                v460 = 4;
                goto LABEL_583;
              }
              if (v1273)
              {
                v460 = 5;
LABEL_583:
                (*(void (**)(void))(*v459 + 8 * v460))();
              }
              ++v447;
              ++v1260;
              if ((unint64_t)(*a2)[6] <= v447)
                goto LABEL_1747;
            }
          }
          if (v1265 == 2)
          {
            v772 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v919 = *((int *)v1267 - 1);
              v920 = *((_QWORD *)v1269 - 1);
              v1267 -= 4;
              v1269 -= 8;
              v921 = (*a2)[6];
              if (v921)
              {
                LODWORD(v922) = 0;
                v923 = (*a2)[19];
                v924 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v920)
                    bzero(v923, 4 * v920);
                  if ((int)v919 >= 1)
                  {
                    v925 = 0;
                    v926 = v924;
                    do
                    {
                      if (v920)
                      {
                        for (mm = 0; mm != v920; ++mm)
                          v923[mm] += *(unsigned __int8 *)(v926 + mm);
                        v926 += mm;
                      }
                      ++v925;
                    }
                    while (v925 != (_DWORD)v919);
                  }
                  v924 += v920 * v919;
                  v923 += v920;
                  v922 = (int)v922 + (int)v920;
                }
                while (v922 < (unint64_t)v921);
              }
              goto LABEL_1751;
            }
LABEL_1285:
            v1259 = 0;
            v1259 = *((_DWORD *)v772 - 1);
            __len = 0;
            v928 = *((_QWORD *)v1269 - 1);
            v1267 = v772 - 4;
            v1269 -= 8;
            v1260 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v928;
            __b = (*a2)[19];
            v98 = v1274;
            v99 = v1276;
            v929 = (unint64_t)(*a2)[6];
            if (v1267 == v1266)
            {
              if (v929)
              {
                v1156 = 0;
                v1157 = (char *)__b;
                v1158 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                v1159 = __len;
                v1253 = v1260;
                v1160 = 4 * __len;
                do
                {
                  v1161 = 0;
                  if ((v1158 & 0x80000000) == 0)
                  {
                    v1162 = v1158;
                    v1163 = v1156;
                    do
                    {
                      v1164 = ldiv(v1163, v98[v1162]);
                      v1163 = v1164.quot;
                      v1161 += (_QWORD)v99[v1162--] * v1164.rem;
                    }
                    while (v1162 != -1);
                  }
                  if (v1159)
                    bzero(v1157, v1160);
                  v1165 = v1259;
                  if (v1259 >= 1)
                  {
                    v1166 = 0;
                    v1167 = (char *)v1253 + (int)v1161;
                    do
                    {
                      if (v1159)
                      {
                        for (nn = 0; nn != v1159; ++nn)
                          *(_DWORD *)&v1157[4 * nn] += v1167[nn];
                        v1167 += nn;
                      }
                      ++v1166;
                    }
                    while (v1166 != v1165);
                  }
                  v1157 += v1160;
                  v1156 += v1159;
                }
                while (v929 > v1156);
              }
              goto LABEL_1747;
            }
            if (!v929)
              goto LABEL_1747;
            v930 = 0;
            v931 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1257 = 0;
              v932 = 0;
              if ((v931 & 0x80000000) == 0)
              {
                v933 = v931;
                v934 = v930;
                do
                {
                  v935 = ldiv(v934, v98[v933]);
                  v934 = v935.quot;
                  v932 += (_QWORD)v99[v933--] * v935.rem;
                }
                while (v933 != -1);
              }
              v1257 = v932;
              if (__len)
                bzero(__b, 4 * __len);
              v1273 = 0;
              v936 = operator new(0x38uLL);
              *v936 = &off_251347178;
              v936[1] = &v1270;
              v936[2] = &v1260;
              v936[3] = &v1257;
              v936[4] = &__b;
              v936[5] = &v1259;
              v936[6] = &__len;
              v1273 = v936;
              v1281 = 0;
              v937 = (void **)operator new(0x28uLL);
              *v937 = &off_251346A78;
              v937[1] = &v1266;
              v937[2] = &v1268;
              v937[3] = v1280;
              v937[4] = v1272;
              v1276 = v937;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v938 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v938 = (void **)&v1274;
                v939 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_1298;
                v939 = 5;
              }
              (*((void (**)(void))*v938 + v939))();
LABEL_1298:
              LODWORD(v1274) = 0;
              v1271 = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
              v940 = v1281;
              if (v1281 == v1280)
              {
                v940 = v1280;
                v941 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_1304;
                v941 = 5;
              }
              (*(void (**)(void))(*v940 + 8 * v941))();
LABEL_1304:
              v942 = v1273;
              if (v1273 == v1272)
              {
                v942 = v1272;
                v943 = 4;
                goto LABEL_1308;
              }
              if (v1273)
              {
                v943 = 5;
LABEL_1308:
                (*(void (**)(void))(*v942 + 8 * v943))();
              }
              __b = (char *)__b + 4 * __len;
              v930 += __len;
              if ((unint64_t)(*a2)[6] <= v930)
                goto LABEL_1747;
            }
          }
          if (v1265 != 5)
          {
            if (v1265 != 4)
              goto LABEL_1751;
            v772 = v1267;
            goto LABEL_1285;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v904 = (*a2)[19];
          v98 = v1274;
          v99 = v1276;
          if (!(*a2)[6])
            goto LABEL_1747;
          v905 = 0;
          v906 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v907 = 0;
            if ((v906 & 0x80000000) == 0)
            {
              v908 = v906;
              v909 = v905;
              do
              {
                v910 = ldiv(v909, v98[v908]);
                v909 = v910.quot;
                v907 += (_QWORD)v99[v908--] * v910.rem;
              }
              while (v908 != -1);
            }
            LODWORD(__b) = v907;
            v1271 = 0;
            v1273 = 0;
            v911 = operator new(0x28uLL);
            *v911 = &off_2513471F8;
            v911[1] = &v1259;
            v911[2] = &v1271;
            v911[3] = &__len;
            v911[4] = &__b;
            v1273 = v911;
            v1281 = 0;
            v912 = (void **)operator new(0x28uLL);
            *v912 = &off_251346A78;
            v912[1] = &v1266;
            v912[2] = &v1268;
            v912[3] = v1280;
            v912[4] = v1272;
            v1276 = v912;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
            v913 = v1276;
            if (v1276 == (void **)&v1274)
            {
              v913 = (void **)&v1274;
              v914 = 4;
            }
            else
            {
              if (!v1276)
                goto LABEL_1258;
              v914 = 5;
            }
            (*((void (**)(void))*v913 + v914))();
LABEL_1258:
            LODWORD(v1274) = 0;
            LODWORD(v1260) = 0;
            if (!v1281)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
            v915 = v1281;
            if (v1281 == v1280)
            {
              v915 = v1280;
              v916 = 4;
            }
            else
            {
              if (!v1281)
                goto LABEL_1264;
              v916 = 5;
            }
            (*(void (**)(void))(*v915 + 8 * v916))();
LABEL_1264:
            v917 = v1273;
            if (v1273 == v1272)
            {
              v917 = v1272;
              v918 = 4;
              goto LABEL_1268;
            }
            if (v1273)
            {
              v918 = 5;
LABEL_1268:
              (*(void (**)(void))(*v917 + 8 * v918))();
            }
            *v904++ = v1271;
            if ((unint64_t)(*a2)[6] <= ++v905)
              goto LABEL_1747;
          }
        case 3:
          v200 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1277 = &unk_2513463C8;
          v1278 = mlx::core::allocator::free;
          v1279 = &v1277;
          mlx::core::array::set_data(a2, (uint64_t)v200, (uint64_t)&v1277);
          v201 = v1279;
          if (v1279 == &v1277)
          {
            v202 = 4;
            v201 = &v1277;
          }
          else
          {
            if (!v1279)
              goto LABEL_351;
            v202 = 5;
          }
          (*((void (**)(void))*v201 + v202))();
LABEL_351:
          v1263 = 0;
          v1264 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1263 = __p;
            operator delete(__p);
          }
          if (v1265 == 1)
          {
            v338 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              if ((*a2)[6])
              {
                v339 = 0;
                v340 = *(int *)v1266;
                v341 = (*a2)[19];
                v342 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *(_BYTE *)v341 = 0;
                  if ((int)v340 >= 1)
                  {
                    v343 = 0;
                    v344 = v340 + 1;
                    v345 = v342;
                    do
                    {
                      v346 = *v345++;
                      v343 += v346;
                      *(_BYTE *)v341 = v343;
                      --v344;
                    }
                    while (v344 > 1);
                  }
                  ++v339;
                  v341 = (int *)((char *)v341 + 1);
                  v342 += v340;
                }
                while ((unint64_t)(*a2)[6] > v339);
              }
              goto LABEL_1751;
            }
            goto LABEL_588;
          }
          if (!v1265)
          {
            v287 = (*a2)[19];
            *(_BYTE *)v287 = 0;
            v288 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v288 >= 1)
            {
              v289 = 0;
              v290 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v291 = v288 + 1;
              do
              {
                v292 = *v290++;
                v289 += v292;
                *(_BYTE *)v287 = v289;
                --v291;
              }
              while (v291 > 1);
            }
            goto LABEL_1751;
          }
          if ((v1265 & 0xFFFFFFFD) == 1)
          {
            v338 = v1267;
LABEL_588:
            v1271 = 0;
            v1271 = *((_DWORD *)v338 - 1);
            v1267 = v338 - 4;
            v1269 -= 8;
            v461 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1260 = (*a2)[19];
            __len = v461;
            v98 = v1274;
            v99 = v1276;
            v462 = (*a2)[6];
            if (v1267 == v1266)
            {
              if (v462)
              {
                v802 = 0;
                v803 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                do
                {
                  v804 = 0;
                  if ((v803 & 0x80000000) == 0)
                  {
                    v805 = v803;
                    v806 = v802;
                    do
                    {
                      v807 = ldiv(v806, v98[v805]);
                      v806 = v807.quot;
                      v804 += (_QWORD)v99[v805--] * v807.rem;
                    }
                    while (v805 != -1);
                  }
                  *(_BYTE *)v1260 = 0;
                  v808 = v1260;
                  if (v1271 >= 1)
                  {
                    v809 = (unsigned __int8 *)(__len + (int)v804);
                    v810 = *(unsigned __int8 *)v1260;
                    v811 = v1271 + 1;
                    do
                    {
                      v812 = *v809++;
                      v810 += v812;
                      *(_BYTE *)v808 = v810;
                      --v811;
                    }
                    while (v811 > 1);
                    v808 = v1260;
                  }
                  ++v802;
                  v1260 = (int *)((char *)v808 + 1);
                }
                while ((unint64_t)(*a2)[6] > v802);
              }
              goto LABEL_1747;
            }
            if (!v462)
              goto LABEL_1747;
            v463 = 0;
            v464 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1259 = 0;
              v465 = 0;
              if ((v464 & 0x80000000) == 0)
              {
                v466 = v464;
                v467 = v463;
                do
                {
                  v468 = ldiv(v467, v98[v466]);
                  v467 = v468.quot;
                  v465 += (_QWORD)v99[v466--] * v468.rem;
                }
                while (v466 != -1);
              }
              v1259 = v465;
              *(_BYTE *)v1260 = 0;
              v1273 = 0;
              v469 = operator new(0x30uLL);
              *v469 = &off_251347278;
              v469[1] = &v1257;
              v469[2] = &__len;
              v469[3] = &v1259;
              v469[4] = &v1260;
              v469[5] = &v1271;
              v1273 = v469;
              v1281 = 0;
              v470 = (void **)operator new(0x28uLL);
              *v470 = &off_251346A78;
              v470[1] = &v1266;
              v470[2] = &v1268;
              v470[3] = v1280;
              v470[4] = v1272;
              v1276 = v470;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v471 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v471 = (void **)&v1274;
                v472 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_599;
                v472 = 5;
              }
              (*((void (**)(void))*v471 + v472))();
LABEL_599:
              LODWORD(v1274) = 0;
              LODWORD(__b) = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
              v473 = v1281;
              if (v1281 == v1280)
              {
                v473 = v1280;
                v474 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_605;
                v474 = 5;
              }
              (*(void (**)(void))(*v473 + 8 * v474))();
LABEL_605:
              v475 = v1273;
              if (v1273 == v1272)
              {
                v475 = v1272;
                v476 = 4;
                goto LABEL_609;
              }
              if (v1273)
              {
                v476 = 5;
LABEL_609:
                (*(void (**)(void))(*v475 + 8 * v476))();
              }
              ++v463;
              v1260 = (int *)((char *)v1260 + 1);
              if ((unint64_t)(*a2)[6] <= v463)
                goto LABEL_1747;
            }
          }
          if (v1265 == 2)
          {
            v773 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v989 = *((int *)v1267 - 1);
              v990 = *((_QWORD *)v1269 - 1);
              v1267 -= 4;
              v1269 -= 8;
              if ((*a2)[6])
              {
                LODWORD(v991) = 0;
                v992 = (*a2)[19];
                v993 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v990)
                    bzero(v992, v990);
                  if ((int)v989 >= 1)
                  {
                    v994 = 0;
                    v995 = v993;
                    do
                    {
                      if (v990)
                      {
                        for (i1 = 0; i1 != v990; ++i1)
                          *((_BYTE *)v992 + i1) += *(_BYTE *)(v995 + i1);
                        v995 += i1;
                      }
                      ++v994;
                    }
                    while (v994 != (_DWORD)v989);
                  }
                  v993 += v990 * v989;
                  v992 = (int *)((char *)v992 + v990);
                  v991 = (int)v991 + (int)v990;
                }
                while (v991 < (unint64_t)(*a2)[6]);
              }
              goto LABEL_1751;
            }
LABEL_1394:
            v1259 = 0;
            v1259 = *((_DWORD *)v773 - 1);
            __len = 0;
            v997 = *((_QWORD *)v1269 - 1);
            v1267 = v773 - 4;
            v1269 -= 8;
            v1260 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v997;
            __b = (*a2)[19];
            v98 = v1274;
            v99 = v1276;
            v998 = (*a2)[6];
            if (v1267 == v1266)
            {
              if (v998)
              {
                v1169 = 0;
                v1170 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                do
                {
                  v1171 = 0;
                  if ((v1170 & 0x80000000) != 0)
                  {
                    v1174 = a2;
                  }
                  else
                  {
                    v1172 = v1170;
                    v1173 = v1169;
                    v1174 = a2;
                    do
                    {
                      v1175 = ldiv(v1173, v98[v1172]);
                      v1173 = v1175.quot;
                      v1171 += (_QWORD)v99[v1172--] * v1175.rem;
                    }
                    while (v1172 != -1);
                  }
                  v1176 = __b;
                  if (__len)
                  {
                    bzero(__b, __len);
                    v1177 = __len;
                    v1176 = __b;
                  }
                  else
                  {
                    v1177 = 0;
                  }
                  v1178 = v1259;
                  if (v1259 >= 1)
                  {
                    v1179 = 0;
                    v1180 = (char *)v1260 + (int)v1171;
                    do
                    {
                      v1181 = v1177;
                      for (i2 = v1176; v1181; --v1181)
                      {
                        v1183 = *v1180++;
                        *i2++ += v1183;
                      }
                      ++v1179;
                    }
                    while (v1179 != v1178);
                    v1177 = __len;
                    v1176 = __b;
                  }
                  __b = &v1176[v1177];
                  v1169 += v1177;
                }
                while ((unint64_t)(*v1174)[6] > v1169);
              }
              goto LABEL_1747;
            }
            if (!v998)
              goto LABEL_1747;
            v999 = 0;
            v1000 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1257 = 0;
              v1001 = 0;
              if ((v1000 & 0x80000000) == 0)
              {
                v1002 = v1000;
                v1003 = v999;
                do
                {
                  v1004 = ldiv(v1003, v98[v1002]);
                  v1003 = v1004.quot;
                  v1001 += (_QWORD)v99[v1002--] * v1004.rem;
                }
                while (v1002 != -1);
              }
              v1257 = v1001;
              if (__len)
                bzero(__b, __len);
              v1273 = 0;
              v1005 = operator new(0x38uLL);
              *v1005 = &off_2513472F8;
              v1005[1] = &v1270;
              v1005[2] = &v1260;
              v1005[3] = &v1257;
              v1005[4] = &__b;
              v1005[5] = &v1259;
              v1005[6] = &__len;
              v1273 = v1005;
              v1281 = 0;
              v1006 = (void **)operator new(0x28uLL);
              *v1006 = &off_251346A78;
              v1006[1] = &v1266;
              v1006[2] = &v1268;
              v1006[3] = v1280;
              v1006[4] = v1272;
              v1276 = v1006;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v1007 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v1007 = (void **)&v1274;
                v1008 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_1407;
                v1008 = 5;
              }
              (*((void (**)(void))*v1007 + v1008))();
LABEL_1407:
              LODWORD(v1274) = 0;
              v1271 = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
              v1009 = v1281;
              if (v1281 == v1280)
              {
                v1009 = v1280;
                v1010 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_1413;
                v1010 = 5;
              }
              (*(void (**)(void))(*v1009 + 8 * v1010))();
LABEL_1413:
              v1011 = v1273;
              if (v1273 == v1272)
              {
                v1011 = v1272;
                v1012 = 4;
                goto LABEL_1417;
              }
              if (v1273)
              {
                v1012 = 5;
LABEL_1417:
                (*(void (**)(void))(*v1011 + 8 * v1012))();
              }
              __b = (char *)__b + __len;
              v999 += __len;
              if ((unint64_t)(*a2)[6] <= v999)
                goto LABEL_1747;
            }
          }
          if (v1265 != 5)
          {
            if (v1265 != 4)
              goto LABEL_1751;
            v773 = v1267;
            goto LABEL_1394;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v944 = (*a2)[19];
          v98 = v1274;
          v99 = v1276;
          if (!(*a2)[6])
            goto LABEL_1747;
          v945 = 0;
          v946 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v947 = 0;
            if ((v946 & 0x80000000) == 0)
            {
              v948 = v946;
              v949 = v945;
              do
              {
                v950 = ldiv(v949, v98[v948]);
                v949 = v950.quot;
                v947 += (_QWORD)v99[v948--] * v950.rem;
              }
              while (v948 != -1);
            }
            LODWORD(__b) = v947;
            LOBYTE(v1259) = 0;
            v1273 = 0;
            v951 = operator new(0x28uLL);
            *v951 = &off_251347378;
            v951[1] = &v1271;
            v951[2] = &v1259;
            v951[3] = &__len;
            v951[4] = &__b;
            v1273 = v951;
            v1281 = 0;
            v952 = (void **)operator new(0x28uLL);
            *v952 = &off_251346A78;
            v952[1] = &v1266;
            v952[2] = &v1268;
            v952[3] = v1280;
            v952[4] = v1272;
            v1276 = v952;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
            v953 = v1276;
            if (v1276 == (void **)&v1274)
            {
              v953 = (void **)&v1274;
              v954 = 4;
            }
            else
            {
              if (!v1276)
                goto LABEL_1321;
              v954 = 5;
            }
            (*((void (**)(void))*v953 + v954))();
LABEL_1321:
            LODWORD(v1274) = 0;
            LODWORD(v1260) = 0;
            if (!v1281)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
            v955 = v1281;
            if (v1281 == v1280)
            {
              v955 = v1280;
              v956 = 4;
            }
            else
            {
              if (!v1281)
                goto LABEL_1327;
              v956 = 5;
            }
            (*(void (**)(void))(*v955 + 8 * v956))();
LABEL_1327:
            v957 = v1273;
            if (v1273 == v1272)
            {
              v957 = v1272;
              v958 = 4;
              goto LABEL_1331;
            }
            if (v1273)
            {
              v958 = 5;
LABEL_1331:
              (*(void (**)(void))(*v957 + 8 * v958))();
            }
            *(_BYTE *)v944 = v1259;
            v944 = (int *)((char *)v944 + 1);
            if ((unint64_t)(*a2)[6] <= ++v945)
              goto LABEL_1747;
          }
        case 4:
          v194 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1277 = &unk_2513463C8;
          v1278 = mlx::core::allocator::free;
          v1279 = &v1277;
          mlx::core::array::set_data(a2, (uint64_t)v194, (uint64_t)&v1277);
          v195 = v1279;
          if (v1279 == &v1277)
          {
            v196 = 4;
            v195 = &v1277;
          }
          else
          {
            if (!v1279)
              goto LABEL_331;
            v196 = 5;
          }
          (*((void (**)(void))*v195 + v196))();
LABEL_331:
          v1263 = 0;
          v1264 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1263 = __p;
            operator delete(__p);
          }
          if (v1265 == 1)
          {
            v318 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v319 = (*a2)[6];
              if (v319)
              {
                v320 = 0;
                v321 = *(int *)v1266;
                v322 = (*a2)[19];
                v323 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v322 = 0;
                  if ((int)v321 >= 1)
                  {
                    v324 = 0;
                    v325 = v321 + 1;
                    v326 = v323;
                    do
                    {
                      v327 = *v326++;
                      v324 += v327;
                      --v325;
                    }
                    while (v325 > 1);
                    *v322 = v324;
                  }
                  v320 = (int *)((char *)v320 + 1);
                  ++v322;
                  v323 += v321;
                }
                while (v320 != v319);
              }
              goto LABEL_1751;
            }
            goto LABEL_446;
          }
          if (!v1265)
          {
            v277 = (*a2)[19];
            *v277 = 0;
            v278 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v278 < 1)
              goto LABEL_1751;
            v279 = 0;
            v280 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            v281 = v278 + 1;
            do
            {
              v282 = *v280++;
              v279 += v282;
              --v281;
            }
            while (v281 > 1);
            goto LABEL_348;
          }
          if ((v1265 & 0xFFFFFFFD) == 1)
          {
            v318 = v1267;
LABEL_446:
            v1271 = 0;
            v1271 = *((_DWORD *)v318 - 1);
            v1267 = v318 - 4;
            v1269 -= 8;
            v366 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1260 = (*a2)[19];
            __len = v366;
            v98 = v1274;
            v99 = v1276;
            v367 = (*a2)[6];
            if (v1267 == v1266)
            {
              if (v367)
              {
                v778 = 0;
                v779 = v1260;
                v780 = __len;
                v781 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                do
                {
                  v782 = 0;
                  if ((v781 & 0x80000000) == 0)
                  {
                    v783 = v781;
                    v784 = (int)v778;
                    do
                    {
                      v785 = ldiv(v784, v98[v783]);
                      v784 = v785.quot;
                      v782 += (_QWORD)v99[v783--] * v785.rem;
                    }
                    while (v783 != -1);
                  }
                  *v779 = 0;
                  if (v1271 >= 1)
                  {
                    v786 = 0;
                    v787 = (unsigned __int8 *)(v780 + (int)v782);
                    v788 = v1271 + 1;
                    do
                    {
                      v789 = *v787++;
                      v786 += v789;
                      --v788;
                    }
                    while (v788 > 1);
                    *v779 = v786;
                  }
                  v778 = (int *)((char *)v778 + 1);
                  ++v779;
                }
                while (v778 != v367);
              }
              goto LABEL_1747;
            }
            if (!v367)
              goto LABEL_1747;
            v368 = 0;
            v369 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1259 = 0;
              v370 = 0;
              if ((v369 & 0x80000000) == 0)
              {
                v371 = v369;
                v372 = v368;
                do
                {
                  v373 = ldiv(v372, v98[v371]);
                  v372 = v373.quot;
                  v370 += (_QWORD)v99[v371--] * v373.rem;
                }
                while (v371 != -1);
              }
              v1259 = v370;
              *v1260 = 0;
              v1273 = 0;
              v374 = operator new(0x30uLL);
              *v374 = &off_2513473F8;
              v374[1] = &v1257;
              v374[2] = &__len;
              v374[3] = &v1259;
              v374[4] = &v1260;
              v374[5] = &v1271;
              v1273 = v374;
              v1281 = 0;
              v375 = (void **)operator new(0x28uLL);
              *v375 = &off_251346A78;
              v375[1] = &v1266;
              v375[2] = &v1268;
              v375[3] = v1280;
              v375[4] = v1272;
              v1276 = v375;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v376 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v376 = (void **)&v1274;
                v377 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_457;
                v377 = 5;
              }
              (*((void (**)(void))*v376 + v377))();
LABEL_457:
              LODWORD(v1274) = 0;
              LODWORD(__b) = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
              v378 = v1281;
              if (v1281 == v1280)
              {
                v378 = v1280;
                v379 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_463;
                v379 = 5;
              }
              (*(void (**)(void))(*v378 + 8 * v379))();
LABEL_463:
              v380 = v1273;
              if (v1273 == v1272)
              {
                v380 = v1272;
                v381 = 4;
                goto LABEL_467;
              }
              if (v1273)
              {
                v381 = 5;
LABEL_467:
                (*(void (**)(void))(*v380 + 8 * v381))();
              }
              ++v368;
              ++v1260;
              if ((unint64_t)(*a2)[6] <= v368)
                goto LABEL_1747;
            }
          }
          if (v1265 == 2)
          {
            v771 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v879 = *((int *)v1267 - 1);
              v880 = *((_QWORD *)v1269 - 1);
              v1267 -= 4;
              v1269 -= 8;
              v881 = (*a2)[6];
              if (v881)
              {
                LODWORD(v882) = 0;
                v883 = (*a2)[19];
                v884 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v880)
                    bzero(v883, 4 * v880);
                  if ((int)v879 >= 1)
                  {
                    v885 = 0;
                    v886 = v884;
                    do
                    {
                      if (v880)
                      {
                        for (i3 = 0; i3 != v880; ++i3)
                          v883[i3] += *(unsigned __int8 *)(v886 + i3);
                        v886 += i3;
                      }
                      ++v885;
                    }
                    while (v885 != (_DWORD)v879);
                  }
                  v884 += v880 * v879;
                  v883 += v880;
                  v882 = (int)v882 + (int)v880;
                }
                while (v882 < (unint64_t)v881);
              }
              goto LABEL_1751;
            }
LABEL_1222:
            v1259 = 0;
            v1259 = *((_DWORD *)v771 - 1);
            __len = 0;
            v888 = *((_QWORD *)v1269 - 1);
            v1267 = v771 - 4;
            v1269 -= 8;
            v1260 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v888;
            __b = (*a2)[19];
            v98 = v1274;
            v99 = v1276;
            v889 = (unint64_t)(*a2)[6];
            if (v1267 == v1266)
            {
              if (v889)
              {
                v1143 = 0;
                v1144 = (char *)__b;
                v1145 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                v1146 = __len;
                v1252 = v1260;
                v1147 = 4 * __len;
                do
                {
                  v1148 = 0;
                  if ((v1145 & 0x80000000) == 0)
                  {
                    v1149 = v1145;
                    v1150 = v1143;
                    do
                    {
                      v1151 = ldiv(v1150, v98[v1149]);
                      v1150 = v1151.quot;
                      v1148 += (_QWORD)v99[v1149--] * v1151.rem;
                    }
                    while (v1149 != -1);
                  }
                  if (v1146)
                    bzero(v1144, v1147);
                  v1152 = v1259;
                  if (v1259 >= 1)
                  {
                    v1153 = 0;
                    v1154 = (char *)v1252 + (int)v1148;
                    do
                    {
                      if (v1146)
                      {
                        for (i4 = 0; i4 != v1146; ++i4)
                          *(_DWORD *)&v1144[4 * i4] += v1154[i4];
                        v1154 += i4;
                      }
                      ++v1153;
                    }
                    while (v1153 != v1152);
                  }
                  v1144 += v1147;
                  v1143 += v1146;
                }
                while (v889 > v1143);
              }
              goto LABEL_1747;
            }
            if (!v889)
              goto LABEL_1747;
            v890 = 0;
            v891 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1257 = 0;
              v892 = 0;
              if ((v891 & 0x80000000) == 0)
              {
                v893 = v891;
                v894 = v890;
                do
                {
                  v895 = ldiv(v894, v98[v893]);
                  v894 = v895.quot;
                  v892 += (_QWORD)v99[v893--] * v895.rem;
                }
                while (v893 != -1);
              }
              v1257 = v892;
              if (__len)
                bzero(__b, 4 * __len);
              v1273 = 0;
              v896 = operator new(0x38uLL);
              *v896 = &off_251347478;
              v896[1] = &v1270;
              v896[2] = &v1260;
              v896[3] = &v1257;
              v896[4] = &__b;
              v896[5] = &v1259;
              v896[6] = &__len;
              v1273 = v896;
              v1281 = 0;
              v897 = (void **)operator new(0x28uLL);
              *v897 = &off_251346A78;
              v897[1] = &v1266;
              v897[2] = &v1268;
              v897[3] = v1280;
              v897[4] = v1272;
              v1276 = v897;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v898 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v898 = (void **)&v1274;
                v899 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_1235;
                v899 = 5;
              }
              (*((void (**)(void))*v898 + v899))();
LABEL_1235:
              LODWORD(v1274) = 0;
              v1271 = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
              v900 = v1281;
              if (v1281 == v1280)
              {
                v900 = v1280;
                v901 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_1241;
                v901 = 5;
              }
              (*(void (**)(void))(*v900 + 8 * v901))();
LABEL_1241:
              v902 = v1273;
              if (v1273 == v1272)
              {
                v902 = v1272;
                v903 = 4;
                goto LABEL_1245;
              }
              if (v1273)
              {
                v903 = 5;
LABEL_1245:
                (*(void (**)(void))(*v902 + 8 * v903))();
              }
              __b = (char *)__b + 4 * __len;
              v890 += __len;
              if ((unint64_t)(*a2)[6] <= v890)
                goto LABEL_1747;
            }
          }
          if (v1265 != 5)
          {
            if (v1265 != 4)
              goto LABEL_1751;
            v771 = v1267;
            goto LABEL_1222;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v864 = (*a2)[19];
          v98 = v1274;
          v99 = v1276;
          if (!(*a2)[6])
            goto LABEL_1747;
          v865 = 0;
          v866 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v867 = 0;
            if ((v866 & 0x80000000) == 0)
            {
              v868 = v866;
              v869 = v865;
              do
              {
                v870 = ldiv(v869, v98[v868]);
                v869 = v870.quot;
                v867 += (_QWORD)v99[v868--] * v870.rem;
              }
              while (v868 != -1);
            }
            LODWORD(__b) = v867;
            v1271 = 0;
            v1273 = 0;
            v871 = operator new(0x28uLL);
            *v871 = &off_2513474F8;
            v871[1] = &v1259;
            v871[2] = &v1271;
            v871[3] = &__len;
            v871[4] = &__b;
            v1273 = v871;
            v1281 = 0;
            v872 = (void **)operator new(0x28uLL);
            *v872 = &off_251346A78;
            v872[1] = &v1266;
            v872[2] = &v1268;
            v872[3] = v1280;
            v872[4] = v1272;
            v1276 = v872;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
            v873 = v1276;
            if (v1276 == (void **)&v1274)
            {
              v873 = (void **)&v1274;
              v874 = 4;
            }
            else
            {
              if (!v1276)
                goto LABEL_1195;
              v874 = 5;
            }
            (*((void (**)(void))*v873 + v874))();
LABEL_1195:
            LODWORD(v1274) = 0;
            LODWORD(v1260) = 0;
            if (!v1281)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
            v875 = v1281;
            if (v1281 == v1280)
            {
              v875 = v1280;
              v876 = 4;
            }
            else
            {
              if (!v1281)
                goto LABEL_1201;
              v876 = 5;
            }
            (*(void (**)(void))(*v875 + 8 * v876))();
LABEL_1201:
            v877 = v1273;
            if (v1273 == v1272)
            {
              v877 = v1272;
              v878 = 4;
              goto LABEL_1205;
            }
            if (v1273)
            {
              v878 = 5;
LABEL_1205:
              (*(void (**)(void))(*v877 + 8 * v878))();
            }
            *v864++ = v1271;
            if ((unint64_t)(*a2)[6] <= ++v865)
              goto LABEL_1747;
          }
        case 5:
          v206 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1277 = &unk_2513463C8;
          v1278 = mlx::core::allocator::free;
          v1279 = &v1277;
          mlx::core::array::set_data(a2, (uint64_t)v206, (uint64_t)&v1277);
          v207 = v1279;
          if (v1279 == &v1277)
          {
            v208 = 4;
            v207 = &v1277;
          }
          else
          {
            if (!v1279)
              goto LABEL_381;
            v208 = 5;
          }
          (*((void (**)(void))*v207 + v208))();
LABEL_381:
          v1263 = 0;
          v1264 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1263 = __p;
            operator delete(__p);
          }
          if (v1265 == 1)
          {
            v397 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v398 = (*a2)[6];
              if (v398)
              {
                v399 = 0;
                v400 = *(int *)v1266;
                v401 = (*a2)[19];
                v402 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *(_QWORD *)v401 = 0;
                  if ((int)v400 >= 1)
                  {
                    v403 = 0;
                    v404 = v400 + 1;
                    v405 = v402;
                    do
                    {
                      v406 = *v405++;
                      v403 += v406;
                      --v404;
                    }
                    while (v404 > 1);
                    *(_QWORD *)v401 = v403;
                  }
                  v399 = (int *)((char *)v399 + 1);
                  v401 += 2;
                  v402 += v400;
                }
                while (v399 != v398);
              }
              goto LABEL_1751;
            }
            goto LABEL_867;
          }
          if (!v1265)
          {
            v305 = (*a2)[19];
            *(_QWORD *)v305 = 0;
            v306 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v306 >= 1)
            {
              v307 = 0;
              v308 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v309 = v306 + 1;
              do
              {
                v310 = *v308++;
                v307 += v310;
                --v309;
              }
              while (v309 > 1);
              *(_QWORD *)v305 = v307;
            }
            goto LABEL_1751;
          }
          if ((v1265 & 0xFFFFFFFD) == 1)
          {
            v397 = v1267;
LABEL_867:
            v1271 = 0;
            v1271 = *((_DWORD *)v397 - 1);
            v1267 = v397 - 4;
            v1269 -= 8;
            v633 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1260 = (*a2)[19];
            __len = v633;
            v98 = v1274;
            v99 = v1276;
            v634 = (*a2)[6];
            if (v1267 == v1266)
            {
              if (v634)
              {
                v837 = 0;
                v838 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                v839 = v1260;
                v1250 = __len;
                v840 = v1271;
                v841 = v1271 + 1;
                do
                {
                  v842 = 0;
                  if ((v838 & 0x80000000) == 0)
                  {
                    v843 = v838;
                    v844 = (int)v837;
                    do
                    {
                      v845 = ldiv(v844, v98[v843]);
                      v844 = v845.quot;
                      v842 += (_QWORD)v99[v843--] * v845.rem;
                    }
                    while (v843 != -1);
                  }
                  *(_QWORD *)v839 = 0;
                  if (v840 >= 1)
                  {
                    v846 = 0;
                    v847 = (unsigned __int8 *)(v1250 + (int)v842);
                    v848 = v841;
                    do
                    {
                      v849 = *v847++;
                      v846 += v849;
                      --v848;
                    }
                    while (v848 > 1);
                    *(_QWORD *)v839 = v846;
                  }
                  v837 = (int *)((char *)v837 + 1);
                  v839 += 2;
                }
                while (v837 != v634);
              }
              goto LABEL_1747;
            }
            if (!v634)
              goto LABEL_1747;
            v635 = 0;
            v636 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1259 = 0;
              v637 = 0;
              if ((v636 & 0x80000000) == 0)
              {
                v638 = v636;
                v639 = v635;
                do
                {
                  v640 = ldiv(v639, v98[v638]);
                  v639 = v640.quot;
                  v637 += (_QWORD)v99[v638--] * v640.rem;
                }
                while (v638 != -1);
              }
              v1259 = v637;
              *(_QWORD *)v1260 = 0;
              v1273 = 0;
              v641 = operator new(0x30uLL);
              *v641 = &off_251347578;
              v641[1] = &v1257;
              v641[2] = &__len;
              v641[3] = &v1259;
              v641[4] = &v1260;
              v641[5] = &v1271;
              v1273 = v641;
              v1281 = 0;
              v642 = (void **)operator new(0x28uLL);
              *v642 = &off_251346A78;
              v642[1] = &v1266;
              v642[2] = &v1268;
              v642[3] = v1280;
              v642[4] = v1272;
              v1276 = v642;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v643 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v643 = (void **)&v1274;
                v644 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_878;
                v644 = 5;
              }
              (*((void (**)(void))*v643 + v644))();
LABEL_878:
              LODWORD(v1274) = 0;
              LODWORD(__b) = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
              v645 = v1281;
              if (v1281 == v1280)
              {
                v645 = v1280;
                v646 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_884;
                v646 = 5;
              }
              (*(void (**)(void))(*v645 + 8 * v646))();
LABEL_884:
              v647 = v1273;
              if (v1273 == v1272)
              {
                v647 = v1272;
                v648 = 4;
                goto LABEL_888;
              }
              if (v1273)
              {
                v648 = 5;
LABEL_888:
                (*(void (**)(void))(*v647 + 8 * v648))();
              }
              ++v635;
              v1260 += 2;
              if ((unint64_t)(*a2)[6] <= v635)
                goto LABEL_1747;
            }
          }
          if (v1265 == 2)
          {
            v776 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v1092 = *((int *)v1267 - 1);
              v1093 = *((_QWORD *)v1269 - 1);
              v1267 -= 4;
              v1269 -= 8;
              v1094 = (*a2)[6];
              if (v1094)
              {
                LODWORD(v1095) = 0;
                v1096 = (*a2)[19];
                v1097 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1093)
                    bzero(v1096, 8 * v1093);
                  if ((int)v1092 >= 1)
                  {
                    v1098 = 0;
                    v1099 = v1097;
                    do
                    {
                      if (v1093)
                      {
                        for (i5 = 0; i5 != v1093; ++i5)
                          *(_QWORD *)&v1096[2 * i5] += *(unsigned __int8 *)(v1099 + i5);
                        v1099 += i5;
                      }
                      ++v1098;
                    }
                    while (v1098 != (_DWORD)v1092);
                  }
                  v1097 += v1093 * v1092;
                  v1096 += 2 * v1093;
                  v1095 = (int)v1095 + (int)v1093;
                }
                while (v1095 < (unint64_t)v1094);
              }
              goto LABEL_1751;
            }
LABEL_1560:
            v1259 = 0;
            v1259 = *((_DWORD *)v776 - 1);
            __len = 0;
            v1101 = *((_QWORD *)v1269 - 1);
            v1267 = v776 - 4;
            v1269 -= 8;
            v1260 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1101;
            __b = (*a2)[19];
            v98 = v1274;
            v99 = v1276;
            v1102 = (unint64_t)(*a2)[6];
            if (v1267 == v1266)
            {
              if (v1102)
              {
                v1211 = 0;
                v1212 = (char *)__b;
                v1213 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                v1214 = __len;
                v1236 = v1260;
                v1255 = v1213;
                v1215 = v1259;
                v1216 = 8 * __len;
                do
                {
                  v1217 = 0;
                  if ((v1213 & 0x80000000) == 0)
                  {
                    v1218 = v1211;
                    do
                    {
                      v1219 = ldiv(v1218, v98[v1213]);
                      v1218 = v1219.quot;
                      v1217 += (_QWORD)v99[v1213--] * v1219.rem;
                    }
                    while (v1213 != -1);
                  }
                  if (v1214)
                    bzero(v1212, v1216);
                  v1213 = v1255;
                  if (v1215 >= 1)
                  {
                    v1220 = 0;
                    v1221 = (char *)v1236 + (int)v1217;
                    do
                    {
                      if (v1214)
                      {
                        for (i6 = 0; i6 != v1214; ++i6)
                          *(_QWORD *)&v1212[8 * i6] += v1221[i6];
                        v1221 += i6;
                      }
                      ++v1220;
                    }
                    while (v1220 != v1215);
                  }
                  v1212 += v1216;
                  v1211 += v1214;
                }
                while (v1102 > v1211);
              }
              goto LABEL_1747;
            }
            if (!v1102)
              goto LABEL_1747;
            v1103 = 0;
            v1104 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1257 = 0;
              v1105 = 0;
              if ((v1104 & 0x80000000) == 0)
              {
                v1106 = v1104;
                v1107 = v1103;
                do
                {
                  v1108 = ldiv(v1107, v98[v1106]);
                  v1107 = v1108.quot;
                  v1105 += (_QWORD)v99[v1106--] * v1108.rem;
                }
                while (v1106 != -1);
              }
              v1257 = v1105;
              if (__len)
                bzero(__b, 8 * __len);
              v1273 = 0;
              v1109 = operator new(0x38uLL);
              *v1109 = &off_2513475F8;
              v1109[1] = &v1270;
              v1109[2] = &v1260;
              v1109[3] = &v1257;
              v1109[4] = &__b;
              v1109[5] = &v1259;
              v1109[6] = &__len;
              v1273 = v1109;
              v1281 = 0;
              v1110 = (void **)operator new(0x28uLL);
              *v1110 = &off_251346A78;
              v1110[1] = &v1266;
              v1110[2] = &v1268;
              v1110[3] = v1280;
              v1110[4] = v1272;
              v1276 = v1110;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v1111 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v1111 = (void **)&v1274;
                v1112 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_1573;
                v1112 = 5;
              }
              (*((void (**)(void))*v1111 + v1112))();
LABEL_1573:
              LODWORD(v1274) = 0;
              v1271 = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
              v1113 = v1281;
              if (v1281 == v1280)
              {
                v1113 = v1280;
                v1114 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_1579;
                v1114 = 5;
              }
              (*(void (**)(void))(*v1113 + 8 * v1114))();
LABEL_1579:
              v1115 = v1273;
              if (v1273 == v1272)
              {
                v1115 = v1272;
                v1116 = 4;
                goto LABEL_1583;
              }
              if (v1273)
              {
                v1116 = 5;
LABEL_1583:
                (*(void (**)(void))(*v1115 + 8 * v1116))();
              }
              __b = (char *)__b + 8 * __len;
              v1103 += __len;
              if ((unint64_t)(*a2)[6] <= v1103)
                goto LABEL_1747;
            }
          }
          if (v1265 != 5)
          {
            if (v1265 != 4)
              goto LABEL_1751;
            v776 = v1267;
            goto LABEL_1560;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v1062 = (*a2)[19];
          v98 = v1274;
          v99 = v1276;
          if (!(*a2)[6])
            goto LABEL_1747;
          v1063 = 0;
          v1064 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          while (1)
          {
            v1271 = 0;
            v1065 = 0;
            if ((v1064 & 0x80000000) == 0)
            {
              v1066 = v1064;
              v1067 = v1063;
              do
              {
                v1068 = ldiv(v1067, v98[v1066]);
                v1067 = v1068.quot;
                v1065 += (_QWORD)v99[v1066--] * v1068.rem;
              }
              while (v1066 != -1);
            }
            v1271 = v1065;
            v1260 = 0;
            v1273 = 0;
            v1069 = operator new(0x28uLL);
            *v1069 = &off_251347678;
            v1069[1] = &v1259;
            v1069[2] = &v1260;
            v1069[3] = &__len;
            v1069[4] = &v1271;
            v1273 = v1069;
            v1281 = 0;
            v1070 = (void **)operator new(0x28uLL);
            *v1070 = &off_251346A78;
            v1070[1] = &v1266;
            v1070[2] = &v1268;
            v1070[3] = v1280;
            v1070[4] = v1272;
            v1276 = v1070;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
            v1071 = v1276;
            if (v1276 == (void **)&v1274)
            {
              v1071 = (void **)&v1274;
              v1072 = 4;
            }
            else
            {
              if (!v1276)
                goto LABEL_1510;
              v1072 = 5;
            }
            (*((void (**)(void))*v1071 + v1072))();
LABEL_1510:
            LODWORD(v1274) = 0;
            LODWORD(__b) = 0;
            if (!v1281)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
            v1073 = v1281;
            if (v1281 == v1280)
            {
              v1073 = v1280;
              v1074 = 4;
            }
            else
            {
              if (!v1281)
                goto LABEL_1516;
              v1074 = 5;
            }
            (*(void (**)(void))(*v1073 + 8 * v1074))();
LABEL_1516:
            v1075 = v1273;
            if (v1273 == v1272)
            {
              v1075 = v1272;
              v1076 = 4;
              goto LABEL_1520;
            }
            if (v1273)
            {
              v1076 = 5;
LABEL_1520:
              (*(void (**)(void))(*v1075 + 8 * v1076))();
            }
            *(_QWORD *)v1062 = v1260;
            v1062 += 2;
            if ((unint64_t)(*a2)[6] <= ++v1063)
              goto LABEL_1747;
          }
        case 6:
          v209 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1277 = &unk_2513463C8;
          v1278 = mlx::core::allocator::free;
          v1279 = &v1277;
          mlx::core::array::set_data(a2, (uint64_t)v209, (uint64_t)&v1277);
          v210 = v1279;
          if (v1279 == &v1277)
          {
            v211 = 4;
            v210 = &v1277;
          }
          else
          {
            if (!v1279)
              goto LABEL_391;
            v211 = 5;
          }
          (*((void (**)(void))*v210 + v211))();
LABEL_391:
          v1263 = 0;
          v1264 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1263 = __p;
            operator delete(__p);
          }
          if (v1265 == 1)
          {
            v434 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v435 = (*a2)[6];
              if (v435)
              {
                v436 = 0;
                v437 = *(int *)v1266;
                v438 = (float *)(*a2)[19];
                v439 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v438 = 0.0;
                  if ((int)v437 >= 1)
                  {
                    v440 = 0.0;
                    v441 = v437 + 1;
                    v442 = v439;
                    do
                    {
                      if (*v442++)
                        v444 = 1.0;
                      else
                        v444 = 0.0;
                      v440 = v440 + v444;
                      --v441;
                    }
                    while (v441 > 1);
                    *v438 = v440;
                  }
                  v436 = (int *)((char *)v436 + 1);
                  ++v438;
                  v439 += v437;
                }
                while (v436 != v435);
              }
              goto LABEL_1751;
            }
            goto LABEL_916;
          }
          if (!v1265)
          {
            v311 = (float *)(*a2)[19];
            *v311 = 0.0;
            v312 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v312 >= 1)
            {
              v313 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v314 = v312 + 1;
              v315 = 0.0;
              do
              {
                if (*v313++)
                  v317 = 1.0;
                else
                  v317 = 0.0;
                v315 = v315 + v317;
                --v314;
              }
              while (v314 > 1);
              *v311 = v315;
            }
            goto LABEL_1751;
          }
          if ((v1265 & 0xFFFFFFFD) == 1)
          {
            v434 = v1267;
LABEL_916:
            v1271 = 0;
            v1271 = *((_DWORD *)v434 - 1);
            v1267 = v434 - 4;
            v1269 -= 8;
            v664 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1260 = (*a2)[19];
            __len = v664;
            v98 = v1274;
            v99 = v1276;
            v665 = (*a2)[6];
            if (v1267 == v1266)
            {
              if (v665)
              {
                v850 = 0;
                v851 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                v852 = (float *)v1260;
                v1251 = __len;
                v853 = v1271;
                v854 = v1271 + 1;
                do
                {
                  v855 = 0;
                  if ((v851 & 0x80000000) == 0)
                  {
                    v856 = v851;
                    v857 = (int)v850;
                    do
                    {
                      v858 = ldiv(v857, v98[v856]);
                      v857 = v858.quot;
                      v855 += (_QWORD)v99[v856--] * v858.rem;
                    }
                    while (v856 != -1);
                  }
                  *v852 = 0.0;
                  if (v853 >= 1)
                  {
                    v859 = (unsigned __int8 *)(v1251 + (int)v855);
                    v860 = 0.0;
                    v861 = v854;
                    do
                    {
                      if (*v859++)
                        v863 = 1.0;
                      else
                        v863 = 0.0;
                      v860 = v860 + v863;
                      --v861;
                    }
                    while (v861 > 1);
                    *v852 = v860;
                  }
                  v850 = (int *)((char *)v850 + 1);
                  ++v852;
                }
                while (v850 != v665);
              }
              goto LABEL_1747;
            }
            if (!v665)
              goto LABEL_1747;
            v666 = 0;
            v667 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1259 = 0;
              v668 = 0;
              if ((v667 & 0x80000000) == 0)
              {
                v669 = v667;
                v670 = v666;
                do
                {
                  v671 = ldiv(v670, v98[v669]);
                  v670 = v671.quot;
                  v668 += (_QWORD)v99[v669--] * v671.rem;
                }
                while (v669 != -1);
              }
              v1259 = v668;
              *v1260 = 0;
              v1273 = 0;
              v672 = operator new(0x30uLL);
              *v672 = &off_2513476F8;
              v672[1] = &v1257;
              v672[2] = &__len;
              v672[3] = &v1259;
              v672[4] = &v1260;
              v672[5] = &v1271;
              v1273 = v672;
              v1281 = 0;
              v673 = (void **)operator new(0x28uLL);
              *v673 = &off_251346A78;
              v673[1] = &v1266;
              v673[2] = &v1268;
              v673[3] = v1280;
              v673[4] = v1272;
              v1276 = v673;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v674 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v674 = (void **)&v1274;
                v675 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_927;
                v675 = 5;
              }
              (*((void (**)(void))*v674 + v675))();
LABEL_927:
              LODWORD(v1274) = 0;
              LODWORD(__b) = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
              v676 = v1281;
              if (v1281 == v1280)
              {
                v676 = v1280;
                v677 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_933;
                v677 = 5;
              }
              (*(void (**)(void))(*v676 + 8 * v677))();
LABEL_933:
              v678 = v1273;
              if (v1273 == v1272)
              {
                v678 = v1272;
                v679 = 4;
                goto LABEL_937;
              }
              if (v1273)
              {
                v679 = 5;
LABEL_937:
                (*(void (**)(void))(*v678 + 8 * v679))();
              }
              ++v666;
              ++v1260;
              if ((unint64_t)(*a2)[6] <= v666)
                goto LABEL_1747;
            }
          }
          if (v1265 == 2)
          {
            v777 = v1267;
            if (v1267 - (_BYTE *)v1266 == 4)
            {
              v1117 = *((int *)v1267 - 1);
              v1118 = *((_QWORD *)v1269 - 1);
              v1267 -= 4;
              v1269 -= 8;
              v1119 = (*a2)[6];
              if (v1119)
              {
                LODWORD(v1120) = 0;
                v1121 = (*a2)[19];
                v1122 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1118)
                    bzero(v1121, 4 * v1118);
                  if ((int)v1117 >= 1)
                  {
                    v1123 = 0;
                    v1124 = v1122;
                    do
                    {
                      if (v1118)
                      {
                        for (i7 = 0; i7 != v1118; ++i7)
                        {
                          if (*(_BYTE *)(v1124 + i7))
                            v1126 = 1.0;
                          else
                            v1126 = 0.0;
                          *(float *)&v1121[i7] = *(float *)&v1121[i7] + v1126;
                        }
                        v1124 += i7;
                      }
                      ++v1123;
                    }
                    while (v1123 != (_DWORD)v1117);
                  }
                  v1122 += v1118 * v1117;
                  v1121 += v1118;
                  v1120 = (int)v1120 + (int)v1118;
                }
                while (v1120 < (unint64_t)v1119);
              }
              goto LABEL_1751;
            }
LABEL_1603:
            v1259 = 0;
            v1259 = *((_DWORD *)v777 - 1);
            __len = 0;
            v1127 = *((_QWORD *)v1269 - 1);
            v1267 = v777 - 4;
            v1269 -= 8;
            v1260 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1127;
            __b = (*a2)[19];
            v98 = v1274;
            v99 = v1276;
            v1128 = (unint64_t)(*a2)[6];
            if (v1267 == v1266)
            {
              if (v1128)
              {
                v1223 = 0;
                v1224 = (char *)__b;
                v1225 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
                v1226 = __len;
                v1237 = v1260;
                v1256 = v1225;
                v1227 = v1259;
                v1228 = 4 * __len;
                do
                {
                  v1229 = 0;
                  if ((v1225 & 0x80000000) == 0)
                  {
                    v1230 = v1223;
                    do
                    {
                      v1231 = ldiv(v1230, v98[v1225]);
                      v1230 = v1231.quot;
                      v1229 += (_QWORD)v99[v1225--] * v1231.rem;
                    }
                    while (v1225 != -1);
                  }
                  if (v1226)
                    bzero(v1224, v1228);
                  v1225 = v1256;
                  if (v1227 >= 1)
                  {
                    v1232 = 0;
                    v1233 = (char *)v1237 + (int)v1229;
                    do
                    {
                      if (v1226)
                      {
                        for (i8 = 0; i8 != v1226; ++i8)
                        {
                          if (v1233[i8])
                            v1235 = 1.0;
                          else
                            v1235 = 0.0;
                          *(float *)&v1224[4 * i8] = *(float *)&v1224[4 * i8] + v1235;
                        }
                        v1233 += i8;
                      }
                      ++v1232;
                    }
                    while (v1232 != v1227);
                  }
                  v1224 += v1228;
                  v1223 += v1226;
                }
                while (v1128 > v1223);
              }
              goto LABEL_1747;
            }
            if (!v1128)
              goto LABEL_1747;
            v1129 = 0;
            v1130 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            while (1)
            {
              v1257 = 0;
              v1131 = 0;
              if ((v1130 & 0x80000000) == 0)
              {
                v1132 = v1130;
                v1133 = v1129;
                do
                {
                  v1134 = ldiv(v1133, v98[v1132]);
                  v1133 = v1134.quot;
                  v1131 += (_QWORD)v99[v1132--] * v1134.rem;
                }
                while (v1132 != -1);
              }
              v1257 = v1131;
              if (__len)
                bzero(__b, 4 * __len);
              v1273 = 0;
              v1135 = operator new(0x38uLL);
              *v1135 = &off_251347778;
              v1135[1] = &v1270;
              v1135[2] = &v1260;
              v1135[3] = &v1257;
              v1135[4] = &__b;
              v1135[5] = &v1259;
              v1135[6] = &__len;
              v1273 = v1135;
              v1281 = 0;
              v1136 = (void **)operator new(0x28uLL);
              *v1136 = &off_251346A78;
              v1136[1] = &v1266;
              v1136[2] = &v1268;
              v1136[3] = v1280;
              v1136[4] = v1272;
              v1276 = v1136;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
              v1137 = v1276;
              if (v1276 == (void **)&v1274)
              {
                v1137 = (void **)&v1274;
                v1138 = 4;
              }
              else
              {
                if (!v1276)
                  goto LABEL_1616;
                v1138 = 5;
              }
              (*((void (**)(void))*v1137 + v1138))();
LABEL_1616:
              LODWORD(v1274) = 0;
              v1271 = 0;
              if (!v1281)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
              v1139 = v1281;
              if (v1281 == v1280)
              {
                v1139 = v1280;
                v1140 = 4;
              }
              else
              {
                if (!v1281)
                  goto LABEL_1622;
                v1140 = 5;
              }
              (*(void (**)(void))(*v1139 + 8 * v1140))();
LABEL_1622:
              v1141 = v1273;
              if (v1273 == v1272)
              {
                v1141 = v1272;
                v1142 = 4;
                goto LABEL_1626;
              }
              if (v1273)
              {
                v1142 = 5;
LABEL_1626:
                (*(void (**)(void))(*v1141 + 8 * v1142))();
              }
              __b = (char *)__b + 4 * __len;
              v1129 += __len;
              if ((unint64_t)(*a2)[6] <= v1129)
                goto LABEL_1747;
            }
          }
          if (v1265 != 5)
          {
            if (v1265 != 4)
              goto LABEL_1751;
            v777 = v1267;
            goto LABEL_1603;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v1077 = (*a2)[19];
          v98 = v1274;
          v99 = v1276;
          if (!(*a2)[6])
            goto LABEL_1747;
          v1078 = 0;
          v1079 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
          break;
        default:
          return;
      }
      while (1)
      {
        LODWORD(__b) = 0;
        v1080 = 0;
        if ((v1079 & 0x80000000) == 0)
        {
          v1081 = v1079;
          v1082 = v1078;
          do
          {
            v1083 = ldiv(v1082, v98[v1081]);
            v1082 = v1083.quot;
            v1080 += (_QWORD)v99[v1081--] * v1083.rem;
          }
          while (v1081 != -1);
        }
        LODWORD(__b) = v1080;
        v1271 = 0;
        v1273 = 0;
        v1084 = operator new(0x28uLL);
        *v1084 = &off_2513477F8;
        v1084[1] = &v1259;
        v1084[2] = &v1271;
        v1084[3] = &__len;
        v1084[4] = &__b;
        v1273 = v1084;
        v1281 = 0;
        v1085 = (void **)operator new(0x28uLL);
        *v1085 = &off_251346A78;
        v1085[1] = &v1266;
        v1085[2] = &v1268;
        v1085[3] = v1280;
        v1085[4] = v1272;
        v1276 = v1085;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
        v1086 = v1276;
        if (v1276 == (void **)&v1274)
        {
          v1086 = (void **)&v1274;
          v1087 = 4;
        }
        else
        {
          if (!v1276)
            goto LABEL_1533;
          v1087 = 5;
        }
        (*((void (**)(void))*v1086 + v1087))();
LABEL_1533:
        LODWORD(v1274) = 0;
        LODWORD(v1260) = 0;
        if (!v1281)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
        v1088 = v1281;
        if (v1281 == v1280)
        {
          v1088 = v1280;
          v1089 = 4;
        }
        else
        {
          if (!v1281)
            goto LABEL_1539;
          v1089 = 5;
        }
        (*(void (**)(void))(*v1088 + 8 * v1089))();
LABEL_1539:
        v1090 = v1273;
        if (v1273 == v1272)
        {
          v1090 = v1272;
          v1091 = 4;
          goto LABEL_1543;
        }
        if (v1273)
        {
          v1091 = 5;
LABEL_1543:
          (*(void (**)(void))(*v1090 + 8 * v1091))();
        }
        *v1077++ = v1271;
        if ((unint64_t)(*a2)[6] <= ++v1078)
          goto LABEL_1747;
      }
    case 3:
      v18 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1277 = &unk_2513463C8;
      v1278 = mlx::core::allocator::free;
      v1279 = &v1277;
      mlx::core::array::set_data(a2, (uint64_t)v18, (uint64_t)&v1277);
      v19 = v1279;
      if (v1279 == &v1277)
      {
        v20 = 4;
        v19 = &v1277;
      }
      else
      {
        if (!v1279)
          goto LABEL_33;
        v20 = 5;
      }
      (*((void (**)(void))*v19 + v20))();
LABEL_33:
      v1263 = 0;
      v1264 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1263 = __p;
        operator delete(__p);
      }
      if (v1265 == 1)
      {
        v67 = v1267;
        if (v1267 - (_BYTE *)v1266 == 4)
        {
          v68 = (*a2)[6];
          if (v68)
          {
            v69 = 0;
            v70 = *(int *)v1266;
            v71 = (char *)(*a2)[19];
            v72 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *v71 = 1;
              if ((int)v70 >= 1)
              {
                v73 = 1;
                v74 = v70 + 1;
                v75 = v72;
                do
                {
                  v76 = *v75++;
                  v73 &= v76 != 0;
                  *v71 = v73;
                  --v74;
                }
                while (v74 > 1);
              }
              v69 = (int *)((char *)v69 + 1);
              ++v71;
              v72 += v70;
            }
            while (v69 != v68);
          }
          goto LABEL_1751;
        }
        goto LABEL_139;
      }
      if (!v1265)
      {
        v33 = (char *)(*a2)[19];
        *v33 = 1;
        v34 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v34 >= 1)
        {
          v35 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v36 = v34 + 1;
          v37 = 1;
          do
          {
            v38 = *v35++;
            v37 &= v38 != 0;
            *v33 = v37;
            --v36;
          }
          while (v36 > 1);
        }
        goto LABEL_1751;
      }
      if ((v1265 & 0xFFFFFFFD) == 1)
      {
        v67 = v1267;
LABEL_139:
        v1271 = 0;
        v1271 = *((_DWORD *)v67 - 1);
        v1267 = v67 - 4;
        v1269 -= 8;
        v125 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1260 = (*a2)[19];
        __len = v125;
        v98 = v1274;
        v99 = v1276;
        v126 = (*a2)[6];
        if (v1267 == v1266)
        {
          if (v126)
          {
            v225 = 0;
            v226 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            v227 = (char *)v1260;
            v1240 = __len;
            v228 = v1271;
            v229 = v1271 + 1;
            do
            {
              v230 = 0;
              if ((v226 & 0x80000000) == 0)
              {
                v231 = v226;
                v232 = (int)v225;
                do
                {
                  v233 = ldiv(v232, v98[v231]);
                  v232 = v233.quot;
                  v230 += (_QWORD)v99[v231--] * v233.rem;
                }
                while (v231 != -1);
              }
              *v227 = 1;
              if (v228 >= 1)
              {
                v234 = (unsigned __int8 *)(v1240 + (int)v230);
                v235 = 1;
                v236 = v229;
                do
                {
                  v237 = *v234++;
                  v235 &= v237 != 0;
                  *v227 = v235;
                  --v236;
                }
                while (v236 > 1);
              }
              v225 = (int *)((char *)v225 + 1);
              ++v227;
            }
            while (v225 != v126);
          }
          goto LABEL_1747;
        }
        if (!v126)
          goto LABEL_1747;
        v127 = 0;
        v128 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
        while (1)
        {
          v1259 = 0;
          v129 = 0;
          if ((v128 & 0x80000000) == 0)
          {
            v130 = v128;
            v131 = v127;
            do
            {
              v132 = ldiv(v131, v98[v130]);
              v131 = v132.quot;
              v129 += (_QWORD)v99[v130--] * v132.rem;
            }
            while (v130 != -1);
          }
          v1259 = v129;
          *(_BYTE *)v1260 = 1;
          v1273 = 0;
          v133 = operator new(0x30uLL);
          *v133 = &off_251347878;
          v133[1] = &v1257;
          v133[2] = &__len;
          v133[3] = &v1259;
          v133[4] = &v1260;
          v133[5] = &v1271;
          v1273 = v133;
          v1281 = 0;
          v134 = (void **)operator new(0x28uLL);
          *v134 = &off_251346A78;
          v134[1] = &v1266;
          v134[2] = &v1268;
          v134[3] = v1280;
          v134[4] = v1272;
          v1276 = v134;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
          v135 = v1276;
          if (v1276 == (void **)&v1274)
          {
            v135 = (void **)&v1274;
            v136 = 4;
          }
          else
          {
            if (!v1276)
              goto LABEL_150;
            v136 = 5;
          }
          (*((void (**)(void))*v135 + v136))();
LABEL_150:
          LODWORD(v1274) = 0;
          LODWORD(__b) = 0;
          if (!v1281)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
          v137 = v1281;
          if (v1281 == v1280)
          {
            v137 = v1280;
            v138 = 4;
          }
          else
          {
            if (!v1281)
              goto LABEL_156;
            v138 = 5;
          }
          (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_156:
          v139 = v1273;
          if (v1273 == v1272)
          {
            v139 = v1272;
            v140 = 4;
            goto LABEL_160;
          }
          if (v1273)
          {
            v140 = 5;
LABEL_160:
            (*(void (**)(void))(*v139 + 8 * v140))();
          }
          ++v127;
          v1260 = (int *)((char *)v1260 + 1);
          if ((unint64_t)(*a2)[6] <= v127)
            goto LABEL_1747;
        }
      }
      if (v1265 == 2)
      {
        v190 = v1267;
        if (v1267 - (_BYTE *)v1266 == 4)
        {
          v554 = *((int *)v1267 - 1);
          v555 = *((_QWORD *)v1269 - 1);
          v1267 -= 4;
          v1269 -= 8;
          v556 = (*a2)[6];
          if (v556)
          {
            LODWORD(v557) = 0;
            v558 = (*a2)[19];
            v559 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            do
            {
              if (v555)
                memset(v558, 1, v555);
              if ((int)v554 >= 1)
              {
                v560 = 0;
                v561 = v559;
                do
                {
                  if (v555)
                  {
                    for (i9 = 0; i9 != v555; ++i9)
                    {
                      if (*(_BYTE *)(v561 + i9))
                        v563 = *((_BYTE *)v558 + i9) == 0;
                      else
                        v563 = 1;
                      v564 = !v563;
                      *((_BYTE *)v558 + i9) = v564;
                    }
                    v561 += i9;
                  }
                  ++v560;
                }
                while (v560 != (_DWORD)v554);
              }
              v559 += v555 * v554;
              v558 = (int *)((char *)v558 + v555);
              v557 = (int)v557 + (int)v555;
            }
            while (v557 < (unint64_t)v556);
          }
          goto LABEL_1751;
        }
LABEL_753:
        v1259 = 0;
        v1259 = *((_DWORD *)v190 - 1);
        __len = 0;
        v565 = *((_QWORD *)v1269 - 1);
        v1267 = v190 - 4;
        v1269 -= 8;
        v1260 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v565;
        __b = (*a2)[19];
        v98 = v1274;
        v99 = v1276;
        v566 = (unint64_t)(*a2)[6];
        if (v1267 == v1266)
        {
          if (v566)
          {
            v719 = 0;
            v720 = (char *)__b;
            v721 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            v722 = __len;
            v1245 = v1260;
            v723 = v1259;
            do
            {
              v724 = 0;
              if ((v721 & 0x80000000) == 0)
              {
                v725 = v721;
                v726 = v719;
                do
                {
                  v727 = ldiv(v726, v98[v725]);
                  v726 = v727.quot;
                  v724 += (_QWORD)v99[v725--] * v727.rem;
                }
                while (v725 != -1);
              }
              if (v722)
                memset(v720, 1, v722);
              if (v723 >= 1)
              {
                v728 = 0;
                v729 = (char *)v1245 + (int)v724;
                do
                {
                  if (v722)
                  {
                    for (i10 = 0; i10 != v722; ++i10)
                    {
                      if (v729[i10])
                        v731 = v720[i10] == 0;
                      else
                        v731 = 1;
                      v732 = !v731;
                      v720[i10] = v732;
                    }
                    v729 += i10;
                  }
                  ++v728;
                }
                while (v728 != v723);
              }
              v720 += v722;
              v719 += v722;
            }
            while (v566 > v719);
          }
          goto LABEL_1747;
        }
        if (!v566)
          goto LABEL_1747;
        v567 = 0;
        v568 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
        while (1)
        {
          v1257 = 0;
          v569 = 0;
          if ((v568 & 0x80000000) == 0)
          {
            v570 = v568;
            v571 = v567;
            do
            {
              v572 = ldiv(v571, v98[v570]);
              v571 = v572.quot;
              v569 += (_QWORD)v99[v570--] * v572.rem;
            }
            while (v570 != -1);
          }
          v1257 = v569;
          if (__len)
            memset(__b, 1, __len);
          v1273 = 0;
          v573 = operator new(0x38uLL);
          *v573 = &off_2513478F8;
          v573[1] = &v1270;
          v573[2] = &v1260;
          v573[3] = &v1257;
          v573[4] = &__b;
          v573[5] = &v1259;
          v573[6] = &__len;
          v1273 = v573;
          v1281 = 0;
          v574 = (void **)operator new(0x28uLL);
          *v574 = &off_251346A78;
          v574[1] = &v1266;
          v574[2] = &v1268;
          v574[3] = v1280;
          v574[4] = v1272;
          v1276 = v574;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
          v575 = v1276;
          if (v1276 == (void **)&v1274)
          {
            v575 = (void **)&v1274;
            v576 = 4;
          }
          else
          {
            if (!v1276)
              goto LABEL_766;
            v576 = 5;
          }
          (*((void (**)(void))*v575 + v576))();
LABEL_766:
          LODWORD(v1274) = 0;
          v1271 = 0;
          if (!v1281)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
          v577 = v1281;
          if (v1281 == v1280)
          {
            v577 = v1280;
            v578 = 4;
          }
          else
          {
            if (!v1281)
              goto LABEL_772;
            v578 = 5;
          }
          (*(void (**)(void))(*v577 + 8 * v578))();
LABEL_772:
          v579 = v1273;
          if (v1273 == v1272)
          {
            v579 = v1272;
            v580 = 4;
            goto LABEL_776;
          }
          if (v1273)
          {
            v580 = 5;
LABEL_776:
            (*(void (**)(void))(*v579 + 8 * v580))();
          }
          __b = (char *)__b + __len;
          v567 += __len;
          if ((unint64_t)(*a2)[6] <= v567)
            goto LABEL_1747;
        }
      }
      if (v1265 != 5)
      {
        if (v1265 != 4)
          goto LABEL_1751;
        v190 = v1267;
        goto LABEL_753;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v477 = (*a2)[19];
      v98 = v1274;
      v99 = v1276;
      if (!(*a2)[6])
        goto LABEL_1747;
      v478 = 0;
      v479 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
      while (1)
      {
        LODWORD(__b) = 0;
        v480 = 0;
        if ((v479 & 0x80000000) == 0)
        {
          v481 = v479;
          v482 = v478;
          do
          {
            v483 = ldiv(v482, v98[v481]);
            v482 = v483.quot;
            v480 += (_QWORD)v99[v481--] * v483.rem;
          }
          while (v481 != -1);
        }
        LODWORD(__b) = v480;
        LOBYTE(v1259) = 1;
        v1273 = 0;
        v484 = operator new(0x28uLL);
        *v484 = &off_251347978;
        v484[1] = &v1271;
        v484[2] = &v1259;
        v484[3] = &__len;
        v484[4] = &__b;
        v1273 = v484;
        v1281 = 0;
        v485 = (void **)operator new(0x28uLL);
        *v485 = &off_251346A78;
        v485[1] = &v1266;
        v485[2] = &v1268;
        v485[3] = v1280;
        v485[4] = v1272;
        v1276 = v485;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
        v486 = v1276;
        if (v1276 == (void **)&v1274)
        {
          v486 = (void **)&v1274;
          v487 = 4;
        }
        else
        {
          if (!v1276)
            goto LABEL_622;
          v487 = 5;
        }
        (*((void (**)(void))*v486 + v487))();
LABEL_622:
        LODWORD(v1274) = 0;
        LODWORD(v1260) = 0;
        if (!v1281)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
        v488 = v1281;
        if (v1281 == v1280)
        {
          v488 = v1280;
          v489 = 4;
        }
        else
        {
          if (!v1281)
            goto LABEL_628;
          v489 = 5;
        }
        (*(void (**)(void))(*v488 + 8 * v489))();
LABEL_628:
        v490 = v1273;
        if (v1273 == v1272)
        {
          v490 = v1272;
          v491 = 4;
          goto LABEL_632;
        }
        if (v1273)
        {
          v491 = 5;
LABEL_632:
          (*(void (**)(void))(*v490 + 8 * v491))();
        }
        *(_BYTE *)v477 = v1259;
        v477 = (int *)((char *)v477 + 1);
        if ((unint64_t)(*a2)[6] <= ++v478)
          goto LABEL_1747;
      }
    case 4:
      v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1277 = &unk_2513463C8;
      v1278 = mlx::core::allocator::free;
      v1279 = &v1277;
      mlx::core::array::set_data(a2, (uint64_t)v10, (uint64_t)&v1277);
      v11 = v1279;
      if (v1279 == &v1277)
      {
        v12 = 4;
        v11 = &v1277;
      }
      else
      {
        if (!v1279)
          goto LABEL_23;
        v12 = 5;
      }
      (*((void (**)(void))*v11 + v12))();
LABEL_23:
      v1263 = 0;
      v1264 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1263 = __p;
        operator delete(__p);
      }
      if (v1265 == 1)
      {
        v57 = v1267;
        if (v1267 - (_BYTE *)v1266 == 4)
        {
          v58 = (*a2)[6];
          if (v58)
          {
            v59 = 0;
            v60 = *(int *)v1266;
            v61 = (char *)(*a2)[19];
            v62 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *v61 = 1;
              if ((int)v60 >= 1)
              {
                v63 = 1;
                v64 = v60 + 1;
                v65 = v62;
                do
                {
                  v66 = *v65++;
                  v63 &= v66 != 0;
                  *v61 = v63;
                  --v64;
                }
                while (v64 > 1);
              }
              v59 = (int *)((char *)v59 + 1);
              ++v61;
              v62 += v60;
            }
            while (v59 != v58);
          }
          goto LABEL_1751;
        }
        goto LABEL_105;
      }
      if (!v1265)
      {
        v27 = (char *)(*a2)[19];
        *v27 = 1;
        v28 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v28 >= 1)
        {
          v29 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v30 = v28 + 1;
          v31 = 1;
          do
          {
            v32 = *v29++;
            v31 &= v32 != 0;
            *v27 = v31;
            --v30;
          }
          while (v30 > 1);
        }
        goto LABEL_1751;
      }
      if ((v1265 & 0xFFFFFFFD) == 1)
      {
        v57 = v1267;
LABEL_105:
        v1271 = 0;
        v1271 = *((_DWORD *)v57 - 1);
        v1267 = v57 - 4;
        v1269 -= 8;
        v97 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1260 = (*a2)[19];
        __len = v97;
        v98 = v1274;
        v99 = v1276;
        v100 = (*a2)[6];
        if (v1267 == v1266)
        {
          if (v100)
          {
            v212 = 0;
            v213 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            v214 = (char *)v1260;
            v1239 = __len;
            v215 = v1271;
            v216 = v1271 + 1;
            do
            {
              v217 = 0;
              if ((v213 & 0x80000000) == 0)
              {
                v218 = v213;
                v219 = (int)v212;
                do
                {
                  v220 = ldiv(v219, v98[v218]);
                  v219 = v220.quot;
                  v217 += (_QWORD)v99[v218--] * v220.rem;
                }
                while (v218 != -1);
              }
              *v214 = 1;
              if (v215 >= 1)
              {
                v221 = (unsigned __int8 *)(v1239 + (int)v217);
                v222 = 1;
                v223 = v216;
                do
                {
                  v224 = *v221++;
                  v222 &= v224 != 0;
                  *v214 = v222;
                  --v223;
                }
                while (v223 > 1);
              }
              v212 = (int *)((char *)v212 + 1);
              ++v214;
            }
            while (v212 != v100);
          }
          goto LABEL_1747;
        }
        if (!v100)
          goto LABEL_1747;
        v101 = 0;
        v102 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
        while (1)
        {
          v1259 = 0;
          v103 = 0;
          if ((v102 & 0x80000000) == 0)
          {
            v104 = v102;
            v105 = v101;
            do
            {
              v106 = ldiv(v105, v98[v104]);
              v105 = v106.quot;
              v103 += (_QWORD)v99[v104--] * v106.rem;
            }
            while (v104 != -1);
          }
          v1259 = v103;
          *(_BYTE *)v1260 = 1;
          v1273 = 0;
          v107 = operator new(0x30uLL);
          *v107 = &off_251347B78;
          v107[1] = &v1257;
          v107[2] = &__len;
          v107[3] = &v1259;
          v107[4] = &v1260;
          v107[5] = &v1271;
          v1273 = v107;
          v1281 = 0;
          v108 = (void **)operator new(0x28uLL);
          *v108 = &off_251346A78;
          v108[1] = &v1266;
          v108[2] = &v1268;
          v108[3] = v1280;
          v108[4] = v1272;
          v1276 = v108;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
          v109 = v1276;
          if (v1276 == (void **)&v1274)
          {
            v109 = (void **)&v1274;
            v110 = 4;
          }
          else
          {
            if (!v1276)
              goto LABEL_116;
            v110 = 5;
          }
          (*((void (**)(void))*v109 + v110))();
LABEL_116:
          LODWORD(v1274) = 0;
          LODWORD(__b) = 0;
          if (!v1281)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
          v111 = v1281;
          if (v1281 == v1280)
          {
            v111 = v1280;
            v112 = 4;
          }
          else
          {
            if (!v1281)
              goto LABEL_122;
            v112 = 5;
          }
          (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_122:
          v113 = v1273;
          if (v1273 == v1272)
          {
            v113 = v1272;
            v114 = 4;
            goto LABEL_126;
          }
          if (v1273)
          {
            v114 = 5;
LABEL_126:
            (*(void (**)(void))(*v113 + 8 * v114))();
          }
          ++v101;
          v1260 = (int *)((char *)v1260 + 1);
          if ((unint64_t)(*a2)[6] <= v101)
            goto LABEL_1747;
        }
      }
      if (v1265 == 2)
      {
        v189 = v1267;
        if (v1267 - (_BYTE *)v1266 == 4)
        {
          v407 = *((int *)v1267 - 1);
          v408 = *((_QWORD *)v1269 - 1);
          v1267 -= 4;
          v1269 -= 8;
          v409 = (*a2)[6];
          if (v409)
          {
            LODWORD(v410) = 0;
            v411 = (*a2)[19];
            v412 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            do
            {
              if (v408)
                memset(v411, 1, v408);
              if ((int)v407 >= 1)
              {
                v413 = 0;
                v414 = v412;
                do
                {
                  if (v408)
                  {
                    for (i11 = 0; i11 != v408; ++i11)
                    {
                      if (*(_BYTE *)(v414 + i11))
                        v416 = *((_BYTE *)v411 + i11) == 0;
                      else
                        v416 = 1;
                      v417 = !v416;
                      *((_BYTE *)v411 + i11) = v417;
                    }
                    v414 += i11;
                  }
                  ++v413;
                }
                while (v413 != (_DWORD)v407);
              }
              v412 += v408 * v407;
              v411 = (int *)((char *)v411 + v408);
              v410 = (int)v410 + (int)v408;
            }
            while (v410 < (unint64_t)v409);
          }
          goto LABEL_1751;
        }
LABEL_522:
        v1259 = 0;
        v1259 = *((_DWORD *)v189 - 1);
        __len = 0;
        v418 = *((_QWORD *)v1269 - 1);
        v1267 = v189 - 4;
        v1269 -= 8;
        v1260 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v418;
        __b = (*a2)[19];
        v98 = v1274;
        v99 = v1276;
        v419 = (unint64_t)(*a2)[6];
        if (v1267 == v1266)
        {
          if (v419)
          {
            v705 = 0;
            v706 = (char *)__b;
            v707 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            v708 = __len;
            v1244 = v1260;
            v709 = v1259;
            do
            {
              v710 = 0;
              if ((v707 & 0x80000000) == 0)
              {
                v711 = v707;
                v712 = v705;
                do
                {
                  v713 = ldiv(v712, v98[v711]);
                  v712 = v713.quot;
                  v710 += (_QWORD)v99[v711--] * v713.rem;
                }
                while (v711 != -1);
              }
              if (v708)
                memset(v706, 1, v708);
              if (v709 >= 1)
              {
                v714 = 0;
                v715 = (char *)v1244 + (int)v710;
                do
                {
                  if (v708)
                  {
                    for (i12 = 0; i12 != v708; ++i12)
                    {
                      if (v715[i12])
                        v717 = v706[i12] == 0;
                      else
                        v717 = 1;
                      v718 = !v717;
                      v706[i12] = v718;
                    }
                    v715 += i12;
                  }
                  ++v714;
                }
                while (v714 != v709);
              }
              v706 += v708;
              v705 += v708;
            }
            while (v419 > v705);
          }
          goto LABEL_1747;
        }
        if (!v419)
          goto LABEL_1747;
        v420 = 0;
        v421 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
        while (1)
        {
          v1257 = 0;
          v422 = 0;
          if ((v421 & 0x80000000) == 0)
          {
            v423 = v421;
            v424 = v420;
            do
            {
              v425 = ldiv(v424, v98[v423]);
              v424 = v425.quot;
              v422 += (_QWORD)v99[v423--] * v425.rem;
            }
            while (v423 != -1);
          }
          v1257 = v422;
          if (__len)
            memset(__b, 1, __len);
          v1273 = 0;
          v426 = operator new(0x38uLL);
          *v426 = &off_251347BF8;
          v426[1] = &v1270;
          v426[2] = &v1260;
          v426[3] = &v1257;
          v426[4] = &__b;
          v426[5] = &v1259;
          v426[6] = &__len;
          v1273 = v426;
          v1281 = 0;
          v427 = (void **)operator new(0x28uLL);
          *v427 = &off_251346A78;
          v427[1] = &v1266;
          v427[2] = &v1268;
          v427[3] = v1280;
          v427[4] = v1272;
          v1276 = v427;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
          v428 = v1276;
          if (v1276 == (void **)&v1274)
          {
            v428 = (void **)&v1274;
            v429 = 4;
          }
          else
          {
            if (!v1276)
              goto LABEL_535;
            v429 = 5;
          }
          (*((void (**)(void))*v428 + v429))();
LABEL_535:
          LODWORD(v1274) = 0;
          v1271 = 0;
          if (!v1281)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
          v430 = v1281;
          if (v1281 == v1280)
          {
            v430 = v1280;
            v431 = 4;
          }
          else
          {
            if (!v1281)
              goto LABEL_541;
            v431 = 5;
          }
          (*(void (**)(void))(*v430 + 8 * v431))();
LABEL_541:
          v432 = v1273;
          if (v1273 == v1272)
          {
            v432 = v1272;
            v433 = 4;
            goto LABEL_545;
          }
          if (v1273)
          {
            v433 = 5;
LABEL_545:
            (*(void (**)(void))(*v432 + 8 * v433))();
          }
          __b = (char *)__b + __len;
          v420 += __len;
          if ((unint64_t)(*a2)[6] <= v420)
            goto LABEL_1747;
        }
      }
      if (v1265 != 5)
      {
        if (v1265 != 4)
          goto LABEL_1751;
        v189 = v1267;
        goto LABEL_522;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v382 = (*a2)[19];
      v98 = v1274;
      v99 = v1276;
      if (!(*a2)[6])
        goto LABEL_1747;
      v383 = 0;
      v384 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
      while (1)
      {
        LODWORD(__b) = 0;
        v385 = 0;
        if ((v384 & 0x80000000) == 0)
        {
          v386 = v384;
          v387 = v383;
          do
          {
            v388 = ldiv(v387, v98[v386]);
            v387 = v388.quot;
            v385 += (_QWORD)v99[v386--] * v388.rem;
          }
          while (v386 != -1);
        }
        LODWORD(__b) = v385;
        LOBYTE(v1259) = 1;
        v1273 = 0;
        v389 = operator new(0x28uLL);
        *v389 = &off_251347C78;
        v389[1] = &v1271;
        v389[2] = &v1259;
        v389[3] = &__len;
        v389[4] = &__b;
        v1273 = v389;
        v1281 = 0;
        v390 = (void **)operator new(0x28uLL);
        *v390 = &off_251346A78;
        v390[1] = &v1266;
        v390[2] = &v1268;
        v390[3] = v1280;
        v390[4] = v1272;
        v1276 = v390;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
        v391 = v1276;
        if (v1276 == (void **)&v1274)
        {
          v391 = (void **)&v1274;
          v392 = 4;
        }
        else
        {
          if (!v1276)
            goto LABEL_480;
          v392 = 5;
        }
        (*((void (**)(void))*v391 + v392))();
LABEL_480:
        LODWORD(v1274) = 0;
        LODWORD(v1260) = 0;
        if (!v1281)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
        v393 = v1281;
        if (v1281 == v1280)
        {
          v393 = v1280;
          v394 = 4;
        }
        else
        {
          if (!v1281)
            goto LABEL_486;
          v394 = 5;
        }
        (*(void (**)(void))(*v393 + 8 * v394))();
LABEL_486:
        v395 = v1273;
        if (v1273 == v1272)
        {
          v395 = v1272;
          v396 = 4;
          goto LABEL_490;
        }
        if (v1273)
        {
          v396 = 5;
LABEL_490:
          (*(void (**)(void))(*v395 + 8 * v396))();
        }
        *(_BYTE *)v382 = v1259;
        v382 = (int *)((char *)v382 + 1);
        if ((unint64_t)(*a2)[6] <= ++v383)
          goto LABEL_1747;
      }
    case 5:
      v24 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1277 = &unk_2513463C8;
      v1278 = mlx::core::allocator::free;
      v1279 = &v1277;
      mlx::core::array::set_data(a2, (uint64_t)v24, (uint64_t)&v1277);
      v25 = v1279;
      if (v1279 == &v1277)
      {
        v26 = 4;
        v25 = &v1277;
      }
      else
      {
        if (!v1279)
          goto LABEL_63;
        v26 = 5;
      }
      (*((void (**)(void))*v25 + v26))();
LABEL_63:
      v1263 = 0;
      v1264 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1263 = __p;
        operator delete(__p);
      }
      if (v1265 == 1)
      {
        v115 = v1267;
        if (v1267 - (_BYTE *)v1266 == 4)
        {
          v116 = (*a2)[6];
          if (v116)
          {
            v117 = 0;
            v118 = *(int *)v1266;
            v119 = (*a2)[19];
            v120 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *(_BYTE *)v119 = 0;
              if ((int)v118 >= 1)
              {
                v121 = 0;
                v122 = v118 + 1;
                v123 = v120;
                do
                {
                  v124 = *v123++;
                  v121 |= v124;
                  *(_BYTE *)v119 = v121;
                  --v122;
                }
                while (v122 > 1);
              }
              v117 = (int *)((char *)v117 + 1);
              v119 = (int *)((char *)v119 + 1);
              v120 += v118;
            }
            while (v117 != v116);
          }
          goto LABEL_1751;
        }
        goto LABEL_217;
      }
      if (!v1265)
      {
        v51 = (*a2)[19];
        *(_BYTE *)v51 = 0;
        v52 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v52 >= 1)
        {
          v53 = 0;
          v54 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v55 = v52 + 1;
          do
          {
            v56 = *v54++;
            v53 |= v56;
            *(_BYTE *)v51 = v53;
            --v55;
          }
          while (v55 > 1);
        }
        goto LABEL_1751;
      }
      if ((v1265 & 0xFFFFFFFD) == 1)
      {
        v115 = v1267;
LABEL_217:
        v1271 = 0;
        v1271 = *((_DWORD *)v115 - 1);
        v1267 = v115 - 4;
        v1269 -= 8;
        v173 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1260 = (*a2)[19];
        __len = v173;
        v98 = v1274;
        v99 = v1276;
        v174 = (*a2)[6];
        if (v1267 == v1266)
        {
          if (v174)
          {
            v264 = 0;
            v265 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            v266 = v1260;
            v1243 = __len;
            v267 = v1271;
            v268 = v1271 + 1;
            do
            {
              v269 = 0;
              if ((v265 & 0x80000000) == 0)
              {
                v270 = v265;
                v271 = (int)v264;
                do
                {
                  v272 = ldiv(v271, v98[v270]);
                  v271 = v272.quot;
                  v269 += (_QWORD)v99[v270--] * v272.rem;
                }
                while (v270 != -1);
              }
              *(_BYTE *)v266 = 0;
              if (v267 >= 1)
              {
                v273 = 0;
                v274 = (unsigned __int8 *)(v1243 + (int)v269);
                v275 = v268;
                do
                {
                  v276 = *v274++;
                  v273 |= v276;
                  *(_BYTE *)v266 = v273;
                  --v275;
                }
                while (v275 > 1);
              }
              v264 = (int *)((char *)v264 + 1);
              v266 = (int *)((char *)v266 + 1);
            }
            while (v264 != v174);
          }
          goto LABEL_1747;
        }
        if (!v174)
          goto LABEL_1747;
        v175 = 0;
        v176 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
        while (1)
        {
          v1259 = 0;
          v177 = 0;
          if ((v176 & 0x80000000) == 0)
          {
            v178 = v176;
            v179 = v175;
            do
            {
              v180 = ldiv(v179, v98[v178]);
              v179 = v180.quot;
              v177 += (_QWORD)v99[v178--] * v180.rem;
            }
            while (v178 != -1);
          }
          v1259 = v177;
          *(_BYTE *)v1260 = 0;
          v1273 = 0;
          v181 = operator new(0x30uLL);
          *v181 = &off_2513479F8;
          v181[1] = &v1257;
          v181[2] = &__len;
          v181[3] = &v1259;
          v181[4] = &v1260;
          v181[5] = &v1271;
          v1273 = v181;
          v1281 = 0;
          v182 = (void **)operator new(0x28uLL);
          *v182 = &off_251346A78;
          v182[1] = &v1266;
          v182[2] = &v1268;
          v182[3] = v1280;
          v182[4] = v1272;
          v1276 = v182;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
          v183 = v1276;
          if (v1276 == (void **)&v1274)
          {
            v183 = (void **)&v1274;
            v184 = 4;
          }
          else
          {
            if (!v1276)
              goto LABEL_228;
            v184 = 5;
          }
          (*((void (**)(void))*v183 + v184))();
LABEL_228:
          LODWORD(v1274) = 0;
          LODWORD(__b) = 0;
          if (!v1281)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1281 + 48))(v1281, &v1274, &__b);
          v185 = v1281;
          if (v1281 == v1280)
          {
            v185 = v1280;
            v186 = 4;
          }
          else
          {
            if (!v1281)
              goto LABEL_234;
            v186 = 5;
          }
          (*(void (**)(void))(*v185 + 8 * v186))();
LABEL_234:
          v187 = v1273;
          if (v1273 == v1272)
          {
            v187 = v1272;
            v188 = 4;
            goto LABEL_238;
          }
          if (v1273)
          {
            v188 = 5;
LABEL_238:
            (*(void (**)(void))(*v187 + 8 * v188))();
          }
          ++v175;
          v1260 = (int *)((char *)v1260 + 1);
          if ((unint64_t)(*a2)[6] <= v175)
            goto LABEL_1747;
        }
      }
      if (v1265 == 2)
      {
        v193 = v1267;
        if (v1267 - (_BYTE *)v1266 == 4)
        {
          v680 = *((int *)v1267 - 1);
          v681 = *((_QWORD *)v1269 - 1);
          v1267 -= 4;
          v1269 -= 8;
          v682 = (*a2)[6];
          if (v682)
          {
            LODWORD(v683) = 0;
            v684 = (*a2)[19];
            v685 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            do
            {
              if (v681)
                bzero(v684, v681);
              if ((int)v680 >= 1)
              {
                v686 = 0;
                v687 = v685;
                do
                {
                  if (v681)
                  {
                    for (i13 = 0; i13 != v681; ++i13)
                      *((_BYTE *)v684 + i13) |= *(_BYTE *)(v687 + i13);
                    v687 += i13;
                  }
                  ++v686;
                }
                while (v686 != (_DWORD)v680);
              }
              v685 += v681 * v680;
              v684 = (int *)((char *)v684 + v681);
              v683 = (int)v683 + (int)v681;
            }
            while (v683 < (unint64_t)v682);
          }
          goto LABEL_1751;
        }
LABEL_954:
        v1259 = 0;
        v1259 = *((_DWORD *)v193 - 1);
        __len = 0;
        v689 = *((_QWORD *)v1269 - 1);
        v1267 = v193 - 4;
        v1269 -= 8;
        v1260 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v689;
        __b = (*a2)[19];
        v98 = v1274;
        v99 = v1276;
        v690 = (unint64_t)(*a2)[6];
        if (v1267 == v1266)
        {
          if (v690)
          {
            v759 = 0;
            v760 = (char *)__b;
            v761 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
            v762 = __len;
            v1248 = v1260;
            v763 = v1259;
            do
            {
              v764 = 0;
              if ((v761 & 0x80000000) == 0)
              {
                v765 = v761;
                v766 = v759;
                do
                {
                  v767 = ldiv(v766, v98[v765]);
                  v766 = v767.quot;
                  v764 += (_QWORD)v99[v765--] * v767.rem;
                }
                while (v765 != -1);
              }
              if (v762)
                bzero(v760, v762);
              if (v763 >= 1)
              {
                v768 = 0;
                v769 = (char *)v1248 + (int)v764;
                do
                {
                  if (v762)
                  {
                    for (i14 = 0; i14 != v762; ++i14)
                      v760[i14] |= v769[i14];
                    v769 += i14;
                  }
                  ++v768;
                }
                while (v768 != v763);
              }
              v760 += v762;
              v759 += v762;
            }
            while (v690 > v759);
          }
          goto LABEL_1747;
        }
        if (!v690)
          goto LABEL_1747;
        v691 = 0;
        v692 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
        while (1)
        {
          v1257 = 0;
          v693 = 0;
          if ((v692 & 0x80000000) == 0)
          {
            v694 = v692;
            v695 = v691;
            do
            {
              v696 = ldiv(v695, v98[v694]);
              v695 = v696.quot;
              v693 += (_QWORD)v99[v694--] * v696.rem;
            }
            while (v694 != -1);
          }
          v1257 = v693;
          if (__len)
            bzero(__b, __len);
          v1273 = 0;
          v697 = operator new(0x38uLL);
          *v697 = &off_251347A78;
          v697[1] = &v1270;
          v697[2] = &v1260;
          v697[3] = &v1257;
          v697[4] = &__b;
          v697[5] = &v1259;
          v697[6] = &__len;
          v1273 = v697;
          v1281 = 0;
          v698 = (void **)operator new(0x28uLL);
          *v698 = &off_251346A78;
          v698[1] = &v1266;
          v698[2] = &v1268;
          v698[3] = v1280;
          v698[4] = v1272;
          v1276 = v698;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
          v699 = v1276;
          if (v1276 == (void **)&v1274)
          {
            v699 = (void **)&v1274;
            v700 = 4;
          }
          else
          {
            if (!v1276)
              goto LABEL_967;
            v700 = 5;
          }
          (*((void (**)(void))*v699 + v700))();
LABEL_967:
          LODWORD(v1274) = 0;
          v1271 = 0;
          if (!v1281)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1281 + 48))(v1281, &v1274, &v1271);
          v701 = v1281;
          if (v1281 == v1280)
          {
            v701 = v1280;
            v702 = 4;
          }
          else
          {
            if (!v1281)
              goto LABEL_973;
            v702 = 5;
          }
          (*(void (**)(void))(*v701 + 8 * v702))();
LABEL_973:
          v703 = v1273;
          if (v1273 == v1272)
          {
            v703 = v1272;
            v704 = 4;
            goto LABEL_977;
          }
          if (v1273)
          {
            v704 = 5;
LABEL_977:
            (*(void (**)(void))(*v703 + 8 * v704))();
          }
          __b = (char *)__b + __len;
          v691 += __len;
          if ((unint64_t)(*a2)[6] <= v691)
            goto LABEL_1747;
        }
      }
      if (v1265 != 5)
      {
        if (v1265 != 4)
          goto LABEL_1751;
        v193 = v1267;
        goto LABEL_954;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v649 = (*a2)[19];
      v98 = v1274;
      v99 = v1276;
      if (!(*a2)[6])
        goto LABEL_1747;
      v650 = 0;
      v651 = ((unint64_t)(v1275 - (_QWORD)v1274) >> 2) - 1;
      break;
    default:
      return;
  }
  while (1)
  {
    LODWORD(__b) = 0;
    v652 = 0;
    if ((v651 & 0x80000000) == 0)
    {
      v653 = v651;
      v654 = v650;
      do
      {
        v655 = ldiv(v654, v98[v653]);
        v654 = v655.quot;
        v652 += (_QWORD)v99[v653--] * v655.rem;
      }
      while (v653 != -1);
    }
    LODWORD(__b) = v652;
    LOBYTE(v1259) = 0;
    v1273 = 0;
    v656 = operator new(0x28uLL);
    *v656 = &off_251347AF8;
    v656[1] = &v1271;
    v656[2] = &v1259;
    v656[3] = &__len;
    v656[4] = &__b;
    v1273 = v656;
    v1281 = 0;
    v657 = (void **)operator new(0x28uLL);
    *v657 = &off_251346A78;
    v657[1] = &v1266;
    v657[2] = &v1268;
    v657[3] = v1280;
    v657[4] = v1272;
    v1276 = v657;
    std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1274, v1280);
    v658 = v1276;
    if (v1276 == (void **)&v1274)
    {
      v658 = (void **)&v1274;
      v659 = 4;
    }
    else
    {
      if (!v1276)
        goto LABEL_901;
      v659 = 5;
    }
    (*((void (**)(void))*v658 + v659))();
LABEL_901:
    LODWORD(v1274) = 0;
    LODWORD(v1260) = 0;
    if (!v1281)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int **, int **))(*v1281 + 48))(v1281, &v1274, &v1260);
    v660 = v1281;
    if (v1281 == v1280)
    {
      v660 = v1280;
      v661 = 4;
    }
    else
    {
      if (!v1281)
        goto LABEL_907;
      v661 = 5;
    }
    (*(void (**)(void))(*v660 + 8 * v661))();
LABEL_907:
    v662 = v1273;
    if (v1273 == v1272)
    {
      v662 = v1272;
      v663 = 4;
      goto LABEL_911;
    }
    if (v1273)
    {
      v663 = 5;
LABEL_911:
      (*(void (**)(void))(*v662 + 8 * v663))();
    }
    *(_BYTE *)v649 = v1259;
    v649 = (int *)((char *)v649 + 1);
    if ((unint64_t)(*a2)[6] <= ++v650)
      goto LABEL_1747;
  }
}

void sub_242323358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_242323780()
{
  JUMPOUT(0x242323778);
}

void mlx::core::`anonymous namespace'::reduce_dispatch_out<unsigned char>(mlx::core::array *a1, int ***a2, int a3, uint64_t a4)
{
  mlx::core::scheduler *v7;
  void **v8;
  uint64_t v9;
  mlx::core::scheduler *v10;
  void **v11;
  uint64_t v12;
  int **v13;
  int *v14;
  mlx::core::scheduler *v15;
  void **v16;
  uint64_t v17;
  mlx::core::scheduler *v18;
  void **v19;
  uint64_t v20;
  mlx::core::scheduler *v21;
  void **v22;
  uint64_t v23;
  mlx::core::scheduler *v24;
  void **v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned int v33;
  int *v34;
  int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  int v38;
  int v39;
  char *v40;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  char v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  int *v52;
  int v53;
  unsigned __int8 v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned __int8 v57;
  unsigned int v58;
  _BYTE *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned __int8 v67;
  unsigned int v68;
  _BYTE *v69;
  unint64_t v70;
  uint64_t v71;
  int *v72;
  unsigned __int8 *v73;
  int v74;
  unsigned int v75;
  unsigned __int8 *v76;
  int v77;
  _BYTE *v78;
  int *v79;
  int *v80;
  uint64_t v81;
  char *v82;
  unsigned __int8 *v83;
  char v84;
  unsigned int v85;
  unsigned __int8 *v86;
  int v87;
  _BYTE *v88;
  int *v89;
  int *v90;
  uint64_t v91;
  int *v92;
  unsigned __int8 *v93;
  int v94;
  unsigned int v95;
  unsigned __int8 *v96;
  int v97;
  size_t v98;
  int *v99;
  void **v100;
  int *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  ldiv_t v107;
  _QWORD *v108;
  void **v109;
  void **v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _BYTE *v116;
  unint64_t v117;
  uint64_t v118;
  int *v119;
  unsigned __int8 *v120;
  unsigned __int8 v121;
  unsigned int v122;
  unsigned __int8 *v123;
  unsigned __int8 v124;
  unsigned int v125;
  size_t v126;
  int *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  ldiv_t v133;
  _QWORD *v134;
  void **v135;
  void **v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  size_t v142;
  int *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int quot;
  ldiv_t v149;
  _QWORD *v150;
  void **v151;
  void **v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  size_t v158;
  int *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  ldiv_t v165;
  _QWORD *v166;
  void **v167;
  void **v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  size_t v174;
  int *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  ldiv_t v181;
  _QWORD *v182;
  void **v183;
  void **v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _BYTE *v190;
  _BYTE *v191;
  _BYTE *v192;
  _BYTE *v193;
  _BYTE *v194;
  mlx::core::scheduler *v195;
  void **v196;
  uint64_t v197;
  mlx::core::scheduler *v198;
  void **v199;
  uint64_t v200;
  mlx::core::scheduler *v201;
  void **v202;
  uint64_t v203;
  mlx::core::scheduler *v204;
  void **v205;
  uint64_t v206;
  mlx::core::scheduler *v207;
  void **v208;
  uint64_t v209;
  mlx::core::scheduler *v210;
  void **v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  ldiv_t v218;
  int *v219;
  unsigned __int8 *v220;
  unsigned __int8 v221;
  unsigned int v222;
  unsigned __int8 v223;
  unsigned int v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  ldiv_t v230;
  int *v231;
  unsigned __int8 *v232;
  int v233;
  unsigned int v234;
  int v235;
  int *v236;
  uint64_t v237;
  char *v238;
  int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  ldiv_t v244;
  unsigned __int8 *v245;
  char v246;
  unsigned int v247;
  int v248;
  int *v249;
  uint64_t v250;
  int *v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  ldiv_t v257;
  int v258;
  unsigned __int8 *v259;
  unsigned int v260;
  int v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  ldiv_t v267;
  int *v268;
  unsigned __int8 *v269;
  unsigned __int8 v270;
  unsigned int v271;
  unsigned __int8 v272;
  unsigned int v273;
  int *v274;
  int v275;
  int v276;
  unsigned __int8 *v277;
  unsigned int v278;
  int v279;
  int *v280;
  int v281;
  int v282;
  unsigned __int8 *v283;
  unsigned int v284;
  int v285;
  int *v286;
  int v287;
  int v288;
  unsigned __int8 *v289;
  unsigned int v290;
  int v291;
  BOOL *v292;
  int v293;
  BOOL v294;
  unsigned __int8 *v295;
  unsigned int v296;
  int v297;
  int *v298;
  int v299;
  int v300;
  unsigned __int8 *v301;
  unsigned int v302;
  int v303;
  int *v304;
  int v305;
  uint64_t v306;
  unsigned __int8 *v307;
  unsigned int v308;
  unsigned int v309;
  float v310;
  float *v311;
  int v312;
  unsigned __int8 *v313;
  unsigned int v314;
  float v315;
  unsigned int v316;
  _BYTE *v317;
  int *v318;
  int *v319;
  uint64_t v320;
  int *v321;
  unsigned __int8 *v322;
  int v323;
  unsigned int v324;
  unsigned __int8 *v325;
  int v326;
  _BYTE *v327;
  int *v328;
  int *v329;
  uint64_t v330;
  int *v331;
  unsigned __int8 *v332;
  int v333;
  unsigned int v334;
  unsigned __int8 *v335;
  int v336;
  _BYTE *v337;
  unint64_t v338;
  uint64_t v339;
  int *v340;
  unsigned __int8 *v341;
  int v342;
  unsigned int v343;
  unsigned __int8 *v344;
  int v345;
  _BYTE *v346;
  int *v347;
  int *v348;
  uint64_t v349;
  BOOL *v350;
  unsigned __int8 *v351;
  BOOL v352;
  unsigned int v353;
  unsigned __int8 *v354;
  int v355;
  _BYTE *v356;
  unint64_t v357;
  uint64_t v358;
  int *v359;
  unsigned __int8 *v360;
  int v361;
  unsigned int v362;
  unsigned __int8 *v363;
  int v364;
  size_t v365;
  int *v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  ldiv_t v372;
  _QWORD *v373;
  void **v374;
  void **v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  int *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  ldiv_t v387;
  _QWORD *v388;
  void **v389;
  void **v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  _BYTE *v396;
  int *v397;
  int *v398;
  uint64_t v399;
  int *v400;
  unsigned __int8 *v401;
  uint64_t v402;
  unsigned int v403;
  unsigned __int8 *v404;
  unsigned int v405;
  uint64_t v406;
  size_t v407;
  unint64_t v408;
  int *v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  uint64_t i11;
  unsigned int v414;
  size_t v415;
  int *v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  ldiv_t v422;
  _QWORD *v423;
  void **v424;
  void **v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  _BYTE *v431;
  int *v432;
  int *v433;
  uint64_t v434;
  float *v435;
  unsigned __int8 *v436;
  float v437;
  unsigned int v438;
  unsigned __int8 *v439;
  unsigned int v440;
  size_t v441;
  int *v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  ldiv_t v448;
  _QWORD *v449;
  void **v450;
  void **v451;
  uint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  size_t v457;
  int *v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  ldiv_t v464;
  _QWORD *v465;
  void **v466;
  void **v467;
  uint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  _QWORD *v471;
  uint64_t v472;
  int *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  ldiv_t v479;
  _QWORD *v480;
  void **v481;
  void **v482;
  uint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  size_t v488;
  int *v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  ldiv_t v495;
  _QWORD *v496;
  void **v497;
  void **v498;
  uint64_t v499;
  _QWORD *v500;
  uint64_t v501;
  _QWORD *v502;
  uint64_t v503;
  size_t v504;
  int *v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  ldiv_t v511;
  _QWORD *v512;
  void **v513;
  void **v514;
  uint64_t v515;
  _QWORD *v516;
  uint64_t v517;
  _QWORD *v518;
  uint64_t v519;
  int *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  ldiv_t v526;
  _QWORD *v527;
  void **v528;
  void **v529;
  uint64_t v530;
  _QWORD *v531;
  uint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  int *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  ldiv_t v541;
  _QWORD *v542;
  void **v543;
  void **v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  _QWORD *v548;
  uint64_t v549;
  uint64_t v550;
  size_t v551;
  unint64_t v552;
  int *v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  uint64_t i9;
  size_t v558;
  int *v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  ldiv_t v565;
  _QWORD *v566;
  void **v567;
  void **v568;
  uint64_t v569;
  _QWORD *v570;
  uint64_t v571;
  _QWORD *v572;
  uint64_t v573;
  uint64_t v574;
  size_t v575;
  int *v576;
  unint64_t v577;
  int *v578;
  uint64_t v579;
  int v580;
  uint64_t v581;
  uint64_t i;
  BOOL v583;
  char v584;
  size_t v585;
  unint64_t v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  ldiv_t v592;
  _QWORD *v593;
  void **v594;
  void **v595;
  uint64_t v596;
  _QWORD *v597;
  uint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  uint64_t v601;
  size_t v602;
  int *v603;
  unint64_t v604;
  int *v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  uint64_t k;
  size_t v610;
  unint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  ldiv_t v617;
  _QWORD *v618;
  void **v619;
  void **v620;
  uint64_t v621;
  _QWORD *v622;
  uint64_t v623;
  _QWORD *v624;
  uint64_t v625;
  size_t v626;
  int *v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  int v632;
  ldiv_t v633;
  _QWORD *v634;
  void **v635;
  void **v636;
  uint64_t v637;
  _QWORD *v638;
  uint64_t v639;
  _QWORD *v640;
  uint64_t v641;
  int *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  ldiv_t v648;
  _QWORD *v649;
  void **v650;
  void **v651;
  uint64_t v652;
  _QWORD *v653;
  uint64_t v654;
  _QWORD *v655;
  uint64_t v656;
  size_t v657;
  int *v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  int v663;
  ldiv_t v664;
  _QWORD *v665;
  void **v666;
  void **v667;
  uint64_t v668;
  _QWORD *v669;
  uint64_t v670;
  _QWORD *v671;
  uint64_t v672;
  uint64_t v673;
  size_t v674;
  unint64_t v675;
  int *v676;
  uint64_t v677;
  int v678;
  uint64_t v679;
  uint64_t i13;
  unsigned int v681;
  size_t v682;
  int *v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  int v688;
  ldiv_t v689;
  _QWORD *v690;
  void **v691;
  void **v692;
  uint64_t v693;
  _QWORD *v694;
  uint64_t v695;
  _QWORD *v696;
  uint64_t v697;
  int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  int v702;
  int ***v703;
  ldiv_t v704;
  unsigned __int8 *v705;
  size_t v706;
  int v707;
  int v708;
  unsigned __int8 *v709;
  size_t v710;
  unsigned __int8 *i12;
  unsigned __int8 v712;
  unsigned int v713;
  int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  int v718;
  int ***v719;
  ldiv_t v720;
  _BYTE *v721;
  size_t v722;
  int v723;
  int v724;
  char *v725;
  size_t v726;
  _BYTE *i10;
  char v728;
  int v729;
  char *v730;
  uint64_t v731;
  size_t v732;
  int v733;
  uint64_t v734;
  uint64_t v735;
  int v736;
  ldiv_t v737;
  int v738;
  char *v739;
  uint64_t j;
  BOOL v741;
  char v742;
  int v743;
  char *v744;
  uint64_t v745;
  size_t v746;
  int v747;
  uint64_t v748;
  uint64_t v749;
  int v750;
  ldiv_t v751;
  int v752;
  char *v753;
  uint64_t m;
  int v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  int v759;
  int ***v760;
  ldiv_t v761;
  unsigned __int8 *v762;
  size_t v763;
  int v764;
  int v765;
  unsigned __int8 *v766;
  size_t v767;
  unsigned __int8 *i14;
  unsigned __int8 v769;
  unsigned int v770;
  _BYTE *v771;
  _BYTE *v772;
  _BYTE *v773;
  _BYTE *v774;
  _BYTE *v775;
  _BYTE *v776;
  _BYTE *v777;
  int *v778;
  int *v779;
  size_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  int v784;
  ldiv_t v785;
  int v786;
  unsigned __int8 *v787;
  unsigned int v788;
  int v789;
  int *v790;
  int *v791;
  size_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  int v796;
  ldiv_t v797;
  int v798;
  unsigned __int8 *v799;
  unsigned int v800;
  int v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int v806;
  ldiv_t v807;
  int *v808;
  unsigned __int8 *v809;
  int v810;
  unsigned int v811;
  int v812;
  int *v813;
  uint64_t v814;
  BOOL *v815;
  int v816;
  unsigned int v817;
  uint64_t v818;
  uint64_t v819;
  int v820;
  ldiv_t v821;
  BOOL v822;
  unsigned __int8 *v823;
  unsigned int v824;
  int v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  ldiv_t v831;
  int *v832;
  unsigned __int8 *v833;
  int v834;
  unsigned int v835;
  int v836;
  int *v837;
  uint64_t v838;
  int *v839;
  int v840;
  unsigned int v841;
  uint64_t v842;
  uint64_t v843;
  int v844;
  ldiv_t v845;
  uint64_t v846;
  unsigned __int8 *v847;
  unsigned int v848;
  unsigned int v849;
  int *v850;
  uint64_t v851;
  float *v852;
  int v853;
  unsigned int v854;
  uint64_t v855;
  uint64_t v856;
  int v857;
  ldiv_t v858;
  unsigned __int8 *v859;
  float v860;
  unsigned int v861;
  unsigned int v862;
  int *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  int v868;
  ldiv_t v869;
  _QWORD *v870;
  void **v871;
  void **v872;
  uint64_t v873;
  _QWORD *v874;
  uint64_t v875;
  _QWORD *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  int *v880;
  unint64_t v881;
  int *v882;
  uint64_t v883;
  int v884;
  uint64_t v885;
  uint64_t i3;
  size_t v887;
  unint64_t v888;
  int v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  int v893;
  ldiv_t v894;
  _QWORD *v895;
  void **v896;
  void **v897;
  uint64_t v898;
  _QWORD *v899;
  uint64_t v900;
  _QWORD *v901;
  uint64_t v902;
  int *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  int v908;
  ldiv_t v909;
  _QWORD *v910;
  void **v911;
  void **v912;
  uint64_t v913;
  _QWORD *v914;
  uint64_t v915;
  _QWORD *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  int *v920;
  unint64_t v921;
  int *v922;
  uint64_t v923;
  int v924;
  uint64_t v925;
  uint64_t mm;
  size_t v927;
  unint64_t v928;
  int v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  int v933;
  ldiv_t v934;
  _QWORD *v935;
  void **v936;
  void **v937;
  uint64_t v938;
  _QWORD *v939;
  uint64_t v940;
  _QWORD *v941;
  uint64_t v942;
  int *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  int v948;
  ldiv_t v949;
  _QWORD *v950;
  void **v951;
  void **v952;
  uint64_t v953;
  _QWORD *v954;
  uint64_t v955;
  _QWORD *v956;
  uint64_t v957;
  int *v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  int v963;
  ldiv_t v964;
  _QWORD *v965;
  void **v966;
  void **v967;
  uint64_t v968;
  _QWORD *v969;
  uint64_t v970;
  _QWORD *v971;
  uint64_t v972;
  int *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  int v978;
  ldiv_t v979;
  _QWORD *v980;
  void **v981;
  void **v982;
  uint64_t v983;
  _QWORD *v984;
  uint64_t v985;
  _QWORD *v986;
  uint64_t v987;
  uint64_t v988;
  size_t v989;
  unint64_t v990;
  int *v991;
  uint64_t v992;
  int v993;
  uint64_t v994;
  uint64_t i1;
  size_t v996;
  int *v997;
  int v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  int v1002;
  ldiv_t v1003;
  _QWORD *v1004;
  void **v1005;
  void **v1006;
  uint64_t v1007;
  _QWORD *v1008;
  uint64_t v1009;
  _QWORD *v1010;
  uint64_t v1011;
  uint64_t v1012;
  size_t v1013;
  int *v1014;
  unint64_t v1015;
  int *v1016;
  uint64_t v1017;
  int v1018;
  uint64_t v1019;
  uint64_t n;
  size_t v1021;
  unint64_t v1022;
  int v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  int v1027;
  ldiv_t v1028;
  _QWORD *v1029;
  void **v1030;
  void **v1031;
  uint64_t v1032;
  _QWORD *v1033;
  uint64_t v1034;
  _QWORD *v1035;
  uint64_t v1036;
  uint64_t v1037;
  size_t v1038;
  unint64_t v1039;
  int *v1040;
  uint64_t v1041;
  int v1042;
  uint64_t v1043;
  uint64_t jj;
  size_t v1045;
  int *v1046;
  int v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  int v1051;
  ldiv_t v1052;
  _QWORD *v1053;
  void **v1054;
  void **v1055;
  uint64_t v1056;
  _QWORD *v1057;
  uint64_t v1058;
  _QWORD *v1059;
  uint64_t v1060;
  int *v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  int v1066;
  ldiv_t v1067;
  _QWORD *v1068;
  void **v1069;
  void **v1070;
  uint64_t v1071;
  _QWORD *v1072;
  uint64_t v1073;
  _QWORD *v1074;
  uint64_t v1075;
  int *v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  int v1081;
  ldiv_t v1082;
  _QWORD *v1083;
  void **v1084;
  void **v1085;
  uint64_t v1086;
  _QWORD *v1087;
  uint64_t v1088;
  _QWORD *v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  int *v1093;
  unint64_t v1094;
  int *v1095;
  uint64_t v1096;
  int v1097;
  uint64_t v1098;
  uint64_t i5;
  size_t v1100;
  unint64_t v1101;
  int v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  int v1106;
  ldiv_t v1107;
  _QWORD *v1108;
  void **v1109;
  void **v1110;
  uint64_t v1111;
  _QWORD *v1112;
  uint64_t v1113;
  _QWORD *v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  int *v1118;
  unint64_t v1119;
  int *v1120;
  uint64_t v1121;
  int v1122;
  uint64_t v1123;
  uint64_t i7;
  size_t v1125;
  float v1126;
  unint64_t v1127;
  int v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  int v1132;
  ldiv_t v1133;
  _QWORD *v1134;
  void **v1135;
  void **v1136;
  uint64_t v1137;
  _QWORD *v1138;
  uint64_t v1139;
  _QWORD *v1140;
  uint64_t v1141;
  int v1142;
  char *v1143;
  uint64_t v1144;
  size_t v1145;
  size_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  int v1149;
  ldiv_t v1150;
  int v1151;
  int v1152;
  char *v1153;
  uint64_t i4;
  int v1155;
  char *v1156;
  uint64_t v1157;
  size_t v1158;
  size_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  int v1162;
  ldiv_t v1163;
  int v1164;
  int v1165;
  char *v1166;
  uint64_t nn;
  int v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  int v1172;
  int ***v1173;
  ldiv_t v1174;
  _BYTE *v1175;
  size_t v1176;
  int v1177;
  int v1178;
  char *v1179;
  size_t v1180;
  _BYTE *i2;
  char v1182;
  int v1183;
  unsigned __int8 *v1184;
  uint64_t v1185;
  size_t v1186;
  int v1187;
  uint64_t v1188;
  uint64_t v1189;
  int v1190;
  ldiv_t v1191;
  int v1192;
  char *v1193;
  uint64_t ii;
  int v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  int v1199;
  int ***v1200;
  ldiv_t v1201;
  _BYTE *v1202;
  size_t v1203;
  int v1204;
  int v1205;
  char *v1206;
  size_t v1207;
  _BYTE *kk;
  char v1209;
  int v1210;
  char *v1211;
  uint64_t v1212;
  size_t v1213;
  int v1214;
  size_t v1215;
  uint64_t v1216;
  int v1217;
  ldiv_t v1218;
  int v1219;
  char *v1220;
  uint64_t i6;
  int v1222;
  char *v1223;
  uint64_t v1224;
  size_t v1225;
  int v1226;
  size_t v1227;
  uint64_t v1228;
  int v1229;
  ldiv_t v1230;
  int v1231;
  char *v1232;
  uint64_t i8;
  int *v1234;
  int *v1235;
  size_t v1237;
  size_t v1238;
  int *v1239;
  int *v1240;
  size_t v1241;
  size_t v1242;
  size_t v1243;
  int *v1244;
  int *v1245;
  int *v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  void *__b;
  int v1251;
  int *v1252;
  size_t __len;
  void *__p;
  void *v1255;
  uint64_t v1256;
  int v1257;
  void *v1258;
  _BYTE *v1259;
  void *v1260;
  char *v1261;
  char v1262;
  int v1263;
  _BYTE v1264[24];
  _BYTE *v1265;
  int *v1266;
  uint64_t v1267;
  void **v1268;
  void *v1269;
  uint64_t (*v1270)(mlx::core::allocator *);
  void **v1271;
  _QWORD v1272[3];
  _QWORD *v1273;
  uint64_t v1274;

  v1274 = *MEMORY[0x24BDAC8D0];
  switch(a3)
  {
    case 0:
      v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                       * (_QWORD)(*a2)[6]));
      v1269 = &unk_2513463C8;
      v1270 = mlx::core::allocator::free;
      v1271 = &v1269;
      mlx::core::array::set_data(a2, (uint64_t)v7, (uint64_t)&v1269);
      v8 = v1271;
      if (v1271 == &v1269)
      {
        v9 = 4;
        v8 = &v1269;
      }
      else
      {
        if (!v1271)
          goto LABEL_45;
        v9 = 5;
      }
      (*((void (**)(void))*v8 + v9))();
LABEL_45:
      v1255 = 0;
      v1256 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1255 = __p;
        operator delete(__p);
      }
      if (v1257 == 1)
      {
        v78 = v1259;
        if (v1259 - (_BYTE *)v1258 == 4)
        {
          v79 = (*a2)[6];
          if (v79)
          {
            v80 = 0;
            v81 = *(int *)v1258;
            v82 = (char *)(*a2)[19];
            v83 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *v82 = 1;
              if ((int)v81 >= 1)
              {
                v84 = 1;
                v85 = v81 + 1;
                v86 = v83;
                do
                {
                  v87 = *v86++;
                  v84 &= v87 != 0;
                  *v82 = v84;
                  --v85;
                }
                while (v85 > 1);
              }
              v80 = (int *)((char *)v80 + 1);
              ++v82;
              v83 += v81;
            }
            while (v80 != v79);
          }
          goto LABEL_1733;
        }
        goto LABEL_173;
      }
      if (!v1257)
      {
        v40 = (char *)(*a2)[19];
        *v40 = 1;
        v41 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v41 >= 1)
        {
          v42 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v43 = v41 + 1;
          v44 = 1;
          do
          {
            v45 = *v42++;
            v44 &= v45 != 0;
            *v40 = v44;
            --v43;
          }
          while (v43 > 1);
        }
        goto LABEL_1733;
      }
      if ((v1257 & 0xFFFFFFFD) == 1)
      {
        v78 = v1259;
LABEL_173:
        v1263 = 0;
        v1263 = *((_DWORD *)v78 - 1);
        v1259 = v78 - 4;
        v1261 -= 8;
        v142 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1252 = (*a2)[19];
        __len = v142;
        v99 = v1266;
        v100 = v1268;
        v143 = (*a2)[6];
        if (v1259 != v1258)
        {
          if (!v143)
            goto LABEL_1729;
          v144 = 0;
          v145 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          while (1)
          {
            v1251 = 0;
            v146 = 0;
            if ((v145 & 0x80000000) == 0)
            {
              v147 = v145;
              quot = v144;
              do
              {
                v149 = ldiv(quot, v99[v147]);
                quot = v149.quot;
                v146 += (_QWORD)v100[v147--] * v149.rem;
              }
              while (v147 != -1);
            }
            v1251 = v146;
            *(_BYTE *)v1252 = 1;
            v1265 = 0;
            v150 = operator new(0x30uLL);
            *v150 = &off_251347CF8;
            v150[1] = &v1249;
            v150[2] = &__len;
            v150[3] = &v1251;
            v150[4] = &v1252;
            v150[5] = &v1263;
            v1265 = v150;
            v1273 = 0;
            v151 = (void **)operator new(0x28uLL);
            *v151 = &off_251346A78;
            v151[1] = &v1258;
            v151[2] = &v1260;
            v151[3] = v1272;
            v151[4] = v1264;
            v1268 = v151;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
            v152 = v1268;
            if (v1268 == (void **)&v1266)
            {
              v152 = (void **)&v1266;
              v153 = 4;
            }
            else
            {
              if (!v1268)
                goto LABEL_184;
              v153 = 5;
            }
            (*((void (**)(void))*v152 + v153))();
LABEL_184:
            LODWORD(v1266) = 0;
            LODWORD(__b) = 0;
            if (!v1273)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
            v154 = v1273;
            if (v1273 == v1272)
            {
              v154 = v1272;
              v155 = 4;
            }
            else
            {
              if (!v1273)
                goto LABEL_190;
              v155 = 5;
            }
            (*(void (**)(void))(*v154 + 8 * v155))();
LABEL_190:
            v156 = v1265;
            if (v1265 == v1264)
            {
              v156 = v1264;
              v157 = 4;
              goto LABEL_194;
            }
            if (v1265)
            {
              v157 = 5;
LABEL_194:
              (*(void (**)(void))(*v156 + 8 * v157))();
            }
            ++v144;
            v1252 = (int *)((char *)v1252 + 1);
            if ((unint64_t)(*a2)[6] <= v144)
              goto LABEL_1729;
          }
        }
        if (v143)
        {
          v236 = 0;
          v237 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          v238 = (char *)v1252;
          v1237 = __len;
          v239 = v1263;
          v240 = v1263 + 1;
          do
          {
            v241 = 0;
            if ((v237 & 0x80000000) == 0)
            {
              v242 = v237;
              v243 = (int)v236;
              do
              {
                v244 = ldiv(v243, v99[v242]);
                v243 = v244.quot;
                v241 += (_QWORD)v100[v242--] * v244.rem;
              }
              while (v242 != -1);
            }
            *v238 = 1;
            if (v239 >= 1)
            {
              v245 = (unsigned __int8 *)(v1237 + (int)v241);
              v246 = 1;
              v247 = v240;
              do
              {
                v248 = *v245++;
                v246 &= v248 != 0;
                *v238 = v246;
                --v247;
              }
              while (v247 > 1);
            }
            v236 = (int *)((char *)v236 + 1);
            v1252 = (int *)++v238;
          }
          while (v236 != v143);
        }
        goto LABEL_1729;
      }
      switch(v1257)
      {
        case 2:
          v192 = v1259;
          if (v1259 - (_BYTE *)v1258 == 4)
          {
            v574 = *((int *)v1259 - 1);
            v575 = *((_QWORD *)v1261 - 1);
            v1259 -= 4;
            v1261 -= 8;
            v576 = (*a2)[6];
            if (v576)
            {
              LODWORD(v577) = 0;
              v578 = (*a2)[19];
              v579 = *(_QWORD *)(*(_QWORD *)a1 + 152);
              do
              {
                if (v575)
                  memset(v578, 1, v575);
                if ((int)v574 >= 1)
                {
                  v580 = 0;
                  v581 = v579;
                  do
                  {
                    if (v575)
                    {
                      for (i = 0; i != v575; ++i)
                      {
                        if (*(_BYTE *)(v581 + i))
                          v583 = *((_BYTE *)v578 + i) == 0;
                        else
                          v583 = 1;
                        v584 = !v583;
                        *((_BYTE *)v578 + i) = v584;
                      }
                      v581 += i;
                    }
                    ++v580;
                  }
                  while (v580 != (_DWORD)v574);
                }
                v579 += v575 * v574;
                v578 = (int *)((char *)v578 + v575);
                v577 = (int)v577 + (int)v575;
              }
              while (v577 < (unint64_t)v576);
            }
            break;
          }
LABEL_794:
          v1251 = 0;
          v1251 = *((_DWORD *)v192 - 1);
          __len = 0;
          v585 = *((_QWORD *)v1261 - 1);
          v1259 = v192 - 4;
          v1261 -= 8;
          v1252 = *(int **)(*(_QWORD *)a1 + 152);
          __len = v585;
          __b = (*a2)[19];
          v99 = v1266;
          v100 = v1268;
          v586 = (unint64_t)(*a2)[6];
          if (v1259 == v1258)
          {
            if (v586)
            {
              v729 = 0;
              v730 = (char *)__b;
              v731 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
              v732 = __len;
              v1239 = v1252;
              v733 = v1251;
              do
              {
                v734 = 0;
                if ((v731 & 0x80000000) == 0)
                {
                  v735 = v731;
                  v736 = v729;
                  do
                  {
                    v737 = ldiv(v736, v99[v735]);
                    v736 = v737.quot;
                    v734 += (_QWORD)v100[v735--] * v737.rem;
                  }
                  while (v735 != -1);
                }
                if (v732)
                  memset(v730, 1, v732);
                if (v733 >= 1)
                {
                  v738 = 0;
                  v739 = (char *)v1239 + (int)v734;
                  do
                  {
                    if (v732)
                    {
                      for (j = 0; j != v732; ++j)
                      {
                        if (v739[j])
                          v741 = v730[j] == 0;
                        else
                          v741 = 1;
                        v742 = !v741;
                        v730[j] = v742;
                      }
                      v739 += j;
                    }
                    ++v738;
                  }
                  while (v738 != v733);
                }
                v730 += v732;
                __b = v730;
                v729 += v732;
              }
              while (v586 > v729);
            }
            goto LABEL_1729;
          }
          if (v586)
          {
            v587 = 0;
            v588 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            do
            {
              v1249 = 0;
              v589 = 0;
              if ((v588 & 0x80000000) == 0)
              {
                v590 = v588;
                v591 = v587;
                do
                {
                  v592 = ldiv(v591, v99[v590]);
                  v591 = v592.quot;
                  v589 += (_QWORD)v100[v590--] * v592.rem;
                }
                while (v590 != -1);
              }
              v1249 = v589;
              if (__len)
                memset(__b, 1, __len);
              v1265 = 0;
              v593 = operator new(0x38uLL);
              *v593 = &off_251347D78;
              v593[1] = &v1262;
              v593[2] = &v1252;
              v593[3] = &v1249;
              v593[4] = &__b;
              v593[5] = &v1251;
              v593[6] = &__len;
              v1265 = v593;
              v1273 = 0;
              v594 = (void **)operator new(0x28uLL);
              *v594 = &off_251346A78;
              v594[1] = &v1258;
              v594[2] = &v1260;
              v594[3] = v1272;
              v594[4] = v1264;
              v1268 = v594;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v595 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v595 = (void **)&v1266;
                v596 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_807;
                v596 = 5;
              }
              (*((void (**)(void))*v595 + v596))();
LABEL_807:
              LODWORD(v1266) = 0;
              v1263 = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
              v597 = v1273;
              if (v1273 == v1272)
              {
                v597 = v1272;
                v598 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_813;
                v598 = 5;
              }
              (*(void (**)(void))(*v597 + 8 * v598))();
LABEL_813:
              v599 = v1265;
              if (v1265 == v1264)
              {
                v599 = v1264;
                v600 = 4;
                goto LABEL_817;
              }
              if (v1265)
              {
                v600 = 5;
LABEL_817:
                (*(void (**)(void))(*v599 + 8 * v600))();
              }
              __b = (char *)__b + __len;
              v587 += __len;
            }
            while ((unint64_t)(*a2)[6] > v587);
          }
LABEL_1729:
          if (v100)
            operator delete(v100);
          if (v99)
            operator delete(v99);
          break;
        case 5:
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v520 = (*a2)[19];
          v99 = v1266;
          v100 = v1268;
          if (!(*a2)[6])
            goto LABEL_1729;
          v521 = 0;
          v522 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v523 = 0;
            if ((v522 & 0x80000000) == 0)
            {
              v524 = v522;
              v525 = v521;
              do
              {
                v526 = ldiv(v525, v99[v524]);
                v525 = v526.quot;
                v523 += (_QWORD)v100[v524--] * v526.rem;
              }
              while (v524 != -1);
            }
            LODWORD(__b) = v523;
            LOBYTE(v1251) = 1;
            v1265 = 0;
            v527 = operator new(0x28uLL);
            *v527 = &off_251347DF8;
            v527[1] = &v1263;
            v527[2] = &v1251;
            v527[3] = &__len;
            v527[4] = &__b;
            v1265 = v527;
            v1273 = 0;
            v528 = (void **)operator new(0x28uLL);
            *v528 = &off_251346A78;
            v528[1] = &v1258;
            v528[2] = &v1260;
            v528[3] = v1272;
            v528[4] = v1264;
            v1268 = v528;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
            v529 = v1268;
            if (v1268 == (void **)&v1266)
            {
              v529 = (void **)&v1266;
              v530 = 4;
            }
            else
            {
              if (!v1268)
                goto LABEL_698;
              v530 = 5;
            }
            (*((void (**)(void))*v529 + v530))();
LABEL_698:
            LODWORD(v1266) = 0;
            LODWORD(v1252) = 0;
            if (!v1273)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
            v531 = v1273;
            if (v1273 == v1272)
            {
              v531 = v1272;
              v532 = 4;
            }
            else
            {
              if (!v1273)
                goto LABEL_704;
              v532 = 5;
            }
            (*(void (**)(void))(*v531 + 8 * v532))();
LABEL_704:
            v533 = v1265;
            if (v1265 == v1264)
            {
              v533 = v1264;
              v534 = 4;
              goto LABEL_708;
            }
            if (v1265)
            {
              v534 = 5;
LABEL_708:
              (*(void (**)(void))(*v533 + 8 * v534))();
            }
            *(_BYTE *)v520 = v1251;
            v520 = (int *)((char *)v520 + 1);
            if ((unint64_t)(*a2)[6] <= ++v521)
              goto LABEL_1729;
          }
        case 4:
          v192 = v1259;
          goto LABEL_794;
      }
LABEL_1733:
      if (v1260)
      {
        v1261 = (char *)v1260;
        operator delete(v1260);
      }
      if (v1258)
      {
        v1259 = v1258;
        operator delete(v1258);
      }
      return;
    case 1:
      v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1269 = &unk_2513463C8;
      v1270 = mlx::core::allocator::free;
      v1271 = &v1269;
      mlx::core::array::set_data(a2, (uint64_t)v21, (uint64_t)&v1269);
      v22 = v1271;
      if (v1271 == &v1269)
      {
        v23 = 4;
        v22 = &v1269;
      }
      else
      {
        if (!v1271)
          goto LABEL_55;
        v23 = 5;
      }
      (*((void (**)(void))*v22 + v23))();
LABEL_55:
      v1255 = 0;
      v1256 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1255 = __p;
        operator delete(__p);
      }
      if (v1257 == 1)
      {
        v88 = v1259;
        if (v1259 - (_BYTE *)v1258 == 4)
        {
          v89 = (*a2)[6];
          if (v89)
          {
            v90 = 0;
            v91 = *(int *)v1258;
            v92 = (*a2)[19];
            v93 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *(_BYTE *)v92 = 0;
              if ((int)v91 >= 1)
              {
                v94 = 0;
                v95 = v91 + 1;
                v96 = v93;
                do
                {
                  v97 = *v96++;
                  v94 |= v97 != 0;
                  *(_BYTE *)v92 = v94;
                  --v95;
                }
                while (v95 > 1);
              }
              v90 = (int *)((char *)v90 + 1);
              v92 = (int *)((char *)v92 + 1);
              v93 += v91;
            }
            while (v90 != v89);
          }
          goto LABEL_1733;
        }
        goto LABEL_199;
      }
      if (!v1257)
      {
        v46 = (*a2)[19];
        *(_BYTE *)v46 = 0;
        v47 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v47 >= 1)
        {
          v48 = 0;
          v49 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v50 = v47 + 1;
          do
          {
            v51 = *v49++;
            v48 |= v51 != 0;
            *(_BYTE *)v46 = v48;
            --v50;
          }
          while (v50 > 1);
        }
        goto LABEL_1733;
      }
      if ((v1257 & 0xFFFFFFFD) == 1)
      {
        v88 = v1259;
LABEL_199:
        v1263 = 0;
        v1263 = *((_DWORD *)v88 - 1);
        v1259 = v88 - 4;
        v1261 -= 8;
        v158 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1252 = (*a2)[19];
        __len = v158;
        v99 = v1266;
        v100 = v1268;
        v159 = (*a2)[6];
        if (v1259 == v1258)
        {
          if (v159)
          {
            v249 = 0;
            v250 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            v251 = v1252;
            v1238 = __len;
            v252 = v1263;
            v253 = v1263 + 1;
            do
            {
              v254 = 0;
              if ((v250 & 0x80000000) == 0)
              {
                v255 = v250;
                v256 = (int)v249;
                do
                {
                  v257 = ldiv(v256, v99[v255]);
                  v256 = v257.quot;
                  v254 += (_QWORD)v100[v255--] * v257.rem;
                }
                while (v255 != -1);
              }
              *(_BYTE *)v251 = 0;
              if (v252 >= 1)
              {
                v258 = 0;
                v259 = (unsigned __int8 *)(v1238 + (int)v254);
                v260 = v253;
                do
                {
                  v261 = *v259++;
                  v258 |= v261 != 0;
                  *(_BYTE *)v251 = v258;
                  --v260;
                }
                while (v260 > 1);
              }
              v249 = (int *)((char *)v249 + 1);
              v251 = (int *)((char *)v251 + 1);
              v1252 = v251;
            }
            while (v249 != v159);
          }
          goto LABEL_1729;
        }
        if (!v159)
          goto LABEL_1729;
        v160 = 0;
        v161 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
        while (1)
        {
          v1251 = 0;
          v162 = 0;
          if ((v161 & 0x80000000) == 0)
          {
            v163 = v161;
            v164 = v160;
            do
            {
              v165 = ldiv(v164, v99[v163]);
              v164 = v165.quot;
              v162 += (_QWORD)v100[v163--] * v165.rem;
            }
            while (v163 != -1);
          }
          v1251 = v162;
          *(_BYTE *)v1252 = 0;
          v1265 = 0;
          v166 = operator new(0x30uLL);
          *v166 = &off_251347E78;
          v166[1] = &v1249;
          v166[2] = &__len;
          v166[3] = &v1251;
          v166[4] = &v1252;
          v166[5] = &v1263;
          v1265 = v166;
          v1273 = 0;
          v167 = (void **)operator new(0x28uLL);
          *v167 = &off_251346A78;
          v167[1] = &v1258;
          v167[2] = &v1260;
          v167[3] = v1272;
          v167[4] = v1264;
          v1268 = v167;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
          v168 = v1268;
          if (v1268 == (void **)&v1266)
          {
            v168 = (void **)&v1266;
            v169 = 4;
          }
          else
          {
            if (!v1268)
              goto LABEL_210;
            v169 = 5;
          }
          (*((void (**)(void))*v168 + v169))();
LABEL_210:
          LODWORD(v1266) = 0;
          LODWORD(__b) = 0;
          if (!v1273)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
          v170 = v1273;
          if (v1273 == v1272)
          {
            v170 = v1272;
            v171 = 4;
          }
          else
          {
            if (!v1273)
              goto LABEL_216;
            v171 = 5;
          }
          (*(void (**)(void))(*v170 + 8 * v171))();
LABEL_216:
          v172 = v1265;
          if (v1265 == v1264)
          {
            v172 = v1264;
            v173 = 4;
            goto LABEL_220;
          }
          if (v1265)
          {
            v173 = 5;
LABEL_220:
            (*(void (**)(void))(*v172 + 8 * v173))();
          }
          ++v160;
          v1252 = (int *)((char *)v1252 + 1);
          if ((unint64_t)(*a2)[6] <= v160)
            goto LABEL_1729;
        }
      }
      if (v1257 == 2)
      {
        v193 = v1259;
        if (v1259 - (_BYTE *)v1258 == 4)
        {
          v601 = *((int *)v1259 - 1);
          v602 = *((_QWORD *)v1261 - 1);
          v1259 -= 4;
          v1261 -= 8;
          v603 = (*a2)[6];
          if (v603)
          {
            LODWORD(v604) = 0;
            v605 = (*a2)[19];
            v606 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            do
            {
              if (v602)
                bzero(v605, v602);
              if ((int)v601 >= 1)
              {
                v607 = 0;
                v608 = v606;
                do
                {
                  if (v602)
                  {
                    for (k = 0; k != v602; ++k)
                      *((_BYTE *)v605 + k) |= *(_BYTE *)(v608 + k) != 0;
                    v608 += k;
                  }
                  ++v607;
                }
                while (v607 != (_DWORD)v601);
              }
              v606 += v602 * v601;
              v605 = (int *)((char *)v605 + v602);
              v604 = (int)v604 + (int)v602;
            }
            while (v604 < (unint64_t)v603);
          }
          goto LABEL_1733;
        }
LABEL_834:
        v1251 = 0;
        v1251 = *((_DWORD *)v193 - 1);
        __len = 0;
        v610 = *((_QWORD *)v1261 - 1);
        v1259 = v193 - 4;
        v1261 -= 8;
        v1252 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v610;
        __b = (*a2)[19];
        v99 = v1266;
        v100 = v1268;
        v611 = (unint64_t)(*a2)[6];
        if (v1259 == v1258)
        {
          if (v611)
          {
            v743 = 0;
            v744 = (char *)__b;
            v745 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            v746 = __len;
            v1240 = v1252;
            v747 = v1251;
            do
            {
              v748 = 0;
              if ((v745 & 0x80000000) == 0)
              {
                v749 = v745;
                v750 = v743;
                do
                {
                  v751 = ldiv(v750, v99[v749]);
                  v750 = v751.quot;
                  v748 += (_QWORD)v100[v749--] * v751.rem;
                }
                while (v749 != -1);
              }
              if (v746)
                bzero(v744, v746);
              if (v747 >= 1)
              {
                v752 = 0;
                v753 = (char *)v1240 + (int)v748;
                do
                {
                  if (v746)
                  {
                    for (m = 0; m != v746; ++m)
                      v744[m] |= v753[m] != 0;
                    v753 += m;
                  }
                  ++v752;
                }
                while (v752 != v747);
              }
              v744 += v746;
              __b = v744;
              v743 += v746;
            }
            while (v611 > v743);
          }
          goto LABEL_1729;
        }
        if (!v611)
          goto LABEL_1729;
        v612 = 0;
        v613 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
        while (1)
        {
          v1249 = 0;
          v614 = 0;
          if ((v613 & 0x80000000) == 0)
          {
            v615 = v613;
            v616 = v612;
            do
            {
              v617 = ldiv(v616, v99[v615]);
              v616 = v617.quot;
              v614 += (_QWORD)v100[v615--] * v617.rem;
            }
            while (v615 != -1);
          }
          v1249 = v614;
          if (__len)
            bzero(__b, __len);
          v1265 = 0;
          v618 = operator new(0x38uLL);
          *v618 = &off_251347EF8;
          v618[1] = &v1262;
          v618[2] = &v1252;
          v618[3] = &v1249;
          v618[4] = &__b;
          v618[5] = &v1251;
          v618[6] = &__len;
          v1265 = v618;
          v1273 = 0;
          v619 = (void **)operator new(0x28uLL);
          *v619 = &off_251346A78;
          v619[1] = &v1258;
          v619[2] = &v1260;
          v619[3] = v1272;
          v619[4] = v1264;
          v1268 = v619;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
          v620 = v1268;
          if (v1268 == (void **)&v1266)
          {
            v620 = (void **)&v1266;
            v621 = 4;
          }
          else
          {
            if (!v1268)
              goto LABEL_847;
            v621 = 5;
          }
          (*((void (**)(void))*v620 + v621))();
LABEL_847:
          LODWORD(v1266) = 0;
          v1263 = 0;
          if (!v1273)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
          v622 = v1273;
          if (v1273 == v1272)
          {
            v622 = v1272;
            v623 = 4;
          }
          else
          {
            if (!v1273)
              goto LABEL_853;
            v623 = 5;
          }
          (*(void (**)(void))(*v622 + 8 * v623))();
LABEL_853:
          v624 = v1265;
          if (v1265 == v1264)
          {
            v624 = v1264;
            v625 = 4;
            goto LABEL_857;
          }
          if (v1265)
          {
            v625 = 5;
LABEL_857:
            (*(void (**)(void))(*v624 + 8 * v625))();
          }
          __b = (char *)__b + __len;
          v612 += __len;
          if ((unint64_t)(*a2)[6] <= v612)
            goto LABEL_1729;
        }
      }
      if (v1257 != 5)
      {
        if (v1257 != 4)
          goto LABEL_1733;
        v193 = v1259;
        goto LABEL_834;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v535 = (*a2)[19];
      v99 = v1266;
      v100 = v1268;
      if (!(*a2)[6])
        goto LABEL_1729;
      v536 = 0;
      v537 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
      while (1)
      {
        LODWORD(__b) = 0;
        v538 = 0;
        if ((v537 & 0x80000000) == 0)
        {
          v539 = v537;
          v540 = v536;
          do
          {
            v541 = ldiv(v540, v99[v539]);
            v540 = v541.quot;
            v538 += (_QWORD)v100[v539--] * v541.rem;
          }
          while (v539 != -1);
        }
        LODWORD(__b) = v538;
        LOBYTE(v1251) = 0;
        v1265 = 0;
        v542 = operator new(0x28uLL);
        *v542 = &off_251347F78;
        v542[1] = &v1263;
        v542[2] = &v1251;
        v542[3] = &__len;
        v542[4] = &__b;
        v1265 = v542;
        v1273 = 0;
        v543 = (void **)operator new(0x28uLL);
        *v543 = &off_251346A78;
        v543[1] = &v1258;
        v543[2] = &v1260;
        v543[3] = v1272;
        v543[4] = v1264;
        v1268 = v543;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
        v544 = v1268;
        if (v1268 == (void **)&v1266)
        {
          v544 = (void **)&v1266;
          v545 = 4;
        }
        else
        {
          if (!v1268)
            goto LABEL_721;
          v545 = 5;
        }
        (*((void (**)(void))*v544 + v545))();
LABEL_721:
        LODWORD(v1266) = 0;
        LODWORD(v1252) = 0;
        if (!v1273)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
        v546 = v1273;
        if (v1273 == v1272)
        {
          v546 = v1272;
          v547 = 4;
        }
        else
        {
          if (!v1273)
            goto LABEL_727;
          v547 = 5;
        }
        (*(void (**)(void))(*v546 + 8 * v547))();
LABEL_727:
        v548 = v1265;
        if (v1265 == v1264)
        {
          v548 = v1264;
          v549 = 4;
          goto LABEL_731;
        }
        if (v1265)
        {
          v549 = 5;
LABEL_731:
          (*(void (**)(void))(*v548 + 8 * v549))();
        }
        *(_BYTE *)v535 = v1251;
        v535 = (int *)((char *)v535 + 1);
        if ((unint64_t)(*a2)[6] <= ++v536)
          goto LABEL_1729;
      }
    case 2:
      v13 = *a2;
      v14 = (*a2)[7];
      switch((int)v14)
      {
        case 0:
          v15 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1269 = &unk_2513463C8;
          v1270 = mlx::core::allocator::free;
          v1271 = &v1269;
          mlx::core::array::set_data(a2, (uint64_t)v15, (uint64_t)&v1269);
          v16 = v1271;
          if (v1271 == &v1269)
          {
            v17 = 4;
            v16 = &v1269;
          }
          else
          {
            if (!v1271)
              goto LABEL_376;
            v17 = 5;
          }
          (*((void (**)(void))*v16 + v17))();
LABEL_376:
          v1255 = 0;
          v1256 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1255 = __p;
            operator delete(__p);
          }
          if (v1257 == 1)
          {
            v346 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v347 = (*a2)[6];
              if (v347)
              {
                v348 = 0;
                v349 = *(int *)v1258;
                v350 = (BOOL *)(*a2)[19];
                v351 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v350 = 0;
                  if ((int)v349 >= 1)
                  {
                    v352 = 0;
                    v353 = v349 + 1;
                    v354 = v351;
                    do
                    {
                      v355 = *v354++;
                      v352 = v355 + v352 != 0;
                      *v350 = v352;
                      --v353;
                    }
                    while (v353 > 1);
                  }
                  v348 = (int *)((char *)v348 + 1);
                  ++v350;
                  v351 += v349;
                }
                while (v348 != v347);
              }
              goto LABEL_1733;
            }
            goto LABEL_638;
          }
          if (!v1257)
          {
            v292 = (BOOL *)(*a2)[19];
            *v292 = 0;
            v293 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v293 >= 1)
            {
              v294 = 0;
              v295 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v296 = v293 + 1;
              do
              {
                v297 = *v295++;
                v294 = v297 + v294 != 0;
                *v292 = v294;
                --v296;
              }
              while (v296 > 1);
            }
            goto LABEL_1733;
          }
          if ((v1257 & 0xFFFFFFFD) == 1)
          {
            v346 = v1259;
LABEL_638:
            v1263 = 0;
            v1263 = *((_DWORD *)v346 - 1);
            v1259 = v346 - 4;
            v1261 -= 8;
            v488 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1252 = (*a2)[19];
            __len = v488;
            v99 = v1266;
            v100 = v1268;
            v489 = (*a2)[6];
            if (v1259 == v1258)
            {
              if (v489)
              {
                v813 = 0;
                v814 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                v815 = (BOOL *)v1252;
                v1241 = __len;
                v816 = v1263;
                v817 = v1263 + 1;
                do
                {
                  v818 = 0;
                  if ((v814 & 0x80000000) == 0)
                  {
                    v819 = v814;
                    v820 = (int)v813;
                    do
                    {
                      v821 = ldiv(v820, v99[v819]);
                      v820 = v821.quot;
                      v818 += (_QWORD)v100[v819--] * v821.rem;
                    }
                    while (v819 != -1);
                  }
                  *v815 = 0;
                  if (v816 >= 1)
                  {
                    v822 = 0;
                    v823 = (unsigned __int8 *)(v1241 + (int)v818);
                    v824 = v817;
                    do
                    {
                      v825 = *v823++;
                      v822 = v825 + v822 != 0;
                      *v815 = v822;
                      --v824;
                    }
                    while (v824 > 1);
                  }
                  v813 = (int *)((char *)v813 + 1);
                  v1252 = (int *)++v815;
                }
                while (v813 != v489);
              }
              goto LABEL_1729;
            }
            if (!v489)
              goto LABEL_1729;
            v490 = 0;
            v491 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1251 = 0;
              v492 = 0;
              if ((v491 & 0x80000000) == 0)
              {
                v493 = v491;
                v494 = v490;
                do
                {
                  v495 = ldiv(v494, v99[v493]);
                  v494 = v495.quot;
                  v492 += (_QWORD)v100[v493--] * v495.rem;
                }
                while (v493 != -1);
              }
              v1251 = v492;
              *(_BYTE *)v1252 = 0;
              v1265 = 0;
              v496 = operator new(0x30uLL);
              *v496 = &off_251347FF8;
              v496[1] = &v1249;
              v496[2] = &__len;
              v496[3] = &v1251;
              v496[4] = &v1252;
              v496[5] = &v1263;
              v1265 = v496;
              v1273 = 0;
              v497 = (void **)operator new(0x28uLL);
              *v497 = &off_251346A78;
              v497[1] = &v1258;
              v497[2] = &v1260;
              v497[3] = v1272;
              v497[4] = v1264;
              v1268 = v497;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v498 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v498 = (void **)&v1266;
                v499 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_649;
                v499 = 5;
              }
              (*((void (**)(void))*v498 + v499))();
LABEL_649:
              LODWORD(v1266) = 0;
              LODWORD(__b) = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
              v500 = v1273;
              if (v1273 == v1272)
              {
                v500 = v1272;
                v501 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_655;
                v501 = 5;
              }
              (*(void (**)(void))(*v500 + 8 * v501))();
LABEL_655:
              v502 = v1265;
              if (v1265 == v1264)
              {
                v502 = v1264;
                v503 = 4;
                goto LABEL_659;
              }
              if (v1265)
              {
                v503 = 5;
LABEL_659:
                (*(void (**)(void))(*v502 + 8 * v503))();
              }
              ++v490;
              v1252 = (int *)((char *)v1252 + 1);
              if ((unint64_t)(*a2)[6] <= v490)
                goto LABEL_1729;
            }
          }
          if (v1257 == 2)
          {
            v774 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v1012 = *((int *)v1259 - 1);
              v1013 = *((_QWORD *)v1261 - 1);
              v1259 -= 4;
              v1261 -= 8;
              v1014 = (*a2)[6];
              if (v1014)
              {
                LODWORD(v1015) = 0;
                v1016 = (*a2)[19];
                v1017 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1013)
                    bzero(v1016, v1013);
                  if ((int)v1012 >= 1)
                  {
                    v1018 = 0;
                    v1019 = v1017;
                    do
                    {
                      if (v1013)
                      {
                        for (n = 0; n != v1013; ++n)
                          *((_BYTE *)v1016 + n) = *((unsigned __int8 *)v1016 + n) + *(unsigned __int8 *)(v1019 + n) != 0;
                        v1019 += n;
                      }
                      ++v1018;
                    }
                    while (v1018 != (_DWORD)v1012);
                  }
                  v1017 += v1013 * v1012;
                  v1016 = (int *)((char *)v1016 + v1013);
                  v1015 = (int)v1015 + (int)v1013;
                }
                while (v1015 < (unint64_t)v1014);
              }
              goto LABEL_1733;
            }
LABEL_1422:
            v1251 = 0;
            v1251 = *((_DWORD *)v774 - 1);
            __len = 0;
            v1021 = *((_QWORD *)v1261 - 1);
            v1259 = v774 - 4;
            v1261 -= 8;
            v1252 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1021;
            __b = (*a2)[19];
            v99 = v1266;
            v100 = v1268;
            v1022 = (unint64_t)(*a2)[6];
            if (v1259 == v1258)
            {
              if (v1022)
              {
                v1183 = 0;
                v1184 = (unsigned __int8 *)__b;
                v1185 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                v1186 = __len;
                v1246 = v1252;
                v1187 = v1251;
                do
                {
                  v1188 = 0;
                  if ((v1185 & 0x80000000) == 0)
                  {
                    v1189 = v1185;
                    v1190 = v1183;
                    do
                    {
                      v1191 = ldiv(v1190, v99[v1189]);
                      v1190 = v1191.quot;
                      v1188 += (_QWORD)v100[v1189--] * v1191.rem;
                    }
                    while (v1189 != -1);
                  }
                  if (v1186)
                    bzero(v1184, v1186);
                  if (v1187 >= 1)
                  {
                    v1192 = 0;
                    v1193 = (char *)v1246 + (int)v1188;
                    do
                    {
                      if (v1186)
                      {
                        for (ii = 0; ii != v1186; ++ii)
                          v1184[ii] = v1184[ii] + v1193[ii] != 0;
                        v1193 += ii;
                      }
                      ++v1192;
                    }
                    while (v1192 != v1187);
                  }
                  v1184 += v1186;
                  __b = v1184;
                  v1183 += v1186;
                }
                while (v1022 > v1183);
              }
              goto LABEL_1729;
            }
            if (!v1022)
              goto LABEL_1729;
            v1023 = 0;
            v1024 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1249 = 0;
              v1025 = 0;
              if ((v1024 & 0x80000000) == 0)
              {
                v1026 = v1024;
                v1027 = v1023;
                do
                {
                  v1028 = ldiv(v1027, v99[v1026]);
                  v1027 = v1028.quot;
                  v1025 += (_QWORD)v100[v1026--] * v1028.rem;
                }
                while (v1026 != -1);
              }
              v1249 = v1025;
              if (__len)
                bzero(__b, __len);
              v1265 = 0;
              v1029 = operator new(0x38uLL);
              *v1029 = &off_251348078;
              v1029[1] = &v1262;
              v1029[2] = &v1252;
              v1029[3] = &v1249;
              v1029[4] = &__b;
              v1029[5] = &v1251;
              v1029[6] = &__len;
              v1265 = v1029;
              v1273 = 0;
              v1030 = (void **)operator new(0x28uLL);
              *v1030 = &off_251346A78;
              v1030[1] = &v1258;
              v1030[2] = &v1260;
              v1030[3] = v1272;
              v1030[4] = v1264;
              v1268 = v1030;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v1031 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v1031 = (void **)&v1266;
                v1032 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_1435;
                v1032 = 5;
              }
              (*((void (**)(void))*v1031 + v1032))();
LABEL_1435:
              LODWORD(v1266) = 0;
              v1263 = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
              v1033 = v1273;
              if (v1273 == v1272)
              {
                v1033 = v1272;
                v1034 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_1441;
                v1034 = 5;
              }
              (*(void (**)(void))(*v1033 + 8 * v1034))();
LABEL_1441:
              v1035 = v1265;
              if (v1265 == v1264)
              {
                v1035 = v1264;
                v1036 = 4;
                goto LABEL_1445;
              }
              if (v1265)
              {
                v1036 = 5;
LABEL_1445:
                (*(void (**)(void))(*v1035 + 8 * v1036))();
              }
              __b = (char *)__b + __len;
              v1023 += __len;
              if ((unint64_t)(*a2)[6] <= v1023)
                goto LABEL_1729;
            }
          }
          if (v1257 != 5)
          {
            if (v1257 != 4)
              goto LABEL_1733;
            v774 = v1259;
            goto LABEL_1422;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v958 = (*a2)[19];
          v99 = v1266;
          v100 = v1268;
          if (!(*a2)[6])
            goto LABEL_1729;
          v959 = 0;
          v960 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v961 = 0;
            if ((v960 & 0x80000000) == 0)
            {
              v962 = v960;
              v963 = v959;
              do
              {
                v964 = ldiv(v963, v99[v962]);
                v963 = v964.quot;
                v961 += (_QWORD)v100[v962--] * v964.rem;
              }
              while (v962 != -1);
            }
            LODWORD(__b) = v961;
            LOBYTE(v1251) = 0;
            v1265 = 0;
            v965 = operator new(0x28uLL);
            *v965 = &off_2513480F8;
            v965[1] = &v1263;
            v965[2] = &v1251;
            v965[3] = &__len;
            v965[4] = &__b;
            v1265 = v965;
            v1273 = 0;
            v966 = (void **)operator new(0x28uLL);
            *v966 = &off_251346A78;
            v966[1] = &v1258;
            v966[2] = &v1260;
            v966[3] = v1272;
            v966[4] = v1264;
            v1268 = v966;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
            v967 = v1268;
            if (v1268 == (void **)&v1266)
            {
              v967 = (void **)&v1266;
              v968 = 4;
            }
            else
            {
              if (!v1268)
                goto LABEL_1332;
              v968 = 5;
            }
            (*((void (**)(void))*v967 + v968))();
LABEL_1332:
            LODWORD(v1266) = 0;
            LODWORD(v1252) = 0;
            if (!v1273)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
            v969 = v1273;
            if (v1273 == v1272)
            {
              v969 = v1272;
              v970 = 4;
            }
            else
            {
              if (!v1273)
                goto LABEL_1338;
              v970 = 5;
            }
            (*(void (**)(void))(*v969 + 8 * v970))();
LABEL_1338:
            v971 = v1265;
            if (v1265 == v1264)
            {
              v971 = v1264;
              v972 = 4;
              goto LABEL_1342;
            }
            if (v1265)
            {
              v972 = 5;
LABEL_1342:
              (*(void (**)(void))(*v971 + 8 * v972))();
            }
            *(_BYTE *)v958 = v1251;
            v958 = (int *)((char *)v958 + 1);
            if ((unint64_t)(*a2)[6] <= ++v959)
              goto LABEL_1729;
          }
        case 1:
          v204 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1269 = &unk_2513463C8;
          v1270 = mlx::core::allocator::free;
          v1271 = &v1269;
          mlx::core::array::set_data(a2, (uint64_t)v204, (uint64_t)&v1269);
          v205 = v1271;
          if (v1271 == &v1269)
          {
            v206 = 4;
            v205 = &v1269;
          }
          else
          {
            if (!v1271)
              goto LABEL_386;
            v206 = 5;
          }
          (*((void (**)(void))*v205 + v206))();
LABEL_386:
          v1255 = 0;
          v1256 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1255 = __p;
            operator delete(__p);
          }
          if (v1257 == 1)
          {
            v356 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              if ((*a2)[6])
              {
                v357 = 0;
                v358 = *(int *)v1258;
                v359 = (*a2)[19];
                v360 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *(_BYTE *)v359 = 0;
                  if ((int)v358 >= 1)
                  {
                    v361 = 0;
                    v362 = v358 + 1;
                    v363 = v360;
                    do
                    {
                      v364 = *v363++;
                      v361 += v364;
                      *(_BYTE *)v359 = v361;
                      --v362;
                    }
                    while (v362 > 1);
                  }
                  ++v357;
                  v359 = (int *)((char *)v359 + 1);
                  v360 += v358;
                }
                while ((unint64_t)(*a2)[6] > v357);
              }
              goto LABEL_1733;
            }
            goto LABEL_664;
          }
          if (!v1257)
          {
            v298 = (*a2)[19];
            *(_BYTE *)v298 = 0;
            v299 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v299 >= 1)
            {
              v300 = 0;
              v301 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v302 = v299 + 1;
              do
              {
                v303 = *v301++;
                v300 += v303;
                *(_BYTE *)v298 = v300;
                --v302;
              }
              while (v302 > 1);
            }
            goto LABEL_1733;
          }
          if ((v1257 & 0xFFFFFFFD) == 1)
          {
            v356 = v1259;
LABEL_664:
            v1263 = 0;
            v1263 = *((_DWORD *)v356 - 1);
            v1259 = v356 - 4;
            v1261 -= 8;
            v504 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1252 = (*a2)[19];
            __len = v504;
            v99 = v1266;
            v100 = v1268;
            v505 = (*a2)[6];
            if (v1259 == v1258)
            {
              if (v505)
              {
                v826 = 0;
                v827 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                do
                {
                  v828 = 0;
                  if ((v827 & 0x80000000) == 0)
                  {
                    v829 = v827;
                    v830 = v826;
                    do
                    {
                      v831 = ldiv(v830, v99[v829]);
                      v830 = v831.quot;
                      v828 += (_QWORD)v100[v829--] * v831.rem;
                    }
                    while (v829 != -1);
                  }
                  *(_BYTE *)v1252 = 0;
                  v832 = v1252;
                  if (v1263 >= 1)
                  {
                    v833 = (unsigned __int8 *)(__len + (int)v828);
                    v834 = *(unsigned __int8 *)v1252;
                    v835 = v1263 + 1;
                    do
                    {
                      v836 = *v833++;
                      v834 += v836;
                      *(_BYTE *)v832 = v834;
                      --v835;
                    }
                    while (v835 > 1);
                    v832 = v1252;
                  }
                  ++v826;
                  v1252 = (int *)((char *)v832 + 1);
                }
                while ((unint64_t)(*a2)[6] > v826);
              }
              goto LABEL_1729;
            }
            if (!v505)
              goto LABEL_1729;
            v506 = 0;
            v507 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1251 = 0;
              v508 = 0;
              if ((v507 & 0x80000000) == 0)
              {
                v509 = v507;
                v510 = v506;
                do
                {
                  v511 = ldiv(v510, v99[v509]);
                  v510 = v511.quot;
                  v508 += (_QWORD)v100[v509--] * v511.rem;
                }
                while (v509 != -1);
              }
              v1251 = v508;
              *(_BYTE *)v1252 = 0;
              v1265 = 0;
              v512 = operator new(0x30uLL);
              *v512 = &off_251348178;
              v512[1] = &v1249;
              v512[2] = &__len;
              v512[3] = &v1251;
              v512[4] = &v1252;
              v512[5] = &v1263;
              v1265 = v512;
              v1273 = 0;
              v513 = (void **)operator new(0x28uLL);
              *v513 = &off_251346A78;
              v513[1] = &v1258;
              v513[2] = &v1260;
              v513[3] = v1272;
              v513[4] = v1264;
              v1268 = v513;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v514 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v514 = (void **)&v1266;
                v515 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_675;
                v515 = 5;
              }
              (*((void (**)(void))*v514 + v515))();
LABEL_675:
              LODWORD(v1266) = 0;
              LODWORD(__b) = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
              v516 = v1273;
              if (v1273 == v1272)
              {
                v516 = v1272;
                v517 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_681;
                v517 = 5;
              }
              (*(void (**)(void))(*v516 + 8 * v517))();
LABEL_681:
              v518 = v1265;
              if (v1265 == v1264)
              {
                v518 = v1264;
                v519 = 4;
                goto LABEL_685;
              }
              if (v1265)
              {
                v519 = 5;
LABEL_685:
                (*(void (**)(void))(*v518 + 8 * v519))();
              }
              ++v506;
              v1252 = (int *)((char *)v1252 + 1);
              if ((unint64_t)(*a2)[6] <= v506)
                goto LABEL_1729;
            }
          }
          if (v1257 == 2)
          {
            v775 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v1037 = *((int *)v1259 - 1);
              v1038 = *((_QWORD *)v1261 - 1);
              v1259 -= 4;
              v1261 -= 8;
              if ((*a2)[6])
              {
                LODWORD(v1039) = 0;
                v1040 = (*a2)[19];
                v1041 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1038)
                    bzero(v1040, v1038);
                  if ((int)v1037 >= 1)
                  {
                    v1042 = 0;
                    v1043 = v1041;
                    do
                    {
                      if (v1038)
                      {
                        for (jj = 0; jj != v1038; ++jj)
                          *((_BYTE *)v1040 + jj) += *(_BYTE *)(v1043 + jj);
                        v1043 += jj;
                      }
                      ++v1042;
                    }
                    while (v1042 != (_DWORD)v1037);
                  }
                  v1041 += v1038 * v1037;
                  v1040 = (int *)((char *)v1040 + v1038);
                  v1039 = (int)v1039 + (int)v1038;
                }
                while (v1039 < (unint64_t)(*a2)[6]);
              }
              goto LABEL_1733;
            }
LABEL_1462:
            v1251 = 0;
            v1251 = *((_DWORD *)v775 - 1);
            __len = 0;
            v1045 = *((_QWORD *)v1261 - 1);
            v1259 = v775 - 4;
            v1261 -= 8;
            v1252 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1045;
            __b = (*a2)[19];
            v99 = v1266;
            v100 = v1268;
            v1046 = (*a2)[6];
            if (v1259 == v1258)
            {
              if (v1046)
              {
                v1195 = 0;
                v1196 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                do
                {
                  v1197 = 0;
                  if ((v1196 & 0x80000000) != 0)
                  {
                    v1200 = a2;
                  }
                  else
                  {
                    v1198 = v1196;
                    v1199 = v1195;
                    v1200 = a2;
                    do
                    {
                      v1201 = ldiv(v1199, v99[v1198]);
                      v1199 = v1201.quot;
                      v1197 += (_QWORD)v100[v1198--] * v1201.rem;
                    }
                    while (v1198 != -1);
                  }
                  v1202 = __b;
                  if (__len)
                  {
                    bzero(__b, __len);
                    v1203 = __len;
                    v1202 = __b;
                  }
                  else
                  {
                    v1203 = 0;
                  }
                  v1204 = v1251;
                  if (v1251 >= 1)
                  {
                    v1205 = 0;
                    v1206 = (char *)v1252 + (int)v1197;
                    do
                    {
                      v1207 = v1203;
                      for (kk = v1202; v1207; --v1207)
                      {
                        v1209 = *v1206++;
                        *kk++ += v1209;
                      }
                      ++v1205;
                    }
                    while (v1205 != v1204);
                    v1203 = __len;
                    v1202 = __b;
                  }
                  __b = &v1202[v1203];
                  v1195 += v1203;
                }
                while ((unint64_t)(*v1200)[6] > v1195);
              }
              goto LABEL_1729;
            }
            if (!v1046)
              goto LABEL_1729;
            v1047 = 0;
            v1048 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1249 = 0;
              v1049 = 0;
              if ((v1048 & 0x80000000) == 0)
              {
                v1050 = v1048;
                v1051 = v1047;
                do
                {
                  v1052 = ldiv(v1051, v99[v1050]);
                  v1051 = v1052.quot;
                  v1049 += (_QWORD)v100[v1050--] * v1052.rem;
                }
                while (v1050 != -1);
              }
              v1249 = v1049;
              if (__len)
                bzero(__b, __len);
              v1265 = 0;
              v1053 = operator new(0x38uLL);
              *v1053 = &off_2513481F8;
              v1053[1] = &v1262;
              v1053[2] = &v1252;
              v1053[3] = &v1249;
              v1053[4] = &__b;
              v1053[5] = &v1251;
              v1053[6] = &__len;
              v1265 = v1053;
              v1273 = 0;
              v1054 = (void **)operator new(0x28uLL);
              *v1054 = &off_251346A78;
              v1054[1] = &v1258;
              v1054[2] = &v1260;
              v1054[3] = v1272;
              v1054[4] = v1264;
              v1268 = v1054;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v1055 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v1055 = (void **)&v1266;
                v1056 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_1475;
                v1056 = 5;
              }
              (*((void (**)(void))*v1055 + v1056))();
LABEL_1475:
              LODWORD(v1266) = 0;
              v1263 = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
              v1057 = v1273;
              if (v1273 == v1272)
              {
                v1057 = v1272;
                v1058 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_1481;
                v1058 = 5;
              }
              (*(void (**)(void))(*v1057 + 8 * v1058))();
LABEL_1481:
              v1059 = v1265;
              if (v1265 == v1264)
              {
                v1059 = v1264;
                v1060 = 4;
                goto LABEL_1485;
              }
              if (v1265)
              {
                v1060 = 5;
LABEL_1485:
                (*(void (**)(void))(*v1059 + 8 * v1060))();
              }
              __b = (char *)__b + __len;
              v1047 += __len;
              if ((unint64_t)(*a2)[6] <= v1047)
                goto LABEL_1729;
            }
          }
          if (v1257 != 5)
          {
            if (v1257 != 4)
              goto LABEL_1733;
            v775 = v1259;
            goto LABEL_1462;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v973 = (*a2)[19];
          v99 = v1266;
          v100 = v1268;
          if (!(*a2)[6])
            goto LABEL_1729;
          v974 = 0;
          v975 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v976 = 0;
            if ((v975 & 0x80000000) == 0)
            {
              v977 = v975;
              v978 = v974;
              do
              {
                v979 = ldiv(v978, v99[v977]);
                v978 = v979.quot;
                v976 += (_QWORD)v100[v977--] * v979.rem;
              }
              while (v977 != -1);
            }
            LODWORD(__b) = v976;
            LOBYTE(v1251) = 0;
            v1265 = 0;
            v980 = operator new(0x28uLL);
            *v980 = &off_251348278;
            v980[1] = &v1263;
            v980[2] = &v1251;
            v980[3] = &__len;
            v980[4] = &__b;
            v1265 = v980;
            v1273 = 0;
            v981 = (void **)operator new(0x28uLL);
            *v981 = &off_251346A78;
            v981[1] = &v1258;
            v981[2] = &v1260;
            v981[3] = v1272;
            v981[4] = v1264;
            v1268 = v981;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
            v982 = v1268;
            if (v1268 == (void **)&v1266)
            {
              v982 = (void **)&v1266;
              v983 = 4;
            }
            else
            {
              if (!v1268)
                goto LABEL_1355;
              v983 = 5;
            }
            (*((void (**)(void))*v982 + v983))();
LABEL_1355:
            LODWORD(v1266) = 0;
            LODWORD(v1252) = 0;
            if (!v1273)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
            v984 = v1273;
            if (v1273 == v1272)
            {
              v984 = v1272;
              v985 = 4;
            }
            else
            {
              if (!v1273)
                goto LABEL_1361;
              v985 = 5;
            }
            (*(void (**)(void))(*v984 + 8 * v985))();
LABEL_1361:
            v986 = v1265;
            if (v1265 == v1264)
            {
              v986 = v1264;
              v987 = 4;
              goto LABEL_1365;
            }
            if (v1265)
            {
              v987 = 5;
LABEL_1365:
              (*(void (**)(void))(*v986 + 8 * v987))();
            }
            *(_BYTE *)v973 = v1251;
            v973 = (int *)((char *)v973 + 1);
            if ((unint64_t)(*a2)[6] <= ++v974)
              goto LABEL_1729;
          }
        case 2:
          v198 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1269 = &unk_2513463C8;
          v1270 = mlx::core::allocator::free;
          v1271 = &v1269;
          mlx::core::array::set_data(a2, (uint64_t)v198, (uint64_t)&v1269);
          v199 = v1271;
          if (v1271 == &v1269)
          {
            v200 = 4;
            v199 = &v1269;
          }
          else
          {
            if (!v1271)
              goto LABEL_356;
            v200 = 5;
          }
          (*((void (**)(void))*v199 + v200))();
LABEL_356:
          v1255 = 0;
          v1256 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1255 = __p;
            operator delete(__p);
          }
          if (v1257 == 1)
          {
            v327 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v328 = (*a2)[6];
              if (v328)
              {
                v329 = 0;
                v330 = *(int *)v1258;
                v331 = (*a2)[19];
                v332 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v331 = 0;
                  if ((int)v330 >= 1)
                  {
                    v333 = 0;
                    v334 = v330 + 1;
                    v335 = v332;
                    do
                    {
                      v336 = *v335++;
                      v333 += v336;
                      *v331 = v333;
                      --v334;
                    }
                    while (v334 > 1);
                  }
                  v329 = (int *)((char *)v329 + 1);
                  ++v331;
                  v332 += v330;
                }
                while (v329 != v328);
              }
              goto LABEL_1733;
            }
            goto LABEL_563;
          }
          if (!v1257)
          {
            v280 = (*a2)[19];
            *v280 = 0;
            v281 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v281 >= 1)
            {
              v282 = 0;
              v283 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v284 = v281 + 1;
              do
              {
                v285 = *v283++;
                v282 += v285;
                *v280 = v282;
                --v284;
              }
              while (v284 > 1);
            }
            goto LABEL_1733;
          }
          if ((v1257 & 0xFFFFFFFD) == 1)
          {
            v327 = v1259;
LABEL_563:
            v1263 = 0;
            v1263 = *((_DWORD *)v327 - 1);
            v1259 = v327 - 4;
            v1261 -= 8;
            v441 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1252 = (*a2)[19];
            __len = v441;
            v99 = v1266;
            v100 = v1268;
            v442 = (*a2)[6];
            if (v1259 == v1258)
            {
              if (v442)
              {
                v790 = 0;
                v791 = v1252;
                v792 = __len;
                v793 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                do
                {
                  v794 = 0;
                  if ((v793 & 0x80000000) == 0)
                  {
                    v795 = v793;
                    v796 = (int)v790;
                    do
                    {
                      v797 = ldiv(v796, v99[v795]);
                      v796 = v797.quot;
                      v794 += (_QWORD)v100[v795--] * v797.rem;
                    }
                    while (v795 != -1);
                  }
                  *v791 = 0;
                  if (v1263 >= 1)
                  {
                    v798 = 0;
                    v799 = (unsigned __int8 *)(v792 + (int)v794);
                    v800 = v1263 + 1;
                    do
                    {
                      v801 = *v799++;
                      v798 += v801;
                      *v791 = v798;
                      --v800;
                    }
                    while (v800 > 1);
                  }
                  v790 = (int *)((char *)v790 + 1);
                  v1252 = ++v791;
                }
                while (v790 != v442);
              }
              goto LABEL_1729;
            }
            if (!v442)
              goto LABEL_1729;
            v443 = 0;
            v444 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1251 = 0;
              v445 = 0;
              if ((v444 & 0x80000000) == 0)
              {
                v446 = v444;
                v447 = v443;
                do
                {
                  v448 = ldiv(v447, v99[v446]);
                  v447 = v448.quot;
                  v445 += (_QWORD)v100[v446--] * v448.rem;
                }
                while (v446 != -1);
              }
              v1251 = v445;
              *v1252 = 0;
              v1265 = 0;
              v449 = operator new(0x30uLL);
              *v449 = &off_2513482F8;
              v449[1] = &v1249;
              v449[2] = &__len;
              v449[3] = &v1251;
              v449[4] = &v1252;
              v449[5] = &v1263;
              v1265 = v449;
              v1273 = 0;
              v450 = (void **)operator new(0x28uLL);
              *v450 = &off_251346A78;
              v450[1] = &v1258;
              v450[2] = &v1260;
              v450[3] = v1272;
              v450[4] = v1264;
              v1268 = v450;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v451 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v451 = (void **)&v1266;
                v452 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_574;
                v452 = 5;
              }
              (*((void (**)(void))*v451 + v452))();
LABEL_574:
              LODWORD(v1266) = 0;
              LODWORD(__b) = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
              v453 = v1273;
              if (v1273 == v1272)
              {
                v453 = v1272;
                v454 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_580;
                v454 = 5;
              }
              (*(void (**)(void))(*v453 + 8 * v454))();
LABEL_580:
              v455 = v1265;
              if (v1265 == v1264)
              {
                v455 = v1264;
                v456 = 4;
                goto LABEL_584;
              }
              if (v1265)
              {
                v456 = 5;
LABEL_584:
                (*(void (**)(void))(*v455 + 8 * v456))();
              }
              ++v443;
              ++v1252;
              if ((unint64_t)(*a2)[6] <= v443)
                goto LABEL_1729;
            }
          }
          if (v1257 == 2)
          {
            v772 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v918 = *((int *)v1259 - 1);
              v919 = *((_QWORD *)v1261 - 1);
              v1259 -= 4;
              v1261 -= 8;
              v920 = (*a2)[6];
              if (v920)
              {
                LODWORD(v921) = 0;
                v922 = (*a2)[19];
                v923 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v919)
                    bzero(v922, 4 * v919);
                  if ((int)v918 >= 1)
                  {
                    v924 = 0;
                    v925 = v923;
                    do
                    {
                      if (v919)
                      {
                        for (mm = 0; mm != v919; ++mm)
                          v922[mm] += *(unsigned __int8 *)(v925 + mm);
                        v925 += mm;
                      }
                      ++v924;
                    }
                    while (v924 != (_DWORD)v918);
                  }
                  v923 += v919 * v918;
                  v922 += v919;
                  v921 = (int)v921 + (int)v919;
                }
                while (v921 < (unint64_t)v920);
              }
              goto LABEL_1733;
            }
LABEL_1273:
            v1251 = 0;
            v1251 = *((_DWORD *)v772 - 1);
            __len = 0;
            v927 = *((_QWORD *)v1261 - 1);
            v1259 = v772 - 4;
            v1261 -= 8;
            v1252 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v927;
            __b = (*a2)[19];
            v99 = v1266;
            v100 = v1268;
            v928 = (unint64_t)(*a2)[6];
            if (v1259 == v1258)
            {
              if (v928)
              {
                v1155 = 0;
                v1156 = (char *)__b;
                v1157 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                v1158 = __len;
                v1245 = v1252;
                v1159 = 4 * __len;
                do
                {
                  v1160 = 0;
                  if ((v1157 & 0x80000000) == 0)
                  {
                    v1161 = v1157;
                    v1162 = v1155;
                    do
                    {
                      v1163 = ldiv(v1162, v99[v1161]);
                      v1162 = v1163.quot;
                      v1160 += (_QWORD)v100[v1161--] * v1163.rem;
                    }
                    while (v1161 != -1);
                  }
                  if (v1158)
                    bzero(v1156, v1159);
                  v1164 = v1251;
                  if (v1251 >= 1)
                  {
                    v1165 = 0;
                    v1166 = (char *)v1245 + (int)v1160;
                    do
                    {
                      if (v1158)
                      {
                        for (nn = 0; nn != v1158; ++nn)
                          *(_DWORD *)&v1156[4 * nn] += v1166[nn];
                        v1166 += nn;
                      }
                      ++v1165;
                    }
                    while (v1165 != v1164);
                  }
                  v1156 += v1159;
                  __b = v1156;
                  v1155 += v1158;
                }
                while (v928 > v1155);
              }
              goto LABEL_1729;
            }
            if (!v928)
              goto LABEL_1729;
            v929 = 0;
            v930 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1249 = 0;
              v931 = 0;
              if ((v930 & 0x80000000) == 0)
              {
                v932 = v930;
                v933 = v929;
                do
                {
                  v934 = ldiv(v933, v99[v932]);
                  v933 = v934.quot;
                  v931 += (_QWORD)v100[v932--] * v934.rem;
                }
                while (v932 != -1);
              }
              v1249 = v931;
              if (__len)
                bzero(__b, 4 * __len);
              v1265 = 0;
              v935 = operator new(0x38uLL);
              *v935 = &off_251348378;
              v935[1] = &v1262;
              v935[2] = &v1252;
              v935[3] = &v1249;
              v935[4] = &__b;
              v935[5] = &v1251;
              v935[6] = &__len;
              v1265 = v935;
              v1273 = 0;
              v936 = (void **)operator new(0x28uLL);
              *v936 = &off_251346A78;
              v936[1] = &v1258;
              v936[2] = &v1260;
              v936[3] = v1272;
              v936[4] = v1264;
              v1268 = v936;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v937 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v937 = (void **)&v1266;
                v938 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_1286;
                v938 = 5;
              }
              (*((void (**)(void))*v937 + v938))();
LABEL_1286:
              LODWORD(v1266) = 0;
              v1263 = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
              v939 = v1273;
              if (v1273 == v1272)
              {
                v939 = v1272;
                v940 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_1292;
                v940 = 5;
              }
              (*(void (**)(void))(*v939 + 8 * v940))();
LABEL_1292:
              v941 = v1265;
              if (v1265 == v1264)
              {
                v941 = v1264;
                v942 = 4;
                goto LABEL_1296;
              }
              if (v1265)
              {
                v942 = 5;
LABEL_1296:
                (*(void (**)(void))(*v941 + 8 * v942))();
              }
              __b = (char *)__b + 4 * __len;
              v929 += __len;
              if ((unint64_t)(*a2)[6] <= v929)
                goto LABEL_1729;
            }
          }
          if (v1257 != 5)
          {
            if (v1257 != 4)
              goto LABEL_1733;
            v772 = v1259;
            goto LABEL_1273;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v903 = (*a2)[19];
          v99 = v1266;
          v100 = v1268;
          if (!(*a2)[6])
            goto LABEL_1729;
          v904 = 0;
          v905 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v906 = 0;
            if ((v905 & 0x80000000) == 0)
            {
              v907 = v905;
              v908 = v904;
              do
              {
                v909 = ldiv(v908, v99[v907]);
                v908 = v909.quot;
                v906 += (_QWORD)v100[v907--] * v909.rem;
              }
              while (v907 != -1);
            }
            LODWORD(__b) = v906;
            v1263 = 0;
            v1265 = 0;
            v910 = operator new(0x28uLL);
            *v910 = &off_2513483F8;
            v910[1] = &v1251;
            v910[2] = &v1263;
            v910[3] = &__len;
            v910[4] = &__b;
            v1265 = v910;
            v1273 = 0;
            v911 = (void **)operator new(0x28uLL);
            *v911 = &off_251346A78;
            v911[1] = &v1258;
            v911[2] = &v1260;
            v911[3] = v1272;
            v911[4] = v1264;
            v1268 = v911;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
            v912 = v1268;
            if (v1268 == (void **)&v1266)
            {
              v912 = (void **)&v1266;
              v913 = 4;
            }
            else
            {
              if (!v1268)
                goto LABEL_1246;
              v913 = 5;
            }
            (*((void (**)(void))*v912 + v913))();
LABEL_1246:
            LODWORD(v1266) = 0;
            LODWORD(v1252) = 0;
            if (!v1273)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
            v914 = v1273;
            if (v1273 == v1272)
            {
              v914 = v1272;
              v915 = 4;
            }
            else
            {
              if (!v1273)
                goto LABEL_1252;
              v915 = 5;
            }
            (*(void (**)(void))(*v914 + 8 * v915))();
LABEL_1252:
            v916 = v1265;
            if (v1265 == v1264)
            {
              v916 = v1264;
              v917 = 4;
              goto LABEL_1256;
            }
            if (v1265)
            {
              v917 = 5;
LABEL_1256:
              (*(void (**)(void))(*v916 + 8 * v917))();
            }
            *v903++ = v1263;
            if ((unint64_t)(*a2)[6] <= ++v904)
              goto LABEL_1729;
          }
        case 3:
          v201 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1269 = &unk_2513463C8;
          v1270 = mlx::core::allocator::free;
          v1271 = &v1269;
          mlx::core::array::set_data(a2, (uint64_t)v201, (uint64_t)&v1269);
          v202 = v1271;
          if (v1271 == &v1269)
          {
            v203 = 4;
            v202 = &v1269;
          }
          else
          {
            if (!v1271)
              goto LABEL_366;
            v203 = 5;
          }
          (*((void (**)(void))*v202 + v203))();
LABEL_366:
          v1255 = 0;
          v1256 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1255 = __p;
            operator delete(__p);
          }
          if (v1257 == 1)
          {
            v337 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              if ((*a2)[6])
              {
                v338 = 0;
                v339 = *(int *)v1258;
                v340 = (*a2)[19];
                v341 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *(_BYTE *)v340 = 0;
                  if ((int)v339 >= 1)
                  {
                    v342 = 0;
                    v343 = v339 + 1;
                    v344 = v341;
                    do
                    {
                      v345 = *v344++;
                      v342 += v345;
                      *(_BYTE *)v340 = v342;
                      --v343;
                    }
                    while (v343 > 1);
                  }
                  ++v338;
                  v340 = (int *)((char *)v340 + 1);
                  v341 += v339;
                }
                while ((unint64_t)(*a2)[6] > v338);
              }
              goto LABEL_1733;
            }
            goto LABEL_589;
          }
          if (!v1257)
          {
            v286 = (*a2)[19];
            *(_BYTE *)v286 = 0;
            v287 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v287 >= 1)
            {
              v288 = 0;
              v289 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v290 = v287 + 1;
              do
              {
                v291 = *v289++;
                v288 += v291;
                *(_BYTE *)v286 = v288;
                --v290;
              }
              while (v290 > 1);
            }
            goto LABEL_1733;
          }
          if ((v1257 & 0xFFFFFFFD) == 1)
          {
            v337 = v1259;
LABEL_589:
            v1263 = 0;
            v1263 = *((_DWORD *)v337 - 1);
            v1259 = v337 - 4;
            v1261 -= 8;
            v457 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1252 = (*a2)[19];
            __len = v457;
            v99 = v1266;
            v100 = v1268;
            v458 = (*a2)[6];
            if (v1259 == v1258)
            {
              if (v458)
              {
                v802 = 0;
                v803 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                do
                {
                  v804 = 0;
                  if ((v803 & 0x80000000) == 0)
                  {
                    v805 = v803;
                    v806 = v802;
                    do
                    {
                      v807 = ldiv(v806, v99[v805]);
                      v806 = v807.quot;
                      v804 += (_QWORD)v100[v805--] * v807.rem;
                    }
                    while (v805 != -1);
                  }
                  *(_BYTE *)v1252 = 0;
                  v808 = v1252;
                  if (v1263 >= 1)
                  {
                    v809 = (unsigned __int8 *)(__len + (int)v804);
                    v810 = *(unsigned __int8 *)v1252;
                    v811 = v1263 + 1;
                    do
                    {
                      v812 = *v809++;
                      v810 += v812;
                      *(_BYTE *)v808 = v810;
                      --v811;
                    }
                    while (v811 > 1);
                    v808 = v1252;
                  }
                  ++v802;
                  v1252 = (int *)((char *)v808 + 1);
                }
                while ((unint64_t)(*a2)[6] > v802);
              }
              goto LABEL_1729;
            }
            if (!v458)
              goto LABEL_1729;
            v459 = 0;
            v460 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1251 = 0;
              v461 = 0;
              if ((v460 & 0x80000000) == 0)
              {
                v462 = v460;
                v463 = v459;
                do
                {
                  v464 = ldiv(v463, v99[v462]);
                  v463 = v464.quot;
                  v461 += (_QWORD)v100[v462--] * v464.rem;
                }
                while (v462 != -1);
              }
              v1251 = v461;
              *(_BYTE *)v1252 = 0;
              v1265 = 0;
              v465 = operator new(0x30uLL);
              *v465 = &off_251348478;
              v465[1] = &v1249;
              v465[2] = &__len;
              v465[3] = &v1251;
              v465[4] = &v1252;
              v465[5] = &v1263;
              v1265 = v465;
              v1273 = 0;
              v466 = (void **)operator new(0x28uLL);
              *v466 = &off_251346A78;
              v466[1] = &v1258;
              v466[2] = &v1260;
              v466[3] = v1272;
              v466[4] = v1264;
              v1268 = v466;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v467 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v467 = (void **)&v1266;
                v468 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_600;
                v468 = 5;
              }
              (*((void (**)(void))*v467 + v468))();
LABEL_600:
              LODWORD(v1266) = 0;
              LODWORD(__b) = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
              v469 = v1273;
              if (v1273 == v1272)
              {
                v469 = v1272;
                v470 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_606;
                v470 = 5;
              }
              (*(void (**)(void))(*v469 + 8 * v470))();
LABEL_606:
              v471 = v1265;
              if (v1265 == v1264)
              {
                v471 = v1264;
                v472 = 4;
                goto LABEL_610;
              }
              if (v1265)
              {
                v472 = 5;
LABEL_610:
                (*(void (**)(void))(*v471 + 8 * v472))();
              }
              ++v459;
              v1252 = (int *)((char *)v1252 + 1);
              if ((unint64_t)(*a2)[6] <= v459)
                goto LABEL_1729;
            }
          }
          if (v1257 == 2)
          {
            v773 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v988 = *((int *)v1259 - 1);
              v989 = *((_QWORD *)v1261 - 1);
              v1259 -= 4;
              v1261 -= 8;
              if ((*a2)[6])
              {
                LODWORD(v990) = 0;
                v991 = (*a2)[19];
                v992 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v989)
                    bzero(v991, v989);
                  if ((int)v988 >= 1)
                  {
                    v993 = 0;
                    v994 = v992;
                    do
                    {
                      if (v989)
                      {
                        for (i1 = 0; i1 != v989; ++i1)
                          *((_BYTE *)v991 + i1) += *(_BYTE *)(v994 + i1);
                        v994 += i1;
                      }
                      ++v993;
                    }
                    while (v993 != (_DWORD)v988);
                  }
                  v992 += v989 * v988;
                  v991 = (int *)((char *)v991 + v989);
                  v990 = (int)v990 + (int)v989;
                }
                while (v990 < (unint64_t)(*a2)[6]);
              }
              goto LABEL_1733;
            }
LABEL_1382:
            v1251 = 0;
            v1251 = *((_DWORD *)v773 - 1);
            __len = 0;
            v996 = *((_QWORD *)v1261 - 1);
            v1259 = v773 - 4;
            v1261 -= 8;
            v1252 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v996;
            __b = (*a2)[19];
            v99 = v1266;
            v100 = v1268;
            v997 = (*a2)[6];
            if (v1259 == v1258)
            {
              if (v997)
              {
                v1168 = 0;
                v1169 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                do
                {
                  v1170 = 0;
                  if ((v1169 & 0x80000000) != 0)
                  {
                    v1173 = a2;
                  }
                  else
                  {
                    v1171 = v1169;
                    v1172 = v1168;
                    v1173 = a2;
                    do
                    {
                      v1174 = ldiv(v1172, v99[v1171]);
                      v1172 = v1174.quot;
                      v1170 += (_QWORD)v100[v1171--] * v1174.rem;
                    }
                    while (v1171 != -1);
                  }
                  v1175 = __b;
                  if (__len)
                  {
                    bzero(__b, __len);
                    v1176 = __len;
                    v1175 = __b;
                  }
                  else
                  {
                    v1176 = 0;
                  }
                  v1177 = v1251;
                  if (v1251 >= 1)
                  {
                    v1178 = 0;
                    v1179 = (char *)v1252 + (int)v1170;
                    do
                    {
                      v1180 = v1176;
                      for (i2 = v1175; v1180; --v1180)
                      {
                        v1182 = *v1179++;
                        *i2++ += v1182;
                      }
                      ++v1178;
                    }
                    while (v1178 != v1177);
                    v1176 = __len;
                    v1175 = __b;
                  }
                  __b = &v1175[v1176];
                  v1168 += v1176;
                }
                while ((unint64_t)(*v1173)[6] > v1168);
              }
              goto LABEL_1729;
            }
            if (!v997)
              goto LABEL_1729;
            v998 = 0;
            v999 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1249 = 0;
              v1000 = 0;
              if ((v999 & 0x80000000) == 0)
              {
                v1001 = v999;
                v1002 = v998;
                do
                {
                  v1003 = ldiv(v1002, v99[v1001]);
                  v1002 = v1003.quot;
                  v1000 += (_QWORD)v100[v1001--] * v1003.rem;
                }
                while (v1001 != -1);
              }
              v1249 = v1000;
              if (__len)
                bzero(__b, __len);
              v1265 = 0;
              v1004 = operator new(0x38uLL);
              *v1004 = &off_2513484F8;
              v1004[1] = &v1262;
              v1004[2] = &v1252;
              v1004[3] = &v1249;
              v1004[4] = &__b;
              v1004[5] = &v1251;
              v1004[6] = &__len;
              v1265 = v1004;
              v1273 = 0;
              v1005 = (void **)operator new(0x28uLL);
              *v1005 = &off_251346A78;
              v1005[1] = &v1258;
              v1005[2] = &v1260;
              v1005[3] = v1272;
              v1005[4] = v1264;
              v1268 = v1005;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v1006 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v1006 = (void **)&v1266;
                v1007 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_1395;
                v1007 = 5;
              }
              (*((void (**)(void))*v1006 + v1007))();
LABEL_1395:
              LODWORD(v1266) = 0;
              v1263 = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
              v1008 = v1273;
              if (v1273 == v1272)
              {
                v1008 = v1272;
                v1009 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_1401;
                v1009 = 5;
              }
              (*(void (**)(void))(*v1008 + 8 * v1009))();
LABEL_1401:
              v1010 = v1265;
              if (v1265 == v1264)
              {
                v1010 = v1264;
                v1011 = 4;
                goto LABEL_1405;
              }
              if (v1265)
              {
                v1011 = 5;
LABEL_1405:
                (*(void (**)(void))(*v1010 + 8 * v1011))();
              }
              __b = (char *)__b + __len;
              v998 += __len;
              if ((unint64_t)(*a2)[6] <= v998)
                goto LABEL_1729;
            }
          }
          if (v1257 != 5)
          {
            if (v1257 != 4)
              goto LABEL_1733;
            v773 = v1259;
            goto LABEL_1382;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v943 = (*a2)[19];
          v99 = v1266;
          v100 = v1268;
          if (!(*a2)[6])
            goto LABEL_1729;
          v944 = 0;
          v945 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v946 = 0;
            if ((v945 & 0x80000000) == 0)
            {
              v947 = v945;
              v948 = v944;
              do
              {
                v949 = ldiv(v948, v99[v947]);
                v948 = v949.quot;
                v946 += (_QWORD)v100[v947--] * v949.rem;
              }
              while (v947 != -1);
            }
            LODWORD(__b) = v946;
            LOBYTE(v1251) = 0;
            v1265 = 0;
            v950 = operator new(0x28uLL);
            *v950 = &off_251348578;
            v950[1] = &v1263;
            v950[2] = &v1251;
            v950[3] = &__len;
            v950[4] = &__b;
            v1265 = v950;
            v1273 = 0;
            v951 = (void **)operator new(0x28uLL);
            *v951 = &off_251346A78;
            v951[1] = &v1258;
            v951[2] = &v1260;
            v951[3] = v1272;
            v951[4] = v1264;
            v1268 = v951;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
            v952 = v1268;
            if (v1268 == (void **)&v1266)
            {
              v952 = (void **)&v1266;
              v953 = 4;
            }
            else
            {
              if (!v1268)
                goto LABEL_1309;
              v953 = 5;
            }
            (*((void (**)(void))*v952 + v953))();
LABEL_1309:
            LODWORD(v1266) = 0;
            LODWORD(v1252) = 0;
            if (!v1273)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
            v954 = v1273;
            if (v1273 == v1272)
            {
              v954 = v1272;
              v955 = 4;
            }
            else
            {
              if (!v1273)
                goto LABEL_1315;
              v955 = 5;
            }
            (*(void (**)(void))(*v954 + 8 * v955))();
LABEL_1315:
            v956 = v1265;
            if (v1265 == v1264)
            {
              v956 = v1264;
              v957 = 4;
              goto LABEL_1319;
            }
            if (v1265)
            {
              v957 = 5;
LABEL_1319:
              (*(void (**)(void))(*v956 + 8 * v957))();
            }
            *(_BYTE *)v943 = v1251;
            v943 = (int *)((char *)v943 + 1);
            if ((unint64_t)(*a2)[6] <= ++v944)
              goto LABEL_1729;
          }
        case 4:
          v195 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1269 = &unk_2513463C8;
          v1270 = mlx::core::allocator::free;
          v1271 = &v1269;
          mlx::core::array::set_data(a2, (uint64_t)v195, (uint64_t)&v1269);
          v196 = v1271;
          if (v1271 == &v1269)
          {
            v197 = 4;
            v196 = &v1269;
          }
          else
          {
            if (!v1271)
              goto LABEL_346;
            v197 = 5;
          }
          (*((void (**)(void))*v196 + v197))();
LABEL_346:
          v1255 = 0;
          v1256 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1255 = __p;
            operator delete(__p);
          }
          if (v1257 == 1)
          {
            v317 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v318 = (*a2)[6];
              if (v318)
              {
                v319 = 0;
                v320 = *(int *)v1258;
                v321 = (*a2)[19];
                v322 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v321 = 0;
                  if ((int)v320 >= 1)
                  {
                    v323 = 0;
                    v324 = v320 + 1;
                    v325 = v322;
                    do
                    {
                      v326 = *v325++;
                      v323 += v326;
                      *v321 = v323;
                      --v324;
                    }
                    while (v324 > 1);
                  }
                  v319 = (int *)((char *)v319 + 1);
                  ++v321;
                  v322 += v320;
                }
                while (v319 != v318);
              }
              goto LABEL_1733;
            }
            goto LABEL_456;
          }
          if (!v1257)
          {
            v274 = (*a2)[19];
            *v274 = 0;
            v275 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v275 >= 1)
            {
              v276 = 0;
              v277 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v278 = v275 + 1;
              do
              {
                v279 = *v277++;
                v276 += v279;
                *v274 = v276;
                --v278;
              }
              while (v278 > 1);
            }
            goto LABEL_1733;
          }
          if ((v1257 & 0xFFFFFFFD) == 1)
          {
            v317 = v1259;
LABEL_456:
            v1263 = 0;
            v1263 = *((_DWORD *)v317 - 1);
            v1259 = v317 - 4;
            v1261 -= 8;
            v365 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1252 = (*a2)[19];
            __len = v365;
            v99 = v1266;
            v100 = v1268;
            v366 = (*a2)[6];
            if (v1259 == v1258)
            {
              if (v366)
              {
                v778 = 0;
                v779 = v1252;
                v780 = __len;
                v781 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                do
                {
                  v782 = 0;
                  if ((v781 & 0x80000000) == 0)
                  {
                    v783 = v781;
                    v784 = (int)v778;
                    do
                    {
                      v785 = ldiv(v784, v99[v783]);
                      v784 = v785.quot;
                      v782 += (_QWORD)v100[v783--] * v785.rem;
                    }
                    while (v783 != -1);
                  }
                  *v779 = 0;
                  if (v1263 >= 1)
                  {
                    v786 = 0;
                    v787 = (unsigned __int8 *)(v780 + (int)v782);
                    v788 = v1263 + 1;
                    do
                    {
                      v789 = *v787++;
                      v786 += v789;
                      *v779 = v786;
                      --v788;
                    }
                    while (v788 > 1);
                  }
                  v778 = (int *)((char *)v778 + 1);
                  v1252 = ++v779;
                }
                while (v778 != v366);
              }
              goto LABEL_1729;
            }
            if (!v366)
              goto LABEL_1729;
            v367 = 0;
            v368 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1251 = 0;
              v369 = 0;
              if ((v368 & 0x80000000) == 0)
              {
                v370 = v368;
                v371 = v367;
                do
                {
                  v372 = ldiv(v371, v99[v370]);
                  v371 = v372.quot;
                  v369 += (_QWORD)v100[v370--] * v372.rem;
                }
                while (v370 != -1);
              }
              v1251 = v369;
              *v1252 = 0;
              v1265 = 0;
              v373 = operator new(0x30uLL);
              *v373 = &off_2513485F8;
              v373[1] = &v1249;
              v373[2] = &__len;
              v373[3] = &v1251;
              v373[4] = &v1252;
              v373[5] = &v1263;
              v1265 = v373;
              v1273 = 0;
              v374 = (void **)operator new(0x28uLL);
              *v374 = &off_251346A78;
              v374[1] = &v1258;
              v374[2] = &v1260;
              v374[3] = v1272;
              v374[4] = v1264;
              v1268 = v374;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v375 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v375 = (void **)&v1266;
                v376 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_467;
                v376 = 5;
              }
              (*((void (**)(void))*v375 + v376))();
LABEL_467:
              LODWORD(v1266) = 0;
              LODWORD(__b) = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
              v377 = v1273;
              if (v1273 == v1272)
              {
                v377 = v1272;
                v378 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_473;
                v378 = 5;
              }
              (*(void (**)(void))(*v377 + 8 * v378))();
LABEL_473:
              v379 = v1265;
              if (v1265 == v1264)
              {
                v379 = v1264;
                v380 = 4;
                goto LABEL_477;
              }
              if (v1265)
              {
                v380 = 5;
LABEL_477:
                (*(void (**)(void))(*v379 + 8 * v380))();
              }
              ++v367;
              ++v1252;
              if ((unint64_t)(*a2)[6] <= v367)
                goto LABEL_1729;
            }
          }
          if (v1257 == 2)
          {
            v771 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v878 = *((int *)v1259 - 1);
              v879 = *((_QWORD *)v1261 - 1);
              v1259 -= 4;
              v1261 -= 8;
              v880 = (*a2)[6];
              if (v880)
              {
                LODWORD(v881) = 0;
                v882 = (*a2)[19];
                v883 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v879)
                    bzero(v882, 4 * v879);
                  if ((int)v878 >= 1)
                  {
                    v884 = 0;
                    v885 = v883;
                    do
                    {
                      if (v879)
                      {
                        for (i3 = 0; i3 != v879; ++i3)
                          v882[i3] += *(unsigned __int8 *)(v885 + i3);
                        v885 += i3;
                      }
                      ++v884;
                    }
                    while (v884 != (_DWORD)v878);
                  }
                  v883 += v879 * v878;
                  v882 += v879;
                  v881 = (int)v881 + (int)v879;
                }
                while (v881 < (unint64_t)v880);
              }
              goto LABEL_1733;
            }
LABEL_1210:
            v1251 = 0;
            v1251 = *((_DWORD *)v771 - 1);
            __len = 0;
            v887 = *((_QWORD *)v1261 - 1);
            v1259 = v771 - 4;
            v1261 -= 8;
            v1252 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v887;
            __b = (*a2)[19];
            v99 = v1266;
            v100 = v1268;
            v888 = (unint64_t)(*a2)[6];
            if (v1259 == v1258)
            {
              if (v888)
              {
                v1142 = 0;
                v1143 = (char *)__b;
                v1144 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                v1145 = __len;
                v1244 = v1252;
                v1146 = 4 * __len;
                do
                {
                  v1147 = 0;
                  if ((v1144 & 0x80000000) == 0)
                  {
                    v1148 = v1144;
                    v1149 = v1142;
                    do
                    {
                      v1150 = ldiv(v1149, v99[v1148]);
                      v1149 = v1150.quot;
                      v1147 += (_QWORD)v100[v1148--] * v1150.rem;
                    }
                    while (v1148 != -1);
                  }
                  if (v1145)
                    bzero(v1143, v1146);
                  v1151 = v1251;
                  if (v1251 >= 1)
                  {
                    v1152 = 0;
                    v1153 = (char *)v1244 + (int)v1147;
                    do
                    {
                      if (v1145)
                      {
                        for (i4 = 0; i4 != v1145; ++i4)
                          *(_DWORD *)&v1143[4 * i4] += v1153[i4];
                        v1153 += i4;
                      }
                      ++v1152;
                    }
                    while (v1152 != v1151);
                  }
                  v1143 += v1146;
                  __b = v1143;
                  v1142 += v1145;
                }
                while (v888 > v1142);
              }
              goto LABEL_1729;
            }
            if (!v888)
              goto LABEL_1729;
            v889 = 0;
            v890 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1249 = 0;
              v891 = 0;
              if ((v890 & 0x80000000) == 0)
              {
                v892 = v890;
                v893 = v889;
                do
                {
                  v894 = ldiv(v893, v99[v892]);
                  v893 = v894.quot;
                  v891 += (_QWORD)v100[v892--] * v894.rem;
                }
                while (v892 != -1);
              }
              v1249 = v891;
              if (__len)
                bzero(__b, 4 * __len);
              v1265 = 0;
              v895 = operator new(0x38uLL);
              *v895 = &off_251348678;
              v895[1] = &v1262;
              v895[2] = &v1252;
              v895[3] = &v1249;
              v895[4] = &__b;
              v895[5] = &v1251;
              v895[6] = &__len;
              v1265 = v895;
              v1273 = 0;
              v896 = (void **)operator new(0x28uLL);
              *v896 = &off_251346A78;
              v896[1] = &v1258;
              v896[2] = &v1260;
              v896[3] = v1272;
              v896[4] = v1264;
              v1268 = v896;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v897 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v897 = (void **)&v1266;
                v898 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_1223;
                v898 = 5;
              }
              (*((void (**)(void))*v897 + v898))();
LABEL_1223:
              LODWORD(v1266) = 0;
              v1263 = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
              v899 = v1273;
              if (v1273 == v1272)
              {
                v899 = v1272;
                v900 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_1229;
                v900 = 5;
              }
              (*(void (**)(void))(*v899 + 8 * v900))();
LABEL_1229:
              v901 = v1265;
              if (v1265 == v1264)
              {
                v901 = v1264;
                v902 = 4;
                goto LABEL_1233;
              }
              if (v1265)
              {
                v902 = 5;
LABEL_1233:
                (*(void (**)(void))(*v901 + 8 * v902))();
              }
              __b = (char *)__b + 4 * __len;
              v889 += __len;
              if ((unint64_t)(*a2)[6] <= v889)
                goto LABEL_1729;
            }
          }
          if (v1257 != 5)
          {
            if (v1257 != 4)
              goto LABEL_1733;
            v771 = v1259;
            goto LABEL_1210;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v863 = (*a2)[19];
          v99 = v1266;
          v100 = v1268;
          if (!(*a2)[6])
            goto LABEL_1729;
          v864 = 0;
          v865 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v866 = 0;
            if ((v865 & 0x80000000) == 0)
            {
              v867 = v865;
              v868 = v864;
              do
              {
                v869 = ldiv(v868, v99[v867]);
                v868 = v869.quot;
                v866 += (_QWORD)v100[v867--] * v869.rem;
              }
              while (v867 != -1);
            }
            LODWORD(__b) = v866;
            v1263 = 0;
            v1265 = 0;
            v870 = operator new(0x28uLL);
            *v870 = &off_2513486F8;
            v870[1] = &v1251;
            v870[2] = &v1263;
            v870[3] = &__len;
            v870[4] = &__b;
            v1265 = v870;
            v1273 = 0;
            v871 = (void **)operator new(0x28uLL);
            *v871 = &off_251346A78;
            v871[1] = &v1258;
            v871[2] = &v1260;
            v871[3] = v1272;
            v871[4] = v1264;
            v1268 = v871;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
            v872 = v1268;
            if (v1268 == (void **)&v1266)
            {
              v872 = (void **)&v1266;
              v873 = 4;
            }
            else
            {
              if (!v1268)
                goto LABEL_1183;
              v873 = 5;
            }
            (*((void (**)(void))*v872 + v873))();
LABEL_1183:
            LODWORD(v1266) = 0;
            LODWORD(v1252) = 0;
            if (!v1273)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
            v874 = v1273;
            if (v1273 == v1272)
            {
              v874 = v1272;
              v875 = 4;
            }
            else
            {
              if (!v1273)
                goto LABEL_1189;
              v875 = 5;
            }
            (*(void (**)(void))(*v874 + 8 * v875))();
LABEL_1189:
            v876 = v1265;
            if (v1265 == v1264)
            {
              v876 = v1264;
              v877 = 4;
              goto LABEL_1193;
            }
            if (v1265)
            {
              v877 = 5;
LABEL_1193:
              (*(void (**)(void))(*v876 + 8 * v877))();
            }
            *v863++ = v1263;
            if ((unint64_t)(*a2)[6] <= ++v864)
              goto LABEL_1729;
          }
        case 5:
          v207 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1269 = &unk_2513463C8;
          v1270 = mlx::core::allocator::free;
          v1271 = &v1269;
          mlx::core::array::set_data(a2, (uint64_t)v207, (uint64_t)&v1269);
          v208 = v1271;
          if (v1271 == &v1269)
          {
            v209 = 4;
            v208 = &v1269;
          }
          else
          {
            if (!v1271)
              goto LABEL_396;
            v209 = 5;
          }
          (*((void (**)(void))*v208 + v209))();
LABEL_396:
          v1255 = 0;
          v1256 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1255 = __p;
            operator delete(__p);
          }
          if (v1257 == 1)
          {
            v396 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v397 = (*a2)[6];
              if (v397)
              {
                v398 = 0;
                v399 = *(int *)v1258;
                v400 = (*a2)[19];
                v401 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *(_QWORD *)v400 = 0;
                  if ((int)v399 >= 1)
                  {
                    v402 = 0;
                    v403 = v399 + 1;
                    v404 = v401;
                    do
                    {
                      v405 = *v404++;
                      v402 += v405;
                      *(_QWORD *)v400 = v402;
                      --v403;
                    }
                    while (v403 > 1);
                  }
                  v398 = (int *)((char *)v398 + 1);
                  v400 += 2;
                  v401 += v399;
                }
                while (v398 != v397);
              }
              goto LABEL_1733;
            }
            goto LABEL_862;
          }
          if (!v1257)
          {
            v304 = (*a2)[19];
            *(_QWORD *)v304 = 0;
            v305 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v305 >= 1)
            {
              v306 = 0;
              v307 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v308 = v305 + 1;
              do
              {
                v309 = *v307++;
                v306 += v309;
                *(_QWORD *)v304 = v306;
                --v308;
              }
              while (v308 > 1);
            }
            goto LABEL_1733;
          }
          if ((v1257 & 0xFFFFFFFD) == 1)
          {
            v396 = v1259;
LABEL_862:
            v1263 = 0;
            v1263 = *((_DWORD *)v396 - 1);
            v1259 = v396 - 4;
            v1261 -= 8;
            v626 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1252 = (*a2)[19];
            __len = v626;
            v99 = v1266;
            v100 = v1268;
            v627 = (*a2)[6];
            if (v1259 == v1258)
            {
              if (v627)
              {
                v837 = 0;
                v838 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                v839 = v1252;
                v1242 = __len;
                v840 = v1263;
                v841 = v1263 + 1;
                do
                {
                  v842 = 0;
                  if ((v838 & 0x80000000) == 0)
                  {
                    v843 = v838;
                    v844 = (int)v837;
                    do
                    {
                      v845 = ldiv(v844, v99[v843]);
                      v844 = v845.quot;
                      v842 += (_QWORD)v100[v843--] * v845.rem;
                    }
                    while (v843 != -1);
                  }
                  *(_QWORD *)v839 = 0;
                  if (v840 >= 1)
                  {
                    v846 = 0;
                    v847 = (unsigned __int8 *)(v1242 + (int)v842);
                    v848 = v841;
                    do
                    {
                      v849 = *v847++;
                      v846 += v849;
                      *(_QWORD *)v839 = v846;
                      --v848;
                    }
                    while (v848 > 1);
                  }
                  v837 = (int *)((char *)v837 + 1);
                  v839 += 2;
                  v1252 = v839;
                }
                while (v837 != v627);
              }
              goto LABEL_1729;
            }
            if (!v627)
              goto LABEL_1729;
            v628 = 0;
            v629 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1251 = 0;
              v630 = 0;
              if ((v629 & 0x80000000) == 0)
              {
                v631 = v629;
                v632 = v628;
                do
                {
                  v633 = ldiv(v632, v99[v631]);
                  v632 = v633.quot;
                  v630 += (_QWORD)v100[v631--] * v633.rem;
                }
                while (v631 != -1);
              }
              v1251 = v630;
              *(_QWORD *)v1252 = 0;
              v1265 = 0;
              v634 = operator new(0x30uLL);
              *v634 = &off_251348778;
              v634[1] = &v1249;
              v634[2] = &__len;
              v634[3] = &v1251;
              v634[4] = &v1252;
              v634[5] = &v1263;
              v1265 = v634;
              v1273 = 0;
              v635 = (void **)operator new(0x28uLL);
              *v635 = &off_251346A78;
              v635[1] = &v1258;
              v635[2] = &v1260;
              v635[3] = v1272;
              v635[4] = v1264;
              v1268 = v635;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v636 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v636 = (void **)&v1266;
                v637 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_873;
                v637 = 5;
              }
              (*((void (**)(void))*v636 + v637))();
LABEL_873:
              LODWORD(v1266) = 0;
              LODWORD(__b) = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
              v638 = v1273;
              if (v1273 == v1272)
              {
                v638 = v1272;
                v639 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_879;
                v639 = 5;
              }
              (*(void (**)(void))(*v638 + 8 * v639))();
LABEL_879:
              v640 = v1265;
              if (v1265 == v1264)
              {
                v640 = v1264;
                v641 = 4;
                goto LABEL_883;
              }
              if (v1265)
              {
                v641 = 5;
LABEL_883:
                (*(void (**)(void))(*v640 + 8 * v641))();
              }
              ++v628;
              v1252 += 2;
              if ((unint64_t)(*a2)[6] <= v628)
                goto LABEL_1729;
            }
          }
          if (v1257 == 2)
          {
            v776 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v1091 = *((int *)v1259 - 1);
              v1092 = *((_QWORD *)v1261 - 1);
              v1259 -= 4;
              v1261 -= 8;
              v1093 = (*a2)[6];
              if (v1093)
              {
                LODWORD(v1094) = 0;
                v1095 = (*a2)[19];
                v1096 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1092)
                    bzero(v1095, 8 * v1092);
                  if ((int)v1091 >= 1)
                  {
                    v1097 = 0;
                    v1098 = v1096;
                    do
                    {
                      if (v1092)
                      {
                        for (i5 = 0; i5 != v1092; ++i5)
                          *(_QWORD *)&v1095[2 * i5] += *(unsigned __int8 *)(v1098 + i5);
                        v1098 += i5;
                      }
                      ++v1097;
                    }
                    while (v1097 != (_DWORD)v1091);
                  }
                  v1096 += v1092 * v1091;
                  v1095 += 2 * v1092;
                  v1094 = (int)v1094 + (int)v1092;
                }
                while (v1094 < (unint64_t)v1093);
              }
              goto LABEL_1733;
            }
LABEL_1548:
            v1251 = 0;
            v1251 = *((_DWORD *)v776 - 1);
            __len = 0;
            v1100 = *((_QWORD *)v1261 - 1);
            v1259 = v776 - 4;
            v1261 -= 8;
            v1252 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1100;
            __b = (*a2)[19];
            v99 = v1266;
            v100 = v1268;
            v1101 = (unint64_t)(*a2)[6];
            if (v1259 == v1258)
            {
              if (v1101)
              {
                v1210 = 0;
                v1211 = (char *)__b;
                v1212 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                v1213 = __len;
                v1234 = v1252;
                v1247 = v1212;
                v1214 = v1251;
                v1215 = 8 * __len;
                do
                {
                  v1216 = 0;
                  if ((v1212 & 0x80000000) == 0)
                  {
                    v1217 = v1210;
                    do
                    {
                      v1218 = ldiv(v1217, v99[v1212]);
                      v1217 = v1218.quot;
                      v1216 += (_QWORD)v100[v1212--] * v1218.rem;
                    }
                    while (v1212 != -1);
                  }
                  if (v1213)
                    bzero(v1211, v1215);
                  v1212 = v1247;
                  if (v1214 >= 1)
                  {
                    v1219 = 0;
                    v1220 = (char *)v1234 + (int)v1216;
                    do
                    {
                      if (v1213)
                      {
                        for (i6 = 0; i6 != v1213; ++i6)
                          *(_QWORD *)&v1211[8 * i6] += v1220[i6];
                        v1220 += i6;
                      }
                      ++v1219;
                    }
                    while (v1219 != v1214);
                  }
                  v1211 += v1215;
                  __b = v1211;
                  v1210 += v1213;
                }
                while (v1101 > v1210);
              }
              goto LABEL_1729;
            }
            if (!v1101)
              goto LABEL_1729;
            v1102 = 0;
            v1103 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1249 = 0;
              v1104 = 0;
              if ((v1103 & 0x80000000) == 0)
              {
                v1105 = v1103;
                v1106 = v1102;
                do
                {
                  v1107 = ldiv(v1106, v99[v1105]);
                  v1106 = v1107.quot;
                  v1104 += (_QWORD)v100[v1105--] * v1107.rem;
                }
                while (v1105 != -1);
              }
              v1249 = v1104;
              if (__len)
                bzero(__b, 8 * __len);
              v1265 = 0;
              v1108 = operator new(0x38uLL);
              *v1108 = &off_2513487F8;
              v1108[1] = &v1262;
              v1108[2] = &v1252;
              v1108[3] = &v1249;
              v1108[4] = &__b;
              v1108[5] = &v1251;
              v1108[6] = &__len;
              v1265 = v1108;
              v1273 = 0;
              v1109 = (void **)operator new(0x28uLL);
              *v1109 = &off_251346A78;
              v1109[1] = &v1258;
              v1109[2] = &v1260;
              v1109[3] = v1272;
              v1109[4] = v1264;
              v1268 = v1109;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v1110 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v1110 = (void **)&v1266;
                v1111 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_1561;
                v1111 = 5;
              }
              (*((void (**)(void))*v1110 + v1111))();
LABEL_1561:
              LODWORD(v1266) = 0;
              v1263 = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
              v1112 = v1273;
              if (v1273 == v1272)
              {
                v1112 = v1272;
                v1113 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_1567;
                v1113 = 5;
              }
              (*(void (**)(void))(*v1112 + 8 * v1113))();
LABEL_1567:
              v1114 = v1265;
              if (v1265 == v1264)
              {
                v1114 = v1264;
                v1115 = 4;
                goto LABEL_1571;
              }
              if (v1265)
              {
                v1115 = 5;
LABEL_1571:
                (*(void (**)(void))(*v1114 + 8 * v1115))();
              }
              __b = (char *)__b + 8 * __len;
              v1102 += __len;
              if ((unint64_t)(*a2)[6] <= v1102)
                goto LABEL_1729;
            }
          }
          if (v1257 != 5)
          {
            if (v1257 != 4)
              goto LABEL_1733;
            v776 = v1259;
            goto LABEL_1548;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v1061 = (*a2)[19];
          v99 = v1266;
          v100 = v1268;
          if (!(*a2)[6])
            goto LABEL_1729;
          v1062 = 0;
          v1063 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          while (1)
          {
            v1263 = 0;
            v1064 = 0;
            if ((v1063 & 0x80000000) == 0)
            {
              v1065 = v1063;
              v1066 = v1062;
              do
              {
                v1067 = ldiv(v1066, v99[v1065]);
                v1066 = v1067.quot;
                v1064 += (_QWORD)v100[v1065--] * v1067.rem;
              }
              while (v1065 != -1);
            }
            v1263 = v1064;
            v1252 = 0;
            v1265 = 0;
            v1068 = operator new(0x28uLL);
            *v1068 = &off_251348878;
            v1068[1] = &v1251;
            v1068[2] = &v1252;
            v1068[3] = &__len;
            v1068[4] = &v1263;
            v1265 = v1068;
            v1273 = 0;
            v1069 = (void **)operator new(0x28uLL);
            *v1069 = &off_251346A78;
            v1069[1] = &v1258;
            v1069[2] = &v1260;
            v1069[3] = v1272;
            v1069[4] = v1264;
            v1268 = v1069;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
            v1070 = v1268;
            if (v1268 == (void **)&v1266)
            {
              v1070 = (void **)&v1266;
              v1071 = 4;
            }
            else
            {
              if (!v1268)
                goto LABEL_1498;
              v1071 = 5;
            }
            (*((void (**)(void))*v1070 + v1071))();
LABEL_1498:
            LODWORD(v1266) = 0;
            LODWORD(__b) = 0;
            if (!v1273)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
            v1072 = v1273;
            if (v1273 == v1272)
            {
              v1072 = v1272;
              v1073 = 4;
            }
            else
            {
              if (!v1273)
                goto LABEL_1504;
              v1073 = 5;
            }
            (*(void (**)(void))(*v1072 + 8 * v1073))();
LABEL_1504:
            v1074 = v1265;
            if (v1265 == v1264)
            {
              v1074 = v1264;
              v1075 = 4;
              goto LABEL_1508;
            }
            if (v1265)
            {
              v1075 = 5;
LABEL_1508:
              (*(void (**)(void))(*v1074 + 8 * v1075))();
            }
            *(_QWORD *)v1061 = v1252;
            v1061 += 2;
            if ((unint64_t)(*a2)[6] <= ++v1062)
              goto LABEL_1729;
          }
        case 6:
          v210 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1269 = &unk_2513463C8;
          v1270 = mlx::core::allocator::free;
          v1271 = &v1269;
          mlx::core::array::set_data(a2, (uint64_t)v210, (uint64_t)&v1269);
          v211 = v1271;
          if (v1271 == &v1269)
          {
            v212 = 4;
            v211 = &v1269;
          }
          else
          {
            if (!v1271)
              goto LABEL_406;
            v212 = 5;
          }
          (*((void (**)(void))*v211 + v212))();
LABEL_406:
          v1255 = 0;
          v1256 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1255 = __p;
            operator delete(__p);
          }
          if (v1257 == 1)
          {
            v431 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v432 = (*a2)[6];
              if (v432)
              {
                v433 = 0;
                v434 = *(int *)v1258;
                v435 = (float *)(*a2)[19];
                v436 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v435 = 0.0;
                  if ((int)v434 >= 1)
                  {
                    v437 = 0.0;
                    v438 = v434 + 1;
                    v439 = v436;
                    do
                    {
                      v440 = *v439++;
                      v437 = v437 + (float)v440;
                      *v435 = v437;
                      --v438;
                    }
                    while (v438 > 1);
                  }
                  v433 = (int *)((char *)v433 + 1);
                  ++v435;
                  v436 += v434;
                }
                while (v433 != v432);
              }
              goto LABEL_1733;
            }
            goto LABEL_911;
          }
          if (!v1257)
          {
            v311 = (float *)(*a2)[19];
            *v311 = 0.0;
            v312 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v312 >= 1)
            {
              v313 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v314 = v312 + 1;
              v315 = 0.0;
              do
              {
                v316 = *v313++;
                v315 = v315 + (float)v316;
                *v311 = v315;
                --v314;
              }
              while (v314 > 1);
            }
            goto LABEL_1733;
          }
          if ((v1257 & 0xFFFFFFFD) == 1)
          {
            v431 = v1259;
LABEL_911:
            v1263 = 0;
            v1263 = *((_DWORD *)v431 - 1);
            v1259 = v431 - 4;
            v1261 -= 8;
            v657 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1252 = (*a2)[19];
            __len = v657;
            v99 = v1266;
            v100 = v1268;
            v658 = (*a2)[6];
            if (v1259 == v1258)
            {
              if (v658)
              {
                v850 = 0;
                v851 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                v852 = (float *)v1252;
                v1243 = __len;
                v853 = v1263;
                v854 = v1263 + 1;
                do
                {
                  v855 = 0;
                  if ((v851 & 0x80000000) == 0)
                  {
                    v856 = v851;
                    v857 = (int)v850;
                    do
                    {
                      v858 = ldiv(v857, v99[v856]);
                      v857 = v858.quot;
                      v855 += (_QWORD)v100[v856--] * v858.rem;
                    }
                    while (v856 != -1);
                  }
                  *v852 = 0.0;
                  if (v853 >= 1)
                  {
                    v859 = (unsigned __int8 *)(v1243 + (int)v855);
                    v860 = 0.0;
                    v861 = v854;
                    do
                    {
                      v862 = *v859++;
                      v860 = v860 + (float)v862;
                      *v852 = v860;
                      --v861;
                    }
                    while (v861 > 1);
                  }
                  v850 = (int *)((char *)v850 + 1);
                  v1252 = (int *)++v852;
                }
                while (v850 != v658);
              }
              goto LABEL_1729;
            }
            if (!v658)
              goto LABEL_1729;
            v659 = 0;
            v660 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1251 = 0;
              v661 = 0;
              if ((v660 & 0x80000000) == 0)
              {
                v662 = v660;
                v663 = v659;
                do
                {
                  v664 = ldiv(v663, v99[v662]);
                  v663 = v664.quot;
                  v661 += (_QWORD)v100[v662--] * v664.rem;
                }
                while (v662 != -1);
              }
              v1251 = v661;
              *v1252 = 0;
              v1265 = 0;
              v665 = operator new(0x30uLL);
              *v665 = &off_2513488F8;
              v665[1] = &v1249;
              v665[2] = &__len;
              v665[3] = &v1251;
              v665[4] = &v1252;
              v665[5] = &v1263;
              v1265 = v665;
              v1273 = 0;
              v666 = (void **)operator new(0x28uLL);
              *v666 = &off_251346A78;
              v666[1] = &v1258;
              v666[2] = &v1260;
              v666[3] = v1272;
              v666[4] = v1264;
              v1268 = v666;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v667 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v667 = (void **)&v1266;
                v668 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_922;
                v668 = 5;
              }
              (*((void (**)(void))*v667 + v668))();
LABEL_922:
              LODWORD(v1266) = 0;
              LODWORD(__b) = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
              v669 = v1273;
              if (v1273 == v1272)
              {
                v669 = v1272;
                v670 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_928;
                v670 = 5;
              }
              (*(void (**)(void))(*v669 + 8 * v670))();
LABEL_928:
              v671 = v1265;
              if (v1265 == v1264)
              {
                v671 = v1264;
                v672 = 4;
                goto LABEL_932;
              }
              if (v1265)
              {
                v672 = 5;
LABEL_932:
                (*(void (**)(void))(*v671 + 8 * v672))();
              }
              ++v659;
              ++v1252;
              if ((unint64_t)(*a2)[6] <= v659)
                goto LABEL_1729;
            }
          }
          if (v1257 == 2)
          {
            v777 = v1259;
            if (v1259 - (_BYTE *)v1258 == 4)
            {
              v1116 = *((int *)v1259 - 1);
              v1117 = *((_QWORD *)v1261 - 1);
              v1259 -= 4;
              v1261 -= 8;
              v1118 = (*a2)[6];
              if (v1118)
              {
                LODWORD(v1119) = 0;
                v1120 = (*a2)[19];
                v1121 = *(_QWORD *)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1117)
                    bzero(v1120, 4 * v1117);
                  if ((int)v1116 >= 1)
                  {
                    v1122 = 0;
                    v1123 = v1121;
                    do
                    {
                      if (v1117)
                      {
                        for (i7 = 0; i7 != v1117; ++i7)
                        {
                          LOBYTE(v310) = *(_BYTE *)(v1123 + i7);
                          v310 = (float)LODWORD(v310);
                          *(float *)&v1120[i7] = *(float *)&v1120[i7] + v310;
                        }
                        v1123 += i7;
                      }
                      ++v1122;
                    }
                    while (v1122 != (_DWORD)v1116);
                  }
                  v1121 += v1117 * v1116;
                  v1120 += v1117;
                  v1119 = (int)v1119 + (int)v1117;
                }
                while (v1119 < (unint64_t)v1118);
              }
              goto LABEL_1733;
            }
LABEL_1588:
            v1251 = 0;
            v1251 = *((_DWORD *)v777 - 1);
            __len = 0;
            v1125 = *((_QWORD *)v1261 - 1);
            v1259 = v777 - 4;
            v1261 -= 8;
            v1252 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1125;
            __b = (*a2)[19];
            v99 = v1266;
            v100 = v1268;
            v1127 = (unint64_t)(*a2)[6];
            if (v1259 == v1258)
            {
              if (v1127)
              {
                v1222 = 0;
                v1223 = (char *)__b;
                v1224 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
                v1225 = __len;
                v1235 = v1252;
                v1248 = v1224;
                v1226 = v1251;
                v1227 = 4 * __len;
                do
                {
                  v1228 = 0;
                  if ((v1224 & 0x80000000) == 0)
                  {
                    v1229 = v1222;
                    do
                    {
                      v1230 = ldiv(v1229, v99[v1224]);
                      v1229 = v1230.quot;
                      v1228 += (_QWORD)v100[v1224--] * v1230.rem;
                    }
                    while (v1224 != -1);
                  }
                  if (v1225)
                    bzero(v1223, v1227);
                  v1224 = v1248;
                  if (v1226 >= 1)
                  {
                    v1231 = 0;
                    v1232 = (char *)v1235 + (int)v1228;
                    do
                    {
                      if (v1225)
                      {
                        for (i8 = 0; i8 != v1225; ++i8)
                        {
                          LOBYTE(v1126) = v1232[i8];
                          v1126 = (float)LODWORD(v1126);
                          *(float *)&v1223[4 * i8] = *(float *)&v1223[4 * i8] + v1126;
                        }
                        v1232 += i8;
                      }
                      ++v1231;
                    }
                    while (v1231 != v1226);
                  }
                  v1223 += v1227;
                  __b = v1223;
                  v1222 += v1225;
                }
                while (v1127 > v1222);
              }
              goto LABEL_1729;
            }
            if (!v1127)
              goto LABEL_1729;
            v1128 = 0;
            v1129 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            while (1)
            {
              v1249 = 0;
              v1130 = 0;
              if ((v1129 & 0x80000000) == 0)
              {
                v1131 = v1129;
                v1132 = v1128;
                do
                {
                  v1133 = ldiv(v1132, v99[v1131]);
                  v1132 = v1133.quot;
                  v1130 += (_QWORD)v100[v1131--] * v1133.rem;
                }
                while (v1131 != -1);
              }
              v1249 = v1130;
              if (__len)
                bzero(__b, 4 * __len);
              v1265 = 0;
              v1134 = operator new(0x38uLL);
              *v1134 = &off_251348978;
              v1134[1] = &v1262;
              v1134[2] = &v1252;
              v1134[3] = &v1249;
              v1134[4] = &__b;
              v1134[5] = &v1251;
              v1134[6] = &__len;
              v1265 = v1134;
              v1273 = 0;
              v1135 = (void **)operator new(0x28uLL);
              *v1135 = &off_251346A78;
              v1135[1] = &v1258;
              v1135[2] = &v1260;
              v1135[3] = v1272;
              v1135[4] = v1264;
              v1268 = v1135;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
              v1136 = v1268;
              if (v1268 == (void **)&v1266)
              {
                v1136 = (void **)&v1266;
                v1137 = 4;
              }
              else
              {
                if (!v1268)
                  goto LABEL_1601;
                v1137 = 5;
              }
              (*((void (**)(void))*v1136 + v1137))();
LABEL_1601:
              LODWORD(v1266) = 0;
              v1263 = 0;
              if (!v1273)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
              v1138 = v1273;
              if (v1273 == v1272)
              {
                v1138 = v1272;
                v1139 = 4;
              }
              else
              {
                if (!v1273)
                  goto LABEL_1607;
                v1139 = 5;
              }
              (*(void (**)(void))(*v1138 + 8 * v1139))();
LABEL_1607:
              v1140 = v1265;
              if (v1265 == v1264)
              {
                v1140 = v1264;
                v1141 = 4;
                goto LABEL_1611;
              }
              if (v1265)
              {
                v1141 = 5;
LABEL_1611:
                (*(void (**)(void))(*v1140 + 8 * v1141))();
              }
              __b = (char *)__b + 4 * __len;
              v1128 += __len;
              if ((unint64_t)(*a2)[6] <= v1128)
                goto LABEL_1729;
            }
          }
          if (v1257 != 5)
          {
            if (v1257 != 4)
              goto LABEL_1733;
            v777 = v1259;
            goto LABEL_1588;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v1076 = (*a2)[19];
          v99 = v1266;
          v100 = v1268;
          if (!(*a2)[6])
            goto LABEL_1729;
          v1077 = 0;
          v1078 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
          break;
        default:
          return;
      }
      while (1)
      {
        LODWORD(__b) = 0;
        v1079 = 0;
        if ((v1078 & 0x80000000) == 0)
        {
          v1080 = v1078;
          v1081 = v1077;
          do
          {
            v1082 = ldiv(v1081, v99[v1080]);
            v1081 = v1082.quot;
            v1079 += (_QWORD)v100[v1080--] * v1082.rem;
          }
          while (v1080 != -1);
        }
        LODWORD(__b) = v1079;
        v1263 = 0;
        v1265 = 0;
        v1083 = operator new(0x28uLL);
        *v1083 = &off_2513489F8;
        v1083[1] = &v1251;
        v1083[2] = &v1263;
        v1083[3] = &__len;
        v1083[4] = &__b;
        v1265 = v1083;
        v1273 = 0;
        v1084 = (void **)operator new(0x28uLL);
        *v1084 = &off_251346A78;
        v1084[1] = &v1258;
        v1084[2] = &v1260;
        v1084[3] = v1272;
        v1084[4] = v1264;
        v1268 = v1084;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
        v1085 = v1268;
        if (v1268 == (void **)&v1266)
        {
          v1085 = (void **)&v1266;
          v1086 = 4;
        }
        else
        {
          if (!v1268)
            goto LABEL_1521;
          v1086 = 5;
        }
        (*((void (**)(void))*v1085 + v1086))();
LABEL_1521:
        LODWORD(v1266) = 0;
        LODWORD(v1252) = 0;
        if (!v1273)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
        v1087 = v1273;
        if (v1273 == v1272)
        {
          v1087 = v1272;
          v1088 = 4;
        }
        else
        {
          if (!v1273)
            goto LABEL_1527;
          v1088 = 5;
        }
        (*(void (**)(void))(*v1087 + 8 * v1088))();
LABEL_1527:
        v1089 = v1265;
        if (v1265 == v1264)
        {
          v1089 = v1264;
          v1090 = 4;
          goto LABEL_1531;
        }
        if (v1265)
        {
          v1090 = 5;
LABEL_1531:
          (*(void (**)(void))(*v1089 + 8 * v1090))();
        }
        *v1076++ = v1263;
        if ((unint64_t)(*a2)[6] <= ++v1077)
          goto LABEL_1729;
      }
    case 3:
      v18 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1269 = &unk_2513463C8;
      v1270 = mlx::core::allocator::free;
      v1271 = &v1269;
      mlx::core::array::set_data(a2, (uint64_t)v18, (uint64_t)&v1269);
      v19 = v1271;
      if (v1271 == &v1269)
      {
        v20 = 4;
        v19 = &v1269;
      }
      else
      {
        if (!v1271)
          goto LABEL_35;
        v20 = 5;
      }
      (*((void (**)(void))*v19 + v20))();
LABEL_35:
      v1255 = 0;
      v1256 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1255 = __p;
        operator delete(__p);
      }
      if (v1257 == 1)
      {
        v69 = v1259;
        if (v1259 - (_BYTE *)v1258 == 4)
        {
          if ((*a2)[6])
          {
            v70 = 0;
            v71 = *(int *)v1258;
            v72 = (*a2)[19];
            v73 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *(_BYTE *)v72 = 1;
              if ((int)v71 >= 1)
              {
                v74 = 1;
                v75 = v71 + 1;
                v76 = v73;
                do
                {
                  v77 = *v76++;
                  v74 *= v77;
                  *(_BYTE *)v72 = v74;
                  --v75;
                }
                while (v75 > 1);
              }
              ++v70;
              v72 = (int *)((char *)v72 + 1);
              v73 += v71;
            }
            while ((unint64_t)(*a2)[6] > v70);
          }
          goto LABEL_1733;
        }
        goto LABEL_147;
      }
      if (!v1257)
      {
        v34 = (*a2)[19];
        *(_BYTE *)v34 = 1;
        v35 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v35 >= 1)
        {
          v36 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v37 = v35 + 1;
          v38 = 1;
          do
          {
            v39 = *v36++;
            v38 *= v39;
            *(_BYTE *)v34 = v38;
            --v37;
          }
          while (v37 > 1);
        }
        goto LABEL_1733;
      }
      if ((v1257 & 0xFFFFFFFD) == 1)
      {
        v69 = v1259;
LABEL_147:
        v1263 = 0;
        v1263 = *((_DWORD *)v69 - 1);
        v1259 = v69 - 4;
        v1261 -= 8;
        v126 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1252 = (*a2)[19];
        __len = v126;
        v99 = v1266;
        v100 = v1268;
        v127 = (*a2)[6];
        if (v1259 == v1258)
        {
          if (v127)
          {
            v225 = 0;
            v226 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            do
            {
              v227 = 0;
              if ((v226 & 0x80000000) == 0)
              {
                v228 = v226;
                v229 = v225;
                do
                {
                  v230 = ldiv(v229, v99[v228]);
                  v229 = v230.quot;
                  v227 += (_QWORD)v100[v228--] * v230.rem;
                }
                while (v228 != -1);
              }
              *(_BYTE *)v1252 = 1;
              v231 = v1252;
              if (v1263 >= 1)
              {
                v232 = (unsigned __int8 *)(__len + (int)v227);
                v233 = *(unsigned __int8 *)v1252;
                v234 = v1263 + 1;
                do
                {
                  v235 = *v232++;
                  v233 *= v235;
                  *(_BYTE *)v231 = v233;
                  --v234;
                }
                while (v234 > 1);
                v231 = v1252;
              }
              ++v225;
              v1252 = (int *)((char *)v231 + 1);
            }
            while ((unint64_t)(*a2)[6] > v225);
          }
          goto LABEL_1729;
        }
        if (!v127)
          goto LABEL_1729;
        v128 = 0;
        v129 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
        while (1)
        {
          v1251 = 0;
          v130 = 0;
          if ((v129 & 0x80000000) == 0)
          {
            v131 = v129;
            v132 = v128;
            do
            {
              v133 = ldiv(v132, v99[v131]);
              v132 = v133.quot;
              v130 += (_QWORD)v100[v131--] * v133.rem;
            }
            while (v131 != -1);
          }
          v1251 = v130;
          *(_BYTE *)v1252 = 1;
          v1265 = 0;
          v134 = operator new(0x30uLL);
          *v134 = &off_251348A78;
          v134[1] = &v1249;
          v134[2] = &__len;
          v134[3] = &v1251;
          v134[4] = &v1252;
          v134[5] = &v1263;
          v1265 = v134;
          v1273 = 0;
          v135 = (void **)operator new(0x28uLL);
          *v135 = &off_251346A78;
          v135[1] = &v1258;
          v135[2] = &v1260;
          v135[3] = v1272;
          v135[4] = v1264;
          v1268 = v135;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
          v136 = v1268;
          if (v1268 == (void **)&v1266)
          {
            v136 = (void **)&v1266;
            v137 = 4;
          }
          else
          {
            if (!v1268)
              goto LABEL_158;
            v137 = 5;
          }
          (*((void (**)(void))*v136 + v137))();
LABEL_158:
          LODWORD(v1266) = 0;
          LODWORD(__b) = 0;
          if (!v1273)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
          v138 = v1273;
          if (v1273 == v1272)
          {
            v138 = v1272;
            v139 = 4;
          }
          else
          {
            if (!v1273)
              goto LABEL_164;
            v139 = 5;
          }
          (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_164:
          v140 = v1265;
          if (v1265 == v1264)
          {
            v140 = v1264;
            v141 = 4;
            goto LABEL_168;
          }
          if (v1265)
          {
            v141 = 5;
LABEL_168:
            (*(void (**)(void))(*v140 + 8 * v141))();
          }
          ++v128;
          v1252 = (int *)((char *)v1252 + 1);
          if ((unint64_t)(*a2)[6] <= v128)
            goto LABEL_1729;
        }
      }
      if (v1257 == 2)
      {
        v191 = v1259;
        if (v1259 - (_BYTE *)v1258 == 4)
        {
          v550 = *((int *)v1259 - 1);
          v551 = *((_QWORD *)v1261 - 1);
          v1259 -= 4;
          v1261 -= 8;
          if ((*a2)[6])
          {
            LODWORD(v552) = 0;
            v553 = (*a2)[19];
            v554 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            do
            {
              if (v551)
                memset(v553, 1, v551);
              if ((int)v550 >= 1)
              {
                v555 = 0;
                v556 = v554;
                do
                {
                  if (v551)
                  {
                    for (i9 = 0; i9 != v551; ++i9)
                      *((_BYTE *)v553 + i9) *= *(_BYTE *)(v556 + i9);
                    v556 += i9;
                  }
                  ++v555;
                }
                while (v555 != (_DWORD)v550);
              }
              v554 += v551 * v550;
              v553 = (int *)((char *)v553 + v551);
              v552 = (int)v552 + (int)v551;
            }
            while (v552 < (unint64_t)(*a2)[6]);
          }
          goto LABEL_1733;
        }
LABEL_748:
        v1251 = 0;
        v1251 = *((_DWORD *)v191 - 1);
        __len = 0;
        v558 = *((_QWORD *)v1261 - 1);
        v1259 = v191 - 4;
        v1261 -= 8;
        v1252 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v558;
        __b = (*a2)[19];
        v99 = v1266;
        v100 = v1268;
        v559 = (*a2)[6];
        if (v1259 == v1258)
        {
          if (v559)
          {
            v714 = 0;
            v715 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            do
            {
              v716 = 0;
              if ((v715 & 0x80000000) != 0)
              {
                v719 = a2;
              }
              else
              {
                v717 = v715;
                v718 = v714;
                v719 = a2;
                do
                {
                  v720 = ldiv(v718, v99[v717]);
                  v718 = v720.quot;
                  v716 += (_QWORD)v100[v717--] * v720.rem;
                }
                while (v717 != -1);
              }
              v721 = __b;
              if (__len)
              {
                memset(__b, 1, __len);
                v722 = __len;
                v721 = __b;
              }
              else
              {
                v722 = 0;
              }
              v723 = v1251;
              if (v1251 >= 1)
              {
                v724 = 0;
                v725 = (char *)v1252 + (int)v716;
                do
                {
                  v726 = v722;
                  for (i10 = v721; v726; --v726)
                  {
                    v728 = *v725++;
                    *i10++ *= v728;
                  }
                  ++v724;
                }
                while (v724 != v723);
                v722 = __len;
                v721 = __b;
              }
              __b = &v721[v722];
              v714 += v722;
            }
            while ((unint64_t)(*v719)[6] > v714);
          }
          goto LABEL_1729;
        }
        if (!v559)
          goto LABEL_1729;
        v560 = 0;
        v561 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
        while (1)
        {
          v1249 = 0;
          v562 = 0;
          if ((v561 & 0x80000000) == 0)
          {
            v563 = v561;
            v564 = v560;
            do
            {
              v565 = ldiv(v564, v99[v563]);
              v564 = v565.quot;
              v562 += (_QWORD)v100[v563--] * v565.rem;
            }
            while (v563 != -1);
          }
          v1249 = v562;
          if (__len)
            memset(__b, 1, __len);
          v1265 = 0;
          v566 = operator new(0x38uLL);
          *v566 = &off_251348AF8;
          v566[1] = &v1262;
          v566[2] = &v1252;
          v566[3] = &v1249;
          v566[4] = &__b;
          v566[5] = &v1251;
          v566[6] = &__len;
          v1265 = v566;
          v1273 = 0;
          v567 = (void **)operator new(0x28uLL);
          *v567 = &off_251346A78;
          v567[1] = &v1258;
          v567[2] = &v1260;
          v567[3] = v1272;
          v567[4] = v1264;
          v1268 = v567;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
          v568 = v1268;
          if (v1268 == (void **)&v1266)
          {
            v568 = (void **)&v1266;
            v569 = 4;
          }
          else
          {
            if (!v1268)
              goto LABEL_761;
            v569 = 5;
          }
          (*((void (**)(void))*v568 + v569))();
LABEL_761:
          LODWORD(v1266) = 0;
          v1263 = 0;
          if (!v1273)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
          v570 = v1273;
          if (v1273 == v1272)
          {
            v570 = v1272;
            v571 = 4;
          }
          else
          {
            if (!v1273)
              goto LABEL_767;
            v571 = 5;
          }
          (*(void (**)(void))(*v570 + 8 * v571))();
LABEL_767:
          v572 = v1265;
          if (v1265 == v1264)
          {
            v572 = v1264;
            v573 = 4;
            goto LABEL_771;
          }
          if (v1265)
          {
            v573 = 5;
LABEL_771:
            (*(void (**)(void))(*v572 + 8 * v573))();
          }
          __b = (char *)__b + __len;
          v560 += __len;
          if ((unint64_t)(*a2)[6] <= v560)
            goto LABEL_1729;
        }
      }
      if (v1257 != 5)
      {
        if (v1257 != 4)
          goto LABEL_1733;
        v191 = v1259;
        goto LABEL_748;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v473 = (*a2)[19];
      v99 = v1266;
      v100 = v1268;
      if (!(*a2)[6])
        goto LABEL_1729;
      v474 = 0;
      v475 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
      while (1)
      {
        LODWORD(__b) = 0;
        v476 = 0;
        if ((v475 & 0x80000000) == 0)
        {
          v477 = v475;
          v478 = v474;
          do
          {
            v479 = ldiv(v478, v99[v477]);
            v478 = v479.quot;
            v476 += (_QWORD)v100[v477--] * v479.rem;
          }
          while (v477 != -1);
        }
        LODWORD(__b) = v476;
        LOBYTE(v1251) = 1;
        v1265 = 0;
        v480 = operator new(0x28uLL);
        *v480 = &off_251348B78;
        v480[1] = &v1263;
        v480[2] = &v1251;
        v480[3] = &__len;
        v480[4] = &__b;
        v1265 = v480;
        v1273 = 0;
        v481 = (void **)operator new(0x28uLL);
        *v481 = &off_251346A78;
        v481[1] = &v1258;
        v481[2] = &v1260;
        v481[3] = v1272;
        v481[4] = v1264;
        v1268 = v481;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
        v482 = v1268;
        if (v1268 == (void **)&v1266)
        {
          v482 = (void **)&v1266;
          v483 = 4;
        }
        else
        {
          if (!v1268)
            goto LABEL_623;
          v483 = 5;
        }
        (*((void (**)(void))*v482 + v483))();
LABEL_623:
        LODWORD(v1266) = 0;
        LODWORD(v1252) = 0;
        if (!v1273)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
        v484 = v1273;
        if (v1273 == v1272)
        {
          v484 = v1272;
          v485 = 4;
        }
        else
        {
          if (!v1273)
            goto LABEL_629;
          v485 = 5;
        }
        (*(void (**)(void))(*v484 + 8 * v485))();
LABEL_629:
        v486 = v1265;
        if (v1265 == v1264)
        {
          v486 = v1264;
          v487 = 4;
          goto LABEL_633;
        }
        if (v1265)
        {
          v487 = 5;
LABEL_633:
          (*(void (**)(void))(*v486 + 8 * v487))();
        }
        *(_BYTE *)v473 = v1251;
        v473 = (int *)((char *)v473 + 1);
        if ((unint64_t)(*a2)[6] <= ++v474)
          goto LABEL_1729;
      }
    case 4:
      v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1269 = &unk_2513463C8;
      v1270 = mlx::core::allocator::free;
      v1271 = &v1269;
      mlx::core::array::set_data(a2, (uint64_t)v10, (uint64_t)&v1269);
      v11 = v1271;
      if (v1271 == &v1269)
      {
        v12 = 4;
        v11 = &v1269;
      }
      else
      {
        if (!v1271)
          goto LABEL_23;
        v12 = 5;
      }
      (*((void (**)(void))*v11 + v12))();
LABEL_23:
      v1255 = 0;
      v1256 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1255 = __p;
        operator delete(__p);
      }
      if (v1257 == 1)
      {
        v59 = v1259;
        if (v1259 - (_BYTE *)v1258 == 4)
        {
          if ((*a2)[6])
          {
            v60 = 0;
            v61 = *(int *)v1258;
            v62 = (unsigned __int8 *)(*a2)[19];
            v63 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *v62 = -1;
              if ((int)v61 >= 1)
              {
                v64 = -1;
                v65 = v61 + 1;
                v66 = v63;
                do
                {
                  v68 = *v66++;
                  v67 = v68;
                  if (v64 >= v68)
                    v64 = v67;
                  *v62 = v64;
                  --v65;
                }
                while (v65 > 1);
              }
              ++v60;
              ++v62;
              v63 += v61;
            }
            while ((unint64_t)(*a2)[6] > v60);
          }
          goto LABEL_1733;
        }
        goto LABEL_111;
      }
      if (!v1257)
      {
        v27 = (unsigned __int8 *)(*a2)[19];
        *v27 = -1;
        v28 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v28 >= 1)
        {
          v29 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v30 = v28 + 1;
          v31 = -1;
          do
          {
            v33 = *v29++;
            v32 = v33;
            if (v31 >= v33)
              v31 = v32;
            *v27 = v31;
            --v30;
          }
          while (v30 > 1);
        }
        goto LABEL_1733;
      }
      if ((v1257 & 0xFFFFFFFD) == 1)
      {
        v59 = v1259;
LABEL_111:
        v1263 = 0;
        v1263 = *((_DWORD *)v59 - 1);
        v1259 = v59 - 4;
        v1261 -= 8;
        v98 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1252 = (*a2)[19];
        __len = v98;
        v99 = v1266;
        v100 = v1268;
        v101 = (*a2)[6];
        if (v1259 == v1258)
        {
          if (v101)
          {
            v213 = 0;
            v214 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            do
            {
              v215 = 0;
              if ((v214 & 0x80000000) == 0)
              {
                v216 = v214;
                v217 = v213;
                do
                {
                  v218 = ldiv(v217, v99[v216]);
                  v217 = v218.quot;
                  v215 += (_QWORD)v100[v216--] * v218.rem;
                }
                while (v216 != -1);
              }
              *(_BYTE *)v1252 = -1;
              v219 = v1252;
              if (v1263 >= 1)
              {
                v220 = (unsigned __int8 *)(__len + (int)v215);
                v221 = *(_BYTE *)v1252;
                v222 = v1263 + 1;
                do
                {
                  v224 = *v220++;
                  v223 = v224;
                  if (v221 >= v224)
                    v221 = v223;
                  *(_BYTE *)v219 = v221;
                  --v222;
                }
                while (v222 > 1);
                v219 = v1252;
              }
              ++v213;
              v1252 = (int *)((char *)v219 + 1);
            }
            while ((unint64_t)(*a2)[6] > v213);
          }
          goto LABEL_1729;
        }
        if (!v101)
          goto LABEL_1729;
        v102 = 0;
        v103 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
        while (1)
        {
          v1251 = 0;
          v104 = 0;
          if ((v103 & 0x80000000) == 0)
          {
            v105 = v103;
            v106 = v102;
            do
            {
              v107 = ldiv(v106, v99[v105]);
              v106 = v107.quot;
              v104 += (_QWORD)v100[v105--] * v107.rem;
            }
            while (v105 != -1);
          }
          v1251 = v104;
          *(_BYTE *)v1252 = -1;
          v1265 = 0;
          v108 = operator new(0x30uLL);
          *v108 = &off_251348D78;
          v108[1] = &v1249;
          v108[2] = &__len;
          v108[3] = &v1251;
          v108[4] = &v1252;
          v108[5] = &v1263;
          v1265 = v108;
          v1273 = 0;
          v109 = (void **)operator new(0x28uLL);
          *v109 = &off_251346A78;
          v109[1] = &v1258;
          v109[2] = &v1260;
          v109[3] = v1272;
          v109[4] = v1264;
          v1268 = v109;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
          v110 = v1268;
          if (v1268 == (void **)&v1266)
          {
            v110 = (void **)&v1266;
            v111 = 4;
          }
          else
          {
            if (!v1268)
              goto LABEL_122;
            v111 = 5;
          }
          (*((void (**)(void))*v110 + v111))();
LABEL_122:
          LODWORD(v1266) = 0;
          LODWORD(__b) = 0;
          if (!v1273)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
          v112 = v1273;
          if (v1273 == v1272)
          {
            v112 = v1272;
            v113 = 4;
          }
          else
          {
            if (!v1273)
              goto LABEL_128;
            v113 = 5;
          }
          (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_128:
          v114 = v1265;
          if (v1265 == v1264)
          {
            v114 = v1264;
            v115 = 4;
            goto LABEL_132;
          }
          if (v1265)
          {
            v115 = 5;
LABEL_132:
            (*(void (**)(void))(*v114 + 8 * v115))();
          }
          ++v102;
          v1252 = (int *)((char *)v1252 + 1);
          if ((unint64_t)(*a2)[6] <= v102)
            goto LABEL_1729;
        }
      }
      if (v1257 == 2)
      {
        v190 = v1259;
        if (v1259 - (_BYTE *)v1258 == 4)
        {
          v406 = *((int *)v1259 - 1);
          v407 = *((_QWORD *)v1261 - 1);
          v1259 -= 4;
          v1261 -= 8;
          if ((*a2)[6])
          {
            LODWORD(v408) = 0;
            v409 = (*a2)[19];
            v410 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            do
            {
              if (v407)
                memset(v409, 255, v407);
              if ((int)v406 >= 1)
              {
                v411 = 0;
                v412 = v410;
                do
                {
                  if (v407)
                  {
                    for (i11 = 0; i11 != v407; ++i11)
                    {
                      v414 = *(unsigned __int8 *)(v412 + i11);
                      if (*((unsigned __int8 *)v409 + i11) < v414)
                        LOBYTE(v414) = *((_BYTE *)v409 + i11);
                      *((_BYTE *)v409 + i11) = v414;
                    }
                    v412 += i11;
                  }
                  ++v411;
                }
                while (v411 != (_DWORD)v406);
              }
              v410 += v407 * v406;
              v409 = (int *)((char *)v409 + v407);
              v408 = (int)v408 + (int)v407;
            }
            while (v408 < (unint64_t)(*a2)[6]);
          }
          goto LABEL_1733;
        }
LABEL_527:
        v1251 = 0;
        v1251 = *((_DWORD *)v190 - 1);
        __len = 0;
        v415 = *((_QWORD *)v1261 - 1);
        v1259 = v190 - 4;
        v1261 -= 8;
        v1252 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v415;
        __b = (*a2)[19];
        v99 = v1266;
        v100 = v1268;
        v416 = (*a2)[6];
        if (v1259 == v1258)
        {
          if (v416)
          {
            v698 = 0;
            v699 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            do
            {
              v700 = 0;
              if ((v699 & 0x80000000) != 0)
              {
                v703 = a2;
              }
              else
              {
                v701 = v699;
                v702 = v698;
                v703 = a2;
                do
                {
                  v704 = ldiv(v702, v99[v701]);
                  v702 = v704.quot;
                  v700 += (_QWORD)v100[v701--] * v704.rem;
                }
                while (v701 != -1);
              }
              v705 = (unsigned __int8 *)__b;
              if (__len)
              {
                memset(__b, 255, __len);
                v706 = __len;
                v705 = (unsigned __int8 *)__b;
              }
              else
              {
                v706 = 0;
              }
              v707 = v1251;
              if (v1251 >= 1)
              {
                v708 = 0;
                v709 = (unsigned __int8 *)v1252 + (int)v700;
                do
                {
                  v710 = v706;
                  for (i12 = v705; v710; --v710)
                  {
                    v713 = *v709++;
                    v712 = v713;
                    if (*i12 < v713)
                      v712 = *i12;
                    *i12++ = v712;
                  }
                  ++v708;
                }
                while (v708 != v707);
                v706 = __len;
                v705 = (unsigned __int8 *)__b;
              }
              __b = &v705[v706];
              v698 += v706;
            }
            while ((unint64_t)(*v703)[6] > v698);
          }
          goto LABEL_1729;
        }
        if (!v416)
          goto LABEL_1729;
        v417 = 0;
        v418 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
        while (1)
        {
          v1249 = 0;
          v419 = 0;
          if ((v418 & 0x80000000) == 0)
          {
            v420 = v418;
            v421 = v417;
            do
            {
              v422 = ldiv(v421, v99[v420]);
              v421 = v422.quot;
              v419 += (_QWORD)v100[v420--] * v422.rem;
            }
            while (v420 != -1);
          }
          v1249 = v419;
          if (__len)
            memset(__b, 255, __len);
          v1265 = 0;
          v423 = operator new(0x38uLL);
          *v423 = &off_251348DF8;
          v423[1] = &v1262;
          v423[2] = &v1252;
          v423[3] = &v1249;
          v423[4] = &__b;
          v423[5] = &v1251;
          v423[6] = &__len;
          v1265 = v423;
          v1273 = 0;
          v424 = (void **)operator new(0x28uLL);
          *v424 = &off_251346A78;
          v424[1] = &v1258;
          v424[2] = &v1260;
          v424[3] = v1272;
          v424[4] = v1264;
          v1268 = v424;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
          v425 = v1268;
          if (v1268 == (void **)&v1266)
          {
            v425 = (void **)&v1266;
            v426 = 4;
          }
          else
          {
            if (!v1268)
              goto LABEL_540;
            v426 = 5;
          }
          (*((void (**)(void))*v425 + v426))();
LABEL_540:
          LODWORD(v1266) = 0;
          v1263 = 0;
          if (!v1273)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
          v427 = v1273;
          if (v1273 == v1272)
          {
            v427 = v1272;
            v428 = 4;
          }
          else
          {
            if (!v1273)
              goto LABEL_546;
            v428 = 5;
          }
          (*(void (**)(void))(*v427 + 8 * v428))();
LABEL_546:
          v429 = v1265;
          if (v1265 == v1264)
          {
            v429 = v1264;
            v430 = 4;
            goto LABEL_550;
          }
          if (v1265)
          {
            v430 = 5;
LABEL_550:
            (*(void (**)(void))(*v429 + 8 * v430))();
          }
          __b = (char *)__b + __len;
          v417 += __len;
          if ((unint64_t)(*a2)[6] <= v417)
            goto LABEL_1729;
        }
      }
      if (v1257 != 5)
      {
        if (v1257 != 4)
          goto LABEL_1733;
        v190 = v1259;
        goto LABEL_527;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v381 = (*a2)[19];
      v99 = v1266;
      v100 = v1268;
      if (!(*a2)[6])
        goto LABEL_1729;
      v382 = 0;
      v383 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
      while (1)
      {
        LODWORD(__b) = 0;
        v384 = 0;
        if ((v383 & 0x80000000) == 0)
        {
          v385 = v383;
          v386 = v382;
          do
          {
            v387 = ldiv(v386, v99[v385]);
            v386 = v387.quot;
            v384 += (_QWORD)v100[v385--] * v387.rem;
          }
          while (v385 != -1);
        }
        LODWORD(__b) = v384;
        LOBYTE(v1251) = -1;
        v1265 = 0;
        v388 = operator new(0x28uLL);
        *v388 = &off_251348E78;
        v388[1] = &v1263;
        v388[2] = &v1251;
        v388[3] = &__len;
        v388[4] = &__b;
        v1265 = v388;
        v1273 = 0;
        v389 = (void **)operator new(0x28uLL);
        *v389 = &off_251346A78;
        v389[1] = &v1258;
        v389[2] = &v1260;
        v389[3] = v1272;
        v389[4] = v1264;
        v1268 = v389;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
        v390 = v1268;
        if (v1268 == (void **)&v1266)
        {
          v390 = (void **)&v1266;
          v391 = 4;
        }
        else
        {
          if (!v1268)
            goto LABEL_490;
          v391 = 5;
        }
        (*((void (**)(void))*v390 + v391))();
LABEL_490:
        LODWORD(v1266) = 0;
        LODWORD(v1252) = 0;
        if (!v1273)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
        v392 = v1273;
        if (v1273 == v1272)
        {
          v392 = v1272;
          v393 = 4;
        }
        else
        {
          if (!v1273)
            goto LABEL_496;
          v393 = 5;
        }
        (*(void (**)(void))(*v392 + 8 * v393))();
LABEL_496:
        v394 = v1265;
        if (v1265 == v1264)
        {
          v394 = v1264;
          v395 = 4;
          goto LABEL_500;
        }
        if (v1265)
        {
          v395 = 5;
LABEL_500:
          (*(void (**)(void))(*v394 + 8 * v395))();
        }
        *(_BYTE *)v381 = v1251;
        v381 = (int *)((char *)v381 + 1);
        if ((unint64_t)(*a2)[6] <= ++v382)
          goto LABEL_1729;
      }
    case 5:
      v24 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1269 = &unk_2513463C8;
      v1270 = mlx::core::allocator::free;
      v1271 = &v1269;
      mlx::core::array::set_data(a2, (uint64_t)v24, (uint64_t)&v1269);
      v25 = v1271;
      if (v1271 == &v1269)
      {
        v26 = 4;
        v25 = &v1269;
      }
      else
      {
        if (!v1271)
          goto LABEL_65;
        v26 = 5;
      }
      (*((void (**)(void))*v25 + v26))();
LABEL_65:
      v1255 = 0;
      v1256 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1255 = __p;
        operator delete(__p);
      }
      if (v1257 == 1)
      {
        v116 = v1259;
        if (v1259 - (_BYTE *)v1258 == 4)
        {
          if ((*a2)[6])
          {
            v117 = 0;
            v118 = *(int *)v1258;
            v119 = (*a2)[19];
            v120 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
            do
            {
              *(_BYTE *)v119 = 0;
              if ((int)v118 >= 1)
              {
                v121 = 0;
                v122 = v118 + 1;
                v123 = v120;
                do
                {
                  v125 = *v123++;
                  v124 = v125;
                  if (v121 <= v125)
                    v121 = v124;
                  *(_BYTE *)v119 = v121;
                  --v122;
                }
                while (v122 > 1);
              }
              ++v117;
              v119 = (int *)((char *)v119 + 1);
              v120 += v118;
            }
            while ((unint64_t)(*a2)[6] > v117);
          }
          goto LABEL_1733;
        }
        goto LABEL_225;
      }
      if (!v1257)
      {
        v52 = (*a2)[19];
        *(_BYTE *)v52 = 0;
        v53 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v53 >= 1)
        {
          v54 = 0;
          v55 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
          v56 = v53 + 1;
          do
          {
            v58 = *v55++;
            v57 = v58;
            if (v54 <= v58)
              v54 = v57;
            *(_BYTE *)v52 = v54;
            --v56;
          }
          while (v56 > 1);
        }
        goto LABEL_1733;
      }
      if ((v1257 & 0xFFFFFFFD) == 1)
      {
        v116 = v1259;
LABEL_225:
        v1263 = 0;
        v1263 = *((_DWORD *)v116 - 1);
        v1259 = v116 - 4;
        v1261 -= 8;
        v174 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1252 = (*a2)[19];
        __len = v174;
        v99 = v1266;
        v100 = v1268;
        v175 = (*a2)[6];
        if (v1259 == v1258)
        {
          if (v175)
          {
            v262 = 0;
            v263 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            do
            {
              v264 = 0;
              if ((v263 & 0x80000000) == 0)
              {
                v265 = v263;
                v266 = v262;
                do
                {
                  v267 = ldiv(v266, v99[v265]);
                  v266 = v267.quot;
                  v264 += (_QWORD)v100[v265--] * v267.rem;
                }
                while (v265 != -1);
              }
              *(_BYTE *)v1252 = 0;
              v268 = v1252;
              if (v1263 >= 1)
              {
                v269 = (unsigned __int8 *)(__len + (int)v264);
                v270 = *(_BYTE *)v1252;
                v271 = v1263 + 1;
                do
                {
                  v273 = *v269++;
                  v272 = v273;
                  if (v270 <= v273)
                    v270 = v272;
                  *(_BYTE *)v268 = v270;
                  --v271;
                }
                while (v271 > 1);
                v268 = v1252;
              }
              ++v262;
              v1252 = (int *)((char *)v268 + 1);
            }
            while ((unint64_t)(*a2)[6] > v262);
          }
          goto LABEL_1729;
        }
        if (!v175)
          goto LABEL_1729;
        v176 = 0;
        v177 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
        while (1)
        {
          v1251 = 0;
          v178 = 0;
          if ((v177 & 0x80000000) == 0)
          {
            v179 = v177;
            v180 = v176;
            do
            {
              v181 = ldiv(v180, v99[v179]);
              v180 = v181.quot;
              v178 += (_QWORD)v100[v179--] * v181.rem;
            }
            while (v179 != -1);
          }
          v1251 = v178;
          *(_BYTE *)v1252 = 0;
          v1265 = 0;
          v182 = operator new(0x30uLL);
          *v182 = &off_251348BF8;
          v182[1] = &v1249;
          v182[2] = &__len;
          v182[3] = &v1251;
          v182[4] = &v1252;
          v182[5] = &v1263;
          v1265 = v182;
          v1273 = 0;
          v183 = (void **)operator new(0x28uLL);
          *v183 = &off_251346A78;
          v183[1] = &v1258;
          v183[2] = &v1260;
          v183[3] = v1272;
          v183[4] = v1264;
          v1268 = v183;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
          v184 = v1268;
          if (v1268 == (void **)&v1266)
          {
            v184 = (void **)&v1266;
            v185 = 4;
          }
          else
          {
            if (!v1268)
              goto LABEL_236;
            v185 = 5;
          }
          (*((void (**)(void))*v184 + v185))();
LABEL_236:
          LODWORD(v1266) = 0;
          LODWORD(__b) = 0;
          if (!v1273)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1273 + 48))(v1273, &v1266, &__b);
          v186 = v1273;
          if (v1273 == v1272)
          {
            v186 = v1272;
            v187 = 4;
          }
          else
          {
            if (!v1273)
              goto LABEL_242;
            v187 = 5;
          }
          (*(void (**)(void))(*v186 + 8 * v187))();
LABEL_242:
          v188 = v1265;
          if (v1265 == v1264)
          {
            v188 = v1264;
            v189 = 4;
            goto LABEL_246;
          }
          if (v1265)
          {
            v189 = 5;
LABEL_246:
            (*(void (**)(void))(*v188 + 8 * v189))();
          }
          ++v176;
          v1252 = (int *)((char *)v1252 + 1);
          if ((unint64_t)(*a2)[6] <= v176)
            goto LABEL_1729;
        }
      }
      if (v1257 == 2)
      {
        v194 = v1259;
        if (v1259 - (_BYTE *)v1258 == 4)
        {
          v673 = *((int *)v1259 - 1);
          v674 = *((_QWORD *)v1261 - 1);
          v1259 -= 4;
          v1261 -= 8;
          if ((*a2)[6])
          {
            LODWORD(v675) = 0;
            v676 = (*a2)[19];
            v677 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            do
            {
              if (v674)
                bzero(v676, v674);
              if ((int)v673 >= 1)
              {
                v678 = 0;
                v679 = v677;
                do
                {
                  if (v674)
                  {
                    for (i13 = 0; i13 != v674; ++i13)
                    {
                      v681 = *(unsigned __int8 *)(v679 + i13);
                      if (*((unsigned __int8 *)v676 + i13) > v681)
                        LOBYTE(v681) = *((_BYTE *)v676 + i13);
                      *((_BYTE *)v676 + i13) = v681;
                    }
                    v679 += i13;
                  }
                  ++v678;
                }
                while (v678 != (_DWORD)v673);
              }
              v677 += v674 * v673;
              v676 = (int *)((char *)v676 + v674);
              v675 = (int)v675 + (int)v674;
            }
            while (v675 < (unint64_t)(*a2)[6]);
          }
          goto LABEL_1733;
        }
LABEL_951:
        v1251 = 0;
        v1251 = *((_DWORD *)v194 - 1);
        __len = 0;
        v682 = *((_QWORD *)v1261 - 1);
        v1259 = v194 - 4;
        v1261 -= 8;
        v1252 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v682;
        __b = (*a2)[19];
        v99 = v1266;
        v100 = v1268;
        v683 = (*a2)[6];
        if (v1259 == v1258)
        {
          if (v683)
          {
            v755 = 0;
            v756 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
            do
            {
              v757 = 0;
              if ((v756 & 0x80000000) != 0)
              {
                v760 = a2;
              }
              else
              {
                v758 = v756;
                v759 = v755;
                v760 = a2;
                do
                {
                  v761 = ldiv(v759, v99[v758]);
                  v759 = v761.quot;
                  v757 += (_QWORD)v100[v758--] * v761.rem;
                }
                while (v758 != -1);
              }
              v762 = (unsigned __int8 *)__b;
              if (__len)
              {
                bzero(__b, __len);
                v763 = __len;
                v762 = (unsigned __int8 *)__b;
              }
              else
              {
                v763 = 0;
              }
              v764 = v1251;
              if (v1251 >= 1)
              {
                v765 = 0;
                v766 = (unsigned __int8 *)v1252 + (int)v757;
                do
                {
                  v767 = v763;
                  for (i14 = v762; v767; --v767)
                  {
                    v770 = *v766++;
                    v769 = v770;
                    if (*i14 > v770)
                      v769 = *i14;
                    *i14++ = v769;
                  }
                  ++v765;
                }
                while (v765 != v764);
                v763 = __len;
                v762 = (unsigned __int8 *)__b;
              }
              __b = &v762[v763];
              v755 += v763;
            }
            while ((unint64_t)(*v760)[6] > v755);
          }
          goto LABEL_1729;
        }
        if (!v683)
          goto LABEL_1729;
        v684 = 0;
        v685 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
        while (1)
        {
          v1249 = 0;
          v686 = 0;
          if ((v685 & 0x80000000) == 0)
          {
            v687 = v685;
            v688 = v684;
            do
            {
              v689 = ldiv(v688, v99[v687]);
              v688 = v689.quot;
              v686 += (_QWORD)v100[v687--] * v689.rem;
            }
            while (v687 != -1);
          }
          v1249 = v686;
          if (__len)
            bzero(__b, __len);
          v1265 = 0;
          v690 = operator new(0x38uLL);
          *v690 = &off_251348C78;
          v690[1] = &v1262;
          v690[2] = &v1252;
          v690[3] = &v1249;
          v690[4] = &__b;
          v690[5] = &v1251;
          v690[6] = &__len;
          v1265 = v690;
          v1273 = 0;
          v691 = (void **)operator new(0x28uLL);
          *v691 = &off_251346A78;
          v691[1] = &v1258;
          v691[2] = &v1260;
          v691[3] = v1272;
          v691[4] = v1264;
          v1268 = v691;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
          v692 = v1268;
          if (v1268 == (void **)&v1266)
          {
            v692 = (void **)&v1266;
            v693 = 4;
          }
          else
          {
            if (!v1268)
              goto LABEL_964;
            v693 = 5;
          }
          (*((void (**)(void))*v692 + v693))();
LABEL_964:
          LODWORD(v1266) = 0;
          v1263 = 0;
          if (!v1273)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1273 + 48))(v1273, &v1266, &v1263);
          v694 = v1273;
          if (v1273 == v1272)
          {
            v694 = v1272;
            v695 = 4;
          }
          else
          {
            if (!v1273)
              goto LABEL_970;
            v695 = 5;
          }
          (*(void (**)(void))(*v694 + 8 * v695))();
LABEL_970:
          v696 = v1265;
          if (v1265 == v1264)
          {
            v696 = v1264;
            v697 = 4;
            goto LABEL_974;
          }
          if (v1265)
          {
            v697 = 5;
LABEL_974:
            (*(void (**)(void))(*v696 + 8 * v697))();
          }
          __b = (char *)__b + __len;
          v684 += __len;
          if ((unint64_t)(*a2)[6] <= v684)
            goto LABEL_1729;
        }
      }
      if (v1257 != 5)
      {
        if (v1257 != 4)
          goto LABEL_1733;
        v194 = v1259;
        goto LABEL_951;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v642 = (*a2)[19];
      v99 = v1266;
      v100 = v1268;
      if (!(*a2)[6])
        goto LABEL_1729;
      v643 = 0;
      v644 = ((unint64_t)(v1267 - (_QWORD)v1266) >> 2) - 1;
      break;
    default:
      return;
  }
  while (1)
  {
    LODWORD(__b) = 0;
    v645 = 0;
    if ((v644 & 0x80000000) == 0)
    {
      v646 = v644;
      v647 = v643;
      do
      {
        v648 = ldiv(v647, v99[v646]);
        v647 = v648.quot;
        v645 += (_QWORD)v100[v646--] * v648.rem;
      }
      while (v646 != -1);
    }
    LODWORD(__b) = v645;
    LOBYTE(v1251) = 0;
    v1265 = 0;
    v649 = operator new(0x28uLL);
    *v649 = &off_251348CF8;
    v649[1] = &v1263;
    v649[2] = &v1251;
    v649[3] = &__len;
    v649[4] = &__b;
    v1265 = v649;
    v1273 = 0;
    v650 = (void **)operator new(0x28uLL);
    *v650 = &off_251346A78;
    v650[1] = &v1258;
    v650[2] = &v1260;
    v650[3] = v1272;
    v650[4] = v1264;
    v1268 = v650;
    std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1266, v1272);
    v651 = v1268;
    if (v1268 == (void **)&v1266)
    {
      v651 = (void **)&v1266;
      v652 = 4;
    }
    else
    {
      if (!v1268)
        goto LABEL_896;
      v652 = 5;
    }
    (*((void (**)(void))*v651 + v652))();
LABEL_896:
    LODWORD(v1266) = 0;
    LODWORD(v1252) = 0;
    if (!v1273)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int **, int **))(*v1273 + 48))(v1273, &v1266, &v1252);
    v653 = v1273;
    if (v1273 == v1272)
    {
      v653 = v1272;
      v654 = 4;
    }
    else
    {
      if (!v1273)
        goto LABEL_902;
      v654 = 5;
    }
    (*(void (**)(void))(*v653 + 8 * v654))();
LABEL_902:
    v655 = v1265;
    if (v1265 == v1264)
    {
      v655 = v1264;
      v656 = 4;
      goto LABEL_906;
    }
    if (v1265)
    {
      v656 = 5;
LABEL_906:
      (*(void (**)(void))(*v655 + 8 * v656))();
    }
    *(_BYTE *)v642 = v1251;
    v642 = (int *)((char *)v642 + 1);
    if ((unint64_t)(*a2)[6] <= ++v643)
      goto LABEL_1729;
  }
}

void sub_24232B2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_24232B6CC()
{
  JUMPOUT(0x24232B6C4);
}

void mlx::core::`anonymous namespace'::reduce_dispatch_out<unsigned int>(mlx::core::array *a1, int ***a2, int a3, uint64_t a4)
{
  mlx::core::scheduler *v7;
  void **v8;
  uint64_t v9;
  mlx::core::scheduler *v10;
  void **v11;
  uint64_t v12;
  int **v13;
  int *v14;
  mlx::core::scheduler *v15;
  void **v16;
  uint64_t v17;
  mlx::core::scheduler *v18;
  void **v19;
  uint64_t v20;
  mlx::core::scheduler *v21;
  void **v22;
  uint64_t v23;
  mlx::core::scheduler *v24;
  void **v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int *v34;
  int v35;
  int *v36;
  unsigned int v37;
  int v38;
  int v39;
  char *v40;
  int v41;
  int *v42;
  unsigned int v43;
  char v44;
  int v45;
  int *v46;
  int v47;
  unsigned __int8 v48;
  int *v49;
  unsigned int v50;
  int v51;
  int *v52;
  int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE *v59;
  int *v60;
  int *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE *v70;
  int *v71;
  int *v72;
  uint64_t v73;
  int *v74;
  int *v75;
  int v76;
  unsigned int v77;
  int *v78;
  int v79;
  _BYTE *v80;
  int *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  int *v85;
  char v86;
  unsigned int v87;
  int *v88;
  int v89;
  _BYTE *v90;
  int *v91;
  int *v92;
  uint64_t v93;
  int *v94;
  int *v95;
  char v96;
  unsigned int v97;
  int *v98;
  int v99;
  size_t v100;
  int *v101;
  void **v102;
  int *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  ldiv_t v109;
  _QWORD *v110;
  void **v111;
  void **v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _BYTE *v118;
  int *v119;
  int *v120;
  uint64_t v121;
  int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  size_t v129;
  int *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  ldiv_t v136;
  _QWORD *v137;
  void **v138;
  void **v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  size_t v145;
  int *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int quot;
  ldiv_t v152;
  _QWORD *v153;
  void **v154;
  void **v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  size_t v161;
  int *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  ldiv_t v168;
  _QWORD *v169;
  void **v170;
  void **v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  size_t v177;
  int *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  ldiv_t v184;
  _QWORD *v185;
  void **v186;
  void **v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _BYTE *v193;
  _BYTE *v194;
  _BYTE *v195;
  _BYTE *v196;
  _BYTE *v197;
  mlx::core::scheduler *v198;
  void **v199;
  uint64_t v200;
  mlx::core::scheduler *v201;
  void **v202;
  uint64_t v203;
  mlx::core::scheduler *v204;
  void **v205;
  uint64_t v206;
  mlx::core::scheduler *v207;
  void **v208;
  uint64_t v209;
  mlx::core::scheduler *v210;
  void **v211;
  uint64_t v212;
  mlx::core::scheduler *v213;
  void **v214;
  uint64_t v215;
  int *v216;
  unsigned int *v217;
  size_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  ldiv_t v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  int *v229;
  int *v230;
  size_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  ldiv_t v236;
  int *v237;
  unsigned int v238;
  int v239;
  int v240;
  int *v241;
  uint64_t v242;
  char *v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  ldiv_t v249;
  int *v250;
  char v251;
  unsigned int v252;
  int v253;
  int *v254;
  uint64_t v255;
  int *v256;
  int v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  ldiv_t v262;
  char v263;
  int *v264;
  unsigned int v265;
  int v266;
  int *v267;
  int *v268;
  size_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  ldiv_t v274;
  unsigned int v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  int *v280;
  int v281;
  int v282;
  int *v283;
  unsigned int v284;
  int v285;
  int *v286;
  int v287;
  int v288;
  int *v289;
  unsigned int v290;
  int v291;
  int *v292;
  int v293;
  int v294;
  unsigned __int8 *v295;
  unsigned int v296;
  int v297;
  int v298;
  int *v299;
  unsigned int v300;
  int v301;
  int *v302;
  int v303;
  int v304;
  unsigned __int8 *v305;
  unsigned int v306;
  int v307;
  int *v308;
  int v309;
  uint64_t v310;
  unsigned int *v311;
  unsigned int v312;
  unsigned int v313;
  float *v314;
  int v315;
  unsigned int *v316;
  unsigned int v317;
  float v318;
  unsigned int v319;
  _BYTE *v320;
  int *v321;
  int *v322;
  uint64_t v323;
  int *v324;
  int *v325;
  int v326;
  unsigned int v327;
  int *v328;
  int v329;
  _BYTE *v330;
  int *v331;
  int *v332;
  uint64_t v333;
  int *v334;
  int *v335;
  int v336;
  unsigned int v337;
  int *v338;
  int v339;
  _BYTE *v340;
  unint64_t v341;
  uint64_t v342;
  int *v343;
  unsigned __int8 *v344;
  int v345;
  unsigned int v346;
  unsigned __int8 *v347;
  int v348;
  _BYTE *v349;
  int *v350;
  int *v351;
  uint64_t v352;
  BOOL *v353;
  int *v354;
  BOOL v355;
  unsigned int v356;
  int *v357;
  int v358;
  _BYTE *v359;
  unint64_t v360;
  uint64_t v361;
  int *v362;
  unsigned __int8 *v363;
  int v364;
  unsigned int v365;
  unsigned __int8 *v366;
  int v367;
  size_t v368;
  int *v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  ldiv_t v375;
  _QWORD *v376;
  void **v377;
  void **v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  int *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  ldiv_t v390;
  _QWORD *v391;
  void **v392;
  void **v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  _BYTE *v399;
  int *v400;
  int *v401;
  uint64_t v402;
  int *v403;
  unsigned int *v404;
  uint64_t v405;
  unsigned int v406;
  unsigned int *v407;
  unsigned int v408;
  uint64_t v409;
  uint64_t v410;
  int *v411;
  unint64_t v412;
  int *v413;
  unsigned int *v414;
  int v415;
  unsigned int *v416;
  uint64_t i11;
  int v418;
  unsigned int v419;
  size_t v420;
  unint64_t v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  ldiv_t v427;
  _QWORD *v428;
  void **v429;
  void **v430;
  uint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  _BYTE *v436;
  int *v437;
  int *v438;
  uint64_t v439;
  float *v440;
  unsigned int *v441;
  float v442;
  unsigned int v443;
  unsigned int *v444;
  unsigned int v445;
  size_t v446;
  int *v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  ldiv_t v453;
  _QWORD *v454;
  void **v455;
  void **v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  size_t v462;
  int *v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  ldiv_t v469;
  _QWORD *v470;
  void **v471;
  void **v472;
  uint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  _QWORD *v476;
  uint64_t v477;
  int *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  ldiv_t v484;
  _QWORD *v485;
  void **v486;
  void **v487;
  uint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  size_t v493;
  int *v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  ldiv_t v500;
  _QWORD *v501;
  void **v502;
  void **v503;
  uint64_t v504;
  _QWORD *v505;
  uint64_t v506;
  _QWORD *v507;
  uint64_t v508;
  size_t v509;
  int *v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  ldiv_t v516;
  _QWORD *v517;
  void **v518;
  void **v519;
  uint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  _QWORD *v523;
  uint64_t v524;
  int *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  ldiv_t v531;
  _QWORD *v532;
  void **v533;
  void **v534;
  uint64_t v535;
  _QWORD *v536;
  uint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  int *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  ldiv_t v546;
  _QWORD *v547;
  void **v548;
  void **v549;
  uint64_t v550;
  _QWORD *v551;
  uint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  int **v557;
  int *v558;
  unint64_t v559;
  int *v560;
  int *v561;
  int v562;
  int *v563;
  uint64_t i9;
  int v565;
  size_t v566;
  unint64_t v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  ldiv_t v573;
  _QWORD *v574;
  void **v575;
  void **v576;
  uint64_t v577;
  _QWORD *v578;
  uint64_t v579;
  _QWORD *v580;
  uint64_t v581;
  uint64_t v582;
  size_t v583;
  int *v584;
  unint64_t v585;
  int *v586;
  _DWORD *v587;
  int v588;
  _DWORD *v589;
  uint64_t i;
  BOOL v592;
  char v593;
  size_t v594;
  unint64_t v595;
  int v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  int v600;
  ldiv_t v601;
  _QWORD *v602;
  void **v603;
  void **v604;
  uint64_t v605;
  _QWORD *v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  uint64_t v610;
  size_t v611;
  int *v612;
  unint64_t v613;
  int *v614;
  int *v615;
  int v616;
  int *v617;
  uint64_t k;
  int v619;
  size_t v620;
  unint64_t v621;
  int v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  int v626;
  ldiv_t v627;
  _QWORD *v628;
  void **v629;
  void **v630;
  uint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  _QWORD *v634;
  uint64_t v635;
  size_t v636;
  int *v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  ldiv_t v643;
  _QWORD *v644;
  void **v645;
  void **v646;
  uint64_t v647;
  _QWORD *v648;
  uint64_t v649;
  _QWORD *v650;
  uint64_t v651;
  int *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  ldiv_t v658;
  _QWORD *v659;
  void **v660;
  void **v661;
  uint64_t v662;
  _QWORD *v663;
  uint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  size_t v667;
  int *v668;
  unint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  int v673;
  ldiv_t v674;
  _QWORD *v675;
  void **v676;
  void **v677;
  uint64_t v678;
  _QWORD *v679;
  uint64_t v680;
  _QWORD *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int *v685;
  unint64_t v686;
  int *v687;
  unsigned int *v688;
  int v689;
  unsigned int *v690;
  uint64_t i13;
  int v692;
  unsigned int v693;
  size_t v694;
  unint64_t v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  int v700;
  ldiv_t v701;
  _QWORD *v702;
  void **v703;
  void **v704;
  uint64_t v705;
  _QWORD *v706;
  uint64_t v707;
  _QWORD *v708;
  uint64_t v709;
  int v710;
  char *v711;
  uint64_t v712;
  size_t v713;
  size_t v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  ldiv_t v718;
  int v719;
  int v720;
  int *v721;
  uint64_t i12;
  unsigned int v723;
  unsigned int v724;
  int v725;
  char *v726;
  uint64_t v727;
  size_t v728;
  size_t v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  ldiv_t v733;
  int v734;
  int v735;
  int *v736;
  uint64_t i10;
  int v738;
  int v739;
  char *v740;
  uint64_t v741;
  size_t v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  ldiv_t v747;
  int v748;
  int *v749;
  uint64_t j;
  BOOL v752;
  char v753;
  int v754;
  char *v755;
  uint64_t v756;
  size_t v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  int v761;
  ldiv_t v762;
  int v763;
  int *v764;
  uint64_t m;
  int v766;
  int v767;
  char *v768;
  uint64_t v769;
  size_t v770;
  size_t v771;
  uint64_t v772;
  uint64_t v773;
  int v774;
  ldiv_t v775;
  int v776;
  int v777;
  int *v778;
  uint64_t i14;
  unsigned int v780;
  unsigned int v781;
  _BYTE *v782;
  _BYTE *v783;
  _BYTE *v784;
  _BYTE *v785;
  _BYTE *v786;
  _BYTE *v787;
  _BYTE *v788;
  int *v789;
  int *v790;
  size_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  ldiv_t v796;
  int v797;
  int *v798;
  unsigned int v799;
  int v800;
  int *v801;
  int *v802;
  size_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  int v807;
  ldiv_t v808;
  int v809;
  int *v810;
  unsigned int v811;
  int v812;
  unint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  int v817;
  ldiv_t v818;
  int *v819;
  unsigned __int8 *v820;
  int v821;
  unsigned int v822;
  int v823;
  int *v824;
  uint64_t v825;
  BOOL *v826;
  int v827;
  unsigned int v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  ldiv_t v832;
  BOOL v833;
  int *v834;
  unsigned int v835;
  int v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  int v841;
  ldiv_t v842;
  int *v843;
  unsigned __int8 *v844;
  int v845;
  unsigned int v846;
  int v847;
  int *v848;
  uint64_t v849;
  int *v850;
  int v851;
  unsigned int v852;
  uint64_t v853;
  uint64_t v854;
  int v855;
  ldiv_t v856;
  uint64_t v857;
  unsigned int *v858;
  unsigned int v859;
  unsigned int v860;
  int *v861;
  uint64_t v862;
  float *v863;
  int v864;
  unsigned int v865;
  uint64_t v866;
  uint64_t v867;
  int v868;
  ldiv_t v869;
  unsigned int *v870;
  float v871;
  unsigned int v872;
  unsigned int v873;
  int *v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  int v879;
  ldiv_t v880;
  _QWORD *v881;
  void **v882;
  void **v883;
  uint64_t v884;
  _QWORD *v885;
  uint64_t v886;
  _QWORD *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  int *v891;
  unint64_t v892;
  int *v893;
  int *v894;
  int v895;
  int *v896;
  uint64_t i3;
  int v898;
  size_t v899;
  unint64_t v900;
  int v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  int v905;
  ldiv_t v906;
  _QWORD *v907;
  void **v908;
  void **v909;
  uint64_t v910;
  _QWORD *v911;
  uint64_t v912;
  _QWORD *v913;
  uint64_t v914;
  int *v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  int v920;
  ldiv_t v921;
  _QWORD *v922;
  void **v923;
  void **v924;
  uint64_t v925;
  _QWORD *v926;
  uint64_t v927;
  _QWORD *v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  int *v932;
  unint64_t v933;
  int *v934;
  int *v935;
  int v936;
  int *v937;
  uint64_t mm;
  int v939;
  size_t v940;
  unint64_t v941;
  int v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  int v946;
  ldiv_t v947;
  _QWORD *v948;
  void **v949;
  void **v950;
  uint64_t v951;
  _QWORD *v952;
  uint64_t v953;
  _QWORD *v954;
  uint64_t v955;
  int *v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  int v961;
  ldiv_t v962;
  _QWORD *v963;
  void **v964;
  void **v965;
  uint64_t v966;
  _QWORD *v967;
  uint64_t v968;
  _QWORD *v969;
  uint64_t v970;
  int *v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  int v976;
  ldiv_t v977;
  _QWORD *v978;
  void **v979;
  void **v980;
  uint64_t v981;
  _QWORD *v982;
  uint64_t v983;
  _QWORD *v984;
  uint64_t v985;
  int *v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  int v991;
  ldiv_t v992;
  _QWORD *v993;
  void **v994;
  void **v995;
  uint64_t v996;
  _QWORD *v997;
  uint64_t v998;
  _QWORD *v999;
  uint64_t v1000;
  uint64_t v1001;
  size_t v1002;
  unint64_t v1003;
  int *v1004;
  char *v1005;
  int v1006;
  char *v1007;
  uint64_t i1;
  char v1009;
  size_t v1010;
  int *v1011;
  int v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  int v1016;
  ldiv_t v1017;
  _QWORD *v1018;
  void **v1019;
  void **v1020;
  uint64_t v1021;
  _QWORD *v1022;
  uint64_t v1023;
  _QWORD *v1024;
  uint64_t v1025;
  uint64_t v1026;
  size_t v1027;
  int *v1028;
  unint64_t v1029;
  int *v1030;
  int *v1031;
  int v1032;
  int *v1033;
  uint64_t n;
  int v1035;
  size_t v1036;
  unint64_t v1037;
  int v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  int v1042;
  ldiv_t v1043;
  _QWORD *v1044;
  void **v1045;
  void **v1046;
  uint64_t v1047;
  _QWORD *v1048;
  uint64_t v1049;
  _QWORD *v1050;
  uint64_t v1051;
  uint64_t v1052;
  size_t v1053;
  unint64_t v1054;
  int *v1055;
  char *v1056;
  int v1057;
  char *v1058;
  uint64_t jj;
  char v1060;
  size_t v1061;
  int *v1062;
  int v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  int v1067;
  ldiv_t v1068;
  _QWORD *v1069;
  void **v1070;
  void **v1071;
  uint64_t v1072;
  _QWORD *v1073;
  uint64_t v1074;
  _QWORD *v1075;
  uint64_t v1076;
  int *v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  int v1082;
  ldiv_t v1083;
  _QWORD *v1084;
  void **v1085;
  void **v1086;
  uint64_t v1087;
  _QWORD *v1088;
  uint64_t v1089;
  _QWORD *v1090;
  uint64_t v1091;
  int *v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  int v1097;
  ldiv_t v1098;
  _QWORD *v1099;
  void **v1100;
  void **v1101;
  uint64_t v1102;
  _QWORD *v1103;
  uint64_t v1104;
  _QWORD *v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  int *v1109;
  unint64_t v1110;
  int *v1111;
  unsigned int *v1112;
  int v1113;
  unsigned int *v1114;
  uint64_t i5;
  unsigned int v1116;
  size_t v1117;
  int *v1118;
  int v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  int v1123;
  ldiv_t v1124;
  _QWORD *v1125;
  void **v1126;
  void **v1127;
  uint64_t v1128;
  _QWORD *v1129;
  uint64_t v1130;
  _QWORD *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  int *v1135;
  unint64_t v1136;
  int *v1137;
  unsigned int *v1138;
  int v1139;
  unsigned int *v1140;
  uint64_t i7;
  unsigned int v1142;
  size_t v1143;
  unint64_t v1144;
  int v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  int v1149;
  ldiv_t v1150;
  _QWORD *v1151;
  void **v1152;
  void **v1153;
  uint64_t v1154;
  _QWORD *v1155;
  uint64_t v1156;
  _QWORD *v1157;
  uint64_t v1158;
  int v1159;
  char *v1160;
  uint64_t v1161;
  size_t v1162;
  size_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  int v1166;
  ldiv_t v1167;
  int v1168;
  int v1169;
  int *v1170;
  uint64_t i4;
  int v1172;
  int v1173;
  char *v1174;
  uint64_t v1175;
  size_t v1176;
  size_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  int v1180;
  ldiv_t v1181;
  int v1182;
  int v1183;
  int *v1184;
  uint64_t nn;
  int v1186;
  int v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  int v1191;
  int ***v1192;
  ldiv_t v1193;
  _BYTE *v1194;
  size_t v1195;
  int v1196;
  int v1197;
  int *v1198;
  size_t v1199;
  _BYTE *i2;
  char v1201;
  int v1202;
  unsigned __int8 *v1203;
  uint64_t v1204;
  size_t v1205;
  int v1206;
  uint64_t v1207;
  uint64_t v1208;
  int v1209;
  ldiv_t v1210;
  int v1211;
  int *v1212;
  uint64_t ii;
  int v1214;
  int v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  int v1219;
  int ***v1220;
  ldiv_t v1221;
  _BYTE *v1222;
  size_t v1223;
  int v1224;
  int v1225;
  int *v1226;
  size_t v1227;
  _BYTE *kk;
  char v1229;
  int v1230;
  char *v1231;
  uint64_t v1232;
  size_t v1233;
  int v1234;
  size_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  int v1238;
  ldiv_t v1239;
  int v1240;
  int *v1241;
  uint64_t i6;
  unsigned int v1243;
  int v1244;
  char *v1245;
  uint64_t v1246;
  size_t v1247;
  int v1248;
  size_t v1249;
  uint64_t v1250;
  int v1251;
  ldiv_t v1252;
  int v1253;
  unsigned int *v1254;
  uint64_t i8;
  unsigned int v1256;
  int *v1257;
  int *v1258;
  size_t v1260;
  size_t v1261;
  int *v1262;
  int *v1263;
  int *v1264;
  int *v1265;
  int *v1266;
  size_t v1267;
  size_t v1268;
  size_t v1269;
  int *v1270;
  int *v1271;
  int *v1272;
  unint64_t v1273;
  uint64_t v1274;
  int v1275;
  void *__b;
  int v1277;
  int *v1278;
  size_t __len;
  void *__p;
  void *v1281;
  uint64_t v1282;
  int v1283;
  void *v1284;
  _BYTE *v1285;
  void *v1286;
  char *v1287;
  char v1288;
  int v1289;
  _BYTE v1290[24];
  _BYTE *v1291;
  int *v1292;
  uint64_t v1293;
  void **v1294;
  void *v1295;
  uint64_t (*v1296)(mlx::core::allocator *);
  void **v1297;
  _QWORD v1298[3];
  _QWORD *v1299;
  uint64_t v1300;

  v1300 = *MEMORY[0x24BDAC8D0];
  switch(a3)
  {
    case 0:
      v7 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                       * (_QWORD)(*a2)[6]));
      v1295 = &unk_2513463C8;
      v1296 = mlx::core::allocator::free;
      v1297 = &v1295;
      mlx::core::array::set_data(a2, (uint64_t)v7, (uint64_t)&v1295);
      v8 = v1297;
      if (v1297 == &v1295)
      {
        v9 = 4;
        v8 = &v1295;
      }
      else
      {
        if (!v1297)
          goto LABEL_45;
        v9 = 5;
      }
      (*((void (**)(void))*v8 + v9))();
LABEL_45:
      v1281 = 0;
      v1282 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1281 = __p;
        operator delete(__p);
      }
      if (v1283 == 1)
      {
        v80 = v1285;
        if (v1285 - (_BYTE *)v1284 == 4)
        {
          v81 = (*a2)[6];
          if (v81)
          {
            v82 = 0;
            v83 = *(int *)v1284;
            v84 = (char *)(*a2)[19];
            v85 = *(int **)(*(_QWORD *)a1 + 152);
            do
            {
              *v84 = 1;
              if ((int)v83 >= 1)
              {
                v86 = 1;
                v87 = v83 + 1;
                v88 = v85;
                do
                {
                  v89 = *v88++;
                  v86 &= v89 != 0;
                  --v87;
                }
                while (v87 > 1);
                *v84 = v86;
              }
              v82 = (int *)((char *)v82 + 1);
              ++v84;
              v85 += v83;
            }
            while (v82 != v81);
          }
          goto LABEL_1712;
        }
        goto LABEL_175;
      }
      if (!v1283)
      {
        v40 = (char *)(*a2)[19];
        *v40 = 1;
        v41 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v41 >= 1)
        {
          v42 = *(int **)(*(_QWORD *)a1 + 152);
          v43 = v41 + 1;
          v44 = 1;
          do
          {
            v45 = *v42++;
            v44 &= v45 != 0;
            --v43;
          }
          while (v43 > 1);
          *v40 = v44;
        }
        goto LABEL_1712;
      }
      if ((v1283 & 0xFFFFFFFD) == 1)
      {
        v80 = v1285;
LABEL_175:
        v1289 = 0;
        v1289 = *((_DWORD *)v80 - 1);
        v1285 = v80 - 4;
        v1287 -= 8;
        v145 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1278 = (*a2)[19];
        __len = v145;
        v101 = v1292;
        v102 = v1294;
        v146 = (*a2)[6];
        if (v1285 != v1284)
        {
          if (!v146)
            goto LABEL_1708;
          v147 = 0;
          v148 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          while (1)
          {
            v1277 = 0;
            v149 = 0;
            if ((v148 & 0x80000000) == 0)
            {
              v150 = v148;
              quot = v147;
              do
              {
                v152 = ldiv(quot, v101[v150]);
                quot = v152.quot;
                v149 += (_QWORD)v102[v150--] * v152.rem;
              }
              while (v150 != -1);
            }
            v1277 = v149;
            *(_BYTE *)v1278 = 1;
            v1291 = 0;
            v153 = operator new(0x30uLL);
            *v153 = &off_251348EF8;
            v153[1] = &v1275;
            v153[2] = &__len;
            v153[3] = &v1277;
            v153[4] = &v1278;
            v153[5] = &v1289;
            v1291 = v153;
            v1299 = 0;
            v154 = (void **)operator new(0x28uLL);
            *v154 = &off_251346A78;
            v154[1] = &v1284;
            v154[2] = &v1286;
            v154[3] = v1298;
            v154[4] = v1290;
            v1294 = v154;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
            v155 = v1294;
            if (v1294 == (void **)&v1292)
            {
              v155 = (void **)&v1292;
              v156 = 4;
            }
            else
            {
              if (!v1294)
                goto LABEL_186;
              v156 = 5;
            }
            (*((void (**)(void))*v155 + v156))();
LABEL_186:
            LODWORD(v1292) = 0;
            LODWORD(__b) = 0;
            if (!v1299)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
            v157 = v1299;
            if (v1299 == v1298)
            {
              v157 = v1298;
              v158 = 4;
            }
            else
            {
              if (!v1299)
                goto LABEL_192;
              v158 = 5;
            }
            (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_192:
            v159 = v1291;
            if (v1291 == v1290)
            {
              v159 = v1290;
              v160 = 4;
              goto LABEL_196;
            }
            if (v1291)
            {
              v160 = 5;
LABEL_196:
              (*(void (**)(void))(*v159 + 8 * v160))();
            }
            ++v147;
            v1278 = (int *)((char *)v1278 + 1);
            if ((unint64_t)(*a2)[6] <= v147)
              goto LABEL_1708;
          }
        }
        if (v146)
        {
          v241 = 0;
          v242 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          v243 = (char *)v1278;
          v1260 = __len;
          v244 = v1289;
          v245 = v1289 + 1;
          do
          {
            v246 = 0;
            if ((v242 & 0x80000000) == 0)
            {
              v247 = v242;
              v248 = (int)v241;
              do
              {
                v249 = ldiv(v248, v101[v247]);
                v248 = v249.quot;
                v246 += (_QWORD)v102[v247--] * v249.rem;
              }
              while (v247 != -1);
            }
            *v243 = 1;
            if (v244 >= 1)
            {
              v250 = (int *)(v1260 + 4 * (int)v246);
              v251 = 1;
              v252 = v245;
              do
              {
                v253 = *v250++;
                v251 &= v253 != 0;
                --v252;
              }
              while (v252 > 1);
              *v243 = v251;
            }
            v241 = (int *)((char *)v241 + 1);
            ++v243;
          }
          while (v241 != v146);
        }
        goto LABEL_1708;
      }
      switch(v1283)
      {
        case 2:
          v195 = v1285;
          if (v1285 - (_BYTE *)v1284 == 4)
          {
            v582 = *((int *)v1285 - 1);
            v583 = *((_QWORD *)v1287 - 1);
            v1285 -= 4;
            v1287 -= 8;
            v584 = (*a2)[6];
            if (v584)
            {
              LODWORD(v585) = 0;
              v586 = (*a2)[19];
              v587 = *(_DWORD **)(*(_QWORD *)a1 + 152);
              do
              {
                if (v583)
                  memset(v586, 1, v583);
                if ((int)v582 >= 1)
                {
                  v588 = 0;
                  v589 = v587;
                  do
                  {
                    if (v583)
                    {
                      for (i = 0; i != v583; ++i)
                      {
                        if (*v589++)
                          v592 = *((_BYTE *)v586 + i) == 0;
                        else
                          v592 = 1;
                        v593 = !v592;
                        *((_BYTE *)v586 + i) = v593;
                      }
                    }
                    ++v588;
                  }
                  while (v588 != (_DWORD)v582);
                }
                v587 += v583 * v582;
                v586 = (int *)((char *)v586 + v583);
                v585 = (int)v585 + (int)v583;
              }
              while (v585 < (unint64_t)v584);
            }
            break;
          }
LABEL_795:
          v1277 = 0;
          v1277 = *((_DWORD *)v195 - 1);
          __len = 0;
          v594 = *((_QWORD *)v1287 - 1);
          v1285 = v195 - 4;
          v1287 -= 8;
          v1278 = *(int **)(*(_QWORD *)a1 + 152);
          __len = v594;
          __b = (*a2)[19];
          v101 = v1292;
          v102 = v1294;
          v595 = (unint64_t)(*a2)[6];
          if (v1285 == v1284)
          {
            if (v595)
            {
              v739 = 0;
              v740 = (char *)__b;
              v741 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
              v742 = __len;
              v1264 = v1278;
              v743 = v1277;
              do
              {
                v744 = 0;
                if ((v741 & 0x80000000) == 0)
                {
                  v745 = v741;
                  v746 = v739;
                  do
                  {
                    v747 = ldiv(v746, v101[v745]);
                    v746 = v747.quot;
                    v744 += (_QWORD)v102[v745--] * v747.rem;
                  }
                  while (v745 != -1);
                }
                if (v742)
                  memset(v740, 1, v742);
                if (v743 >= 1)
                {
                  v748 = 0;
                  v749 = &v1264[(int)v744];
                  do
                  {
                    if (v742)
                    {
                      for (j = 0; j != v742; ++j)
                      {
                        if (*v749++)
                          v752 = v740[j] == 0;
                        else
                          v752 = 1;
                        v753 = !v752;
                        v740[j] = v753;
                      }
                    }
                    ++v748;
                  }
                  while (v748 != v743);
                }
                v740 += v742;
                v739 += v742;
              }
              while (v595 > v739);
            }
            goto LABEL_1708;
          }
          if (v595)
          {
            v596 = 0;
            v597 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            do
            {
              v1275 = 0;
              v598 = 0;
              if ((v597 & 0x80000000) == 0)
              {
                v599 = v597;
                v600 = v596;
                do
                {
                  v601 = ldiv(v600, v101[v599]);
                  v600 = v601.quot;
                  v598 += (_QWORD)v102[v599--] * v601.rem;
                }
                while (v599 != -1);
              }
              v1275 = v598;
              if (__len)
                memset(__b, 1, __len);
              v1291 = 0;
              v602 = operator new(0x38uLL);
              *v602 = &off_251348F78;
              v602[1] = &v1288;
              v602[2] = &v1278;
              v602[3] = &v1275;
              v602[4] = &__b;
              v602[5] = &v1277;
              v602[6] = &__len;
              v1291 = v602;
              v1299 = 0;
              v603 = (void **)operator new(0x28uLL);
              *v603 = &off_251346A78;
              v603[1] = &v1284;
              v603[2] = &v1286;
              v603[3] = v1298;
              v603[4] = v1290;
              v1294 = v603;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v604 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v604 = (void **)&v1292;
                v605 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_808;
                v605 = 5;
              }
              (*((void (**)(void))*v604 + v605))();
LABEL_808:
              LODWORD(v1292) = 0;
              v1289 = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
              v606 = v1299;
              if (v1299 == v1298)
              {
                v606 = v1298;
                v607 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_814;
                v607 = 5;
              }
              (*(void (**)(void))(*v606 + 8 * v607))();
LABEL_814:
              v608 = v1291;
              if (v1291 == v1290)
              {
                v608 = v1290;
                v609 = 4;
                goto LABEL_818;
              }
              if (v1291)
              {
                v609 = 5;
LABEL_818:
                (*(void (**)(void))(*v608 + 8 * v609))();
              }
              __b = (char *)__b + __len;
              v596 += __len;
            }
            while ((unint64_t)(*a2)[6] > v596);
          }
LABEL_1708:
          if (v102)
            operator delete(v102);
          if (v101)
            operator delete(v101);
          break;
        case 5:
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v525 = (*a2)[19];
          v101 = v1292;
          v102 = v1294;
          if (!(*a2)[6])
            goto LABEL_1708;
          v526 = 0;
          v527 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v528 = 0;
            if ((v527 & 0x80000000) == 0)
            {
              v529 = v527;
              v530 = v526;
              do
              {
                v531 = ldiv(v530, v101[v529]);
                v530 = v531.quot;
                v528 += (_QWORD)v102[v529--] * v531.rem;
              }
              while (v529 != -1);
            }
            LODWORD(__b) = v528;
            LOBYTE(v1277) = 1;
            v1291 = 0;
            v532 = operator new(0x28uLL);
            *v532 = &off_251348FF8;
            v532[1] = &v1289;
            v532[2] = &v1277;
            v532[3] = &__len;
            v532[4] = &__b;
            v1291 = v532;
            v1299 = 0;
            v533 = (void **)operator new(0x28uLL);
            *v533 = &off_251346A78;
            v533[1] = &v1284;
            v533[2] = &v1286;
            v533[3] = v1298;
            v533[4] = v1290;
            v1294 = v533;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
            v534 = v1294;
            if (v1294 == (void **)&v1292)
            {
              v534 = (void **)&v1292;
              v535 = 4;
            }
            else
            {
              if (!v1294)
                goto LABEL_701;
              v535 = 5;
            }
            (*((void (**)(void))*v534 + v535))();
LABEL_701:
            LODWORD(v1292) = 0;
            LODWORD(v1278) = 0;
            if (!v1299)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
            v536 = v1299;
            if (v1299 == v1298)
            {
              v536 = v1298;
              v537 = 4;
            }
            else
            {
              if (!v1299)
                goto LABEL_707;
              v537 = 5;
            }
            (*(void (**)(void))(*v536 + 8 * v537))();
LABEL_707:
            v538 = v1291;
            if (v1291 == v1290)
            {
              v538 = v1290;
              v539 = 4;
              goto LABEL_711;
            }
            if (v1291)
            {
              v539 = 5;
LABEL_711:
              (*(void (**)(void))(*v538 + 8 * v539))();
            }
            *(_BYTE *)v525 = v1277;
            v525 = (int *)((char *)v525 + 1);
            if ((unint64_t)(*a2)[6] <= ++v526)
              goto LABEL_1708;
          }
        case 4:
          v195 = v1285;
          goto LABEL_795;
      }
LABEL_1712:
      if (v1286)
      {
        v1287 = (char *)v1286;
        operator delete(v1286);
      }
      if (v1284)
      {
        v1285 = v1284;
        operator delete(v1284);
      }
      return;
    case 1:
      v21 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1295 = &unk_2513463C8;
      v1296 = mlx::core::allocator::free;
      v1297 = &v1295;
      mlx::core::array::set_data(a2, (uint64_t)v21, (uint64_t)&v1295);
      v22 = v1297;
      if (v1297 == &v1295)
      {
        v23 = 4;
        v22 = &v1295;
      }
      else
      {
        if (!v1297)
          goto LABEL_55;
        v23 = 5;
      }
      (*((void (**)(void))*v22 + v23))();
LABEL_55:
      v1281 = 0;
      v1282 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1281 = __p;
        operator delete(__p);
      }
      if (v1283 == 1)
      {
        v90 = v1285;
        if (v1285 - (_BYTE *)v1284 == 4)
        {
          v91 = (*a2)[6];
          if (v91)
          {
            v92 = 0;
            v93 = *(int *)v1284;
            v94 = (*a2)[19];
            v95 = *(int **)(*(_QWORD *)a1 + 152);
            do
            {
              *(_BYTE *)v94 = 0;
              if ((int)v93 >= 1)
              {
                v96 = 0;
                v97 = v93 + 1;
                v98 = v95;
                do
                {
                  v99 = *v98++;
                  v96 |= v99 != 0;
                  --v97;
                }
                while (v97 > 1);
                *(_BYTE *)v94 = v96;
              }
              v92 = (int *)((char *)v92 + 1);
              v94 = (int *)((char *)v94 + 1);
              v95 += v93;
            }
            while (v92 != v91);
          }
          goto LABEL_1712;
        }
        goto LABEL_201;
      }
      if (!v1283)
      {
        v46 = (*a2)[19];
        *(_BYTE *)v46 = 0;
        v47 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v47 < 1)
          goto LABEL_1712;
        v48 = 0;
        v49 = *(int **)(*(_QWORD *)a1 + 152);
        v50 = v47 + 1;
        do
        {
          v51 = *v49++;
          v48 |= v51 != 0;
          --v50;
        }
        while (v50 > 1);
        goto LABEL_62;
      }
      if ((v1283 & 0xFFFFFFFD) == 1)
      {
        v90 = v1285;
LABEL_201:
        v1289 = 0;
        v1289 = *((_DWORD *)v90 - 1);
        v1285 = v90 - 4;
        v1287 -= 8;
        v161 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1278 = (*a2)[19];
        __len = v161;
        v101 = v1292;
        v102 = v1294;
        v162 = (*a2)[6];
        if (v1285 == v1284)
        {
          if (v162)
          {
            v254 = 0;
            v255 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            v256 = v1278;
            v1261 = __len;
            v257 = v1289;
            v258 = v1289 + 1;
            do
            {
              v259 = 0;
              if ((v255 & 0x80000000) == 0)
              {
                v260 = v255;
                v261 = (int)v254;
                do
                {
                  v262 = ldiv(v261, v101[v260]);
                  v261 = v262.quot;
                  v259 += (_QWORD)v102[v260--] * v262.rem;
                }
                while (v260 != -1);
              }
              *(_BYTE *)v256 = 0;
              if (v257 >= 1)
              {
                v263 = 0;
                v264 = (int *)(v1261 + 4 * (int)v259);
                v265 = v258;
                do
                {
                  v266 = *v264++;
                  v263 |= v266 != 0;
                  --v265;
                }
                while (v265 > 1);
                *(_BYTE *)v256 = v263;
              }
              v254 = (int *)((char *)v254 + 1);
              v256 = (int *)((char *)v256 + 1);
            }
            while (v254 != v162);
          }
          goto LABEL_1708;
        }
        if (!v162)
          goto LABEL_1708;
        v163 = 0;
        v164 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
        while (1)
        {
          v1277 = 0;
          v165 = 0;
          if ((v164 & 0x80000000) == 0)
          {
            v166 = v164;
            v167 = v163;
            do
            {
              v168 = ldiv(v167, v101[v166]);
              v167 = v168.quot;
              v165 += (_QWORD)v102[v166--] * v168.rem;
            }
            while (v166 != -1);
          }
          v1277 = v165;
          *(_BYTE *)v1278 = 0;
          v1291 = 0;
          v169 = operator new(0x30uLL);
          *v169 = &off_251349078;
          v169[1] = &v1275;
          v169[2] = &__len;
          v169[3] = &v1277;
          v169[4] = &v1278;
          v169[5] = &v1289;
          v1291 = v169;
          v1299 = 0;
          v170 = (void **)operator new(0x28uLL);
          *v170 = &off_251346A78;
          v170[1] = &v1284;
          v170[2] = &v1286;
          v170[3] = v1298;
          v170[4] = v1290;
          v1294 = v170;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
          v171 = v1294;
          if (v1294 == (void **)&v1292)
          {
            v171 = (void **)&v1292;
            v172 = 4;
          }
          else
          {
            if (!v1294)
              goto LABEL_212;
            v172 = 5;
          }
          (*((void (**)(void))*v171 + v172))();
LABEL_212:
          LODWORD(v1292) = 0;
          LODWORD(__b) = 0;
          if (!v1299)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
          v173 = v1299;
          if (v1299 == v1298)
          {
            v173 = v1298;
            v174 = 4;
          }
          else
          {
            if (!v1299)
              goto LABEL_218;
            v174 = 5;
          }
          (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_218:
          v175 = v1291;
          if (v1291 == v1290)
          {
            v175 = v1290;
            v176 = 4;
            goto LABEL_222;
          }
          if (v1291)
          {
            v176 = 5;
LABEL_222:
            (*(void (**)(void))(*v175 + 8 * v176))();
          }
          ++v163;
          v1278 = (int *)((char *)v1278 + 1);
          if ((unint64_t)(*a2)[6] <= v163)
            goto LABEL_1708;
        }
      }
      if (v1283 == 2)
      {
        v196 = v1285;
        if (v1285 - (_BYTE *)v1284 == 4)
        {
          v610 = *((int *)v1285 - 1);
          v611 = *((_QWORD *)v1287 - 1);
          v1285 -= 4;
          v1287 -= 8;
          v612 = (*a2)[6];
          if (v612)
          {
            LODWORD(v613) = 0;
            v614 = (*a2)[19];
            v615 = *(int **)(*(_QWORD *)a1 + 152);
            do
            {
              if (v611)
                bzero(v614, v611);
              if ((int)v610 >= 1)
              {
                v616 = 0;
                v617 = v615;
                do
                {
                  if (v611)
                  {
                    for (k = 0; k != v611; ++k)
                    {
                      v619 = *v617++;
                      *((_BYTE *)v614 + k) |= v619 != 0;
                    }
                  }
                  ++v616;
                }
                while (v616 != (_DWORD)v610);
              }
              v615 += v611 * v610;
              v614 = (int *)((char *)v614 + v611);
              v613 = (int)v613 + (int)v611;
            }
            while (v613 < (unint64_t)v612);
          }
          goto LABEL_1712;
        }
LABEL_834:
        v1277 = 0;
        v1277 = *((_DWORD *)v196 - 1);
        __len = 0;
        v620 = *((_QWORD *)v1287 - 1);
        v1285 = v196 - 4;
        v1287 -= 8;
        v1278 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v620;
        __b = (*a2)[19];
        v101 = v1292;
        v102 = v1294;
        v621 = (unint64_t)(*a2)[6];
        if (v1285 == v1284)
        {
          if (v621)
          {
            v754 = 0;
            v755 = (char *)__b;
            v756 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            v757 = __len;
            v1265 = v1278;
            v758 = v1277;
            do
            {
              v759 = 0;
              if ((v756 & 0x80000000) == 0)
              {
                v760 = v756;
                v761 = v754;
                do
                {
                  v762 = ldiv(v761, v101[v760]);
                  v761 = v762.quot;
                  v759 += (_QWORD)v102[v760--] * v762.rem;
                }
                while (v760 != -1);
              }
              if (v757)
                bzero(v755, v757);
              if (v758 >= 1)
              {
                v763 = 0;
                v764 = &v1265[(int)v759];
                do
                {
                  if (v757)
                  {
                    for (m = 0; m != v757; ++m)
                    {
                      v766 = *v764++;
                      v755[m] |= v766 != 0;
                    }
                  }
                  ++v763;
                }
                while (v763 != v758);
              }
              v755 += v757;
              v754 += v757;
            }
            while (v621 > v754);
          }
          goto LABEL_1708;
        }
        if (!v621)
          goto LABEL_1708;
        v622 = 0;
        v623 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
        while (1)
        {
          v1275 = 0;
          v624 = 0;
          if ((v623 & 0x80000000) == 0)
          {
            v625 = v623;
            v626 = v622;
            do
            {
              v627 = ldiv(v626, v101[v625]);
              v626 = v627.quot;
              v624 += (_QWORD)v102[v625--] * v627.rem;
            }
            while (v625 != -1);
          }
          v1275 = v624;
          if (__len)
            bzero(__b, __len);
          v1291 = 0;
          v628 = operator new(0x38uLL);
          *v628 = &off_2513490F8;
          v628[1] = &v1288;
          v628[2] = &v1278;
          v628[3] = &v1275;
          v628[4] = &__b;
          v628[5] = &v1277;
          v628[6] = &__len;
          v1291 = v628;
          v1299 = 0;
          v629 = (void **)operator new(0x28uLL);
          *v629 = &off_251346A78;
          v629[1] = &v1284;
          v629[2] = &v1286;
          v629[3] = v1298;
          v629[4] = v1290;
          v1294 = v629;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
          v630 = v1294;
          if (v1294 == (void **)&v1292)
          {
            v630 = (void **)&v1292;
            v631 = 4;
          }
          else
          {
            if (!v1294)
              goto LABEL_847;
            v631 = 5;
          }
          (*((void (**)(void))*v630 + v631))();
LABEL_847:
          LODWORD(v1292) = 0;
          v1289 = 0;
          if (!v1299)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
          v632 = v1299;
          if (v1299 == v1298)
          {
            v632 = v1298;
            v633 = 4;
          }
          else
          {
            if (!v1299)
              goto LABEL_853;
            v633 = 5;
          }
          (*(void (**)(void))(*v632 + 8 * v633))();
LABEL_853:
          v634 = v1291;
          if (v1291 == v1290)
          {
            v634 = v1290;
            v635 = 4;
            goto LABEL_857;
          }
          if (v1291)
          {
            v635 = 5;
LABEL_857:
            (*(void (**)(void))(*v634 + 8 * v635))();
          }
          __b = (char *)__b + __len;
          v622 += __len;
          if ((unint64_t)(*a2)[6] <= v622)
            goto LABEL_1708;
        }
      }
      if (v1283 != 5)
      {
        if (v1283 != 4)
          goto LABEL_1712;
        v196 = v1285;
        goto LABEL_834;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v540 = (*a2)[19];
      v101 = v1292;
      v102 = v1294;
      if (!(*a2)[6])
        goto LABEL_1708;
      v541 = 0;
      v542 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
      while (1)
      {
        LODWORD(__b) = 0;
        v543 = 0;
        if ((v542 & 0x80000000) == 0)
        {
          v544 = v542;
          v545 = v541;
          do
          {
            v546 = ldiv(v545, v101[v544]);
            v545 = v546.quot;
            v543 += (_QWORD)v102[v544--] * v546.rem;
          }
          while (v544 != -1);
        }
        LODWORD(__b) = v543;
        LOBYTE(v1277) = 0;
        v1291 = 0;
        v547 = operator new(0x28uLL);
        *v547 = &off_251349178;
        v547[1] = &v1289;
        v547[2] = &v1277;
        v547[3] = &__len;
        v547[4] = &__b;
        v1291 = v547;
        v1299 = 0;
        v548 = (void **)operator new(0x28uLL);
        *v548 = &off_251346A78;
        v548[1] = &v1284;
        v548[2] = &v1286;
        v548[3] = v1298;
        v548[4] = v1290;
        v1294 = v548;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
        v549 = v1294;
        if (v1294 == (void **)&v1292)
        {
          v549 = (void **)&v1292;
          v550 = 4;
        }
        else
        {
          if (!v1294)
            goto LABEL_724;
          v550 = 5;
        }
        (*((void (**)(void))*v549 + v550))();
LABEL_724:
        LODWORD(v1292) = 0;
        LODWORD(v1278) = 0;
        if (!v1299)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
        v551 = v1299;
        if (v1299 == v1298)
        {
          v551 = v1298;
          v552 = 4;
        }
        else
        {
          if (!v1299)
            goto LABEL_730;
          v552 = 5;
        }
        (*(void (**)(void))(*v551 + 8 * v552))();
LABEL_730:
        v553 = v1291;
        if (v1291 == v1290)
        {
          v553 = v1290;
          v554 = 4;
          goto LABEL_734;
        }
        if (v1291)
        {
          v554 = 5;
LABEL_734:
          (*(void (**)(void))(*v553 + 8 * v554))();
        }
        *(_BYTE *)v540 = v1277;
        v540 = (int *)((char *)v540 + 1);
        if ((unint64_t)(*a2)[6] <= ++v541)
          goto LABEL_1708;
      }
    case 2:
      v13 = *a2;
      v14 = (*a2)[7];
      switch((int)v14)
      {
        case 0:
          v15 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1295 = &unk_2513463C8;
          v1296 = mlx::core::allocator::free;
          v1297 = &v1295;
          mlx::core::array::set_data(a2, (uint64_t)v15, (uint64_t)&v1295);
          v16 = v1297;
          if (v1297 == &v1295)
          {
            v17 = 4;
            v16 = &v1295;
          }
          else
          {
            if (!v1297)
              goto LABEL_377;
            v17 = 5;
          }
          (*((void (**)(void))*v16 + v17))();
LABEL_377:
          v1281 = 0;
          v1282 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1281 = __p;
            operator delete(__p);
          }
          if (v1283 == 1)
          {
            v349 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v350 = (*a2)[6];
              if (v350)
              {
                v351 = 0;
                v352 = *(int *)v1284;
                v353 = (BOOL *)(*a2)[19];
                v354 = *(int **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v353 = 0;
                  if ((int)v352 >= 1)
                  {
                    v355 = 0;
                    v356 = v352 + 1;
                    v357 = v354;
                    do
                    {
                      v358 = *v357++;
                      v355 = v358 + v355 != 0;
                      --v356;
                    }
                    while (v356 > 1);
                    *v353 = v355;
                  }
                  v351 = (int *)((char *)v351 + 1);
                  ++v353;
                  v354 += v352;
                }
                while (v351 != v350);
              }
              goto LABEL_1712;
            }
            goto LABEL_641;
          }
          if (!v1283)
          {
            v46 = (*a2)[19];
            *(_BYTE *)v46 = 0;
            v298 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v298 < 1)
              goto LABEL_1712;
            v48 = 0;
            v299 = *(int **)(*(_QWORD *)a1 + 152);
            v300 = v298 + 1;
            do
            {
              v301 = *v299++;
              v48 = v301 + v48 != 0;
              --v300;
            }
            while (v300 > 1);
LABEL_62:
            *(_BYTE *)v46 = v48;
            goto LABEL_1712;
          }
          if ((v1283 & 0xFFFFFFFD) == 1)
          {
            v349 = v1285;
LABEL_641:
            v1289 = 0;
            v1289 = *((_DWORD *)v349 - 1);
            v1285 = v349 - 4;
            v1287 -= 8;
            v493 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1278 = (*a2)[19];
            __len = v493;
            v101 = v1292;
            v102 = v1294;
            v494 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v494)
              {
                v824 = 0;
                v825 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                v826 = (BOOL *)v1278;
                v1267 = __len;
                v827 = v1289;
                v828 = v1289 + 1;
                do
                {
                  v829 = 0;
                  if ((v825 & 0x80000000) == 0)
                  {
                    v830 = v825;
                    v831 = (int)v824;
                    do
                    {
                      v832 = ldiv(v831, v101[v830]);
                      v831 = v832.quot;
                      v829 += (_QWORD)v102[v830--] * v832.rem;
                    }
                    while (v830 != -1);
                  }
                  *v826 = 0;
                  if (v827 >= 1)
                  {
                    v833 = 0;
                    v834 = (int *)(v1267 + 4 * (int)v829);
                    v835 = v828;
                    do
                    {
                      v836 = *v834++;
                      v833 = v836 + v833 != 0;
                      --v835;
                    }
                    while (v835 > 1);
                    *v826 = v833;
                  }
                  v824 = (int *)((char *)v824 + 1);
                  ++v826;
                }
                while (v824 != v494);
              }
              goto LABEL_1708;
            }
            if (!v494)
              goto LABEL_1708;
            v495 = 0;
            v496 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1277 = 0;
              v497 = 0;
              if ((v496 & 0x80000000) == 0)
              {
                v498 = v496;
                v499 = v495;
                do
                {
                  v500 = ldiv(v499, v101[v498]);
                  v499 = v500.quot;
                  v497 += (_QWORD)v102[v498--] * v500.rem;
                }
                while (v498 != -1);
              }
              v1277 = v497;
              *(_BYTE *)v1278 = 0;
              v1291 = 0;
              v501 = operator new(0x30uLL);
              *v501 = &off_2513491F8;
              v501[1] = &v1275;
              v501[2] = &__len;
              v501[3] = &v1277;
              v501[4] = &v1278;
              v501[5] = &v1289;
              v1291 = v501;
              v1299 = 0;
              v502 = (void **)operator new(0x28uLL);
              *v502 = &off_251346A78;
              v502[1] = &v1284;
              v502[2] = &v1286;
              v502[3] = v1298;
              v502[4] = v1290;
              v1294 = v502;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v503 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v503 = (void **)&v1292;
                v504 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_652;
                v504 = 5;
              }
              (*((void (**)(void))*v503 + v504))();
LABEL_652:
              LODWORD(v1292) = 0;
              LODWORD(__b) = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
              v505 = v1299;
              if (v1299 == v1298)
              {
                v505 = v1298;
                v506 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_658;
                v506 = 5;
              }
              (*(void (**)(void))(*v505 + 8 * v506))();
LABEL_658:
              v507 = v1291;
              if (v1291 == v1290)
              {
                v507 = v1290;
                v508 = 4;
                goto LABEL_662;
              }
              if (v1291)
              {
                v508 = 5;
LABEL_662:
                (*(void (**)(void))(*v507 + 8 * v508))();
              }
              ++v495;
              v1278 = (int *)((char *)v1278 + 1);
              if ((unint64_t)(*a2)[6] <= v495)
                goto LABEL_1708;
            }
          }
          if (v1283 == 2)
          {
            v785 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v1026 = *((int *)v1285 - 1);
              v1027 = *((_QWORD *)v1287 - 1);
              v1285 -= 4;
              v1287 -= 8;
              v1028 = (*a2)[6];
              if (v1028)
              {
                LODWORD(v1029) = 0;
                v1030 = (*a2)[19];
                v1031 = *(int **)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1027)
                    bzero(v1030, v1027);
                  if ((int)v1026 >= 1)
                  {
                    v1032 = 0;
                    v1033 = v1031;
                    do
                    {
                      if (v1027)
                      {
                        for (n = 0; n != v1027; ++n)
                        {
                          v1035 = *v1033++;
                          *((_BYTE *)v1030 + n) = *((unsigned __int8 *)v1030 + n) + v1035 != 0;
                        }
                      }
                      ++v1032;
                    }
                    while (v1032 != (_DWORD)v1026);
                  }
                  v1031 += v1027 * v1026;
                  v1030 = (int *)((char *)v1030 + v1027);
                  v1029 = (int)v1029 + (int)v1027;
                }
                while (v1029 < (unint64_t)v1028);
              }
              goto LABEL_1712;
            }
LABEL_1409:
            v1277 = 0;
            v1277 = *((_DWORD *)v785 - 1);
            __len = 0;
            v1036 = *((_QWORD *)v1287 - 1);
            v1285 = v785 - 4;
            v1287 -= 8;
            v1278 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1036;
            __b = (*a2)[19];
            v101 = v1292;
            v102 = v1294;
            v1037 = (unint64_t)(*a2)[6];
            if (v1285 == v1284)
            {
              if (v1037)
              {
                v1202 = 0;
                v1203 = (unsigned __int8 *)__b;
                v1204 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                v1205 = __len;
                v1272 = v1278;
                v1206 = v1277;
                do
                {
                  v1207 = 0;
                  if ((v1204 & 0x80000000) == 0)
                  {
                    v1208 = v1204;
                    v1209 = v1202;
                    do
                    {
                      v1210 = ldiv(v1209, v101[v1208]);
                      v1209 = v1210.quot;
                      v1207 += (_QWORD)v102[v1208--] * v1210.rem;
                    }
                    while (v1208 != -1);
                  }
                  if (v1205)
                    bzero(v1203, v1205);
                  if (v1206 >= 1)
                  {
                    v1211 = 0;
                    v1212 = &v1272[(int)v1207];
                    do
                    {
                      if (v1205)
                      {
                        for (ii = 0; ii != v1205; ++ii)
                        {
                          v1214 = *v1212++;
                          v1203[ii] = v1203[ii] + v1214 != 0;
                        }
                      }
                      ++v1211;
                    }
                    while (v1211 != v1206);
                  }
                  v1203 += v1205;
                  v1202 += v1205;
                }
                while (v1037 > v1202);
              }
              goto LABEL_1708;
            }
            if (!v1037)
              goto LABEL_1708;
            v1038 = 0;
            v1039 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1275 = 0;
              v1040 = 0;
              if ((v1039 & 0x80000000) == 0)
              {
                v1041 = v1039;
                v1042 = v1038;
                do
                {
                  v1043 = ldiv(v1042, v101[v1041]);
                  v1042 = v1043.quot;
                  v1040 += (_QWORD)v102[v1041--] * v1043.rem;
                }
                while (v1041 != -1);
              }
              v1275 = v1040;
              if (__len)
                bzero(__b, __len);
              v1291 = 0;
              v1044 = operator new(0x38uLL);
              *v1044 = &off_251349278;
              v1044[1] = &v1288;
              v1044[2] = &v1278;
              v1044[3] = &v1275;
              v1044[4] = &__b;
              v1044[5] = &v1277;
              v1044[6] = &__len;
              v1291 = v1044;
              v1299 = 0;
              v1045 = (void **)operator new(0x28uLL);
              *v1045 = &off_251346A78;
              v1045[1] = &v1284;
              v1045[2] = &v1286;
              v1045[3] = v1298;
              v1045[4] = v1290;
              v1294 = v1045;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v1046 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v1046 = (void **)&v1292;
                v1047 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_1422;
                v1047 = 5;
              }
              (*((void (**)(void))*v1046 + v1047))();
LABEL_1422:
              LODWORD(v1292) = 0;
              v1289 = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
              v1048 = v1299;
              if (v1299 == v1298)
              {
                v1048 = v1298;
                v1049 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_1428;
                v1049 = 5;
              }
              (*(void (**)(void))(*v1048 + 8 * v1049))();
LABEL_1428:
              v1050 = v1291;
              if (v1291 == v1290)
              {
                v1050 = v1290;
                v1051 = 4;
                goto LABEL_1432;
              }
              if (v1291)
              {
                v1051 = 5;
LABEL_1432:
                (*(void (**)(void))(*v1050 + 8 * v1051))();
              }
              __b = (char *)__b + __len;
              v1038 += __len;
              if ((unint64_t)(*a2)[6] <= v1038)
                goto LABEL_1708;
            }
          }
          if (v1283 != 5)
          {
            if (v1283 != 4)
              goto LABEL_1712;
            v785 = v1285;
            goto LABEL_1409;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v971 = (*a2)[19];
          v101 = v1292;
          v102 = v1294;
          if (!(*a2)[6])
            goto LABEL_1708;
          v972 = 0;
          v973 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v974 = 0;
            if ((v973 & 0x80000000) == 0)
            {
              v975 = v973;
              v976 = v972;
              do
              {
                v977 = ldiv(v976, v101[v975]);
                v976 = v977.quot;
                v974 += (_QWORD)v102[v975--] * v977.rem;
              }
              while (v975 != -1);
            }
            LODWORD(__b) = v974;
            LOBYTE(v1277) = 0;
            v1291 = 0;
            v978 = operator new(0x28uLL);
            *v978 = &off_2513492F8;
            v978[1] = &v1289;
            v978[2] = &v1277;
            v978[3] = &__len;
            v978[4] = &__b;
            v1291 = v978;
            v1299 = 0;
            v979 = (void **)operator new(0x28uLL);
            *v979 = &off_251346A78;
            v979[1] = &v1284;
            v979[2] = &v1286;
            v979[3] = v1298;
            v979[4] = v1290;
            v1294 = v979;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
            v980 = v1294;
            if (v1294 == (void **)&v1292)
            {
              v980 = (void **)&v1292;
              v981 = 4;
            }
            else
            {
              if (!v1294)
                goto LABEL_1321;
              v981 = 5;
            }
            (*((void (**)(void))*v980 + v981))();
LABEL_1321:
            LODWORD(v1292) = 0;
            LODWORD(v1278) = 0;
            if (!v1299)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
            v982 = v1299;
            if (v1299 == v1298)
            {
              v982 = v1298;
              v983 = 4;
            }
            else
            {
              if (!v1299)
                goto LABEL_1327;
              v983 = 5;
            }
            (*(void (**)(void))(*v982 + 8 * v983))();
LABEL_1327:
            v984 = v1291;
            if (v1291 == v1290)
            {
              v984 = v1290;
              v985 = 4;
              goto LABEL_1331;
            }
            if (v1291)
            {
              v985 = 5;
LABEL_1331:
              (*(void (**)(void))(*v984 + 8 * v985))();
            }
            *(_BYTE *)v971 = v1277;
            v971 = (int *)((char *)v971 + 1);
            if ((unint64_t)(*a2)[6] <= ++v972)
              goto LABEL_1708;
          }
        case 1:
          v207 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1295 = &unk_2513463C8;
          v1296 = mlx::core::allocator::free;
          v1297 = &v1295;
          mlx::core::array::set_data(a2, (uint64_t)v207, (uint64_t)&v1295);
          v208 = v1297;
          if (v1297 == &v1295)
          {
            v209 = 4;
            v208 = &v1295;
          }
          else
          {
            if (!v1297)
              goto LABEL_387;
            v209 = 5;
          }
          (*((void (**)(void))*v208 + v209))();
LABEL_387:
          v1281 = 0;
          v1282 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1281 = __p;
            operator delete(__p);
          }
          if (v1283 == 1)
          {
            v359 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              if ((*a2)[6])
              {
                v360 = 0;
                v361 = *(int *)v1284;
                v362 = (*a2)[19];
                v363 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *(_BYTE *)v362 = 0;
                  if ((int)v361 >= 1)
                  {
                    v364 = 0;
                    v365 = v361 + 1;
                    v366 = v363;
                    do
                    {
                      v367 = *v366;
                      v366 += 4;
                      v364 += v367;
                      *(_BYTE *)v362 = v364;
                      --v365;
                    }
                    while (v365 > 1);
                  }
                  ++v360;
                  v362 = (int *)((char *)v362 + 1);
                  v363 += 4 * v361;
                }
                while ((unint64_t)(*a2)[6] > v360);
              }
              goto LABEL_1712;
            }
            goto LABEL_667;
          }
          if (!v1283)
          {
            v302 = (*a2)[19];
            *(_BYTE *)v302 = 0;
            v303 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v303 >= 1)
            {
              v304 = 0;
              v305 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v306 = v303 + 1;
              do
              {
                v307 = *v305;
                v305 += 4;
                v304 += v307;
                *(_BYTE *)v302 = v304;
                --v306;
              }
              while (v306 > 1);
            }
            goto LABEL_1712;
          }
          if ((v1283 & 0xFFFFFFFD) == 1)
          {
            v359 = v1285;
LABEL_667:
            v1289 = 0;
            v1289 = *((_DWORD *)v359 - 1);
            v1285 = v359 - 4;
            v1287 -= 8;
            v509 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1278 = (*a2)[19];
            __len = v509;
            v101 = v1292;
            v102 = v1294;
            v510 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v510)
              {
                v837 = 0;
                v838 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                do
                {
                  v839 = 0;
                  if ((v838 & 0x80000000) == 0)
                  {
                    v840 = v838;
                    v841 = v837;
                    do
                    {
                      v842 = ldiv(v841, v101[v840]);
                      v841 = v842.quot;
                      v839 += (_QWORD)v102[v840--] * v842.rem;
                    }
                    while (v840 != -1);
                  }
                  *(_BYTE *)v1278 = 0;
                  v843 = v1278;
                  if (v1289 >= 1)
                  {
                    v844 = (unsigned __int8 *)(__len + 4 * (int)v839);
                    v845 = *(unsigned __int8 *)v1278;
                    v846 = v1289 + 1;
                    do
                    {
                      v847 = *v844;
                      v844 += 4;
                      v845 += v847;
                      *(_BYTE *)v843 = v845;
                      --v846;
                    }
                    while (v846 > 1);
                    v843 = v1278;
                  }
                  ++v837;
                  v1278 = (int *)((char *)v843 + 1);
                }
                while ((unint64_t)(*a2)[6] > v837);
              }
              goto LABEL_1708;
            }
            if (!v510)
              goto LABEL_1708;
            v511 = 0;
            v512 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1277 = 0;
              v513 = 0;
              if ((v512 & 0x80000000) == 0)
              {
                v514 = v512;
                v515 = v511;
                do
                {
                  v516 = ldiv(v515, v101[v514]);
                  v515 = v516.quot;
                  v513 += (_QWORD)v102[v514--] * v516.rem;
                }
                while (v514 != -1);
              }
              v1277 = v513;
              *(_BYTE *)v1278 = 0;
              v1291 = 0;
              v517 = operator new(0x30uLL);
              *v517 = &off_251349378;
              v517[1] = &v1275;
              v517[2] = &__len;
              v517[3] = &v1277;
              v517[4] = &v1278;
              v517[5] = &v1289;
              v1291 = v517;
              v1299 = 0;
              v518 = (void **)operator new(0x28uLL);
              *v518 = &off_251346A78;
              v518[1] = &v1284;
              v518[2] = &v1286;
              v518[3] = v1298;
              v518[4] = v1290;
              v1294 = v518;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v519 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v519 = (void **)&v1292;
                v520 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_678;
                v520 = 5;
              }
              (*((void (**)(void))*v519 + v520))();
LABEL_678:
              LODWORD(v1292) = 0;
              LODWORD(__b) = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
              v521 = v1299;
              if (v1299 == v1298)
              {
                v521 = v1298;
                v522 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_684;
                v522 = 5;
              }
              (*(void (**)(void))(*v521 + 8 * v522))();
LABEL_684:
              v523 = v1291;
              if (v1291 == v1290)
              {
                v523 = v1290;
                v524 = 4;
                goto LABEL_688;
              }
              if (v1291)
              {
                v524 = 5;
LABEL_688:
                (*(void (**)(void))(*v523 + 8 * v524))();
              }
              ++v511;
              v1278 = (int *)((char *)v1278 + 1);
              if ((unint64_t)(*a2)[6] <= v511)
                goto LABEL_1708;
            }
          }
          if (v1283 == 2)
          {
            v786 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v1052 = *((int *)v1285 - 1);
              v1053 = *((_QWORD *)v1287 - 1);
              v1285 -= 4;
              v1287 -= 8;
              if ((*a2)[6])
              {
                LODWORD(v1054) = 0;
                v1055 = (*a2)[19];
                v1056 = *(char **)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1053)
                    bzero(v1055, v1053);
                  if ((int)v1052 >= 1)
                  {
                    v1057 = 0;
                    v1058 = v1056;
                    do
                    {
                      if (v1053)
                      {
                        for (jj = 0; jj != v1053; ++jj)
                        {
                          v1060 = *v1058;
                          v1058 += 4;
                          *((_BYTE *)v1055 + jj) += v1060;
                        }
                      }
                      ++v1057;
                    }
                    while (v1057 != (_DWORD)v1052);
                  }
                  v1056 += 4 * v1053 * v1052;
                  v1055 = (int *)((char *)v1055 + v1053);
                  v1054 = (int)v1054 + (int)v1053;
                }
                while (v1054 < (unint64_t)(*a2)[6]);
              }
              goto LABEL_1712;
            }
LABEL_1448:
            v1277 = 0;
            v1277 = *((_DWORD *)v786 - 1);
            __len = 0;
            v1061 = *((_QWORD *)v1287 - 1);
            v1285 = v786 - 4;
            v1287 -= 8;
            v1278 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1061;
            __b = (*a2)[19];
            v101 = v1292;
            v102 = v1294;
            v1062 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v1062)
              {
                v1215 = 0;
                v1216 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                do
                {
                  v1217 = 0;
                  if ((v1216 & 0x80000000) != 0)
                  {
                    v1220 = a2;
                  }
                  else
                  {
                    v1218 = v1216;
                    v1219 = v1215;
                    v1220 = a2;
                    do
                    {
                      v1221 = ldiv(v1219, v101[v1218]);
                      v1219 = v1221.quot;
                      v1217 += (_QWORD)v102[v1218--] * v1221.rem;
                    }
                    while (v1218 != -1);
                  }
                  v1222 = __b;
                  if (__len)
                  {
                    bzero(__b, __len);
                    v1223 = __len;
                    v1222 = __b;
                  }
                  else
                  {
                    v1223 = 0;
                  }
                  v1224 = v1277;
                  if (v1277 >= 1)
                  {
                    v1225 = 0;
                    v1226 = &v1278[(int)v1217];
                    do
                    {
                      v1227 = v1223;
                      for (kk = v1222; v1227; --v1227)
                      {
                        v1229 = *(_BYTE *)v1226++;
                        *kk++ += v1229;
                      }
                      ++v1225;
                    }
                    while (v1225 != v1224);
                    v1223 = __len;
                    v1222 = __b;
                  }
                  __b = &v1222[v1223];
                  v1215 += v1223;
                }
                while ((unint64_t)(*v1220)[6] > v1215);
              }
              goto LABEL_1708;
            }
            if (!v1062)
              goto LABEL_1708;
            v1063 = 0;
            v1064 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1275 = 0;
              v1065 = 0;
              if ((v1064 & 0x80000000) == 0)
              {
                v1066 = v1064;
                v1067 = v1063;
                do
                {
                  v1068 = ldiv(v1067, v101[v1066]);
                  v1067 = v1068.quot;
                  v1065 += (_QWORD)v102[v1066--] * v1068.rem;
                }
                while (v1066 != -1);
              }
              v1275 = v1065;
              if (__len)
                bzero(__b, __len);
              v1291 = 0;
              v1069 = operator new(0x38uLL);
              *v1069 = &off_2513493F8;
              v1069[1] = &v1288;
              v1069[2] = &v1278;
              v1069[3] = &v1275;
              v1069[4] = &__b;
              v1069[5] = &v1277;
              v1069[6] = &__len;
              v1291 = v1069;
              v1299 = 0;
              v1070 = (void **)operator new(0x28uLL);
              *v1070 = &off_251346A78;
              v1070[1] = &v1284;
              v1070[2] = &v1286;
              v1070[3] = v1298;
              v1070[4] = v1290;
              v1294 = v1070;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v1071 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v1071 = (void **)&v1292;
                v1072 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_1461;
                v1072 = 5;
              }
              (*((void (**)(void))*v1071 + v1072))();
LABEL_1461:
              LODWORD(v1292) = 0;
              v1289 = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
              v1073 = v1299;
              if (v1299 == v1298)
              {
                v1073 = v1298;
                v1074 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_1467;
                v1074 = 5;
              }
              (*(void (**)(void))(*v1073 + 8 * v1074))();
LABEL_1467:
              v1075 = v1291;
              if (v1291 == v1290)
              {
                v1075 = v1290;
                v1076 = 4;
                goto LABEL_1471;
              }
              if (v1291)
              {
                v1076 = 5;
LABEL_1471:
                (*(void (**)(void))(*v1075 + 8 * v1076))();
              }
              __b = (char *)__b + __len;
              v1063 += __len;
              if ((unint64_t)(*a2)[6] <= v1063)
                goto LABEL_1708;
            }
          }
          if (v1283 != 5)
          {
            if (v1283 != 4)
              goto LABEL_1712;
            v786 = v1285;
            goto LABEL_1448;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v986 = (*a2)[19];
          v101 = v1292;
          v102 = v1294;
          if (!(*a2)[6])
            goto LABEL_1708;
          v987 = 0;
          v988 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v989 = 0;
            if ((v988 & 0x80000000) == 0)
            {
              v990 = v988;
              v991 = v987;
              do
              {
                v992 = ldiv(v991, v101[v990]);
                v991 = v992.quot;
                v989 += (_QWORD)v102[v990--] * v992.rem;
              }
              while (v990 != -1);
            }
            LODWORD(__b) = v989;
            LOBYTE(v1277) = 0;
            v1291 = 0;
            v993 = operator new(0x28uLL);
            *v993 = &off_251349478;
            v993[1] = &v1289;
            v993[2] = &v1277;
            v993[3] = &__len;
            v993[4] = &__b;
            v1291 = v993;
            v1299 = 0;
            v994 = (void **)operator new(0x28uLL);
            *v994 = &off_251346A78;
            v994[1] = &v1284;
            v994[2] = &v1286;
            v994[3] = v1298;
            v994[4] = v1290;
            v1294 = v994;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
            v995 = v1294;
            if (v1294 == (void **)&v1292)
            {
              v995 = (void **)&v1292;
              v996 = 4;
            }
            else
            {
              if (!v1294)
                goto LABEL_1344;
              v996 = 5;
            }
            (*((void (**)(void))*v995 + v996))();
LABEL_1344:
            LODWORD(v1292) = 0;
            LODWORD(v1278) = 0;
            if (!v1299)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
            v997 = v1299;
            if (v1299 == v1298)
            {
              v997 = v1298;
              v998 = 4;
            }
            else
            {
              if (!v1299)
                goto LABEL_1350;
              v998 = 5;
            }
            (*(void (**)(void))(*v997 + 8 * v998))();
LABEL_1350:
            v999 = v1291;
            if (v1291 == v1290)
            {
              v999 = v1290;
              v1000 = 4;
              goto LABEL_1354;
            }
            if (v1291)
            {
              v1000 = 5;
LABEL_1354:
              (*(void (**)(void))(*v999 + 8 * v1000))();
            }
            *(_BYTE *)v986 = v1277;
            v986 = (int *)((char *)v986 + 1);
            if ((unint64_t)(*a2)[6] <= ++v987)
              goto LABEL_1708;
          }
        case 2:
          v201 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1295 = &unk_2513463C8;
          v1296 = mlx::core::allocator::free;
          v1297 = &v1295;
          mlx::core::array::set_data(a2, (uint64_t)v201, (uint64_t)&v1295);
          v202 = v1297;
          if (v1297 == &v1295)
          {
            v203 = 4;
            v202 = &v1295;
          }
          else
          {
            if (!v1297)
              goto LABEL_357;
            v203 = 5;
          }
          (*((void (**)(void))*v202 + v203))();
LABEL_357:
          v1281 = 0;
          v1282 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1281 = __p;
            operator delete(__p);
          }
          if (v1283 == 1)
          {
            v330 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v331 = (*a2)[6];
              if (v331)
              {
                v332 = 0;
                v333 = *(int *)v1284;
                v334 = (*a2)[19];
                v335 = *(int **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v334 = 0;
                  if ((int)v333 >= 1)
                  {
                    v336 = 0;
                    v337 = v333 + 1;
                    v338 = v335;
                    do
                    {
                      v339 = *v338++;
                      v336 += v339;
                      *v334 = v336;
                      --v337;
                    }
                    while (v337 > 1);
                  }
                  v332 = (int *)((char *)v332 + 1);
                  ++v334;
                  v335 += v333;
                }
                while (v332 != v331);
              }
              goto LABEL_1712;
            }
            goto LABEL_566;
          }
          if (!v1283)
          {
            v286 = (*a2)[19];
            *v286 = 0;
            v287 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v287 >= 1)
            {
              v288 = 0;
              v289 = *(int **)(*(_QWORD *)a1 + 152);
              v290 = v287 + 1;
              do
              {
                v291 = *v289++;
                v288 += v291;
                *v286 = v288;
                --v290;
              }
              while (v290 > 1);
            }
            goto LABEL_1712;
          }
          if ((v1283 & 0xFFFFFFFD) == 1)
          {
            v330 = v1285;
LABEL_566:
            v1289 = 0;
            v1289 = *((_DWORD *)v330 - 1);
            v1285 = v330 - 4;
            v1287 -= 8;
            v446 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1278 = (*a2)[19];
            __len = v446;
            v101 = v1292;
            v102 = v1294;
            v447 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v447)
              {
                v801 = 0;
                v802 = v1278;
                v803 = __len;
                v804 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                do
                {
                  v805 = 0;
                  if ((v804 & 0x80000000) == 0)
                  {
                    v806 = v804;
                    v807 = (int)v801;
                    do
                    {
                      v808 = ldiv(v807, v101[v806]);
                      v807 = v808.quot;
                      v805 += (_QWORD)v102[v806--] * v808.rem;
                    }
                    while (v806 != -1);
                  }
                  *v802 = 0;
                  if (v1289 >= 1)
                  {
                    v809 = 0;
                    v810 = (int *)(v803 + 4 * (int)v805);
                    v811 = v1289 + 1;
                    do
                    {
                      v812 = *v810++;
                      v809 += v812;
                      *v802 = v809;
                      --v811;
                    }
                    while (v811 > 1);
                  }
                  v801 = (int *)((char *)v801 + 1);
                  ++v802;
                }
                while (v801 != v447);
              }
              goto LABEL_1708;
            }
            if (!v447)
              goto LABEL_1708;
            v448 = 0;
            v449 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1277 = 0;
              v450 = 0;
              if ((v449 & 0x80000000) == 0)
              {
                v451 = v449;
                v452 = v448;
                do
                {
                  v453 = ldiv(v452, v101[v451]);
                  v452 = v453.quot;
                  v450 += (_QWORD)v102[v451--] * v453.rem;
                }
                while (v451 != -1);
              }
              v1277 = v450;
              *v1278 = 0;
              v1291 = 0;
              v454 = operator new(0x30uLL);
              *v454 = &off_2513494F8;
              v454[1] = &v1275;
              v454[2] = &__len;
              v454[3] = &v1277;
              v454[4] = &v1278;
              v454[5] = &v1289;
              v1291 = v454;
              v1299 = 0;
              v455 = (void **)operator new(0x28uLL);
              *v455 = &off_251346A78;
              v455[1] = &v1284;
              v455[2] = &v1286;
              v455[3] = v1298;
              v455[4] = v1290;
              v1294 = v455;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v456 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v456 = (void **)&v1292;
                v457 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_577;
                v457 = 5;
              }
              (*((void (**)(void))*v456 + v457))();
LABEL_577:
              LODWORD(v1292) = 0;
              LODWORD(__b) = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
              v458 = v1299;
              if (v1299 == v1298)
              {
                v458 = v1298;
                v459 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_583;
                v459 = 5;
              }
              (*(void (**)(void))(*v458 + 8 * v459))();
LABEL_583:
              v460 = v1291;
              if (v1291 == v1290)
              {
                v460 = v1290;
                v461 = 4;
                goto LABEL_587;
              }
              if (v1291)
              {
                v461 = 5;
LABEL_587:
                (*(void (**)(void))(*v460 + 8 * v461))();
              }
              ++v448;
              ++v1278;
              if ((unint64_t)(*a2)[6] <= v448)
                goto LABEL_1708;
            }
          }
          if (v1283 == 2)
          {
            v783 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v930 = *((int *)v1285 - 1);
              v931 = *((_QWORD *)v1287 - 1);
              v1285 -= 4;
              v1287 -= 8;
              v932 = (*a2)[6];
              if (v932)
              {
                LODWORD(v933) = 0;
                v934 = (*a2)[19];
                v935 = *(int **)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v931)
                    bzero(v934, 4 * v931);
                  if ((int)v930 >= 1)
                  {
                    v936 = 0;
                    v937 = v935;
                    do
                    {
                      if (v931)
                      {
                        for (mm = 0; mm != v931; ++mm)
                        {
                          v939 = *v937++;
                          v934[mm] += v939;
                        }
                      }
                      ++v936;
                    }
                    while (v936 != (_DWORD)v930);
                  }
                  v935 += v931 * v930;
                  v934 += v931;
                  v933 = (int)v933 + (int)v931;
                }
                while (v933 < (unint64_t)v932);
              }
              goto LABEL_1712;
            }
LABEL_1262:
            v1277 = 0;
            v1277 = *((_DWORD *)v783 - 1);
            __len = 0;
            v940 = *((_QWORD *)v1287 - 1);
            v1285 = v783 - 4;
            v1287 -= 8;
            v1278 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v940;
            __b = (*a2)[19];
            v101 = v1292;
            v102 = v1294;
            v941 = (unint64_t)(*a2)[6];
            if (v1285 == v1284)
            {
              if (v941)
              {
                v1173 = 0;
                v1174 = (char *)__b;
                v1175 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                v1176 = __len;
                v1271 = v1278;
                v1177 = 4 * __len;
                do
                {
                  v1178 = 0;
                  if ((v1175 & 0x80000000) == 0)
                  {
                    v1179 = v1175;
                    v1180 = v1173;
                    do
                    {
                      v1181 = ldiv(v1180, v101[v1179]);
                      v1180 = v1181.quot;
                      v1178 += (_QWORD)v102[v1179--] * v1181.rem;
                    }
                    while (v1179 != -1);
                  }
                  if (v1176)
                    bzero(v1174, v1177);
                  v1182 = v1277;
                  if (v1277 >= 1)
                  {
                    v1183 = 0;
                    v1184 = &v1271[(int)v1178];
                    do
                    {
                      if (v1176)
                      {
                        for (nn = 0; nn != v1176; ++nn)
                        {
                          v1186 = *v1184++;
                          *(_DWORD *)&v1174[4 * nn] += v1186;
                        }
                      }
                      ++v1183;
                    }
                    while (v1183 != v1182);
                  }
                  v1174 += v1177;
                  v1173 += v1176;
                }
                while (v941 > v1173);
              }
              goto LABEL_1708;
            }
            if (!v941)
              goto LABEL_1708;
            v942 = 0;
            v943 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1275 = 0;
              v944 = 0;
              if ((v943 & 0x80000000) == 0)
              {
                v945 = v943;
                v946 = v942;
                do
                {
                  v947 = ldiv(v946, v101[v945]);
                  v946 = v947.quot;
                  v944 += (_QWORD)v102[v945--] * v947.rem;
                }
                while (v945 != -1);
              }
              v1275 = v944;
              if (__len)
                bzero(__b, 4 * __len);
              v1291 = 0;
              v948 = operator new(0x38uLL);
              *v948 = &off_251349578;
              v948[1] = &v1288;
              v948[2] = &v1278;
              v948[3] = &v1275;
              v948[4] = &__b;
              v948[5] = &v1277;
              v948[6] = &__len;
              v1291 = v948;
              v1299 = 0;
              v949 = (void **)operator new(0x28uLL);
              *v949 = &off_251346A78;
              v949[1] = &v1284;
              v949[2] = &v1286;
              v949[3] = v1298;
              v949[4] = v1290;
              v1294 = v949;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v950 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v950 = (void **)&v1292;
                v951 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_1275;
                v951 = 5;
              }
              (*((void (**)(void))*v950 + v951))();
LABEL_1275:
              LODWORD(v1292) = 0;
              v1289 = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
              v952 = v1299;
              if (v1299 == v1298)
              {
                v952 = v1298;
                v953 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_1281;
                v953 = 5;
              }
              (*(void (**)(void))(*v952 + 8 * v953))();
LABEL_1281:
              v954 = v1291;
              if (v1291 == v1290)
              {
                v954 = v1290;
                v955 = 4;
                goto LABEL_1285;
              }
              if (v1291)
              {
                v955 = 5;
LABEL_1285:
                (*(void (**)(void))(*v954 + 8 * v955))();
              }
              __b = (char *)__b + 4 * __len;
              v942 += __len;
              if ((unint64_t)(*a2)[6] <= v942)
                goto LABEL_1708;
            }
          }
          if (v1283 != 5)
          {
            if (v1283 != 4)
              goto LABEL_1712;
            v783 = v1285;
            goto LABEL_1262;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v915 = (*a2)[19];
          v101 = v1292;
          v102 = v1294;
          if (!(*a2)[6])
            goto LABEL_1708;
          v916 = 0;
          v917 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v918 = 0;
            if ((v917 & 0x80000000) == 0)
            {
              v919 = v917;
              v920 = v916;
              do
              {
                v921 = ldiv(v920, v101[v919]);
                v920 = v921.quot;
                v918 += (_QWORD)v102[v919--] * v921.rem;
              }
              while (v919 != -1);
            }
            LODWORD(__b) = v918;
            v1289 = 0;
            v1291 = 0;
            v922 = operator new(0x28uLL);
            *v922 = &off_2513495F8;
            v922[1] = &v1277;
            v922[2] = &v1289;
            v922[3] = &__len;
            v922[4] = &__b;
            v1291 = v922;
            v1299 = 0;
            v923 = (void **)operator new(0x28uLL);
            *v923 = &off_251346A78;
            v923[1] = &v1284;
            v923[2] = &v1286;
            v923[3] = v1298;
            v923[4] = v1290;
            v1294 = v923;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
            v924 = v1294;
            if (v1294 == (void **)&v1292)
            {
              v924 = (void **)&v1292;
              v925 = 4;
            }
            else
            {
              if (!v1294)
                goto LABEL_1236;
              v925 = 5;
            }
            (*((void (**)(void))*v924 + v925))();
LABEL_1236:
            LODWORD(v1292) = 0;
            LODWORD(v1278) = 0;
            if (!v1299)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
            v926 = v1299;
            if (v1299 == v1298)
            {
              v926 = v1298;
              v927 = 4;
            }
            else
            {
              if (!v1299)
                goto LABEL_1242;
              v927 = 5;
            }
            (*(void (**)(void))(*v926 + 8 * v927))();
LABEL_1242:
            v928 = v1291;
            if (v1291 == v1290)
            {
              v928 = v1290;
              v929 = 4;
              goto LABEL_1246;
            }
            if (v1291)
            {
              v929 = 5;
LABEL_1246:
              (*(void (**)(void))(*v928 + 8 * v929))();
            }
            *v915++ = v1289;
            if ((unint64_t)(*a2)[6] <= ++v916)
              goto LABEL_1708;
          }
        case 3:
          v204 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1295 = &unk_2513463C8;
          v1296 = mlx::core::allocator::free;
          v1297 = &v1295;
          mlx::core::array::set_data(a2, (uint64_t)v204, (uint64_t)&v1295);
          v205 = v1297;
          if (v1297 == &v1295)
          {
            v206 = 4;
            v205 = &v1295;
          }
          else
          {
            if (!v1297)
              goto LABEL_367;
            v206 = 5;
          }
          (*((void (**)(void))*v205 + v206))();
LABEL_367:
          v1281 = 0;
          v1282 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1281 = __p;
            operator delete(__p);
          }
          if (v1283 == 1)
          {
            v340 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              if ((*a2)[6])
              {
                v341 = 0;
                v342 = *(int *)v1284;
                v343 = (*a2)[19];
                v344 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
                do
                {
                  *(_BYTE *)v343 = 0;
                  if ((int)v342 >= 1)
                  {
                    v345 = 0;
                    v346 = v342 + 1;
                    v347 = v344;
                    do
                    {
                      v348 = *v347;
                      v347 += 4;
                      v345 += v348;
                      *(_BYTE *)v343 = v345;
                      --v346;
                    }
                    while (v346 > 1);
                  }
                  ++v341;
                  v343 = (int *)((char *)v343 + 1);
                  v344 += 4 * v342;
                }
                while ((unint64_t)(*a2)[6] > v341);
              }
              goto LABEL_1712;
            }
            goto LABEL_592;
          }
          if (!v1283)
          {
            v292 = (*a2)[19];
            *(_BYTE *)v292 = 0;
            v293 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v293 >= 1)
            {
              v294 = 0;
              v295 = *(unsigned __int8 **)(*(_QWORD *)a1 + 152);
              v296 = v293 + 1;
              do
              {
                v297 = *v295;
                v295 += 4;
                v294 += v297;
                *(_BYTE *)v292 = v294;
                --v296;
              }
              while (v296 > 1);
            }
            goto LABEL_1712;
          }
          if ((v1283 & 0xFFFFFFFD) == 1)
          {
            v340 = v1285;
LABEL_592:
            v1289 = 0;
            v1289 = *((_DWORD *)v340 - 1);
            v1285 = v340 - 4;
            v1287 -= 8;
            v462 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1278 = (*a2)[19];
            __len = v462;
            v101 = v1292;
            v102 = v1294;
            v463 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v463)
              {
                v813 = 0;
                v814 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                do
                {
                  v815 = 0;
                  if ((v814 & 0x80000000) == 0)
                  {
                    v816 = v814;
                    v817 = v813;
                    do
                    {
                      v818 = ldiv(v817, v101[v816]);
                      v817 = v818.quot;
                      v815 += (_QWORD)v102[v816--] * v818.rem;
                    }
                    while (v816 != -1);
                  }
                  *(_BYTE *)v1278 = 0;
                  v819 = v1278;
                  if (v1289 >= 1)
                  {
                    v820 = (unsigned __int8 *)(__len + 4 * (int)v815);
                    v821 = *(unsigned __int8 *)v1278;
                    v822 = v1289 + 1;
                    do
                    {
                      v823 = *v820;
                      v820 += 4;
                      v821 += v823;
                      *(_BYTE *)v819 = v821;
                      --v822;
                    }
                    while (v822 > 1);
                    v819 = v1278;
                  }
                  ++v813;
                  v1278 = (int *)((char *)v819 + 1);
                }
                while ((unint64_t)(*a2)[6] > v813);
              }
              goto LABEL_1708;
            }
            if (!v463)
              goto LABEL_1708;
            v464 = 0;
            v465 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1277 = 0;
              v466 = 0;
              if ((v465 & 0x80000000) == 0)
              {
                v467 = v465;
                v468 = v464;
                do
                {
                  v469 = ldiv(v468, v101[v467]);
                  v468 = v469.quot;
                  v466 += (_QWORD)v102[v467--] * v469.rem;
                }
                while (v467 != -1);
              }
              v1277 = v466;
              *(_BYTE *)v1278 = 0;
              v1291 = 0;
              v470 = operator new(0x30uLL);
              *v470 = &off_251349678;
              v470[1] = &v1275;
              v470[2] = &__len;
              v470[3] = &v1277;
              v470[4] = &v1278;
              v470[5] = &v1289;
              v1291 = v470;
              v1299 = 0;
              v471 = (void **)operator new(0x28uLL);
              *v471 = &off_251346A78;
              v471[1] = &v1284;
              v471[2] = &v1286;
              v471[3] = v1298;
              v471[4] = v1290;
              v1294 = v471;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v472 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v472 = (void **)&v1292;
                v473 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_603;
                v473 = 5;
              }
              (*((void (**)(void))*v472 + v473))();
LABEL_603:
              LODWORD(v1292) = 0;
              LODWORD(__b) = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
              v474 = v1299;
              if (v1299 == v1298)
              {
                v474 = v1298;
                v475 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_609;
                v475 = 5;
              }
              (*(void (**)(void))(*v474 + 8 * v475))();
LABEL_609:
              v476 = v1291;
              if (v1291 == v1290)
              {
                v476 = v1290;
                v477 = 4;
                goto LABEL_613;
              }
              if (v1291)
              {
                v477 = 5;
LABEL_613:
                (*(void (**)(void))(*v476 + 8 * v477))();
              }
              ++v464;
              v1278 = (int *)((char *)v1278 + 1);
              if ((unint64_t)(*a2)[6] <= v464)
                goto LABEL_1708;
            }
          }
          if (v1283 == 2)
          {
            v784 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v1001 = *((int *)v1285 - 1);
              v1002 = *((_QWORD *)v1287 - 1);
              v1285 -= 4;
              v1287 -= 8;
              if ((*a2)[6])
              {
                LODWORD(v1003) = 0;
                v1004 = (*a2)[19];
                v1005 = *(char **)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1002)
                    bzero(v1004, v1002);
                  if ((int)v1001 >= 1)
                  {
                    v1006 = 0;
                    v1007 = v1005;
                    do
                    {
                      if (v1002)
                      {
                        for (i1 = 0; i1 != v1002; ++i1)
                        {
                          v1009 = *v1007;
                          v1007 += 4;
                          *((_BYTE *)v1004 + i1) += v1009;
                        }
                      }
                      ++v1006;
                    }
                    while (v1006 != (_DWORD)v1001);
                  }
                  v1005 += 4 * v1002 * v1001;
                  v1004 = (int *)((char *)v1004 + v1002);
                  v1003 = (int)v1003 + (int)v1002;
                }
                while (v1003 < (unint64_t)(*a2)[6]);
              }
              goto LABEL_1712;
            }
LABEL_1370:
            v1277 = 0;
            v1277 = *((_DWORD *)v784 - 1);
            __len = 0;
            v1010 = *((_QWORD *)v1287 - 1);
            v1285 = v784 - 4;
            v1287 -= 8;
            v1278 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1010;
            __b = (*a2)[19];
            v101 = v1292;
            v102 = v1294;
            v1011 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v1011)
              {
                v1187 = 0;
                v1188 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                do
                {
                  v1189 = 0;
                  if ((v1188 & 0x80000000) != 0)
                  {
                    v1192 = a2;
                  }
                  else
                  {
                    v1190 = v1188;
                    v1191 = v1187;
                    v1192 = a2;
                    do
                    {
                      v1193 = ldiv(v1191, v101[v1190]);
                      v1191 = v1193.quot;
                      v1189 += (_QWORD)v102[v1190--] * v1193.rem;
                    }
                    while (v1190 != -1);
                  }
                  v1194 = __b;
                  if (__len)
                  {
                    bzero(__b, __len);
                    v1195 = __len;
                    v1194 = __b;
                  }
                  else
                  {
                    v1195 = 0;
                  }
                  v1196 = v1277;
                  if (v1277 >= 1)
                  {
                    v1197 = 0;
                    v1198 = &v1278[(int)v1189];
                    do
                    {
                      v1199 = v1195;
                      for (i2 = v1194; v1199; --v1199)
                      {
                        v1201 = *(_BYTE *)v1198++;
                        *i2++ += v1201;
                      }
                      ++v1197;
                    }
                    while (v1197 != v1196);
                    v1195 = __len;
                    v1194 = __b;
                  }
                  __b = &v1194[v1195];
                  v1187 += v1195;
                }
                while ((unint64_t)(*v1192)[6] > v1187);
              }
              goto LABEL_1708;
            }
            if (!v1011)
              goto LABEL_1708;
            v1012 = 0;
            v1013 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1275 = 0;
              v1014 = 0;
              if ((v1013 & 0x80000000) == 0)
              {
                v1015 = v1013;
                v1016 = v1012;
                do
                {
                  v1017 = ldiv(v1016, v101[v1015]);
                  v1016 = v1017.quot;
                  v1014 += (_QWORD)v102[v1015--] * v1017.rem;
                }
                while (v1015 != -1);
              }
              v1275 = v1014;
              if (__len)
                bzero(__b, __len);
              v1291 = 0;
              v1018 = operator new(0x38uLL);
              *v1018 = &off_2513496F8;
              v1018[1] = &v1288;
              v1018[2] = &v1278;
              v1018[3] = &v1275;
              v1018[4] = &__b;
              v1018[5] = &v1277;
              v1018[6] = &__len;
              v1291 = v1018;
              v1299 = 0;
              v1019 = (void **)operator new(0x28uLL);
              *v1019 = &off_251346A78;
              v1019[1] = &v1284;
              v1019[2] = &v1286;
              v1019[3] = v1298;
              v1019[4] = v1290;
              v1294 = v1019;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v1020 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v1020 = (void **)&v1292;
                v1021 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_1383;
                v1021 = 5;
              }
              (*((void (**)(void))*v1020 + v1021))();
LABEL_1383:
              LODWORD(v1292) = 0;
              v1289 = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
              v1022 = v1299;
              if (v1299 == v1298)
              {
                v1022 = v1298;
                v1023 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_1389;
                v1023 = 5;
              }
              (*(void (**)(void))(*v1022 + 8 * v1023))();
LABEL_1389:
              v1024 = v1291;
              if (v1291 == v1290)
              {
                v1024 = v1290;
                v1025 = 4;
                goto LABEL_1393;
              }
              if (v1291)
              {
                v1025 = 5;
LABEL_1393:
                (*(void (**)(void))(*v1024 + 8 * v1025))();
              }
              __b = (char *)__b + __len;
              v1012 += __len;
              if ((unint64_t)(*a2)[6] <= v1012)
                goto LABEL_1708;
            }
          }
          if (v1283 != 5)
          {
            if (v1283 != 4)
              goto LABEL_1712;
            v784 = v1285;
            goto LABEL_1370;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v956 = (*a2)[19];
          v101 = v1292;
          v102 = v1294;
          if (!(*a2)[6])
            goto LABEL_1708;
          v957 = 0;
          v958 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v959 = 0;
            if ((v958 & 0x80000000) == 0)
            {
              v960 = v958;
              v961 = v957;
              do
              {
                v962 = ldiv(v961, v101[v960]);
                v961 = v962.quot;
                v959 += (_QWORD)v102[v960--] * v962.rem;
              }
              while (v960 != -1);
            }
            LODWORD(__b) = v959;
            LOBYTE(v1277) = 0;
            v1291 = 0;
            v963 = operator new(0x28uLL);
            *v963 = &off_251349778;
            v963[1] = &v1289;
            v963[2] = &v1277;
            v963[3] = &__len;
            v963[4] = &__b;
            v1291 = v963;
            v1299 = 0;
            v964 = (void **)operator new(0x28uLL);
            *v964 = &off_251346A78;
            v964[1] = &v1284;
            v964[2] = &v1286;
            v964[3] = v1298;
            v964[4] = v1290;
            v1294 = v964;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
            v965 = v1294;
            if (v1294 == (void **)&v1292)
            {
              v965 = (void **)&v1292;
              v966 = 4;
            }
            else
            {
              if (!v1294)
                goto LABEL_1298;
              v966 = 5;
            }
            (*((void (**)(void))*v965 + v966))();
LABEL_1298:
            LODWORD(v1292) = 0;
            LODWORD(v1278) = 0;
            if (!v1299)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
            v967 = v1299;
            if (v1299 == v1298)
            {
              v967 = v1298;
              v968 = 4;
            }
            else
            {
              if (!v1299)
                goto LABEL_1304;
              v968 = 5;
            }
            (*(void (**)(void))(*v967 + 8 * v968))();
LABEL_1304:
            v969 = v1291;
            if (v1291 == v1290)
            {
              v969 = v1290;
              v970 = 4;
              goto LABEL_1308;
            }
            if (v1291)
            {
              v970 = 5;
LABEL_1308:
              (*(void (**)(void))(*v969 + 8 * v970))();
            }
            *(_BYTE *)v956 = v1277;
            v956 = (int *)((char *)v956 + 1);
            if ((unint64_t)(*a2)[6] <= ++v957)
              goto LABEL_1708;
          }
        case 4:
          v198 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1295 = &unk_2513463C8;
          v1296 = mlx::core::allocator::free;
          v1297 = &v1295;
          mlx::core::array::set_data(a2, (uint64_t)v198, (uint64_t)&v1295);
          v199 = v1297;
          if (v1297 == &v1295)
          {
            v200 = 4;
            v199 = &v1295;
          }
          else
          {
            if (!v1297)
              goto LABEL_347;
            v200 = 5;
          }
          (*((void (**)(void))*v199 + v200))();
LABEL_347:
          v1281 = 0;
          v1282 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1281 = __p;
            operator delete(__p);
          }
          if (v1283 == 1)
          {
            v320 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v321 = (*a2)[6];
              if (v321)
              {
                v322 = 0;
                v323 = *(int *)v1284;
                v324 = (*a2)[19];
                v325 = *(int **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v324 = 0;
                  if ((int)v323 >= 1)
                  {
                    v326 = 0;
                    v327 = v323 + 1;
                    v328 = v325;
                    do
                    {
                      v329 = *v328++;
                      v326 += v329;
                      *v324 = v326;
                      --v327;
                    }
                    while (v327 > 1);
                  }
                  v322 = (int *)((char *)v322 + 1);
                  ++v324;
                  v325 += v323;
                }
                while (v322 != v321);
              }
              goto LABEL_1712;
            }
            goto LABEL_458;
          }
          if (!v1283)
          {
            v280 = (*a2)[19];
            *v280 = 0;
            v281 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v281 >= 1)
            {
              v282 = 0;
              v283 = *(int **)(*(_QWORD *)a1 + 152);
              v284 = v281 + 1;
              do
              {
                v285 = *v283++;
                v282 += v285;
                *v280 = v282;
                --v284;
              }
              while (v284 > 1);
            }
            goto LABEL_1712;
          }
          if ((v1283 & 0xFFFFFFFD) == 1)
          {
            v320 = v1285;
LABEL_458:
            v1289 = 0;
            v1289 = *((_DWORD *)v320 - 1);
            v1285 = v320 - 4;
            v1287 -= 8;
            v368 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1278 = (*a2)[19];
            __len = v368;
            v101 = v1292;
            v102 = v1294;
            v369 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v369)
              {
                v789 = 0;
                v790 = v1278;
                v791 = __len;
                v792 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                do
                {
                  v793 = 0;
                  if ((v792 & 0x80000000) == 0)
                  {
                    v794 = v792;
                    v795 = (int)v789;
                    do
                    {
                      v796 = ldiv(v795, v101[v794]);
                      v795 = v796.quot;
                      v793 += (_QWORD)v102[v794--] * v796.rem;
                    }
                    while (v794 != -1);
                  }
                  *v790 = 0;
                  if (v1289 >= 1)
                  {
                    v797 = 0;
                    v798 = (int *)(v791 + 4 * (int)v793);
                    v799 = v1289 + 1;
                    do
                    {
                      v800 = *v798++;
                      v797 += v800;
                      *v790 = v797;
                      --v799;
                    }
                    while (v799 > 1);
                  }
                  v789 = (int *)((char *)v789 + 1);
                  ++v790;
                }
                while (v789 != v369);
              }
              goto LABEL_1708;
            }
            if (!v369)
              goto LABEL_1708;
            v370 = 0;
            v371 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1277 = 0;
              v372 = 0;
              if ((v371 & 0x80000000) == 0)
              {
                v373 = v371;
                v374 = v370;
                do
                {
                  v375 = ldiv(v374, v101[v373]);
                  v374 = v375.quot;
                  v372 += (_QWORD)v102[v373--] * v375.rem;
                }
                while (v373 != -1);
              }
              v1277 = v372;
              *v1278 = 0;
              v1291 = 0;
              v376 = operator new(0x30uLL);
              *v376 = &off_2513497F8;
              v376[1] = &v1275;
              v376[2] = &__len;
              v376[3] = &v1277;
              v376[4] = &v1278;
              v376[5] = &v1289;
              v1291 = v376;
              v1299 = 0;
              v377 = (void **)operator new(0x28uLL);
              *v377 = &off_251346A78;
              v377[1] = &v1284;
              v377[2] = &v1286;
              v377[3] = v1298;
              v377[4] = v1290;
              v1294 = v377;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v378 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v378 = (void **)&v1292;
                v379 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_469;
                v379 = 5;
              }
              (*((void (**)(void))*v378 + v379))();
LABEL_469:
              LODWORD(v1292) = 0;
              LODWORD(__b) = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
              v380 = v1299;
              if (v1299 == v1298)
              {
                v380 = v1298;
                v381 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_475;
                v381 = 5;
              }
              (*(void (**)(void))(*v380 + 8 * v381))();
LABEL_475:
              v382 = v1291;
              if (v1291 == v1290)
              {
                v382 = v1290;
                v383 = 4;
                goto LABEL_479;
              }
              if (v1291)
              {
                v383 = 5;
LABEL_479:
                (*(void (**)(void))(*v382 + 8 * v383))();
              }
              ++v370;
              ++v1278;
              if ((unint64_t)(*a2)[6] <= v370)
                goto LABEL_1708;
            }
          }
          if (v1283 == 2)
          {
            v782 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v889 = *((int *)v1285 - 1);
              v890 = *((_QWORD *)v1287 - 1);
              v1285 -= 4;
              v1287 -= 8;
              v891 = (*a2)[6];
              if (v891)
              {
                LODWORD(v892) = 0;
                v893 = (*a2)[19];
                v894 = *(int **)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v890)
                    bzero(v893, 4 * v890);
                  if ((int)v889 >= 1)
                  {
                    v895 = 0;
                    v896 = v894;
                    do
                    {
                      if (v890)
                      {
                        for (i3 = 0; i3 != v890; ++i3)
                        {
                          v898 = *v896++;
                          v893[i3] += v898;
                        }
                      }
                      ++v895;
                    }
                    while (v895 != (_DWORD)v889);
                  }
                  v894 += v890 * v889;
                  v893 += v890;
                  v892 = (int)v892 + (int)v890;
                }
                while (v892 < (unint64_t)v891);
              }
              goto LABEL_1712;
            }
LABEL_1200:
            v1277 = 0;
            v1277 = *((_DWORD *)v782 - 1);
            __len = 0;
            v899 = *((_QWORD *)v1287 - 1);
            v1285 = v782 - 4;
            v1287 -= 8;
            v1278 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v899;
            __b = (*a2)[19];
            v101 = v1292;
            v102 = v1294;
            v900 = (unint64_t)(*a2)[6];
            if (v1285 == v1284)
            {
              if (v900)
              {
                v1159 = 0;
                v1160 = (char *)__b;
                v1161 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                v1162 = __len;
                v1270 = v1278;
                v1163 = 4 * __len;
                do
                {
                  v1164 = 0;
                  if ((v1161 & 0x80000000) == 0)
                  {
                    v1165 = v1161;
                    v1166 = v1159;
                    do
                    {
                      v1167 = ldiv(v1166, v101[v1165]);
                      v1166 = v1167.quot;
                      v1164 += (_QWORD)v102[v1165--] * v1167.rem;
                    }
                    while (v1165 != -1);
                  }
                  if (v1162)
                    bzero(v1160, v1163);
                  v1168 = v1277;
                  if (v1277 >= 1)
                  {
                    v1169 = 0;
                    v1170 = &v1270[(int)v1164];
                    do
                    {
                      if (v1162)
                      {
                        for (i4 = 0; i4 != v1162; ++i4)
                        {
                          v1172 = *v1170++;
                          *(_DWORD *)&v1160[4 * i4] += v1172;
                        }
                      }
                      ++v1169;
                    }
                    while (v1169 != v1168);
                  }
                  v1160 += v1163;
                  v1159 += v1162;
                }
                while (v900 > v1159);
              }
              goto LABEL_1708;
            }
            if (!v900)
              goto LABEL_1708;
            v901 = 0;
            v902 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1275 = 0;
              v903 = 0;
              if ((v902 & 0x80000000) == 0)
              {
                v904 = v902;
                v905 = v901;
                do
                {
                  v906 = ldiv(v905, v101[v904]);
                  v905 = v906.quot;
                  v903 += (_QWORD)v102[v904--] * v906.rem;
                }
                while (v904 != -1);
              }
              v1275 = v903;
              if (__len)
                bzero(__b, 4 * __len);
              v1291 = 0;
              v907 = operator new(0x38uLL);
              *v907 = &off_251349878;
              v907[1] = &v1288;
              v907[2] = &v1278;
              v907[3] = &v1275;
              v907[4] = &__b;
              v907[5] = &v1277;
              v907[6] = &__len;
              v1291 = v907;
              v1299 = 0;
              v908 = (void **)operator new(0x28uLL);
              *v908 = &off_251346A78;
              v908[1] = &v1284;
              v908[2] = &v1286;
              v908[3] = v1298;
              v908[4] = v1290;
              v1294 = v908;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v909 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v909 = (void **)&v1292;
                v910 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_1213;
                v910 = 5;
              }
              (*((void (**)(void))*v909 + v910))();
LABEL_1213:
              LODWORD(v1292) = 0;
              v1289 = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
              v911 = v1299;
              if (v1299 == v1298)
              {
                v911 = v1298;
                v912 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_1219;
                v912 = 5;
              }
              (*(void (**)(void))(*v911 + 8 * v912))();
LABEL_1219:
              v913 = v1291;
              if (v1291 == v1290)
              {
                v913 = v1290;
                v914 = 4;
                goto LABEL_1223;
              }
              if (v1291)
              {
                v914 = 5;
LABEL_1223:
                (*(void (**)(void))(*v913 + 8 * v914))();
              }
              __b = (char *)__b + 4 * __len;
              v901 += __len;
              if ((unint64_t)(*a2)[6] <= v901)
                goto LABEL_1708;
            }
          }
          if (v1283 != 5)
          {
            if (v1283 != 4)
              goto LABEL_1712;
            v782 = v1285;
            goto LABEL_1200;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v874 = (*a2)[19];
          v101 = v1292;
          v102 = v1294;
          if (!(*a2)[6])
            goto LABEL_1708;
          v875 = 0;
          v876 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          while (1)
          {
            LODWORD(__b) = 0;
            v877 = 0;
            if ((v876 & 0x80000000) == 0)
            {
              v878 = v876;
              v879 = v875;
              do
              {
                v880 = ldiv(v879, v101[v878]);
                v879 = v880.quot;
                v877 += (_QWORD)v102[v878--] * v880.rem;
              }
              while (v878 != -1);
            }
            LODWORD(__b) = v877;
            v1289 = 0;
            v1291 = 0;
            v881 = operator new(0x28uLL);
            *v881 = &off_2513498F8;
            v881[1] = &v1277;
            v881[2] = &v1289;
            v881[3] = &__len;
            v881[4] = &__b;
            v1291 = v881;
            v1299 = 0;
            v882 = (void **)operator new(0x28uLL);
            *v882 = &off_251346A78;
            v882[1] = &v1284;
            v882[2] = &v1286;
            v882[3] = v1298;
            v882[4] = v1290;
            v1294 = v882;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
            v883 = v1294;
            if (v1294 == (void **)&v1292)
            {
              v883 = (void **)&v1292;
              v884 = 4;
            }
            else
            {
              if (!v1294)
                goto LABEL_1174;
              v884 = 5;
            }
            (*((void (**)(void))*v883 + v884))();
LABEL_1174:
            LODWORD(v1292) = 0;
            LODWORD(v1278) = 0;
            if (!v1299)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
            v885 = v1299;
            if (v1299 == v1298)
            {
              v885 = v1298;
              v886 = 4;
            }
            else
            {
              if (!v1299)
                goto LABEL_1180;
              v886 = 5;
            }
            (*(void (**)(void))(*v885 + 8 * v886))();
LABEL_1180:
            v887 = v1291;
            if (v1291 == v1290)
            {
              v887 = v1290;
              v888 = 4;
              goto LABEL_1184;
            }
            if (v1291)
            {
              v888 = 5;
LABEL_1184:
              (*(void (**)(void))(*v887 + 8 * v888))();
            }
            *v874++ = v1289;
            if ((unint64_t)(*a2)[6] <= ++v875)
              goto LABEL_1708;
          }
        case 5:
          v210 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1295 = &unk_2513463C8;
          v1296 = mlx::core::allocator::free;
          v1297 = &v1295;
          mlx::core::array::set_data(a2, (uint64_t)v210, (uint64_t)&v1295);
          v211 = v1297;
          if (v1297 == &v1295)
          {
            v212 = 4;
            v211 = &v1295;
          }
          else
          {
            if (!v1297)
              goto LABEL_397;
            v212 = 5;
          }
          (*((void (**)(void))*v211 + v212))();
LABEL_397:
          v1281 = 0;
          v1282 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1281 = __p;
            operator delete(__p);
          }
          if (v1283 == 1)
          {
            v399 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v400 = (*a2)[6];
              if (v400)
              {
                v401 = 0;
                v402 = *(int *)v1284;
                v403 = (*a2)[19];
                v404 = *(unsigned int **)(*(_QWORD *)a1 + 152);
                do
                {
                  *(_QWORD *)v403 = 0;
                  if ((int)v402 >= 1)
                  {
                    v405 = 0;
                    v406 = v402 + 1;
                    v407 = v404;
                    do
                    {
                      v408 = *v407++;
                      v405 += v408;
                      --v406;
                    }
                    while (v406 > 1);
                    *(_QWORD *)v403 = v405;
                  }
                  v401 = (int *)((char *)v401 + 1);
                  v403 += 2;
                  v404 += v402;
                }
                while (v401 != v400);
              }
              goto LABEL_1712;
            }
            goto LABEL_862;
          }
          if (!v1283)
          {
            v308 = (*a2)[19];
            *(_QWORD *)v308 = 0;
            v309 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v309 >= 1)
            {
              v310 = 0;
              v311 = *(unsigned int **)(*(_QWORD *)a1 + 152);
              v312 = v309 + 1;
              do
              {
                v313 = *v311++;
                v310 += v313;
                --v312;
              }
              while (v312 > 1);
              *(_QWORD *)v308 = v310;
            }
            goto LABEL_1712;
          }
          if ((v1283 & 0xFFFFFFFD) == 1)
          {
            v399 = v1285;
LABEL_862:
            v1289 = 0;
            v1289 = *((_DWORD *)v399 - 1);
            v1285 = v399 - 4;
            v1287 -= 8;
            v636 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1278 = (*a2)[19];
            __len = v636;
            v101 = v1292;
            v102 = v1294;
            v637 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v637)
              {
                v848 = 0;
                v849 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                v850 = v1278;
                v1268 = __len;
                v851 = v1289;
                v852 = v1289 + 1;
                do
                {
                  v853 = 0;
                  if ((v849 & 0x80000000) == 0)
                  {
                    v854 = v849;
                    v855 = (int)v848;
                    do
                    {
                      v856 = ldiv(v855, v101[v854]);
                      v855 = v856.quot;
                      v853 += (_QWORD)v102[v854--] * v856.rem;
                    }
                    while (v854 != -1);
                  }
                  *(_QWORD *)v850 = 0;
                  if (v851 >= 1)
                  {
                    v857 = 0;
                    v858 = (unsigned int *)(v1268 + 4 * (int)v853);
                    v859 = v852;
                    do
                    {
                      v860 = *v858++;
                      v857 += v860;
                      --v859;
                    }
                    while (v859 > 1);
                    *(_QWORD *)v850 = v857;
                  }
                  v848 = (int *)((char *)v848 + 1);
                  v850 += 2;
                }
                while (v848 != v637);
              }
              goto LABEL_1708;
            }
            if (!v637)
              goto LABEL_1708;
            v638 = 0;
            v639 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1277 = 0;
              v640 = 0;
              if ((v639 & 0x80000000) == 0)
              {
                v641 = v639;
                v642 = v638;
                do
                {
                  v643 = ldiv(v642, v101[v641]);
                  v642 = v643.quot;
                  v640 += (_QWORD)v102[v641--] * v643.rem;
                }
                while (v641 != -1);
              }
              v1277 = v640;
              *(_QWORD *)v1278 = 0;
              v1291 = 0;
              v644 = operator new(0x30uLL);
              *v644 = &off_251349978;
              v644[1] = &v1275;
              v644[2] = &__len;
              v644[3] = &v1277;
              v644[4] = &v1278;
              v644[5] = &v1289;
              v1291 = v644;
              v1299 = 0;
              v645 = (void **)operator new(0x28uLL);
              *v645 = &off_251346A78;
              v645[1] = &v1284;
              v645[2] = &v1286;
              v645[3] = v1298;
              v645[4] = v1290;
              v1294 = v645;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v646 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v646 = (void **)&v1292;
                v647 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_873;
                v647 = 5;
              }
              (*((void (**)(void))*v646 + v647))();
LABEL_873:
              LODWORD(v1292) = 0;
              LODWORD(__b) = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
              v648 = v1299;
              if (v1299 == v1298)
              {
                v648 = v1298;
                v649 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_879;
                v649 = 5;
              }
              (*(void (**)(void))(*v648 + 8 * v649))();
LABEL_879:
              v650 = v1291;
              if (v1291 == v1290)
              {
                v650 = v1290;
                v651 = 4;
                goto LABEL_883;
              }
              if (v1291)
              {
                v651 = 5;
LABEL_883:
                (*(void (**)(void))(*v650 + 8 * v651))();
              }
              ++v638;
              v1278 += 2;
              if ((unint64_t)(*a2)[6] <= v638)
                goto LABEL_1708;
            }
          }
          if (v1283 == 2)
          {
            v787 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v1107 = *((int *)v1285 - 1);
              v1108 = *((_QWORD *)v1287 - 1);
              v1285 -= 4;
              v1287 -= 8;
              v1109 = (*a2)[6];
              if (v1109)
              {
                LODWORD(v1110) = 0;
                v1111 = (*a2)[19];
                v1112 = *(unsigned int **)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1108)
                    bzero(v1111, 8 * v1108);
                  if ((int)v1107 >= 1)
                  {
                    v1113 = 0;
                    v1114 = v1112;
                    do
                    {
                      if (v1108)
                      {
                        for (i5 = 0; i5 != v1108; ++i5)
                        {
                          v1116 = *v1114++;
                          *(_QWORD *)&v1111[2 * i5] += v1116;
                        }
                      }
                      ++v1113;
                    }
                    while (v1113 != (_DWORD)v1107);
                  }
                  v1112 += v1108 * v1107;
                  v1111 += 2 * v1108;
                  v1110 = (int)v1110 + (int)v1108;
                }
                while (v1110 < (unint64_t)v1109);
              }
              goto LABEL_1712;
            }
LABEL_1533:
            v1277 = 0;
            v1277 = *((_DWORD *)v787 - 1);
            __len = 0;
            v1117 = *((_QWORD *)v1287 - 1);
            v1285 = v787 - 4;
            v1287 -= 8;
            v1278 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1117;
            __b = (*a2)[19];
            v101 = v1292;
            v102 = v1294;
            v1118 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v1118)
              {
                v1230 = 0;
                v1231 = (char *)__b;
                v1232 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                v1233 = __len;
                v1257 = v1278;
                v1273 = (unint64_t)(*a2)[6];
                v1234 = v1277;
                v1235 = 8 * __len;
                do
                {
                  v1236 = 0;
                  if ((v1232 & 0x80000000) == 0)
                  {
                    v1237 = v1232;
                    v1238 = v1230;
                    do
                    {
                      v1239 = ldiv(v1238, v101[v1237]);
                      v1238 = v1239.quot;
                      v1236 += (_QWORD)v102[v1237--] * v1239.rem;
                    }
                    while (v1237 != -1);
                  }
                  if (v1233)
                    bzero(v1231, v1235);
                  if (v1234 >= 1)
                  {
                    v1240 = 0;
                    v1241 = &v1257[(int)v1236];
                    do
                    {
                      if (v1233)
                      {
                        for (i6 = 0; i6 != v1233; ++i6)
                        {
                          v1243 = *v1241++;
                          *(_QWORD *)&v1231[8 * i6] += v1243;
                        }
                      }
                      ++v1240;
                    }
                    while (v1240 != v1234);
                  }
                  v1231 += v1235;
                  v1230 += v1233;
                }
                while (v1273 > v1230);
              }
              goto LABEL_1708;
            }
            if (!v1118)
              goto LABEL_1708;
            v1119 = 0;
            v1120 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1275 = 0;
              v1121 = 0;
              if ((v1120 & 0x80000000) == 0)
              {
                v1122 = v1120;
                v1123 = v1119;
                do
                {
                  v1124 = ldiv(v1123, v101[v1122]);
                  v1123 = v1124.quot;
                  v1121 += (_QWORD)v102[v1122--] * v1124.rem;
                }
                while (v1122 != -1);
              }
              v1275 = v1121;
              if (__len)
                bzero(__b, 8 * __len);
              v1291 = 0;
              v1125 = operator new(0x38uLL);
              *v1125 = &off_2513499F8;
              v1125[1] = &v1288;
              v1125[2] = &v1278;
              v1125[3] = &v1275;
              v1125[4] = &__b;
              v1125[5] = &v1277;
              v1125[6] = &__len;
              v1291 = v1125;
              v1299 = 0;
              v1126 = (void **)operator new(0x28uLL);
              *v1126 = &off_251346A78;
              v1126[1] = &v1284;
              v1126[2] = &v1286;
              v1126[3] = v1298;
              v1126[4] = v1290;
              v1294 = v1126;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v1127 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v1127 = (void **)&v1292;
                v1128 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_1546;
                v1128 = 5;
              }
              (*((void (**)(void))*v1127 + v1128))();
LABEL_1546:
              LODWORD(v1292) = 0;
              v1289 = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
              v1129 = v1299;
              if (v1299 == v1298)
              {
                v1129 = v1298;
                v1130 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_1552;
                v1130 = 5;
              }
              (*(void (**)(void))(*v1129 + 8 * v1130))();
LABEL_1552:
              v1131 = v1291;
              if (v1291 == v1290)
              {
                v1131 = v1290;
                v1132 = 4;
                goto LABEL_1556;
              }
              if (v1291)
              {
                v1132 = 5;
LABEL_1556:
                (*(void (**)(void))(*v1131 + 8 * v1132))();
              }
              __b = (char *)__b + 8 * __len;
              v1119 += __len;
              if ((unint64_t)(*a2)[6] <= v1119)
                goto LABEL_1708;
            }
          }
          if (v1283 != 5)
          {
            if (v1283 != 4)
              goto LABEL_1712;
            v787 = v1285;
            goto LABEL_1533;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v1077 = (*a2)[19];
          v101 = v1292;
          v102 = v1294;
          if (!(*a2)[6])
            goto LABEL_1708;
          v1078 = 0;
          v1079 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          while (1)
          {
            v1289 = 0;
            v1080 = 0;
            if ((v1079 & 0x80000000) == 0)
            {
              v1081 = v1079;
              v1082 = v1078;
              do
              {
                v1083 = ldiv(v1082, v101[v1081]);
                v1082 = v1083.quot;
                v1080 += (_QWORD)v102[v1081--] * v1083.rem;
              }
              while (v1081 != -1);
            }
            v1289 = v1080;
            v1278 = 0;
            v1291 = 0;
            v1084 = operator new(0x28uLL);
            *v1084 = &off_251349A78;
            v1084[1] = &v1277;
            v1084[2] = &v1278;
            v1084[3] = &__len;
            v1084[4] = &v1289;
            v1291 = v1084;
            v1299 = 0;
            v1085 = (void **)operator new(0x28uLL);
            *v1085 = &off_251346A78;
            v1085[1] = &v1284;
            v1085[2] = &v1286;
            v1085[3] = v1298;
            v1085[4] = v1290;
            v1294 = v1085;
            std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
            v1086 = v1294;
            if (v1294 == (void **)&v1292)
            {
              v1086 = (void **)&v1292;
              v1087 = 4;
            }
            else
            {
              if (!v1294)
                goto LABEL_1484;
              v1087 = 5;
            }
            (*((void (**)(void))*v1086 + v1087))();
LABEL_1484:
            LODWORD(v1292) = 0;
            LODWORD(__b) = 0;
            if (!v1299)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
            v1088 = v1299;
            if (v1299 == v1298)
            {
              v1088 = v1298;
              v1089 = 4;
            }
            else
            {
              if (!v1299)
                goto LABEL_1490;
              v1089 = 5;
            }
            (*(void (**)(void))(*v1088 + 8 * v1089))();
LABEL_1490:
            v1090 = v1291;
            if (v1291 == v1290)
            {
              v1090 = v1290;
              v1091 = 4;
              goto LABEL_1494;
            }
            if (v1291)
            {
              v1091 = 5;
LABEL_1494:
              (*(void (**)(void))(*v1090 + 8 * v1091))();
            }
            *(_QWORD *)v1077 = v1278;
            v1077 += 2;
            if ((unint64_t)(*a2)[6] <= ++v1078)
              goto LABEL_1708;
          }
        case 6:
          v213 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)((_QWORD)v13[6] * BYTE4(v14)));
          v1295 = &unk_2513463C8;
          v1296 = mlx::core::allocator::free;
          v1297 = &v1295;
          mlx::core::array::set_data(a2, (uint64_t)v213, (uint64_t)&v1295);
          v214 = v1297;
          if (v1297 == &v1295)
          {
            v215 = 4;
            v214 = &v1295;
          }
          else
          {
            if (!v1297)
              goto LABEL_407;
            v215 = 5;
          }
          (*((void (**)(void))*v214 + v215))();
LABEL_407:
          v1281 = 0;
          v1282 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
          if (__p)
          {
            v1281 = __p;
            operator delete(__p);
          }
          if (v1283 == 1)
          {
            v436 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v437 = (*a2)[6];
              if (v437)
              {
                v438 = 0;
                v439 = *(int *)v1284;
                v440 = (float *)(*a2)[19];
                v441 = *(unsigned int **)(*(_QWORD *)a1 + 152);
                do
                {
                  *v440 = 0.0;
                  if ((int)v439 >= 1)
                  {
                    v442 = 0.0;
                    v443 = v439 + 1;
                    v444 = v441;
                    do
                    {
                      v445 = *v444++;
                      v442 = v442 + (float)v445;
                      --v443;
                    }
                    while (v443 > 1);
                    *v440 = v442;
                  }
                  v438 = (int *)((char *)v438 + 1);
                  ++v440;
                  v441 += v439;
                }
                while (v438 != v437);
              }
              goto LABEL_1712;
            }
            goto LABEL_911;
          }
          if (!v1283)
          {
            v314 = (float *)(*a2)[19];
            *v314 = 0.0;
            v315 = *(_DWORD *)(*(_QWORD *)a1 + 48);
            if (v315 >= 1)
            {
              v316 = *(unsigned int **)(*(_QWORD *)a1 + 152);
              v317 = v315 + 1;
              v318 = 0.0;
              do
              {
                v319 = *v316++;
                v318 = v318 + (float)v319;
                --v317;
              }
              while (v317 > 1);
              *v314 = v318;
            }
            goto LABEL_1712;
          }
          if ((v1283 & 0xFFFFFFFD) == 1)
          {
            v436 = v1285;
LABEL_911:
            v1289 = 0;
            v1289 = *((_DWORD *)v436 - 1);
            v1285 = v436 - 4;
            v1287 -= 8;
            v667 = *(_QWORD *)(*(_QWORD *)a1 + 152);
            v1278 = (*a2)[19];
            __len = v667;
            v101 = v1292;
            v102 = v1294;
            v668 = (*a2)[6];
            if (v1285 == v1284)
            {
              if (v668)
              {
                v861 = 0;
                v862 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                v863 = (float *)v1278;
                v1269 = __len;
                v864 = v1289;
                v865 = v1289 + 1;
                do
                {
                  v866 = 0;
                  if ((v862 & 0x80000000) == 0)
                  {
                    v867 = v862;
                    v868 = (int)v861;
                    do
                    {
                      v869 = ldiv(v868, v101[v867]);
                      v868 = v869.quot;
                      v866 += (_QWORD)v102[v867--] * v869.rem;
                    }
                    while (v867 != -1);
                  }
                  *v863 = 0.0;
                  if (v864 >= 1)
                  {
                    v870 = (unsigned int *)(v1269 + 4 * (int)v866);
                    v871 = 0.0;
                    v872 = v865;
                    do
                    {
                      v873 = *v870++;
                      v871 = v871 + (float)v873;
                      --v872;
                    }
                    while (v872 > 1);
                    *v863 = v871;
                  }
                  v861 = (int *)((char *)v861 + 1);
                  ++v863;
                }
                while (v861 != v668);
              }
              goto LABEL_1708;
            }
            if (!v668)
              goto LABEL_1708;
            v669 = 0;
            v670 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1277 = 0;
              v671 = 0;
              if ((v670 & 0x80000000) == 0)
              {
                v672 = v670;
                v673 = v669;
                do
                {
                  v674 = ldiv(v673, v101[v672]);
                  v673 = v674.quot;
                  v671 += (_QWORD)v102[v672--] * v674.rem;
                }
                while (v672 != -1);
              }
              v1277 = v671;
              *v1278 = 0;
              v1291 = 0;
              v675 = operator new(0x30uLL);
              *v675 = &off_251349AF8;
              v675[1] = &v1275;
              v675[2] = &__len;
              v675[3] = &v1277;
              v675[4] = &v1278;
              v675[5] = &v1289;
              v1291 = v675;
              v1299 = 0;
              v676 = (void **)operator new(0x28uLL);
              *v676 = &off_251346A78;
              v676[1] = &v1284;
              v676[2] = &v1286;
              v676[3] = v1298;
              v676[4] = v1290;
              v1294 = v676;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v677 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v677 = (void **)&v1292;
                v678 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_922;
                v678 = 5;
              }
              (*((void (**)(void))*v677 + v678))();
LABEL_922:
              LODWORD(v1292) = 0;
              LODWORD(__b) = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
              v679 = v1299;
              if (v1299 == v1298)
              {
                v679 = v1298;
                v680 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_928;
                v680 = 5;
              }
              (*(void (**)(void))(*v679 + 8 * v680))();
LABEL_928:
              v681 = v1291;
              if (v1291 == v1290)
              {
                v681 = v1290;
                v682 = 4;
                goto LABEL_932;
              }
              if (v1291)
              {
                v682 = 5;
LABEL_932:
                (*(void (**)(void))(*v681 + 8 * v682))();
              }
              ++v669;
              ++v1278;
              if ((unint64_t)(*a2)[6] <= v669)
                goto LABEL_1708;
            }
          }
          if (v1283 == 2)
          {
            v788 = v1285;
            if (v1285 - (_BYTE *)v1284 == 4)
            {
              v1133 = *((int *)v1285 - 1);
              v1134 = *((_QWORD *)v1287 - 1);
              v1285 -= 4;
              v1287 -= 8;
              v1135 = (*a2)[6];
              if (v1135)
              {
                LODWORD(v1136) = 0;
                v1137 = (*a2)[19];
                v1138 = *(unsigned int **)(*(_QWORD *)a1 + 152);
                do
                {
                  if (v1134)
                    bzero(v1137, 4 * v1134);
                  if ((int)v1133 >= 1)
                  {
                    v1139 = 0;
                    v1140 = v1138;
                    do
                    {
                      if (v1134)
                      {
                        for (i7 = 0; i7 != v1134; ++i7)
                        {
                          v1142 = *v1140++;
                          *(float *)&v1137[i7] = *(float *)&v1137[i7] + (float)v1142;
                        }
                      }
                      ++v1139;
                    }
                    while (v1139 != (_DWORD)v1133);
                  }
                  v1138 += v1134 * v1133;
                  v1137 += v1134;
                  v1136 = (int)v1136 + (int)v1134;
                }
                while (v1136 < (unint64_t)v1135);
              }
              goto LABEL_1712;
            }
LABEL_1572:
            v1277 = 0;
            v1277 = *((_DWORD *)v788 - 1);
            __len = 0;
            v1143 = *((_QWORD *)v1287 - 1);
            v1285 = v788 - 4;
            v1287 -= 8;
            v1278 = *(int **)(*(_QWORD *)a1 + 152);
            __len = v1143;
            __b = (*a2)[19];
            v101 = v1292;
            v102 = v1294;
            v1144 = (unint64_t)(*a2)[6];
            if (v1285 == v1284)
            {
              if (v1144)
              {
                v1244 = 0;
                v1245 = (char *)__b;
                v1246 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
                v1247 = __len;
                v1258 = v1278;
                v1274 = v1246;
                v1248 = v1277;
                v1249 = 4 * __len;
                do
                {
                  v1250 = 0;
                  if ((v1246 & 0x80000000) == 0)
                  {
                    v1251 = v1244;
                    do
                    {
                      v1252 = ldiv(v1251, v101[v1246]);
                      v1251 = v1252.quot;
                      v1250 += (_QWORD)v102[v1246--] * v1252.rem;
                    }
                    while (v1246 != -1);
                  }
                  if (v1247)
                    bzero(v1245, v1249);
                  v1246 = v1274;
                  if (v1248 >= 1)
                  {
                    v1253 = 0;
                    v1254 = (unsigned int *)&v1258[(int)v1250];
                    do
                    {
                      if (v1247)
                      {
                        for (i8 = 0; i8 != v1247; ++i8)
                        {
                          v1256 = *v1254++;
                          *(float *)&v1245[4 * i8] = *(float *)&v1245[4 * i8] + (float)v1256;
                        }
                      }
                      ++v1253;
                    }
                    while (v1253 != v1248);
                  }
                  v1245 += v1249;
                  v1244 += v1247;
                }
                while (v1144 > v1244);
              }
              goto LABEL_1708;
            }
            if (!v1144)
              goto LABEL_1708;
            v1145 = 0;
            v1146 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            while (1)
            {
              v1275 = 0;
              v1147 = 0;
              if ((v1146 & 0x80000000) == 0)
              {
                v1148 = v1146;
                v1149 = v1145;
                do
                {
                  v1150 = ldiv(v1149, v101[v1148]);
                  v1149 = v1150.quot;
                  v1147 += (_QWORD)v102[v1148--] * v1150.rem;
                }
                while (v1148 != -1);
              }
              v1275 = v1147;
              if (__len)
                bzero(__b, 4 * __len);
              v1291 = 0;
              v1151 = operator new(0x38uLL);
              *v1151 = &off_251349B78;
              v1151[1] = &v1288;
              v1151[2] = &v1278;
              v1151[3] = &v1275;
              v1151[4] = &__b;
              v1151[5] = &v1277;
              v1151[6] = &__len;
              v1291 = v1151;
              v1299 = 0;
              v1152 = (void **)operator new(0x28uLL);
              *v1152 = &off_251346A78;
              v1152[1] = &v1284;
              v1152[2] = &v1286;
              v1152[3] = v1298;
              v1152[4] = v1290;
              v1294 = v1152;
              std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
              v1153 = v1294;
              if (v1294 == (void **)&v1292)
              {
                v1153 = (void **)&v1292;
                v1154 = 4;
              }
              else
              {
                if (!v1294)
                  goto LABEL_1585;
                v1154 = 5;
              }
              (*((void (**)(void))*v1153 + v1154))();
LABEL_1585:
              LODWORD(v1292) = 0;
              v1289 = 0;
              if (!v1299)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
              v1155 = v1299;
              if (v1299 == v1298)
              {
                v1155 = v1298;
                v1156 = 4;
              }
              else
              {
                if (!v1299)
                  goto LABEL_1591;
                v1156 = 5;
              }
              (*(void (**)(void))(*v1155 + 8 * v1156))();
LABEL_1591:
              v1157 = v1291;
              if (v1291 == v1290)
              {
                v1157 = v1290;
                v1158 = 4;
                goto LABEL_1595;
              }
              if (v1291)
              {
                v1158 = 5;
LABEL_1595:
                (*(void (**)(void))(*v1157 + 8 * v1158))();
              }
              __b = (char *)__b + 4 * __len;
              v1145 += __len;
              if ((unint64_t)(*a2)[6] <= v1145)
                goto LABEL_1708;
            }
          }
          if (v1283 != 5)
          {
            if (v1283 != 4)
              goto LABEL_1712;
            v788 = v1285;
            goto LABEL_1572;
          }
          __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
          v1092 = (*a2)[19];
          v101 = v1292;
          v102 = v1294;
          if (!(*a2)[6])
            goto LABEL_1708;
          v1093 = 0;
          v1094 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
          break;
        default:
          return;
      }
      while (1)
      {
        LODWORD(__b) = 0;
        v1095 = 0;
        if ((v1094 & 0x80000000) == 0)
        {
          v1096 = v1094;
          v1097 = v1093;
          do
          {
            v1098 = ldiv(v1097, v101[v1096]);
            v1097 = v1098.quot;
            v1095 += (_QWORD)v102[v1096--] * v1098.rem;
          }
          while (v1096 != -1);
        }
        LODWORD(__b) = v1095;
        v1289 = 0;
        v1291 = 0;
        v1099 = operator new(0x28uLL);
        *v1099 = &off_251349BF8;
        v1099[1] = &v1277;
        v1099[2] = &v1289;
        v1099[3] = &__len;
        v1099[4] = &__b;
        v1291 = v1099;
        v1299 = 0;
        v1100 = (void **)operator new(0x28uLL);
        *v1100 = &off_251346A78;
        v1100[1] = &v1284;
        v1100[2] = &v1286;
        v1100[3] = v1298;
        v1100[4] = v1290;
        v1294 = v1100;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
        v1101 = v1294;
        if (v1294 == (void **)&v1292)
        {
          v1101 = (void **)&v1292;
          v1102 = 4;
        }
        else
        {
          if (!v1294)
            goto LABEL_1507;
          v1102 = 5;
        }
        (*((void (**)(void))*v1101 + v1102))();
LABEL_1507:
        LODWORD(v1292) = 0;
        LODWORD(v1278) = 0;
        if (!v1299)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
        v1103 = v1299;
        if (v1299 == v1298)
        {
          v1103 = v1298;
          v1104 = 4;
        }
        else
        {
          if (!v1299)
            goto LABEL_1513;
          v1104 = 5;
        }
        (*(void (**)(void))(*v1103 + 8 * v1104))();
LABEL_1513:
        v1105 = v1291;
        if (v1291 == v1290)
        {
          v1105 = v1290;
          v1106 = 4;
          goto LABEL_1517;
        }
        if (v1291)
        {
          v1106 = 5;
LABEL_1517:
          (*(void (**)(void))(*v1105 + 8 * v1106))();
        }
        *v1092++ = v1289;
        if ((unint64_t)(*a2)[6] <= ++v1093)
          goto LABEL_1708;
      }
    case 3:
      v18 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1295 = &unk_2513463C8;
      v1296 = mlx::core::allocator::free;
      v1297 = &v1295;
      mlx::core::array::set_data(a2, (uint64_t)v18, (uint64_t)&v1295);
      v19 = v1297;
      if (v1297 == &v1295)
      {
        v20 = 4;
        v19 = &v1295;
      }
      else
      {
        if (!v1297)
          goto LABEL_35;
        v20 = 5;
      }
      (*((void (**)(void))*v19 + v20))();
LABEL_35:
      v1281 = 0;
      v1282 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1281 = __p;
        operator delete(__p);
      }
      if (v1283 == 1)
      {
        v70 = v1285;
        if (v1285 - (_BYTE *)v1284 == 4)
        {
          v71 = (*a2)[6];
          if (v71)
          {
            v72 = 0;
            v73 = *(int *)v1284;
            v74 = (*a2)[19];
            v75 = *(int **)(*(_QWORD *)a1 + 152);
            do
            {
              *v74 = 1;
              if ((int)v73 >= 1)
              {
                v76 = 1;
                v77 = v73 + 1;
                v78 = v75;
                do
                {
                  v79 = *v78++;
                  v76 *= v79;
                  *v74 = v76;
                  --v77;
                }
                while (v77 > 1);
              }
              v72 = (int *)((char *)v72 + 1);
              ++v74;
              v75 += v73;
            }
            while (v72 != v71);
          }
          goto LABEL_1712;
        }
        goto LABEL_149;
      }
      if (!v1283)
      {
        v34 = (*a2)[19];
        *v34 = 1;
        v35 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v35 >= 1)
        {
          v36 = *(int **)(*(_QWORD *)a1 + 152);
          v37 = v35 + 1;
          v38 = 1;
          do
          {
            v39 = *v36++;
            v38 *= v39;
            *v34 = v38;
            --v37;
          }
          while (v37 > 1);
        }
        goto LABEL_1712;
      }
      if ((v1283 & 0xFFFFFFFD) == 1)
      {
        v70 = v1285;
LABEL_149:
        v1289 = 0;
        v1289 = *((_DWORD *)v70 - 1);
        v1285 = v70 - 4;
        v1287 -= 8;
        v129 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1278 = (*a2)[19];
        __len = v129;
        v101 = v1292;
        v102 = v1294;
        v130 = (*a2)[6];
        if (v1285 == v1284)
        {
          if (v130)
          {
            v229 = 0;
            v230 = v1278;
            v231 = __len;
            v232 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            do
            {
              v233 = 0;
              if ((v232 & 0x80000000) == 0)
              {
                v234 = v232;
                v235 = (int)v229;
                do
                {
                  v236 = ldiv(v235, v101[v234]);
                  v235 = v236.quot;
                  v233 += (_QWORD)v102[v234--] * v236.rem;
                }
                while (v234 != -1);
              }
              *v230 = 1;
              if (v1289 >= 1)
              {
                v237 = (int *)(v231 + 4 * (int)v233);
                v238 = v1289 + 1;
                v239 = 1;
                do
                {
                  v240 = *v237++;
                  v239 *= v240;
                  *v230 = v239;
                  --v238;
                }
                while (v238 > 1);
              }
              v229 = (int *)((char *)v229 + 1);
              ++v230;
            }
            while (v229 != v130);
          }
          goto LABEL_1708;
        }
        if (!v130)
          goto LABEL_1708;
        v131 = 0;
        v132 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
        while (1)
        {
          v1277 = 0;
          v133 = 0;
          if ((v132 & 0x80000000) == 0)
          {
            v134 = v132;
            v135 = v131;
            do
            {
              v136 = ldiv(v135, v101[v134]);
              v135 = v136.quot;
              v133 += (_QWORD)v102[v134--] * v136.rem;
            }
            while (v134 != -1);
          }
          v1277 = v133;
          *v1278 = 1;
          v1291 = 0;
          v137 = operator new(0x30uLL);
          *v137 = &off_251349C78;
          v137[1] = &v1275;
          v137[2] = &__len;
          v137[3] = &v1277;
          v137[4] = &v1278;
          v137[5] = &v1289;
          v1291 = v137;
          v1299 = 0;
          v138 = (void **)operator new(0x28uLL);
          *v138 = &off_251346A78;
          v138[1] = &v1284;
          v138[2] = &v1286;
          v138[3] = v1298;
          v138[4] = v1290;
          v1294 = v138;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
          v139 = v1294;
          if (v1294 == (void **)&v1292)
          {
            v139 = (void **)&v1292;
            v140 = 4;
          }
          else
          {
            if (!v1294)
              goto LABEL_160;
            v140 = 5;
          }
          (*((void (**)(void))*v139 + v140))();
LABEL_160:
          LODWORD(v1292) = 0;
          LODWORD(__b) = 0;
          if (!v1299)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
          v141 = v1299;
          if (v1299 == v1298)
          {
            v141 = v1298;
            v142 = 4;
          }
          else
          {
            if (!v1299)
              goto LABEL_166;
            v142 = 5;
          }
          (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_166:
          v143 = v1291;
          if (v1291 == v1290)
          {
            v143 = v1290;
            v144 = 4;
            goto LABEL_170;
          }
          if (v1291)
          {
            v144 = 5;
LABEL_170:
            (*(void (**)(void))(*v143 + 8 * v144))();
          }
          ++v131;
          ++v1278;
          if ((unint64_t)(*a2)[6] <= v131)
            goto LABEL_1708;
        }
      }
      if (v1283 == 2)
      {
        v194 = v1285;
        if (v1285 - (_BYTE *)v1284 == 4)
        {
          v555 = *((int *)v1285 - 1);
          v556 = *((_QWORD *)v1287 - 1);
          v1285 -= 4;
          v1287 -= 8;
          v557 = *a2;
          v558 = (*a2)[6];
          if (v558)
          {
            LODWORD(v559) = 0;
            v560 = v557[19];
            v561 = *(int **)(*(_QWORD *)a1 + 152);
            do
            {
              if (v556)
                memset_pattern16(v560, &unk_2425A2960, 4 * v556);
              if ((int)v555 >= 1)
              {
                v562 = 0;
                v563 = v561;
                do
                {
                  if (v556)
                  {
                    for (i9 = 0; i9 != v556; ++i9)
                    {
                      v565 = *v563++;
                      v560[i9] *= v565;
                    }
                  }
                  ++v562;
                }
                while (v562 != (_DWORD)v555);
              }
              v561 += v556 * v555;
              v560 += v556;
              v559 = (int)v559 + (int)v556;
            }
            while (v559 < (unint64_t)v558);
          }
          goto LABEL_1712;
        }
LABEL_750:
        v1277 = 0;
        v1277 = *((_DWORD *)v194 - 1);
        __len = 0;
        v566 = *((_QWORD *)v1287 - 1);
        v1285 = v194 - 4;
        v1287 -= 8;
        v1278 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v566;
        __b = (*a2)[19];
        v101 = v1292;
        v102 = v1294;
        v567 = (unint64_t)(*a2)[6];
        if (v1285 == v1284)
        {
          if (v567)
          {
            v725 = 0;
            v726 = (char *)__b;
            v727 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            v728 = __len;
            v1263 = v1278;
            v729 = 4 * __len;
            do
            {
              v730 = 0;
              if ((v727 & 0x80000000) == 0)
              {
                v731 = v727;
                v732 = v725;
                do
                {
                  v733 = ldiv(v732, v101[v731]);
                  v732 = v733.quot;
                  v730 += (_QWORD)v102[v731--] * v733.rem;
                }
                while (v731 != -1);
              }
              if (v728)
                memset_pattern16(v726, &unk_2425A2960, v729);
              v734 = v1277;
              if (v1277 >= 1)
              {
                v735 = 0;
                v736 = &v1263[(int)v730];
                do
                {
                  if (v728)
                  {
                    for (i10 = 0; i10 != v728; ++i10)
                    {
                      v738 = *v736++;
                      *(_DWORD *)&v726[4 * i10] *= v738;
                    }
                  }
                  ++v735;
                }
                while (v735 != v734);
              }
              v726 += v729;
              v725 += v728;
            }
            while (v567 > v725);
          }
          goto LABEL_1708;
        }
        if (!v567)
          goto LABEL_1708;
        v568 = 0;
        v569 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
        while (1)
        {
          v1275 = 0;
          v570 = 0;
          if ((v569 & 0x80000000) == 0)
          {
            v571 = v569;
            v572 = v568;
            do
            {
              v573 = ldiv(v572, v101[v571]);
              v572 = v573.quot;
              v570 += (_QWORD)v102[v571--] * v573.rem;
            }
            while (v571 != -1);
          }
          v1275 = v570;
          if (__len)
            memset_pattern16(__b, &unk_2425A2960, 4 * __len);
          v1291 = 0;
          v574 = operator new(0x38uLL);
          *v574 = &off_251349CF8;
          v574[1] = &v1288;
          v574[2] = &v1278;
          v574[3] = &v1275;
          v574[4] = &__b;
          v574[5] = &v1277;
          v574[6] = &__len;
          v1291 = v574;
          v1299 = 0;
          v575 = (void **)operator new(0x28uLL);
          *v575 = &off_251346A78;
          v575[1] = &v1284;
          v575[2] = &v1286;
          v575[3] = v1298;
          v575[4] = v1290;
          v1294 = v575;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
          v576 = v1294;
          if (v1294 == (void **)&v1292)
          {
            v576 = (void **)&v1292;
            v577 = 4;
          }
          else
          {
            if (!v1294)
              goto LABEL_763;
            v577 = 5;
          }
          (*((void (**)(void))*v576 + v577))();
LABEL_763:
          LODWORD(v1292) = 0;
          v1289 = 0;
          if (!v1299)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
          v578 = v1299;
          if (v1299 == v1298)
          {
            v578 = v1298;
            v579 = 4;
          }
          else
          {
            if (!v1299)
              goto LABEL_769;
            v579 = 5;
          }
          (*(void (**)(void))(*v578 + 8 * v579))();
LABEL_769:
          v580 = v1291;
          if (v1291 == v1290)
          {
            v580 = v1290;
            v581 = 4;
            goto LABEL_773;
          }
          if (v1291)
          {
            v581 = 5;
LABEL_773:
            (*(void (**)(void))(*v580 + 8 * v581))();
          }
          __b = (char *)__b + 4 * __len;
          v568 += __len;
          if ((unint64_t)(*a2)[6] <= v568)
            goto LABEL_1708;
        }
      }
      if (v1283 != 5)
      {
        if (v1283 != 4)
          goto LABEL_1712;
        v194 = v1285;
        goto LABEL_750;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v478 = (*a2)[19];
      v101 = v1292;
      v102 = v1294;
      if (!(*a2)[6])
        goto LABEL_1708;
      v479 = 0;
      v480 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
      while (1)
      {
        LODWORD(__b) = 0;
        v481 = 0;
        if ((v480 & 0x80000000) == 0)
        {
          v482 = v480;
          v483 = v479;
          do
          {
            v484 = ldiv(v483, v101[v482]);
            v483 = v484.quot;
            v481 += (_QWORD)v102[v482--] * v484.rem;
          }
          while (v482 != -1);
        }
        LODWORD(__b) = v481;
        v1289 = 1;
        v1291 = 0;
        v485 = operator new(0x28uLL);
        *v485 = &off_251349D78;
        v485[1] = &v1277;
        v485[2] = &v1289;
        v485[3] = &__len;
        v485[4] = &__b;
        v1291 = v485;
        v1299 = 0;
        v486 = (void **)operator new(0x28uLL);
        *v486 = &off_251346A78;
        v486[1] = &v1284;
        v486[2] = &v1286;
        v486[3] = v1298;
        v486[4] = v1290;
        v1294 = v486;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
        v487 = v1294;
        if (v1294 == (void **)&v1292)
        {
          v487 = (void **)&v1292;
          v488 = 4;
        }
        else
        {
          if (!v1294)
            goto LABEL_626;
          v488 = 5;
        }
        (*((void (**)(void))*v487 + v488))();
LABEL_626:
        LODWORD(v1292) = 0;
        LODWORD(v1278) = 0;
        if (!v1299)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
        v489 = v1299;
        if (v1299 == v1298)
        {
          v489 = v1298;
          v490 = 4;
        }
        else
        {
          if (!v1299)
            goto LABEL_632;
          v490 = 5;
        }
        (*(void (**)(void))(*v489 + 8 * v490))();
LABEL_632:
        v491 = v1291;
        if (v1291 == v1290)
        {
          v491 = v1290;
          v492 = 4;
          goto LABEL_636;
        }
        if (v1291)
        {
          v492 = 5;
LABEL_636:
          (*(void (**)(void))(*v491 + 8 * v492))();
        }
        *v478++ = v1289;
        if ((unint64_t)(*a2)[6] <= ++v479)
          goto LABEL_1708;
      }
    case 4:
      v10 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1295 = &unk_2513463C8;
      v1296 = mlx::core::allocator::free;
      v1297 = &v1295;
      mlx::core::array::set_data(a2, (uint64_t)v10, (uint64_t)&v1295);
      v11 = v1297;
      if (v1297 == &v1295)
      {
        v12 = 4;
        v11 = &v1295;
      }
      else
      {
        if (!v1297)
          goto LABEL_23;
        v12 = 5;
      }
      (*((void (**)(void))*v11 + v12))();
LABEL_23:
      v1281 = 0;
      v1282 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1281 = __p;
        operator delete(__p);
      }
      if (v1283 == 1)
      {
        v59 = v1285;
        if (v1285 - (_BYTE *)v1284 == 4)
        {
          v60 = (*a2)[6];
          if (v60)
          {
            v61 = 0;
            v62 = *(int *)v1284;
            v63 = (unsigned int *)(*a2)[19];
            v64 = *(unsigned int **)(*(_QWORD *)a1 + 152);
            do
            {
              *v63 = -1;
              if ((int)v62 >= 1)
              {
                v65 = -1;
                v66 = v62 + 1;
                v67 = v64;
                do
                {
                  v69 = *v67++;
                  v68 = v69;
                  if (v65 >= v69)
                    v65 = v68;
                  *v63 = v65;
                  --v66;
                }
                while (v66 > 1);
              }
              v61 = (int *)((char *)v61 + 1);
              ++v63;
              v64 += v62;
            }
            while (v61 != v60);
          }
          goto LABEL_1712;
        }
        goto LABEL_113;
      }
      if (!v1283)
      {
        v27 = (unsigned int *)(*a2)[19];
        *v27 = -1;
        v28 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v28 >= 1)
        {
          v29 = *(unsigned int **)(*(_QWORD *)a1 + 152);
          v30 = v28 + 1;
          v31 = -1;
          do
          {
            v33 = *v29++;
            v32 = v33;
            if (v31 >= v33)
              v31 = v32;
            *v27 = v31;
            --v30;
          }
          while (v30 > 1);
        }
        goto LABEL_1712;
      }
      if ((v1283 & 0xFFFFFFFD) == 1)
      {
        v59 = v1285;
LABEL_113:
        v1289 = 0;
        v1289 = *((_DWORD *)v59 - 1);
        v1285 = v59 - 4;
        v1287 -= 8;
        v100 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1278 = (*a2)[19];
        __len = v100;
        v101 = v1292;
        v102 = v1294;
        v103 = (*a2)[6];
        if (v1285 == v1284)
        {
          if (v103)
          {
            v216 = 0;
            v217 = (unsigned int *)v1278;
            v218 = __len;
            v219 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            do
            {
              v220 = 0;
              if ((v219 & 0x80000000) == 0)
              {
                v221 = v219;
                v222 = (int)v216;
                do
                {
                  v223 = ldiv(v222, v101[v221]);
                  v222 = v223.quot;
                  v220 += (_QWORD)v102[v221--] * v223.rem;
                }
                while (v221 != -1);
              }
              *v217 = -1;
              if (v1289 >= 1)
              {
                v224 = (unsigned int *)(v218 + 4 * (int)v220);
                v225 = v1289 + 1;
                v226 = -1;
                do
                {
                  v228 = *v224++;
                  v227 = v228;
                  if (v226 >= v228)
                    v226 = v227;
                  *v217 = v226;
                  --v225;
                }
                while (v225 > 1);
              }
              v216 = (int *)((char *)v216 + 1);
              ++v217;
            }
            while (v216 != v103);
          }
          goto LABEL_1708;
        }
        if (!v103)
          goto LABEL_1708;
        v104 = 0;
        v105 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
        while (1)
        {
          v1277 = 0;
          v106 = 0;
          if ((v105 & 0x80000000) == 0)
          {
            v107 = v105;
            v108 = v104;
            do
            {
              v109 = ldiv(v108, v101[v107]);
              v108 = v109.quot;
              v106 += (_QWORD)v102[v107--] * v109.rem;
            }
            while (v107 != -1);
          }
          v1277 = v106;
          *v1278 = -1;
          v1291 = 0;
          v110 = operator new(0x30uLL);
          *v110 = &off_251349F78;
          v110[1] = &v1275;
          v110[2] = &__len;
          v110[3] = &v1277;
          v110[4] = &v1278;
          v110[5] = &v1289;
          v1291 = v110;
          v1299 = 0;
          v111 = (void **)operator new(0x28uLL);
          *v111 = &off_251346A78;
          v111[1] = &v1284;
          v111[2] = &v1286;
          v111[3] = v1298;
          v111[4] = v1290;
          v1294 = v111;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
          v112 = v1294;
          if (v1294 == (void **)&v1292)
          {
            v112 = (void **)&v1292;
            v113 = 4;
          }
          else
          {
            if (!v1294)
              goto LABEL_124;
            v113 = 5;
          }
          (*((void (**)(void))*v112 + v113))();
LABEL_124:
          LODWORD(v1292) = 0;
          LODWORD(__b) = 0;
          if (!v1299)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
          v114 = v1299;
          if (v1299 == v1298)
          {
            v114 = v1298;
            v115 = 4;
          }
          else
          {
            if (!v1299)
              goto LABEL_130;
            v115 = 5;
          }
          (*(void (**)(void))(*v114 + 8 * v115))();
LABEL_130:
          v116 = v1291;
          if (v1291 == v1290)
          {
            v116 = v1290;
            v117 = 4;
            goto LABEL_134;
          }
          if (v1291)
          {
            v117 = 5;
LABEL_134:
            (*(void (**)(void))(*v116 + 8 * v117))();
          }
          ++v104;
          ++v1278;
          if ((unint64_t)(*a2)[6] <= v104)
            goto LABEL_1708;
        }
      }
      if (v1283 == 2)
      {
        v193 = v1285;
        if (v1285 - (_BYTE *)v1284 == 4)
        {
          v409 = *((int *)v1285 - 1);
          v410 = *((_QWORD *)v1287 - 1);
          v1285 -= 4;
          v1287 -= 8;
          v411 = (*a2)[6];
          if (v411)
          {
            LODWORD(v412) = 0;
            v413 = (*a2)[19];
            v414 = *(unsigned int **)(*(_QWORD *)a1 + 152);
            do
            {
              if (v410)
                memset(v413, 255, 4 * v410);
              if ((int)v409 >= 1)
              {
                v415 = 0;
                v416 = v414;
                do
                {
                  if (v410)
                  {
                    for (i11 = 0; i11 != v410; ++i11)
                    {
                      v419 = *v416++;
                      v418 = v419;
                      if (v413[i11] < v419)
                        v418 = v413[i11];
                      v413[i11] = v418;
                    }
                  }
                  ++v415;
                }
                while (v415 != (_DWORD)v409);
              }
              v414 += v410 * v409;
              v413 += v410;
              v412 = (int)v412 + (int)v410;
            }
            while (v412 < (unint64_t)v411);
          }
          goto LABEL_1712;
        }
LABEL_529:
        v1277 = 0;
        v1277 = *((_DWORD *)v193 - 1);
        __len = 0;
        v420 = *((_QWORD *)v1287 - 1);
        v1285 = v193 - 4;
        v1287 -= 8;
        v1278 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v420;
        __b = (*a2)[19];
        v101 = v1292;
        v102 = v1294;
        v421 = (unint64_t)(*a2)[6];
        if (v1285 == v1284)
        {
          if (v421)
          {
            v710 = 0;
            v711 = (char *)__b;
            v712 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            v713 = __len;
            v1262 = v1278;
            v714 = 4 * __len;
            do
            {
              v715 = 0;
              if ((v712 & 0x80000000) == 0)
              {
                v716 = v712;
                v717 = v710;
                do
                {
                  v718 = ldiv(v717, v101[v716]);
                  v717 = v718.quot;
                  v715 += (_QWORD)v102[v716--] * v718.rem;
                }
                while (v716 != -1);
              }
              if (v713)
                memset(v711, 255, v714);
              v719 = v1277;
              if (v1277 >= 1)
              {
                v720 = 0;
                v721 = &v1262[(int)v715];
                do
                {
                  if (v713)
                  {
                    for (i12 = 0; i12 != v713; ++i12)
                    {
                      v724 = *v721++;
                      v723 = v724;
                      if (*(_DWORD *)&v711[4 * i12] < v724)
                        v723 = *(_DWORD *)&v711[4 * i12];
                      *(_DWORD *)&v711[4 * i12] = v723;
                    }
                  }
                  ++v720;
                }
                while (v720 != v719);
              }
              v711 += v714;
              v710 += v713;
            }
            while (v421 > v710);
          }
          goto LABEL_1708;
        }
        if (!v421)
          goto LABEL_1708;
        v422 = 0;
        v423 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
        while (1)
        {
          v1275 = 0;
          v424 = 0;
          if ((v423 & 0x80000000) == 0)
          {
            v425 = v423;
            v426 = v422;
            do
            {
              v427 = ldiv(v426, v101[v425]);
              v426 = v427.quot;
              v424 += (_QWORD)v102[v425--] * v427.rem;
            }
            while (v425 != -1);
          }
          v1275 = v424;
          if (__len)
            memset(__b, 255, 4 * __len);
          v1291 = 0;
          v428 = operator new(0x38uLL);
          *v428 = &off_251349FF8;
          v428[1] = &v1288;
          v428[2] = &v1278;
          v428[3] = &v1275;
          v428[4] = &__b;
          v428[5] = &v1277;
          v428[6] = &__len;
          v1291 = v428;
          v1299 = 0;
          v429 = (void **)operator new(0x28uLL);
          *v429 = &off_251346A78;
          v429[1] = &v1284;
          v429[2] = &v1286;
          v429[3] = v1298;
          v429[4] = v1290;
          v1294 = v429;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
          v430 = v1294;
          if (v1294 == (void **)&v1292)
          {
            v430 = (void **)&v1292;
            v431 = 4;
          }
          else
          {
            if (!v1294)
              goto LABEL_542;
            v431 = 5;
          }
          (*((void (**)(void))*v430 + v431))();
LABEL_542:
          LODWORD(v1292) = 0;
          v1289 = 0;
          if (!v1299)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
          v432 = v1299;
          if (v1299 == v1298)
          {
            v432 = v1298;
            v433 = 4;
          }
          else
          {
            if (!v1299)
              goto LABEL_548;
            v433 = 5;
          }
          (*(void (**)(void))(*v432 + 8 * v433))();
LABEL_548:
          v434 = v1291;
          if (v1291 == v1290)
          {
            v434 = v1290;
            v435 = 4;
            goto LABEL_552;
          }
          if (v1291)
          {
            v435 = 5;
LABEL_552:
            (*(void (**)(void))(*v434 + 8 * v435))();
          }
          __b = (char *)__b + 4 * __len;
          v422 += __len;
          if ((unint64_t)(*a2)[6] <= v422)
            goto LABEL_1708;
        }
      }
      if (v1283 != 5)
      {
        if (v1283 != 4)
          goto LABEL_1712;
        v193 = v1285;
        goto LABEL_529;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v384 = (*a2)[19];
      v101 = v1292;
      v102 = v1294;
      if (!(*a2)[6])
        goto LABEL_1708;
      v385 = 0;
      v386 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
      while (1)
      {
        LODWORD(__b) = 0;
        v387 = 0;
        if ((v386 & 0x80000000) == 0)
        {
          v388 = v386;
          v389 = v385;
          do
          {
            v390 = ldiv(v389, v101[v388]);
            v389 = v390.quot;
            v387 += (_QWORD)v102[v388--] * v390.rem;
          }
          while (v388 != -1);
        }
        LODWORD(__b) = v387;
        v1289 = -1;
        v1291 = 0;
        v391 = operator new(0x28uLL);
        *v391 = &off_25134A078;
        v391[1] = &v1277;
        v391[2] = &v1289;
        v391[3] = &__len;
        v391[4] = &__b;
        v1291 = v391;
        v1299 = 0;
        v392 = (void **)operator new(0x28uLL);
        *v392 = &off_251346A78;
        v392[1] = &v1284;
        v392[2] = &v1286;
        v392[3] = v1298;
        v392[4] = v1290;
        v1294 = v392;
        std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
        v393 = v1294;
        if (v1294 == (void **)&v1292)
        {
          v393 = (void **)&v1292;
          v394 = 4;
        }
        else
        {
          if (!v1294)
            goto LABEL_492;
          v394 = 5;
        }
        (*((void (**)(void))*v393 + v394))();
LABEL_492:
        LODWORD(v1292) = 0;
        LODWORD(v1278) = 0;
        if (!v1299)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
        v395 = v1299;
        if (v1299 == v1298)
        {
          v395 = v1298;
          v396 = 4;
        }
        else
        {
          if (!v1299)
            goto LABEL_498;
          v396 = 5;
        }
        (*(void (**)(void))(*v395 + 8 * v396))();
LABEL_498:
        v397 = v1291;
        if (v1291 == v1290)
        {
          v397 = v1290;
          v398 = 4;
          goto LABEL_502;
        }
        if (v1291)
        {
          v398 = 5;
LABEL_502:
          (*(void (**)(void))(*v397 + 8 * v398))();
        }
        *v384++ = v1289;
        if ((unint64_t)(*a2)[6] <= ++v385)
          goto LABEL_1708;
      }
    case 5:
      v24 = mlx::core::allocator::malloc_or_wait((mlx::core::allocator *)(*((unsigned __int8 *)*a2 + 60)
                                                                        * (_QWORD)(*a2)[6]));
      v1295 = &unk_2513463C8;
      v1296 = mlx::core::allocator::free;
      v1297 = &v1295;
      mlx::core::array::set_data(a2, (uint64_t)v24, (uint64_t)&v1295);
      v25 = v1297;
      if (v1297 == &v1295)
      {
        v26 = 4;
        v25 = &v1295;
      }
      else
      {
        if (!v1297)
          goto LABEL_65;
        v26 = 5;
      }
      (*((void (**)(void))*v25 + v26))();
LABEL_65:
      v1281 = 0;
      v1282 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
      if (__p)
      {
        v1281 = __p;
        operator delete(__p);
      }
      if (v1283 == 1)
      {
        v118 = v1285;
        if (v1285 - (_BYTE *)v1284 == 4)
        {
          v119 = (*a2)[6];
          if (v119)
          {
            v120 = 0;
            v121 = *(int *)v1284;
            v122 = (*a2)[19];
            v123 = *(unsigned int **)(*(_QWORD *)a1 + 152);
            do
            {
              *v122 = 0;
              if ((int)v121 >= 1)
              {
                v124 = 0;
                v125 = v121 + 1;
                v126 = v123;
                do
                {
                  v128 = *v126++;
                  v127 = v128;
                  if (v124 <= v128)
                    v124 = v127;
                  *v122 = v124;
                  --v125;
                }
                while (v125 > 1);
              }
              v120 = (int *)((char *)v120 + 1);
              ++v122;
              v123 += v121;
            }
            while (v120 != v119);
          }
          goto LABEL_1712;
        }
        goto LABEL_227;
      }
      if (!v1283)
      {
        v52 = (*a2)[19];
        *v52 = 0;
        v53 = *(_DWORD *)(*(_QWORD *)a1 + 48);
        if (v53 >= 1)
        {
          v54 = 0;
          v55 = *(unsigned int **)(*(_QWORD *)a1 + 152);
          v56 = v53 + 1;
          do
          {
            v58 = *v55++;
            v57 = v58;
            if (v54 <= v58)
              v54 = v57;
            *v52 = v54;
            --v56;
          }
          while (v56 > 1);
        }
        goto LABEL_1712;
      }
      if ((v1283 & 0xFFFFFFFD) == 1)
      {
        v118 = v1285;
LABEL_227:
        v1289 = 0;
        v1289 = *((_DWORD *)v118 - 1);
        v1285 = v118 - 4;
        v1287 -= 8;
        v177 = *(_QWORD *)(*(_QWORD *)a1 + 152);
        v1278 = (*a2)[19];
        __len = v177;
        v101 = v1292;
        v102 = v1294;
        v178 = (*a2)[6];
        if (v1285 == v1284)
        {
          if (v178)
          {
            v267 = 0;
            v268 = v1278;
            v269 = __len;
            v270 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            do
            {
              v271 = 0;
              if ((v270 & 0x80000000) == 0)
              {
                v272 = v270;
                v273 = (int)v267;
                do
                {
                  v274 = ldiv(v273, v101[v272]);
                  v273 = v274.quot;
                  v271 += (_QWORD)v102[v272--] * v274.rem;
                }
                while (v272 != -1);
              }
              *v268 = 0;
              if (v1289 >= 1)
              {
                v275 = 0;
                v276 = (unsigned int *)(v269 + 4 * (int)v271);
                v277 = v1289 + 1;
                do
                {
                  v279 = *v276++;
                  v278 = v279;
                  if (v275 <= v279)
                    v275 = v278;
                  *v268 = v275;
                  --v277;
                }
                while (v277 > 1);
              }
              v267 = (int *)((char *)v267 + 1);
              ++v268;
            }
            while (v267 != v178);
          }
          goto LABEL_1708;
        }
        if (!v178)
          goto LABEL_1708;
        v179 = 0;
        v180 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
        while (1)
        {
          v1277 = 0;
          v181 = 0;
          if ((v180 & 0x80000000) == 0)
          {
            v182 = v180;
            v183 = v179;
            do
            {
              v184 = ldiv(v183, v101[v182]);
              v183 = v184.quot;
              v181 += (_QWORD)v102[v182--] * v184.rem;
            }
            while (v182 != -1);
          }
          v1277 = v181;
          *v1278 = 0;
          v1291 = 0;
          v185 = operator new(0x30uLL);
          *v185 = &off_251349DF8;
          v185[1] = &v1275;
          v185[2] = &__len;
          v185[3] = &v1277;
          v185[4] = &v1278;
          v185[5] = &v1289;
          v1291 = v185;
          v1299 = 0;
          v186 = (void **)operator new(0x28uLL);
          *v186 = &off_251346A78;
          v186[1] = &v1284;
          v186[2] = &v1286;
          v186[3] = v1298;
          v186[4] = v1290;
          v1294 = v186;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
          v187 = v1294;
          if (v1294 == (void **)&v1292)
          {
            v187 = (void **)&v1292;
            v188 = 4;
          }
          else
          {
            if (!v1294)
              goto LABEL_238;
            v188 = 5;
          }
          (*((void (**)(void))*v187 + v188))();
LABEL_238:
          LODWORD(v1292) = 0;
          LODWORD(__b) = 0;
          if (!v1299)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, void **))(*v1299 + 48))(v1299, &v1292, &__b);
          v189 = v1299;
          if (v1299 == v1298)
          {
            v189 = v1298;
            v190 = 4;
          }
          else
          {
            if (!v1299)
              goto LABEL_244;
            v190 = 5;
          }
          (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_244:
          v191 = v1291;
          if (v1291 == v1290)
          {
            v191 = v1290;
            v192 = 4;
            goto LABEL_248;
          }
          if (v1291)
          {
            v192 = 5;
LABEL_248:
            (*(void (**)(void))(*v191 + 8 * v192))();
          }
          ++v179;
          ++v1278;
          if ((unint64_t)(*a2)[6] <= v179)
            goto LABEL_1708;
        }
      }
      if (v1283 == 2)
      {
        v197 = v1285;
        if (v1285 - (_BYTE *)v1284 == 4)
        {
          v683 = *((int *)v1285 - 1);
          v684 = *((_QWORD *)v1287 - 1);
          v1285 -= 4;
          v1287 -= 8;
          v685 = (*a2)[6];
          if (v685)
          {
            LODWORD(v686) = 0;
            v687 = (*a2)[19];
            v688 = *(unsigned int **)(*(_QWORD *)a1 + 152);
            do
            {
              if (v684)
                bzero(v687, 4 * v684);
              if ((int)v683 >= 1)
              {
                v689 = 0;
                v690 = v688;
                do
                {
                  if (v684)
                  {
                    for (i13 = 0; i13 != v684; ++i13)
                    {
                      v693 = *v690++;
                      v692 = v693;
                      if (v687[i13] > v693)
                        v692 = v687[i13];
                      v687[i13] = v692;
                    }
                  }
                  ++v689;
                }
                while (v689 != (_DWORD)v683);
              }
              v688 += v684 * v683;
              v687 += v684;
              v686 = (int)v686 + (int)v684;
            }
            while (v686 < (unint64_t)v685);
          }
          goto LABEL_1712;
        }
LABEL_950:
        v1277 = 0;
        v1277 = *((_DWORD *)v197 - 1);
        __len = 0;
        v694 = *((_QWORD *)v1287 - 1);
        v1285 = v197 - 4;
        v1287 -= 8;
        v1278 = *(int **)(*(_QWORD *)a1 + 152);
        __len = v694;
        __b = (*a2)[19];
        v101 = v1292;
        v102 = v1294;
        v695 = (unint64_t)(*a2)[6];
        if (v1285 == v1284)
        {
          if (v695)
          {
            v767 = 0;
            v768 = (char *)__b;
            v769 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
            v770 = __len;
            v1266 = v1278;
            v771 = 4 * __len;
            do
            {
              v772 = 0;
              if ((v769 & 0x80000000) == 0)
              {
                v773 = v769;
                v774 = v767;
                do
                {
                  v775 = ldiv(v774, v101[v773]);
                  v774 = v775.quot;
                  v772 += (_QWORD)v102[v773--] * v775.rem;
                }
                while (v773 != -1);
              }
              if (v770)
                bzero(v768, v771);
              v776 = v1277;
              if (v1277 >= 1)
              {
                v777 = 0;
                v778 = &v1266[(int)v772];
                do
                {
                  if (v770)
                  {
                    for (i14 = 0; i14 != v770; ++i14)
                    {
                      v781 = *v778++;
                      v780 = v781;
                      if (*(_DWORD *)&v768[4 * i14] > v781)
                        v780 = *(_DWORD *)&v768[4 * i14];
                      *(_DWORD *)&v768[4 * i14] = v780;
                    }
                  }
                  ++v777;
                }
                while (v777 != v776);
              }
              v768 += v771;
              v767 += v770;
            }
            while (v695 > v767);
          }
          goto LABEL_1708;
        }
        if (!v695)
          goto LABEL_1708;
        v696 = 0;
        v697 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
        while (1)
        {
          v1275 = 0;
          v698 = 0;
          if ((v697 & 0x80000000) == 0)
          {
            v699 = v697;
            v700 = v696;
            do
            {
              v701 = ldiv(v700, v101[v699]);
              v700 = v701.quot;
              v698 += (_QWORD)v102[v699--] * v701.rem;
            }
            while (v699 != -1);
          }
          v1275 = v698;
          if (__len)
            bzero(__b, 4 * __len);
          v1291 = 0;
          v702 = operator new(0x38uLL);
          *v702 = &off_251349E78;
          v702[1] = &v1288;
          v702[2] = &v1278;
          v702[3] = &v1275;
          v702[4] = &__b;
          v702[5] = &v1277;
          v702[6] = &__len;
          v1291 = v702;
          v1299 = 0;
          v703 = (void **)operator new(0x28uLL);
          *v703 = &off_251346A78;
          v703[1] = &v1284;
          v703[2] = &v1286;
          v703[3] = v1298;
          v703[4] = v1290;
          v1294 = v703;
          std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
          v704 = v1294;
          if (v1294 == (void **)&v1292)
          {
            v704 = (void **)&v1292;
            v705 = 4;
          }
          else
          {
            if (!v1294)
              goto LABEL_963;
            v705 = 5;
          }
          (*((void (**)(void))*v704 + v705))();
LABEL_963:
          LODWORD(v1292) = 0;
          v1289 = 0;
          if (!v1299)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, int *))(*v1299 + 48))(v1299, &v1292, &v1289);
          v706 = v1299;
          if (v1299 == v1298)
          {
            v706 = v1298;
            v707 = 4;
          }
          else
          {
            if (!v1299)
              goto LABEL_969;
            v707 = 5;
          }
          (*(void (**)(void))(*v706 + 8 * v707))();
LABEL_969:
          v708 = v1291;
          if (v1291 == v1290)
          {
            v708 = v1290;
            v709 = 4;
            goto LABEL_973;
          }
          if (v1291)
          {
            v709 = 5;
LABEL_973:
            (*(void (**)(void))(*v708 + 8 * v709))();
          }
          __b = (char *)__b + 4 * __len;
          v696 += __len;
          if ((unint64_t)(*a2)[6] <= v696)
            goto LABEL_1708;
        }
      }
      if (v1283 != 5)
      {
        if (v1283 != 4)
          goto LABEL_1712;
        v197 = v1285;
        goto LABEL_950;
      }
      __len = *(_QWORD *)(*(_QWORD *)a1 + 152);
      v652 = (*a2)[19];
      v101 = v1292;
      v102 = v1294;
      if (!(*a2)[6])
        goto LABEL_1708;
      v653 = 0;
      v654 = ((unint64_t)(v1293 - (_QWORD)v1292) >> 2) - 1;
      break;
    default:
      return;
  }
  while (1)
  {
    LODWORD(__b) = 0;
    v655 = 0;
    if ((v654 & 0x80000000) == 0)
    {
      v656 = v654;
      v657 = v653;
      do
      {
        v658 = ldiv(v657, v101[v656]);
        v657 = v658.quot;
        v655 += (_QWORD)v102[v656--] * v658.rem;
      }
      while (v656 != -1);
    }
    LODWORD(__b) = v655;
    v1289 = 0;
    v1291 = 0;
    v659 = operator new(0x28uLL);
    *v659 = &off_251349EF8;
    v659[1] = &v1277;
    v659[2] = &v1289;
    v659[3] = &__len;
    v659[4] = &__b;
    v1291 = v659;
    v1299 = 0;
    v660 = (void **)operator new(0x28uLL);
    *v660 = &off_251346A78;
    v660[1] = &v1284;
    v660[2] = &v1286;
    v660[3] = v1298;
    v660[4] = v1290;
    v1294 = v660;
    std::__function::__value_func<void ()(int,int)>::swap[abi:ne180100](&v1292, v1298);
    v661 = v1294;
    if (v1294 == (void **)&v1292)
    {
      v661 = (void **)&v1292;
      v662 = 4;
    }
    else
    {
      if (!v1294)
        goto LABEL_896;
      v662 = 5;
    }
    (*((void (**)(void))*v661 + v662))();
LABEL_896:
    LODWORD(v1292) = 0;
    LODWORD(v1278) = 0;
    if (!v1299)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int **, int **))(*v1299 + 48))(v1299, &v1292, &v1278);
    v663 = v1299;
    if (v1299 == v1298)
    {
      v663 = v1298;
      v664 = 4;
    }
    else
    {
      if (!v1299)
        goto LABEL_902;
      v664 = 5;
    }
    (*(void (**)(void))(*v663 + 8 * v664))();
LABEL_902:
    v665 = v1291;
    if (v1291 == v1290)
    {
      v665 = v1290;
      v666 = 4;
      goto LABEL_906;
    }
    if (v1291)
    {
      v666 = 5;
LABEL_906:
      (*(void (**)(void))(*v665 + 8 * v666))();
    }
    *v652++ = v1289;
    if ((unint64_t)(*a2)[6] <= ++v653)
      goto LABEL_1708;
  }
}

