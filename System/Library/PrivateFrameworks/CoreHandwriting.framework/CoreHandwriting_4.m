void sub_1BE857754(uint64_t a1)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t j;
  void *v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  uint64_t v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  id v164;
  id obj;
  void *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _QWORD v171[4];
  id v172;
  id v173;
  uint8_t *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint8_t buf[8];
  uint8_t *v180;
  uint64_t v181;
  uint64_t (*v182)(uint64_t, uint64_t);
  void (*v183)(uint64_t);
  __CFString *v184;
  uint8_t v185[4];
  uint64_t v186;
  _BYTE v187[128];
  _BYTE v188[128];
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  sub_1BE84AA04(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), 2, 1, 0, 0, 0, *(void **)(a1 + 64));
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v161)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v1 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v1, OS_LOG_TYPE_FAULT, "Context results must be non-nil", buf, 2u);
    }

  }
  v2 = (void *)objc_opt_class();
  v3 = *(_QWORD *)(a1 + 40);
  objc_msgSend_latestStrokeProvider(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokesForIdentifiers_inStrokeProvider_(v2, v10, v3, (uint64_t)v9, v11, v12);
  v160 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = (void *)objc_opt_class();
  objc_msgSend_createDrawingForStrokes_interpolationType_resolution_cancellationBlock_(v13, v14, (uint64_t)v160, 1, 2, *(_QWORD *)(a1 + 64));
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)buf = 0;
  v180 = buf;
  v181 = 0x3032000000;
  v182 = sub_1BE83F220;
  v183 = sub_1BE83F230;
  v184 = &stru_1E77F6F28;
  objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v15, *(_QWORD *)(a1 + 40), v16, v17, v18);
  v166 = (void *)objc_claimAutoreleasedReturnValue();
  v177 = 0u;
  v178 = 0u;
  v175 = 0u;
  v176 = 0u;
  obj = v161;
  v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v19, (uint64_t)&v175, (uint64_t)v188, 16, v20);
  if (v26)
  {
    v27 = *(_QWORD *)v176;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v176 != v27)
          objc_enumerationMutation(obj);
        v29 = *(void **)(*((_QWORD *)&v175 + 1) + 8 * i);
        objc_msgSend_textResult(v29, v21, v22, v23, v24, v25);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_inputStrokeIdentifiers(v30, v31, v32, v33, v34, v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_textResult(v29, v37, v38, v39, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_rawTranscriptionPath(v42, v43, v44, v45, v46, v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_tokenColumns(v42, v49, v50, v51, v52, v53);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v60 = objc_msgSend_count(v54, v55, v56, v57, v58, v59);
        v171[0] = MEMORY[0x1E0C809B0];
        v171[1] = 3221225472;
        v171[2] = sub_1BE857F1C;
        v171[3] = &unk_1E77F6338;
        v61 = v36;
        v172 = v61;
        v173 = v166;
        v174 = buf;
        objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_(v42, v62, (uint64_t)v48, 0, v60, (uint64_t)v171);

        objc_msgSend_stringByAppendingString_(*((void **)v180 + 5), v63, (uint64_t)CFSTR(" "), v64, v65, v66);
        v67 = objc_claimAutoreleasedReturnValue();
        v68 = (void *)*((_QWORD *)v180 + 5);
        *((_QWORD *)v180 + 5) = v67;

      }
      v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v21, (uint64_t)&v175, (uint64_t)v188, 16, v25);
    }
    while (v26);
  }

  v69 = (void *)*((_QWORD *)v180 + 5);
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v70, v71, v72, v73, v74);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByTrimmingCharactersInSet_(v69, v76, (uint64_t)v75, v77, v78, v79);
  v80 = objc_claimAutoreleasedReturnValue();
  v81 = (void *)*((_QWORD *)v180 + 5);
  *((_QWORD *)v180 + 5) = v80;

  objc_msgSend_textSynthesizer(*(void **)(a1 + 32), v82, v83, v84, v85, v86);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_replaceDrawing_originalTranscription_replacementTranscription_options_shouldCancel_error_(v87, v88, (uint64_t)v159, *((_QWORD *)v180 + 5), *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 64), 0);
  v158 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_reflowableTokensFromSynthesisResult_shouldCancel_(CHTextTransformationManager, v89, (uint64_t)v158, *(_QWORD *)(a1 + 64), v90, v91);
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  v97 = objc_msgSend_totalUnitCount(*(void **)(a1 + 56), v92, v93, v94, v95, v96);
  objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 56), v98, v97, v99, v100, v101);
  if (objc_msgSend_count(v162, v102, v103, v104, v105, v106))
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v107, v108, v109, v110, v111);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v113, v114, v115, v116, v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    v169 = 0u;
    v170 = 0u;
    v167 = 0u;
    v168 = 0u;
    v164 = v162;
    v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(v164, v119, (uint64_t)&v167, (uint64_t)v187, 16, v120);
    if (v126)
    {
      v127 = 0;
      v128 = *(_QWORD *)v168;
      do
      {
        for (j = 0; j != v126; ++j)
        {
          if (*(_QWORD *)v168 != v128)
            objc_enumerationMutation(v164);
          v130 = *(void **)(*((_QWORD *)&v167 + 1) + 8 * j);
          objc_msgSend_string(v130, v121, v122, v123, v124, v125);
          v131 = (void *)objc_claimAutoreleasedReturnValue();
          v137 = objc_msgSend_length(v131, v132, v133, v134, v135, v136);

          LODWORD(v131) = objc_msgSend_hasPrecedingSpace(v130, v138, v139, v140, v141, v142);
          objc_msgSend_addObject_(v118, v143, (uint64_t)v130, v144, v145, v146);
          v147 = v137 + v131;
          objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v148, v127, v147, v149, v150);
          v151 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v112, v152, (uint64_t)v151, v153, v154, v155);

          v127 += v147;
        }
        v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(v164, v121, (uint64_t)&v167, (uint64_t)v187, 16, v125);
      }
      while (v126);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v156 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
    {
      v157 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v185 = 138412290;
      v186 = v157;
      _os_log_impl(&dword_1BE607000, v156, OS_LOG_TYPE_ERROR, "Failed to create reflowable tokens for synthesized string to replace strokes: %@", v185, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }

  _Block_object_dispose(buf, 8);
}

void sub_1BE857D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id a48)
{
  void *v48;
  void *v49;

  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_1BE857F1C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = (void *)a1[4];
  v47 = v3;
  objc_msgSend_strokeIndexes(v3, v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectsAtIndexes_(v5, v12, (uint64_t)v11, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithArray_(v4, v17, (uint64_t)v16, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_isSubsetOfSet_(v21, v22, a1[5], v23, v24, v25))
  {
    v31 = objc_msgSend_properties(v47, v26, v27, v28, v29, v30);
    v32 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
    objc_msgSend_string(v47, v33, v34, v35, v36, v37);
    v38 = objc_claimAutoreleasedReturnValue();
    v43 = (void *)v38;
    if ((v31 & 0x20) != 0)
      objc_msgSend_stringByAppendingFormat_(v32, v39, (uint64_t)CFSTR(" %@"), v40, v41, v42, v38);
    else
      objc_msgSend_stringByAppendingFormat_(v32, v39, (uint64_t)CFSTR("%@"), v40, v41, v42, v38);
    v44 = objc_claimAutoreleasedReturnValue();
    v45 = *(_QWORD *)(a1[6] + 8);
    v46 = *(void **)(v45 + 40);
    *(_QWORD *)(v45 + 40) = v44;

  }
}

void sub_1BE858020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE858048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE858064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE85807C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8581C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE858310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE858440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85A3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _Unwind_Exception *exception_object, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

id sub_1BE85AAA8(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char isCharacterLevel;
  CHTextInputGesture *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  void *Stroke_preferCharacterLevel;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  CHTextCorrectionResult *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  void *isCharacterLevel_error;
  id v67;
  unsigned __int8 v68;
  _QWORD v69[2];

  v9 = a2;
  v10 = a3;
  v67 = a4;
  v16 = a5;
  if (a1)
  {
    isCharacterLevel = objc_msgSend_isCharacterLevel(v9, v11, v12, v13, v14, v15);
    v18 = [CHTextInputGesture alloc];
    v24 = objc_msgSend_resultType(v9, v19, v20, v21, v22, v23);
    objc_msgSend_locales(a1, v25, v26, v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstObject(v30, v31, v32, v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    Stroke_preferCharacterLevel = (void *)objc_msgSend_initWithGestureType_targetContentInfo_locale_normalizedDrawing_originalDrawing_lastStroke_preferCharacterLevel_(v18, v37, v24, (uint64_t)v16, (uint64_t)v36, (uint64_t)v10, v10, v67, isCharacterLevel);

    v68 = 0;
    objc_msgSend_getAffectedRange_expandedToFullTokens_(Stroke_preferCharacterLevel, v39, (uint64_t)v69, (uint64_t)&v68, v40, v41);
    v42 = v68;
    v43 = [CHTextCorrectionResult alloc];
    objc_msgSend_textInputTarget(v16, v44, v45, v46, v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = v69[0];
    v51 = v69[1];
    objc_msgSend_textResult(Stroke_preferCharacterLevel, v52, v53, v54, v55, v56);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v63 = objc_msgSend_gestureType(Stroke_preferCharacterLevel, v58, v59, v60, v61, v62);
    isCharacterLevel_error = (void *)objc_msgSend_initWithInputTarget_affectedRange_textResult_resultType_isCharacterLevel_error_(v43, v64, (uint64_t)v49, v50, v51, (uint64_t)v57, v63, v42 == 0, 0);

  }
  else
  {
    isCharacterLevel_error = 0;
  }

  return isCharacterLevel_error;
}

void sub_1BE85AC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE85ACA4(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t isEqualToString;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = a2;
  objc_msgSend_string(v2, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isEqualToString_(v8, v9, (uint64_t)CFSTR("Line"), v10, v11, v12) & 1) != 0)
  {
    isEqualToString = 1;
  }
  else
  {
    objc_msgSend_string(v2, v13, v14, v15, v16, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v19, v20, (uint64_t)CFSTR("Manhattan Line"), v21, v22, v23);

  }
  return isEqualToString;
}

void sub_1BE85AD20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE85AD38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85AD48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE85AD5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isEqualToString;

  objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v6, v7, (uint64_t)CFSTR("Oval"), v8, v9, v10);

  return isEqualToString;
}

void sub_1BE85AD9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE85ADAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isEqualToString;

  objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v6, v7, (uint64_t)CFSTR("Rectangle"), v8, v9, v10);

  return isEqualToString;
}

void sub_1BE85ADEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE85ADFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isEqualToString;

  objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v6, v7, (uint64_t)CFSTR("ScratchOut"), v8, v9, v10);

  return isEqualToString;
}

void sub_1BE85AE3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE85AE4C(void *a1, NSUInteger a2, NSUInteger a3, BOOL *a4, double *a5, double *a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14)
{
  id v24;
  double v25;
  double MaxX;
  CGFloat v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSUInteger v33;
  const char *length;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  double v40;
  double v41;
  uint64_t v42;
  id v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CGFloat v68;
  double MinY;
  _BOOL4 v70;
  _BOOL4 v71;
  NSObject *v72;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double MidX;
  double MinX;
  CGFloat rect;
  CGFloat v104;
  CGFloat v105;
  double rect1;
  CGFloat rect1a;
  uint8_t buf[4];
  _BOOL4 v110;
  __int16 v111;
  _BOOL4 v112;
  uint64_t v113;
  NSRange v114;
  NSRange v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;

  v113 = *MEMORY[0x1E0C80C00];
  v24 = a1;
  MaxX = *MEMORY[0x1E0C9D628];
  v25 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v27 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  rect1 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v115.location = objc_msgSend_referenceSubstringRange(v24, v28, v29, v30, v31, v32);
  v115.length = v33;
  v114.location = a2;
  v114.length = a3;
  length = (const char *)NSIntersectionRange(v114, v115).length;
  rect = a13;
  v104 = a10;
  v105 = a9;
  objc_msgSend_referenceSubstringRange(v24, length, v35, v36, v37, v38);
  v39 = 0;
  v40 = 0.0;
  v41 = 6.0;
  if (!v42 || length != (const char *)a3)
  {
    v68 = a8;
    MinY = v25;
    a14 = rect1;
    if (!a4)
      goto LABEL_11;
    goto LABEL_10;
  }
  v43 = v24;
  objc_opt_self();
  v48 = objc_msgSend_relativeLocationFromAbsoluteLocation_(v43, v44, a2, v45, v46, v47);
  v54 = v48;
  v55 = 0;
  v56 = 0x7FFFFFFFFFFFFFFFLL;
  if (v48 && v48 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend_referenceSubstring(v43, v49, v50, v51, v52, v53);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v57, v58, v54 - 1, v59, v60, v61);
    v55 = v62;

  }
  if (v56 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v68 = a8;
    v39 = 0;
    MinY = v25;
    a14 = rect1;
    if (!a4)
      goto LABEL_11;
LABEL_10:
    *a4 = v39;
    goto LABEL_11;
  }
  objc_msgSend_referenceSubstring(v43, v63, v64, v65, v66, v67);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_substringWithRange_(v74, v75, v56, v55, v76, v77);
  v78 = (void *)objc_claimAutoreleasedReturnValue();

  v84 = objc_msgSend_characterRectsInReferenceSubstring(v43, v79, v80, v81, v82, v83) + 32 * v56;
  v86 = *(double *)v84;
  v85 = *(double *)(v84 + 8);
  v87 = *(double *)(v84 + 16);
  rect1a = *(double *)(v84 + 24);
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v88, v89, v90, v91, v92);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = a8;
  objc_msgSend_rangeOfCharacterFromSet_(v78, v94, (uint64_t)v93, v95, v96, v97);
  v39 = v98 == v55;

  v118.origin.x = a11;
  v118.origin.y = a12;
  v118.size.width = rect;
  v118.size.height = a14;
  MinY = CGRectGetMinY(v118);
  v119.origin.x = a7;
  v119.origin.y = v68;
  v119.size.width = v105;
  v119.size.height = v104;
  MidX = CGRectGetMidX(v119);
  v120.origin.x = v86;
  v120.origin.y = v85;
  v120.size.width = v87;
  v120.size.height = rect1a;
  if (MidX <= CGRectGetMidX(v120))
  {
    v123.origin.x = v86;
    v123.origin.y = v85;
    v123.size.width = v87;
    v123.size.height = rect1a;
    MinX = CGRectGetMinX(v123);
    v124.origin.x = a7;
    v124.origin.y = v68;
    v124.size.width = v105;
    v124.size.height = v104;
    v41 = a14 * 0.4;
    MaxX = MinX - a14 * 0.4;
    v40 = MinX - CGRectGetMaxX(v124);
  }
  else
  {
    v121.origin.x = v86;
    v121.origin.y = v85;
    v121.size.width = v87;
    v121.size.height = rect1a;
    MaxX = CGRectGetMaxX(v121);
    v122.origin.x = a7;
    v122.origin.y = v68;
    v122.size.width = v105;
    v122.size.height = v104;
    v40 = CGRectGetMinX(v122) - MaxX;
    v41 = a14 * 0.4;
  }
  rect1 = a14 + a14;
  v25 = MinY + a14 * -0.5;

  v27 = v41;
  if (a4)
    goto LABEL_10;
LABEL_11:
  if (a5)
    *a5 = v40;
  if (a6)
    *a6 = v41;
  v116.origin.x = a7;
  v116.origin.y = v68;
  v116.size.width = v105;
  v116.size.height = v104;
  v125.origin.x = MaxX;
  v125.origin.y = MinY;
  v125.size.width = v27;
  v125.size.height = a14;
  v70 = CGRectIntersectsRect(v116, v125);
  v117.origin.x = MaxX;
  v117.origin.y = v25;
  v117.size.width = v27;
  v117.size.height = rect1;
  v126.origin.x = a7;
  v126.origin.y = v68;
  v126.size.width = v105;
  v126.size.height = v104;
  v71 = CGRectContainsRect(v117, v126);
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v72 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v110 = v70;
    v111 = 1024;
    v112 = v71;
    _os_log_impl(&dword_1BE607000, v72, OS_LOG_TYPE_DEBUG, "doesIntersectNoSpaceRegion: %i isContainedInPaddedNoSpaceRegion: %i", buf, 0xEu);
  }

  return v70 | v71;
}

void sub_1BE85B270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE85B288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85B29C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85B2B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85B2C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE85B2DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85B2F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85B304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85B318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85B328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85B33C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85B350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85B364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85B374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85B384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85B398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85B3A8(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGRect v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  if (!CGRectIsNull(*(CGRect *)&a2))
  {
    v10.origin.x = a2;
    v10.origin.y = a3;
    v10.size.width = a4;
    v10.size.height = a5;
    if (CGRectGetMaxX(v10) >= *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v11.origin.x = a2;
      v11.origin.y = a3;
      v11.size.width = a4;
      v11.size.height = a5;
      *(CGFloat *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CGRectGetMaxX(v11);
    }
    v12.origin.x = a2;
    v12.origin.y = a3;
    v12.size.width = a4;
    v12.size.height = a5;
    if (CGRectGetMinX(v12) <= *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      v13.origin.x = a2;
      v13.origin.y = a3;
      v13.size.width = a4;
      v13.size.height = a5;
      *(CGFloat *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CGRectGetMinX(v13);
    }
  }
}

void sub_1BE85B4F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85B500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85B510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85C1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1BE85C5A0()
{
  CHCharacterSetRules *v0;
  void *v1;

  v0 = objc_alloc_init(CHCharacterSetRules);
  v1 = (void *)qword_1EF568420;
  qword_1EF568420 = (uint64_t)v0;

}

uint64_t *sub_1BE85C6C0(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  v1 = result;
  v2 = result[4];
  if (!v2)
  {
    v10 = 0;
    goto LABEL_43;
  }
  v3 = *((_DWORD *)result + 12);
  v4 = *(uint64_t **)(v2 + 280);
  if (!v4)
  {
LABEL_14:
    if ((int)v3 <= 8219)
    {
      v10 = 5;
      switch(v3)
      {
        case 0x21u:
        case 0x22u:
        case 0x2Bu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x37u:
        case 0x38u:
        case 0x39u:
        case 0x3Au:
        case 0x3Bu:
        case 0x3Du:
        case 0x3Fu:
        case 0x40u:
        case 0x44u:
        case 0x4Au:
        case 0x4Cu:
        case 0x50u:
        case 0x51u:
        case 0x54u:
        case 0x55u:
        case 0x56u:
        case 0x58u:
        case 0x61u:
        case 0x62u:
        case 0x64u:
        case 0x65u:
        case 0x66u:
        case 0x67u:
        case 0x68u:
        case 0x69u:
        case 0x6Au:
        case 0x6Eu:
        case 0x70u:
        case 0x71u:
        case 0x72u:
        case 0x74u:
        case 0x75u:
        case 0x76u:
        case 0x78u:
        case 0x79u:
        case 0x7Bu:
        case 0x7Du:
        case 0xA1u:
        case 0xA7u:
        case 0xABu:
        case 0xBAu:
        case 0xBBu:
        case 0xBFu:
        case 0xC7u:
        case 0xD2u:
        case 0xD3u:
        case 0xD4u:
        case 0xD5u:
        case 0xD7u:
        case 0xDFu:
        case 0xE7u:
        case 0xECu:
        case 0xEDu:
        case 0xEEu:
        case 0xF2u:
        case 0xF3u:
        case 0xF4u:
        case 0xF5u:
          goto LABEL_16;
        case 0x23u:
        case 0x2Au:
        case 0x45u:
        case 0x4Du:
        case 0x57u:
        case 0x5Au:
        case 0x77u:
        case 0x7Au:
        case 0xC0u:
        case 0xC1u:
        case 0xC2u:
        case 0xC3u:
        case 0xCCu:
        case 0xCDu:
        case 0xCEu:
        case 0xD1u:
        case 0xDCu:
        case 0xE4u:
        case 0xEBu:
        case 0xFCu:
        case 0xFFu:
          v10 = 4;
          if (!v4)
            goto LABEL_30;
          goto LABEL_35;
        case 0x24u:
        case 0x25u:
        case 0x41u:
        case 0x42u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Bu:
        case 0x4Eu:
        case 0x52u:
        case 0x59u:
        case 0x6Bu:
        case 0x6Du:
        case 0xA3u:
        case 0xAAu:
        case 0xD6u:
        case 0xD9u:
        case 0xDAu:
        case 0xDBu:
        case 0xE0u:
        case 0xE1u:
        case 0xE2u:
        case 0xE3u:
        case 0xE8u:
        case 0xE9u:
        case 0xEAu:
        case 0xEFu:
        case 0xF1u:
        case 0xF6u:
        case 0xF7u:
        case 0xF9u:
        case 0xFAu:
        case 0xFBu:
        case 0x152u:
        case 0x153u:
          goto LABEL_28;
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x29u:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x36u:
        case 0x3Cu:
        case 0x3Eu:
        case 0x43u:
        case 0x4Fu:
        case 0x53u:
        case 0x5Bu:
        case 0x5Cu:
        case 0x5Du:
        case 0x5Eu:
        case 0x5Fu:
        case 0x60u:
        case 0x63u:
        case 0x6Cu:
        case 0x6Fu:
        case 0x73u:
        case 0x7Cu:
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
        case 0x84u:
        case 0x85u:
        case 0x86u:
        case 0x87u:
        case 0x88u:
        case 0x89u:
        case 0x8Au:
        case 0x8Bu:
        case 0x8Cu:
        case 0x8Du:
        case 0x8Eu:
        case 0x8Fu:
        case 0x90u:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x94u:
        case 0x95u:
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0x99u:
        case 0x9Au:
        case 0x9Bu:
        case 0x9Cu:
        case 0x9Du:
        case 0x9Eu:
        case 0x9Fu:
        case 0xA0u:
        case 0xA2u:
        case 0xA4u:
        case 0xA6u:
        case 0xA8u:
        case 0xA9u:
        case 0xACu:
        case 0xADu:
        case 0xAEu:
        case 0xAFu:
        case 0xB0u:
        case 0xB1u:
        case 0xB2u:
        case 0xB3u:
        case 0xB4u:
        case 0xB5u:
        case 0xB6u:
        case 0xB7u:
        case 0xB8u:
        case 0xB9u:
        case 0xBCu:
        case 0xBDu:
        case 0xBEu:
        case 0xC5u:
        case 0xC6u:
        case 0xCBu:
        case 0xD0u:
        case 0xD8u:
        case 0xDDu:
        case 0xDEu:
        case 0xE5u:
        case 0xE6u:
        case 0xF0u:
        case 0xF8u:
        case 0xFDu:
        case 0xFEu:
        case 0x100u:
        case 0x101u:
        case 0x102u:
        case 0x103u:
        case 0x104u:
        case 0x105u:
        case 0x106u:
        case 0x107u:
        case 0x108u:
        case 0x109u:
        case 0x10Au:
        case 0x10Bu:
        case 0x10Cu:
        case 0x10Du:
        case 0x10Eu:
        case 0x10Fu:
        case 0x110u:
        case 0x111u:
        case 0x112u:
        case 0x113u:
        case 0x114u:
        case 0x115u:
        case 0x116u:
        case 0x117u:
        case 0x118u:
        case 0x119u:
        case 0x11Au:
        case 0x11Bu:
        case 0x11Cu:
        case 0x11Du:
        case 0x11Eu:
        case 0x11Fu:
        case 0x120u:
        case 0x121u:
        case 0x122u:
        case 0x123u:
        case 0x124u:
        case 0x125u:
        case 0x126u:
        case 0x127u:
        case 0x128u:
        case 0x129u:
        case 0x12Au:
        case 0x12Bu:
        case 0x12Cu:
        case 0x12Du:
        case 0x12Eu:
        case 0x12Fu:
        case 0x130u:
        case 0x131u:
        case 0x132u:
        case 0x133u:
        case 0x134u:
        case 0x135u:
        case 0x136u:
        case 0x137u:
        case 0x138u:
        case 0x139u:
        case 0x13Au:
        case 0x13Bu:
        case 0x13Cu:
        case 0x13Du:
        case 0x13Eu:
        case 0x13Fu:
        case 0x140u:
        case 0x141u:
        case 0x142u:
        case 0x143u:
        case 0x144u:
        case 0x145u:
        case 0x146u:
        case 0x147u:
        case 0x148u:
        case 0x149u:
        case 0x14Au:
        case 0x14Bu:
        case 0x14Cu:
        case 0x14Du:
        case 0x14Eu:
        case 0x14Fu:
        case 0x150u:
        case 0x151u:
        case 0x154u:
        case 0x155u:
        case 0x156u:
        case 0x157u:
        case 0x158u:
        case 0x159u:
        case 0x15Au:
        case 0x15Bu:
        case 0x15Cu:
        case 0x15Du:
        case 0x15Eu:
        case 0x15Fu:
        case 0x160u:
        case 0x161u:
        case 0x162u:
        case 0x163u:
        case 0x164u:
        case 0x165u:
        case 0x166u:
        case 0x167u:
        case 0x168u:
        case 0x169u:
        case 0x16Au:
        case 0x16Bu:
        case 0x16Cu:
        case 0x16Du:
        case 0x16Eu:
        case 0x16Fu:
        case 0x170u:
        case 0x171u:
        case 0x172u:
        case 0x173u:
        case 0x174u:
        case 0x175u:
        case 0x176u:
        case 0x177u:
          goto LABEL_32;
        case 0xA5u:
        case 0xC4u:
        case 0xC8u:
        case 0xC9u:
        case 0xCAu:
        case 0xCFu:
        case 0x178u:
          goto LABEL_29;
        default:
          if (v3 != 7838)
            goto LABEL_32;
          goto LABEL_16;
      }
    }
    if (v3 - 8220 < 3)
    {
LABEL_16:
      v10 = 2;
      if (v4)
        goto LABEL_35;
    }
    else if (v3 == 8230 || v3 == 8364)
    {
LABEL_28:
      v10 = 3;
LABEL_29:
      if (v4)
      {
        while (1)
        {
LABEL_35:
          while (1)
          {
            v15 = (uint64_t **)v4;
            v16 = *((_DWORD *)v4 + 8);
            if (v16 <= v3)
              break;
            v4 = *v15;
            v14 = v15;
            if (!*v15)
              goto LABEL_39;
          }
          if (v16 >= v3)
            goto LABEL_42;
          v4 = v15[1];
          if (!v4)
          {
            v14 = v15 + 1;
            goto LABEL_39;
          }
        }
      }
    }
    else
    {
LABEL_32:
      v10 = 1;
      if (v4)
        goto LABEL_35;
    }
LABEL_30:
    v14 = (uint64_t **)(v2 + 280);
    v15 = (uint64_t **)(v2 + 280);
LABEL_39:
    v17 = (uint64_t *)v15;
    v15 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v15 + 8) = v3;
    v15[5] = 0;
    *v15 = 0;
    v15[1] = 0;
    v15[2] = v17;
    *v14 = (uint64_t *)v15;
    v18 = **(_QWORD **)(v2 + 272);
    v19 = (uint64_t *)v15;
    if (v18)
    {
      *(_QWORD *)(v2 + 272) = v18;
      v19 = *v14;
    }
    result = sub_1BE61F5C0(*(uint64_t **)(v2 + 280), v19);
    ++*(_QWORD *)(v2 + 288);
LABEL_42:
    v15[5] = (uint64_t *)v10;
    goto LABEL_43;
  }
  v5 = *(uint64_t **)(v2 + 280);
  while (1)
  {
    v6 = *((_DWORD *)v5 + 8);
    if (v6 <= v3)
      break;
LABEL_4:
    v5 = (uint64_t *)*v5;
    if (!v5)
      goto LABEL_14;
  }
  if (v6 < v3)
  {
    ++v5;
    goto LABEL_4;
  }
  do
  {
    while (1)
    {
      v7 = (uint64_t **)v4;
      v8 = *((_DWORD *)v4 + 8);
      if (v8 > v3)
        break;
      if (v8 >= v3)
      {
        v10 = (uint64_t)v7[5];
        goto LABEL_43;
      }
      v4 = v7[1];
      if (!v4)
      {
        v9 = v7 + 1;
        goto LABEL_21;
      }
    }
    v4 = *v7;
  }
  while (*v7);
  v9 = v7;
LABEL_21:
  v11 = operator new(0x30uLL);
  *((_DWORD *)v11 + 8) = v3;
  *((_QWORD *)v11 + 5) = 0;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = v7;
  *v9 = (uint64_t *)v11;
  v12 = **(_QWORD **)(v2 + 272);
  v13 = (uint64_t *)v11;
  if (v12)
  {
    *(_QWORD *)(v2 + 272) = v12;
    v13 = *v9;
  }
  result = sub_1BE61F5C0(*(uint64_t **)(v2 + 280), v13);
  ++*(_QWORD *)(v2 + 288);
  v10 = *((_QWORD *)v11 + 5);
LABEL_43:
  *(_QWORD *)(*(_QWORD *)(v1[5] + 8) + 24) = v10;
  return result;
}

uint64_t sub_1BE85C9EC(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(_DWORD *)(result + 48);
    v1 = 3;
    switch(v2)
    {
      case 34:
      case 58:
      case 59:
      case 161:
      case 171:
      case 187:
      case 192:
      case 193:
      case 194:
      case 195:
      case 200:
      case 201:
      case 202:
      case 204:
      case 205:
      case 206:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 217:
      case 218:
      case 219:
      case 224:
      case 225:
      case 226:
      case 227:
      case 232:
      case 233:
      case 234:
      case 236:
      case 237:
      case 238:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 249:
      case 250:
      case 251:
        goto LABEL_3;
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 188:
      case 189:
      case 190:
      case 191:
      case 197:
      case 198:
      case 199:
      case 208:
      case 215:
      case 216:
      case 221:
      case 222:
      case 223:
      case 229:
      case 230:
      case 231:
      case 240:
      case 248:
      case 253:
      case 254:
      case 255:
      case 256:
      case 257:
      case 258:
      case 259:
      case 260:
      case 261:
      case 262:
      case 263:
      case 264:
      case 265:
      case 266:
      case 267:
      case 268:
      case 269:
      case 270:
      case 271:
      case 272:
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 288:
      case 289:
      case 290:
      case 291:
      case 292:
      case 293:
      case 294:
      case 295:
      case 296:
      case 297:
      case 298:
      case 299:
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 368:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 375:
        goto LABEL_7;
      case 196:
      case 203:
      case 207:
      case 214:
      case 220:
      case 228:
      case 235:
      case 239:
      case 246:
      case 247:
      case 252:
      case 376:
        goto LABEL_4;
      default:
        if ((v2 - 8220) < 3)
        {
LABEL_3:
          v1 = 2;
          goto LABEL_4;
        }
        if (v2 == 8230)
          goto LABEL_4;
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
        break;
    }
  }
  else
  {
LABEL_4:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = v1;
  }
  return result;
}

unint64_t sub_1BE85CB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  uint64_t v8;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    result = sub_1BE85CCEC(result, (const char *)*(unsigned int *)(a1 + 48), a3, a4, a5, a6);
    v8 = 2;
    if ((result & 0x8000) == 0)
      v8 = (result >> 14) & 1;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
  return result;
}

uint64_t sub_1BE85CCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = sub_1BE85CCEC(*(_QWORD *)(a1 + 32), (const char *)*(unsigned int *)(a1 + 48), a3, a4, a5, a6);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1BE85CCEC(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  int IsMember;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t **v141;
  uint64_t *v142;
  unsigned int v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t **v147;
  unsigned int v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;

  if (result)
  {
    v6 = a2;
    v7 = result;
    v8 = (uint64_t **)(result + 304);
    v9 = *(uint64_t **)(result + 304);
    if (!v9)
      goto LABEL_13;
    v10 = result + 304;
    v11 = *(_QWORD *)(result + 304);
    do
    {
      v12 = *(_DWORD *)(v11 + 28);
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = (uint64_t *)v11;
      else
        v14 = (uint64_t *)(v11 + 8);
      if (v13)
        v10 = v11;
      v11 = *v14;
    }
    while (*v14);
    if ((uint64_t **)v10 != v8 && *(_DWORD *)(v10 + 28) <= a2)
    {
      while (1)
      {
LABEL_88:
        while (1)
        {
          v147 = (uint64_t **)v9;
          v148 = *((_DWORD *)v9 + 7);
          if (v148 <= v6)
            break;
          v9 = *v147;
          v8 = v147;
          if (!*v147)
            goto LABEL_92;
        }
        if (v148 >= v6)
          break;
        v9 = v147[1];
        if (!v9)
        {
          v8 = v147 + 1;
          goto LABEL_92;
        }
      }
    }
    else
    {
LABEL_13:
      IsMember = objc_msgSend_characterIsMember_(*(void **)(result + 8), a2, (unsigned __int16)a2, a4, a5, a6);
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 16), v16, (unsigned __int16)v6, v17, v18, v19))
        IsMember |= 2u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 24), v20, (unsigned __int16)v6, v21, v22, v23))
        IsMember |= 4u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 32), v24, (unsigned __int16)v6, v25, v26, v27))
        IsMember |= 8u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 40), v28, (unsigned __int16)v6, v29, v30, v31))
        IsMember |= 0x10u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 48), v32, (unsigned __int16)v6, v33, v34, v35))
        IsMember |= 0x20u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 56), v36, (unsigned __int16)v6, v37, v38, v39))
        IsMember |= 0x40u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 64), v40, (unsigned __int16)v6, v41, v42, v43))
        IsMember |= 0x80u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 72), v44, (unsigned __int16)v6, v45, v46, v47))
        IsMember |= 0x100u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 80), v48, (unsigned __int16)v6, v49, v50, v51))
        IsMember |= 0x200u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 88), v52, (unsigned __int16)v6, v53, v54, v55))
        IsMember |= 0x400u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 96), v56, (unsigned __int16)v6, v57, v58, v59))
        IsMember |= 0x800u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 104), v60, (unsigned __int16)v6, v61, v62, v63))
        IsMember |= 0x1000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 112), v64, (unsigned __int16)v6, v65, v66, v67))
        IsMember |= 0x2000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 120), v68, (unsigned __int16)v6, v69, v70, v71))
        IsMember |= 0x4000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 128), v72, (unsigned __int16)v6, v73, v74, v75))
        IsMember |= 0x8000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 136), v76, (unsigned __int16)v6, v77, v78, v79))
        IsMember |= 0x10000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 144), v80, (unsigned __int16)v6, v81, v82, v83))
        IsMember |= 0x20000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 152), v84, (unsigned __int16)v6, v85, v86, v87))
        IsMember |= 0x40000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 160), v88, (unsigned __int16)v6, v89, v90, v91))
        IsMember |= 0x80000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 168), v92, (unsigned __int16)v6, v93, v94, v95))
        IsMember |= 0x100000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 176), v96, (unsigned __int16)v6, v97, v98, v99))
        IsMember |= 0x200000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 184), v100, (unsigned __int16)v6, v101, v102, v103))IsMember |= 0x400000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 192), v104, (unsigned __int16)v6, v105, v106, v107))IsMember |= 0x800000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 200), v108, (unsigned __int16)v6, v109, v110, v111))IsMember |= 0x1000000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 208), v112, (unsigned __int16)v6, v113, v114, v115))IsMember |= 0x2000000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 224), v116, (unsigned __int16)v6, v117, v118, v119))IsMember |= 0x4000000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 216), v120, (unsigned __int16)v6, v121, v122, v123))IsMember |= 0x8000000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 232), v124, (unsigned __int16)v6, v125, v126, v127))IsMember |= 0x10000000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 240), v128, (unsigned __int16)v6, v129, v130, v131))IsMember |= 0x20000000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 248), v132, (unsigned __int16)v6, v133, v134, v135))IsMember |= 0x40000000u;
      if (objc_msgSend_characterIsMember_(*(void **)(v7 + 256), v136, (unsigned __int16)v6, v137, v138, v139))IsMember |= 0x80000000;
      v9 = *(uint64_t **)(v7 + 304);
      v140 = v8;
      v141 = v8;
      if (v9)
      {
        v142 = *(uint64_t **)(v7 + 304);
        while (1)
        {
          while (1)
          {
            v141 = (uint64_t **)v142;
            v143 = *((_DWORD *)v142 + 7);
            if (v143 <= v6)
              break;
            v142 = *v141;
            v140 = v141;
            if (!*v141)
              goto LABEL_82;
          }
          if (v143 >= v6)
            break;
          v142 = v141[1];
          if (!v142)
          {
            v140 = v141 + 1;
            goto LABEL_82;
          }
        }
      }
      else
      {
LABEL_82:
        v144 = (uint64_t *)v141;
        v141 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v141 + 7) = v6;
        *((_DWORD *)v141 + 8) = 0;
        *v141 = 0;
        v141[1] = 0;
        v141[2] = v144;
        *v140 = (uint64_t *)v141;
        v145 = **(_QWORD **)(v7 + 296);
        v146 = (uint64_t *)v141;
        if (v145)
        {
          *(_QWORD *)(v7 + 296) = v145;
          v146 = *v140;
        }
        sub_1BE61F5C0(*(uint64_t **)(v7 + 304), v146);
        v9 = *(uint64_t **)(v7 + 304);
        ++*(_QWORD *)(v7 + 312);
      }
      *((_DWORD *)v141 + 8) = IsMember;
      v147 = v8;
      if (v9)
        goto LABEL_88;
LABEL_92:
      v149 = (uint64_t *)v147;
      v147 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v147 + 7) = v6;
      *((_DWORD *)v147 + 8) = 0;
      *v147 = 0;
      v147[1] = 0;
      v147[2] = v149;
      *v8 = (uint64_t *)v147;
      v150 = **(_QWORD **)(v7 + 296);
      v151 = (uint64_t *)v147;
      if (v150)
      {
        *(_QWORD *)(v7 + 296) = v150;
        v151 = *v8;
      }
      sub_1BE61F5C0(*(uint64_t **)(v7 + 304), v151);
      ++*(_QWORD *)(v7 + 312);
    }
    return *((int *)v147 + 8);
  }
  return result;
}

void sub_1BE85D2D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85D7F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85D808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CHResetInventory()
{
  CHRemoteTextSynthesizer *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(CHRemoteTextSynthesizer);
  v14 = 0;
  v5 = objc_msgSend_resetStyleInventory_(v0, v1, (uint64_t)&v14, v2, v3, v4);
  v6 = v14;
  if ((v5 & 1) == 0)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v7 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_localizedDescription(v6, v8, v9, v10, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v16 = v13;
      _os_log_impl(&dword_1BE607000, v7, OS_LOG_TYPE_ERROR, "Failed to reset style personalization. Error: %@", buf, 0xCu);

    }
  }

}

void sub_1BE85DB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t CHHasPersonalizedSynthesisSupport()
{
  NSObject *v0;
  const __CFString *v1;
  int v3;
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (qword_1EF568438 == -1)
  {
    if (qword_1EF568E88 == -1)
      goto LABEL_3;
  }
  else
  {
    dispatch_once(&qword_1EF568438, &unk_1E77F1AD0);
    if (qword_1EF568E88 == -1)
      goto LABEL_3;
  }
  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
LABEL_3:
  v0 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    if (byte_1EF568430)
      v1 = CFSTR("Yes");
    else
      v1 = CFSTR("No");
    v3 = 138412290;
    v4 = v1;
    _os_log_impl(&dword_1BE607000, v0, OS_LOG_TYPE_DEBUG, "Has personalized synthesis support: %@", (uint8_t *)&v3, 0xCu);
  }

  return byte_1EF568430;
}

void sub_1BE85DC50()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  deviceANESubType();
  v14 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasPrefix_(v14, v0, (uint64_t)CFSTR("H"), v1, v2, v3))
  {
    objc_msgSend_substringFromIndex_(v14, v4, 1, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_integerValue(v8, v9, v10, v11, v12, v13) >= 13)
      byte_1EF568430 = 1;

  }
}

void sub_1BE85DCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE85DCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE85DCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t CHHasHandwritingGenerationAllowed(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t isPersonalizedHandwritingResultsAllowed;
  NSObject *v7;
  const __CFString *v8;
  int v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (qword_1EF568448 != -1)
    dispatch_once(&qword_1EF568448, &unk_1E77EFDD8);
  isPersonalizedHandwritingResultsAllowed = objc_msgSend_isPersonalizedHandwritingResultsAllowed((void *)qword_1EF568440, a2, a3, a4, a5, a6);
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = CFSTR("No");
    if ((_DWORD)isPersonalizedHandwritingResultsAllowed)
      v8 = CFSTR("Yes");
    v10 = 138412290;
    v11 = v8;
    _os_log_impl(&dword_1BE607000, v7, OS_LOG_TYPE_DEBUG, "Has handwriting generation allowed: %@", (uint8_t *)&v10, 0xCu);
  }

  return isPersonalizedHandwritingResultsAllowed;
}

void sub_1BE85DE1C()
{
  CHManagedConfigurations *v0;
  void *v1;

  v0 = objc_alloc_init(CHManagedConfigurations);
  v1 = (void *)qword_1EF568440;
  qword_1EF568440 = (uint64_t)v0;

}

uint64_t isLocaleSupported(NSLocale *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  objc_msgSend_languageCode(a1, a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_containsObject_(&unk_1E7827FF8, v7, (uint64_t)v6, v8, v9, v10);

  return v11;
}

void sub_1BE85DE84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CHHasPersonalizedSynthesisSupportForLocale(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = a1;
  if (CHHasPersonalizedSynthesisSupport())
  {
    objc_msgSend_languageCode(v1, v2, v3, v4, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend_containsObject_(&unk_1E7827FF8, v8, (uint64_t)v7, v9, v10, v11);

    return v12;
  }
  else
  {

    return 0;
  }
}

void sub_1BE85DF10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85DF24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id latestStyleInventoryStatus(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint8_t v29[16];

  if (qword_1EF568468 == -1)
  {
    objc_msgSend_timeIntervalSinceNow((void *)qword_1EF568460, a2, a3, a4, a5, a6);
    if (v6 >= -3.0)
      return (id)qword_1EF568450;
  }
  else
  {
    dispatch_once(&qword_1EF568468, &unk_1E77EF488);
    objc_msgSend_timeIntervalSinceNow((void *)qword_1EF568460, v23, v24, v25, v26, v27);
    if (v28 >= -3.0)
      return (id)qword_1EF568450;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_1BE607000, v7, OS_LOG_TYPE_DEBUG, "latestStyleInventoryStatus: requesting update", v29, 2u);
  }

  objc_msgSend_cachedStyleInventoryStatus((void *)qword_1EF568458, v8, v9, v10, v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)qword_1EF568450;
  qword_1EF568450 = v13;

  objc_msgSend_date(MEMORY[0x1E0C99D68], v15, v16, v17, v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)qword_1EF568460;
  qword_1EF568460 = v20;

  return (id)qword_1EF568450;
}

void sub_1BE85E060(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  CHRemoteTextSynthesizer *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  objc_msgSend_dateWithTimeIntervalSince1970_(MEMORY[0x1E0C99D68], a2, a3, a4, a5, a6, 0.0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568460;
  qword_1EF568460 = v6;

  v8 = objc_alloc_init(CHRemoteTextSynthesizer);
  v9 = (void *)qword_1EF568458;
  qword_1EF568458 = (uint64_t)v8;

  objc_msgSend_styleInventoryStatus((void *)qword_1EF568458, v10, v11, v12, v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)qword_1EF568450;
  qword_1EF568450 = v15;

}

uint64_t CHHasPersonalizedSynthesisModelReady(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isPersonalizedSynthesisModelReady;
  NSObject *v13;
  const __CFString *v14;
  int v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  latestStyleInventoryStatus(a1, a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  isPersonalizedSynthesisModelReady = objc_msgSend_isPersonalizedSynthesisModelReady(v6, v7, v8, v9, v10, v11);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v14 = CFSTR("No");
    if ((_DWORD)isPersonalizedSynthesisModelReady)
      v14 = CFSTR("Yes");
    v16 = 138412290;
    v17 = v14;
    _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEBUG, "Is personalized synthesis model ready: %@", (uint8_t *)&v16, 0xCu);
  }

  return isPersonalizedSynthesisModelReady;
}

void sub_1BE85E1C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CHHasPersonalizedSynthesisModelReadyForLocale(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = a1;
  if (CHHasPersonalizedSynthesisModelReady((uint64_t)v1, v2, v3, v4, v5, v6))
  {
    objc_msgSend_languageCode(v1, v7, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_containsObject_(&unk_1E7827FF8, v13, (uint64_t)v12, v14, v15, v16);

    return v17;
  }
  else
  {

    return 0;
  }
}

void sub_1BE85E258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85E26C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t isStylePersonalizationAvailable(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isPersonalizationAvailable;
  NSObject *v13;
  const __CFString *v14;
  int v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  latestStyleInventoryStatus(a1, a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  isPersonalizationAvailable = objc_msgSend_isPersonalizationAvailable(v6, v7, v8, v9, v10, v11);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v14 = CFSTR("No");
    if ((_DWORD)isPersonalizationAvailable)
      v14 = CFSTR("Yes");
    v16 = 138412290;
    v17 = v14;
    _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEBUG, "Is personalization available: %@", (uint8_t *)&v16, 0xCu);
  }

  return isPersonalizationAvailable;
}

void sub_1BE85E378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CHGetPersonalizedSynthesisSupportState()
{
  uint64_t v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0 = CHHasPersonalizedSynthesisSupport();
  if (!(_DWORD)v0)
    return 0;
  v6 = CHHasPersonalizedSynthesisModelReady(v0, v1, v2, v3, v4, v5);
  if (!(_DWORD)v6)
    return 1;
  if (isStylePersonalizationAvailable(v6, v7, v8, v9, v10, v11))
    return 3;
  return 2;
}

uint64_t CHGetPersonalizedSynthesisSupportStateForLocale(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = a1;
  objc_msgSend_languageCode(v1, v2, v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_containsObject_(&unk_1E7827FF8, v8, (uint64_t)v7, v9, v10, v11);

  if ((v12 & 1) != 0 && (v13 = CHHasPersonalizedSynthesisSupport(), (_DWORD)v13))
  {
    v19 = CHHasPersonalizedSynthesisModelReady(v13, v14, v15, v16, v17, v18);
    if ((_DWORD)v19)
    {
      if (isStylePersonalizationAvailable(v19, v20, v21, v22, v23, v24))
        v25 = 3;
      else
        v25 = 2;

      return v25;
    }
    else
    {

      return 1;
    }
  }
  else
  {

    return 0;
  }
}

void sub_1BE85E484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85E498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CHGetSynthesisModelVersionForLocale(void *a1)
{
  id v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v1 = a1;
  v2 = CHHasPersonalizedSynthesisSupportForLocale(v1);
  if ((_DWORD)v2)
  {
    latestStyleInventoryStatus(v2, v3, v4, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_personalizedSynthesisModelVersion(v8, v9, v10, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    return v14;
  }
  else
  {

    return 0;
  }
}

void sub_1BE85E518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85E52C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85E824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85E934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE85E968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE85E980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85E990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE85EA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE85EAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85EAC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE85EB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE85EB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE85ED28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE85F264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE86040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29)
{
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE860830(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  objc_msgSend_strokeIdentifier(a2, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v5, v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v6, v19, (uint64_t)v12, (uint64_t)v18, v20, v21);

  return v22;
}

void sub_1BE8608A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8608C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8608D8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, void *a10)
{
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  id v57;
  uint64_t v58;
  double v59;
  uint64_t j;
  void *v61;
  const char *v62;
  uint64_t v63;
  double v64;
  const char *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  BOOL v72;
  id v73;
  id v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char isEqual;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t kk;
  void *v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  id v122;
  char v124;
  double v125;
  id v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t k;
  const char *v132;
  uint64_t v133;
  double v134;
  void *v135;
  id v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  double v142;
  BOOL v143;
  id v144;
  id v145;
  double v146;
  void *v148;
  double v149;
  id v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  char v158;
  id v159;
  id v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  double v177;
  CGFloat v178;
  double v179;
  CGFloat v180;
  double v181;
  CGFloat v182;
  double v183;
  CGFloat v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  CGFloat v190;
  CGFloat v191;
  CGFloat v192;
  CGFloat v193;
  const char *v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  const char *v229;
  uint64_t v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t m;
  void *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  id v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  _BYTE *v258;
  _BYTE *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  double v269;
  uint64_t v270;
  void *v271;
  void *v272;
  const char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  NSObject *v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  const char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int isValidStrokeIdentifier;
  void *v319;
  void *v320;
  const char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  const char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t ii;
  uint64_t v331;
  CHSubstrokePlacement *v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  const char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  const char *v347;
  uint64_t v348;
  id v349;
  id v350;
  const char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  const char *v363;
  uint64_t v364;
  double v365;
  const char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  const char *v372;
  uint64_t v373;
  uint64_t v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t jj;
  double v381;
  void *v382;
  void *v383;
  const char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  char v388;
  const char *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  double v394;
  CGFloat v395;
  double v396;
  CGFloat v397;
  double v398;
  CGFloat v399;
  double v400;
  CGFloat v401;
  const char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  CGFloat v407;
  CGFloat v408;
  CGFloat v409;
  CGFloat v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  void *v416;
  const char *v417;
  uint64_t v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  const char *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  _BOOL4 v436;
  double v437;
  CGFloat v438;
  double v439;
  CGFloat v440;
  double v441;
  CGFloat v442;
  double v443;
  CGFloat v444;
  const char *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  CGFloat v450;
  CGFloat v451;
  CGFloat v452;
  CGFloat v453;
  double v454;
  double v455;
  const char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  double v461;
  double v462;
  const char *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  double v468;
  id v469;
  id v470;
  uint64_t v471;
  const char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  CHTextLineStrokeGroup *v476;
  const char *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  void *v481;
  const char *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  double v487;
  double v488;
  double v489;
  double v490;
  double v491;
  double v492;
  double v493;
  uint64_t v494;
  const char *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  void *v500;
  __int128 v501;
  __int128 v502;
  const char *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  void *StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin;
  const char *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  const char *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  double v520;
  double v521;
  const char *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  double v527;
  double v528;
  const char *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  double v534;
  double v535;
  const char *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  double v541;
  double v542;
  const char *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  double v548;
  double v549;
  const char *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  double v555;
  double v556;
  const char *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  double v562;
  double v563;
  const char *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  const char *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  double v574;
  const char *v575;
  uint64_t v576;
  uint64_t v577;
  const char *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  const char *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  const char *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  const char *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  id v594;
  const char *v595;
  uint64_t v596;
  const char *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t n;
  uint64_t v604;
  const char *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  const char *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  const char *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  void *v618;
  void *v619;
  double v620;
  id v621;
  double v622;
  void *v623;
  double v624;
  id v625;
  double v626;
  void *v627;
  id v628;
  id v629;
  id v630;
  id v631;
  id v632;
  id v633;
  id v634;
  id v635;
  void *v636;
  void *v637;
  uint64_t v638;
  void *v639;
  uint64_t v640;
  double v641;
  void *v642;
  id v643;
  void *v644;
  uint64_t (**v645)(void);
  void *v646;
  id v647;
  void *v648;
  id v649;
  id v650;
  id v651;
  void *v652;
  id obj;
  uint64_t v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  id v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  id v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  id v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  id v682;
  void *v683[2];
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  void *__p[2];
  char *v692;
  id v693;
  __int128 v694;
  __int128 v695;
  _BYTE v696[128];
  _BYTE v697[128];
  _BYTE v698[128];
  _BYTE v699[128];
  _BYTE v700[128];
  _BYTE v701[128];
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  uint8_t buf[8];
  uint64_t v707;
  CGRect v708;
  CGRect v709;
  CGRect v710;
  CGRect v711;
  CGRect v712;
  CGRect v713;
  CGRect v714;
  CGRect v715;
  CGRect v716;
  CGRect v717;
  CGRect v718;

  v707 = *MEMORY[0x1E0C80C00];
  v632 = a2;
  v649 = a3;
  v628 = a4;
  v651 = a5;
  v630 = a6;
  v643 = a7;
  v629 = a8;
  v645 = a10;
  if (a1)
  {
    v22 = 3.6;
    if (a9)
      v22 = 6.0;
    v654 = a1;
    *(double *)(a1 + 72) = v22;
    objc_msgSend_encodedStrokeIdentifier(v651, v17, v18, v19, v20, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v643, v24, (uint64_t)v23, v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v678 = 0u;
    v679 = 0u;
    v680 = 0u;
    v681 = 0u;
    obj = v28;
    v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v33, (uint64_t)&v678, (uint64_t)v701, 16, v34);
    if (v40)
    {
      v41 = *(_QWORD *)v679;
      do
      {
        for (i = 0; i != v40; ++i)
        {
          if (*(_QWORD *)v679 != v41)
            objc_enumerationMutation(obj);
          objc_msgSend_substroke(*(void **)(*((_QWORD *)&v678 + 1) + 8 * i), v35, v36, v37, v38, v39);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_bounds(v43, v44, v45, v46, v47, v48);
          v715.origin.x = v49;
          v715.origin.y = v50;
          v715.size.width = v51;
          v715.size.height = v52;
          v708.origin.x = x;
          v708.origin.y = y;
          v708.size.width = width;
          v708.size.height = height;
          v709 = CGRectUnion(v708, v715);
          x = v709.origin.x;
          y = v709.origin.y;
          width = v709.size.width;
          height = v709.size.height;

        }
        v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v35, (uint64_t)&v678, (uint64_t)v701, 16, v39);
      }
      while (v40);
    }

    v676 = 0u;
    v677 = 0u;
    v674 = 0u;
    v675 = 0u;
    v650 = v632;
    v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v650, v53, (uint64_t)&v674, (uint64_t)v700, 16, v54);
    v56 = 0;
    if (v55)
    {
      v652 = 0;
      v57 = 0;
      v58 = *(_QWORD *)v675;
      v59 = 10000.0;
      do
      {
        for (j = 0; j != v55; ++j)
        {
          if (*(_QWORD *)v675 != v58)
            objc_enumerationMutation(v650);
          v61 = *(void **)(*((_QWORD *)&v674 + 1) + 8 * j);
          *(double *)buf = 10000.0;
          sub_1BE862490((double *)v654, (double *)buf, v61, x, y, width, height);
          v64 = *(double *)buf;
          if (*(double *)buf <= *(double *)(v654 + 72))
          {
            *(_QWORD *)&v702 = 0x40C3880000000000;
            v673 = 0;
            objc_msgSend_getMergingEndOfLineCost_mergingEndOfLineStroke_forStroke_consistingOfSubstrokes_toLineGroup_((void *)v654, v62, (uint64_t)&v702, (uint64_t)&v673, (uint64_t)v651, (uint64_t)obj, v61, *(double *)buf);
            v67 = v673;
            if (*(double *)&v702 < *(double *)(v654 + 72)
              && ((v68 = objc_msgSend_compareDistanceInWritingSequenceOfStroke_andStroke_toReferenceStroke_((void *)v654, v65, (uint64_t)v67, (uint64_t)v57, (uint64_t)v651, v66, *(double *)&v702), v69 = *(double *)&v702, v70 = *(double *)&v702 - v59, v71 = *(double *)(v654 + 88), *(double *)&v702 - v59 < -v71)|| !v68 && v70 < 0.0|| (fabs(v70) < v71 ? (v72 = v68 == -1) : (v72 = 0), v72)))
            {
              v74 = v67;

              v73 = v61;
              objc_msgSend_encodedStrokeIdentifier(v74, v75, v76, v77, v78, v79);
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_writingDirectionSortedStrokeIdentifiers(v73, v81, v82, v83, v84, v85);
              v86 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_lastObject(v86, v87, v88, v89, v90, v91);
              v92 = (void *)objc_claimAutoreleasedReturnValue();
              isEqual = objc_msgSend_isEqual_(v80, v93, (uint64_t)v92, v94, v95, v96);

              v56 = isEqual ^ 1;
            }
            else
            {
              v73 = v652;
              v74 = v57;
              v69 = v59;
            }

            v652 = v73;
            v57 = v74;
            v59 = v69;
          }
        }
        v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v650, v62, (uint64_t)&v674, (uint64_t)v700, 16, v63, v64);
      }
      while (v55);

      if (!v630 || !v652)
      {
LABEL_47:
        if (v59 >= *(double *)(v654 + 80))
        {
          v666 = 0u;
          v667 = 0u;
          v664 = 0u;
          v665 = 0u;
          v126 = v650;
          v129 = objc_msgSend_countByEnumeratingWithState_objects_count_(v126, v127, (uint64_t)&v664, (uint64_t)v698, 16, v128);
          if (v129)
          {
            v644 = 0;
            v646 = 0;
            v130 = *(_QWORD *)v665;
            v125 = 10000.0;
            while (2)
            {
              for (k = 0; k != v129; ++k)
              {
                if (*(_QWORD *)v665 != v130)
                  objc_enumerationMutation(v126);
                v135 = *(void **)(*((_QWORD *)&v664 + 1) + 8 * k);
                if ((v645[2]() & 1) != 0)
                {
                  v124 = 1;
                  goto LABEL_71;
                }
                *(double *)buf = 10000.0;
                sub_1BE862490((double *)v654, (double *)buf, v135, x, y, width, height);
                v134 = *(double *)buf;
                if (*(double *)buf <= *(double *)(v654 + 72))
                {
                  *(_QWORD *)&v702 = 0x40C3880000000000;
                  v663 = 0;
                  objc_msgSend_getMergingMiddleOfLineCost_mergingMiddleOfLineStroke_forStroke_consistingOfSubstrokes_toLineGroup_((void *)v654, v132, (uint64_t)&v702, (uint64_t)&v663, (uint64_t)v651, (uint64_t)obj, v135, *(double *)buf);
                  v136 = v663;
                  v139 = objc_msgSend_compareDistanceInWritingSequenceOfStroke_andStroke_toReferenceStroke_((void *)v654, v137, (uint64_t)v136, (uint64_t)v646, (uint64_t)v651, v138);
                  v140 = *(double *)&v702;
                  v141 = *(double *)&v702 - v125;
                  v142 = *(double *)(v654 + 88);
                  if (*(double *)&v702 - v125 < -v142
                    || !v139 && v141 < 0.0
                    || (fabs(v141) < v142 ? (v143 = v139 == -1) : (v143 = 0), v143))
                  {
                    v144 = v136;

                    v145 = v135;
                    v56 = 0;
                    v644 = v145;
                    v646 = v144;
                  }
                  else
                  {
                    v140 = v125;
                  }

                  v125 = v140;
                }
              }
              v129 = objc_msgSend_countByEnumeratingWithState_objects_count_(v126, v132, (uint64_t)&v664, (uint64_t)v698, 16, v133, v134);
              if (v129)
                continue;
              break;
            }
            v124 = 0;
          }
          else
          {
            v124 = 0;
            v644 = 0;
            v646 = 0;
            v125 = 10000.0;
          }
LABEL_71:

        }
        else
        {
          v124 = 0;
          v644 = 0;
          v646 = 0;
          v125 = 10000.0;
        }
        v146 = *(double *)(v654 + 72);
        if (v59 < v146 && v125 < v146)
        {
          v152 = objc_msgSend_compareDistanceInWritingSequenceOfStroke_andStroke_toReferenceStroke_((void *)v654, v98, (uint64_t)v646, (uint64_t)v57, (uint64_t)v651, v102);
          v153 = v125 - v59;
          v154 = *(double *)(v654 + 88);
          v155 = -v154;
          v148 = v652;
          if (fabs(v125 - v59) < v154 && v152 == -1)
          {
            v148 = v644;
            v156 = v125;
          }
          else
          {
            v156 = v59;
          }
          if (v153 < 0.0 && v152 == 0)
          {
            v148 = v644;
            v156 = v125;
          }
          if (v153 >= v155)
          {
            v149 = v156;
          }
          else
          {
            v148 = v644;
            v149 = v125;
          }
        }
        else
        {
          v148 = v652;
          if (v59 < v146)
          {
            v149 = v59;
          }
          else
          {
            v148 = v644;
            v149 = v125;
          }
          if (v59 >= v146 && v125 >= v146)
          {
            v151 = 0;
            goto LABEL_121;
          }
        }
        v151 = v148;
        if (v151)
          v158 = v124;
        else
          v158 = 1;
        if ((v158 & 1) == 0 && v149 < *(double *)(v654 + 72))
        {
          v159 = v651;
          obj = obj;
          v635 = v151;
          v160 = v57;
          v647 = v643;
          v161 = (void *)MEMORY[0x1E0C99E60];
          objc_msgSend_encodedStrokeIdentifier(v159, v162, v163, v164, v165, v166);
          v167 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setWithObject_(v161, v168, (uint64_t)v167, v169, v170, v171);
          v639 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_bounds(v635, v172, v173, v174, v175, v176);
          v178 = v177;
          v180 = v179;
          v182 = v181;
          v184 = v183;
          objc_msgSend_bounds(v159, v185, v186, v187, v188, v189);
          v716.origin.x = v190;
          v716.origin.y = v191;
          v716.size.width = v192;
          v716.size.height = v193;
          v710.origin.x = v178;
          v710.origin.y = v180;
          v710.size.width = v182;
          v710.size.height = v184;
          v711 = CGRectUnion(v710, v716);
          v624 = v711.origin.y;
          v626 = v711.origin.x;
          v620 = v711.size.height;
          v622 = v711.size.width;
          *(_QWORD *)&v694 = 0;
          v693 = 0;
          objc_msgSend_firstStrokeIdentifier_lastStrokeIdentifier_inGroup_addingStrokeIdentifiers_removingStrokeIdentifiers_((void *)v654, v194, (uint64_t)&v694, (uint64_t)&v693, (uint64_t)v635, (uint64_t)v639, 0);
          v631 = (id)v694;
          v633 = v693;
          objc_msgSend_writingDirectionSortedSubstrokes(v635, v195, v196, v197, v198, v199);
          v200 = (void *)objc_claimAutoreleasedReturnValue();
          v206 = (void *)objc_msgSend_mutableCopy(v200, v201, v202, v203, v204, v205);

          if ((v56 & 1) == 0)
          {
            objc_msgSend_strokeIdentifiers(v635, v207, v208, v209, v210, v211);
            v212 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_allObjects(v212, v213, v214, v215, v216, v217);
            v218 = (void *)objc_claimAutoreleasedReturnValue();
            *(_QWORD *)&v687 = MEMORY[0x1E0C809B0];
            *((_QWORD *)&v687 + 1) = 3221225472;
            *(_QWORD *)&v688 = sub_1BE862694;
            *((_QWORD *)&v688 + 1) = &unk_1E77F2B30;
            *(_QWORD *)&v689 = v654;
            objc_msgSend_sortedArrayUsingComparator_(v218, v219, (uint64_t)&v687, v220, v221, v222);
            v636 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_removeAllObjects(v206, v223, v224, v225, v226, v227);
            v705 = 0u;
            v704 = 0u;
            v703 = 0u;
            v702 = 0u;
            v228 = v636;
            v235 = objc_msgSend_countByEnumeratingWithState_objects_count_(v228, v229, (uint64_t)&v702, (uint64_t)buf, 16, v230);
            if (v235)
            {
              v236 = *(_QWORD *)v703;
              do
              {
                for (m = 0; m != v235; ++m)
                {
                  if (*(_QWORD *)v703 != v236)
                    objc_enumerationMutation(v228);
                  objc_msgSend_objectForKeyedSubscript_(v647, v231, *(_QWORD *)(*((_QWORD *)&v702 + 1) + 8 * m), v232, v233, v234);
                  v238 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_addObjectsFromArray_(v206, v239, (uint64_t)v238, v240, v241, v242);

                }
                v235 = objc_msgSend_countByEnumeratingWithState_objects_count_(v228, v231, (uint64_t)&v702, (uint64_t)buf, 16, v234);
              }
              while (v235);
            }

          }
          objc_msgSend_addObjectsFromArray_(v206, v207, (uint64_t)obj, v209, v210, v211);
          *(_OWORD *)__p = *(_OWORD *)(v654 + 16);
          v695 = *(_OWORD *)(v654 + 32);
          v682 = v206;
          objc_msgSend_estimateWritingDirectionAndSortSubstrokesAccordingly_averageWritingOrientation_averageStrokeDeviation_((void *)v654, v243, (uint64_t)&v682, (uint64_t)__p, (uint64_t)&v695, v244);
          v245 = v682;

          v683[1] = 0;
          v683[0] = 0;
          *(_QWORD *)&v684 = 0;
          v619 = v245;
          objc_msgSend_strokeIdentifiers(v635, v246, v247, v248, v249, v250);
          v251 = (void *)objc_claimAutoreleasedReturnValue();
          v257 = objc_msgSend_count(v251, v252, v253, v254, v255, v256) + 1;
          v258 = v683[0];
          if (v257 > (uint64_t)(v684 - (unint64_t)v683[0]) >> 4)
          {
            if (v257 >> 60)
              sub_1BE61F930();
            v259 = v683[1];
            v260 = (char *)operator new(16 * v257);
            v261 = &v260[(v259 - v258) & 0xFFFFFFFFFFFFFFF0];
            v262 = v261;
            if (v259 != v258)
            {
              v263 = &v260[(v259 - v258) & 0xFFFFFFFFFFFFFFF0];
              do
              {
                v262 = v263 - 16;
                *((_OWORD *)v263 - 1) = *((_OWORD *)v259 - 1);
                v259 -= 16;
                v263 -= 16;
              }
              while (v259 != v258);
            }
            v683[0] = v262;
            v683[1] = v261;
            *(_QWORD *)&v684 = &v260[16 * v257];
            if (v258)
              operator delete(v258);
          }

          sub_1BE8627BC(v654, v619, (uint64_t *)v683);
          v637 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1BE862D88((_BYTE *)v654, v619, *(double *)&v695, *((double *)&v695 + 1));
          v618 = (void *)objc_claimAutoreleasedReturnValue();
          v269 = sub_1BE8636C8((_QWORD *)v654, v619, v637, *(long double *)__p, *(long double *)&__p[1]);
          if ((v56 & 1) != 0)
          {
            v270 = objc_msgSend_count(v619, v264, v265, v266, v267, v268);
            v271 = v635;
            while (--v270 >= 0)
            {
              objc_msgSend_objectAtIndexedSubscript_(v619, v264, v270, v266, v267, v268);
              v272 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_substroke(v272, v273, v274, v275, v276, v277);
              v278 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_strokeIdentifier(v278, v279, v280, v281, v282, v283);
              v284 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_encodedStrokeIdentifier(v160, v285, v286, v287, v288, v289);
              v290 = (void *)objc_claimAutoreleasedReturnValue();
              v295 = objc_msgSend_isEqual_(v284, v291, (uint64_t)v290, v292, v293, v294);

              v271 = v635;
              if ((v295 & 1) != 0)
                goto LABEL_176;
            }
            v270 = -1;
          }
          else
          {
            v270 = -1;
            v271 = v635;
          }
LABEL_176:
          objc_msgSend_bounds(v159, v264, v265, v266, v267, v268);
          v521 = v520;
          objc_msgSend_bounds(v159, v522, v523, v524, v525, v526);
          v528 = v527;
          objc_msgSend_bounds(v159, v529, v530, v531, v532, v533);
          v535 = v534;
          objc_msgSend_bounds(v159, v536, v537, v538, v539, v540);
          v542 = v541;
          objc_msgSend_firstStrokeOrigin(v271, v543, v544, v545, v546, v547);
          v549 = v548;
          objc_msgSend_firstStrokeOrigin(v271, v550, v551, v552, v553, v554);
          v556 = v555;
          objc_msgSend_firstStrokeOrigin(v271, v557, v558, v559, v560, v561);
          v563 = v562;
          objc_msgSend_firstStrokeOrigin(v271, v564, v565, v566, v567, v568);
          if (v563 * v574 + v549 * v556 >= v535 * v542 + v521 * v528)
            objc_msgSend_bounds(v159, v569, v570, v571, v572, v573);
          else
            objc_msgSend_firstStrokeOrigin(v271, v569, v570, v571, v572, v573);
          objc_msgSend_groupByAddingStrokeIdentifiers_removingStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_lastSubstrokeIndexBeforeMerge_firstStrokeOrigin_(v271, v575, (uint64_t)v639, 0, (uint64_t)v631, (uint64_t)v633, v619, v637, v626, v624, v622, v620, *(double *)__p, *(double *)&__p[1], v695, v683, v618, *(_QWORD *)&v269, v270,
            v576,
            v577);
          StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin = (void *)objc_claimAutoreleasedReturnValue();

          if (v683[0])
          {
            v683[1] = v683[0];
            operator delete(v683[0]);
          }

          if ((objc_msgSend_containsObject_(v649, v578, (uint64_t)v635, v579, v580, v581) & 1) == 0)
            objc_msgSend_addObject_(v628, v582, (uint64_t)v635, v583, v584, v585);
          objc_msgSend_removeObject_(v649, v582, (uint64_t)v635, v583, v584, v585);
          objc_msgSend_removeObject_(v650, v586, (uint64_t)v635, v587, v588, v589);
          if (a9)
          {
            objc_msgSend_tryRegroupingStrokesInGroup_substrokePlacementsByStrokeIdentifier_cancellationBlock_((void *)v654, v590, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, (uint64_t)v647, (uint64_t)v645, v593);
            v661 = 0u;
            v662 = 0u;
            v659 = 0u;
            v660 = 0u;
            v594 = (id)objc_claimAutoreleasedReturnValue();
            v601 = objc_msgSend_countByEnumeratingWithState_objects_count_(v594, v595, (uint64_t)&v659, (uint64_t)v697, 16, v596);
            if (v601)
            {
              v602 = *(_QWORD *)v660;
              do
              {
                for (n = 0; n != v601; ++n)
                {
                  if (*(_QWORD *)v660 != v602)
                    objc_enumerationMutation(v594);
                  v604 = *(_QWORD *)(*((_QWORD *)&v659 + 1) + 8 * n);
                  objc_msgSend_addObject_(v649, v597, v604, v598, v599, v600);
                  objc_msgSend_addObject_(v650, v605, v604, v606, v607, v608);
                }
                v601 = objc_msgSend_countByEnumeratingWithState_objects_count_(v594, v597, (uint64_t)&v659, (uint64_t)v697, 16, v600);
              }
              while (v601);
            }

          }
          else
          {
            objc_msgSend_addObject_(v649, v590, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, v591, v592, v593);
            objc_msgSend_addObject_(v650, v609, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, v610, v611, v612);
          }
          goto LABEL_171;
        }
LABEL_121:
        v635 = v151;
        if ((v124 & 1) != 0)
        {
LABEL_172:

          goto LABEL_173;
        }
        if (!obj || !objc_msgSend_count(obj, v98, v99, v100, v101, v102))
        {
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v301 = (id)qword_1EF568E18[0];
          if (os_log_type_enabled(v301, OS_LOG_TYPE_FAULT))
          {
            objc_msgSend_strokeProvider((void *)v654, v302, v303, v304, v305, v306);
            v307 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_strokeIdentifier(v651, v308, v309, v310, v311, v312);
            v313 = (void *)objc_claimAutoreleasedReturnValue();
            isValidStrokeIdentifier = objc_msgSend_isValidStrokeIdentifier_(v307, v314, (uint64_t)v313, v315, v316, v317);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = isValidStrokeIdentifier;
            _os_log_impl(&dword_1BE607000, v301, OS_LOG_TYPE_FAULT, "Unexpected nil / empty substrokes in CHBottomUpStrokeGroupingStrategy. Stroke indentifier valid ? %i", buf, 8u);

          }
          if (!obj)
            goto LABEL_131;
        }
        if (objc_msgSend_count(obj, v296, v297, v298, v299, v300))
        {
          v319 = obj;
        }
        else
        {
LABEL_131:
          objc_msgSend_array(MEMORY[0x1E0C99DE8], v296, v297, v298, v299, v300);
          v319 = (void *)objc_claimAutoreleasedReturnValue();
          v657 = 0u;
          v658 = 0u;
          v655 = 0u;
          v656 = 0u;
          v320 = (void *)objc_opt_class();
          objc_msgSend_substrokesForStroke_(v320, v321, (uint64_t)v651, v322, v323, v324);
          v325 = (void *)objc_claimAutoreleasedReturnValue();
          v328 = objc_msgSend_countByEnumeratingWithState_objects_count_(v325, v326, (uint64_t)&v655, (uint64_t)v696, 16, v327);
          if (v328)
          {
            v329 = *(_QWORD *)v656;
            do
            {
              for (ii = 0; ii != v328; ++ii)
              {
                if (*(_QWORD *)v656 != v329)
                  objc_enumerationMutation(v325);
                v331 = *(_QWORD *)(*((_QWORD *)&v655 + 1) + 8 * ii);
                v332 = [CHSubstrokePlacement alloc];
                v337 = (void *)objc_msgSend_initWithSubstroke_(v332, v333, v331, v334, v335, v336);
                objc_msgSend_setWritingOrientation_(v337, v338, v339, v340, v341, v342, *(double *)(v654 + 16), *(double *)(v654 + 24));
                objc_msgSend_addObject_(v319, v343, (uint64_t)v337, v344, v345, v346);

              }
              v328 = objc_msgSend_countByEnumeratingWithState_objects_count_(v325, v347, (uint64_t)&v655, (uint64_t)v696, 16, v348);
            }
            while (v328);
          }

        }
        v349 = v651;
        v350 = v319;
        v621 = v629;
        v648 = v349;
        obj = v350;
        objc_msgSend_encodedStrokeIdentifier(v349, v351, v352, v353, v354, v355);
        v642 = (void *)objc_claimAutoreleasedReturnValue();
        v356 = *(_OWORD *)(v654 + 16);
        v694 = *(_OWORD *)(v654 + 32);
        v695 = v356;
        v362 = (void *)objc_msgSend_mutableCopy(v350, v357, v358, v359, v360, v361);
        v693 = v362;
        objc_msgSend_estimateWritingDirectionAndSortSubstrokesAccordingly_averageWritingOrientation_averageStrokeDeviation_((void *)v654, v363, (uint64_t)&v693, (uint64_t)&v695, (uint64_t)&v694, v364);
        v625 = v693;

        __p[0] = operator new(0x10uLL);
        __p[1] = __p[0];
        v692 = (char *)__p[0] + 16;
        sub_1BE8627BC(v654, v625, (uint64_t *)__p);
        v627 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1BE862D88((_BYTE *)v654, v625, *(double *)&v694, *((double *)&v694 + 1));
        v623 = (void *)objc_claimAutoreleasedReturnValue();
        v365 = sub_1BE8636C8((_QWORD *)v654, v625, v627, *(long double *)&v695, *((long double *)&v695 + 1));
        objc_msgSend_strokeProvider((void *)v654, v366, v367, v368, v369, v370);
        v371 = (void *)objc_claimAutoreleasedReturnValue();
        v689 = 0u;
        v690 = 0u;
        v687 = 0u;
        v688 = 0u;
        v634 = v621;
        v374 = objc_msgSend_countByEnumeratingWithState_objects_count_(v634, v372, (uint64_t)&v687, (uint64_t)buf, 16, v373);
        if (v374)
        {
          v640 = *(_QWORD *)v688;
          while (2)
          {
            v638 = v374;
            for (jj = 0; jj != v638; ++jj)
            {
              if (*(_QWORD *)v688 != v640)
                objc_enumerationMutation(v634);
              v382 = *(void **)(*((_QWORD *)&v687 + 1) + 8 * jj);
              objc_msgSend_strokeIdentifiers(v382, v375, v376, v377, v378, v379);
              v383 = (void *)objc_claimAutoreleasedReturnValue();
              v388 = objc_msgSend_containsObject_(v383, v384, (uint64_t)v642, v385, v386, v387);

              if ((v388 & 1) != 0)
              {
LABEL_165:
                v470 = v382;

                if (!v470)
                  goto LABEL_167;
                goto LABEL_166;
              }
              objc_msgSend_bounds(v382, v389, v390, v391, v392, v393);
              v395 = v394;
              v397 = v396;
              v399 = v398;
              v401 = v400;
              objc_msgSend_bounds(v349, v402, v403, v404, v405, v406);
              v717.origin.x = v407;
              v717.origin.y = v408;
              v717.size.width = v409;
              v717.size.height = v410;
              v712.origin.x = v395;
              v712.origin.y = v397;
              v712.size.width = v399;
              v712.size.height = v401;
              if (CGRectIntersectsRect(v712, v717) && (objc_opt_respondsToSelector() & 1) != 0)
              {
                v685 = 0u;
                v686 = 0u;
                *(_OWORD *)v683 = 0u;
                v684 = 0u;
                objc_msgSend_strokeIdentifiers(v382, v411, v412, v413, v414, v415);
                v416 = (void *)objc_claimAutoreleasedReturnValue();
                v423 = objc_msgSend_countByEnumeratingWithState_objects_count_(v416, v417, (uint64_t)v683, (uint64_t)&v702, 16, v418);
                if (v423)
                {
                  v424 = *(_QWORD *)v684;
LABEL_151:
                  v425 = 0;
                  while (1)
                  {
                    if (*(_QWORD *)v684 != v424)
                      objc_enumerationMutation(v416);
                    objc_msgSend_strokeIdentifierFromData_(v371, v419, *((_QWORD *)v683[1] + v425), v420, v421, v422);
                    v426 = (void *)objc_claimAutoreleasedReturnValue();
                    if ((objc_msgSend_isStroke_versionOfStrokeWithIdentifier_(v371, v427, (uint64_t)v349, (uint64_t)v426, v428, v429) & 1) != 0)break;

                    if (v423 == ++v425)
                    {
                      v423 = objc_msgSend_countByEnumeratingWithState_objects_count_(v416, v419, (uint64_t)v683, (uint64_t)&v702, 16, v422);
                      if (v423)
                        goto LABEL_151;
                      goto LABEL_142;
                    }
                  }
                  v469 = v382;

                  if (!v469)
                    continue;

LABEL_166:
                  v471 = objc_msgSend_ancestorIdentifier(v382, v613, v614, v615, v616, v617);
                  objc_msgSend_removeObject_(v634, v472, (uint64_t)v382, v473, v474, v475);
                  goto LABEL_168;
                }
LABEL_142:

              }
              else
              {
                objc_msgSend_strokeIdentifiers(v382, v411, v412, v413, v414, v415);
                v430 = (void *)objc_claimAutoreleasedReturnValue();
                v436 = objc_msgSend_count(v430, v431, v432, v433, v434, v435) == 1;

                if (v436)
                {
                  objc_msgSend_bounds(v382, v375, v376, v377, v378, v379);
                  v438 = v437;
                  v440 = v439;
                  v442 = v441;
                  v444 = v443;
                  objc_msgSend_bounds(v349, v445, v446, v447, v448, v449);
                  v718.origin.x = v450;
                  v718.origin.y = v451;
                  v718.size.width = v452;
                  v718.size.height = v453;
                  v713.origin.x = v438;
                  v713.origin.y = v440;
                  v713.size.width = v442;
                  v713.size.height = v444;
                  v714 = CGRectIntersection(v713, v718);
                  v454 = v714.size.width;
                  v455 = v714.size.height;
                  objc_msgSend_bounds(v382, v456, v457, v458, v459, v460, v714.origin.x, v714.origin.y);
                  v462 = v461;
                  objc_msgSend_bounds(v382, v463, v464, v465, v466, v467);
                  v381 = v454 * v455;
                  if (v454 * v455 >= v462 * v468 * 0.5)
                    goto LABEL_165;
                }
              }
            }
            v374 = objc_msgSend_countByEnumeratingWithState_objects_count_(v634, v375, (uint64_t)&v687, (uint64_t)buf, 16, v379, v381);
            if (v374)
              continue;
            break;
          }
        }

LABEL_167:
        v382 = 0;
        v471 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_168:
        v476 = [CHTextLineStrokeGroup alloc];
        objc_msgSend_setWithObject_(MEMORY[0x1E0C99E60], v477, (uint64_t)v642, v478, v479, v480);
        v481 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_bounds(v648, v482, v483, v484, v485, v486);
        v641 = v487;
        v489 = v488;
        v491 = v490;
        v493 = v492;
        v494 = *(_QWORD *)(v654 + 48);
        objc_msgSend_strategyIdentifier((void *)v654, v495, v496, v497, v498, v499);
        v500 = (void *)objc_claimAutoreleasedReturnValue();
        v501 = v695;
        v502 = v694;
        objc_msgSend_bounds(v648, v503, v504, v505, v506, v507);
        StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin = (void *)objc_msgSend_initWithAncestorIdentifier_strokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin_(v476, v508, v471, (uint64_t)v481, (uint64_t)v642, (uint64_t)v642, v494, v500, v641, v489, v491, v493, v501, v502, v625, v627, __p, v623, *(_QWORD *)&v365, v509, v510);

        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        objc_msgSend_addObject_(v649, v512, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, v513, v514, v515);
        objc_msgSend_addObject_(v650, v516, (uint64_t)StrokeIdentifier_lastStrokeIdentifier_bounds_classification_strategyIdentifier_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_firstStrokeOrigin, v517, v518, v519);
LABEL_171:

        goto LABEL_172;
      }
      v671 = 0u;
      v672 = 0u;
      v669 = 0u;
      v670 = 0u;
      v103 = v630;
      v111 = objc_msgSend_countByEnumeratingWithState_objects_count_(v103, v104, (uint64_t)&v669, (uint64_t)v699, 16, v105);
      if (v111)
      {
        v112 = *(_QWORD *)v670;
        while (2)
        {
          for (kk = 0; kk != v111; ++kk)
          {
            if (*(_QWORD *)v670 != v112)
              objc_enumerationMutation(v103);
            v114 = *(void **)(*((_QWORD *)&v669 + 1) + 8 * kk);
            objc_msgSend_encodedStrokeIdentifier(v114, v106, v107, v108, v109, v110);
            v115 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKey_(v643, v116, (uint64_t)v115, v117, v118, v119);
            v120 = (void *)objc_claimAutoreleasedReturnValue();

            *(double *)buf = 10000.0;
            v668 = 0;
            objc_msgSend_getMergingEndOfLineCost_mergingEndOfLineStroke_forStroke_consistingOfSubstrokes_toLineGroup_((void *)v654, v121, (uint64_t)buf, (uint64_t)&v668, (uint64_t)v114, (uint64_t)v120, v652);
            v122 = v668;
            if (*(double *)buf < v59 && v122 == v57)
            {

              v57 = 0;
              v59 = 10000.0;
              v103 = v652;
              v652 = 0;
              goto LABEL_46;
            }

          }
          v111 = objc_msgSend_countByEnumeratingWithState_objects_count_(v103, v106, (uint64_t)&v669, (uint64_t)v699, 16, v110);
          if (v111)
            continue;
          break;
        }
      }
    }
    else
    {
      v652 = 0;
      v57 = 0;
      v59 = 10000.0;
      v103 = v650;
    }
LABEL_46:

    goto LABEL_47;
  }
LABEL_173:

}

void sub_1BE861F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34,void *a35,uint64_t a36,void *a37,uint64_t a38,void *a39,void *a40,void *a41)
{
  void *v41;
  void *v42;
  void *v43;

  _Unwind_Resume(a1);
}

void sub_1BE862490(double *a1, double *a2, void *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinY;
  double v21;
  double v22;
  double v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  id v41;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  v41 = a3;
  objc_msgSend_bounds(v41, v11, v12, v13, v14, v15);
  x = v44.origin.x;
  y = v44.origin.y;
  width = v44.size.width;
  height = v44.size.height;
  MinY = CGRectGetMinY(v44);
  v45.origin.x = a4;
  v45.origin.y = a5;
  v45.size.width = a6;
  v45.size.height = a7;
  v21 = 0.0;
  if (MinY > CGRectGetMaxY(v45))
  {
    v46.origin.x = x;
    v46.origin.y = y;
    v46.size.width = width;
    v46.size.height = height;
    v22 = CGRectGetMinY(v46);
    v47.origin.x = a4;
    v47.origin.y = a5;
    v47.size.width = a6;
    v47.size.height = a7;
    v21 = v22 - CGRectGetMaxY(v47);
  }
  v48.origin.x = a4;
  v48.origin.y = a5;
  v48.size.width = a6;
  v48.size.height = a7;
  v23 = CGRectGetMinY(v48);
  v49.origin.x = x;
  v49.origin.y = y;
  v49.size.width = width;
  v49.size.height = height;
  if (v23 > CGRectGetMaxY(v49))
  {
    v50.origin.x = a4;
    v50.origin.y = a5;
    v50.size.width = a6;
    v50.size.height = a7;
    v29 = CGRectGetMinY(v50);
    v51.origin.x = x;
    v51.origin.y = y;
    v51.size.width = width;
    v51.size.height = height;
    v21 = v29 - CGRectGetMaxY(v51);
  }
  if (v21 == 0.0)
  {
    v30 = 0.0;
    if (!a2)
      goto LABEL_15;
    goto LABEL_14;
  }
  objc_msgSend_averageStrokeDeviation(v41, v24, v25, v26, v27, v28);
  v32 = v31;
  objc_msgSend_averageStrokeDeviation(v41, v33, v34, v35, v36, v37);
  if (a2)
  {
    v39 = v32 * 3.0;
    if (v32 * 3.0 <= a1[4])
      v39 = a1[4];
    v40 = v38 * 3.0;
    if (v38 * 3.0 <= a1[5])
      v40 = a1[5];
    v30 = (a1[13] * fabs(v21 / sqrt(v40 * v40 + v39 * v39)) + 0.0) * 0.8;
LABEL_14:
    *a2 = v30;
  }
LABEL_15:

}

void sub_1BE862644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE862658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE86266C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE862680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE862694(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = a2;
  v6 = a3;
  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(v12, v13, (uint64_t)v5, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(v23, v24, (uint64_t)v6, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v29, v30, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v34, v35, (uint64_t)v17, (uint64_t)v28, v36, v37);

  return v38;
}

void sub_1BE862754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE862790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8627A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE8627BC(uint64_t a1, void *a2, uint64_t *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char isEqual;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int64_t v82;
  double v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t i;
  uint64_t v105;
  id v107;
  id obj;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void *__p;
  char *v116;
  char *v117;
  _BYTE v118[128];
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v107 = a2;
  if (a1)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    __p = 0;
    v116 = 0;
    v117 = 0;
    v111 = 0u;
    v112 = 0u;
    v113 = 0u;
    v114 = 0u;
    obj = v107;
    v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v111, (uint64_t)v118, 16, v12);
    if (v18)
    {
      v109 = *(_QWORD *)v112;
      while (1)
      {
        v19 = 0;
        v110 = v18;
LABEL_7:
        if (*(_QWORD *)v112 != v109)
          objc_enumerationMutation(obj);
        v21 = 0;
        v22 = 0;
        v23 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * v19);
        while (1)
        {
          if (v22 >= objc_msgSend_count(v10, v13, v14, v15, v16, v17, v107))
            goto LABEL_14;
          objc_msgSend_objectAtIndexedSubscript_(v10, v13, v22, v15, v16, v17);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_substroke(v23, v25, v26, v27, v28, v29);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIdentifier(v30, v31, v32, v33, v34, v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          isEqual = objc_msgSend_isEqual_(v24, v37, (uint64_t)v36, v38, v39, v40);

          if ((isEqual & 1) != 0)
            break;
          ++v22;
          v21 += 16;
        }
        if (v22 == 0x7FFFFFFFFFFFFFFFLL)
          break;
        objc_msgSend_writingOrientation(v23, v13, v14, v15, v16, v17);
        *(double *)(*a3 + v21) = v83 + *(double *)(*a3 + v21);
        objc_msgSend_writingOrientation(v23, v84, v85, v86, v87, v88);
        *(double *)(*a3 + v21 + 8) = v89 + *(double *)(*a3 + v21 + 8);
        ++*((_QWORD *)__p + v22);
        if (++v19 != v110)
          goto LABEL_7;
LABEL_53:
        v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v111, (uint64_t)v118, 16, v17);
        if (!v18)
          goto LABEL_54;
      }
LABEL_14:
      objc_msgSend_substroke(v23, v13, v14, v15, v16, v17);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeIdentifier(v42, v43, v44, v45, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v10, v49, (uint64_t)v48, v50, v51, v52);

      objc_msgSend_writingOrientation(v23, v53, v54, v55, v56, v57);
      v60 = v58;
      v61 = v59;
      v63 = (_QWORD *)a3[1];
      v62 = a3[2];
      if ((unint64_t)v63 < v62)
      {
        *v63 = v58;
        v63[1] = v59;
        v64 = v63 + 2;
        goto LABEL_27;
      }
      v65 = (_QWORD *)*a3;
      v66 = ((uint64_t)v63 - *a3) >> 4;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 60)
        sub_1BE61F930();
      v68 = v62 - (_QWORD)v65;
      if (v68 >> 3 > v67)
        v67 = v68 >> 3;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
        v69 = 0xFFFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      if (v69)
      {
        if (v69 >> 60)
          sub_1BE61F100();
        v70 = (char *)operator new(16 * v69);
        v71 = &v70[16 * v66];
        *(_QWORD *)v71 = v60;
        *((_QWORD *)v71 + 1) = v61;
        v72 = (uint64_t)v71;
        if (v63 == v65)
        {
LABEL_25:
          v64 = v71 + 16;
          *a3 = v72;
          a3[1] = (uint64_t)(v71 + 16);
          a3[2] = (uint64_t)&v70[16 * v69];
          if (!v63)
            goto LABEL_27;
          goto LABEL_26;
        }
      }
      else
      {
        v70 = 0;
        v71 = (char *)(16 * v66);
        *(_QWORD *)v71 = v58;
        *((_QWORD *)v71 + 1) = v59;
        v72 = 16 * v66;
        if (v63 == v65)
          goto LABEL_25;
      }
      do
      {
        *(_OWORD *)(v72 - 16) = *((_OWORD *)v63 - 1);
        v72 -= 16;
        v63 -= 2;
      }
      while (v63 != v65);
      v63 = (_QWORD *)*a3;
      v64 = v71 + 16;
      *a3 = v72;
      a3[1] = (uint64_t)(v71 + 16);
      a3[2] = (uint64_t)&v70[16 * v69];
      if (!v63)
      {
LABEL_27:
        a3[1] = (uint64_t)v64;
        v73 = v116;
        if (v116 < v117)
        {
          *(_QWORD *)v116 = 1;
          v20 = (uint64_t)(v73 + 8);
LABEL_6:
          v116 = (char *)v20;
          if (++v19 == v110)
            goto LABEL_53;
          goto LABEL_7;
        }
        v74 = (char *)__p;
        v75 = v116 - (_BYTE *)__p;
        v76 = (v116 - (_BYTE *)__p) >> 3;
        v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 61)
          sub_1BE61F930();
        v78 = v117 - (_BYTE *)__p;
        if ((v117 - (_BYTE *)__p) >> 2 > v77)
          v77 = v78 >> 2;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
          v79 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        if (v79)
        {
          if (v79 >> 61)
            sub_1BE61F100();
          v80 = (char *)operator new(8 * v79);
          v81 = &v80[8 * v76];
          *(_QWORD *)v81 = 1;
          v20 = (uint64_t)(v81 + 8);
          v82 = v73 - v74;
          if (v73 == v74)
            goto LABEL_51;
        }
        else
        {
          v80 = 0;
          v81 = (char *)(8 * v76);
          *(_QWORD *)(8 * v76) = 1;
          v20 = 8 * v76 + 8;
          v82 = v73 - v74;
          if (v73 == v74)
          {
LABEL_51:
            __p = v81;
            v117 = &v80[8 * v79];
            if (!v74)
              goto LABEL_6;
            operator delete(v74);
            v116 = (char *)v20;
            if (++v19 != v110)
              goto LABEL_7;
            goto LABEL_53;
          }
        }
        v90 = v82 - 8;
        if (v90 < 0x58)
          goto LABEL_69;
        if ((unint64_t)(v73 - v80 - v75) < 0x20)
          goto LABEL_69;
        v91 = (v90 >> 3) + 1;
        v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        v93 = &v73[-v92];
        v81 -= v92;
        v94 = &v80[8 * v76 - 16];
        v95 = v73 - 16;
        v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v97 = *(_OWORD *)v95;
          *((_OWORD *)v94 - 1) = *((_OWORD *)v95 - 1);
          *(_OWORD *)v94 = v97;
          v94 -= 32;
          v95 -= 32;
          v96 -= 4;
        }
        while (v96);
        v73 = v93;
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_69:
          do
          {
            v98 = *((_QWORD *)v73 - 1);
            v73 -= 8;
            *((_QWORD *)v81 - 1) = v98;
            v81 -= 8;
          }
          while (v73 != v74);
        }
        goto LABEL_51;
      }
LABEL_26:
      operator delete(v63);
      goto LABEL_27;
    }
LABEL_54:

    for (i = 0; i < objc_msgSend_count(v10, v99, v100, v101, v102, v103, v107); ++i)
    {
      v105 = *((_QWORD *)__p + i);
      if (v105 >= 2)
        *(float64x2_t *)(*a3 + 16 * i) = vdivq_f64(*(float64x2_t *)(*a3 + 16 * i), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v105), 0));
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1BE862CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_BYTE *sub_1BE862D88(_BYTE *a1, void *a2, double a3, double a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  double *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  unint64_t v60;
  double *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  long double v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  long double v89;
  double v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  const char *v114;
  __float2 v115;
  __float2 v116;
  __float2 v117;
  __float2 v118;
  __float2 v119;
  double cosval;
  double sinval;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  double v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  double v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  double v165;
  float v166;
  __float2 v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  uint64_t v175;
  unint64_t v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  double *v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double *v211;
  double *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  double *v218;
  double *v219;
  __int128 v220;
  CGFloat v221;
  unint64_t v222;
  CGFloat v223;
  double v224;
  CGFloat v225;
  uint64_t v226;
  double v227;
  double MinX;
  double MaxX;
  double *v230;
  double v231;
  unint64_t v232;
  double v233;
  double v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  double v243;
  void *v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  NSObject *v257;
  void *v258;
  void *v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  double v266;
  double v268;
  _BYTE *v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double MidY;
  double MidX;
  void *__p;
  double *v280;
  char *v281;
  CGRect v282;
  CGRect v283;
  CGRect v284;
  CGRect v285;

  v5 = a2;
  v11 = v5;
  v269 = a1;
  if (!a1)
    goto LABEL_84;
  if (!v5 || !objc_msgSend_count(v5, v6, v7, v8, v9, v10))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v257 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v257, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1BE607000, v257, OS_LOG_TYPE_FAULT, "There must be at least one substroke in the input for the coalescing algorithm.", (uint8_t *)&__p, 2u);
    }

    if (v269[178])
      goto LABEL_5;
LABEL_83:
    v258 = (void *)MEMORY[0x1E0C99D20];
    objc_msgSend_lastObject(v11, v12, v13, v14, v15, v16, *(_QWORD *)&a4, *(_QWORD *)&a3);
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_arrayWithObject_(v258, v260, (uint64_t)v259, v261, v262, v263);
    a1 = (_BYTE *)objc_claimAutoreleasedReturnValue();

    goto LABEL_84;
  }
  if (!a1[178])
    goto LABEL_83;
LABEL_5:
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v12, v13, v14, v15, v16, *(_QWORD *)&a4, *(_QWORD *)&a3);
  a1 = (_BYTE *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lastObject(v11, v17, v18, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(a1, v23, (uint64_t)v22, v24, v25, v26);

  objc_msgSend_objectAtIndexedSubscript_(v11, v27, 0, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeDeviation(v31, v32, v33, v34, v35, v36);
  v38 = v37;
  v40 = v39;

  __p = 0;
  v280 = 0;
  v281 = 0;
  v46 = objc_msgSend_count(v11, v41, v42, v43, v44, v45);
  v52 = v46;
  v53 = (double *)__p;
  if (v46 > (v281 - (_BYTE *)__p) >> 5)
  {
    if (v46 >> 59)
      sub_1BE61F930();
    v54 = v280;
    v55 = (char *)operator new(32 * v46);
    v56 = &v55[((char *)v54 - (char *)v53) & 0xFFFFFFFFFFFFFFE0];
    v57 = v56;
    if (v54 != v53)
    {
      v58 = &v55[((char *)v54 - (char *)v53) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        v59 = *((_OWORD *)v54 - 1);
        v57 = v58 - 32;
        *((_OWORD *)v58 - 2) = *((_OWORD *)v54 - 2);
        *((_OWORD *)v58 - 1) = v59;
        v54 -= 4;
        v58 -= 32;
      }
      while (v54 != v53);
    }
    __p = v57;
    v280 = (double *)v56;
    v281 = &v55[32 * v52];
    if (v53)
      operator delete(v53);
  }
  v60 = 0;
  v270 = v40 * -2.0;
  v271 = v38 * -2.0;
  while (v60 < objc_msgSend_count(v11, v47, v48, v49, v50, v51))
  {
    objc_msgSend_objectAtIndexedSubscript_(v11, v62, v60, v63, v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v11, v67, v60, v68, v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_writingOrientation(v71, v72, v73, v74, v75, v76);
    v78 = v77;
    objc_msgSend_objectAtIndexedSubscript_(v11, v79, v60, v80, v81, v82);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_writingOrientation(v83, v84, v85, v86, v87, v88);
    v90 = atan2(v78, v89);

    objc_msgSend_substroke(v66, v91, v92, v93, v94, v95);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v96, v97, v98, v99, v100, v101);
    MidX = CGRectGetMidX(v282);
    objc_msgSend_substroke(v66, v102, v103, v104, v105, v106);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v107, v108, v109, v110, v111, v112);
    MidY = CGRectGetMidY(v283);

    v113 = v90;
    v119 = __sincosf_stret(v113);
    cosval = v119.__cosval;
    sinval = v119.__sinval;
    v274 = v119.__cosval;
    if (v60)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v114, v60 - 1, *(_QWORD *)&v116, *(_QWORD *)&v117, *(_QWORD *)&v118);
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writingOrientation(v122, v123, v124, v125, v126, v127);
      v129 = v128;
      objc_msgSend_objectAtIndexedSubscript_(v11, v130, v60, v131, v132, v133);
      v134 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writingOrientation(v134, v135, v136, v137, v138, v139);
      v141 = v140;
      objc_msgSend_objectAtIndexedSubscript_(v11, v142, v60 - 1, v143, v144, v145);
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writingOrientation(v146, v147, v148, v149, v150, v151);
      v153 = v152;
      objc_msgSend_objectAtIndexedSubscript_(v11, v154, v60, v155, v156, v157);
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writingOrientation(v158, v159, v160, v161, v162, v163);
      v165 = atan2(v129 + v141, v153 + v164);

      v166 = v165;
      v167 = __sincosf_stret(v166);
      cosval = v167.__cosval;
      v168 = v167.__sinval;
      v170 = v275;
      v169 = v276;
      v171 = v272;
      v172 = v273;
      v174 = MidY;
      v173 = MidX;
    }
    else
    {
      v174 = MidY;
      v173 = MidX;
      v172 = MidX + v271 * cosval;
      v171 = MidY + v270 * sinval;
      v169 = 0.0;
      v168 = v119.__sinval;
      v170 = 0.0;
    }
    v175 = 0;
    v176 = 0;
    v177 = 2.22507386e-308;
    v178 = 1.79769313e308;
    v179 = v173 - v172;
    v180 = v174 - v171;
    v272 = v174;
    v273 = v173;
    v275 = v170 + cosval * v180 - v179 * v168;
    v276 = v169 + v168 * v180 + v179 * cosval;
    v181 = v119.__sinval;
    v182 = -sinval;
    v183 = 1.79769313e308;
    v184 = 2.22507386e-308;
    while (1)
    {
      objc_msgSend_substroke(v66, v114, *(_QWORD *)&v115, *(_QWORD *)&v116, *(_QWORD *)&v117, *(_QWORD *)&v118);
      v185 = (void *)objc_claimAutoreleasedReturnValue();
      v191 = (_QWORD *)objc_msgSend_convexHull(v185, v186, v187, v188, v189, v190);
      v192 = v191[1] - *v191;

      if (v176 >= v192 >> 4)
        break;
      objc_msgSend_substroke(v66, v193, v194, v195, v196, v197);
      v198 = (void *)objc_claimAutoreleasedReturnValue();
      v204 = (double *)(*(_QWORD *)objc_msgSend_convexHull(v198, v199, v200, v201, v202, v203) + v175);
      v206 = *v204;
      v205 = v204[1];

      v207 = v276 + v274 * (v206 - MidX) + v181 * (v205 - MidY);
      v208 = v275 + v182 * (v206 - MidX) + v274 * (v205 - MidY);
      if (v207 < v178)
        v178 = v276 + v274 * (v206 - MidX) + v181 * (v205 - MidY);
      if (v207 > v177)
        v177 = v276 + v274 * (v206 - MidX) + v181 * (v205 - MidY);
      if (v208 < v183)
        v183 = v275 + v182 * (v206 - MidX) + v274 * (v205 - MidY);
      if (v208 > v184)
        v184 = v275 + v182 * (v206 - MidX) + v274 * (v205 - MidY);
      ++v176;
      v175 += 16;
    }
    v209 = v177 - v178;
    v210 = v184 - v183;
    v211 = v280;
    if (v280 < (double *)v281)
    {
      *v280 = v178;
      v211[1] = v183;
      v61 = v211 + 4;
      v211[2] = v209;
      v211[3] = v210;
      goto LABEL_14;
    }
    v212 = (double *)__p;
    v213 = ((char *)v280 - (_BYTE *)__p) >> 5;
    v214 = v213 + 1;
    if ((unint64_t)(v213 + 1) >> 59)
      sub_1BE61F930();
    v215 = v281 - (_BYTE *)__p;
    if ((v281 - (_BYTE *)__p) >> 4 > v214)
      v214 = v215 >> 4;
    if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFE0)
      v216 = 0x7FFFFFFFFFFFFFFLL;
    else
      v216 = v214;
    if (v216)
    {
      if (v216 >> 59)
        sub_1BE61F100();
      v217 = (char *)operator new(32 * v216);
      v218 = (double *)&v217[32 * v213];
      *v218 = v178;
      v218[1] = v183;
      v218[2] = v209;
      v218[3] = v210;
      v219 = v218;
      if (v211 == v212)
      {
LABEL_45:
        v61 = v218 + 4;
        __p = v219;
        v280 = v218 + 4;
        v281 = &v217[32 * v216];
        if (!v211)
          goto LABEL_14;
LABEL_46:
        operator delete(v211);
        goto LABEL_14;
      }
    }
    else
    {
      v217 = 0;
      v218 = (double *)(32 * v213);
      *v218 = v178;
      v218[1] = v183;
      v218[2] = v209;
      v218[3] = v210;
      v219 = (double *)(32 * v213);
      if (v211 == v212)
        goto LABEL_45;
    }
    do
    {
      v220 = *((_OWORD *)v211 - 1);
      *((_OWORD *)v219 - 2) = *((_OWORD *)v211 - 2);
      *((_OWORD *)v219 - 1) = v220;
      v219 -= 4;
      v211 -= 4;
    }
    while (v211 != v212);
    v211 = v212;
    v61 = v218 + 4;
    __p = v219;
    v280 = v218 + 4;
    v281 = &v217[32 * v216];
    if (v211)
      goto LABEL_46;
LABEL_14:
    v280 = v61;

    ++v60;
  }
  v221 = *(v280 - 4);
  v222 = 126 - 2 * __clz(((char *)(v280 - 4) - (_BYTE *)__p) >> 5);
  v223 = *(v280 - 3);
  v224 = *(v280 - 2);
  v225 = *(v280 - 1);
  if (v280 - 4 == __p)
    v226 = 0;
  else
    v226 = v222;
  sub_1BE86E484((CGRect *)__p, (CGRect *)v280 - 1, v226, 1);
  if (10.0 - v224 >= 0.0)
    v227 = 10.0 - v224;
  else
    v227 = 0.0;
  v284.origin.x = v221;
  v284.origin.y = v223;
  v284.size.width = v224;
  v284.size.height = v225;
  MinX = CGRectGetMinX(v284);
  v285.origin.x = v221;
  v285.origin.y = v223;
  v285.size.width = v224;
  v285.size.height = v225;
  MaxX = CGRectGetMaxX(v285);
  v230 = (double *)__p;
  if ((char *)v280 - (_BYTE *)__p >= 33)
  {
    v231 = sqrt(v266 * v266 + v268 * v268) * 0.25;
    v232 = (unint64_t)((char *)v280 - (_BYTE *)__p) >> 5;
    v233 = v231 + MaxX + v227 * 0.5;
    v234 = MinX - v227 * 0.5 - v231;
    v235 = v232 - 1;
    v236 = 32 * v232 - 64;
    do
    {
      v237 = CGRectGetMinX(*(CGRect *)((char *)__p + v236));
      v242 = CGRectGetMaxX(*(CGRect *)((char *)__p + v236));
      v243 = v242;
      if ((v237 < v234 || v237 > v233) && (v242 < v234 || v242 > v233) && (v237 >= v234 || v242 <= v233))
        break;
      objc_msgSend_objectAtIndexedSubscript_(v11, v238, --v235, v239, v240, v241);
      v247 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(a1, v248, (uint64_t)v247, v249, v250, v251);

      if ((unint64_t)objc_msgSend_count(a1, v252, v253, v254, v255, v256) >= *((_QWORD *)v269 + 12))
        break;
      if (v237 - v231 < v234)
        v234 = v237 - v231;
      if (v231 + v243 < v233)
        v233 = v231 + v243;
      v236 -= 32;
    }
    while (v235 > 0);
    v230 = (double *)__p;
  }
  if (v230)
  {
    v280 = v230;
    operator delete(v230);
  }
LABEL_84:

  return a1;
}

void sub_1BE86351C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE863530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE863540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;
  void *v23;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

double sub_1BE8636C8(_QWORD *a1, void *a2, void *a3, long double a4, long double a5)
{
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  double v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  long double v41;
  long double v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;

  v9 = a2;
  v15 = a3;
  if (a1)
  {
    v16 = 0;
    v17 = 0.0;
    v18 = 0.0;
    while (v16 < objc_msgSend_count(v9, v10, v11, v12, v13, v14))
    {
      objc_msgSend_objectAtIndexedSubscript_(v9, v19, v16, v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writingOrientation(v24, v25, v26, v27, v28, v29);
      v31 = v30;
      v33 = v32;

      v17 = v17 + (v31 - a4) * (v31 - a4);
      v18 = v18 + (v33 - a5) * (v33 - a5);
      ++v16;
    }
    v34 = objc_msgSend_count(v9, v19, v20, v21, v22, v23);
    v40 = objc_msgSend_count(v9, v35, v36, v37, v38, v39);
    v42 = *((double *)a1 + 2);
    v41 = *((double *)a1 + 3);
    v48 = objc_msgSend_count(v9, v43, v44, v45, v46, v47);
    v49 = atan2(a5, a4);
    v50 = vabdd_f64(v49, atan2(v41, v42));
    if (v50 <= 3.14159265)
      v51 = v50;
    else
      v51 = 6.28318531 - v50;
    v52 = (double)(unint64_t)v48 / (double)(uint64_t)a1[12];
    v53 = pow(v52 / sqrt(v52 * v52 + 1.0), sqrt(sqrt(v17 / (double)(unint64_t)v34) + sqrt(v18 / (double)(unint64_t)v40)) + 1.0)/ (v51 + 1.0);
  }
  else
  {
    v53 = 0.0;
  }

  return v53;
}

void sub_1BE863860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE863874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE863888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8638A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8638B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE863DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1BE863EF8(_OWORD *a1, void *a2, void *a3, int a4, int a5)
{
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  const char *v78;
  uint64_t v79;
  id v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  double v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  double v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  double v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  double v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  double v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  void *v242;
  const char *v243;
  void *v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  const char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  double v278;
  double v279;
  double v280;
  double v281;
  void *v282;
  id v283;
  id v284;
  void *v285;
  void *v286;
  void *__p;
  unint64_t v288;
  char *v289;
  id v290;
  __int128 v291;
  __int128 v292;
  id v293;
  id v294[2];
  CGRect v295;
  CGRect v296;
  CGRect v297;

  v9 = a2;
  v10 = a3;
  v286 = v10;
  if (a1)
  {
    v293 = 0;
    v294[0] = 0;
    objc_msgSend_strokeIdentifiers(v10, v11, v12, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstStrokeIdentifier_lastStrokeIdentifier_inGroup_addingStrokeIdentifiers_removingStrokeIdentifiers_(a1, v17, (uint64_t)v294, (uint64_t)&v293, (uint64_t)v9, (uint64_t)v16, 0);
    v284 = v294[0];
    v283 = v293;

    objc_msgSend_bounds(v9, v18, v19, v20, v21, v22);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v30 = v29;
    objc_msgSend_bounds(v286, v31, v32, v33, v34, v35);
    v297.origin.x = v36;
    v297.origin.y = v37;
    v297.size.width = v38;
    v297.size.height = v39;
    v295.origin.x = v24;
    v295.origin.y = v26;
    v295.size.width = v28;
    v295.size.height = v30;
    v296 = CGRectUnion(v295, v297);
    x = v296.origin.x;
    y = v296.origin.y;
    width = v296.size.width;
    height = v296.size.height;
    if (a4)
    {
      objc_msgSend_writingDirectionSortedSubstrokes(v286, v40, v41, v42, v43, v44);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = (void *)objc_msgSend_mutableCopy(v49, v50, v51, v52, v53, v54);

      objc_msgSend_writingDirectionSortedSubstrokes(v9, v56, v57, v58, v59, v60);
    }
    else
    {
      objc_msgSend_writingDirectionSortedSubstrokes(v9, v40, v41, v42, v43, v44);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = (void *)objc_msgSend_mutableCopy(v66, v67, v68, v69, v70, v71);

      objc_msgSend_writingDirectionSortedSubstrokes(v286, v72, v73, v74, v75, v76);
    }
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v55, v62, (uint64_t)v61, v63, v64, v65);

    v77 = a1[1];
    v291 = a1[2];
    v292 = v77;
    v290 = v55;
    objc_msgSend_estimateWritingDirectionAndSortSubstrokesAccordingly_averageWritingOrientation_averageStrokeDeviation_(a1, v78, (uint64_t)&v290, (uint64_t)&v292, (uint64_t)&v291, v79);
    v80 = v290;

    __p = 0;
    v288 = 0;
    v289 = 0;
    objc_msgSend_strokeIdentifiers(v9, v81, v82, v83, v84, v85);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = objc_msgSend_count(v86, v87, v88, v89, v90, v91);
    objc_msgSend_strokeIdentifiers(v286, v93, v94, v95, v96, v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v104 = objc_msgSend_count(v98, v99, v100, v101, v102, v103) + v92;
    if (v104)
    {
      if (v104 >> 60)
        sub_1BE61F930();
      v105 = (char *)operator new(16 * v104);
      __p = &v105[v288 & 0xFFFFFFFFFFFFFFF0];
      v288 = (unint64_t)__p;
      v289 = &v105[16 * v104];
    }

    sub_1BE8627BC((uint64_t)a1, v80, (uint64_t *)&__p);
    v285 = (void *)objc_claimAutoreleasedReturnValue();
    v278 = height;
    v279 = width;
    v280 = y;
    v281 = x;
    sub_1BE862D88(a1, v80, *(double *)&v291, *((double *)&v291 + 1));
    v282 = (void *)objc_claimAutoreleasedReturnValue();
    v106 = sub_1BE8636C8(a1, v80, v285, *(long double *)&v292, *((long double *)&v292 + 1));
    objc_msgSend_firstStrokeOrigin(v9, v107, v108, v109, v110, v111);
    v113 = v112;
    objc_msgSend_firstStrokeOrigin(v9, v114, v115, v116, v117, v118);
    v120 = v119;
    objc_msgSend_firstStrokeOrigin(v9, v121, v122, v123, v124, v125);
    v127 = v126;
    objc_msgSend_firstStrokeOrigin(v9, v128, v129, v130, v131, v132);
    v134 = v133;
    objc_msgSend_firstStrokeOrigin(v286, v135, v136, v137, v138, v139);
    v141 = v140;
    objc_msgSend_firstStrokeOrigin(v286, v142, v143, v144, v145, v146);
    v148 = v147;
    objc_msgSend_firstStrokeOrigin(v286, v149, v150, v151, v152, v153);
    v155 = v154;
    objc_msgSend_firstStrokeOrigin(v286, v156, v157, v158, v159, v160);
    if (v127 * v134 + v113 * v120 >= v155 * v166 + v141 * v148)
      objc_msgSend_firstStrokeOrigin(v286, v161, v162, v163, v164, v165);
    else
      objc_msgSend_firstStrokeOrigin(v9, v161, v162, v163, v164, v165);
    v174 = v172;
    v175 = v173;
    if (a5)
    {
      v176 = v9;
      objc_msgSend_strokeIdentifiers(v176, v177, v178, v179, v180, v181);
      v182 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_lastObject(v80, v183, v184, v185, v186, v187);
      v188 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_substroke(v188, v189, v190, v191, v192, v193);
      v194 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeIdentifier(v194, v195, v196, v197, v198, v199);
      v200 = (void *)objc_claimAutoreleasedReturnValue();
      v205 = objc_msgSend_containsObject_(v182, v201, (uint64_t)v200, v202, v203, v204);

      if (v205)
      {
        v211 = v286;

        v176 = v211;
      }
      v217 = objc_msgSend_count(v80, v206, v207, v208, v209, v210) - 2;
      if (v217 < 0)
      {
LABEL_18:
        v217 = -1;
      }
      else
      {
        while (1)
        {
          objc_msgSend_strokeIdentifiers(v176, v212, v213, v214, v215, v216);
          v218 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v80, v219, v217, v220, v221, v222);
          v223 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_substroke(v223, v224, v225, v226, v227, v228);
          v229 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIdentifier(v229, v230, v231, v232, v233, v234);
          v235 = (void *)objc_claimAutoreleasedReturnValue();
          v240 = objc_msgSend_containsObject_(v218, v236, (uint64_t)v235, v237, v238, v239);

          if ((v240 & 1) != 0)
            break;
          if (v217-- <= 0)
            goto LABEL_18;
        }
      }

    }
    else
    {
      v217 = -1;
    }
    objc_msgSend_strokeIdentifiers(v286, v167, v168, v169, v170, v171);
    v242 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_groupByAddingStrokeIdentifiers_removingStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_writingDirectionSortedSubstrokes_averageWritingOrientation_averageStrokeDeviation_writingDirectionSortedStrokeIdentifiers_localStrokeWritingOrientations_coalescedLastSubstrokes_groupingConfidence_lastSubstrokeIndexBeforeMerge_firstStrokeOrigin_(v9, v243, (uint64_t)v242, 0, (uint64_t)v284, (uint64_t)v283, v80, v285, v281, v280, v279, v278, v292, v291, &__p, v282, *(_QWORD *)&v106, v217, v174,
      v175);
    v244 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_strategyIdentifier(v9, v245, v246, v247, v248, v249);
    v250 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strategyIdentifier(a1, v251, v252, v253, v254, v255);
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v250, v257, (uint64_t)v256, v258, v259, v260))
      v266 = objc_msgSend_classification(v9, v261, v262, v263, v264, v265);
    else
      v266 = objc_msgSend_classification(v286, v261, v262, v263, v264, v265);
    v267 = v266;

    objc_msgSend_strategyIdentifier(a1, v268, v269, v270, v271, v272);
    v273 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_updateStrategyIdentifier_classification_(v244, v274, (uint64_t)v273, v267, v275, v276);

    if (__p)
    {
      v288 = (unint64_t)__p;
      operator delete(__p);
    }

  }
  else
  {
    v244 = 0;
  }

  return v244;
}

void sub_1BE864494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *__p,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE864664()
{
  JUMPOUT(0x1BE864618);
}

void sub_1BE8652E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  void *v36;

  sub_1BE63CEBC(&a36);
  _Unwind_Resume(a1);
}

__n128 sub_1BE8654E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE865504(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE86551C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _QWORD *v18;
  unint64_t v19;
  double *v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  double *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v11 = *(void **)(a1 + 32);
  if (v11)
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(double *)(a1 + 96);
  v13 = a7 - *(double *)(a1 + 104);
  v14 = *(double *)(a1 + 120);
  v15 = a8 - *(double *)(a1 + 112);
  v16 = *(double *)(a1 + 80) + v12 * v13 + v14 * v15;
  v17 = *(double *)(a1 + 88) - v14 * v13 + v12 * v15;
  v18 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v20 = (double *)v18[7];
  v19 = v18[8];
  if ((unint64_t)v20 < v19)
  {
    *v20 = v16;
    v20[1] = v17;
    v21 = (uint64_t)(v20 + 2);
    goto LABEL_20;
  }
  v22 = (double *)v18[6];
  v23 = ((char *)v20 - (char *)v22) >> 4;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 60)
    sub_1BE61F930();
  v25 = v19 - (_QWORD)v22;
  if (v25 >> 3 > v24)
    v24 = v25 >> 3;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
    v26 = 0xFFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
  {
    if (v26 >> 60)
      sub_1BE61F100();
    v27 = (char *)operator new(16 * v26);
    v28 = (double *)&v27[16 * v23];
    v29 = &v27[16 * v26];
    *v28 = v16;
    v28[1] = v17;
    v21 = (uint64_t)(v28 + 2);
    if (v20 == v22)
      goto LABEL_18;
    goto LABEL_16;
  }
  v28 = (double *)(16 * v23);
  v29 = 0;
  *v28 = v16;
  v28[1] = v17;
  v21 = 16 * v23 + 16;
  if (v20 != v22)
  {
    do
    {
LABEL_16:
      *((_OWORD *)v28 - 1) = *((_OWORD *)v20 - 1);
      v28 -= 2;
      v20 -= 2;
    }
    while (v20 != v22);
    v20 = (double *)v18[6];
  }
LABEL_18:
  v18[6] = v28;
  v18[7] = v21;
  v18[8] = v29;
  if (v20)
    operator delete(v20);
LABEL_20:
  v18[7] = v21;
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (v16 < *(double *)(v30 + 24))
  {
    *(double *)(v30 + 24) = v16;
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v16 <= *(double *)(v31 + 24))
    {
LABEL_22:
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      if (v17 >= *(double *)(v32 + 24))
        goto LABEL_23;
      goto LABEL_28;
    }
  }
  else
  {
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v16 <= *(double *)(v31 + 24))
      goto LABEL_22;
  }
  *(double *)(v31 + 24) = v16;
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (v17 >= *(double *)(v32 + 24))
  {
LABEL_23:
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v17 <= *(double *)(v33 + 24))
      return;
    goto LABEL_24;
  }
LABEL_28:
  *(double *)(v32 + 24) = v17;
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  if (v17 > *(double *)(v33 + 24))
LABEL_24:
    *(double *)(v33 + 24) = v17;
}

void sub_1BE865870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE865894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8658B0(uint64_t a1, double *a2, _QWORD *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  id v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t i;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  double v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  double v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  double v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  double v221;
  double v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  double v251;
  double v252;
  double v253;
  double v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  double v260;
  double v261;
  double v262;
  void *v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  double v272;
  double v273;
  void *v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  _QWORD *v286;
  double v287;
  id v289;
  id v290;

  v290 = a4;
  v12 = a5;
  v13 = a6;
  v19 = v13;
  if (!a1)
    goto LABEL_38;
  objc_msgSend_writingDirectionSortedSubstrokes(v13, v14, v15, v16, v17, v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v20, v21, a7, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v289 = v12;
  objc_msgSend_firstObject(v12, v26, v27, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = (void *)objc_opt_class();
  objc_msgSend_substroke(v25, v33, v34, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v38, v39, v40, v41, v42, v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeProvider((void *)a1, v45, v46, v47, v48, v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeForIdentifier_inStrokeProvider_(v32, v51, (uint64_t)v44, (uint64_t)v50, v52, v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_writingOrientation(v25, v55, v56, v57, v58, v59);
  v61 = v60;
  v63 = v62;
  objc_msgSend_strokeDeviation(v25, v64, v65, v66, v67, v68);
  v70 = v69;
  v72 = v71;
  objc_msgSend_coalescedLastSubstrokes(v19, v73, v74, v75, v76, v77);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend_count(v78, v79, v80, v81, v82, v83) >= 2)
  {
    objc_msgSend_writingDirectionSortedSubstrokes(v19, v84, v85, v86, v87, v88);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    v95 = objc_msgSend_count(v89, v90, v91, v92, v93, v94) - 1;

    if (v95 != a7)
      goto LABEL_9;
    for (i = 1; ; ++i)
    {
      objc_msgSend_coalescedLastSubstrokes(v19, v96, v97, v98, v99, v100);
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      v108 = objc_msgSend_count(v102, v103, v104, v105, v106, v107);

      if (i >= v108)
        break;
      objc_msgSend_coalescedLastSubstrokes(v19, v109, v110, v111, v112, v113);
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v114, v115, i, v116, v117, v118);
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writingOrientation(v119, v120, v121, v122, v123, v124);
      v126 = v125;

      objc_msgSend_coalescedLastSubstrokes(v19, v127, v128, v129, v130, v131);
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v132, v133, i, v134, v135, v136);
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writingOrientation(v137, v138, v139, v140, v141, v142);
      v144 = v143;

      objc_msgSend_coalescedLastSubstrokes(v19, v145, v146, v147, v148, v149);
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v150, v151, i, v152, v153, v154);
      v155 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeDeviation(v155, v156, v157, v158, v159, v160);
      v162 = v161;

      objc_msgSend_coalescedLastSubstrokes(v19, v163, v164, v165, v166, v167);
      v168 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v168, v169, i, v170, v171, v172);
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeDeviation(v173, v174, v175, v176, v177, v178);
      v61 = v61 + v126;
      v63 = v63 + v144;
      v70 = v70 + v162;
      v72 = v72 + v179;

    }
    objc_msgSend_coalescedLastSubstrokes(v19, v109, v110, v111, v112, v113);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    v186 = objc_msgSend_count(v180, v181, v182, v183, v184, v185);

    objc_msgSend_coalescedLastSubstrokes(v19, v187, v188, v189, v190, v191);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    v198 = objc_msgSend_count(v192, v193, v194, v195, v196, v197);

    objc_msgSend_coalescedLastSubstrokes(v19, v199, v200, v201, v202, v203);
    v204 = (void *)objc_claimAutoreleasedReturnValue();
    v210 = objc_msgSend_count(v204, v205, v206, v207, v208, v209);

    objc_msgSend_coalescedLastSubstrokes(v19, v211, v212, v213, v214, v215);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = v61 / (double)(unint64_t)v186;
    v63 = v63 / (double)(unint64_t)v198;
    v70 = v70 / (double)(unint64_t)v210;
    v72 = v72 / (double)(unint64_t)objc_msgSend_count(v78, v216, v217, v218, v219, v220);
  }

LABEL_9:
  objc_msgSend_averageWritingOrientation(v19, v96, v97, v98, v99, v100);
  v222 = v221;
  objc_msgSend_averageWritingOrientation(v19, v223, v224, v225, v226, v227);
  v233 = (v61 + v222) * 0.5;
  v235 = (v63 + v234) * 0.5;
  v236 = sqrt(v235 * v235 + v233 * v233);
  if (v236 != 0.0)
  {
    v233 = v233 / v236;
    v235 = v235 / v236;
  }
  if (*(_BYTE *)(a1 + 176))
  {
    objc_msgSend_clippedWritingOrientation_((void *)a1, v228, v229, v230, v231, v232, v233, v235);
    v233 = v237;
    v235 = v238;
  }
  objc_msgSend_averageStrokeDeviation(v19, v228, v229, v230, v231, v232);
  v240 = v239;
  objc_msgSend_averageStrokeDeviation(v19, v241, v242, v243, v244, v245);
  v251 = (v70 + v240) * 0.5;
  v253 = (v72 + v252) * 0.5;
  if (v251 <= *(double *)(a1 + 32))
    v251 = *(double *)(a1 + 32);
  if (v253 <= *(double *)(a1 + 40))
    v253 = *(double *)(a1 + 40);
  v254 = sqrt(v253 * v253 + v251 * v251);
  if (*(_BYTE *)(a1 + 178))
  {
    objc_msgSend_setWritingOrientation_(v31, v246, v247, v248, v249, v250, v233, v235);
    objc_msgSend_rotatedBounds(v31, v255, v256, v257, v258, v259);
    v262 = sqrt(v260 * v260 + v261 * v261);
    if (v262 > v254)
    {
      objc_msgSend_strokeIdentifiers(v19, v246, v247, v248, v249, v250);
      v263 = (void *)objc_claimAutoreleasedReturnValue();
      v269 = objc_msgSend_count(v263, v264, v265, v266, v267, v268);
      v270 = *(_QWORD *)(a1 + 96);
      if (v270 >= 0)
        v271 = *(_QWORD *)(a1 + 96);
      else
        v271 = v270 + 1;

      if (v269 <= v271 >> 1)
      {
        v272 = (v254 + v262) * 0.5;
        v273 = v254 * 4.0;
      }
      else
      {
        v272 = v262 * 0.1 + v254 * 0.9;
        v273 = v254 + v254;
      }
      if (v272 >= v273)
        v254 = v273;
      else
        v254 = v272;
    }
  }
  objc_msgSend_coalescedLastSubstrokes(v19, v246, v247, v248, v249, v250);
  v274 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_substroke(v31, v275, v276, v277, v278, v279);
  v280 = (void *)objc_claimAutoreleasedReturnValue();
  v281 = sub_1BE866000((void *)a1, v274, v280, v54, v290, v233, v235);
  v283 = v282;

  v284 = v283 / v254;
  if (v281 / v254 >= 0.0)
  {
    v285 = *(double *)(a1 + 104);
    v286 = a3;
    if (v284 >= 0.0)
    {
LABEL_30:
      v287 = *(double *)(a1 + 120) * *(double *)(a1 + 112);
      if (!a2)
        goto LABEL_35;
      goto LABEL_34;
    }
  }
  else
  {
    v285 = *(double *)(a1 + 128) * *(double *)(a1 + 104);
    v286 = a3;
    if (v284 >= 0.0)
      goto LABEL_30;
  }
  v287 = *(double *)(a1 + 112);
  if (a2)
LABEL_34:
    *a2 = fabs(v281 / v254) * v285 + fabs(v284) * v287;
LABEL_35:
  if (v286)
    *v286 = objc_retainAutorelease(v54);

  v12 = v289;
LABEL_38:

}

void sub_1BE865E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

double sub_1BE866000(void *a1, void *a2, void *a3, void *a4, void *a5, double a6, double a7)
{
  id v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  double MidX;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double MidY;
  __int128 *v43;
  double v44;
  double v45;
  id v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t j;
  void *v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char isEqual;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  const char *v153;
  double v154;
  double v155;
  double v156;
  double v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  double v165;
  double v166;
  id v167;
  void *v168;
  id v169;
  id obj;
  _QWORD v171[9];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  double *v177;
  uint64_t v178;
  __n128 (*v179)(__n128 *, __n128 *);
  uint64_t (*v180)();
  void *v181;
  __int128 v182;
  _QWORD v183[4];
  id v184;
  uint64_t *v185;
  uint64_t *v186;
  double v187;
  double v188;
  uint64_t v189;
  double *v190;
  uint64_t v191;
  __n128 (*v192)(__n128 *, __n128 *);
  uint64_t (*v193)();
  void *v194;
  __int128 v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  _BYTE v204[128];
  _BYTE v205[128];
  uint64_t v206;
  CGRect v207;
  CGRect v208;
  CGRect v209;
  CGRect v210;

  v206 = *MEMORY[0x1E0C80C00];
  v167 = a2;
  v169 = a3;
  v13 = a4;
  v14 = a5;
  v168 = v14;
  if (a1)
  {
    if (!v14)
    {
      v20 = (void *)objc_opt_class();
      objc_msgSend_strokeIdentifier(v169, v21, v22, v23, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeProvider(a1, v27, v28, v29, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeForIdentifier_inStrokeProvider_(v20, v33, (uint64_t)v26, (uint64_t)v32, v34, v35);
      v168 = (void *)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend_bounds(v169, v15, v16, v17, v18, v19);
    MidX = CGRectGetMidX(v207);
    objc_msgSend_bounds(v169, v37, v38, v39, v40, v41);
    MidY = CGRectGetMidY(v208);
    v43 = (__int128 *)MEMORY[0x1E0C9D538];
    v45 = *MEMORY[0x1E0C9D538];
    v44 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v200 = 0u;
    v201 = 0u;
    v202 = 0u;
    v203 = 0u;
    v46 = v167;
    v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v47, (uint64_t)&v200, (uint64_t)v205, 16, v48);
    if (v54)
    {
      v55 = *(_QWORD *)v201;
      do
      {
        for (i = 0; i != v54; ++i)
        {
          if (*(_QWORD *)v201 != v55)
            objc_enumerationMutation(v46);
          v57 = *(void **)(*((_QWORD *)&v200 + 1) + 8 * i);
          objc_msgSend_substroke(v57, v49, v50, v51, v52, v53);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_bounds(v58, v59, v60, v61, v62, v63);
          v64 = CGRectGetMidX(v209);
          objc_msgSend_substroke(v57, v65, v66, v67, v68, v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_bounds(v70, v71, v72, v73, v74, v75);
          v76 = CGRectGetMidY(v210);

          v45 = v45 + v64;
          v44 = v44 + v76;
        }
        v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v49, (uint64_t)&v200, (uint64_t)v205, 16, v53);
      }
      while (v54);
    }

    if ((unint64_t)objc_msgSend_count(v46, v77, v78, v79, v80, v81) >= 2)
    {
      v45 = v45 / (double)(unint64_t)objc_msgSend_count(v46, v82, v83, v84, v85, v86);
      v44 = v44 / (double)(unint64_t)objc_msgSend_count(v46, v87, v88, v89, v90, v91);
    }
    v196 = 0;
    v197 = &v196;
    v198 = 0x2020000000;
    v199 = 0x7FEFFFFFFFFFFFFFLL;
    v189 = 0;
    v190 = (double *)&v189;
    v191 = 0x4012000000;
    v192 = sub_1BE867228;
    v193 = nullsub_44;
    v194 = &unk_1BE94989A;
    v195 = *v43;
    v92 = (void *)objc_opt_class();
    v183[0] = MEMORY[0x1E0C809B0];
    v183[1] = 3221225472;
    v183[2] = sub_1BE867238;
    v183[3] = &unk_1E77F6438;
    v187 = v45;
    v188 = v44;
    v184 = v169;
    v185 = &v196;
    v186 = &v189;
    objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(v92, v93, (uint64_t)v168, 0, 1, (uint64_t)v183);
    v197[3] = 0x7FEFFFFFFFFFFFFFLL;
    v176 = 0;
    v177 = (double *)&v176;
    v178 = 0x4012000000;
    v179 = sub_1BE867228;
    v180 = nullsub_44;
    v181 = &unk_1BE94989A;
    v182 = *v43;
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    obj = v46;
    v101 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v94, (uint64_t)&v172, (uint64_t)v204, 16, v95);
    if (v101)
    {
      v102 = *(_QWORD *)v173;
      do
      {
        for (j = 0; j != v101; ++j)
        {
          if (*(_QWORD *)v173 != v102)
            objc_enumerationMutation(obj);
          v104 = *(void **)(*((_QWORD *)&v172 + 1) + 8 * j);
          if (!v13)
            goto LABEL_20;
          objc_msgSend_encodedStrokeIdentifier(v13, v96, v97, v98, v99, v100);
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_substroke(v104, v106, v107, v108, v109, v110);
          v111 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIdentifier(v111, v112, v113, v114, v115, v116);
          v117 = (void *)objc_claimAutoreleasedReturnValue();
          isEqual = objc_msgSend_isEqual_(v105, v118, (uint64_t)v117, v119, v120, v121);

          if ((isEqual & 1) == 0)
          {
LABEL_20:
            objc_msgSend_strokeProvider(a1, v96, v97, v98, v99, v100);
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_substroke(v104, v124, v125, v126, v127, v128);
            v129 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_strokeIdentifier(v129, v130, v131, v132, v133, v134);
            v135 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_strokeIdentifierFromData_(v123, v136, (uint64_t)v135, v137, v138, v139);
            v140 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_strokeProvider(a1, v141, v142, v143, v144, v145);
            v146 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_strokeForIdentifier_(v146, v147, (uint64_t)v140, v148, v149, v150);
            v151 = objc_claimAutoreleasedReturnValue();

            v13 = (id)v151;
          }
          v152 = (void *)objc_opt_class();
          v171[0] = MEMORY[0x1E0C809B0];
          v171[1] = 3221225472;
          v171[2] = sub_1BE8672CC;
          v171[3] = &unk_1E77F6438;
          *(double *)&v171[7] = MidX;
          *(double *)&v171[8] = MidY;
          v171[4] = v104;
          v171[5] = &v196;
          v171[6] = &v176;
          objc_msgSend_enumeratePointsForStroke_interpolationType_resolution_usingBlock_(v152, v153, (uint64_t)v13, 0, 1, (uint64_t)v171);
        }
        v101 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v96, (uint64_t)&v172, (uint64_t)v204, 16, v100);
      }
      while (v101);
    }

    v165 = a7;
    v166 = a6;
    v154 = v190[6];
    v155 = v190[7];
    v156 = v177[6];
    v157 = v177[7];
    if ((unint64_t)objc_msgSend_count(obj, v158, v159, v160, v161, v162) <= 1)
      v163 = v165 * ((MidY - v44 + (v157 - v44 + MidY - v155 + (v155 - v157) * 2.0) * 0.25) * 0.5)
           + (MidX - v45 + (v156 - v45 + MidX - v154 + (v154 - v156) * 2.0) * 0.25) * 0.5 * v166;
    else
      v163 = (v165 * ((MidY - v44 + (v157 - v44 + MidY - v155 + (v155 - v157) * 2.0) * 0.25) * 0.5)
            + (MidX - v45 + (v156 - v45 + MidX - v154 + (v154 - v156) * 2.0) * 0.25) * 0.5 * v166)
           * 0.8;
    _Block_object_dispose(&v176, 8);

    _Block_object_dispose(&v189, 8);
    _Block_object_dispose(&v196, 8);
  }
  else
  {
    v163 = 0.0;
  }

  return v163;
}

void sub_1BE8665E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE866DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE867120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE86714C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE867168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE867180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE8671AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE867210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 sub_1BE867228(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_1BE867238(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  uint64_t result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;

  result = objc_msgSend_startTimestamp(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  if (v20 <= a9)
  {
    v21 = vabdd_f64(*(double *)(a1 + 56), a7) + vabdd_f64(*(double *)(a1 + 64), a8);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (v21 < *(double *)(v22 + 24))
    {
      *(double *)(v22 + 24) = v21;
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      *(double *)(v23 + 48) = a7;
      *(double *)(v23 + 56) = a8;
    }
    result = objc_msgSend_endTimestamp(*(void **)(a1 + 32), v15, v16, v17, v18, v19);
    *a2 = v24 <= a9;
  }
  return result;
}

void sub_1BE8672CC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  id v35;
  id v36;

  objc_msgSend_substroke(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v35 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_startTimestamp(v35, v14, v15, v16, v17, v18);
  v20 = v19;

  if (v20 <= a9)
  {
    v26 = vabdd_f64(*(double *)(a1 + 56), a7) + vabdd_f64(*(double *)(a1 + 64), a8);
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (v26 < *(double *)(v27 + 24))
    {
      *(double *)(v27 + 24) = v26;
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      *(double *)(v28 + 48) = a7;
      *(double *)(v28 + 56) = a8;
    }
    objc_msgSend_substroke(*(void **)(a1 + 32), v21, v22, v23, v24, v25);
    v36 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_endTimestamp(v36, v29, v30, v31, v32, v33);
    *a2 = v34 <= a9;

  }
}

void sub_1BE8673A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8673BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE867824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8678A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8678C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8678D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8678F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE86790C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE867A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE867A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE867A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE867A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE867AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE867AB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double MidX;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double MidY;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v5 = a2;
  v6 = a3;
  objc_msgSend_substroke(v5, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bounds(v12, v13, v14, v15, v16, v17);
  MidX = CGRectGetMidX(v57);
  objc_msgSend_substroke(v5, v19, v20, v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bounds(v24, v25, v26, v27, v28, v29);
  MidY = CGRectGetMidY(v58);

  objc_msgSend_substroke(v6, v31, v32, v33, v34, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bounds(v36, v37, v38, v39, v40, v41);
  v42 = CGRectGetMidX(v59);
  objc_msgSend_substroke(v6, v43, v44, v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bounds(v48, v49, v50, v51, v52, v53);
  v54 = CGRectGetMidY(v60);

  if ((v54 - MidY) * *(double *)(a1 + 40) + (v42 - MidX) * *(double *)(a1 + 32) <= 0.0)
    v55 = 1;
  else
    v55 = -1;

  return v55;
}

void sub_1BE867BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE867BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE867BDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE867BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE867C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8681F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE868208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE868218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE868D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  void *v44;
  void *v45;
  void *v46;

  if (__p)
  {
    operator delete(__p);
    v44 = a24;
    if (!a24)
    {
LABEL_3:
      v45 = a27;
      if (!a27)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v44 = a24;
    if (!a24)
      goto LABEL_3;
  }
  operator delete(v44);
  v45 = a27;
  if (!a27)
  {
LABEL_4:
    v46 = a30;
    if (!a30)
    {
LABEL_10:
      if (a42)
        operator delete(a42);

      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(v46);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v45);
  v46 = a30;
  if (!a30)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_1BE869340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  void *v32;
  void *v33;

  v32 = *(void **)a11;
  if (*(_QWORD *)a11)
  {
    *(_QWORD *)(a11 + 8) = v32;
    operator delete(v32);
    v33 = __p;
    if (!__p)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    v33 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v33);

  _Unwind_Resume(a1);
}

void sub_1BE86A568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  void *v31;
  void *v32;
  uint64_t v33;
  void *v35;

  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  if (a30)
  {
    operator delete(a30);
    v35 = *(void **)(v33 - 176);
    if (!v35)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    v35 = *(void **)(v33 - 176);
    if (!v35)
      goto LABEL_7;
  }
  *(_QWORD *)(v33 - 168) = v35;
  operator delete(v35);

  _Unwind_Resume(a1);
}

void sub_1BE86AE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1BE86C140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,void *a41,void *a42,void *a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,_QWORD *a61)
{
  void *v61;
  void *v62;

  if (__p)
    operator delete(__p);
  if (a57)
    operator delete(a57);

  sub_1BE671438(a61);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE86C3EC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;

  v4 = a2;
  v5 = a3;
  objc_msgSend_bounds(v4, v6, v7, v8, v9, v10);
  v12 = v11;
  objc_msgSend_bounds(v4, v13, v14, v15, v16, v17);
  v19 = v18;
  objc_msgSend_bounds(v5, v20, v21, v22, v23, v24);
  v26 = v25;
  objc_msgSend_bounds(v5, v27, v28, v29, v30, v31);
  if (v12 * v19 > v26 * v32)
    v33 = 1;
  else
    v33 = -1;

  return v33;
}

void sub_1BE86C47C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE86C490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE86C4A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE86C4B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE86C4CC(_QWORD *a1, void *a2, int a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  long double v18;
  double v19;
  long double v20;
  unint64_t v21;
  double v22;
  double v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v107[3];

  v107[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v11 = v5;
  if (a1)
  {
    objc_msgSend_averageWritingOrientation(v5, v6, v7, v8, v9, v10);
    v18 = v17;
    v20 = v19;
    v21 = 0;
    v22 = 0.0;
    v23 = 0.0;
    while (1)
    {
      objc_msgSend_writingDirectionSortedSubstrokes(v11, v12, v13, v14, v15, v16);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend_count(v24, v25, v26, v27, v28, v29);

      if (v21 >= v30)
        break;
      objc_msgSend_writingDirectionSortedSubstrokes(v11, v31, v32, v33, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v36, v37, v21, v38, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_writingOrientation(v41, v42, v43, v44, v45, v46);
      v48 = v47;
      v50 = v49;

      v22 = v22 + (v48 - v18) * (v48 - v18);
      v23 = v23 + (v50 - v20) * (v50 - v20);
      ++v21;
    }
    objc_msgSend_writingDirectionSortedSubstrokes(v11, v31, v32, v33, v34, v35);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = objc_msgSend_count(v51, v52, v53, v54, v55, v56);

    objc_msgSend_writingDirectionSortedSubstrokes(v11, v58, v59, v60, v61, v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = objc_msgSend_count(v63, v64, v65, v66, v67, v68);

    if (a3)
    {
      objc_msgSend_clippedWritingOrientation_(a1, v70, v71, v72, v73, v74, (double)v18, (double)v20);
      v18 = v75;
      v20 = v76;
    }
    v77 = atan2(v20, v18);
    objc_msgSend_writingDirectionSortedSubstrokes(v11, v78, v79, v80, v81, v82);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v89 = objc_msgSend_count(v83, v84, v85, v86, v87, v88);
    v90 = a1[12];

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v91, v92, v93, v94, v95, v77);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v107[0] = v96;
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v97, v98, v99, v100, v101, (double)(unint64_t)v89/ (double)v90/ (sqrt(sqrt(v22 / (double)(unint64_t)v57) + sqrt(v23 / (double)(unint64_t)v69)) + 1.0));
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v107[1] = v102;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v103, (uint64_t)v107, 2, v104, v105);
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();

  }
  return a1;
}

void sub_1BE86C708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE86C790(uint64_t *a1, double a2, double a3, double a4, uint64_t a5, void *a6)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t i;
  _QWORD *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  id v91;

  v91 = a6;
  objc_opt_self();
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  objc_msgSend_writingDirectionSortedSubstrokes(v91, v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_count(v15, v16, v17, v18, v19, v20);
  v22 = v21;
  v23 = (_BYTE *)*a1;
  if (v21 > (a1[2] - *a1) >> 5)
  {
    if (v21 >> 59)
      sub_1BE61F930();
    v24 = (_BYTE *)a1[1];
    v25 = (char *)operator new(32 * v21);
    v26 = &v25[(v24 - v23) & 0xFFFFFFFFFFFFFFE0];
    v27 = v26;
    if (v24 != v23)
    {
      v28 = &v25[(v24 - v23) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        v29 = *((_OWORD *)v24 - 1);
        v27 = v28 - 32;
        *((_OWORD *)v28 - 2) = *((_OWORD *)v24 - 2);
        *((_OWORD *)v28 - 1) = v29;
        v24 -= 32;
        v28 -= 32;
      }
      while (v24 != v23);
    }
    *a1 = (uint64_t)v27;
    a1[1] = (uint64_t)v26;
    a1[2] = (uint64_t)&v25[32 * v22];
    if (v23)
      operator delete(v23);
  }

  for (i = 0; ; ++i)
  {
    objc_msgSend_writingDirectionSortedSubstrokes(v91, v30, v31, v32, v33, v34);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend_count(v37, v38, v39, v40, v41, v42);

    if (i >= v43)
      break;
    v44 = (void *)objc_opt_class();
    objc_msgSend_writingDirectionSortedSubstrokes(v91, v45, v46, v47, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v50, v51, i, v52, v53, v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substroke(v55, v56, v57, v58, v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = objc_msgSend_convexHull(v61, v62, v63, v64, v65, v66);
    objc_msgSend_boundingBoxOfPoints_rotatedAroundPoint_byAngle_(v44, v68, v67, v69, v70, v71, a2, a3, a4);
    v73 = v72;
    v75 = v74;
    v77 = v76;
    v79 = v78;

    v81 = (_QWORD *)a1[1];
    v80 = a1[2];
    if ((unint64_t)v81 < v80)
    {
      *v81 = v73;
      v81[1] = v75;
      v36 = v81 + 4;
      v81[2] = v77;
      v81[3] = v79;
      goto LABEL_10;
    }
    v82 = (_QWORD *)*a1;
    v83 = ((uint64_t)v81 - *a1) >> 5;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 59)
      sub_1BE61F930();
    v85 = v80 - (_QWORD)v82;
    if (v85 >> 4 > v84)
      v84 = v85 >> 4;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFE0)
      v86 = 0x7FFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    if (v86)
    {
      if (v86 >> 59)
        sub_1BE61F100();
      v87 = (char *)operator new(32 * v86);
      v88 = &v87[32 * v83];
      *(_QWORD *)v88 = v73;
      *((_QWORD *)v88 + 1) = v75;
      *((_QWORD *)v88 + 2) = v77;
      *((_QWORD *)v88 + 3) = v79;
      v89 = (uint64_t)v88;
      if (v81 == v82)
      {
LABEL_22:
        v36 = v88 + 32;
        *a1 = v89;
        a1[1] = (uint64_t)(v88 + 32);
        a1[2] = (uint64_t)&v87[32 * v86];
        if (v81)
          goto LABEL_27;
        goto LABEL_10;
      }
    }
    else
    {
      v87 = 0;
      v88 = (char *)(32 * v83);
      *(_QWORD *)v88 = v73;
      *((_QWORD *)v88 + 1) = v75;
      *((_QWORD *)v88 + 2) = v77;
      *((_QWORD *)v88 + 3) = v79;
      v89 = 32 * v83;
      if (v81 == v82)
        goto LABEL_22;
    }
    do
    {
      v90 = *((_OWORD *)v81 - 1);
      *(_OWORD *)(v89 - 32) = *((_OWORD *)v81 - 2);
      *(_OWORD *)(v89 - 16) = v90;
      v89 -= 32;
      v81 -= 4;
    }
    while (v81 != v82);
    v81 = v82;
    v36 = v88 + 32;
    *a1 = v89;
    a1[1] = (uint64_t)(v88 + 32);
    a1[2] = (uint64_t)&v87[32 * v86];
    if (v81)
LABEL_27:
      operator delete(v81);
LABEL_10:
    a1[1] = (uint64_t)v36;
  }

}

void sub_1BE86CA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_1BE86D3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  void *v54;
  void *v55;
  void *v56;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE86D5F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a3;
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1BE86D670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE86D690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE86DC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  void *v56;
  void *v57;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE86DE44(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a3;
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1BE86DEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE86DEE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE86E29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);

  _Unwind_Resume(a1);
}

void sub_1BE86E3FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE86E410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE86E484(CGRect *a1, CGRect *a2, uint64_t a3, char a4)
{
  CGRect *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  CGRect *v12;
  uint64_t v13;
  CGSize v14;
  double v15;
  uint64_t v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  CGRect *v22;
  CGRect *v23;
  double v24;
  double v25;
  CGPoint *v26;
  CGSize v27;
  double v28;
  double v29;
  CGSize v30;
  BOOL v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double v36;
  double v37;
  CGRect *v38;
  double v39;
  CGFloat v40;
  CGRect *v41;
  double v42;
  CGSize v43;
  double v44;
  double v45;
  CGSize v46;
  CGRect *v47;
  double MaxX;
  CGSize v49;
  CGRect *v50;
  BOOL v52;
  uint64_t v53;
  CGRect *v54;
  CGFloat *v55;
  CGFloat *p_x;
  double v57;
  CGFloat v58;
  CGFloat y;
  CGFloat width;
  uint64_t v61;
  CGFloat height;
  char *v63;
  __int128 v64;
  double v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  CGRect *v70;
  double v71;
  CGRect *v72;
  double v73;
  CGFloat x;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  double v78;
  CGPoint *p_origin;
  CGSize v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  CGPoint *v85;
  _OWORD *v87;
  uint64_t v88;
  CGRect *v89;
  CGSize v90;
  CGPoint *v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  CGSize v95;
  uint64_t v96;
  unint64_t v97;
  CGRect *v98;
  double v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  CGPoint *v104;
  CGSize v105;
  double v106;
  _QWORD *v107;
  double v108;
  uint64_t v109;
  CGFloat v110;
  CGFloat v111;
  _OWORD *v112;
  CGFloat v113;
  CGFloat *v114;
  __int128 v115;
  uint64_t v116;
  CGFloat v117;
  CGFloat v118;
  double v119;
  CGRect *v120;
  CGPoint v121;
  CGPoint v122;
  CGPoint v123;
  CGPoint origin;
  CGPoint v125;
  CGSize v126;
  CGSize v127;
  CGSize v128;
  CGSize size;
  CGSize v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;

void sub_1BE86EE48(CGRect *a1, CGPoint *a2, CGPoint *a3, CGPoint *a4, CGPoint *a5)
{
  double MaxX;
  CGPoint v11;
  CGPoint v12;
  CGPoint v13;
  CGFloat y;
  double v15;
  CGPoint v16;
  CGPoint v17;
  CGPoint v18;
  CGFloat v19;
  double v20;
  CGPoint v21;
  CGPoint v22;
  CGPoint v23;
  CGFloat v24;
  double v25;
  CGSize size;
  CGPoint origin;
  CGSize v28;

  sub_1BE86F2A0(a1, a2, a3, a4);
  MaxX = CGRectGetMaxX(*(CGRect *)&a5->x);
  if (MaxX < CGRectGetMaxX(*(CGRect *)&a4->x))
  {
    v12 = *a4;
    v11 = a4[1];
    v13 = a5[1];
    *a4 = *a5;
    a4[1] = v13;
    *a5 = v12;
    a5[1] = v11;
    v11.x = a4->x;
    v12.x = a4->y;
    v13.x = a4[1].x;
    y = a4[1].y;
    v15 = CGRectGetMaxX(*(CGRect *)((char *)&v12 - 8));
    if (v15 < CGRectGetMaxX(*(CGRect *)&a3->x))
    {
      v17 = *a3;
      v16 = a3[1];
      v18 = a4[1];
      *a3 = *a4;
      a3[1] = v18;
      *a4 = v17;
      a4[1] = v16;
      v16.x = a3->x;
      v17.x = a3->y;
      v18.x = a3[1].x;
      v19 = a3[1].y;
      v20 = CGRectGetMaxX(*(CGRect *)((char *)&v17 - 8));
      if (v20 < CGRectGetMaxX(*(CGRect *)&a2->x))
      {
        v22 = *a2;
        v21 = a2[1];
        v23 = a3[1];
        *a2 = *a3;
        a2[1] = v23;
        *a3 = v22;
        a3[1] = v21;
        v21.x = a2->x;
        v22.x = a2->y;
        v23.x = a2[1].x;
        v24 = a2[1].y;
        v25 = CGRectGetMaxX(*(CGRect *)((char *)&v22 - 8));
        if (v25 < CGRectGetMaxX(*a1))
        {
          origin = a1->origin;
          size = a1->size;
          v28 = (CGSize)a2[1];
          a1->origin = *a2;
          a1->size = v28;
          *a2 = origin;
          a2[1] = (CGPoint)size;
        }
      }
    }
  }
}

void sub_1BE86EF68(CGRect *a1, CGPoint *a2, CGPoint *a3)
{
  double MaxX;
  double v7;
  double v8;
  double v9;
  CGSize v10;
  CGPoint v11;
  CGSize v12;
  CGPoint v13;
  CGPoint v14;
  CGPoint v15;
  CGFloat y;
  double v17;
  CGSize size;
  CGPoint origin;
  CGSize v20;
  CGSize v21;
  CGPoint v22;
  CGSize v23;
  CGFloat v24;
  double v25;
  CGPoint v26;

  MaxX = CGRectGetMaxX(*(CGRect *)&a2->x);
  v7 = CGRectGetMaxX(*a1);
  v8 = CGRectGetMaxX(*(CGRect *)&a3->x);
  v9 = CGRectGetMaxX(*(CGRect *)&a2->x);
  if (MaxX >= v7)
  {
    if (v8 < v9)
    {
      v14 = *a2;
      v13 = a2[1];
      v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      *a3 = v14;
      a3[1] = v13;
      v13.x = a2->x;
      v14.x = a2->y;
      v15.x = a2[1].x;
      y = a2[1].y;
      v17 = CGRectGetMaxX(*(CGRect *)((char *)&v14 - 8));
      if (v17 < CGRectGetMaxX(*a1))
      {
        origin = a1->origin;
        size = a1->size;
        v20 = (CGSize)a2[1];
        a1->origin = *a2;
        a1->size = v20;
        *a2 = origin;
        a2[1] = (CGPoint)size;
      }
    }
  }
  else
  {
    if (v8 >= v9)
    {
      v22 = a1->origin;
      v21 = a1->size;
      v23 = (CGSize)a2[1];
      a1->origin = *a2;
      a1->size = v23;
      *a2 = v22;
      a2[1] = (CGPoint)v21;
      v21.width = a3->x;
      v22.x = a3->y;
      v23.width = a3[1].x;
      v24 = a3[1].y;
      v25 = CGRectGetMaxX(*(CGRect *)((char *)&v22 - 8));
      if (v25 >= CGRectGetMaxX(*(CGRect *)&a2->x))
        return;
      v11 = *a2;
      v10 = (CGSize)a2[1];
      v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
    }
    else
    {
      v11 = a1->origin;
      v10 = a1->size;
      v12 = (CGSize)a3[1];
      a1->origin = *a3;
      a1->size = v12;
    }
    *a3 = v11;
    a3[1] = (CGPoint)v10;
  }
}

BOOL sub_1BE86F09C(__int128 *a1, CGRect *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  double MaxX;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CGRect *v11;
  CGRect *v12;
  uint64_t v13;
  int v14;
  double v15;
  CGFloat x;
  CGFloat y;
  uint64_t v18;
  CGFloat height;
  CGFloat width;
  uint64_t v21;
  __int128 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  CGRect v26;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)&a2[-1];
      MaxX = CGRectGetMaxX(a2[-1]);
      if (MaxX < CGRectGetMaxX(*(CGRect *)a1))
      {
        v9 = *a1;
        v8 = a1[1];
        v10 = v6[1];
        *a1 = *v6;
        a1[1] = v10;
        *v6 = v9;
        v6[1] = v8;
      }
      return 1;
    case 3:
      sub_1BE86EF68((CGRect *)a1, (CGPoint *)a1 + 2, &a2[-1].origin);
      return 1;
    case 4:
      sub_1BE86F2A0((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4, &a2[-1].origin);
      return 1;
    case 5:
      sub_1BE86EE48((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4, (CGPoint *)a1 + 6, &a2[-1].origin);
      return 1;
    default:
      v11 = (CGRect *)(a1 + 4);
      sub_1BE86EF68((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4);
      v12 = (CGRect *)(a1 + 6);
      if (a1 + 6 == (__int128 *)a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = CGRectGetMaxX(*v12);
    if (v15 < CGRectGetMaxX(*v11))
      break;
LABEL_13:
    v11 = v12;
    v13 += 32;
    if (++v12 == a2)
      return 1;
  }
  x = v12->origin.x;
  y = v12->origin.y;
  v18 = v13;
  width = v12->size.width;
  height = v12->size.height;
  do
  {
    v21 = (uint64_t)a1 + v18;
    v22 = *(__int128 *)((char *)a1 + v18 + 80);
    *(_OWORD *)(v21 + 96) = *(__int128 *)((char *)a1 + v18 + 64);
    *(_OWORD *)(v21 + 112) = v22;
    if (v18 == -64)
    {
      *(CGFloat *)a1 = x;
      *((CGFloat *)a1 + 1) = y;
      *((CGFloat *)a1 + 2) = width;
      *((CGFloat *)a1 + 3) = height;
      if (++v14 != 8)
        goto LABEL_13;
      return &v12[1] == a2;
    }
    v26.origin.x = x;
    v26.origin.y = y;
    v26.size.width = width;
    v26.size.height = height;
    v23 = CGRectGetMaxX(v26);
    v18 -= 32;
  }
  while (v23 < CGRectGetMaxX(*(CGRect *)(v21 + 32)));
  v24 = (uint64_t)a1 + v18;
  *(CGFloat *)(v24 + 96) = x;
  *(CGFloat *)(v24 + 104) = y;
  v25 = (uint64_t)a1 + v18 + 96;
  *(CGFloat *)(v25 + 16) = width;
  *(CGFloat *)(v25 + 24) = height;
  if (++v14 != 8)
    goto LABEL_13;
  return &v12[1] == a2;
}

void sub_1BE86F2A0(CGRect *a1, CGPoint *a2, CGPoint *a3, CGPoint *a4)
{
  double MaxX;
  CGPoint v9;
  CGPoint v10;
  CGPoint v11;
  CGFloat y;
  double v13;
  CGPoint v14;
  CGPoint v15;
  CGPoint v16;
  CGFloat v17;
  double v18;
  CGSize size;
  CGPoint origin;
  CGSize v21;

  sub_1BE86EF68(a1, a2, a3);
  MaxX = CGRectGetMaxX(*(CGRect *)&a4->x);
  if (MaxX < CGRectGetMaxX(*(CGRect *)&a3->x))
  {
    v10 = *a3;
    v9 = a3[1];
    v11 = a4[1];
    *a3 = *a4;
    a3[1] = v11;
    *a4 = v10;
    a4[1] = v9;
    v9.x = a3->x;
    v10.x = a3->y;
    v11.x = a3[1].x;
    y = a3[1].y;
    v13 = CGRectGetMaxX(*(CGRect *)((char *)&v10 - 8));
    if (v13 < CGRectGetMaxX(*(CGRect *)&a2->x))
    {
      v15 = *a2;
      v14 = a2[1];
      v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      *a3 = v15;
      a3[1] = v14;
      v14.x = a2->x;
      v15.x = a2->y;
      v16.x = a2[1].x;
      v17 = a2[1].y;
      v18 = CGRectGetMaxX(*(CGRect *)((char *)&v15 - 8));
      if (v18 < CGRectGetMaxX(*a1))
      {
        origin = a1->origin;
        size = a1->size;
        v21 = (CGSize)a2[1];
        a1->origin = *a2;
        a1->size = v21;
        *a2 = origin;
        a2[1] = (CGPoint)size;
      }
    }
  }
}

char ***sub_1BE86F380(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_1BE61F930();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_1BE61F100();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

uint64_t *sub_1BE86F490(uint64_t *result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  uint64_t v92;
  double v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  uint64_t v148;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v86 = *(a2 - 1);
        v87 = *v10;
        if (*(double *)(**a3 + 32 * v86) < *(double *)(**a3 + 32 * *v10))
        {
          *v10 = v86;
          goto LABEL_163;
        }
        return result;
      case 3:
        v88 = **a3;
        v87 = *v10;
        v89 = v10[1];
        v90 = *(double *)(v88 + 32 * v89);
        v91 = *(double *)(v88 + 32 * *v10);
        v92 = *(a2 - 1);
        v93 = *(double *)(v88 + 32 * v92);
        if (v90 >= v91)
        {
          if (v93 < v90)
          {
            v10[1] = v92;
            *(a2 - 1) = v89;
            v103 = *v10;
            v99 = v10[1];
            v101 = *(double *)(v88 + 32 * v99);
            goto LABEL_152;
          }
        }
        else
        {
          if (v93 >= v90)
          {
            *v10 = v89;
            v10[1] = v87;
            v148 = *(a2 - 1);
            if (*(double *)(v88 + 32 * v148) >= v91)
              return result;
            v10[1] = v148;
          }
          else
          {
            *v10 = v92;
          }
LABEL_163:
          *(a2 - 1) = v87;
        }
        return result;
      case 4:
        return sub_1BE87038C(v10, v10 + 1, v10 + 2, a2 - 1, **a3);
      case 5:
        v94 = v10 + 1;
        v95 = v10 + 2;
        v96 = v10 + 3;
        result = sub_1BE87038C(v9, v9 + 1, v9 + 2, v9 + 3, **a3);
        v97 = *(a2 - 1);
        v98 = v9[3];
        v88 = **a3;
        if (*(double *)(v88 + 32 * v97) < *(double *)(v88 + 32 * v98))
        {
          *v96 = v97;
          *(a2 - 1) = v98;
          v99 = *v96;
          v100 = *v95;
          v101 = *(double *)(v88 + 32 * *v96);
          if (v101 < *(double *)(v88 + 32 * *v95))
          {
            *v95 = v99;
            *v96 = v100;
            v102 = *v94;
            if (v101 < *(double *)(v88 + 32 * *v94))
            {
              v9[1] = v99;
              v9[2] = v102;
              v103 = *v9;
LABEL_152:
              if (v101 < *(double *)(v88 + 32 * v103))
              {
                *v9 = v99;
                v9[1] = v103;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v115 = (unint64_t)(v12 - 2) >> 1;
              v116 = v115;
              do
              {
                if (v115 >= v116)
                {
                  v118 = (2 * v116) | 1;
                  v119 = &v10[v118];
                  v120 = **a3;
                  if (2 * v116 + 2 < v12 && *(double *)(v120 + 32 * *v119) < *(double *)(v120 + 32 * v119[1]))
                  {
                    ++v119;
                    v118 = 2 * v116 + 2;
                  }
                  result = &v10[v116];
                  v121 = *v119;
                  v122 = *result;
                  v123 = *(double *)(v120 + 32 * *result);
                  if (*(double *)(v120 + 32 * *v119) >= v123)
                  {
                    do
                    {
                      v124 = v119;
                      *result = v121;
                      if (v115 < v118)
                        break;
                      v125 = 2 * v118;
                      v118 = (2 * v118) | 1;
                      v119 = &v10[v118];
                      v126 = v125 + 2;
                      if (v126 < v12 && *(double *)(v120 + 32 * *v119) < *(double *)(v120 + 32 * v119[1]))
                      {
                        ++v119;
                        v118 = v126;
                      }
                      v121 = *v119;
                      result = v124;
                    }
                    while (*(double *)(v120 + 32 * *v119) >= v123);
                    *v124 = v122;
                  }
                }
                v117 = v116-- <= 0;
              }
              while (!v117);
              v127 = (unint64_t)v11 >> 3;
              do
              {
                v128 = 0;
                v129 = *v10;
                v130 = *a3;
                v131 = v10;
                do
                {
                  v132 = v131;
                  v131 += v128 + 1;
                  v133 = 2 * v128;
                  v128 = (2 * v128) | 1;
                  v134 = v133 + 2;
                  if (v134 < v127)
                  {
                    result = (uint64_t *)v131[1];
                    if (*(double *)(*v130 + 32 * *v131) < *(double *)(*v130 + 32 * (_QWORD)result))
                    {
                      ++v131;
                      v128 = v134;
                    }
                  }
                  *v132 = *v131;
                }
                while (v128 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
                if (v131 == --a2)
                {
                  *v131 = v129;
                }
                else
                {
                  *v131 = *a2;
                  *a2 = v129;
                  v135 = (char *)v131 - (char *)v10 + 8;
                  if (v135 >= 9)
                  {
                    v136 = (((unint64_t)v135 >> 3) - 2) >> 1;
                    v137 = &v10[v136];
                    v138 = *v137;
                    v139 = *v131;
                    v140 = **a3;
                    v141 = *(double *)(v140 + 32 * *v131);
                    if (*(double *)(v140 + 32 * *v137) < v141)
                    {
                      do
                      {
                        v142 = v137;
                        *v131 = v138;
                        if (!v136)
                          break;
                        v136 = (v136 - 1) >> 1;
                        v137 = &v10[v136];
                        v138 = *v137;
                        v131 = v142;
                      }
                      while (*(double *)(v140 + 32 * *v137) < v141);
                      *v142 = v139;
                    }
                  }
                }
                v117 = v127-- <= 2;
              }
              while (!v117);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(double *)(v15 + 32 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(double *)(v15 + 32 * *v10);
            v25 = *(double *)(v15 + 32 * *v14);
            if (v24 >= v25)
            {
              if (v17 < v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(double *)(v15 + 32 * *v10) < *(double *)(v15 + 32 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  v29 = 32 * v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v17 >= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v41 = *(a2 - 1);
              if (*(double *)(v15 + 32 * v41) >= v25)
                goto LABEL_32;
              *v10 = v41;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            v29 = 32 * *v10;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(double *)(v15 + 32 * *v14);
          v21 = *(double *)(v15 + 32 * *v10);
          if (v20 >= v21)
          {
            if (v17 < v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(double *)(v15 + 32 * *v14) < *(double *)(v15 + 32 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 >= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v30 = *(a2 - 1);
              if (*(double *)(v15 + 32 * v30) >= v21)
                goto LABEL_23;
              *v14 = v30;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v31 = &v10[v13];
          v34 = *(v31 - 1);
          v32 = v31 - 1;
          v33 = v34;
          v35 = v10[1];
          v36 = *(double *)(v15 + 32 * v34);
          v37 = *(double *)(v15 + 32 * v35);
          v38 = *(a2 - 2);
          v39 = *(double *)(v15 + 32 * v38);
          if (v36 >= v37)
          {
            if (v39 < v36)
            {
              *v32 = v38;
              *(a2 - 2) = v33;
              v40 = v10[1];
              if (*(double *)(v15 + 32 * *v32) < *(double *)(v15 + 32 * v40))
              {
                v10[1] = *v32;
                *v32 = v40;
              }
            }
          }
          else
          {
            if (v39 >= v36)
            {
              v10[1] = v33;
              *v32 = v35;
              v42 = *(a2 - 2);
              if (*(double *)(v15 + 32 * v42) >= v37)
                goto LABEL_37;
              *v32 = v42;
            }
            else
            {
              v10[1] = v38;
            }
            *(a2 - 2) = v35;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(double *)(v15 + 32 * v46);
          v49 = *(double *)(v15 + 32 * v47);
          v50 = *(a2 - 3);
          v51 = *(double *)(v15 + 32 * v50);
          if (v48 >= v49)
          {
            if (v51 < v48)
            {
              *v44 = v50;
              *(a2 - 3) = v45;
              v52 = v10[2];
              if (*(double *)(v15 + 32 * *v44) < *(double *)(v15 + 32 * v52))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 >= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *(a2 - 3);
              if (*(double *)(v15 + 32 * v53) >= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *(a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v32;
          v56 = *(double *)(v15 + 32 * *v14);
          v57 = *(double *)(v15 + 32 * *v32);
          v58 = *v44;
          v59 = *(double *)(v15 + 32 * *v44);
          if (v56 < v57)
          {
            if (v59 >= v56)
            {
              *v32 = v54;
              *v14 = v55;
              v32 = v14;
              v54 = v58;
              if (v59 >= v57)
              {
                v54 = v55;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v32 = v58;
            *v44 = v55;
            goto LABEL_53;
          }
          if (v59 >= v56)
            goto LABEL_53;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 < v57)
            goto LABEL_52;
          v54 = v58;
LABEL_53:
          v60 = *v10;
          *v10 = v54;
          *v14 = v60;
          --a4;
          v28 = *v10;
          v29 = 32 * *v10;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          v61 = *(double *)(v15 + v29);
          if (*(double *)(v15 + 32 * *(v10 - 1)) >= v61)
          {
            if (v61 >= *(double *)(v15 + 32 * *(a2 - 1)))
            {
              v78 = v10 + 1;
              do
              {
                v10 = v78;
                if (v78 >= a2)
                  break;
                ++v78;
              }
              while (v61 >= *(double *)(v15 + 32 * *v10));
            }
            else
            {
              do
              {
                v77 = v10[1];
                ++v10;
              }
              while (v61 >= *(double *)(v15 + 32 * v77));
            }
            v79 = a2;
            if (v10 < a2)
            {
              v79 = a2;
              do
                v80 = *--v79;
              while (v61 < *(double *)(v15 + 32 * v80));
            }
            if (v10 < v79)
            {
              v81 = *v10;
              v82 = *v79;
              do
              {
                *v10 = v82;
                *v79 = v81;
                do
                {
                  v83 = v10[1];
                  ++v10;
                  v81 = v83;
                }
                while (v61 >= *(double *)(v15 + 32 * v83));
                do
                {
                  v84 = *--v79;
                  v82 = v84;
                }
                while (v61 < *(double *)(v15 + 32 * v84));
              }
              while (v10 < v79);
            }
            v85 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v85;
            a5 = 0;
            *v85 = v28;
            continue;
          }
LABEL_55:
          v62 = 0;
          v63 = **a3;
          v64 = *(double *)(v63 + v29);
          do
            v65 = v10[++v62];
          while (*(double *)(v63 + 32 * v65) < v64);
          v66 = &v10[v62];
          v67 = a2;
          if (v62 == 1)
          {
            v67 = a2;
            do
            {
              if (v66 >= v67)
                break;
              v69 = *--v67;
            }
            while (*(double *)(v63 + 32 * v69) >= v64);
          }
          else
          {
            do
              v68 = *--v67;
            while (*(double *)(v63 + 32 * v68) >= v64);
          }
          if (v66 < v67)
          {
            v70 = *v67;
            v71 = &v10[v62];
            v72 = v67;
            do
            {
              *v71 = v70;
              *v72 = v65;
              do
              {
                v73 = v71[1];
                ++v71;
                v65 = v73;
              }
              while (*(double *)(v63 + 32 * v73) < v64);
              do
              {
                v74 = *--v72;
                v70 = v74;
              }
              while (*(double *)(v63 + 32 * v74) >= v64);
            }
            while (v71 < v72);
            v75 = v71 - 1;
            if (v71 - 1 == v10)
              goto LABEL_73;
LABEL_72:
            *v10 = *v75;
            goto LABEL_73;
          }
          v75 = v66 - 1;
          if (v66 - 1 != v10)
            goto LABEL_72;
LABEL_73:
          *v75 = v28;
          if (v66 < v67)
            goto LABEL_76;
          v76 = sub_1BE86FFC8(v10, v75, a3);
          v10 = v75 + 1;
          result = (uint64_t *)sub_1BE86FFC8(v75 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v76)
              continue;
LABEL_76:
            result = (uint64_t *)sub_1BE86F490(v9, v75, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v75 + 1;
            continue;
          }
          a2 = v75;
          if (v76)
            return result;
          goto LABEL_2;
        }
        v104 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v105 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v106 = *v104;
              v107 = 8;
              v108 = v10;
              do
              {
                v111 = *v108;
                v110 = v108[1];
                v108 = v105;
                v112 = *(double *)(v106 + 32 * v110);
                if (v112 < *(double *)(v106 + 32 * v111))
                {
                  v113 = v107;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v113) = v111;
                    v114 = v113 - 8;
                    if (v113 == 8)
                    {
                      v109 = v10;
                      goto LABEL_114;
                    }
                    v111 = *(uint64_t *)((char *)v10 + v113 - 16);
                    v113 -= 8;
                  }
                  while (v112 < *(double *)(v106 + 32 * v111));
                  v109 = (uint64_t *)((char *)v10 + v114);
LABEL_114:
                  *v109 = v110;
                }
                v105 = v108 + 1;
                v107 += 8;
              }
              while (v108 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v143 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v144 = *v104;
            do
            {
              v146 = *v9;
              v145 = v9[1];
              v9 = v143;
              v147 = *(double *)(v144 + 32 * v145);
              if (v147 < *(double *)(v144 + 32 * v146))
              {
                do
                {
                  *v143 = v146;
                  v146 = *(v143 - 2);
                  --v143;
                }
                while (v147 < *(double *)(v144 + 32 * v146));
                *v143 = v145;
              }
              v143 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_1BE86FFC8(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(double *)(**a3 + 32 * v8) < *(double *)(**a3 + 32 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = **a3;
      v11 = *a1;
      v12 = a1[1];
      v13 = *(double *)(v10 + 32 * v12);
      v14 = *(double *)(v10 + 32 * *a1);
      v15 = *(a2 - 1);
      v16 = *(double *)(v10 + 32 * v15);
      if (v13 >= v14)
      {
        if (v16 < v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          v39 = *a1;
          v38 = a1[1];
          if (*(double *)(v10 + 32 * v38) < *(double *)(v10 + 32 * *a1))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 >= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v48 = *(a2 - 1);
        if (*(double *)(v10 + 32 * v48) < v14)
        {
          a1[1] = v48;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      sub_1BE87038C(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      sub_1BE87038C(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = **a3;
      if (*(double *)(v32 + 32 * v30) >= *(double *)(v32 + 32 * v31))
        return 1;
      *v29 = v30;
      *(a2 - 1) = v31;
      v33 = *v29;
      v34 = *v28;
      v35 = *(double *)(v32 + 32 * *v29);
      if (v35 >= *(double *)(v32 + 32 * *v28))
        return 1;
      *v28 = v33;
      *v29 = v34;
      v36 = *v27;
      if (v35 >= *(double *)(v32 + 32 * *v27))
        return 1;
      a1[1] = v33;
      a1[2] = v36;
      v37 = *a1;
      if (v35 >= *(double *)(v32 + 32 * *a1))
        return 1;
      *a1 = v33;
      a1[1] = v37;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = **a3;
      v21 = *a1;
      v22 = *(double *)(v20 + 32 * v19);
      v23 = *(double *)(v20 + 32 * *a1);
      v24 = *(double *)(v20 + 32 * v17);
      if (v22 < v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 >= v22)
        {
          *a1 = v19;
          a1[1] = v21;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 >= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v21;
        goto LABEL_25;
      }
      if (v24 < v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 < v23)
          goto LABEL_24;
      }
LABEL_25:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v43 = *v40;
        v44 = *v18;
        v45 = *(double *)(v20 + 32 * *v40);
        if (v45 < *(double *)(v20 + 32 * v44))
          break;
LABEL_34:
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      v46 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v46) = v44;
        v47 = v46 - 8;
        if (v46 == 8)
        {
          *a1 = v43;
          if (++v41 != 8)
            goto LABEL_34;
          return v40 + 1 == a2;
        }
        v44 = *(uint64_t *)((char *)a1 + v46 - 16);
        v46 -= 8;
      }
      while (v45 < *(double *)(v20 + 32 * v44));
      *(uint64_t *)((char *)a1 + v47) = v43;
      if (++v41 != 8)
        goto LABEL_34;
      return v40 + 1 == a2;
  }
}

uint64_t *sub_1BE87038C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(double *)(a5 + 32 * *a2);
  v8 = *(double *)(a5 + 32 * *result);
  v9 = *a3;
  v10 = *(double *)(a5 + 32 * *a3);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(double *)(a5 + 32 * *a2) < *(double *)(a5 + 32 * *result))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(double *)(a5 + 32 * *a3) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(double *)(a5 + 32 * *a4) < *(double *)(a5 + 32 * v5))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(double *)(a5 + 32 * *a3) < *(double *)(a5 + 32 * *a2))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(double *)(a5 + 32 * *a2) < *(double *)(a5 + 32 * *result))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void sub_1BE870574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE8705AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8706B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE870920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE870B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE870CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE870D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE871064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE8713D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8714D4(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  if (a1)
  {
    v9 = *(void **)(a1 + 56);
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v5, a3, v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v9, v11, (uint64_t)v10, (uint64_t)v14, v12, v13);

  }
}

void sub_1BE871544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE87155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE871570(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;

  v5 = a2;
  if (a1)
  {
    v11 = *(void **)(a1 + 80);
    v49 = v5;
    objc_msgSend_encodedStrokeIdentifier(v5, v6, v7, v8, v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v11, v13, (uint64_t)v12, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
    {
      v22 = (void *)objc_opt_class();
      objc_msgSend_substrokesForStroke_(v22, v23, (uint64_t)v49, v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = *(void **)(a1 + 80);
      objc_msgSend_encodedStrokeIdentifier(v49, v29, v30, v31, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKey_(v28, v35, (uint64_t)v27, (uint64_t)v34, v36, v37);

    }
    v38 = *(void **)(a1 + 56);
    objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v18, a3, v19, v20, v21);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_encodedStrokeIdentifier(v49, v40, v41, v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v38, v46, (uint64_t)v39, (uint64_t)v45, v47, v48);

    v5 = v49;
  }

}

void sub_1BE871688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE8716A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8716BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8716D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE8716F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE87170C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE871720(_QWORD *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  int v70;
  void *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  v14 = v8;
  if (a1)
  {
    if (v8)
    {
      v15 = (void *)a1[10];
      objc_msgSend_encodedStrokeIdentifier(v7, v9, v10, v11, v12, v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKey_(v15, v17, (uint64_t)v16, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v21)
      {
        v26 = (void *)objc_opt_class();
        objc_msgSend_substrokesForStroke_(v26, v27, (uint64_t)v7, v28, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = (void *)a1[10];
        objc_msgSend_encodedStrokeIdentifier(v7, v33, v34, v35, v36, v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKey_(v32, v39, (uint64_t)v31, (uint64_t)v38, v40, v41);

      }
      v42 = (void *)a1[8];
      objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v22, a3, v23, v24, v25);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_encodedStrokeIdentifier(v7, v44, v45, v46, v47, v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKey_(v42, v50, (uint64_t)v43, (uint64_t)v49, v51, v52);

      v53 = (void *)a1[9];
      objc_msgSend_encodedStrokeIdentifier(v7, v54, v55, v56, v57, v58);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKey_(v53, v60, (uint64_t)v14, (uint64_t)v59, v61, v62);

    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v63 = (id)qword_1EF568E78;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_description(v7, v64, v65, v66, v67, v68);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v70 = 138412290;
        v71 = v69;
        _os_log_impl(&dword_1BE607000, v63, OS_LOG_TYPE_ERROR, "Error: trying to set a nil object as scriptClassificationRawResult for added stroke %@", (uint8_t *)&v70, 0xCu);

      }
    }
  }

}

void sub_1BE871948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8719AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8719C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8719E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8719F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE871B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE871B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE871B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE871B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE871B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE871B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE871D08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8723D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE873444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE8751F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,void *a40)
{
  _QWORD *v41;
  _QWORD *v42;
  void *v43;

  v41 = (_QWORD *)STACK[0x300];
  if (STACK[0x300])
  {
    do
    {
      v42 = (_QWORD *)*v41;
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
  v43 = (void *)STACK[0x2F0];
  STACK[0x2F0] = 0;
  if (v43)
    operator delete(v43);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE875840(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = a2;
  v6 = a3;
  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v5, v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v6, v19, v20, v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v12, v25, (uint64_t)v18, (uint64_t)v24, v26, v27);

  return v28;
}

void sub_1BE8758DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE87590C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8768DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE876BFC(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t (**v36)(_QWORD, _QWORD, _QWORD);
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  id v80;
  id v81;
  id v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[4];
  id v92;
  _BYTE v93[128];
  _BYTE v94[128];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v82 = a2;
  v81 = a3;
  v80 = a4;
  if (a1)
  {
    v7 = (void *)objc_opt_class();
    objc_msgSend_bounds(v82, v8, v9, v10, v11, v12);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;
    objc_msgSend_bounds(v81, v21, v22, v23, v24, v25);
    objc_msgSend_distanceFromRectangle_toRectangle_(v7, v26, v27, v28, v29, v30, v14, v16, v18, v20, v31, v32, v33, v34);
    if (v35 > 1.0)
    {
      a1 = 0;
      goto LABEL_23;
    }
    v91[0] = MEMORY[0x1E0C809B0];
    v91[1] = 3221225472;
    v91[2] = sub_1BE8771D8;
    v91[3] = &unk_1E77F6480;
    v92 = v80;
    v36 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1C3B81A84](v91);
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    objc_msgSend_strokeIdentifiers(v81, v37, v38, v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v43, (uint64_t)&v87, (uint64_t)v94, 16, v44);
    if (v50)
    {
      v51 = *(_QWORD *)v88;
LABEL_6:
      v52 = 0;
      while (1)
      {
        if (*(_QWORD *)v88 != v51)
          objc_enumerationMutation(v42);
        v53 = *(_QWORD *)(*((_QWORD *)&v87 + 1) + 8 * v52);
        objc_msgSend_strokeProvider((void *)a1, v45, v46, v47, v48, v49);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, v55, v53, (uint64_t)v54, v56, v57);
        v58 = (void *)objc_claimAutoreleasedReturnValue();

        if ((((uint64_t (**)(_QWORD, void *, id))v36)[2](v36, v58, v82) & 1) != 0)
          break;

        if (v50 == ++v52)
        {
          v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v45, (uint64_t)&v87, (uint64_t)v94, 16, v49);
          if (v50)
            goto LABEL_6;
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:

      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      objc_msgSend_strokeIdentifiers(v82, v59, v60, v61, v62, v63);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v64, (uint64_t)&v83, (uint64_t)v93, 16, v65);
      if (!v71)
      {
LABEL_20:
        a1 = 0;
LABEL_22:

        goto LABEL_23;
      }
      v72 = *(_QWORD *)v84;
LABEL_14:
      v73 = 0;
      while (1)
      {
        if (*(_QWORD *)v84 != v72)
          objc_enumerationMutation(v42);
        v74 = *(_QWORD *)(*((_QWORD *)&v83 + 1) + 8 * v73);
        objc_msgSend_strokeProvider((void *)a1, v66, v67, v68, v69, v70);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, v76, v74, (uint64_t)v75, v77, v78);
        v58 = (void *)objc_claimAutoreleasedReturnValue();

        if ((((uint64_t (**)(_QWORD, void *, id))v36)[2](v36, v58, v81) & 1) != 0)
          break;

        if (v71 == ++v73)
        {
          v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v66, (uint64_t)&v83, (uint64_t)v93, 16, v70);
          if (v71)
            goto LABEL_14;
          goto LABEL_20;
        }
      }
    }

    a1 = 1;
    goto LABEL_22;
  }
LABEL_23:

  return a1;
}

void sub_1BE876F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE876FDC(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  objc_msgSend_strokeIdentifiers(v6, v8, v9, v10, v11, v12, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v49, (uint64_t)v53, 16, v15);
  if (v21)
  {
    v22 = *(_QWORD *)v50;
    while (2)
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v50 != v22)
          objc_enumerationMutation(v13);
        v24 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * v23);
        objc_msgSend_scriptClassificationRawResultsByStrokeIdentifier(v7, v16, v17, v18, v19, v20);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v25, v26, v24, v27, v28, v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_orderedScriptClassification(v30, v31, v32, v33, v34, v35);
        v36 = objc_claimAutoreleasedReturnValue();
        objc_msgSend_firstObject((void *)v36, v37, v38, v39, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();

        LOBYTE(v36) = objc_msgSend_containsObject_(v5, v43, (uint64_t)v42, v44, v45, v46);
        if ((v36 & 1) == 0)
        {
          v47 = 0;
          goto LABEL_11;
        }
        ++v23;
      }
      while (v21 != v23);
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v49, (uint64_t)v53, 16, v20);
      if (v21)
        continue;
      break;
    }
  }
  v47 = 1;
LABEL_11:

  return v47;
}

void sub_1BE877170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8771D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  void *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  const char *v99;
  uint64_t v100;
  double v101;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[128];
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_opt_class();
  objc_msgSend_bounds(v5, v8, v9, v10, v11, v12);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  objc_msgSend_bounds(v6, v21, v22, v23, v24, v25);
  objc_msgSend_distanceFromRectangle_toRectangle_(v7, v26, v27, v28, v29, v30, v14, v16, v18, v20, v31, v32, v33, v34);
  if (v40 <= 1.0)
  {
    v42 = *(void **)(a1 + 32);
    if (!v42)
      goto LABEL_5;
    objc_msgSend_substrokesByStrokeIdentifier(v42, v35, v36, v37, v38, v39);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_encodedStrokeIdentifier(v5, v44, v45, v46, v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKey_(v43, v50, (uint64_t)v49, v51, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v54)
    {
LABEL_5:
      v60 = (void *)objc_opt_class();
      objc_msgSend_substrokesForStroke_(v60, v61, (uint64_t)v5, v62, v63, v64);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if ((unint64_t)objc_msgSend_count(v54, v55, v56, v57, v58, v59) >= 2)
    {
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v65 = v54;
      v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v66, (uint64_t)&v103, (uint64_t)v107, 16, v67);
      if (v41)
      {
        v68 = *(_QWORD *)v104;
        while (2)
        {
          for (i = 0; i != v41; ++i)
          {
            if (*(_QWORD *)v104 != v68)
              objc_enumerationMutation(v65);
            v70 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * i);
            v71 = (void *)objc_opt_class();
            objc_msgSend_bounds(v70, v72, v73, v74, v75, v76, (_QWORD)v103);
            v78 = v77;
            v80 = v79;
            v82 = v81;
            v84 = v83;
            objc_msgSend_bounds(v6, v85, v86, v87, v88, v89);
            objc_msgSend_distanceFromRectangle_toRectangle_(v71, v90, v91, v92, v93, v94, v78, v80, v82, v84, v95, v96, v97, v98);
            if (v101 <= 1.0)
            {
              v41 = 1;
              goto LABEL_18;
            }
          }
          v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v65, v99, (uint64_t)&v103, (uint64_t)v107, 16, v100);
          if (v41)
            continue;
          break;
        }
      }
LABEL_18:

    }
    else
    {
      v41 = 1;
    }

  }
  else
  {
    v41 = 0;
  }

  return v41;
}

void sub_1BE877460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8776CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;

  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1BE877724(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE877748(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE877760(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  v9 = (double *)v5[6];
  v10 = ((char *)v7 - (char *)v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_1BE61F100();
    v14 = (char *)operator new(16 * v13);
    v15 = (double *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = a2;
    v15[1] = a3;
    v8 = (uint64_t)(v15 + 2);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (double *)(16 * v10);
  v16 = 0;
  *v15 = a2;
  v15[1] = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[7] = v8;
}

void sub_1BE877FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8780E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE8780F8(uint64_t a1)
{

}

void sub_1BE878100(uint64_t a1, void *a2, void *a3)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v6 = a3;
  if (objc_msgSend_compare_(v6, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v8, v9, v10) == 1)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
  }

}

void sub_1BE87818C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8781EC(uint64_t a1, double a2, double a3)
{
  double v3;
  double v6;
  unint64_t v7;
  uint8x8_t v8;
  double **v9;
  double *v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double **v25;
  unint64_t v26;

  if (a2 == 0.0)
    v6 = 0.0;
  else
    v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (*(_QWORD *)&v6 >= v7)
        *(_QWORD *)&v3 = *(_QWORD *)&v6 % v7;
    }
    else
    {
      *(_QWORD *)&v3 = (v7 - 1) & *(_QWORD *)&v6;
    }
    v9 = *(double ***)(*(_QWORD *)a1 + 8 * *(_QWORD *)&v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == *(_QWORD *)&v6)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != *(_QWORD *)&v3)
            {
              goto LABEL_25;
            }
            v10 = *(double **)v10;
            if (!v10)
              goto LABEL_25;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == *(_QWORD *)&v6)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != *(_QWORD *)&v3)
              break;
          }
          v10 = *(double **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_25:
  v13 = (double *)operator new(0x18uLL);
  *v13 = 0.0;
  v13[1] = v6;
  v13[2] = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
    goto LABEL_53;
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v7)
    goto LABEL_37;
  if (prime < v7)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v20);
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
    }
    if (prime <= v20)
      prime = v20;
    if (prime < v7)
LABEL_37:
      sub_1BE61F23C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (*(_QWORD *)&v6 >= v7)
    {
      *(_QWORD *)&v3 = *(_QWORD *)&v6 % v7;
      v24 = *(_QWORD *)a1;
      v25 = *(double ***)(*(_QWORD *)a1 + 8 * (*(_QWORD *)&v6 % v7));
      if (!v25)
        goto LABEL_56;
LABEL_54:
      *(_QWORD *)v13 = *v25;
LABEL_62:
      *v25 = v13;
      goto LABEL_63;
    }
    v3 = v6;
LABEL_53:
    v24 = *(_QWORD *)a1;
    v25 = *(double ***)(*(_QWORD *)a1 + 8 * *(_QWORD *)&v3);
    if (!v25)
      goto LABEL_56;
    goto LABEL_54;
  }
  *(_QWORD *)&v3 = v23 & *(_QWORD *)&v6;
  v24 = *(_QWORD *)a1;
  v25 = *(double ***)(*(_QWORD *)a1 + 8 * (v23 & *(_QWORD *)&v6));
  if (v25)
    goto LABEL_54;
LABEL_56:
  *v13 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * *(_QWORD *)&v3) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (double **)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_62;
  }
LABEL_63:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BE8784CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE878554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSynthesizedData(CoreHandwriting::synthesis::fast_path *this@<X0>, CHDrawing *a2@<X1>, float a3@<S0>, float a4@<S1>, int a5@<W2>, CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *a6@<X8>)
{
  int v7;
  CoreHandwriting::synthesis::fast_path *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  double v19;
  double v20;
  float MinY;
  float v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  double MaxY;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  double *v49;
  double v50;
  double v51;
  id v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  double v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  CHDrawing *v72;
  void *v73[3];
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  char *v81;
  void *v82;
  char *v83;
  void *v84;
  char *v85;
  void *v86;
  char *v87;
  void *v88[2];
  void *__p[2];
  __int128 v90;
  void *v91[2];
  void *v92[2];
  __int128 v93;
  CGRect v94;
  CGRect v95;

  v7 = (int)a2;
  v11 = this;
  *(_OWORD *)v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  *(_OWORD *)v91 = 0u;
  *(_OWORD *)v88 = 0u;
  *(_OWORD *)__p = 0u;
  v17 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v18 = 0;
  v19 = a3;
  v20 = a4;
  MinY = 3.4028e38;
  v22 = -3.4028e38;
  while (v18 < objc_msgSend_strokeCount(v11, v12, v13, v14, v15, v16))
  {
    objc_msgSend_boundsForStrokeIndex_(v11, v23, v18, v24, v25, v26);
    if (v27 >= v19)
    {
      if (v27 < v20)
      {
        MinY = fmin(MinY, v28);
        v22 = fmax(v22, v28 + v29);
      }
      ++v18;
    }
    else
    {
      objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, v18, v14, v15, v16);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v17, v31, (uint64_t)v30, v32, v33, v34);

      ++v18;
    }
  }
  objc_msgSend_drawingWithStrokesFromIndexArray_(v11, v23, (uint64_t)v17, v24, v25, v26);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = v35;
  if (v22 < MinY)
  {
    objc_msgSend_bounds(v35, v36, v37, v38, v39, v40);
    MaxY = CGRectGetMaxY(v94);
    objc_msgSend_bounds(v41, v43, v44, v45, v46, v47);
    v22 = MaxY;
    MinY = CGRectGetMinY(v95);
  }
  v48 = (double *)operator new(0x20uLL);
  *v48 = 0.0;
  v48[1] = v22;
  v48[2] = 1.0;
  v48[3] = v22;
  if (__p[1])
    operator delete(__p[1]);
  __p[1] = v48;
  *(_QWORD *)&v90 = v48 + 4;
  *((_QWORD *)&v90 + 1) = v48 + 4;
  v49 = (double *)operator new(0x20uLL);
  *v49 = 0.0;
  v49[1] = MinY;
  v49[2] = 1.0;
  v49[3] = MinY;
  if (v91[0])
    operator delete(v91[0]);
  v91[0] = v49;
  v91[1] = v49 + 4;
  v92[0] = v49 + 4;
  sub_1BE76136C(v73, (uint64_t)v88);
  sub_1BE878A28(&v80, v73, v7, v41);
  sub_1BE6F5A88(v88, (char *)v80, v81, (v81 - (_BYTE *)v80) >> 4);
  sub_1BE6F5A88(&__p[1], (char *)v82, v83, (v83 - (_BYTE *)v82) >> 4);
  sub_1BE6F5A88(v91, (char *)v84, v85, (v85 - (_BYTE *)v84) >> 4);
  sub_1BE6F5A88(&v92[1], (char *)v86, v87, (v87 - (_BYTE *)v86) >> 4);
  if (v86)
  {
    v87 = (char *)v86;
    operator delete(v86);
  }
  if (v84)
  {
    v85 = (char *)v84;
    operator delete(v84);
  }
  if (v82)
  {
    v83 = (char *)v82;
    operator delete(v82);
  }
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  v50 = *((double *)v91[0] + 1);
  v51 = *((double *)__p[1] + 1);
  v52 = v41;
  objc_msgSend_bounds(v52, v53, v54, v55, v56, v57);
  v58 = v51;
  v59 = v50;
  objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v52, v61, v62, v63, v64, v65, (float)(0.0 / (float)(1.0 / (float)(v58 - v59))) - v60, (float)((float)(1.0 / (float)(1.0 / (float)(v58 - v59))) - v58), (float)(1.0 / (float)(v58 - v59)));
  v66 = (void *)objc_claimAutoreleasedReturnValue();

  v72 = (CHDrawing *)objc_msgSend_copy(v66, v67, v68, v69, v70, v71);
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter(a6, v72, a5, v7);

  if (v92[1])
  {
    *(void **)&v93 = v92[1];
    operator delete(v92[1]);
  }
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
  if (__p[1])
  {
    *(void **)&v90 = __p[1];
    operator delete(__p[1]);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }

}

void sub_1BE878960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  sub_1BE6F2154((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1BE878A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;

  sub_1BE6F2154((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1BE878A28(_QWORD *a1, _QWORD *a2, int a3, void *a4)
{
  id v7;
  void **v8;
  void **v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  char *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  double v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  float v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  float v79;
  double v80;
  char *v81;
  void *v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  void *v89;
  char *v90;
  void *v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  float v104;
  float v105;
  double *v106;
  double v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double *v113;
  char *v114;
  void *v115;
  double *v116;
  double v117;
  char *v118;
  void *v119;
  id v120;

  v7 = a4;
  v8 = (void **)(a2 + 6);
  v9 = (void **)(a2 + 3);
  v10 = *(double *)(a2[3] + 8);
  v11 = *(double *)(a2[6] + 8);
  v120 = v7;
  objc_msgSend_bounds(v7, v12, v13, v14, v15, v16);
  v18 = v17;
  objc_msgSend_bounds(v120, v19, v20, v21, v22, v23);
  v25 = v24;
  objc_msgSend_bounds(v120, v26, v27, v28, v29, v30);
  v32 = v31;
  unicodeToNSString(a3, v33, v34, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_ch_minYIsMidMaxYIsBaseCharSet(MEMORY[0x1E0CB3500], v39, v40, v41, v42, v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v45, (uint64_t)v44, 1, v46, v47);
  v49 = v18;
  v50 = v25 + v32;

  if (v48 < 1)
  {
    objc_msgSend_ch_maxYIsBaseCharSet(MEMORY[0x1E0CB3500], v51, v52, v53, v54, v55);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v67, (uint64_t)v66, 1, v68, v69);
    v71 = v10;
    v72 = v11;

    if (v70 < 1)
    {
      objc_msgSend_ch_minYIsMidCharSet(MEMORY[0x1E0CB3500], v73, v74, v75, v76, v77);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      v87 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v84, (uint64_t)v83, 1, v85, v86);

      if (v87 < 1)
        goto LABEL_16;
      v78 = (double *)operator new(0x20uLL);
      v79 = v49 - v72;
      v88 = (float)((float)(v49 - v72) + v71);
      v81 = (char *)(v78 + 4);
      *v78 = 0.0;
      v78[1] = v88;
      v78[2] = 1.0;
      v78[3] = v88;
      v89 = *v9;
      if (*v9)
      {
        a2[4] = v89;
        operator delete(v89);
        *v9 = 0;
        a2[4] = 0;
        a2[5] = 0;
      }
    }
    else
    {
      v78 = (double *)operator new(0x20uLL);
      v79 = v50 - v71;
      v80 = (float)((float)(v50 - v71) + v71);
      v81 = (char *)(v78 + 4);
      *v78 = 0.0;
      v78[1] = v80;
      v78[2] = 1.0;
      v78[3] = v80;
      v82 = *v9;
      if (*v9)
      {
        a2[4] = v82;
        operator delete(v82);
        *v9 = 0;
        a2[4] = 0;
        a2[5] = 0;
      }
    }
    a2[3] = v78;
    a2[4] = v81;
    a2[5] = v81;
    v64 = (double *)operator new(0x20uLL);
    v65 = (float)(v79 + v72);
  }
  else
  {
    v56 = (double *)operator new(0x20uLL);
    v57 = (char *)(v56 + 4);
    *v56 = 0.0;
    v56[1] = v50;
    v56[2] = 1.0;
    v56[3] = v50;
    v58 = *v9;
    if (*v9)
    {
      a2[4] = v58;
      operator delete(v58);
      *v9 = 0;
      a2[4] = 0;
      a2[5] = 0;
    }
    a2[3] = v56;
    a2[4] = v57;
    a2[5] = v57;
    v64 = (double *)operator new(0x20uLL);
    v65 = v49;
  }
  v90 = (char *)(v64 + 4);
  *v64 = 0.0;
  v64[1] = v65;
  v64[2] = 1.0;
  v64[3] = v65;
  v91 = *v8;
  if (*v8)
  {
    a2[7] = v91;
    operator delete(v91);
    *v8 = 0;
    a2[7] = 0;
    a2[8] = 0;
  }
  a2[6] = v64;
  a2[7] = v90;
  a2[8] = v90;
LABEL_16:
  objc_msgSend_ch_minYIsTopCharSet(MEMORY[0x1E0CB3500], v59, v60, v61, v62, v63);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v96 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v93, (uint64_t)v92, 1, v94, v95);

  if (v96)
  {
    v102 = (double *)a2[6];
    if ((double *)a2[7] == v102)
      sub_1BE87C2E0();
    v103 = a2[3];
    if (a2[4] == v103)
      sub_1BE87C2E0();
    v104 = v102[1];
    v105 = *(double *)(v103 + 8);
    if ((float)(v104 - v49) != (float)(v105 - v104))
    {
      v106 = (double *)operator new(0x20uLL);
      *v106 = 0.0;
      v107 = (float)((float)(v49 * 0.7) + (float)(v105 * 0.3));
      v106[1] = v107;
      v106[2] = 1.0;
      v106[3] = v107;
      a2[7] = v102;
      operator delete(v102);
      a2[6] = v106;
      a2[7] = v106 + 4;
      a2[8] = v106 + 4;
    }
  }
  objc_msgSend_ch_mathDigitsCharSet(MEMORY[0x1E0CB3500], v97, v98, v99, v100, v101);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  v112 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v38, v109, (uint64_t)v108, 1, v110, v111);

  if (v112)
  {
    v113 = (double *)operator new(0x20uLL);
    v114 = (char *)(v113 + 4);
    *v113 = 0.0;
    v113[1] = v50;
    v113[2] = 1.0;
    v113[3] = v50;
    v115 = *v9;
    if (*v9)
    {
      a2[4] = v115;
      operator delete(v115);
      *v9 = 0;
      a2[4] = 0;
      a2[5] = 0;
    }
    a2[3] = v113;
    a2[4] = v114;
    a2[5] = v114;
    v116 = (double *)operator new(0x20uLL);
    v117 = (float)((float)(v49 * 0.7) + (float)(v50 * 0.3));
    v118 = (char *)(v116 + 4);
    *v116 = 0.0;
    v116[1] = v117;
    v116[2] = 1.0;
    v116[3] = v117;
    v119 = *v8;
    if (*v8)
    {
      a2[7] = v119;
      operator delete(v119);
      *v8 = 0;
      a2[7] = 0;
      a2[8] = 0;
    }
    a2[6] = v116;
    a2[7] = v118;
    a2[8] = v118;
  }
  sub_1BE76136C(a1, (uint64_t)a2);

}

void sub_1BE878E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE878EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE878EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE878FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE878FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE878FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE879008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE87901C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations::getCharactersRequestsToSynthesize(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations *this@<X0>, uint64_t a2@<X8>)
{
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **v2;
  _QWORD *v3;
  NSObject *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unsigned int CodepointInString;
  uint64_t *v32;
  unsigned int v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t **v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  __int128 v43;
  char *v44;
  _DWORD *v45;
  uint64_t *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned int v57;
  BOOL v58;
  uint64_t *v59;
  id v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  id v132;
  CHSynthesisRequestOptions *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  void *v147;
  void *v148;
  char *v149;
  char *v150;
  char *v151;
  void *v152;
  void *v153;
  unint64_t v154;
  CHSynthesisRequestOptions *v157;
  void **v158;
  void *v159;
  __int128 v160;
  void *__p;
  char *v162;
  uint64_t v163;
  uint8_t buf[16];
  uint64_t v165;
  void *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  __int128 v175;
  unint64_t v176;
  uint8_t v177[128];
  uint8_t v178[4];
  id v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  v175 = 0uLL;
  v176 = 0;
  v2 = (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **)*((_QWORD *)this + 2);
  if (v2)
  {
    CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getSupportedCharactersInfo(v2, (uint64_t *)buf);
    v3 = *(_QWORD **)&buf[8];
    v172 = *(uint64_t ***)buf;
    v173 = *(uint64_t **)&buf[8];
    v174 = v165;
    if (v165)
    {
      *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = &v173;
      *(_QWORD *)buf = &buf[8];
      *(_QWORD *)&buf[8] = 0;
      v165 = 0;
      v3 = 0;
    }
    else
    {
      v172 = &v173;
    }
    sub_1BE62033C((uint64_t)buf, v3);
    v168 = 0u;
    v169 = 0u;
    v170 = 0u;
    v171 = 0u;
    v160 = 0u;
    v5 = *((id *)this + 1);
    v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v168, (uint64_t)v177, 16, v7);
    if (v13)
    {
      v14 = *(_QWORD *)v169;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v169 != v14)
            objc_enumerationMutation(v5);
          v16 = *(void **)(*((_QWORD *)&v168 + 1) + 8 * i);
          objc_msgSend_ch_sentenceEndPunctuationCharacterSet(MEMORY[0x1E0CB3500], v8, v9, v10, v11, v12);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v16, v18, (uint64_t)v17, 1, v19, v20))
          {

            continue;
          }
          objc_msgSend_ch_smallCharacterSet(MEMORY[0x1E0CB3500], v21, v22, v23, v24, v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v16, v27, (uint64_t)v26, 1, v28, v29) == 0;

          if (v30)
          {
            CodepointInString = objc_msgSend_firstCodepointInString(v16, v8, v9, v10, v11, v12);
            v32 = v173;
            if (!v173)
            {
LABEL_31:
              sub_1BE87992C((uint64_t)buf, v16);
              v39 = *((_QWORD *)&v175 + 1);
              if (*((_QWORD *)&v175 + 1) >= v176)
              {
                v44 = sub_1BE87C2F4((void **)&v175, (__int128 *)buf);
                v42 = v166;
                v40 = *(void **)buf;
                v41 = *(void **)&buf[8];
              }
              else
              {
                v40 = 0;
                v41 = 0;
                v42 = 0;
                v43 = *(_OWORD *)buf;
                memset(buf, 0, sizeof(buf));
                **((_OWORD **)&v175 + 1) = v43;
                *(_DWORD *)(v39 + 16) = v165;
                *(_QWORD *)(v39 + 24) = v166;
                *(_OWORD *)(v39 + 32) = v167;
                v44 = (char *)(v39 + 48);
              }
              *((_QWORD *)&v175 + 1) = v44;

              continue;
            }
            v33 = CodepointInString;
            v34 = v173;
            while (1)
            {
              v35 = *((_DWORD *)v34 + 8);
              if (CodepointInString >= v35)
              {
                if (v35 >= CodepointInString)
                {
                  do
                  {
                    while (1)
                    {
                      v36 = v32;
                      v37 = *((_DWORD *)v32 + 8);
                      if (CodepointInString < v37)
                        break;
                      if (v37 >= CodepointInString)
                      {
                        if ((unint64_t)v36[5] > 2)
                          goto LABEL_14;
                        goto LABEL_41;
                      }
                      v32 = (uint64_t *)v36[1];
                      if (!v32)
                      {
                        v38 = (uint64_t **)(v36 + 1);
                        goto LABEL_36;
                      }
                    }
                    v32 = (uint64_t *)*v36;
                  }
                  while (*v36);
                  v38 = (uint64_t **)v36;
LABEL_36:
                  v45 = operator new(0x30uLL);
                  v45[8] = v33;
                  *((_QWORD *)v45 + 5) = 0;
                  *(_QWORD *)v45 = 0;
                  *((_QWORD *)v45 + 1) = 0;
                  *((_QWORD *)v45 + 2) = v36;
                  *v38 = (uint64_t *)v45;
                  v46 = (uint64_t *)v45;
                  if (*v172)
                  {
                    v172 = (uint64_t **)*v172;
                    v46 = *v38;
                  }
                  sub_1BE61F5C0(v173, v46);
                  ++v174;
                  if (*((_QWORD *)v45 + 5) <= 2uLL)
                  {
LABEL_41:
                    objc_msgSend_ch_mathDigitsCharSet(MEMORY[0x1E0CB3500], v8, v9, v10, v11, v12);
                    v47 = (void *)objc_claimAutoreleasedReturnValue();
                    v51 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v16, v48, (uint64_t)v47, 1, v49, v50) == 0;

                    if (v51)
                      break;
                    v52 = (_QWORD *)*((_QWORD *)this + 2);
                    (*(void (**)(_QWORD *))(*v52 + 16))(v52);
                    v55 = v52[2];
                    v54 = v52 + 2;
                    v53 = v55;
                    if (!v55)
                      goto LABEL_53;
                    v56 = v54;
                    do
                    {
                      v57 = *(_DWORD *)(v53 + 32);
                      v58 = v57 >= v33;
                      if (v57 >= v33)
                        v59 = (uint64_t *)v53;
                      else
                        v59 = (uint64_t *)(v53 + 8);
                      if (v58)
                        v56 = (_QWORD *)v53;
                      v53 = *v59;
                    }
                    while (*v59);
                    if (v56 != v54 && *((_DWORD *)v56 + 8) <= v33)
                    {
                      sub_1BE6EC438(&__p, v56 + 5);
                      v158 = (void **)__p;
                      v60 = v16;
                      if (qword_1EF568E88 == -1)
                        goto LABEL_54;
                    }
                    else
                    {
LABEL_53:
                      v158 = 0;
                      __p = 0;
                      v162 = 0;
                      v163 = 0;
                      v60 = v16;
                      if (qword_1EF568E88 == -1)
                      {
LABEL_54:
                        v61 = (id)qword_1EF568E60;
                        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)v178 = 138412290;
                          v179 = v60;
                          _os_log_impl(&dword_1BE607000, v61, OS_LOG_TYPE_DEBUG, "prepareIncreasingVariabilitySynthesisRequest %@", v178, 0xCu);
                        }
                        v159 = v60;

                        v157 = objc_alloc_init(CHSynthesisRequestOptions);
                        v67 = (void *)objc_msgSend_copy(*v158, v62, v63, v64, v65, v66);
                        objc_msgSend_bounds(v67, v68, v69, v70, v71, v72);
                        v74 = v73;
                        v80 = (void *)objc_msgSend_copy(v60, v75, v76, v77, v78, v79);
                        objc_msgSend_stringByAppendingFormat_(v80, v81, (uint64_t)CFSTR(" %@"), v82, v83, v84, v60);
                        v85 = (void *)objc_claimAutoreleasedReturnValue();

                        v91 = (void *)objc_msgSend_copy(*v158, v86, v87, v88, v89, v90);
                        objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v91, v92, v93, v94, v95, v96, v74 + v74, 0.0, 1.0);
                        v97 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_appendDrawing_(v67, v98, (uint64_t)v97, v99, v100, v101);

                        objc_msgSend_stringByAppendingFormat_(v85, v102, (uint64_t)CFSTR(" %@"), v103, v104, v105, v60);
                        v106 = (void *)objc_claimAutoreleasedReturnValue();

                        v112 = (void *)objc_msgSend_copy(*v158, v107, v108, v109, v110, v111);
                        objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v112, v113, v114, v115, v116, v117, v74 * 4.0, 0.0, 1.0);
                        v118 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_appendDrawing_(v67, v119, (uint64_t)v118, v120, v121, v122);

                        objc_msgSend_setFastPathAsXZero_(v157, v123, 1, v124, v125, v126);
                        objc_msgSend_setFastPathUseDefaultStyle_(v157, v127, 0, v128, v129, v130);
                        if (qword_1EF568E88 != -1)
                          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                        v131 = (id)qword_1EF568E60;
                        if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)v178 = 138412290;
                          v179 = v67;
                          _os_log_impl(&dword_1BE607000, v131, OS_LOG_TYPE_DEBUG, "prepareIncreasingVariabilitySynthesisRequest seed %@", v178, 0xCu);
                        }

                        v132 = v106;
                        *(_QWORD *)buf = v132;
                        v133 = v157;
                        *(_QWORD *)&buf[8] = v133;
                        LODWORD(v165) = 1;
                        v139 = objc_msgSend_copy(v67, v134, v135, v136, v137, v138);
                        v166 = (void *)v139;
                        *(_QWORD *)&v167 = objc_msgSend_firstCodepointInString(v159, v140, v141, v142, v143, v144);
                        *((_QWORD *)&v167 + 1) = 1;

                        v145 = *((_QWORD *)&v175 + 1);
                        if (*((_QWORD *)&v175 + 1) >= v176)
                        {
                          v149 = sub_1BE87C2F4((void **)&v175, (__int128 *)buf);
                          v148 = v166;
                          v146 = *(void **)buf;
                          v147 = *(void **)&buf[8];
                        }
                        else
                        {
                          v146 = 0;
                          v147 = 0;
                          v148 = 0;
                          *(_QWORD *)buf = 0;
                          **((_QWORD **)&v175 + 1) = v132;
                          *(_QWORD *)(v145 + 8) = v133;
                          *(_DWORD *)(v145 + 16) = 1;
                          *(_QWORD *)(v145 + 24) = v139;
                          *(_OWORD *)(v145 + 32) = v167;
                          v149 = (char *)(v145 + 48);
                        }
                        *((_QWORD *)&v175 + 1) = v149;

                        v150 = (char *)__p;
                        if (__p)
                        {
                          v151 = v162;
                          v152 = __p;
                          if (v162 != __p)
                          {
                            do
                            {
                              v153 = (void *)*((_QWORD *)v151 - 3);
                              v151 -= 24;

                            }
                            while (v151 != v150);
                            v152 = __p;
                          }
                          v162 = v150;
                          operator delete(v152);
                        }
                        break;
                      }
                    }
                    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                    goto LABEL_54;
                  }
                  break;
                }
                ++v34;
              }
              v34 = (uint64_t *)*v34;
              if (!v34)
                goto LABEL_31;
            }
          }
LABEL_14:
          ;
        }
        v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v168, (uint64_t)v177, 16, v12);
      }
      while (v13);
      v160 = v175;
      v154 = v176;
    }
    else
    {
      v154 = 0;
    }

    *(_OWORD *)a2 = v160;
    *(_QWORD *)(a2 + 16) = v154;
    sub_1BE62033C((uint64_t)&v172, v173);
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v4 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations holder is empty", buf, 2u);
    }

    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

void sub_1BE879804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,_QWORD *a39,uint64_t a40,void *a41)
{
  void *v41;

  sub_1BE62033C((uint64_t)&a38, a39);
  sub_1BE7EE3B8(&a41);
  _Unwind_Resume(a1);
}

void sub_1BE87992C(uint64_t a1, void *a2)
{
  id v3;
  CHSynthesisRequestOptions *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CHSynthesisRequestOptions *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t buf[4];
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc_init(CHSynthesisRequestOptions);
  objc_msgSend_ch_basicAlphanumericCharacterSet(MEMORY[0x1E0CB3500], v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v3, v11, (uint64_t)v10, 1, v12, v13);

  if (v14)
  {
    objc_msgSend_setFastPathAsXZero_(v4, v15, 0, v16, v17, v18);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v19 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v36 = v3;
      v20 = "Character %@ does NOT require seeding with the fast path";
LABEL_10:
      _os_log_impl(&dword_1BE607000, v19, OS_LOG_TYPE_DEBUG, v20, buf, 0xCu);
    }
  }
  else
  {
    objc_msgSend_setFastPathAsXZero_(v4, v15, 1, v16, v17, v18);
    objc_msgSend_setFastPathUseDefaultStyle_(v4, v21, 1, v22, v23, v24);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v19 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v36 = v3;
      v20 = "Character %@ requires seeding with the fast path";
      goto LABEL_10;
    }
  }

  objc_msgSend_stringByAppendingFormat_(v3, v25, (uint64_t)CFSTR(" %@"), v26, v27, v28, CFSTR("www name wave"));
  *(_QWORD *)a1 = objc_claimAutoreleasedReturnValue();
  v29 = v4;
  *(_QWORD *)(a1 + 8) = v29;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = objc_msgSend_firstCodepointInString(v3, v30, v31, v32, v33, v34);
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = 1;

}

void sub_1BE879B4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations::proceedRequestResult(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _OWORD *v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  size_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  const void *v75;
  void *v76;
  char *v77;
  char *v78;
  size_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  void *v88;
  char *v89;
  char *v90;
  size_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  void *v100;
  char *v101;
  char *v102;
  size_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  void *v112;
  double v113;
  double v114;
  id v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  float v122;
  double v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  CHDrawing *v135;
  NSObject *v136;
  const char *v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  double v193;
  double v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  double v200;
  double v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  double MaxX;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  const char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  CoreHandwriting::synthesis::fast_path *v253;
  float v254;
  float v255;
  NSObject *v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  void **v263;
  NSObject *obj;
  uint64_t v265;
  id v266;
  uint64_t v267;
  void *v269[3];
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint8_t v280[24];
  void *v281;
  char *v282;
  void *v283;
  char *v284;
  void *v285;
  char *v286;
  uint8_t buf[16];
  void *__p[2];
  __int128 v289;
  void *__dst[2];
  void *v291[2];
  __int128 v292;
  _BYTE v293[128];
  uint64_t v294;
  CGRect v295;
  CGRect v296;

  v294 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_drawing(v4, v5, v6, v7, v8, v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v15
    || (v266 = v4,
        objc_msgSend_drawing(v4, v10, v11, v12, v13, v14),
        v16 = (void *)objc_claimAutoreleasedReturnValue(),
        v22 = objc_msgSend_pointCount(v16, v17, v18, v19, v20, v21),
        v16,
        v15,
        !v22))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v136 = (id)qword_1EF568E60;
    if (!os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
      goto LABEL_126;
    *(_WORD *)buf = 0;
    v137 = "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations result drawing is nill";
LABEL_125:
    _os_log_impl(&dword_1BE607000, v136, OS_LOG_TYPE_DEBUG, v137, buf, 2u);
    goto LABEL_126;
  }
  objc_msgSend_segmentContents(v4, v23, v24, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v28)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v136 = (id)qword_1EF568E60;
    if (!os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
      goto LABEL_126;
    *(_WORD *)buf = 0;
    v137 = "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations segmentContents is nill";
    goto LABEL_125;
  }
  if (*(_DWORD *)(a2 + 16))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v34 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      unicodeToNSString(*(_DWORD *)(a2 + 32), v35, v36, v37, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl(&dword_1BE607000, v34, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations START add variational character %@ to holder", buf, 0xCu);

    }
    v278 = 0u;
    v279 = 0u;
    v276 = 0u;
    v277 = 0u;
    objc_msgSend_segmentStrokeIndexes(v4, v41, v42, v43, v44, v45);
    obj = objc_claimAutoreleasedReturnValue();
    v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v46, (uint64_t)&v276, (uint64_t)v293, 16, v47);
    if (v53)
    {
      v265 = *(_QWORD *)v277;
      v263 = &v291[1];
      v267 = 1;
      do
      {
        for (i = 0; i != v53; ++i)
        {
          if (*(_QWORD *)v277 != v265)
            objc_enumerationMutation(obj);
          v55 = *(_QWORD *)(*((_QWORD *)&v276 + 1) + 8 * i);
          objc_msgSend_drawing(v4, v48, v49, v50, v51, v52, v263);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_drawingWithStrokesFromIndexSet_(v56, v57, v55, v58, v59, v60);
          v61 = (void *)objc_claimAutoreleasedReturnValue();

          *(_OWORD *)v291 = 0u;
          v292 = 0u;
          v289 = 0u;
          *(_OWORD *)__dst = 0u;
          *(_OWORD *)buf = 0u;
          *(_OWORD *)__p = 0u;
          v62 = operator new(0x20uLL);
          *v62 = xmmword_1BE8E05E0;
          v62[1] = unk_1BE8E05F0;
          __p[1] = v62;
          *(_QWORD *)&v289 = v62 + 2;
          *((_QWORD *)&v289 + 1) = v62 + 2;
          v63 = operator new(0x20uLL);
          v64 = a1;
          *v63 = xmmword_1BE8E0600;
          v63[1] = unk_1BE8E0610;
          __dst[0] = v63;
          __dst[1] = v63 + 2;
          v291[0] = v63 + 2;
          sub_1BE76136C(v269, (uint64_t)buf);
          v65 = v53;
          sub_1BE878A28(v280, v269, *(_DWORD *)(a2 + 32), v61);
          v66 = *(_OWORD *)v280;
          v67 = *(_QWORD *)&v280[8] - *(_QWORD *)v280;
          v68 = (uint64_t)(*(_QWORD *)&v280[8] - *(_QWORD *)v280) >> 4;
          v69 = (uint64_t)__p[0];
          v70 = *(char **)buf;
          if (v68 <= ((uint64_t)__p[0] - *(_QWORD *)buf) >> 4)
          {
            v74 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4;
            if (v74 >= v68)
            {
              if (*(_QWORD *)&v280[8] == *(_QWORD *)v280)
                goto LABEL_34;
              v76 = *(void **)buf;
              v75 = *(const void **)v280;
              goto LABEL_33;
            }
            if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
            {
              memmove(*(void **)buf, *(const void **)v280, *(_QWORD *)&buf[8] - *(_QWORD *)buf);
              v70 = *(char **)&buf[8];
            }
            v75 = (const void *)(v66 + 16 * v74);
            v67 = *((_QWORD *)&v66 + 1) - (_QWORD)v75;
            if (*((const void **)&v66 + 1) != v75)
            {
              v76 = v70;
LABEL_33:
              memmove(v76, v75, v67);
            }
          }
          else
          {
            if (*(_QWORD *)buf)
            {
              *(_QWORD *)&buf[8] = *(_QWORD *)buf;
              operator delete(*(void **)buf);
              v69 = 0;
              memset(buf, 0, sizeof(buf));
              __p[0] = 0;
            }
            if ((v67 & 0x8000000000000000) != 0)
              goto LABEL_138;
            v71 = v69 >> 3;
            if (v69 >> 3 <= v68)
              v71 = v68;
            v72 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v71;
            if (v72 >> 60)
LABEL_138:
              sub_1BE61F930();
            v73 = (char *)operator new(16 * v72);
            v70 = v73;
            *(_QWORD *)buf = v73;
            *(_QWORD *)&buf[8] = v73;
            __p[0] = &v73[16 * v72];
            if (*((_QWORD *)&v66 + 1) != (_QWORD)v66)
              memcpy(v73, (const void *)v66, v67);
          }
LABEL_34:
          *(_QWORD *)&buf[8] = &v70[v67];
          v78 = (char *)v281;
          v77 = v282;
          v79 = v282 - (_BYTE *)v281;
          v80 = (v282 - (_BYTE *)v281) >> 4;
          v81 = *((_QWORD *)&v289 + 1);
          v82 = (char *)__p[1];
          if (v80 <= (uint64_t)(*((_QWORD *)&v289 + 1) - (unint64_t)__p[1]) >> 4)
          {
            v86 = (uint64_t)(v289 - (unint64_t)__p[1]) >> 4;
            if (v86 >= v80)
            {
              if (v282 == v281)
                goto LABEL_54;
              v88 = __p[1];
              v87 = (char *)v281;
              goto LABEL_53;
            }
            if ((void *)v289 != __p[1])
            {
              memmove(__p[1], v281, v289 - (unint64_t)__p[1]);
              v82 = (char *)v289;
            }
            v87 = &v78[16 * v86];
            v79 = v77 - v87;
            if (v77 != v87)
            {
              v88 = v82;
LABEL_53:
              memmove(v88, v87, v79);
            }
          }
          else
          {
            if (__p[1])
            {
              *(void **)&v289 = __p[1];
              operator delete(__p[1]);
              v81 = 0;
              __p[1] = 0;
              v289 = 0uLL;
            }
            if ((v79 & 0x8000000000000000) != 0)
              goto LABEL_138;
            v83 = v81 >> 3;
            if (v81 >> 3 <= v80)
              v83 = v80;
            v84 = (unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v83;
            if (v84 >> 60)
              goto LABEL_138;
            v85 = (char *)operator new(16 * v84);
            v82 = v85;
            __p[1] = v85;
            *(_QWORD *)&v289 = v85;
            *((_QWORD *)&v289 + 1) = &v85[16 * v84];
            if (v77 != v78)
              memcpy(v85, v78, v79);
          }
LABEL_54:
          *(_QWORD *)&v289 = &v82[v79];
          v90 = (char *)v283;
          v89 = v284;
          v91 = v284 - (_BYTE *)v283;
          v92 = (v284 - (_BYTE *)v283) >> 4;
          v93 = (uint64_t)v291[0];
          v94 = (char *)__dst[0];
          if (v92 <= ((char *)v291[0] - (char *)__dst[0]) >> 4)
          {
            v98 = ((char *)__dst[1] - (char *)__dst[0]) >> 4;
            if (v98 >= v92)
            {
              if (v284 == v283)
                goto LABEL_74;
              v100 = __dst[0];
              v99 = (char *)v283;
              goto LABEL_73;
            }
            if (__dst[1] != __dst[0])
            {
              memmove(__dst[0], v283, (char *)__dst[1] - (char *)__dst[0]);
              v94 = (char *)__dst[1];
            }
            v99 = &v90[16 * v98];
            v91 = v89 - v99;
            if (v89 != v99)
            {
              v100 = v94;
LABEL_73:
              memmove(v100, v99, v91);
            }
          }
          else
          {
            if (__dst[0])
            {
              __dst[1] = __dst[0];
              operator delete(__dst[0]);
              v93 = 0;
              __dst[0] = 0;
              __dst[1] = 0;
              v291[0] = 0;
            }
            if ((v91 & 0x8000000000000000) != 0)
              goto LABEL_138;
            v95 = v93 >> 3;
            if (v93 >> 3 <= v92)
              v95 = v92;
            v96 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v95;
            if (v96 >> 60)
              goto LABEL_138;
            v97 = (char *)operator new(16 * v96);
            v94 = v97;
            __dst[0] = v97;
            __dst[1] = v97;
            v291[0] = &v97[16 * v96];
            if (v89 != v90)
              memcpy(v97, v90, v91);
          }
LABEL_74:
          __dst[1] = &v94[v91];
          v102 = (char *)v285;
          v101 = v286;
          v103 = v286 - (_BYTE *)v285;
          v104 = (v286 - (_BYTE *)v285) >> 4;
          v105 = *((_QWORD *)&v292 + 1);
          v106 = (char *)v291[1];
          if (v104 <= (uint64_t)(*((_QWORD *)&v292 + 1) - (unint64_t)v291[1]) >> 4)
          {
            v110 = (uint64_t)(v292 - (unint64_t)v291[1]) >> 4;
            if (v110 >= v104)
            {
              if (v286 == v285)
                goto LABEL_94;
              v112 = v291[1];
              v111 = (char *)v285;
              goto LABEL_93;
            }
            if ((void *)v292 != v291[1])
            {
              memmove(v291[1], v285, v292 - (unint64_t)v291[1]);
              v106 = (char *)v292;
            }
            v111 = &v102[16 * v110];
            v103 = v101 - v111;
            if (v101 != v111)
            {
              v112 = v106;
LABEL_93:
              memmove(v112, v111, v103);
            }
          }
          else
          {
            if (v291[1])
            {
              *(void **)&v292 = v291[1];
              operator delete(v291[1]);
              v105 = 0;
              *v263 = 0;
              v263[1] = 0;
              v263[2] = 0;
            }
            if ((v103 & 0x8000000000000000) != 0)
              goto LABEL_138;
            v107 = v105 >> 3;
            if (v105 >> 3 <= v104)
              v107 = v104;
            v108 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v107;
            if (v108 >> 60)
              goto LABEL_138;
            v109 = (char *)operator new(16 * v108);
            v106 = v109;
            v291[1] = v109;
            *(_QWORD *)&v292 = v109;
            *((_QWORD *)&v292 + 1) = &v109[16 * v108];
            if (v101 != v102)
              memcpy(v109, v102, v103);
          }
LABEL_94:
          v53 = v65;
          *(_QWORD *)&v292 = &v106[v103];
          a1 = v64;
          if (v285)
          {
            v286 = (char *)v285;
            operator delete(v285);
          }
          v4 = v266;
          if (v283)
          {
            v284 = (char *)v283;
            operator delete(v283);
          }
          if (v281)
          {
            v282 = (char *)v281;
            operator delete(v281);
          }
          if (*(_QWORD *)v280)
          {
            *(_QWORD *)&v280[8] = *(_QWORD *)v280;
            operator delete(*(void **)v280);
          }
          if (v274)
          {
            v275 = v274;
            operator delete(v274);
          }
          if (v272)
          {
            v273 = v272;
            operator delete(v272);
          }
          if (v270)
          {
            v271 = v270;
            operator delete(v270);
          }
          if (v269[0])
          {
            v269[1] = v269[0];
            operator delete(v269[0]);
          }
          v113 = *((double *)__dst[0] + 1);
          v114 = *((double *)__p[1] + 1);
          v115 = v61;
          objc_msgSend_bounds(v115, v116, v117, v118, v119, v120);
          v121 = v114;
          v122 = v113;
          objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v115, v124, v125, v126, v127, v128, (float)(0.0 / (float)(1.0 / (float)(v121 - v122))) - v123, (float)((float)(1.0 / (float)(1.0 / (float)(v121 - v122))) - v121), (float)(1.0 / (float)(v121 - v122)));
          v129 = (void *)objc_claimAutoreleasedReturnValue();

          v135 = (CHDrawing *)objc_msgSend_copy(v129, v130, v131, v132, v133, v134);
          CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter((CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)v280, v135, *(_DWORD *)(*(_QWORD *)(v64 + 16) + 36), *(_DWORD *)(a2 + 32));

          (*(void (**)(_QWORD, uint8_t *, uint64_t))(**(_QWORD **)(v64 + 16) + 24))(*(_QWORD *)(v64 + 16), v280, v267 + i);
          if (v291[1])
          {
            *(void **)&v292 = v291[1];
            operator delete(v291[1]);
          }
          if (__dst[0])
          {
            __dst[1] = __dst[0];
            operator delete(__dst[0]);
          }
          if (__p[1])
          {
            *(void **)&v289 = __p[1];
            operator delete(__p[1]);
          }
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }

        }
        v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v48, (uint64_t)&v276, (uint64_t)v293, 16, v52);
        v267 = (v267 + i);
      }
      while (v53);
    }
    v136 = obj;
  }
  else
  {
    objc_msgSend_drawing(v4, v29, v30, v31, v32, v33);
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_segmentStrokeIndexes(v4, v139, v140, v141, v142, v143);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstObject(v144, v145, v146, v147, v148, v149);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_drawingWithStrokesFromIndexSet_(v138, v151, (uint64_t)v150, v152, v153, v154);
    v136 = objc_claimAutoreleasedReturnValue();

    v155 = (void *)MEMORY[0x1E0CB3788];
    objc_msgSend_drawing(v4, v156, v157, v158, v159, v160);
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    v167 = objc_msgSend_strokeCount(v161, v162, v163, v164, v165, v166);
    objc_msgSend_indexSetWithIndexesInRange_(v155, v168, 0, v167, v169, v170);
    v171 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_segmentStrokeIndexes(v4, v172, v173, v174, v175, v176);
    v177 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstObject(v177, v178, v179, v180, v181, v182);
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeIndexes_(v171, v184, (uint64_t)v183, v185, v186, v187);

    objc_msgSend_bounds(v136, v188, v189, v190, v191, v192);
    v194 = v193;
    objc_msgSend_bounds(v136, v195, v196, v197, v198, v199);
    v201 = v200;
    objc_msgSend_drawing(v4, v202, v203, v204, v205, v206);
    v207 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v207, v208, v209, v210, v211, v212);
    MaxX = CGRectGetMaxX(v295);

    objc_msgSend_segmentStrokeIndexes(v4, v214, v215, v216, v217, v218);
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    v225 = objc_msgSend_count(v219, v220, v221, v222, v223, v224);

    if (v225 >= 2)
    {
      objc_msgSend_drawing(v4, v226, v227, v228, v229, v230);
      v231 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_segmentStrokeIndexes(v4, v232, v233, v234, v235, v236);
      v237 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v237, v238, 1, v239, v240, v241);
      v242 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_drawingWithStrokesFromIndexSet_(v231, v243, (uint64_t)v242, v244, v245, v246);
      v247 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_bounds(v247, v248, v249, v250, v251, v252);
      MaxX = CGRectGetMaxX(v296);

    }
    objc_msgSend_drawing(v4, v226, v227, v228, v229, v230);
    v253 = (CoreHandwriting::synthesis::fast_path *)objc_claimAutoreleasedReturnValue();
    v254 = v194 + v201 + 0.001;
    v255 = MaxX;
    CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSynthesizedData(v253, (CHDrawing *)*(unsigned int *)(a2 + 32), v254, v255, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 36), (CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)buf);

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v256 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
    {
      unicodeToNSString(*(_DWORD *)(a2 + 32), v257, v258, v259, v260, v261);
      v262 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v280 = 138412290;
      *(_QWORD *)&v280[4] = v262;
      _os_log_impl(&dword_1BE607000, v256, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterPersonalizerWithSuffixForInitAndRefinementForDigitsVariations add initial character %@ to holder", v280, 0xCu);

    }
    (*(void (**)(_QWORD, uint8_t *, _QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), buf, 0);

  }
LABEL_126:

}

void sub_1BE87A760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  void *v49;
  void *v50;
  void *v51;

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations::getCharactersRequestsToSynthesize(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations *this@<X0>, char a2@<W1>, void **a3@<X8>)
{
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **v5;
  _QWORD *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned int CodepointInString;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD **v41;
  unsigned int v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char IsMember;
  _QWORD *j;
  char *v63;
  void *v64;
  void *v65;
  void *v66;
  __int128 v67;
  char *v68;
  unsigned int v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  char *v79;
  void *v80;
  void *v81;
  void *v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  id *v88;
  char *v89;
  int64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  id *v96;
  char *v97;
  id *v98;
  char *v99;
  char *v100;
  unint64_t v101;
  char *v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  void *v128;
  char *v129;
  char *k;
  void *v131;
  char *v132;
  char *m;
  void *v134;
  void **v135;
  id obj;
  uint8_t buf[16];
  uint64_t v138;
  void *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  void *__p;
  char *v149;
  unint64_t v150;
  void *v151;
  char *v152;
  unint64_t v153;
  _BYTE v154[128];
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v5 = (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **)*((_QWORD *)this + 2);
  if (v5)
  {
    v151 = 0;
    v152 = 0;
    v153 = 0;
    __p = 0;
    v149 = 0;
    v150 = 0;
    v146 = 0;
    v147 = 0;
    v145 = &v146;
    if ((a2 & 1) == 0)
    {
      CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getSupportedCharactersInfo(v5, (uint64_t *)buf);
      sub_1BE62033C((uint64_t)&v145, v146);
      v6 = *(_QWORD **)&buf[8];
      v145 = *(_QWORD **)buf;
      v146 = *(_QWORD **)&buf[8];
      v147 = v138;
      if (v138)
      {
        *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = &v146;
        *(_QWORD *)buf = &buf[8];
        *(_QWORD *)&buf[8] = 0;
        v138 = 0;
        v6 = 0;
      }
      else
      {
        v145 = &v146;
      }
      sub_1BE62033C((uint64_t)buf, v6);
    }
    v143 = 0u;
    v144 = 0u;
    v141 = 0u;
    v142 = 0u;
    obj = *((id *)this + 1);
    v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v141, (uint64_t)v154, 16, v9);
    v135 = a3;
    if (v15)
    {
      v16 = *(_QWORD *)v142;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v142 != v16)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v141 + 1) + 8 * i);
          objc_msgSend_ch_basicAlphanumericCharacterSet(MEMORY[0x1E0CB3500], v10, v11, v12, v13, v14);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v18, v20, (uint64_t)v19, 1, v21, v22) == 0;

          if (!v23)
          {
            CodepointInString = objc_msgSend_firstCodepointInString(v18, v10, v11, v12, v13, v14);
            objc_msgSend_ch_mathDigitsCharSet(MEMORY[0x1E0CB3500], v25, v26, v27, v28, v29);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v18, v31, (uint64_t)v30, 1, v32, v33) == 0;

            if (v34)
            {
              objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v35, (uint64_t)CFSTR("ij"), v36, v37, v38);
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              IsMember = objc_msgSend_characterIsMember_(v56, v57, (unsigned __int16)CodepointInString, v58, v59, v60);

              if ((IsMember & 1) == 0)
              {
                for (j = v146; j; j = (_QWORD *)*j)
                {
                  v69 = *((_DWORD *)j + 8);
                  if (CodepointInString >= v69)
                  {
                    if (v69 >= CodepointInString)
                      goto LABEL_15;
                    ++j;
                  }
                }
                sub_1BE87992C((uint64_t)buf, v18);
                v63 = v149;
                if ((unint64_t)v149 >= v150)
                {
                  v68 = sub_1BE87C2F4(&__p, (__int128 *)buf);
                  v66 = v139;
                  v64 = *(void **)buf;
                  v65 = *(void **)&buf[8];
                }
                else
                {
                  v64 = 0;
                  v65 = 0;
                  v66 = 0;
                  v67 = *(_OWORD *)buf;
                  memset(buf, 0, sizeof(buf));
                  *(_OWORD *)v149 = v67;
                  *((_DWORD *)v63 + 4) = v138;
                  *((_QWORD *)v63 + 3) = v139;
                  *((_OWORD *)v63 + 2) = v140;
                  v68 = v63 + 48;
                }
                v149 = v68;

              }
            }
            else
            {
              v39 = v146;
              v40 = &v146;
              v41 = &v146;
              if (v146)
              {
                while (1)
                {
                  while (1)
                  {
                    v41 = (_QWORD **)v39;
                    v42 = *((_DWORD *)v39 + 8);
                    if (CodepointInString >= v42)
                      break;
                    v39 = *v41;
                    v40 = v41;
                    if (!*v41)
                      goto LABEL_27;
                  }
                  if (v42 >= CodepointInString)
                    break;
                  v39 = v41[1];
                  if (!v39)
                  {
                    v40 = v41 + 1;
                    goto LABEL_27;
                  }
                }
                v70 = v41[5];
              }
              else
              {
LABEL_27:
                v43 = operator new(0x30uLL);
                *((_DWORD *)v43 + 8) = CodepointInString;
                v43[5] = 0;
                *v43 = 0;
                v43[1] = 0;
                v43[2] = v41;
                *v40 = v43;
                if (*v145)
                {
                  v145 = (_QWORD *)*v145;
                  v43 = (_QWORD *)*v40;
                }
                v44 = v146;
                v45 = v43 == v146;
                *((_BYTE *)v43 + 24) = v43 == v146;
                if (!v45)
                {
                  do
                  {
                    v46 = v43[2];
                    if (*(_BYTE *)(v46 + 24))
                      break;
                    v47 = *(_QWORD **)(v46 + 16);
                    v48 = *v47;
                    if (*v47 == v46)
                    {
                      v51 = v47[1];
                      if (!v51 || (v52 = *(unsigned __int8 *)(v51 + 24), v49 = (_BYTE *)(v51 + 24), v52))
                      {
                        if (*(_QWORD **)v46 == v43)
                        {
                          *(_BYTE *)(v46 + 24) = 1;
                          *((_BYTE *)v47 + 24) = 0;
                          v55 = *(_QWORD *)(v46 + 8);
                          *v47 = v55;
                          if (v55)
                            goto LABEL_44;
                        }
                        else
                        {
                          v53 = *(uint64_t **)(v46 + 8);
                          v54 = *v53;
                          *(_QWORD *)(v46 + 8) = *v53;
                          if (v54)
                          {
                            *(_QWORD *)(v54 + 16) = v46;
                            v47 = *(_QWORD **)(v46 + 16);
                          }
                          v53[2] = (uint64_t)v47;
                          *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8 * (**(_QWORD **)(v46 + 16) != v46)) = v53;
                          *v53 = v46;
                          *(_QWORD *)(v46 + 16) = v53;
                          v47 = (_QWORD *)v53[2];
                          v46 = *v47;
                          *((_BYTE *)v53 + 24) = 1;
                          *((_BYTE *)v47 + 24) = 0;
                          v55 = *(_QWORD *)(v46 + 8);
                          *v47 = v55;
                          if (v55)
LABEL_44:
                            *(_QWORD *)(v55 + 16) = v47;
                        }
                        *(_QWORD *)(v46 + 16) = v47[2];
                        *(_QWORD *)(v47[2] + 8 * (*(_QWORD *)v47[2] != (_QWORD)v47)) = v46;
                        *(_QWORD *)(v46 + 8) = v47;
LABEL_60:
                        v47[2] = v46;
                        break;
                      }
                    }
                    else if (!v48 || (v50 = *(unsigned __int8 *)(v48 + 24), v49 = (_BYTE *)(v48 + 24), v50))
                    {
                      if (*(_QWORD **)v46 == v43)
                      {
                        v85 = v43[1];
                        *(_QWORD *)v46 = v85;
                        if (v85)
                        {
                          *(_QWORD *)(v85 + 16) = v46;
                          v47 = *(_QWORD **)(v46 + 16);
                        }
                        v43[2] = v47;
                        *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8 * (**(_QWORD **)(v46 + 16) != v46)) = v43;
                        v43[1] = v46;
                        *(_QWORD *)(v46 + 16) = v43;
                        v47 = (_QWORD *)v43[2];
                        *((_BYTE *)v43 + 24) = 1;
                        *((_BYTE *)v47 + 24) = 0;
                        v46 = v47[1];
                        v71 = *(_QWORD **)v46;
                        v47[1] = *(_QWORD *)v46;
                        if (v71)
LABEL_58:
                          v71[2] = v47;
                      }
                      else
                      {
                        *(_BYTE *)(v46 + 24) = 1;
                        *((_BYTE *)v47 + 24) = 0;
                        v46 = v47[1];
                        v71 = *(_QWORD **)v46;
                        v47[1] = *(_QWORD *)v46;
                        if (v71)
                          goto LABEL_58;
                      }
                      *(_QWORD *)(v46 + 16) = v47[2];
                      *(_QWORD *)(v47[2] + 8 * (*(_QWORD *)v47[2] != (_QWORD)v47)) = v46;
                      *(_QWORD *)v46 = v47;
                      goto LABEL_60;
                    }
                    *(_BYTE *)(v46 + 24) = 1;
                    v43 = v47;
                    *((_BYTE *)v47 + 24) = v47 == v44;
                    *v49 = 1;
                  }
                  while (v47 != v44);
                }
                v70 = 0;
                ++v147;
              }
              objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v35, (uint64_t)CFSTR("47"), v36, v37, v38);
              v72 = (void *)objc_claimAutoreleasedReturnValue();
              v77 = objc_msgSend_characterIsMember_(v72, v73, (unsigned __int16)CodepointInString, v74, v75, v76);

              if (v77)
                v78 = 1;
              else
                v78 = 3;
              if ((unint64_t)v70 < v78)
              {
                sub_1BE87992C((uint64_t)buf, v18);
                v79 = v152;
                if ((unint64_t)v152 >= v153)
                {
                  v84 = sub_1BE87C2F4(&v151, (__int128 *)buf);
                  v82 = v139;
                  v80 = *(void **)buf;
                  v81 = *(void **)&buf[8];
                }
                else
                {
                  v80 = 0;
                  v81 = 0;
                  v82 = 0;
                  v83 = *(_OWORD *)buf;
                  memset(buf, 0, sizeof(buf));
                  *(_OWORD *)v152 = v83;
                  *((_DWORD *)v79 + 4) = v138;
                  *((_QWORD *)v79 + 3) = v139;
                  *((_OWORD *)v79 + 2) = v140;
                  v84 = v79 + 48;
                }
                v152 = v84;

                *((_DWORD *)v84 - 8) = 2;
                *((_QWORD *)v84 - 1) = v78;
              }
            }
          }
LABEL_15:
          ;
        }
        v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v141, (uint64_t)v154, 16, v14);
      }
      while (v15);
      v86 = (char *)v151;
      v87 = v152;
      v15 = v153;
      v88 = (id *)__p;
      v89 = v149;
    }
    else
    {
      v89 = 0;
      v88 = 0;
      v87 = 0;
      v86 = 0;
    }

    *v135 = v86;
    v135[1] = v87;
    v151 = 0;
    v152 = 0;
    v135[2] = (void *)v15;
    v153 = 0;
    if (v89 - (char *)v88 < 1)
      goto LABEL_123;
    v90 = 0xAAAAAAAAAAAAAAABLL * ((v89 - (char *)v88) >> 4);
    v91 = (v87 - v86) / 48;
    v92 = &v86[48 * v91];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v87) >> 4)) >= v90)
    {
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v87 - v92) >> 4)) >= v90)
      {
        v96 = &v88[2 * ((v89 - (char *)v88) >> 4)];
        v97 = v87;
      }
      else
      {
        v96 = &v88[2 * ((v87 - v92) >> 4)];
        v97 = v87;
        if (v96 != (id *)v89)
        {
          v98 = &v88[2 * ((v87 - v92) >> 4)];
          v99 = v87;
          do
          {
            *(_QWORD *)v99 = *v98;
            *((_QWORD *)v99 + 1) = v98[1];
            *((_DWORD *)v99 + 4) = *((_DWORD *)v98 + 4);
            *((_QWORD *)v99 + 3) = v98[3];
            *((_OWORD *)v99 + 2) = *((_OWORD *)v98 + 2);
            v97 += 48;
            v98 += 6;
            v99 += 48;
          }
          while (v98 != (id *)v89);
        }
        v135[1] = v97;
        if (v87 - v92 < 1)
          goto LABEL_123;
      }
      v100 = &v92[16 * ((v89 - (char *)v88) >> 4)];
      v101 = (unint64_t)&v97[-16 * ((v89 - (char *)v88) >> 4)];
      v102 = v97;
      if (v101 < (unint64_t)v87)
      {
        v102 = v97;
        do
        {
          v103 = *(_OWORD *)v101;
          *(_QWORD *)v101 = 0;
          *(_QWORD *)(v101 + 8) = 0;
          *(_OWORD *)v102 = v103;
          *((_DWORD *)v102 + 4) = *(_DWORD *)(v101 + 16);
          v104 = *(_QWORD *)(v101 + 24);
          *(_QWORD *)(v101 + 24) = 0;
          *((_QWORD *)v102 + 3) = v104;
          *((_OWORD *)v102 + 2) = *(_OWORD *)(v101 + 32);
          v102 += 48;
          v101 += 48;
        }
        while (v101 < (unint64_t)v87);
      }
      v135[1] = v102;
      if (v97 != v100)
      {
        v105 = 16 * ((v97 - v100) >> 4);
        v106 = v97 - 24;
        do
        {
          v107 = *(_QWORD *)&v92[v105 - 48];
          *(_QWORD *)&v92[v105 - 48] = 0;
          v108 = (void *)*((_QWORD *)v106 - 3);
          *((_QWORD *)v106 - 3) = v107;

          v109 = *(_QWORD *)&v92[v105 - 40];
          *(_QWORD *)&v92[v105 - 40] = 0;
          v110 = (void *)*((_QWORD *)v106 - 2);
          *((_QWORD *)v106 - 2) = v109;

          *((_DWORD *)v106 - 2) = *(_DWORD *)&v92[v105 - 32];
          v111 = *(_QWORD *)&v92[v105 - 24];
          *(_QWORD *)&v92[v105 - 24] = 0;
          v112 = *(void **)v106;
          *(_QWORD *)v106 = v111;

          *(_OWORD *)(v106 + 8) = *(_OWORD *)&v92[v105 - 16];
          v106 -= 48;
          v105 -= 48;
        }
        while (v105);
      }
      for (; v88 != v96; v92 += 48)
      {
        objc_storeStrong((id *)v92, *v88);
        objc_storeStrong((id *)v92 + 1, v88[1]);
        *((_DWORD *)v92 + 4) = *((_DWORD *)v88 + 4);
        objc_storeStrong((id *)v92 + 3, v88[3]);
        *((_OWORD *)v92 + 2) = *((_OWORD *)v88 + 2);
        v88 += 6;
      }
    }
    else
    {
      v93 = v90 + v91;
      if ((unint64_t)(v90 + v91) > 0x555555555555555)
        sub_1BE61F930();
      if (0x5555555555555556 * ((v15 - (uint64_t)v86) >> 4) > v93)
        v93 = 0x5555555555555556 * ((v15 - (uint64_t)v86) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v86) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v94 = 0x555555555555555;
      else
        v94 = v93;
      if (v94)
      {
        if (v94 > 0x555555555555555)
          sub_1BE61F100();
        v95 = (char *)operator new(48 * v94);
      }
      else
      {
        v95 = 0;
      }
      v113 = &v95[48 * v91];
      v114 = &v113[48 * v90];
      v115 = v113;
      do
      {
        *(_QWORD *)v115 = *v88;
        *((_QWORD *)v115 + 1) = v88[1];
        *((_DWORD *)v115 + 4) = *((_DWORD *)v88 + 4);
        *((_QWORD *)v115 + 3) = v88[3];
        *((_OWORD *)v115 + 2) = *((_OWORD *)v88 + 2);
        v115 += 48;
        v88 += 6;
      }
      while (v115 != v114);
      v116 = (char *)*v135;
      if (*v135 != v92)
      {
        v117 = 48 * v91;
        v118 = v95;
        do
        {
          v119 = &v118[v117];
          v120 = &v86[v117];
          v121 = *(_OWORD *)&v86[v117 - 48];
          *((_QWORD *)v120 - 6) = 0;
          *((_QWORD *)v120 - 5) = 0;
          *((_OWORD *)v119 - 3) = v121;
          *((_DWORD *)v119 - 8) = *(_DWORD *)&v86[v117 - 32];
          v122 = *(_QWORD *)&v86[v117 - 24];
          *((_QWORD *)v120 - 3) = 0;
          *((_QWORD *)v119 - 3) = v122;
          *((_OWORD *)v119 - 1) = *(_OWORD *)&v86[v117 - 16];
          v86 -= 48;
          v118 -= 48;
        }
        while (&v86[v117] != v116);
        v113 = &v118[48 * v91];
      }
      v123 = &v95[48 * v94];
      v124 = (char *)v135[1];
      if (v124 != v92)
      {
        do
        {
          v125 = *(_OWORD *)v92;
          *(_QWORD *)v92 = 0;
          *((_QWORD *)v92 + 1) = 0;
          *(_OWORD *)v114 = v125;
          *((_DWORD *)v114 + 4) = *((_DWORD *)v92 + 4);
          v126 = *((_QWORD *)v92 + 3);
          *((_QWORD *)v92 + 3) = 0;
          *((_QWORD *)v114 + 3) = v126;
          *((_OWORD *)v114 + 2) = *((_OWORD *)v92 + 2);
          v114 += 48;
          v92 += 48;
        }
        while (v92 != v124);
        v92 = (char *)v135[1];
      }
      v127 = (char *)*v135;
      *v135 = v113;
      v135[1] = v114;
      v135[2] = v123;
      while (v92 != v127)
      {

        v128 = (void *)*((_QWORD *)v92 - 6);
        v92 -= 48;

      }
      if (v127)
        operator delete(v127);
    }
LABEL_123:
    sub_1BE62033C((uint64_t)&v145, v146);
    v129 = (char *)__p;
    if (__p)
    {
      for (k = v149; k != v129; k -= 48)
      {

        v131 = (void *)*((_QWORD *)k - 6);
      }
      operator delete(v129);
    }
    v132 = (char *)v151;
    if (v151)
    {
      for (m = v152; m != v132; m -= 48)
      {

        v134 = (void *)*((_QWORD *)m - 6);
      }
      operator delete(v132);
    }
    return;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v7, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: holder is empty", buf, 2u);
  }

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1BE87B458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_1BE62033C((uint64_t)&a27, a28);
  sub_1BE7EE3B8(&a30);
  sub_1BE7EE3B8(&a33);
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations::proceedRequestResult(uint64_t a1, _DWORD *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char isEqualToString;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  int v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  NSObject *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t i;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  char v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float v153;
  NSObject *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  double MaxX;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  double v235;
  double v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  double v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  CoreHandwriting::synthesis::fast_path *v249;
  float v250;
  float v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  int v258;
  void *v259;
  _BYTE buf[24];
  uint64_t v261;
  CGRect v262;
  CGRect v263;
  CGRect v264;

  v261 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend_drawing(v5, v6, v7, v8, v9, v10);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v16
    || (objc_msgSend_drawing(v5, v11, v12, v13, v14, v15),
        v17 = (void *)objc_claimAutoreleasedReturnValue(),
        v23 = objc_msgSend_pointCount(v17, v18, v19, v20, v21, v22),
        v17,
        v16,
        !v23))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v76 = (id)qword_1EF568E60;
    if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    v83 = "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: result drawing is nill";
LABEL_15:
    _os_log_impl(&dword_1BE607000, v76, OS_LOG_TYPE_ERROR, v83, buf, 2u);
    goto LABEL_16;
  }
  objc_msgSend_segmentContents(v5, v24, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v29)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v76 = (id)qword_1EF568E60;
    if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    v83 = "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: segmentContents is nill";
    goto LABEL_15;
  }
  v35 = a2[4];
  if (v35 == 2)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v84 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v84, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: start process result from refined style sample.", buf, 2u);
    }

    for (i = 0; ; ++i)
    {
      objc_msgSend_segmentContents(v5, v85, v86, v87, v88, v89);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      v97 = i < objc_msgSend_count(v91, v92, v93, v94, v95, v96);

      if (!v97)
        goto LABEL_42;
      objc_msgSend_segmentContents(v5, v98, v99, v100, v101, v102);
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v103, v104, i, v105, v106, v107);
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      unicodeToNSString(a2[8], v109, v110, v111, v112, v113);
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend_isEqualToString_(v108, v115, (uint64_t)v114, v116, v117, v118) & 1) != 0)
      {
        objc_msgSend_contractViolations(v5, v119, v120, v121, v122, v123);
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        v125 = sub_1BE87BED4(i, v124);

        if ((v125 & 1) == 0)
        {
          objc_msgSend_drawing(v5, v85, v86, v87, v88, v89);
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_segmentStrokeIndexes(v5, v133, v134, v135, v136, v137);
          v138 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v138, v139, i, v140, v141, v142);
          v143 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_drawingWithStrokesFromIndexSet_(v132, v144, (uint64_t)v143, v145, v146, v147);
          v76 = objc_claimAutoreleasedReturnValue();

          if (!v76)
          {
LABEL_42:
            if (qword_1EF568E88 == -1)
            {
              v76 = (id)qword_1EF568E60;
              if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
                goto LABEL_16;
            }
            else
            {
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
              v76 = (id)qword_1EF568E60;
              if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
                goto LABEL_16;
            }
            unicodeToNSString(a2[8], v161, v162, v163, v164, v165);
            v166 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v166;
            _os_log_impl(&dword_1BE607000, v76, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: error add initial character %@ to holder", buf, 0xCu);

            goto LABEL_16;
          }
          objc_msgSend_bounds(v76, v148, v149, v150, v151, v152);
          v153 = CGRectGetMaxX(v262) + 1.0;
          CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSynthesizedData((CoreHandwriting::synthesis::fast_path *)v76, (CHDrawing *)a2[8], v153, -1.0, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 36), (CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)buf);
          CHOSLogForCategory(9);
          v154 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
          {
            unicodeToNSString(a2[8], v155, v156, v157, v158, v159);
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            v258 = 138412290;
            v259 = v160;
            _os_log_impl(&dword_1BE607000, v154, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: add initial character %@ to holder", (uint8_t *)&v258, 0xCu);

          }
LABEL_41:

          (*(void (**)(_QWORD, _BYTE *, _QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), buf, a2[9]);
LABEL_16:

          goto LABEL_17;
        }
      }
      else
      {

      }
    }
  }
  if (!v35)
  {
    objc_msgSend_segmentContents(v5, v30, v31, v32, v33, v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v36, v37, v38, v39, v40, v41))
    {
      objc_msgSend_segmentContents(v5, v42, v43, v44, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v47, v48, 0, v49, v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      unicodeToNSString(a2[8], v53, v54, v55, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v52, v59, (uint64_t)v58, v60, v61, v62);

      if ((isEqualToString & 1) != 0)
      {
        objc_msgSend_contractViolations(v5, v64, v65, v66, v67, v68);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v70 = sub_1BE87BED4(0, v69);

        if (!v70)
        {
          objc_msgSend_drawing(v5, v71, v72, v73, v74, v75);
          v167 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_segmentStrokeIndexes(v5, v168, v169, v170, v171, v172);
          v173 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_firstObject(v173, v174, v175, v176, v177, v178);
          v179 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_drawingWithStrokesFromIndexSet_(v167, v180, (uint64_t)v179, v181, v182, v183);
          v76 = objc_claimAutoreleasedReturnValue();

          objc_msgSend_drawing(v5, v184, v185, v186, v187, v188);
          v189 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_bounds(v189, v190, v191, v192, v193, v194);
          MaxX = CGRectGetMaxX(v263);

          objc_msgSend_segmentStrokeIndexes(v5, v196, v197, v198, v199, v200);
          v201 = (void *)objc_claimAutoreleasedReturnValue();
          v207 = objc_msgSend_count(v201, v202, v203, v204, v205, v206);

          if (v207 >= 2)
          {
            objc_msgSend_drawing(v5, v208, v209, v210, v211, v212);
            v213 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_segmentStrokeIndexes(v5, v214, v215, v216, v217, v218);
            v219 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectAtIndexedSubscript_(v219, v220, 1, v221, v222, v223);
            v224 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_drawingWithStrokesFromIndexSet_(v213, v225, (uint64_t)v224, v226, v227, v228);
            v229 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_bounds(v229, v230, v231, v232, v233, v234);
            MaxX = CGRectGetMaxX(v264);

          }
          objc_msgSend_bounds(v76, v208, v209, v210, v211, v212);
          v236 = v235;
          objc_msgSend_bounds(v76, v237, v238, v239, v240, v241);
          v243 = v242;
          objc_msgSend_drawing(v5, v244, v245, v246, v247, v248);
          v249 = (CoreHandwriting::synthesis::fast_path *)objc_claimAutoreleasedReturnValue();
          v250 = v236 + v243 + 0.001;
          v251 = MaxX;
          CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSynthesizedData(v249, (CHDrawing *)a2[8], v250, v251, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 36), (CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)buf);

          CHOSLogForCategory(9);
          v154 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
          {
            unicodeToNSString(a2[8], v252, v253, v254, v255, v256);
            v257 = (void *)objc_claimAutoreleasedReturnValue();
            v258 = 138412290;
            v259 = v257;
            _os_log_impl(&dword_1BE607000, v154, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: add initial character %@ to holder", (uint8_t *)&v258, 0xCu);

          }
          goto LABEL_41;
        }
        CHOSLogForCategory(9);
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          unicodeToNSString(a2[8], v77, v78, v79, v80, v81);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v82;
          _os_log_impl(&dword_1BE607000, v76, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: error add initial character %@ to holder", buf, 0xCu);

        }
        goto LABEL_16;
      }
    }
    else
    {

    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v76 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      unicodeToNSString(a2[8], v126, v127, v128, v129, v130);
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v131;
      _os_log_impl(&dword_1BE607000, v76, OS_LOG_TYPE_ERROR, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: error add initial character %@ to holder. Segment content not matched.", buf, 0xCu);

    }
    goto LABEL_16;
  }
LABEL_17:

}

void sub_1BE87BD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE87BED4(unint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  unint64_t v17;
  BOOL v18;
  NSObject *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  int v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v3 = a2;
  v6 = 0;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v22, (uint64_t)v28, 16, v5);
  if (v12)
  {
    v14 = *(_QWORD *)v23;
    *(_QWORD *)&v13 = 67109120;
    v21 = v13;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v23 != v14)
          objc_enumerationMutation(v3);
        v16 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        v17 = objc_msgSend_locationRange(v16, v7, v8, v9, v10, v11, v21, (_QWORD)v22);
        v18 = a1 < v17 || a1 - v17 >= (unint64_t)v7;
        if (!v18 && (unint64_t)(objc_msgSend_kind(v16, v7, v8, v9, v10, v11) - 1) < 2)
        {
          if (qword_1EF568E88 == -1)
          {
            v19 = (id)qword_1EF568E60;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              goto LABEL_14;
          }
          else
          {
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v19 = (id)qword_1EF568E60;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
LABEL_14:
              *(_DWORD *)buf = v21;
              v27 = a1;
              _os_log_impl(&dword_1BE607000, v19, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterPersonalizerWithSuffixForInitAndForDigitsVariations: segment %d not suitable for proceeding.", buf, 8u);
            }
          }

          v6 = 1;
          continue;
        }
      }
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v22, (uint64_t)v28, 16, v11);
    }
    while (v12);
  }

  return v6 & 1;
}

void sub_1BE87C0AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE87C0D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = &unk_1E77EF8B8;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);

    return a1;
  }
  else
  {
LABEL_5:

    return a1;
  }
}

void sub_1BE87C158(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = &unk_1E77EF8B8;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE87C1D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = &unk_1E77EF8B8;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);

    return a1;
  }
  else
  {
LABEL_5:

    return a1;
  }
}

void sub_1BE87C260(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = &unk_1E77EF8B8;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  JUMPOUT(0x1C3B812ECLL);
}

void sub_1BE87C2E0()
{
  sub_1BE61C778("vector");
}

char *sub_1BE87C2F4(void **a1, __int128 *a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  id *v20;
  void *v21;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (_BYTE *)*a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_1BE61F930();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 4) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_1BE61F100();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a2;
  v11 = &v9[48 * v4];
  v12 = &v9[48 * v8];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v11 = v10;
  *((_DWORD *)v11 + 4) = *((_DWORD *)a2 + 4);
  v13 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)v11 + 3) = v13;
  *((_OWORD *)v11 + 2) = a2[2];
  v14 = v11 + 48;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v2)
      return v14;
    goto LABEL_17;
  }
  v15 = 0;
  do
  {
    v16 = &v11[v15];
    v17 = &v2[v15];
    v18 = *(_OWORD *)&v2[v15 - 48];
    *((_QWORD *)v17 - 6) = 0;
    *((_QWORD *)v17 - 5) = 0;
    *((_OWORD *)v16 - 3) = v18;
    *((_DWORD *)v16 - 8) = *(_DWORD *)&v2[v15 - 32];
    v19 = *(_QWORD *)&v2[v15 - 24];
    *((_QWORD *)v17 - 3) = 0;
    *((_QWORD *)v16 - 3) = v19;
    *((_OWORD *)v16 - 1) = *(_OWORD *)&v2[v15 - 16];
    v15 -= 48;
  }
  while (&v2[v15] != v3);
  v2 = (char *)*a1;
  v20 = (id *)a1[1];
  *a1 = &v11[v15];
  a1[1] = v14;
  a1[2] = v12;
  while (v20 != (id *)v2)
  {

    v21 = *(v20 - 6);
    v20 -= 6;

  }
  if (v2)
LABEL_17:
    operator delete(v2);
  return v14;
}

void sub_1BE87C784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE87C7C0(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  void *BaseAddress;
  vImagePixelCount v9;
  id v10;
  NSObject *v11;
  id v12;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(void **)(a1 + 32) != a3)
  {
    if (qword_1EF568E88 == -1)
    {
      v6 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
LABEL_5:

        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v6 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
        goto LABEL_5;
    }
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134218240;
    v14 = a3;
    v15 = 2048;
    v16 = v7;
    _os_log_impl(&dword_1BE607000, v6, OS_LOG_TYPE_FAULT, "Multi array size (%ld) does not match IOSurface bytes per row (%zu)", buf, 0x16u);
    goto LABEL_5;
  }
LABEL_6:
  BaseAddress = IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(a1 + 40));
  v9 = *(_QWORD *)(a1 + 48);
  v12 = 0;
  CHConvertFloat32BufferToFloat16Buffer(a2, BaseAddress, v9, &v12);
  v10 = v12;
  if (v10)
  {
    if (qword_1EF568E88 == -1)
    {
      v11 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
LABEL_10:

        goto LABEL_11;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v11 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_10;
    }
    *(_DWORD *)buf = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_ERROR, "Could not convert float32 buffer to float16 buffer: %@", buf, 0xCu);
    goto LABEL_10;
  }
LABEL_11:

}

void sub_1BE87CB48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE87CF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_1BE87D200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1BE87D26C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE87D288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE87D2A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE87D2B0(uint64_t a1)
{

}

uint64_t sub_1BE87D2B8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t i;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t j;
  uint64_t v83;
  void *v84;
  id v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v120;

  v3 = objc_retainAutorelease(a2);
  v14 = (void *)objc_msgSend_bytes(v3, v4, v5, v6, v7, v8);
  if (*(_QWORD *)(a1 + 56) == 65552)
  {
    v15 = objc_msgSend_length(v3, v9, v10, v11, v12, v13);
    v16 = malloc_type_calloc(2 * v15, 1uLL, 0x8C80D3E4uLL);
    v22 = objc_msgSend_length(v3, v17, v18, v19, v20, v21);
    CHConvertFloat16BufferToFloat32Buffer(v14, v16, v22 >> 1, 0);
  }
  else
  {
    v28 = objc_msgSend_length(v3, v9, v10, v11, v12, v13);
    v16 = malloc_type_calloc(v28, 1uLL, 0xD0A9B700uLL);
    v34 = objc_msgSend_length(v3, v29, v30, v31, v32, v33);
    memcpy(v14, v16, v34);
  }
  v35 = (void *)MEMORY[0x1E0C99DE8];
  v36 = objc_msgSend_rank(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
  objc_msgSend_arrayWithCapacity_(v35, v37, v36, v38, v39, v40);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i < objc_msgSend_rank(*(void **)(a1 + 32), v41, v42, v43, v44, v45); ++i)
  {
    v53 = (void *)MEMORY[0x1E0CB37E8];
    v54 = objc_retainAutorelease(*(id *)(a1 + 32));
    v60 = objc_msgSend_sizes(v54, v55, v56, v57, v58, v59);
    objc_msgSend_numberWithUnsignedLong_(v53, v61, *(_QWORD *)(v60 + 8 * i), v62, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v46, v66, (uint64_t)v65, v67, v68, v69);

  }
  v120 = v3;
  v70 = (void *)MEMORY[0x1E0C99DE8];
  v71 = objc_msgSend_rank(*(void **)(a1 + 40), v48, v49, v50, v51, v52);
  objc_msgSend_arrayWithCapacity_(v70, v72, v71, v73, v74, v75);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  for (j = 0; j < objc_msgSend_rank(*(void **)(a1 + 40), v76, v77, v78, v79, v80); ++j)
  {
    v83 = *(_QWORD *)(a1 + 56);
    v84 = (void *)MEMORY[0x1E0CB37E8];
    v85 = objc_retainAutorelease(*(id *)(a1 + 40));
    v95 = *(_QWORD *)(objc_msgSend_byteOffsets(v85, v86, v87, v88, v89, v90) + 8 * j);
    if (v83 == 65552)
      v96 = 1;
    else
      v96 = 2;
    objc_msgSend_numberWithUnsignedLong_(v84, v91, v95 >> v96, v92, v93, v94);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v81, v98, (uint64_t)v97, v99, v100, v101);

  }
  v102 = objc_alloc(MEMORY[0x1E0C9E970]);
  v108 = (void *)objc_msgSend_copy(v46, v103, v104, v105, v106, v107);
  v114 = (void *)objc_msgSend_copy(v81, v109, v110, v111, v112, v113);
  v116 = objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v102, v115, (uint64_t)v16, (uint64_t)v108, 65568, (uint64_t)v114, &unk_1E77F1B10, 0);
  v117 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v118 = *(void **)(v117 + 40);
  *(_QWORD *)(v117 + 40) = v116;

  return 1;
}

void sub_1BE87D518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE87D5A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE87D5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE87D5DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE87D5F0(int a1, void *a2)
{
  free(a2);
}

void sub_1BE87D870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE87DA1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::inplaceLinearCombination(CoreHandwriting::synthesis *this, double a2, MLMultiArray *a3, float a4, MLMultiArray *a5)
{
  CoreHandwriting::synthesis *v6;
  MLMultiArray *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  MLMultiArray *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t *v43;
  float32x4_t *v44;
  uint64_t v45;
  float32x4_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  CoreHandwriting::synthesis *v50;

  v6 = this;
  v7 = a3;
  v50 = objc_retainAutorelease(v6);
  v13 = objc_msgSend_dataPointer(v50, v8, v9, v10, v11, v12);
  v14 = objc_retainAutorelease(v7);
  v20 = objc_msgSend_dataPointer(v14, v15, v16, v17, v18, v19);
  v26 = objc_msgSend_count(v50, v21, v22, v23, v24, v25);
  v32 = objc_msgSend_count(v14, v27, v28, v29, v30, v31);
  if (!v26 || !v32)
    goto LABEL_19;
  v33 = (v32 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v34 = (v26 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v33 >= v34)
    v35 = (v26 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  else
    v35 = (v32 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v35 < 0xB)
  {
    v36 = v20;
    v37 = v13;
LABEL_15:
    v47 = v36 + 4;
    v48 = v37 + 4;
    do
    {
      *(float *)(v48 - 4) = (float)(*(float *)(v47 - 4) * a4) + (float)(*(float *)&a2 * *(float *)(v48 - 4));
      if (v48 == v13 + 4 * v26)
        break;
      v48 += 4;
      v49 = v47 == v20 + 4 * v32;
      v47 += 4;
    }
    while (!v49);
    goto LABEL_19;
  }
  if (v33 >= v34)
    v33 = (v26 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v38 = 4 * v33 + 4;
  if (v13 < v20 + v38)
  {
    v39 = v13 + v38;
    v36 = v20;
    v37 = v13;
    if (v20 < v39)
      goto LABEL_15;
  }
  v40 = v35 + 1;
  v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
  v36 = v20 + v41;
  v37 = v13 + v41;
  v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
  v43 = (float32x4_t *)(v13 + 16);
  v44 = (float32x4_t *)(v20 + 16);
  v45 = v40 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v46 = vmlaq_f32(vmulq_n_f32(*v44, a4), *v43, v42);
    v43[-1] = vmlaq_f32(vmulq_n_f32(v44[-1], a4), v43[-1], v42);
    *v43 = v46;
    v43 += 2;
    v44 += 2;
    v45 -= 8;
  }
  while (v45);
  if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_15;
LABEL_19:

}

void sub_1BE87DBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE87DC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE87DC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE87DC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::generateMLMultiArrayWithGaussianNoiseWithPadding(void *a1, unint64_t a2, int a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t i;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  unint64_t v32;
  int v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t j;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float *v99;
  float *v100;
  _QWORD v101[314];

  v5 = a1;
  v6 = objc_alloc(MEMORY[0x1E0C9E970]);
  v9 = (void *)objc_msgSend_initWithShape_dataType_error_(v6, v7, (uint64_t)v5, 65568, 0, v8);
  v10 = 1;
  v11 = 5489;
  do
  {
    v11 = v10 + 0x5851F42D4C957F2DLL * (v11 ^ (v11 >> 62));
    v101[v10++] = v11;
  }
  while (v10 != 312);
  v12 = a3;
  v101[0] = a3;
  for (i = 1; i != 312; ++i)
  {
    v12 = i + 0x5851F42D4C957F2DLL * (v12 ^ (v12 >> 62));
    v101[i] = v12;
  }
  v14 = objc_retainAutorelease(v9);
  v20 = objc_msgSend_dataPointer(v14, v15, v16, v17, v18, v19);
  v26 = objc_msgSend_count(v14, v21, v22, v23, v24, v25);
  if (v26)
  {
    v32 = 0;
    v33 = 0;
    v34 = (float *)v20;
    v35 = (float *)(v20 + 4 * v26);
    v99 = v35;
    do
    {
      while (v33)
      {
        v33 = 0;
        *v34++ = v31 + 0.0;
        if (v34 == v35)
          goto LABEL_21;
      }
      v100 = v34;
      v36 = v101[v32];
      do
      {
        v37 = (v32 + 1) % 0x138;
        v38 = v37;
        v39 = v101[(v32 + 156) % 0x138] ^ ((v101[v37] & 0x7FFFFFFELL | v36 & 0xFFFFFFFF80000000) >> 1) ^ ((uint64_t)(v101[v37] << 63) >> 63) & 0xB5026F5AA96619E9;
        v101[v32] = v39;
        v40 = (v39 >> 29) & 0x555555555 ^ v39;
        if (v37 < 0x137)
          v32 = v37 + 1;
        else
          v32 = v37 - 311;
        v36 = v101[v32];
        v41 = (((v40 << 17) & 0x71D67FFFEDA60000 ^ v40) << 37) & 0xFFF7EEE000000000 ^ (v40 << 17) & 0x71D67FFFEDA60000 ^ v40;
        if (v37 < 0x9C)
          v42 = 156;
        else
          v42 = -156;
        v43 = v101[v42 + v37] ^ ((v101[v32] & 0x7FFFFFFELL | v101[v37] & 0xFFFFFFFF80000000) >> 1) ^ ((uint64_t)(v101[v32] << 63) >> 63) & 0xB5026F5AA96619E9;
        v44 = (float)(v41 ^ (v41 >> 43));
        v45 = (((v43 >> 29) & 0x555555555 ^ v43) << 17) & 0x71D67FFFEDA60000 ^ (v43 >> 29) & 0x555555555 ^ v43;
        v46 = (float)((float)(v44 * 5.421e-20) * 2.0) + -1.0;
        v47 = (float)((float)((float)((v45 << 37) & 0xFFF7EEE000000000 ^ v45 ^ (((v45 << 37) & 0xFFF7EEE000000000 ^ v45) >> 43))
                            * 5.421e-20)
                    * 2.0)
            + -1.0;
        v48 = (float)(v47 * v47) + (float)(v46 * v46);
        v101[v38] = v43;
      }
      while (v48 > 1.0 || v48 == 0.0);
      v49 = sqrtf((float)(logf((float)(v47 * v47) + (float)(v46 * v46)) * -2.0) / v48);
      v31 = v47 * v49;
      v33 = 1;
      v35 = v99;
      *v100 = (float)(v46 * v49) + 0.0;
      v34 = v100 + 1;
    }
    while (v100 + 1 != v99);
  }
LABEL_21:
  while (1)
  {
    objc_msgSend_objectAtIndexedSubscript_(v5, v27, 1, v28, v29, v30, v99);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = objc_msgSend_unsignedLongValue(v50, v51, v52, v53, v54, v55);

    if (a2 >= v56)
      break;
    for (j = 0; ; ++j)
    {
      objc_msgSend_objectAtIndexedSubscript_(v5, v57, 2, v58, v59, v60);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = objc_msgSend_unsignedLongValue(v62, v63, v64, v65, v66, v67);

      if (j >= v68)
        break;
      objc_msgSend_strides(v14, v27, v69, v28, v29, v30);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v70, v71, 1, v72, v73, v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      v81 = objc_msgSend_unsignedLongValue(v75, v76, v77, v78, v79, v80);
      objc_msgSend_strides(v14, v82, v83, v84, v85, v86);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v87, v88, 2, v89, v90, v91);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)(v20 + 4 * v81 * a2 + 4 * objc_msgSend_unsignedLongValue(v92, v93, v94, v95, v96, v97) * j) = 0;

    }
    ++a2;
  }

  return v14;
}

void sub_1BE87E01C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE87E030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE87E044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE87E054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE87E0B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::CHDiffusionSampler::setForwardRatio(uint64_t this, float a2)
{
  float v2;
  BOOL v3;
  float v4;

  v2 = 1.0;
  if (a2 <= 1.0)
    v2 = a2;
  v3 = a2 < 0.0;
  v4 = 0.0;
  if (!v3)
    v4 = v2;
  *(float *)(this + 8) = v4;
  return this;
}

uint64_t CoreHandwriting::synthesis::CHDiffusionSampler::setBackwardRatio(uint64_t this, float a2)
{
  float v2;
  BOOL v3;
  float v4;

  v2 = 1.0;
  if (a2 <= 1.0)
    v2 = a2;
  v3 = a2 < 0.0;
  v4 = 0.0;
  if (!v3)
    v4 = v2;
  *(float *)(this + 12) = v4;
  return this;
}

id CoreHandwriting::synthesis::CHDiffusionSampler::sample(uint64_t a1, void *a2, uint64_t a3, CoreHandwriting::synthesis::CHDiffusionSynthesisModel *a4, void *a5)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  CoreHandwriting::synthesis *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  MLMultiArray *v89;
  double v90;
  MLMultiArray *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  NSObject *v109;
  NSObject *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  float v189;
  id v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  id v207;
  const char *v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  double v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  id v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  __n128 v264;
  void *v265;
  const char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  id v271;
  const char *v272;
  uint64_t v273;
  void *v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  double v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void *v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  id v293;
  const char *v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  id v298;
  void *v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  const char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  MLMultiArray *v310;
  double v311;
  MLMultiArray *v312;
  uint64_t v313;
  uint64_t v314;
  void **v315;
  _QWORD *v316;
  void **v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  void **v321;
  void *v322;
  void *v323;
  void *v324;
  void **v325;
  void **v326;
  _QWORD *v327;
  _QWORD *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  _BOOL4 v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  char *v342;
  uint64_t v343;
  char *v344;
  char *v345;
  _QWORD *v346;
  _QWORD *v347;
  unint64_t v348;
  char *v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  __int128 *v354;
  char *v355;
  uint64_t v356;
  __int128 v357;
  __int128 v358;
  uint64_t v359;
  _QWORD *v360;
  void *v361;
  void *v362;
  uint64_t v363;
  uint64_t v364;
  void *v365;
  void *v366;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  char *v372;
  char *v373;
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  char *v378;
  void *v379;
  NSObject *v380;
  const char *v381;
  NSObject *v382;
  os_log_type_t v383;
  NSObject *v384;
  unsigned int v385;
  MLMultiArray *v386;
  MLMultiArray *v388;
  CoreHandwriting::synthesis *obj;
  unsigned int (**v390)(void);
  id v391;
  void *v392;
  unsigned int *v393;
  void *v394;
  void *v396;
  id v397;
  id v398;
  uint8_t v399[8];
  uint8_t buf[40];
  _QWORD v401[5];

  v401[3] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v390 = a5;
  v396 = v7;
  objc_msgSend_objectForKey_(v7, v8, (uint64_t)CFSTR("input_length"), v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v12, v13, 0, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v386 = (MLMultiArray *)objc_msgSend_integerValue(v17, v18, v19, v20, v21, v22);

  objc_msgSend_objectForKeyedSubscript_(v7, v23, (uint64_t)CFSTR("input_labels"), v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_shape(v27, v28, v29, v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v33, v34, 1, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend_integerValue(v38, v39, v40, v41, v42, v43);

  objc_msgSend_objectForKeyedSubscript_(v396, v45, (uint64_t)CFSTR("input_style_labels"), v46, v47, v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_shape(v49, v50, v51, v52, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v55, v56, 1, v57, v58, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = objc_msgSend_integerValue(v60, v61, v62, v63, v64, v65);

  if (v44 <= v66)
    v67 = v66;
  else
    v67 = v44;
  if (v67 >= 9)
    v68 = 1152;
  else
    v68 = 192;
  if (*(float *)(a1 + 8) >= 1.0)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v110 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v110, OS_LOG_TYPE_DEBUG, "DiffusionSampler: starting from noise", buf, 2u);
    }

    v401[0] = &unk_1E7829450;
    objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v111, v68, v112, v113, v114);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v401[1] = v83;
    v401[2] = &unk_1E7829468;
    objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v115, (uint64_t)v401, 3, v116, v117);
    v109 = objc_claimAutoreleasedReturnValue();
    CoreHandwriting::synthesis::generateMLMultiArrayWithGaussianNoiseWithPadding(v109, (unint64_t)v386, *(_DWORD *)(a1 + 4));
    v391 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
    v70 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(a3, v69);
    v72 = v71;
    objc_msgSend_objectForKeyedSubscript_(v396, v73, (uint64_t)CFSTR("input_diffusion_x_timestep"), v74, v75, v76);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_shape(v77, v78, v79, v80, v81, v82);
    v83 = (void *)objc_claimAutoreleasedReturnValue();

    CoreHandwriting::synthesis::generateMLMultiArrayWithGaussianNoiseWithPadding(v83, (unint64_t)v386, *(_DWORD *)(a1 + 4));
    v84 = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v396, v85, (uint64_t)CFSTR("input_diffusion_x_timestep"), v86, v87, v88);
    v89 = (MLMultiArray *)objc_claimAutoreleasedReturnValue();
    *(float *)&v90 = v72;
    v391 = v84;
    CoreHandwriting::synthesis::inplaceLinearCombination(v84, v90, v89, v70, v91);

    objc_msgSend_objectAtIndexedSubscript_(v83, v92, 1, v93, v94, v95);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v102 = objc_msgSend_unsignedLongValue(v96, v97, v98, v99, v100, v101) & 0xF;

    if (v102)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v103 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v103, OS_LOG_TYPE_FAULT))
      {
        objc_msgSend_objectAtIndexedSubscript_(v83, v104, 1, v105, v106, v107);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v108;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 16;
        _os_log_impl(&dword_1BE607000, v103, OS_LOG_TYPE_FAULT, "Unexpected length=%@ is not divisible by %i", buf, 0x12u);

      }
    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v109 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v69;
      *(_WORD *)&buf[8] = 2048;
      *(double *)&buf[10] = v70;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v72;
      _os_log_impl(&dword_1BE607000, v109, OS_LOG_TYPE_DEBUG, "DiffusionSampler: starting timestep %i with x0 * %1.3f + noise * %1.3f", buf, 0x1Cu);
    }
  }

  v123.n128_u32[0] = *(_DWORD *)a1;
  if (*(float *)a1 <= 0.0)
  {
    v392 = 0;
  }
  else
  {
    v392 = (void *)objc_msgSend_mutableCopy(v396, v118, v119, v120, v121, v122, v123.n128_f64[0]);
    memset(buf, 0, 24);
    objc_msgSend_objectForKey_(v396, v124, (uint64_t)CFSTR("input_labels_length"), v125, v126, v127);
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v128, v129, 0, v130, v131, v132);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    v139 = objc_msgSend_integerValue(v133, v134, v135, v136, v137, v138);
    *(_QWORD *)v399 = *((_QWORD *)a4 + 15);
    v140 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
    if (v139 <= v140)
    {
      if (v139 < v140)
        *(_QWORD *)&buf[8] = *(_QWORD *)buf + 8 * v139;
    }
    else
    {
      sub_1BE67B534((uint64_t)buf, v139 - v140, (uint64_t *)v399);
    }

    objc_msgSend_objectForKeyedSubscript_(v396, v141, (uint64_t)CFSTR("input_labels"), v142, v143, v144);
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_shape(v145, v146, v147, v148, v149, v150);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v151, v152, 1, v153, v154, v155);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    v162 = objc_msgSend_integerValue(v156, v157, v158, v159, v160, v161);
    *(_QWORD *)v399 = *((_QWORD *)a4 + 15);
    v163 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
    if (v162 <= v163)
    {
      if (v162 < v163)
        *(_QWORD *)&buf[8] = *(_QWORD *)buf + 8 * v162;
    }
    else
    {
      sub_1BE67B534((uint64_t)buf, v162 - v163, (uint64_t *)v399);
    }

    objc_msgSend_objectForKeyedSubscript_(v396, v164, (uint64_t)CFSTR("input_labels"), v165, v166, v167);
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_shape(v168, v169, v170, v171, v172, v173);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE72B890(buf, v174);
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v392, v176, (uint64_t)v175, (uint64_t)CFSTR("input_labels"), v177, v178);

    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  memset(buf, 0, 24);
  v179 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a3 + 72))(a3, v123);
  v180 = v179;
  v181 = *(char **)buf;
  if (v179 <= (unint64_t)((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3))
    goto LABEL_43;
  if (v179 < 0)
    sub_1BE61F930();
  v182 = *(char **)&buf[8];
  v183 = (char *)operator new(8 * v179);
  v184 = v182 - v181;
  v185 = (unint64_t)&v183[(v182 - v181) & 0xFFFFFFFFFFFFFFF8];
  if (v182 == v181)
  {
    *(_QWORD *)buf = &v183[(v182 - v181) & 0xFFFFFFFFFFFFFFF8];
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    *(_QWORD *)&buf[16] = &v183[8 * v180];
    goto LABEL_41;
  }
  v186 = v184 - 8;
  if ((unint64_t)(v184 - 8) >= 0x78)
  {
    if ((unint64_t)&v182[-(v186 & 0xFFFFFFFFFFFFFFF8) - 8] >= v185
      || (v187 = &v183[(v182 - v181) & 0xFFFFFFFFFFFFFFF8],
          &v183[(v184 & 0xFFFFFFFFFFFFFFF8) - (v186 & 0xFFFFFFFFFFFFFFF8) - 8] >= v182))
    {
      v368 = v184 >> 3;
      v369 = (v186 >> 3) + 1;
      v370 = 8 * (v369 & 0x3FFFFFFFFFFFFFFCLL);
      v187 = (char *)(v185 - v370);
      v371 = &v182[-v370];
      v372 = v182 - 16;
      v373 = &v183[8 * v368 - 16];
      v374 = v369 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v376 = *((_OWORD *)v372 - 1);
        v375 = *(_OWORD *)v372;
        *((_OWORD *)v372 - 1) = 0uLL;
        *(_OWORD *)v372 = 0uLL;
        *((_OWORD *)v373 - 1) = v376;
        *(_OWORD *)v373 = v375;
        v372 -= 32;
        v373 -= 32;
        v374 -= 4;
      }
      while (v374);
      v182 = v371;
      if (v369 == (v369 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_118;
    }
  }
  else
  {
    v187 = &v183[(v182 - v181) & 0xFFFFFFFFFFFFFFF8];
  }
  do
  {
    v377 = *((_QWORD *)v182 - 1);
    v182 -= 8;
    *(_QWORD *)v182 = 0;
    *((_QWORD *)v187 - 1) = v377;
    v187 -= 8;
  }
  while (v182 != v181);
LABEL_118:
  v181 = *(char **)buf;
  v378 = *(char **)&buf[8];
  *(_QWORD *)buf = v187;
  *(_QWORD *)&buf[8] = v185;
  *(_QWORD *)&buf[16] = &v183[8 * v180];
  while (v378 != v181)
  {
    v379 = (void *)*((_QWORD *)v378 - 1);
    v378 -= 8;

  }
LABEL_41:
  if (v181)
    operator delete(v181);
LABEL_43:
  v393 = (unsigned int *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a3 + 24))(a3, *(float *)(a1 + 12));
  v388 = 0;
  v394 = 0;
  while (v393 != (unsigned int *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a3 + 32))(a3, *(float *)(a1 + 12)))
  {
    v188 = *v393;
    v189 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(a3, v188);
    if (v390 && v390[2]())
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v380 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v380, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v399 = 0;
        v381 = "DiffusionSampler: received shouldCancel. Aborting sampling process.";
        v382 = v380;
        v383 = OS_LOG_TYPE_DEFAULT;
LABEL_104:
        _os_log_impl(&dword_1BE607000, v382, v383, v381, v399, 2u);
      }
LABEL_105:

      v362 = 0;
      goto LABEL_106;
    }
    v190 = objc_retainAutorelease(v391);
    v196 = objc_msgSend_dataPointer(v190, v191, v192, v193, v194, v195);
    v202 = objc_msgSend_count(v190, v197, v198, v199, v200, v201);
    if (v202)
    {
      v206 = 4 * v202;
      do
      {
        v196 += 4;
        v206 -= 4;
      }
      while (v206);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v396, v203, (uint64_t)v190, (uint64_t)CFSTR("input_diffusion_x_timestep"), v204, v205);
    v207 = objc_alloc(MEMORY[0x1E0C9E970]);
    v210 = (void *)objc_msgSend_initWithShape_dataType_error_(v207, v208, (uint64_t)&unk_1E7828040, 65568, 0, v209);
    objc_msgSend_setObject_forKeyedSubscript_(v396, v211, (uint64_t)v210, (uint64_t)CFSTR("input_diffusion_timestep"), v212, v213);

    *(float *)&v214 = v189;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v215, v216, v217, v218, v219, v214);
    v220 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v396, v221, (uint64_t)CFSTR("input_diffusion_timestep"), v222, v223, v224);
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_atIndexedSubscript_(v225, v226, (uint64_t)v220, 0, v227, v228);

    if (v394)
      objc_msgSend_setObject_forKeyedSubscript_(v396, v229, (uint64_t)v394, (uint64_t)CFSTR("input_diffusion_style_encoding"), v230, v231);
    v232 = objc_alloc(MEMORY[0x1E0C9E8F8]);
    v398 = 0;
    v236 = (void *)objc_msgSend_initWithDictionary_error_(v232, v233, (uint64_t)v396, (uint64_t)&v398, v234, v235);
    v237 = v398;
    CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predict(a4, v236);
    v238 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v238)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v380 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v380, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v399 = 0;
        v381 = "DiffusionSampler: model prediction returned nil. Aborting.";
        v382 = v380;
        v383 = OS_LOG_TYPE_ERROR;
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    objc_msgSend_featureValueForName_(v238, v239, (uint64_t)CFSTR("pred_noise"), v240, v241, v242);
    v243 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_multiArrayValue(v243, v244, v245, v246, v247, v248);
    obj = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_featureValueForName_(v238, v249, (uint64_t)CFSTR("pred_penup"), v250, v251, v252);
    v253 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_multiArrayValue(v253, v254, v255, v256, v257, v258);
    v259 = objc_claimAutoreleasedReturnValue();

    v388 = (MLMultiArray *)v259;
    if (!v394)
    {
      objc_msgSend_featureValueForName_(v238, v260, (uint64_t)CFSTR("diffusion_style_encoding"), v261, v262, v263);
      v265 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_multiArrayValue(v265, v266, v267, v268, v269, v270);
      v394 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v264.n128_u32[0] = *(_DWORD *)a1;
    if (*(float *)a1 != 0.0)
    {
      objc_msgSend_setObject_forKeyedSubscript_(v392, v260, (uint64_t)v190, (uint64_t)CFSTR("input_diffusion_x_timestep"), v262, v263, v264.n128_f64[0]);
      v271 = objc_alloc(MEMORY[0x1E0C9E970]);
      v274 = (void *)objc_msgSend_initWithShape_dataType_error_(v271, v272, (uint64_t)&unk_1E7828058, 65568, 0, v273);
      objc_msgSend_setObject_forKeyedSubscript_(v392, v275, (uint64_t)v274, (uint64_t)CFSTR("input_diffusion_timestep"), v276, v277);

      *(float *)&v278 = v189;
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v279, v280, v281, v282, v283, v278);
      v284 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v392, v285, (uint64_t)CFSTR("input_diffusion_timestep"), v286, v287, v288);
      v289 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_atIndexedSubscript_(v289, v290, (uint64_t)v284, 0, v291, v292);

      v293 = objc_alloc(MEMORY[0x1E0C9E8F8]);
      v397 = 0;
      v297 = (void *)objc_msgSend_initWithDictionary_error_(v293, v294, (uint64_t)v392, (uint64_t)&v397, v295, v296);
      v298 = v397;
      CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predict(a4, v297);
      v299 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v299)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v384 = (id)qword_1EF568E60;
        if (os_log_type_enabled(v384, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v399 = 0;
          _os_log_impl(&dword_1BE607000, v384, OS_LOG_TYPE_ERROR, "DiffusionSampler: model prediction returned nil. Aborting.", v399, 2u);
        }

        v380 = obj;
        goto LABEL_105;
      }
      objc_msgSend_featureValueForName_(v299, v300, (uint64_t)CFSTR("pred_noise"), v301, v302, v303);
      v304 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_multiArrayValue(v304, v305, v306, v307, v308, v309);
      v310 = (MLMultiArray *)objc_claimAutoreleasedReturnValue();

      LODWORD(v311) = *(_DWORD *)a1;
      CoreHandwriting::synthesis::inplaceLinearCombination(obj, v311, v310, 1.0 - *(float *)a1, v312);

      v238 = v299;
    }
    v314 = *(_QWORD *)buf;
    v313 = *(_QWORD *)&buf[8];
    if ((*(int (**)(uint64_t, __n128))(*(_QWORD *)a3 + 72))(a3, v264) != (v313 - v314) >> 3)
    {
      v327 = *(_QWORD **)&buf[8];
      if (*(_QWORD *)&buf[8] < *(_QWORD *)&buf[16])
      {
        *v327 = obj;
        v328 = v327 + 1;
LABEL_93:
        *(_QWORD *)&buf[8] = v328;
        goto LABEL_94;
      }
      v338 = *(_QWORD *)&buf[8] - *(_QWORD *)buf;
      v339 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
      if ((unint64_t)(v339 + 1) >> 61)
        sub_1BE61F930();
      v340 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
      if (v340 <= v339 + 1)
        v340 = v339 + 1;
      if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
        v341 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v341 = v340;
      v385 = v188;
      if (v341)
      {
        if (v341 >> 61)
          sub_1BE61F100();
        v342 = (char *)operator new(8 * v341);
        v343 = a3;
      }
      else
      {
        v343 = a3;
        v342 = 0;
      }
      v344 = &v342[8 * v339];
      v345 = &v342[8 * v341];
      *(_QWORD *)v344 = obj;
      v328 = v344 + 8;
      v346 = *(_QWORD **)buf;
      v347 = *(_QWORD **)&buf[8];
      if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
      {
        *(_QWORD *)buf = &v342[8 * v339];
        *(_QWORD *)&buf[8] = v344 + 8;
        *(_QWORD *)&buf[16] = v345;
        a3 = v343;
        v188 = v385;
      }
      else
      {
        v348 = *(_QWORD *)&buf[8] - *(_QWORD *)buf - 8;
        if (v348 < 0x78)
        {
          v349 = v345;
          a3 = v343;
          v188 = v385;
          goto LABEL_100;
        }
        v350 = (*(_QWORD *)&buf[8] - 8 - *(_QWORD *)buf) & 0xFFFFFFFFFFFFFFF8;
        v349 = v345;
        a3 = v343;
        v188 = v385;
        if (*(_QWORD *)&buf[8] - 8 - v350 < (unint64_t)v344
          && (unint64_t)&v342[v338 - v350 - 8] < *(_QWORD *)&buf[8])
        {
          goto LABEL_140;
        }
        v351 = (v348 >> 3) + 1;
        v352 = 8 * (v351 & 0x3FFFFFFFFFFFFFFCLL);
        v344 -= v352;
        v353 = (_QWORD *)(*(_QWORD *)&buf[8] - v352);
        v354 = (__int128 *)(*(_QWORD *)&buf[8] - 16);
        v355 = &v342[8 * v339 - 16];
        v356 = v351 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v358 = *(v354 - 1);
          v357 = *v354;
          *(v354 - 1) = 0uLL;
          *v354 = 0uLL;
          *((_OWORD *)v355 - 1) = v358;
          *(_OWORD *)v355 = v357;
          v354 -= 2;
          v355 -= 32;
          v356 -= 4;
        }
        while (v356);
        v347 = v353;
        if (v351 != (v351 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_140:
          do
          {
LABEL_100:
            v359 = *--v347;
            *v347 = 0;
            *((_QWORD *)v344 - 1) = v359;
            v344 -= 8;
          }
          while (v347 != v346);
        }
        v347 = *(_QWORD **)buf;
        v360 = *(_QWORD **)&buf[8];
        *(_QWORD *)buf = v344;
        *(_QWORD *)&buf[8] = v328;
        *(_QWORD *)&buf[16] = v349;
        while (v360 != v347)
        {
          v361 = (void *)*--v360;

        }
      }
      if (v347)
        operator delete(v347);
      goto LABEL_93;
    }
    objc_storeStrong(*(id **)buf, obj);
    v316 = *(_QWORD **)buf;
    v315 = *(void ***)&buf[8];
    if (*(_QWORD *)&buf[8] - *(_QWORD *)buf >= 9uLL)
    {
      v317 = (void **)(*(_QWORD *)buf + 8);
      if (*(_QWORD *)buf + 8 != *(_QWORD *)&buf[8])
      {
        v318 = **(_QWORD **)buf;
        v319 = *(_QWORD *)(*(_QWORD *)buf + 8);
        *(_QWORD *)(*(_QWORD *)buf + 8) = 0;
        *v316 = v319;
        v320 = (void *)v316[1];
        v316[1] = v318;

        v321 = (void **)(v316 + 2);
        if (v321 != v315)
        {
          do
          {
            v322 = *(v321 - 1);
            v323 = *v321;
            if (v321 - 1 == v317)
              v317 = v321;
            *v321 = 0;
            *(v321 - 1) = v323;
            v324 = *v321;
            *v321 = v322;

            ++v321;
          }
          while (v321 != v315);
          v325 = v321 - 1;
          if (v321 - 1 != v317)
          {
            v326 = v317;
            while (1)
            {
              v329 = *v325;
              *v325 = 0;
              v330 = *v326;
              *v326 = 0;
              v331 = *v325;
              *v325 = v330;

              v332 = *v326;
              *v326 = v329;

              ++v325;
              ++v326;
              v333 = v325 == v317;
              if (v326 == v315)
              {
                if (v325 == v317)
                  break;
                v326 = v317 + 1;
                while (1)
                {
                  v334 = *v325;
                  *v325 = 0;
                  v335 = *v317;
                  *v317 = 0;
                  v336 = *v325;
                  *v325 = v335;

                  v337 = *v317;
                  *v317 = v334;

                  v333 = ++v325 == v317;
                  if (v326 != v315)
                    break;
                  if (v325 == v317)
                    goto LABEL_94;
                }
              }
              if (v333)
                v317 = v326;
            }
          }
        }
      }
    }
LABEL_94:
    (*(void (**)(uint64_t, uint8_t *, uint64_t, id))(*(_QWORD *)a3 + 48))(a3, buf, v188, v190);
    v391 = (id)objc_claimAutoreleasedReturnValue();

    ++v393;
  }
  CoreHandwriting::synthesis::createDrawingFromDeltaFeatures((CoreHandwriting::synthesis *)v391, v388, v386);
  v362 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_106:

  v363 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v364 = *(_QWORD *)&buf[8];
    v365 = *(void **)buf;
    if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
    {
      do
      {
        v366 = *(void **)(v364 - 8);
        v364 -= 8;

      }
      while (v364 != v363);
      v365 = *(void **)buf;
    }
    *(_QWORD *)&buf[8] = v363;
    operator delete(v365);
  }

  return v362;
}

void sub_1BE87F1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{

  sub_1BE6DB9C4(&__p);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::FeatureArray::totalDataSize(int32x4_t **this)
{
  int32x4_t *v1;
  int32x4_t *v2;
  unint64_t v3;
  int v4;
  int32x4_t *v5;
  uint64_t v7;
  int32x4_t *v8;
  int32x4_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int v17;

  v2 = *this;
  v1 = this[1];
  if (*this == v1)
    return 1;
  v3 = (char *)v1 - (char *)v2 - 8;
  if (v3 >= 0x38)
  {
    v7 = (v3 >> 3) + 1;
    v5 = (int32x4_t *)((char *)v2 + 8 * (v7 & 0x3FFFFFFFFFFFFFF8));
    v8 = v2 + 2;
    v9.i64[0] = 0x100000001;
    v9.i64[1] = 0x100000001;
    v10 = v7 & 0x3FFFFFFFFFFFFFF8;
    v11.i64[0] = 0x100000001;
    v11.i64[1] = 0x100000001;
    do
    {
      v13 = v8[-2];
      v12 = v8[-1];
      v15 = *v8;
      v14 = v8[1];
      v8 += 4;
      v9 = vmulq_s32(v9, vuzp1q_s32(v13, v12));
      v11 = vmulq_s32(v11, vuzp1q_s32(v15, v14));
      v10 -= 8;
    }
    while (v10);
    v16 = (int8x16_t)vmulq_s32(v11, v9);
    *(int32x2_t *)v16.i8 = vmul_s32(*(int32x2_t *)v16.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
    v4 = v16.i32[0] * v16.i32[1];
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFF8))
      return v4;
  }
  else
  {
    v4 = 1;
    v5 = *this;
  }
  do
  {
    v17 = v5->i32[0];
    v5 = (int32x4_t *)((char *)v5 + 8);
    v4 *= v17;
  }
  while (v5 != v1);
  return v4;
}

void CoreHandwriting::FeatureArray::concat(char **this, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  void **v9;
  char *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v4 = *this;
  v5 = this[1];
  if (v4 == v5 || !*(_QWORD *)v4)
  {
    if (this != a2)
    {
      sub_1BE62037C(this, *a2, a2[1], (a2[1] - *a2) >> 3);
      sub_1BE62037C(this + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 3);
      sub_1BE66E294(this + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 2);
    }
  }
  else
  {
    v6 = v5 - 8;
    if (!memcmp(v4, *a2, v5 - 8 - v4))
    {
      *(_QWORD *)v6 += *((_QWORD *)a2[1] - 1);
      sub_1BE87F878(this, this);
      v7 = a2[6];
      v8 = a2[7];
      if (v7 != v8)
      {
        v9 = (void **)(this + 6);
        v10 = this[7];
        while (1)
        {
          v12 = *(_DWORD *)v7;
          v13 = (unint64_t)this[8];
          if ((unint64_t)v10 >= v13)
            break;
          *(_DWORD *)v10 = v12;
          v11 = (uint64_t)(v10 + 4);
LABEL_7:
          this[7] = (char *)v11;
          v7 += 4;
          v10 = (char *)v11;
          if (v7 == v8)
            return;
        }
        v14 = (char *)*v9;
        v15 = v10 - (_BYTE *)*v9;
        v16 = v15 >> 2;
        v17 = (v15 >> 2) + 1;
        if (v17 >> 62)
          sub_1BE61F930();
        v18 = v13 - (_QWORD)v14;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 62)
            sub_1BE61F100();
          v20 = operator new(4 * v19);
          v21 = &v20[4 * v16];
          *(_DWORD *)v21 = v12;
          v11 = (uint64_t)(v21 + 4);
          v22 = v10 - v14;
          if (v10 == v14)
            goto LABEL_32;
        }
        else
        {
          v20 = 0;
          v21 = (char *)(4 * v16);
          *(_DWORD *)(4 * v16) = v12;
          v11 = 4 * v16 + 4;
          v22 = v10 - v14;
          if (v10 == v14)
            goto LABEL_32;
        }
        v23 = v22 - 4;
        if (v23 >= 0xBC)
        {
          v25 = (v10 - 4 - v14) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v20[v15 - 4 - v25] > &v20[v15 - 4])
          {
            v24 = v10;
          }
          else if (&v10[-v25 - 4] > v10 - 4)
          {
            v24 = v10;
          }
          else if ((unint64_t)(v10 - v20 - v15) >= 0x20)
          {
            v26 = (v23 >> 2) + 1;
            v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
            v24 = &v10[-v27];
            v21 -= v27;
            v28 = &v20[4 * v16 - 16];
            v29 = v10 - 16;
            v30 = v26 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v31 = *(_OWORD *)v29;
              *(v28 - 1) = *((_OWORD *)v29 - 1);
              *v28 = v31;
              v28 -= 2;
              v29 -= 32;
              v30 -= 8;
            }
            while (v30);
            if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_32;
          }
          else
          {
            v24 = v10;
          }
        }
        else
        {
          v24 = v10;
        }
        do
        {
          v32 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v21 - 1) = v32;
          v21 -= 4;
        }
        while (v24 != v14);
LABEL_32:
        this[6] = v21;
        this[7] = (char *)v11;
        this[8] = &v20[4 * v19];
        if (v14)
          operator delete(v14);
        goto LABEL_7;
      }
    }
  }
}

void sub_1BE87F878(char **a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  int32x4_t *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int32x4_t *v34;
  int32x4_t v35;
  uint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;

  if (a1 != a2)
    sub_1BE62037C(a1, *a2, a2[1], (a2[1] - *a2) >> 3);
  v4 = a1[3];
  v5 = a1[5];
  if (v5 == v4)
  {
    if (v5)
    {
      a1[4] = v5;
      operator delete(v5);
      a1[3] = 0;
      a1[4] = 0;
      a1[5] = 0;
    }
    v4 = (char *)operator new(8uLL);
    a1[3] = v4;
    a1[5] = v4 + 8;
  }
  *(_QWORD *)v4 = 1;
  v6 = v4 + 8;
  a1[4] = v4 + 8;
  v7 = a2[1] - *a2;
  v8 = v7 >> 3;
  v9 = a1[3];
  if (v7 >> 3 > (unint64_t)((a1[5] - v9) >> 3))
  {
    if (v7 < 0)
      sub_1BE61F930();
    v10 = operator new(v7);
    v11 = v6 - v9;
    v12 = &v10[(v6 - v9) & 0xFFFFFFFFFFFFFFF8];
    v13 = v12;
    if (v6 == v9)
      goto LABEL_17;
    if ((unint64_t)(v4 - v9) >= 0x48)
    {
      v13 = &v10[(v6 - v9) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v4 - &v10[v11 & 0xFFFFFFFFFFFFFFF8] + 8) >= 0x20)
      {
        v14 = v11 >> 3;
        v15 = ((unint64_t)(v4 - v9) >> 3) + 1;
        v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
        v6 -= v16;
        v13 = &v12[-v16];
        v17 = &v10[8 * v14 - 16];
        v18 = v4 - 8;
        v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v20 = *(_OWORD *)v18;
          *(v17 - 1) = *((_OWORD *)v18 - 1);
          *v17 = v20;
          v17 -= 2;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          a1[3] = v13;
          a1[4] = v12;
          a1[5] = &v10[8 * v8];
          if (v9)
            operator delete(v9);
          goto LABEL_19;
        }
      }
    }
    else
    {
      v13 = &v10[(v6 - v9) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v21 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v13 - 1) = v21;
      v13 -= 8;
    }
    while (v6 != v9);
    goto LABEL_17;
  }
LABEL_19:
  v23 = (int32x4_t *)*a1;
  v22 = a1[1];
  v24 = v22 - 8;
  v61 = a1 + 3;
  if (v23 != (int32x4_t *)(v22 - 8))
  {
    v26 = v23->i64[0];
    v25 = &v23->i64[1];
    v60 = v26;
    sub_1BE669C14((uint64_t *)&v61, &v60);
    while (v25 != (uint64_t *)v24)
    {
      v27 = *v25++;
      v60 *= v27;
      sub_1BE669C14((uint64_t *)&v61, &v60);
    }
    v23 = (int32x4_t *)*a1;
    v22 = a1[1];
  }
  if (v23 == (int32x4_t *)v22)
  {
    v31 = a1[8];
    v32 = a1[6];
    if (v31 != v32)
      return;
    v44 = 1;
    goto LABEL_36;
  }
  v28 = v22 - (char *)v23 - 8;
  if (v28 >= 0x38)
  {
    v33 = (v28 >> 3) + 1;
    v30 = &v23->i8[8 * (v33 & 0x3FFFFFFFFFFFFFF8)];
    v34 = v23 + 2;
    v35.i64[0] = 0x100000001;
    v35.i64[1] = 0x100000001;
    v36 = v33 & 0x3FFFFFFFFFFFFFF8;
    v37.i64[0] = 0x100000001;
    v37.i64[1] = 0x100000001;
    do
    {
      v39 = v34[-2];
      v38 = v34[-1];
      v41 = *v34;
      v40 = v34[1];
      v34 += 4;
      v35 = vmulq_s32(v35, vuzp1q_s32(v39, v38));
      v37 = vmulq_s32(v37, vuzp1q_s32(v41, v40));
      v36 -= 8;
    }
    while (v36);
    v42 = (int8x16_t)vmulq_s32(v37, v35);
    *(int32x2_t *)v42.i8 = vmul_s32(*(int32x2_t *)v42.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
    v29 = v42.i32[0] * v42.i32[1];
    if (v33 == (v33 & 0x3FFFFFFFFFFFFFF8))
      goto LABEL_32;
  }
  else
  {
    v29 = 1;
    v30 = (char *)v23;
  }
  do
  {
    v43 = *(_DWORD *)v30;
    v30 += 8;
    v29 *= v43;
  }
  while (v30 != v22);
LABEL_32:
  v44 = v29;
  v31 = a1[6];
  if (v29 <= (unint64_t)((a1[8] - v31) >> 2))
    return;
  v32 = a1[6];
  if (v29 < 0)
    sub_1BE61F930();
LABEL_36:
  v45 = a1[7];
  v46 = v45 - v32;
  v47 = 4 * v44;
  v48 = (char *)operator new(4 * v44);
  v49 = &v48[v46 & 0xFFFFFFFFFFFFFFFCLL];
  v50 = v49;
  if (v45 != v31)
  {
    v51 = v45 - v31 - 4;
    if (v51 >= 0x2C)
    {
      v50 = &v48[v46 & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v45[-(v46 & 0xFFFFFFFFFFFFFFFCLL)] - v48) >= 0x20)
      {
        v52 = (v51 >> 2) + 1;
        v53 = 4 * (v52 & 0x7FFFFFFFFFFFFFF8);
        v54 = &v45[-v53];
        v50 = &v49[-v53];
        v55 = &v48[4 * (v46 >> 2) - 16];
        v56 = v45 - 16;
        v57 = v52 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v58 = *(_OWORD *)v56;
          *((_OWORD *)v55 - 1) = *((_OWORD *)v56 - 1);
          *(_OWORD *)v55 = v58;
          v55 -= 32;
          v56 -= 32;
          v57 -= 8;
        }
        while (v57);
        v45 = v54;
        if (v52 == (v52 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_44;
      }
    }
    else
    {
      v50 = &v48[v46 & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v59 = *((_DWORD *)v45 - 1);
      v45 -= 4;
      *((_DWORD *)v50 - 1) = v59;
      v50 -= 4;
    }
    while (v45 != v31);
  }
LABEL_44:
  a1[6] = v50;
  a1[7] = v49;
  a1[8] = &v48[v47];
  if (v31)
    operator delete(v31);
}

uint64_t CoreHandwriting::FeatureArray::getData(CoreHandwriting::FeatureArray *this)
{
  return (uint64_t)this + 48;
}

{
  return (uint64_t)this + 48;
}

void CoreHandwriting::DistanceFeatureExtractionStep::process(const CoreHandwriting::Ink *a1@<X1>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64x2_t v13;
  const double *v14;
  int64x2_t v15;
  const double *v16;
  const double *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  double v21;
  double v22;
  float *v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  float *v31;
  int64_t v32;
  double v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  float *v39;
  float v40;
  int64_t v41;
  unint64_t v42;
  float *v43;
  int v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  float *v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  float *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  float *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void *__p;
  void *v67;
  unint64_t v68;
  float64x2x3_t v69;
  float64x2x3_t v70;

  __p = 0;
  v67 = 0;
  v68 = 0;
  v4 = *(char **)a1;
  v5 = (char *)*((_QWORD *)a1 + 1);
  if (*(char **)a1 == v5)
    goto LABEL_81;
  v7 = v5 - v4 - 24;
  if (v7 >= 0x60)
  {
    v10 = v7 / 0x18 + 1;
    v11 = v10 & 3;
    if ((v10 & 3) == 0)
      v11 = 4;
    v12 = v10 - v11;
    v9 = &v4[24 * v12];
    v13 = 0uLL;
    v14 = *(const double **)a1;
    v15 = 0uLL;
    do
    {
      v16 = v14 + 12;
      v69 = vld3q_f64(v14);
      v17 = v14 + 6;
      v13 = vsraq_n_s64(v13, vsubq_s64((int64x2_t)v69.val[1], (int64x2_t)v69.val[0]), 5uLL);
      v70 = vld3q_f64(v17);
      v15 = vsraq_n_s64(v15, vsubq_s64((int64x2_t)v70.val[1], (int64x2_t)v70.val[0]), 5uLL);
      v14 = v16;
      v12 -= 4;
    }
    while (v12);
    v8 = vaddvq_s64(vaddq_s64(v15, v13));
  }
  else
  {
    v8 = 0;
    v9 = *(char **)a1;
  }
  do
  {
    v18 = *(_QWORD *)v9;
    v19 = *((_QWORD *)v9 + 1);
    v9 += 24;
    v8 += (v19 - v18) >> 5;
  }
  while (v9 != v5);
  if (!v8)
  {
    v20 = 0;
    if (v4 == v5)
      goto LABEL_81;
    goto LABEL_15;
  }
  if (v8 >> 62)
    sub_1BE61F930();
  v20 = operator new(4 * v8);
  v8 = (unint64_t)v20 + 4 * v8;
  __p = v20;
  v67 = v20;
  v68 = v8;
  if (v4 != v5)
  {
LABEL_15:
    v63 = a2;
    v64 = v5;
    v22 = *((double *)a1 + 6);
    v21 = *((double *)a1 + 7);
    v23 = (float *)v20;
    v24 = (float *)v20;
    while (1)
    {
      v25 = *(_QWORD *)v4;
      v26 = *((_QWORD *)v4 + 1);
      v65 = v4;
      while (v25 != v26)
      {
        if (!*(_BYTE *)(v25 + 24))
        {
          v33 = sqrt((v21 - *(double *)(v25 + 8)) * (v21 - *(double *)(v25 + 8))+ (v22 - *(double *)v25) * (v22 - *(double *)v25));
          if ((unint64_t)v23 < v8)
          {
            v34 = v33;
            *v23 = v34;
            v20 = v23 + 1;
LABEL_63:
            v22 = *(double *)v25;
            v21 = *(double *)(v25 + 8);
            goto LABEL_19;
          }
          v35 = v23 - v24;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
          {
            v67 = v20;
            v68 = v8;
            __p = v24;
            sub_1BE61F930();
          }
          if ((uint64_t)(v8 - (_QWORD)v24) >> 1 > v36)
            v36 = (uint64_t)(v8 - (_QWORD)v24) >> 1;
          if (v8 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          if (v37)
          {
            if (v37 >> 62)
            {
              v67 = v20;
              v68 = v8;
              __p = v24;
              sub_1BE61F100();
            }
            v38 = operator new(4 * v37);
            v39 = (float *)&v38[4 * v35];
            v40 = v33;
            *v39 = v40;
            v20 = v39 + 1;
            v41 = (char *)v23 - (char *)v24;
            if (v23 == v24)
              goto LABEL_60;
LABEL_57:
            v47 = v41 - 4;
            if (v47 < 0xBC)
            {
              v48 = v23;
              goto LABEL_59;
            }
            v50 = ((char *)(v23 - 1) - (char *)v24) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v38[(char *)v23 - (char *)v24 - 4 - v50] > &v38[(char *)v23 - (char *)v24 - 4])
            {
              v48 = v23;
              goto LABEL_59;
            }
            if ((float *)((char *)v23 - v50 - 4) > v23 - 1)
            {
              v48 = v23;
              goto LABEL_59;
            }
            if ((unint64_t)((char *)v24 - v38) < 0x20)
            {
              v48 = v23;
              goto LABEL_59;
            }
            v57 = (v47 >> 2) + 1;
            v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
            v48 = &v23[v58 / 0xFFFFFFFFFFFFFFFCLL];
            v39 = (float *)((char *)v39 - v58);
            v59 = &v38[4 * v35 - 16];
            v60 = v23 - 4;
            v61 = v57 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v62 = *(_OWORD *)v60;
              *(v59 - 1) = *((_OWORD *)v60 - 1);
              *v59 = v62;
              v59 -= 2;
              v60 -= 8;
              v61 -= 8;
            }
            while (v61);
            if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_59:
                v49 = *((_DWORD *)v48-- - 1);
                *((_DWORD *)v39-- - 1) = v49;
              }
              while (v48 != v24);
            }
          }
          else
          {
            v38 = 0;
            v39 = (float *)(4 * v35);
            v46 = v33;
            *(float *)(4 * v35) = v46;
            v20 = (void *)(4 * v35 + 4);
            v41 = (char *)v23 - (char *)v24;
            if (v23 != v24)
              goto LABEL_57;
          }
LABEL_60:
          v8 = (unint64_t)&v38[4 * v37];
          if (v24)
            operator delete(v24);
          v24 = v39;
          goto LABEL_63;
        }
        if ((unint64_t)v23 < v8)
        {
          *v23 = 0.0;
          v20 = v23 + 1;
          goto LABEL_19;
        }
        v27 = v23 - v24;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
        {
          v67 = v20;
          v68 = v8;
          __p = v24;
          sub_1BE61F930();
        }
        if ((uint64_t)(v8 - (_QWORD)v24) >> 1 > v28)
          v28 = (uint64_t)(v8 - (_QWORD)v24) >> 1;
        if (v8 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
        {
          if (v29 >> 62)
          {
            v67 = v20;
            v68 = v8;
            __p = v24;
            sub_1BE61F100();
          }
          v30 = operator new(4 * v29);
          v31 = (float *)&v30[4 * v27];
          *v31 = 0.0;
          v20 = v31 + 1;
          v32 = (char *)v23 - (char *)v24;
          if (v23 == v24)
            goto LABEL_49;
        }
        else
        {
          v30 = 0;
          v31 = (float *)(4 * v27);
          *(_DWORD *)(4 * v27) = 0;
          v20 = (void *)(4 * v27 + 4);
          v32 = (char *)v23 - (char *)v24;
          if (v23 == v24)
            goto LABEL_49;
        }
        v42 = v32 - 4;
        if (v42 >= 0xBC)
        {
          v45 = ((char *)(v23 - 1) - (char *)v24) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v30[(char *)v23 - (char *)v24 - 4 - v45] > &v30[(char *)v23 - (char *)v24 - 4])
          {
            v43 = v23;
          }
          else if ((float *)((char *)v23 - v45 - 4) > v23 - 1)
          {
            v43 = v23;
          }
          else if ((unint64_t)((char *)v24 - v30) >= 0x20)
          {
            v51 = (v42 >> 2) + 1;
            v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
            v43 = &v23[v52 / 0xFFFFFFFFFFFFFFFCLL];
            v31 = (float *)((char *)v31 - v52);
            v53 = &v30[4 * v27 - 16];
            v54 = v23 - 4;
            v55 = v51 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *v53 = v56;
              v53 -= 2;
              v54 -= 8;
              v55 -= 8;
            }
            while (v55);
            if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_49;
          }
          else
          {
            v43 = v23;
          }
        }
        else
        {
          v43 = v23;
        }
        do
        {
          v44 = *((_DWORD *)v43-- - 1);
          *((_DWORD *)v31-- - 1) = v44;
        }
        while (v43 != v24);
LABEL_49:
        v8 = (unint64_t)&v30[4 * v29];
        if (v24)
          operator delete(v24);
        v24 = v31;
LABEL_19:
        v25 += 32;
        v23 = (float *)v20;
      }
      v68 = v8;
      __p = v24;
      v4 += 24;
      if (v65 + 24 == v64)
      {
        v67 = v20;
        a2 = v63;
        break;
      }
    }
  }
LABEL_81:
  sub_1BE8832D0(a2, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
}

void sub_1BE88012C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::TrigonometricFeatureExtractor::process(CoreHandwriting::TrigonometricFeatureExtractor *this@<X0>, const CoreHandwriting::Ink *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  const double *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  int v34;
  int *v35;
  char *v36;
  double v37;
  double v38;
  int *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  int v43;
  int *v44;
  char *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  int v67;
  int *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  int *v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int *v85;
  char *v86;
  char *v87;
  unint64_t v88;
  int v89;
  int *v90;
  char *v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int *v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  int *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  int v113;
  int *v114;
  char *v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  int *v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  int *v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  float v150;
  double v151;
  int *v152;
  char *v153;
  char *v154;
  unint64_t v155;
  int v156;
  int *v157;
  char *v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  int *v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  float v176;
  void *__p;
  void *v178;
  _QWORD *v179;
  float64x2x3_t v180;
  float64x2x3_t v181;

  v6 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 == v5)
  {
    v8 = 0;
  }
  else
  {
    v7 = v5 - v6 - 24;
    if (v7 >= 0x60)
    {
      v9 = v7 / 0x18 + 1;
      v10 = v9 & 3;
      if ((v9 & 3) == 0)
        v10 = 4;
      v11 = v9 - v10;
      v12 = v6 + 24 * v11;
      v13 = 0uLL;
      v14 = 0uLL;
      do
      {
        v15 = v6 + 96;
        v180 = vld3q_f64((const double *)v6);
        v16 = (const double *)(v6 + 48);
        v13 = vsraq_n_s64(v13, vsubq_s64((int64x2_t)v180.val[1], (int64x2_t)v180.val[0]), 5uLL);
        v181 = vld3q_f64(v16);
        v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v181.val[1], (int64x2_t)v181.val[0]), 5uLL);
        v6 = v15;
        v11 -= 4;
      }
      while (v11);
      v8 = vaddvq_s64(vaddq_s64(v14, v13));
      v6 = v12;
    }
    else
    {
      v8 = 0;
    }
    do
    {
      v17 = *(double *)v6;
      v18 = *(_QWORD *)(v6 + 8);
      v6 += 24;
      v8 += (v18 - *(_QWORD *)&v17) >> 5;
    }
    while (v6 != v5);
  }
  v19 = (*(uint64_t (**)(CoreHandwriting::TrigonometricFeatureExtractor *))(*(_QWORD *)this + 24))(this);
  v20 = operator new(0x10uLL);
  v178 = v20 + 2;
  v179 = v20 + 2;
  *v20 = v8;
  v20[1] = v19;
  __p = v20;
  sub_1BE883440((uint64_t)a3, (char **)&__p);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v21 = *(uint64_t **)a2;
  v22 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (*(uint64_t **)a2 != v22)
  {
    v23 = 0;
    v24 = *((double *)a2 + 6);
    v25 = *((double *)a2 + 7);
    do
    {
      v26 = *v21;
      v27 = v21[1];
      while (v26 != v27)
      {
        if (*(_BYTE *)(v26 + 24))
        {
          v30 = (int *)operator new(0x10uLL);
          *(_QWORD *)v30 = v23;
          *((_QWORD *)v30 + 1) = 0;
          v32 = (char *)a3[3];
          v31 = (char *)a3[4];
          if ((unint64_t)(v31 - v32) > 0x10)
            v31 = v32 + 16;
          if (v32 == v31)
          {
            v46 = 0;
          }
          else
          {
            v33 = v31 - v32 - 8;
            if (v33 < 8)
            {
              v34 = 0;
              v35 = v30;
              v36 = (char *)a3[3];
              goto LABEL_37;
            }
            v47 = 0;
            v48 = 0;
            v49 = (v33 >> 3) + 1;
            v50 = 2 * (v49 & 0x3FFFFFFFFFFFFFFELL);
            v35 = &v30[v50];
            v36 = &v32[v50 * 4];
            v51 = (int *)(v32 + 8);
            v52 = v30 + 2;
            v53 = v49 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v54 = *(v51 - 2);
              v56 = *v51;
              v51 += 4;
              v55 = v56;
              v57 = *(v52 - 2);
              v58 = *v52;
              v52 += 4;
              v47 += v57 * v54;
              v48 += v58 * v55;
              v53 -= 2;
            }
            while (v53);
            v34 = v48 + v47;
            if (v49 != (v49 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_37:
                v60 = *(_DWORD *)v36;
                v36 += 8;
                v59 = v60;
                v61 = *v35;
                v35 += 2;
                v34 += v61 * v59;
              }
              while (v36 != v31);
            }
            v46 = v34;
          }
          v62 = a3[6];
          operator delete(v30);
          *(_DWORD *)(v62 + 4 * v46) = 0;
          v63 = (int *)operator new(0x10uLL);
          *(_QWORD *)v63 = v23;
          *((_QWORD *)v63 + 1) = 1;
          v65 = (char *)a3[3];
          v64 = (char *)a3[4];
          if ((unint64_t)(v64 - v65) > 0x10)
            v64 = v65 + 16;
          if (v65 == v64)
          {
            v28 = 0;
          }
          else
          {
            v66 = v64 - v65 - 8;
            if (v66 < 8)
            {
              v67 = 0;
              v68 = v63;
              v69 = (char *)a3[3];
              goto LABEL_47;
            }
            v70 = 0;
            v71 = 0;
            v72 = (v66 >> 3) + 1;
            v73 = 2 * (v72 & 0x3FFFFFFFFFFFFFFELL);
            v68 = &v63[v73];
            v69 = &v65[v73 * 4];
            v74 = (int *)(v65 + 8);
            v75 = v63 + 2;
            v76 = v72 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v77 = *(v74 - 2);
              v79 = *v74;
              v74 += 4;
              v78 = v79;
              v80 = *(v75 - 2);
              v81 = *v75;
              v75 += 4;
              v70 += v80 * v77;
              v71 += v81 * v78;
              v76 -= 2;
            }
            while (v76);
            v67 = v71 + v70;
            if (v72 != (v72 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_47:
                v83 = *(_DWORD *)v69;
                v69 += 8;
                v82 = v83;
                v84 = *v68;
                v68 += 2;
                v67 += v84 * v82;
              }
              while (v69 != v64);
            }
            v28 = v67;
          }
          v29 = a3[6];
          operator delete(v63);
          *(_DWORD *)(v29 + 4 * v28) = 0;
          goto LABEL_19;
        }
        v37 = *(double *)(v26 + 8);
        v38 = sqrt((v25 - v37) * (v25 - v37) + (v24 - *(double *)v26) * (v24 - *(double *)v26));
        if (v38 != 0.0)
        {
          v85 = (int *)operator new(0x10uLL);
          *(_QWORD *)v85 = v23;
          *((_QWORD *)v85 + 1) = 0;
          v87 = (char *)a3[3];
          v86 = (char *)a3[4];
          if ((unint64_t)(v86 - v87) > 0x10)
            v86 = v87 + 16;
          if (v87 == v86)
          {
            v133 = 0;
          }
          else
          {
            v88 = v86 - v87 - 8;
            if (v88 < 8)
            {
              v89 = 0;
              v90 = v85;
              v91 = (char *)a3[3];
              goto LABEL_76;
            }
            v134 = 0;
            v135 = 0;
            v136 = (v88 >> 3) + 1;
            v137 = 2 * (v136 & 0x3FFFFFFFFFFFFFFELL);
            v90 = &v85[v137];
            v91 = &v87[v137 * 4];
            v138 = (int *)(v87 + 8);
            v139 = v85 + 2;
            v140 = v136 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v141 = *(v138 - 2);
              v143 = *v138;
              v138 += 4;
              v142 = v143;
              v144 = *(v139 - 2);
              v145 = *v139;
              v139 += 4;
              v134 += v144 * v141;
              v135 += v145 * v142;
              v140 -= 2;
            }
            while (v140);
            v89 = v135 + v134;
            if (v136 != (v136 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_76:
                v147 = *(_DWORD *)v91;
                v91 += 8;
                v146 = v147;
                v148 = *v90;
                v90 += 2;
                v89 += v148 * v146;
              }
              while (v91 != v86);
            }
            v133 = v89;
          }
          v149 = a3[6];
          operator delete(v85);
          v150 = (v37 - v25) / v38;
          *(float *)(v149 + 4 * v133) = v150;
          v151 = *(double *)v26;
          v152 = (int *)operator new(0x10uLL);
          *(_QWORD *)v152 = v23;
          *((_QWORD *)v152 + 1) = 1;
          v154 = (char *)a3[3];
          v153 = (char *)a3[4];
          if ((unint64_t)(v153 - v154) > 0x10)
            v153 = v154 + 16;
          if (v154 == v153)
          {
            v159 = 0;
          }
          else
          {
            v155 = v153 - v154 - 8;
            if (v155 < 8)
            {
              v156 = 0;
              v157 = v152;
              v158 = (char *)a3[3];
              goto LABEL_87;
            }
            v160 = 0;
            v161 = 0;
            v162 = (v155 >> 3) + 1;
            v163 = 2 * (v162 & 0x3FFFFFFFFFFFFFFELL);
            v157 = &v152[v163];
            v158 = &v154[v163 * 4];
            v164 = (int *)(v154 + 8);
            v165 = v152 + 2;
            v166 = v162 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v167 = *(v164 - 2);
              v169 = *v164;
              v164 += 4;
              v168 = v169;
              v170 = *(v165 - 2);
              v171 = *v165;
              v165 += 4;
              v160 += v170 * v167;
              v161 += v171 * v168;
              v166 -= 2;
            }
            while (v166);
            v156 = v161 + v160;
            if (v162 != (v162 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_87:
                v173 = *(_DWORD *)v158;
                v158 += 8;
                v172 = v173;
                v174 = *v157;
                v157 += 2;
                v156 += v174 * v172;
              }
              while (v158 != v153);
            }
            v159 = v156;
          }
          v175 = a3[6];
          operator delete(v152);
          v176 = (v151 - v24) / v38;
          *(float *)(v175 + 4 * v159) = v176;
          goto LABEL_90;
        }
        v39 = (int *)operator new(0x10uLL);
        *(_QWORD *)v39 = v23;
        *((_QWORD *)v39 + 1) = 0;
        v41 = (char *)a3[3];
        v40 = (char *)a3[4];
        if ((unint64_t)(v40 - v41) > 0x10)
          v40 = v41 + 16;
        if (v41 == v40)
        {
          v92 = 0;
          goto LABEL_60;
        }
        v42 = v40 - v41 - 8;
        if (v42 >= 8)
        {
          v93 = 0;
          v94 = 0;
          v95 = (v42 >> 3) + 1;
          v96 = 2 * (v95 & 0x3FFFFFFFFFFFFFFELL);
          v44 = &v39[v96];
          v45 = &v41[v96 * 4];
          v97 = (int *)(v41 + 8);
          v98 = v39 + 2;
          v99 = v95 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v100 = *(v97 - 2);
            v102 = *v97;
            v97 += 4;
            v101 = v102;
            v103 = *(v98 - 2);
            v104 = *v98;
            v98 += 4;
            v93 += v103 * v100;
            v94 += v104 * v101;
            v99 -= 2;
          }
          while (v99);
          v43 = v94 + v93;
          if (v95 == (v95 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_59;
        }
        else
        {
          v43 = 0;
          v44 = v39;
          v45 = (char *)a3[3];
        }
        do
        {
          v106 = *(_DWORD *)v45;
          v45 += 8;
          v105 = v106;
          v107 = *v44;
          v44 += 2;
          v43 += v107 * v105;
        }
        while (v45 != v40);
LABEL_59:
        v92 = v43;
LABEL_60:
        v108 = a3[6];
        operator delete(v39);
        *(_DWORD *)(v108 + 4 * v92) = 0;
        v109 = (int *)operator new(0x10uLL);
        *(_QWORD *)v109 = v23;
        *((_QWORD *)v109 + 1) = 1;
        v111 = (char *)a3[3];
        v110 = (char *)a3[4];
        if ((unint64_t)(v110 - v111) > 0x10)
          v110 = v111 + 16;
        if (v111 != v110)
        {
          v112 = v110 - v111 - 8;
          if (v112 < 8)
          {
            v113 = 0;
            v114 = v109;
            v115 = (char *)a3[3];
            goto LABEL_69;
          }
          v117 = 0;
          v118 = 0;
          v119 = (v112 >> 3) + 1;
          v120 = 2 * (v119 & 0x3FFFFFFFFFFFFFFELL);
          v114 = &v109[v120];
          v115 = &v111[v120 * 4];
          v121 = (int *)(v111 + 8);
          v122 = v109 + 2;
          v123 = v119 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v124 = *(v121 - 2);
            v126 = *v121;
            v121 += 4;
            v125 = v126;
            v127 = *(v122 - 2);
            v128 = *v122;
            v122 += 4;
            v117 += v127 * v124;
            v118 += v128 * v125;
            v123 -= 2;
          }
          while (v123);
          v113 = v118 + v117;
          if (v119 != (v119 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_69:
              v130 = *(_DWORD *)v115;
              v115 += 8;
              v129 = v130;
              v131 = *v114;
              v114 += 2;
              v113 += v131 * v129;
            }
            while (v115 != v110);
          }
          v116 = v113;
          goto LABEL_71;
        }
        v116 = 0;
LABEL_71:
        v132 = a3[6];
        operator delete(v109);
        *(_DWORD *)(v132 + 4 * v116) = 1065353216;
LABEL_90:
        v24 = *(double *)v26;
        v25 = *(double *)(v26 + 8);
LABEL_19:
        ++v23;
        v26 += 32;
      }
      v21 += 3;
    }
    while (v21 != v22);
  }
}

void sub_1BE880810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE88082C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE72A5B8(v1);
  _Unwind_Resume(a1);
}

void sub_1BE880840(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE72A5B8(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::PenUpFeatureExtractor::process(char **a1@<X1>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  const double *v13;
  int64x2_t v14;
  const double *v15;
  const double *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  float *v29;
  float v30;
  unint64_t v31;
  float *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  float *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  void *__p;
  float *v44;
  unint64_t v45;
  float64x2x3_t v46;
  float64x2x3_t v47;

  __p = 0;
  v44 = 0;
  v45 = 0;
  v5 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    goto LABEL_56;
  v6 = v4 - v5 - 24;
  if (v6 >= 0x60)
  {
    v9 = v6 / 0x18 + 1;
    v10 = v9 & 3;
    if ((v9 & 3) == 0)
      v10 = 4;
    v11 = v9 - v10;
    v8 = &v5[24 * v11];
    v12 = 0uLL;
    v13 = (const double *)*a1;
    v14 = 0uLL;
    do
    {
      v15 = v13 + 12;
      v46 = vld3q_f64(v13);
      v16 = v13 + 6;
      v12 = vsraq_n_s64(v12, vsubq_s64((int64x2_t)v46.val[1], (int64x2_t)v46.val[0]), 5uLL);
      v47 = vld3q_f64(v16);
      v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v47.val[1], (int64x2_t)v47.val[0]), 5uLL);
      v13 = v15;
      v11 -= 4;
    }
    while (v11);
    v7 = vaddvq_s64(vaddq_s64(v14, v12));
  }
  else
  {
    v7 = 0;
    v8 = *a1;
  }
  do
  {
    v17 = *(_QWORD *)v8;
    v18 = *((_QWORD *)v8 + 1);
    v8 += 24;
    v7 += (v18 - v17) >> 5;
  }
  while (v8 != v4);
  if (!v7)
  {
    v19 = 0;
    if (v5 == v4)
      goto LABEL_56;
LABEL_15:
    v41 = a2;
    v42 = v4;
    v20 = v19;
    v21 = v19;
    while (1)
    {
      v22 = *(_QWORD *)v5;
      if (*((_QWORD *)v5 + 1) != *(_QWORD *)v5)
        break;
LABEL_16:
      v5 += 24;
      if (v5 == v42)
      {
        v44 = v19;
        a2 = v41;
        goto LABEL_56;
      }
    }
    v23 = 0;
    while (1)
    {
      while ((unint64_t)v20 < v7)
      {
        if (v23)
          v24 = 0.0;
        else
          v24 = 1.0;
        *v20++ = v24;
        v19 = v20;
        if (++v23 >= (*((_QWORD *)v5 + 1) - v22) >> 5)
          goto LABEL_16;
      }
      v25 = v20 - v21;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
      {
        v44 = v19;
        sub_1BE61F930();
      }
      if ((uint64_t)(v7 - (_QWORD)v21) >> 1 > v26)
        v26 = (uint64_t)(v7 - (_QWORD)v21) >> 1;
      if (v7 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
      {
        if (v27 >> 62)
        {
          v44 = v19;
          sub_1BE61F100();
        }
        v28 = operator new(4 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = (float *)&v28[4 * v25];
      if (v23)
        v30 = 0.0;
      else
        v30 = 1.0;
      *v29 = v30;
      v19 = v29 + 1;
      if (v20 == v21)
        goto LABEL_41;
      v31 = (char *)v20 - (char *)v21 - 4;
      if (v31 >= 0xBC)
      {
        v34 = ((char *)(v20 - 1) - (char *)v21) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v28[(char *)v20 - (char *)v21 - 4 - v34] > &v28[(char *)v20 - (char *)v21 - 4])
        {
          v32 = v20;
        }
        else if ((float *)((char *)v20 - v34 - 4) > v20 - 1)
        {
          v32 = v20;
        }
        else if ((unint64_t)((char *)v21 - v28) >= 0x20)
        {
          v35 = (v31 >> 2) + 1;
          v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          v32 = &v20[v36 / 0xFFFFFFFFFFFFFFFCLL];
          v29 = (float *)((char *)v29 - v36);
          v37 = &v28[4 * v25 - 16];
          v38 = v20 - 4;
          v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *v37 = v40;
            v37 -= 2;
            v38 -= 8;
            v39 -= 8;
          }
          while (v39);
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_41;
        }
        else
        {
          v32 = v20;
        }
      }
      else
      {
        v32 = v20;
      }
      do
      {
        v33 = *((_DWORD *)v32-- - 1);
        *((_DWORD *)v29-- - 1) = v33;
      }
      while (v32 != v21);
LABEL_41:
      v7 = (unint64_t)&v28[4 * v27];
      __p = v29;
      v45 = v7;
      if (v21)
      {
        operator delete(v21);
        v22 = *(_QWORD *)v5;
      }
      v21 = v29;
      ++v23;
      v20 = v19;
      if (v23 >= (*((_QWORD *)v5 + 1) - v22) >> 5)
        goto LABEL_16;
    }
  }
  if (v7 >> 62)
    sub_1BE61F930();
  v19 = (float *)operator new(4 * v7);
  v7 = (unint64_t)&v19[v7];
  __p = v19;
  v44 = v19;
  v45 = v7;
  if (v5 != v4)
    goto LABEL_15;
LABEL_56:
  sub_1BE8832D0(a2, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
}

void sub_1BE880BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::EndOfStrokeFeatureExtractor::process(char **a1@<X1>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  const double *v13;
  int64x2_t v14;
  const double *v15;
  const double *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  char *v47;
  void *__p;
  char *v49;
  char *v50;
  float64x2x3_t v51;
  float64x2x3_t v52;

  __p = 0;
  v49 = 0;
  v50 = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
    goto LABEL_60;
  v6 = v5 - v4 - 24;
  if (v6 >= 0x60)
  {
    v9 = v6 / 0x18 + 1;
    v10 = v9 & 3;
    if ((v9 & 3) == 0)
      v10 = 4;
    v11 = v9 - v10;
    v8 = &v4[24 * v11];
    v12 = 0uLL;
    v13 = (const double *)*a1;
    v14 = 0uLL;
    do
    {
      v15 = v13 + 12;
      v51 = vld3q_f64(v13);
      v16 = v13 + 6;
      v12 = vsraq_n_s64(v12, vsubq_s64((int64x2_t)v51.val[1], (int64x2_t)v51.val[0]), 5uLL);
      v52 = vld3q_f64(v16);
      v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v52.val[1], (int64x2_t)v52.val[0]), 5uLL);
      v13 = v15;
      v11 -= 4;
    }
    while (v11);
    v7 = vaddvq_s64(vaddq_s64(v14, v12));
  }
  else
  {
    v7 = 0;
    v8 = *a1;
  }
  do
  {
    v17 = *(_QWORD *)v8;
    v18 = *((_QWORD *)v8 + 1);
    v8 += 24;
    v7 += (v18 - v17) >> 5;
  }
  while (v8 != v5);
  if (!v7)
  {
    v19 = 0;
    v20 = 0;
    if (v4 == v5)
      goto LABEL_60;
    goto LABEL_15;
  }
  if (v7 >> 62)
    sub_1BE61F930();
  v19 = (char *)operator new(4 * v7);
  v20 = &v19[4 * v7];
  __p = v19;
  v49 = v19;
  v50 = v20;
  if (v4 != v5)
  {
LABEL_15:
    v46 = a2;
    v47 = v5;
    v21 = v19;
    v22 = v19;
    v23 = v19;
    while (1)
    {
      while (1)
      {
        v24 = *(_QWORD *)v4;
        if (*((_QWORD *)v4 + 1) != *(_QWORD *)v4)
          break;
LABEL_17:
        v4 += 24;
        if (v4 == v47)
          goto LABEL_59;
      }
      v25 = 0;
      do
      {
        if (v23 < v20)
        {
          *(_DWORD *)v23 = 0;
          v19 = v23 + 4;
          goto LABEL_21;
        }
        v28 = (v23 - v22) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
        {
          v49 = v19;
          sub_1BE61F930();
        }
        if ((v20 - v22) >> 1 > v29)
          v29 = (v20 - v22) >> 1;
        if ((unint64_t)(v20 - v22) >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
        {
          if (v30 >> 62)
          {
            v49 = v19;
            sub_1BE61F100();
          }
          v31 = operator new(4 * v30);
          v21 = &v31[4 * v28];
          *(_DWORD *)v21 = 0;
          v19 = v21 + 4;
          v32 = v23 - v22;
          if (v23 == v22)
            goto LABEL_37;
        }
        else
        {
          v31 = 0;
          v21 = (char *)(4 * v28);
          *(_DWORD *)(4 * v28) = 0;
          v19 = (char *)(4 * v28 + 4);
          v32 = v23 - v22;
          if (v23 == v22)
            goto LABEL_37;
        }
        v33 = v32 - 4;
        if (v33 >= 0xBC)
        {
          v36 = (v23 - 4 - v22) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v31[v23 - v22 - 4 - v36] > &v31[v23 - v22 - 4])
          {
            v34 = v23;
          }
          else if (&v23[-v36 - 4] > v23 - 4)
          {
            v34 = v23;
          }
          else if ((unint64_t)(v22 - v31) >= 0x20)
          {
            v37 = (v33 >> 2) + 1;
            v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
            v34 = &v23[-v38];
            v21 -= v38;
            v39 = &v31[4 * v28 - 16];
            v40 = v23 - 16;
            v41 = v37 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v42 = *(_OWORD *)v40;
              *(v39 - 1) = *((_OWORD *)v40 - 1);
              *v39 = v42;
              v39 -= 2;
              v40 -= 32;
              v41 -= 8;
            }
            while (v41);
            if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_37;
          }
          else
          {
            v34 = v23;
          }
        }
        else
        {
          v34 = v23;
        }
        do
        {
          v35 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v21 - 1) = v35;
          v21 -= 4;
        }
        while (v34 != v22);
LABEL_37:
        v20 = &v31[4 * v30];
        __p = v21;
        v50 = v20;
        if (v22)
        {
          operator delete(v22);
          v24 = *(_QWORD *)v4;
        }
        v22 = v21;
LABEL_21:
        ++v25;
        v26 = *((_QWORD *)v4 + 1);
        v27 = (v26 - v24) >> 5;
        v23 = v19;
      }
      while (v25 < v27);
      if (v24 == v26)
      {
        v23 = v19;
        goto LABEL_17;
      }
      if (*(_BYTE *)(v26 - 8))
      {
        v43 = 0;
        while (v26 + v43 != v24)
        {
          v44 = *(unsigned __int8 *)(v26 + v43 - 8);
          v43 -= 32;
          if (!v44)
          {
            v27 = (-32 - v43) >> 5;
            break;
          }
        }
        v45 = &v21[4 * (((unint64_t)(v19 - v21) >> 2) - v27)];
        v22 = v21;
      }
      else
      {
        v45 = v19 - 4;
      }
      *(_DWORD *)v45 = 1065353216;
      v23 = v19;
      v4 += 24;
      if (v4 == v47)
      {
LABEL_59:
        v49 = v19;
        a2 = v46;
        break;
      }
    }
  }
LABEL_60:
  sub_1BE8832D0(a2, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
}

void sub_1BE880FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::StrokeDirectionFeatureExtractor::process(char **a1@<X1>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  const double *v13;
  int64x2_t v14;
  const double *v15;
  const double *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  float *v30;
  int64_t v31;
  unint64_t v32;
  float *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  float *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v44;
  unint64_t v45;
  void *__p;
  float *v47;
  float *v48;
  float64x2x3_t v49;
  float64x2x3_t v50;

  __p = 0;
  v47 = 0;
  v48 = 0;
  v5 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    goto LABEL_52;
  v6 = v4 - v5 - 24;
  if (v6 >= 0x60)
  {
    v9 = v6 / 0x18 + 1;
    v10 = v9 & 3;
    if ((v9 & 3) == 0)
      v10 = 4;
    v11 = v9 - v10;
    v8 = &v5[24 * v11];
    v12 = 0uLL;
    v13 = (const double *)*a1;
    v14 = 0uLL;
    do
    {
      v15 = v13 + 12;
      v49 = vld3q_f64(v13);
      v16 = v13 + 6;
      v12 = vsraq_n_s64(v12, vsubq_s64((int64x2_t)v49.val[1], (int64x2_t)v49.val[0]), 5uLL);
      v50 = vld3q_f64(v16);
      v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v50.val[1], (int64x2_t)v50.val[0]), 5uLL);
      v13 = v15;
      v11 -= 4;
    }
    while (v11);
    v7 = vaddvq_s64(vaddq_s64(v14, v12));
  }
  else
  {
    v7 = 0;
    v8 = *a1;
  }
  do
  {
    v17 = *(_QWORD *)v8;
    v18 = *((_QWORD *)v8 + 1);
    v8 += 24;
    v7 += (v18 - v17) >> 5;
  }
  while (v8 != v4);
  if (!v7)
  {
    v20 = 0;
    v19 = 0;
    if (v5 == v4)
      goto LABEL_52;
LABEL_15:
    v42 = a2;
    v44 = v4;
    v45 = 0;
    v21 = v19;
    v22 = v19;
    while (1)
    {
      v23 = *(_QWORD *)v5;
      if (*((_QWORD *)v5 + 1) != *(_QWORD *)v5)
        break;
LABEL_16:
      ++v45;
      v5 += 24;
      if (v5 == v44)
      {
        v47 = v19;
        a2 = v42;
        goto LABEL_52;
      }
    }
    v24 = 0;
    if (((*(_QWORD *)&a1[3][(v45 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v45) & 1) != 0)
      v25 = 1.0;
    else
      v25 = 0.0;
    while (1)
    {
      while (v21 < v20)
      {
        *v21++ = v25;
        v19 = v21;
        if (++v24 >= (*((_QWORD *)v5 + 1) - v23) >> 5)
          goto LABEL_16;
      }
      v26 = v21 - v22;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
      {
        v47 = v19;
        sub_1BE61F930();
      }
      if (((char *)v20 - (char *)v22) >> 1 > v27)
        v27 = ((char *)v20 - (char *)v22) >> 1;
      if ((unint64_t)((char *)v20 - (char *)v22) >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
      {
        if (v28 >> 62)
        {
          v47 = v19;
          sub_1BE61F100();
        }
        v29 = operator new(4 * v28);
        v30 = (float *)&v29[4 * v26];
        *v30 = v25;
        v19 = v30 + 1;
        v31 = (char *)v21 - (char *)v22;
        if (v21 == v22)
          goto LABEL_37;
      }
      else
      {
        v29 = 0;
        v30 = (float *)(4 * v26);
        *(float *)(4 * v26) = v25;
        v19 = (float *)(4 * v26 + 4);
        v31 = (char *)v21 - (char *)v22;
        if (v21 == v22)
          goto LABEL_37;
      }
      v32 = v31 - 4;
      if (v32 >= 0xBC)
      {
        v35 = ((char *)(v21 - 1) - (char *)v22) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v29[(char *)v21 - (char *)v22 - 4 - v35] > &v29[(char *)v21 - (char *)v22 - 4])
        {
          v33 = v21;
        }
        else if ((float *)((char *)v21 - v35 - 4) > v21 - 1)
        {
          v33 = v21;
        }
        else if ((unint64_t)((char *)v22 - v29) >= 0x20)
        {
          v36 = (v32 >> 2) + 1;
          v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
          v33 = &v21[v37 / 0xFFFFFFFFFFFFFFFCLL];
          v30 = (float *)((char *)v30 - v37);
          v38 = &v29[4 * v26 - 16];
          v39 = v21 - 4;
          v40 = v36 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v41 = *(_OWORD *)v39;
            *(v38 - 1) = *((_OWORD *)v39 - 1);
            *v38 = v41;
            v38 -= 2;
            v39 -= 8;
            v40 -= 8;
          }
          while (v40);
          if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_37;
        }
        else
        {
          v33 = v21;
        }
      }
      else
      {
        v33 = v21;
      }
      do
      {
        v34 = *((_DWORD *)v33-- - 1);
        *((_DWORD *)v30-- - 1) = v34;
      }
      while (v33 != v22);
LABEL_37:
      v20 = (float *)&v29[4 * v28];
      __p = v30;
      v48 = v20;
      if (v22)
      {
        operator delete(v22);
        v23 = *(_QWORD *)v5;
      }
      v22 = v30;
      ++v24;
      v21 = v19;
      if (v24 >= (*((_QWORD *)v5 + 1) - v23) >> 5)
        goto LABEL_16;
    }
  }
  if (v7 >> 62)
    sub_1BE61F930();
  v19 = (float *)operator new(4 * v7);
  v20 = &v19[v7];
  __p = v19;
  v47 = v19;
  v48 = v20;
  if (v5 != v4)
    goto LABEL_15;
LABEL_52:
  sub_1BE8832D0(a2, (uint64_t)&__p);
  if (__p)
    operator delete(__p);
}

void sub_1BE881390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::DeltaFeatureExtractor::process(CoreHandwriting::DeltaFeatureExtractor *this@<X0>, const CoreHandwriting::Ink *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  const double *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  int v34;
  int *v35;
  char *v36;
  double v37;
  int *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  int v42;
  int *v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  int v66;
  int *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int *v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  int *v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  float v101;
  double v102;
  int *v103;
  char *v104;
  char *v105;
  unint64_t v106;
  int v107;
  int *v108;
  char *v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  int *v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  float v127;
  void *__p;
  void *v129;
  _QWORD *v130;
  float64x2x3_t v131;
  float64x2x3_t v132;

  v6 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 == v5)
  {
    v8 = 0;
  }
  else
  {
    v7 = v5 - v6 - 24;
    if (v7 >= 0x60)
    {
      v9 = v7 / 0x18 + 1;
      v10 = v9 & 3;
      if ((v9 & 3) == 0)
        v10 = 4;
      v11 = v9 - v10;
      v12 = v6 + 24 * v11;
      v13 = 0uLL;
      v14 = 0uLL;
      do
      {
        v15 = v6 + 96;
        v131 = vld3q_f64((const double *)v6);
        v16 = (const double *)(v6 + 48);
        v13 = vsraq_n_s64(v13, vsubq_s64((int64x2_t)v131.val[1], (int64x2_t)v131.val[0]), 5uLL);
        v132 = vld3q_f64(v16);
        v14 = vsraq_n_s64(v14, vsubq_s64((int64x2_t)v132.val[1], (int64x2_t)v132.val[0]), 5uLL);
        v6 = v15;
        v11 -= 4;
      }
      while (v11);
      v8 = vaddvq_s64(vaddq_s64(v14, v13));
      v6 = v12;
    }
    else
    {
      v8 = 0;
    }
    do
    {
      v17 = *(double *)v6;
      v18 = *(_QWORD *)(v6 + 8);
      v6 += 24;
      v8 += (v18 - *(_QWORD *)&v17) >> 5;
    }
    while (v6 != v5);
  }
  v19 = (*(uint64_t (**)(CoreHandwriting::DeltaFeatureExtractor *))(*(_QWORD *)this + 24))(this);
  v20 = operator new(0x10uLL);
  v129 = v20 + 2;
  v130 = v20 + 2;
  *v20 = v8;
  v20[1] = v19;
  __p = v20;
  sub_1BE883440((uint64_t)a3, (char **)&__p);
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  v21 = *(uint64_t **)a2;
  v22 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (*(uint64_t **)a2 != v22)
  {
    v23 = 0;
    v25 = *((double *)a2 + 6);
    v24 = *((double *)a2 + 7);
    do
    {
      v26 = *v21;
      v27 = v21[1];
      while (v26 != v27)
      {
        if (*(_BYTE *)(v26 + 24))
        {
          v30 = (int *)operator new(0x10uLL);
          *(_QWORD *)v30 = v23;
          *((_QWORD *)v30 + 1) = 0;
          v32 = (char *)a3[3];
          v31 = (char *)a3[4];
          if ((unint64_t)(v31 - v32) > 0x10)
            v31 = v32 + 16;
          if (v32 == v31)
          {
            v45 = 0;
          }
          else
          {
            v33 = v31 - v32 - 8;
            if (v33 < 8)
            {
              v34 = 0;
              v35 = v30;
              v36 = (char *)a3[3];
              goto LABEL_36;
            }
            v46 = 0;
            v47 = 0;
            v48 = (v33 >> 3) + 1;
            v49 = 2 * (v48 & 0x3FFFFFFFFFFFFFFELL);
            v35 = &v30[v49];
            v36 = &v32[v49 * 4];
            v50 = (int *)(v32 + 8);
            v51 = v30 + 2;
            v52 = v48 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v53 = *(v50 - 2);
              v55 = *v50;
              v50 += 4;
              v54 = v55;
              v56 = *(v51 - 2);
              v57 = *v51;
              v51 += 4;
              v46 += v56 * v53;
              v47 += v57 * v54;
              v52 -= 2;
            }
            while (v52);
            v34 = v47 + v46;
            if (v48 != (v48 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_36:
                v59 = *(_DWORD *)v36;
                v36 += 8;
                v58 = v59;
                v60 = *v35;
                v35 += 2;
                v34 += v60 * v58;
              }
              while (v36 != v31);
            }
            v45 = v34;
          }
          v61 = a3[6];
          operator delete(v30);
          *(_DWORD *)(v61 + 4 * v45) = 0;
          v62 = (int *)operator new(0x10uLL);
          *(_QWORD *)v62 = v23;
          *((_QWORD *)v62 + 1) = 1;
          v64 = (char *)a3[3];
          v63 = (char *)a3[4];
          if ((unint64_t)(v63 - v64) > 0x10)
            v63 = v64 + 16;
          if (v64 == v63)
          {
            v28 = 0;
          }
          else
          {
            v65 = v63 - v64 - 8;
            if (v65 < 8)
            {
              v66 = 0;
              v67 = v62;
              v68 = (char *)a3[3];
              goto LABEL_46;
            }
            v69 = 0;
            v70 = 0;
            v71 = (v65 >> 3) + 1;
            v72 = 2 * (v71 & 0x3FFFFFFFFFFFFFFELL);
            v67 = &v62[v72];
            v68 = &v64[v72 * 4];
            v73 = (int *)(v64 + 8);
            v74 = v62 + 2;
            v75 = v71 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v76 = *(v73 - 2);
              v78 = *v73;
              v73 += 4;
              v77 = v78;
              v79 = *(v74 - 2);
              v80 = *v74;
              v74 += 4;
              v69 += v79 * v76;
              v70 += v80 * v77;
              v75 -= 2;
            }
            while (v75);
            v66 = v70 + v69;
            if (v71 != (v71 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_46:
                v82 = *(_DWORD *)v68;
                v68 += 8;
                v81 = v82;
                v83 = *v67;
                v67 += 2;
                v66 += v83 * v81;
              }
              while (v68 != v63);
            }
            v28 = v66;
          }
          v29 = a3[6];
          operator delete(v62);
          *(_DWORD *)(v29 + 4 * v28) = 0;
          goto LABEL_19;
        }
        v37 = *(double *)v26;
        v38 = (int *)operator new(0x10uLL);
        *(_QWORD *)v38 = v23;
        *((_QWORD *)v38 + 1) = 0;
        v40 = (char *)a3[3];
        v39 = (char *)a3[4];
        if ((unint64_t)(v39 - v40) > 0x10)
          v39 = v40 + 16;
        if (v40 == v39)
        {
          v84 = 0;
          goto LABEL_54;
        }
        v41 = v39 - v40 - 8;
        if (v41 >= 8)
        {
          v85 = 0;
          v86 = 0;
          v87 = (v41 >> 3) + 1;
          v88 = 2 * (v87 & 0x3FFFFFFFFFFFFFFELL);
          v43 = &v38[v88];
          v44 = &v40[v88 * 4];
          v89 = (int *)(v40 + 8);
          v90 = v38 + 2;
          v91 = v87 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v92 = *(v89 - 2);
            v94 = *v89;
            v89 += 4;
            v93 = v94;
            v95 = *(v90 - 2);
            v96 = *v90;
            v90 += 4;
            v85 += v95 * v92;
            v86 += v96 * v93;
            v91 -= 2;
          }
          while (v91);
          v42 = v86 + v85;
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_53;
        }
        else
        {
          v42 = 0;
          v43 = v38;
          v44 = (char *)a3[3];
        }
        do
        {
          v98 = *(_DWORD *)v44;
          v44 += 8;
          v97 = v98;
          v99 = *v43;
          v43 += 2;
          v42 += v99 * v97;
        }
        while (v44 != v39);
LABEL_53:
        v84 = v42;
LABEL_54:
        v100 = a3[6];
        operator delete(v38);
        v101 = v37 - v25;
        *(float *)(v100 + 4 * v84) = v101;
        v102 = *(double *)(v26 + 8);
        v103 = (int *)operator new(0x10uLL);
        *(_QWORD *)v103 = v23;
        *((_QWORD *)v103 + 1) = 1;
        v105 = (char *)a3[3];
        v104 = (char *)a3[4];
        if ((unint64_t)(v104 - v105) > 0x10)
          v104 = v105 + 16;
        if (v105 != v104)
        {
          v106 = v104 - v105 - 8;
          if (v106 < 8)
          {
            v107 = 0;
            v108 = v103;
            v109 = (char *)a3[3];
            goto LABEL_63;
          }
          v111 = 0;
          v112 = 0;
          v113 = (v106 >> 3) + 1;
          v114 = 2 * (v113 & 0x3FFFFFFFFFFFFFFELL);
          v108 = &v103[v114];
          v109 = &v105[v114 * 4];
          v115 = (int *)(v105 + 8);
          v116 = v103 + 2;
          v117 = v113 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v118 = *(v115 - 2);
            v120 = *v115;
            v115 += 4;
            v119 = v120;
            v121 = *(v116 - 2);
            v122 = *v116;
            v116 += 4;
            v111 += v121 * v118;
            v112 += v122 * v119;
            v117 -= 2;
          }
          while (v117);
          v107 = v112 + v111;
          if (v113 != (v113 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_63:
              v124 = *(_DWORD *)v109;
              v109 += 8;
              v123 = v124;
              v125 = *v108;
              v108 += 2;
              v107 += v125 * v123;
            }
            while (v109 != v104);
          }
          v110 = v107;
          goto LABEL_65;
        }
        v110 = 0;
LABEL_65:
        v126 = a3[6];
        operator delete(v103);
        v127 = v102 - v24;
        *(float *)(v126 + 4 * v110) = v127;
        v25 = *(double *)v26;
        v24 = *(double *)(v26 + 8);
LABEL_19:
        ++v23;
        v26 += 32;
      }
      v21 += 3;
    }
    while (v21 != v22);
  }
}

void sub_1BE881898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE8818B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE72A5B8(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::InkToImageBaseFeatureExtractionStep::setPadToMultipleOf(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t CoreHandwriting::InkToImageBaseFeatureExtractionStep::setEnlargeSingleDot(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void CoreHandwriting::InkToImageBaseFeatureExtractionStep::process(CoreHandwriting::InkToImageBaseFeatureExtractionStep *this@<X0>, double ***a2@<X1>, _QWORD *a3@<X8>)
{
  CoreHandwriting::InkToImageBaseFeatureExtractionStep *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double **v10;
  double **v11;
  double v12;
  double v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  int64x2_t v28;
  int8x16_t v29;
  uint64x2_t v30;
  int8x16_t v31;
  uint64x2_t v32;
  int v33;
  _OWORD *v34;
  double **v35;
  unint64_t v36;
  float v37;
  float v38;
  double v39;
  unint64_t v40;
  double v41;
  double **v42;
  double *v43;
  double v44;
  double v45;
  unint64_t v46;
  float v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  double v52;
  double v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int i;
  float *v60;
  int *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  int v65;
  int *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  int *v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  int v93;
  int *v94;
  char *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int *v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  NSObject *v113;
  int *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  int v118;
  int *v119;
  char *v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  int *v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  char v137;
  double v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  BOOL v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int *v148;
  char *v149;
  char *v150;
  unint64_t v151;
  int v152;
  int *v153;
  char *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  int *v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int *v170;
  const CoreHandwriting::Ink *v171;
  unint64_t v172;
  uint64x2_t v173;
  double *v174;
  double v175;
  double v176;
  uint64x2_t v177;
  _BYTE __p[24];
  unint64_t v179;
  __int16 v180;
  unint64_t v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;
  uint64_t v186;

  v4 = this;
  v186 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(CoreHandwriting::InkToImageBaseFeatureExtractionStep *))(*(_QWORD *)this + 40))(this);
  v8 = v6;
  v9 = v7;
  v10 = *a2;
  v11 = a2[1];
  v171 = (const CoreHandwriting::Ink *)a2;
  if (*a2 == v11)
  {
    v14 = -1.79769313e308;
    v13 = -1.79769313e308;
    v175 = 1.79769313e308;
    v176 = 1.79769313e308;
  }
  else
  {
    v12 = -1.79769313e308;
    v13 = -1.79769313e308;
    v175 = 1.79769313e308;
    v176 = 1.79769313e308;
    do
    {
      v15 = *v10;
      v16 = v10[1];
      if (*v10 == v16)
        goto LABEL_3;
      v17 = 1.79769313e308;
      v14 = -1.79769313e308;
      v18 = -1.79769313e308;
      v19 = 1.79769313e308;
      do
      {
        v20 = *v15;
        v21 = v15[1];
        v15 += 4;
        if (v19 > v20)
          v19 = v20;
        if (v18 < v20)
          v18 = v20;
        if (v17 > v21)
          v17 = v21;
        if (v14 < v21)
          v14 = v21;
      }
      while (v15 != v16);
      v22 = v175;
      if (v175 > v19)
        v22 = v19;
      if (v13 < v18)
        v13 = v18;
      v23 = v176;
      if (v176 > v17)
        v23 = v17;
      v175 = v22;
      v176 = v23;
      if (v12 >= v14)
LABEL_3:
        v14 = v12;
      v10 += 3;
      v12 = v14;
    }
    while (v10 != v11);
  }
  v24 = v13 - v175;
  if (v24 <= 0.0)
    v25 = 1.0;
  else
    v25 = v24;
  if (v14 - v176 <= 0.0)
    v26 = 1.0;
  else
    v26 = v14 - v176;
  v27 = *(_QWORD *)((char *)v4 + 20);
  v28.i64[0] = (int)v27;
  v28.i64[1] = SHIDWORD(v27);
  v29 = (int8x16_t)vcgtzq_s64(v28);
  v30.i64[0] = v6;
  v30.i64[1] = v7;
  v28.i64[0] = v27;
  v28.i64[1] = HIDWORD(v27);
  v31 = vbslq_s8((int8x16_t)vcgtq_u64(v30, (uint64x2_t)v28), (int8x16_t)v30, (int8x16_t)v28);
  v32 = (uint64x2_t)vbslq_s8(v29, v31, (int8x16_t)v30);
  v33 = *((_DWORD *)v4 + 3);
  if (v33 < 1)
  {
    v177 = v32;
  }
  else
  {
    *(float *)v31.i32 = (float)v33;
    v177 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(vrndp_f32(vdiv_f32(vcvt_f32_f64(vcvtq_f64_u64(v32)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 0))), (float)v33)));
  }
  v34 = operator new(0x10uLL);
  *(_QWORD *)__p = v34;
  *v34 = v177;
  *(_QWORD *)&__p[8] = v34 + 1;
  *(_QWORD *)&__p[16] = v34 + 1;
  sub_1BE883440((uint64_t)a3, (char **)__p);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  v35 = *a2;
  if (a2[1] != *a2)
  {
    v36 = 0;
    v37 = v25;
    v38 = v26;
    v39 = (float)((float)(unint64_t)(v9 - 1) / v37);
    v40 = v177.i64[1] - 1;
    v173 = v177;
    --v177.i64[0];
    v41 = (float)((float)(unint64_t)(v8 - 1) / v38);
    v170 = (int *)v4;
    do
    {
      v42 = &v35[3 * v36];
      v43 = *v42;
      v174 = v42[1];
      if (*v42 == v174)
      {
        ++v36;
        goto LABEL_39;
      }
      v44 = (double)(int)((*v43 - v175) * v39);
      v45 = (double)(int)((v43[1] - v176) * v41);
      v46 = v36 + 1;
      v172 = v46;
      if (*((_BYTE *)v4 + 8))
        v47 = (float)(int)v46;
      else
        v47 = 1.0;
      v48 = 1;
      do
      {
        v52 = v45;
        v53 = v44;
        v44 = fmin((double)(int)((*v43 - v175) * v39), (double)(unint64_t)(v177.i64[1] - 1));
        v45 = fmin((double)(int)((v43[1] - v176) * v41), (double)v177.u64[0]);
        v54 = (int)(v44 - v53);
        v55 = (int)(v45 - v52);
        if (v54 >= 0)
          v56 = (int)(v44 - v53);
        else
          v56 = -v54;
        if (v55 >= 0)
          v57 = (int)(v45 - v52);
        else
          v57 = -v55;
        if (v56 >= v57)
        {
          if (v54 < 1)
            v85 = -1;
          else
            v85 = 1;
          if (!v54)
            goto LABEL_94;
          v86 = 0;
          while (2)
          {
            v89 = (int *)operator new(0x10uLL);
            *(_QWORD *)v89 = (unint64_t)(v52 + (float)((float)(v86 * v55) / (float)v54));
            *((_QWORD *)v89 + 1) = (unint64_t)(v53 + (double)v86);
            v91 = (char *)a3[3];
            v90 = (char *)a3[4];
            if ((unint64_t)(v90 - v91) > 0x10)
              v90 = v91 + 16;
            if (v91 == v90)
            {
              v87 = 0;
            }
            else
            {
              v92 = v90 - v91 - 8;
              if (v92 < 8)
              {
                v93 = 0;
                v94 = v89;
                v95 = (char *)a3[3];
                goto LABEL_92;
              }
              v96 = 0;
              v97 = 0;
              v98 = (v92 >> 3) + 1;
              v99 = 2 * (v98 & 0x3FFFFFFFFFFFFFFELL);
              v94 = &v89[v99];
              v95 = &v91[v99 * 4];
              v100 = (int *)(v91 + 8);
              v101 = v89 + 2;
              v102 = v98 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                v103 = *(v100 - 2);
                v105 = *v100;
                v100 += 4;
                v104 = v105;
                v106 = *(v101 - 2);
                v107 = *v101;
                v101 += 4;
                v96 += v106 * v103;
                v97 += v107 * v104;
                v102 -= 2;
              }
              while (v102);
              v93 = v97 + v96;
              if (v98 != (v98 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_92:
                  v109 = *(_DWORD *)v95;
                  v95 += 8;
                  v108 = v109;
                  v110 = *v94;
                  v94 += 2;
                  v93 += v110 * v108;
                }
                while (v95 != v90);
              }
              v87 = v93;
            }
            v88 = a3[6];
            operator delete(v89);
            *(float *)(v88 + 4 * v87) = v47;
            v86 += v85;
            if (v86 == v54)
              goto LABEL_94;
            continue;
          }
        }
        if (v55 < 1)
          v58 = -1;
        else
          v58 = 1;
        if (v55)
        {
          for (i = 0; i != v55; i += v58)
          {
            while (1)
            {
              v61 = (int *)operator new(0x10uLL);
              *(_QWORD *)v61 = (unint64_t)(v52 + (double)i);
              *((_QWORD *)v61 + 1) = (unint64_t)(v53 + (float)((float)(i * v54) / (float)v55));
              v63 = (char *)a3[3];
              v62 = (char *)a3[4];
              if ((unint64_t)(v62 - v63) > 0x10)
                v62 = v63 + 16;
              if (v63 != v62)
                break;
              v60 = (float *)a3[6];
              operator delete(v61);
              *v60 = v47;
              i += v58;
              if (i == v55)
                goto LABEL_94;
            }
            v64 = v62 - v63 - 8;
            if (v64 >= 8)
            {
              v68 = 0;
              v69 = 0;
              v70 = (v64 >> 3) + 1;
              v71 = 2 * (v70 & 0x3FFFFFFFFFFFFFFELL);
              v66 = &v61[v71];
              v67 = &v63[v71 * 4];
              v72 = (int *)(v63 + 8);
              v73 = v61 + 2;
              v74 = v70 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                v75 = *(v72 - 2);
                v77 = *v72;
                v72 += 4;
                v76 = v77;
                v78 = *(v73 - 2);
                v79 = *v73;
                v73 += 4;
                v68 += v78 * v75;
                v69 += v79 * v76;
                v74 -= 2;
              }
              while (v74);
              v65 = v69 + v68;
              if (v70 == (v70 & 0x3FFFFFFFFFFFFFFELL))
                goto LABEL_75;
            }
            else
            {
              v65 = 0;
              v66 = v61;
              v67 = (char *)a3[3];
            }
            do
            {
              v81 = *(_DWORD *)v67;
              v67 += 8;
              v80 = v81;
              v82 = *v66;
              v66 += 2;
              v65 += v82 * v80;
            }
            while (v67 != v62);
LABEL_75:
            v83 = v65;
            v84 = a3[6];
            operator delete(v61);
            *(float *)(v84 + 4 * v83) = v47;
          }
        }
LABEL_94:
        v111 = (unint64_t)v45;
        if (v40 >= (unint64_t)v44 && v177.i64[0] >= v111)
        {
          v114 = (int *)operator new(0x10uLL);
          *(_QWORD *)v114 = v111;
          *((_QWORD *)v114 + 1) = (unint64_t)v44;
          v116 = (char *)a3[3];
          v115 = (char *)a3[4];
          if ((unint64_t)(v115 - v116) > 0x10)
            v115 = v116 + 16;
          if (v116 == v115)
          {
            v49 = 0;
LABEL_46:
            v50 = a3[6];
            operator delete(v114);
            *(float *)(v50 + 4 * v49) = v47;
            goto LABEL_47;
          }
          v117 = v115 - v116 - 8;
          if (v117 >= 8)
          {
            v121 = 0;
            v122 = 0;
            v123 = (v117 >> 3) + 1;
            v124 = 2 * (v123 & 0x3FFFFFFFFFFFFFFELL);
            v119 = &v114[v124];
            v120 = &v116[v124 * 4];
            v125 = (int *)(v116 + 8);
            v126 = v114 + 2;
            v127 = v123 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v128 = *(v125 - 2);
              v130 = *v125;
              v125 += 4;
              v129 = v130;
              v131 = *(v126 - 2);
              v132 = *v126;
              v126 += 4;
              v121 += v131 * v128;
              v122 += v132 * v129;
              v127 -= 2;
            }
            while (v127);
            v118 = v122 + v121;
            if (v123 == (v123 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_111;
          }
          else
          {
            v118 = 0;
            v119 = v114;
            v120 = (char *)a3[3];
          }
          do
          {
            v134 = *(_DWORD *)v120;
            v120 += 8;
            v133 = v134;
            v135 = *v119;
            v119 += 2;
            v118 += v135 * v133;
          }
          while (v120 != v115);
LABEL_111:
          v49 = v118;
          goto LABEL_46;
        }
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v113 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v113, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)__p = 134219264;
          *(double *)&__p[4] = v44;
          *(_WORD *)&__p[12] = 2048;
          *(double *)&__p[14] = v45;
          *(_WORD *)&__p[22] = 2048;
          v179 = (unint64_t)v44;
          v180 = 2048;
          v181 = (unint64_t)v45;
          v182 = 2048;
          v183 = v173.i64[1];
          v184 = 2048;
          v185 = v173.i64[0];
          _os_log_impl(&dword_1BE607000, v113, OS_LOG_TYPE_FAULT, "Unexpected coordinate (%f, %f) size_t (%zu, %zu) for tensor with shape (%zu, %zu)", __p, 0x3Eu);
        }
LABEL_47:
        v51 = v44 == v53;
        if (v45 != v52)
          v51 = 0;
        v48 = (v48 & 1) != 0 && v51;
        v43 += 4;
      }
      while (v43 != v174);
      v4 = (CoreHandwriting::InkToImageBaseFeatureExtractionStep *)v170;
      v136 = v170[4];
      if (v136 > 0)
        v137 = v48;
      else
        v137 = 0;
      if ((v137 & 1) == 0)
      {
        v36 = v172;
        goto LABEL_39;
      }
      v138 = (double)v136;
      v139 = (int)(v45 - (double)v136) & ~((int)(v45 - (double)v136) >> 31);
      v140 = (unint64_t)(v45 + (double)v136);
      if (v177.i64[0] < v140)
        v140 = v177.i64[0];
      v36 = v172;
      if (v140 >= v139)
      {
        while (1)
        {
          v143 = (int)(v44 - v138) & ~((int)(v44 - v138) >> 31);
          v138 = (double)v136;
          v144 = (unint64_t)(v44 + (double)v136);
          if (v40 < v144)
            v144 = v177.i64[1] - 1;
          if (v144 >= v143)
            break;
LABEL_120:
          v141 = (unint64_t)(v45 + v138);
          if (v177.i64[0] < v141)
            v141 = v177.i64[0];
          v142 = v141 > v139++;
          if (!v142)
            goto LABEL_39;
        }
        while (2)
        {
          v148 = (int *)operator new(0x10uLL);
          *(_QWORD *)v148 = v139;
          *((_QWORD *)v148 + 1) = v143;
          v150 = (char *)a3[3];
          v149 = (char *)a3[4];
          if ((unint64_t)(v149 - v150) > 0x10)
            v149 = v150 + 16;
          if (v150 == v149)
          {
            v145 = 0;
          }
          else
          {
            v151 = v149 - v150 - 8;
            if (v151 < 8)
            {
              v152 = 0;
              v153 = v148;
              v154 = (char *)a3[3];
              goto LABEL_141;
            }
            v155 = 0;
            v156 = 0;
            v157 = (v151 >> 3) + 1;
            v158 = 2 * (v157 & 0x3FFFFFFFFFFFFFFELL);
            v153 = &v148[v158];
            v154 = &v150[v158 * 4];
            v159 = (int *)(v150 + 8);
            v160 = v148 + 2;
            v161 = v157 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v162 = *(v159 - 2);
              v164 = *v159;
              v159 += 4;
              v163 = v164;
              v165 = *(v160 - 2);
              v166 = *v160;
              v160 += 4;
              v155 += v165 * v162;
              v156 += v166 * v163;
              v161 -= 2;
            }
            while (v161);
            v152 = v156 + v155;
            if (v157 != (v157 & 0x3FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_141:
                v168 = *(_DWORD *)v154;
                v154 += 8;
                v167 = v168;
                v169 = *v153;
                v153 += 2;
                v152 += v169 * v167;
              }
              while (v154 != v149);
            }
            v145 = v152;
          }
          v146 = a3[6];
          operator delete(v148);
          *(float *)(v146 + 4 * v145) = v47;
          v136 = v170[4];
          v138 = (double)v136;
          v147 = (unint64_t)(v44 + (double)v136);
          if (v40 < v147)
            v147 = v177.i64[1] - 1;
          v142 = v147 > v143++;
          if (!v142)
            goto LABEL_120;
          continue;
        }
      }
LABEL_39:
      v35 = *(double ***)v171;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v171 + 1) - *(_QWORD *)v171) >> 3) > v36);
  }
}

void sub_1BE882220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreHandwriting::InkToImageByHeightFeatureExtractionStep::getDimensionsToRender(CoreHandwriting::InkToImageByHeightFeatureExtractionStep *this, double ***a2)
{
  double **v2;
  double **v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = 1.79769313e308;
    v5 = -1.79769313e308;
    v6 = -1.79769313e308;
    v7 = 1.79769313e308;
    do
    {
      v8 = *v2;
      v9 = v2[1];
      if (*v2 != v9)
      {
        v10 = 1.79769313e308;
        v11 = -1.79769313e308;
        v12 = -1.79769313e308;
        v13 = 1.79769313e308;
        do
        {
          v14 = *v8;
          v15 = v8[1];
          v8 += 4;
          if (v13 > v14)
            v13 = v14;
          if (v12 < v14)
            v12 = v14;
          if (v10 > v15)
            v10 = v15;
          if (v11 < v15)
            v11 = v15;
        }
        while (v8 != v9);
        if (v7 > v13)
          v7 = v13;
        if (v6 < v12)
          v6 = v12;
        if (v4 > v10)
          v4 = v10;
        if (v5 < v11)
          v5 = v11;
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return *((int *)this + 9);
}

uint64_t CoreHandwriting::InkToImageByHeightFeatureExtractionStep::numDimensions(CoreHandwriting::InkToImageByHeightFeatureExtractionStep *this)
{
  return *((int *)this + 9);
}

float CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep::estimateInkSymbolSize(CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep *this, const CoreHandwriting::Ink *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  float v18;
  float64x2_t **v19;
  float64x2_t *v20;
  float64x2_t *v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  unint64_t v26;
  float *v27;
  float *v28;
  float *v29;
  unint64_t v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float v38;
  float *v39;
  float *v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  NSObject *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float *v70;
  float v71;
  float v72;
  float *v73;
  float *v74;
  float *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  _QWORD v82[4];

  v2 = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  if (v3)
  {
    v4 = v3 / 24;
    memset(v82, 0, 24);
    if ((unint64_t)(v3 / 24) >> 62)
      sub_1BE61F930();
    v5 = 4 * v4;
    v6 = (char *)operator new(4 * v4);
    bzero(v6, 4 * v4);
    v7 = 0;
    if (v4 <= 1)
      v8 = 1;
    else
      v8 = v4;
    v9 = vdupq_n_s64(0xFFF0000000000000);
    v10 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v11 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      v19 = (float64x2_t **)(v2 + 24 * v7);
      v20 = *v19;
      v21 = v19[1];
      *(_QWORD *)&_Q3.f64[1] = v9.i64[1];
      if (v20 != v21)
      {
        v23 = (float64x2_t)v11;
        v24 = (float64x2_t)v10;
        do
        {
          v25 = *v20;
          v20 += 2;
          v24 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v25), (int8x16_t)v25, (int8x16_t)v24);
          v23 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v25, v23), (int8x16_t)v25, (int8x16_t)v23);
        }
        while (v20 != v21);
        _Q3 = vsubq_f64(v23, v24);
      }
      _D5 = _Q3.f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      v18 = sqrt(_D4);
      *(float *)&v6[4 * v7++] = v18;
    }
    while (v7 != v8);
    v26 = (2 * v4) & 0xFFFFFFFFFFFFFFFCLL;
    v27 = (float *)&v6[v26];
    if (v26 != v5)
    {
      v28 = (float *)&v6[v5];
      v29 = (float *)v6;
      do
      {
        v30 = v28 - v29;
        if (v30 < 2)
          break;
        if (v30 == 3)
        {
          v65 = *v29;
          v66 = v29[1];
          v67 = *(v28 - 1);
          if (v66 >= *v29)
          {
            if (v67 < v66)
            {
              v29[1] = v67;
              *(v28 - 1) = v66;
              v79 = *v29;
              v78 = v29[1];
              if (v78 < *v29)
              {
                *v29 = v78;
                v29[1] = v79;
              }
            }
          }
          else
          {
            if (v67 >= v66)
            {
              *v29 = v66;
              v29[1] = v65;
              v80 = *(v28 - 1);
              if (v80 >= v65)
                break;
              v29[1] = v80;
            }
            else
            {
              *v29 = v67;
            }
            *(v28 - 1) = v65;
          }
          break;
        }
        if (v30 == 2)
        {
          v68 = *(v28 - 1);
          v69 = *v29;
          if (v68 < *v29)
          {
            *v29 = v68;
            *(v28 - 1) = v69;
          }
          break;
        }
        if ((char *)v28 - (char *)v29 <= 31)
        {
          while (v29 != v28 - 1)
          {
            v70 = v29++;
            if (v70 != v28 && v29 != v28)
            {
              v71 = *v70;
              v72 = *v70;
              v73 = v29;
              v74 = v70;
              v75 = v29;
              do
              {
                v76 = *v75++;
                v77 = v76;
                if (v76 < v72)
                {
                  v72 = v77;
                  v74 = v73;
                }
                v73 = v75;
              }
              while (v75 != v28);
              if (v74 != v70)
              {
                *v70 = *v74;
                *v74 = v71;
              }
            }
          }
          break;
        }
        v31 = &v29[v30 >> 1];
        v32 = v28 - 1;
        v33 = *(v28 - 1);
        v34 = *v31;
        v35 = *v29;
        if (*v31 >= *v29)
        {
          if (v33 >= v34)
          {
            v36 = 0;
            v37 = *v29;
            v38 = *v31;
            if (*v29 >= *v31)
              goto LABEL_39;
            goto LABEL_21;
          }
          *v31 = v33;
          *v32 = v34;
          v48 = *v29;
          if (*v31 < *v29)
          {
            *v29 = *v31;
            *v31 = v48;
            v36 = 2;
            v37 = *v29;
            v38 = *v31;
            if (*v29 >= *v31)
              goto LABEL_39;
            goto LABEL_21;
          }
        }
        else
        {
          if (v33 < v34)
          {
            *v29 = v33;
            *v32 = v35;
            v36 = 1;
            v37 = *v29;
            v38 = *v31;
            if (*v29 >= *v31)
              goto LABEL_39;
            goto LABEL_21;
          }
          *v29 = v34;
          *v31 = v35;
          if (*v32 < v35)
          {
            *v31 = *v32;
            *v32 = v35;
            v36 = 2;
            v37 = *v29;
            v38 = *v31;
            if (*v29 >= *v31)
              goto LABEL_39;
            goto LABEL_21;
          }
        }
        v36 = 1;
        v37 = *v29;
        v38 = *v31;
        if (*v29 >= *v31)
        {
LABEL_39:
          v39 = v28 - 1;
          while (--v39 != v29)
          {
            if (*v39 < v38)
            {
              *v29 = *v39;
              *v39 = v37;
              ++v36;
              v40 = v29 + 1;
              if (v29 + 1 < v39)
                goto LABEL_22;
              goto LABEL_43;
            }
          }
          v52 = v29 + 1;
          if (v37 >= *v32)
          {
            if (v52 == v32)
              break;
            while (1)
            {
              v53 = *v52;
              if (v37 < *v52)
                break;
              if (++v52 == v32)
                goto LABEL_104;
            }
            *v52++ = *v32;
            *v32 = v53;
          }
          if (v52 == v32)
            break;
          while (1)
          {
            v57 = *v29;
            do
            {
              v58 = *v52++;
              v59 = v58;
            }
            while (v57 >= v58);
            v60 = v52 - 1;
            do
            {
              v61 = *--v32;
              v62 = v61;
            }
            while (v57 < v61);
            if (v60 >= v32)
              break;
            *v60 = v62;
            *v32 = v59;
          }
          v29 = v52 - 1;
          if (v60 > v27)
            break;
          continue;
        }
LABEL_21:
        v39 = v28 - 1;
        v40 = v29 + 1;
        if (v29 + 1 >= v28 - 1)
        {
LABEL_43:
          v45 = v40;
        }
        else
        {
LABEL_22:
          v41 = v40;
          while (1)
          {
            v42 = *v31;
            do
            {
              v43 = *v41++;
              v44 = v43;
            }
            while (v43 < v42);
            v45 = v41 - 1;
            do
            {
              v46 = *--v39;
              v47 = v46;
            }
            while (v46 >= v42);
            if (v45 >= v39)
              break;
            *v45 = v47;
            *v39 = v44;
            ++v36;
            if (v45 == v31)
              v31 = v39;
          }
        }
        if (v45 != v31)
        {
          v49 = *v45;
          if (*v31 < *v45)
          {
            *v45 = *v31;
            *v31 = v49;
            ++v36;
          }
        }
        if (v45 == v27)
          break;
        if (!v36)
        {
          if (v45 <= v27)
          {
            v54 = v45 + 1;
            while (v54 != v28)
            {
              v56 = *(v54 - 1);
              v55 = *v54++;
              if (v55 < v56)
                goto LABEL_49;
            }
          }
          else
          {
            while (v40 != v45)
            {
              v51 = *(v40 - 1);
              v50 = *v40++;
              if (v50 < v51)
                goto LABEL_49;
            }
          }
          break;
        }
LABEL_49:
        if (v45 <= v27)
          v29 = v45 + 1;
        else
          v28 = v45;
      }
      while (v28 != v27);
    }
LABEL_104:
    v64 = *v27;
    operator delete(v6);
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v63 = (id)qword_1EF568E20;
    v64 = 0.0;
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v82[0]) = 0;
      _os_log_impl(&dword_1BE607000, v63, OS_LOG_TYPE_ERROR, "Encounted unexpected empty inks", (uint8_t *)v82, 2u);
    }
  }
  return v64;
}

void sub_1BE8828F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep::getDimensionsToRender(CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep *this, double ***a2)
{
  double **v3;
  double **v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float v23;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    v5 = 1.79769313e308;
    v9 = -1.79769313e308;
    v7 = -1.79769313e308;
    v8 = 1.79769313e308;
  }
  else
  {
    v5 = 1.79769313e308;
    v6 = -1.79769313e308;
    v7 = -1.79769313e308;
    v8 = 1.79769313e308;
    do
    {
      v10 = *v3;
      v11 = v3[1];
      if (*v3 == v11)
        goto LABEL_3;
      v12 = 1.79769313e308;
      v9 = -1.79769313e308;
      v13 = -1.79769313e308;
      v14 = 1.79769313e308;
      do
      {
        v15 = *v10;
        v16 = v10[1];
        v10 += 4;
        if (v14 > v15)
          v14 = v15;
        if (v13 < v15)
          v13 = v15;
        if (v12 > v16)
          v12 = v16;
        if (v9 < v16)
          v9 = v16;
      }
      while (v10 != v11);
      if (v8 > v14)
        v8 = v14;
      if (v7 < v13)
        v7 = v13;
      if (v5 > v12)
        v5 = v12;
      if (v6 >= v9)
LABEL_3:
        v9 = v6;
      v3 += 3;
      v6 = v9;
    }
    while (v3 != v4);
  }
  v17 = CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep::estimateInkSymbolSize(this, (const CoreHandwriting::Ink *)a2);
  if (v17 <= 0.0)
    return 1;
  v18 = (float)((float)*((unint64_t *)this + 5) / v17);
  v19 = (unint64_t)fmin((v9 - v5) * v18, (double)*((int *)this + 7));
  v20 = (unint64_t)fmin((v7 - v8) * v18, (double)*((int *)this + 8));
  v21 = *((int *)this + 5);
  if (v19 < v21)
  {
    v22 = *((int *)this + 6);
    v23 = (v7 - v8) / fmax(v9 - v5, 1.0);
    if (v19 <= v20)
      v21 = (unint64_t)(float)((float)v22 / v23);
    if (v20 < v22)
      v19 = v21;
  }
  return (unint64_t)fmax((double)v19, 1.0);
}

uint64_t CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep::numDimensions(CoreHandwriting::InkToImageByStrokeSizeFeatureExtractionStep *this)
{
  return *((_QWORD *)this + 5);
}

char *CoreHandwriting::FeatureExtractionProcessor::addStep(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *result;
  uint64_t v5;

  v5 = a2;
  v3 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_1BE8835E4((char **)a1, &v5);
  }
  else
  {
    *v3 = a2;
    result = (char *)(v3 + 1);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t CoreHandwriting::FeatureExtractionProcessor::pyAddStep(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&v7, a2);
  v3 = (uint64_t *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    v5 = sub_1BE88377C(a1, &v7);
  }
  else
  {
    v4 = v7;
    v7 = 0;
    *v3 = v4;
    v5 = v3 + 1;
  }
  a1[1] = v5;
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1BE882BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::FeatureExtractionProcessor::process(CoreHandwriting::FeatureExtractionProcessor *this@<X0>, const CoreHandwriting::Ink *a2@<X1>, char **a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  void *v8[3];
  void *v9;
  void *v10;
  void *__p;
  void *v12;

  sub_1BE7C83B4((uint64_t)a3);
  v7 = *(_QWORD **)this;
  v6 = (_QWORD *)*((_QWORD *)this + 1);
  while (v7 != v6)
  {
    (*(void (**)(void **__return_ptr, _QWORD, const CoreHandwriting::Ink *))(*(_QWORD *)*v7 + 16))(v8, *v7, a2);
    CoreHandwriting::FeatureArray::concat(a3, (char **)v8);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v8[0])
    {
      v8[1] = v8[0];
      operator delete(v8[0]);
    }
    ++v7;
  }
}

void sub_1BE882C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1BE72A5B8((uint64_t)va);
  sub_1BE72A5B8(v2);
  _Unwind_Resume(a1);
}

void sub_1BE882CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE72A5B8(v1);
  _Unwind_Resume(a1);
}

CoreHandwriting::FeatureExtractionProcessor *CoreHandwriting::FeatureExtractionProcessor::FeatureExtractionProcessor(CoreHandwriting::FeatureExtractionProcessor *this, const CoreHandwriting::FeatureExtractionProcessor *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  while (v3 != v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v3 + 32))(&v10);
    v5 = (uint64_t *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2))
    {
      v7 = sub_1BE88377C(this, &v10);
    }
    else
    {
      v6 = v10;
      v10 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    *((_QWORD *)this + 1) = v7;
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v3 += 8;
  }
  return this;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  while (v3 != v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v3 + 32))(&v10);
    v5 = (uint64_t *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2))
    {
      v7 = sub_1BE88377C(this, &v10);
    }
    else
    {
      v6 = v10;
      v10 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    *((_QWORD *)this + 1) = v7;
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v3 += 8;
  }
  return this;
}

void sub_1BE882D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    sub_1BE6FA44C(v10);
    _Unwind_Resume(a1);
  }
  sub_1BE6FA44C(v10);
  _Unwind_Resume(a1);
}

void sub_1BE882E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    v12 = *v10;
    if (!*v10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v12 = *v10;
    if (!*v10)
      goto LABEL_3;
  }
  v13 = v10[1];
  v14 = v12;
  if (v13 != v12)
  {
    do
    {
      v16 = *--v13;
      v15 = v16;
      *v13 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    while (v13 != v12);
    v14 = *v10;
  }
  v10[1] = v12;
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t CoreHandwriting::FeatureExtractionProcessor::operator=(uint64_t a1, const CoreHandwriting::FeatureExtractionProcessor *a2)
{
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __p[24];

  CoreHandwriting::FeatureExtractionProcessor::FeatureExtractionProcessor((CoreHandwriting::FeatureExtractionProcessor *)__p, a2);
  v4 = *(_OWORD *)__p;
  v5 = *(_QWORD *)&__p[16];
  *(_QWORD *)__p = *(_QWORD *)a1;
  v3 = *(_QWORD **)__p;
  v6 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)&__p[8] = v6;
  if (v3)
  {
    v7 = (_QWORD *)v6;
    v8 = v3;
    if ((_QWORD *)v6 != v3)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      while (v7 != v3);
      v8 = *(void **)__p;
    }
    *(_QWORD *)&__p[8] = v3;
    operator delete(v8);
  }
  return a1;
}

void sub_1BE882F84()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE882F98()
{
  return 1;
}

_QWORD *sub_1BE882FA0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0AE0;
  *a1 = result;
  return result;
}

void sub_1BE882FE8()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE882FFC()
{
  return 2;
}

_QWORD *sub_1BE883004@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0B50;
  *a1 = result;
  return result;
}

void sub_1BE88304C()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE883060()
{
  return 1;
}

_QWORD *sub_1BE883068@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0A38;
  *a1 = result;
  return result;
}

void sub_1BE8830B0()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE8830C4()
{
  return 1;
}

_QWORD *sub_1BE8830CC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0AA8;
  *a1 = result;
  return result;
}

void sub_1BE883114()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE883128()
{
  return 1;
}

_QWORD *sub_1BE883130@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0BC0;
  *a1 = result;
  return result;
}

void sub_1BE883178()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE88318C()
{
  return 2;
}

_QWORD *sub_1BE883194@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0A00;
  *a1 = result;
  return result;
}

void sub_1BE8831E4()
{
  JUMPOUT(0x1C3B812ECLL);
}

__n128 sub_1BE8831F8@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 20);
  *(__n128 *)(v4 + 20) = result;
  *(_QWORD *)v4 = &off_1E77F0CA8;
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  *a2 = v4;
  return result;
}

void sub_1BE88325C()
{
  JUMPOUT(0x1C3B812ECLL);
}

__n128 sub_1BE883270@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 20);
  *(__n128 *)(v4 + 20) = result;
  *(_QWORD *)v4 = &off_1E77F0D20;
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a1 + 40);
  *a2 = v4;
  return result;
}

uint64_t sub_1BE8832D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v7;
  char *v8;
  _BYTE *v9;
  _QWORD *v10;
  void *__p;
  void *v13;
  _QWORD *v14;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = *(_BYTE **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 == *(_QWORD *)a2)
  {
    v9 = *(_BYTE **)a2;
  }
  else
  {
    if (v5 < 0)
      sub_1BE61F930();
    v7 = (char *)operator new(v3 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v7;
    v8 = &v7[4 * (v5 >> 2)];
    *(_QWORD *)(a1 + 64) = v8;
    memcpy(v7, v4, v5);
    *(_QWORD *)(a1 + 56) = v8;
    v4 = *(_BYTE **)a2;
    v9 = *(_BYTE **)(a2 + 8);
  }
  v10 = operator new(0x10uLL);
  v13 = v10 + 2;
  v14 = v10 + 2;
  *v10 = (v9 - v4) >> 2;
  v10[1] = 1;
  __p = v10;
  sub_1BE87F878((char **)a1, (char **)&__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1BE8833B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;

  if (__p)
  {
    operator delete(__p);
    v14 = *v12;
    if (!*v12)
    {
LABEL_3:
      v15 = *(void **)(v11 + 24);
      if (!v15)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v14 = *v12;
    if (!*v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 56) = v14;
  operator delete(v14);
  v15 = *(void **)(v11 + 24);
  if (!v15)
  {
LABEL_4:
    v16 = *(void **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v11 + 32) = v15;
  operator delete(v15);
  v16 = *(void **)v11;
  if (!*(_QWORD *)v11)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v11 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE883440(uint64_t a1, char **a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int v25;
  unint64_t v26;
  int v27;

  *(_OWORD *)(a1 + 48) = 0u;
  v3 = a1 + 48;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_1BE87F878((char **)a1, a2);
  v5 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  if (*(char **)a1 != v4)
  {
    v6 = v4 - v5 - 8;
    if (v6 >= 0x38)
    {
      v15 = (v6 >> 3) + 1;
      v8 = &v5[8 * (v15 & 0x3FFFFFFFFFFFFFF8)];
      v16 = (int32x4_t *)(v5 + 32);
      v17.i64[0] = 0x100000001;
      v17.i64[1] = 0x100000001;
      v18 = v15 & 0x3FFFFFFFFFFFFFF8;
      v19.i64[0] = 0x100000001;
      v19.i64[1] = 0x100000001;
      do
      {
        v21 = v16[-2];
        v20 = v16[-1];
        v23 = *v16;
        v22 = v16[1];
        v16 += 4;
        v17 = vmulq_s32(v17, vuzp1q_s32(v21, v20));
        v19 = vmulq_s32(v19, vuzp1q_s32(v23, v22));
        v18 -= 8;
      }
      while (v18);
      v24 = (int8x16_t)vmulq_s32(v19, v17);
      *(int32x2_t *)v24.i8 = vmul_s32(*(int32x2_t *)v24.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
      v7 = v24.i32[0] * v24.i32[1];
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_11:
        v9 = v7;
        v27 = 0;
        v10 = *(_QWORD *)(a1 + 48);
        v26 = (*(_QWORD *)(a1 + 56) - v10) >> 2;
        v12 = v7 >= v26;
        v13 = v7 - v26;
        if (v7 > v26)
          goto LABEL_12;
        goto LABEL_5;
      }
    }
    else
    {
      v7 = 1;
      v8 = *(char **)a1;
    }
    do
    {
      v25 = *(_DWORD *)v8;
      v8 += 8;
      v7 *= v25;
    }
    while (v8 != v4);
    goto LABEL_11;
  }
  v9 = 1;
  v27 = 0;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = (*(_QWORD *)(a1 + 56) - v10) >> 2;
  v12 = v11 <= 1;
  v13 = 1 - v11;
  if (!v11)
  {
LABEL_12:
    sub_1BE67B2D4(v3, v13, (const float *)&v27);
    return a1;
  }
LABEL_5:
  if (!v12)
  {
    *(_QWORD *)(a1 + 56) = v10 + 4 * v9;
    return a1;
  }
  return a1;
}

void sub_1BE88358C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
    v5 = *(void **)(v1 + 24);
    if (!v5)
    {
LABEL_3:
      v6 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = *(void **)(v1 + 24);
    if (!v5)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v5;
  operator delete(v5);
  v6 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v1 + 8) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

char *sub_1BE8835E4(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_1BE61F930();
  v9 = a1[2] - v3;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      sub_1BE61F100();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  if (v2 == v3)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v2 - v3 - 8;
    if (v15 < 0x78 || &v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v2)
      goto LABEL_31;
    v16 = (v15 >> 3) + 1;
    v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v17;
    v18 = &v2[-v17];
    v19 = v2 - 16;
    v20 = &v11[8 * v5 - 16];
    v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *((_OWORD *)v19 - 1);
      v22 = *(_OWORD *)v19;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)v19 = 0uLL;
      *((_OWORD *)v20 - 1) = v23;
      *(_OWORD *)v20 = v22;
      v19 -= 32;
      v20 -= 32;
      v21 -= 4;
    }
    while (v21);
    v2 = v18;
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v24 = *((_QWORD *)v2 - 1);
        v2 -= 8;
        *(_QWORD *)v2 = 0;
        *((_QWORD *)v12 - 1) = v24;
        v12 -= 8;
      }
      while (v2 != v3);
    }
    v2 = *a1;
    v25 = a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    while (v25 != v2)
    {
      v27 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      v26 = v27;
      *(_QWORD *)v25 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

_QWORD *sub_1BE88377C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_1BE61F930();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_1BE61F100();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    v19 = &v15[-v18];
    v20 = v15 - 16;
    v21 = &v9[8 * v3 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

id sub_1BE883970(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    objc_msgSend_synthesisOptionsWithDictionary_(CHSynthesisRequestOptions, v4, (uint64_t)v3, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_skipStyleInventoryLookup(v9, v10, v11, v12, v13, v14);
    objc_msgSend_setSkipStyleInventoryLookup_(v9, v16, *(unsigned __int8 *)(a1 + 8) | v15, v17, v18, v19);
    v25 = objc_msgSend_saveStyleSample(v9, v20, v21, v22, v23, v24);
    objc_msgSend_setSaveStyleSample_(v9, v26, *(unsigned __int8 *)(a1 + 9) | v25, v27, v28, v29);

    return v9;
  }
  else
  {

    return 0;
  }
}

void sub_1BE883A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE883A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE883BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE883BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE883BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1BE883BFC(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id *v6;
  id v7;
  NSObject *v8;
  id *v9;
  id v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint8_t *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, void *, void *);
  void *v42;
  id *v43;
  id v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  void (*v62)(uint64_t);
  id v63;
  _QWORD v64[5];
  uint8_t buf[8];
  uint8_t *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  void (*v69)(uint64_t);
  id v70;
  uint8_t v71[4];
  void *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (!a1)
  {
    v37 = 0;
    goto LABEL_29;
  }
  sub_1BE8845F4(a1);
  v6 = a1;
  objc_sync_enter(v6);
  v7 = v6[3];
  objc_sync_exit(v6);

  if (!v7)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v8 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v8, OS_LOG_TYPE_FAULT, "XPC connection must be non-nil", buf, 2u);
    }

  }
  *(_QWORD *)buf = 0;
  v66 = buf;
  v67 = 0x3032000000;
  v68 = sub_1BE884A28;
  v69 = sub_1BE884A38;
  v70 = 0;
  v9 = v6;
  objc_sync_enter(v9);
  v10 = v6[3];
  objc_sync_exit(v9);

  v11 = MEMORY[0x1E0C809B0];
  v64[0] = MEMORY[0x1E0C809B0];
  v64[1] = 3221225472;
  v64[2] = sub_1BE884A40;
  v64[3] = &unk_1E77F2310;
  v64[4] = buf;
  objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v10, v12, (uint64_t)v64, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v58 = 0;
  v59 = &v58;
  v60 = 0x3032000000;
  v61 = sub_1BE884A28;
  v62 = sub_1BE884A38;
  v63 = 0;
  v52 = 0;
  v53 = (uint8_t *)&v52;
  v54 = 0x3032000000;
  v55 = sub_1BE884A28;
  v56 = sub_1BE884A38;
  v57 = 0;
  v48 = 0;
  v49 = &v48;
  v50 = 0x2020000000;
  v51 = 0;
  v39 = v11;
  v40 = 3221225472;
  v41 = sub_1BE884B5C;
  v42 = &unk_1E77F6570;
  v45 = &v58;
  v46 = &v52;
  v43 = v9;
  v17 = v5;
  v44 = v17;
  v47 = &v48;
  objc_msgSend_handleRequest_withReply_(v16, v18, (uint64_t)v17, (uint64_t)&v39, v19, v20);
  if (!*((_BYTE *)v49 + 24))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v21 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v71 = 0;
      _os_log_impl(&dword_1BE607000, v21, OS_LOG_TYPE_ERROR, "Remote Synthesis request did not execute reply block", v71, 2u);
    }

    sub_1BE884D54((uint64_t)v9, v17, 0, *((void **)v66 + 5));
  }
  if (a3)
  {
    if (*((_QWORD *)v66 + 5))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v22 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_localizedDescription(*((void **)v66 + 5), v23, v24, v25, v26, v27, v39, v40, v41, v42, v43);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v71 = 138412290;
        v72 = v28;
        _os_log_impl(&dword_1BE607000, v22, OS_LOG_TYPE_ERROR, "Connection Error in Remote Synthesis request: %@", v71, 0xCu);

      }
      v29 = v66;
LABEL_27:
      *a3 = objc_retainAutorelease(*((id *)v29 + 5));
      goto LABEL_28;
    }
    if (*((_QWORD *)v53 + 5))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v30 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_localizedDescription(*((void **)v53 + 5), v31, v32, v33, v34, v35, v39, v40, v41, v42, v43);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v71 = 138412290;
        v72 = v36;
        _os_log_impl(&dword_1BE607000, v30, OS_LOG_TYPE_ERROR, "Error in Remote Synthesis request: %@", v71, 0xCu);

      }
      v29 = v53;
      goto LABEL_27;
    }
  }
LABEL_28:
  v37 = (id)v59[5];

  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v52, 8);

  _Block_object_dispose(&v58, 8);
  _Block_object_dispose(buf, 8);

LABEL_29:
  return v37;
}

void sub_1BE8840AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v36 - 176), 8);

  _Unwind_Resume(a1);
}

void sub_1BE8842D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE8844D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE8845B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE8845CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8845E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8845F4(void *a1)
{
  void **v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  id v41;
  id location;

  v1 = a1;
  objc_sync_enter(v1);
  if (!v1[3])
  {
    v2 = objc_alloc(MEMORY[0x1E0CB3B38]);
    v6 = objc_msgSend_initWithMachServiceName_options_(v2, v3, (uint64_t)CFSTR("com.apple.handwritingd.remoterecognition"), 0, v4, v5);
    v7 = v1[3];
    v1[3] = (void *)v6;

    objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], v8, (uint64_t)&unk_1EF58B478, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)MEMORY[0x1E0C99E60];
    v14 = objc_opt_class();
    v15 = objc_opt_class();
    objc_msgSend_setWithObjects_(v13, v16, v14, v17, v18, v19, v15, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v12, v21, (uint64_t)v20, (uint64_t)sel_handleRequest_withReply_, 0, 1);
    objc_msgSend_setRemoteObjectInterface_(v1[3], v22, (uint64_t)v12, v23, v24, v25);
    objc_initWeak(&location, v1);
    v26 = v1[3];
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v40[2] = sub_1BE8847EC;
    v40[3] = &unk_1E77F3140;
    objc_copyWeak(&v41, &location);
    objc_msgSend_setInterruptionHandler_(v26, v27, (uint64_t)v40, v28, v29, v30);
    objc_msgSend_setInvalidationHandler_(v1[3], v31, (uint64_t)&unk_1E77F1B30, v32, v33, v34);
    objc_msgSend_resume(v1[3], v35, v36, v37, v38, v39);
    objc_destroyWeak(&v41);
    objc_destroyWeak(&location);

  }
  objc_sync_exit(v1);

}

void sub_1BE884778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_1BE8847D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE8847EC(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  uint8_t v3[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_1BE8848A0(WeakRetained);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v2 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was interrupted", v3, 2u);
  }

}

void sub_1BE884890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8848A0(void *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **obj;

  if (a1)
  {
    obj = a1;
    objc_sync_enter(obj);
    objc_msgSend_invalidate(obj[3], v1, v2, v3, v4, v5);
    v6 = obj[3];
    obj[3] = 0;

    objc_sync_exit(obj);
  }
}

void sub_1BE884908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1BE884924()
{
  NSObject *v0;
  uint8_t v1[16];

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v0 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1BE607000, v0, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was invalidated", v1, 2u);
  }

}

void sub_1BE8849F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHRemoteTextSynthesizer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE884A28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE884A38(uint64_t a1)
{

}

void sub_1BE884A40(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE884B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE884B5C(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v9 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEFAULT, "Result retrieved for remote synthesis", (uint8_t *)&v16, 2u);
    }
LABEL_11:

    goto LABEL_12;
  }
  if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v9 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_localizedDescription(v8, v10, v11, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412290;
      v17 = v15;
      _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_ERROR, "Error during remote synthesis: %@", (uint8_t *)&v16, 0xCu);

    }
    goto LABEL_11;
  }
LABEL_12:
  sub_1BE884D54(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), v6, v8);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;

}

void sub_1BE884D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE884D54(uint64_t a1, void *a2, void *a3, void *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSString *v64;
  id v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __CFString *v72;
  NSObject *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  BOOL v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSURL *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  NSObject *v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  BOOL v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSURL *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  NSObject *v147;
  void *v148;
  BOOL v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t i;
  void *v177;
  void *v178;
  id v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  NSObject *v211;
  NSURL *v212;
  NSURL *v213;
  id v214;
  void *v215;
  void *v216;
  void *v217;
  id v218;
  id v219;
  CoreHandwriting *v220;
  void *v221;
  _QWORD v222[4];
  id v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  _QWORD v228[3];
  _QWORD v229[3];
  _BYTE v230[128];
  const __CFString *v231;
  void *v232;
  const __CFString *v233;
  void *v234;
  uint8_t buf[4];
  const __CFString *v236;
  __int16 v237;
  uint64_t v238;
  __int16 v239;
  NSURL *v240;
  uint64_t v241;

  v241 = *MEMORY[0x1E0C80C00];
  v220 = a2;
  v219 = a3;
  v218 = a4;
  if (a1 && (os_variant_has_internal_diagnostics() & 1) != 0)
  {
    objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], v7, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dictionaryForKey_(v12, v13, (uint64_t)CFSTR("com.apple.corehandwriting"), v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v216 = v17;
    objc_msgSend_objectForKey_(v17, v18, (uint64_t)CFSTR("CHLogAllSynthesisRequests"), v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend_BOOLValue(v22, v23, v24, v25, v26, v27);

    if ((v28 & 1) == 0)
    {
LABEL_41:

      goto LABEL_42;
    }
    if (qword_1EF568478 != -1)
      dispatch_once(&qword_1EF568478, &unk_1E77F6590);
    v214 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend_setDateFormat_(v214, v29, (uint64_t)CFSTR("dd-MM-yyyy-HH-mm-ss-SSS"), v30, v31, v32);
    objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v33, v34, v35, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_UUIDString(v38, v39, v40, v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substringToIndex_(v44, v45, 4, v46, v47, v48);
    v217 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_now(MEMORY[0x1E0C99D68], v49, v50, v51, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringFromDate_(v214, v55, (uint64_t)v54, v56, v57, v58);
    v59 = objc_claimAutoreleasedReturnValue();

    v215 = (void *)v59;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v60, (uint64_t)CFSTR("request_%@_%@.hsr"), v61, v62, v63, v59, v217);
    v212 = (NSURL *)objc_claimAutoreleasedReturnValue();
    v65 = CoreHandwriting::writeObjectToFileInFolder(v220, (objc_object *)qword_1EF568470, v212, v64);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v66 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_options(v220, v67, v68, v69, v70, v71);
      v72 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v236 = v72;
      _os_log_impl(&dword_1BE607000, v66, OS_LOG_TYPE_DEFAULT, "CHLogAllSynthesisRequests synth request with options = %@", buf, 0xCu);

    }
    if (qword_1EF568E88 == -1)
    {
      v73 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        goto LABEL_13;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v73 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
LABEL_13:

        objc_msgSend_drawing(v220, v74, v75, v76, v77, v78);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = v79 == 0;

        if (v80)
          goto LABEL_18;
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v81, (uint64_t)CFSTR("input_drawing_%@_%@.json"), v83, v84, v85, v59, v217);
        v86 = (NSURL *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_drawing(v220, v87, v88, v89, v90, v91);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        v233 = CFSTR("string");
        objc_msgSend_string(v220, v93, v94, v95, v96, v97);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        v234 = v98;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v99, (uint64_t)&v234, (uint64_t)&v233, 1, v100);
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_writeToFileWithContext_folder_basename_(v92, v102, (uint64_t)v101, qword_1EF568470, (uint64_t)v86, v103);

        if (qword_1EF568E88 == -1)
        {
          v104 = (id)qword_1EF568E60;
          if (!os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
          {
LABEL_17:

LABEL_18:
            objc_msgSend_options(v220, v81, v82, v83, v84, v85);
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_styleDrawing(v105, v106, v107, v108, v109, v110);
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            v112 = v111 == 0;

            if (v112)
            {
LABEL_23:
              if (!v219
                || (objc_msgSend_drawing(v219, v113, v114, v115, v116, v117),
                    v148 = (void *)objc_claimAutoreleasedReturnValue(),
                    v149 = v148 == 0,
                    v148,
                    v149))
              {
                if (qword_1EF568E88 != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v211 = (id)qword_1EF568E60;
                v213 = (NSURL *)v211;
                if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412546;
                  v236 = CFSTR("CHLogAllSynthesisRequests");
                  v237 = 2112;
                  v238 = (uint64_t)v218;
                  _os_log_impl(&dword_1BE607000, v211, OS_LOG_TYPE_ERROR, "%@ skipping serialization of nil result. Error = %@", buf, 0x16u);
                }
                goto LABEL_40;
              }
              objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v150, (uint64_t)CFSTR("result_%@_%@.json"), v151, v152, v153, v59, v217);
              v213 = (NSURL *)objc_claimAutoreleasedReturnValue();
              if (qword_1EF568E88 == -1)
              {
                v154 = (id)qword_1EF568E60;
                if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
                {
LABEL_28:

                  objc_msgSend_array(MEMORY[0x1E0C99DE8], v155, v156, v157, v158, v159);
                  v221 = (void *)objc_claimAutoreleasedReturnValue();
                  v226 = 0u;
                  v227 = 0u;
                  v224 = 0u;
                  v225 = 0u;
                  objc_msgSend_segmentStrokeIndexes(v219, v160, v161, v162, v163, v164);
                  v165 = (void *)objc_claimAutoreleasedReturnValue();
                  v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v166, (uint64_t)&v224, (uint64_t)v230, 16, v167);
                  if (v173)
                  {
                    v174 = *(_QWORD *)v225;
                    v175 = MEMORY[0x1E0C809B0];
                    do
                    {
                      for (i = 0; i != v173; ++i)
                      {
                        if (*(_QWORD *)v225 != v174)
                          objc_enumerationMutation(v165);
                        v177 = *(void **)(*((_QWORD *)&v224 + 1) + 8 * i);
                        objc_msgSend_array(MEMORY[0x1E0C99DE8], v168, v169, v170, v171, v172);
                        v178 = (void *)objc_claimAutoreleasedReturnValue();
                        v222[0] = v175;
                        v222[1] = 3221225472;
                        v222[2] = sub_1BE8859EC;
                        v222[3] = &unk_1E77F2CB8;
                        v179 = v178;
                        v223 = v179;
                        objc_msgSend_enumerateIndexesUsingBlock_(v177, v180, (uint64_t)v222, v181, v182, v183);
                        objc_msgSend_addObject_(v221, v184, (uint64_t)v179, v185, v186, v187);

                      }
                      v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v165, v168, (uint64_t)&v224, (uint64_t)v230, 16, v172);
                    }
                    while (v173);
                  }

                  objc_msgSend_drawing(v219, v188, v189, v190, v191, v192);
                  v193 = (void *)objc_claimAutoreleasedReturnValue();
                  v228[0] = CFSTR("string");
                  objc_msgSend_content(v219, v194, v195, v196, v197, v198);
                  v199 = (void *)objc_claimAutoreleasedReturnValue();
                  v229[0] = v199;
                  v228[1] = CFSTR("segmentContents");
                  objc_msgSend_segmentContents(v219, v200, v201, v202, v203, v204);
                  v205 = (void *)objc_claimAutoreleasedReturnValue();
                  v228[2] = CFSTR("segmentStrokeIndexes");
                  v229[1] = v205;
                  v229[2] = v221;
                  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v206, (uint64_t)v229, (uint64_t)v228, 3, v207);
                  v208 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_writeToFileWithContext_folder_basename_(v193, v209, (uint64_t)v208, qword_1EF568470, (uint64_t)v213, v210);

LABEL_40:
                  goto LABEL_41;
                }
              }
              else
              {
                dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v154 = (id)qword_1EF568E60;
                if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_28;
              }
              *(_DWORD *)buf = 138412802;
              v236 = CFSTR("CHLogAllSynthesisRequests");
              v237 = 2112;
              v238 = qword_1EF568470;
              v239 = 2112;
              v240 = v213;
              _os_log_impl(&dword_1BE607000, v154, OS_LOG_TYPE_DEFAULT, "%@ serialize synthesis result to %@/%@, ", buf, 0x20u);
              goto LABEL_28;
            }
            objc_msgSend_options(v220, v113, v114, v115, v116, v117);
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_styleDrawing(v118, v119, v120, v121, v122, v123);
            v124 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v125, (uint64_t)CFSTR("style_drawing_%@_%@.json"), v126, v127, v128, v59, v217);
            v129 = (NSURL *)objc_claimAutoreleasedReturnValue();
            v231 = CFSTR("string");
            objc_msgSend_options(v220, v130, v131, v132, v133, v134);
            v135 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_styleContent(v135, v136, v137, v138, v139, v140);
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            v232 = v141;
            objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v142, (uint64_t)&v232, (uint64_t)&v231, 1, v143);
            v144 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_writeToFileWithContext_folder_basename_(v124, v145, (uint64_t)v144, qword_1EF568470, (uint64_t)v129, v146);

            if (qword_1EF568E88 == -1)
            {
              v147 = (id)qword_1EF568E60;
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
              {
LABEL_22:

                goto LABEL_23;
              }
            }
            else
            {
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
              v147 = (id)qword_1EF568E60;
              if (!os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
                goto LABEL_22;
            }
            *(_DWORD *)buf = 138412802;
            v236 = CFSTR("CHLogAllSynthesisRequests");
            v237 = 2112;
            v238 = qword_1EF568470;
            v239 = 2112;
            v240 = v129;
            _os_log_impl(&dword_1BE607000, v147, OS_LOG_TYPE_DEFAULT, "%@ serialize style drawing to %@/%@, ", buf, 0x20u);
            goto LABEL_22;
          }
        }
        else
        {
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v104 = (id)qword_1EF568E60;
          if (!os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
            goto LABEL_17;
        }
        *(_DWORD *)buf = 138412802;
        v236 = CFSTR("CHLogAllSynthesisRequests");
        v237 = 2112;
        v238 = qword_1EF568470;
        v239 = 2112;
        v240 = v86;
        _os_log_impl(&dword_1BE607000, v104, OS_LOG_TYPE_DEFAULT, "%@ serialize input drawing to %@/%@, ", buf, 0x20u);
        goto LABEL_17;
      }
    }
    *(_DWORD *)buf = 138412802;
    v236 = CFSTR("CHLogAllSynthesisRequests");
    v237 = 2112;
    v238 = qword_1EF568470;
    v239 = 2112;
    v240 = v212;
    _os_log_impl(&dword_1BE607000, v73, OS_LOG_TYPE_DEFAULT, "%@ serialize request to %@/%@, ", buf, 0x20u);
    goto LABEL_13;
  }
LABEL_42:

}

void sub_1BE88570C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE885904(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;

  objc_msgSend_UUID(MEMORY[0x1E0CB3A28], a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_UUIDString(v6, v7, v8, v9, v10, v11);
  v25 = (id)objc_claimAutoreleasedReturnValue();

  v12 = (void *)MEMORY[0x1E0C99E98];
  NSTemporaryDirectory();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v12, v14, (uint64_t)v13, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByAppendingPathComponent_(v18, v19, (uint64_t)v25, v20, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)qword_1EF568470;
  qword_1EF568470 = v23;

}

void sub_1BE885998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1BE8859C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8859D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8859EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE885A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE885B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE885B34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL sub_1BE885B4C(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id *v6;
  id v7;
  NSObject *v8;
  id *v9;
  id v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _BOOL8 v21;
  _QWORD v23[6];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  _QWORD v30[5];
  uint8_t buf[8];
  uint8_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t);
  id v36;

  v5 = a2;
  if (a1)
  {
    sub_1BE8845F4(a1);
    v6 = a1;
    objc_sync_enter(v6);
    v7 = v6[3];
    objc_sync_exit(v6);

    if (!v7)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v8 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v8, OS_LOG_TYPE_FAULT, "XPC connection must be non-nil", buf, 2u);
      }

    }
    *(_QWORD *)buf = 0;
    v32 = buf;
    v33 = 0x3032000000;
    v34 = sub_1BE884A28;
    v35 = sub_1BE884A38;
    v36 = 0;
    v9 = v6;
    objc_sync_enter(v9);
    v10 = v6[3];
    objc_sync_exit(v9);

    v11 = MEMORY[0x1E0C809B0];
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = sub_1BE885F54;
    v30[3] = &unk_1E77F2310;
    v30[4] = buf;
    objc_msgSend_remoteObjectProxyWithErrorHandler_(v10, v12, (uint64_t)v30, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = 0;
    v25 = &v24;
    v26 = 0x3032000000;
    v27 = sub_1BE884A28;
    v28 = sub_1BE884A38;
    v29 = 0;
    v23[0] = v11;
    v23[1] = 3221225472;
    v23[2] = sub_1BE886070;
    v23[3] = &unk_1E77F65B8;
    v23[4] = v9;
    v23[5] = &v24;
    objc_msgSend_handleInventoryRequest_withReply_(v16, v17, (uint64_t)v5, (uint64_t)v23, v18, v19);
    if (a3)
    {
      v20 = (void *)*((_QWORD *)v32 + 5);
      if (!v20)
        v20 = (void *)v25[5];
      *a3 = objc_retainAutorelease(v20);
    }
    if (*((_QWORD *)v32 + 5))
      v21 = 0;
    else
      v21 = v25[5] == 0;
    _Block_object_dispose(&v24, 8);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    v21 = 0;
  }

  return v21;
}

void sub_1BE885DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;

  _Block_object_dispose(&a16, 8);

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1BE885DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE885E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE885EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE885F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE885F54(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE886058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE886070(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v6)
  {
    if (v7)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v9 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend_localizedDescription(v8, v16, v17, v18, v19, v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138412290;
        v23 = v21;
        _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEBUG, "Error during inventory request: %@", (uint8_t *)&v22, 0xCu);

      }
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v9 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v22) = 0;
        _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_ERROR, "Inventory request unexpected results. No inventory or error were returned", (uint8_t *)&v22, 2u);
      }
    }
    goto LABEL_16;
  }
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), a2);
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v9 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_description(v6, v10, v11, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138412290;
      v23 = v15;
      _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEFAULT, "Status retrieved for inventory request. %@", (uint8_t *)&v22, 0xCu);

    }
LABEL_16:

  }
}

void sub_1BE8862BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8862D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE886394(void *a1, int a2)
{
  id *v4;
  id v5;
  NSObject *v6;
  id *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  uint8_t v23[8];
  _QWORD v24[7];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  _QWORD v29[5];
  id v30;
  _QWORD v31[5];
  _QWORD v32[5];
  uint8_t buf[8];
  uint8_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;

  if (a1)
  {
    sub_1BE8845F4(a1);
    v4 = a1;
    objc_sync_enter(v4);
    v5 = v4[3];
    objc_sync_exit(v4);

    if (!v5)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v6 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v6, OS_LOG_TYPE_FAULT, "XPC connection must be non-nil", buf, 2u);
      }

    }
    *(_QWORD *)buf = 0;
    v34 = buf;
    v35 = 0x3032000000;
    v36 = sub_1BE884A28;
    v37 = sub_1BE884A38;
    v38 = 0;
    v7 = v4;
    objc_sync_enter(v7);
    v8 = v4[3];
    objc_sync_exit(v7);

    v13 = MEMORY[0x1E0C809B0];
    if (a2)
    {
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = sub_1BE886784;
      v32[3] = &unk_1E77F2310;
      v32[4] = buf;
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v8, v9, (uint64_t)v32, v10, v11, v12);
      v14 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = sub_1BE8868A0;
      v31[3] = &unk_1E77F2310;
      v31[4] = buf;
      objc_msgSend_remoteObjectProxyWithErrorHandler_(v8, v9, (uint64_t)v31, v10, v11, v12);
      v14 = objc_claimAutoreleasedReturnValue();
    }
    v15 = (void *)v14;

    v29[0] = 0;
    v29[1] = v29;
    v29[2] = 0x3032000000;
    v29[3] = sub_1BE884A28;
    v29[4] = sub_1BE884A38;
    v30 = 0;
    v25 = 0;
    v26 = &v25;
    v27 = 0x2020000000;
    v28 = 0;
    v24[0] = v13;
    v24[1] = 3221225472;
    v24[2] = sub_1BE8869BC;
    v24[3] = &unk_1E77F65E0;
    v24[4] = v7;
    v24[5] = v29;
    v24[6] = &v25;
    objc_msgSend_handleInventoryStatusRequestWithReply_(v15, v16, (uint64_t)v24, v17, v18, v19);
    if (a2 && !*((_BYTE *)v26 + 24))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v20 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_ERROR, "Inventory status request did not execute reply block", v23, 2u);
      }

    }
    v21 = v7[2];
    _Block_object_dispose(&v25, 8);
    _Block_object_dispose(v29, 8);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    v21 = 0;
  }
  return v21;
}

void sub_1BE88668C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1BE886784(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE886888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8868A0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE8869A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8869BC(_QWORD *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(a1[4] + 16), a2);
    if (os_variant_has_internal_diagnostics())
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v9 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_description(v6, v10, v11, v12, v13, v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138412290;
        v23 = v15;
        _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEFAULT, "Status retrieved for inventory status request. %@", (uint8_t *)&v22, 0xCu);

      }
LABEL_12:

    }
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a3);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v9 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_localizedDescription(v8, v16, v17, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138412290;
      v23 = v21;
      _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEBUG, "Error during inventory status request: %@", (uint8_t *)&v22, 0xCu);

    }
    goto LABEL_12;
  }
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;

}

void sub_1BE886BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE886BC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE886CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE886CD8(uint64_t **a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, void *a6, float a7)
{
  unsigned int (**v13)(_QWORD);
  unsigned int (**v14)(_QWORD);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  unint64_t v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float DistanceToCluster;
  float v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t *v49;
  char *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;
  void *v58;
  _QWORD *v59;
  uint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD **v88;
  _QWORD **v89;
  unint64_t v90;
  unint64_t *v91;
  __int128 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  __int128 v98;
  uint64_t *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD **v118;
  NSObject *v119;
  unsigned int (**v120)(_QWORD);
  uint64_t v121;
  uint64_t **v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  unint64_t v126;
  __int128 v127;
  _QWORD **v128;
  _QWORD *v129;
  void *v130;
  void *v131;
  void *__p;
  void *v133;
  unint64_t v134;
  unint64_t v135;
  float v136;
  uint8_t buf[8];
  _QWORD *v138;
  unint64_t v139;

  v13 = a6;
  v14 = v13;
  if (!a2)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    goto LABEL_153;
  }
  if (!a5)
  {
    v122 = a1;
    v120 = v13;
    v23 = *a3;
    v24 = a3[1];
    if (v24 != *a3)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      while (1)
      {
        v30 = 0x8E38E38E38E38E39 * ((v24 - v23) >> 3);
        v31 = v29 + 1;
        v123 = v29 + 1;
        if (v29 + 1 < v30)
          break;
LABEL_26:
        ++v29;
        if (v123 >= v30)
          goto LABEL_53;
      }
      while (1)
      {
        DistanceToCluster = CHFastGroupingCluster::getDistanceToCluster((_QWORD *)(v23 + 72 * v29), (_QWORD *)(v23 + 72 * v31), a4, 0);
        v33 = DistanceToCluster;
        if (v26 >= (unint64_t)v27)
          break;
        *(_QWORD *)v26 = v29;
        *(_QWORD *)(v26 + 8) = v31;
        *(float *)(v26 + 16) = DistanceToCluster;
        v26 += 24;
LABEL_30:
        ++v31;
        v23 = *a3;
        v24 = a3[1];
        v30 = 0x8E38E38E38E38E39 * ((v24 - *a3) >> 3);
        if (v31 >= v30)
        {
          v28 = (__int128 *)v26;
          goto LABEL_26;
        }
      }
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (_QWORD)v25) >> 3) + 1;
      if (v34 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F930();
      if (0x5555555555555556 * ((v27 - (char *)v25) >> 3) > v34)
        v34 = 0x5555555555555556 * ((v27 - (char *)v25) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v27 - (char *)v25) >> 3) >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v34;
      if (v35)
      {
        if (v35 > 0xAAAAAAAAAAAAAAALL)
          sub_1BE61F100();
        v36 = (char *)operator new(24 * v35);
        v37 = (uint64_t)&v36[8 * ((uint64_t)(v26 - (_QWORD)v25) >> 3)];
        *(_QWORD *)v37 = v29;
        *(_QWORD *)(v37 + 8) = v31;
        *(float *)(v37 + 16) = v33;
        if ((__int128 *)v26 != v25)
        {
LABEL_41:
          v38 = v37;
          do
          {
            v39 = (__int128 *)(v38 - 24);
            v40 = *(_OWORD *)(v26 - 24);
            *(_QWORD *)(v38 - 8) = *(_QWORD *)(v26 - 8);
            *(_OWORD *)(v38 - 24) = v40;
            v26 -= 24;
            v38 -= 24;
          }
          while ((__int128 *)v26 != v25);
          v27 = &v36[24 * v35];
          v26 = v37 + 24;
          if (!v25)
            goto LABEL_45;
LABEL_44:
          operator delete(v25);
LABEL_45:
          v25 = v39;
          goto LABEL_30;
        }
      }
      else
      {
        v36 = 0;
        v37 = 8 * ((uint64_t)(v26 - (_QWORD)v25) >> 3);
        *(_QWORD *)v37 = v29;
        *(_QWORD *)(v37 + 8) = v31;
        *(float *)(v37 + 16) = DistanceToCluster;
        if ((__int128 *)v26 != v25)
          goto LABEL_41;
      }
      v39 = (__int128 *)v37;
      v27 = &v36[24 * v35];
      v26 = v37 + 24;
      if (!v25)
        goto LABEL_45;
      goto LABEL_44;
    }
    v25 = 0;
    v26 = 0;
    v28 = 0;
LABEL_53:
    v41 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v25) >> 3));
    if (v28 == v25)
      v42 = 0;
    else
      v42 = v41;
    sub_1BE88AF24((uint64_t)v25, v28, v42, 1);
    *(_QWORD *)buf = 0;
    v138 = 0;
    v139 = 0;
    v44 = *a3;
    v43 = a3[1];
    v45 = v43 - *a3;
    if (v43 != *a3)
    {
      v46 = 0x8E38E38E38E38E39 * (v45 >> 3);
      if (v46 > 0x38E38E38E38E38ELL)
        sub_1BE61F930();
      *(_QWORD *)buf = operator new(v45);
      v138 = *(_QWORD **)buf;
      v139 = *(_QWORD *)buf + 72 * v46;
      if (v43 != v44)
      {
        v121 = v43;
        while (1)
        {
          v125 = 0;
          v126 = 0;
          v129 = 0;
          v130 = 0;
          v124 = (uint64_t *)&v125;
          v128 = &v129;
          sub_1BE677ED0((uint64_t *)&v124, (_QWORD *)(v44 + 40));
          v131 = 0;
          v48 = v138;
          if ((unint64_t)v138 < v139)
          {
            *v138 = v124;
            v49 = v125;
            v48[1] = v125;
            v50 = (char *)(v48 + 1);
            v51 = v126;
            v48[2] = v126;
            if (v51)
            {
              v49[2] = (uint64_t)v50;
              v124 = (uint64_t *)&v125;
              v125 = 0;
              v126 = 0;
            }
            else
            {
              *v48 = v50;
            }
            *(_OWORD *)(v48 + 3) = v127;
            v48[5] = v128;
            v56 = v129;
            v48[6] = v129;
            v57 = (char *)(v48 + 6);
            v58 = v130;
            v48[7] = v130;
            if (v58)
            {
              v56[2] = v57;
              v128 = &v129;
              v129 = 0;
              v130 = 0;
            }
            else
            {
              v48[5] = v57;
            }
            v48[8] = v131;
            v47 = v48 + 9;
            goto LABEL_62;
          }
          v52 = *(_QWORD **)buf;
          v53 = 0x8E38E38E38E38E39 * (((uint64_t)v138 - *(_QWORD *)buf) >> 3) + 1;
          if (v53 > 0x38E38E38E38E38ELL)
            sub_1BE61F930();
          if (0x1C71C71C71C71C72 * ((uint64_t)(v139 - *(_QWORD *)buf) >> 3) > v53)
            v53 = 0x1C71C71C71C71C72 * ((uint64_t)(v139 - *(_QWORD *)buf) >> 3);
          v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v139 - *(_QWORD *)buf) >> 3) >= 0x1C71C71C71C71C7
              ? 0x38E38E38E38E38ELL
              : v53;
          if (v54)
          {
            if (v54 > 0x38E38E38E38E38ELL)
              sub_1BE61F100();
            v55 = operator new(72 * v54);
          }
          else
          {
            v55 = 0;
          }
          v59 = &v55[v48 - v52];
          v60 = v125;
          *v59 = v124;
          v59[1] = v60;
          v61 = v59 + 1;
          v62 = v126;
          v59[2] = v126;
          if (v62)
          {
            v60[2] = (uint64_t)v61;
            v124 = (uint64_t *)&v125;
            v125 = 0;
            v126 = 0;
          }
          else
          {
            *v59 = v61;
          }
          v63 = (char *)&v55[v48 - v52];
          v64 = v127;
          v65 = v129;
          *((_QWORD *)v63 + 5) = v128;
          v66 = v63 + 40;
          *((_OWORD *)v66 - 1) = v64;
          v66[1] = v65;
          v67 = v66 + 1;
          v68 = v130;
          v66[2] = v130;
          if (v68)
          {
            v65[2] = v67;
            v128 = &v129;
            v129 = 0;
            v130 = 0;
          }
          else
          {
            *v66 = v67;
          }
          v55[v48 - v52 + 8] = 0;
          v47 = v59 + 9;
          if (v48 != v52)
            break;
          *(_QWORD *)buf = &v55[v48 - v52];
          v138 = v59 + 9;
          v139 = (unint64_t)&v55[9 * v54];
          v43 = v121;
          if (v48)
            goto LABEL_100;
LABEL_62:
          v138 = v47;
          sub_1BE62033C((uint64_t)&v128, v129);
          sub_1BE67AC7C((uint64_t)&v124, v125);
          v44 += 72;
          if (v44 == v43)
            goto LABEL_101;
        }
        v69 = 0;
        do
        {
          v70 = &v59[v69];
          *(v70 - 9) = v48[v69 - 9];
          v71 = &v48[v69 - 8];
          v72 = *v71;
          v59[v69 - 8] = *v71;
          v73 = (uint64_t)&v59[v69 - 8];
          v74 = v48[v69 - 7];
          *(v70 - 7) = v74;
          if (v74)
          {
            *(_QWORD *)(v72 + 16) = v73;
            v48[v69 - 9] = v71;
            *v71 = 0;
            v48[v69 - 7] = 0;
          }
          else
          {
            *(v70 - 9) = v73;
          }
          v75 = &v59[v69];
          *((_OWORD *)v75 - 3) = *(_OWORD *)&v48[v69 - 6];
          *(v75 - 4) = v48[v69 - 4];
          v76 = &v48[v69 - 3];
          v77 = *v76;
          v59[v69 - 3] = *v76;
          v78 = (uint64_t)&v59[v69 - 3];
          v79 = v48[v69 - 2];
          *(v75 - 2) = v79;
          if (v79)
          {
            *(_QWORD *)(v77 + 16) = v78;
            v48[v69 - 4] = v76;
            *v76 = 0;
            v48[v69 - 2] = 0;
          }
          else
          {
            *(v75 - 4) = v78;
          }
          v59[v69 - 1] = v48[v69 - 1];
          v69 -= 9;
        }
        while (&v48[v69] != v52);
        v48 = *(_QWORD **)buf;
        v80 = v138;
        *(_QWORD *)buf = &v59[v69];
        v138 = v59 + 9;
        v139 = (unint64_t)&v55[9 * v54];
        v43 = v121;
        if (v80 != v48)
        {
          v81 = (uint64_t)(v80 - 4);
          do
          {
            v82 = (_QWORD *)(v81 - 40);
            sub_1BE62033C(v81, *(_QWORD **)(v81 + 8));
            sub_1BE67AC7C(v81 - 40, *(_QWORD **)(v81 - 32));
            v81 -= 72;
          }
          while (v82 != v48);
        }
        if (!v48)
          goto LABEL_62;
LABEL_100:
        operator delete(v48);
        goto LABEL_62;
      }
    }
LABEL_101:
    if (v25 != (__int128 *)v26)
    {
      v83 = v25;
      do
      {
        if (*((float *)v83 + 4) > a7)
          break;
        v84 = *(_QWORD *)buf + 72 * *(_QWORD *)v83;
        do
        {
          v85 = (uint64_t *)v84;
          v84 = *(_QWORD *)(v84 + 64);
        }
        while (v84);
        v86 = *(_QWORD *)buf + 72 * *((_QWORD *)v83 + 1);
        do
        {
          v87 = (uint64_t *)v86;
          v86 = *(_QWORD *)(v86 + 64);
        }
        while (v86);
        if (v85 != v87)
        {
          v87[8] = (uint64_t)v85;
          sub_1BE677ED0(v85, v87 + 5);
        }
        v83 = (__int128 *)((char *)v83 + 24);
      }
      while (v83 != (__int128 *)v26);
    }
    *v122 = 0;
    v122[1] = 0;
    v122[2] = 0;
    v89 = *(_QWORD ***)buf;
    v88 = (_QWORD **)v138;
    if (*(_QWORD **)buf == v138)
    {
LABEL_145:
      if (v89)
      {
        v116 = v89;
        if (v138 != v89)
        {
          v117 = (uint64_t)(v138 - 4);
          do
          {
            v118 = (_QWORD **)(v117 - 40);
            sub_1BE62033C(v117, *(_QWORD **)(v117 + 8));
            sub_1BE67AC7C(v117 - 40, *(_QWORD **)(v117 - 32));
            v117 -= 72;
          }
          while (v118 != v89);
          v116 = *(_QWORD **)buf;
        }
        v138 = v89;
        operator delete(v116);
      }
      v14 = v120;
      if (v25)
        operator delete(v25);
      goto LABEL_153;
    }
    v90 = 0;
    v91 = (unint64_t *)(v122 + 2);
    while (1)
    {
      if (v89[8])
        goto LABEL_114;
      if (v90 < *v91)
      {
        *(_QWORD *)(v90 + 16) = 0;
        *(_QWORD *)(v90 + 8) = 0;
        *(_QWORD *)v90 = v90 + 8;
        sub_1BE67ACCC((_QWORD *)v90, *v89, v89 + 1);
        v92 = *(_OWORD *)(v89 + 3);
        *(_QWORD *)(v90 + 48) = 0;
        *(_QWORD *)(v90 + 40) = v90 + 48;
        *(_OWORD *)(v90 + 24) = v92;
        *(_QWORD *)(v90 + 56) = 0;
        sub_1BE66AAE8((_QWORD *)(v90 + 40), v89[5], v89 + 6);
        *(_QWORD *)(v90 + 64) = v89[8];
        v90 += 72;
        v122[1] = (uint64_t *)v90;
        v122[1] = (uint64_t *)v90;
        goto LABEL_114;
      }
      v93 = 0x8E38E38E38E38E39 * ((uint64_t)(v90 - (_QWORD)*v122) >> 3);
      v94 = v93 + 1;
      if (v93 + 1 > 0x38E38E38E38E38ELL)
        sub_1BE61F930();
      if (0x1C71C71C71C71C72 * ((uint64_t)(*v91 - (_QWORD)*v122) >> 3) > v94)
        v94 = 0x1C71C71C71C71C72 * ((uint64_t)(*v91 - (_QWORD)*v122) >> 3);
      v95 = 0x8E38E38E38E38E39 * ((uint64_t)(*v91 - (_QWORD)*v122) >> 3) >= 0x1C71C71C71C71C7
          ? 0x38E38E38E38E38ELL
          : v94;
      *((_QWORD *)&v127 + 1) = v122 + 2;
      if (v95)
      {
        if (v95 > 0x38E38E38E38E38ELL)
          sub_1BE61F100();
        v96 = (uint64_t *)operator new(72 * v95);
      }
      else
      {
        v96 = 0;
      }
      v97 = &v96[9 * v93];
      v124 = v96;
      v125 = v97;
      v126 = (unint64_t)v97;
      *(_QWORD *)&v127 = &v96[9 * v95];
      v97[2] = 0;
      v97[1] = 0;
      *v97 = (uint64_t)(v97 + 1);
      sub_1BE67ACCC(v97, *v89, v89 + 1);
      v98 = *(_OWORD *)(v89 + 3);
      v97[6] = 0;
      v97[5] = (uint64_t)(v97 + 6);
      *(_OWORD *)(v97 + 3) = v98;
      v97[7] = 0;
      sub_1BE66AAE8(v97 + 5, v89[5], v89 + 6);
      v97[8] = (uint64_t)v89[8];
      v99 = v125;
      v90 = v126 + 72;
      v100 = (char *)*v122;
      v101 = (char *)v122[1];
      if (v101 != (char *)*v122)
        break;
      *v122 = v125;
      v122[1] = (uint64_t *)v90;
      v122[2] = (uint64_t *)v127;
      if (v101)
        goto LABEL_143;
LABEL_113:
      v122[1] = (uint64_t *)v90;
LABEL_114:
      v89 += 9;
      if (v89 == v88)
      {
        v89 = *(_QWORD ***)buf;
        goto LABEL_145;
      }
    }
    v102 = 0;
    do
    {
      v103 = &v99[v102 / 8];
      *(v103 - 9) = *(_QWORD *)&v101[v102 - 72];
      v104 = &v101[v102 - 64];
      v105 = *(_QWORD *)v104;
      v99[v102 / 8 - 8] = *(_QWORD *)v104;
      v106 = (uint64_t)&v99[v102 / 8 - 8];
      v107 = *(_QWORD *)&v101[v102 - 56];
      *(v103 - 7) = v107;
      if (v107)
      {
        *(_QWORD *)(v105 + 16) = v106;
        *(_QWORD *)&v101[v102 - 72] = v104;
        *(_QWORD *)v104 = 0;
        *(_QWORD *)&v101[v102 - 56] = 0;
      }
      else
      {
        *(v103 - 9) = v106;
      }
      v108 = &v99[v102 / 8];
      *((_OWORD *)v108 - 3) = *(_OWORD *)&v101[v102 - 48];
      *(v108 - 4) = *(_QWORD *)&v101[v102 - 32];
      v109 = &v101[v102 - 24];
      v110 = *(_QWORD *)v109;
      v99[v102 / 8 - 3] = *(_QWORD *)v109;
      v111 = (uint64_t)&v99[v102 / 8 - 3];
      v112 = *(_QWORD *)&v101[v102 - 16];
      *(v108 - 2) = v112;
      if (v112)
      {
        *(_QWORD *)(v110 + 16) = v111;
        *(_QWORD *)&v101[v102 - 32] = v109;
        *(_QWORD *)v109 = 0;
        *(_QWORD *)&v101[v102 - 16] = 0;
      }
      else
      {
        *(v108 - 4) = v111;
      }
      v99[v102 / 8 - 1] = *(_QWORD *)&v101[v102 - 8];
      v102 -= 72;
    }
    while (&v101[v102] != v100);
    v101 = (char *)*v122;
    v113 = (char *)v122[1];
    *v122 = &v99[v102 / 8];
    v122[1] = (uint64_t *)v90;
    v122[2] = (uint64_t *)v127;
    if (v113 != v101)
    {
      v114 = (uint64_t)(v113 - 32);
      do
      {
        v115 = (char *)(v114 - 40);
        sub_1BE62033C(v114, *(_QWORD **)(v114 + 8));
        sub_1BE67AC7C(v114 - 40, *(_QWORD **)(v114 - 32));
        v114 -= 72;
      }
      while (v115 != v101);
    }
    if (!v101)
      goto LABEL_113;
LABEL_143:
    operator delete(v101);
    goto LABEL_113;
  }
  sub_1BE679170(&v124, a3, a4, a5);
  if (v14)
  {
    while (v126 >= 2)
    {
      if (v14[2](v14))
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v119 = (id)qword_1EF568E30;
        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v119, OS_LOG_TYPE_DEBUG, "Canceling agglomerative clustering results computation", buf, 2u);
        }

        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        v16 = __p;
        if (__p)
          goto LABEL_14;
        goto LABEL_15;
      }
      if (v136 > a7)
        break;
      CHFastGroupingClusters::mergeClusters(&v124, v134, v135);
    }
  }
  else
  {
    while (v126 >= 2 && v136 <= a7)
      CHFastGroupingClusters::mergeClusters(&v124, v134, v135);
  }
  CHFastGroupingClusters::getClusters((CHFastGroupingClusters **)&v124, (uint64_t)a1);
  v16 = __p;
  if (__p)
  {
LABEL_14:
    v133 = v16;
    operator delete(v16);
  }
LABEL_15:
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v17 = v127;
  if ((_QWORD)v127)
  {
    v18 = *((_QWORD *)&v127 + 1);
    v19 = (void *)v127;
    if (*((_QWORD *)&v127 + 1) != (_QWORD)v127)
    {
      v20 = *((_QWORD *)&v127 + 1);
      do
      {
        v22 = *(void **)(v20 - 24);
        v20 -= 24;
        v21 = v22;
        if (v22)
        {
          *(_QWORD *)(v18 - 16) = v21;
          operator delete(v21);
        }
        v18 = v20;
      }
      while (v20 != v17);
      v19 = (void *)v127;
    }
    *((_QWORD *)&v127 + 1) = v17;
    operator delete(v19);
  }
  sub_1BE67B218((uint64_t)&v124, v125);
LABEL_153:

}

void sub_1BE8878CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  uint64_t v11;

  sub_1BE6790C8((void **)(v11 - 128));
  if (v10)
    operator delete(v10);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE887A20(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(a1 + 24);
    if (v5 != v4)
    {
      v7 = *(_QWORD *)(a1 + 32);
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v6);
  }
  sub_1BE67B218(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1BE887B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE887BAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE888914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  void *v36;
  uint64_t v37;

  sub_1BE6790C8((void **)(v37 - 144));
  sub_1BE6790C8(&a30);

  _Unwind_Resume(a1);
}

void sub_1BE889218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  _QWORD **v39;
  uint64_t v40;

  sub_1BE62033C(v38, *v39);
  sub_1BE67AC7C(v37, *(_QWORD **)(v37 + 8));
  *(_QWORD *)(a13 + 8) = v37;
  sub_1BE679090(v40 - 232);
  sub_1BE67AC7C(v40 - 160, *(_QWORD **)(v40 - 152));
  sub_1BE6790C8((void **)a13);

  _Unwind_Resume(a1);
}

__n128 sub_1BE889494(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE8894B8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE8894D0(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  v9 = (double *)v5[6];
  v10 = ((char *)v7 - (char *)v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_1BE61F100();
    v14 = (char *)operator new(16 * v13);
    v15 = (double *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = a2;
    v15[1] = a3;
    v8 = (uint64_t)(v15 + 2);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (double *)(16 * v10);
  v16 = 0;
  *v15 = a2;
  v15[1] = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[7] = v8;
}

void sub_1BE8895F4(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[7];
  v6 = v5[8];
  if ((unint64_t)v7 < v6)
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = (uint64_t)(v7 + 2);
    goto LABEL_18;
  }
  v9 = (double *)v5[6];
  v10 = ((char *)v7 - (char *)v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    sub_1BE61F930();
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      sub_1BE61F100();
    v14 = (char *)operator new(16 * v13);
    v15 = (double *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = a2;
    v15[1] = a3;
    v8 = (uint64_t)(v15 + 2);
    if (v7 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (double *)(16 * v10);
  v16 = 0;
  *v15 = a2;
  v15[1] = a3;
  v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 2;
      v7 -= 2;
    }
    while (v7 != v9);
    v7 = (double *)v5[6];
  }
LABEL_16:
  v5[6] = v15;
  v5[7] = v8;
  v5[8] = v16;
  if (v7)
    operator delete(v7);
LABEL_18:
  v5[7] = v8;
}

void sub_1BE88AC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;
  void *v30;
  void *v31;

  sub_1BE6790C8(&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE88AF24(uint64_t result, __int128 *a2, uint64_t a3, char a4)
{
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  __int128 v16;
  float v17;
  _OWORD *v18;
  float v19;
  uint64_t v20;
  __int128 v21;
  float v22;
  char *v23;
  __int128 *v24;
  __int128 *v25;
  float v26;
  __int128 *v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  float v33;
  float v34;
  BOOL v35;
  unint64_t v36;
  float v37;
  __int128 *v38;
  __int128 *v39;
  float v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  float v60;
  __int128 v61;
  __int128 *v62;
  BOOL v64;
  uint64_t v65;
  __int128 *v66;
  uint64_t v67;
  float v68;
  float v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  float v80;
  float v81;
  __int128 v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  float v98;
  __int128 v99;
  unint64_t v100;
  float *v101;
  float v102;
  float v103;
  __int128 v104;
  float *v105;
  float *v106;
  uint64_t v107;
  int v108;

  v7 = (_OWORD *)result;
LABEL_2:
  v8 = (unint64_t)v7;
  while (2)
  {
    v7 = (_OWORD *)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v47 = *((float *)a2 - 2);
        v48 = *(float *)(v8 + 16);
        if (v47 < v48)
        {
          v49 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *((_QWORD *)a2 - 3);
          *((_QWORD *)a2 - 3) = v49;
          v50 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v50;
          *(float *)(v8 + 16) = v47;
          *((float *)a2 - 2) = v48;
        }
        return result;
      case 3:
        return (uint64_t)sub_1BE88B930((float *)v8, (float *)(v8 + 24), (float *)a2 - 6);
      case 4:
        result = (uint64_t)sub_1BE88B930((float *)v8, (float *)(v8 + 24), (float *)(v8 + 48));
        v51 = *((float *)a2 - 2);
        v52 = *(float *)(v8 + 64);
        if (v51 < v52)
        {
          v53 = *(_QWORD *)(v8 + 48);
          *(_QWORD *)(v8 + 48) = *((_QWORD *)a2 - 3);
          *((_QWORD *)a2 - 3) = v53;
          v54 = *(_QWORD *)(v8 + 56);
          *(_QWORD *)(v8 + 56) = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v54;
          *(float *)(v8 + 64) = v51;
          *((float *)a2 - 2) = v52;
          v55 = *(float *)(v8 + 64);
          v56 = *(float *)(v8 + 40);
          if (v55 < v56)
          {
            v57 = *(_QWORD *)(v8 + 48);
            v58 = *(_QWORD *)(v8 + 56);
            v59 = *(_OWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = v57;
            *(_QWORD *)(v8 + 32) = v58;
            *(_OWORD *)(v8 + 48) = v59;
            *(float *)(v8 + 40) = v55;
            *(float *)(v8 + 64) = v56;
            v60 = *(float *)(v8 + 16);
            if (v55 < v60)
            {
              v61 = *(_OWORD *)v8;
              *(_QWORD *)v8 = v57;
              *(_QWORD *)(v8 + 8) = v58;
              *(_OWORD *)(v8 + 24) = v61;
              *(float *)(v8 + 16) = v55;
              *(float *)(v8 + 40) = v60;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)sub_1BE88B768((float *)v8, (float *)(v8 + 24), (float *)(v8 + 48), (float *)(v8 + 72), (float *)a2 - 6);
      default:
        if (v9 <= 575)
        {
          v62 = (__int128 *)(v8 + 24);
          v64 = (__int128 *)v8 == a2 || v62 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v64)
            {
              v65 = 0;
              v66 = (__int128 *)v8;
              do
              {
                v68 = *((float *)v66 + 10);
                v69 = *((float *)v66 + 4);
                v66 = v62;
                if (v68 < v69)
                {
                  v70 = *v62;
                  v71 = v65;
                  do
                  {
                    v72 = v8 + v71;
                    v73 = *(_QWORD *)(v8 + v71 + 8);
                    *(_QWORD *)(v72 + 24) = *(_QWORD *)(v8 + v71);
                    *(_QWORD *)(v72 + 32) = v73;
                    *(_DWORD *)(v72 + 40) = *(_DWORD *)(v8 + v71 + 16);
                    if (!v71)
                    {
                      v67 = v8;
                      goto LABEL_72;
                    }
                    v71 -= 24;
                  }
                  while (v68 < *(float *)(v72 - 8));
                  v67 = v8 + v71 + 24;
LABEL_72:
                  *(_OWORD *)v67 = v70;
                  *(float *)(v67 + 16) = v68;
                }
                v62 = (__int128 *)((char *)v66 + 24);
                v65 += 24;
              }
              while ((__int128 *)((char *)v66 + 24) != a2);
            }
          }
          else if (!v64)
          {
            v101 = (float *)(v8 + 40);
            do
            {
              v102 = *((float *)v7 + 10);
              v103 = *((float *)v7 + 4);
              v7 = v62;
              if (v102 < v103)
              {
                v104 = *v62;
                v105 = v101;
                do
                {
                  v106 = v105;
                  v107 = *((_QWORD *)v105 - 4);
                  *((_QWORD *)v105 - 2) = *((_QWORD *)v105 - 5);
                  *((_QWORD *)v105 - 1) = v107;
                  v108 = *((_DWORD *)v105 - 6);
                  v105 -= 6;
                  *(_DWORD *)v106 = v108;
                }
                while (v102 < *(v106 - 12));
                *((_OWORD *)v105 - 1) = v104;
                *v105 = v102;
              }
              v62 = (_OWORD *)((char *)v7 + 24);
              v101 += 6;
            }
            while ((_OWORD *)((char *)v7 + 24) != a2);
          }
          return result;
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = v8 + 24 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 >= 0xC01)
          {
            sub_1BE88B930((float *)v7, (float *)v7 + 6 * v11, (float *)a2 - 6);
            v13 = 24 * v11;
            v14 = (float *)v7 + 6 * v11 - 6;
            sub_1BE88B930((float *)v7 + 6, v14, (float *)a2 - 12);
            v15 = (float *)((char *)v7 + v13 + 24);
            sub_1BE88B930((float *)v7 + 12, v15, (float *)a2 - 18);
            result = (uint64_t)sub_1BE88B930(v14, (float *)v12, v15);
            v16 = *v7;
            *v7 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v16;
            LODWORD(v16) = *((_DWORD *)v7 + 4);
            *((_DWORD *)v7 + 4) = *(_DWORD *)(v12 + 16);
            *(_DWORD *)(v12 + 16) = v16;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_14;
LABEL_8:
            v17 = *((float *)v7 + 4);
            if (*((float *)v7 - 2) < v17)
              goto LABEL_15;
            if (v17 >= *((float *)a2 - 2))
            {
              v36 = (unint64_t)v7 + 24;
              do
              {
                v8 = v36;
                if (v36 >= (unint64_t)a2)
                  break;
                v37 = *(float *)(v36 + 16);
                v36 += 24;
              }
              while (v17 >= v37);
            }
            else
            {
              v18 = v7;
              do
              {
                v8 = (unint64_t)v18 + 24;
                v19 = *((float *)v18 + 10);
                v18 = (_OWORD *)((char *)v18 + 24);
              }
              while (v17 >= v19);
            }
            v38 = a2;
            if (v8 < (unint64_t)a2)
            {
              v39 = a2;
              do
              {
                v38 = (__int128 *)((char *)v39 - 24);
                v40 = *((float *)v39 - 2);
                v39 = (__int128 *)((char *)v39 - 24);
              }
              while (v17 < v40);
            }
            v41 = *v7;
            while (v8 < (unint64_t)v38)
            {
              v42 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)v38;
              *(_QWORD *)v38 = v42;
              v43 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *((_QWORD *)v38 + 1);
              *((_QWORD *)v38 + 1) = v43;
              v44 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = *((_DWORD *)v38 + 4);
              *((_DWORD *)v38 + 4) = v44;
              do
              {
                v45 = *(float *)(v8 + 40);
                v8 += 24;
              }
              while (v17 >= v45);
              do
              {
                v46 = *((float *)v38 - 2);
                v38 = (__int128 *)((char *)v38 - 24);
              }
              while (v17 < v46);
            }
            if ((_OWORD *)(v8 - 24) != v7)
            {
              *(_QWORD *)v7 = *(_QWORD *)(v8 - 24);
              *((_QWORD *)v7 + 1) = *(_QWORD *)(v8 - 16);
              *((_DWORD *)v7 + 4) = *(_DWORD *)(v8 - 8);
            }
            a4 = 0;
            *(_OWORD *)(v8 - 24) = v41;
            *(float *)(v8 - 8) = v17;
            continue;
          }
          result = (uint64_t)sub_1BE88B930((float *)v7 + 6 * v11, (float *)v7, (float *)a2 - 6);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_8;
LABEL_14:
          v17 = *((float *)v7 + 4);
LABEL_15:
          v20 = 0;
          v21 = *v7;
          do
          {
            v22 = *(float *)((char *)v7 + v20 + 40);
            v20 += 24;
          }
          while (v22 < v17);
          v23 = (char *)v7 + v20;
          v24 = a2;
          if (v20 == 24)
          {
            v27 = a2;
            while (v23 < (char *)v27)
            {
              v25 = (__int128 *)((char *)v27 - 24);
              v28 = *((float *)v27 - 2);
              v27 = (__int128 *)((char *)v27 - 24);
              if (v28 < v17)
                goto LABEL_23;
            }
            v25 = v27;
            v8 = (unint64_t)v23;
          }
          else
          {
            do
            {
              v25 = (__int128 *)((char *)v24 - 24);
              v26 = *((float *)v24 - 2);
              v24 = (__int128 *)((char *)v24 - 24);
            }
            while (v26 >= v17);
LABEL_23:
            v8 = (unint64_t)v23;
            if (v23 < (char *)v25)
            {
              v29 = (unint64_t)v25;
              do
              {
                v30 = *(_QWORD *)v8;
                *(_QWORD *)v8 = *(_QWORD *)v29;
                *(_QWORD *)v29 = v30;
                v31 = *(_QWORD *)(v8 + 8);
                *(_QWORD *)(v8 + 8) = *(_QWORD *)(v29 + 8);
                *(_QWORD *)(v29 + 8) = v31;
                v32 = *(_DWORD *)(v8 + 16);
                *(_DWORD *)(v8 + 16) = *(_DWORD *)(v29 + 16);
                *(_DWORD *)(v29 + 16) = v32;
                do
                {
                  v33 = *(float *)(v8 + 40);
                  v8 += 24;
                }
                while (v33 < v17);
                do
                {
                  v34 = *(float *)(v29 - 8);
                  v29 -= 24;
                }
                while (v34 >= v17);
              }
              while (v8 < v29);
            }
          }
          if ((_OWORD *)(v8 - 24) != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 24);
            *((_QWORD *)v7 + 1) = *(_QWORD *)(v8 - 16);
            *((_DWORD *)v7 + 4) = *(_DWORD *)(v8 - 8);
          }
          *(_OWORD *)(v8 - 24) = v21;
          *(float *)(v8 - 8) = v17;
          if (v23 < (char *)v25)
            goto LABEL_34;
          v35 = sub_1BE88BA3C((float *)v7, (__int128 *)(v8 - 24));
          result = sub_1BE88BA3C((float *)v8, a2);
          if (!(_DWORD)result)
          {
            if (v35)
              continue;
LABEL_34:
            result = sub_1BE88AF24(v7, v8 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v8 - 24);
          if (v35)
            return result;
          goto LABEL_2;
        }
        if ((__int128 *)v8 != a2)
        {
          v74 = (unint64_t)(v10 - 2) >> 1;
          v75 = v74;
          do
          {
            if (v74 >= v75)
            {
              v77 = (2 * v75) | 1;
              v78 = v8 + 24 * v77;
              if (2 * v75 + 2 < v10 && *(float *)(v78 + 16) < *(float *)(v78 + 40))
              {
                v78 += 24;
                v77 = 2 * v75 + 2;
              }
              v79 = v8 + 24 * v75;
              v80 = *(float *)(v78 + 16);
              v81 = *(float *)(v79 + 16);
              if (v80 >= v81)
              {
                v82 = *(_OWORD *)v79;
                do
                {
                  v83 = v79;
                  v79 = v78;
                  *(_QWORD *)v83 = *(_QWORD *)v78;
                  *(_QWORD *)(v83 + 8) = *(_QWORD *)(v78 + 8);
                  *(float *)(v83 + 16) = v80;
                  if (v74 < v77)
                    break;
                  v84 = 2 * v77;
                  v77 = (2 * v77) | 1;
                  v78 = v8 + 24 * v77;
                  v85 = v84 + 2;
                  if (v85 < v10 && *(float *)(v78 + 16) < *(float *)(v78 + 40))
                  {
                    v78 += 24;
                    v77 = v85;
                  }
                  v80 = *(float *)(v78 + 16);
                }
                while (v80 >= v81);
                *(_OWORD *)v79 = v82;
                *(float *)(v79 + 16) = v81;
              }
            }
            v76 = v75-- <= 0;
          }
          while (!v76);
          v86 = v9 / 0x18uLL;
          do
          {
            v87 = 0;
            v88 = *(_QWORD *)v8;
            v89 = *(_QWORD *)(v8 + 8);
            v90 = *(float *)(v8 + 16);
            v91 = v8;
            do
            {
              v92 = v91;
              v91 += 24 * v87 + 24;
              v93 = 2 * v87;
              result = (2 * v87) | 1;
              v87 = result;
              v94 = v93 + 2;
              if (v94 < v86 && *(float *)(v91 + 16) < *(float *)(v91 + 40))
              {
                v91 += 24;
                v87 = v94;
              }
              *(_QWORD *)v92 = *(_QWORD *)v91;
              *(_QWORD *)(v92 + 8) = *(_QWORD *)(v91 + 8);
              *(_DWORD *)(v92 + 16) = *(_DWORD *)(v91 + 16);
            }
            while (v87 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
            if ((__int128 *)v91 == (__int128 *)((char *)a2 - 24))
            {
              *(_QWORD *)v91 = v88;
              *(_QWORD *)(v91 + 8) = v89;
            }
            else
            {
              *(_QWORD *)v91 = *((_QWORD *)a2 - 3);
              *(_QWORD *)(v91 + 8) = *((_QWORD *)a2 - 2);
              *(_DWORD *)(v91 + 16) = *((_DWORD *)a2 - 2);
              *((_QWORD *)a2 - 3) = v88;
              *((_QWORD *)a2 - 2) = v89;
              *((float *)a2 - 2) = v90;
              v95 = v91 - v8 + 24;
              if (v95 < 25)
                goto LABEL_97;
              v96 = (v95 / 0x18uLL - 2) >> 1;
              v97 = v8 + 24 * v96;
              v98 = *(float *)(v97 + 16);
              v90 = *(float *)(v91 + 16);
              if (v98 >= v90)
                goto LABEL_97;
              v99 = *(_OWORD *)v91;
              do
              {
                v100 = v91;
                v91 = v97;
                *(_QWORD *)v100 = *(_QWORD *)v97;
                *(_QWORD *)(v100 + 8) = *(_QWORD *)(v97 + 8);
                *(float *)(v100 + 16) = v98;
                if (!v96)
                  break;
                v96 = (v96 - 1) >> 1;
                v97 = v8 + 24 * v96;
                v98 = *(float *)(v97 + 16);
              }
              while (v98 < v90);
              *(_OWORD *)v91 = v99;
            }
            *(float *)(v91 + 16) = v90;
LABEL_97:
            a2 = (__int128 *)((char *)a2 - 24);
            v76 = v86-- <= 2;
          }
          while (!v76);
        }
        return result;
    }
  }
}

float *sub_1BE88B768(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float *result;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;

  result = sub_1BE88B930(a1, a2, a3);
  v11 = a4[4];
  v12 = a3[4];
  if (v11 < v12)
  {
    v13 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v13;
    v14 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = *((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = v14;
    a3[4] = v11;
    a4[4] = v12;
    v15 = a3[4];
    v16 = a2[4];
    if (v15 < v16)
    {
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v17;
      v18 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v18;
      a2[4] = v15;
      a3[4] = v16;
      v19 = a2[4];
      v20 = a1[4];
      if (v19 < v20)
      {
        v21 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v21;
        v22 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v22;
        a1[4] = v19;
        a2[4] = v20;
      }
    }
  }
  v23 = a5[4];
  v24 = a4[4];
  if (v23 < v24)
  {
    v25 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v25;
    v26 = *((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = *((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = v26;
    a4[4] = v23;
    a5[4] = v24;
    v27 = a4[4];
    v28 = a3[4];
    if (v27 < v28)
    {
      v29 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v29;
      v30 = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = *((_QWORD *)a4 + 1);
      *((_QWORD *)a4 + 1) = v30;
      a3[4] = v27;
      a4[4] = v28;
      v31 = a3[4];
      v32 = a2[4];
      if (v31 < v32)
      {
        v33 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v33;
        v34 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
        *((_QWORD *)a3 + 1) = v34;
        a2[4] = v31;
        a3[4] = v32;
        v35 = a2[4];
        v36 = a1[4];
        if (v35 < v36)
        {
          v37 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v37;
          v38 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v38;
          a1[4] = v35;
          a2[4] = v36;
        }
      }
    }
  }
  return result;
}

float *sub_1BE88B930(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2[4];
  v4 = result[4];
  v5 = a3[4];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      v8 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v8;
      v9 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v9;
      a2[4] = v5;
      a3[4] = v3;
      v10 = a2[4];
      v11 = result[4];
      if (v10 < v11)
      {
        v12 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v12;
        v13 = *((_QWORD *)result + 1);
        *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v13;
        result[4] = v10;
        a2[4] = v11;
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)result;
    if (v5 >= v3)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v6;
      v14 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v14;
      result[4] = v3;
      a2[4] = v4;
      v15 = a3[4];
      if (v15 >= v4)
        return result;
      v16 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v16;
      v17 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v17;
      a2[4] = v15;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v7;
      result[4] = v5;
    }
    a3[4] = v4;
  }
  return result;
}

BOOL sub_1BE88BA3C(float *a1, __int128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  float *v6;
  __int128 *v7;
  uint64_t v8;
  int v9;
  float v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  float v29;
  __int128 v30;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v16 = *((float *)a2 - 2);
      v17 = a1[4];
      if (v16 < v17)
      {
        v18 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 3);
        *((_QWORD *)a2 - 3) = v18;
        v19 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v19;
        a1[4] = v16;
        *((float *)a2 - 2) = v17;
      }
      break;
    case 3uLL:
      sub_1BE88B930(a1, a1 + 6, (float *)a2 - 6);
      result = 1;
      break;
    case 4uLL:
      sub_1BE88B930(a1, a1 + 6, a1 + 12);
      v20 = *((float *)a2 - 2);
      v21 = a1[16];
      if (v20 >= v21)
        goto LABEL_13;
      v22 = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 - 3);
      *((_QWORD *)a2 - 3) = v22;
      v23 = *((_QWORD *)a1 + 7);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 - 2);
      *((_QWORD *)a2 - 2) = v23;
      a1[16] = v20;
      *((float *)a2 - 2) = v21;
      v24 = a1[16];
      v25 = a1[10];
      if (v24 >= v25)
        goto LABEL_13;
      v26 = *((_QWORD *)a1 + 6);
      v27 = *((_QWORD *)a1 + 7);
      v28 = *(_OWORD *)(a1 + 6);
      *((_QWORD *)a1 + 3) = v26;
      *((_QWORD *)a1 + 4) = v27;
      *((_OWORD *)a1 + 3) = v28;
      a1[10] = v24;
      a1[16] = v25;
      v29 = a1[4];
      if (v24 >= v29)
        goto LABEL_13;
      v30 = *(_OWORD *)a1;
      *(_QWORD *)a1 = v26;
      *((_QWORD *)a1 + 1) = v27;
      *(_OWORD *)(a1 + 6) = v30;
      a1[4] = v24;
      a1[10] = v29;
      result = 1;
      break;
    case 5uLL:
      sub_1BE88B768(a1, a1 + 6, a1 + 12, a1 + 18, (float *)a2 - 6);
      result = 1;
      break;
    default:
      v6 = a1 + 12;
      sub_1BE88B930(a1, a1 + 6, a1 + 12);
      v7 = (__int128 *)(a1 + 18);
      if (a1 + 18 == (float *)a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *((float *)v7 + 4);
          if (v10 < v6[4])
            break;
LABEL_12:
          v6 = (float *)v7;
          v8 += 24;
          v7 = (__int128 *)((char *)v7 + 24);
          if (v7 == a2)
            goto LABEL_13;
        }
        v11 = *v7;
        v12 = v8;
        do
        {
          v13 = (uint64_t)a1 + v12;
          v14 = *(_QWORD *)((char *)a1 + v12 + 56);
          *(_QWORD *)(v13 + 72) = *(_QWORD *)((char *)a1 + v12 + 48);
          *(_QWORD *)(v13 + 80) = v14;
          *(float *)(v13 + 88) = *(float *)((char *)a1 + v12 + 64);
          if (v12 == -48)
          {
            *(_OWORD *)a1 = v11;
            a1[4] = v10;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_22;
          }
          v12 -= 24;
        }
        while (v10 < *(float *)(v13 + 40));
        v15 = (uint64_t)a1 + v12;
        *(_OWORD *)(v15 + 72) = v11;
        *(float *)(v15 + 88) = v10;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_22:
        result = (__int128 *)((char *)v7 + 24) == a2;
      }
      break;
  }
  return result;
}

void sub_1BE88BCC4(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *i;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;

  if (!a1[2])
    goto LABEL_50;
  v6 = *a1;
  v8 = a1 + 1;
  v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  v31 = a1;
  v33 = v9;
  if (!v9)
    goto LABEL_50;
  v10 = (uint64_t *)v9[2];
  if (v10)
  {
    v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *v10 = 0;
      while (1)
      {
        v30 = (uint64_t *)v10[1];
        if (!v30)
          break;
        do
        {
          v10 = v30;
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
    }
    else
    {
      for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
      {
        do
        {
          v10 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  v32 = v10;
  if (a2 == a3)
  {
    v21 = a1;
    sub_1BE67AC7C((uint64_t)a1, v9);
    if (!v10)
      goto LABEL_50;
    goto LABEL_47;
  }
  v12 = a2;
  do
  {
    v9[4] = v12[4];
    if (v9 != v12)
    {
      sub_1BE6F5A88(v9 + 5, (char *)v12[5], (char *)v12[6], (v12[6] - v12[5]) >> 4);
      v9 = v33;
    }
    v13 = *v8;
    v14 = a1 + 1;
    v15 = a1 + 1;
    if (!*v8)
    {
LABEL_20:
      *v9 = 0;
      v9[1] = 0;
      v9[2] = (uint64_t)v14;
      *v15 = v9;
      v16 = (uint64_t *)**a1;
      if (!v16)
        goto LABEL_22;
LABEL_21:
      *a1 = v16;
      v9 = *v15;
      goto LABEL_22;
    }
    do
    {
      while (1)
      {
        v14 = (uint64_t **)v13;
        if (v9[4] >= (unint64_t)v13[4])
          break;
        v13 = (uint64_t *)*v13;
        v15 = v14;
        if (!*v14)
          goto LABEL_20;
      }
      v13 = (uint64_t *)v13[1];
    }
    while (v13);
    v15 = v14 + 1;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v14;
    v14[1] = v9;
    v16 = (uint64_t *)**a1;
    if (v16)
      goto LABEL_21;
LABEL_22:
    sub_1BE61F5C0(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v9 = v32;
    v33 = v32;
    if (v32)
    {
      v10 = (uint64_t *)v32[2];
      if (v10)
      {
        v17 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v32)
        {
          *v10 = 0;
          while (1)
          {
            v20 = (uint64_t *)v10[1];
            if (!v20)
              break;
            do
            {
              v10 = v20;
              v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
        }
        else
        {
          for (v10[1] = 0; v17; v17 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v17;
              v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
        }
      }
      v32 = v10;
      v18 = (uint64_t *)v12[1];
      if (!v18)
      {
        do
        {
LABEL_33:
          a2 = (uint64_t *)v12[2];
          v19 = *a2 == (_QWORD)v12;
          v12 = a2;
        }
        while (!v19);
        goto LABEL_35;
      }
    }
    else
    {
      v10 = 0;
      v18 = (uint64_t *)v12[1];
      if (!v18)
        goto LABEL_33;
    }
    do
    {
      a2 = v18;
      v18 = (uint64_t *)*v18;
    }
    while (v18);
LABEL_35:
    if (!v9)
      break;
    v12 = a2;
  }
  while (a2 != a3);
  v21 = v31;
  sub_1BE67AC7C((uint64_t)v31, v9);
  if (!v10)
    goto LABEL_50;
LABEL_47:
  for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
    v10 = i;
  sub_1BE67AC7C((uint64_t)v21, v10);
LABEL_50:
  if (a2 != a3)
  {
    while (2)
    {
      sub_1BE67ADD4((uint64_t)a1, a2 + 4, (uint64_t)&v31);
      v23 = (uint64_t *)v31;
      v24 = a1[1];
      v25 = a1 + 1;
      v26 = a1 + 1;
      if (v24)
      {
        do
        {
          while (1)
          {
            v25 = (uint64_t **)v24;
            if ((unint64_t)v31[4] >= v24[4])
              break;
            v24 = (uint64_t *)*v24;
            v26 = v25;
            if (!*v25)
              goto LABEL_58;
          }
          v24 = (uint64_t *)v24[1];
        }
        while (v24);
        v26 = v25 + 1;
        *v31 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        v25[1] = v23;
        v27 = (uint64_t *)**a1;
        if (!v27)
        {
LABEL_60:
          sub_1BE61F5C0(a1[1], v23);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          v28 = (uint64_t *)a2[1];
          if (v28)
          {
            do
            {
              v29 = v28;
              v28 = (uint64_t *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v29 = (uint64_t *)a2[2];
              v19 = *v29 == (_QWORD)a2;
              a2 = v29;
            }
            while (!v19);
          }
          a2 = v29;
          if (v29 == a3)
            return;
          continue;
        }
      }
      else
      {
LABEL_58:
        *v31 = 0;
        v23[1] = 0;
        v23[2] = (uint64_t)v25;
        *v26 = v23;
        v27 = (uint64_t *)**a1;
        if (!v27)
          goto LABEL_60;
      }
      break;
    }
    *a1 = v27;
    v23 = *v26;
    goto LABEL_60;
  }
}

void sub_1BE88C030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE781AE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE88C044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = (_QWORD *)(a2 + 48);
    do
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)v4 = v4 + 8;
      sub_1BE67ACCC((_QWORD *)v4, *(_QWORD **)v6, v7 - 5);
      v8 = *(_OWORD *)(v6 + 24);
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 40) = v4 + 48;
      *(_OWORD *)(v4 + 24) = v8;
      *(_QWORD *)(v4 + 56) = 0;
      sub_1BE66AAE8((_QWORD *)(v4 + 40), *(_QWORD **)(v6 + 40), v7);
      *(_QWORD *)(v4 + 64) = *(_QWORD *)(v6 + 64);
      v4 = v10 + 72;
      v10 += 72;
      v7 += 9;
      v6 += 72;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1BE88C118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;

  sub_1BE62033C(v10, *v11);
  sub_1BE67AC7C(v9, *(_QWORD **)(v9 + 8));
  sub_1BE88C14C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE88C14C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 32;
      do
      {
        v5 = v4 - 40;
        sub_1BE62033C(v4, *(_QWORD **)(v4 + 8));
        sub_1BE67AC7C(v4 - 40, *(_QWORD **)(v4 - 32));
        v4 -= 72;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

void sub_1BE88C1BC(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0x8E38E38E38E38E39 * ((v8 - *a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        v13 = v11 - 32;
        do
        {
          v14 = v13 - 40;
          sub_1BE62033C(v13, *(_QWORD **)(v13 + 8));
          sub_1BE67AC7C(v13 - 40, *(_QWORD **)(v13 - 32));
          v13 -= 72;
        }
        while (v14 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x38E38E38E38E38ELL)
      goto LABEL_35;
    v15 = 0x8E38E38E38E38E39 * (v8 >> 3);
    v16 = 2 * v15;
    if (2 * v15 <= __sz)
      v16 = __sz;
    v17 = v15 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v16;
    if (v17 > 0x38E38E38E38E38ELL)
LABEL_35:
      sub_1BE61F930();
    v18 = 72 * v17;
    v19 = operator new(72 * v17);
    *a1 = (uint64_t)v19;
    a1[1] = (uint64_t)v19;
    a1[2] = (uint64_t)v19 + v18;
    v20 = sub_1BE88C044(v9, a2, a3, (uint64_t)v19);
LABEL_29:
    a1[1] = v20;
    return;
  }
  v21 = a1[1];
  if (0x8E38E38E38E38E39 * ((v21 - v10) >> 3) < __sz)
  {
    v22 = a2 + 8 * ((v21 - v10) >> 3);
    if (v21 != v10)
    {
      v23 = 0;
      v24 = 8 * ((v21 - v10) >> 3);
      do
      {
        v25 = v10 + v23;
        if (a2 != v10)
        {
          sub_1BE88BCC4((uint64_t **)(v10 + v23), *(uint64_t **)(a2 + v23), (uint64_t *)(a2 + v23 + 8));
          *(_OWORD *)(v25 + 24) = *(_OWORD *)(a2 + v23 + 24);
          sub_1BE66B2E4(v25 + 40, *(_QWORD **)(a2 + v23 + 40), (_QWORD *)(a2 + v23 + 48));
        }
        *(_QWORD *)(v25 + 64) = *(_QWORD *)(a2 + v23 + 64);
        v23 += 72;
      }
      while (v24 != v23);
      v10 = a1[1];
    }
    v20 = sub_1BE88C044(v9, v22, a3, v10);
    goto LABEL_29;
  }
  if (a2 != a3)
  {
    v26 = 0;
    do
    {
      v27 = v10 + v26;
      if (a2 != v10)
      {
        sub_1BE88BCC4((uint64_t **)(v10 + v26), *(uint64_t **)(a2 + v26), (uint64_t *)(a2 + v26 + 8));
        *(_OWORD *)(v27 + 24) = *(_OWORD *)(a2 + v26 + 24);
        sub_1BE66B2E4(v27 + 40, *(_QWORD **)(a2 + v26 + 40), (_QWORD *)(a2 + v26 + 48));
      }
      *(_QWORD *)(v27 + 64) = *(_QWORD *)(a2 + v26 + 64);
      v26 += 72;
    }
    while (a2 + v26 != a3);
    v21 = a1[1];
    v10 += v26;
  }
  if (v21 != v10)
  {
    v28 = v21 - 32;
    do
    {
      v29 = v28 - 40;
      sub_1BE62033C(v28, *(_QWORD **)(v28 + 8));
      sub_1BE67AC7C(v28 - 40, *(_QWORD **)(v28 - 32));
      v28 -= 72;
    }
    while (v29 != v10);
  }
  a1[1] = v10;
}

void sub_1BE88C47C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE88C484(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE88C48C(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  double v42;
  double *v43;
  double *v44;
  unint64_t v45;
  double v46;
  double *v47;
  double v48;
  unint64_t v49;
  double v50;
  double v51;
  double *v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  double *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  double *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  BOOL v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  double v77;
  double *v78;
  double v79;
  unint64_t v80;
  double *v81;
  double v82;
  double v83;
  double v84;
  double *v85;
  double *v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  uint64_t v90;
  uint64_t v91;
  double *v92;
  double *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  double *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  double *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD **v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD **v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  _QWORD *v141;
  int64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  int64_t v170;
  BOOL v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  int64_t v176;
  uint64_t v177;
  uint64_t v178;
  int64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _OWORD *v190;
  uint64_t v191;
  double *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  double *v196;
  uint64_t v197;
  double *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  double *v236;
  _QWORD *v237;
  _QWORD *v238;
  double v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  __int128 *v260;
  double *v262;
  int64_t v263;
  uint64_t v264;
  int64_t v265;
  double *v266;
  _QWORD **v268;
  _QWORD *v269;
  uint64_t v270;
  __int128 v271;
  _QWORD **v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD **v276;
  _QWORD *v277;
  uint64_t v278;
  __int128 v279;
  _QWORD *v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;

BOOL sub_1BE88DD88(double *a1, double *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  double *v26;
  _QWORD *v27;
  _QWORD **v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;

  v4 = 0x8E38E38E38E38E39 * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 5) < a1[4])
      {
        v6 = (uint64_t)(a2 - 9);
        v7 = (uint64_t)a1;
        goto LABEL_54;
      }
      return result;
    case 3uLL:
      v8 = (uint64_t)(a1 + 9);
      v9 = (uint64_t)(a2 - 9);
      v10 = a1[13];
      v11 = *(a2 - 5);
      if (v10 < a1[4])
      {
        if (v11 >= v10)
        {
          sub_1BE88E23C((uint64_t)a1, (uint64_t)(a1 + 9));
          if (*(a2 - 5) >= a1[13])
            return 1;
          v7 = (uint64_t)(a1 + 9);
        }
        else
        {
          v7 = (uint64_t)a1;
        }
        v6 = (uint64_t)(a2 - 9);
        goto LABEL_54;
      }
      if (v11 < v10)
        goto LABEL_18;
      return result;
    case 4uLL:
      sub_1BE88E43C((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18), (uint64_t)(a2 - 9));
      return 1;
    case 5uLL:
      v8 = (uint64_t)(a1 + 9);
      v9 = (uint64_t)(a1 + 18);
      sub_1BE88E43C((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)(a1 + 18), (uint64_t)(a1 + 27));
      if (*(a2 - 5) < a1[31])
      {
        sub_1BE88E23C((uint64_t)(a1 + 27), (uint64_t)(a2 - 9));
        if (a1[31] < a1[22])
        {
          sub_1BE88E23C((uint64_t)(a1 + 18), (uint64_t)(a1 + 27));
          if (a1[22] < a1[13])
          {
LABEL_18:
            sub_1BE88E23C(v8, v9);
            if (a1[13] < a1[4])
            {
              v7 = (uint64_t)a1;
              v6 = v8;
LABEL_54:
              sub_1BE88E23C(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 18;
      v13 = a1[13];
      v14 = a1[22];
      if (v13 < a1[4])
      {
        v15 = (uint64_t)a1;
        if (v14 >= v13)
        {
          sub_1BE88E23C((uint64_t)a1, (uint64_t)(a1 + 9));
          if (a1[22] >= a1[13])
            goto LABEL_24;
          v15 = (uint64_t)(a1 + 9);
        }
        v16 = (uint64_t)(a1 + 18);
        goto LABEL_23;
      }
      if (v14 < v13)
      {
        sub_1BE88E23C((uint64_t)(a1 + 9), (uint64_t)(a1 + 18));
        if (a1[13] < a1[4])
        {
          v15 = (uint64_t)a1;
          v16 = (uint64_t)(a1 + 9);
LABEL_23:
          sub_1BE88E23C(v15, v16);
        }
      }
LABEL_24:
      v17 = a1 + 27;
      if (a1 + 27 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      while (1)
      {
        if (v17[4] < v12[4])
        {
          v21 = v17 + 1;
          v22 = (_QWORD *)*((_QWORD *)v17 + 1);
          v45 = *(_QWORD ***)v17;
          v46 = v22;
          v47 = *((_QWORD *)v17 + 2);
          if (v47)
          {
            v22[2] = &v46;
            *(_QWORD *)v17 = v21;
            *v21 = 0;
            v17[2] = 0.0;
          }
          else
          {
            v45 = &v46;
          }
          v23 = v17 + 6;
          v24 = (_QWORD *)*((_QWORD *)v17 + 6);
          v48 = *(_OWORD *)(v17 + 3);
          v49 = (_QWORD *)*((_QWORD *)v17 + 5);
          v50 = v24;
          v51 = *((_QWORD *)v17 + 7);
          if (v51)
          {
            v24[2] = &v50;
            *((_QWORD *)v17 + 5) = v23;
            *v23 = 0;
            v17[7] = 0.0;
          }
          else
          {
            v49 = &v50;
          }
          v52 = *((_QWORD *)v17 + 8);
          v25 = v18;
          do
          {
            v27 = (_QWORD *)((char *)a1 + v25);
            v28 = (_QWORD **)((char *)a1 + v25 + 224);
            sub_1BE67AC7C((uint64_t)a1 + v25 + 216, *v28);
            v27[27] = v27[18];
            v29 = (_QWORD *)((char *)a1 + v25 + 152);
            v30 = (_QWORD *)*v29;
            *v28 = (_QWORD *)*v29;
            v31 = *(_QWORD *)((char *)a1 + v25 + 160);
            v27[29] = v31;
            if (v31)
            {
              v30[2] = v28;
              v27[18] = v29;
              *v29 = 0;
              v27[20] = 0;
            }
            else
            {
              v27[27] = v28;
            }
            v32 = (_QWORD *)((char *)a1 + v25);
            *(_OWORD *)((char *)a1 + v25 + 240) = *(_OWORD *)((char *)a1 + v25 + 168);
            v33 = (_QWORD **)((char *)a1 + v25 + 264);
            sub_1BE62033C((uint64_t)a1 + v25 + 256, *v33);
            v34 = (uint64_t *)((char *)a1 + v25 + 192);
            v35 = *v34;
            v32[32] = v32[23];
            v32[33] = v35;
            v36 = *(_QWORD *)((char *)a1 + v25 + 200);
            v32[34] = v36;
            if (v36)
            {
              *(_QWORD *)(v35 + 16) = v33;
              v32[23] = v34;
              *v34 = 0;
              v32[25] = 0;
              v26 = (double *)((char *)a1 + v25);
              *(double *)((char *)a1 + v25 + 280) = *(double *)((char *)a1 + v25 + 208);
              if (v25 == -144)
              {
LABEL_44:
                v37 = a1;
                goto LABEL_46;
              }
            }
            else
            {
              *(_QWORD *)((char *)a1 + v25 + 256) = v33;
              v26 = (double *)((char *)a1 + v25);
              *(double *)((char *)a1 + v25 + 280) = *(double *)((char *)a1 + v25 + 208);
              if (v25 == -144)
                goto LABEL_44;
            }
            v25 -= 72;
          }
          while (*((double *)&v48 + 1) < v26[13]);
          v37 = (double *)((char *)a1 + v25 + 216);
LABEL_46:
          v39 = (_QWORD *)*((_QWORD *)v26 + 19);
          v38 = (char *)(v26 + 19);
          sub_1BE67AC7C((uint64_t)v37, v39);
          v40 = v46;
          *(_QWORD *)v37 = v45;
          *(_QWORD *)v38 = v40;
          v41 = v47;
          *((_QWORD *)v37 + 2) = v47;
          if (v41)
          {
            v40[2] = v38;
            v45 = &v46;
            v46 = 0;
            v47 = 0;
          }
          else
          {
            *(_QWORD *)v37 = v38;
          }
          v42 = v38 + 40;
          *((_OWORD *)v38 + 1) = v48;
          sub_1BE62033C((uint64_t)(v38 + 32), *((_QWORD **)v38 + 5));
          v43 = v50;
          *((_QWORD *)v38 + 4) = v49;
          *((_QWORD *)v38 + 5) = v43;
          v44 = v51;
          *((_QWORD *)v37 + 7) = v51;
          if (v44)
          {
            v20 = 0;
            v43[2] = v42;
            v49 = &v50;
            v50 = 0;
            v51 = 0;
          }
          else
          {
            *((_QWORD *)v38 + 4) = v42;
            v20 = v50;
          }
          *((_QWORD *)v37 + 8) = v52;
          ++v19;
          sub_1BE62033C((uint64_t)&v49, v20);
          sub_1BE67AC7C((uint64_t)&v45, v46);
          if (v19 == 8)
            return v17 + 9 == a2;
        }
        v12 = v17;
        v18 += 72;
        v17 += 9;
        if (v17 == a2)
          return 1;
      }
  }
}

void sub_1BE88E23C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  v21 = *(_QWORD ***)a1;
  v22 = v4;
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    v4[2] = &v22;
    v4 = 0;
    *(_QWORD *)a1 = v5;
    *v5 = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    v21 = &v22;
  }
  v7 = (_QWORD *)(a1 + 40);
  v6 = *(_QWORD **)(a1 + 40);
  v24 = *(_OWORD *)(a1 + 24);
  v9 = (_QWORD *)(a1 + 48);
  v8 = *(_QWORD **)(a1 + 48);
  v25 = v6;
  v26 = v8;
  v27 = *(_QWORD *)(a1 + 56);
  if (v27)
  {
    v8[2] = &v26;
    *v7 = v9;
    *v9 = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    v25 = &v26;
  }
  v28 = *(_QWORD *)(a1 + 64);
  sub_1BE67AC7C(a1, v4);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v11 = (_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v5;
    *(_QWORD *)a2 = v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = v5;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1BE62033C(a1 + 40, *(_QWORD **)(a1 + 48));
  v13 = (_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v15 = (_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  v16 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v9;
    *v13 = v15;
    *v15 = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  else
  {
    *v7 = v9;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  sub_1BE67AC7C(a2, *(_QWORD **)(a2 + 8));
  v17 = v22;
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v17;
  v18 = v23;
  *(_QWORD *)(a2 + 16) = v23;
  if (v18)
  {
    v17[2] = v11;
    v21 = &v22;
    v22 = 0;
    v23 = 0;
  }
  else
  {
    *(_QWORD *)a2 = v11;
  }
  *(_OWORD *)(a2 + 24) = v24;
  sub_1BE62033C(a2 + 40, *(_QWORD **)(a2 + 48));
  v19 = v26;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v19;
  v20 = v27;
  *(_QWORD *)(a2 + 56) = v27;
  if (v20)
  {
    v19[2] = v15;
    v19 = 0;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    *v13 = v15;
  }
  *(_QWORD *)(a2 + 64) = v28;
  sub_1BE62033C((uint64_t)&v25, v19);
  sub_1BE67AC7C((uint64_t)&v21, v22);
}

void sub_1BE88E43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;

  v7 = a1;
  v8 = *(double *)(a2 + 32);
  v9 = *(double *)(a3 + 32);
  if (v8 >= *(double *)(a1 + 32))
  {
    if (v9 < v8)
    {
      sub_1BE88E23C(a2, a3);
      if (*(double *)(a2 + 32) < *(double *)(v7 + 32))
      {
        a1 = v7;
        v10 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 < v8)
    {
LABEL_5:
      v10 = a3;
LABEL_9:
      sub_1BE88E23C(a1, v10);
      goto LABEL_10;
    }
    sub_1BE88E23C(a1, a2);
    if (*(double *)(a3 + 32) < *(double *)(a2 + 32))
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(double *)(a4 + 32) < *(double *)(a3 + 32))
  {
    sub_1BE88E23C(a3, a4);
    if (*(double *)(a3 + 32) < *(double *)(a2 + 32))
    {
      sub_1BE88E23C(a2, a3);
      if (*(double *)(a2 + 32) < *(double *)(v7 + 32))
        sub_1BE88E23C(v7, a2);
    }
  }
}

void ManhattanLineRegressor::ManhattanLineRegressor(ManhattanLineRegressor *this, CHDrawing *a2, HTMLog *a3, int a4)
{
  CHDrawing *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  size_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  CHDrawing *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *__p;
  char *v65;
  char *v66;

  v8 = a2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = a3;
  objc_storeStrong((id *)this + 5, a2);
  *((float *)this + 22) = sub_1BE6294F4(v8, (double **)this + 12, 80.0);
  objc_msgSend_bounds(v8, v9, v10, v11, v12, v13);
  *((_QWORD *)this + 15) = v19;
  *((_QWORD *)this + 16) = v20;
  *((_QWORD *)this + 17) = v21;
  *((_QWORD *)this + 18) = v22;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3) <= 5)
  {
    objc_msgSend_bounds(*((void **)this + 5), v14, v15, v16, v17, v18);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v30 = v29;
    v31 = operator new();
    *(_QWORD *)v31 = &unk_1E77F0720;
    *(_QWORD *)(v31 + 72) = 0;
    *(_QWORD *)(v31 + 80) = 0;
    *(_QWORD *)(v31 + 64) = 0;
    *(double *)(v31 + 16) = v24;
    *(double *)(v31 + 24) = v26;
    *(_DWORD *)(v31 + 32) = 0;
    *(double *)(v31 + 40) = v24 + v28;
    *(double *)(v31 + 48) = v26 + v30;
    *(_DWORD *)(v31 + 56) = 0;
    *(_DWORD *)(v31 + 8) = 0;
    *((_QWORD *)this + 24) = v31;
    goto LABEL_26;
  }
  ManhattanLineRegressor::detectMiddlePointIndex((double *)this);
  v38 = (_BYTE *)*((_QWORD *)this + 12);
  v37 = (_BYTE *)*((_QWORD *)this + 13);
  v39 = v37 - v38;
  v40 = 0xCCCCCCCCCCCCCCCDLL * ((v37 - v38) >> 3);
  *((_DWORD *)this + 38) = v40 - 1;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  if (!a4)
  {
    ManhattanLineRegressor::manhattanLineRegression(this, v32, v33, v34, v35, v36);
    goto LABEL_26;
  }
  __p = 0;
  v65 = 0;
  v66 = 0;
  if (v37 != v38)
  {
    if (v40 >= 0x666666666666667)
      sub_1BE61F930();
    v41 = (char *)operator new(v39);
    v42 = &v41[40 * v40];
    __p = v41;
    v66 = v42;
    memcpy(v41, v38, v39 - 3);
    v65 = v42;
  }
  if (*((int *)this + 39) <= 2)
  {
    if ((v40 & 0x80000000) == 0)
      v43 = v40;
    else
      v43 = v40 + 1;
    *((_DWORD *)this + 39) = v43 >> 1;
  }
  ManhattanLineRegressor::manhattanLineArrowheadDetector(this, 1);
  ManhattanLineRegressor::manhattanLineArrowheadDetector(this, 0);
  v45 = *((_QWORD *)this + 12);
  v44 = *((_QWORD *)this + 13);
  v46 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - v45) >> 3);
  if (v46 < 6)
  {
    if ((void **)((char *)this + 96) != &__p)
    {
      sub_1BE891F80((_QWORD *)this + 12, (char *)__p, v65, 0xCCCCCCCCCCCCCCCDLL * ((v65 - (_BYTE *)__p) >> 3));
      v45 = *((_QWORD *)this + 12);
      v44 = *((_QWORD *)this + 13);
      v46 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - v45) >> 3);
    }
    *((_DWORD *)this + 16) = 0;
    *((_DWORD *)this + 6) = 0;
    v47 = v46 - 1;
    *((_DWORD *)this + 38) = v47;
    *((_DWORD *)this + 40) = 0;
    if (v47 > 1)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (*((_DWORD *)this + 38) - *((_DWORD *)this + 40) <= 1)
LABEL_19:
    *((_DWORD *)this + 38) = -858993459 * ((unint64_t)(v44 - v45) >> 3) - 1;
LABEL_20:
  v48 = objc_alloc_init(CHDrawing);
  v49 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v48;

  v55 = *((int *)this + 40);
  if ((int)v55 <= *((_DWORD *)this + 38))
  {
    v56 = 40 * v55;
    do
    {
      v57 = *((_QWORD *)this + 12);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 13) - v57) >> 3) <= v55)
        sub_1BE87C2E0();
      objc_msgSend_addPoint_(*((void **)this + 10), v50, v51, v52, v53, v54, *(double *)(v57 + v56), *(double *)(v57 + v56 + 8));
      v56 += 40;
    }
    while ((uint64_t)v55++ < *((int *)this + 38));
  }
  objc_storeStrong((id *)this + 5, *((id *)this + 10));
  ManhattanLineRegressor::manhattanLineRegression(this, v59, v60, v61, v62, v63);
  if (__p)
  {
    v65 = (char *)__p;
    operator delete(__p);
  }
LABEL_26:

}

void sub_1BE88E8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v16;
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v16 = *v14;
    if (!*v14)
    {
LABEL_3:
      v17 = *v13;
      if (!*v13)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v16 = *v14;
    if (!*v14)
      goto LABEL_3;
  }
  *(_QWORD *)(v12 + 176) = v16;
  operator delete(v16);
  v17 = *v13;
  if (!*v13)
  {
LABEL_5:

    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v12 + 104) = v17;
  operator delete(v17);
  goto LABEL_5;
}

uint64_t ManhattanLineRegressor::provideAnAnswer(void **this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;

  objc_msgSend_bounds(this[5], a2, a3, a4, a5, a6);
  v7 = v6;
  v9 = v8;
  v11 = v6 + v10;
  v13 = v8 + v12;
  result = operator new();
  *(_QWORD *)result = &unk_1E77F0720;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(double *)(result + 16) = v7;
  *(double *)(result + 24) = v9;
  *(_DWORD *)(result + 32) = 0;
  *(double *)(result + 40) = v11;
  *(double *)(result + 48) = v13;
  *(_DWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

double *ManhattanLineRegressor::detectMiddlePointIndex(double *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  float v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double *v13;
  uint64_t v14;
  void **v15;
  double ***v16;
  _DWORD *v17;
  int v18;
  double v19;
  double v20;
  _DWORD *v21;
  int v22;
  double v23;
  double v24;
  float v25;
  int i;
  double ***v27;
  double *v28;
  float v29;
  float v30;
  float v31;
  void **v32;
  double *v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  void **v38;
  double **v39;
  double v40;
  double *v41;
  double *v42;
  void *v43;
  void *__p;
  uint64_t v45;
  double **v46;
  double *v47;
  uint64_t v48;

  v2 = this[17];
  v1 = this[18];
  v3 = this[15];
  v4 = this[16] + v1 * 0.5;
  v46 = (double **)&v46;
  v47 = (double *)&v46;
  v48 = 0;
  v43 = &v43;
  __p = &v43;
  v45 = 0;
  v5 = v4;
  v6 = v3 + v2 * 0.5;
  v7 = *((_QWORD *)this + 12);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 13) - v7) >> 3);
  if (v8 > 1)
  {
    v42 = this;
    v9 = 0;
    v10 = 0;
    v11 = v6;
    v12 = v5;
    v13 = (double *)(v7 + 48);
    v14 = 1;
    v15 = &v43;
    v16 = &v46;
    do
    {
      v18 = v14 - 1;
      v19 = *(v13 - 6);
      if (v19 < v11 && (v20 = *(v13 - 1), v20 >= v11) || v19 > v11 && (v20 = *(v13 - 1), v20 <= v11))
      {
        if (vabdd_f64(v19, v11) >= vabdd_f64(v20, v11))
        {
          v21 = operator new(0x18uLL);
          v22 = v14;
        }
        else
        {
          v21 = operator new(0x18uLL);
          v22 = v14 - 1;
        }
        v21[4] = v22;
        *(_QWORD *)v21 = v15;
        *((_QWORD *)v21 + 1) = &v43;
        v15[1] = v21;
        ++v9;
        v15 = (void **)v21;
        v43 = v21;
        v45 = v9;
      }
      v23 = *(v13 - 5);
      if (v23 < v12 && (v24 = *v13, *v13 >= v12) || v23 > v12 && (v24 = *v13, *v13 <= v12))
      {
        if (vabdd_f64(v23, v12) < vabdd_f64(v24, v12))
        {
          v17 = operator new(0x18uLL);
        }
        else
        {
          v17 = operator new(0x18uLL);
          v18 = v14;
        }
        v17[4] = v18;
        *(_QWORD *)v17 = v16;
        *((_QWORD *)v17 + 1) = &v46;
        v16[1] = (double **)v17;
        ++v10;
        v16 = (double ***)v17;
        v46 = (double **)v17;
        v48 = v10;
      }
      ++v14;
      v13 += 5;
    }
    while (v8 != v14);
    if (v10 == 1)
    {
      v27 = (double ***)v47;
      this = v42;
      if (v9 == 1)
      {
LABEL_28:
        v25 = v2 * v2 + v1 * v1;
        for (i = -1; v27 != &v46; v27 = (double ***)v27[1])
        {
          v28 = (double *)(v7 + 40 * *((int *)v27 + 4));
          v29 = *v28 - v11;
          v30 = v28[1] - v12;
          v31 = (float)(v30 * v30) + (float)(v29 * v29);
          if (v31 < v25)
          {
            i = *((_DWORD *)v27 + 4);
            v25 = v31;
          }
        }
        goto LABEL_32;
      }
    }
    else
    {
      this = v42;
      if (v9 != 1)
      {
        v27 = (double ***)v47;
        goto LABEL_28;
      }
      v27 = (double ***)__p;
    }
    i = *((_DWORD *)v27 + 4);
    goto LABEL_36;
  }
  v9 = 0;
  v10 = 0;
  v25 = v2 * v2 + v1 * v1;
  i = -1;
  v15 = &v43;
LABEL_32:
  v32 = (void **)__p;
  if (__p != &v43)
  {
    do
    {
      v33 = (double *)(v7 + 40 * *((int *)v32 + 4));
      v34 = *v33 - v6;
      v35 = v33[1] - v5;
      v36 = (float)(v35 * v35) + (float)(v34 * v34);
      if (v36 < v25)
      {
        i = *((_DWORD *)v32 + 4);
        v25 = v36;
      }
      v32 = (void **)v32[1];
    }
    while (v32 != &v43);
  }
LABEL_36:
  if (i < 1)
  {
    *((_DWORD *)this + 39) = 1;
    if (!v9)
      goto LABEL_45;
    goto LABEL_42;
  }
  if (v8 - 2 < i)
    i = v8 - 2;
  *((_DWORD *)this + 39) = i;
  if (v9)
  {
LABEL_42:
    this = (double *)__p;
    v37 = *(_QWORD *)__p;
    *(_QWORD *)(v37 + 8) = v15[1];
    *(_QWORD *)v15[1] = v37;
    v45 = 0;
    if (this != (double *)&v43)
    {
      do
      {
        v38 = (void **)*((_QWORD *)this + 1);
        operator delete(this);
        this = (double *)v38;
      }
      while (v38 != &v43);
      v10 = v48;
    }
  }
LABEL_45:
  if (v10)
  {
    v39 = v46;
    this = v47;
    v40 = *v47;
    *(_QWORD *)(*(_QWORD *)&v40 + 8) = v46[1];
    *v39[1] = v40;
    v48 = 0;
    if (this != (double *)&v46)
    {
      do
      {
        v41 = (double *)*((_QWORD *)this + 1);
        operator delete(this);
        this = v41;
      }
      while (v41 != (double *)&v46);
    }
  }
  return this;
}

void sub_1BE88ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1BE76551C((uint64_t *)va);
  sub_1BE76551C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE88ED8C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v5 >> 3) >= 0x666666666666667)
      sub_1BE61F930();
    v6 = (char *)operator new(v5);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5 - 3);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BE88EE20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ManhattanLineRegressor::manhattanLineArrowheadDetector(ManhattanLineRegressor *this, int a2)
{
  unint64_t v2;
  ManhattanLineRegressor *v3;
  unint64_t v4;
  char *v6;
  float *v7;
  int v8;
  float *v9;
  char *v10;
  float *v11;
  int v12;
  float v13;
  float v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  double *v22;
  double *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  float v31;
  float v32;
  float *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  float *v39;
  int64_t v40;
  unint64_t v41;
  float *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  char *v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  int v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  float *v58;
  float *v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  float *v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  float *v69;
  uint64_t v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  float *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  float *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  BOOL v98;
  unint64_t v99;
  char *v100;
  BOOL v101;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  char *v113;
  int v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  float *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  int32x4_t *v132;
  int32x4_t v133;
  unint64_t v134;
  int32x4_t v135;
  uint64_t v136;
  char *v137;
  int v138;
  char v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  BOOL v147;
  unint64_t v148;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  double *v157;
  double v158;
  double v159;
  double *v160;
  float v161;
  float v162;
  float v163;
  unint64_t v164;
  float v165;
  int v166;
  unsigned int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  float v175;
  _BOOL4 v177;
  double *v178;
  unint64_t v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  ManhattanLineRegressor *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  float v190;
  int v191;
  void **v192;
  int v193;
  BOOL v194;
  unint64_t v195;
  int v196;
  int v197;
  double *v198;
  double v199;
  double v200;
  double *v201;
  double v202;
  double v203;
  double *v204;
  unint64_t v205;
  float v206;
  int v207;
  double *v208;
  unint64_t v209;
  unint64_t v210;
  double *v212;
  double *v213;
  float v214;
  float v215;
  float v216;
  int v217;
  unsigned int v218;
  int v219;
  float v220;
  unsigned int v221;
  float v222;
  float v223;
  int v224;
  unint64_t v225;
  double *v227;
  double *v228;
  float v229;
  float v230;
  float v231;
  ManhattanLineRegressor *v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  float v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  double *v243;
  double v244;
  double v245;
  double v246;
  double v247;
  unint64_t v248;
  float v249;
  int v250;
  unint64_t v251;
  unint64_t v252;
  double *v253;
  double v254;
  double v255;
  double *v256;
  float v257;
  float v258;
  float v259;
  double v260;
  double v261;
  float v262;
  float v263;
  int v264;
  float v265;
  float v266;
  float v267;
  BOOL v268;
  unint64_t v269;
  double *v271;
  double *v272;
  double v273;
  double v274;
  float v275;
  float v276;
  float v277;
  int v278;
  unint64_t v279;
  unint64_t v280;
  double *v281;
  double v282;
  double v283;
  double *v284;
  float v285;
  float v286;
  float v287;
  double v288;
  double v289;
  unint64_t v290;
  uint64_t v291;
  double *v292;
  float v293;
  float v294;
  int v295;
  int v296;
  float v297;
  float v298;
  float v299;
  _BOOL4 v300;
  _BOOL4 v301;
  BOOL v302;
  unint64_t v303;
  unint64_t v304;
  double *v305;
  double v306;
  double v307;
  float v308;
  float v309;
  float v310;
  unint64_t v311;
  double v312;
  char *v313;
  char *v314;
  int v315;
  uint64_t v316;
  float64x2_t v317;
  char *v318;
  unint64_t v319;
  unint64_t v320;
  char *v321;
  char *v322;
  char *v323;
  __int128 v324;
  __int128 v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  double *v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  void **v337;
  float *v338;
  int v340;
  float *v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  double *v345;
  size_t __sz;
  size_t __sza;
  uint64_t __szb;
  uint64_t v350;
  float *v351;
  uint64_t v352;
  char v353;
  char v354;
  float v355;
  float *v356;
  uint64_t v357;
  char *v358;
  float v359;
  void *v360[2];
  __int128 v361;
  _BYTE v362[12];
  char v363;
  int v364;
  void *__p;
  char *v366;
  char *v367;
  char *v368;
  uint64_t v369;
  char *v370;
  float *v371;
  float *v372;
  float *v373;
  char *v374;
  uint64_t v375;
  char *v376;
  float *v377;
  uint64_t v378;
  size_t v379;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3);
  if (v2 < 6)
    return;
  v3 = this;
  v4 = *((unsigned int *)this + 39);
  if ((int)v4 < 3 || v2 - 3 < v4)
    return;
  v337 = (void **)((char *)this + 96);
  v338 = 0;
  v342 = 0;
  v343 = 0;
  v351 = 0;
  v6 = 0;
  v7 = 0;
  v341 = 0;
  v344 = 0;
  __sz = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = v2 - v4;
  if (v12 <= (int)v4)
    v12 = *((_DWORD *)this + 39);
  v340 = v12;
  v377 = 0;
  v378 = 0;
  v379 = 0;
  v374 = 0;
  v375 = 0;
  v376 = 0;
  v371 = 0;
  v372 = 0;
  v373 = 0;
  v13 = 0.0;
  do
  {
    v15 = *((_DWORD *)v3 + 39);
    v16 = v8 >= v15 - 3;
    if (a2)
    {
      v17 = v15 + v8;
      v16 = -3 - 0x3333333333333333 * ((uint64_t)(*((_QWORD *)v3 + 13) - *((_QWORD *)v3 + 12)) >> 3) <= (unint64_t)(v15 + v8);
      if (v15 + v8 < 0)
        goto LABEL_10;
    }
    else
    {
      v17 = v8;
      if (v8 < 0)
        goto LABEL_10;
    }
    if (v16)
    {
LABEL_10:
      v14 = v13;
      goto LABEL_11;
    }
    v18 = *((_QWORD *)v3 + 12);
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v3 + 13) - v18) >> 3);
    v20 = v17 + 3;
    v21 = v19 > v17 && v19 > v20;
    if (!v21)
    {
      v376 = v344;
      v377 = v9;
      v378 = v343;
      v379 = __sz;
      v374 = v10;
      v375 = v342;
      v372 = v338;
      v373 = v341;
      v371 = v11;
      sub_1BE87C2E0();
    }
    v22 = (double *)(v18 + 40 * v17);
    v23 = (double *)(v18 + 40 * v20);
    v24 = *v23 - *v22;
    v25 = v23[1] - v22[1];
    v26 = (float)(v25 * v25) + (float)(v24 * v24);
    v356 = v11;
    if (v26 > 0.0)
    {
      v24 = v24 / v26;
      v25 = v25 / v26;
    }
    v27 = atan2f(v25, v24) * 57.296;
    v28 = 360.0 - fabsf(v27);
    if (v27 < 0.0)
      v27 = v28;
    if (v27 >= -25.0 && v27 <= 25.0)
      v29 = 0.0;
    else
      v29 = v27;
    if (v27 >= 65.0 && v27 <= 115.0)
      v29 = 90.0;
    if (v27 >= 155.0 && v27 <= 205.0)
      v29 = 180.0;
    if (v27 >= 245.0 && v27 <= 295.0)
      v29 = 270.0;
    if (v27 >= 335.0 && v27 <= 385.0)
      v14 = 360.0;
    else
      v14 = v29;
    if (v27 >= 335.0 && v27 <= 385.0
      || v27 >= 245.0 && v27 <= 295.0
      || v27 >= 155.0 && v27 <= 205.0
      || v27 >= 65.0 && v27 <= 115.0
      || v27 >= -25.0 && v27 <= 25.0)
    {
      v30 = 0;
    }
    else
    {
      v30 = v17 + 1;
    }
    if (v8 == v15)
      v31 = v14;
    else
      v31 = v13;
    v32 = v14 - v31;
    if ((unint64_t)v7 < __sz)
    {
      *v7 = v32;
      v343 = (uint64_t)(v7 + 1);
      v11 = v356;
      if (v6 < v344)
        goto LABEL_46;
      goto LABEL_63;
    }
    v34 = v10;
    v35 = v7 - v9;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62)
      goto LABEL_449;
    if ((uint64_t)(__sz - (_QWORD)v9) >> 1 > v36)
      v36 = (uint64_t)(__sz - (_QWORD)v9) >> 1;
    if (__sz - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v37 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
    {
      if (v37 >> 62)
        goto LABEL_446;
      v38 = operator new(4 * v37);
      v39 = (float *)&v38[4 * v35];
      *v39 = v32;
      v343 = (uint64_t)(v39 + 1);
      v40 = (char *)v7 - (char *)v9;
      if (v7 != v9)
      {
LABEL_57:
        v41 = v40 - 4;
        if (v41 < 0xBC
          || (v65 = ((char *)(v7 - 1) - (char *)v9) & 0xFFFFFFFFFFFFFFFCLL,
              &v38[(char *)v7 - (char *)v9 - 4 - v65] > &v38[(char *)v7 - (char *)v9 - 4])
          || (float *)((char *)v7 - v65 - 4) > v7 - 1
          || (unint64_t)((char *)v9 - v38) < 0x20)
        {
          v42 = v7;
          v3 = this;
        }
        else
        {
          v66 = (v41 >> 2) + 1;
          v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
          v42 = &v7[v67 / 0xFFFFFFFFFFFFFFFCLL];
          v39 = (float *)((char *)v39 - v67);
          v68 = &v38[4 * v35 - 16];
          v69 = v7 - 4;
          v70 = v66 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v71 = *(_OWORD *)v69;
            *(v68 - 1) = *((_OWORD *)v69 - 1);
            *v68 = v71;
            v68 -= 2;
            v69 -= 8;
            v70 -= 8;
          }
          while (v70);
          v3 = this;
          if (v66 == (v66 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_60:
            __sz = (size_t)&v38[4 * v37];
            if (!v9)
              goto LABEL_62;
LABEL_61:
            operator delete(v9);
            goto LABEL_62;
          }
        }
        do
        {
          v43 = *((_DWORD *)v42-- - 1);
          *((_DWORD *)v39-- - 1) = v43;
        }
        while (v42 != v9);
        goto LABEL_60;
      }
    }
    else
    {
      v38 = 0;
      v39 = (float *)(4 * v35);
      *(float *)(4 * v35) = v32;
      v343 = 4 * v35 + 4;
      v40 = (char *)v7 - (char *)v9;
      if (v7 != v9)
        goto LABEL_57;
    }
    v3 = this;
    __sz = (size_t)&v38[4 * v37];
    if (v9)
      goto LABEL_61;
LABEL_62:
    v9 = v39;
    v11 = v356;
    if (v6 < v344)
    {
LABEL_46:
      *(_DWORD *)v6 = v30;
      v342 = (uint64_t)(v6 + 4);
      v33 = v351;
      if (v351 < v341)
        goto LABEL_47;
      goto LABEL_78;
    }
LABEL_63:
    v44 = (v6 - v10) >> 2;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 62)
    {
      v376 = v344;
      v377 = v9;
      v378 = v343;
      v379 = __sz;
      v374 = v10;
      v375 = v342;
      v372 = v338;
      v373 = v341;
      v371 = v11;
      sub_1BE61F930();
    }
    if ((v344 - v10) >> 1 > v45)
      v45 = (v344 - v10) >> 1;
    if ((unint64_t)(v344 - v10) >= 0x7FFFFFFFFFFFFFFCLL)
      v46 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
    {
      v34 = v10;
      if (v46 >> 62)
        goto LABEL_446;
      v47 = operator new(4 * v46);
      v48 = &v47[4 * v44];
      *(_DWORD *)v48 = v30;
      v342 = (uint64_t)(v48 + 4);
      v49 = v6 - v10;
      if (v6 != v10)
      {
LABEL_72:
        v50 = v49 - 4;
        if (v50 < 0xBC
          || (v72 = (v6 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL, &v47[v6 - v10 - 4 - v72] > &v47[v6 - v10 - 4])
          || &v6[-v72 - 4] > v6 - 4
          || (unint64_t)(v10 - v47) < 0x20)
        {
          v51 = v6;
          v3 = this;
        }
        else
        {
          v73 = (v50 >> 2) + 1;
          v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
          v51 = &v6[-v74];
          v48 -= v74;
          v75 = &v47[4 * v44 - 16];
          v76 = v6 - 16;
          v77 = v73 & 0x7FFFFFFFFFFFFFF8;
          v3 = this;
          do
          {
            v78 = *(_OWORD *)v76;
            *(v75 - 1) = *((_OWORD *)v76 - 1);
            *v75 = v78;
            v75 -= 2;
            v76 -= 32;
            v77 -= 8;
          }
          while (v77);
          if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_75:
            v344 = &v47[4 * v46];
            if (!v10)
              goto LABEL_77;
LABEL_76:
            operator delete(v10);
            goto LABEL_77;
          }
        }
        do
        {
          v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
          *((_DWORD *)v48 - 1) = v52;
          v48 -= 4;
        }
        while (v51 != v10);
        goto LABEL_75;
      }
    }
    else
    {
      v47 = 0;
      v48 = (char *)(4 * v44);
      *(_DWORD *)(4 * v44) = v30;
      v342 = 4 * v44 + 4;
      v49 = v6 - v10;
      if (v6 != v10)
        goto LABEL_72;
    }
    v3 = this;
    v344 = &v47[4 * v46];
    if (v10)
      goto LABEL_76;
LABEL_77:
    v10 = v48;
    v33 = v351;
    v11 = v356;
    if (v351 < v341)
    {
LABEL_47:
      *v33 = v14;
      v351 = v33 + 1;
      v338 = v33 + 1;
      v6 = (char *)v342;
      v7 = (float *)v343;
      goto LABEL_11;
    }
LABEL_78:
    v53 = (char *)v33 - (char *)v11;
    v54 = v33 - v11;
    v55 = v54 + 1;
    v34 = v10;
    if ((unint64_t)(v54 + 1) >> 62)
    {
LABEL_449:
      v376 = v344;
      v377 = v9;
      v378 = v343;
      v379 = __sz;
      v374 = v34;
      v375 = v342;
      v372 = v338;
      v373 = v341;
      v371 = v356;
      sub_1BE61F930();
    }
    if (((char *)v341 - (char *)v11) >> 1 > v55)
      v55 = ((char *)v341 - (char *)v11) >> 1;
    if ((unint64_t)((char *)v341 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL)
      v56 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v56 = v55;
    if (v56)
    {
      if (v56 >> 62)
      {
LABEL_446:
        v376 = v344;
        v377 = v9;
        v373 = v341;
        v378 = v343;
        v379 = __sz;
        v374 = v34;
        v375 = v342;
        v371 = v356;
        v372 = v338;
        sub_1BE61F100();
      }
      v57 = (char *)operator new(4 * v56);
      v3 = this;
      v58 = v351;
      v11 = v356;
      v59 = (float *)&v57[4 * v54];
      *v59 = v14;
      v60 = (uint64_t)(v59 + 1);
      v61 = (char *)v351 - (char *)v356;
      if (v351 == v356)
      {
LABEL_100:
        v341 = (float *)&v57[4 * v56];
        v338 = (float *)v60;
        if (!v11)
          goto LABEL_92;
LABEL_91:
        operator delete(v11);
        goto LABEL_92;
      }
    }
    else
    {
      v57 = 0;
      v58 = v351;
      v59 = (float *)(4 * v54);
      *(float *)(4 * v54) = v14;
      v60 = 4 * v54 + 4;
      v61 = (char *)v351 - (char *)v11;
      if (v351 == v11)
        goto LABEL_100;
    }
    v62 = v61 - 4;
    if (v62 < 0xBC)
    {
      v63 = v58;
      goto LABEL_89;
    }
    v79 = v58 - 1;
    v80 = ((char *)v79 - (char *)v11) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v57[v53 - 4 - v80] > &v57[v53 - 4])
    {
      v63 = v351;
      do
      {
LABEL_89:
        v64 = *((_DWORD *)v63-- - 1);
        *((_DWORD *)v59-- - 1) = v64;
      }
      while (v63 != v11);
      goto LABEL_90;
    }
    if ((float *)((char *)v79 - v80) > v79)
    {
      v63 = v351;
      goto LABEL_89;
    }
    if ((unint64_t)((char *)v351 - v57 - v53) < 0x20)
    {
      v63 = v351;
      goto LABEL_89;
    }
    v81 = (v62 >> 2) + 1;
    v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
    v63 = &v351[v82 / 0xFFFFFFFFFFFFFFFCLL];
    v59 = (float *)((char *)v59 - v82);
    v83 = &v57[4 * v54 - 16];
    v84 = v351 - 4;
    v85 = v81 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v86 = *(_OWORD *)v84;
      *((_OWORD *)v83 - 1) = *((_OWORD *)v84 - 1);
      *(_OWORD *)v83 = v86;
      v83 -= 32;
      v84 -= 8;
      v85 -= 8;
    }
    while (v85);
    if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_89;
LABEL_90:
    v341 = (float *)&v57[4 * v56];
    v338 = (float *)v60;
    if (v11)
      goto LABEL_91;
LABEL_92:
    v351 = (float *)v60;
    v6 = (char *)v342;
    v7 = (float *)v343;
    v11 = v59;
LABEL_11:
    ++v8;
    v13 = v14;
  }
  while (v8 != v340);
  v376 = v344;
  v377 = v9;
  v378 = v343;
  v379 = __sz;
  v374 = v10;
  v375 = v342;
  v87 = v6 - v10;
  v372 = v338;
  v373 = v341;
  v371 = v11;
  if ((unint64_t)(v6 - v10) < 0x18)
  {
    if (a2)
    {
      *((_DWORD *)v3 + 38) = -858993459 * ((*((_QWORD *)v3 + 13) - *((_QWORD *)v3 + 12)) >> 3) - 1;
      *((_DWORD *)v3 + 16) = 0;
    }
    else
    {
      *((_DWORD *)v3 + 40) = 0;
      *((_DWORD *)v3 + 6) = 0;
    }
    goto LABEL_438;
  }
  v368 = 0;
  v369 = 0;
  v370 = 0;
  v88 = v87 >> 2;
  v89 = (v87 >> 2) - 3;
  if (v87 >> 2 == 3)
  {
    v91 = 0;
    v140 = 0;
    if ((a2 & 1) == 0)
      goto LABEL_290;
    v140 = 0;
    if (!a2)
      goto LABEL_290;
    goto LABEL_239;
  }
  __sza = v6 - v10;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v352 = (v87 >> 2) - 3;
  v357 = v87 >> 2;
  while (2)
  {
    if (v88 <= v93)
      v96 = v93;
    else
      v96 = v88;
    v97 = v96 + v92;
    if (v97)
      v98 = v97 >= 3;
    else
      v98 = 0;
    if (!v98)
    {
      v369 = v90;
      v370 = v94;
      v368 = v95;
      sub_1BE87C2E0();
    }
    v99 = v93++;
    v100 = &v10[4 * v99];
    if (*((_DWORD *)v100 + 2))
      v101 = *(_DWORD *)&v10[4 * v93] == 0;
    else
      v101 = 1;
    if (!v101 && *(_DWORD *)v100 != 0)
    {
      if (v91 < v94)
      {
        *(_DWORD *)v91 = v99;
        v91 += 4;
        v90 = (uint64_t)v91;
      }
      else
      {
        v103 = v91 - v95;
        v104 = (v91 - v95) >> 2;
        v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 62)
        {
          v369 = v90;
          v370 = v94;
          v368 = v95;
          sub_1BE61F930();
        }
        v106 = v91;
        if ((v94 - v95) >> 1 > v105)
          v105 = (v94 - v95) >> 1;
        if ((unint64_t)(v94 - v95) >= 0x7FFFFFFFFFFFFFFCLL)
          v107 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v107 = v105;
        if (v107)
        {
          if (v107 >> 62)
          {
            v369 = v90;
            v370 = v94;
            v368 = v95;
            sub_1BE61F100();
          }
          v108 = v107;
          v109 = (char *)operator new(4 * v107);
          v107 = v108;
          v110 = &v109[4 * v104];
          *(_DWORD *)v110 = v99;
          v90 = (uint64_t)(v110 + 4);
          v111 = v106 - v95;
          if (v106 == v95)
            goto LABEL_163;
        }
        else
        {
          v109 = 0;
          v110 = (char *)(4 * v104);
          *(_DWORD *)(4 * v104) = v99;
          v90 = 4 * v104 + 4;
          v111 = v91 - v95;
          if (v91 == v95)
            goto LABEL_163;
        }
        v112 = v111 - 4;
        if (v112 >= 0xBC)
        {
          v116 = (v106 - 4 - v95) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v109[v103 - 4 - v116] > &v109[v103 - 4])
          {
            v113 = v106;
          }
          else if (&v106[-v116 - 4] > v106 - 4)
          {
            v113 = v106;
          }
          else if ((unint64_t)(v106 - v109 - v103) >= 0x20)
          {
            v117 = (v112 >> 2) + 1;
            v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
            v113 = &v106[-v118];
            v110 -= v118;
            v119 = &v109[4 * v104 - 16];
            v120 = v106 - 16;
            v121 = v117 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v122 = *(_OWORD *)v120;
              *((_OWORD *)v119 - 1) = *((_OWORD *)v120 - 1);
              *(_OWORD *)v119 = v122;
              v119 -= 32;
              v120 -= 32;
              v121 -= 8;
            }
            while (v121);
            if (v117 == (v117 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_163;
          }
          else
          {
            v113 = v106;
          }
        }
        else
        {
          v113 = v106;
        }
        do
        {
          v114 = *((_DWORD *)v113 - 1);
          v113 -= 4;
          *((_DWORD *)v110 - 1) = v114;
          v110 -= 4;
        }
        while (v113 != v95);
LABEL_163:
        v94 = &v109[4 * v107];
        if (v95)
        {
          v115 = (char *)v90;
          operator delete(v95);
          v90 = (uint64_t)v115;
          v91 = v115;
        }
        else
        {
          v91 = (char *)v90;
        }
        v95 = v110;
        v3 = this;
        v89 = v352;
        v88 = v357;
      }
    }
    --v92;
    if (v93 != v89)
      continue;
    break;
  }
  v369 = v90;
  v370 = v94;
  v368 = v95;
  if ((a2 & 1) != 0)
  {
    if (v91 == v95)
    {
      v140 = 0;
      if (!a2)
        goto LABEL_290;
      goto LABEL_239;
    }
    v123 = 0;
    v124 = 0;
    v125 = (v91 - v95) >> 2;
    v126 = v377;
    v127 = (v378 - (uint64_t)v377) >> 2;
    if (v125 <= 1)
      v125 = 1;
    while (1)
    {
      v128 = *(int *)&v95[4 * v123];
      v129 = v88 - v128;
      if (v88 <= v128)
      {
        v130 = 0;
        goto LABEL_196;
      }
      if (v129 >= 8)
      {
        v131 = (v129 & 0xFFFFFFFFFFFFFFF8) + v128;
        v132 = (int32x4_t *)&v10[4 * v128 + 16];
        v133 = 0uLL;
        v134 = v129 & 0xFFFFFFFFFFFFFFF8;
        v135 = 0uLL;
        do
        {
          v133 = vsubq_s32(v133, vtstq_s32(v132[-1], v132[-1]));
          v135 = vsubq_s32(v135, vtstq_s32(*v132, *v132));
          v132 += 2;
          v134 -= 8;
        }
        while (v134);
        v130 = vaddvq_s32(vaddq_s32(v135, v133));
        if (v129 == (v129 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_196;
      }
      else
      {
        v130 = 0;
        v131 = *(int *)&v95[4 * v123];
      }
      v136 = v88 - v131;
      v137 = &v10[4 * v131];
      do
      {
        v138 = *(_DWORD *)v137;
        v137 += 4;
        if (v138)
          ++v130;
        --v136;
      }
      while (v136);
LABEL_196:
      if ((double)(int)((__sza >> 2) - v128) * 0.5 >= (double)v130)
      {
        if (v127 <= v123)
          sub_1BE87C2E0();
        if (v126[v123] <= 50.0 || (v124 & 1) != 0)
          goto LABEL_184;
LABEL_182:
        if (v88 <= v128)
          sub_1BE87C2E0();
        *((_DWORD *)v3 + 38) = *(_DWORD *)&v10[4 * v128];
        v124 = 1;
        *((_DWORD *)v3 + 16) = 1;
        goto LABEL_184;
      }
      if ((v124 & 1) == 0)
        goto LABEL_182;
LABEL_184:
      if (++v123 == v125)
      {
        v91 = v95;
        v140 = v124 & 1;
        if (!a2)
          goto LABEL_290;
LABEL_239:
        v358 = v91;
        v152 = *((_DWORD *)v3 + 38);
        v153 = v152 - 2;
        v154 = *((_QWORD *)v3 + 12);
        v155 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v3 + 13) - v154) >> 3);
        if (v155 <= v153 || v155 <= v152)
          sub_1BE87C2E0();
        v157 = (double *)(v154 + 40 * v153);
        v159 = *v157;
        v158 = v157[1];
        v160 = (double *)(v154 + 40 * v152);
        v161 = *v160 - v159;
        v162 = v160[1] - v158;
        v163 = (float)(v162 * v162) + (float)(v161 * v161);
        if (v163 > 0.0)
        {
          v161 = v161 / v163;
          v162 = v162 / v163;
        }
        v353 = v140;
        v350 = *((_QWORD *)v3 + 12);
        v164 = v152 - 3;
        if (v155 - 4 <= v164)
        {
          v167 = 0;
        }
        else
        {
          v165 = atan2f(v162, v161);
          v166 = 0;
          v167 = 0;
          v168 = 0;
          v169 = v155 - v164;
          if (v155 >= v164)
            v170 = v155 - v164;
          else
            v170 = 0;
          v171 = v152 - 1;
          if (v155 > v171)
            v171 = v155;
          v172 = v171 - v164 - 2;
          v173 = v169 - 5;
          if (v172 < v169 - 5)
            v173 = v172;
          if (v173 >= v170)
            v174 = v170;
          else
            v174 = v173;
          v175 = v165 * 57.296;
          v177 = v170 <= v173 || v172 == v174;
          v178 = (double *)(v154 + 40 * v164 + 88);
          v179 = v169 - 4;
          do
          {
            if (v177)
              sub_1BE87C2E0();
            v182 = *(v178 - 1) - *(v178 - 11);
            v183 = *v178 - *(v178 - 10);
            v184 = (float)(v183 * v183) + (float)(v182 * v182);
            if (v184 > 0.0)
            {
              v182 = v182 / v184;
              v183 = v183 / v184;
            }
            v180 = atan2f(v183, v182) * 57.296;
            if (v180 < 0.0)
              v180 = v180 + 360.0;
            v181 = vabds_f32(v180, v175);
            v168 = (v168 | v166 ^ 1 | (v181 <= 30.0)) ^ 1;
            v167 += v168 & 1;
            v166 |= v181 > 100.0;
            v178 += 5;
            v175 = v180;
            --v179;
          }
          while (v179);
        }
        if ((v353 & (v167 < 3)) == 1)
        {
          v185 = this;
          v186 = *((int *)this + 39);
          v187 = v152 - 1;
          if (v152 - 1 <= (int)v186)
          {
            v192 = v337;
            v188 = v350;
          }
          else
          {
            v188 = v350;
            v189 = v350 + 40 * v187 + 8;
            v190 = 3.4028e38;
            v191 = v152;
            v192 = v337;
            do
            {
              v195 = v191 - 2;
              if (v155 <= v195)
                sub_1BE87C2E0();
              if (v155 <= v187)
                sub_1BE87C2E0();
              v196 = 0;
              v197 = 0;
              v198 = (double *)(v350 + 40 * (int)v195);
              v199 = *v198;
              v200 = v198[1];
              v201 = (double *)(v350 + 40 * v187);
              v202 = *v201 - v199;
              v203 = -(v201[1] - v200);
              v204 = (double *)v189;
              v205 = v187;
              do
              {
                v206 = (*(v204 - 1) - v199) * v203 + v202 * (*v204 - v200);
                if (v206 > 0.0)
                {
                  ++v196;
                }
                else if (v206 < 0.0)
                {
                  ++v197;
                }
                ++v205;
                v204 += 5;
              }
              while (v155 > v205);
              v193 = v196 - v197;
              if (v193 < 0)
                v193 = -v193;
              v194 = v190 <= (float)v193;
              if (v190 > (float)v193)
                v190 = (float)v193;
              v191 = v187;
              if (!v194)
                v152 = v187;
              --v187;
              v189 -= 40;
            }
            while (v187 > v186);
          }
          v278 = v155 - 1;
          if (v152 == (_DWORD)v186)
            v152 = v155 - 1;
          *((_DWORD *)this + 38) = v152;
          if (v152 - 3 >= (int)v186)
          {
            v279 = v152;
            v280 = v152 - 2;
            if (v155 <= v280 || v155 <= v152)
              sub_1BE87C2E0();
            v281 = (double *)(v188 + 40 * v280);
            v282 = *v281;
            v283 = v281[1];
            v284 = (double *)(v188 + 40 * v152);
            v285 = *v284 - v282;
            v286 = v284[1] - v283;
            v287 = (float)(v286 * v286) + (float)(v285 * v285);
            if (v287 > 0.0)
            {
              v285 = v285 / v287;
              v286 = v286 / v287;
            }
            if (v278 > v152 + 1)
            {
              v288 = v286;
              v289 = v285;
              v290 = v278;
              v291 = v188;
              v292 = (double *)(v188 + 40 * v278 + 8);
              v293 = 0.0;
              v294 = 1000.0;
              v295 = v155;
              v296 = v152;
              do
              {
                if (v155 <= v290 || (v303 = v290, v304 = v295 - 3, v155 <= v304))
                  sub_1BE87C2E0();
                v305 = (double *)(v291 + 40 * (int)v304);
                v307 = *(v292 - 1);
                v306 = *v292;
                v308 = v307 - *v305;
                v309 = *v292 - v305[1];
                v310 = (float)(v309 * v309) + (float)(v308 * v308);
                if (v310 > 0.0)
                {
                  v308 = v308 / v310;
                  v309 = v309 / v310;
                }
                v297 = atan2f(v309, v308) * 57.296;
                v298 = (v307 - v282) * v288 - (v306 - v283) * v289;
                v299 = vabds_f32(v297, v293);
                v300 = v294 > v298;
                if (v299 <= 30.0)
                  v300 = 0;
                if (v299 >= 100.0)
                  v300 = 0;
                v301 = v296 == v152;
                v302 = !v300 || !v301;
                if (v300 && v301)
                  v296 = v303;
                v290 = v303 - 1;
                if (!v302)
                  v294 = (v307 - v282) * v288 - (v306 - v283) * v289;
                v292 -= 5;
                v295 = v303;
                v293 = v297;
              }
              while ((uint64_t)v290 > v152 + 1);
              v279 = v296;
              v185 = this;
              v192 = v337;
              v188 = v291;
              v278 = v155 - 1;
            }
            if (v155 <= v279)
              sub_1BE87C2E0();
            v330 = (uint64_t *)(v188 + 40 * (int)v279);
            v331 = *v330;
            v332 = v330[1];
            if (v278 > v152)
              v333 = ~v152;
            else
              v333 = 1 - v155;
            sub_1BE88ED8C(&__p, (uint64_t)v192);
            v334 = *((_QWORD *)v185 + 13);
            if (v333 + (int)v155 >= 1)
            {
              v334 = v334 - 40 * (v333 + v155 - 1) - 40;
              *((_QWORD *)v185 + 13) = v334;
            }
            v335 = v334 - (_QWORD)*v192;
            if ((void *)v334 == *v192)
            {
              v336 = v334;
              if (v192 != &__p)
              {
                sub_1BE891F80(v192, (char *)__p, v366, 0xCCCCCCCCCCCCCCCDLL * ((v366 - (_BYTE *)__p) >> 3));
                v334 = *((_QWORD *)v185 + 12);
                v336 = *((_QWORD *)v185 + 13);
              }
              *((_DWORD *)v185 + 38) = -858993459 * ((unint64_t)(v336 - v334) >> 3) - 1;
              *((_DWORD *)v185 + 40) = 0;
              *((_DWORD *)v185 + 6) = 0;
              *((_DWORD *)v185 + 16) = 0;
            }
            else
            {
              *(_QWORD *)&v361 = v331;
              *((_QWORD *)&v361 + 1) = v332;
              *(_DWORD *)v362 = -858993459 * (v335 >> 3) - 1;
              *(_QWORD *)&v362[4] = 0x100000000;
              v363 = 0;
              v364 = 0;
              sub_1BE891E20(v192, &v361);
              *((_DWORD *)v185 + 38) = -1 - 858993459 * ((*((_QWORD *)v185 + 13) - *((_QWORD *)v185 + 12)) >> 3);
            }
            if (__p)
            {
              v366 = (char *)__p;
              operator delete(__p);
            }
          }
        }
        goto LABEL_435;
      }
    }
  }
  if (v91 == v95)
  {
    v140 = 0;
    goto LABEL_290;
  }
  v141 = 0;
  v140 = 0;
  v142 = (v91 - v95) >> 2;
  v143 = *((_DWORD *)v3 + 39);
  if (v142 <= 1)
    v142 = 1;
  do
  {
    v144 = *(int *)&v95[4 * v141];
    v145 = v144 + 6;
    if ((int)v144 + 6 < v143 && (v140 & 1) == 0)
    {
      if (v88 <= v144 + 9)
        goto LABEL_213;
      v146 = v144 + 7;
      v147 = v88 > v145 && v88 > v146;
      v148 = v144 + 8;
      if (!v147 || v88 <= v148)
        sub_1BE87C2E0();
      v150 = *(_DWORD *)&v10[4 * v146] ? *(_DWORD *)&v10[4 * v145] == 0 : (*(_DWORD *)&v10[4 * v145] == 0) + 1;
      v151 = *(_DWORD *)&v10[4 * v148] ? v150 : v150 + 1;
      if (v151 == 3)
      {
        *((_DWORD *)v3 + 40) = v145;
        v140 = 1;
        *((_DWORD *)v3 + 6) = 1;
      }
      else
      {
LABEL_213:
        v140 = 0;
      }
    }
    ++v141;
  }
  while (v142 != v141);
  v91 = v95;
  if (a2)
    goto LABEL_239;
LABEL_290:
  v358 = v91;
  v207 = *((_DWORD *)v3 + 40);
  v208 = (double *)*((_QWORD *)v3 + 12);
  __szb = *((_QWORD *)v3 + 13) - (_QWORD)v208;
  v209 = 0xCCCCCCCCCCCCCCCDLL * (__szb >> 3);
  v210 = v207 + 2;
  if (v209 <= v207 || v209 <= v210)
    sub_1BE87C2E0();
  v212 = &v208[5 * v207];
  v213 = &v208[5 * v210];
  v214 = *v213 - *v212;
  v215 = v213[1] - v212[1];
  v216 = (float)(v215 * v215) + (float)(v214 * v214);
  v354 = v140;
  if (v216 > 0.0)
  {
    v214 = v214 / v216;
    v215 = v215 / v216;
  }
  v345 = (double *)*((_QWORD *)v3 + 13);
  if (v207 < 4)
  {
    v218 = 0;
  }
  else
  {
    v217 = 0;
    v218 = 0;
    v219 = 0;
    v220 = atan2f(v215, v214) * 57.296;
    v221 = v207;
    do
    {
      v224 = v221;
      v21 = v209 > v221;
      v225 = v221 + 3;
      if (!v21 || v209 <= v225)
        sub_1BE87C2E0();
      v227 = &v208[5 * v224];
      v228 = &v208[5 * v225];
      v229 = *v228 - *v227;
      v230 = v228[1] - v227[1];
      v231 = (float)(v230 * v230) + (float)(v229 * v229);
      if (v231 > 0.0)
      {
        v229 = v229 / v231;
        v230 = v230 / v231;
      }
      v222 = atan2f(v230, v229) * 57.296;
      if (v222 < 0.0)
        v222 = v222 + 360.0;
      v223 = vabds_f32(v222, v220);
      v217 = (v217 | v219 ^ 1 | (v223 <= 30.0)) ^ 1;
      v218 += v217 & 1;
      v219 |= v223 > 100.0;
      v221 = v224 - 1;
      v220 = v222;
    }
    while (v224 > 4);
  }
  if ((v354 & (v218 < 4)) == 1)
  {
    v232 = this;
    v233 = *((_DWORD *)this + 39);
    v234 = v207 + 1;
    if (v207 + 1 < v233)
    {
      if (v209 <= v234)
        v235 = v207 + 1;
      else
        v235 = 0xCCCCCCCCCCCCCCCDLL * (__szb >> 3);
      v236 = v207 + 2;
      v237 = 3.4028e38;
      v238 = v207;
      do
      {
        v240 = v238;
        if (v209 <= v238)
          sub_1BE87C2E0();
        if (v234 == v235)
          sub_1BE87C2E0();
        if (v234 <= 0)
        {
          v239 = 0;
        }
        else
        {
          v241 = 0;
          v242 = 0;
          v243 = &v208[5 * v240];
          v244 = *v243;
          v245 = v243[1];
          v248 = (unint64_t)&v208[5 * v234];
          v246 = *(double *)v248 - v244;
          v247 = -(*(double *)(v248 + 8) - v245);
          LODWORD(v248) = v236;
          do
          {
            v248 = (v248 - 1);
            if (v209 <= v248)
              sub_1BE87C2E0();
            v249 = (v208[5 * v248] - v244) * v247 + v246 * (v208[5 * v248 + 1] - v245);
            if (v249 > 0.0)
            {
              ++v242;
            }
            else if (v249 < 0.0)
            {
              ++v241;
            }
          }
          while ((int)v248 > 1);
          v239 = v242 - v241;
        }
        v238 = v234;
        if (v239 < 0)
          v239 = -v239;
        if (v237 > (float)v239)
        {
          v207 = v234;
          v237 = (float)v239;
        }
        ++v234;
        ++v236;
      }
      while (v233 != (_DWORD)v234);
    }
    v250 = v207 == v233 ? 0 : v207;
    *((_DWORD *)this + 40) = v250;
    v251 = v250;
    v252 = v250 + 4;
    if ((int)v252 <= v233)
    {
      if (v209 <= v251 || v209 <= v252)
        sub_1BE87C2E0();
      v253 = &v208[5 * (int)v251];
      v254 = *v253;
      v255 = v253[1];
      v256 = &v208[5 * v252];
      v257 = *v256 - v254;
      v258 = v256[1] - v255;
      v259 = (float)(v258 * v258) + (float)(v257 * v257);
      if (v259 > 0.0)
      {
        v257 = v257 / v259;
        v258 = v258 / v259;
      }
      if ((int)v251 < 5)
      {
        v263 = 1000.0;
        v311 = v251;
      }
      else
      {
        v355 = v259;
        v359 = v258;
        v260 = v258;
        v261 = v257;
        v262 = 0.0;
        v263 = 1000.0;
        v264 = v207;
        do
        {
          v269 = (v207 - 4);
          if (v209 <= v269 || v209 <= v207)
            sub_1BE87C2E0();
          v271 = &v208[5 * v269];
          v272 = &v208[5 * v207];
          v273 = *v272;
          v274 = v272[1];
          v275 = *v272 - *v271;
          v276 = v274 - v271[1];
          v277 = (float)(v276 * v276) + (float)(v275 * v275);
          if (v277 > 0.0)
          {
            v275 = v275 / v277;
            v276 = v276 / v277;
          }
          v265 = atan2f(v276, v275) * 57.296;
          v266 = (v273 - v254) * v260 - (v274 - v255) * v261;
          v267 = vabds_f32(v265, v262);
          v268 = v263 > v266;
          if (v267 <= 30.0)
            v268 = 0;
          if (v267 >= 100.0)
            v268 = 0;
          if (v268 && v264 == (_DWORD)v251)
          {
            v263 = (v273 - v254) * v260 - (v274 - v255) * v261;
            v264 = v207;
          }
          v262 = v265;
          v21 = v207-- <= 5;
        }
        while (!v21);
        v311 = v264;
        v258 = v359;
        v259 = v355;
      }
      if (v209 <= v311)
        sub_1BE87C2E0();
      v312 = v208[5 * (int)v311 + 1];
      v361 = 0uLL;
      *(_QWORD *)v362 = 0;
      if (v345 != v208)
      {
        if (v209 > 0x666666666666666)
          sub_1BE61F930();
        *(_QWORD *)&v361 = operator new(__szb);
        *(_QWORD *)v362 = v361 + 8 * (__szb >> 3);
        memcpy((void *)v361, v208, __szb - 3);
        *((_QWORD *)&v361 + 1) = *(_QWORD *)v362;
      }
      v313 = (char *)operator new(0x28uLL);
      v314 = v313 + 40;
      *(double *)v313 = v254 + (float)(v259 * (float)(v258 * v263));
      *((double *)v313 + 1) = v312;
      *((_QWORD *)v313 + 2) = 0;
      v315 = 1;
      *((_DWORD *)v313 + 6) = 1;
      v313[28] = 0;
      *((_DWORD *)v313 + 8) = 0;
      v366 = v313 + 40;
      v367 = v313 + 40;
      __p = v313;
      while (1)
      {
        v317 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)&v208[5 * v251]));
        if (v314 >= v367)
          break;
        *(float64x2_t *)v314 = v317;
        *((_DWORD *)v314 + 4) = v315;
        *(_QWORD *)(v314 + 20) = 0x100000000;
        v314[28] = 0;
        *((_DWORD *)v314 + 8) = 0;
        v314 += 40;
LABEL_388:
        v366 = v314;
        ++v315;
        ++v251;
        v208 = (double *)*((_QWORD *)v232 + 12);
        v316 = *((_QWORD *)v232 + 13);
        if (0xCCCCCCCCCCCCCCCDLL * ((v316 - (uint64_t)v208) >> 3) <= v251)
        {
          if (v337 != &__p)
          {
            sub_1BE891F80(v337, (char *)__p, v314, 0xCCCCCCCCCCCCCCCDLL * ((v314 - (_BYTE *)__p) >> 3));
            v208 = (double *)*((_QWORD *)v232 + 12);
            v316 = *((_QWORD *)v232 + 13);
          }
          v326 = v316 - (_QWORD)v208;
          if (v326)
          {
            v327 = 0xCCCCCCCCCCCCCCCDLL * (v326 >> 3);
            v328 = *((int *)v232 + 38) - (uint64_t)*((int *)v232 + 40);
            *((_DWORD *)v232 + 38) = v328;
            *((_DWORD *)v232 + 40) = 0;
            if (v327 < v328)
              *((_DWORD *)v232 + 38) = v327 - 1;
          }
          else
          {
            if (v337 == (void **)&v361)
            {
              v329 = v208;
            }
            else
            {
              sub_1BE891F80(v337, (char *)v361, *((char **)&v361 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v361 + 1) - v361) >> 3));
              v208 = (double *)*((_QWORD *)v232 + 12);
              v329 = (double *)*((_QWORD *)v232 + 13);
            }
            *((_DWORD *)v232 + 38) = -858993459 * ((unint64_t)((char *)v329 - (char *)v208) >> 3) - 1;
            *((_DWORD *)v232 + 40) = 0;
            *((_DWORD *)v232 + 6) = 0;
            *((_DWORD *)v232 + 16) = 0;
          }
          if (__p)
          {
            v366 = (char *)__p;
            operator delete(__p);
          }
          if ((_QWORD)v361)
          {
            *((_QWORD *)&v361 + 1) = v361;
            operator delete((void *)v361);
          }
          v358 = v368;
          goto LABEL_435;
        }
      }
      v318 = (char *)__p;
      v319 = 0xCCCCCCCCCCCCCCCDLL * ((v314 - (_BYTE *)__p) >> 3) + 1;
      if (v319 > 0x666666666666666)
        sub_1BE61F930();
      if (0x999999999999999ALL * ((v367 - (_BYTE *)__p) >> 3) > v319)
        v319 = 0x999999999999999ALL * ((v367 - (_BYTE *)__p) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v367 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
        v320 = 0x666666666666666;
      else
        v320 = v319;
      if (v320)
      {
        *(float64x2_t *)v360 = v317;
        if (v320 > 0x666666666666666)
          sub_1BE61F100();
        v321 = (char *)operator new(40 * v320);
        v317 = *(float64x2_t *)v360;
      }
      else
      {
        v321 = 0;
      }
      v322 = &v321[8 * ((v314 - (_BYTE *)__p) >> 3)];
      *(float64x2_t *)v322 = v317;
      *((_DWORD *)v322 + 4) = v315;
      *(_QWORD *)(v322 + 20) = 0x100000000;
      v322[28] = 0;
      *((_DWORD *)v322 + 8) = 0;
      v323 = v322 + 40;
      if (v314 == v318)
      {
        __p = v322;
        v367 = &v321[40 * v320];
        v318 = v314;
      }
      else
      {
        do
        {
          v324 = *(_OWORD *)(v314 - 40);
          v325 = *(_OWORD *)(v314 - 24);
          *(_QWORD *)(v322 - 11) = *(_QWORD *)(v314 - 11);
          *(_OWORD *)(v322 - 24) = v325;
          *(_OWORD *)(v322 - 40) = v324;
          v322 -= 40;
          v314 -= 40;
        }
        while (v314 != v318);
        __p = v322;
        v367 = &v321[40 * v320];
        if (!v318)
          goto LABEL_406;
      }
      operator delete(v318);
LABEL_406:
      v314 = v323;
      v232 = this;
      goto LABEL_388;
    }
  }
LABEL_435:
  if (v358)
  {
    v369 = (uint64_t)v358;
    operator delete(v358);
  }
  v11 = v371;
LABEL_438:
  if (v11)
  {
    v372 = v11;
    operator delete(v11);
  }
  if (v374)
    operator delete(v374);
  if (v377)
    operator delete(v377);
}

void sub_1BE89098C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  if (a35)
  {
    operator delete(a35);
    v39 = *(void **)(v37 - 200);
    if (!v39)
    {
LABEL_7:
      v40 = *(void **)(v37 - 176);
      if (!v40)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  else
  {
    v39 = *(void **)(v37 - 200);
    if (!v39)
      goto LABEL_7;
  }
  *(_QWORD *)(v37 - 192) = v39;
  operator delete(v39);
  v40 = *(void **)(v37 - 176);
  if (!v40)
LABEL_8:
    _Unwind_Resume(exception_object);
LABEL_11:
  *(_QWORD *)(v37 - 168) = v40;
  operator delete(v40);
  _Unwind_Resume(exception_object);
}

void ManhattanLineRegressor::manhattanLineRegression(ManhattanLineRegressor *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  float v44;
  double v45;
  float v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  double v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  char *v62;
  char *v63;
  char *v64;
  float v65;
  float v66;
  double v67;
  double v68;
  float v69;
  float v70;
  float *v71;
  float v72;
  float *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  BOOL v78;
  char v79;
  float v80;
  float v81;
  char v82;
  float v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  float v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  ManhattanLineRegressor *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  float *v101;
  char *v102;
  char *v103;
  float v104;
  float v105;
  int v106;
  float v107;
  float v108;
  int v109;
  double v110;
  double v111;
  int v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  double v117;
  double v118;
  float v119;
  float v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  float v127;
  float v128;
  float v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  float *v134;
  char *v135;
  __int128 v136;
  __int128 v137;
  char *v138;
  float v139;
  float v140;
  float *v141;
  unint64_t v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  char *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  unint64_t v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  uint64_t v166;
  float v167;
  float *v168;
  int v169;
  __int128 *v170;
  double v171;
  double v172;
  double v173;
  uint64_t v174;
  char *v175;
  float v176;
  float *v177;
  int v178;
  BOOL v179;
  uint64_t v180;
  float v181;
  char *v182;
  char *v183;
  uint64_t v184;
  double v185;
  double *v186;
  double *v187;
  uint64_t v188;
  float v189;
  float *v190;
  int v191;
  float v192;
  double v193;
  double v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  double *v199;
  double *v200;
  double *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  double v206;
  char *v207;
  uint64_t v208;
  char *v209;
  int64_t v210;
  char *v211;
  char *v212;
  ManhattanLineRegressor *v213;
  double v214;
  double v215;
  double v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  double v222;
  char *v223;
  ManhattanLineRegressor *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231[3];
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  char *v236[3];
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  char *v242;
  char *v243;
  double *v244;
  _QWORD v245[4];

  v245[2] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 50) = -1082130432;
  if (!objc_msgSend_strokeCount(*((void **)this + 5), a2, a3, a4, a5, a6)
    || !objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 5), v7, 0, v8, v9, v10))
  {
    v30 = *MEMORY[0x1E0C9D538];
    v31 = *(_QWORD *)(MEMORY[0x1E0C9D538] + 8);
    v29 = operator new();
    *(_QWORD *)v29 = &unk_1E77F0720;
    *(_QWORD *)(v29 + 72) = 0;
    *(_QWORD *)(v29 + 80) = 0;
    *(_QWORD *)(v29 + 64) = 0;
    *(_QWORD *)(v29 + 16) = v30;
    *(_QWORD *)(v29 + 24) = v31;
    *(_DWORD *)(v29 + 32) = 0;
    *(_QWORD *)(v29 + 40) = v30;
    *(_QWORD *)(v29 + 48) = v31;
    goto LABEL_6;
  }
  v15 = objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 5), v11, 0, v12, v13, v14);
  if ((int)v15 <= 9)
  {
    objc_msgSend_bounds(*((void **)this + 5), v16, v17, v18, v19, v20);
    v22 = v21;
    v24 = v23;
    v26 = v21 + v25;
    v28 = v23 + v27;
    v29 = operator new();
    *(_QWORD *)v29 = &unk_1E77F0720;
    *(_QWORD *)(v29 + 72) = 0;
    *(_QWORD *)(v29 + 80) = 0;
    *(_QWORD *)(v29 + 64) = 0;
    *(double *)(v29 + 16) = v22;
    *(double *)(v29 + 24) = v24;
    *(_DWORD *)(v29 + 32) = 0;
    *(double *)(v29 + 40) = v26;
    *(double *)(v29 + 48) = v28;
LABEL_6:
    *(_DWORD *)(v29 + 56) = 0;
    *(_DWORD *)(v29 + 8) = 0;
    *((_QWORD *)this + 24) = v29;
    return;
  }
  v218 = (uint64_t)&v218;
  v225 = v15;
  v32 = (v15 - 1);
  v220 = v15 - 1;
  v33 = v32;
  v34 = MEMORY[0x1E0C80A78](v15);
  v36 = (float *)((char *)&v218 - v35);
  v37 = MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v218 - v38;
  MEMORY[0x1E0C80A78](v37);
  v223 = (char *)&v218 - ((v32 + 15) & 0x1FFFFFFF0);
  objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 5), v40, 0, 0, v41, v42);
  v44 = v43;
  v46 = v45;
  v224 = this;
  v47 = 1;
  objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 5), v48, 0, 1, v49, v50);
  v55 = v54;
  v57 = v56;
  *v36 = v55 - v44;
  v36[v32] = -(float)(v55 - v44);
  v58 = 2 * v32;
  v59 = 2 * v32;
  v36[v59] = v57 - v46;
  v60 = v58 + v32;
  v36[v60] = -(float)(v57 - v46);
  v221 = v58 + v32;
  v222 = *(double *)&v36;
  v61 = v36 + 1;
  v62 = &v39[v58 + v32];
  v219 = v58;
  v63 = &v39[v58];
  v226 = v32;
  v227 = v39;
  v64 = &v39[v32];
  do
  {
    v65 = v57;
    v66 = v55;
    objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)v224 + 5), v51, 0, v47, v52, v53);
    v55 = v67;
    v57 = v68;
    *v61 = v55 - v66;
    v61[v33] = -(float)(v55 - v66);
    v61[v59] = v57 - v65;
    v61[v60] = -(float)(v57 - v65);
    v227[v47] = 127;
    v69 = *(v61 - 1);
    v70 = -INFINITY;
    if ((float)(v69 + 1.0) <= -INFINITY)
    {
      v71 = &v61[v59];
      v72 = v61[v59 - 1] + 0.0;
      if (v72 <= -INFINITY)
      {
LABEL_11:
        v73 = &v61[v60];
        v74 = v61[v60 - 1] + 0.0;
        if (v74 <= v70)
          goto LABEL_13;
LABEL_12:
        v227[v47] = 3;
        v70 = v74;
        goto LABEL_13;
      }
    }
    else
    {
      v227[v47] = 0;
      v70 = v69 + 1.0;
      v71 = &v61[v59];
      v72 = v61[v59 - 1] + 0.0;
      if (v72 <= (float)(v69 + 1.0))
        goto LABEL_11;
    }
    v227[v47] = 2;
    v70 = v72;
    v73 = &v61[v60];
    v74 = v61[v60 - 1] + 0.0;
    if (v74 > v72)
      goto LABEL_12;
LABEL_13:
    *v61 = v70 + *v61;
    v75 = v61[v33 - 1];
    if ((float)(v75 + 1.0) <= -INFINITY)
      v76 = -INFINITY;
    else
      v76 = v75 + 1.0;
    if (v72 <= v76)
      v77 = v76;
    else
      v77 = v72;
    v64[v47] = 127;
    v78 = (float)(v75 + 1.0) <= -INFINITY && v72 <= v76;
    if (!v78)
    {
      if (v72 <= v76)
        v79 = 1;
      else
        v79 = 2;
      v64[v47] = v79;
    }
    v80 = *(v73 - 1) + 0.0;
    if (v80 > v77)
    {
      v64[v47] = 3;
      v77 = v80;
    }
    v61[v33] = v77 + v61[v33];
    v81 = v69 + 0.0;
    if (v81 <= -INFINITY)
      v82 = 127;
    else
      v82 = 0;
    v83 = fmaxf(v81, -INFINITY);
    if ((float)(v75 + 0.0) > v83)
    {
      v82 = 1;
      v83 = v75 + 0.0;
    }
    v63[v47] = v82;
    v84 = *(v71 - 1) + 1.0;
    v85 = v83;
    if (v84 > v83)
    {
      v63[v47] = 2;
      v85 = v84;
    }
    v61[v59] = v85 + v61[v59];
    v62[v47] = v82;
    v86 = *(v73 - 1) + 1.0;
    if (v86 > v83)
    {
      v62[v47] = 3;
      v83 = v86;
    }
    v61[v60] = v83 + v61[v60];
    ++v47;
    ++v61;
  }
  while (v226 != v47);
  v87 = v226;
  v88 = (v225 - 2);
  v89 = (float *)(*(_QWORD *)&v222 + 4 * v88);
  v90 = v89[v226];
  v91 = v90 > *v89;
  if (v90 <= *v89)
    v92 = 0;
  else
    v92 = v226;
  if (v89[v219] > v89[v92])
    v91 = 2;
  if (v89[v221] <= v89[v226 * (unint64_t)v91])
    v93 = v91;
  else
    v93 = 3;
  v94 = v224;
  v223[v88] = v93;
  v245[0] = 0;
  v245[1] = 0;
  objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)v94 + 5), v51, 0, v87, v52, v53);
  v100 = v99;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  if (v93 >= 2)
    v99 = v98;
  v104 = v99;
  v222 = v98;
  if (v93 >= 2)
    v98 = v100;
  v105 = v98;
  LODWORD(v221) = 0;
  v106 = v88;
  *(float *)&v225 = v99;
  v107 = v105;
  v108 = v99;
  v109 = v220;
  while (2)
  {
    while (1)
    {
      v112 = v227[v223[v88] * v226 + v88];
      v223[--v106] = v112;
      v113 = (void *)*((_QWORD *)v94 + 5);
      if (v112 == v93)
        break;
      objc_msgSend_pointForStrokeIndex_pointIndex_(v113, v95, 0, v88, v96, v97);
      v122 = v121;
      v124 = v123;
      v125 = v222 - v121;
      v126 = v100 - v123;
      if ((char)v93 >= 2)
        v125 = v126;
      if ((v93 & 1) != 0)
        v125 = -v125;
      v127 = v125;
      v128 = v105 - v107;
      v129 = v108 / (float)(v109 - v88);
      if (v102 < v103)
      {
        *v102 = v93;
        *((float *)v102 + 1) = v127;
        *((float *)v102 + 2) = v129;
        *((float *)v102 + 3) = v107;
        *((float *)v102 + 4) = v105;
        *((_DWORD *)v102 + 5) = v225;
        *((float *)v102 + 6) = v104;
        *((float *)v102 + 7) = v128;
        *((_DWORD *)v102 + 8) = v88;
        *((_DWORD *)v102 + 9) = v109;
        v102 += 40;
        v130 = (char)v93;
        if (*((float *)v245 + (char)v93) >= v127)
          goto LABEL_55;
        goto LABEL_54;
      }
      v131 = 0xCCCCCCCCCCCCCCCDLL * ((v102 - (char *)v101) >> 3) + 1;
      if (v131 > 0x666666666666666)
        sub_1BE61F930();
      if (0x999999999999999ALL * ((v103 - (char *)v101) >> 3) > v131)
        v131 = 0x999999999999999ALL * ((v103 - (char *)v101) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v103 - (char *)v101) >> 3) >= 0x333333333333333)
        v132 = 0x666666666666666;
      else
        v132 = v131;
      if (v132)
      {
        if (v132 > 0x666666666666666)
          sub_1BE61F100();
        v133 = (char *)operator new(40 * v132);
      }
      else
      {
        v133 = 0;
      }
      v134 = (float *)&v133[8 * ((v102 - (char *)v101) >> 3)];
      *(_BYTE *)v134 = v93;
      v134[1] = v127;
      v134[2] = v129;
      v134[3] = v107;
      v134[4] = v105;
      *((_DWORD *)v134 + 5) = v225;
      v134[6] = v104;
      v134[7] = v128;
      *((_DWORD *)v134 + 8) = v88;
      *((_DWORD *)v134 + 9) = v109;
      if (v102 == (char *)v101)
      {
        v138 = &v133[8 * ((v102 - (char *)v101) >> 3)];
        v103 = &v133[40 * v132];
        v102 = (char *)(v134 + 10);
        if (v101)
          goto LABEL_92;
      }
      else
      {
        v135 = &v133[8 * ((v102 - (char *)v101) >> 3)];
        do
        {
          v136 = *(_OWORD *)(v102 - 40);
          v137 = *(_OWORD *)(v102 - 24);
          v138 = v135 - 40;
          *((_QWORD *)v135 - 1) = *((_QWORD *)v102 - 1);
          *(_OWORD *)(v135 - 24) = v137;
          *(_OWORD *)(v135 - 40) = v136;
          v102 -= 40;
          v135 -= 40;
        }
        while (v102 != (char *)v101);
        v103 = &v133[40 * v132];
        v102 = (char *)(v134 + 10);
        if (v101)
LABEL_92:
          operator delete(v101);
      }
      v101 = (float *)v138;
      v94 = v224;
      v130 = (char)v93;
      if (*((float *)v245 + (char)v93) >= v127)
        goto LABEL_55;
LABEL_54:
      *((float *)v245 + v130) = v127;
LABEL_55:
      *(float *)&v221 = v127;
      LOBYTE(v93) = v112;
      if ((char)v112 >= 2)
        v110 = v122;
      else
        v110 = v124;
      v108 = v110;
      if ((char)v112 >= 2)
        v111 = v124;
      else
        v111 = v122;
      v222 = v122;
      v100 = v124;
      v107 = v111;
      v109 = v88;
      v105 = v107;
      *(float *)&v225 = v108;
      v104 = v108;
      v78 = v88-- <= 1;
      if (v78)
        goto LABEL_97;
    }
    objc_msgSend_pointForStrokeIndex_pointIndex_(v113, v95, 0, v88, v96, v97);
    if ((char)v93 >= 2)
      v118 = v116;
    else
      v118 = v117;
    v108 = v118 + v108;
    if ((char)v93 >= 2)
      v116 = v117;
    v119 = v116;
    v107 = fminf(v107, v119);
    v105 = fmaxf(v105, v119);
    v120 = v118;
    LODWORD(v225) = fminf(*(float *)&v225, v120);
    v104 = fmaxf(v104, v120);
    v78 = v88-- <= 1;
    if (!v78)
      continue;
    break;
  }
LABEL_97:
  v139 = v105 - v107;
  v140 = v108 / (float)v109;
  if (v102 < v103)
  {
    *v102 = v93;
    *((_DWORD *)v102 + 1) = v221;
    *((float *)v102 + 2) = v140;
    *((float *)v102 + 3) = v107;
    *((float *)v102 + 4) = v105;
    *((_DWORD *)v102 + 5) = v225;
    *((float *)v102 + 6) = v104;
    *((float *)v102 + 7) = v139;
    v141 = (float *)(v102 + 40);
    *((_DWORD *)v102 + 8) = 0;
    *((_DWORD *)v102 + 9) = v109;
    goto LABEL_113;
  }
  v142 = 0xCCCCCCCCCCCCCCCDLL * ((v102 - (char *)v101) >> 3) + 1;
  if (v142 > 0x666666666666666)
    sub_1BE61F930();
  if (0x999999999999999ALL * ((v103 - (char *)v101) >> 3) > v142)
    v142 = 0x999999999999999ALL * ((v103 - (char *)v101) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((v103 - (char *)v101) >> 3) >= 0x333333333333333)
    v142 = 0x666666666666666;
  if (v142)
  {
    if (v142 > 0x666666666666666)
      sub_1BE61F100();
    v143 = (char *)operator new(40 * v142);
  }
  else
  {
    v143 = 0;
  }
  v144 = &v143[8 * ((v102 - (char *)v101) >> 3)];
  *v144 = v93;
  *((_DWORD *)v144 + 1) = v221;
  *((float *)v144 + 2) = v140;
  *((float *)v144 + 3) = v107;
  *((float *)v144 + 4) = v105;
  *((_DWORD *)v144 + 5) = v225;
  *((float *)v144 + 6) = v104;
  *((float *)v144 + 7) = v139;
  *((_DWORD *)v144 + 8) = 0;
  *((_DWORD *)v144 + 9) = v109;
  v141 = (float *)(v144 + 40);
  if (v102 == (char *)v101)
  {
    v147 = &v143[8 * ((v102 - (char *)v101) >> 3)];
    if (v101)
      goto LABEL_111;
  }
  else
  {
    do
    {
      v145 = *(_OWORD *)(v102 - 40);
      v146 = *(_OWORD *)(v102 - 24);
      v147 = v144 - 40;
      *((_QWORD *)v144 - 1) = *((_QWORD *)v102 - 1);
      *(_OWORD *)(v144 - 24) = v146;
      *(_OWORD *)(v144 - 40) = v145;
      v102 -= 40;
      v144 -= 40;
    }
    while (v102 != (char *)v101);
    if (v101)
LABEL_111:
      operator delete(v101);
  }
  v101 = (float *)v147;
LABEL_113:
  objc_msgSend_bounds(*((void **)v94 + 5), v95, v114, v115, v96, v97);
  v242 = 0;
  v243 = 0;
  v244 = 0;
  v157 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v141 - (char *)v101) >> 3);
  if (v157 <= 1)
  {
LABEL_114:
    *((_DWORD *)v94 + 50) = -1082130432;
    objc_msgSend_bounds(*((void **)v94 + 5), v148, v149, v150, v151, v152);
    v159 = v158;
    v161 = v160;
    v163 = v162;
    v165 = v164;
    v166 = operator new();
    *(_QWORD *)v166 = &unk_1E77F0720;
    *(_QWORD *)(v166 + 72) = 0;
    *(_QWORD *)(v166 + 80) = 0;
    *(_QWORD *)(v166 + 64) = 0;
    *(double *)(v166 + 16) = v159;
    *(double *)(v166 + 24) = v161;
    *(_DWORD *)(v166 + 32) = 0;
    *(double *)(v166 + 40) = v159 + v163;
    *(double *)(v166 + 48) = v161 + v165;
    *(_DWORD *)(v166 + 56) = 0;
    *(_DWORD *)(v166 + 8) = 0;
    goto LABEL_115;
  }
  if ((char *)v141 - (char *)v101 == 80)
  {
    if (v101[1] <= 0.0)
      goto LABEL_114;
    if (v101[11] > 0.0)
    {
      *((_DWORD *)v94 + 50) = 0;
      v167 = 0.0;
      if (v101 != v141)
      {
        v168 = v101;
        do
        {
          v167 = v167
               + fmaxf(fminf((float)((float)(v168[1] / (float)((float)(v168[6] - v168[5]) + 1.0)) + -3.0) / 5.0, 1.0), -1.0);
          *((float *)v94 + 50) = v167;
          v168 += 10;
        }
        while (v168 != v141);
      }
      *((float *)v94 + 50) = v167 / (float)v157;
      v169 = *((unsigned __int8 *)v101 + 40);
      v170 = (__int128 *)((char *)v94 + 8);
      if ((char)v169 >= 2)
      {
        v214 = v101[12];
        if (*(_BYTE *)v101 == 1)
          v155 = 0.0;
        *((double *)v94 + 6) = v153 + v155;
        if (v169 == 2)
          v215 = 0.0;
        else
          v215 = v156;
        *((double *)v94 + 1) = v214;
        *((double *)v94 + 2) = v154 + v215;
        v216 = v101[2];
        *((double *)v94 + 7) = v216;
        *(double *)&v241 = v214;
        *((double *)&v241 + 1) = v216;
        sub_1BE891C7C(&v242, &v241);
        v217 = operator new();
        v234 = *v170;
        v235 = *((_QWORD *)v94 + 3);
        v232 = *((_OWORD *)v94 + 3);
        v233 = *((_QWORD *)v94 + 8);
        sub_1BE891D90(v231, (uint64_t)&v242);
        sub_1BE891BD8(v217, &v234, &v232, v231);
        *((_QWORD *)v94 + 24) = v217;
        v175 = v231[0];
        if (v231[0])
        {
          v231[1] = v231[0];
LABEL_189:
          operator delete(v175);
        }
      }
      else
      {
        if (!*((_BYTE *)v101 + 40))
          v155 = 0.0;
        v171 = v101[2];
        *((double *)v94 + 6) = v171;
        *((double *)v94 + 1) = v153 + v155;
        v172 = v101[12];
        *((double *)v94 + 2) = v172;
        if (*(_BYTE *)v101 == 3)
          v173 = 0.0;
        else
          v173 = v156;
        *((double *)v94 + 7) = v154 + v173;
        *(double *)&v241 = v171;
        *((double *)&v241 + 1) = v172;
        sub_1BE891C7C(&v242, &v241);
        v174 = operator new();
        v239 = *v170;
        v240 = *((_QWORD *)v94 + 3);
        v237 = *((_OWORD *)v94 + 3);
        v238 = *((_QWORD *)v94 + 8);
        sub_1BE891D90(v236, (uint64_t)&v242);
        sub_1BE891BD8(v174, &v239, &v237, v236);
        *((_QWORD *)v94 + 24) = v174;
        v175 = v236[0];
        if (v236[0])
        {
          v236[1] = v236[0];
          goto LABEL_189;
        }
      }
      goto LABEL_190;
    }
    *((_DWORD *)v94 + 50) = -1082130432;
    v166 = ManhattanLineRegressor::provideAnAnswer((void **)v94, v148, v149, v150, v151, v152);
LABEL_115:
    *((_QWORD *)v94 + 24) = v166;
    goto LABEL_190;
  }
  *((_DWORD *)v94 + 50) = 0;
  v176 = 0.0;
  if (v101 != v141)
  {
    v177 = v101;
    do
    {
      v176 = v176
           + fmaxf(fminf((float)((float)(v177[1] / (float)((float)(v177[6] - v177[5]) + 1.0)) + -3.0) / 5.0, 1.0), -1.0);
      *((float *)v94 + 50) = v176;
      v177 += 10;
    }
    while (v177 != v141);
  }
  *((float *)v94 + 50) = v176 / (float)v157;
  v178 = *((unsigned __int8 *)v141 - 40);
  if ((char)v178 >= 2)
  {
    v179 = v178 == 2;
    v184 = 0x3FFFFFFFFFFFFFFALL;
    if (v179)
      v184 = 0x3FFFFFFFFFFFFFF9;
    v181 = *(v141 - 8);
    v185 = v141[v184];
    *((double *)v94 + 1) = v181;
    *((double *)v94 + 2) = v185;
    v182 = (char *)v94 + 8;
    if ((int)v157 < 2)
      goto LABEL_137;
  }
  else
  {
    v179 = v178 == 0;
    v180 = 0x3FFFFFFFFFFFFFFALL;
    if (v179)
      v180 = 0x3FFFFFFFFFFFFFF9;
    v181 = *(v141 - 8);
    *((double *)v94 + 1) = v141[v180];
    *((double *)v94 + 2) = v181;
    v182 = (char *)v94 + 8;
    if ((int)v157 < 2)
    {
LABEL_137:
      v183 = 0;
      goto LABEL_172;
    }
  }
  v227 = v182;
  v186 = 0;
  v187 = 0;
  v183 = 0;
  v188 = (v157 - 2);
  while (1)
  {
LABEL_146:
    v189 = v181;
    v190 = &v101[10 * v188];
    v191 = *(char *)v190;
    v181 = v190[2];
    if (v191 >= 2)
      v192 = v189;
    else
      v192 = v190[2];
    if (v191 >= 2)
      v189 = v190[2];
    v193 = v189;
    v194 = v192;
    if (v186 >= v187)
      break;
    *v186 = v193;
    v186[1] = v194;
    v186 += 2;
    v78 = v188-- <= 0;
    if (v78)
      goto LABEL_171;
  }
  v195 = ((char *)v186 - v183) >> 4;
  v196 = v195 + 1;
  if ((unint64_t)(v195 + 1) >> 60)
  {
    v243 = (char *)v186;
    v244 = v187;
    v242 = v183;
    sub_1BE61F930();
  }
  if (((char *)v187 - v183) >> 3 > v196)
    v196 = ((char *)v187 - v183) >> 3;
  if ((unint64_t)((char *)v187 - v183) >= 0x7FFFFFFFFFFFFFF0)
    v197 = 0xFFFFFFFFFFFFFFFLL;
  else
    v197 = v196;
  if (!v197)
  {
    v198 = 0;
    v199 = (double *)(16 * v195);
    *v199 = v193;
    v199[1] = v194;
    if (v186 != (double *)v183)
      goto LABEL_161;
LABEL_169:
    v201 = v199;
    v187 = (double *)&v198[16 * v197];
    v186 = v199 + 2;
    if (v183)
      goto LABEL_164;
    goto LABEL_165;
  }
  if (v197 >> 60)
  {
    v243 = (char *)v186;
    v244 = v187;
    v242 = v183;
    sub_1BE61F100();
  }
  v198 = (char *)operator new(16 * v197);
  v199 = (double *)&v198[16 * v195];
  *v199 = v193;
  v199[1] = v194;
  if (v186 == (double *)v183)
    goto LABEL_169;
LABEL_161:
  v200 = v199;
  do
  {
    v201 = v200 - 2;
    *((_OWORD *)v200 - 1) = *((_OWORD *)v186 - 1);
    v186 -= 2;
    v200 -= 2;
  }
  while (v186 != (double *)v183);
  v187 = (double *)&v198[16 * v197];
  v186 = v199 + 2;
  if (v183)
LABEL_164:
    operator delete(v183);
LABEL_165:
  v183 = (char *)v201;
  v94 = v224;
  v78 = v188-- <= 0;
  if (!v78)
    goto LABEL_146;
LABEL_171:
  v243 = (char *)v186;
  v244 = v187;
  v182 = v227;
LABEL_172:
  v242 = v183;
  if (*(_BYTE *)v101)
    v202 = 12;
  else
    v202 = 16;
  if (*(_BYTE *)v101 == 2)
    v203 = 16;
  else
    v203 = 12;
  v204 = 8;
  if (*(char *)v101 >= 2)
    v205 = 8;
  else
    v205 = v202;
  if (*(char *)v101 >= 2)
    v204 = v203;
  v206 = *(float *)((char *)v101 + v204);
  *((double *)v94 + 6) = *(float *)((char *)v101 + v205);
  *((double *)v94 + 7) = v206;
  v207 = (char *)v94 + 48;
  v208 = operator new();
  v228 = 0;
  v229 = 0;
  v230 = 0;
  v209 = v242;
  v210 = v243 - v242;
  if (v243 == v242)
  {
    v212 = 0;
    v211 = 0;
  }
  else
  {
    if (v210 < 0)
      sub_1BE61F930();
    v211 = (char *)operator new(v243 - v242);
    v212 = &v211[16 * (v210 >> 4)];
    v228 = v211;
    v230 = v212;
    memcpy(v211, v209, v210);
    v229 = v212;
  }
  *(_QWORD *)v208 = &unk_1E77F0720;
  *(_QWORD *)(v208 + 64) = 0;
  *(_QWORD *)(v208 + 72) = 0;
  *(_QWORD *)(v208 + 80) = 0;
  *(_OWORD *)(v208 + 16) = *(_OWORD *)v182;
  *(_DWORD *)(v208 + 32) = *((_DWORD *)v182 + 4);
  *(_OWORD *)(v208 + 40) = *(_OWORD *)v207;
  *(_DWORD *)(v208 + 56) = *((_DWORD *)v207 + 4);
  sub_1BE6F5A88((_QWORD *)(v208 + 64), v211, v212, (v212 - v211) >> 4);
  v213 = v224;
  *(_DWORD *)(v208 + 8) = 1109917696;
  *((_QWORD *)v213 + 24) = v208;
  if (v211)
  {
    v175 = v211;
    goto LABEL_189;
  }
LABEL_190:
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  if (v101)
    operator delete(v101);
}

void sub_1BE891AA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;

  v6 = *(void **)(v1 + 104);
  if (v6)
  {
    *(_QWORD *)(v1 + 112) = v6;
    operator delete(v6);
  }
  MEMORY[0x1C3B812EC](v3, 0x10A1C4053507AA1);
  v7 = *(void **)(v4 - 200);
  if (v7)
  {
    *(_QWORD *)(v4 - 192) = v7;
    operator delete(v7);
    if (!v2)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_5;
  }
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE891BD8(uint64_t a1, __int128 *a2, __int128 *a3, char **a4)
{
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = &unk_1E77F0720;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v5 = *a2;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *a3;
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 40) = v6;
  if ((char **)(a1 + 64) != a4)
    sub_1BE6F5A88((_QWORD *)(a1 + 64), *a4, a4[1], (a4[1] - *a4) >> 4);
  *(_DWORD *)(a1 + 8) = 1109917696;
  return a1;
}

void sub_1BE891C60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE891C7C(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
LABEL_3:
    a1[1] = v6;
    return;
  }
  v7 = *a1;
  v8 = (v5 - *a1) >> 4;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 60)
    sub_1BE61F930();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 3 > v9)
    v9 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 60)
      sub_1BE61F100();
    v12 = (char *)operator new(16 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[16 * v8];
  *(_OWORD *)v13 = *a2;
  v6 = v13 + 16;
  if (v5 != v7)
  {
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
      v13 -= 16;
      v5 -= 16;
    }
    while (v5 != v7);
    v5 = *a1;
  }
  *a1 = v13;
  a1[1] = v6;
  a1[2] = &v12[16 * v11];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v6;
}

_QWORD *sub_1BE891D90(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      sub_1BE61F930();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[16 * (v5 >> 4)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BE891E04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE891E20(void **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    v6 = *a2;
    v7 = a2[1];
    *((_QWORD *)v5 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    v8 = v5 + 40;
LABEL_3:
    a1[1] = v8;
    return;
  }
  v9 = (char *)*a1;
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
  v11 = v10 + 1;
  if (v10 + 1 > 0x666666666666666)
    sub_1BE61F930();
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v9) >> 3);
  if (2 * v12 > v11)
    v11 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 > 0x666666666666666)
      sub_1BE61F100();
    v14 = (char *)operator new(40 * v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = &v14[40 * v10];
  v16 = a2[1];
  *(_OWORD *)v15 = *a2;
  *((_OWORD *)v15 + 1) = v16;
  *((_QWORD *)v15 + 4) = *((_QWORD *)a2 + 4);
  v8 = v15 + 40;
  if (v5 != v9)
  {
    do
    {
      v17 = *(_OWORD *)(v5 - 40);
      v18 = *(_OWORD *)(v5 - 24);
      *(_QWORD *)(v15 - 11) = *(_QWORD *)(v5 - 11);
      *(_OWORD *)(v15 - 24) = v18;
      *(_OWORD *)(v15 - 40) = v17;
      v15 -= 40;
      v5 -= 40;
    }
    while (v5 != v9);
    v5 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = v8;
  a1[2] = &v14[40 * v13];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v8;
}

float ManhattanLineRegressor::confidenceScoreVersusFreeform(ManhattanLineRegressor *this)
{
  return *((float *)this + 50);
}

_QWORD *sub_1BE891F80(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  size_t v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_23;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_23:
      sub_1BE61F930();
    v13 = 5 * v12;
    result = operator new(40 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 3);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = v14 - 3;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 3);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v14 - 3;
    v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_1BE893AB4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893ACC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893AE4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893AFC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893B14(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893B2C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893B44(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893B5C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893B74(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893B8C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893BA4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893BBC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893BD4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893BEC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4A0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE893C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x310], 8);
  _Block_object_dispose(&STACK[0x330], 8);
  _Block_object_dispose(&STACK[0x360], 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE893C44(double a1)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v2 = off_1EF568480;
  v8 = off_1EF568480;
  if (off_1EF568480)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EF568488)
  {
    v2 = (void *)qword_1EF568488;
  }
  else
  {
    v10 = xmmword_1E77F6628;
    v11 = 0;
    qword_1EF568488 = _sl_dlopen();
    v3 = v9;
    v2 = (void *)qword_1EF568488;
    if (!qword_1EF568488)
    {
      v3 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v2 = dlsym(v2, "CTFontCreateWithName");
    v6[3] = (uint64_t)v2;
    off_1EF568480 = v2;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v2)
      break;
    dlerror();
    v3 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v3);
  }
  return ((uint64_t (*)(const __CFString *, _QWORD, double))v2)(CFSTR("Helvetica-Bold"), 0, a1);
}

void sub_1BE893D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE893DB0(uint64_t a1, double a2, double a3)
{
  float64x2_t v4;
  uint64_t v5;
  double MaxX;
  double MaxY;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v26;

  v4 = vaddq_f64(*(float64x2_t *)(a1 + 96), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 80), a3), *(float64x2_t *)(a1 + 64), a2));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v26 = v4;
    MaxX = CGRectGetMaxX(*(CGRect *)(v5 + 32));
    MaxY = CGRectGetMaxY(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32));
    v4 = v26;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(double *)(v8 + 32);
    if (v9 >= v26.f64[0])
      v9 = v26.f64[0];
    *(double *)(v8 + 32) = v9;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(double *)(v10 + 40);
    if (v11 >= v26.f64[1])
      v11 = v26.f64[1];
    *(double *)(v10 + 40) = v11;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(double *)(v12 + 32);
    v14 = MaxX - v13;
    v15 = v26.f64[0] - v13;
    if (v14 > v15)
      v15 = v14;
    *(double *)(v12 + 48) = v15;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v17 = *(double *)(v16 + 40);
    v18 = MaxY - v17;
    v19 = v26.f64[1] - v17;
    if (v18 <= v19)
      v18 = v19;
    *(double *)(v16 + 56) = v18;
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                            + 24)
                                                                + sqrt((v26.f64[1]- *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)+ 40))* (v26.f64[1]- *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)+ 40))+ (v26.f64[0]- *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)+ 32))* (v26.f64[0]- *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)+ 32)));
  }
  else
  {
    __asm
    {
      FMOV            V0.2D, #-0.5
      FMOV            V1.2D, #1.0
    }
    *(float64x2_t *)(v5 + 32) = vaddq_f64(v4, _Q0);
    *(_OWORD *)(v5 + 48) = _Q1;
  }
  *(float64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32) = v4;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void BezierLineRegressor::BezierLineRegressor(BezierLineRegressor *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 252) = xmmword_1BE8E09A0;
}

{
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 252) = xmmword_1BE8E09A0;
}

double BezierLineRegressor::init(BezierLineRegressor *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double *v24;
  unint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  double v31;
  double *v32;
  double v33;
  float v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t i;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double *v43;
  uint64_t v44;
  double result;

  *((_QWORD *)this + 2) = objc_msgSend_pointCountForStrokeIndex_(*((void **)this + 1), a2, 0, a4, a5, a6);
  *((_QWORD *)this + 3) = operator new[]();
  *((_QWORD *)this + 4) = operator new[]();
  *((_QWORD *)this + 5) = operator new[]();
  v7 = operator new[]();
  v8 = *((_QWORD *)this + 4);
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 6) = v7;
  *((_QWORD *)this + 7) = v8 + 24 * v9;
  *((_QWORD *)this + 8) = v8 + 16 * v9;
  *((_QWORD *)this + 9) = v8 + 8 * v9;
  *((_QWORD *)this + 10) = v8;
  *((_QWORD *)this + 28) = operator new[]();
  *((_QWORD *)this + 75) = operator new[]();
  *((_QWORD *)this + 11) = operator new[]();
  **((_QWORD **)this + 11) = operator new[]();
  *(_QWORD *)(*((_QWORD *)this + 11) + 8) = operator new[]();
  *(_QWORD *)(*((_QWORD *)this + 11) + 16) = operator new[]();
  *(_QWORD *)(*((_QWORD *)this + 11) + 24) = operator new[]();
  *((_QWORD *)this + 12) = operator new[]();
  **((_QWORD **)this + 12) = operator new[]();
  *(_QWORD *)(*((_QWORD *)this + 12) + 8) = operator new[]();
  *(_QWORD *)(*((_QWORD *)this + 12) + 16) = operator new[]();
  *(_QWORD *)(*((_QWORD *)this + 12) + 24) = operator new[]();
  *((_QWORD *)this + 13) = operator new[]();
  **((_QWORD **)this + 13) = operator new[]();
  *(_QWORD *)(*((_QWORD *)this + 13) + 8) = operator new[]();
  *(_QWORD *)(*((_QWORD *)this + 13) + 16) = operator new[]();
  *(_QWORD *)(*((_QWORD *)this + 13) + 24) = operator new[]();
  **((_QWORD **)this + 3) = 0;
  v11 = (_QWORD *)*((_QWORD *)this + 9);
  v10 = (_QWORD *)*((_QWORD *)this + 10);
  *v10 = 0;
  *v11 = 0;
  v13 = (_QWORD *)*((_QWORD *)this + 7);
  v12 = (_QWORD *)*((_QWORD *)this + 8);
  *v12 = 0;
  v14 = (void *)*((_QWORD *)this + 1);
  v15 = 8 * *((_QWORD *)this + 2) - 8;
  *(_QWORD *)((char *)v10 + v15) = 0x3FF0000000000000;
  *(_QWORD *)((char *)v11 + v15) = 0x3FF0000000000000;
  *(_QWORD *)((char *)v12 + v15) = 0x3FF0000000000000;
  *v13 = 0x3FF0000000000000;
  objc_msgSend_pointForStrokeIndex_pointIndex_(v14, v16, 0, 0, v17, v18);
  v24 = (double *)*((_QWORD *)this + 5);
  *v24 = v22;
  v24[1] = v23;
  v25 = *((_QWORD *)this + 2);
  if (v25 >= 2)
  {
    v26 = v22;
    v27 = v23;
    v28 = 0;
    v29 = 0.0;
    v30 = 1;
    do
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(*((void **)this + 1), v19, 0, v30, v20, v21);
      v24 = (double *)*((_QWORD *)this + 5);
      v32 = &v24[v28];
      v34 = (v33 - v27) * (v33 - v27) + (v31 - v26) * (v31 - v26);
      v32[2] = v31;
      v32[3] = v33;
      v35 = sqrtf(v34);
      v25 = *((_QWORD *)this + 2);
      v36 = *((_QWORD *)this + 3);
      *(double *)(v36 + 8 * v30++) = v35;
      v29 = v29 + v35;
      v28 += 2;
      v27 = v33;
      v26 = v31;
    }
    while (v30 < v25);
    if (v25 >= 2)
    {
      v37 = *((_QWORD *)this + 7);
      v38 = 0.0;
      for (i = 1; i != v25; ++i)
      {
        v40 = 8 * i;
        v38 = v38 + *(double *)(v36 + 8 * i);
        *(double *)(v36 + v40) = v38 / v29;
        *(_QWORD *)(v37 + v40) = 0x3FF0000000000000;
      }
    }
  }
  v41 = *v24;
  *((double *)this + 20) = *v24;
  *((double *)this + 14) = v41;
  v42 = *((_QWORD *)v24 + 1);
  *((_QWORD *)this + 21) = v42;
  *((_QWORD *)this + 15) = v42;
  v43 = &v24[2 * v25];
  v44 = *((_QWORD *)v43 - 2);
  *((_QWORD *)this + 26) = v44;
  *((_QWORD *)this + 18) = v44;
  result = *(v43 - 1);
  *((double *)this + 27) = result;
  *((double *)this + 19) = result;
  return result;
}

void BezierLineRegressor::~BezierLineRegressor(BezierLineRegressor *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = **((_QWORD **)this + 11);
  if (v2)
    MEMORY[0x1C3B812C8](v2, 0x1000C8000313F17);
  v3 = **((_QWORD **)this + 13);
  if (v3)
    MEMORY[0x1C3B812C8](v3, 0x1000C8077774924);
  v4 = **((_QWORD **)this + 12);
  if (v4)
    MEMORY[0x1C3B812C8](v4, 0x1000C8000313F17);
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (v5)
    MEMORY[0x1C3B812C8](v5, 0x1000C8000313F17);
  v6 = *(_QWORD *)(*((_QWORD *)this + 13) + 8);
  if (v6)
    MEMORY[0x1C3B812C8](v6, 0x1000C8077774924);
  v7 = *(_QWORD *)(*((_QWORD *)this + 12) + 8);
  if (v7)
    MEMORY[0x1C3B812C8](v7, 0x1000C8000313F17);
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
  if (v8)
    MEMORY[0x1C3B812C8](v8, 0x1000C8000313F17);
  v9 = *(_QWORD *)(*((_QWORD *)this + 13) + 16);
  if (v9)
    MEMORY[0x1C3B812C8](v9, 0x1000C8077774924);
  v10 = *(_QWORD *)(*((_QWORD *)this + 12) + 16);
  if (v10)
    MEMORY[0x1C3B812C8](v10, 0x1000C8000313F17);
  v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if (v11)
    MEMORY[0x1C3B812C8](v11, 0x1000C8000313F17);
  v12 = *(_QWORD *)(*((_QWORD *)this + 13) + 24);
  if (v12)
    MEMORY[0x1C3B812C8](v12, 0x1000C8077774924);
  v13 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  if (v13)
    MEMORY[0x1C3B812C8](v13, 0x1000C8000313F17);
  v14 = *((_QWORD *)this + 11);
  if (v14)
    MEMORY[0x1C3B812C8](v14, 0x80C80B8603338);
  v15 = *((_QWORD *)this + 13);
  if (v15)
    MEMORY[0x1C3B812C8](v15, 0x10C80436913F5);
  v16 = *((_QWORD *)this + 12);
  if (v16)
    MEMORY[0x1C3B812C8](v16, 0x80C80B8603338);
  v17 = *((_QWORD *)this + 3);
  if (v17)
    MEMORY[0x1C3B812C8](v17, 0x1000C8000313F17);
  v18 = *((_QWORD *)this + 75);
  if (v18)
    MEMORY[0x1C3B812C8](v18, 0x1000C8000313F17);
  v19 = *((_QWORD *)this + 6);
  if (v19)
    MEMORY[0x1C3B812C8](v19, 0x1000C8000313F17);
  v20 = *((_QWORD *)this + 4);
  if (v20)
    MEMORY[0x1C3B812C8](v20, 0x1000C8000313F17);
  v21 = *((_QWORD *)this + 28);
  if (v21)
    MEMORY[0x1C3B812C8](v21, 0x1000C8000313F17);
  v22 = *((_QWORD *)this + 5);
  if (v22)
    MEMORY[0x1C3B812C8](v22, 0x1000C8000313F17);

}

uint64_t BezierLineRegressor::BezierLineRegressor(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  float64_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  double v31;
  uint64_t *v32;
  double x;
  double y;
  double Error;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  double v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float64x2_t *v77;
  float64x2_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  int v91;
  id v92;
  double v93;
  double v94;
  double v95;
  double v96;
  int v97;
  int v98;
  double v99;
  double v100;
  CGPoint v101;
  CGPoint v102;

  v92 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 252) = xmmword_1BE8E09A0;
  *(_QWORD *)a1 = a5;
  objc_storeStrong((id *)(a1 + 8), a3);
  BezierLineRegressor::init((BezierLineRegressor *)a1, v10, v11, v12, v13, v14);
  v15 = (uint64_t *)operator new(0x78uLL);
  v97 = *(_DWORD *)(a4 + 16);
  v98 = *(_DWORD *)(a2 + 16);
  objc_msgSend_pointForStrokeIndex_pointIndex_(v92, v16, 0, 0, v17, v18);
  v99 = v20;
  v100 = v19;
  objc_msgSend_pointForStrokeIndex_pointIndex_(v92, v21, 0, *(_QWORD *)(a1 + 16) - 1, v22, v23);
  v24 = 0;
  v25 = 0;
  v26 = v15 + 15;
  v27 = v30.f64[0];
  v95 = v30.f64[0] * 0.25;
  v96 = v100 * 0.25;
  v29 = v28;
  v30.f64[0] = v28 * 0.25;
  v93 = v28 * 0.25;
  v94 = v99 * 0.25;
  v31 = 1.0e20;
  v32 = v15;
  while (2)
  {
    BezierLineRegressor::timeEstimation((BezierLineRegressor *)a1, (char)v25, v30);
    v101.x = BezierLineRegressor::controlPointEstimation((BezierLineRegressor *)a1);
    x = v101.x;
    y = v101.y;
    v91 = v25;
    Error = BezierLineRegressor::getError((BezierLineRegressor *)a1, v101);
    v36 = operator new();
    v37 = v36;
    *(_QWORD *)v36 = &unk_1E77F06C8;
    *(double *)(v36 + 16) = v100;
    *(double *)(v36 + 24) = v99;
    *(_DWORD *)(v36 + 32) = v98;
    v38 = Error;
    *(float64_t *)(v36 + 40) = v27;
    *(double *)(v36 + 48) = v29;
    *(_DWORD *)(v36 + 56) = v97;
    *(double *)(v36 + 64) = x;
    *(double *)(v36 + 72) = y;
    *(double *)(v36 + 80) = v95 + v96 + x * 0.5;
    *(double *)(v36 + 88) = v93 + v94 + y * 0.5;
    *(double *)(v36 + 96) = x;
    *(double *)(v36 + 104) = y;
    *(double *)(v36 + 112) = x;
    *(double *)(v36 + 120) = y;
    *(float *)(v36 + 8) = v38;
    if (v32 >= v26)
    {
      v40 = v32 - v15;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61)
        sub_1BE61F930();
      if (((char *)v26 - (char *)v15) >> 2 > v41)
        v41 = ((char *)v26 - (char *)v15) >> 2;
      if ((unint64_t)((char *)v26 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
      {
        if (v42 >> 61)
          sub_1BE61F100();
        v43 = operator new(8 * v42);
        v44 = (uint64_t *)&v43[8 * v40];
        v26 = (uint64_t *)&v43[8 * v42];
        *v44 = v37;
        v39 = (uint64_t)(v44 + 1);
        v45 = (char *)v32 - (char *)v15;
        if (v32 == v15)
          goto LABEL_20;
      }
      else
      {
        v43 = 0;
        v44 = (uint64_t *)(8 * v40);
        v26 = 0;
        *(_QWORD *)(8 * v40) = v37;
        v39 = 8 * v40 + 8;
        v45 = (char *)v32 - (char *)v15;
        if (v32 == v15)
          goto LABEL_20;
      }
      v46 = v45 - 8;
      if (v46 >= 0x168)
      {
        v80 = ((char *)(v32 - 1) - (char *)v15) & 0xFFFFFFFFFFFFFFF8;
        if (&v43[(char *)v32 - (char *)v15 - 8 - v80] > &v43[(char *)v32 - (char *)v15 - 8])
        {
          v47 = v32;
        }
        else if ((uint64_t *)((char *)v32 - v80 - 8) > v32 - 1)
        {
          v47 = v32;
        }
        else if ((unint64_t)((char *)v15 - v43) >= 0x20)
        {
          v81 = (v46 >> 3) + 1;
          v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
          v47 = &v32[v82 / 0xFFFFFFFFFFFFFFF8];
          v44 = (uint64_t *)((char *)v44 - v82);
          v83 = &v43[8 * v40 - 16];
          v84 = v32 - 2;
          v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v86 = *(_OWORD *)v84;
            *(v83 - 1) = *((_OWORD *)v84 - 1);
            *v83 = v86;
            v83 -= 2;
            v84 -= 4;
            v85 -= 4;
          }
          while (v85);
          if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_19:
            if (!v15)
            {
LABEL_21:
              v15 = v44;
              goto LABEL_22;
            }
LABEL_20:
            operator delete(v15);
            goto LABEL_21;
          }
        }
        else
        {
          v47 = v32;
        }
      }
      else
      {
        v47 = v32;
      }
      do
      {
        v48 = *--v47;
        *--v44 = v48;
      }
      while (v47 != v15);
      goto LABEL_19;
    }
    *v32 = v36;
    v39 = (uint64_t)(v32 + 1);
LABEL_22:
    if (Error < v31)
    {
      v24 = ((v39 - (uint64_t)v15) >> 3) - 1;
      v31 = Error;
    }
    v49 = 1;
    v32 = (uint64_t *)v39;
    do
    {
      v51 = v49;
      v102.x = x;
      v102.y = y;
      BezierLineRegressor::timeEstimation((BezierLineRegressor *)a1, v102);
      x = BezierLineRegressor::controlPointEstimation((BezierLineRegressor *)a1);
      y = v52;
      v53 = *(_QWORD *)(a1 + 16);
      v54 = *(_QWORD **)(a1 + 40);
      *(_QWORD *)(a1 + 112) = *v54;
      *(_QWORD *)(a1 + 120) = v54[1];
      *(double *)(a1 + 128) = x;
      *(double *)(a1 + 136) = v52;
      v55 = &v54[2 * v53];
      *(_QWORD *)(a1 + 144) = *(v55 - 2);
      *(_QWORD *)(a1 + 152) = *(v55 - 1);
      cblas_dgemm_NEWLAPACK();
      cblas_dgemm_NEWLAPACK();
      cblas_daxpy_NEWLAPACK();
      cblas_ddot_NEWLAPACK();
      v57 = v56;
      cblas_ddot_NEWLAPACK();
      v59 = v58;
      v60 = operator new();
      v61 = v60;
      v62 = (v57 + v59) / (double)(int)v53;
      v30.f64[0] = v95 + v96 + x * 0.5;
      *(_QWORD *)v60 = &unk_1E77F06C8;
      *(double *)(v60 + 16) = v100;
      *(double *)(v60 + 24) = v99;
      *(_DWORD *)(v60 + 32) = v98;
      *(float64_t *)(v60 + 40) = v27;
      *(double *)(v60 + 48) = v29;
      *(_DWORD *)(v60 + 56) = v97;
      *(double *)(v60 + 64) = x;
      *(double *)(v60 + 72) = y;
      *(float64_t *)(v60 + 80) = v30.f64[0];
      *(double *)(v60 + 88) = v93 + v94 + y * 0.5;
      *(double *)(v60 + 96) = x;
      *(double *)(v60 + 104) = y;
      *(float *)v30.f64 = v62;
      *(double *)(v60 + 112) = x;
      *(double *)(v60 + 120) = y;
      *(_DWORD *)(v60 + 8) = LODWORD(v30.f64[0]);
      if (v32 < v26)
      {
        *v32++ = v60;
        goto LABEL_26;
      }
      v63 = v32 - v15;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61)
        sub_1BE61F930();
      if (((char *)v26 - (char *)v15) >> 2 > v64)
        v64 = ((char *)v26 - (char *)v15) >> 2;
      if ((unint64_t)((char *)v26 - (char *)v15) >= 0x7FFFFFFFFFFFFFF8)
        v65 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v65 = v64;
      if (v65)
      {
        if (v65 >> 61)
          sub_1BE61F100();
        v66 = operator new(8 * v65);
        v67 = (uint64_t *)&v66[8 * v63];
        v68 = &v66[8 * v65];
        *v67 = v61;
        v69 = (uint64_t)(v67 + 1);
        v70 = (char *)v32 - (char *)v15;
        if (v32 != v15)
        {
LABEL_39:
          v71 = v70 - 8;
          if (v71 < 0x168
            || (v74 = ((char *)(v32 - 1) - (char *)v15) & 0xFFFFFFFFFFFFFFF8,
                &v66[(char *)v32 - (char *)v15 - 8 - v74] > &v66[(char *)v32 - (char *)v15 - 8])
            || (uint64_t *)((char *)v32 - v74 - 8) > v32 - 1
            || (unint64_t)((char *)v15 - v66) < 0x20)
          {
            v72 = v32;
            v26 = (uint64_t *)v68;
          }
          else
          {
            v75 = (v71 >> 3) + 1;
            v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
            v72 = &v32[v76 / 0xFFFFFFFFFFFFFFF8];
            v67 = (uint64_t *)((char *)v67 - v76);
            v77 = (float64x2_t *)&v66[8 * v63 - 16];
            v78 = (float64x2_t *)(v32 - 2);
            v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
            v26 = (uint64_t *)v68;
            do
            {
              v30 = *v78;
              v77[-1] = v78[-1];
              *v77 = v30;
              v77 -= 2;
              v78 -= 2;
              v79 -= 4;
            }
            while (v79);
            if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_42:
              if (!v15)
                goto LABEL_47;
              goto LABEL_46;
            }
          }
          do
          {
            v73 = *--v72;
            *--v67 = v73;
          }
          while (v72 != v15);
          goto LABEL_42;
        }
      }
      else
      {
        v66 = 0;
        v67 = (uint64_t *)(8 * v63);
        v68 = 0;
        *(_QWORD *)(8 * v63) = v61;
        v69 = 8 * v63 + 8;
        v70 = (char *)v32 - (char *)v15;
        if (v32 != v15)
          goto LABEL_39;
      }
      v26 = (uint64_t *)v68;
LABEL_46:
      operator delete(v15);
LABEL_47:
      v15 = v67;
      v32 = (uint64_t *)v69;
LABEL_26:
      v49 = 0;
      v50 = v32 - v15;
      if (v62 < v31)
      {
        v24 = v50 - 1;
        v31 = v62;
      }
    }
    while ((v51 & 1) != 0);
    v25 = v91 + 1;
    if (v91 != 4)
      continue;
    break;
  }
  if (v32 == v15)
  {
    if (v15)
      goto LABEL_76;
  }
  else
  {
    if (v50 <= 1)
      v87 = 1;
    else
      v87 = v32 - v15;
    v88 = v24;
    v89 = v15;
    do
    {
      if (v88)
      {
        if (*v89)
          MEMORY[0x1C3B812EC](*v89, 0x1081C404124EDEBLL);
      }
      else
      {
        *(_QWORD *)(a1 + 608) = v15[v24];
      }
      ++v89;
      --v88;
      --v87;
    }
    while (v87);
LABEL_76:
    operator delete(v15);
  }

  return a1;
}

void sub_1BE894E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  void *v18;

  operator delete(v18);

  _Unwind_Resume(a1);
}

float64_t BezierLineRegressor::timeEstimation(BezierLineRegressor *this, int a2, float64x2_t _Q0)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float64x2_t *v20;
  unint64_t v21;
  float64x2_t v22;
  uint64_t v23;
  double *v24;
  float64x2_t *v25;
  unint64_t v29;
  float64x2_t v30;
  uint64_t v31;
  double *v32;
  float64x2_t *v33;
  unint64_t v34;
  float64x2_t v35;
  uint64_t v36;
  double *v37;
  float64x2_t *v38;
  unint64_t v39;
  float64x2_t v40;
  uint64_t v41;
  double *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v54;
  BOOL v56;
  BOOL v57;
  unint64_t v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t *v61;
  unint64_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  double *v70;
  double *v71;
  double v72;
  double v73;

  switch(a2)
  {
    case 0:
      memcpy((void *)(*((_QWORD *)this + 8) + 8), (const void *)(*((_QWORD *)this + 3) + 8), 8 * *((_QWORD *)this + 2) - 16);
      goto LABEL_38;
    case 1:
      memcpy((void *)(*((_QWORD *)this + 8) + 8), (const void *)(*((_QWORD *)this + 3) + 8), 8 * *((_QWORD *)this + 2) - 16);
      v4 = *((_QWORD *)this + 2);
      if ((unint64_t)(v4 - 1) < 2)
        goto LABEL_38;
      v5 = *((_QWORD *)this + 8);
      v6 = v4 - 2;
      if ((unint64_t)(v4 - 2) < 4)
      {
        v7 = 1;
LABEL_18:
        v23 = ~v7 + v4;
        v24 = (double *)(v5 + 8 * v7);
        do
        {
          _Q0.f64[0] = sqrt(*v24);
          *v24++ = _Q0.f64[0];
          --v23;
        }
        while (v23);
        goto LABEL_38;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v20 = (float64x2_t *)(v5 + 24);
      v21 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        _Q0 = vsqrtq_f64(v20[-1]);
        v22 = vsqrtq_f64(*v20);
        v20[-1] = _Q0;
        *v20 = v22;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v6 != (v6 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_18;
      goto LABEL_38;
    case 2:
      memcpy((void *)(*((_QWORD *)this + 8) + 8), (const void *)(*((_QWORD *)this + 3) + 8), 8 * *((_QWORD *)this + 2) - 16);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)(v8 - 1) < 2)
        goto LABEL_38;
      v9 = *((_QWORD *)this + 8);
      v10 = v8 - 2;
      if ((unint64_t)(v8 - 2) < 4)
      {
        v11 = 1;
LABEL_24:
        v31 = ~v11 + v8;
        v32 = (double *)(v9 + 8 * v11);
        _Q0.f64[0] = 0.5;
        do
        {
          *v32 = sqrt(*v32) * 0.5 + *v32 * 0.5;
          ++v32;
          --v31;
        }
        while (v31);
        goto LABEL_38;
      }
      v11 = v10 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v25 = (float64x2_t *)(v9 + 24);
      __asm { FMOV            V0.2D, #0.5 }
      v29 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v30 = vmlaq_f64(vmulq_f64(vsqrtq_f64(*v25), _Q0), _Q0, *v25);
        v25[-1] = vmlaq_f64(vmulq_f64(vsqrtq_f64(v25[-1]), _Q0), _Q0, v25[-1]);
        *v25 = v30;
        v25 += 2;
        v29 -= 4;
      }
      while (v29);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_24;
      goto LABEL_38;
    case 3:
      memcpy((void *)(*((_QWORD *)this + 8) + 8), (const void *)(*((_QWORD *)this + 3) + 8), 8 * *((_QWORD *)this + 2) - 16);
      v12 = *((_QWORD *)this + 2);
      if ((unint64_t)(v12 - 1) < 2)
        goto LABEL_38;
      v13 = *((_QWORD *)this + 8);
      v14 = v12 - 2;
      if ((unint64_t)(v12 - 2) < 4)
      {
        v15 = 1;
LABEL_30:
        v36 = ~v15 + v12;
        v37 = (double *)(v13 + 8 * v15);
        do
        {
          _Q0.f64[0] = *v37 * *v37;
          *v37++ = _Q0.f64[0];
          --v36;
        }
        while (v36);
        goto LABEL_38;
      }
      v15 = v14 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v33 = (float64x2_t *)(v13 + 24);
      v34 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        _Q0 = vmulq_f64(v33[-1], v33[-1]);
        v35 = vmulq_f64(*v33, *v33);
        v33[-1] = _Q0;
        *v33 = v35;
        v33 += 2;
        v34 -= 4;
      }
      while (v34);
      if (v14 != (v14 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_30;
      goto LABEL_38;
    case 4:
      memcpy((void *)(*((_QWORD *)this + 8) + 8), (const void *)(*((_QWORD *)this + 3) + 8), 8 * *((_QWORD *)this + 2) - 16);
      v16 = *((_QWORD *)this + 2);
      if ((unint64_t)(v16 - 1) < 2)
        goto LABEL_38;
      v17 = *((_QWORD *)this + 8);
      v18 = v16 - 2;
      if ((unint64_t)(v16 - 2) < 4)
      {
        v19 = 1;
LABEL_36:
        v41 = ~v19 + v16;
        v42 = (double *)(v17 + 8 * v19);
        _Q0.f64[0] = 0.5;
        do
        {
          *v42 = *v42 * (*v42 * 0.5) + *v42 * 0.5;
          ++v42;
          --v41;
        }
        while (v41);
        goto LABEL_38;
      }
      v19 = v18 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v38 = (float64x2_t *)(v17 + 24);
      __asm { FMOV            V0.2D, #0.5 }
      v39 = v18 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v40 = vmlaq_f64(vmulq_f64(*v38, vmulq_f64(*v38, _Q0)), _Q0, *v38);
        v38[-1] = vmlaq_f64(vmulq_f64(v38[-1], vmulq_f64(v38[-1], _Q0)), _Q0, v38[-1]);
        *v38 = v40;
        v38 += 2;
        v39 -= 4;
      }
      while (v39);
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_36;
LABEL_38:
      v43 = *((_QWORD *)this + 2);
      if (v43 < 2)
        return _Q0.f64[0];
      v44 = *((_QWORD *)this + 8);
      v45 = *((_QWORD *)this + 9);
      v46 = *((_QWORD *)this + 10);
      if (v43 < 0xB)
      {
        v47 = 1;
LABEL_63:
        v67 = v43 - v47;
        v68 = 8 * v47;
        v69 = (_QWORD *)(v46 + v68);
        v70 = (double *)(v45 + v68);
        v71 = (double *)(v44 + v68);
        do
        {
          v72 = *v71 * *v71;
          *v70++ = v72;
          v73 = *v71++;
          _Q0.f64[0] = v72 * v73;
          *v69++ = *(_QWORD *)&_Q0.f64[0];
          --v67;
        }
        while (v67);
        return _Q0.f64[0];
      }
      v48 = v45 + 8 * v43;
      v49 = v46 + 8;
      v50 = v46 + 8 * v43;
      v51 = v44 + 8;
      v52 = v44 + 8 * v43;
      v54 = v45 + 8 < v52 && v51 < v48;
      v56 = v49 < v52 && v51 < v50;
      v57 = v49 >= v48 || v45 + 8 >= v50;
      v47 = 1;
      if (!v57)
        goto LABEL_63;
      if (v54)
        goto LABEL_63;
      if (v56)
        goto LABEL_63;
      v58 = (v43 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v47 = v58 | 1;
      v59 = (float64x2_t *)(v44 + 24);
      v60 = (float64x2_t *)(v45 + 24);
      v61 = (float64x2_t *)(v46 + 24);
      v62 = v58;
      do
      {
        v63 = v59[-1];
        v64 = *v59;
        v65 = vmulq_f64(v63, v63);
        v66 = vmulq_f64(v64, v64);
        v60[-1] = v65;
        *v60 = v66;
        _Q0 = vmulq_f64(v65, v63);
        v61[-1] = _Q0;
        *v61 = vmulq_f64(v66, v64);
        v59 += 2;
        v60 += 2;
        v61 += 2;
        v62 -= 4;
      }
      while (v62);
      if (v43 - 1 != v58)
        goto LABEL_63;
      return _Q0.f64[0];
    default:
      goto LABEL_38;
  }
}

double BezierLineRegressor::controlPointEstimation(BezierLineRegressor *this)
{
  __int128 v2;

  cblas_dgemm_NEWLAPACK();
  *((_OWORD *)this + 25) = *((_OWORD *)this + 32);
  *((_QWORD *)this + 52) = *((_QWORD *)this + 66);
  *(_OWORD *)((char *)this + 424) = *((_OWORD *)this + 34);
  *((_QWORD *)this + 55) = *((_QWORD *)this + 70);
  v2 = *((_OWORD *)this + 36);
  *((_QWORD *)this + 58) = *((_QWORD *)this + 74);
  *((_OWORD *)this + 28) = v2;
  dgetrf_NEWLAPACK();
  dgetri_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  dgetrf_NEWLAPACK();
  dgetri_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  return *((double *)this + 16);
}

double BezierLineRegressor::getError(BezierLineRegressor *this, CGPoint a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  double v5;
  double v6;
  double v7;

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 14) = *v2;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 15) = v2[1];
  *((CGPoint *)this + 8) = a2;
  v4 = &v2[2 * v3];
  *((_QWORD *)this + 18) = *(v4 - 2);
  *((_QWORD *)this + 19) = *(v4 - 1);
  cblas_dgemm_NEWLAPACK();
  cblas_dgemm_NEWLAPACK();
  cblas_daxpy_NEWLAPACK();
  cblas_ddot_NEWLAPACK();
  v6 = v5;
  cblas_ddot_NEWLAPACK();
  return (v6 + v7) / (double)(int)v3;
}

void BezierLineRegressor::timeEstimation(BezierLineRegressor *this, CGPoint a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  CGFloat v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  double *v25;
  float v26;
  double v27;
  float v28;
  double v29;
  _QWORD *v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  char v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  char v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  char v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  unint64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  unsigned int v106;
  double v107;
  double v108;
  _QWORD *v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  BOOL v125;
  BOOL v127;
  BOOL v128;
  float64x2_t *v129;
  float64x2_t *v130;
  float64x2_t *v131;
  unint64_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  unint64_t v137;
  uint64_t v138;
  double *v139;
  double *v140;
  double *v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;

  v4 = (_QWORD *)*((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12);
  v5 = (_QWORD *)*v4;
  v6 = (_QWORD *)v4[1];
  *(_QWORD *)*v4 = 0;
  v7 = *(_QWORD **)(v3 + 8);
  **(_QWORD **)v3 = 0;
  *v6 = 0;
  *v7 = 0;
  v8 = (_QWORD *)v4[2];
  v9 = (_QWORD *)v4[3];
  *v8 = 0;
  v11 = *(_QWORD **)(v3 + 16);
  v10 = *(_QWORD **)(v3 + 24);
  *v11 = 0;
  *v9 = 0;
  *v10 = 0;
  v12 = *((_QWORD *)this + 2);
  if (v12 < 2)
    goto LABEL_55;
  v13 = 0;
  v14 = (double *)*((_QWORD *)this + 5);
  v15 = v14[1];
  v16 = a2.x + a2.x + *v14 * -2.0;
  v17 = a2.y + a2.y + v15 * -2.0;
  v18 = &v14[2 * v12];
  v19 = v15 + a2.y * -2.0 + *(v18 - 1);
  v20 = *v14 + a2.x * -2.0 + *(v18 - 2);
  v145 = v19 * -4.0;
  v146 = v20 * -4.0;
  v147 = v16;
  v21 = v20 + v20;
  v144 = -v16;
  v22 = v19 + v19;
  v23 = 1;
  v24 = 8;
  do
  {
    v25 = (double *)*((_QWORD *)this + 5);
    v26 = fmax(v146 * (*v25 - v25[v13 + 2]) + v147 * v147, 0.0);
    v27 = sqrtf(v26);
    v28 = fmax(v145 * (v25[1] - v25[v13 + 3]) + v17 * v17, 0.0);
    v29 = sqrtf(v28);
    v30 = (_QWORD *)*((_QWORD *)this + 12);
    v31 = v30[1];
    v32 = (double *)(*v30 + v24);
    *v32 = (v144 - v27) / v21;
    *(double *)(v31 + v24) = (v27 - v147) / v21;
    v34 = v30[2];
    v33 = v30[3];
    *(double *)(v34 + v24) = (-v17 - v29) / v22;
    *(double *)(v33 + v24) = (v29 - v17) / v22;
    v35 = *(v32 - 1);
    v36 = *v32;
    v37 = 1.0e20;
    if (*v32 > v35 + -0.1)
    {
      v38 = *(double *)(*v4 + v24 - 8);
      v37 = v38 - cbrt(v36 - v35);
    }
    v39 = *(double *)(v31 + v24 - 8);
    if (v36 <= v39 + -0.1 || (v40 = *(double *)(v4[1] + v24 - 8), v41 = v40 - cbrt(v36 - v39), v41 >= v37))
    {
      v42 = 0;
      v43 = *(double *)(v34 + v24 - 8);
      if (v36 <= v43 + -0.1)
        goto LABEL_13;
    }
    else
    {
      v42 = 1;
      v37 = v41;
      v43 = *(double *)(v34 + v24 - 8);
      if (v36 <= v43 + -0.1)
        goto LABEL_13;
    }
    v44 = *(double *)(v4[2] + v24 - 8);
    v45 = v44 - cbrt(v36 - v43);
    if (v45 < v37)
    {
      v42 = 2;
      v37 = v45;
    }
LABEL_13:
    v46 = *(double *)(v33 + v24 - 8);
    if (v36 > v46 + -0.1)
    {
      v47 = *(double *)&v9[(unint64_t)v24 / 8 - 1];
      v48 = v47 - cbrt(v36 - v46);
      if (v48 < v37)
      {
        v42 = 3;
        v37 = v48;
      }
    }
    *(_BYTE *)(**((_QWORD **)this + 13) + v23) = v42;
    v49 = (uint64_t *)*((_QWORD *)this + 11);
    v50 = (_QWORD *)*((_QWORD *)this + 12);
    v51 = *v49;
    *(double *)(*v49 + v24) = v37;
    v52 = v50[1];
    v53 = *(double *)(v52 + v24);
    v54 = *(double *)(*v50 + v24 - 8);
    v55 = 1.0e20;
    if (v53 > v54 + -0.1)
    {
      v56 = *(double *)(v51 + v24 - 8);
      v55 = v56 - cbrt(v53 - v54);
    }
    v57 = *(double *)(v52 + v24 - 8);
    if (v53 <= v57 + -0.1 || (v58 = *(double *)(v49[1] + v24 - 8), v59 = v58 - cbrt(v53 - v57), v59 >= v55))
    {
      v60 = 0;
      v61 = *(double *)(v50[2] + v24 - 8);
      if (v53 <= v61 + -0.1)
        goto LABEL_25;
    }
    else
    {
      v60 = 1;
      v55 = v59;
      v61 = *(double *)(v50[2] + v24 - 8);
      if (v53 <= v61 + -0.1)
        goto LABEL_25;
    }
    v62 = *(double *)(v49[2] + v24 - 8);
    v63 = v62 - cbrt(v53 - v61);
    if (v63 < v55)
    {
      v60 = 2;
      v55 = v63;
    }
LABEL_25:
    v64 = *(double *)(v50[3] + v24 - 8);
    if (v53 > v64 + -0.1)
    {
      v65 = *(double *)(v49[3] + v24 - 8);
      v66 = v65 - cbrt(v53 - v64);
      if (v66 < v55)
      {
        v60 = 3;
        v55 = v66;
      }
    }
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 13) + 8) + v23) = v60;
    v67 = (_QWORD *)*((_QWORD *)this + 11);
    v68 = (_QWORD *)*((_QWORD *)this + 12);
    v69 = v67[1];
    *(double *)(v69 + v24) = v55;
    v70 = v68[2];
    v71 = *(double *)(v70 + v24);
    v72 = *(double *)(*v68 + v24 - 8);
    if (v71 <= v72 + -0.1)
    {
      v74 = 1.0e20;
      v75 = *(double *)(v68[1] + v24 - 8);
      if (v71 <= v75 + -0.1)
        goto LABEL_35;
    }
    else
    {
      v73 = *(double *)(*v67 + v24 - 8);
      v74 = v73 - cbrt(v71 - v72);
      v75 = *(double *)(v68[1] + v24 - 8);
      if (v71 <= v75 + -0.1)
        goto LABEL_35;
    }
    v76 = *(double *)(v69 + v24 - 8);
    v77 = v76 - cbrt(v71 - v75);
    if (v77 < v74)
    {
      v78 = 1;
      v74 = v77;
      v79 = *(double *)(v70 + v24 - 8);
      if (v71 <= v79 + -0.1)
        goto LABEL_38;
      goto LABEL_36;
    }
LABEL_35:
    v78 = 0;
    v79 = *(double *)(v70 + v24 - 8);
    if (v71 <= v79 + -0.1)
      goto LABEL_38;
LABEL_36:
    v80 = *(double *)(v67[2] + v24 - 8);
    v81 = v80 - cbrt(v71 - v79);
    if (v81 < v74)
    {
      v78 = 2;
      v74 = v81;
    }
LABEL_38:
    v82 = *(double *)(v68[3] + v24 - 8);
    if (v71 > v82 + -0.1)
    {
      v83 = *(double *)(v67[3] + v24 - 8);
      v84 = v83 - cbrt(v71 - v82);
      if (v84 < v74)
      {
        v78 = 3;
        v74 = v84;
      }
    }
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 13) + 16) + v23) = v78;
    v85 = (_QWORD *)*((_QWORD *)this + 11);
    v86 = (_QWORD *)*((_QWORD *)this + 12);
    v87 = v85[2];
    *(double *)(v87 + v24) = v74;
    v88 = v86[3];
    v89 = *(double *)(v88 + v24);
    v90 = *(double *)(*v86 + v24 - 8);
    if (v89 <= v90 + -0.1)
    {
      v92 = 1.0e20;
      v93 = *(double *)(v86[1] + v24 - 8);
      if (v89 <= v93 + -0.1)
        goto LABEL_48;
    }
    else
    {
      v91 = *(double *)(*v85 + v24 - 8);
      v92 = v91 - cbrt(v89 - v90);
      v93 = *(double *)(v86[1] + v24 - 8);
      if (v89 <= v93 + -0.1)
        goto LABEL_48;
    }
    v94 = *(double *)(v85[1] + v24 - 8);
    v95 = v94 - cbrt(v89 - v93);
    if (v95 < v92)
    {
      v96 = 1;
      v92 = v95;
      v97 = *(double *)(v86[2] + v24 - 8);
      if (v89 <= v97 + -0.1)
        goto LABEL_51;
      goto LABEL_49;
    }
LABEL_48:
    v96 = 0;
    v97 = *(double *)(v86[2] + v24 - 8);
    if (v89 <= v97 + -0.1)
      goto LABEL_51;
LABEL_49:
    v98 = *(double *)(v87 + v24 - 8);
    v99 = v98 - cbrt(v89 - v97);
    if (v99 < v92)
    {
      v96 = 2;
      v92 = v99;
    }
LABEL_51:
    v100 = *(double *)(v88 + v24 - 8);
    if (v89 > v100 + -0.1)
    {
      v101 = *(double *)(v85[3] + v24 - 8);
      v102 = v101 - cbrt(v89 - v100);
      if (v102 < v92)
      {
        v96 = 3;
        v92 = v102;
      }
    }
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 13) + 24) + v23) = v96;
    v4 = (_QWORD *)*((_QWORD *)this + 11);
    v9 = (_QWORD *)v4[3];
    *(double *)&v9[(unint64_t)v24 / 8] = v92;
    ++v23;
    v12 = *((_QWORD *)this + 2);
    v24 += 8;
    v13 += 2;
  }
  while (v23 < v12);
  v5 = (_QWORD *)*v4;
  v6 = (_QWORD *)v4[1];
  v8 = (_QWORD *)v4[2];
LABEL_55:
  v103 = v12 - 1;
  v104 = v12 - 1;
  v105 = *(double *)&v6[v104] < *(double *)&v5[v104];
  if (*(double *)&v8[v104] >= *(double *)(v4[v105] + v104 * 8))
    v106 = v105;
  else
    v106 = 2;
  v107 = *(double *)&v9[v104];
  v108 = *(double *)(v4[v106] + v104 * 8);
  v109 = (_QWORD *)*((_QWORD *)this + 8);
  *v109 = 0;
  v109[v104] = 0x3FF0000000000000;
  if (v103 > 1)
  {
    if (v107 >= v108)
      v110 = v106;
    else
      v110 = 3;
    v111 = *((_QWORD *)this + 12);
    v112 = *((_QWORD *)this + 13);
    v113 = v12 - 2;
    do
    {
      v114 = 8 * v110;
      *(double *)&v109[v113] = fmin(fmax(*(double *)(*(_QWORD *)(v111 + v114) + 8 * v113), 0.0), 1.0);
      v110 = *(_BYTE *)(*(_QWORD *)(v112 + v114) + v113);
    }
    while (v113-- > 1);
  }
  if (v12 >= 2)
  {
    v116 = *((_QWORD *)this + 9);
    v117 = *((_QWORD *)this + 10);
    if (v12 < 0xB)
    {
      v118 = 1;
      goto LABEL_89;
    }
    v119 = v116 + 8 * v12;
    v120 = v117 + 8;
    v121 = v117 + 8 * v12;
    v122 = v109 + 1;
    v123 = (unint64_t)&v109[v12];
    v125 = v116 + 8 < v123 && (unint64_t)v122 < v119;
    v127 = v120 < v123 && (unint64_t)v122 < v121;
    v128 = v120 >= v119 || v116 + 8 >= v121;
    v118 = 1;
    if (!v128)
      goto LABEL_89;
    if (v125)
      goto LABEL_89;
    if (v127)
      goto LABEL_89;
    v118 = v103 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v129 = (float64x2_t *)(v109 + 3);
    v130 = (float64x2_t *)(v116 + 24);
    v131 = (float64x2_t *)(v117 + 24);
    v132 = v103 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v133 = v129[-1];
      v134 = *v129;
      v135 = vmulq_f64(v133, v133);
      v136 = vmulq_f64(v134, v134);
      v130[-1] = v135;
      *v130 = v136;
      v131[-1] = vmulq_f64(v135, v133);
      *v131 = vmulq_f64(v136, v134);
      v129 += 2;
      v130 += 2;
      v131 += 2;
      v132 -= 4;
    }
    while (v132);
    if (v103 != (v103 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_89:
      v137 = v12 - v118;
      v138 = 8 * v118;
      v139 = (double *)(v117 + v138);
      v140 = (double *)(v116 + v138);
      v141 = (double *)&v109[(unint64_t)v138 / 8];
      do
      {
        v142 = *v141 * *v141;
        *v140++ = v142;
        v143 = *v141++;
        *v139++ = v142 * v143;
        --v137;
      }
      while (v137);
    }
  }
}

void sub_1BE896958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE896970(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE896980(uint64_t a1)
{

}

void sub_1BE896988(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 72));
}

void sub_1BE896DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

id sub_1BE896EC0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  double x;
  double y;
  double width;
  double height;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t i;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  CGFloat v90;
  double v91;
  CGFloat v92;
  double v93;
  CGFloat v94;
  double v95;
  CGFloat v96;
  CHStrokeGroup *v97;
  const char *v98;
  void *StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin;
  double v101;
  double v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  objc_opt_self();
  objc_msgSend_setWithArray_(MEMORY[0x1E0C99E20], v9, (uint64_t)v6, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v6, v14, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lastObject(v6, v20, v21, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v101 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v102 = *MEMORY[0x1E0C9D538];
  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  if (objc_msgSend_count(v6, v30, v31, v32, v33, v34))
  {
    objc_msgSend_objectAtIndexedSubscript_(v6, v35, 0, v36, v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeIdentifierFromData_(v7, v40, (uint64_t)v39, v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeForIdentifier_(v7, v45, (uint64_t)v44, v46, v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v49, v50, v51, v52, v53, v54);
    v56 = v55;
    v58 = v57;
    v60 = v59;
    v62 = v61;

    v103.origin.x = x;
    v103.origin.y = y;
    v103.size.width = width;
    v103.size.height = height;
    v101 = v58;
    v102 = v56;
    v107.origin.x = v56;
    v107.origin.y = v58;
    v107.size.width = v60;
    v107.size.height = v62;
    v104 = CGRectUnion(v103, v107);
    x = v104.origin.x;
    y = v104.origin.y;
    width = v104.size.width;
    height = v104.size.height;

    for (i = 1; i < objc_msgSend_count(v6, v63, v64, v65, v66, v67, *(_QWORD *)&v101, *(_QWORD *)&v102); ++i)
    {
      objc_msgSend_objectAtIndexedSubscript_(v6, v69, i, v70, v71, v72);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeIdentifierFromData_(v7, v74, (uint64_t)v73, v75, v76, v77);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeForIdentifier_(v7, v79, (uint64_t)v78, v80, v81, v82);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_bounds(v83, v84, v85, v86, v87, v88);
      v90 = v89;
      v92 = v91;
      v94 = v93;
      v96 = v95;

      v105.origin.x = x;
      v105.origin.y = y;
      v105.size.width = width;
      v105.size.height = height;
      v108.origin.x = v90;
      v108.origin.y = v92;
      v108.size.width = v94;
      v108.size.height = v96;
      v106 = CGRectUnion(v105, v108);
      x = v106.origin.x;
      y = v106.origin.y;
      width = v106.size.width;
      height = v106.size.height;

    }
  }
  v97 = [CHStrokeGroup alloc];
  StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin = (void *)objc_msgSend_initWithStrokeIdentifiers_firstStrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin_(v97, v98, (uint64_t)v13, (uint64_t)v19, (uint64_t)v25, 0, v8, x, y, width, height, 0.0, v102, v101);

  return StrokeIdentifier_lastStrokeIdentifier_bounds_classification_groupingConfidence_strategyIdentifier_firstStrokeOrigin;
}

void sub_1BE89714C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1BE8972C4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v1[1] = v2;
  v4 = *v1;
  if (*v1)
  {
    v5 = v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (uint64_t)v5 - 32;
      do
      {
        v8 = v7 - 40;
        sub_1BE62033C(v7, *(_QWORD **)(v7 + 8));
        sub_1BE67AC7C(v7 - 40, *(_QWORD **)(v7 - 32));
        v7 -= 72;
      }
      while ((void *)v8 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE897408(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  if (a1)
  {
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
    {
      *(_QWORD *)v7 = a2;
      v8 = (uint64_t)(v7 + 8);
LABEL_23:
      a1[2] = v8;
      a1[4] |= a3;
      return;
    }
    v9 = (char *)a1[1];
    v10 = (v7 - v9) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_1BE61F930();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_1BE61F100();
      v14 = operator new(8 * v13);
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = a2;
      v8 = (uint64_t)(v15 + 1);
      v17 = v7 - v9;
      if (v7 == v9)
        goto LABEL_21;
    }
    else
    {
      v14 = 0;
      v15 = (_QWORD *)(8 * v10);
      v16 = 0;
      *(_QWORD *)(8 * v10) = a2;
      v8 = 8 * v10 + 8;
      v17 = v7 - v9;
      if (v7 == v9)
      {
LABEL_21:
        a1[1] = v15;
        a1[2] = v8;
        a1[3] = v16;
        if (v9)
          operator delete(v9);
        goto LABEL_23;
      }
    }
    v18 = v17 - 8;
    if (v18 < 0x58)
      goto LABEL_29;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_29;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v7[-v20];
    v15 = (_QWORD *)((char *)v15 - v20);
    v22 = &v14[8 * v10 - 16];
    v23 = v7 - 16;
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    v7 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v15 = v26;
      }
      while (v7 != v9);
    }
    goto LABEL_21;
  }
}

void sub_1BE8976E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE897834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE89785C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE89786C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8979A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE8979D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8979F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE897A0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE897A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

NetworkCursor *sub_1BE897A3C(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v5;
  NetworkCursor *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a2;
  v6 = objc_alloc_init(NetworkCursor);
  v8 = v5[1];
  v7 = v5[2];
  if (v7 != v8)
  {
    v9 = 0;
    do
    {
      v11 = *(_QWORD *)(v8 + 8 * v9);
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_QWORD *)(v12 + 32);
      v14 = *(_QWORD *)(v13 + 40 * v11);
      if (v14)
      {
        v15 = (_QWORD *)(*(_QWORD *)(v12 + 80) + 72 * *(_QWORD *)(v13 + 40 * v11 + 16) + 16);
        v16 = 0x7FFFFFFFFFFFFFFFLL;
        while (*v15 != a3)
        {
          --v16;
          v15 += 9;
          if (!--v14)
            goto LABEL_7;
        }
        if (v16)
        {
          v17 = *(v15 - 1);
          if (*(_BYTE *)(v13 + 40 * v17 + 32))
          {
            if (*(_QWORD *)(v13 + 40 * v17))
              v10 = 4;
            else
              v10 = 2;
          }
          else
          {
            v10 = 1;
          }
          sub_1BE897408(v6, v17, v10);
          v8 = v5[1];
          v7 = v5[2];
        }
      }
LABEL_7:
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }

  return v6;
}

void sub_1BE897B58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE897B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE897C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE89866C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,void *a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,void *a48,uint64_t a49,void *a50)
{
  void *v50;
  void *v51;

  _Unwind_Resume(a1);
}

void sub_1BE8988CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE8988EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE898BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE898BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE898C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  a9.super_class = (Class)CHEncoderDecoderNetwork;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE898F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE89932C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v23 = v22;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE899810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  void *v52;

  sub_1BE61CB14((uint64_t)&a24);
  sub_1BE61CB14((uint64_t)&a46);
  sub_1BE61CB14((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_1BE899918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE89992C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE89A060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_1BE65DB88((uint64_t)&a25);
  sub_1BE75831C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_1BE89AC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1BE75831C((uint64_t)va);
  sub_1BE75831C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1BE89AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89ACB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89ACC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89ACD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89ACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89AD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1BE75831C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89ADA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1BE75831C((uint64_t)va);
  sub_1BE75831C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1BE89B598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;

  sub_1BE72A5B8((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_1BE89B7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  sub_1BE6FA2E4(&a9);

  _Unwind_Resume(a1);
}

void sub_1BE89B7EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE89B7FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE89C46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = a16;
  sub_1BE89E8DC(&a25);
  _Unwind_Resume(a1);
}

void sub_1BE89C490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *__p,_QWORD *a32)
{
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  void *v42;

  *(_QWORD *)(v32 + 8) = v34;
  v36 = __p;
  if (__p)
  {
    v37 = a32;
    v38 = __p;
    if (a32 != __p)
    {
      do
      {
        v39 = (_QWORD *)*(v37 - 3);
        if (v39)
        {
          do
          {
            v40 = (_QWORD *)*v39;
            operator delete(v39);
            v39 = v40;
          }
          while (v40);
        }
        v42 = (void *)*(v37 - 5);
        v37 -= 5;
        v41 = v42;
        *v37 = 0;
        if (v42)
          operator delete(v41);
      }
      while (v37 != v36);
      v38 = __p;
    }
    a32 = v36;
    operator delete(v38);
  }
  operator delete(v33);
  a25 = a16;
  sub_1BE89E8DC((void ***)&a25);
  _Unwind_Resume(a1);
}

void sub_1BE89D0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE89D0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

id sub_1BE89D140(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, double a5)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int *v28;
  int *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float v42;
  uint64_t v43;
  CHTokenizedMathResultToken *v44;
  const char *v45;
  void *v46;

  v13 = a4;
  v14 = **(_QWORD **)(a1 + 40) + 24 * *(int *)(a2[9] + 4 * a3);
  if (*(char *)(v14 + 23) < 0)
    v14 = *(_QWORD *)v14;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v9, v14, v10, v11, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v16, v17, v18, v19, v20);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = a2[6] + 24 * a3;
  v28 = *(int **)v27;
  v29 = *(int **)(v27 + 8);
  if (*(int **)v27 != v29)
  {
    do
      objc_msgSend_addIndex_(v26, v21, *v28++, v23, v24, v25);
    while (v28 != v29);
  }
  v30 = *MEMORY[0x1E0C9D628];
  v31 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v32 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v33 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  if (objc_msgSend_count(v26, v21, v22, v23, v24, v25))
  {
    objc_msgSend_boundsForStrokeIndexes_(*(void **)(a1 + 32), v34, (uint64_t)v26, v35, v36, v37);
    v30 = v38;
    v31 = v39;
    v32 = v40;
    v33 = v41;
  }
  v42 = *(float *)(a2[12] + 4 * a3);
  v43 = *(_QWORD *)(a2[15] + 8 * a3);
  v44 = [CHTokenizedMathResultToken alloc];
  v46 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v44, v45, (uint64_t)v15, (uint64_t)v26, v43, (uint64_t)v13, v42, v30, v31, v32, v33, a5);

  return v46;
}

void sub_1BE89D2B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE89D2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE89D2E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE89D2F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE89D304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE89D31C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE89D46C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void **v20;

  v2 = *(_QWORD **)(a1 + 656);
  if (v2)
  {
    do
    {
      v12 = (_QWORD *)*v2;
      v13 = (void *)v2[3];
      if (v13)
      {
        v2[4] = v13;
        operator delete(v13);
      }
      operator delete(v2);
      v2 = v12;
    }
    while (v12);
  }
  v3 = *(void **)(a1 + 640);
  *(_QWORD *)(a1 + 640) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 616);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 576);
  if (v7)
  {
    do
    {
      v14 = (_QWORD *)*v7;
      v15 = (void *)v7[3];
      if (v15)
      {
        v7[4] = v15;
        operator delete(v15);
      }
      operator delete(v7);
      v7 = v14;
    }
    while (v14);
  }
  v8 = *(void **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD **)(a1 + 536);
  if (v9)
  {
    v10 = *(_QWORD **)(a1 + 544);
    v11 = *(void **)(a1 + 536);
    if (v10 != v9)
    {
      do
      {
        v17 = *--v10;
        v16 = v17;
        *v10 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 536);
    }
    *(_QWORD *)(a1 + 544) = v9;
    operator delete(v11);
  }
  sub_1BE61C7EC(a1 + 56);
  sub_1BE61F3E8(a1 + 32, *(char **)(a1 + 40));
  v18 = *(void ***)a1;
  if (*(_QWORD *)a1)
  {
    v19 = *(void ***)(a1 + 8);
    v20 = *(void ***)a1;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = *(void ***)a1;
    }
    *(_QWORD *)(a1 + 8) = v18;
    operator delete(v20);
  }
  return a1;
}

void sub_1BE89D5E4(uint64_t a1, const char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  char v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  int8x8_t v44;
  unint64_t v45;
  uint8x8_t v46;
  _QWORD *v47;
  unint64_t v48;
  void *__p;
  int v50;
  uint64_t v51;
  char v52;

  v4 = a1 + 16;
  v5 = operator new(0x28uLL);
  v51 = v4;
  v6 = v5 + 2;
  *v5 = 0;
  v5[1] = 0;
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v6 = operator new(v9 + 1);
    v5[3] = v8;
    v5[4] = v10 | 0x8000000000000000;
    v5[2] = v6;
  }
  else
  {
    *((_BYTE *)v5 + 39) = v7;
    if (!v7)
      goto LABEL_9;
  }
  memcpy(v6, a2, v8);
LABEL_9:
  *((_BYTE *)v6 + v8) = 0;
  v11 = *((char *)v5 + 39);
  if (v11 >= 0)
    v12 = v5 + 2;
  else
    v12 = (uint64_t *)v5[2];
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)v5 + 39);
  else
    v13 = v5[3];
  v5[1] = sub_1BE61C318((uint64_t)&v52, v12, v13);
  v14 = *((char *)v5 + 39);
  if (v14 >= 0)
    v15 = v5 + 2;
  else
    v15 = (uint64_t *)v5[2];
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)v5 + 39);
  else
    v16 = v5[3];
  v17 = sub_1BE61C318((uint64_t)&v52, v15, v16);
  v18 = v17;
  v5[1] = v17;
  v19 = *(_QWORD *)(a1 + 8);
  if (!v19)
    goto LABEL_68;
  v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
  v20.i16[0] = vaddlv_u8(v20);
  if (v20.u32[0] > 1uLL)
  {
    v21 = v17;
    if (v19 <= v17)
      v21 = v17 % v19;
  }
  else
  {
    v21 = (v19 - 1) & v17;
  }
  v22 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v21);
  if (!v22 || (v23 = *v22) == 0)
  {
LABEL_68:
    v35 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v36 = *(float *)(a1 + 32);
    if (!v19 || (float)(v36 * (float)v19) < v35)
    {
      v37 = 1;
      if (v19 >= 3)
        v37 = (v19 & (v19 - 1)) != 0;
      v38 = v37 | (2 * v19);
      v39 = vcvtps_u32_f32(v35 / v36);
      if (v38 <= v39)
        prime = v39;
      else
        prime = v38;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v19 = *(_QWORD *)(a1 + 8);
      }
      if (prime > v19)
        goto LABEL_80;
      if (prime < v19)
      {
        v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v19 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
        {
          v41 = std::__next_prime(v41);
        }
        else
        {
          v43 = 1 << -(char)__clz(v41 - 1);
          if (v41 >= 2)
            v41 = v43;
        }
        if (prime <= v41)
          prime = v41;
        if (prime < v19)
LABEL_80:
          sub_1BE61F23C(a1, prime);
      }
    }
LABEL_96:
    v44 = *(int8x8_t *)(a1 + 8);
    v45 = v5[1];
    v46 = (uint8x8_t)vcnt_s8(v44);
    v46.i16[0] = vaddlv_u8(v46);
    if (v46.u32[0] > 1uLL)
    {
      if (v45 >= *(_QWORD *)&v44)
        v45 %= *(_QWORD *)&v44;
    }
    else
    {
      v45 &= *(_QWORD *)&v44 - 1;
    }
    v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v45);
    if (v47)
    {
      *v5 = *v47;
    }
    else
    {
      *v5 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v51;
      if (!*v5)
      {
LABEL_109:
        ++*(_QWORD *)(a1 + 24);
        return;
      }
      v48 = *(_QWORD *)(*v5 + 8);
      if (v46.u32[0] > 1uLL)
      {
        if (v48 >= *(_QWORD *)&v44)
          v48 %= *(_QWORD *)&v44;
      }
      else
      {
        v48 &= *(_QWORD *)&v44 - 1;
      }
      v47 = (_QWORD *)(*(_QWORD *)a1 + 8 * v48);
    }
    *v47 = v5;
    goto LABEL_109;
  }
  v24 = *((_BYTE *)v5 + 39);
  v50 = v24;
  if (v24 >= 0)
    v25 = *((unsigned __int8 *)v5 + 39);
  else
    v25 = v5[3];
  __p = (void *)v5[2];
  if (v24 >= 0)
    v26 = (unsigned __int8 *)(v5 + 2);
  else
    v26 = (unsigned __int8 *)v5[2];
  if (v20.u32[0] < 2uLL)
  {
    while (1)
    {
      v31 = v23[1];
      if (v31 == v18)
      {
        v32 = *((unsigned __int8 *)v23 + 39);
        if ((v32 & 0x80u) == 0)
          v33 = *((unsigned __int8 *)v23 + 39);
        else
          v33 = v23[3];
        if (v33 == v25)
        {
          if ((v32 & 0x80) != 0)
          {
            if (!memcmp((const void *)v23[2], v26, v23[3]))
              goto LABEL_88;
          }
          else
          {
            if (!*((_BYTE *)v23 + 39))
              goto LABEL_88;
            v34 = 0;
            while (*((unsigned __int8 *)v23 + v34 + 16) == v26[v34])
            {
              if (v32 == ++v34)
                goto LABEL_87;
            }
          }
        }
      }
      else if ((v31 & (v19 - 1)) != v21)
      {
        goto LABEL_68;
      }
      v23 = (uint64_t *)*v23;
      if (!v23)
        goto LABEL_68;
    }
  }
  while (1)
  {
    v27 = v23[1];
    if (v27 != v18)
    {
      if (v27 >= v19)
        v27 %= v19;
      if (v27 != v21)
        goto LABEL_68;
      goto LABEL_37;
    }
    v28 = *((unsigned __int8 *)v23 + 39);
    if ((v28 & 0x80u) == 0)
      v29 = *((unsigned __int8 *)v23 + 39);
    else
      v29 = v23[3];
    if (v29 != v25)
      goto LABEL_37;
    if ((v28 & 0x80) != 0)
      break;
    if (!*((_BYTE *)v23 + 39))
      goto LABEL_88;
    v30 = 0;
    while (*((unsigned __int8 *)v23 + v30 + 16) == v26[v30])
    {
      if (v28 == ++v30)
      {
LABEL_87:
        if (!v23)
          goto LABEL_96;
        goto LABEL_88;
      }
    }
LABEL_37:
    v23 = (uint64_t *)*v23;
    if (!v23)
      goto LABEL_68;
  }
  if (memcmp((const void *)v23[2], v26, v23[3]))
    goto LABEL_37;
LABEL_88:
  if (v5)
  {
    if (v50 < 0)
      operator delete(__p);
    operator delete(v5);
  }
}

void sub_1BE89DA9C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;

  if (v1)
  {
    if (v1[39] < 0)
      operator delete(*v2);
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE89DACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1BE61F0B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE89DAE0(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = a1[1];
    }
    if (prime > v7)
    {
LABEL_36:
      if (prime >> 61)
        sub_1BE61F100();
      v22 = operator new(8 * prime);
      v23 = (void *)*a1;
      *a1 = (uint64_t)v22;
      if (v23)
        operator delete(v23);
      v24 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v24++) = 0;
      while (prime != v24);
      v25 = (_QWORD *)*v13;
      if (!*v13)
        goto LABEL_68;
      v26 = v25[1];
      v27 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v28 = v26 & v27;
        *(_QWORD *)(*a1 + 8 * v28) = v13;
        for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
        {
          v30 = i[1] & v27;
          if (v30 == v28)
          {
            v25 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v30))
          {
            *v25 = *i;
            v31 = 8 * v30;
            *i = **(_QWORD **)(*a1 + v31);
            **(_QWORD **)(*a1 + v31) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v30) = v25;
            v25 = i;
            v28 = v30;
          }
        }
        goto LABEL_68;
      }
      if (v26 >= prime)
        v26 %= prime;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      v35 = (_QWORD *)*v25;
      if (!*v25)
      {
LABEL_68:
        v7 = prime;
        v38 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_69;
        goto LABEL_84;
      }
      while (1)
      {
        v37 = v35[1];
        if (v37 >= prime)
          v37 %= prime;
        if (v37 == v26)
          goto LABEL_62;
        if (*(_QWORD *)(*a1 + 8 * v37))
        {
          *v25 = *v35;
          v36 = 8 * v37;
          *v35 = **(_QWORD **)(*a1 + v36);
          **(_QWORD **)(*a1 + v36) = v35;
          v35 = v25;
LABEL_62:
          v25 = v35;
          v35 = (_QWORD *)*v35;
          if (!v35)
            goto LABEL_68;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v37) = v25;
          v25 = v35;
          v35 = (_QWORD *)*v35;
          v26 = v37;
          if (!v35)
            goto LABEL_68;
        }
      }
    }
    if (prime < v7)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < v7)
      {
        if (!prime)
        {
          v39 = (void *)*a1;
          *a1 = 0;
          if (v39)
            operator delete(v39);
          v7 = 0;
          a1[1] = 0;
          v38 = -1;
          goto LABEL_84;
        }
        goto LABEL_36;
      }
      v7 = a1[1];
    }
    v38 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_69:
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v16 = *a1;
        v17 = *(_QWORD **)(*a1 + 8 * (v6 % v7));
        if (v17)
          goto LABEL_25;
      }
      else
      {
        v3 = v6;
        v16 = *a1;
        v17 = *(_QWORD **)(*a1 + 8 * v6);
        if (v17)
          goto LABEL_25;
      }
      goto LABEL_85;
    }
LABEL_84:
    v3 = v38 & v6;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * (v38 & v6));
    if (v17)
      goto LABEL_25;
    goto LABEL_85;
  }
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v3);
  if (v17)
  {
LABEL_25:
    *v10 = *v17;
LABEL_91:
    *v17 = v10;
    goto LABEL_92;
  }
LABEL_85:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v3) = v13;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_91;
  }
LABEL_92:
  ++a1[3];
  return v10;
}

void sub_1BE89DF90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE758CDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE89DFA4(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
    goto LABEL_50;
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v7)
    goto LABEL_34;
  if (prime < v7)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v20);
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
    }
    if (prime <= v20)
      prime = v20;
    if (prime < v7)
LABEL_34:
      sub_1BE61F23C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v25)
        goto LABEL_53;
LABEL_51:
      *v13 = *v25;
LABEL_59:
      *v25 = v13;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v25)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v23 & v6;
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & v6));
  if (v25)
    goto LABEL_51;
LABEL_53:
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v26 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BE89E274(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE89E288(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
    goto LABEL_50;
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v7)
    goto LABEL_34;
  if (prime < v7)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v20);
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
    }
    if (prime <= v20)
      prime = v20;
    if (prime < v7)
LABEL_34:
      sub_1BE61F23C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v25)
        goto LABEL_53;
LABEL_51:
      *v10 = *v25;
LABEL_59:
      *v25 = v10;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v25)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v23 & v6;
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & v6));
  if (v25)
    goto LABEL_51;
LABEL_53:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v24 + 8 * v3) = v13;
  if (*v10)
  {
    v26 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1BE89E584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE758CDC((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1BE89E598(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8;
  _DWORD *v9;
  _DWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  BOOL v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 *v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  BOOL v47;
  unint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD **)a1;
  result = v9;
  if (__sz <= (v8 - (uint64_t)v9) >> 3)
  {
    v18 = *(_DWORD **)(a1 + 8);
    v17 = (_QWORD *)(a1 + 8);
    v14 = v18;
    v19 = (char *)v18 - (char *)v9;
    v20 = ((char *)v18 - (char *)v9) >> 3;
    if (v20 < __sz)
    {
      v21 = &a2[8 * v20];
      if (v14 == v9)
        goto LABEL_55;
      if ((unint64_t)(v19 - 8) >= 0x78)
      {
        v42 = (v19 & 0xFFFFFFFFFFFFFFF8) - 4;
        v43 = (char *)v9 + v42;
        v44 = &a2[v42];
        v45 = a2 + 4;
        v47 = v9 + 1 < (_DWORD *)&a2[v19 & 0xFFFFFFFFFFFFFFF8] && v45 < (char *)v9 + (v19 & 0xFFFFFFFFFFFFFFF8);
        v22 = a2;
        if ((v43 <= a2 || v9 >= (_DWORD *)v44) && !v47)
        {
          v49 = ((unint64_t)(v19 - 8) >> 3) + 1;
          v50 = 2 * (v49 & 0x3FFFFFFFFFFFFFF8);
          result = &v9[v50];
          v22 = &a2[v50 * 4];
          v51 = (__int128 *)(a2 + 32);
          v52 = v9 + 8;
          v53 = v49 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v55 = *(v51 - 2);
            v54 = *(v51 - 1);
            v57 = *v51;
            v56 = v51[1];
            v51 += 4;
            *(v52 - 2) = v55;
            *(v52 - 1) = v54;
            *v52 = v57;
            v52[1] = v56;
            v52 += 4;
            v53 -= 8;
          }
          while (v53);
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_55:
            if (v21 == a3)
            {
              v16 = 0;
              goto LABEL_65;
            }
            v58 = &a2[v19];
            v59 = a3 - &a2[v19] - 8;
            if (v59 >= 0x38)
            {
              v61 = (char *)v14 - v58;
              v60 = (char *)v14;
              if (v61 >= 0x20)
              {
                v62 = (v59 >> 3) + 1;
                v63 = 2 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
                v21 += v63 * 4;
                v60 = (char *)&v14[v63];
                v64 = v14 + 4;
                v65 = &a2[8 * v20 + 16];
                v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v67 = *(_OWORD *)v65;
                  *(v64 - 1) = *((_OWORD *)v65 - 1);
                  *v64 = v67;
                  v64 += 2;
                  v65 += 32;
                  v66 -= 4;
                }
                while (v66);
                if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_64;
              }
            }
            else
            {
              v60 = (char *)v14;
            }
            do
            {
              v68 = *(_QWORD *)v21;
              v21 += 8;
              *(_QWORD *)v60 = v68;
              v60 += 8;
            }
            while (v21 != a3);
LABEL_64:
            v16 = v60 - (char *)v14;
            goto LABEL_65;
          }
        }
      }
      else
      {
        v22 = a2;
      }
      do
      {
        *result = *(_DWORD *)v22;
        result[1] = *((_DWORD *)v22 + 1);
        v22 += 8;
        result += 2;
      }
      while (v22 != v21);
      goto LABEL_55;
    }
    if (a2 == a3)
    {
      v33 = (char *)v9;
    }
    else
    {
      v23 = a3 - a2 - 8;
      if (v23 < 0x78
        || ((v24 = v23 & 0xFFFFFFFFFFFFFFF8 | 4,
             v25 = (char *)v9 + v24,
             v26 = &a2[v24],
             v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8,
             v9 + 1 < (_DWORD *)&a2[v27])
          ? (v28 = a2 + 4 >= (char *)v9 + v27)
          : (v28 = 1),
            v28 ? (v29 = 0) : (v29 = 1),
            v25 > a2 ? (v30 = v9 >= (_DWORD *)v26) : (v30 = 1),
            !v30 || (v29 & 1) != 0))
      {
        v33 = (char *)v9;
        v34 = a2;
      }
      else
      {
        v31 = (v23 >> 3) + 1;
        v32 = 2 * (v31 & 0x3FFFFFFFFFFFFFF8);
        v33 = (char *)&v9[v32];
        v34 = &a2[v32 * 4];
        v35 = (__int128 *)(a2 + 32);
        v36 = v9 + 8;
        v37 = v31 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v39 = *(v35 - 2);
          v38 = *(v35 - 1);
          v41 = *v35;
          v40 = v35[1];
          v35 += 4;
          *(v36 - 2) = v39;
          *(v36 - 1) = v38;
          *v36 = v41;
          v36[1] = v40;
          v36 += 4;
          v37 -= 8;
        }
        while (v37);
        if (v31 == (v31 & 0x3FFFFFFFFFFFFFF8))
          goto LABEL_38;
      }
      do
      {
        *(_DWORD *)v33 = *(_DWORD *)v34;
        *((_DWORD *)v33 + 1) = *((_DWORD *)v34 + 1);
        v33 += 8;
        v34 += 8;
      }
      while (v34 != a3);
    }
LABEL_38:
    v16 = v33 - (char *)v9;
    v14 = v9;
    goto LABEL_65;
  }
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  v11 = v8 >> 2;
  if (v8 >> 2 <= __sz)
    v11 = __sz;
  v28 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  v12 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v28)
    v12 = v11;
  if (v12 >> 61)
    sub_1BE61F930();
  v13 = 2 * v12;
  result = operator new(8 * v12);
  v14 = result;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[v13];
  v15 = (char *)result;
  if (a2 != a3)
  {
    result = memcpy(result, a2, (a3 - a2) & 0xFFFFFFFFFFFFFFF8);
    v15 = (char *)v14 + ((a3 - a2) & 0xFFFFFFFFFFFFFFF8);
  }
  v16 = v15 - (char *)v14;
  v17 = (_QWORD *)(a1 + 8);
LABEL_65:
  *v17 = (char *)v14 + v16;
  return result;
}

void sub_1BE89E8DC(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (void **)v1[1];
      do
      {
        v9 = *(v6 - 3);
        v6 -= 3;
        v8 = v9;
        if (v9)
        {
          v10 = *(v4 - 2);
          v7 = v8;
          if (v10 != v8)
          {
            do
            {
              v11 = (_QWORD *)*(v10 - 3);
              if (v11)
              {
                do
                {
                  v12 = (_QWORD *)*v11;
                  operator delete(v11);
                  v11 = v12;
                }
                while (v12);
              }
              v14 = (void *)*(v10 - 5);
              v10 -= 5;
              v13 = v14;
              *v10 = 0;
              if (v14)
                operator delete(v13);
            }
            while (v10 != v8);
            v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1BE89E9C0(uint64_t a1)
{

  return a1;
}

void sub_1BE89E9E8(uint64_t a1)
{

  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE89EA20(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E77EF9F8;
  v2[1] = MEMORY[0x1C3B81A84](v3);
  return v2;
}

uint64_t sub_1BE89EA64(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E77EF9F8;
  result = MEMORY[0x1C3B81A84](v3);
  a2[1] = result;
  return result;
}

void sub_1BE89EA98(uint64_t a1)
{

}

void sub_1BE89EAA0(id *a1)
{

  operator delete(a1);
}

uint64_t sub_1BE89EAC8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1BE89EADC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z66-[CHEncoderDecoderNetwork recognizeDrawing:beamSize:shouldCancel:]E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z66-[CHEncoderDecoderNetwork recognizeDrawing:beamSize:shouldCancel:]E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z66-[CHEncoderDecoderNetwork recognizeDrawing:beamSize:shouldCancel:]E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z66-[CHEncoderDecoderNetwork recognizeDrawing:beamSize:shouldCancel:]E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_1BE89EB48()
{
  return &unk_1E77EF790;
}

uint64_t sub_1BE89EB54(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    v4 = *(void ***)(a1 + 16);
    do
    {
      v7 = *(v4 - 3);
      v4 -= 3;
      v6 = v7;
      *(_QWORD *)(a1 + 16) = v4;
      if (v7)
      {
        v8 = *(v3 - 2);
        v5 = v6;
        if (v8 != v6)
        {
          do
          {
            v9 = (_QWORD *)*(v8 - 3);
            if (v9)
            {
              do
              {
                v10 = (_QWORD *)*v9;
                operator delete(v9);
                v9 = v10;
              }
              while (v10);
            }
            v12 = (void *)*(v8 - 5);
            v8 -= 5;
            v11 = v12;
            *v8 = 0;
            if (v12)
              operator delete(v11);
          }
          while (v8 != v6);
          v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        v4 = *(void ***)(a1 + 16);
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1BE89EC1C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    v5 = *(_QWORD **)(i - 24);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *v4;
    *v4 = 0;
    if (v7)
      operator delete(v7);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1BE89EC98(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_1BE61F23C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    sub_1BE89EDD8(a1, *((_DWORD *)i + 4), i[2]);
  return a1;
}

void sub_1BE89EDB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE89EDC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE89EDD8(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  v13[2] = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
    goto LABEL_50;
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v7)
    goto LABEL_34;
  if (prime < v7)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v20);
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
    }
    if (prime <= v20)
      prime = v20;
    if (prime < v7)
LABEL_34:
      sub_1BE61F23C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v25)
        goto LABEL_53;
LABEL_51:
      *v13 = *v25;
LABEL_59:
      *v25 = v13;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v25)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v23 & v6;
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & v6));
  if (v25)
    goto LABEL_51;
LABEL_53:
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v26 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BE89F0A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE89F0BC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      sub_1BE61F930();
    v7 = (_QWORD *)result;
    result = (uint64_t)operator new(40 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = result + 40 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_1BE89EC98(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v7[1] = v8;
  }
  return result;
}

void sub_1BE89F178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1BE6B4FA0(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE89F18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;

  if (v12)
  {
    do
    {
      v14 = (_QWORD *)*(v11 - 3);
      if (v14)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          operator delete(v14);
          v14 = v15;
        }
        while (v15);
      }
      v17 = (void *)*(v11 - 5);
      v11 -= 5;
      v16 = v17;
      *v11 = 0;
      if (v17)
        operator delete(v16);
    }
    while (v11 != v10);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_1BE6B4FA0(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE89F690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE89F6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHMecabraWrapper;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE89F7A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE89F818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE89F8A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE89F968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE89FA0C()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  void *v21;
  uint8_t v22[16];

  v0 = (void *)objc_opt_class();
  objc_msgSend_defaultURLOfModelInThisBundle(v0, v1, v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByAppendingPathComponent_(v6, v7, (uint64_t)CFSTR("model_hash.dat"), v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_checkResourceIsReachableAndReturnError_(v11, v12, 0, v13, v14, v15))
  {
    objc_msgSend_stringWithContentsOfURL_encoding_error_(MEMORY[0x1E0CB3940], v16, (uint64_t)v11, 4, 0, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)qword_1EF5684C8;
    qword_1EF5684C8 = v18;

  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v20 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_ERROR, "Failed to locate E5ML model hash.", v22, 2u);
    }

    v21 = (void *)qword_1EF5684C8;
    qword_1EF5684C8 = 0;

  }
}

void PentagonRegressor::PentagonRegressor(PentagonRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  CHDrawing *v6;
  void **v7;
  _BYTE *v8;
  _BYTE *v9;
  size_t v10;
  unint64_t v11;
  CHDrawing *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  void *v27;
  uint64_t (*v28)(__int128 *, __int128 *);
  __int128 *v29;
  __int128 *v30;
  unint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  double *v39;
  int64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat MidX;
  CGFloat MidY;
  _BYTE *v57;
  _BYTE *v58;
  int64_t v59;
  double *v60;
  __int128 *v61;
  double v62;
  double v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  float v68;
  double v69;
  float v70;
  float v71;
  int v72;
  double *v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  double *v84;
  double v85;
  double v86;
  float v87;
  float v88;
  float v89;
  float v90;
  int v91;
  double *v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  uint64_t v104;
  float v105;
  float v106;
  BOOL v107;
  float v108;
  float v109;
  float v110;
  BOOL v111;
  float v112;
  CGFloat v113;
  CGFloat v114;
  CGFloat v115;
  CGFloat v116;
  void *__p;
  void *v118;
  char *v119;
  BOOL (*v120)(uint64_t, uint64_t);
  __int128 v121;
  char v122[32];
  uint64_t (*v123)(__int128 *, __int128 *);
  CGRect v124;
  CGRect v125;

  v6 = a2;
  *(_QWORD *)this = 0;
  *((_OWORD *)this + 2) = 0u;
  v7 = (void **)((char *)this + 56);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 2) = a3;
  objc_storeStrong((id *)this, a2);
  *((float *)this + 6) = sub_1BE631E24(v6, (uint64_t)this + 32, (uint64_t)v122, 1, 20.0);
  v9 = (_BYTE *)*((_QWORD *)this + 4);
  v8 = (_BYTE *)*((_QWORD *)this + 5);
  v10 = v8 - v9;
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3);
  if (v11 <= 6)
  {
    v12 = v6;
    objc_msgSend_bounds(v12, v13, v14, v15, v16, v17);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v26 = operator new();
LABEL_16:
    v50 = v26;
    *(_QWORD *)v26 = &off_1E77F0680;
    *(double *)(v26 + 16) = v19 + v23 * 0.5;
    *(double *)(v26 + 24) = v21 + v25 * 0.5;
    *(double *)(v26 + 32) = v23;
    *(double *)(v26 + 40) = v25;
    *(_QWORD *)(v26 + 48) = 0;
    *(_DWORD *)(v26 + 8) = -1064084082;

    *((_QWORD *)this + 1) = v50;
    goto LABEL_55;
  }
  v118 = 0;
  v119 = 0;
  __p = 0;
  if (v8 != v9)
  {
    if (v11 > 0x666666666666666)
      sub_1BE61F930();
    __p = operator new(v10);
    v119 = (char *)__p + 40 * v11;
    memcpy(__p, v9, v10 - 3);
    v118 = v119;
  }
  sub_1BE629CD4((uint64_t *)&__p, (uint64_t)&v120);
  v27 = *v7;
  if (*v7)
  {
    *((_QWORD *)this + 8) = v27;
    operator delete(v27);
    *v7 = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
  }
  v28 = (uint64_t (*)(__int128 *, __int128 *))v120;
  *((_QWORD *)this + 7) = v120;
  v29 = (__int128 *)v121;
  *((_OWORD *)this + 4) = v121;
  v121 = 0uLL;
  v120 = 0;
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
    v28 = (uint64_t (*)(__int128 *, __int128 *))*((_QWORD *)this + 7);
    v30 = (__int128 *)*((_QWORD *)this + 8);
  }
  else
  {
    v30 = v29;
  }
  v31 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v30 - (char *)v28) >> 3));
  v120 = sub_1BE765504;
  if (v30 == (__int128 *)v28)
    v32 = 0;
  else
    v32 = v31;
  sub_1BE62A6E0((uint64_t)v28, v30, (uint64_t (**)(__int128 *, __int128 *))&v120, v32, 1);
  v38 = (double *)*((_QWORD *)this + 7);
  v39 = (double *)*((_QWORD *)this + 8);
  v40 = (char *)v39 - (char *)v38;
  if (0xCCCCCCCCCCCCCCCDLL * (v39 - v38) < 6)
  {
    v12 = v6;
    objc_msgSend_bounds(v12, v41, v42, v43, v44, v45);
    v19 = v46;
    v21 = v47;
    v23 = v48;
    v25 = v49;
    v26 = operator new();
    goto LABEL_16;
  }
  for (; v40 != 200; v40 = (char *)v92 + v93 - (char *)v38)
  {
    v63 = *(v39 - 5);
    v62 = *(v39 - 4);
    v64 = v38[5] - v63;
    v65 = v38[6] - v62;
    v66 = (float)(v65 * v65) + (float)(v64 * v64);
    if (v66 > 0.0)
    {
      v64 = v64 / v66;
      v65 = v65 / v66;
    }
    v67 = v40 / 40;
    v68 = sqrtf(v66);
    v69 = v38[1];
    v70 = ((*v38 - v63) * v65 - (v69 - v62) * v64) * v68;
    v71 = fabsf(v70);
    if ((unint64_t)(v67 - 1) < 2)
    {
      v72 = 0;
    }
    else
    {
      v72 = 0;
      v73 = v38 + 6;
      v74 = 2;
      v75 = v38[1];
      v76 = *v38;
      do
      {
        v81 = v73[4] - v76;
        v82 = v73[5] - v75;
        v83 = (float)(v82 * v82) + (float)(v81 * v81);
        if (v83 > 0.0)
        {
          v81 = v81 / v83;
          v82 = v82 / v83;
        }
        v77 = *(v73 - 1);
        v78 = *v73;
        v79 = ((v77 - v76) * v82 - (*v73 - v75) * v81) * sqrtf(v83);
        v80 = fabsf(v79);
        if (v80 < v71)
          v72 = v74 - 1;
        ++v74;
        if (v80 < v71)
          v71 = v80;
        v73 += 5;
        v75 = v78;
        v76 = v77;
      }
      while (v67 != v74);
    }
    v84 = &v38[5 * v67];
    v86 = *(v84 - 10);
    v85 = *(v84 - 9);
    v87 = *v38 - v86;
    v88 = v69 - v85;
    v89 = (float)(v88 * v88) + (float)(v87 * v87);
    if (v89 > 0.0)
    {
      v87 = v87 / v89;
      v88 = v88 / v89;
    }
    v90 = ((v63 - v86) * v88 - (v62 - v85) * v87) * sqrtf(v89);
    v91 = v67 - 1;
    if (fabsf(v90) >= v71)
      v91 = v72;
    v92 = &v38[5 * v91];
    v33 = v92 + 5;
    v93 = (char *)v39 - (char *)(v92 + 5);
    if (v39 != v92 + 5)
    {
      memmove(&v38[5 * v91], v33, v93 - 3);
      v38 = (double *)*v7;
    }
    v39 = (double *)((char *)v92 + v93);
    *((_QWORD *)this + 8) = (char *)v92 + v93;
  }
  objc_msgSend_bounds(v6, (const char *)v33, v34, v35, v36, v37);
  x = v124.origin.x;
  y = v124.origin.y;
  width = v124.size.width;
  height = v124.size.height;
  MidX = CGRectGetMidX(v124);
  v125.origin.x = x;
  v125.origin.y = y;
  v125.size.width = width;
  v125.size.height = height;
  MidY = CGRectGetMidY(v125);
  v120 = 0;
  v121 = 0uLL;
  v58 = (_BYTE *)*((_QWORD *)this + 7);
  v57 = (_BYTE *)*((_QWORD *)this + 8);
  v59 = v57 - v58;
  if (v57 == v58)
  {
    v61 = 0;
    v60 = 0;
  }
  else
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v59 >> 3) > 0x666666666666666)
      sub_1BE61F930();
    v60 = (double *)operator new(v59);
    v61 = (__int128 *)&v60[v59 >> 3];
    memcpy(v60, v58, v59 - 3);
  }
  v94 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v61 - (char *)v60) >> 3));
  v123 = (uint64_t (*)(__int128 *, __int128 *))sub_1BE8A0A44;
  if (v61 == (__int128 *)v60)
    v95 = 0;
  else
    v95 = v94;
  sub_1BE62A6E0((uint64_t)v60, v61, &v123, v95, 1);
  v113 = MidY;
  v114 = MidX;
  v115 = height;
  v116 = width;
  v96 = v60[6];
  v97 = v60[1];
  v98 = v60[21];
  v99 = v60[16];
  v123 = (uint64_t (*)(__int128 *, __int128 *))sub_1BE8A0A58;
  sub_1BE62A6E0((uint64_t)v60, v61, &v123, v95, 1);
  v100 = v60[5];
  v101 = *v60;
  v102 = v60[20];
  v103 = v60[15];
  v104 = operator new();
  v105 = v96 - v97;
  v106 = v98 - v99;
  v107 = v105 < v106;
  if (v105 >= v106)
    v105 = v98 - v99;
  v109 = 180.0;
  if (!v107)
    v109 = 0.0;
  v108 = v100 - v101;
  if (v105 > v108)
  {
    v105 = v100 - v101;
    v109 = 90.0;
  }
  v110 = v102 - v103;
  v111 = v105 <= v110;
  v112 = 270.0;
  *(_QWORD *)v104 = &off_1E77F0680;
  if (v111)
    v112 = v109;
  *(CGFloat *)(v104 + 16) = v114;
  *(CGFloat *)(v104 + 24) = v113;
  *(CGFloat *)(v104 + 32) = v116;
  *(CGFloat *)(v104 + 40) = v115;
  *(double *)(v104 + 48) = v112;
  *(_DWORD *)(v104 + 8) = 0;
  *((_QWORD *)this + 1) = v104;
  operator delete(v60);
LABEL_55:

}

void sub_1BE8A08D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  uint64_t v19;
  void **v20;
  void *v21;
  void **v22;
  void *v24;
  void *v25;

  operator delete(v21);
  v24 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v19 + 64) = v24;
    operator delete(v24);
    v25 = *v20;
    if (!*v20)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    v25 = *v20;
    if (!*v20)
      goto LABEL_3;
  }
  *(_QWORD *)(v19 + 40) = v25;
  operator delete(v25);

  _Unwind_Resume(a1);
}

uint64_t PentagonRegressor::provideAnAnswer(PentagonRegressor *this, CHDrawing *a2)
{
  CHDrawing *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;

  v2 = a2;
  objc_msgSend_bounds(v2, v3, v4, v5, v6, v7);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = operator new();
  *(_QWORD *)v16 = &off_1E77F0680;
  *(double *)(v16 + 16) = v9 + v13 * 0.5;
  *(double *)(v16 + 24) = v11 + v15 * 0.5;
  *(double *)(v16 + 32) = v13;
  *(double *)(v16 + 40) = v15;
  *(_QWORD *)(v16 + 48) = 0;
  *(_DWORD *)(v16 + 8) = -1064084082;

  return v16;
}

void sub_1BE8A0A34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1BE8A0A44(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

BOOL sub_1BE8A0A58(double *a1, double *a2)
{
  return *a1 < *a2;
}

float PentagonRegressor::confidenceLevelVersusEllipse(PentagonRegressor *this)
{
  double *v1;
  float v2;
  _OWORD *v4;
  _QWORD *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  float v15;
  double v16;
  double v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double v22;
  double v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  char *v41;
  int v42;
  uint64_t *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  double *v76;
  double *v77;
  double v78;
  double v79;
  float v80;
  float v81;
  float v82;
  double v83;
  double v84;
  float v85;
  uint64_t v86;
  char *v87;
  _OWORD *v88;
  unint64_t v89;
  _OWORD *v90;
  _OWORD *v91;
  char *v92;
  _OWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  double *v101;
  double v102;
  double v103;
  float v104;
  BOOL v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _OWORD *v110;
  char *v111;
  _OWORD *v112;
  unint64_t v113;
  _OWORD *v114;
  char *v115;
  _OWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  int v126;
  uint64_t *v127;
  char *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  _BYTE *v141;
  _DWORD *v142;
  int64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _OWORD *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  int v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD *v156;
  uint64_t v157;
  char *v158;
  _OWORD *v159;
  unint64_t v160;
  _OWORD *v161;
  char *v162;
  _OWORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  int64_t v172;
  unint64_t v173;
  _QWORD *v174;
  float *v175;
  float *v176;
  float *v177;
  unint64_t v178;
  float v179;
  char *v180;
  _BYTE *v181;
  _BYTE *v182;
  int64_t v183;
  char *v184;
  double *v185;
  __int128 v186;
  __int128 v187;
  double *v188;
  double *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  __int128 v195;
  char *v196;
  __int128 v197;
  __int128 v198;
  char *v199;
  _BYTE *v200;
  _BYTE *v201;
  int64_t v202;
  double *v203;
  double *v204;
  float v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  float v211;
  float v212;
  double *i;
  double v214;
  double v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  float *v220;
  uint64_t v221;
  int64_t v222;
  unint64_t v223;
  float *v224;
  int v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _OWORD *v229;
  float *v230;
  uint64_t v231;
  __int128 v232;
  unint64_t v233;
  double v234;
  float *v235;
  uint64_t v236;
  float32x4_t *v237;
  uint64_t v238;
  float32x4_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float v244;
  float v245;
  char *v246;
  float64x2_t v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  char *v251;
  int64_t v252;
  char **v253;
  void **v254;
  uint64_t v255;
  char *v256;
  char *v257;
  __int128 v258;
  __int128 v259;
  char *v260;
  int **v261;
  int *v262;
  int *v263;
  uint64_t v264;
  float64x2_t *v265;
  char *v266;
  float32x2_t *v267;
  float32x2_t v268;
  float32x2_t v269;
  float64x2_t v270;
  int v271;
  char *v272;
  char *v273;
  float32x2_t v274;
  float32x2_t *v275;
  int32x2_t v276;
  double v277;
  double v278;
  double v279;
  double v280;
  float v281;
  double v282;
  float v283;
  double v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  double v288;
  double v289;
  double v290;
  double v291;
  float v292;
  double v293;
  double v294;
  double v295;
  double v296;
  float v297;
  double v298;
  double v299;
  double v300;
  float v301;
  float v302;
  double v303;
  void *v304;
  void *v305;
  __int128 v306;
  float *v307;
  float v308;
  float v309;
  double v310;
  double v311;
  float *v312;
  float v313;
  float v314;
  double v315;
  double v316;
  double v317;
  double v318;
  float *v319;
  float v320;
  float v321;
  double v322;
  double v323;
  float v324;
  float v325;
  void *v326;
  void *v327;
  float *v328;
  float v329;
  float v330;
  float v331;
  int v332;
  float *v333;
  float v334;
  float v335;
  float v336;
  char *v337;
  char *v338;
  void *v339;
  char *v340;
  void *v341;
  void *v342;
  char *v343;
  char *v344;
  void *v345;
  char *v346;
  void *v347;
  void *v348;
  char *v350;
  char *v351;
  double v352;
  double v353;
  void *v354;
  unint64_t v355;
  unint64_t v356;
  int v357;
  float *v358;
  char *v359;
  void *v360;
  double *v361;
  double *v362;
  double *v363;
  char *v364;
  char *v365;
  char *v366;
  void *v367;
  uint64_t v368;
  float *v369;
  float v370;
  void *v371;
  char *v372;
  char *v373;
  void *v374;
  double *v375;
  char *v376;
  void *v377;
  char *v378;
  unint64_t v379;
  __int128 v380;
  __int128 v381;
  int v382;
  void *__p[2];
  _BYTE v384[24];
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  __int128 v390;
  int v391;
  float v392;
  float v393;
  float v394;
  int v395;
  uint64_t v396;

  v396 = *MEMORY[0x1E0C80C00];
  v1 = (double *)*((_QWORD *)this + 7);
  v2 = -1.0;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 8) - (_QWORD)v1) >> 3) < 5)
    return v2;
  v377 = 0;
  v378 = 0;
  v379 = 0;
  v374 = 0;
  v375 = 0;
  v376 = 0;
  v371 = 0;
  v372 = 0;
  v373 = 0;
  __p[0] = &v371;
  LOBYTE(__p[1]) = 0;
  v4 = operator new(0x78uLL);
  v372 = (char *)v4 + 120;
  v373 = (char *)v4 + 120;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  *((_QWORD *)v4 + 14) = 0;
  v371 = v4;
  v5 = operator new(0x14uLL);
  *v5 = 0;
  v5[1] = 0;
  *((_DWORD *)v5 + 4) = 0;
  v7 = v1[20];
  v6 = v1[21];
  v9 = v1[5];
  v8 = v1[6];
  v10 = v9 - v7;
  v11 = v8 - v6;
  v12 = (float)(v11 * v11) + (float)(v10 * v10);
  if (v12 > 0.0)
  {
    v10 = v10 / v12;
    v11 = v11 / v12;
  }
  v14 = *v1;
  v13 = v1[1];
  v15 = (*v1 - v7) * v11 - (v13 - v6) * v10;
  *(float *)v5 = fabsf(v15);
  v17 = v1[10];
  v16 = v1[11];
  v18 = v17 - v14;
  v19 = v16 - v13;
  v20 = (float)(v19 * v19) + (float)(v18 * v18);
  if (v20 > 0.0)
  {
    v18 = v18 / v20;
    v19 = v19 / v20;
  }
  v21 = (v9 - v14) * v19 - (v8 - v13) * v18;
  *((float *)v5 + 1) = fabsf(v21);
  v23 = v1[15];
  v22 = v1[16];
  v24 = v23 - v9;
  v25 = v22 - v8;
  v26 = (float)(v25 * v25) + (float)(v24 * v24);
  if (v26 > 0.0)
  {
    v24 = v24 / v26;
    v25 = v25 / v26;
  }
  v27 = (v17 - v9) * v25 - (v16 - v8) * v24;
  *((float *)v5 + 2) = fabsf(v27);
  v28 = v7 - v17;
  v29 = v6 - v16;
  v30 = (float)(v29 * v29) + (float)(v28 * v28);
  if (v30 > 0.0)
  {
    v28 = v28 / v30;
    v29 = v29 / v30;
  }
  v31 = (v23 - v17) * v29 - (v22 - v16) * v28;
  *((float *)v5 + 3) = fabsf(v31);
  v32 = v14 - v23;
  v33 = v13 - v22;
  v34 = (float)(v33 * v33) + (float)(v32 * v32);
  if (v34 > 0.0)
  {
    v32 = v32 / v34;
    v33 = v33 / v34;
  }
  v35 = (v7 - v23) * v33 - (v6 - v22) * v32;
  *((float *)v5 + 4) = fabsf(v35);
  v36 = v5;
  v354 = v5;
  std::__sort<std::__less<float,float> &,float *>();
  v391 = *((_DWORD *)v36 + 4);
  v390 = *(_OWORD *)v36;
  if (*((_QWORD *)this + 8) != *((_QWORD *)this + 7))
  {
    v37 = 0;
    v38 = *((_QWORD *)this + 1);
    v352 = *(double *)(v38 + 24);
    v353 = *(double *)(v38 + 16);
    v39 = 0.0;
    v40 = 0.0;
    while (1)
    {
      v41 = (char *)v371 + 24 * v37;
      v42 = -1431655765 * ((unint64_t)(v378 - (_BYTE *)v377) >> 3);
      v43 = (uint64_t *)(v41 + 8);
      v44 = (char *)*((_QWORD *)v41 + 1);
      v46 = v41 + 16;
      v45 = *((_QWORD *)v41 + 2);
      if ((unint64_t)v44 < v45)
      {
        *(_DWORD *)v44 = v42;
        *v43 = (uint64_t)(v44 + 4);
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)v384 = 0;
        v47 = v378;
        if ((unint64_t)v378 < v379)
          goto LABEL_17;
        goto LABEL_38;
      }
      v355 = v37;
      v48 = *(char **)v41;
      v49 = (uint64_t)&v44[-*(_QWORD *)v41];
      v50 = v49 >> 2;
      v51 = (v49 >> 2) + 1;
      if (v51 >> 62)
        sub_1BE61F930();
      v52 = v45 - (_QWORD)v48;
      if (v52 >> 1 > v51)
        v51 = v52 >> 1;
      v53 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v51;
      if (!v53)
        break;
      v350 = &v44[-*(_QWORD *)v41];
      if (v53 >> 62)
        sub_1BE61F100();
      v54 = v41;
      v55 = v41 + 16;
      v56 = v53;
      v57 = operator new(4 * v53);
      v46 = v55;
      v53 = v56;
      v41 = v54;
      v49 = (uint64_t)v350;
      v58 = &v57[4 * v50];
      *v58 = v42;
      v59 = (uint64_t)(v58 + 1);
      v60 = v44 - v48;
      if (v44 != v48)
        goto LABEL_29;
LABEL_35:
      *(_QWORD *)v41 = v58;
      *v43 = v59;
      *(_QWORD *)v46 = &v57[4 * v53];
      if (v48)
        operator delete(v48);
      v37 = v355;
      *v43 = v59;
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)v384 = 0;
      v47 = v378;
      if ((unint64_t)v378 < v379)
      {
LABEL_17:
        *(_QWORD *)v47 = 0;
        *((_QWORD *)v47 + 1) = 0;
        *((_QWORD *)v47 + 2) = 0;
        v378 = v47 + 24;
        goto LABEL_40;
      }
LABEL_38:
      v378 = sub_1BE7618F0((char **)&v377, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
LABEL_40:
      v70 = *((_QWORD *)this + 7);
      v71 = *(int *)(v70 + 40 * v37 + 16);
      v72 = v37 + 1;
      v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 8) - v70) >> 3);
      v74 = (v37 + 1) % v73;
      v75 = *(_DWORD *)(v70 + 40 * v74 + 16);
      if ((int)v71 >= v75)
      {
        v108 = *((_QWORD *)this + 4);
        v109 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 5) - v108) >> 3);
        if (v109 > v71 && v109 - 2 > v71)
        {
          v356 = v37;
          do
          {
            v111 = v378;
            v112 = (_OWORD *)(v108 + 40 * v71);
            v114 = (_OWORD *)*((_QWORD *)v378 - 2);
            v113 = *((_QWORD *)v378 - 1);
            if ((unint64_t)v114 < v113)
            {
              *v114 = *v112;
              v110 = v114 + 1;
            }
            else
            {
              v115 = v378 - 24;
              v116 = (_OWORD *)*((_QWORD *)v378 - 3);
              v117 = v114 - v116;
              v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 60)
LABEL_275:
                sub_1BE61F930();
              v119 = v113 - (_QWORD)v116;
              if (v119 >> 3 > v118)
                v118 = v119 >> 3;
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0)
                v120 = 0xFFFFFFFFFFFFFFFLL;
              else
                v120 = v118;
              if (v120)
              {
                if (v120 >> 60)
LABEL_276:
                  sub_1BE61F100();
                v121 = (char *)operator new(16 * v120);
              }
              else
              {
                v121 = 0;
              }
              v122 = &v121[16 * v117];
              *(_OWORD *)v122 = *v112;
              v123 = v122;
              if (v114 != v116)
              {
                do
                {
                  *((_OWORD *)v123 - 1) = *(v114 - 1);
                  v123 -= 16;
                  --v114;
                }
                while (v114 != v116);
                v114 = *(_OWORD **)v115;
              }
              v110 = v122 + 16;
              *((_QWORD *)v111 - 3) = v123;
              *((_QWORD *)v111 - 2) = v122 + 16;
              *((_QWORD *)v111 - 1) = &v121[16 * v120];
              if (v114)
                operator delete(v114);
            }
            *((_QWORD *)v111 - 2) = v110;
            ++v71;
            v108 = *((_QWORD *)this + 4);
          }
          while (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 5) - v108) >> 3) > v71);
          v124 = *((_QWORD *)this + 7);
          v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 8) - v124) >> 3);
          v75 = *(_DWORD *)(v124 + 40 * (v72 % v73) + 16);
          v37 = v356;
        }
        if (v75 >= 3)
        {
          if (*((_QWORD *)v378 - 2) == *((_QWORD *)v378 - 3))
            goto LABEL_120;
          v125 = (char *)v371 + 24 * v37;
          v126 = -1431655765 * ((unint64_t)(v378 - (_BYTE *)v377) >> 3);
          v127 = (uint64_t *)(v125 + 8);
          v128 = (char *)*((_QWORD *)v125 + 1);
          v130 = v125 + 16;
          v129 = *((_QWORD *)v125 + 2);
          if ((unint64_t)v128 < v129)
          {
            *(_DWORD *)v128 = v126;
            v131 = (uint64_t)(v128 + 4);
            goto LABEL_115;
          }
          v132 = *(char **)v125;
          v133 = (uint64_t)&v128[-*(_QWORD *)v125];
          v134 = v133 >> 2;
          v135 = (v133 >> 2) + 1;
          if (v135 >> 62)
            sub_1BE61F930();
          v136 = v129 - (_QWORD)v132;
          if (v136 >> 1 > v135)
            v135 = v136 >> 1;
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
            v137 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v137 = v135;
          if (v137)
          {
            v351 = &v128[-*(_QWORD *)v125];
            v357 = -1431655765 * ((unint64_t)(v378 - (_BYTE *)v377) >> 3);
            if (v137 >> 62)
              sub_1BE61F100();
            v138 = v125 + 16;
            v139 = v125;
            v140 = v137;
            v141 = operator new(4 * v137);
            v125 = v139;
            v130 = v138;
            v137 = v140;
            v133 = (uint64_t)v351;
            v142 = &v141[4 * v134];
            *v142 = v357;
            v131 = (uint64_t)(v142 + 1);
            v143 = v128 - v132;
            if (v128 == v132)
              goto LABEL_113;
LABEL_107:
            v144 = v143 - 4;
            if (v144 < 0x2C)
              goto LABEL_290;
            if ((unint64_t)(v128 - v141 - v133) < 0x20)
              goto LABEL_290;
            v145 = (v144 >> 2) + 1;
            v146 = 4 * (v145 & 0x7FFFFFFFFFFFFFF8);
            v147 = &v128[-v146];
            v142 = (_DWORD *)((char *)v142 - v146);
            v148 = &v141[4 * v134 - 16];
            v149 = v128 - 16;
            v150 = v145 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v151 = *(_OWORD *)v149;
              *(v148 - 1) = *((_OWORD *)v149 - 1);
              *v148 = v151;
              v148 -= 2;
              v149 -= 32;
              v150 -= 8;
            }
            while (v150);
            v128 = v147;
            if (v145 != (v145 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_290:
              do
              {
                v152 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *--v142 = v152;
              }
              while (v128 != v132);
            }
          }
          else
          {
            v141 = 0;
            v142 = (_DWORD *)(4 * v134);
            *(_DWORD *)(4 * v134) = v126;
            v131 = 4 * v134 + 4;
            v143 = v128 - v132;
            if (v128 != v132)
              goto LABEL_107;
          }
LABEL_113:
          *(_QWORD *)v125 = v142;
          *v127 = v131;
          *(_QWORD *)v130 = &v141[4 * v137];
          if (v132)
            operator delete(v132);
LABEL_115:
          *v127 = v131;
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)v384 = 0;
          v153 = v378;
          if ((unint64_t)v378 >= v379)
          {
            v378 = sub_1BE7618F0((char **)&v377, (uint64_t)__p);
            if (__p[0])
              operator delete(__p[0]);
          }
          else
          {
            *(_QWORD *)v378 = 0;
            *((_QWORD *)v153 + 1) = 0;
            *((_QWORD *)v153 + 2) = 0;
            v378 = v153 + 24;
          }
          v154 = *((_QWORD *)this + 7);
          v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 8) - v154) >> 3);
          if ((*(_DWORD *)(v154 + 40 * (v72 % v73) + 16) & 0x80000000) == 0)
          {
LABEL_120:
            v155 = 0;
            do
            {
              v158 = v378;
              v159 = (_OWORD *)(*((_QWORD *)this + 4) + 40 * v155);
              v161 = (_OWORD *)*((_QWORD *)v378 - 2);
              v160 = *((_QWORD *)v378 - 1);
              if ((unint64_t)v161 < v160)
              {
                *v161 = *v159;
                v156 = v161 + 1;
              }
              else
              {
                v162 = v378 - 24;
                v163 = (_OWORD *)*((_QWORD *)v378 - 3);
                v164 = v161 - v163;
                v165 = v164 + 1;
                if ((unint64_t)(v164 + 1) >> 60)
                  goto LABEL_275;
                v166 = v160 - (_QWORD)v163;
                if (v166 >> 3 > v165)
                  v165 = v166 >> 3;
                if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF0)
                  v167 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v167 = v165;
                if (v167)
                {
                  if (v167 >> 60)
                    goto LABEL_276;
                  v168 = (char *)operator new(16 * v167);
                }
                else
                {
                  v168 = 0;
                }
                v169 = &v168[16 * v164];
                *(_OWORD *)v169 = *v159;
                v170 = v169;
                if (v161 != v163)
                {
                  do
                  {
                    *((_OWORD *)v170 - 1) = *(v161 - 1);
                    v170 -= 16;
                    --v161;
                  }
                  while (v161 != v163);
                  v161 = *(_OWORD **)v162;
                }
                v156 = v169 + 16;
                *((_QWORD *)v158 - 3) = v170;
                *((_QWORD *)v158 - 2) = v169 + 16;
                *((_QWORD *)v158 - 1) = &v168[16 * v167];
                if (v161)
                  operator delete(v161);
              }
              *((_QWORD *)v158 - 2) = v156;
              v157 = *((_QWORD *)this + 7);
              v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 8) - v157) >> 3);
              v105 = v155++ < *(int *)(v157 + 40 * (v72 % v73) + 16);
            }
            while (v105);
          }
        }
      }
      else
      {
        v76 = (double *)(v70 + 40 * v74);
        v77 = (double *)(v70 + 40 * v37);
        v78 = *v77;
        v79 = v77[1];
        v80 = *v76 - *v77;
        v81 = v76[1] - v79;
        v82 = (float)(v81 * v81) + (float)(v80 * v80);
        if (v82 > 0.0)
        {
          v80 = v80 / v82;
          v81 = v81 / v82;
        }
        v83 = v81;
        v84 = v80;
        v85 = (v353 - v78) * v81 - (v352 - v79) * v80;
        v86 = *((_QWORD *)this + 4);
        do
        {
          v87 = v378;
          v88 = (_OWORD *)(v86 + 40 * v71);
          v90 = (_OWORD *)*((_QWORD *)v378 - 2);
          v89 = *((_QWORD *)v378 - 1);
          if ((unint64_t)v90 >= v89)
          {
            v92 = v378 - 24;
            v93 = (_OWORD *)*((_QWORD *)v378 - 3);
            v94 = v90 - v93;
            v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 60)
              goto LABEL_275;
            v96 = v89 - (_QWORD)v93;
            if (v96 >> 3 > v95)
              v95 = v96 >> 3;
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
              v97 = 0xFFFFFFFFFFFFFFFLL;
            else
              v97 = v95;
            if (v97)
            {
              if (v97 >> 60)
                goto LABEL_276;
              v98 = (char *)operator new(16 * v97);
            }
            else
            {
              v98 = 0;
            }
            v99 = &v98[16 * v94];
            *(_OWORD *)v99 = *v88;
            v100 = v99;
            if (v90 != v93)
            {
              do
              {
                *((_OWORD *)v100 - 1) = *(v90 - 1);
                v100 -= 16;
                --v90;
              }
              while (v90 != v93);
              v90 = *(_OWORD **)v92;
            }
            v91 = v99 + 16;
            *((_QWORD *)v87 - 3) = v100;
            *((_QWORD *)v87 - 2) = v99 + 16;
            *((_QWORD *)v87 - 1) = &v98[16 * v97];
            if (v90)
              operator delete(v90);
          }
          else
          {
            *v90 = *v88;
            v91 = v90 + 1;
          }
          *((_QWORD *)v87 - 2) = v91;
          v86 = *((_QWORD *)this + 4);
          v101 = (double *)(v86 + 40 * v71);
          v102 = *v101 - v78;
          v103 = v101[1] - v79;
          v104 = v103 * v83 + v102 * v84;
          v105 = v104 >= -0.5 && v104 <= 1.5;
          if (!v105)
          {
LABEL_209:
            v2 = -42.0;
            goto LABEL_256;
          }
          v106 = v102 * v83 - v103 * v84;
          if (v85 <= 0.0)
            v106 = -v106;
          v39 = v39 + (float)(v106 * (float)((float)((float)(v104 * -4.0) * (float)(v104 + -1.0)) + 1.0));
          v40 = v40 + 1.0;
          v107 = *((_QWORD *)this + 7);
          v73 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 8) - v107) >> 3);
          v105 = (uint64_t)v71++ < *(int *)(v107 + 40 * (v72 % v73) + 16);
        }
        while (v105);
      }
      v37 = v72;
      if (v73 <= v72)
      {
        v392 = v39 / v40;
        v171 = (char *)v377;
        v172 = v378 - (_BYTE *)v377;
        if (v378 == v377)
          goto LABEL_214;
        goto LABEL_142;
      }
    }
    v57 = 0;
    v58 = (_DWORD *)(4 * v50);
    *(_DWORD *)(4 * v50) = v42;
    v59 = 4 * v50 + 4;
    v60 = v44 - v48;
    if (v44 == v48)
      goto LABEL_35;
LABEL_29:
    v61 = v60 - 4;
    if (v61 < 0x2C)
      goto LABEL_291;
    if ((unint64_t)(v44 - v57 - v49) < 0x20)
      goto LABEL_291;
    v62 = (v61 >> 2) + 1;
    v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
    v64 = &v44[-v63];
    v58 = (_DWORD *)((char *)v58 - v63);
    v65 = &v57[4 * v50 - 16];
    v66 = v44 - 16;
    v67 = v62 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v68 = *(_OWORD *)v66;
      *(v65 - 1) = *((_OWORD *)v66 - 1);
      *v65 = v68;
      v65 -= 2;
      v66 -= 32;
      v67 -= 8;
    }
    while (v67);
    v44 = v64;
    if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_291:
      do
      {
        v69 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *--v58 = v69;
      }
      while (v44 != v48);
    }
    goto LABEL_35;
  }
  v392 = NAN;
  v171 = (char *)v377;
  v172 = v378 - (_BYTE *)v377;
  if (v378 == v377)
  {
LABEL_214:
    v370 = 0.0;
    v367 = 0;
    v368 = 0;
    v234 = 0.0;
    v179 = 0.0;
    v369 = 0;
    goto LABEL_220;
  }
LABEL_142:
  v173 = v172 / 24;
  if (v173 <= 1)
    v173 = 1;
  v174 = v171 + 8;
  do
  {
    if (*v174 - *(v174 - 1) < 0x20uLL)
      goto LABEL_209;
    v174 += 3;
    --v173;
  }
  while (v173);
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v370 = 0.0;
  v367 = 0;
  v368 = 0;
  v369 = 0;
  v179 = 0.0;
  do
  {
    v180 = &v171[24 * v178];
    v365 = 0;
    v366 = 0;
    v364 = 0;
    v182 = *(_BYTE **)v180;
    v181 = (_BYTE *)*((_QWORD *)v180 + 1);
    v183 = v181 - v182;
    if (v181 == v182)
    {
      v184 = 0;
    }
    else
    {
      if (v183 < 0)
        sub_1BE61F930();
      v184 = (char *)operator new(v181 - v182);
      v364 = v184;
      v366 = &v184[16 * (v183 >> 4)];
      memcpy(v184, v182, v183);
      v365 = &v184[16 * (v183 >> 4)];
    }
    sub_1BE8C4570((uint64_t)__p, (uint64_t)&v364, &v370);
    v185 = v375;
    if (v375 >= (double *)v376)
    {
      v189 = (double *)v374;
      v190 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v375 - (_BYTE *)v374) >> 3);
      v191 = v190 + 1;
      if (v190 + 1 > 0x666666666666666)
        sub_1BE61F930();
      if (0x999999999999999ALL * ((v376 - (_BYTE *)v374) >> 3) > v191)
        v191 = 0x999999999999999ALL * ((v376 - (_BYTE *)v374) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v376 - (_BYTE *)v374) >> 3) >= 0x333333333333333)
        v192 = 0x666666666666666;
      else
        v192 = v191;
      if (v192)
      {
        if (v192 > 0x666666666666666)
          sub_1BE61F100();
        v193 = (char *)operator new(40 * v192);
      }
      else
      {
        v193 = 0;
      }
      v194 = &v193[40 * v190];
      v195 = *(_OWORD *)v384;
      *(_OWORD *)v194 = *(_OWORD *)__p;
      *((_OWORD *)v194 + 1) = v195;
      *((_QWORD *)v194 + 4) = *(_QWORD *)&v384[16];
      v196 = v194;
      if (v185 != v189)
      {
        do
        {
          v197 = *(_OWORD *)(v185 - 5);
          v198 = *(_OWORD *)(v185 - 3);
          *((_DWORD *)v196 - 2) = *((_DWORD *)v185 - 2);
          *(_OWORD *)(v196 - 24) = v198;
          *(_OWORD *)(v196 - 40) = v197;
          v196 -= 40;
          v185 -= 5;
        }
        while (v185 != v189);
        v185 = v189;
      }
      v188 = (double *)(v194 + 40);
      v374 = v196;
      v376 = &v193[40 * v192];
      if (v185)
        operator delete(v185);
    }
    else
    {
      v186 = *(_OWORD *)__p;
      v187 = *(_OWORD *)v384;
      v375[4] = *(double *)&v384[16];
      *(_OWORD *)v185 = v186;
      *((_OWORD *)v185 + 1) = v187;
      v188 = v185 + 5;
    }
    v375 = v188;
    if (v184)
    {
      v365 = v184;
      operator delete(v184);
    }
    v199 = (char *)v377 + 24 * v178;
    v362 = 0;
    v363 = 0;
    v361 = 0;
    v201 = *(_BYTE **)v199;
    v200 = (_BYTE *)*((_QWORD *)v199 + 1);
    v202 = v200 - v201;
    if (v200 == v201)
    {
      v203 = 0;
      v205 = 0.0;
LABEL_177:
      if (v177 < v176)
        goto LABEL_148;
      goto LABEL_183;
    }
    if (v202 < 0)
      sub_1BE61F930();
    v203 = (double *)operator new(v200 - v201);
    v204 = &v203[2 * (v202 >> 4)];
    v361 = v203;
    v363 = v204;
    memcpy(v203, v201, v202);
    v362 = v204;
    v205 = 0.0;
    if ((unint64_t)(16 * (v202 >> 4)) < 0x20)
      goto LABEL_177;
    v206 = *(v188 - 5);
    v207 = *(v188 - 4);
    v208 = *((float *)v188 - 5);
    v209 = *((float *)v188 - 4);
    v210 = *((float *)v188 - 2);
    v211 = ((v203[1] - v207) * v209 + (*v203 - v206) * v208) * v210;
    v212 = v211;
    for (i = v203; i != v204; v211 = fmaxf(*(float *)&v214, v211))
    {
      v214 = *i;
      v215 = i[1];
      i += 2;
      *(float *)&v214 = ((v215 - v207) * v209 + (v214 - v206) * v208) * v210;
      v212 = fminf(*(float *)&v214, v212);
    }
    v205 = v211 - v212;
    if (v177 < v176)
    {
LABEL_148:
      *v177++ = v205;
      v368 = (uint64_t)v177;
      if (!v203)
        goto LABEL_150;
LABEL_149:
      v362 = v203;
      operator delete(v203);
      goto LABEL_150;
    }
LABEL_183:
    v216 = v177 - v175;
    v217 = v216 + 1;
    if ((unint64_t)(v216 + 1) >> 62)
      sub_1BE61F930();
    if (((char *)v176 - (char *)v175) >> 1 > v217)
      v217 = ((char *)v176 - (char *)v175) >> 1;
    if ((unint64_t)((char *)v176 - (char *)v175) >= 0x7FFFFFFFFFFFFFFCLL)
      v218 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v218 = v217;
    if (v218)
    {
      if (v218 >> 62)
        sub_1BE61F100();
      v219 = operator new(4 * v218);
      v220 = (float *)&v219[4 * v216];
      *v220 = v205;
      v221 = (uint64_t)(v220 + 1);
      v222 = (char *)v177 - (char *)v175;
      if (v177 != v175)
      {
LABEL_192:
        v223 = v222 - 4;
        if (v223 < 0xBC
          || (v226 = ((char *)(v177 - 1) - (char *)v175) & 0xFFFFFFFFFFFFFFFCLL,
              &v219[(char *)v177 - (char *)v175 - 4 - v226] > &v219[(char *)v177 - (char *)v175 - 4])
          || (float *)((char *)v177 - v226 - 4) > v177 - 1
          || (unint64_t)((char *)v175 - v219) < 0x20)
        {
          v224 = v177;
        }
        else
        {
          v227 = (v223 >> 2) + 1;
          v228 = 4 * (v227 & 0x7FFFFFFFFFFFFFF8);
          v224 = &v177[v228 / 0xFFFFFFFFFFFFFFFCLL];
          v220 = (float *)((char *)v220 - v228);
          v229 = &v219[4 * v216 - 16];
          v230 = v177 - 4;
          v231 = v227 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v232 = *(_OWORD *)v230;
            *(v229 - 1) = *((_OWORD *)v230 - 1);
            *v229 = v232;
            v229 -= 2;
            v230 -= 8;
            v231 -= 8;
          }
          while (v231);
          if (v227 == (v227 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_195:
            v176 = (float *)&v219[4 * v218];
            v367 = v220;
            v369 = v176;
            if (!v175)
              goto LABEL_197;
LABEL_196:
            operator delete(v175);
            v203 = v361;
            goto LABEL_197;
          }
        }
        do
        {
          v225 = *((_DWORD *)v224-- - 1);
          *((_DWORD *)v220-- - 1) = v225;
        }
        while (v224 != v175);
        goto LABEL_195;
      }
    }
    else
    {
      v219 = 0;
      v220 = (float *)(4 * v216);
      *(float *)(4 * v216) = v205;
      v221 = 4 * v216 + 4;
      v222 = (char *)v177 - (char *)v175;
      if (v177 != v175)
        goto LABEL_192;
    }
    v176 = (float *)&v219[4 * v218];
    v367 = v220;
    v369 = v176;
    if (v175)
      goto LABEL_196;
LABEL_197:
    v175 = v220;
    v177 = (float *)v221;
    v368 = v221;
    if (v203)
      goto LABEL_149;
LABEL_150:
    v179 = v179 + (float)((float)(*(v177 - 1) * v370) * v370);
    ++v178;
    v171 = (char *)v377;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v378 - (_BYTE *)v377) >> 3) > v178);
  if (v367 == v177)
  {
    v234 = 0.0;
  }
  else
  {
    v233 = (char *)v177 - (_BYTE *)v367 - 4;
    if (v233 < 0x1C)
    {
      v234 = 0.0;
      v235 = (float *)v367;
      goto LABEL_219;
    }
    v236 = (v233 >> 2) + 1;
    v235 = (float *)((char *)v367 + 4 * (v236 & 0x7FFFFFFFFFFFFFF8));
    v237 = (float32x4_t *)((char *)v367 + 16);
    v234 = 0.0;
    v238 = v236 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v239 = v237[-1];
      v240 = vcvt_hight_f64_f32(v239);
      v241 = vcvtq_f64_f32(*(float32x2_t *)v239.f32);
      v242 = vcvt_hight_f64_f32(*v237);
      v243 = vcvtq_f64_f32(*(float32x2_t *)v237->f32);
      v234 = v234
           + v241.f64[0]
           + v241.f64[1]
           + v240.f64[0]
           + v240.f64[1]
           + v243.f64[0]
           + v243.f64[1]
           + v242.f64[0]
           + v242.f64[1];
      v237 += 2;
      v238 -= 8;
    }
    while (v238);
    if (v236 != (v236 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_219:
        v244 = *v235++;
        v234 = v234 + v244;
      }
      while (v235 != v177);
    }
  }
LABEL_220:
  v245 = v179 / v234;
  v393 = (float)(v245 * 2.0) + -1.0;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v384[12] = 0;
  *(_QWORD *)&v384[4] = 0;
  v246 = (char *)operator new(0xC8uLL);
  v248 = *(_OWORD *)__p;
  v249 = *(_OWORD *)v384;
  *(_OWORD *)v246 = *(_OWORD *)__p;
  *((_OWORD *)v246 + 1) = v249;
  v250 = *(_QWORD *)&v384[16];
  *((_QWORD *)v246 + 4) = *(_QWORD *)&v384[16];
  *(_OWORD *)(v246 + 40) = v248;
  *(_OWORD *)(v246 + 56) = v249;
  *((_QWORD *)v246 + 9) = v250;
  *((_OWORD *)v246 + 5) = v248;
  *((_OWORD *)v246 + 6) = v249;
  *((_QWORD *)v246 + 14) = v250;
  *((_QWORD *)v246 + 19) = v250;
  *(_OWORD *)(v246 + 120) = v248;
  *(_OWORD *)(v246 + 136) = v249;
  *((_QWORD *)v246 + 24) = v250;
  v359 = v246 + 200;
  v360 = v246;
  v251 = (char *)v374;
  v252 = (char *)v375 - (_BYTE *)v374;
  *((_OWORD *)v246 + 10) = v248;
  *((_OWORD *)v246 + 11) = v249;
  if (v252 == 200)
  {
    v253 = (char **)&v375;
    v254 = &v374;
    v246 = v251;
  }
  else
  {
    v255 = 0;
    v256 = (char *)v371;
    do
    {
      while (1)
      {
        v261 = (int **)&v256[24 * v255];
        v262 = *v261;
        v263 = v261[1];
        v264 = (char *)v263 - (char *)*v261;
        if (v264 != 4)
          break;
        v257 = &v251[40 * *v262];
        v258 = *(_OWORD *)v257;
        v259 = *((_OWORD *)v257 + 1);
        v260 = &v246[40 * v255];
        *((_DWORD *)v260 + 8) = *((_DWORD *)v257 + 8);
        *(_OWORD *)v260 = v258;
        *((_OWORD *)v260 + 1) = v259;
        if (++v255 == 5)
          goto LABEL_233;
      }
      v265 = (float64x2_t *)&v246[40 * v255];
      if (v262 == v263)
      {
        v270 = *v265;
        v269 = *(float32x2_t *)&v246[40 * v255 + 20];
      }
      else
      {
        v266 = &v246[40 * v255];
        v268 = *(float32x2_t *)(v266 + 20);
        v267 = (float32x2_t *)(v266 + 20);
        v269 = v268;
        v270 = *v265;
        do
        {
          v271 = *v262++;
          v272 = &v251[40 * v271];
          v247 = *(float64x2_t *)v272;
          v270 = vaddq_f64(v270, *(float64x2_t *)v272);
          *v265 = v270;
          v269 = vmla_n_f32(v269, *(float32x2_t *)(v272 + 20), *((float *)v272 + 8));
          *v267 = v269;
        }
        while (v262 != v263);
        v246[40 * v255 + 16] = 0;
      }
      *(float *)v247.f64 = (float)(unint64_t)(v264 >> 2);
      *v265 = vdivq_f64(v270, (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)v247.f64), 0));
      v273 = &v246[40 * v255];
      v274 = vdiv_f32(v269, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v247.f64[0], 0));
      *(float32x2_t *)(v273 + 20) = v274;
      v275 = (float32x2_t *)(v273 + 20);
      v275[-1].i8[4] = 0;
      v276 = (int32x2_t)vmul_f32(v274, v274);
      *(float *)v276.i32 = vmlas_n_f32(*(float *)&v276.i32[1], v274.f32[0], v274.f32[0]);
      v275[1].i32[0] = v276.i32[0];
      v275[1].f32[1] = sqrtf(*(float *)v276.i32);
      if (*(float *)v276.i32 > 0.0)
        *v275 = vdiv_f32(v274, (float32x2_t)vdup_lane_s32(v276, 0));
      v275[-1].i8[4] = 1;
      ++v255;
    }
    while (v255 != 5);
LABEL_233:
    v253 = &v359;
    v254 = &v360;
  }
  v277 = *((float *)v246 + 5);
  v278 = *((float *)v246 + 6);
  v279 = *((float *)v246 + 15);
  v280 = *((float *)v246 + 16);
  v281 = v277 * v280 - v279 * v278;
  if (v281 == 0.0)
    goto LABEL_248;
  v282 = *((double *)v246 + 1);
  v283 = (v279 * (v282 - *((double *)v246 + 6)) - (*(double *)v246 - *((double *)v246 + 5)) * v280) / v281;
  v284 = v283;
  *(double *)__p = *(double *)v246 + v284 * v277;
  *(double *)&__p[1] = v282 + v284 * v278;
  v285 = (uint64_t)*v254;
  v286 = *v253 - (_BYTE *)*v254;
  if (v286 == 80)
    goto LABEL_285;
  v287 = 0xCCCCCCCCCCCCCCCDLL * (v286 >> 3);
  if (v287 < 2)
    goto LABEL_285;
  v288 = *(float *)(v285 + 60);
  v289 = *(float *)(v285 + 64);
  v290 = *(float *)(v285 + 100);
  v291 = *(float *)(v285 + 104);
  v292 = v288 * v291 - v290 * v289;
  if (v292 == 0.0)
  {
LABEL_248:
    v333 = 0;
    goto LABEL_249;
  }
  v294 = *(double *)(v285 + 40);
  v293 = *(double *)(v285 + 48);
  v296 = *(double *)(v285 + 80);
  v295 = *(double *)(v285 + 88);
  v297 = (v290 * (v293 - v295) - (v294 - v296) * v291) / v292;
  v298 = v297;
  *(double *)v384 = v294 + v298 * v288;
  *(double *)&v384[8] = v293 + v298 * v289;
  if (v286 == 120 || v287 < 3)
LABEL_285:
    sub_1BE87C2E0();
  v299 = *(float *)(v285 + 140);
  v300 = *(float *)(v285 + 144);
  v301 = v290 * v300 - v299 * v291;
  if (v301 == 0.0)
    goto LABEL_248;
  v302 = (v299 * (v295 - *(double *)(v285 + 128)) - (v296 - *(double *)(v285 + 120)) * v300) / v301;
  v303 = v302;
  *(double *)&v384[16] = v296 + v303 * v290;
  v385 = v295 + v303 * v291;
  if (v286 == 160 || v287 < 4)
    goto LABEL_285;
  if (!Projector::intersectionWith(v285 + 120, v285 + 160, &v386))
    goto LABEL_248;
  if (v287 < 5)
    goto LABEL_285;
  if (!Projector::intersectionWith(v285 + 160, v285, &v388))
    goto LABEL_248;
  v304 = __p[0];
  v305 = __p[1];
  v306 = *(_OWORD *)v384;
  v307 = (float *)operator new(4uLL);
  v308 = *(double *)&v304 - *(double *)&v306;
  v309 = *(double *)&v305 - *((double *)&v306 + 1);
  *v307 = sqrtf((float)(v309 * v309) + (float)(v308 * v308));
  v311 = *(double *)&v384[16];
  v310 = v385;
  v312 = (float *)operator new(8uLL);
  v313 = *(double *)&v306 - v311;
  v314 = *((double *)&v306 + 1) - v310;
  *v312 = *v307;
  v312[1] = sqrtf((float)(v314 * v314) + (float)(v313 * v313));
  operator delete(v307);
  v316 = *(double *)&v384[16];
  v315 = v385;
  v318 = v386;
  v317 = v387;
  v319 = (float *)operator new(0x10uLL);
  v320 = v316 - v318;
  v321 = v315 - v317;
  v319[2] = sqrtf((float)(v321 * v321) + (float)(v320 * v320));
  *(_QWORD *)v319 = *(_QWORD *)v312;
  operator delete(v312);
  v322 = v388;
  v323 = v389;
  v324 = v386 - v388;
  v325 = v387 - v389;
  v319[3] = sqrtf((float)(v325 * v325) + (float)(v324 * v324));
  v327 = __p[0];
  v326 = __p[1];
  v328 = (float *)operator new(0x20uLL);
  v329 = v322 - *(double *)&v327;
  v330 = v323 - *(double *)&v326;
  v331 = sqrtf((float)(v330 * v330) + (float)(v329 * v329));
  v332 = *((_DWORD *)v319 + 2);
  v328[3] = v319[3];
  v328[4] = v331;
  *((_DWORD *)v328 + 2) = v332;
  *(_QWORD *)v328 = *(_QWORD *)v319;
  v358 = v328;
  operator delete(v319);
  std::__sort<std::__less<float,float> &,float *>();
  v333 = v358;
  v334 = v358[1];
  if (v334 >= 0.01)
  {
    v335 = (float)((float)(v358[4] / *v358) + (float)(v358[3] / v334)) * 0.5;
    goto LABEL_250;
  }
LABEL_249:
  v335 = 1000.0;
LABEL_250:
  v394 = 2.0 - v335;
  v395 = 1065353216;
  v380 = xmmword_1BE8E0C84;
  v381 = unk_1BE8E0C94;
  v382 = -1065301688;
  cblas_sdot_NEWLAPACK();
  v2 = v336;
  if (v333)
    operator delete(v333);
  if (v360)
    operator delete(v360);
  if (v367)
  {
    v368 = (uint64_t)v367;
    operator delete(v367);
  }
LABEL_256:
  operator delete(v354);
  v337 = (char *)v371;
  if (v371)
  {
    v338 = v372;
    v339 = v371;
    if (v372 != v371)
    {
      v340 = v372;
      do
      {
        v342 = (void *)*((_QWORD *)v340 - 3);
        v340 -= 24;
        v341 = v342;
        if (v342)
        {
          *((_QWORD *)v338 - 2) = v341;
          operator delete(v341);
        }
        v338 = v340;
      }
      while (v340 != v337);
      v339 = v371;
    }
    v372 = v337;
    operator delete(v339);
  }
  if (v374)
    operator delete(v374);
  v343 = (char *)v377;
  if (v377)
  {
    v344 = v378;
    v345 = v377;
    if (v378 != v377)
    {
      v346 = v378;
      do
      {
        v348 = (void *)*((_QWORD *)v346 - 3);
        v346 -= 24;
        v347 = v348;
        if (v348)
        {
          *((_QWORD *)v344 - 2) = v347;
          operator delete(v347);
        }
        v344 = v346;
      }
      while (v346 != v343);
      v345 = v377;
    }
    v378 = v343;
    operator delete(v345);
  }
  return v2;
}

void sub_1BE8A2268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a26)
    operator delete(a26);
  operator delete(a13);
  sub_1BE63CEBC(&a30);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  sub_1BE63CEBC(&a36);
  _Unwind_Resume(a1);
}

void sub_1BE8A23B4(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "CHPentagon");
}

void sub_1BE8A2454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A2468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8A2854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE8A2B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8A2C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8A2C6C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 24), a2);
}

void sub_1BE8A2D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8A2D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A2DA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A2E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8A3074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE8A313C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int isTopOriginal;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  _BOOL4 v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char isEqual;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t k;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t j;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  double v233;
  double v234;
  double v235;
  double v236;
  id v237;
  id v238;
  char v239;
  unint64_t i;
  id v241;
  id v242;
  _OWORD v243[8];
  uint8_t buf[4];
  uint64_t v245;
  __int16 v246;
  uint64_t v247;
  uint64_t v248;

  v248 = *MEMORY[0x1E0C80C00];
  v241 = a2;
  v242 = a3;
  v237 = a4;
  v238 = a5;
  objc_opt_self();
  v13 = objc_msgSend_count(v241, v8, v9, v10, v11, v12);
  if (v13 != objc_msgSend_count(v242, v14, v15, v16, v17, v18))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v24 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v245 = objc_msgSend_count(v241, v25, v26, v27, v28, v29);
      v246 = 2048;
      v247 = objc_msgSend_count(v242, v30, v31, v32, v33, v34);
      _os_log_impl(&dword_1BE607000, v24, OS_LOG_TYPE_FAULT, "Number of corrected and raw tokens must match: %lu != %lu.", buf, 0x16u);
    }

  }
  v35 = 0;
  v239 = 1;
  v36 = 1;
  v37 = 1;
  while (v35 < objc_msgSend_count(v242, v19, v20, v21, v22, v23))
  {
    objc_msgSend_objectAtIndexedSubscript_(v242, v38, v35, v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v241, v44, v35, v45, v46, v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    isTopOriginal = objc_msgSend_isTopOriginal(v43, v49, v50, v51, v52, v53);
    if (objc_msgSend_isOriginal(v43, v55, v56, v57, v58, v59))
    {
      objc_msgSend_modelScore(v43, v60, v61, v62, v63, v64);
      v66 = v65 >= 0.8;
    }
    else
    {
      v66 = 0;
    }
    objc_msgSend_string(v43, v60, v61, v62, v63, v64);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v48, v68, v69, v70, v71, v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    isEqual = objc_msgSend_isEqual_(v67, v74, (uint64_t)v73, v75, v76, v77);

    v37 &= isTopOriginal;
    v36 &= v66;
    v239 &= isEqual;
    ++v35;
  }
  if (((v37 | v36) & 1) != 0)
  {
    if ((v239 & 1) != 0)
    {
      for (i = 0; i < objc_msgSend_count(v242, v38, v39, v40, v41, v42); ++i)
      {
        objc_msgSend_objectAtIndexedSubscript_(v242, v79, i, v80, v81, v82);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v241, v84, i, v85, v86, v87);
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_string(v88, v89, v90, v91, v92, v93);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeIndexes(v88, v95, v96, v97, v98, v99);
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        v106 = objc_msgSend_wordID(v88, v101, v102, v103, v104, v105);
        objc_msgSend_modelScore(v88, v107, v108, v109, v110, v111);
        v236 = v112;
        objc_msgSend_recognitionScore(v88, v113, v114, v115, v116, v117);
        v235 = v118;
        objc_msgSend_combinedScore(v88, v119, v120, v121, v122, v123);
        v234 = v124;
        objc_msgSend_alignmentScore(v88, v125, v126, v127, v128, v129);
        v233 = v130;
        v136 = objc_msgSend_properties(v88, v131, v132, v133, v134, v135);
        objc_msgSend_recognizerSourceLocale(v88, v137, v138, v139, v140, v141);
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        v148 = objc_msgSend_inputSources(v83, v143, v144, v145, v146, v147);
        v154 = objc_msgSend_substrokeCount(v88, v149, v150, v151, v152, v153);
        objc_msgSend_bounds(v88, v155, v156, v157, v158, v159);
        v161 = v160;
        v163 = v162;
        v165 = v164;
        v167 = v166;
        objc_msgSend_originalBounds(v88, v168, v169, v170, v171, v172);
        v179 = v178;
        v181 = v180;
        v183 = v182;
        v185 = v184;
        if (v88)
          objc_msgSend_principalLines(v88, v173, v174, v175, v176, v177);
        else
          memset(v243, 0, sizeof(v243));
        objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v173, (uint64_t)v94, (uint64_t)v100, v106, v136, v142, v148, v236, v235, v234, v233, v161, v163, v165, v167, v154, v179, v181,
          v183,
          v185,
          v243);
        v186 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_addObject_(v237, v187, (uint64_t)v186, v188, v189, v190);
        objc_msgSend_addObject_(v238, v191, (uint64_t)v186, v192, v193, v194);

      }
    }
    else
    {
      for (j = 0; j < objc_msgSend_count(v242, v38, v39, v40, v41, v42); ++j)
      {
        objc_msgSend_objectAtIndexedSubscript_(v242, v215, j, v216, v217, v218);
        v219 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v241, v220, j, v221, v222, v223);
        v224 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v237, v225, (uint64_t)v224, v226, v227, v228);
        objc_msgSend_addObject_(v238, v229, (uint64_t)v219, v230, v231, v232);

      }
    }
  }
  else
  {
    for (k = 0; k < objc_msgSend_count(v242, v38, v39, v40, v41, v42); ++k)
    {
      objc_msgSend_objectAtIndexedSubscript_(v242, v196, k, v197, v198, v199);
      v200 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v241, v201, k, v202, v203, v204);
      v205 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v237, v206, (uint64_t)v205, v207, v208, v209);
      objc_msgSend_addObject_(v238, v210, (uint64_t)v205, v211, v212, v213);

    }
  }

}

void sub_1BE8A365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE8A37FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8A380C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A39BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

id sub_1BE8A3A04(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v7 = a2;
  v8 = a3;
  v12 = a4;
  if (a1)
  {
    if (v8)
    {
      objc_msgSend_process_options_(v8, v9, (uint64_t)v7, (uint64_t)v12, v10, v11);
      v13 = objc_claimAutoreleasedReturnValue();

      v7 = (id)v13;
    }
    v7 = v7;
    a1 = v7;
  }

  return a1;
}

void sub_1BE8A3A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8A3C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A3CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A3CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A3CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A3CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A3D00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A3D14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A3D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8A3D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A4340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE8A45E0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  CHTokenizedTextResultToken *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  _OWORD v115[9];

  v7 = a2;
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v7, v4, v5, v6);
  }
  else
  {
    v8 = [CHTokenizedTextResultToken alloc];
    objc_msgSend_string(v7, v9, v10, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeIndexes(v7, v15, v16, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend_wordID(v7, v21, v22, v23, v24, v25);
    objc_msgSend_modelScore(v7, v27, v28, v29, v30, v31);
    v114 = v32;
    objc_msgSend_recognitionScore(v7, v33, v34, v35, v36, v37);
    v113 = v38;
    objc_msgSend_combinedScore(v7, v39, v40, v41, v42, v43);
    v112 = v44;
    objc_msgSend_alignmentScore(v7, v45, v46, v47, v48, v49);
    v111 = v50;
    v56 = objc_msgSend_properties(v7, v51, v52, v53, v54, v55);
    objc_msgSend_recognizerSourceLocale(v7, v57, v58, v59, v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = objc_msgSend_inputSources(v7, v63, v64, v65, v66, v67);
    v74 = objc_msgSend_substrokeCount(v7, v69, v70, v71, v72, v73);
    objc_msgSend_bounds(v7, v75, v76, v77, v78, v79);
    v81 = v80;
    v83 = v82;
    v85 = v84;
    v87 = v86;
    objc_msgSend_originalBounds(v7, v88, v89, v90, v91, v92);
    v99 = v98;
    v101 = v100;
    v103 = v102;
    v105 = v104;
    if (v7)
      objc_msgSend_principalLines(v7, v93, v94, v95, v96, v97);
    else
      memset(v115, 0, 128);
    v106 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v8, v93, (uint64_t)v14, (uint64_t)v20, v26, v56, v62, v68 | 4, v114, v113, v112, v111, v81, v83, v85, v87, v74, v99, v101,
                     v103,
                     v105,
                     v115);

    objc_msgSend_addObject_(*(void **)(a1 + 32), v107, (uint64_t)v106, v108, v109, v110);
  }

}

void sub_1BE8A47CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A47E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A47F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8A4808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8A4824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8A483C(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v5;
  CHTokenizedTextResultToken *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  unint64_t i;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;
  _OWORD v151[9];

  v5 = a2;
  v6 = [CHTokenizedTextResultToken alloc];
  objc_msgSend_string(v5, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexes(v5, v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend_wordID(v5, v19, v20, v21, v22, v23);
  objc_msgSend_modelScore(v5, v25, v26, v27, v28, v29);
  v149 = v30;
  objc_msgSend_recognitionScore(v5, v31, v32, v33, v34, v35);
  v148 = v36;
  objc_msgSend_combinedScore(v5, v37, v38, v39, v40, v41);
  v147 = v42;
  objc_msgSend_alignmentScore(v5, v43, v44, v45, v46, v47);
  v146 = v48;
  v54 = objc_msgSend_properties(v5, v49, v50, v51, v52, v53);
  objc_msgSend_recognizerSourceLocale(v5, v55, v56, v57, v58, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = objc_msgSend_inputSources(v5, v61, v62, v63, v64, v65);
  v72 = objc_msgSend_substrokeCount(v5, v67, v68, v69, v70, v71);
  objc_msgSend_bounds(v5, v73, v74, v75, v76, v77);
  v79 = v78;
  v81 = v80;
  v83 = v82;
  v85 = v84;
  objc_msgSend_originalBounds(v5, v86, v87, v88, v89, v90);
  v97 = v96;
  v99 = v98;
  v101 = v100;
  v103 = v102;
  if (v5)
    objc_msgSend_principalLines(v5, v91, v92, v93, v94, v95);
  else
    memset(v151, 0, 128);
  v104 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v6, v91, (uint64_t)v12, (uint64_t)v18, v24, v54, v60, v66 | 4, v149, v148, v147, v146, v79, v81, v83, v85, v72, v97, v99,
                   v101,
                   v103,
                   v151);

  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v105, *a4, v106, v107, v108);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_textTokenRows(v109, v110, v111, v112, v113, v114);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v115, v116, a4[1], v117, v118, v119);
  v120 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v121, v122, v123, v124, v125);
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i < objc_msgSend_count(v120, v126, v127, v128, v129, v130); ++i)
  {
    if (i == a4[2])
    {
      objc_msgSend_addObject_(v131, v133, (uint64_t)v104, v134, v135, v136);
    }
    else
    {
      objc_msgSend_objectAtIndex_(v120, v133, i, v134, v135, v136);
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v131, v138, (uint64_t)v137, v139, v140, v141);

    }
  }
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v133, *a4, v134, v135, v136);
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setTokenRowWithTokens_atIndex_(v142, v143, (uint64_t)v131, a4[1], v144, v145);

}

void sub_1BE8A4AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE8A4B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8A512C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE8A52C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("0123456789°"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568DC0;
  qword_1EF568DC0 = v6;

}

uint64_t sub_1BE8A52F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1BE8A5300(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8A5540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE8A5610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHLexiconCorrectionStep;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

id sub_1BE8A563C(uint64_t a1, void *a2, char a3, char a4, uint64_t *a5, _QWORD *a6, void *a7, void *a8, char a9)
{
  id v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int PartialMatchInPhraseLexicon_token_contextBeforeToken;
  _BOOL4 v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSString *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSCharacterSet *v48;
  char v49;
  int v50;
  int v51;
  int v52;
  id v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  __CFString *v88;
  __CFString *v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  void *v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  id v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  void *v230;
  void *v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  BOOL v236;
  int v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  const char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void *v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int isEqualToString;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  const char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void *v327;
  const char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  const char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  void *v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  const char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  void *v367;
  const char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _BOOL4 v372;
  uint64_t v373;
  int v374;
  int v375;
  const char *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  id v381;
  BOOL v382;
  uint64_t *v384;
  const char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  NSObject *v391;
  const char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  double v403;
  double v404;
  double v405;
  double v406;
  unsigned int v407;
  void *v408;
  void *v409;
  __CFString *v410;
  id v411;
  _BOOL4 v412;
  int v413;
  int v414;
  _QWORD *v415;
  uint64_t *v416;
  void *v417;
  void *v418;
  char v419;
  void *v420;
  id v421;
  void *v422;
  void *v423;
  __int16 v424;
  uint64_t v425;
  uint64_t v426;
  char v427;
  unsigned __int8 v428;
  char v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  __int16 v434;
  uint8_t buf[32];
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  uint64_t v442;

  v442 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  v17 = a7;
  v421 = a8;
  v21 = *(_DWORD *)(a1 + 12);
  v434 = 0;
  v432 = 0;
  v433 = 0x7FFFFFFFFFFFFFFFLL;
  v430 = 0;
  v431 = 0x7FFFFFFFFFFFFFFFLL;
  v429 = 0;
  v22 = *(_QWORD *)(a1 + 24);
  v423 = v16;
  v417 = v17;
  v419 = a4;
  v413 = v21;
  if (!v22)
  {
    v418 = 0;
    v428 = 0;
    v427 = 0;
LABEL_8:
    v422 = 0;
    goto LABEL_9;
  }
  BYTE2(v400) = v21 == 0;
  BYTE1(v400) = a4;
  LOBYTE(v400) = a3;
  objc_msgSend_lexiconCorrectionsForToken_locale_lexicon_lmVocabulary_ovsStringChecker_textReplacements_consumableStrokesSet_minimumTokenScore_activeHistoryRange_outBestTokenScore_shouldCapitalizeWord_shouldSkipEntryCorrection_allowFullCapsCorrections_minimalLengthForLowConfidenceCorrections_lowConfidenceThreshold_minimalLengthForCustomCapitalizationCorrections_outBestTokenIndex_outFoundTokenInLexicon_outFoundCaseMatchingTokenInLexicon_outCorrectionFromOutOfContextEntry_(CHLanguageUtilities, v18, (uint64_t)v16, *(_QWORD *)(a1 + 16), v22, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v17, 0.0, -4.0, *(_QWORD *)(a1 + 80), 0x7FFFFFFFFFFFFFFFLL, 0, &v430, v400, 4, 3, &v431, (char *)&v434 + 1,
    &v434,
    &v429);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v428 = 0;
  v427 = 0;
  if (v23)
  {
    v418 = v23;
    if (objc_msgSend_count(v23, v18, v24, v19, v25, v20) && (_BYTE)v434)
    {
      v422 = 0;
      if (!v429)
        goto LABEL_11;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  v418 = 0;
  v422 = 0;
LABEL_9:
  v26 = *(_QWORD *)(a1 + 104);
  if (v26)
  {
    BYTE2(v400) = v413 == 0;
    BYTE1(v400) = a4;
    LOBYTE(v400) = a3;
    objc_msgSend_lexiconCorrectionsForToken_locale_lexicon_lmVocabulary_ovsStringChecker_textReplacements_consumableStrokesSet_minimumTokenScore_activeHistoryRange_outBestTokenScore_shouldCapitalizeWord_shouldSkipEntryCorrection_allowFullCapsCorrections_minimalLengthForLowConfidenceCorrections_lowConfidenceThreshold_minimalLengthForCustomCapitalizationCorrections_outBestTokenIndex_outFoundTokenInLexicon_outFoundCaseMatchingTokenInLexicon_outCorrectionFromOutOfContextEntry_(CHLanguageUtilities, v18, (uint64_t)v16, *(_QWORD *)(a1 + 16), v26, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0, 0.0, -4.0, *(_QWORD *)(a1 + 80), 0x7FFFFFFFFFFFFFFFLL, 0, &v432, v400, 4, 3, &v433, &v428,
      &v427,
      0);
    v422 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_11:
  v27 = *(_QWORD *)(a1 + 40);
  v415 = a6;
  v416 = a5;
  if (v27
    && (objc_msgSend_findPartialMatchInPhraseLexicon_token_contextBeforeToken_(CHLanguageUtilities, v18, v27, (uint64_t)v16, (uint64_t)v421, v20) & 1) != 0)
  {
    PartialMatchInPhraseLexicon_token_contextBeforeToken = 1;
    v30 = 0;
    v425 = 0x7FFFFFFFFFFFFFFFLL;
    v426 = 0;
    v424 = 0;
    if (!a9)
      goto LABEL_23;
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 32);
    if (v28)
    {
      PartialMatchInPhraseLexicon_token_contextBeforeToken = objc_msgSend_findPartialMatchInPhraseLexicon_token_contextBeforeToken_(CHLanguageUtilities, v18, v28, (uint64_t)v16, (uint64_t)v421, v20);
      v30 = 0;
      v425 = 0x7FFFFFFFFFFFFFFFLL;
      v426 = 0;
      v424 = 0;
      if (!a9)
        goto LABEL_23;
    }
    else
    {
      PartialMatchInPhraseLexicon_token_contextBeforeToken = 0;
      v30 = 0;
      v425 = 0x7FFFFFFFFFFFFFFFLL;
      v426 = 0;
      v424 = 0;
      if (!a9)
        goto LABEL_23;
    }
  }
  if (*(_BYTE *)(a1 + 9))
  {
    objc_msgSend_string(v16, v18, v28, v19, v26, v20);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3780], v32, v33, v34, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByTrimmingCharactersInSet_(v31, v38, (uint64_t)v37, v39, v40, v41);
    v42 = (NSString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_alphanumericCharacterSet(MEMORY[0x1E0CB3500], v43, v44, v45, v46, v47);
    v48 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
    v30 = isStringEntirelyFromSet(v42, v48);

    v16 = v423;
  }
  else
  {
    v30 = 0;
  }
LABEL_23:
  v49 = a3;
  v50 = HIBYTE(v434);
  v51 = !v30;
  if (HIBYTE(v434))
    v51 = 1;
  v52 = v428;
  if (v428)
    v51 = 1;
  if (((v51 | PartialMatchInPhraseLexicon_token_contextBeforeToken) & 1) != 0)
  {
    v420 = 0;
  }
  else
  {
    v53 = v16;
    v411 = v421;
    objc_msgSend_string(v53, v54, v55, v56, v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3500], v60, v61, v62, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    v66 = v49;
    objc_msgSend_stringByTrimmingCharactersInSet_(v59, v67, (uint64_t)v65, v68, v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();

    if ((unint64_t)objc_msgSend_length(v71, v72, v73, v74, v75, v76) >= 3)
    {
      objc_msgSend_spellCheckingLocaleForRecognitionLocale_string_(CHRecognizerConfiguration, v77, *(_QWORD *)(a1 + 16), (uint64_t)v59, v78, v79);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      v409 = v81;
      v87 = objc_msgSend_properties(v53, v82, v83, v84, v85, v86);
      v88 = CFSTR(" ");
      if ((v87 & 0x20) == 0)
        v88 = &stru_1E77F6F28;
      v89 = v88;
      v90 = *(void **)(a1 + 64);
      v410 = v89;
      objc_msgSend_languageCode(v81, v91, v92, v93, v94, v95);
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_topCorrectionForString_contextBeforeToken_contextSeparator_shouldUseErrorModel_forLanguage_(v90, v97, (uint64_t)v59, (uint64_t)v411, (uint64_t)v89, 1, v96);
      v98 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v99, v100, v101, v102, v103);
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      v109 = objc_msgSend_rangeOfCharacterFromSet_(v98, v105, (uint64_t)v104, v106, v107, v108);

      v80 = 0;
      if (v109 == 0x7FFFFFFFFFFFFFFFLL && v98)
      {
        if ((objc_msgSend_isEqualToString_(v98, v110, (uint64_t)v59, v111, v112, v113) & 1) != 0
          || (v114 = editDistance((NSString *)v59, (NSString *)v98),
              v120 = objc_msgSend_length(v59, v115, v116, v117, v118, v119),
              v114 >= 3)
          && v114 > v120 / 3)
        {
          v80 = 0;
        }
        else
        {
          objc_msgSend_strokeIndexes(v53, v121, v122, v123, v124, v125);
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          v407 = objc_msgSend_wordID(v53, v127, v128, v129, v130, v131);
          objc_msgSend_modelScore(v53, v132, v133, v134, v135, v136);
          v406 = v137;
          objc_msgSend_recognitionScore(v53, v138, v139, v140, v141, v142);
          v405 = v143;
          objc_msgSend_combinedScore(v53, v144, v145, v146, v147, v148);
          v404 = v149;
          objc_msgSend_alignmentScore(v53, v150, v151, v152, v153, v154);
          v403 = v155;
          v402 = objc_msgSend_properties(v53, v156, v157, v158, v159, v160);
          objc_msgSend_recognizerSourceLocale(v53, v161, v162, v163, v164, v165);
          v408 = (void *)objc_claimAutoreleasedReturnValue();
          v171 = objc_msgSend_inputSources(v53, v166, v167, v168, v169, v170);
          v401 = objc_msgSend_substrokeCount(v53, v172, v173, v174, v175, v176);
          objc_msgSend_bounds(v53, v177, v178, v179, v180, v181);
          v183 = v182;
          v185 = v184;
          v187 = v186;
          v189 = v188;
          objc_msgSend_originalBounds(v53, v190, v191, v192, v193, v194);
          v201 = v200;
          v203 = v202;
          v205 = v204;
          v207 = v206;
          if (v53)
          {
            objc_msgSend_principalLines(v53, v195, v196, v197, v198, v199);
          }
          else
          {
            v440 = 0u;
            v441 = 0u;
            v438 = 0u;
            v439 = 0u;
            v436 = 0u;
            v437 = 0u;
            memset(buf, 0, sizeof(buf));
          }
          objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v195, (uint64_t)v98, (uint64_t)v126, v407, v402, v408, v171 | 0x20, v406, v405, v404, v403, v183, v185, v187, v189, v401, v201, v203,
            v205,
            v207,
            buf);
          v80 = (void *)objc_claimAutoreleasedReturnValue();

        }
      }

    }
    else
    {
      v80 = 0;
    }

    if (v80)
    {
      BYTE2(v400) = v413 == 0;
      BYTE1(v400) = v419;
      LOBYTE(v400) = v66;
      objc_msgSend_lexiconCorrectionsForToken_locale_lexicon_lmVocabulary_ovsStringChecker_textReplacements_consumableStrokesSet_minimumTokenScore_activeHistoryRange_outBestTokenScore_shouldCapitalizeWord_shouldSkipEntryCorrection_allowFullCapsCorrections_minimalLengthForLowConfidenceCorrections_lowConfidenceThreshold_minimalLengthForCustomCapitalizationCorrections_outBestTokenIndex_outFoundTokenInLexicon_outFoundCaseMatchingTokenInLexicon_outCorrectionFromOutOfContextEntry_(CHLanguageUtilities, v208, (uint64_t)v80, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v417, 0.0, -4.0, *(_QWORD *)(a1 + 80), 0x7FFFFFFFFFFFFFFFLL, 0, &v426, v400, 4, 3, &v425, (char *)&v424 + 1,
        &v424,
        0);
      v209 = (void *)objc_claimAutoreleasedReturnValue();
      v420 = 0;
      if (objc_msgSend_count(v209, v210, v211, v212, v213, v214) && HIBYTE(v424))
      {
        if (objc_msgSend_count(v422, v215, v216, v217, v218, v219))
        {
          objc_msgSend_objectAtIndexedSubscript_(v422, v220, v433, v221, v222, v223);
          v224 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v224 = v53;
        }
        v229 = v224;
        v230 = (void *)MEMORY[0x1E0C99D20];
        objc_msgSend_objectAtIndexedSubscript_(v209, v225, v425, v226, v227, v228);
        v231 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_arrayWithObjects_(v230, v232, (uint64_t)v231, v233, v234, v235, v229, 0);
        v420 = (void *)objc_claimAutoreleasedReturnValue();

        v425 = 0;
      }

    }
    else
    {
      v420 = 0;
    }

    v50 = HIBYTE(v434);
    v52 = v428;
  }
  if (v50)
    v236 = v52 == 0;
  else
    v236 = 1;
  v237 = !v236;
  v414 = v237;
  if (objc_msgSend_count(v418, v18, v28, v19, v26, v20))
  {
    objc_msgSend_objectAtIndexedSubscript_(v418, v238, v431, v240, v241, v242);
    v243 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v243, v244, v245, v246, v247, v248);
    v249 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_length(v249, v250, v251, v252, v253, v254);
    objc_msgSend_string(v423, v255, v256, v257, v258, v259);
    v260 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_length(v260, v261, v262, v263, v264, v265);
    v271 = objc_msgSend_length(v249, v266, v267, v268, v269, v270);
    objc_msgSend_string(v423, v272, v273, v274, v275, v276);
    v277 = (void *)objc_claimAutoreleasedReturnValue();
    v283 = objc_msgSend_length(v277, v278, v279, v280, v281, v282);

    objc_msgSend_string(v423, v284, v285, v286, v287, v288);
    v289 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v249, v290, (uint64_t)v289, v291, v292, v293);

    objc_msgSend_string(v423, v295, v296, v297, v298, v299);
    v300 = (void *)objc_claimAutoreleasedReturnValue();
    v412 = objc_msgSend_caseInsensitiveCompare_(v249, v301, (uint64_t)v300, v302, v303, v304) == 0;

    v305 = v271 - v283;
  }
  else
  {
    isEqualToString = 0;
    v412 = 0;
    v305 = 0;
  }
  if (objc_msgSend_count(v422, v238, v239, v240, v241, v242))
  {
    objc_msgSend_objectAtIndexedSubscript_(v422, v306, v433, v307, v308, v309);
    v310 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v310, v311, v312, v313, v314, v315);
    v316 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_length(v316, v317, v318, v319, v320, v321);
    objc_msgSend_string(v423, v322, v323, v324, v325, v326);
    v327 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_length(v327, v328, v329, v330, v331, v332);
    v338 = objc_msgSend_length(v316, v333, v334, v335, v336, v337);
    objc_msgSend_string(v423, v339, v340, v341, v342, v343);
    v344 = (void *)objc_claimAutoreleasedReturnValue();
    v350 = objc_msgSend_length(v344, v345, v346, v347, v348, v349);

    objc_msgSend_string(v423, v351, v352, v353, v354, v355);
    v356 = (void *)objc_claimAutoreleasedReturnValue();
    v361 = objc_msgSend_isEqualToString_(v316, v357, (uint64_t)v356, v358, v359, v360);

    objc_msgSend_string(v423, v362, v363, v364, v365, v366);
    v367 = (void *)objc_claimAutoreleasedReturnValue();
    v372 = objc_msgSend_caseInsensitiveCompare_(v316, v368, (uint64_t)v367, v369, v370, v371) == 0;

    v373 = v338 - v350;
  }
  else
  {
    v373 = 0;
    v361 = 0;
    v372 = 0;
  }
  v374 = 0;
  v375 = v414;
  if (v427)
    v375 = 0;
  if (v375 == 1 && v305 <= v373 && v361 ^ 1 | isEqualToString)
    v374 = v412 || !v372;
  if (v420)
  {
    v381 = v420;
    if (v416)
      *v416 = v425;
    if (v415)
      *v415 = v426;
    if (!v416)
      goto LABEL_106;
LABEL_99:
    if (objc_msgSend_count(v381, v376, v377, v378, v379, v380))
    {
      v390 = *v416;
      if (v390 >= objc_msgSend_count(v381, v385, v386, v387, v388, v389))
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v391 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v391, OS_LOG_TYPE_FAULT))
        {
          v397 = *v416;
          v398 = objc_msgSend_count(v381, v392, v393, v394, v395, v396);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v397;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 0;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v398;
          _os_log_impl(&dword_1BE607000, v391, OS_LOG_TYPE_FAULT, "The best token index %ld is not contained in the returned tokens range %d, %ld", buf, 0x1Cu);
        }

      }
    }
    goto LABEL_106;
  }
  if (v429 && v428)
    goto LABEL_94;
  if (v50)
    v382 = v52 == 0;
  else
    v382 = 0;
  if (v382 || v434 != 0)
    v374 = 1;
  if (v374 != 1)
  {
LABEL_94:
    v381 = v422;
    if (v415)
      *v415 = v432;
    if (v416)
    {
      v384 = &v433;
      goto LABEL_98;
    }
  }
  else
  {
    v381 = v418;
    if (v415)
      *v415 = v430;
    if (v416)
    {
      v384 = &v431;
LABEL_98:
      *v416 = *v384;
      goto LABEL_99;
    }
  }
LABEL_106:

  return v381;
}

void sub_1BE8A61FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,void *a37,void *a38,void *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  _Unwind_Resume(a1);
}

id sub_1BE8A6430(uint64_t a1, void *a2, int a3, void *a4, _BOOL4 a5, void *a6, int a7, char a8)
{
  id v13;
  id v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSCharacterSet *v41;
  _BOOL4 v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSCharacterSet *v48;
  _BOOL4 v49;
  char HasMatchingString;
  uint64_t v51;
  _BOOL4 v52;
  _BOOL4 v53;
  int v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSCharacterSet *v60;
  BOOL v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  NSCharacterSet *v69;
  _BOOL4 v70;
  char v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  void *v198;
  id v199;
  char v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int hasPrefix;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  double v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  double v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  double v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  double v272;
  const char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  const char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  const char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  uint64_t v329;
  void *v330;
  const char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  const char *v336;
  uint64_t v337;
  const char *v338;
  uint64_t v339;
  void *v340;
  const char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  NSCharacterSet *v346;
  const char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  void *v359;
  const char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  const char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  void *v377;
  const char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  const char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  void *v393;
  int v394;
  int v395;
  NSString *v396;
  uint64_t v397;
  uint64_t v398;
  void *v399;
  const char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char v404;
  const char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  void *v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  const char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  double v421;
  const char *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  double v427;
  const char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  double v433;
  const char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  double v439;
  const char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  const char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  void *v451;
  const char *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  const char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  const char *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  double v469;
  double v470;
  double v471;
  double v472;
  double v473;
  double v474;
  double v475;
  double v476;
  const char *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  const char *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  double v497;
  double v498;
  double v499;
  double v500;
  double v501;
  double v502;
  double v503;
  double v504;
  void *v505;
  unsigned int v506;
  char v507;
  void *v508;
  int v509;
  double v510;
  void *v512;
  double v513;
  int v514;
  double v515;
  int isEqualToString;
  double v517;
  id v518;
  NSString *v519;
  __CFString *v520;
  unsigned int v522;
  _OWORD v523[8];
  _OWORD v524[8];
  _OWORD v525[8];
  uint64_t v526;
  uint64_t v527;
  _QWORD v528[5];
  uint64_t v529;
  uint64_t *v530;
  uint64_t v531;
  uint64_t (*v532)(uint64_t, uint64_t);
  void (*v533)(uint64_t);
  id v534;

  v13 = a2;
  v14 = a4;
  v518 = a6;
  v15 = v13;
  v21 = v15;
  v509 = a7;
  if ((a7 & 1) != 0)
    LODWORD(v22) = 1;
  else
    v22 = ((unint64_t)objc_msgSend_properties(v15, v16, v17, v18, v19, v20) >> 6) & 1;
  v514 = v22;
  v529 = 0;
  v530 = &v529;
  v531 = 0x3032000000;
  v532 = sub_1BE8A7340;
  v533 = sub_1BE8A7350;
  v534 = 0;
  v23 = objc_msgSend_length(v14, v16, v17, v18, v19, v20);
  v528[0] = MEMORY[0x1E0C809B0];
  v528[1] = 3221225472;
  v528[2] = sub_1BE8A7358;
  v528[3] = &unk_1E77F3F08;
  v528[4] = &v529;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v14, v24, 0, v23, 259, (uint64_t)v528);
  if (v14)
  {
    objc_msgSend_lastComposedCharacter(v14, v25, v26, v27, v28, v29);
    v520 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v520 = &stru_1E77F6F28;
  }
  objc_msgSend_string(v21, v25, v26, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstComposedCharacter(v30, v31, v32, v33, v34, v35);
  v519 = (NSString *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_letterCharacterSet(MEMORY[0x1E0CB3500], v36, v37, v38, v39, v40);
  v41 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  if (isStringEntirelyFromSet(v519, v41))
  {
    v42 = isCharacterLatinOrCommonScript(v519);

    if (!a3)
      goto LABEL_17;
  }
  else
  {
    v42 = 0;

    if (!a3)
      goto LABEL_17;
  }
  if (!objc_msgSend_length((void *)v530[5], v43, v44, v45, v46, v47)
    || (objc_msgSend_properties(v21, v43, v44, v45, v46, v47) & 0x20) != 0)
  {
LABEL_17:
    HasMatchingString = 0;
    v51 = a1;
    if (*(_DWORD *)(a1 + 12))
      goto LABEL_18;
LABEL_51:
    if (qword_1EF568DD8 != -1)
      dispatch_once(&qword_1EF568DD8, &unk_1E77EFB78);
    objc_msgSend_lastComposedCharacter(v14, v43, v44, v45, v46, v47);
    v340 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v341, v342, v343, v344, v345);
    v346 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
    if (isStringEntirelyFromSet((NSString *)v340, v346))
    {

    }
    else
    {
      v357 = objc_msgSend_length(v14, v347, v348, v349, v350, v351);

      if (v357)
      {
        v358 = ((unint64_t)objc_msgSend_properties(v21, v352, v353, v354, v355, v356) >> 5) & 1;
        goto LABEL_58;
      }
    }
    LODWORD(v358) = 1;
LABEL_58:
    objc_msgSend_string(v21, v352, v353, v354, v355, v356);
    v359 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByTrimmingCharactersInSet_(v359, v360, qword_1EF568DD0, v361, v362, v363);
    v364 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_firstComposedCharacter(v364, v365, v366, v367, v368, v369);
    v370 = (void *)objc_claimAutoreleasedReturnValue();
    v376 = v370;
    if ((_DWORD)v358)
    {
      objc_msgSend_uppercaseString(v370, v371, v372, v373, v374, v375);
      v377 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v376, v378, (uint64_t)v377, v379, v380, v381);

      v526 = 0;
      v527 = 0;
      if ((v514 & 1) == 0)
        goto LABEL_36;
    }
    else
    {
      isEqualToString = 0;

      v526 = 0;
      v527 = 0;
      if ((v514 & 1) == 0)
        goto LABEL_36;
    }
    goto LABEL_31;
  }
  objc_msgSend_letterCharacterSet(MEMORY[0x1E0CB3500], v43, v44, v45, v46, v47);
  v48 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  if (isStringEntirelyFromSet(&v520->isa, v48))
  {
    v49 = isCharacterLatinOrCommonScript(&v520->isa);

    if (v42 && v49)
    {
      HasMatchingString = 1;
      v51 = a1;
      if (*(_DWORD *)(a1 + 12))
        goto LABEL_18;
      goto LABEL_51;
    }
  }
  else
  {

  }
  v328 = (void *)MEMORY[0x1E0CB3940];
  v329 = v530[5];
  objc_msgSend_string(v21, v43, v44, v45, v46, v47);
  v330 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v328, v331, (uint64_t)CFSTR("%@%@"), v332, v333, v334, v329, v330);
  v335 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend_lexiconHasEntryForString_withLexicon_outHasMatchingString_(CHLanguageUtilities, v336, (uint64_t)v335, *(_QWORD *)(a1 + 24), 0, v337) & 1) != 0)
  {
    HasMatchingString = 1;

    v51 = a1;
    if (!*(_DWORD *)(a1 + 12))
      goto LABEL_51;
  }
  else
  {
    HasMatchingString = objc_msgSend_lexiconHasEntryForString_withLexicon_outHasMatchingString_(CHLanguageUtilities, v338, (uint64_t)v335, *(_QWORD *)(a1 + 104), 0, v339);

    v51 = a1;
    if (!*(_DWORD *)(a1 + 12))
      goto LABEL_51;
  }
LABEL_18:
  v507 = HasMatchingString;
  v52 = isStringEntirelyFromSet(&v520->isa, *(NSCharacterSet **)(v51 + 88));
  v53 = a5;
  if (a5)
    a5 = isStringEntirelyFromSet(&v520->isa, *(NSCharacterSet **)(a1 + 96));
  v54 = isCharacterLatinOrCommonScript(&v520->isa);
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v55, v56, v57, v58, v59);
  v60 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  v61 = isStringEntirelyFromSet(&v520->isa, v60);

  if (v61)
    LODWORD(v67) = 1;
  else
    v67 = ((unint64_t)objc_msgSend_properties(v21, v62, v63, v64, v65, v66) >> 5) & 1;
  if (*(_DWORD *)(a1 + 12) == 2)
    v68 = v67 | (v52 | ~v54) & v42;
  else
    v68 = 0;
  if (a3)
  {
    if (v14 && objc_msgSend_length(v14, v62, v63, v64, v65, v66))
    {
      objc_msgSend_newlineCharacterSet(MEMORY[0x1E0CB3500], v62, v63, v64, v65, v66);
      v69 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
      v70 = isStringEntirelyFromSet(&v520->isa, v69);

    }
    else
    {
      v70 = 1;
    }
    isEqualToString = v70 | v53 & v67 | v52 | a5 | v68;
    HasMatchingString = v507;
    v526 = 0;
    v527 = 0;
    if ((v514 & 1) == 0)
    {
LABEL_36:
      v71 = *(_BYTE *)(a1 + 9) == 0;
      if ((HasMatchingString & 1) == 0)
        goto LABEL_37;
LABEL_32:
      v72 = objc_msgSend_length(v14, v62, v63, v64, v65, v66);
      v78 = objc_msgSend_length((void *)v530[5], v73, v74, v75, v76, v77);
      objc_msgSend_substringToIndex_(v14, v79, v72 - v78, v80, v81, v82);
      v508 = (void *)objc_claimAutoreleasedReturnValue();

      v83 = (void *)MEMORY[0x1E0CB3940];
      v84 = v530[5];
      objc_msgSend_string(v21, v85, v86, v87, v88, v89);
      v505 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(v83, v90, (uint64_t)CFSTR("%@%@"), v91, v92, v93, v84, v505);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeIndexes(v21, v95, v96, v97, v98, v99);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      v106 = objc_msgSend_wordID(v21, v101, v102, v103, v104, v105);
      objc_msgSend_modelScore(v21, v107, v108, v109, v110, v111);
      v503 = v112;
      objc_msgSend_recognitionScore(v21, v113, v114, v115, v116, v117);
      v501 = v118;
      objc_msgSend_combinedScore(v21, v119, v120, v121, v122, v123);
      v499 = v124;
      objc_msgSend_alignmentScore(v21, v125, v126, v127, v128, v129);
      v497 = v130;
      v136 = objc_msgSend_properties(v21, v131, v132, v133, v134, v135);
      objc_msgSend_recognizerSourceLocale(v21, v137, v138, v139, v140, v141);
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      v148 = objc_msgSend_inputSources(v21, v143, v144, v145, v146, v147);
      v154 = objc_msgSend_substrokeCount(v21, v149, v150, v151, v152, v153);
      objc_msgSend_bounds(v21, v155, v156, v157, v158, v159);
      v161 = v160;
      v163 = v162;
      v165 = v164;
      v167 = v166;
      objc_msgSend_originalBounds(v21, v168, v169, v170, v171, v172);
      v179 = v178;
      v181 = v180;
      v183 = v182;
      v185 = v184;
      if (v21)
        objc_msgSend_principalLines(v21, v173, v174, v175, v176, v177);
      else
        memset(v525, 0, sizeof(v525));
      objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v173, (uint64_t)v94, (uint64_t)v100, v106, v136, v142, v148, v503, v501, v499, v497, v161, v163, v165, v167, v154, v179, v181,
        v183,
        v185,
        v525);
      v187 = (void *)objc_claimAutoreleasedReturnValue();

      v200 = v71;
      v199 = v508;
      sub_1BE8A563C(a1, v187, isEqualToString, v200, &v526, &v527, v518, v508, a8);
      v198 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v198, v201, v202, v203, v204, v205))
      {
        objc_msgSend_objectAtIndex_(v198, v206, v526, v207, v208, v209);
        v210 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_string(v210, v211, v212, v213, v214, v215);
        v216 = (void *)objc_claimAutoreleasedReturnValue();
        hasPrefix = objc_msgSend_hasPrefix_(v216, v217, v530[5], v218, v219, v220);

        v197 = v21;
        if (hasPrefix)
        {
          objc_msgSend_string(v210, v222, v223, v224, v225, v226);
          v227 = (void *)objc_claimAutoreleasedReturnValue();
          v233 = objc_msgSend_length((void *)v530[5], v228, v229, v230, v231, v232);
          objc_msgSend_substringFromIndex_(v227, v234, v233, v235, v236, v237);
          v512 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_strokeIndexes(v210, v238, v239, v240, v241, v242);
          v243 = (void *)objc_claimAutoreleasedReturnValue();
          v506 = objc_msgSend_wordID(v210, v244, v245, v246, v247, v248);
          objc_msgSend_modelScore(v210, v249, v250, v251, v252, v253);
          v504 = v254;
          objc_msgSend_recognitionScore(v210, v255, v256, v257, v258, v259);
          v502 = v260;
          objc_msgSend_combinedScore(v210, v261, v262, v263, v264, v265);
          v500 = v266;
          objc_msgSend_alignmentScore(v210, v267, v268, v269, v270, v271);
          v498 = v272;
          v278 = objc_msgSend_properties(v210, v273, v274, v275, v276, v277);
          objc_msgSend_recognizerSourceLocale(v210, v279, v280, v281, v282, v283);
          v284 = (void *)objc_claimAutoreleasedReturnValue();
          v290 = objc_msgSend_inputSources(v210, v285, v286, v287, v288, v289);
          v296 = objc_msgSend_substrokeCount(v210, v291, v292, v293, v294, v295);
          objc_msgSend_bounds(v210, v297, v298, v299, v300, v301);
          v303 = v302;
          v305 = v304;
          v307 = v306;
          v309 = v308;
          objc_msgSend_originalBounds(v210, v310, v311, v312, v313, v314);
          v321 = v320;
          v323 = v322;
          v325 = v324;
          v327 = v326;
          if (v210)
            objc_msgSend_principalLines(v210, v315, v316, v317, v318, v319);
          else
            memset(v524, 0, sizeof(v524));
          objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v315, (uint64_t)v512, (uint64_t)v243, v506, v278, v284, v290, v504, v502, v500, v498, v303, v305, v307, v309, v296, v321, v323,
            v325,
            v327,
            v524);
          v197 = (void *)objc_claimAutoreleasedReturnValue();

          v199 = v508;
        }

      }
      else
      {
        v197 = v21;
      }
      goto LABEL_66;
    }
  }
  else
  {
    HasMatchingString = 0;
    isEqualToString = objc_msgSend_endsWithSentenceEndPunctuation(v14, v62, v63, v64, v65, v66) | a5 | v68;
    v526 = 0;
    v527 = 0;
    if ((v514 & 1) == 0)
      goto LABEL_36;
  }
LABEL_31:
  v71 = 1;
  if ((HasMatchingString & 1) != 0)
    goto LABEL_32;
LABEL_37:
  v186 = a1;
  sub_1BE8A563C(a1, v21, isEqualToString, v71, &v526, &v527, v518, v14, a8);
  v187 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_count(v187, v188, v189, v190, v191, v192))
  {
    v197 = v21;
    goto LABEL_67;
  }
  objc_msgSend_objectAtIndex_(v187, v193, v526, v194, v195, v196);
  v197 = (void *)objc_claimAutoreleasedReturnValue();
  v198 = v21;
  v199 = v14;
LABEL_66:

  v14 = v199;
  v186 = a1;
LABEL_67:

  objc_msgSend_string(v197, v382, v383, v384, v385, v386);
  v387 = (void *)objc_claimAutoreleasedReturnValue();
  v393 = v387;
  v394 = *(_DWORD *)(v186 + 12);
  if ((v394 - 1) >= 3)
  {
    if (v394 == 4)
    {
      objc_msgSend_uppercaseStringWithLocale_(v387, v388, *(_QWORD *)(v186 + 16), v390, v391, v392);
      v398 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v394 != 5)
        goto LABEL_80;
      objc_msgSend_lowercaseStringWithLocale_(v387, v388, *(_QWORD *)(v186 + 16), v390, v391, v392);
      v398 = objc_claimAutoreleasedReturnValue();
    }
    v397 = v398;
    goto LABEL_78;
  }
  v395 = v514 ^ 1;
  if (*(_BYTE *)(v186 + 9))
    v395 = 0;
  if ((v395 | v509 & isEqualToString) == 1)
  {
    objc_msgSend_lowercaseStringWithLocale_(v387, v388, *(_QWORD *)(v186 + 16), v390, v391, v392);
    v396 = (NSString *)objc_claimAutoreleasedReturnValue();

    if (isEqualToString)
    {
      uppercaseFirstLetter(v396);
      v397 = objc_claimAutoreleasedReturnValue();
      v393 = v396;
LABEL_78:

      v393 = (void *)v397;
      goto LABEL_80;
    }
    v393 = v396;
  }
LABEL_80:
  objc_msgSend_string(v197, v388, v389, v390, v391, v392);
  v399 = (void *)objc_claimAutoreleasedReturnValue();
  v404 = objc_msgSend_isEqualToString_(v393, v400, (uint64_t)v399, v401, v402, v403);

  if ((v404 & 1) == 0)
  {
    objc_msgSend_strokeIndexes(v197, v405, v406, v407, v408, v409);
    v410 = (void *)objc_claimAutoreleasedReturnValue();
    v522 = objc_msgSend_wordID(v197, v411, v412, v413, v414, v415);
    objc_msgSend_modelScore(v197, v416, v417, v418, v419, v420);
    v517 = v421;
    objc_msgSend_recognitionScore(v197, v422, v423, v424, v425, v426);
    v515 = v427;
    objc_msgSend_combinedScore(v197, v428, v429, v430, v431, v432);
    v513 = v433;
    objc_msgSend_alignmentScore(v197, v434, v435, v436, v437, v438);
    v510 = v439;
    v445 = objc_msgSend_properties(v197, v440, v441, v442, v443, v444);
    objc_msgSend_recognizerSourceLocale(v197, v446, v447, v448, v449, v450);
    v451 = (void *)objc_claimAutoreleasedReturnValue();
    v457 = objc_msgSend_inputSources(v197, v452, v453, v454, v455, v456);
    v463 = objc_msgSend_substrokeCount(v197, v458, v459, v460, v461, v462);
    objc_msgSend_bounds(v197, v464, v465, v466, v467, v468);
    v470 = v469;
    v472 = v471;
    v474 = v473;
    v476 = v475;
    objc_msgSend_originalBounds(v197, v477, v478, v479, v480, v481);
    v488 = v487;
    v490 = v489;
    v492 = v491;
    v494 = v493;
    if (v197)
      objc_msgSend_principalLines(v197, v482, v483, v484, v485, v486);
    else
      memset(v523, 0, sizeof(v523));
    objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v482, (uint64_t)v393, (uint64_t)v410, v522, v445, v451, v457 | 0x100, v517, v515, v513, v510, v470, v472, v474, v476, v463, v488, v490,
      v492,
      v494,
      v523);
    v495 = objc_claimAutoreleasedReturnValue();

    v197 = (void *)v495;
  }

  _Block_object_dispose(&v529, 8);
  return v197;
}

void sub_1BE8A70AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29)
{
  void *v29;
  void *v30;
  uint64_t v31;

  _Block_object_dispose((const void *)(v31 - 200), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE8A7340(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE8A7350(uint64_t a1)
{

}

void sub_1BE8A7358(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  *a7 = 1;
}

void sub_1BE8A738C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3780], a2, a3, a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568DD0;
  qword_1EF568DD0 = v6;

  v8 = (void *)qword_1EF568DD0;
  objc_msgSend_symbolCharacterSet(MEMORY[0x1E0CB3500], v9, v10, v11, v12, v13);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v8, v14, (uint64_t)v18, v15, v16, v17);

}

void sub_1BE8A73F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8A7408(uint64_t a1, void *a2)
{
  NSString *v3;
  int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  unsigned int v107;
  _OWORD v108[9];

  v3 = a2;
  v4 = isCharacterLatinOrCommonScript(v3);
  v10 = v4;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) != v4
    && objc_msgSend_length(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v5, v6, v7, v8, v9))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    objc_msgSend_strokeIndexes(*(void **)(a1 + 32), v5, v11, v7, v8, v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = objc_msgSend_wordID(*(void **)(a1 + 32), v14, v15, v16, v17, v18);
    objc_msgSend_modelScore(*(void **)(a1 + 32), v19, v20, v21, v22, v23);
    v106 = v24;
    objc_msgSend_recognitionScore(*(void **)(a1 + 32), v25, v26, v27, v28, v29);
    v105 = v30;
    objc_msgSend_combinedScore(*(void **)(a1 + 32), v31, v32, v33, v34, v35);
    v104 = v36;
    objc_msgSend_alignmentScore(*(void **)(a1 + 32), v37, v38, v39, v40, v41);
    v103 = v42;
    v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    objc_msgSend_recognizerSourceLocale(*(void **)(a1 + 32), v44, v45, v46, v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend_inputSources(*(void **)(a1 + 32), v50, v51, v52, v53, v54);
    v61 = objc_msgSend_substrokeCount(*(void **)(a1 + 32), v56, v57, v58, v59, v60);
    objc_msgSend_bounds(*(void **)(a1 + 32), v62, v63, v64, v65, v66);
    v68 = v67;
    v70 = v69;
    v72 = v71;
    v74 = v73;
    objc_msgSend_originalBounds(*(void **)(a1 + 32), v75, v76, v77, v78, v79);
    v86 = v85;
    v88 = v87;
    v90 = v89;
    v92 = v91;
    v93 = *(void **)(a1 + 32);
    if (v93)
      objc_msgSend_principalLines(v93, v80, v81, v82, v83, v84);
    else
      memset(v108, 0, 128);
    objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v80, v12, (uint64_t)v13, v107, v43, v49, v55, v106, v105, v104, v103, v68, v70, v72, v74, v61, v86, v88,
      v90,
      v92,
      v108);
    v94 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_addObject_(*(void **)(a1 + 40), v95, (uint64_t)v94, v96, v97, v98);
    objc_msgSend_setString_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v99, (uint64_t)&stru_1E77F6F28, v100, v101, v102);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) &= ~0x20uLL;

  }
  objc_msgSend_appendString_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v5, (uint64_t)v3, v7, v8, v9);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v10;

}

void sub_1BE8A764C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8A7678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8A7690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8A8CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  void *v45;
  void *v46;

  _Block_object_dispose(&STACK[0x5D0], 8);
  _Unwind_Resume(a1);
}

void sub_1BE8A9384(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString *v22;
  int v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  void *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSString *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;

  v62 = a2;
  v10 = objc_msgSend_properties(v62, v5, v6, v7, v8, v9);
  objc_msgSend_string(v62, v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstComposedCharacter(v16, v17, v18, v19, v20, v21);
  v22 = (NSString *)objc_claimAutoreleasedReturnValue();
  v23 = isCharacterLatinOrCommonScript(v22);

  v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (objc_msgSend_length(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v25, v26, v27, v28, v29))
  {
    objc_msgSend_lastComposedCharacter(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v30, v31, v32, v33, v34);
    v35 = (NSString *)objc_claimAutoreleasedReturnValue();
    v36 = isCharacterCJKSymbolsPunctuations(v35);

    v37 = (v10 >> 5) & 1;
    if (v24 != v23)
      LODWORD(v37) = 1;
    if (a3)
    {
LABEL_5:
      v38 = v37 | v36;
      v39 = *(void **)(a1 + 32);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
        objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v30, v38, v32, v33, v34);
      else
        objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v30, 0, v32, v33, v34);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v39, v41, (uint64_t)v40, v42, v43, v44);

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v38;
      goto LABEL_16;
    }
  }
  else
  {
    v36 = 0;
    v37 = (v10 >> 5) & 1;
    if (v24 != v23)
      LODWORD(v37) = 1;
    if (a3)
      goto LABEL_5;
  }
  if ((v37 & 1) != 0 || *(_BYTE *)(a1 + 64))
  {
    v45 = 1;
  }
  else if (*(_BYTE *)(a1 + 65))
  {
    v45 = 1;
  }
  else
  {
    v45 = v36;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v45;
LABEL_16:
  objc_msgSend_string(v62, v30, v31, v32, v33, v34);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lastComposedCharacter(v46, v47, v48, v49, v50, v51);
  v52 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (isCharacterLatinOrCommonScript(v52))
    v58 = isCharacterCJKSymbolsPunctuations(v52) ^ 1;
  else
    LOBYTE(v58) = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v58;
  objc_msgSend_string(v62, v53, v54, v55, v56, v57);
  v59 = objc_claimAutoreleasedReturnValue();
  v60 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v61 = *(void **)(v60 + 40);
  *(_QWORD *)(v60 + 40) = v59;

}

void sub_1BE8A9554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8A956C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8A9580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8A9598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8A95B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8A95C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE8A95E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8A95F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8A960C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8A9620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8A9634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8A964C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 3)
  {
    objc_msgSend_substringFromIndex_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    *a7 = 1;
  }
}

void sub_1BE8AA070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8AA330(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8AA400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AAFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8AB27C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8AB3EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8AB3FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8AB40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AB950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE8ABB54(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSString *v23;
  NSString *v24;
  NSString *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char isEqualToString;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSString *v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  double v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  const char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void *v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  unsigned int v284;
  _OWORD v285[8];
  _OWORD v286[9];

  v3 = a2;
  v14 = v3;
  v15 = v3;
  if ((objc_msgSend_properties(v3, v4, v5, v6, v7, v8) & 0x40) == 0)
  {
    if ((objc_msgSend_properties(v3, v9, v10, v11, v12, v13) & 0x20) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v22 = *(void **)(v21 + 40);
      *(_QWORD *)(v21 + 40) = &stru_1E77F6F28;

    }
    objc_msgSend_string(v3, v16, v17, v18, v19, v20);
    v23 = (NSString *)objc_claimAutoreleasedReturnValue();
    halfWidthFullWidthTransform(v23, *(NSCharacterSet **)(*(_QWORD *)(a1 + 32) + 16), *(NSString **)(a1 + 40), 0, 0);
    v24 = (NSString *)objc_claimAutoreleasedReturnValue();

    halfWidthFullWidthTransform(v24, *(NSCharacterSet **)(*(_QWORD *)(a1 + 32) + 32), *(NSString **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), 0, 1);
    v25 = (NSString *)objc_claimAutoreleasedReturnValue();

    if ((unint64_t)objc_msgSend_length(v25, v26, v27, v28, v29, v30) < 2)
    {
      v37 = v25;
    }
    else
    {
      halfWidthFullWidthTransform(v25, *(NSCharacterSet **)(*(_QWORD *)(a1 + 32) + 24), 0, 1, 1);
      v36 = objc_claimAutoreleasedReturnValue();

      v37 = (void *)v36;
    }
    objc_msgSend_string(v3, v31, v32, v33, v34, v35);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v37, v39, (uint64_t)v38, v40, v41, v42);

    v49 = v3;
    if ((isEqualToString & 1) == 0)
    {
      objc_msgSend_strokeIndexes(v3, v44, v45, v46, v47, v48);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = objc_msgSend_wordID(v3, v51, v52, v53, v54, v55);
      objc_msgSend_modelScore(v3, v57, v58, v59, v60, v61);
      v283 = v62;
      objc_msgSend_recognitionScore(v3, v63, v64, v65, v66, v67);
      v281 = v68;
      objc_msgSend_combinedScore(v3, v69, v70, v71, v72, v73);
      v279 = v74;
      objc_msgSend_alignmentScore(v3, v75, v76, v77, v78, v79);
      v277 = v80;
      v86 = objc_msgSend_properties(v3, v81, v82, v83, v84, v85);
      objc_msgSend_recognizerSourceLocale(v3, v87, v88, v89, v90, v91);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      v98 = objc_msgSend_inputSources(v3, v93, v94, v95, v96, v97);
      v104 = objc_msgSend_substrokeCount(v3, v99, v100, v101, v102, v103);
      objc_msgSend_bounds(v3, v105, v106, v107, v108, v109);
      v111 = v110;
      v113 = v112;
      v115 = v114;
      v117 = v116;
      objc_msgSend_originalBounds(v3, v118, v119, v120, v121, v122);
      v129 = v128;
      v131 = v130;
      v133 = v132;
      v135 = v134;
      if (v3)
        objc_msgSend_principalLines(v3, v123, v124, v125, v126, v127);
      else
        memset(v286, 0, 128);
      objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v123, (uint64_t)v37, (uint64_t)v50, v56, v86, v92, v98 | 0x800, v283, v281, v279, v277, v111, v113, v115, v117, v104, v129, v131,
        v133,
        v135,
        v286);
      v49 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v15 = v49;

    v140 = objc_msgSend_rangeOfCharacterFromSet_(v37, v136, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), v137, v138, v139);
    v141 = *(_QWORD *)(a1 + 32);
    v14 = v15;
    if (*(_BYTE *)(v141 + 8))
    {
      v14 = v15;
      if (v140 != 0x7FFFFFFFFFFFFFFFLL)
      {
        halfWidthFullWidthTransform((NSString *)v37, *(NSCharacterSet **)(v141 + 40), *(NSString **)(a1 + 48), 0, 0);
        v142 = (NSString *)objc_claimAutoreleasedReturnValue();
        halfWidthFullWidthTransform(v142, *(NSCharacterSet **)(*(_QWORD *)(a1 + 32) + 32), *(NSString **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), 0, 1);
        v143 = (void *)objc_claimAutoreleasedReturnValue();

        if ((unint64_t)objc_msgSend_length(v143, v144, v145, v146, v147, v148) < 2)
        {
          v154 = v143;
          v159 = objc_msgSend_isEqualToString_(v143, v149, (uint64_t)v37, v150, v151, v152);
        }
        else
        {
          halfWidthFullWidthTransform((NSString *)v143, *(NSCharacterSet **)(*(_QWORD *)(a1 + 32) + 24), 0, 1, 1);
          v153 = (void *)objc_claimAutoreleasedReturnValue();

          v154 = v153;
          v159 = objc_msgSend_isEqualToString_(v153, v155, (uint64_t)v37, v156, v157, v158);
        }
        v14 = v15;
        if ((v159 & 1) == 0)
        {
          objc_msgSend_strokeIndexes(v3, v160, v161, v162, v163, v164);
          v165 = (void *)objc_claimAutoreleasedReturnValue();
          v284 = objc_msgSend_wordID(v3, v166, v167, v168, v169, v170);
          objc_msgSend_modelScore(v3, v171, v172, v173, v174, v175);
          v282 = v176;
          objc_msgSend_recognitionScore(v3, v177, v178, v179, v180, v181);
          v280 = v182;
          objc_msgSend_combinedScore(v3, v183, v184, v185, v186, v187);
          v278 = v188;
          objc_msgSend_alignmentScore(v3, v189, v190, v191, v192, v193);
          v276 = v194;
          v200 = objc_msgSend_properties(v3, v195, v196, v197, v198, v199);
          objc_msgSend_recognizerSourceLocale(v3, v201, v202, v203, v204, v205);
          v206 = (void *)objc_claimAutoreleasedReturnValue();
          v212 = objc_msgSend_inputSources(v3, v207, v208, v209, v210, v211);
          v218 = objc_msgSend_substrokeCount(v3, v213, v214, v215, v216, v217);
          objc_msgSend_bounds(v3, v219, v220, v221, v222, v223);
          v225 = v224;
          v227 = v226;
          v229 = v228;
          v231 = v230;
          objc_msgSend_originalBounds(v3, v232, v233, v234, v235, v236);
          v243 = v242;
          v245 = v244;
          v247 = v246;
          v249 = v248;
          if (v3)
            objc_msgSend_principalLines(v3, v237, v238, v239, v240, v241);
          else
            memset(v285, 0, sizeof(v285));
          objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v237, (uint64_t)v154, (uint64_t)v165, v284, v200, v206, v212 | 0x800, v282, v280, v278, v276, v225, v227, v229, v231, v218, v243, v245,
            v247,
            v249,
            v285);
          v14 = (void *)objc_claimAutoreleasedReturnValue();

        }
      }
    }

  }
  if (objc_msgSend_isTopOriginal(v3, v9, v10, v11, v12, v13))
    objc_msgSend_addObject_(*(void **)(a1 + 56), v250, (uint64_t)v3, v251, v252, v253);
  else
    objc_msgSend_addObject_(*(void **)(a1 + 56), v250, (uint64_t)v15, v251, v252, v253);
  objc_msgSend_addObject_(*(void **)(a1 + 64), v254, (uint64_t)v15, v255, v256, v257);
  objc_msgSend_addObject_(*(void **)(a1 + 72), v258, (uint64_t)v14, v259, v260, v261);
  objc_msgSend_string(v15, v262, v263, v264, v265, v266);
  v267 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lastComposedCharacter(v267, v268, v269, v270, v271, v272);
  v273 = objc_claimAutoreleasedReturnValue();
  v274 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v275 = *(void **)(v274 + 40);
  *(_QWORD *)(v274 + 40) = v273;

}

void sub_1BE8AC104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8AC1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8AC384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8AC7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE8AC9C8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  void **v18;
  void **v19;
  id v20;

  v20 = a2;
  v11 = objc_msgSend_rangeOfCharacterFromSet_(v20, v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v4, v5, v6);
  if (v11 == 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend_rangeOfCharacterFromSet_(v20, v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), v8, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = 1;
  }
  else
  {
    v12 = 0;
    if (objc_msgSend_rangeOfCharacterFromSet_(v20, v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v8, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
    {
      v13 = 1;
      goto LABEL_7;
    }
  }
  v13 = 0;
  if (objc_msgSend_rangeOfCharacterFromSet_(v20, v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), v8, v9, v10) == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_7:
    v15 = objc_msgSend_rangeOfCharacterFromSet_(v20, v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v8, v9, v10);
    v16 = 0;
    v17 = v15 != 0x7FFFFFFFFFFFFFFFLL;
    if (v11 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_8;
    goto LABEL_11;
  }
  v16 = 1;
  v17 = 0;
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_8:
    if (v12)
    {
      v18 = (void **)(a1 + 40);
LABEL_20:
      objc_msgSend_removeLastObject(*v18, v7, v14, v8, v9, v10);
      goto LABEL_21;
    }
    if ((v13 & 1) != 0)
      goto LABEL_13;
    if (v16)
    {
      if (!objc_msgSend_count(*(void **)(a1 + 48), v7, v14, v8, v9, v10))
      {
LABEL_13:
        v19 = (void **)(a1 + 48);
        goto LABEL_14;
      }
    }
    else if (!v17)
    {
      goto LABEL_21;
    }
    v18 = (void **)(a1 + 48);
    goto LABEL_20;
  }
LABEL_11:
  v19 = (void **)(a1 + 40);
LABEL_14:
  objc_msgSend_addObject_(*v19, v7, (uint64_t)v20, v8, v9, v10);
LABEL_21:

}

void sub_1BE8ACB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8ACB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8ACB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8ACB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8ACB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8ACBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8ACBB4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  void *v149;
  _OWORD v150[8];
  _QWORD v151[5];
  id v152;
  id v153;
  id v154;

  v3 = a2;
  v14 = v3;
  if ((objc_msgSend_properties(v3, v4, v5, v6, v7, v8) & 0x40) == 0)
  {
    objc_msgSend_string(MEMORY[0x1E0CB37A0], v9, v10, v11, v12, v13);
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v3, v15, v16, v17, v18, v19);
    v20 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v3, v21, v22, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend_length(v26, v27, v28, v29, v30, v31);
    v151[0] = MEMORY[0x1E0C809B0];
    v151[1] = 3221225472;
    v151[2] = sub_1BE8ACF6C;
    v151[3] = &unk_1E77F6758;
    v33 = *(void **)(a1 + 40);
    v151[4] = *(_QWORD *)(a1 + 32);
    v152 = v33;
    v153 = *(id *)(a1 + 48);
    v34 = v149;
    v154 = v34;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_((void *)v20, v35, 0, v32, 2, (uint64_t)v151);

    objc_msgSend_string(v3, v36, v37, v38, v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v20) = objc_msgSend_isEqualToString_(v34, v42, (uint64_t)v41, v43, v44, v45);

    v14 = v3;
    if ((v20 & 1) == 0)
    {
      objc_msgSend_strokeIndexes(v3, v46, v47, v48, v49, v50);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = objc_msgSend_wordID(v3, v52, v53, v54, v55, v56);
      objc_msgSend_modelScore(v3, v58, v59, v60, v61, v62);
      v148 = v63;
      objc_msgSend_recognitionScore(v3, v64, v65, v66, v67, v68);
      v147 = v69;
      objc_msgSend_combinedScore(v3, v70, v71, v72, v73, v74);
      v146 = v75;
      objc_msgSend_alignmentScore(v3, v76, v77, v78, v79, v80);
      v145 = v81;
      v87 = objc_msgSend_properties(v3, v82, v83, v84, v85, v86);
      objc_msgSend_recognizerSourceLocale(v3, v88, v89, v90, v91, v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      v99 = objc_msgSend_inputSources(v3, v94, v95, v96, v97, v98);
      v105 = objc_msgSend_substrokeCount(v3, v100, v101, v102, v103, v104);
      objc_msgSend_bounds(v3, v106, v107, v108, v109, v110);
      v112 = v111;
      v114 = v113;
      v116 = v115;
      v118 = v117;
      objc_msgSend_originalBounds(v3, v119, v120, v121, v122, v123);
      v130 = v129;
      v132 = v131;
      v134 = v133;
      v136 = v135;
      if (v3)
        objc_msgSend_principalLines(v3, v124, v125, v126, v127, v128);
      else
        memset(v150, 0, sizeof(v150));
      objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v124, (uint64_t)v34, (uint64_t)v51, v57, v87, v93, v99 | 0x800, v148, v147, v146, v145, v112, v114, v116, v118, v105, v130, v132,
        v134,
        v136,
        v150);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  if (objc_msgSend_isTopOriginal(v3, v9, v10, v11, v12, v13))
    objc_msgSend_addObject_(*(void **)(a1 + 56), v137, (uint64_t)v3, v138, v139, v140);
  else
    objc_msgSend_addObject_(*(void **)(a1 + 56), v137, (uint64_t)v14, v138, v139, v140);
  objc_msgSend_addObject_(*(void **)(a1 + 64), v141, (uint64_t)v14, v142, v143, v144);

}

void sub_1BE8ACEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  uint64_t v22;

  _Unwind_Resume(a1);
}

void sub_1BE8ACF58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8ACF6C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  void *v19;
  NSString *v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  unsigned int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  id v39;

  v39 = a2;
  v11 = objc_msgSend_rangeOfCharacterFromSet_(v39, v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v4, v5, v6);
  if (v11 == 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend_rangeOfCharacterFromSet_(v39, v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), v8, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = 1;
  }
  else
  {
    v12 = 0;
    if (objc_msgSend_rangeOfCharacterFromSet_(v39, v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v8, v9, v10) != 0x7FFFFFFFFFFFFFFFLL)
    {
      v13 = 1;
      goto LABEL_7;
    }
  }
  v13 = 0;
  if (objc_msgSend_rangeOfCharacterFromSet_(v39, v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), v8, v9, v10) == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_7:
    v15 = objc_msgSend_rangeOfCharacterFromSet_(v39, v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), v8, v9, v10);
    v16 = 0;
    v17 = v15 != 0x7FFFFFFFFFFFFFFFLL;
    if (v11 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_8;
LABEL_14:
    v29 = (void **)(a1 + 40);
LABEL_17:
    v19 = v39;
    objc_msgSend_addObject_(*v29, v7, (uint64_t)v39, v8, v9, v10);
    goto LABEL_27;
  }
  v16 = 1;
  v17 = 0;
  if (v11 != 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_14;
LABEL_8:
  if (v12)
  {
    v19 = v39;
    if (objc_msgSend_count(*(void **)(a1 + 40), v7, v14, v8, v9, v10))
    {
      objc_msgSend_lastObject(*(void **)(a1 + 40), v7, v18, v8, v9, v10);
      v20 = (NSString *)objc_claimAutoreleasedReturnValue();
      v21 = isCharacterFullWidth(v20);
      v27 = isCharacterFullWidth((NSString *)v39) ^ 1;
      v19 = v39;
      if (v21 == v27)
      {
        objc_msgSend_stringByApplyingTransform_reverse_(v39, v22, *MEMORY[0x1E0C99870], v27 | v21, v25, v26);
        v28 = objc_claimAutoreleasedReturnValue();

        v19 = (void *)v28;
      }
      objc_msgSend_removeLastObject(*(void **)(a1 + 40), v22, v23, v24, v25, v26);
LABEL_26:

      goto LABEL_27;
    }
    goto LABEL_27;
  }
  if ((v13 & 1) != 0)
    goto LABEL_16;
  if (v16)
  {
    if (!objc_msgSend_count(*(void **)(a1 + 48), v7, v14, v8, v9, v10))
    {
LABEL_16:
      v29 = (void **)(a1 + 48);
      goto LABEL_17;
    }
  }
  else
  {
    v19 = v39;
    if (!v17)
      goto LABEL_27;
  }
  v19 = v39;
  if (objc_msgSend_count(*(void **)(a1 + 48), v7, v14, v8, v9, v10))
  {
    objc_msgSend_lastObject(*(void **)(a1 + 48), v7, v30, v8, v9, v10);
    v20 = (NSString *)objc_claimAutoreleasedReturnValue();
    v31 = isCharacterFullWidth(v20);
    v37 = isCharacterFullWidth((NSString *)v39) ^ 1;
    v19 = v39;
    if (v31 == v37)
    {
      objc_msgSend_stringByApplyingTransform_reverse_(v39, v32, *MEMORY[0x1E0C99870], v37 | v31, v35, v36);
      v38 = objc_claimAutoreleasedReturnValue();

      v19 = (void *)v38;
    }
    objc_msgSend_removeLastObject(*(void **)(a1 + 48), v32, v33, v34, v35, v36);
    goto LABEL_26;
  }
LABEL_27:
  objc_msgSend_appendString_(*(void **)(a1 + 56), v7, (uint64_t)v19, v8, v9, v10);

}

void sub_1BE8AD1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8AD250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8AD26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8AD394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AD3A8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    v28 = v3;
    v9 = objc_msgSend_properties(v3, (const char *)v3, v4, v5, v6, v7);
    v8 = v28;
    if ((v9 & 0x10) == 0)
    {
      v14 = *(void **)(a1 + 16);
      objc_msgSend_string(v28, (const char *)v28, v10, v11, v12, v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v14) = objc_msgSend_isInappropriateString_(v14, v16, (uint64_t)v15, v17, v18, v19);

      v8 = v28;
      if ((_DWORD)v14)
      {
        v24 = objc_msgSend_properties(v28, (const char *)v28, v20, v21, v22, v23);
        objc_msgSend_setProperties_(v28, (const char *)v28, v24 | 0x10, v25, v26, v27);
        v8 = v28;
      }
    }
  }

}

void sub_1BE8AD440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8AD458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8AD46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8ADBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

__n128 sub_1BE8ADE34(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BE8ADE44(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t v70[16];

  v6 = a2;
  v7 = *a4;
  v8 = a4[2];
  if ((objc_msgSend_properties(v6, v9, v10, v11, v12, v13) & 0x20) != 0 && v7 != -v8)
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                                + 56)
                                                                    + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                                + 48))
  {
    v19 = ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
    if (v19 < objc_msgSend_count(*(void **)(a1 + 32), v14, v15, v16, v17, v18))
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v20 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)v70 = 0;
          _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_FAULT, "growingToken should not be nil", v70, 2u);
        }

      }
      objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), v16, v17, v18);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend_rangeValue(v21, v22, v23, v24, v25, v26);
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      *(_QWORD *)(v28 + 48) = v27;
      *(_QWORD *)(v28 + 56) = v29;

      objc_msgSend_objectAtIndex_(*(void **)(a1 + 40), v30, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24), v31, v32, v33);
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v36 = *(void **)(v35 + 40);
      *(_QWORD *)(v35 + 40) = v34;

      sub_1BE8AD3A8(*(_QWORD *)(a1 + 48), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
      objc_msgSend_addObject_(*(void **)(a1 + 56), v37, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v38, v39, v40);
      v41 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v42 = *(void **)(v41 + 40);
      *(_QWORD *)(v41 + 40) = 0;

    }
  }
  v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
  if (v43)
  {
    sub_1BE637DE0(v43, v6);
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v50 = *a4 - *(_QWORD *)(v49 + 48) + 1;
  }
  else
  {
    v51 = objc_msgSend_mutableCopy(v6, v14, v15, v16, v17, v18);
    v52 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v53 = *(void **)(v52 + 40);
    *(_QWORD *)(v52 + 40) = v51;

    v59 = objc_msgSend_intValue(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), v54, v55, v56, v57, v58);
    objc_msgSend_setWordID_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v60, v59, v61, v62, v63);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 48) = *a4;
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v50 = 1;
  }
  *(_QWORD *)(v49 + 56) = v50;
  objc_msgSend_string(v6, v44, v45, v46, v47, v48);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) += objc_msgSend_length(v64, v65, v66, v67, v68, v69);

}

void sub_1BE8AE0E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AE0F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8AE104(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AE118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8AE128(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CHTokenizedTextResultToken *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  double v123;
  _OWORD v124[9];

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend_string(v3, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v11, (uint64_t)v10, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
    v21 = objc_msgSend_unsignedIntValue(v15, v16, v17, v18, v19, v20);
  else
    v21 = 0;
  v22 = [CHTokenizedTextResultToken alloc];
  objc_msgSend_string(v3, v23, v24, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexes(v3, v29, v30, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v122 = a1;
  objc_msgSend_recognitionScore(v3, v35, v36, v37, v38, v39);
  v123 = v40;
  objc_msgSend_recognitionScore(v3, v41, v42, v43, v44, v45);
  v121 = v46;
  objc_msgSend_combinedScore(v3, v47, v48, v49, v50, v51);
  v120 = v52;
  objc_msgSend_alignmentScore(v3, v53, v54, v55, v56, v57);
  v119 = v58;
  v64 = objc_msgSend_properties(v3, v59, v60, v61, v62, v63);
  objc_msgSend_recognizerSourceLocale(v3, v65, v66, v67, v68, v69);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = objc_msgSend_inputSources(v3, v71, v72, v73, v74, v75);
  v82 = objc_msgSend_substrokeCount(v3, v77, v78, v79, v80, v81);
  objc_msgSend_bounds(v3, v83, v84, v85, v86, v87);
  v89 = v88;
  v91 = v90;
  v93 = v92;
  v95 = v94;
  objc_msgSend_originalBounds(v3, v96, v97, v98, v99, v100);
  v107 = v106;
  v109 = v108;
  v111 = v110;
  v113 = v112;
  if (v3)
    objc_msgSend_principalLines(v3, v101, v102, v103, v104, v105);
  else
    memset(v124, 0, 128);
  v114 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v22, v101, (uint64_t)v28, (uint64_t)v34, v21, v64, v70, v76, v123, v121, v120, v119, v89, v91, v93, v95, v82, v107, v109,
                   v111,
                   v113,
                   v124);

  objc_msgSend_addObject_(*(void **)(v122 + 40), v115, (uint64_t)v114, v116, v117, v118);
}

void sub_1BE8AE340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AE354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8AE36C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8AE384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AE398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8AE3A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AE3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE8AE3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8AE44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHSemanticTokenizerStep;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE8AE818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8AE94C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AE960(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int IsMember;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = a2;
  objc_msgSend_ch_neutralQuotationMarkSet(MEMORY[0x1E0CB3500], v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_characterAtIndex_(v23, v9, 0, v10, v11, v12);
  IsMember = objc_msgSend_characterIsMember_(v8, v14, v13, v15, v16, v17);

  if (IsMember)
    objc_msgSend_addObject_(*(void **)(a1 + 32), v19, (uint64_t)v23, v20, v21, v22);

}

void sub_1BE8AE9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8AE9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8AEA08(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int IsMember;
  uint64_t v25;
  void *v26;

  v7 = a2;
  if (!objc_msgSend_shouldInsertSpaceBetweenPreviousChar_andNextChar_inLocale_inString_atRange_withQuoteCount_(CHRecognizerConfiguration, v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), (uint64_t)v7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(a1 + 40), a3, a4, *(_QWORD *)(a1 + 48)))
  {
LABEL_4:
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_7;
    goto LABEL_5;
  }
  if (a3)
  {
    objc_msgSend_appendString_(*(void **)(a1 + 56), v9, (uint64_t)CFSTR(" "), v11, v12, v13);
    goto LABEL_4;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) |= 0x20uLL;
  if (!*(_BYTE *)(a1 + 80))
    goto LABEL_7;
LABEL_5:
  objc_msgSend_ch_neutralQuotationMarkSet(MEMORY[0x1E0CB3500], v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_characterAtIndex_(v7, v15, 0, v16, v17, v18);
  IsMember = objc_msgSend_characterIsMember_(v14, v20, v19, v21, v22, v23);

  if (IsMember)
    objc_msgSend_addObject_(*(void **)(a1 + 48), v9, (uint64_t)v7, v11, v12, v13);
LABEL_7:
  objc_msgSend_appendString_(*(void **)(a1 + 56), v9, (uint64_t)v7, v11, v12, v13);
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v26 = *(void **)(v25 + 40);
  *(_QWORD *)(v25 + 40) = v7;

}

void sub_1BE8AEB20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8AEB34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8AF084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE8AF270(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char shouldAddSpaceToNeutralQuotationMarks;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  const char *v86;
  id v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  double v220;
  double v221;
  double v222;
  double v223;
  void *v224;
  void *v225;
  id v226;
  id v227;
  id v228;
  _OWORD v229[8];
  _QWORD v230[5];
  id v231;
  id v232;
  id v233;
  uint64_t *v234;
  uint64_t *v235;
  char v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t (*v244)(uint64_t, uint64_t);
  void (*v245)(uint64_t);
  id v246;

  v5 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  objc_msgSend_result(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_precedingSeparatorForToken_(v12, v13, (uint64_t)v5, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v225 = v17;
  if (a3 >= 1)
    v6 += objc_msgSend_length(v17, v18, v19, v20, v21, v22);
  objc_msgSend_substringFromIndex_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), v18, v6, v20, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v25 = *(void **)(v24 + 40);
  *(_QWORD *)(v24 + 40) = v23;

  v26 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
  v27 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
  v29 = *(_QWORD *)(a1 + 40);
  v28 = *(void **)(a1 + 48);
  v228 = v5;
  v30 = v26;
  v227 = v27;
  v226 = v28;
  v224 = v30;
  if (!v29)
  {
    v87 = 0;
    goto LABEL_15;
  }
  v241 = 0;
  v242 = &v241;
  v243 = 0x3032000000;
  v244 = sub_1BE8A7340;
  v245 = sub_1BE8A7350;
  objc_msgSend_lastComposedCharacter(v30, v31, v32, v33, v34, v35);
  v246 = (id)objc_claimAutoreleasedReturnValue();
  v237 = 0;
  v238 = &v237;
  v239 = 0x2020000000;
  v240 = 0;
  v240 = objc_msgSend_properties(v228, v36, v37, v38, v39, v40);
  v41 = v242[5];
  objc_msgSend_string(v228, v42, v43, v44, v45, v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstComposedCharacter(v47, v48, v49, v50, v51, v52);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend_shouldRemoveSpaceBetweenPreviousChar_andNextChar_inLocale_(CHRecognizerConfiguration, v54, v41, (uint64_t)v53, *(_QWORD *)(v29 + 8), v55);

  if (v56)
    v238[3] &= ~0x20uLL;
  shouldAddSpaceToNeutralQuotationMarks = objc_msgSend_shouldAddSpaceToNeutralQuotationMarks_(CHRecognizerConfiguration, v57, *(_QWORD *)(v29 + 8), v58, v59, v60);
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v62, v63, v64, v65, v66);
  v219 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_string(v228, v67, v68, v69, v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_string(v228, v73, v74, v75, v76, v77);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = objc_msgSend_length(v78, v79, v80, v81, v82, v83);
  v230[0] = MEMORY[0x1E0C809B0];
  v230[1] = 3221225472;
  v230[2] = sub_1BE8AEA08;
  v230[3] = &unk_1E77F67A8;
  v234 = &v241;
  v230[4] = v29;
  v231 = v227;
  v232 = v226;
  v235 = &v237;
  v85 = v219;
  v233 = v85;
  v236 = shouldAddSpaceToNeutralQuotationMarks;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v72, v86, 0, v84, 2, (uint64_t)v230);

  v87 = v228;
  objc_msgSend_string(v87, v88, v89, v90, v91, v92);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_isEqualToString_(v85, v94, (uint64_t)v93, v95, v96, v97))
  {

    goto LABEL_10;
  }
  v103 = v238[3];
  v104 = objc_msgSend_properties(v87, v98, v99, v100, v101, v102);

  if (v103 != v104)
  {
LABEL_10:
    objc_msgSend_strokeIndexes(v87, v105, v106, v107, v108, v109);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    v116 = objc_msgSend_wordID(v87, v111, v112, v113, v114, v115);
    objc_msgSend_modelScore(v87, v117, v118, v119, v120, v121);
    v223 = v122;
    objc_msgSend_recognitionScore(v87, v123, v124, v125, v126, v127);
    v222 = v128;
    objc_msgSend_combinedScore(v87, v129, v130, v131, v132, v133);
    v221 = v134;
    objc_msgSend_alignmentScore(v87, v135, v136, v137, v138, v139);
    v220 = v140;
    v141 = v238[3];
    objc_msgSend_recognizerSourceLocale(v87, v142, v143, v144, v145, v146);
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    v153 = objc_msgSend_inputSources(v87, v148, v149, v150, v151, v152);
    v159 = objc_msgSend_substrokeCount(v87, v154, v155, v156, v157, v158);
    objc_msgSend_bounds(v87, v160, v161, v162, v163, v164);
    v166 = v165;
    v168 = v167;
    v170 = v169;
    v172 = v171;
    objc_msgSend_originalBounds(v87, v173, v174, v175, v176, v177);
    v184 = v183;
    v186 = v185;
    v188 = v187;
    v190 = v189;
    if (v87)
      objc_msgSend_principalLines(v87, v178, v179, v180, v181, v182);
    else
      memset(v229, 0, sizeof(v229));
    objc_msgSend_tokenWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(CHTokenizedTextResultToken, v178, (uint64_t)v85, (uint64_t)v110, v116, v141, v147, v153 | 0x200, v223, v222, v221, v220, v166, v168, v170, v172, v159, v184, v186,
      v188,
      v190,
      v229);
    v191 = objc_claimAutoreleasedReturnValue();

    v87 = (id)v191;
  }

  _Block_object_dispose(&v237, 8);
  _Block_object_dispose(&v241, 8);

LABEL_15:
  objc_msgSend_addObject_(*(void **)(a1 + 56), v192, (uint64_t)v87, v193, v194, v195);
  objc_msgSend_addObject_(*(void **)(a1 + 64), v196, (uint64_t)v87, v197, v198, v199);
  objc_msgSend_string(v87, v200, v201, v202, v203, v204);
  v205 = objc_claimAutoreleasedReturnValue();
  v206 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v207 = *(void **)(v206 + 40);
  *(_QWORD *)(v206 + 40) = v205;

  objc_msgSend_string(v228, v208, v209, v210, v211, v212);
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend_length(v213, v214, v215, v216, v217, v218);

}

void sub_1BE8AF798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,id a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  void *v50;
  void *v51;

  _Unwind_Resume(a1);
}

void sub_1BE8AF8A8()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1BE8AF8BCLL);
}

void sub_1BE8AFD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8AFDF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8AFE7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8B0DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8B1190(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8B1260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8B1B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void *v33;

  _Unwind_Resume(a1);
}

void sub_1BE8B2460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

__n128 sub_1BE8B2614(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1BE8B2624(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int hasPrefix;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  CHTokenizedTextResultToken *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  double v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  double height;
  double MinX;
  double v140;
  CGFloat *v141;
  double v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  CHTokenizedTextResultToken *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  double v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  double v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  double v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  double v193;
  double v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  const char *v224;
  double v225;
  double v226;
  double v227;
  double v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  __int128 v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  id v238;
  CGRect v239;

  v238 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v238, v4, v5, v6);
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_10;
  objc_msgSend_string(v238, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_hasPrefix_(v12, v13, (uint64_t)CFSTR("#"), v14, v15, v16))
  {

LABEL_5:
    v33 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (v33)
    {
      v39 = v33;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      {
        objc_msgSend_string(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v34, v35, v36, v37, v38);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v40, v41, (uint64_t)CFSTR(" "), (uint64_t)&stru_1E77F6F28, v42, v43);
        v44 = (void *)objc_claimAutoreleasedReturnValue();

        v45 = [CHTokenizedTextResultToken alloc];
        objc_msgSend_strokeIndexes(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v46, v47, v48, v49, v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_modelScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v52, v53, v54, v55, v56);
        v58 = v57;
        objc_msgSend_recognitionScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v59, v60, v61, v62, v63);
        v65 = v64;
        objc_msgSend_combinedScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v66, v67, v68, v69, v70);
        v72 = v71;
        objc_msgSend_alignmentScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v73, v74, v75, v76, v77);
        v79 = v78;
        v85 = objc_msgSend_properties(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v80, v81, v82, v83, v84);
        objc_msgSend_recognizerSourceLocale(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v86, v87, v88, v89, v90);
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        v97 = objc_msgSend_inputSources(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v92, v93, v94, v95, v96);
        v103 = objc_msgSend_substrokeCount(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v98, v99, v100, v101, v102);
        objc_msgSend_bounds(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v104, v105, v106, v107, v108);
        v114 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v45, v109, (uint64_t)v44, (uint64_t)v51, 0, v85, v91, v97 | 0x200, v58, v65, v72, v79, v110, v111, v112, v113, v103);

        v39 = (id)v114;
      }
      objc_msgSend_addObject_(*(void **)(a1 + 40), v34, (uint64_t)v39, v36, v37, v38);

    }
    v115 = objc_msgSend_mutableCopy(v238, v22, v23, v24, v25, v26);
    v116 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v117 = *(void **)(v116 + 40);
    *(_QWORD *)(v116 + 40) = v115;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    objc_msgSend_alignmentScore(v238, v118, v119, v120, v121, v122);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v123;
    objc_msgSend_bounds(v238, v124, v125, v126, v127, v128);
    v129 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
    v129[6] = v130;
    v129[7] = v131;
    v129[8] = v132;
    v129[9] = v133;
    goto LABEL_10;
  }
  objc_msgSend_string(v238, v17, v18, v19, v20, v21);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  hasPrefix = objc_msgSend_hasPrefix_(v27, v28, (uint64_t)CFSTR("@"), v29, v30, v31);

  if (hasPrefix)
    goto LABEL_5;
  v134 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v134)
  {
    if (*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) >= 0.98)
      goto LABEL_17;
    objc_msgSend_bounds(v238, v22, (uint64_t)v238, v24, v25, v26);
    x = v239.origin.x;
    y = v239.origin.y;
    width = v239.size.width;
    height = v239.size.height;
    MinX = CGRectGetMinX(v239);
    v140 = MinX - CGRectGetMaxX(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48));
    v141 = *(CGFloat **)(*(_QWORD *)(a1 + 72) + 8);
    v142 = v141[9];
    if (v142 <= height)
      v142 = height;
    v141[6] = x;
    v141[7] = y;
    v141[8] = width;
    v141[9] = height;
    v134 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (v140 / (v142 + 0.000001) >= 0.4)
    {
LABEL_17:
      v154 = v134;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      {
        objc_msgSend_string(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v149, v150, v151, v152, v153);
        v155 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v155, v156, (uint64_t)CFSTR(" "), (uint64_t)&stru_1E77F6F28, v157, v158);
        v159 = (void *)objc_claimAutoreleasedReturnValue();

        v160 = [CHTokenizedTextResultToken alloc];
        objc_msgSend_strokeIndexes(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v161, v162, v163, v164, v165);
        v166 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_modelScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v167, v168, v169, v170, v171);
        v173 = v172;
        objc_msgSend_recognitionScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v174, v175, v176, v177, v178);
        v180 = v179;
        objc_msgSend_combinedScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v181, v182, v183, v184, v185);
        v187 = v186;
        objc_msgSend_alignmentScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v188, v189, v190, v191, v192);
        v194 = v193;
        v200 = objc_msgSend_properties(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v195, v196, v197, v198, v199);
        objc_msgSend_recognizerSourceLocale(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v201, v202, v203, v204, v205);
        v206 = (void *)objc_claimAutoreleasedReturnValue();
        v212 = objc_msgSend_inputSources(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v207, v208, v209, v210, v211);
        v218 = objc_msgSend_substrokeCount(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v213, v214, v215, v216, v217);
        objc_msgSend_bounds(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v219, v220, v221, v222, v223);
        v229 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v160, v224, (uint64_t)v159, (uint64_t)v166, 0, v200, v206, v212 | 0x200, v173, v180, v187, v194, v225, v226, v227, v228, v218);

        v154 = (id)v229;
      }
      objc_msgSend_addObject_(*(void **)(a1 + 40), v149, (uint64_t)v154, v151, v152, v153);
      v230 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v231 = *(void **)(v230 + 40);
      *(_QWORD *)(v230 + 40) = 0;

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0x43E0000000000000;
      v232 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v233 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(v232 + 48) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(v232 + 64) = v233;
      objc_msgSend_addObject_(*(void **)(a1 + 40), v234, (uint64_t)v238, v235, v236, v237);

    }
    else
    {
      sub_1BE637DE0((uint64_t)v134, v238);
      objc_msgSend_alignmentScore(v238, v143, v144, v145, v146, v147);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v148;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v22, (uint64_t)v238, v24, v25, v26);
  }
LABEL_10:

}

void sub_1BE8B2BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE8B2C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8B2C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8B2CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE8B2CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8B2CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE8B2CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8B2D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8B2DAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8B31D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE8B3314(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int IsMember;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  double height;
  double MinX;
  double MaxX;
  CGFloat *v84;
  double v85;
  double v86;
  double v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  CHTokenizedTextResultToken *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  double v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  double v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  double v164;
  double v165;
  double v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  __int128 v172;
  _QWORD v173[5];
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  char v177;
  CGRect v178;

  v3 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  if (*(_QWORD *)(a1 + 72))
    goto LABEL_22;
  v174 = 0;
  v175 = &v174;
  v176 = 0x2020000000;
  v177 = 1;
  objc_msgSend_string(v3, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_string(v3, v14, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend_length(v19, v20, v21, v22, v23, v24);
  v173[0] = MEMORY[0x1E0C809B0];
  v173[1] = 3221225472;
  v173[2] = sub_1BE8B3850;
  v173[3] = &unk_1E77F3F08;
  v173[4] = &v174;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v13, v26, 0, v25, 2, (uint64_t)v173);

  objc_msgSend_string(v3, v27, v28, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_length(v32, v33, v34, v35, v36, v37) == 1)
  {
    v43 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
    objc_msgSend_string(v3, v38, v39, v40, v41, v42);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_msgSend_characterAtIndex_(v44, v45, 0, v46, v47, v48);
    IsMember = objc_msgSend_characterIsMember_(v43, v50, v49, v51, v52, v53);

    v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    if (!v59)
      goto LABEL_8;
LABEL_6:
    if ((IsMember & 1) == 0)
    {
      objc_msgSend_addObject_(*(void **)(a1 + 48), v55, v59, v56, v57, v58);
      v60 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v61 = *(void **)(v60 + 40);
      *(_QWORD *)(v60 + 40) = 0;

      v62 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v63 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(v62 + 48) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(v62 + 64) = v63;
    }
    goto LABEL_8;
  }
  IsMember = 0;

  v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v59)
    goto LABEL_6;
LABEL_8:
  if (*((_BYTE *)v175 + 24))
  {
    v64 = objc_msgSend_mutableCopy(v3, v55, v59, v56, v57, v58);
    v65 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v66 = *(void **)(v65 + 40);
    *(_QWORD *)(v65 + 40) = v64;

    objc_msgSend_bounds(v3, v67, v68, v69, v70, v71);
    v72 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8);
    v72[6] = v73;
    v72[7] = v74;
    v72[8] = v75;
    v72[9] = v76;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
      v77 = IsMember;
    else
      v77 = 0;
    if (v77 == 1)
    {
      objc_msgSend_bounds(v3, v55, v59, v56, v57, v58);
      x = v178.origin.x;
      y = v178.origin.y;
      width = v178.size.width;
      height = v178.size.height;
      MinX = CGRectGetMinX(v178);
      MaxX = CGRectGetMaxX(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48));
      v84 = *(CGFloat **)(*(_QWORD *)(a1 + 64) + 8);
      v85 = v84[9];
      v84[6] = x;
      v84[7] = y;
      v84[8] = width;
      v84[9] = height;
      sub_1BE637DE0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v3);
      if (v85 <= height)
        v86 = height;
      else
        v86 = v85;
      v87 = (MinX - MaxX) / (v86 + 0.000001);
      v93 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      if (v87 < 0.4)
      {
        objc_msgSend_string(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v88, v89, v90, v91, v92);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v94, v95, (uint64_t)CFSTR(" "), (uint64_t)&stru_1E77F6F28, v96, v97);
        v98 = (void *)objc_claimAutoreleasedReturnValue();

        v99 = [CHTokenizedTextResultToken alloc];
        objc_msgSend_strokeIndexes(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v100, v101, v102, v103, v104);
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_modelScore(v3, v106, v107, v108, v109, v110);
        v112 = v111;
        objc_msgSend_recognitionScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v113, v114, v115, v116, v117);
        v119 = v118;
        objc_msgSend_combinedScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v120, v121, v122, v123, v124);
        v126 = v125;
        objc_msgSend_alignmentScore(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v127, v128, v129, v130, v131);
        v133 = v132;
        v139 = objc_msgSend_properties(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v134, v135, v136, v137, v138);
        objc_msgSend_recognizerSourceLocale(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v140, v141, v142, v143, v144);
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        v151 = objc_msgSend_inputSources(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v146, v147, v148, v149, v150);
        v157 = objc_msgSend_substrokeCount(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v152, v153, v154, v155, v156);
        objc_msgSend_bounds(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v158, v159, v160, v161, v162);
        v168 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_(v99, v163, (uint64_t)v98, (uint64_t)v105, 0, v139, v145, v151 | 0x200, v112, v119, v126, v133, v164, v165, v166, v167, v157);

        v93 = (id)v168;
      }
      objc_msgSend_addObject_(*(void **)(a1 + 48), v88, (uint64_t)v93, v90, v91, v92);
      v169 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v170 = *(void **)(v169 + 40);
      *(_QWORD *)(v169 + 40) = 0;

      v171 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v172 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(v171 + 48) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(v171 + 64) = v172;

    }
    else
    {
      objc_msgSend_addObject_(*(void **)(a1 + 48), v55, (uint64_t)v3, v56, v57, v58);
    }
  }
  _Block_object_dispose(&v174, 8);
LABEL_22:

}

void sub_1BE8B37AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE8B3840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1BE8B3850(uint64_t a1, NSString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  _BOOL8 result;

  result = isCharacterLatinOrCommonScript(a2);
  if (!result)
  {
    *a7 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  return result;
}

void sub_1BE8B3970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8B3D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE8B3EEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int isTopOriginal;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char isEqualToString;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  CHTokenizedTextResultToken *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  CHTokenizedTextResultToken *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  double v175;
  double v176;
  double v177;
  double v178;
  unsigned int v179;
  _OWORD v180[9];

  v11 = a2;
  if (!*(_QWORD *)(a4 + 16) && objc_msgSend_count(*(void **)(a1 + 32), v6, v7, v8, v9, v10))
  {
    sub_1BE8A313C((uint64_t)CHPostprocessingStep, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 40), v17, v18, v19, v20, v21);
  }
  v22 = *(_QWORD *)(a1 + 64);
  objc_msgSend_string(v11, v6, v7, v8, v9, v10);
  v23 = (id)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (v22)
  {
    v25 = v23;
    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v25, v26, (uint64_t)CFSTR("．．．"), (uint64_t)CFSTR("…"), v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v29, v30, (uint64_t)CFSTR("、、"), (uint64_t)CFSTR("〟"), v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v33, v34, (uint64_t)CFSTR("<<"), (uint64_t)CFSTR("《"), v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v37, v38, (uint64_t)CFSTR(">>"), (uint64_t)CFSTR("》"), v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v41, v42, (uint64_t)CFSTR("＜＜"), (uint64_t)CFSTR("《"), v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v45, v46, (uint64_t)CFSTR("＞＞"), (uint64_t)CFSTR("》"), v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v49 = 0;
  }

  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 8))
  {
    v50 = (void *)objc_opt_class();
    objc_msgSend_transliterateStringUsingICUTransliterator__icuTransliterator_(v50, v51, (uint64_t)v49, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16), v52, v53);
    v54 = objc_claimAutoreleasedReturnValue();

    v49 = (void *)v54;
  }
  v55 = v11;
  isTopOriginal = objc_msgSend_isTopOriginal(v55, v56, v57, v58, v59, v60);
  objc_msgSend_string(v55, v62, v63, v64, v65, v66);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v49, v68, (uint64_t)v67, v69, v70, v71);

  v77 = v55;
  if ((isEqualToString & 1) == 0)
  {
    v78 = [CHTokenizedTextResultToken alloc];
    objc_msgSend_strokeIndexes(v55, v79, v80, v81, v82, v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = v78;
    v179 = objc_msgSend_wordID(v55, v86, v87, v88, v89, v90);
    objc_msgSend_modelScore(v55, v91, v92, v93, v94, v95);
    v178 = v96;
    objc_msgSend_recognitionScore(v55, v97, v98, v99, v100, v101);
    v177 = v102;
    objc_msgSend_combinedScore(v55, v103, v104, v105, v106, v107);
    v176 = v108;
    objc_msgSend_alignmentScore(v55, v109, v110, v111, v112, v113);
    v175 = v114;
    v120 = objc_msgSend_properties(v55, v115, v116, v117, v118, v119);
    objc_msgSend_recognizerSourceLocale(v55, v121, v122, v123, v124, v125);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    v132 = objc_msgSend_inputSources(v55, v127, v128, v129, v130, v131);
    v138 = objc_msgSend_substrokeCount(v55, v133, v134, v135, v136, v137);
    objc_msgSend_bounds(v55, v139, v140, v141, v142, v143);
    v145 = v144;
    v147 = v146;
    v149 = v148;
    v151 = v150;
    objc_msgSend_originalBounds(v55, v152, v153, v154, v155, v156);
    v163 = v162;
    v165 = v164;
    v167 = v166;
    v169 = v168;
    if (v55)
      objc_msgSend_principalLines(v55, v157, v158, v159, v160, v161);
    else
      memset(v180, 0, 128);
    v77 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v85, v157, (uint64_t)v49, (uint64_t)v84, v179, v120, v126, v132 | 8, v178, v177, v176, v175, v145, v147, v149, v151, v138, v163, v165,
                    v167,
                    v169,
                    v180);

  }
  objc_msgSend_addObject_(*(void **)(a1 + 32), v73, (uint64_t)v77, v74, v75, v76);
  v174 = *(void **)(a1 + 40);
  if (isTopOriginal)
    objc_msgSend_addObject_(v174, v170, (uint64_t)v55, v171, v172, v173);
  else
    objc_msgSend_addObject_(v174, v170, (uint64_t)v77, v171, v172, v173);

}

void sub_1BE8B42BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE8B4334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE8B43AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHTransliterateChineseJapaneseStep;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE8B4470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8B4480(_QWORD *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int isNaturallyRTL;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t Index;
  uint64_t v27;
  uint64_t v28;
  id v29;

  v29 = a2;
  objc_msgSend_string(v29, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  isNaturallyRTL = objc_msgSend__isNaturallyRTL(v8, v9, v10, v11, v12, v13);

  objc_msgSend_strokeIndexes(v29, v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  Index = objc_msgSend_firstIndex(v20, v21, v22, v23, v24, v25);

  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = isNaturallyRTL;
  v27 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
  if ((isNaturallyRTL & 1) != 0)
  {
    if (v27)
      goto LABEL_7;
  }
  else if (v27 != 1)
  {
    goto LABEL_7;
  }
  v28 = a1[4];
  if (v28)
    *(_QWORD *)(v28 + 16) = Index >= *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
LABEL_7:
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = Index;
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = isNaturallyRTL;

}

void sub_1BE8B4564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8B457C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8B4590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8B45A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8B45BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("0123456789%"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568DE0;
  qword_1EF568DE0 = v6;

}

void sub_1BE8B5A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,void *a30,void *a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36,uint64_t a37,uint64_t a38,void *a39,void *a40,void *a41,void *a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{

  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

void sub_1BE8B601C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t i;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  double v238;
  double v239;
  double v240;
  double v241;
  CHTokenizedTextResultToken *v242;
  _OWORD v243[9];

  v3 = a2;
  objc_msgSend_string(v3, v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_containsString_(v9, v10, (uint64_t)CFSTR("%"), v11, v12, v13);

  if (v14)
  {
    v242 = [CHTokenizedTextResultToken alloc];
    v19 = *(void **)(a1 + 32);
    objc_msgSend_string(v3, v20, v21, v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v32 = v25;
    if (v19)
    {
      objc_msgSend_string(MEMORY[0x1E0CB37A0], v27, v28, v29, v30, v31);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (qword_1EF568DE8 != -1)
        dispatch_once(&qword_1EF568DE8, &unk_1E77F1CB0);
      if (objc_msgSend_length(v32, v33, v34, v35, v36, v37))
      {
        v42 = objc_msgSend_characterAtIndex_(v32, v38, 0, v39, v40, v41);
        if (v42 == 37)
        {
          if (objc_msgSend_length(v32, v43, v44, v45, v46, v47) == 1)
            v52 = 32;
          else
            v52 = objc_msgSend_characterAtIndex_(v32, v48, 1, v49, v50, v51);
          if ((objc_msgSend_characterIsMember_((void *)qword_1EF568DE0, v48, v26, v49, v50, v51) & 1) != 0
            || (objc_msgSend_characterIsMember_((void *)qword_1EF568DE0, v91, v52, v92, v93, v94) & 1) != 0)
          {
            objc_msgSend_appendFormat_(v19, v91, (uint64_t)CFSTR("%C"), v92, v93, v94, 37);
          }
          else
          {
            objc_msgSend_appendFormat_(v19, v91, (uint64_t)CFSTR("%C"), v92, v93, v94, 1642);
          }
        }
        else
        {
          objc_msgSend_appendFormat_(v19, v43, (uint64_t)CFSTR("%C"), v45, v46, v47, v42);
        }
        for (i = 1; objc_msgSend_length(v32, v86, v87, v88, v89, v90) > i; ++i)
        {
          v100 = objc_msgSend_characterAtIndex_(v32, v96, i, v97, v98, v99);
          if (v100 == 37)
          {
            v105 = objc_msgSend_characterAtIndex_(v32, v101, i - 1, v102, v103, v104);
            if (i == objc_msgSend_length(v32, v106, v107, v108, v109, v110) - 1)
              v115 = 32;
            else
              v115 = objc_msgSend_characterAtIndex_(v32, v111, (i + 1), v112, v113, v114);
            if ((objc_msgSend_characterIsMember_((void *)qword_1EF568DE0, v111, v105, v112, v113, v114) & 1) != 0
              || objc_msgSend_characterIsMember_((void *)qword_1EF568DE0, v116, v115, v117, v118, v119))
            {
              objc_msgSend_appendFormat_(v19, v116, (uint64_t)CFSTR("%C"), v117, v118, v119, 37);
            }
            else
            {
              objc_msgSend_appendFormat_(v19, v116, (uint64_t)CFSTR("%C"), v117, v118, v119, 1642);
            }
          }
          else
          {
            objc_msgSend_appendFormat_(v19, v101, (uint64_t)CFSTR("%C"), v102, v103, v104, v100);
          }
        }
      }
    }

    objc_msgSend_strokeIndexes(v3, v120, v121, v122, v123, v124);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    v131 = objc_msgSend_wordID(v3, v126, v127, v128, v129, v130);
    objc_msgSend_modelScore(v3, v132, v133, v134, v135, v136);
    v241 = v137;
    objc_msgSend_recognitionScore(v3, v138, v139, v140, v141, v142);
    v240 = v143;
    objc_msgSend_combinedScore(v3, v144, v145, v146, v147, v148);
    v239 = v149;
    objc_msgSend_alignmentScore(v3, v150, v151, v152, v153, v154);
    v238 = v155;
    v161 = objc_msgSend_properties(v3, v156, v157, v158, v159, v160);
    objc_msgSend_recognizerSourceLocale(v3, v162, v163, v164, v165, v166);
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    v173 = objc_msgSend_inputSources(v3, v168, v169, v170, v171, v172);
    v179 = objc_msgSend_substrokeCount(v3, v174, v175, v176, v177, v178);
    objc_msgSend_bounds(v3, v180, v181, v182, v183, v184);
    v186 = v185;
    v188 = v187;
    v190 = v189;
    v192 = v191;
    objc_msgSend_originalBounds(v3, v193, v194, v195, v196, v197);
    v204 = v203;
    v206 = v205;
    v208 = v207;
    v210 = v209;
    if (v3)
      objc_msgSend_principalLines(v3, v198, v199, v200, v201, v202);
    else
      memset(v243, 0, 128);
    v211 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v242, v198, (uint64_t)v19, (uint64_t)v125, v131, v161, v167, v173, v241, v240, v239, v238, v186, v188, v190, v192, v179, v204, v206,
                     v208,
                     v210,
                     v243);

    objc_msgSend_addObject_(*(void **)(a1 + 40), v212, (uint64_t)v211, v213, v214, v215);
    objc_msgSend_string(v211, v216, v217, v218, v219, v220);
    v221 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v211, v222, v223, v224, v225, v226);
    v227 = (void *)objc_claimAutoreleasedReturnValue();
    v233 = objc_msgSend_length(v227, v228, v229, v230, v231, v232);
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend_characterAtIndex_(v221, v234, v233 - 1, v235, v236, v237);

  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v15, (uint64_t)v3, v16, v17, v18);
    objc_msgSend_string(v3, v53, v54, v55, v56, v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v58, v59, v60, v61, v62, v63))
    {
      objc_msgSend_string(v3, v64, v65, v66, v67, v68);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_string(v3, v70, v71, v72, v73, v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      v81 = objc_msgSend_length(v75, v76, v77, v78, v79, v80);
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend_characterAtIndex_(v69, v82, v81 - 1, v83, v84, v85);

    }
    else
    {
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 32;
    }

  }
}

void sub_1BE8B64A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8B64C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8B660C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v5 = a2;
  v13 = v5;
  if (a3)
  {
    sub_1BE637DE0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v5);
  }
  else
  {
    v10 = objc_msgSend_mutableCopy(v5, (const char *)v5, v6, v7, v8, v9);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

  }
}

void sub_1BE8B6688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8B6794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8B6BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE8B6DC4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char isEqualToString;
  uint64_t v105;
  id v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  id v117;
  const char *v118;
  uint64_t v119;
  int HasMatchingString;
  uint64_t v121;
  uint64_t v122;
  CHTokenizedTextResultToken *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  BOOL v206;
  void *v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  id v216;
  double v217;
  double v218;
  double v219;
  double v220;
  int v221;
  _OWORD v222[8];
  _QWORD v223[4];
  id v224;
  uint64_t v225;
  id v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t (*v236)(uint64_t, uint64_t);
  void (*v237)(uint64_t);
  id v238;

  v11 = a2;
  v216 = v11;
  if (!*(_QWORD *)(a4 + 16) && objc_msgSend_count(*(void **)(a1 + 32), v6, v7, v8, v9, v10))
  {
    sub_1BE8A313C((uint64_t)CHPostprocessingStep, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
    objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    objc_msgSend_removeAllObjects(*(void **)(a1 + 40), v17, v18, v19, v20, v21);
  }
  v22 = *(_QWORD *)(a1 + 64);
  v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v24 = v11;
  v30 = v23;
  if (v22)
  {
    objc_msgSend_string(MEMORY[0x1E0CB37A0], v25, v26, v27, v28, v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v233 = 0;
    v234 = &v233;
    v235 = 0x3032000000;
    v236 = sub_1BE8A7340;
    v237 = sub_1BE8A7350;
    objc_msgSend_lastComposedCharacter(v30, v32, v33, v34, v35, v36);
    v238 = (id)objc_claimAutoreleasedReturnValue();
    if (!v234[5])
      v234[5] = (uint64_t)&stru_1E77F6F28;
    objc_msgSend_string(v24, v37, v38, v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend_length(v42, v43, v44, v45, v46, v47);
    v54 = objc_msgSend_length((void *)v234[5], v49, v50, v51, v52, v53) + v48;

    if (v54 > 1)
    {
      v229 = 0;
      v230 = &v229;
      v231 = 0x2020000000;
      v232 = 0;
      objc_msgSend_string(v24, v55, v56, v57, v58, v59);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_string(v24, v62, v63, v64, v65, v66);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = objc_msgSend_length(v67, v68, v69, v70, v71, v72);
      v223[0] = MEMORY[0x1E0C809B0];
      v223[1] = 3221225472;
      v223[2] = sub_1BE8B7450;
      v223[3] = &unk_1E77F68C0;
      v224 = v24;
      v225 = v22;
      v227 = &v233;
      v74 = v31;
      v226 = v74;
      v228 = &v229;
      objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v61, v75, 0, v73, 2, (uint64_t)v223);

      v221 = *((unsigned __int8 *)v230 + 24);
      v60 = v74;

      _Block_object_dispose(&v229, 8);
    }
    else
    {
      objc_msgSend_string(v24, v55, v56, v57, v58, v59);
      v60 = (id)objc_claimAutoreleasedReturnValue();
      v221 = 0;
    }
    _Block_object_dispose(&v233, 8);

  }
  else
  {
    v221 = 0;
    v60 = 0;
  }

  v81 = objc_msgSend_properties(v24, v76, v77, v78, v79, v80);
  v87 = objc_msgSend_inputSources(v24, v82, v83, v84, v85, v86);
  v93 = objc_msgSend_wordID(v24, v88, v89, v90, v91, v92);
  objc_msgSend_string(v24, v94, v95, v96, v97, v98);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v60, v100, (uint64_t)v99, v101, v102, v103);

  if ((isEqualToString & 1) == 0)
  {
    v105 = *(_QWORD *)(a1 + 64);
    v106 = v60;
    v110 = v106;
    if (v105)
    {
      v93 = objc_msgSend_tokenIDForString_withLexicon_(CHLanguageUtilities, v107, (uint64_t)v106, *(_QWORD *)(v105 + 24), v108, v109);
      if (!(_DWORD)v93)
        v93 = objc_msgSend_tokenIDForString_withLexicon_(CHLanguageUtilities, v111, (uint64_t)v110, *(_QWORD *)(v105 + 16), v112, v113);

      LOBYTE(v223[0]) = 0;
      v114 = *(_QWORD *)(a1 + 64);
      v117 = v110;
      if (v114)
        goto LABEL_16;
    }
    else
    {
      v93 = 0;

      LOBYTE(v223[0]) = 0;
      v114 = *(_QWORD *)(a1 + 64);
      v117 = v110;
      if (v114)
      {
LABEL_16:
        if (objc_msgSend_lexiconHasEntryForString_withLexicon_outHasMatchingString_(CHLanguageUtilities, v115, (uint64_t)v117, *(_QWORD *)(v114 + 16), (uint64_t)v223, v116))
        {

LABEL_19:
          v121 = 260;
          if (!LOBYTE(v223[0]))
            v121 = 4;
          v81 |= v121;
          goto LABEL_26;
        }
        HasMatchingString = objc_msgSend_lexiconHasEntryForString_withLexicon_outHasMatchingString_(CHLanguageUtilities, v118, (uint64_t)v117, *(_QWORD *)(v114 + 24), (uint64_t)v223, v119);

        if (HasMatchingString)
          goto LABEL_19;
LABEL_25:
        v81 &= 0xFFFFFFFFFFFFFEFBLL;
LABEL_26:
        v122 = 128;
        if (!v221)
          v122 = 2048;
        v87 |= v122;
        goto LABEL_29;
      }
    }

    goto LABEL_25;
  }
LABEL_29:
  v123 = [CHTokenizedTextResultToken alloc];
  objc_msgSend_strokeIndexes(v24, v124, v125, v126, v127, v128);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_modelScore(v24, v130, v131, v132, v133, v134);
  v220 = v135;
  objc_msgSend_recognitionScore(v24, v136, v137, v138, v139, v140);
  v219 = v141;
  objc_msgSend_combinedScore(v24, v142, v143, v144, v145, v146);
  v218 = v147;
  objc_msgSend_alignmentScore(v24, v148, v149, v150, v151, v152);
  v217 = v153;
  objc_msgSend_recognizerSourceLocale(v24, v154, v155, v156, v157, v158);
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  v165 = objc_msgSend_substrokeCount(v24, v160, v161, v162, v163, v164);
  objc_msgSend_bounds(v24, v166, v167, v168, v169, v170);
  v172 = v171;
  v174 = v173;
  v176 = v175;
  v178 = v177;
  objc_msgSend_originalBounds(v24, v179, v180, v181, v182, v183);
  v190 = v189;
  v192 = v191;
  v194 = v193;
  v196 = v195;
  if (v24)
    objc_msgSend_principalLines(v24, v184, v185, v186, v187, v188);
  else
    memset(v222, 0, sizeof(v222));
  v197 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v123, v184, (uint64_t)v60, (uint64_t)v129, v93, v81, v159, v87, v220, v219, v218, v217, v172, v174, v176, v178, v165, v190, v192,
                   v194,
                   v196,
                   v222,
                   v216);

  objc_msgSend_addObject_(*(void **)(a1 + 32), v198, (uint64_t)v197, v199, v200, v201);
  if (*(_QWORD *)(a1 + 80))
    v206 = 1;
  else
    v206 = v221 == 0;
  v207 = *(void **)(a1 + 40);
  if (v206)
    objc_msgSend_addObject_(v207, v202, (uint64_t)v197, v203, v204, v205);
  else
    objc_msgSend_addObject_(v207, v202, (uint64_t)v24, v203, v204, v205);
  objc_msgSend_string(v197, v208, v209, v210, v211, v212);
  v213 = objc_claimAutoreleasedReturnValue();
  v214 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v215 = *(void **)(v214 + 40);
  *(_QWORD *)(v214 + 40) = v213;

}

void sub_1BE8B7320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,void *a43)
{
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;

  _Block_object_dispose((const void *)(v48 - 232), 8);
  _Block_object_dispose((const void *)(v48 - 200), 8);

  _Unwind_Resume(a1);
}

void sub_1BE8B7414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE8B7434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE8B7450(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int isValidForLocale;
  int v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  id v94;
  _BOOL4 v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  char shouldPreserveOriginal;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  __CFString *v115;
  void *v116;
  id obj;
  void *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t, _BYTE *);
  void *v126;
  id v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char v132;
  _BYTE v133[128];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v113 = a2;
  objc_msgSend_string(*(void **)(a1 + 32), v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_length(v16, v17, v18, v19, v20, v21);
  v23 = a5 + a6;

  if (v23 >= v22)
  {
    v115 = &stru_1E77F6F28;
  }
  else
  {
    objc_msgSend_string(*(void **)(a1 + 32), v24, v25, v26, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v29, v30, v23, v31, v32, v33);
    v36 = v35;

    objc_msgSend_string(*(void **)(a1 + 32), v37, v38, v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_substringWithRange_(v42, v43, v34, v36, v44, v45);
    v115 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  v46 = v113;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  obj = *(id *)(*(_QWORD *)(a1 + 40) + 8);
  v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v47, (uint64_t)&v119, (uint64_t)v133, 16, v48);
  v118 = v46;
  v116 = v46;
  if (v54)
  {
    v55 = *(_QWORD *)v120;
    v114 = a3 + a4;
    v116 = v46;
    do
    {
      for (i = 0; i != v54; ++i)
      {
        if (*(_QWORD *)v120 != v55)
          objc_enumerationMutation(obj);
        v57 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * i);
        objc_msgSend_confusion(v57, v49, v50, v51, v52, v53);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isEqualToString_(v118, v59, (uint64_t)v58, v60, v61, v62))
        {
          isValidForLocale = objc_msgSend_isValidForLocale_(v57, v63, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32), v64, v65, v66);

          if (isValidForLocale)
          {
            v68 = objc_msgSend_meetsContextRequirementWithLeftContext_rightContext_(v57, v49, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), (uint64_t)v115, v52, v53);
            if (objc_msgSend_requiresLexiconMatch(v57, v69, v70, v71, v72, v73))
            {
              objc_msgSend_string(*(void **)(a1 + 32), v49, v50, v51, v52, v53);
              v74 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_substringFromIndex_(v74, v75, v114, v76, v77, v78);
              v79 = (void *)objc_claimAutoreleasedReturnValue();

              v80 = (void *)MEMORY[0x1E0CB3940];
              v81 = *(_QWORD *)(a1 + 48);
              objc_msgSend_correction(v57, v82, v83, v84, v85, v86);
              v87 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_stringWithFormat_(v80, v88, (uint64_t)CFSTR("%@%@%@"), v89, v90, v91, v81, v87, v79);
              v92 = (void *)objc_claimAutoreleasedReturnValue();

              v93 = v92;
              v129 = 0;
              v130 = &v129;
              v131 = 0x2020000000;
              v132 = 0;
              v123 = MEMORY[0x1E0C809B0];
              v124 = 3221225472;
              v125 = sub_1BE8B79D4;
              v126 = &unk_1E77F68E8;
              v128 = &v129;
              v94 = v93;
              v127 = v94;
              LXLexiconEnumerateEntriesForString();
              LODWORD(v87) = *((_BYTE *)v130 + 24) == 0;

              _Block_object_dispose(&v129, 8);
              if ((_DWORD)v87)
              {
                v96 = v94;
                v129 = 0;
                v130 = &v129;
                v131 = 0x2020000000;
                v132 = 0;
                v123 = MEMORY[0x1E0C809B0];
                v124 = 3221225472;
                v125 = sub_1BE8B79D4;
                v126 = &unk_1E77F68E8;
                v128 = &v129;
                v97 = v96;
                v127 = v97;
                LXLexiconEnumerateEntriesForString();
                v95 = *((_BYTE *)v130 + 24) != 0;

                _Block_object_dispose(&v129, 8);
              }
              else
              {
                v95 = 1;
              }

            }
            else
            {
              v95 = 1;
            }
            if ((v68 & v95) == 1)
            {
              objc_msgSend_correction(v57, v49, v50, v51, v52, v53);
              v98 = objc_claimAutoreleasedReturnValue();

              v99 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
              if (*(_BYTE *)(v99 + 24))
              {
                shouldPreserveOriginal = 1;
              }
              else
              {
                shouldPreserveOriginal = objc_msgSend_shouldPreserveOriginal(v57, v49, v50, v51, v52, v53);
                v99 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
              }
              *(_BYTE *)(v99 + 24) = shouldPreserveOriginal;
              v116 = (void *)v98;
            }
          }
        }
        else
        {

        }
      }
      v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v49, (uint64_t)&v119, (uint64_t)v133, 16, v53);
    }
    while (v54);
  }

  objc_msgSend_appendString_(*(void **)(a1 + 48), v101, (uint64_t)v116, v102, v103, v104);
  v110 = objc_msgSend_copy(v116, v105, v106, v107, v108, v109);
  v111 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v112 = *(void **)(v111 + 40);
  *(_QWORD *)(v111 + 40) = v110;

}

void sub_1BE8B78E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE8B79D4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  double v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  void *cf;

  LXEntryCopyString();
  cf = (void *)objc_claimAutoreleasedReturnValue();
  LXEntryGetPartialProbability();
  v6 = v5;
  v10 = objc_msgSend_rangeOfString_options_(*(void **)(a1 + 32), v7, (uint64_t)cf, 1, v8, v9);
  v12 = v6 > -1.7 && v10 != 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v12;
  CFRelease(cf);
  *a3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

}

void sub_1BE8B7A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8B7A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8B7AA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  CHContextualCharacterTransliteration *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CHContextualCharacterTransliteration *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  CHContextualCharacterTransliteration *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  CHContextualCharacterTransliteration *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  CHContextualCharacterTransliteration *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  void *v127;
  CHContextualCharacterTransliteration *v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  CHContextualCharacterTransliteration *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  const char *v164;
  void *v165;
  CHContextualCharacterTransliteration *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const char *v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  CHContextualCharacterTransliteration *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  const char *v208;
  void *v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  void *v224;
  void *v225;
  void *shouldPreserveOriginal;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  _QWORD v235[2];

  v235[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend_array(MEMORY[0x1E0C99DE8], a2, a3, a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568DF0;
  qword_1EF568DF0 = v6;

  v8 = [CHContextualCharacterTransliteration alloc];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v9, (uint64_t)CFSTR("es"), v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v235[0] = v13;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v14, (uint64_t)v235, 1, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_ch_emptyCharacterSet(MEMORY[0x1E0CB3500], v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v214 = 1;
  shouldPreserveOriginal = (void *)objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v8, v24, (uint64_t)CFSTR("i"), (uint64_t)CFSTR("¡"), (uint64_t)v17, (uint64_t)v23, 0, 1, v214);

  objc_msgSend_addObject_((void *)qword_1EF568DF0, v25, (uint64_t)shouldPreserveOriginal, v26, v27, v28);
  v29 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  objc_msgSend_ch_katakanaCharacterSet(MEMORY[0x1E0CB3500], v30, v31, v32, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v29, v36, (uint64_t)v35, v37, v38, v39);

  objc_msgSend_ch_hiraganaCharacterSet(MEMORY[0x1E0CB3500], v40, v41, v42, v43, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v29, v46, (uint64_t)v45, v47, v48, v49);

  objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E0CB3500], v50, v51, v52, v53, v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v29, v56, (uint64_t)v55, v57, v58, v59);

  v60 = [CHContextualCharacterTransliteration alloc];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v61, (uint64_t)CFSTR("ja"), v62, v63, v64);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v234 = v65;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v66, (uint64_t)&v234, 1, v67, v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v215) = 0;
  v225 = (void *)objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v60, v70, (uint64_t)CFSTR("-"), (uint64_t)CFSTR("ー"), (uint64_t)v69, (uint64_t)v29, 0, 0, v215);

  v71 = [CHContextualCharacterTransliteration alloc];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v72, (uint64_t)CFSTR("ja"), v73, v74, v75);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v233 = v76;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v77, (uint64_t)&v233, 1, v78, v79);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v216) = 0;
  v224 = (void *)objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v71, v81, (uint64_t)CFSTR("-"), (uint64_t)CFSTR("ー"), (uint64_t)v80, 0, v29, 0, v216);

  objc_msgSend_addObject_((void *)qword_1EF568DF0, v82, (uint64_t)v225, v83, v84, v85);
  objc_msgSend_addObject_((void *)qword_1EF568DF0, v86, (uint64_t)v224, v87, v88, v89);
  v90 = [CHContextualCharacterTransliteration alloc];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v91, (uint64_t)CFSTR("ja"), v92, v93, v94);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  v232 = v95;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v96, (uint64_t)&v232, 1, v97, v98);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v100, (uint64_t)CFSTR("加"), v101, v102, v103);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v217) = 1;
  v223 = (void *)objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v90, v105, (uint64_t)CFSTR("I"), (uint64_t)CFSTR("工"), (uint64_t)v99, (uint64_t)v104, 0, 0, v217);

  objc_msgSend_addObject_((void *)qword_1EF568DF0, v106, (uint64_t)v223, v107, v108, v109);
  v110 = [CHContextualCharacterTransliteration alloc];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v111, (uint64_t)CFSTR("zh"), v112, v113, v114);
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  v231 = v115;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v116, (uint64_t)&v231, 1, v117, v118);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E0CB3500], v120, v121, v122, v123, v124);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v218) = 0;
  v127 = (void *)objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v110, v126, (uint64_t)CFSTR("-"), (uint64_t)CFSTR("一"), (uint64_t)v119, (uint64_t)v125, 0, 0, v218);

  v128 = [CHContextualCharacterTransliteration alloc];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v129, (uint64_t)CFSTR("zh"), v130, v131, v132);
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  v230 = v133;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v134, (uint64_t)&v230, 1, v135, v136);
  v137 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E0CB3500], v138, v139, v140, v141, v142);
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v219) = 0;
  v145 = (void *)objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v128, v144, (uint64_t)CFSTR("-"), (uint64_t)CFSTR("一"), (uint64_t)v137, 0, v143, 0, v219);

  objc_msgSend_addObject_((void *)qword_1EF568DF0, v146, (uint64_t)v127, v147, v148, v149);
  objc_msgSend_addObject_((void *)qword_1EF568DF0, v150, (uint64_t)v145, v151, v152, v153);
  v154 = [CHContextualCharacterTransliteration alloc];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v155, (uint64_t)CFSTR("uk"), v156, v157, v158);
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  v229 = v159;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v160, (uint64_t)&v229, 1, v161, v162);
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v220) = 1;
  v165 = (void *)objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v154, v164, (uint64_t)CFSTR("Г"), (uint64_t)CFSTR("Ґ"), (uint64_t)v163, 0, 0, 1, v220);

  v166 = [CHContextualCharacterTransliteration alloc];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v167, (uint64_t)CFSTR("uk"), v168, v169, v170);
  v171 = (void *)objc_claimAutoreleasedReturnValue();
  v228 = v171;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v172, (uint64_t)&v228, 1, v173, v174);
  v175 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v221) = 1;
  v177 = (void *)objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v166, v176, (uint64_t)CFSTR("г"), (uint64_t)CFSTR("ґ"), (uint64_t)v175, 0, 0, 1, v221);

  objc_msgSend_addObject_((void *)qword_1EF568DF0, v178, (uint64_t)v165, v179, v180, v181);
  objc_msgSend_addObject_((void *)qword_1EF568DF0, v182, (uint64_t)v177, v183, v184, v185);
  v186 = [CHContextualCharacterTransliteration alloc];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v187, (uint64_t)CFSTR("uk"), v188, v189, v190);
  v191 = (void *)objc_claimAutoreleasedReturnValue();
  v227 = v191;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v192, (uint64_t)&v227, 1, v193, v194);
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_ch_basicCyrillicCharacterSet(MEMORY[0x1E0CB3500], v196, v197, v198, v199, v200);
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_ch_basicCyrillicCharacterSet(MEMORY[0x1E0CB3500], v202, v203, v204, v205, v206);
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v222) = 0;
  v209 = (void *)objc_msgSend_initWithConfusion_correction_locales_leftContext_rightContext_requiresLexiconMatch_shouldPreserveOriginal_(v186, v208, (uint64_t)CFSTR("'"), (uint64_t)CFSTR("ʼ"), (uint64_t)v195, (uint64_t)v201, v207, 0, v222);

  objc_msgSend_addObject_((void *)qword_1EF568DF0, v210, (uint64_t)v209, v211, v212, v213);
}

void sub_1BE8B8174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE8B8574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE8B8924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE8B8A7C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  size_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  void **p_dst;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  uint64_t v81;
  uint64_t v82;
  size_t v83;
  void **v84;
  uint64_t v85;
  int v86;
  size_t v87;
  const void *v88;
  size_t v89;
  int v90;
  _BOOL4 v91;
  BOOL v92;
  uint64_t *v93;
  int v94;
  size_t v95;
  const void *v96;
  size_t v97;
  int v98;
  _BOOL4 v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  CHTokenizedTextResultToken *v110;
  _QWORD *v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  double v199;
  double v200;
  double v201;
  double v202;
  id v203;
  void *v204;
  char *v205;
  _OWORD v206[8];
  void **__dst;
  size_t v208;
  unint64_t v209;

  v3 = a2;
  v205 = (char *)v3;
  if (!*(_QWORD *)(a1 + 64))
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v3, (uint64_t)v3, v4, v5, v6);
    objc_msgSend_leftContext(*(void **)(a1 + 40), v7, v8, v9, v10, v11);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      objc_msgSend_leftContext(*(void **)(a1 + 40), v12, v13, v14, v15, v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_length(v18, v19, v20, v21, v22, v23))
      {
        v29 = objc_msgSend_properties(v205, v24, v25, v26, v27, v28);

        if ((v29 & 0x20) == 0)
          goto LABEL_72;
      }
      else
      {

      }
    }
    v34 = *(_QWORD *)(a1 + 48);
    v35 = v205;
    v41 = v35;
    if (!v34
      || (objc_msgSend_string(v35, v36, v37, v38, v39, v40),
          v42 = (void *)objc_claimAutoreleasedReturnValue(),
          v48 = objc_msgSend_length(v42, v43, v44, v45, v46, v47),
          v42,
          v48 != 1))
    {

      goto LABEL_72;
    }
    objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v49, (uint64_t)CFSTR("es_ES"), v50, v51, v52);
    v204 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v41, v53, v54, v55, v56, v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lowercaseStringWithLocale_(v58, v59, (uint64_t)v204, v60, v61, v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();

    v203 = objc_retainAutorelease(v63);
    v69 = (const char *)objc_msgSend_UTF8String(v203, v64, v65, v66, v67, v68);
    v70 = strlen(v69);
    if (v70 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    v76 = v70;
    if (v70 >= 0x17)
    {
      v81 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17)
        v81 = v70 | 7;
      v82 = v81 + 1;
      p_dst = (void **)operator new(v81 + 1);
      v208 = v76;
      v209 = v82 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v209) = v70;
      p_dst = (void **)&__dst;
      if (!v70)
      {
        LOBYTE(__dst) = 0;
        v79 = v34 + 16;
        v78 = *(_QWORD *)(v34 + 16);
        v80 = HIBYTE(v209);
        if (!v78)
          goto LABEL_58;
        goto LABEL_20;
      }
    }
    memmove(p_dst, v69, v76);
    *((_BYTE *)p_dst + v76) = 0;
    v79 = v34 + 16;
    v78 = *(_QWORD *)(v34 + 16);
    v80 = HIBYTE(v209);
    if (!v78)
      goto LABEL_58;
LABEL_20:
    if ((v80 & 0x80u) == 0)
      v83 = v80;
    else
      v83 = v208;
    if ((v80 & 0x80u) == 0)
      v84 = (void **)&__dst;
    else
      v84 = __dst;
    v85 = v79;
    do
    {
      v86 = *(char *)(v78 + 55);
      if (v86 >= 0)
        v87 = *(unsigned __int8 *)(v78 + 55);
      else
        v87 = *(_QWORD *)(v78 + 40);
      if (v86 >= 0)
        v88 = (const void *)(v78 + 32);
      else
        v88 = *(const void **)(v78 + 32);
      if (v83 >= v87)
        v89 = v87;
      else
        v89 = v83;
      v90 = memcmp(v88, v84, v89);
      v91 = v87 < v83;
      if (v90)
        v91 = v90 < 0;
      v92 = !v91;
      if (v91)
        v93 = (uint64_t *)(v78 + 8);
      else
        v93 = (uint64_t *)v78;
      if (v92)
        v85 = v78;
      v78 = *v93;
    }
    while (*v93);
    if (v85 != v79)
    {
      v94 = *(char *)(v85 + 55);
      if (v94 >= 0)
        v95 = *(unsigned __int8 *)(v85 + 55);
      else
        v95 = *(_QWORD *)(v85 + 40);
      if (v94 >= 0)
        v96 = (const void *)(v85 + 32);
      else
        v96 = *(const void **)(v85 + 32);
      if (v95 >= v83)
        v97 = v83;
      else
        v97 = v95;
      v98 = memcmp(v84, v96, v97);
      v99 = v83 < v95;
      if (v98)
        v99 = v98 < 0;
      if (!v99)
      {
        if ((v80 & 0x80) != 0)
        {
LABEL_59:
          operator delete(__dst);
          if (v85 == v34 + 16)
            goto LABEL_68;
LABEL_63:
          objc_msgSend_recognitionScore(v41, v71, v72, v73, v74, v75);
          if (v105 < *(double *)(v85 + 80))
          {
            v106 = objc_msgSend_properties(v41, v100, v101, v102, v103, v104);
            v110 = [CHTokenizedTextResultToken alloc];
            v111 = (_QWORD *)(v85 + 56);
            if (*(char *)(v85 + 79) < 0)
              v111 = (_QWORD *)*v111;
            objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v107, (uint64_t)v111, 4, v108, v109);
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_strokeIndexes(v41, v113, v114, v115, v116, v117);
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            v124 = objc_msgSend_wordID(v41, v119, v120, v121, v122, v123);
            objc_msgSend_modelScore(v41, v125, v126, v127, v128, v129);
            v202 = v130;
            objc_msgSend_recognitionScore(v41, v131, v132, v133, v134, v135);
            v201 = v136;
            objc_msgSend_combinedScore(v41, v137, v138, v139, v140, v141);
            v200 = v142;
            objc_msgSend_alignmentScore(v41, v143, v144, v145, v146, v147);
            v199 = v148;
            objc_msgSend_recognizerSourceLocale(v41, v149, v150, v151, v152, v153);
            v154 = (void *)objc_claimAutoreleasedReturnValue();
            v160 = objc_msgSend_inputSources(v41, v155, v156, v157, v158, v159);
            v166 = objc_msgSend_substrokeCount(v41, v161, v162, v163, v164, v165);
            objc_msgSend_bounds(v41, v167, v168, v169, v170, v171);
            v173 = v172;
            v175 = v174;
            v177 = v176;
            v179 = v178;
            objc_msgSend_originalBounds(v41, v180, v181, v182, v183, v184);
            v191 = v190;
            v193 = v192;
            v195 = v194;
            v197 = v196;
            if (v41)
              objc_msgSend_principalLines(v41, v185, v186, v187, v188, v189);
            else
              memset(v206, 0, sizeof(v206));
            v198 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v110, v185, (uint64_t)v112, (uint64_t)v118, v124, v106 & 0xFFFFFFFFFFFFFEFBLL, v154, v160 | 0x80, v202, v201, v200, v199, v173, v175, v177, v179, v166, v191, v193,
                             v195,
                             v197,
                             v206);

            if (v198)
            {
              objc_msgSend_addObject_(*(void **)(a1 + 56), v30, (uint64_t)v198, v31, v32, v33);
LABEL_73:

              goto LABEL_74;
            }
LABEL_72:
            v198 = 0;
            objc_msgSend_addObject_(*(void **)(a1 + 56), v30, (uint64_t)v205, v31, v32, v33);
            goto LABEL_73;
          }
LABEL_68:

          goto LABEL_72;
        }
LABEL_62:
        if (v85 == v34 + 16)
          goto LABEL_68;
        goto LABEL_63;
      }
    }
LABEL_58:
    v85 = v79;
    if ((v80 & 0x80) != 0)
      goto LABEL_59;
    goto LABEL_62;
  }
  objc_msgSend_addObject_(*(void **)(a1 + 56), v3, (uint64_t)v3, v4, v5, v6);
LABEL_74:

}

void sub_1BE8B8F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,id a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE8B9038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE8B9054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE8B906C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{

  _Unwind_Resume(a1);
}

void sub_1BE8B9468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE8B98D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE8B9AA0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("0179OoqVv"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568E00;
  qword_1EF568E00 = v6;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v8, (uint64_t)CFSTR("٠١٢٣٤٥٦٧٨٩."), v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)qword_1EF568E08;
  qword_1EF568E08 = v12;

}

void sub_1BE8B9B00(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSString *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  NSString *v90;
  _BOOL4 v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  int v127;
  void *v128;
  NSString *v129;
  _BOOL4 v130;
  CHTokenizedTextResultToken *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  double v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  double v240;
  double v241;
  double v242;
  double v243;
  unsigned int v244;
  CHTokenizedTextResultToken *v245;
  void *v246;
  _OWORD v247[9];

  v8 = a2;
  if (!*(_QWORD *)(a1 + 72))
  {
    objc_msgSend_result(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend_tokenColumnCount(v9, v10, v11, v12, v13, v14);

    if (v15 == 1)
    {
      sub_1BE8BA2F0(*(_QWORD *)(a1 + 40), v8, *(_QWORD *)(a1 + 40) + 8);
      v16 = objc_claimAutoreleasedReturnValue();
      sub_1BE8BA2F0(*(_QWORD *)(a1 + 40), v8, *(_QWORD *)(a1 + 40) + 32);
      v22 = objc_claimAutoreleasedReturnValue();
      if (v16 | v22)
      {
        if ((objc_msgSend_properties(v8, v17, v18, v19, v20, v21) & 0x20) != 0)
        {
          objc_msgSend_objectForKey_(*(void **)(a1 + 48), v23, (uint64_t)CHRecognitionOptionIsPreviousResultCharacterLevel[0], v25, v26, v27);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = objc_msgSend_isEqual_(v33, v34, MEMORY[0x1E0C9AAB0], v35, v36, v37) ^ 1;

        }
        else
        {
          v28 = 0;
        }
        objc_msgSend_leftContext(*(void **)(a1 + 32), v23, v24, v25, v26, v27);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        if (v43)
        {
          objc_msgSend_leftContext(*(void **)(a1 + 32), v38, v39, v40, v41, v42);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = objc_msgSend_length(v44, v45, v46, v47, v48, v49);

          if (v50)
          {
            objc_msgSend_leftContext(*(void **)(a1 + 32), v38, v51, v40, v41, v42);
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_lastComposedCharacter(v52, v53, v54, v55, v56, v57);
            v58 = (NSString *)objc_claimAutoreleasedReturnValue();
            LODWORD(v50) = isCharacterArabicScript(v58);

            if ((_DWORD)v50)
            {
              objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v38, v59, v40, v41, v42);
              v60 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_leftContext(*(void **)(a1 + 32), v61, v62, v63, v64, v65);
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_leftContext(*(void **)(a1 + 32), v67, v68, v69, v70, v71);
              v72 = (void *)objc_claimAutoreleasedReturnValue();
              v78 = objc_msgSend_length(v72, v73, v74, v75, v76, v77);
              v83 = objc_msgSend_characterAtIndex_(v66, v79, v78 - 1, v80, v81, v82);
              LODWORD(v50) = objc_msgSend_characterIsMember_(v60, v84, v83, v85, v86, v87);

              v88 = 0;
              v89 = 0;
              if (!v16)
                goto LABEL_32;
            }
            else
            {
              v88 = 0;
              v89 = 1;
              if (!v16)
                goto LABEL_32;
            }
LABEL_25:
            if ((v50 & 1) == 0)
            {
              v120 = v88 | (v28 | v89) ^ 1;
              v121 = *(void **)(a1 + 56);
              if (v120)
                objc_msgSend_addObject_(v121, v38, v16, v40, v41, v42);
              else
                objc_msgSend_addObject_(v121, v38, (uint64_t)v8, v40, v41, v42);
              v126 = *(void **)(a1 + 64);
              if (!v120)
              {
                objc_msgSend_addObject_(v126, v122, v16, v123, v124, v125);
                goto LABEL_47;
              }
              goto LABEL_30;
            }
LABEL_32:
            if (!v22)
              goto LABEL_47;
            v127 = v88 | v50 & ~v28;
            v128 = *(void **)(a1 + 56);
            if (v127)
              objc_msgSend_addObject_(v128, v38, v22, v40, v41, v42);
            else
              objc_msgSend_addObject_(v128, v38, (uint64_t)v8, v40, v41, v42);
            v126 = *(void **)(a1 + 64);
            if (!v127)
            {
              objc_msgSend_addObject_(v126, v122, v22, v123, v124, v125);
              goto LABEL_47;
            }
LABEL_30:
            objc_msgSend_addObject_(v126, v122, (uint64_t)v8, v123, v124, v125);
            goto LABEL_47;
          }
        }
        else
        {
          LODWORD(v50) = 0;
        }
        v88 = 1;
        v89 = 1;
        if (!v16)
          goto LABEL_32;
        goto LABEL_25;
      }
      if (*(_QWORD *)(a1 + 72))
      {
LABEL_9:
        objc_msgSend_addObject_(*(void **)(a1 + 56), v17, (uint64_t)v8, v19, v20, v21);
        objc_msgSend_addObject_(*(void **)(a1 + 64), v29, (uint64_t)v8, v30, v31, v32);
LABEL_47:

        goto LABEL_7;
      }
      objc_msgSend_string(v8, v17, v18, v19, v20, v21);
      v90 = (NSString *)objc_claimAutoreleasedReturnValue();
      v91 = isStringEntirelyFromSet(v90, (NSCharacterSet *)qword_1EF568E00);

      if (v91)
      {
        sub_1BE8BA778(*(_QWORD *)(a1 + 40), v8, *(_QWORD *)(a1 + 40) + 32);
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_leftContext(*(void **)(a1 + 32), v94, v95, v96, v97, v98);
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v104)
          goto LABEL_42;
        objc_msgSend_leftContext(*(void **)(a1 + 32), v99, v100, v101, v102, v103);
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_ch_arabicDigitSet(MEMORY[0x1E0CB3500], v106, v107, v108, v109, v110);
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        v115 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(v105, v112, (uint64_t)v111, 1, v113, v114);

        LODWORD(v104) = v115 > 0;
        if (v115 > 0)
          objc_msgSend_addObject_(*(void **)(a1 + 56), v99, (uint64_t)v93, v101, v102, v103);
        else
LABEL_42:
          objc_msgSend_addObject_(*(void **)(a1 + 56), v99, (uint64_t)v8, v101, v102, v103);
        v231 = *(void **)(a1 + 64);
        if ((_DWORD)v104)
          objc_msgSend_addObject_(v231, v116, (uint64_t)v8, v117, v118, v119);
        else
          objc_msgSend_addObject_(v231, v116, (uint64_t)v93, v117, v118, v119);
      }
      else
      {
        if (*(_QWORD *)(a1 + 72))
          goto LABEL_9;
        objc_msgSend_string(v8, v17, v92, v19, v20, v21);
        v129 = (NSString *)objc_claimAutoreleasedReturnValue();
        v130 = isStringEntirelyFromSet(v129, (NSCharacterSet *)qword_1EF568E08);

        if (!v130)
          goto LABEL_9;
        v131 = [CHTokenizedTextResultToken alloc];
        objc_msgSend_string(v8, v132, v133, v134, v135, v136);
        v246 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v246, v137, (uint64_t)CFSTR("."), (uint64_t)CFSTR("٠"), v138, v139);
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeIndexes(v8, v141, v142, v143, v144, v145);
        v146 = (void *)objc_claimAutoreleasedReturnValue();
        v245 = v131;
        v244 = objc_msgSend_wordID(v8, v147, v148, v149, v150, v151);
        objc_msgSend_modelScore(v8, v152, v153, v154, v155, v156);
        v243 = v157;
        objc_msgSend_recognitionScore(v8, v158, v159, v160, v161, v162);
        v242 = v163;
        objc_msgSend_combinedScore(v8, v164, v165, v166, v167, v168);
        v241 = v169;
        objc_msgSend_alignmentScore(v8, v170, v171, v172, v173, v174);
        v240 = v175;
        v181 = objc_msgSend_properties(v8, v176, v177, v178, v179, v180);
        objc_msgSend_recognizerSourceLocale(v8, v182, v183, v184, v185, v186);
        v187 = (void *)objc_claimAutoreleasedReturnValue();
        v193 = objc_msgSend_inputSources(v8, v188, v189, v190, v191, v192);
        v199 = objc_msgSend_substrokeCount(v8, v194, v195, v196, v197, v198);
        objc_msgSend_bounds(v8, v200, v201, v202, v203, v204);
        v206 = v205;
        v208 = v207;
        v210 = v209;
        v212 = v211;
        objc_msgSend_originalBounds(v8, v213, v214, v215, v216, v217);
        v224 = v223;
        v226 = v225;
        v228 = v227;
        v230 = v229;
        if (v8)
          objc_msgSend_principalLines(v8, v218, v219, v220, v221, v222);
        else
          memset(v247, 0, 128);
        v93 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v245, v218, (uint64_t)v140, (uint64_t)v146, v244, v181, v187, v193 | 0x80, v243, v242, v241, v240, v206, v208, v210, v212, v199, v224, v226,
                        v228,
                        v230,
                        v247);

        objc_msgSend_addObject_(*(void **)(a1 + 56), v232, (uint64_t)v8, v233, v234, v235);
        objc_msgSend_addObject_(*(void **)(a1 + 64), v236, (uint64_t)v93, v237, v238, v239);
      }

      goto LABEL_47;
    }
  }
  objc_msgSend_addObject_(*(void **)(a1 + 56), v3, (uint64_t)v8, v5, v6, v7);
LABEL_7:

}

void sub_1BE8BA050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1BE8BA144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE8BA164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8BA180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8BA19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8BA1B8()
{
  void *v0;

  JUMPOUT(0x1BE8BA1C0);
}

void sub_1BE8BA1DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BA1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BA20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE8BA22C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8BA248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BA260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BA278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BA290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BA2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BA2BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BA2CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BA2E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE8BA2F0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  size_t v32;
  void **p_dst;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  void **v42;
  uint64_t v43;
  int v44;
  size_t v45;
  const void *v46;
  size_t v47;
  int v48;
  _BOOL4 v49;
  BOOL v50;
  uint64_t *v51;
  int v52;
  size_t v53;
  const void *v54;
  size_t v55;
  int v56;
  _BOOL4 v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  CHTokenizedTextResultToken *v73;
  _QWORD *v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  double v163;
  double v164;
  double v165;
  double v166;
  _OWORD v167[8];
  void **__dst;
  size_t v169;
  unint64_t v170;

  v5 = a2;
  v11 = v5;
  if (!a1)
    goto LABEL_60;
  objc_msgSend_string(v5, v6, v7, v8, v9, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend_length(v12, v13, v14, v15, v16, v17);

  if (v18 != 1)
    goto LABEL_60;
  objc_msgSend_string(v11, v19, v20, v21, v22, v23);
  v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v30 = (const char *)objc_msgSend_UTF8String(v24, v25, v26, v27, v28, v29);
  v31 = strlen(v30);
  if (v31 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v38 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v38 = v31 | 7;
    v39 = v38 + 1;
    p_dst = (void **)operator new(v38 + 1);
    v169 = v32;
    v170 = v39 | 0x8000000000000000;
    __dst = p_dst;
LABEL_11:
    memmove(p_dst, v30, v32);
    *((_BYTE *)p_dst + v32) = 0;
    v40 = *(_QWORD *)(a3 + 8);
    v34 = a3 + 8;
    v35 = v40;
    v37 = HIBYTE(v170);
    if (!v40)
      goto LABEL_50;
    goto LABEL_12;
  }
  HIBYTE(v170) = v31;
  p_dst = (void **)&__dst;
  if (v31)
    goto LABEL_11;
  LOBYTE(__dst) = 0;
  v36 = *(_QWORD *)(a3 + 8);
  v34 = a3 + 8;
  v35 = v36;
  v37 = HIBYTE(v170);
  if (!v36)
    goto LABEL_50;
LABEL_12:
  if ((v37 & 0x80u) == 0)
    v41 = v37;
  else
    v41 = v169;
  if ((v37 & 0x80u) == 0)
    v42 = (void **)&__dst;
  else
    v42 = __dst;
  v43 = v34;
  do
  {
    v44 = *(char *)(v35 + 55);
    if (v44 >= 0)
      v45 = *(unsigned __int8 *)(v35 + 55);
    else
      v45 = *(_QWORD *)(v35 + 40);
    if (v44 >= 0)
      v46 = (const void *)(v35 + 32);
    else
      v46 = *(const void **)(v35 + 32);
    if (v41 >= v45)
      v47 = v45;
    else
      v47 = v41;
    v48 = memcmp(v46, v42, v47);
    v49 = v45 < v41;
    if (v48)
      v49 = v48 < 0;
    v50 = !v49;
    if (v49)
      v51 = (uint64_t *)(v35 + 8);
    else
      v51 = (uint64_t *)v35;
    if (v50)
      v43 = v35;
    v35 = *v51;
  }
  while (*v51);
  if (v43 == v34)
    goto LABEL_50;
  v52 = *(char *)(v43 + 55);
  if (v52 >= 0)
    v53 = *(unsigned __int8 *)(v43 + 55);
  else
    v53 = *(_QWORD *)(v43 + 40);
  if (v52 >= 0)
    v54 = (const void *)(v43 + 32);
  else
    v54 = *(const void **)(v43 + 32);
  if (v53 >= v41)
    v55 = v41;
  else
    v55 = v53;
  v56 = memcmp(v42, v54, v55);
  v57 = v41 < v53;
  if (v56)
    v57 = v56 < 0;
  if (v57)
  {
LABEL_50:
    v43 = v34;
    if ((v37 & 0x80) != 0)
      goto LABEL_51;
    goto LABEL_54;
  }
  if ((v37 & 0x80) != 0)
  {
LABEL_51:
    operator delete(__dst);

    if (v43 == v34)
      goto LABEL_60;
    goto LABEL_55;
  }
LABEL_54:

  if (v43 == v34)
  {
LABEL_60:
    v161 = 0;
    goto LABEL_61;
  }
LABEL_55:
  objc_msgSend_recognitionScore(v11, v58, v59, v60, v61, v62);
  if (v68 >= *(double *)(v43 + 80))
    goto LABEL_60;
  v69 = objc_msgSend_properties(v11, v63, v64, v65, v66, v67);
  v73 = [CHTokenizedTextResultToken alloc];
  v74 = (_QWORD *)(v43 + 56);
  if (*(char *)(v43 + 79) < 0)
    v74 = (_QWORD *)*v74;
  objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v70, (uint64_t)v74, 4, v71, v72);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIndexes(v11, v76, v77, v78, v79, v80);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v87 = objc_msgSend_wordID(v11, v82, v83, v84, v85, v86);
  objc_msgSend_modelScore(v11, v88, v89, v90, v91, v92);
  v166 = v93;
  objc_msgSend_recognitionScore(v11, v94, v95, v96, v97, v98);
  v165 = v99;
  objc_msgSend_combinedScore(v11, v100, v101, v102, v103, v104);
  v164 = v105;
  objc_msgSend_alignmentScore(v11, v106, v107, v108, v109, v110);
  v163 = v111;
  objc_msgSend_recognizerSourceLocale(v11, v112, v113, v114, v115, v116);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  v123 = objc_msgSend_inputSources(v11, v118, v119, v120, v121, v122);
  v129 = objc_msgSend_substrokeCount(v11, v124, v125, v126, v127, v128);
  objc_msgSend_bounds(v11, v130, v131, v132, v133, v134);
  v136 = v135;
  v138 = v137;
  v140 = v139;
  v142 = v141;
  objc_msgSend_originalBounds(v11, v143, v144, v145, v146, v147);
  v154 = v153;
  v156 = v155;
  v158 = v157;
  v160 = v159;
  if (v11)
    objc_msgSend_principalLines(v11, v148, v149, v150, v151, v152);
  else
    memset(v167, 0, sizeof(v167));
  v161 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v73, v148, (uint64_t)v75, (uint64_t)v81, v87, v69 & 0xFFFFFFFFFFFFFFFBLL, v117, v123 | 0x80, v166, v165, v164, v163, v136, v138, v140, v142, v129, v154, v156,
                   v158,
                   v160,
                   v167);

LABEL_61:
  return v161;
}

void sub_1BE8BA6C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BA6DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BA6EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BA6FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BA70C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8BA728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BA740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BA754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BA764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE8BA778(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CHTokenizedTextResultToken *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  double v126;
  double v127;
  double v128;
  double v129;
  _OWORD v130[8];
  _QWORD v131[4];
  id v132;
  uint64_t v133;

  v10 = a2;
  if (a1)
  {
    objc_msgSend_string(MEMORY[0x1E0CB37A0], v5, v6, v7, v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v10, v12, v13, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(v10, v18, v19, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend_length(v23, v24, v25, v26, v27, v28);
    v131[0] = MEMORY[0x1E0C809B0];
    v131[1] = 3221225472;
    v131[2] = sub_1BE8BAAA8;
    v131[3] = &unk_1E77F69A0;
    v133 = a3;
    v30 = v11;
    v132 = v30;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v17, v31, 0, v29, 2, (uint64_t)v131);

    v37 = objc_msgSend_properties(v10, v32, v33, v34, v35, v36);
    v38 = [CHTokenizedTextResultToken alloc];
    objc_msgSend_strokeIndexes(v10, v39, v40, v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend_wordID(v10, v45, v46, v47, v48, v49);
    objc_msgSend_modelScore(v10, v51, v52, v53, v54, v55);
    v129 = v56;
    objc_msgSend_recognitionScore(v10, v57, v58, v59, v60, v61);
    v128 = v62;
    objc_msgSend_combinedScore(v10, v63, v64, v65, v66, v67);
    v127 = v68;
    objc_msgSend_alignmentScore(v10, v69, v70, v71, v72, v73);
    v126 = v74;
    objc_msgSend_recognizerSourceLocale(v10, v75, v76, v77, v78, v79);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v86 = objc_msgSend_inputSources(v10, v81, v82, v83, v84, v85);
    v92 = objc_msgSend_substrokeCount(v10, v87, v88, v89, v90, v91);
    objc_msgSend_bounds(v10, v93, v94, v95, v96, v97);
    v99 = v98;
    v101 = v100;
    v103 = v102;
    v105 = v104;
    objc_msgSend_originalBounds(v10, v106, v107, v108, v109, v110);
    v117 = v116;
    v119 = v118;
    v121 = v120;
    v123 = v122;
    if (v10)
      objc_msgSend_principalLines(v10, v111, v112, v113, v114, v115);
    else
      memset(v130, 0, sizeof(v130));
    v124 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v38, v111, (uint64_t)v30, (uint64_t)v44, v50, v37 & 0xFFFFFFFFFFFFFFFBLL, v80, v86 | 0x80, v129, v128, v127, v126, v99, v101, v103, v105, v92, v117, v119,
                     v121,
                     v123,
                     v130);

  }
  else
  {
    v124 = 0;
  }

  return v124;
}

void sub_1BE8BA9E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BAA7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  _Unwind_Resume(a1);
}

void sub_1BE8BAAA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t **v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  size_t v13;
  __int128 *p_dst;
  uint64_t *v15;
  uint64_t **v16;
  size_t v17;
  __int128 *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  size_t v24;
  uint64_t *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  __int128 __dst;
  int64_t v47;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0CB3940];
  v5 = *(uint64_t ***)(a1 + 40);
  v45 = objc_retainAutorelease(v3);
  v11 = (const char *)objc_msgSend_UTF8String(v45, v6, v7, v8, v9, v10);
  v12 = strlen(v11);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v34 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v34 = v12 | 7;
    v35 = v34 + 1;
    p_dst = (__int128 *)operator new(v34 + 1);
    *((_QWORD *)&__dst + 1) = v13;
    v47 = v35 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_32:
    memmove(p_dst, v11, v13);
    *((_BYTE *)p_dst + v13) = 0;
    v16 = v5 + 1;
    v15 = v5[1];
    if (v15)
      goto LABEL_5;
LABEL_33:
    v19 = v16;
LABEL_34:
    v36 = (char *)operator new(0x58uLL);
    *((_OWORD *)v36 + 2) = __dst;
    *((_QWORD *)v36 + 6) = v47;
    v47 = 0;
    __dst = 0uLL;
    *(_OWORD *)(v36 + 56) = 0u;
    *(_OWORD *)(v36 + 72) = 0u;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = v19;
    *v16 = (uint64_t *)v36;
    v37 = (uint64_t *)**v5;
    v38 = (uint64_t *)v36;
    if (v37)
    {
      *v5 = v37;
      v38 = *v16;
    }
    sub_1BE61F5C0(v5[1], v38);
    v5[2] = (uint64_t *)((char *)v5[2] + 1);
    v39 = v36 + 56;
    if (v36[79] < 0)
      goto LABEL_37;
    goto LABEL_38;
  }
  HIBYTE(v47) = v12;
  p_dst = &__dst;
  if (v12)
    goto LABEL_32;
  LOBYTE(__dst) = 0;
  v16 = v5 + 1;
  v15 = v5[1];
  if (!v15)
    goto LABEL_33;
LABEL_5:
  if (v47 >= 0)
    v17 = HIBYTE(v47);
  else
    v17 = *((_QWORD *)&__dst + 1);
  if (v47 >= 0)
    v18 = &__dst;
  else
    v18 = (__int128 *)__dst;
  while (1)
  {
    while (1)
    {
      v19 = (uint64_t **)v15;
      v22 = (uint64_t *)v15[4];
      v20 = v15 + 4;
      v21 = v22;
      v23 = *((char *)v20 + 23);
      if (v23 >= 0)
        v24 = *((unsigned __int8 *)v20 + 23);
      else
        v24 = v20[1];
      if (v23 >= 0)
        v25 = v20;
      else
        v25 = v21;
      if (v24 >= v17)
        v26 = v17;
      else
        v26 = v24;
      v27 = memcmp(v18, v25, v26);
      v28 = v17 < v24;
      if (v27)
        v28 = v27 < 0;
      if (!v28)
        break;
      v15 = *v19;
      v16 = v19;
      if (!*v19)
        goto LABEL_34;
    }
    v29 = memcmp(v25, v18, v26);
    v33 = v24 < v17;
    if (v29)
      v33 = v29 < 0;
    if (!v33)
      break;
    v15 = v19[1];
    if (!v15)
    {
      v16 = v19 + 1;
      goto LABEL_34;
    }
  }
  v39 = v19 + 7;
  if (*((char *)v19 + 79) < 0)
LABEL_37:
    v39 = (_QWORD *)*v39;
LABEL_38:
  objc_msgSend_stringWithCString_encoding_(v4, v30, (uint64_t)v39, 4, v31, v32);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v47) < 0)
    operator delete((void *)__dst);
  objc_msgSend_appendString_(*(void **)(a1 + 32), v40, (uint64_t)v44, v41, v42, v43);

}

void sub_1BE8BAD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1BE8BAD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1BE8BAEBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BB77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,_Unwind_Exception *exception_object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,void *a62)
{
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;

  _Unwind_Resume(a1);
}

void sub_1BE8BBAC4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  CHTokenizedTextResultToken *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  double v117;
  double v118;
  double v119;
  _OWORD v120[9];

  v3 = a2;
  objc_msgSend_addObject_(*(void **)(a1 + 32), v4, (uint64_t)v3, v5, v6, v7);
  v8 = (void *)objc_opt_class();
  objc_msgSend_string(v3, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_transliterateStringUsingICUTransliterator__icuTransliterator_(v8, v15, (uint64_t)v14, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = [CHTokenizedTextResultToken alloc];
  objc_msgSend_strokeIndexes(v3, v20, v21, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend_wordID(v3, v26, v27, v28, v29, v30);
  objc_msgSend_modelScore(v3, v32, v33, v34, v35, v36);
  v119 = v37;
  objc_msgSend_recognitionScore(v3, v38, v39, v40, v41, v42);
  v118 = v43;
  objc_msgSend_combinedScore(v3, v44, v45, v46, v47, v48);
  v117 = v49;
  objc_msgSend_alignmentScore(v3, v50, v51, v52, v53, v54);
  v116 = v55;
  v61 = objc_msgSend_properties(v3, v56, v57, v58, v59, v60);
  objc_msgSend_recognizerSourceLocale(v3, v62, v63, v64, v65, v66);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = objc_msgSend_inputSources(v3, v68, v69, v70, v71, v72);
  v79 = objc_msgSend_substrokeCount(v3, v74, v75, v76, v77, v78);
  objc_msgSend_bounds(v3, v80, v81, v82, v83, v84);
  v86 = v85;
  v88 = v87;
  v90 = v89;
  v92 = v91;
  objc_msgSend_originalBounds(v3, v93, v94, v95, v96, v97);
  v104 = v103;
  v106 = v105;
  v108 = v107;
  v110 = v109;
  if (v3)
    objc_msgSend_principalLines(v3, v98, v99, v100, v101, v102);
  else
    memset(v120, 0, 128);
  v111 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v19, v98, (uint64_t)v18, (uint64_t)v25, v31, v61, v67, v73 | 8, v119, v118, v117, v116, v86, v88, v90, v92, v79, v104, v106,
                   v108,
                   v110,
                   v120);

  objc_msgSend_addObject_(*(void **)(a1 + 48), v112, (uint64_t)v111, v113, v114, v115);
}

void sub_1BE8BBCDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BBCF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BBD08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BBD18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BBD2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BBD3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8BBD58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8BBD70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1BE8BBD7C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8BBDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHReorderSCTCConfusionStep;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE8BC0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8BC1D8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isEqualToString;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CHTokenizedTextResultToken *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  _OWORD v132[9];

  v3 = a2;
  objc_msgSend_string(v3, v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__crStringByRemovingInvalidArabicDiacritics(v9, v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_string(v3, v16, v17, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v15, v22, (uint64_t)v21, v23, v24, v25);

  if ((isEqualToString & 1) != 0)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v27, (uint64_t)v3, v28, v29, v30);
  }
  else
  {
    v31 = [CHTokenizedTextResultToken alloc];
    objc_msgSend_strokeIndexes(v3, v32, v33, v34, v35, v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend_wordID(v3, v38, v39, v40, v41, v42);
    objc_msgSend_modelScore(v3, v44, v45, v46, v47, v48);
    v131 = v49;
    objc_msgSend_recognitionScore(v3, v50, v51, v52, v53, v54);
    v130 = v55;
    objc_msgSend_combinedScore(v3, v56, v57, v58, v59, v60);
    v129 = v61;
    objc_msgSend_alignmentScore(v3, v62, v63, v64, v65, v66);
    v128 = v67;
    v73 = objc_msgSend_properties(v3, v68, v69, v70, v71, v72);
    objc_msgSend_recognizerSourceLocale(v3, v74, v75, v76, v77, v78);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = objc_msgSend_inputSources(v3, v80, v81, v82, v83, v84);
    v91 = objc_msgSend_substrokeCount(v3, v86, v87, v88, v89, v90);
    objc_msgSend_bounds(v3, v92, v93, v94, v95, v96);
    v98 = v97;
    v100 = v99;
    v102 = v101;
    v104 = v103;
    objc_msgSend_originalBounds(v3, v105, v106, v107, v108, v109);
    v116 = v115;
    v118 = v117;
    v120 = v119;
    v122 = v121;
    if (v3)
      objc_msgSend_principalLines(v3, v110, v111, v112, v113, v114);
    else
      memset(v132, 0, 128);
    v123 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v31, v110, (uint64_t)v15, (uint64_t)v37, v43, v73, v79, v85 | 0x400, v131, v130, v129, v128, v98, v100, v102, v104, v91, v116, v118,
                     v120,
                     v122,
                     v132);

    objc_msgSend_addObject_(*(void **)(a1 + 32), v124, (uint64_t)v123, v125, v126, v127);
  }

}

void sub_1BE8BC3F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BC408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BC45C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8BC478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BC508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BD1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8BD4C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8BD5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BD5EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BD5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BD6DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BD6F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BD70C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE8BD71C(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  objc_opt_self();
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v9 = v2;
  v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v26, (uint64_t)v30, 16, v11);
  if (v17)
  {
    v18 = *(_QWORD *)v27;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v27 != v18)
          objc_enumerationMutation(v9);
        objc_msgSend_string(*(void **)(*((_QWORD *)&v26 + 1) + 8 * v19), v12, v13, v14, v15, v16, (_QWORD)v26);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_appendString_(v8, v21, (uint64_t)v20, v22, v23, v24);

        ++v19;
      }
      while (v17 != v19);
      v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v26, (uint64_t)v30, 16, v16);
    }
    while (v17);
  }

  return v8;
}

void sub_1BE8BD850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8BD894(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v9 = objc_msgSend_length(v3, v4, v5, v6, v7, v8);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BE8BD968;
  v13[3] = &unk_1E77F4530;
  v13[4] = a1;
  v13[5] = &v14;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v3, v10, 0, v9, 2, (uint64_t)v13);
  v11 = v15[3];
  _Block_object_dispose(&v14, 8);

  return v11;
}

void sub_1BE8BD948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE8BD968(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend_stringByTrimmingCharactersInSet_(a2, (const char *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_length(v7, v8, v9, v10, v11, v12);

  if (v13)
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
}

void sub_1BE8BD9D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BDF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE8BE040()
{
  void *v0;

  JUMPOUT(0x1BE8BE0D0);
}

void sub_1BE8BE054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE8BE05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE8BE068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE8BE070()
{
  JUMPOUT(0x1BE8BE0C4);
}

void sub_1BE8BE078()
{
  void *v0;

  JUMPOUT(0x1BE8BE0C0);
}

void sub_1BE8BE084()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1BE8BE0C0);
}

void sub_1BE8BE094()
{
  void *v0;

  JUMPOUT(0x1BE8BE0C0);
}

void sub_1BE8BE0A0()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1BE8BE0C0);
}

void sub_1BE8BE0B0()
{
  void *v0;

  JUMPOUT(0x1BE8BE0C0);
}

void sub_1BE8BE0BC()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1BE8BE0C8);
}

id sub_1BE8BE10C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char isEqualToString;
  CHTokenizedTextResultToken *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v131;
  double v132;
  double v133;
  double v134;
  _OWORD v135[8];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[128];
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_string(v3, v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v10 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v136, (uint64_t)v140, 16, v12);
  if (v17)
  {
    v18 = *(_QWORD *)v137;
    do
    {
      v19 = 0;
      v20 = v9;
      do
      {
        if (*(_QWORD *)v137 != v18)
          objc_enumerationMutation(v10);
        v21 = *(_QWORD *)(*((_QWORD *)&v136 + 1) + 8 * v19);
        objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v13, v21, v14, v15, v16);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v20, v23, v21, (uint64_t)v22, v24, v25);
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        ++v19;
        v20 = v9;
      }
      while (v17 != v19);
      v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v136, (uint64_t)v140, 16, v16);
    }
    while (v17);
  }

  objc_msgSend_string(v3, v26, v27, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v9, v32, (uint64_t)v31, v33, v34, v35);

  if ((isEqualToString & 1) == 0)
  {
    v37 = [CHTokenizedTextResultToken alloc];
    objc_msgSend_strokeIndexes(v3, v38, v39, v40, v41, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_msgSend_wordID(v3, v44, v45, v46, v47, v48);
    objc_msgSend_modelScore(v3, v50, v51, v52, v53, v54);
    v134 = v55;
    objc_msgSend_recognitionScore(v3, v56, v57, v58, v59, v60);
    v133 = v61;
    objc_msgSend_combinedScore(v3, v62, v63, v64, v65, v66);
    v132 = v67;
    objc_msgSend_alignmentScore(v3, v68, v69, v70, v71, v72);
    v131 = v73;
    v79 = objc_msgSend_properties(v3, v74, v75, v76, v77, v78);
    objc_msgSend_recognizerSourceLocale(v3, v80, v81, v82, v83, v84);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = objc_msgSend_inputSources(v3, v86, v87, v88, v89, v90);
    v97 = objc_msgSend_substrokeCount(v3, v92, v93, v94, v95, v96);
    objc_msgSend_bounds(v3, v98, v99, v100, v101, v102);
    v104 = v103;
    v106 = v105;
    v108 = v107;
    v110 = v109;
    objc_msgSend_originalBounds(v3, v111, v112, v113, v114, v115);
    v122 = v121;
    v124 = v123;
    v126 = v125;
    v128 = v127;
    if (v3)
      objc_msgSend_principalLines(v3, v116, v117, v118, v119, v120);
    else
      memset(v135, 0, sizeof(v135));
    v129 = objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v37, v116, (uint64_t)v9, (uint64_t)v43, v49, v79, v85, v91 | 0x80, v134, v133, v132, v131, v104, v106, v108, v110, v97, v122, v124,
             v126,
             v128,
             v135);

    v3 = (id)v129;
  }

  return v3;
}

void sub_1BE8BE3FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8BE470(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a3;
  sub_1BE8BD71C((uint64_t)CHNumberFieldResultReorderingStep, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1BE8BD71C((uint64_t)CHNumberFieldResultReorderingStep, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v6;
  v10 = v7;
  if (v8)
  {
    v11 = sub_1BE8BD894(v8, v9);
    v12 = sub_1BE8BD894(v8, v10);
    if (v11 < v12)
      v13 = -1;
    else
      v13 = v11 > v12;
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_1BE8BE534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8BE560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BE714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BE728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BE73C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8BE74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BE764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE8BE78C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BE7A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BE8AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1BE8BE8C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t TokenIDForString;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int isInappropriateString;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char isEqualToString;
  uint64_t v47;
  CHTokenizedTextResultToken *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  double v124;
  double v125;
  double v126;
  double v127;
  _OWORD v128[9];

  v5 = a2;
  v6 = a3;
  v12 = v6;
  if (a1)
  {
    if (v6)
    {
      v13 = v6;
    }
    else
    {
      objc_msgSend_string(v5, v7, v8, v9, v10, v11);
      v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    v19 = v13;
    if (*(_QWORD *)(a1 + 32))
    {
      TokenIDForString = LMLanguageModelGetTokenIDForString();
      v21 = (void *)objc_opt_class();
      v23 = objc_msgSend_normalizeLMTokenIDForWord_tokenID_isFromPattern_score_wordLanguageModel_(v21, v22, (uint64_t)v19, TokenIDForString, 0, 0, *(_QWORD *)(a1 + 32));
    }
    else
    {
      v23 = 0;
    }
    v24 = objc_msgSend_properties(v5, v14, v15, v16, v17, v18);
    v30 = objc_msgSend_inputSources(v5, v25, v26, v27, v28, v29);
    isInappropriateString = objc_msgSend_isInappropriateString_(*(void **)(a1 + 40), v31, (uint64_t)v19, v32, v33, v34);
    if (v12
      && (objc_msgSend_string(v5, v35, v36, v37, v38, v39),
          v41 = (void *)objc_claimAutoreleasedReturnValue(),
          isEqualToString = objc_msgSend_isEqualToString_(v12, v42, (uint64_t)v41, v43, v44, v45),
          v41,
          (isEqualToString & 1) == 0))
    {
      v47 = 16;
      if (!isInappropriateString)
        v47 = 0;
      v24 = v47 | v24 & 0xFFFFFFFFFFFFFFEFLL;
      v30 |= 8uLL;
    }
    else if (isInappropriateString)
    {
      v24 |= 0x10uLL;
    }
    v48 = [CHTokenizedTextResultToken alloc];
    objc_msgSend_strokeIndexes(v5, v49, v50, v51, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_modelScore(v5, v55, v56, v57, v58, v59);
    v127 = v60;
    objc_msgSend_recognitionScore(v5, v61, v62, v63, v64, v65);
    v126 = v66;
    objc_msgSend_combinedScore(v5, v67, v68, v69, v70, v71);
    v125 = v72;
    objc_msgSend_alignmentScore(v5, v73, v74, v75, v76, v77);
    v124 = v78;
    objc_msgSend_recognizerSourceLocale(v5, v79, v80, v81, v82, v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v90 = objc_msgSend_substrokeCount(v5, v85, v86, v87, v88, v89);
    objc_msgSend_bounds(v5, v91, v92, v93, v94, v95);
    v97 = v96;
    v99 = v98;
    v101 = v100;
    v103 = v102;
    objc_msgSend_originalBounds(v5, v104, v105, v106, v107, v108);
    v115 = v114;
    v117 = v116;
    v119 = v118;
    v121 = v120;
    if (v5)
      objc_msgSend_principalLines(v5, v109, v110, v111, v112, v113);
    else
      memset(v128, 0, 128);
    v122 = (void *)objc_msgSend_initWithString_strokeIndexes_wordID_modelScore_recognitionScore_combinedScore_alignmentScore_properties_recognizerSourceLocale_inputSources_substrokeCount_bounds_originalBounds_principalLines_(v48, v109, (uint64_t)v19, (uint64_t)v54, v23, v24, v84, v30, v127, v126, v125, v124, v97, v99, v101, v103, v90, v115, v117,
                     v119,
                     v121,
                     v128);

  }
  else
  {
    v122 = 0;
  }

  return v122;
}

void sub_1BE8BEB64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BEB78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8BEB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BEBAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BEBC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BEBDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BEBF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8BEC0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE8BEC2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1BE8BEC48(void *a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v11 = a3;
  if (a1)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v6, v7, v8, v9, v10);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i < objc_msgSend_count(v11, v12, v13, v14, v15, v16); ++i)
    {
      objc_msgSend_objectAtIndexedSubscript_(v11, v18, i, v19, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v23 = v5;
      v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v39, (uint64_t)v43, 16, v25);
      if (v30)
      {
        v31 = *(_QWORD *)v40;
        do
        {
          v32 = 0;
          do
          {
            if (*(_QWORD *)v40 != v31)
              objc_enumerationMutation(v23);
            objc_msgSend_stringByAppendingString_(*(void **)(*((_QWORD *)&v39 + 1) + 8 * v32), v26, (uint64_t)v22, v27, v28, v29);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(a1, v34, (uint64_t)v33, v35, v36, v37);

            ++v32;
          }
          while (v30 != v32);
          v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v26, (uint64_t)&v39, (uint64_t)v43, 16, v29);
        }
        while (v30);
      }

    }
  }

  return a1;
}

void sub_1BE8BEDC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8BFB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  void *v54;
  void *v55;
  void *v56;

  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void sub_1BE8BFF80(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  v22 = a2;
  if ((objc_msgSend_properties(v22, v3, v4, v5, v6, v7) & 0x20) != 0)
    objc_msgSend_appendString_(*(void **)(a1 + 32), v8, (uint64_t)CFSTR(" "), v10, v11, v12);
  objc_msgSend_string(v22, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v13, v14, (uint64_t)CFSTR(" "), (uint64_t)CFSTR("␠"), v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_appendString_(*(void **)(a1 + 32), v18, (uint64_t)v17, v19, v20, v21);
}

void sub_1BE8C0010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8C0028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8C0040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8C0054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8C0068(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

void sub_1BE8C0080(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  void *v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  unint64_t v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  void *v210;
  void *v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  unint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int isEqualToString;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  const char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void *v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  id v289;

  v6 = a2;
  v289 = v6;
  if (!*(_QWORD *)(a1 + 136))
  {
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40)
      && !*(_QWORD *)(a4 + 16)
      && objc_msgSend_count(*(void **)(a1 + 32), v7, v8, v9, v10, v11))
    {
      for (i = 0; i < objc_msgSend_count(*(void **)(a1 + 40), v7, v8, v9, v10, v11); ++i)
      {
        while (objc_msgSend_count(*(void **)(a1 + 48), v13, v14, v15, v16, v17) <= i)
        {
          v23 = *(void **)(a1 + 48);
          v24 = (void *)objc_msgSend_mutableCopy(*(void **)(a1 + 56), v18, v19, v20, v21, v22);
          objc_msgSend_addObject_(v23, v25, (uint64_t)v24, v26, v27, v28);

        }
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v18, i, v20, v21, v22);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = objc_msgSend_count(v29, v30, v31, v32, v33, v34);

        if (v35)
        {
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v7, i, v9, v10, v11);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 64);
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v38, i, v39, v40, v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1BE8A313C((uint64_t)CHPostprocessingStep, v36, v37, v42, 0);

          objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v43, i, v44, v45, v46);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_removeAllObjects(v47, v48, v49, v50, v51, v52);

        }
      }
      sub_1BE8A313C((uint64_t)CHPostprocessingStep, *(void **)(a1 + 32), *(void **)(a1 + 64), *(void **)(a1 + 56), *(void **)(a1 + 72));
      objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v53, v54, v55, v56, v57);
      objc_msgSend_removeAllObjects(*(void **)(a1 + 64), v58, v59, v60, v61, v62);
    }
    v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
    objc_msgSend_string(v289, v7, v8, v9, v10, v11);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = objc_msgSend_length(v64, v65, v66, v67, v68, v69);

    objc_msgSend_string(v289, v71, v72, v73, v74, v75);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v82 = v70 + v63;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) += objc_msgSend_length(v76, v77, v78, v79, v80, v81);

    v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24);
    if (v70 + v63 > v88)
    {
      do
      {
        while (1)
        {
          v89 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40);
          v90 = *(void **)(a1 + 80);
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 88), v83, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24), v85, v86, v87);
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1BE8BEC48(v90, v89, v91);
          v92 = objc_claimAutoreleasedReturnValue();
          v93 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
          v94 = *(void **)(v93 + 40);
          *(_QWORD *)(v93 + 40) = v92;

          v95 = ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24);
          if (v95 < objc_msgSend_count(*(void **)(a1 + 88), v96, v97, v98, v99, v100))
            break;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
          v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24);
          if (v82 <= v88)
            goto LABEL_19;
        }
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 88), v83, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24), v85, v86, v87);
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_firstObject(v101, v102, v103, v104, v105, v106);
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) += objc_msgSend_length(v107, v108, v109, v110, v111, v112);

        v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24);
      }
      while (v82 > v88);
    }
LABEL_19:
    if (v82 != v88)
    {
      v130 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
      if (v130)
      {
        sub_1BE637DE0(v130, v289);
        goto LABEL_60;
      }
      v200 = objc_msgSend_mutableCopy(v289, v83, v84, v85, v86, v87);
      v201 = *(_QWORD *)(a1 + 96);
LABEL_59:
      v287 = *(_QWORD *)(v201 + 8);
      v288 = *(void **)(v287 + 40);
      *(_QWORD *)(v287 + 40) = v200;

      goto LABEL_60;
    }
    v113 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40);
    v114 = *(void **)(a1 + 80);
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 88), v83, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24), v85, v86, v87);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1BE8BEC48(v114, v113, v115);
    v116 = objc_claimAutoreleasedReturnValue();
    v117 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
    v118 = *(void **)(v117 + 40);
    *(_QWORD *)(v117 + 40) = v116;

    if ((unint64_t)(objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v119, v120, v121, v122, v123)- 4) >= 0xFFFFFFFFFFFFFFFDLL)v129 = objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v124, v125, v126, v127, v128)- 1;
    else
      v129 = 2;
    if (v129 <= objc_msgSend_count(*(void **)(a1 + 40), v124, v125, v126, v127, v128))
    {
      v142 = objc_msgSend_count(*(void **)(a1 + 40), v131, v132, v133, v134, v135);
      v141 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
      if (v141)
        goto LABEL_30;
    }
    else
    {
      if ((unint64_t)(objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v131, v132, v133, v134, v135)- 4) < 0xFFFFFFFFFFFFFFFDLL)
      {
        v141 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
        v142 = 2;
        if (!v141)
          goto LABEL_43;
LABEL_30:
        sub_1BE637DE0(v141, v289);
        if (v142 >= 1)
        {
          v148 = 0;
          do
          {
            v154 = objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v143, v144, v145, v146, v147);
            v155 = v148 + 1;
            v156 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40);
            if (v148 + 1 >= v154)
              objc_msgSend_firstObject(v156, v149, v150, v151, v152, v153);
            else
              objc_msgSend_objectAtIndexedSubscript_(v156, v149, v148 + 1, v151, v152, v153);
            v157 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1BE8BE8C4(*(_QWORD *)(a1 + 80), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), v157);
            v163 = (void *)objc_claimAutoreleasedReturnValue();
            while (1)
            {
              v164 = objc_msgSend_count(*(void **)(a1 + 40), v158, v159, v160, v161, v162);
              v169 = *(void **)(a1 + 40);
              if (v164 > v148)
                break;
              objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99DE8], v165, *(_QWORD *)(a1 + 32), v166, v167, v168);
              v170 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addObject_(v169, v171, (uint64_t)v170, v172, v173, v174);

            }
            objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v165, v148, v166, v167, v168);
            v175 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v175, v176, (uint64_t)v163, v177, v178, v179);

            v148 = v155;
          }
          while (v155 != v142);
        }
        sub_1BE8BE8C4(*(_QWORD *)(a1 + 80), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), 0);
        v180 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(*(void **)(a1 + 64), v181, (uint64_t)v180, v182, v183, v184);
        v185 = *(_QWORD *)(a1 + 80);
        v186 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
        objc_msgSend_firstObject(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v187, v188, v189, v190, v191);
        v192 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1BE8BE8C4(v185, v186, v192);
        v193 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_addObject_(*(void **)(a1 + 32), v194, (uint64_t)v193, v195, v196, v197);
        v198 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v199 = *(void **)(v198 + 40);
        *(_QWORD *)(v198 + 40) = 0;

        goto LABEL_54;
      }
      v142 = objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v136, v137, v138, v139, v140)- 1;
      v141 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
      if (v141)
        goto LABEL_30;
    }
    if (v142 < 1)
    {
LABEL_51:
      objc_msgSend_string(v289, v136, v137, v138, v139, v140);
      v234 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_firstObject(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v235, v236, v237, v238, v239);
      v240 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v234, v241, (uint64_t)v240, v242, v243, v244);

      if (isEqualToString)
      {
        objc_msgSend_addObject_(*(void **)(a1 + 32), v246, (uint64_t)v289, v248, v249, v250);
        objc_msgSend_addObject_(*(void **)(a1 + 64), v251, (uint64_t)v289, v252, v253, v254);
LABEL_55:
        v270 = ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24);
        if (v270 >= objc_msgSend_count(*(void **)(a1 + 88), v255, v256, v257, v258, v259))
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 88), v271, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24), v272, v273, v274);
          v275 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_firstObject(v275, v276, v277, v278, v279, v280);
          v281 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) += objc_msgSend_length(v281, v282, v283, v284, v285, v286);

        }
        objc_msgSend_arrayWithObject_(MEMORY[0x1E0C99D20], v271, (uint64_t)&stru_1E77F6F28, v272, v273, v274);
        v200 = objc_claimAutoreleasedReturnValue();
        v201 = *(_QWORD *)(a1 + 120);
        goto LABEL_59;
      }
      v260 = *(_QWORD *)(a1 + 80);
      objc_msgSend_firstObject(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v246, v247, v248, v249, v250);
      v261 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1BE8BE8C4(v260, v289, v261);
      v180 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_addObject_(*(void **)(a1 + 32), v262, (uint64_t)v180, v263, v264, v265);
      objc_msgSend_addObject_(*(void **)(a1 + 64), v266, (uint64_t)v289, v267, v268, v269);
LABEL_54:

      goto LABEL_55;
    }
LABEL_43:
    v202 = 0;
    do
    {
      v208 = objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), v136, v137, v138, v139, v140);
      v209 = v202 + 1;
      v210 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40);
      if (v202 + 1 >= v208)
        objc_msgSend_firstObject(v210, v203, v204, v205, v206, v207);
      else
        objc_msgSend_objectAtIndexedSubscript_(v210, v203, v202 + 1, v205, v206, v207);
      v211 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1BE8BE8C4(*(_QWORD *)(a1 + 80), v289, v211);
      v217 = (void *)objc_claimAutoreleasedReturnValue();
      while (1)
      {
        v218 = objc_msgSend_count(*(void **)(a1 + 40), v212, v213, v214, v215, v216);
        v223 = *(void **)(a1 + 40);
        if (v218 > v202)
          break;
        objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99DE8], v219, *(_QWORD *)(a1 + 32), v220, v221, v222);
        v224 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v223, v225, (uint64_t)v224, v226, v227, v228);

      }
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v219, v202, v220, v221, v222);
      v229 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v229, v230, (uint64_t)v217, v231, v232, v233);

      v202 = v209;
    }
    while (v209 != v142);
    goto LABEL_51;
  }
  objc_msgSend_addObject_(*(void **)(a1 + 56), v7, (uint64_t)v6, v9, v10, v11);
LABEL_60:

}

void sub_1BE8C089C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8C08B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8C08C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8C08E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE8C0B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8C0B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8C0B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8C0B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8C0B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8C0BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE8C0BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8C0BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8C0BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8C0CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHJapaneseTokenizationAndConversionStep;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE8C1AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8C1E44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8C1E50(uint64_t a1, void *a2, _BYTE *a3, _BYTE *a4)
{
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  int v29;
  int v30;
  _BYTE *v31;
  void *v32;
  id obj;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[6];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = v7;
  if (a1)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    obj = v7;
    v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v34, (uint64_t)v47, 16, v10);
    v31 = a3;
    v32 = v8;
    v17 = 0;
    v18 = 0;
    if (v16)
    {
      v19 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v35 != v19)
            objc_enumerationMutation(obj);
          objc_msgSend_string(*(void **)(*((_QWORD *)&v34 + 1) + 8 * i), v11, v12, v13, v14, v15, v31);
          v21 = (id)objc_claimAutoreleasedReturnValue();
          v43 = 0;
          v44 = &v43;
          v45 = 0x2020000000;
          v46 = 0;
          v39 = 0;
          v40 = &v39;
          v41 = 0x2020000000;
          v42 = 0;
          v27 = objc_msgSend_length(v21, v22, v23, v24, v25, v26);
          v38[0] = MEMORY[0x1E0C809B0];
          v38[1] = 3221225472;
          v38[2] = sub_1BE8C21E0;
          v38[3] = &unk_1E77F6A68;
          v38[4] = &v43;
          v38[5] = &v39;
          objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v21, v28, 0, v27, 2, (uint64_t)v38);
          v29 = *((unsigned __int8 *)v44 + 24);
          v30 = *((unsigned __int8 *)v40 + 24);
          _Block_object_dispose(&v39, 8);
          _Block_object_dispose(&v43, 8);

          v17 |= v29 != 0;
          v18 |= v30 != 0;
        }
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v34, (uint64_t)v47, 16, v15);
      }
      while (v16);
    }

    if (v31)
      *v31 = v17 & 1;
    v8 = v32;
    if (a4)
      *a4 = v18 & 1;
  }

}

void sub_1BE8C2064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE8C20BC(uint64_t a1, void *a2, _BYTE *a3, _BYTE *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;

  v7 = a2;
  v13 = v7;
  if (a1)
  {
    v21 = 0;
    v22 = &v21;
    v23 = 0x2020000000;
    v24 = 0;
    v17 = 0;
    v18 = &v17;
    v19 = 0x2020000000;
    v20 = 0;
    v14 = objc_msgSend_length(v7, v8, v9, v10, v11, v12);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1BE8C21E0;
    v16[3] = &unk_1E77F6A68;
    v16[4] = &v21;
    v16[5] = &v17;
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v13, v15, 0, v14, 2, (uint64_t)v16);
    if (a3)
      *a3 = *((_BYTE *)v22 + 24);
    if (a4)
      *a4 = *((_BYTE *)v18 + 24);
    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v21, 8);
  }

}

void sub_1BE8C21B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1BE8C21E0(uint64_t a1, void *a2)
{
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  NSString *v9;

  v9 = a2;
  v3 = isCharacterLatinScript(v9);
  v4 = isCharacterCyrillicScript(v9);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v5 + 24))
    v6 = 1;
  else
    v6 = v3;
  *(_BYTE *)(v5 + 24) = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v7 + 24))
    v8 = 1;
  else
    v8 = v4;
  *(_BYTE *)(v7 + 24) = v8;

}

void sub_1BE8C2250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8C2264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE8C2F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  void *v56;
  void *v57;

  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);

  _Unwind_Resume(a1);
}

void sub_1BE8C3370(uint64_t *a1, void *a2)
{
  __int16 v3;

  v3 = 0;
  sub_1BE8C20BC(a1[4], a2, (_BYTE *)&v3 + 1, &v3);
  if ((_BYTE)v3)
    ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (HIBYTE(v3))
    ++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
}

uint64_t sub_1BE8C33E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE8C37AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE8C3908()
{
  JUMPOUT(0x1BE8C38E0);
}

uint64_t sub_1BE8C3910(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_isTopOriginal(a2, (const char *)a2, a3, a4, a5, a6);
  if ((result & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

void sub_1BE8C3944(uint64_t **a1, const char *a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  void *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  size_t v17;
  const void *v18;
  _QWORD *v19;
  const void *v20;
  const void *v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  _BOOL4 v27;
  int v28;
  _BOOL4 v29;
  uint64_t *v30;
  _QWORD *v31;

  v6 = a1 + 1;
  v7 = (char *)operator new(0x58uLL);
  v31 = v7;
  v8 = v7 + 32;
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v8 = operator new(v11 + 1);
    *((_QWORD *)v7 + 5) = v10;
    *((_QWORD *)v7 + 6) = v12 | 0x8000000000000000;
    *((_QWORD *)v7 + 4) = v8;
    goto LABEL_8;
  }
  v7[55] = v9;
  if (v9)
LABEL_8:
    memcpy(v8, a2, v10);
  *((_BYTE *)v8 + v10) = 0;
  *(_OWORD *)(v7 + 56) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 9) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)v7 + 10) = *(_QWORD *)(a3 + 24);
  v13 = (uint64_t *)v7;
  v14 = (_QWORD *)*v6;
  v15 = v6;
  if (*v6)
  {
    v16 = v7[55];
    if (v16 >= 0)
      v17 = v7[55];
    else
      v17 = *((_QWORD *)v7 + 5);
    if (v16 >= 0)
      v18 = v7 + 32;
    else
      v18 = (const void *)*((_QWORD *)v7 + 4);
    while (1)
    {
      while (1)
      {
        v15 = v14;
        v21 = (const void *)v14[4];
        v19 = v14 + 4;
        v20 = v21;
        v22 = *((char *)v19 + 23);
        if (v22 >= 0)
          v23 = *((unsigned __int8 *)v19 + 23);
        else
          v23 = v19[1];
        if (v22 >= 0)
          v24 = v19;
        else
          v24 = v20;
        if (v23 >= v17)
          v25 = v17;
        else
          v25 = v23;
        v26 = memcmp(v18, v24, v25);
        v27 = v17 < v23;
        if (v26)
          v27 = v26 < 0;
        if (!v27)
          break;
        v14 = (_QWORD *)*v15;
        v6 = v15;
        if (!*v15)
          goto LABEL_34;
      }
      v28 = memcmp(v24, v18, v25);
      v29 = v23 < v17;
      if (v28)
        v29 = v28 < 0;
      if (!v29)
        break;
      v14 = (_QWORD *)v15[1];
      if (!v14)
      {
        v6 = v15 + 1;
        goto LABEL_34;
      }
    }
    if (v31)
    {
      if (*((char *)v31 + 79) < 0)
      {
        operator delete((void *)v31[7]);
        LOBYTE(v16) = *((_BYTE *)v31 + 55);
      }
      if ((v16 & 0x80) != 0)
        operator delete((void *)v31[4]);
      operator delete(v31);
    }
  }
  else
  {
LABEL_34:
    *v31 = 0;
    v31[1] = 0;
    v31[2] = v15;
    *v6 = v31;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v13 = (uint64_t *)*v6;
    }
    sub_1BE61F5C0(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
}

void sub_1BE8C3B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE8C3BA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE8C3BA8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 79) < 0)
      {
        operator delete(*(void **)(v2 + 56));
        if ((*(char *)(v2 + 55) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 32));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1BE8C3C10(uint64_t a1)
{
  if (a1)
  {
    sub_1BE8C3C10(*(_QWORD *)a1);
    sub_1BE8C3C10(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

void sub_1BE8C3C80(void *a1, const char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CGImage *v7;
  CGDataProvider *DataProvider;
  const __CFData *v9;
  UInt8 *BytePtr;
  CGColorSpace *ColorSpace;
  size_t Width;
  size_t Height;
  size_t BitsPerComponent;
  size_t BytesPerRow;
  uint32_t BitmapInfo;
  CGContext *v17;
  CGColor *GenericRGB;
  uint64_t v19;
  unint64_t v20;
  CGImage *Image;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const __CFURL *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __CFString *v56;
  CGImageDestination *v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint8_t buf[4];
  void *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v7 = (CGImage *)objc_msgSend_cgImage(a1, a2, (uint64_t)a3, a4, a5, a6);
  DataProvider = CGImageGetDataProvider(v7);
  v9 = CGDataProviderCopyData(DataProvider);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v9);
  ColorSpace = CGImageGetColorSpace(v7);
  Width = CGImageGetWidth(v7);
  Height = CGImageGetHeight(v7);
  BitsPerComponent = CGImageGetBitsPerComponent(v7);
  BytesPerRow = CGImageGetBytesPerRow(v7);
  BitmapInfo = CGImageGetBitmapInfo(v7);
  v17 = CGBitmapContextCreateWithData(BytePtr, Width, Height, BitsPerComponent, BytesPerRow, ColorSpace, BitmapInfo, 0, 0);
  GenericRGB = CGColorCreateGenericRGB(1.0, 0.0, 0.0, 1.0);
  CGContextSetStrokeColorWithColor(v17, GenericRGB);
  v19 = *a3;
  if (a3[1] != *a3)
  {
    v20 = 0;
    do
    {
      CGContextAddPath(v17, *(CGPathRef *)(v19 + 8 * v20++));
      v19 = *a3;
    }
    while (v20 < (a3[1] - *a3) >> 3);
  }
  CGContextDrawPath(v17, kCGPathStroke);
  Image = CGBitmapContextCreateImage(v17);
  objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v22, v23, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_UUIDString(v27, v28, v29, v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = (void *)MEMORY[0x1E0C99E98];
  NSTemporaryDirectory();
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v34, v36, (uint64_t)v35, v37, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v41, (uint64_t)CFSTR("image_%@.png"), v42, v43, v44, v33);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLByAppendingPathComponent_(v40, v46, (uint64_t)v45, v47, v48, v49);
  v50 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_identifier((void *)*MEMORY[0x1E0CEC580], v51, v52, v53, v54, v55);
  v56 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v57 = CGImageDestinationCreateWithURL(v50, v56, 1uLL, 0);

  CGImageDestinationAddImage(v57, Image, 0);
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v58 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_absoluteString(v50, v59, v60, v61, v62, v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v66 = v64;
    _os_log_impl(&dword_1BE607000, v58, OS_LOG_TYPE_DEFAULT, "VDECT Text detection results saved at URL %@", buf, 0xCu);

  }
  CGImageDestinationFinalize(v57);
  CFRelease(v57);
  CGColorRelease(GenericRGB);
  CGImageRelease(Image);
  CFRelease(v9);
  CGContextRelease(v17);

}

void sub_1BE8C3F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8C4094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8C4168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE8C42D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE8C43D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8C43EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8C43FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8C4410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE8C44D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE8C44EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8C44FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE8C4510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE8C4570(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  double *v8;
  double *v10;
  double *v11;
  double *v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 == *(_QWORD *)a2)
  {
    sub_1BE8C4644(a1, &v10, a3);
  }
  else
  {
    if (v7 < 0)
      sub_1BE61F930();
    v8 = (double *)operator new(v5 - *(_QWORD *)a2);
    v10 = v8;
    v12 = &v8[2 * (v7 >> 4)];
    memcpy(v8, v6, v7);
    v11 = v12;
    sub_1BE8C4644(a1, &v10, a3);
    operator delete(v8);
  }
  return a1;
}

void sub_1BE8C4628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_1BE8C4644(uint64_t a1, double **a2, float *a3)
{
  double *v3;
  double *v4;
  uint64_t v5;
  float result;
  uint64_t v7;
  float64x2_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  unint64_t v12;
  float64x2_t v13;
  double v14;
  float64x2_t *v15;
  uint64_t v16;
  float64x2_t *v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float v32;
  double v33;
  float v34;
  float v35;
  float v36;
  double v37;
  double v38;
  double v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  double v46;

  v4 = *a2;
  v3 = a2[1];
  v5 = (char *)v3 - (char *)*a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_1BE8E0CD0;
  if ((unint64_t)v5 < 0x20)
  {
    result = 0.0;
    if (!a3)
      return result;
LABEL_30:
    *a3 = result;
    return result;
  }
  *(double *)&v7 = (float)(unint64_t)(v5 >> 4);
  if (v4 == v3)
  {
    v14 = 0.0;
    *(double *)a1 = 0.0 / *(double *)&v7;
    *(double *)(a1 + 8) = 0.0 / *(double *)&v7;
    v11 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(0.0 / *(double *)&v7), 0);
    v13 = 0uLL;
    goto LABEL_14;
  }
  v8 = 0uLL;
  v9 = (float64x2_t *)v4;
  do
  {
    v10 = *v9++;
    v8 = vaddq_f64(v8, v10);
    *(float64x2_t *)a1 = v8;
  }
  while (v9 != (float64x2_t *)v3);
  v11 = vdivq_f64(v8, (float64x2_t)vdupq_lane_s64(v7, 0));
  *(float64x2_t *)a1 = v11;
  v12 = v5 - 16;
  if (v12 < 0x10)
  {
    v13 = 0uLL;
    v14 = 0.0;
    v15 = (float64x2_t *)v4;
    do
    {
LABEL_13:
      v21 = *v15++;
      v22 = vsubq_f64(v21, v11);
      v14 = vmlad_n_f64(v14, v22.f64[0], v22.f64[0]);
      v13 = vmlaq_laneq_f64(v13, v22, v22, 1);
    }
    while (v15 != (float64x2_t *)v3);
    goto LABEL_14;
  }
  v16 = (v12 >> 4) + 1;
  v15 = (float64x2_t *)&v4[2 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
  v17 = (float64x2_t *)(v4 + 2);
  v13 = 0uLL;
  v14 = 0.0;
  v18 = v16 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v19 = vsubq_f64(v17[-1], v11);
    v20 = vsubq_f64(*v17, v11);
    v14 = v14 + vmulq_f64(v19, v19).f64[0] + vmulq_f64(v20, v20).f64[0];
    v13 = vaddq_f64(vaddq_f64(v13, vmulq_laneq_f64(v19, v19, 1)), vmulq_laneq_f64(v20, v20, 1));
    v17 += 2;
    v18 -= 2;
  }
  while (v18);
  if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_13;
LABEL_14:
  v23 = *(double *)&v7 + -1.0;
  v24 = v14 / (*(double *)&v7 + -1.0);
  if (v24 >= 0.01)
  {
    v29 = v13.f64[1] / v23;
    if (v13.f64[1] / v23 >= 0.01)
    {
      *(float64_t *)a1 = v11.f64[0];
      v37 = v13.f64[0] / v23;
      if (v24 >= v29)
      {
        v38 = v11.f64[0] + 1.0;
        v39 = v37 / v24;
      }
      else
      {
        v38 = v11.f64[0] + v37 / v29;
        v39 = 1.0;
      }
      v43 = v38 - v11.f64[0];
      v44 = v11.f64[1] + v39 - v11.f64[1];
      *(float *)(a1 + 20) = v43;
      *(float *)(a1 + 24) = v44;
      v45 = (float)(v44 * v44) + (float)(v43 * v43);
      *(float *)(a1 + 28) = v45;
      *(float *)(a1 + 32) = sqrtf(v45);
      if (v45 > 0.0)
      {
        v43 = v43 / v45;
        v44 = v44 / v45;
        *(float *)(a1 + 20) = v43;
        *(float *)(a1 + 24) = v44;
      }
      *(_BYTE *)(a1 + 16) = 1;
      result = (*(v3 - 1) - v11.f64[1]) * v44 + (*(v3 - 2) - v11.f64[0]) * v43;
      if (result < 0.0)
      {
        result = -v43;
        *(float *)(a1 + 20) = -v43;
        *(float *)(a1 + 24) = -v44;
      }
      if (a3)
      {
        v46 = v29 / v24;
        if (v24 / v29 <= 50.0)
        {
          if (v46 <= 50.0)
            result = v37 / (sqrt(v29) * sqrt(v24));
          else
            result = 1.0 - v24 / v29;
          *a3 = result;
        }
        else
        {
          result = 1.0 - v46;
          *a3 = result;
        }
      }
      return result;
    }
    v30 = *(v3 - 2);
    v31 = *v4;
    *(float64_t *)a1 = v11.f64[0];
    v32 = COERCE_DOUBLE(*(_QWORD *)&vsubq_f64(v11, v11).f64[1]);
    if (v30 <= v31)
      v33 = -1.0;
    else
      v33 = 1.0;
    v40 = v11.f64[0] + v33 - v11.f64[0];
    *(float *)(a1 + 20) = v40;
    *(float *)(a1 + 24) = v32;
    v41 = (float)(v32 * v32) + (float)(v40 * v40);
    *(float *)(a1 + 28) = v41;
    *(float *)(a1 + 32) = sqrtf(v41);
    if (v41 > 0.0)
    {
      v42 = v40 / v41;
      v36 = v32 / v41;
      *(float *)(a1 + 20) = v42;
      goto LABEL_28;
    }
  }
  else
  {
    v25 = *(v3 - 1);
    v26 = v4[1];
    *(float64_t *)a1 = v11.f64[0];
    v27 = vsubq_f64(v11, v11).f64[0];
    *(float *)(a1 + 20) = v27;
    if (v25 <= v26)
      v28 = -1.0;
    else
      v28 = 1.0;
    v34 = v11.f64[1] + v28 - v11.f64[1];
    v35 = (float)(v34 * v34) + (float)(v27 * v27);
    *(float *)(a1 + 24) = v34;
    *(float *)(a1 + 28) = v35;
    *(float *)(a1 + 32) = sqrtf(v35);
    if (v35 > 0.0)
    {
      *(float *)(a1 + 20) = v27 / v35;
      v36 = v34 / v35;
LABEL_28:
      *(float *)(a1 + 24) = v36;
    }
  }
  *(_BYTE *)(a1 + 16) = 1;
  result = 1.0;
  if (a3)
    goto LABEL_30;
  return result;
}

BOOL Projector::intersectionWith(uint64_t a1, uint64_t a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;

  v3 = *(float *)(a1 + 20);
  v4 = *(float *)(a1 + 24);
  v5 = *(float *)(a2 + 20);
  v6 = *(float *)(a2 + 24);
  v7 = v3 * v6 - v5 * v4;
  if (v7 != 0.0)
  {
    v8 = *(double *)(a1 + 8);
    v9 = (v5 * (v8 - *(double *)(a2 + 8)) - (*(double *)a1 - *(double *)a2) * v6) / v7;
    v10 = v9;
    *a3 = *(double *)a1 + v10 * v3;
    a3[1] = v8 + v10 * v4;
  }
  return v7 != 0.0;
}

float sub_1BE8C49E8(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  float result;
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  float i;
  double v11;
  double v12;

  v3 = *a2;
  v2 = a2[1];
  result = 0.0;
  if ((unint64_t)((char *)v2 - (char *)*a2) >= 0x20)
  {
    v5 = *(double *)(a1 + 8);
    v6 = *(float *)(a1 + 20);
    v7 = *(float *)(a1 + 24);
    v8 = *(float *)(a1 + 32);
    v9 = ((v3[1] - v5) * v7 + (*v3 - *(double *)a1) * v6) * v8;
    for (i = v9; v3 != v2; i = fmaxf(*(float *)&v11, i))
    {
      v11 = *v3;
      v12 = v3[1];
      v3 += 2;
      *(float *)&v11 = ((v12 - v5) * v7 + (v11 - *(double *)a1) * v6) * v8;
      v9 = fminf(*(float *)&v11, v9);
    }
    return i - v9;
  }
  return result;
}

float Projector::unitDotProd(float *a1, float *a2)
{
  return a2[8] * (float)(a1[8] * (float)((float)(a1[6] * a2[6]) + (float)(a1[5] * a2[5])));
}

float Projector::dotProd(uint64_t a1, uint64_t a2)
{
  return (float)(*(float *)(a1 + 24) * *(float *)(a2 + 24)) + (float)(*(float *)(a1 + 20) * *(float *)(a2 + 20));
}

uint64_t sub_1BE8C4CB0()
{
  uint64_t result;

  result = PPSCreateTelemetryIdentifier();
  qword_1EF5684D8 = result;
  return result;
}

uint64_t sub_1BE8C4DF4()
{
  uint64_t result;

  result = PPSCreateTelemetryIdentifier();
  qword_1EF5684E8 = result;
  return result;
}

id sub_1BE8C4E20()
{
  if (qword_1EF5684F8 != -1)
    dispatch_once(&qword_1EF5684F8, &unk_1E77F1B90);
  return (id)qword_1EF568500;
}

void sub_1BE8C4E6C()
{
  int v0;
  const __CFString *v1;
  void *v2;

  v0 = _os_feature_enabled_impl();
  v1 = CFSTR("!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~£¥§«°»€•←↑→↓✓①②③④⑤⑥⑦⑧⑨¢äÄëËïÏöÖüÜáÁéÉíÍóÓúÚýÝàÀèÈìÌòÒùÙâÂêÊîÎôÔûÛãÃõÕñÑçÇæÆœŒß¡¿ºª");
  v2 = (void *)qword_1EF568500;
  if (v0)
    v1 = CFSTR("!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~¡¢£¥§ª«°º»¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüý\xFFĂăĄąĆćČčĎďĘęĚěĞğİıŁłŃńŇňŒœŘřŚśŞşŠšŤťŮůŸŹźŻżŽžȘșȚț•€₺←↑→↓①②③④⑤⑥⑦⑧⑨✓");
  qword_1EF568500 = (uint64_t)v1;

}

uint64_t sub_1BE8C4EB4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = a3;
  v12 = objc_msgSend_length(a1, v7, v8, v9, v10, v11);
  v14 = v12;
  if (a4 < 1)
  {
    if (v12)
    {
      v27 = 0;
      v28 = 0;
      while (1)
      {
        v15 = v28;
        v29 = objc_msgSend_rangeOfCharacterFromSet_options_range_(a1, v13, (uint64_t)v6, 0, v27, v14);
        if (v29 == 0x7FFFFFFFFFFFFFFFLL)
          break;
        v27 = (uint64_t)&v30[v29];
        if ((unint64_t)&v30[v29] <= objc_msgSend_length(a1, v30, v31, v32, v33, v34))
        {
          v40 = objc_msgSend_length(a1, v35, v36, v37, v38, v39);
          v28 = v15 + 1;
          v14 = v40 - v27;
          if (v40 != v27)
            continue;
        }
        ++v15;
        break;
      }
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    while (v14)
    {
      v17 = objc_msgSend_rangeOfCharacterFromSet_options_range_(a1, v13, (uint64_t)v6, 0, v16, v14);
      if (v17 == 0x7FFFFFFFFFFFFFFFLL)
        break;
      v16 = (uint64_t)&v18[v17];
      if ((unint64_t)&v18[v17] <= objc_msgSend_length(a1, v18, v19, v20, v21, v22))
      {
        v14 = objc_msgSend_length(a1, v13, v23, v24, v25, v26) - v16;
        if (a4 == ++v15)
          goto LABEL_8;
      }
      else
      {
        v14 = 0;
        if (a4 == ++v15)
        {
LABEL_8:
          v15 = a4;
          break;
        }
      }
    }
  }

  return v15;
}

id sub_1BE8C4FE0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v11 = v4;
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v33, (uint64_t)v37, 16, v13);
  if (v14)
  {
    v18 = v14;
    v19 = *(_QWORD *)v34;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v34 != v19)
          objc_enumerationMutation(v11);
        v21 = (void *)MEMORY[0x1E0CB37E8];
        v22 = objc_msgSend_ch_occurrencesOfCharactersInSet_maxCount_(a1, v15, *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * v20), -1, v16, v17, (_QWORD)v33);
        objc_msgSend_numberWithInteger_(v21, v23, v22, v24, v25, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v10, v28, (uint64_t)v27, v29, v30, v31);

        ++v20;
      }
      while (v18 != v20);
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v33, (uint64_t)v37, 16, v17);
    }
    while (v18);
  }

  return v10;
}

id sub_1BE8C513C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  _QWORD v20[4];
  id v21;
  id v22;

  v4 = a3;
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v5, v6, v7, v8, v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v16 = objc_msgSend_length(a1, v10, v11, v12, v13, v14);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_1BE8C51FC;
    v20[3] = &unk_1E77F6AD8;
    v21 = v4;
    v22 = v15;
    objc_msgSend_enumerateCodepointsInRange_usingBlock_(a1, v17, 0, v16, (uint64_t)v20, v18);

  }
  return v15;
}

uint64_t sub_1BE8C51FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  result = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if ((_DWORD)result)
    return objc_msgSend_addIndexesInRange_(*(void **)(a1 + 40), v10, a3, a4, v11, v12);
  return result;
}

id sub_1BE8C5254(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD v34[4];
  __int128 v35;
  _QWORD v36[3];
  char v37;
  _QWORD v38[3];
  char v39;

  v6 = a3;
  v7 = a4;
  v13 = v7;
  if (v6 && v7)
  {
    objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v8, v9, v10, v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v38[0] = 0;
    v38[1] = v38;
    v38[2] = 0x2020000000;
    v39 = 0;
    v36[0] = 0;
    v36[1] = v36;
    v36[2] = 0x2020000000;
    v37 = 0;
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3010000000;
    v34[3] = &unk_1BE94989A;
    v35 = xmmword_1BE8D6920;
    v20 = objc_msgSend_length(a1, v15, v16, v17, v18, v19);
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = sub_1BE8C5428;
    v27[3] = &unk_1E77F6B00;
    v28 = v6;
    v21 = v14;
    v29 = v21;
    v31 = v36;
    v32 = v34;
    v33 = v38;
    v30 = v13;
    objc_msgSend_enumerateCodepointsInRange_usingBlock_(a1, v22, 0, v20, (uint64_t)v27, v23);
    v24 = v30;
    v25 = v21;

    _Block_object_dispose(v34, 8);
    _Block_object_dispose(v36, 8);
    _Block_object_dispose(v38, 8);
  }
  else
  {
    objc_msgSend_indexesOfCharacters_(a1, v8, (uint64_t)v6, v10, v11, v12);
    v25 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v25;
}

void sub_1BE8C53F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

double sub_1BE8C5428(uint64_t a1, const char *a2, NSUInteger location, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSUInteger length;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  int IsMember;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSRange v22;
  NSRange v23;
  NSRange v24;

  length = a4;
  if (objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6))
  {
    objc_msgSend_addIndexesInRange_(*(void **)(a1 + 40), v10, location, length, v12, v13);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    {
      objc_msgSend_addIndexesInRange_(*(void **)(a1 + 40), v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v15, v16);
      result = NAN;
      *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 32) = xmmword_1BE8D6920;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }
  else
  {
    IsMember = objc_msgSend_longCharacterIsMember_(*(void **)(a1 + 48), v10, (uint64_t)a2, v11, v12, v13);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (IsMember)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      if (*(_BYTE *)(v19 + 24) || *(_BYTE *)(v20 + 24))
      {
        *(_BYTE *)(v20 + 24) = 1;
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        v22.location = *(_QWORD *)(v21 + 32);
        if (v22.location != 0x7FFFFFFFFFFFFFFFLL)
        {
          v22.length = *(_QWORD *)(v21 + 40);
          v24.location = location;
          v24.length = length;
          v23 = NSUnionRange(v24, v22);
          location = v23.location;
          length = v23.length;
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        }
        *(_QWORD *)(v21 + 32) = location;
        *(_QWORD *)(v21 + 40) = length;
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      }
      *(_BYTE *)(v19 + 24) = 0;
    }
    else
    {
      *(_BYTE *)(v19 + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
      result = NAN;
      *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 32) = xmmword_1BE8D6920;
    }
  }
  return result;
}

uint64_t sub_1BE8C5590(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = a3;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, (uint64_t)v21, 16, v6);
  if (v7)
  {
    v12 = v7;
    v13 = *(_QWORD *)v18;
    while (2)
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v18 != v13)
          objc_enumerationMutation(v4);
        if ((objc_msgSend_containsString_(a1, v8, *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v14), v9, v10, v11, (_QWORD)v17) & 1) != 0)
        {
          v15 = 1;
          goto LABEL_11;
        }
        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v17, (uint64_t)v21, 16, v11);
      if (v12)
        continue;
      break;
    }
  }
  v15 = 0;
LABEL_11:

  return v15;
}

uint64_t sub_1BE8C5698(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v8 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1BE8C575C;
  v12[3] = &unk_1E77F6B28;
  v12[4] = &v13;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v9, 0, v8, a3, (uint64_t)v12);
  v10 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1BE8C5744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE8C575C(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t sub_1BE8C5774(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v7 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BE8C582C;
  v11[3] = &unk_1E77F6B28;
  v11[4] = &v12;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v8, 0, v7, 514, (uint64_t)v11);
  v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_1BE8C5814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE8C582C(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t sub_1BE8C5844(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v7 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1BE8C58F8;
  v12[3] = &unk_1E77F2DC8;
  v12[4] = &v13;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(a1, v8, 0, v7, (uint64_t)v12, v9);
  v10 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1BE8C58E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE8C58F8(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t sub_1BE8C5910(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  objc_msgSend_codepointAtIndex_outRange_(a1, a2, a3, (uint64_t)v7, a5, a6);
  return v7[0];
}

uint64_t sub_1BE8C5938(void *a1, const char *a2, uint64_t a3, int64x2_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int64x2_t v24;

  v7 = a3;
  v14 = objc_msgSend_characterAtIndex_(a1, a2, a3, (uint64_t)a4, a5, a6);
  v15 = vdupq_n_s64(1uLL);
  v15.i64[0] = v7;
  if ((v14 & 0xFC00) == 0xD800)
  {
    v24 = v15;
    if (v7 + 1 >= (unint64_t)objc_msgSend_length(a1, v9, v10, v11, v12, v13))
      goto LABEL_10;
    v20 = objc_msgSend_characterAtIndex_(a1, v16, v7 + 1, v17, v18, v19);
    if ((v20 & 0xFC00) != 0xDC00)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (v7 && (v14 & 0xFC00) == 0xDC00)
  {
    v24 = v15;
    v21 = objc_msgSend_characterAtIndex_(a1, v9, --v7, v11, v12, v13);
    if ((v21 & 0xFC00) != 0xD800)
    {
LABEL_10:
      v15 = v24;
      goto LABEL_11;
    }
    v22 = v21;
    v20 = v14;
    LODWORD(v14) = v22;
LABEL_9:
    v14 = (v20 + ((_DWORD)v14 << 10) - 56613888);
    v15 = vdupq_n_s64(2uLL);
    v15.i64[0] = v7;
  }
LABEL_11:
  if (a4)
    *a4 = v15;
  return v14;
}

uint64_t sub_1BE8C5A40(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  result = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  if (result)
    return objc_msgSend_codepointAtIndex_outRange_(a1, v8, 0, 0, v9, v10);
  return result;
}

uint64_t sub_1BE8C5A7C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_enumerateCodepointsInRange_reverse_usingBlock_(a1, a2, a3, a4, 0, a5);
}

void sub_1BE8C5A88(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(id, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a5;
  v8 = a4 - 1;
  if (a5)
    v9 = 0;
  else
    v9 = a4;
  if (!a5)
    v8 = 0;
  v10 = v8 + a3;
  v11 = v9 + a3;
  v12 = v8 + a3 < v9 + a3;
  v13 = !v12;
  if (a5)
    v14 = v13;
  else
    v14 = v12;
  v18 = a6;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  if (v14 == 1)
  {
    if ((v6 & 1) != 0)
    {
      do
      {
        v19 = objc_msgSend_codepointAtIndex_outRange_(a1, v15, v10, (uint64_t)&v22, v16, v17);
        v21 = 0;
        v18[2](v18, v19, v22, v23, &v21);
        if (v21)
          break;
        v10 = v22 - 1;
      }
      while (v22 - 1 >= v11);
    }
    else
    {
      do
      {
        v20 = objc_msgSend_codepointAtIndex_outRange_(a1, v15, v10, (uint64_t)&v22, v16, v17);
        v21 = 0;
        v18[2](v18, v20, v22, v23, &v21);
        if (v21)
          break;
        v10 = v23 + v22;
      }
      while (v23 + v22 < v11);
    }
  }

}

id sub_1BE8C5B98(void *a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  if (objc_msgSend_length(a1, a2, a3, a4, a5, a6) <= a3)
    return 0;
  v12 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(a1, v8, a3, v9, v10, v11);
  objc_msgSend_substringWithRange_(a1, v13, v12, (uint64_t)v13, v14, v15);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_1BE8C5BF4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = objc_msgSend_length(a1, a2, a3, a4, a5, a6) - 1;
  return objc_msgSend_composedCharacterAtIndex_(a1, v8, v7, v9, v10, v11);
}

uint64_t sub_1BE8C5C1C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_composedCharacterAtIndex_(a1, a2, 0, a4, a5, a6);
}

id sub_1BE8C5C24(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  const char *v10;
  id v11;
  _QWORD v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  __CFString *v19;
  _QWORD v20[4];

  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  v20[3] = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = sub_1BE8C5D54;
  v18 = sub_1BE8C5D64;
  v19 = &stru_1E77F6F28;
  v9 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BE8C5D6C;
  v13[3] = &unk_1E77F6B50;
  v13[6] = a3;
  v13[7] = a4;
  v13[4] = v20;
  v13[5] = &v14;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v10, 0, v9, 2, (uint64_t)v13);
  v11 = (id)v15[5];
  _Block_object_dispose(&v14, 8);

  _Block_object_dispose(v20, 8);
  return v11;
}

void sub_1BE8C5D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE8C5D54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE8C5D64(uint64_t a1)
{

}

void sub_1BE8C5D6C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;

  v9 = a2;
  v13 = *(_QWORD *)(a1[4] + 8);
  v14 = *(_QWORD *)(v13 + 24);
  v15 = a1[6];
  v17 = v14 >= v15;
  v16 = v14 - v15;
  v17 = !v17 || v16 >= a1[7];
  v21 = (char *)v9;
  if (!v17)
  {
    objc_msgSend_stringByAppendingString_(*(void **)(*(_QWORD *)(a1[5] + 8) + 40), v9, (uint64_t)v9, v10, v11, v12);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = *(_QWORD *)(a1[5] + 8);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;

    v13 = *(_QWORD *)(a1[4] + 8);
    v14 = *(_QWORD *)(v13 + 24);
  }
  *(_QWORD *)(v13 + 24) = v14 + 1;
  if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) > a1[7] + a1[6])
    *a7 = 1;

}

unint64_t sub_1BE8C5E24(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    v13 = objc_msgSend_length(a1, v8, v9, v10, v11, v12);
    v17 = objc_msgSend_codepointAtIndex_outRange_(a1, v14, v13 - 1, 0, v15, v16);
    return ((unint64_t)objc_msgSend_characterType_(CHCharacterSetRules, v18, v17, v19, v20, v21) >> 6) & 1;
  }
  return result;
}

uint64_t sub_1BE8C5E74(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  const char *v8;
  int v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 1;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v7 = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1BE8C5F74;
  v12[3] = &unk_1E77F6B78;
  v12[4] = &v17;
  v12[5] = &v13;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(a1, v8, 0, v7, 2, (uint64_t)v12);
  v9 = *((unsigned __int8 *)v18 + 24);
  v10 = v9 & (*((unsigned __int8 *)v14 + 24) ^ 1u);
  *((_BYTE *)v18 + 24) = v9 & (*((_BYTE *)v14 + 24) ^ 1);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v10;
}

void sub_1BE8C5F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE8C5F74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t result;
  uint64_t v10;
  BOOL v12;

  result = objc_msgSend_isEqualToString_(a2, (const char *)a2, (uint64_t)CFSTR("."), a4, a5, a6);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == (_DWORD)result
     && *(_BYTE *)(v10 + 24) != 0;
  *(_BYTE *)(v10 + 24) = v12;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) ^= 1u;
  *a7 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) ^ 1;
  return result;
}

uint64_t sub_1BE8C5FF0(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int (**v6)(id, uint64_t, uint64_t);
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  UChar32 v17;
  int32_t IntPropertyValue;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  UChar32 v29;
  int32_t v30;
  BOOL v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  UChar32 v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = a4;
  v11 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(a1, v7, a3, v8, v9, v10);
  v13 = (uint64_t)v12;
  v17 = objc_msgSend_characterAtIndex_(a1, v12, a3, v14, v15, v16);
  IntPropertyValue = u_getIntPropertyValue(v17, UCHAR_GRAPHEME_CLUSTER_BREAK);
  if (a3 && IntPropertyValue == 10)
  {
    v24 = a3 - 1;
    do
    {
      v11 = objc_msgSend_rangeOfComposedCharacterSequencesForRange_(a1, v19, v24, v13, v22, v23);
      v13 = (uint64_t)v25;
      v29 = objc_msgSend_characterAtIndex_(a1, v25, v24, v26, v27, v28);
      v30 = u_getIntPropertyValue(v29, UCHAR_GRAPHEME_CLUSTER_BREAK);
      v31 = v24-- != 0;
    }
    while (v31 && v30 == 10);
  }
  v32 = v11 + v13;
  if (v11 + v13 < (unint64_t)objc_msgSend_length(a1, v19, v20, v21, v22, v23))
  {
    do
    {
      v37 = objc_msgSend_characterAtIndex_(a1, v33, v32, v34, v35, v36);
      if (u_getIntPropertyValue(v37, UCHAR_GRAPHEME_CLUSTER_BREAK) != 10)
        break;
      v11 = objc_msgSend_rangeOfComposedCharacterSequencesForRange_(a1, v38, v11, v13 + 1, v39, v40);
      v13 = (uint64_t)v41;
      v32 = (uint64_t)&v41[v11];
    }
    while ((unint64_t)&v41[v11] < objc_msgSend_length(a1, v41, v42, v43, v44, v45));
  }
  if (v6[2](v6, v11, v13))
    v46 = v32;
  else
    v46 = v11;

  return v46;
}

uint64_t sub_1BE8C611C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1EF568510 == -1)
  {
    result = objc_msgSend_length(a1, a2, a3, a4, a5, a6);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&qword_1EF568510, &unk_1E77EFBD8);
    result = objc_msgSend_length(a1, v12, v13, v14, v15, v16);
    if (!result)
      return result;
  }
  return objc_msgSend_rangeOfCharacterFromSet_(a1, v8, qword_1EF568508, v9, v10, v11) == 0x7FFFFFFFFFFFFFFFLL;
}

void sub_1BE8C6194(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  objc_msgSend_uppercaseLetterCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_invertedSet(v13, v6, v7, v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)qword_1EF568508;
  qword_1EF568508 = v11;

}

id sub_1BE8C61DC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  _QWORD v26[4];
  id v27;
  id v28;

  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99DE8];
  v11 = objc_msgSend_count(a1, v6, v7, v8, v9, v10);
  objc_msgSend_arrayWithCapacity_(v5, v12, v11, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = sub_1BE8C62A8;
  v26[3] = &unk_1E77F6BA0;
  v28 = v4;
  v17 = v16;
  v27 = v17;
  v18 = v4;
  objc_msgSend_enumerateObjectsUsingBlock_(a1, v19, (uint64_t)v26, v20, v21, v22);
  v23 = v27;
  v24 = v17;

  return v24;
}

void sub_1BE8C62A8(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(*(void **)(a1 + 32), v2, (uint64_t)v6, v3, v4, v5);

}

id sub_1BE8C62F0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[4];
  id v21;

  v6 = a4;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1BE8C63A0;
  v20[3] = &unk_1E77F6BC8;
  v21 = v6;
  v7 = v6;
  v8 = a3;
  objc_msgSend_ch_mappedArrayWithBlock_(a1, v9, (uint64_t)v20, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_componentsJoinedByString_(v13, v14, (uint64_t)v8, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

uint64_t sub_1BE8C63A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

BOOL sub_1BE8C63AC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = a3;
  v10 = (void *)objc_msgSend_mutableCopy(a1, v5, v6, v7, v8, v9);
  objc_msgSend_addIndexes_(v10, v11, (uint64_t)v4, v12, v13, v14);
  v20 = objc_msgSend_count(v10, v15, v16, v17, v18, v19);
  v26 = objc_msgSend_count(a1, v21, v22, v23, v24, v25);
  v32 = objc_msgSend_count(v4, v27, v28, v29, v30, v31);

  return v20 != v32 + v26;
}

id sub_1BE8C6430()
{
  if (qword_1EF568638 != -1)
    dispatch_once(&qword_1EF568638, &unk_1E77EF4E8);
  return (id)qword_1EF568518;
}

void sub_1BE8C647C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)&stru_1E77F6F28, a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568518;
  qword_1EF568518 = v6;

}

id sub_1BE8C64B0()
{
  if (qword_1EF568640 != -1)
    dispatch_once(&qword_1EF568640, &unk_1E77EFE58);
  return (id)qword_1EF568520;
}

void sub_1BE8C64FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR(".,!?;:，。，！？："),
    a4,
    a5,
    a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568520;
  qword_1EF568520 = v6;

}

id sub_1BE8C6530()
{
  if (qword_1EF568648 != -1)
    dispatch_once(&qword_1EF568648, &unk_1E77F6BE8);
  return (id)qword_1EF568528;
}

void sub_1BE8C657C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("¡¿"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568528;
  qword_1EF568528 = v6;

}

id sub_1BE8C65B0()
{
  if (qword_1EF568650 != -1)
    dispatch_once(&qword_1EF568650, &unk_1E77F6C08);
  return (id)qword_1EF568540;
}

void sub_1BE8C65FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568540;
  qword_1EF568540 = v6;

}

id sub_1BE8C6630()
{
  if (qword_1EF568658 != -1)
    dispatch_once(&qword_1EF568658, &unk_1E77EF528);
  return (id)qword_1EF568548;
}

void sub_1BE8C667C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568548;
  qword_1EF568548 = v6;

}

id sub_1BE8C66B0()
{
  if (qword_1EF568660 != -1)
    dispatch_once(&qword_1EF568660, &unk_1E77EFE98);
  return (id)qword_1EF568530;
}

void sub_1BE8C66FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~£¥§«°»€•←↑→↓✓①②③④⑤⑥⑦⑧⑨¢"),
    a4,
    a5,
    a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568530;
  qword_1EF568530 = v6;

}

id sub_1BE8C6730()
{
  if (qword_1EF568668 != -1)
    dispatch_once(&qword_1EF568668, &unk_1E77EFED8);
  return (id)qword_1EF568538;
}

void sub_1BE8C677C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = (void *)MEMORY[0x1E0CB3500];
  objc_msgSend_ch_latinCharacterString(MEMORY[0x1E0CB3940], a2, a3, a4, a5, a6);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_characterSetWithCharactersInString_(v6, v7, (uint64_t)v13, v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)qword_1EF568538;
  qword_1EF568538 = v11;

}

id sub_1BE8C67DC()
{
  if (qword_1EF568670 != -1)
    dispatch_once(&qword_1EF568670, &unk_1E77EFF18);
  return (id)qword_1EF568550;
}

void sub_1BE8C6828(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("АаБбВвГгҐґДдЕеЄєЁёЖжЗзІіЇїИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯя"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568550;
  qword_1EF568550 = v6;

}

id sub_1BE8C685C()
{
  if (qword_1EF568678 != -1)
    dispatch_once(&qword_1EF568678, &unk_1E77F6C28);
  return (id)qword_1EF568558;
}

void sub_1BE8C68A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;

  objc_msgSend_arrayWithObjects_(MEMORY[0x1E0C99D20], a2, (uint64_t)CFSTR("ء"), a4, a5, a6, CFSTR("آ"), CFSTR("أ"), CFSTR("ؤ"), CFSTR("ئ"), CFSTR("ا"), CFSTR("ب"), CFSTR("ة"), CFSTR("ت"), CFSTR("ث"), CFSTR("ج"), CFSTR("ح"), CFSTR("خ"), CFSTR("د"),
    CFSTR("ذ"),
    CFSTR("ر"),
    CFSTR("ز"),
    CFSTR("س"),
    CFSTR("ش"),
    CFSTR("ص"),
    CFSTR("ض"),
    CFSTR("ط"),
    CFSTR("ظ"),
    CFSTR("ع"),
    CFSTR("غ"),
    CFSTR("ف"),
    CFSTR("ق"),
    CFSTR("ك"),
    CFSTR("ل"),
    CFSTR("م"),
    CFSTR("ن"),
    CFSTR("ه"),
    CFSTR("و"),
    CFSTR("ى"),
    CFSTR("ي"),
    0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB3500];
  objc_msgSend_componentsJoinedByString_(v18, v7, (uint64_t)&stru_1E77F6F28, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_characterSetWithCharactersInString_(v6, v12, (uint64_t)v11, v13, v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)qword_1EF568558;
  qword_1EF568558 = v16;

}

id sub_1BE8C6A88()
{
  if (qword_1EF568680 != -1)
    dispatch_once(&qword_1EF568680, &unk_1E77F6C48);
  return (id)qword_1EF568560;
}

void sub_1BE8C6AD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("٠١٢٣٤٥٦٧٨٩"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568560;
  qword_1EF568560 = v6;

}

id sub_1BE8C6B08()
{
  if (qword_1EF568688 != -1)
    dispatch_once(&qword_1EF568688, &unk_1E77F6C68);
  return (id)qword_1EF568568;
}

void sub_1BE8C6B54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;

  objc_msgSend_arrayWithObjects_(MEMORY[0x1E0C99D20], a2, (uint64_t)CFSTR("ً"), a4, a5, a6, CFSTR("ٌ"), CFSTR("ٍ"), CFSTR("َ"), CFSTR("ُ"), CFSTR("ِ"), CFSTR("ّ"), CFSTR("ْ"), 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB3500];
  objc_msgSend_componentsJoinedByString_(v18, v7, (uint64_t)&stru_1E77F6F28, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_characterSetWithCharactersInString_(v6, v12, (uint64_t)v11, v13, v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)qword_1EF568568;
  qword_1EF568568 = v16;

}

id sub_1BE8C6C1C()
{
  if (qword_1EF568690 != -1)
    dispatch_once(&qword_1EF568690, &unk_1E77EFBF8);
  return (id)qword_1EF568578;
}

void sub_1BE8C6C68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  objc_msgSend_arrayWithObjects_(MEMORY[0x1E0C99D20], a2, (uint64_t)CFSTR("ً"), a4, a5, a6, CFSTR("ٌ"), CFSTR("ٍ"), 0);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB3500];
  objc_msgSend_componentsJoinedByString_(v18, v7, (uint64_t)&stru_1E77F6F28, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_characterSetWithCharactersInString_(v6, v12, (uint64_t)v11, v13, v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)qword_1EF568578;
  qword_1EF568578 = v16;

}

id sub_1BE8C6D00()
{
  if (qword_1EF568698 != -1)
    dispatch_once(&qword_1EF568698, &unk_1E77F6C88);
  return (id)qword_1EF568570;
}

void sub_1BE8C6D4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;

  objc_msgSend_arrayWithObjects_(MEMORY[0x1E0C99D20], a2, (uint64_t)CFSTR("ً"), a4, a5, a6, CFSTR("ٌ"), CFSTR("ٍ"), CFSTR("َ"), CFSTR("ُ"), CFSTR("ِ"), CFSTR("ّ"), CFSTR("ْ"), 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB3500];
  objc_msgSend_componentsJoinedByString_(v18, v7, (uint64_t)&stru_1E77F6F28, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_characterSetWithCharactersInString_(v6, v12, (uint64_t)v11, v13, v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)qword_1EF568570;
  qword_1EF568570 = v16;

}

id sub_1BE8C6E14()
{
  if (qword_1EF5686A0 != -1)
    dispatch_once(&qword_1EF5686A0, &unk_1E77F6CA8);
  return (id)qword_1EF568580;
}

void sub_1BE8C6E60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("ЁёЪъЭэЫы"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568580;
  qword_1EF568580 = v6;

}

id sub_1BE8C6E94()
{
  if (qword_1EF5686A8 != -1)
    dispatch_once(&qword_1EF5686A8, &unk_1E77EFC18);
  return (id)qword_1EF568588;
}

void sub_1BE8C6EE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithRange_(MEMORY[0x1E0CB3500], a2, 19968, 20928, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568588;
  qword_1EF568588 = v6;

}

id sub_1BE8C6F14()
{
  if (qword_1EF5686B0 != -1)
    dispatch_once(&qword_1EF5686B0, &unk_1E77F6CC8);
  return (id)qword_1EF568590;
}

void sub_1BE8C6F60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithRange_(MEMORY[0x1E0CB3500], a2, 13056, 256, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568590;
  qword_1EF568590 = v6;

}

id sub_1BE8C6F94()
{
  if (qword_1EF5686B8 != -1)
    dispatch_once(&qword_1EF5686B8, &unk_1E77EFC38);
  return (id)qword_1EF568598;
}

void sub_1BE8C6FE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithRange_(MEMORY[0x1E0CB3500], a2, 12352, 96, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568598;
  qword_1EF568598 = v6;

}

id sub_1BE8C7014()
{
  if (qword_1EF5686C0 != -1)
    dispatch_once(&qword_1EF5686C0, &unk_1E77F6CE8);
  return (id)qword_1EF5685A0;
}

void sub_1BE8C7060(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithRange_(MEMORY[0x1E0CB3500], a2, 12448, 96, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685A0;
  qword_1EF5685A0 = v6;

}

id sub_1BE8C7094()
{
  if (qword_1EF5686C8 != -1)
    dispatch_once(&qword_1EF5686C8, &unk_1E77F6D08);
  return (id)qword_1EF5685A8;
}

void sub_1BE8C70E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("([{"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685A8;
  qword_1EF5685A8 = v6;

}

id sub_1BE8C7114()
{
  if (qword_1EF5686D0 != -1)
    dispatch_once(&qword_1EF5686D0, &unk_1E77F6D28);
  return (id)qword_1EF5685B0;
}

void sub_1BE8C7160(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR(")]}"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685B0;
  qword_1EF5685B0 = v6;

}

id sub_1BE8C7194()
{
  if (qword_1EF5686D8 != -1)
    dispatch_once(&qword_1EF5686D8, &unk_1E77F6D48);
  return (id)qword_1EF5685B8;
}

void sub_1BE8C71E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("+=<>"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685B8;
  qword_1EF5685B8 = v6;

}

id sub_1BE8C7214()
{
  if (qword_1EF5686E0 != -1)
    dispatch_once(&qword_1EF5686E0, &unk_1E77F6D68);
  return (id)qword_1EF5685C0;
}

void sub_1BE8C7260(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("ๆ*%"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685C0;
  qword_1EF5685C0 = v6;

}

id sub_1BE8C7294()
{
  if (qword_1EF5686E8 != -1)
    dispatch_once(&qword_1EF5686E8, &unk_1E77F6D88);
  return (id)qword_1EF5685C8;
}

void sub_1BE8C72E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("'\""), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685C8;
  qword_1EF5685C8 = v6;

}

id sub_1BE8C7314()
{
  if (qword_1EF5686F0 != -1)
    dispatch_once(&qword_1EF5686F0, &unk_1E77F6DA8);
  return (id)qword_1EF5685D0;
}

void sub_1BE8C7360(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("§gjpqyдурцщфзЦЩÇçĄąĘęŞşạặẶụẹựọộợậệ\xFFỹỳýȘșȚțฎๆฐญĵ𝒴𝑓𝔷,"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685D0;
  qword_1EF5685D0 = v6;

}

id sub_1BE8C7394()
{
  if (qword_1EF5686F8 != -1)
    dispatch_once(&qword_1EF5686F8, &unk_1E77F6DC8);
  return (id)qword_1EF5685D8;
}

void sub_1BE8C73E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("acegmnopqrsuvwxyzагдежзєиклмнопрстуфхцчшщъыьэюяạụẹç𝔷กขคฆงจฉชซฌญฎฏฐฑฒณดตถทธนบผพภมยแรลวาเศษสหฬอฮะยุสูจฺ:*+<>-~.,:"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685D8;
  qword_1EF5685D8 = v6;

}

id sub_1BE8C7414()
{
  if (qword_1EF568700 != -1)
    dispatch_once(&qword_1EF568700, &unk_1E77EF388);
  return (id)qword_1EF5685E0;
}

void sub_1BE8C7460(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("=°•*+<>-ー－~.,、'\"。，…→_"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685E0;
  qword_1EF5685E0 = v6;

}

id sub_1BE8C7494()
{
  if (qword_1EF568708 != -1)
    dispatch_once(&qword_1EF568708, &unk_1E77F1C10);
  return (id)qword_1EF5685E8;
}

void sub_1BE8C74E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("!\"#$%&'()*+,-./:;<=>?[\\]^_{|}~£¥§«°»€•¡¿"),
    a4,
    a5,
    a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685E8;
  qword_1EF5685E8 = v6;

}

id sub_1BE8C7514()
{
  if (qword_1EF568710 != -1)
    dispatch_once(&qword_1EF568710, &unk_1E77F1C30);
  return (id)qword_1EF5685C8;
}

void sub_1BE8C7560(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("gjpqyzÇçý\xFFĄąĘęŞşȘșȚțЦЩдзруфцщญฎฐๆỳỹ"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568E10;
  qword_1EF568E10 = v6;

}

id sub_1BE8C7594()
{
  if (qword_1EF568718 != -1)
    dispatch_once(&qword_1EF568718, &unk_1E77EF3C8);
  return (id)qword_1EF5685F0;
}

void sub_1BE8C75E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("weruosaxcvnm✓"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685F0;
  qword_1EF5685F0 = v6;

}

id sub_1BE8C7614()
{
  if (qword_1EF568720 != -1)
    dispatch_once(&qword_1EF568720, &unk_1E77F6DE8);
  return (id)qword_1EF5685F8;
}

void sub_1BE8C7660(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("zqypgąęşș¡¿"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF5685F8;
  qword_1EF5685F8 = v6;

}

id sub_1BE8C7694()
{
  if (qword_1EF568728 != -1)
    dispatch_once(&qword_1EF568728, &unk_1E77F1C70);
  return (id)qword_1EF568600;
}

void sub_1BE8C76E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("ik0123456789QWERTYUIOPLKJHGFDSAZXCVBNMtlhdb%?!@ÀÁÂÃÄÅÆÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæèéêëìíîïñòóôõöøùúûüĂăĆćČčĎďĚěĞİıŁłŃńŇňŒœŘřŚśŠšŤťŮůŸŹźŻżŽž€₺↑↓①②③④⑤⑥⑦⑧⑨"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568600;
  qword_1EF568600 = v6;

}

id sub_1BE8C7714()
{
  if (qword_1EF568730 != -1)
    dispatch_once(&qword_1EF568730, &unk_1E77F6E08);
  return (id)qword_1EF568608;
}

void sub_1BE8C7760(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("0123456789QWERTYUIOPLKJHGFDSAZXCVBNMtlhdb%?!|}¢£¥§ª°ºÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝĂĄĆČĎĘĚĞİŁłŃŇŒŘŚŞŠŤŮŸŹŻŽȘȚ€₺↑↓①②③④⑤⑥⑦⑧⑨"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568608;
  qword_1EF568608 = v6;

}

id sub_1BE8C7794()
{
  if (qword_1EF568738 != -1)
    dispatch_once(&qword_1EF568738, &unk_1E77F6E28);
  return (id)qword_1EF568610;
}

void sub_1BE8C77E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("0123456789.,+-="), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568610;
  qword_1EF568610 = v6;

}

id sub_1BE8C7814()
{
  if (qword_1EF568740 != -1)
    dispatch_once(&qword_1EF568740, &unk_1E77F6E48);
  return (id)qword_1EF568618;
}

void sub_1BE8C7860(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("0123456789"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568618;
  qword_1EF568618 = v6;

}

id sub_1BE8C7894()
{
  if (qword_1EF568748 != -1)
    dispatch_once(&qword_1EF568748, &unk_1E77F6E68);
  return (id)qword_1EF568620;
}

void sub_1BE8C78E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR(".,' "), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568620;
  qword_1EF568620 = v6;

}

id sub_1BE8C7914()
{
  if (qword_1EF568750 != -1)
    dispatch_once(&qword_1EF568750, &unk_1E77F6E88);
  return (id)qword_1EF568628;
}

void sub_1BE8C7960(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("+-*÷/:×⋅"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568628;
  qword_1EF568628 = v6;

}

id sub_1BE8C7994()
{
  if (qword_1EF568758[0] != -1)
    dispatch_once(qword_1EF568758, &unk_1E77EF3E8);
  return (id)qword_1EF568630;
}

void sub_1BE8C79E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("$€£¥¢₺₴₽₩"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568630;
  qword_1EF568630 = v6;

}

BOOL sub_1BE8C7A14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSUInteger v17;
  NSUInteger sizep;

  sizep = 0;
  v6 = objc_retainAutorelease(a1);
  v12 = (const char *)objc_msgSend_objCType(v6, v7, v8, v9, v10, v11);
  NSGetSizeAndAlignment(v12, &sizep, 0);
  v17 = sizep;
  if (a3 && sizep == a4)
    objc_msgSend_getValue_(v6, v13, a3, v14, v15, v16);
  return v17 == a4;
}

double sub_1BE8C7A84(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;

  v7 = *MEMORY[0x1E0C9D538];
  objc_msgSend_ch_getValue_ofSize_(a1, a2, (uint64_t)&v7, 16, a5, a6);
  return *(double *)&v7;
}

id sub_1BE8C7ABC(double a1, double a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[2];

  *(double *)v9 = a1;
  *(double *)&v9[1] = a2;
  objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E0CB3B18], a4, (uint64_t)v9, (uint64_t)"{CGPoint=dd}", a7, a8);
  return (id)objc_claimAutoreleasedReturnValue();
}

double sub_1BE8C7AF4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v6;
  _OWORD v8[2];

  v6 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v8[0] = *MEMORY[0x1E0C9D648];
  v8[1] = v6;
  objc_msgSend_ch_getValue_ofSize_(a1, a2, (uint64_t)v8, 32, a5, a6);
  return *(double *)v8;
}

id sub_1BE8C7B30(double a1, double a2, double a3, double a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD v11[4];

  *(double *)v11 = a1;
  *(double *)&v11[1] = a2;
  *(double *)&v11[2] = a3;
  *(double *)&v11[3] = a4;
  objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E0CB3B18], a6, (uint64_t)v11, (uint64_t)"{CGRect={CGPoint=dd}{CGSize=dd}}", a9, a10);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_1BE8C7B6C()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1BE8C7B78()
{
  return MEMORY[0x1E0CAFD30]();
}

uint64_t sub_1BE8C7B84()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1BE8C7B90()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1BE8C7B9C()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1BE8C7BA8()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1BE8C7BB4()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1BE8C7BC0()
{
  return MEMORY[0x1E0D50018]();
}

uint64_t sub_1BE8C7BCC()
{
  return MEMORY[0x1E0D50078]();
}

uint64_t sub_1BE8C7BD8()
{
  return MEMORY[0x1E0D50080]();
}

uint64_t sub_1BE8C7BE4()
{
  return MEMORY[0x1E0D500C0]();
}

uint64_t sub_1BE8C7BF0()
{
  return MEMORY[0x1E0D50118]();
}

uint64_t sub_1BE8C7BFC()
{
  return MEMORY[0x1E0D50128]();
}

uint64_t sub_1BE8C7C08()
{
  return MEMORY[0x1E0D50130]();
}

uint64_t sub_1BE8C7C14()
{
  return MEMORY[0x1E0D50140]();
}

uint64_t sub_1BE8C7C20()
{
  return MEMORY[0x1E0D50150]();
}

uint64_t sub_1BE8C7C2C()
{
  return MEMORY[0x1E0D50158]();
}

uint64_t sub_1BE8C7C38()
{
  return MEMORY[0x1E0D50178]();
}

uint64_t sub_1BE8C7C44()
{
  return MEMORY[0x1E0D50190]();
}

uint64_t sub_1BE8C7C50()
{
  return MEMORY[0x1E0D501F8]();
}

uint64_t sub_1BE8C7C5C()
{
  return MEMORY[0x1E0D50280]();
}

uint64_t sub_1BE8C7C68()
{
  return MEMORY[0x1E0D50288]();
}

uint64_t sub_1BE8C7C74()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1BE8C7C80()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1BE8C7C8C()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1BE8C7C98()
{
  return MEMORY[0x1E0D09C48]();
}

uint64_t sub_1BE8C7CA4()
{
  return MEMORY[0x1E0D09C50]();
}

uint64_t sub_1BE8C7CB0()
{
  return MEMORY[0x1E0D09CA8]();
}

uint64_t sub_1BE8C7CBC()
{
  return MEMORY[0x1E0D09CC8]();
}

uint64_t sub_1BE8C7CC8()
{
  return MEMORY[0x1E0D09CD8]();
}

uint64_t sub_1BE8C7CD4()
{
  return MEMORY[0x1E0D09CE0]();
}

uint64_t sub_1BE8C7CE0()
{
  return MEMORY[0x1E0D09CF0]();
}

uint64_t sub_1BE8C7CEC()
{
  return MEMORY[0x1E0D09D60]();
}

uint64_t sub_1BE8C7CF8()
{
  return MEMORY[0x1E0D09D80]();
}

uint64_t sub_1BE8C7D04()
{
  return MEMORY[0x1E0D09E38]();
}

uint64_t sub_1BE8C7D10()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1BE8C7D1C()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1BE8C7D28()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1BE8C7D34()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1BE8C7D40()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1BE8C7D4C()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1BE8C7D58()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1BE8C7D64()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1BE8C7D70()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1BE8C7D7C()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1BE8C7D88()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1BE8C7D94()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1BE8C7DA0()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1BE8C7DAC()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1BE8C7DB8()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1BE8C7DC4()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1BE8C7DD0()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1BE8C7DDC()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1BE8C7DE8()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1BE8C7DF4()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1BE8C7E00()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1BE8C7E0C()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1BE8C7E18()
{
  return MEMORY[0x1E0DED9C8]();
}

uint64_t sub_1BE8C7E24()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1BE8C7E30()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1BE8C7E3C()
{
  return MEMORY[0x1E0DEDF40]();
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

uint64_t CFBurstTrieContains()
{
  return MEMORY[0x1E0C981D0]();
}

uint64_t CFBurstTrieCreateFromFile()
{
  return MEMORY[0x1E0C981E8]();
}

uint64_t CFBurstTrieRelease()
{
  return MEMORY[0x1E0C98208]();
}

uint64_t CFBurstTrieRetain()
{
  return MEMORY[0x1E0C98210]();
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1E0C99208](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x1E0C99238](tokenizer, index);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C992F8](url);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BA90](retstr, t1, t2);
}

CGAffineTransformComponents *__cdecl CGAffineTransformDecompose(CGAffineTransformComponents *__return_ptr retstr, CGAffineTransform *transform)
{
  return (CGAffineTransformComponents *)MEMORY[0x1E0C9BA98](retstr, transform);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1E0C9BAA0](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformMakeWithComponents(CGAffineTransform *__return_ptr retstr, CGAffineTransformComponents *components)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE8](retstr, components);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF0](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGContextRef CGBitmapContextCreateWithData(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo, CGBitmapContextReleaseDataCallback releaseCallback, void *releaseInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB38](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo, releaseCallback);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BCB0](red, green, blue, alpha);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
  MEMORY[0x1E0C9C1B8](c, *(_QWORD *)&mode);
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C210](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
  MEMORY[0x1E0C9C3B8](c, alpha);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
  MEMORY[0x1E0C9C468](c, *(_QWORD *)&cap);
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
  MEMORY[0x1E0C9C470](c, lengths, count, phase);
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
  MEMORY[0x1E0C9C478](c, *(_QWORD *)&join);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C508](c, color);
}

void CGContextStrokePath(CGContextRef c)
{
  MEMORY[0x1E0C9C570](c);
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C578](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1E0C9C5D8](provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC348](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF0](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF8](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9CC38](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddLines(CGMutablePathRef path, const CGAffineTransform *m, const CGPoint *points, size_t count)
{
  MEMORY[0x1E0C9D2B0](path, m, points, count);
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
  MEMORY[0x1E0C9D2B8](path1, m, path2);
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2C0](path, m, cpx, cpy, x, y);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1E0C9D318](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGPathEqualToPath(CGPathRef path1, CGPathRef path2)
{
  return MEMORY[0x1E0C9D3E8](path1, path2);
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x1E0C9D448](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D4A0](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t CVNLPCodepointToScriptCode()
{
  return MEMORY[0x1E0D099F8]();
}

uint64_t CVNLPIsDigitCharLMCodepoint()
{
  return MEMORY[0x1E0D09A20]();
}

uint64_t CVNLPIsLatinCyrillicMixedScript()
{
  return MEMORY[0x1E0D09A28]();
}

uint64_t CVNLPIsWhitespaceCharLMCodepoint()
{
  return MEMORY[0x1E0D09A30]();
}

uint64_t CVNLPIsWordSeparatorForLexicon()
{
  return MEMORY[0x1E0D09A38]();
}

uint64_t CVNLPLanguageModelCreate()
{
  return MEMORY[0x1E0D09A40]();
}

uint64_t CVNLPLanguageModelLogJointProbability()
{
  return MEMORY[0x1E0D09A50]();
}

uint64_t CVNLPLanguageModelWithStateConditionalProbability()
{
  return MEMORY[0x1E0D09A58]();
}

uint64_t CVNLPLanguageModelWithStateCreate()
{
  return MEMORY[0x1E0D09A60]();
}

uint64_t CVNLPLanguageModelWithStateCreateCopy()
{
  return MEMORY[0x1E0D09A68]();
}

uint64_t CVNLPLanguageModelWithStateUpdateWithContext()
{
  return MEMORY[0x1E0D09A70]();
}

uint64_t CVNLPLogGeneralFault()
{
  return MEMORY[0x1E0D09A78]();
}

uint64_t CVNLPNormalizeCodepointForCharLM()
{
  return MEMORY[0x1E0D09A80]();
}

uint64_t CVNLPShouldIgnoreScriptForLatinCyrillic()
{
  return MEMORY[0x1E0D09A88]();
}

uint64_t CVNLPShouldUseLexiconContextLogProb()
{
  return MEMORY[0x1E0D09A90]();
}

uint64_t CVNLPWordTokenIDsForString()
{
  return MEMORY[0x1E0D09AA8]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB90](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCE0](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1E0D43820]();
}

uint64_t LMLanguageModelAddTransientVocabulary()
{
  return MEMORY[0x1E0D42C50]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x1E0D42C60]();
}

uint64_t LMLanguageModelConditionalProbabilityVector()
{
  return MEMORY[0x1E0D42C68]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1E0D42C78]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1E0D42CC0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1E0D42D00]();
}

uint64_t LMLanguageModelRetain()
{
  return MEMORY[0x1E0D42D20]();
}

uint64_t LMLexiconCreate()
{
  return MEMORY[0x1E0D42D50]();
}

uint64_t LMLexiconCursorFirstTokenID()
{
  return MEMORY[0x1E0D42D58]();
}

uint64_t LMLexiconCursorGetTraversedCharacters()
{
  return MEMORY[0x1E0D42D60]();
}

uint64_t LMLexiconCursorHasChildren()
{
  return MEMORY[0x1E0D42D68]();
}

uint64_t LMLexiconCursorHasEntries()
{
  return MEMORY[0x1E0D42D70]();
}

uint64_t LMLexiconCursorHash()
{
  return MEMORY[0x1E0D42D78]();
}

uint64_t LMLexiconCursorTraversedLength()
{
  return MEMORY[0x1E0D42D80]();
}

uint64_t LMLexiconGetCursorByAdvancingWithCharacters()
{
  return MEMORY[0x1E0D42D88]();
}

uint64_t LMLexiconGetFirstTokenIDForString()
{
  return MEMORY[0x1E0D42D90]();
}

uint64_t LMLexiconGetRootCursor()
{
  return MEMORY[0x1E0D42D98]();
}

uint64_t LMLexiconRelease()
{
  return MEMORY[0x1E0D42DC8]();
}

uint64_t LMLexiconResetCursors()
{
  return MEMORY[0x1E0D42DD0]();
}

uint64_t LMStreamTokenizerCreate()
{
  return MEMORY[0x1E0D42DF8]();
}

uint64_t LMStreamTokenizerPushBytes()
{
  return MEMORY[0x1E0D42E08]();
}

uint64_t LMStreamTokenizerRelease()
{
  return MEMORY[0x1E0D42E10]();
}

uint64_t LMVocabularyAddLemma()
{
  return MEMORY[0x1E0D42E20]();
}

uint64_t LMVocabularyCreate()
{
  return MEMORY[0x1E0D42E30]();
}

uint64_t LMVocabularyEnumerateInflectionsOfLemma()
{
  return MEMORY[0x1E0D42E38]();
}

uint64_t LMVocabularyGetTokenIDForLemma()
{
  return MEMORY[0x1E0D42E50]();
}

uint64_t LMVocabularyReset()
{
  return MEMORY[0x1E0D42E58]();
}

uint64_t LMVocabularySetLanguages()
{
  return MEMORY[0x1E0D42E60]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x1E0D43530]();
}

uint64_t LXCursorCreateByAdvancing()
{
  return MEMORY[0x1E0D43540]();
}

uint64_t LXCursorEnumerateEntries()
{
  return MEMORY[0x1E0D43558]();
}

uint64_t LXCursorEnumerateEntriesRecursively()
{
  return MEMORY[0x1E0D43560]();
}

uint64_t LXCursorHasChildren()
{
  return MEMORY[0x1E0D43570]();
}

uint64_t LXCursorHasEntries()
{
  return MEMORY[0x1E0D43578]();
}

uint64_t LXCursorIsRoot()
{
  return MEMORY[0x1E0D43588]();
}

uint64_t LXCursorTerminationProbability()
{
  return MEMORY[0x1E0D435A8]();
}

uint64_t LXEntryCopyString()
{
  return MEMORY[0x1E0D435C8]();
}

uint64_t LXEntryGetMetaFlags()
{
  return MEMORY[0x1E0D43600]();
}

uint64_t LXEntryGetPartialProbability()
{
  return MEMORY[0x1E0D43608]();
}

uint64_t LXEntryGetProbability()
{
  return MEMORY[0x1E0D43618]();
}

uint64_t LXEntryGetTokenID()
{
  return MEMORY[0x1E0D43628]();
}

uint64_t LXEntryGetUserBitfield()
{
  return MEMORY[0x1E0D43638]();
}

uint64_t LXLexiconAdd()
{
  return MEMORY[0x1E0D43650]();
}

uint64_t LXLexiconCopyEntryForTokenID()
{
  return MEMORY[0x1E0D43678]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1E0D43690]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x1E0D436A0]();
}

uint64_t LXLexiconCreateTransient()
{
  return MEMORY[0x1E0D436A8]();
}

uint64_t LXLexiconEnumerateEntriesForString()
{
  return MEMORY[0x1E0D436B8]();
}

uint64_t LXLexiconIncrementUsageCount()
{
  return MEMORY[0x1E0D436E0]();
}

uint64_t LXLexiconSetUserBitfield()
{
  return MEMORY[0x1E0D43710]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MecabraAcceptCandidate()
{
  return MEMORY[0x1E0DE6E18]();
}

uint64_t MecabraAnalyzeStringWithContext()
{
  return MEMORY[0x1E0DE6E38]();
}

uint64_t MecabraCandidateGetNextPhraseBoundary()
{
  return MEMORY[0x1E0DE6E88]();
}

uint64_t MecabraCandidateGetSurface()
{
  return MEMORY[0x1E0DE6EA0]();
}

uint64_t MecabraCandidateGetWordCount()
{
  return MEMORY[0x1E0DE6EB0]();
}

uint64_t MecabraCandidateGetWordReadingLengthAtIndex()
{
  return MEMORY[0x1E0DE6EC8]();
}

uint64_t MecabraCandidateHasAlternativeSurfaceFormForWordAtIndex()
{
  return MEMORY[0x1E0DE6ED8]();
}

uint64_t MecabraCandidateIsPredictionCandidate()
{
  return MEMORY[0x1E0DE6F18]();
}

uint64_t MecabraCandidateRelease()
{
  return MEMORY[0x1E0DE6F40]();
}

uint64_t MecabraCandidateRetain()
{
  return MEMORY[0x1E0DE6F48]();
}

uint64_t MecabraContextAddCandidate()
{
  return MEMORY[0x1E0DE6F60]();
}

uint64_t MecabraContextCreateMutable()
{
  return MEMORY[0x1E0DE6F70]();
}

uint64_t MecabraContextGetCandidateCount()
{
  return MEMORY[0x1E0DE6F80]();
}

uint64_t MecabraContextRelease()
{
  return MEMORY[0x1E0DE6F98]();
}

uint64_t MecabraContextRemoveCandidatesInRange()
{
  return MEMORY[0x1E0DE6FA0]();
}

uint64_t MecabraCreateCandidateFromContextString()
{
  return MEMORY[0x1E0DE6FF0]();
}

uint64_t MecabraCreateHandwritingCandidate()
{
  return MEMORY[0x1E0DE7000]();
}

uint64_t MecabraCreateWithOptions()
{
  return MEMORY[0x1E0DE7028]();
}

uint64_t MecabraGetLengthForContextString()
{
  return MEMORY[0x1E0DE7060]();
}

uint64_t MecabraGetNextCandidate()
{
  return MEMORY[0x1E0DE7068]();
}

uint64_t MecabraPredictionAcceptCandidate()
{
  return MEMORY[0x1E0DE7080]();
}

uint64_t MecabraPredictionAnalyze()
{
  return MEMORY[0x1E0DE7090]();
}

uint64_t MecabraPredictionGetNextCandidate()
{
  return MEMORY[0x1E0DE70A0]();
}

uint64_t MecabraRelease()
{
  return MEMORY[0x1E0DE70B0]();
}

uint64_t MecabraSetAddressBookNamePhoneticPairs()
{
  return MEMORY[0x1E0DE70C8]();
}

uint64_t MecabraSetAssetDataItemsForType()
{
  return MEMORY[0x1E0DE70D0]();
}

uint64_t MecabraSetUserWordKeyPairs()
{
  return MEMORY[0x1E0DE70F8]();
}

uint64_t MecabraWorkingSetAddString()
{
  return MEMORY[0x1E0DE7100]();
}

uint64_t MecabraWorkingSetContainsString()
{
  return MEMORY[0x1E0DE7108]();
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x1E0C99758](typePtr, sizep, alignp);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

NSRange NSRangeFromString(NSString *aString)
{
  NSUInteger v1;
  NSUInteger v2;
  NSRange result;

  v1 = MEMORY[0x1E0CB3128](aString);
  result.length = v2;
  result.location = v1;
  return result;
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB3400](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t PPSCreateTelemetryIdentifier()
{
  return MEMORY[0x1E0D7FE50]();
}

uint64_t PPSSendTelemetry()
{
  return MEMORY[0x1E0D7FE68]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1E0DE41C8](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41D8](this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4278](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4280](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4310](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4468](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4638]();
}

{
  return MEMORY[0x1E0DE4658]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1E0DE4770](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x1E0DE4778](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1E0DE4780](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE4800]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1E0DE4AE0]();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x1E0DE4AE8]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x1E0DE4AF8]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E77EE9C0();
}

void operator delete(void *__p)
{
  off_1E77EE9C8(__p);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_1E77EE9D0(__p, a2);
}

uint64_t operator delete()
{
  return off_1E77EE9D8();
}

uint64_t operator new[]()
{
  return off_1E77EE9E0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E77EE9E8(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E77EE9F0(__sz, a2);
}

uint64_t operator new()
{
  return off_1E77EE9F8();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x1E0C81630](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t cblas_daxpy_NEWLAPACK()
{
  return MEMORY[0x1E0C8BB20]();
}

uint64_t cblas_ddot_NEWLAPACK()
{
  return MEMORY[0x1E0C8BB40]();
}

uint64_t cblas_dgemm_NEWLAPACK()
{
  return MEMORY[0x1E0C8BB50]();
}

uint64_t cblas_sdot_NEWLAPACK()
{
  return MEMORY[0x1E0C8BBE0]();
}

long double cbrt(long double __x)
{
  long double result;

  MEMORY[0x1E0C81850](__x);
  return result;
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5270](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

uint64_t convertToCVNLPTextDecodingResult()
{
  return MEMORY[0x1E0D09B18]();
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

long double cosh(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B50](__x);
  return result;
}

uint64_t dgeev_NEWLAPACK()
{
  return MEMORY[0x1E0C8BCA8]();
}

uint64_t dgetrf_NEWLAPACK()
{
  return MEMORY[0x1E0C8BD18]();
}

uint64_t dgetri_NEWLAPACK()
{
  return MEMORY[0x1E0C8BD28]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82C98](block, timeout);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FD8](label);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t espresso_blob_is_dynamic()
{
  return MEMORY[0x1E0D1FED8]();
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x1E0D1FEE8]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1E0D1FF10]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1E0D1FF38]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1E0D1FF40]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1E0D1FFB8]();
}

uint64_t espresso_network_select_configuration()
{
  return MEMORY[0x1E0D20080]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1E0D200B0]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1E0D200C8]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x1E0D200D8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1E0D200E8]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1E0D20100]();
}

uint64_t espresso_plan_get_phase()
{
  return MEMORY[0x1E0D20120]();
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1E0C83340](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1E0C833A0](a1, *(_QWORD *)&a2, a3);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

long double log1p(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BD0](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C83E60](a1, a2, *(_QWORD *)&a3);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)((uint64_t (*)(id, SEL))MEMORY[0x1E0DE7D20])(a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

long double sinh(long double __x)
{
  long double result;

  MEMORY[0x1E0C85428](__x);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return (char *)MEMORY[0x1E0C85648](__str, __sep);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1E0C85650](__str, __sep, __lasts);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

int system(const char *a1)
{
  return MEMORY[0x1E0C857D8](a1);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

long double tanh(long double __x)
{
  long double result;

  MEMORY[0x1E0C857F8](__x);
  return result;
}

long double tgamma(long double __x)
{
  long double result;

  MEMORY[0x1E0C858D0](__x);
  return result;
}

int32_t u_getIntPropertyValue(UChar32 c, UProperty which)
{
  return MEMORY[0x1E0DE59C0](*(_QWORD *)&c, *(_QWORD *)&which);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x1E0DE59E0](*(_QWORD *)&c, *(_QWORD *)&which);
}

uint64_t ubidi_getLevels()
{
  return MEMORY[0x1E0DE5BF8]();
}

uint64_t ubidi_getVisualMap()
{
  return MEMORY[0x1E0DE5C30]();
}

uint64_t ubidi_open()
{
  return MEMORY[0x1E0DE5C38]();
}

uint64_t ubidi_setPara()
{
  return MEMORY[0x1E0DE5C60]();
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x1E0DE5C88](*(_QWORD *)&c);
}

uint64_t uscript_getScript()
{
  return MEMORY[0x1E0DE6898]();
}

uint64_t uscript_getShortName()
{
  return MEMORY[0x1E0DE68A8]();
}

uint64_t uscript_isRightToLeft()
{
  return MEMORY[0x1E0DE68C0]();
}

uint64_t utrans_close()
{
  return MEMORY[0x1E0DE6AC8]();
}

uint64_t utrans_openU()
{
  return MEMORY[0x1E0DE6AD0]();
}

uint64_t utrans_transUChars()
{
  return MEMORY[0x1E0DE6AE0]();
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0B0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C368](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C860](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C8E0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C940](__B, __IB, __A, __IA, __C, __IC, __N);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF28](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFC0](src, dest, *(_QWORD *)&flags);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

