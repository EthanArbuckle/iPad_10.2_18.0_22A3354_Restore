void sub_1BE686ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B812C8](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void CHDrawingStrokes::getBoundingBox(CHDrawingStrokes *this@<X0>, double **a2@<X8>)
{
  _BYTE *end;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  unint64_t v13;
  double *v14;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  end = this->strokes.__end_;
  v4 = 0.0;
  v5 = 0.000001;
  v6 = end - (char *)this->strokes.__begin_;
  if (!v6)
  {
    v9 = 0.0;
LABEL_17:
    v10 = v5;
    goto LABEL_18;
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  v8 = *((_QWORD *)end - 2) == *((_QWORD *)end - 3);
  v9 = 0.0;
  v10 = 0.000001;
  v11 = v7 - v8;
  if (v7 == v8)
    goto LABEL_18;
  if (v11 < 1)
  {
    v5 = -1.79769313e308;
    v4 = 1.79769313e308;
    v9 = 1.79769313e308;
    goto LABEL_17;
  }
  v13 = 0;
  v9 = 1.79769313e308;
  v10 = -1.79769313e308;
  v5 = -1.79769313e308;
  v4 = 1.79769313e308;
  do
  {
    CHDrawingStrokes::getBoundingBoxForStroke(this, v13, __p);
    if (*(double *)__p[0] < v4)
      v4 = *(double *)__p[0];
    if (*((double *)__p[0] + 1) < v9)
      v9 = *((double *)__p[0] + 1);
    if (*((double *)__p[0] + 2) > v5)
      v5 = *((double *)__p[0] + 2);
    if (*((double *)__p[0] + 3) > v10)
      v10 = *((double *)__p[0] + 3);
    __p[1] = __p[0];
    operator delete(__p[0]);
    ++v13;
  }
  while (v11 != v13);
LABEL_18:
  sub_1BE6946E8((uint64_t)a2, 4uLL);
  v14 = *a2;
  *v14 = v4;
  v14[1] = v9;
  v14[2] = v5;
  v14[3] = v10;
}

void sub_1BE686C1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double CHDrawingStrokes::computeCenter@<D0>(CHDrawingStrokes *this@<X0>, double **a2@<X8>)
{
  char *begin;
  char *end;
  double v5;
  double v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t i;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  double *v31;
  double result;

  begin = (char *)this->strokes.__begin_;
  end = (char *)this->strokes.__end_;
  v5 = 1.0;
  v6 = 0.0;
  if (end == begin)
  {
    v11 = 0.0;
    goto LABEL_26;
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3);
  v8 = *((_QWORD *)end - 2) == *((_QWORD *)end - 3);
  if (*((_QWORD *)end - 2) == *((_QWORD *)end - 3))
    v9 = -1;
  else
    v9 = 0;
  v10 = v7 - v8;
  v11 = 0.0;
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      v13 = &begin[24 * i];
      v14 = *(_QWORD *)v13;
      v15 = *((_QWORD *)v13 + 1) - *(_QWORD *)v13;
      if ((unint64_t)v15 >= 0x10)
      {
        v16 = (unint64_t)(v15 >> 3) >> 1;
        if (v16 <= 1)
          v16 = 1;
        v17 = (double *)(v14 + 8);
        do
        {
          v11 = v11 + *(v17 - 1);
          v6 = v6 + *v17;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
    }
    if ((unint64_t)v10 >= 2)
    {
      v20 = 0;
      v21 = 0;
      v18 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v22 = (uint64_t *)(begin + 24);
      v23 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v24 = *(v22 - 3);
        v25 = *(v22 - 2);
        v27 = *v22;
        v26 = v22[1];
        v22 += 6;
        v20 += (unint64_t)((v25 - v24) >> 3) >> 1;
        v21 += (unint64_t)((v26 - v27) >> 3) >> 1;
        v23 -= 2;
      }
      while (v23);
      v19 = v21 + v20;
      if (v10 == v18)
      {
LABEL_22:
        if (v19 <= 1)
          v30 = 1;
        else
          v30 = v19;
        v5 = (double)v30;
        goto LABEL_26;
      }
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v28 = v7 + v9 - v18;
    v29 = &begin[24 * v18 + 8];
    do
    {
      v19 += (unint64_t)((uint64_t)(*(_QWORD *)v29 - *((_QWORD *)v29 - 1)) >> 3) >> 1;
      v29 += 24;
      --v28;
    }
    while (v28);
    goto LABEL_22;
  }
LABEL_26:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v31 = (double *)operator new(0x10uLL);
  result = v6 / v5;
  a2[1] = v31 + 2;
  a2[2] = v31 + 2;
  *v31 = v11 / v5;
  v31[1] = v6 / v5;
  *a2 = v31;
  return result;
}

uint64_t CHDrawingStrokes::totalNumPoints(CHDrawingStrokes *this)
{
  _BYTE *begin;
  _BYTE *end;
  unint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64x2_t v10;
  uint64_t v11;
  const double *v12;
  int64x2_t v13;
  const double *v14;
  unint64_t v15;
  _QWORD *v16;
  float64x2x3_t v17;
  float64x2x3_t v18;

  begin = this->strokes.__begin_;
  end = this->strokes.__end_;
  if (end == begin)
    return 0;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3);
  v4 = *((_QWORD *)end - 2) == *((_QWORD *)end - 3);
  v5 = *((_QWORD *)end - 2) == *((_QWORD *)end - 3) ? -1 : 0;
  v6 = v3 - v4;
  if (v6 < 1)
    return 0;
  if ((unint64_t)v6 >= 5)
  {
    v9 = v6 & 3;
    if ((v6 & 3) == 0)
      v9 = 4;
    v7 = v6 - v9;
    v10 = 0uLL;
    v11 = v7;
    v12 = (const double *)this->strokes.__begin_;
    v13 = 0uLL;
    do
    {
      v14 = v12;
      v12 += 12;
      v17 = vld3q_f64(v14);
      v14 += 6;
      v10 = (int64x2_t)vsraq_n_u64((uint64x2_t)v10, (uint64x2_t)vshrq_n_s64(vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), 3uLL), 1uLL);
      v18 = vld3q_f64(v14);
      v13 = (int64x2_t)vsraq_n_u64((uint64x2_t)v13, (uint64x2_t)vshrq_n_s64(vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), 3uLL), 1uLL);
      v11 -= 4;
    }
    while (v11);
    result = vaddvq_s64(vaddq_s64(v13, v10));
  }
  else
  {
    v7 = 0;
    result = 0;
  }
  v15 = v3 + v5 - v7;
  v16 = &begin[24 * v7 + 8];
  do
  {
    result += (unint64_t)((uint64_t)(*v16 - *(v16 - 1)) >> 3) >> 1;
    v16 += 3;
    --v15;
  }
  while (v15);
  return result;
}

CHDrawingStrokes *CHDrawingStrokes::translateBy(CHDrawingStrokes *this, double a2, double a3)
{
  _BYTE *begin;
  _BYTE *end;
  int64_t v5;
  unint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double *v18;
  unint64_t v19;
  double *v20;
  double v21;
  float64x2x2_t v22;
  float64x2x2_t v23;
  float64x2x2_t v24;

  begin = this->strokes.__begin_;
  end = this->strokes.__end_;
  if (end != begin)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3) - (*((_QWORD *)end - 2) == *((_QWORD *)end - 3));
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
      v8 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
      do
      {
        v9 = (uint64_t *)&begin[24 * v6];
        v10 = *v9;
        v11 = v9[1] - *v9;
        if ((unint64_t)v11 < 0x10)
          goto LABEL_5;
        v12 = (unint64_t)(v11 >> 3) >> 1;
        v13 = this->strokeBoundsValidity.__begin_;
        v14 = v13[v6 >> 6];
        if (v12 <= 1)
          v12 = 1;
        if (v12 >= 4)
        {
          v15 = v12 & 0x7FFFFFFFFFFFFFFCLL;
          v16 = (double *)(v10 + 32);
          v17 = v12 & 0x7FFFFFFFFFFFFFFCLL;
          do
          {
            v18 = v16 - 4;
            v22 = vld2q_f64(v18);
            v23 = vld2q_f64(v16);
            v24.val[0] = vaddq_f64(v22.val[0], v7);
            v24.val[1] = vaddq_f64(v22.val[1], v8);
            v22.val[0] = vaddq_f64(v23.val[0], v7);
            v22.val[1] = vaddq_f64(v23.val[1], v8);
            vst2q_f64(v18, v24);
            vst2q_f64(v16, v22);
            v16 += 8;
            v17 -= 4;
          }
          while (v17);
          if (v12 == v15)
            goto LABEL_4;
        }
        else
        {
          v15 = 0;
        }
        v19 = v12 - v15;
        v20 = (double *)(v10 + 16 * v15 + 8);
        do
        {
          v21 = *v20 + a3;
          *(v20 - 1) = *(v20 - 1) + a2;
          *v20 = v21;
          v20 += 2;
          --v19;
        }
        while (v19);
LABEL_4:
        v13[v6 >> 6] = v14 & ~(1 << (v6 & 0x3F));
LABEL_5:
        ++v6;
      }
      while (v6 != v5);
    }
  }
  return this;
}

CHDrawingStrokes *CHDrawingStrokes::pathLength(CHDrawingStrokes *this)
{
  _BYTE *begin;
  _BYTE *end;
  double v3;
  int64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  unint64_t v25;
  double *v26;

  begin = this->strokes.__begin_;
  end = this->strokes.__end_;
  v3 = 0.0;
  if (end != begin)
  {
    v4 = 0xAAAAAAAAAAAAAAABLL * ((end - begin) >> 3) - (*((_QWORD *)end - 2) == *((_QWORD *)end - 3));
    if (v4 >= 1)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(_QWORD *)&begin[24 * i];
        v7 = *(_QWORD *)&begin[24 * i + 8] - v6;
        if ((unint64_t)v7 >= 0x19)
        {
          v8 = (unint64_t)(v7 >> 3) >> 1;
          if (v8 <= 2)
            v8 = 2;
          if (v8 >= 5)
          {
            v10 = (v8 - 1) & 0xFFFFFFFFFFFFFFFCLL;
            v9 = v10 | 1;
            this = (CHDrawingStrokes *)(v6 + 32);
            v11 = v10;
            do
            {
              v13 = *(float64x2_t *)&this->strokeBounds.__end_cap_.__value_;
              v12 = *(float64x2_t *)&this->strokeBoundsValidity.__size_;
              v15 = *(float64x2_t *)&this[-1].lineHeight;
              v14 = *(float64x2_t *)&this[-1].sparseBitmap.__end_;
              v16 = *(float64x2_t *)&this->strokeBounds.__begin_;
              this = (CHDrawingStrokes *)((char *)this + 64);
              v17 = vsubq_f64(v16, v14);
              v18 = vsubq_f64(v14, v15);
              v19 = (float64x2_t)vzip1q_s64((int64x2_t)v18, (int64x2_t)v17);
              v20 = vsubq_f64(v12, v13);
              v21 = vsubq_f64(v13, v16);
              v22 = (float64x2_t)vzip1q_s64((int64x2_t)v21, (int64x2_t)v20);
              v23 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v18, v18), (int64x2_t)vmulq_f64(v17, v17)), v19, v19));
              v24 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v21, v21), (int64x2_t)vmulq_f64(v20, v20)), v22, v22));
              v3 = v3 + v23.f64[0] + v23.f64[1] + v24.f64[0] + v24.f64[1];
              v11 -= 4;
            }
            while (v11);
            if (v8 - 1 == v10)
              continue;
          }
          else
          {
            v9 = 1;
          }
          v25 = v8 - v9;
          v26 = (double *)(v6 + 16 * v9);
          do
          {
            v3 = v3 + sqrt((v26[1] - *(v26 - 1)) * (v26[1] - *(v26 - 1)) + (*v26 - *(v26 - 2)) * (*v26 - *(v26 - 2)));
            v26 += 2;
            --v25;
          }
          while (v25);
        }
      }
    }
  }
  return this;
}

double CHDrawingStrokes::pathLength(CHDrawingStrokes *this, uint64_t a2)
{
  float64x2_t *v2;
  uint64_t v3;
  double result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float64x2_t *v8;
  unint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  unint64_t v23;
  double *f64;

  v2 = (float64x2_t *)*((_QWORD *)this->strokes.__begin_ + 3 * a2);
  v3 = *((_QWORD *)this->strokes.__begin_ + 3 * a2 + 1) - (_QWORD)v2;
  result = 0.0;
  if ((unint64_t)v3 >= 0x19)
  {
    v5 = (unint64_t)(v3 >> 3) >> 1;
    if (v5 <= 2)
      v5 = 2;
    if (v5 < 5)
    {
      v6 = 1;
LABEL_9:
      v23 = v5 - v6;
      f64 = v2[v6].f64;
      do
      {
        result = result
               + sqrt((f64[1] - *(f64 - 1)) * (f64[1] - *(f64 - 1)) + (*f64 - *(f64 - 2)) * (*f64 - *(f64 - 2)));
        f64 += 2;
        --v23;
      }
      while (v23);
      return result;
    }
    v7 = (v5 - 1) & 0xFFFFFFFFFFFFFFFCLL;
    v6 = v7 | 1;
    v8 = v2 + 2;
    v9 = v7;
    do
    {
      v11 = v8[1];
      v10 = v8[2];
      v13 = v8[-2];
      v12 = v8[-1];
      v14 = *v8;
      v8 += 4;
      v15 = vsubq_f64(v14, v12);
      v16 = vsubq_f64(v12, v13);
      v17 = (float64x2_t)vzip1q_s64((int64x2_t)v16, (int64x2_t)v15);
      v18 = vsubq_f64(v10, v11);
      v19 = vsubq_f64(v11, v14);
      v20 = (float64x2_t)vzip1q_s64((int64x2_t)v19, (int64x2_t)v18);
      v21 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v16, v16), (int64x2_t)vmulq_f64(v15, v15)), v17, v17));
      v22 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v19, v19), (int64x2_t)vmulq_f64(v18, v18)), v20, v20));
      result = result + v21.f64[0] + v21.f64[1] + v22.f64[0] + v22.f64[1];
      v9 -= 4;
    }
    while (v9);
    if (v5 - 1 != v7)
      goto LABEL_9;
  }
  return result;
}

void sub_1BE68721C(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unint64_t i;

  sub_1BE683638(a2);
  v10 = *(_QWORD *)(a1 + 104);
  v11 = v10 - *(_QWORD *)(a1 + 96);
  if (v11)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3) - (*(_QWORD *)(v10 - 16) == *(_QWORD *)(v10 - 24));
    if ((uint64_t)v12 >= 1)
    {
      v14 = a2[12];
      v13 = a2[13];
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3);
      if (v12 <= v15)
      {
        if (v12 < v15)
        {
          v16 = v14 + 24 * v12;
          if (v13 != v16)
          {
            v17 = a2[13];
            do
            {
              v19 = *(void **)(v17 - 24);
              v17 -= 24;
              v18 = v19;
              if (v19)
              {
                *(_QWORD *)(v13 - 16) = v18;
                operator delete(v18);
              }
              v13 = v17;
            }
            while (v17 != v16);
          }
          a2[13] = v16;
        }
      }
      else
      {
        sub_1BE6942B0((uint64_t)(a2 + 12), v12 - v15);
      }
      v20 = a2[1];
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - *a2) >> 3);
      if (v12 <= v21)
      {
        if (v12 < v21)
        {
          v22 = *a2 + 24 * v12;
          if (v20 != v22)
          {
            v23 = a2[1];
            do
            {
              v25 = *(void **)(v23 - 24);
              v23 -= 24;
              v24 = v25;
              if (v25)
              {
                *(_QWORD *)(v20 - 16) = v24;
                operator delete(v24);
              }
              v20 = v23;
            }
            while (v23 != v22);
          }
          a2[1] = v22;
        }
      }
      else
      {
        sub_1BE6942B0((uint64_t)a2, v12 - v21);
      }
      sub_1BE6837E8((uint64_t)(a2 + 3), v12, 0);
      for (i = 0; i != v12; ++i)
        sub_1BE6873CC(a1, (uint64_t)a2, i, a3, a4, a5);
    }
  }
}

void CHDrawingStrokes::resampleStrokesEqualInSpace(CHDrawingStrokes *this, CHDrawingStrokes *a2, float a3)
{
  sub_1BE68721C((uint64_t)this, (uint64_t *)a2, 0, 0x7FFFFFFFFFFFFFFFLL, a3);
}

void CHDrawingStrokes::resampleStrokesEqualInSpace(CHDrawingStrokes *this, CHDrawingStrokes *a2, float a3, uint64_t a4)
{
  sub_1BE68721C((uint64_t)this, (uint64_t *)a2, 0, a4, a3);
}

void sub_1BE6873CC(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5, float a6)
{
  void **v6;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  double *v29;
  uint64_t v30;
  NSObject *v31;
  float v32;
  float v33;
  float64x2_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  float64x2_t *v43;
  uint64_t v44;
  double v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float64x2_t *v49;
  unint64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  unint64_t v63;
  double *f64;
  unint64_t v65;
  float v66;
  unint64_t v67;
  double *v68;
  float v69;
  float v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  float v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  float64x2_t *v86;
  float32x2_t v87;
  float32x2_t v88;
  float v89;
  float64x2_t v90;
  uint64_t v91;
  float32x2_t v92;
  _QWORD *v93;
  _QWORD *v94;
  void **v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  BOOL v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE *v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  float32x2_t v116;
  unint64_t v117;
  double *v118;
  float v119;
  float v120;
  uint64_t *v121;
  uint64_t **v122;
  uint64_t **v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  void **v129;
  float64x2_t v132;
  float64x2_t v133;
  _QWORD *v134;
  _QWORD *v135[2];
  __int128 buf;
  char *v137;
  char *v138;
  _QWORD *v139;
  uint64_t v140;

  v6 = (void **)a4;
  v140 = *MEMORY[0x1E0C80C00];
  v135[0] = 0;
  v135[1] = 0;
  v134 = v135;
  if (a4)
  {
    v9 = a4[2];
    v10 = (_QWORD *)a4[1];
    if ((unint64_t)v10 < v9)
    {
      v10[2] = 0;
      v10[1] = 0;
      *v10 = v10 + 1;
      sub_1BE694588(v10, v134, v135);
      v6[1] = v10 + 3;
      v6[1] = v10 + 3;
      goto LABEL_24;
    }
    v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *a4) >> 3);
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F930();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a4) >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v13;
    v139 = a4 + 2;
    if (v14)
    {
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F100();
      v15 = (char *)operator new(24 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[24 * v11];
    *(_QWORD *)&buf = v15;
    *((_QWORD *)&buf + 1) = v16;
    v137 = v16;
    v138 = &v15[24 * v14];
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 1) = 0;
    *(_QWORD *)v16 = v16 + 8;
    sub_1BE694588(v16, v135, v135);
    v17 = *((_QWORD *)&buf + 1);
    v18 = v137 + 24;
    v19 = (char *)*v6;
    v20 = (char *)v6[1];
    if (v20 == *v6)
    {
      *v6 = (void *)*((_QWORD *)&buf + 1);
      v6[1] = v18;
      v6[2] = v138;
      if (!v20)
        goto LABEL_23;
    }
    else
    {
      v21 = 0;
      do
      {
        while (1)
        {
          v22 = v17 + v21;
          *(_QWORD *)(v22 - 24) = *(_QWORD *)&v20[v21 - 24];
          v23 = &v20[v21 - 16];
          v24 = *(_QWORD *)v23;
          *(_QWORD *)(v17 + v21 - 16) = *(_QWORD *)v23;
          v25 = v17 + v21 - 16;
          v26 = *(_QWORD *)&v20[v21 - 8];
          *(_QWORD *)(v22 - 8) = v26;
          if (v26)
            break;
          *(_QWORD *)(v22 - 24) = v25;
          v21 -= 24;
          if (&v20[v21] == v19)
            goto LABEL_19;
        }
        *(_QWORD *)(v24 + 16) = v25;
        *(_QWORD *)&v20[v21 - 24] = v23;
        *(_QWORD *)v23 = 0;
        *(_QWORD *)&v20[v21 - 8] = 0;
        v21 -= 24;
      }
      while (&v20[v21] != v19);
LABEL_19:
      v20 = (char *)*v6;
      v27 = (char *)v6[1];
      *v6 = (void *)(v17 + v21);
      v6[1] = v18;
      v6[2] = v138;
      if (v27 != v20)
      {
        do
        {
          v28 = v27 - 24;
          sub_1BE62033C((uint64_t)(v27 - 24), *((_QWORD **)v27 - 2));
          v27 = v28;
        }
        while (v28 != v20);
      }
      if (!v20)
        goto LABEL_23;
    }
    operator delete(v20);
LABEL_23:
    v6[1] = v18;
  }
LABEL_24:
  v29 = *(double **)(*(_QWORD *)(a1 + 96) + 24 * a3);
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24 * a3 + 8) - (_QWORD)v29;
  if ((unint64_t)v30 <= 0xF)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v31 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a3;
      _os_log_impl(&dword_1BE607000, v31, OS_LOG_TYPE_FAULT, "Empty stroke at index=%lu detected during spatial resampling.", (uint8_t *)&buf, 0xCu);
    }

    v29 = *(double **)(*(_QWORD *)(a1 + 96) + 24 * a3);
  }
  v32 = *v29;
  v33 = v29[1];
  sub_1BE683A60(a2, a3, v32, v33);
  if (v6)
  {
    v35 = v6[1];
    v36 = (uint64_t *)operator new(0x30uLL);
    v37 = v36;
    v36[4] = 0;
    v36[5] = 0;
    v38 = (uint64_t **)(v35 - 2);
    v39 = (uint64_t *)*(v35 - 2);
    if (v39)
    {
      while (1)
      {
        while (1)
        {
          v40 = (uint64_t **)v39;
          v41 = v39[4];
          if (v41 < 1)
            break;
          v39 = (uint64_t *)*v39;
          v38 = v40;
          if (!*v40)
            goto LABEL_38;
        }
        if ((v41 & 0x8000000000000000) == 0)
          break;
        v39 = (uint64_t *)v39[1];
        if (!v39)
        {
          v38 = v40 + 1;
          goto LABEL_38;
        }
      }
      operator delete(v36);
    }
    else
    {
      v40 = (uint64_t **)(v35 - 2);
LABEL_38:
      *v36 = 0;
      v36[1] = 0;
      v36[2] = (uint64_t)v40;
      *v38 = v36;
      v42 = *(_QWORD *)*(v35 - 3);
      if (v42)
      {
        *(v35 - 3) = v42;
        v37 = *v38;
      }
      sub_1BE61F5C0((uint64_t *)*(v35 - 2), v37);
      ++*(v35 - 1);
    }
  }
  v43 = *(float64x2_t **)(*(_QWORD *)(a1 + 96) + 24 * a3);
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24 * a3 + 8) - (_QWORD)v43;
  v45 = 0.0;
  if ((unint64_t)v44 >= 0x19)
  {
    v46 = (unint64_t)(v44 >> 3) >> 1;
    if (v46 <= 2)
      v46 = 2;
    if (v46 < 5)
    {
      v47 = 1;
LABEL_49:
      v63 = v46 - v47;
      f64 = v43[v47].f64;
      do
      {
        v45 = v45 + sqrt((f64[1] - *(f64 - 1)) * (f64[1] - *(f64 - 1)) + (*f64 - *(f64 - 2)) * (*f64 - *(f64 - 2)));
        f64 += 2;
        --v63;
      }
      while (v63);
      goto LABEL_51;
    }
    v48 = (v46 - 1) & 0xFFFFFFFFFFFFFFFCLL;
    v47 = v48 | 1;
    v49 = v43 + 2;
    v50 = v48;
    do
    {
      v52 = v49[1];
      v51 = v49[2];
      v54 = v49[-2];
      v53 = v49[-1];
      v55 = *v49;
      v49 += 4;
      v56 = vsubq_f64(v55, v53);
      v57 = vsubq_f64(v53, v54);
      v34 = (float64x2_t)vzip1q_s64((int64x2_t)v57, (int64x2_t)v56);
      v58 = vsubq_f64(v51, v52);
      v59 = vsubq_f64(v52, v55);
      v60 = (float64x2_t)vzip1q_s64((int64x2_t)v59, (int64x2_t)v58);
      v61 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v57, v57), (int64x2_t)vmulq_f64(v56, v56)), v34, v34));
      v62 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v59, v59), (int64x2_t)vmulq_f64(v58, v58)), v60, v60));
      v45 = v45 + v61.f64[0] + v61.f64[1] + v62.f64[0] + v62.f64[1];
      v50 -= 4;
    }
    while (v50);
    if (v46 - 1 != v48)
      goto LABEL_49;
  }
LABEL_51:
  v65 = (unint64_t)(v30 >> 3) >> 1;
  v66 = v45;
  if (v66 >= a6)
  {
    if (a5 != 0x7FFFFFFFFFFFFFFFLL && ceilf(v66 / a6) > (float)a5)
      a6 = v66 / ((double)a5 + -1.0);
    if ((unint64_t)v30 < 0x19)
    {
      v84 = 1;
    }
    else
    {
      v129 = v6;
      v79 = a5 - 1;
      v80 = 2;
      if (v65 > 2)
        v80 = (unint64_t)(v30 >> 3) >> 1;
      v126 = v80;
      v81 = 0.0;
      v82 = a3;
      v127 = 24 * a3;
      v83 = 1;
      v84 = 1;
      do
      {
        v85 = v81;
        v86 = (float64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + v127) + 16 * v83);
        *(float32x2_t *)&v34.f64[0] = vcvt_f32_f64(v86[-1]);
        v87 = vcvt_f32_f64(*v86);
        v88 = vsub_f32(*(float32x2_t *)&v34.f64[0], v87);
        v81 = sqrtf(vaddv_f32(vmul_f32(v88, v88)));
        v89 = v85 + v81;
        if (v89 < a6)
        {
          v81 = v89;
        }
        else
        {
          v90 = v34;
          if (v129)
          {
            v91 = a5;
            do
            {
              *(float32x2_t *)&v90.f64[0] = vmla_n_f32(*(float32x2_t *)&v90.f64[0], vsub_f32(v87, *(float32x2_t *)&v90.f64[0]), (float)(a6 - (float)(v89 - v81)) / v81);
              v132 = v90;
              if (v91 == 0x7FFFFFFFFFFFFFFFLL || v84 < v79)
              {
                sub_1BE683A60(a2, v82, *(float *)v90.f64, *((float *)v90.f64 + 1));
                v93 = v129[1];
                v95 = (void **)(v93 - 2);
                v94 = (_QWORD *)*(v93 - 2);
                v96 = v93 - 2;
                v97 = v93 - 2;
                if (v94)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v97 = v94;
                      v98 = v94[4];
                      if (v84 >= v98)
                        break;
                      v94 = (_QWORD *)*v97;
                      v96 = v97;
                      if (!*v97)
                        goto LABEL_90;
                    }
                    if (v98 >= v84)
                      break;
                    v94 = (_QWORD *)v97[1];
                    if (!v94)
                    {
                      v96 = v97 + 1;
                      goto LABEL_90;
                    }
                  }
                }
                else
                {
LABEL_90:
                  v99 = operator new(0x30uLL);
                  v99[4] = v84;
                  v99[5] = v83;
                  *v99 = 0;
                  v99[1] = 0;
                  v99[2] = v97;
                  *v96 = v99;
                  v100 = *(_QWORD *)*(v93 - 3);
                  if (v100)
                  {
                    *(v93 - 3) = v100;
                    v99 = (_QWORD *)*v96;
                  }
                  v101 = *v95;
                  v102 = v99 == *v95;
                  *((_BYTE *)v99 + 24) = v102;
                  if (!v102)
                  {
                    do
                    {
                      v103 = v99[2];
                      if (*(_BYTE *)(v103 + 24))
                        break;
                      v104 = *(_BYTE **)(v103 + 16);
                      v105 = *(_QWORD *)v104;
                      if (*(_QWORD *)v104 == v103)
                      {
                        v108 = *((_QWORD *)v104 + 1);
                        if (!v108 || (v109 = *(unsigned __int8 *)(v108 + 24), v106 = (_BYTE *)(v108 + 24), v109))
                        {
                          if (*(_QWORD **)v103 == v99)
                          {
                            *(_BYTE *)(v103 + 24) = 1;
                            v104[24] = 0;
                            v112 = *(_QWORD *)(v103 + 8);
                            *(_QWORD *)v104 = v112;
                            if (v112)
                              goto LABEL_107;
                          }
                          else
                          {
                            v110 = *(uint64_t **)(v103 + 8);
                            v111 = *v110;
                            *(_QWORD *)(v103 + 8) = *v110;
                            if (v111)
                            {
                              *(_QWORD *)(v111 + 16) = v103;
                              v104 = *(_BYTE **)(v103 + 16);
                            }
                            v110[2] = (uint64_t)v104;
                            *(_QWORD *)(*(_QWORD *)(v103 + 16) + 8 * (**(_QWORD **)(v103 + 16) != v103)) = v110;
                            *v110 = v103;
                            *(_QWORD *)(v103 + 16) = v110;
                            v104 = (_BYTE *)v110[2];
                            v103 = *(_QWORD *)v104;
                            *((_BYTE *)v110 + 24) = 1;
                            v104[24] = 0;
                            v112 = *(_QWORD *)(v103 + 8);
                            *(_QWORD *)v104 = v112;
                            if (v112)
LABEL_107:
                              *(_QWORD *)(v112 + 16) = v104;
                          }
                          *(_QWORD *)(v103 + 16) = *((_QWORD *)v104 + 2);
                          *(_QWORD *)(*((_QWORD *)v104 + 2) + 8 * (**((_QWORD **)v104 + 2) != (_QWORD)v104)) = v103;
                          *(_QWORD *)(v103 + 8) = v104;
LABEL_77:
                          *((_QWORD *)v104 + 2) = v103;
                          break;
                        }
                      }
                      else if (!v105 || (v107 = *(unsigned __int8 *)(v105 + 24), v106 = (_BYTE *)(v105 + 24), v107))
                      {
                        if (*(_QWORD **)v103 == v99)
                        {
                          v114 = v99[1];
                          *(_QWORD *)v103 = v114;
                          if (v114)
                          {
                            *(_QWORD *)(v114 + 16) = v103;
                            v104 = *(_BYTE **)(v103 + 16);
                          }
                          v99[2] = v104;
                          *(_QWORD *)(*(_QWORD *)(v103 + 16) + 8 * (**(_QWORD **)(v103 + 16) != v103)) = v99;
                          v99[1] = v103;
                          *(_QWORD *)(v103 + 16) = v99;
                          v104 = (_BYTE *)v99[2];
                          *((_BYTE *)v99 + 24) = 1;
                          v104[24] = 0;
                          v103 = *((_QWORD *)v104 + 1);
                          v113 = *(_QWORD **)v103;
                          *((_QWORD *)v104 + 1) = *(_QWORD *)v103;
                          if (!v113)
                            goto LABEL_76;
                        }
                        else
                        {
                          *(_BYTE *)(v103 + 24) = 1;
                          v104[24] = 0;
                          v103 = *((_QWORD *)v104 + 1);
                          v113 = *(_QWORD **)v103;
                          *((_QWORD *)v104 + 1) = *(_QWORD *)v103;
                          if (!v113)
                            goto LABEL_76;
                        }
                        v113[2] = v104;
LABEL_76:
                        *(_QWORD *)(v103 + 16) = *((_QWORD *)v104 + 2);
                        *(_QWORD *)(*((_QWORD *)v104 + 2) + 8 * (**((_QWORD **)v104 + 2) != (_QWORD)v104)) = v103;
                        *(_QWORD *)v103 = v104;
                        goto LABEL_77;
                      }
                      *(_BYTE *)(v103 + 24) = 1;
                      v99 = v104;
                      v104[24] = v104 == (_BYTE *)v101;
                      *v106 = 1;
                    }
                    while (v104 != (_BYTE *)v101);
                  }
                  ++*(v93 - 1);
                }
                ++v84;
                v91 = a5;
              }
              v90 = v132;
              v92 = vsub_f32(*(float32x2_t *)&v132.f64[0], v87);
              v81 = sqrtf(vaddv_f32(vmul_f32(v92, v92)));
              v89 = v81;
            }
            while (v81 >= a6);
          }
          else
          {
            v115 = a5;
            do
            {
              *(float32x2_t *)&v90.f64[0] = vmla_n_f32(*(float32x2_t *)&v90.f64[0], vsub_f32(v87, *(float32x2_t *)&v90.f64[0]), (float)(a6 - (float)(v89 - v81)) / v81);
              v133 = v90;
              if (v115 == 0x7FFFFFFFFFFFFFFFLL || v84 < v79)
              {
                sub_1BE683A60(a2, v82, *(float *)v90.f64, *((float *)v90.f64 + 1));
                ++v84;
                v115 = a5;
              }
              v90 = v133;
              v116 = vsub_f32(*(float32x2_t *)&v133.f64[0], v87);
              v81 = sqrtf(vaddv_f32(vmul_f32(v116, v116)));
              v89 = v81;
            }
            while (v81 >= a6);
          }
        }
        ++v83;
      }
      while (v83 != v126);
      v6 = v129;
      a3 = v82;
      v43 = *(float64x2_t **)(*(_QWORD *)(a1 + 96) + 24 * v82);
      v65 = (unint64_t)(v30 >> 3) >> 1;
    }
    v117 = v65 - 1;
    v118 = v43[v65 - 1].f64;
    v119 = *v118;
    v120 = v118[1];
    sub_1BE683A60(a2, a3, v119, v120);
    if (v6)
    {
      v71 = v6[1];
      v122 = (uint64_t **)(v71 - 2);
      v121 = (uint64_t *)*(v71 - 2);
      if (!v121)
      {
        v123 = (uint64_t **)(v71 - 2);
LABEL_134:
        v73 = (uint64_t *)operator new(0x30uLL);
        v73[4] = v84;
        v73[5] = v117;
        *v73 = 0;
        v73[1] = 0;
        v73[2] = (uint64_t)v123;
        *v122 = v73;
        v125 = *(_QWORD *)*(v71 - 3);
        if (v125)
        {
          *(v71 - 3) = v125;
          v73 = *v122;
        }
        goto LABEL_136;
      }
      while (1)
      {
        while (1)
        {
          v123 = (uint64_t **)v121;
          v124 = v121[4];
          if (v84 >= v124)
            break;
          v121 = *v123;
          v122 = v123;
          if (!*v123)
            goto LABEL_134;
        }
        if (v124 >= v84)
          break;
        v121 = v123[1];
        if (!v121)
        {
          v122 = v123 + 1;
          goto LABEL_134;
        }
      }
    }
  }
  else if ((unint64_t)v30 >= 0x19)
  {
    v67 = v65 - 1;
    v68 = v43[v65 - 1].f64;
    v69 = *v68;
    v70 = v68[1];
    sub_1BE683A60(a2, a3, v69, v70);
    if (v6)
    {
      v71 = v6[1];
      v72 = (uint64_t *)operator new(0x30uLL);
      v73 = v72;
      v72[4] = 1;
      v72[5] = v67;
      v74 = (uint64_t **)(v71 - 2);
      v75 = (uint64_t *)*(v71 - 2);
      if (!v75)
      {
        v76 = (uint64_t **)(v71 - 2);
LABEL_61:
        *v72 = 0;
        v72[1] = 0;
        v72[2] = (uint64_t)v76;
        *v74 = v72;
        v78 = *(_QWORD *)*(v71 - 3);
        if (v78)
        {
          *(v71 - 3) = v78;
          v73 = *v74;
        }
LABEL_136:
        sub_1BE61F5C0((uint64_t *)*(v71 - 2), v73);
        ++*(v71 - 1);
        goto LABEL_137;
      }
      while (1)
      {
        while (1)
        {
          v76 = (uint64_t **)v75;
          v77 = v75[4];
          if (v77 < 2)
            break;
          v75 = (uint64_t *)*v75;
          v74 = v76;
          if (!*v76)
            goto LABEL_61;
        }
        if (v77 == 1)
          break;
        v75 = (uint64_t *)v75[1];
        if (!v75)
        {
          v74 = v76 + 1;
          goto LABEL_61;
        }
      }
      operator delete(v72);
    }
  }
LABEL_137:
  sub_1BE62033C((uint64_t)&v134, v135[0]);
}

void sub_1BE687E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1BE687E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1BE687EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1BE687ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v14;
  va_list va;
  _QWORD *v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD *);
  v17 = va_arg(va1, _QWORD);
  sub_1BE62033C(v12, *(_QWORD **)(v12 + 8));
  sub_1BE694694((uint64_t)va1);
  sub_1BE62033C((uint64_t)va, v16);
  _Unwind_Resume(a1);
}

void sub_1BE687EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  uint64_t v21;
  uint64_t v22;

  sub_1BE62033C(v22, *(_QWORD **)(v22 + 8));
  *(_QWORD *)(v21 + 8) = v22;
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1BE687F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1BE687F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1BE687F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1BE687F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1BE687F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_1BE687F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  sub_1BE62033C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void CHDrawingStrokes::resampleStrokesWithCatmullRomSplineInterpolation(CHDrawingStrokes *this, CHDrawingStrokes *a2, float a3)
{
  CHDrawingStrokes *v4;
  _BYTE *end;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _BYTE *begin;
  unint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  float64x2_t **v25;
  float64x2_t *v26;
  unint64_t v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float64x2_t *v33;
  unint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  unint64_t v48;
  double *f64;
  double *v50;
  double *v51;
  double *v52;
  unint64_t v53;
  uint64_t v54;
  double *v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  double *v59;
  double v60;
  double v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  double *v66;
  double *v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  double *v76;
  unint64_t v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  size_t v82;
  char *v83;
  char *v84;
  double *v85;
  uint64_t v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  _OWORD *v91;
  double v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  double *v96;
  double *v97;
  double v98;
  double v99;
  double v100;
  double v101;
  unint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  std::logic_error *v109;
  std::logic_error *exception;
  std::logic_error *v111;
  size_t v112;
  unint64_t v113;
  char *v114;
  CHDrawingStrokes *v115;
  uint64_t v116;
  double *v117;
  double *v118;
  char *v119;
  void *__p;
  _BYTE *v121;
  uint64_t v122;
  double v123;
  __int128 v124;
  uint64_t v125;

  v4 = a2;
  v125 = *MEMORY[0x1E0C80C00];
  end = this->strokes.__end_;
  v7 = end - (char *)this->strokes.__begin_;
  if (v7)
    v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3) - (*((_QWORD *)end - 2) == *((_QWORD *)end - 3));
  else
    v8 = 0;
  sub_1BE683638((uint64_t *)a2);
  begin = v4->strokes.__begin_;
  v9 = (char *)v4->strokes.__end_;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - begin) >> 3);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v12 = &begin[24 * v8];
      if (v9 != v12)
      {
        v13 = (char *)v4->strokes.__end_;
        do
        {
          v15 = (void *)*((_QWORD *)v13 - 3);
          v13 -= 24;
          v14 = v15;
          if (v15)
          {
            *((_QWORD *)v9 - 2) = v14;
            operator delete(v14);
          }
          v9 = v13;
        }
        while (v13 != v12);
      }
      v4->strokes.__end_ = v12;
    }
  }
  else
  {
    sub_1BE6942B0((uint64_t)&v4->strokes, v8 - v11);
  }
  v16 = (char *)v4->strokeBounds.__end_;
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (char *)v4->strokeBounds.__begin_) >> 3);
  if (v8 <= v17)
  {
    if (v8 < v17)
    {
      v18 = (uint64_t)v4->strokeBounds.__begin_ + 24 * v8;
      if (v16 != (char *)v18)
      {
        v19 = (char *)v4->strokeBounds.__end_;
        do
        {
          v21 = (void *)*((_QWORD *)v19 - 3);
          v19 -= 24;
          v20 = v21;
          if (v21)
          {
            *((_QWORD *)v16 - 2) = v20;
            operator delete(v20);
          }
          v16 = v19;
        }
        while (v19 != (char *)v18);
      }
      v4->strokeBounds.__end_ = (void *)v18;
    }
  }
  else
  {
    sub_1BE6942B0((uint64_t)v4, v8 - v17);
  }
  sub_1BE6837E8((uint64_t)&v4->strokeBoundsValidity, v8, 0);
  v22 = 0;
  v115 = v4;
  while (1)
  {
    v23 = this->strokes.__begin_;
    v24 = this->strokes.__end_;
    if (v24 == v23 || v22 >= 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) - (*((_QWORD *)v24 - 2) == *((_QWORD *)v24 - 3)))
      break;
    v25 = (float64x2_t **)&v23[24 * v22];
    v26 = *v25;
    v27 = (char *)v25[1] - (char *)*v25;
    v28 = 0.0;
    v29 = (uint64_t)v27 >> 3;
    if (v27 >= 0x19)
    {
      v30 = v29 >> 1;
      if (v29 >> 1 <= 2)
        v30 = 2;
      if (v30 >= 5)
      {
        v32 = (v30 - 1) & 0xFFFFFFFFFFFFFFFCLL;
        v31 = v32 | 1;
        v33 = v26 + 2;
        v34 = v32;
        do
        {
          v36 = v33[1];
          v35 = v33[2];
          v38 = v33[-2];
          v37 = v33[-1];
          v39 = *v33;
          v33 += 4;
          v40 = vsubq_f64(v39, v37);
          v41 = vsubq_f64(v37, v38);
          v42 = (float64x2_t)vzip1q_s64((int64x2_t)v41, (int64x2_t)v40);
          v43 = vsubq_f64(v35, v36);
          v44 = vsubq_f64(v36, v39);
          v45 = (float64x2_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v43);
          v46 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v41, v41), (int64x2_t)vmulq_f64(v40, v40)), v42, v42));
          v47 = vsqrtq_f64(vmlaq_f64((float64x2_t)vzip2q_s64((int64x2_t)vmulq_f64(v44, v44), (int64x2_t)vmulq_f64(v43, v43)), v45, v45));
          v28 = v28 + v46.f64[0] + v46.f64[1] + v47.f64[0] + v47.f64[1];
          v34 -= 4;
        }
        while (v34);
        if (v30 - 1 == v32)
          goto LABEL_39;
      }
      else
      {
        v31 = 1;
      }
      v48 = v30 - v31;
      f64 = v26[v31].f64;
      do
      {
        v28 = v28 + sqrt((f64[1] - *(f64 - 1)) * (f64[1] - *(f64 - 1)) + (*f64 - *(f64 - 2)) * (*f64 - *(f64 - 2)));
        f64 += 2;
        --v48;
      }
      while (v48);
    }
LABEL_39:
    if (v27 < 0x10)
      goto LABEL_24;
    if (v27 < 0x40)
    {
      v50 = 0;
      v51 = 0;
      v52 = 0;
      goto LABEL_74;
    }
    if ((v27 & 0x8000000000000000) != 0)
      sub_1BE61F930();
    v53 = v29 >> 1;
    v54 = (v29 >> 1) + 3;
    v55 = (double *)operator new(16 * v54);
    v50 = v55;
    v56 = 0;
    v52 = &v55[2 * v54];
    if (v53 <= 1)
      v57 = 1;
    else
      v57 = v53;
    v51 = v55;
    v58 = v55;
    do
    {
      v59 = (double *)(*((_QWORD *)this->strokes.__begin_ + 3 * v22) + 16 * v56);
      v61 = *v59;
      v60 = v59[1];
      if (!v56 || vabdd_f64(v61, *(v51 - 2)) >= 2.22044605e-16 || vabdd_f64(v60, *(v51 - 1)) >= 2.22044605e-16)
      {
        if (v51 < v52)
        {
          *v51 = v61;
          v51[1] = v60;
          v51 += 2;
          goto LABEL_48;
        }
        v62 = ((char *)v51 - (char *)v58) >> 4;
        v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 60)
          sub_1BE61F930();
        if (v52 - v58 > v63)
          v63 = v52 - v58;
        if ((unint64_t)((char *)v52 - (char *)v58) >= 0x7FFFFFFFFFFFFFF0)
          v64 = 0xFFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          if (v64 >> 60)
            sub_1BE61F100();
          v65 = (char *)operator new(16 * v64);
          v66 = (double *)&v65[16 * v62];
          *v66 = v61;
          v66[1] = v60;
          if (v51 != v58)
          {
LABEL_62:
            v67 = v66;
            do
            {
              v50 = v67 - 2;
              *((_OWORD *)v67 - 1) = *((_OWORD *)v51 - 1);
              v51 -= 2;
              v67 -= 2;
            }
            while (v51 != v58);
            v52 = (double *)&v65[16 * v64];
            v51 = v66 + 2;
            if (v58)
LABEL_65:
              operator delete(v58);
LABEL_66:
            v58 = v50;
            goto LABEL_48;
          }
        }
        else
        {
          v65 = 0;
          v66 = (double *)(16 * v62);
          *v66 = v61;
          v66[1] = v60;
          if (v51 != v58)
            goto LABEL_62;
        }
        v50 = v66;
        v52 = (double *)&v65[16 * v64];
        v51 = v66 + 2;
        if (v58)
          goto LABEL_65;
        goto LABEL_66;
      }
LABEL_48:
      ++v56;
    }
    while (v56 != v57);
    v68 = *(v51 - 2);
    if (vabdd_f64(*v58, v68) < 2.22044605e-16)
    {
      v69 = *(v51 - 1);
      if (vabdd_f64(v58[1], v69) < 2.22044605e-16)
      {
        *(v51 - 2) = v68 + 2.22044605e-16;
        *(v51 - 1) = v69 + 2.22044605e-16;
      }
    }
    v4 = v115;
LABEL_74:
    v70 = round(v28 / a3) + 1.0;
    v71 = (unint64_t)v70;
    if ((unint64_t)((char *)v51 - (char *)v50) >= 0x31)
    {
      v117 = v50;
      v118 = v51;
      v119 = (char *)v52;
      v121 = 0;
      v122 = 0;
      v72 = (char *)v51 - (char *)v50;
      __p = 0;
      if ((unint64_t)((char *)v51 - (char *)v50) <= 0x3F)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "The Catmull-Rom curve requires at least 4 points.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E77EE958, MEMORY[0x1E0DE42C0]);
      }
      v73 = v72 >> 4;
      v74 = (v72 >> 4) + 3;
      if (v72 >> 4 != -3)
      {
        v75 = (unint64_t)v70;
        sub_1BE6946E8((uint64_t)&__p, (v72 >> 4) + 3);
        v50 = v117;
        v76 = v118;
        v77 = ((char *)v118 - (char *)v117) >> 4;
        v78 = v74 >= v77;
        v79 = v74 - v77;
        if (v74 > v77)
        {
          if (v79 <= (v119 - (char *)v118) >> 4)
          {
            v86 = 2 * v79;
            bzero(v118, 16 * v79);
            v118 = &v76[v86];
            v4 = v115;
            v71 = v75;
          }
          else
          {
            if (v74 >> 60)
              sub_1BE61F930();
            v80 = (v119 - (char *)v117) >> 3;
            if (v80 <= v74)
              v80 = (v72 >> 4) + 3;
            if ((unint64_t)(v119 - (char *)v117) >= 0x7FFFFFFFFFFFFFF0)
              v80 = 0xFFFFFFFFFFFFFFFLL;
            if (v80 >> 60)
              sub_1BE61F100();
            v113 = v80;
            v81 = (char *)operator new(16 * v80);
            v82 = 16 * (v74 - v77);
            v114 = v81;
            v83 = &v81[16 * v77];
            v112 = v82;
            bzero(v83, v82);
            v84 = v83;
            if (v76 != v50)
            {
              do
              {
                *((_OWORD *)v84 - 1) = *((_OWORD *)v76 - 1);
                v84 -= 16;
                v76 -= 2;
              }
              while (v76 != v50);
              v76 = v50;
            }
            v4 = v115;
            v71 = v75;
            v117 = (double *)v84;
            v118 = (double *)&v83[v112];
            v119 = &v114[16 * v113];
            if (v76)
            {
              operator delete(v76);
              v71 = v75;
            }
          }
          v50 = v117;
          v73 = v72 >> 4;
LABEL_96:
          v87 = 2 * v73;
          *(_OWORD *)&v50[2 * v73 + 2] = *(_OWORD *)v50;
          *(_OWORD *)&v117[2 * v73 + 4] = *((_OWORD *)v117 + 1);
          v88 = v117;
          v124 = *(_OWORD *)&v117[2 * v73 - 2];
          v116 = v71;
          if (v72 >= 1)
          {
            v89 = v73;
            do
            {
              *(_OWORD *)&v117[v87] = *(_OWORD *)&v117[v87 - 2];
              v87 -= 2;
            }
            while (v89-- > 1);
            v88 = v117;
          }
          *(_OWORD *)v88 = v124;
          v91 = v117;
          v92 = pow((*v117 - v117[2]) * (*v117 - v117[2]) + 0.0 + (v117[1] - v117[3]) * (v117[1] - v117[3]), 0.25);
          v93 = (char *)__p;
          *(double *)__p = -v92;
          if (fabs(v92) < 2.22044605e-16)
          {
            v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v111, "The first and last point should not be the same.\n");
            v111->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            __cxa_throw(v111, (struct type_info *)off_1E77EE958, MEMORY[0x1E0DE42C0]);
          }
          *((_QWORD *)v93 + 1) = 0;
          if ((unint64_t)(v121 - v93) >= 0x11)
          {
            v94 = (v121 - v93) >> 3;
            if (v94 <= 3)
              v94 = 3;
            v95 = v94 - 2;
            v96 = (double *)(v93 + 16);
            v97 = (double *)v91 + 3;
            v98 = 0.0;
            do
            {
              v99 = v97[1] - *(v97 - 1);
              v100 = pow(v99 * v99 + 0.0 + (v97[2] - *v97) * (v97[2] - *v97), 0.25);
              if (fabs(v100) < 2.22044605e-16)
              {
                v109 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v109, "The control points of the Catmull-Rom curve are too close together; this will lead to ill-conditioning.\n");
                v109->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                __cxa_throw(v109, (struct type_info *)off_1E77EE958, MEMORY[0x1E0DE42C0]);
              }
              v98 = v98 + v100;
              *v96++ = v98;
              v97 += 2;
              --v95;
            }
            while (v95);
          }
          v101 = *(double *)&v93[8 * v73];
          v123 = v101;
          v102 = v116 - 1;
          if (v116 != 1)
          {
            v103 = v101 / (double)v102;
            v104 = 0.0;
            do
            {
              v105 = sub_1BE690270((uint64_t)&v117, v104);
              sub_1BE683A60((uint64_t)v4, v22, v105, v106);
              v104 = v103 + v104;
              --v102;
            }
            while (v102);
            v101 = v123;
          }
          v107 = sub_1BE690270((uint64_t)&v117, v101);
          sub_1BE683A60((uint64_t)v4, v22, v107, v108);
          if (__p)
          {
            v121 = __p;
            operator delete(__p);
          }
          v85 = v117;
          if (v117)
          {
            v118 = v117;
LABEL_23:
            operator delete(v85);
          }
          goto LABEL_24;
        }
        v71 = v75;
        v73 = v72 >> 4;
        v4 = v115;
        if (v78)
          goto LABEL_96;
      }
      v118 = &v50[2 * v74];
      goto LABEL_96;
    }
    sub_1BE6873CC((uint64_t)this, (uint64_t)v4, v22, 0, v71, a3);
    if (v50)
    {
      v85 = v50;
      goto LABEL_23;
    }
LABEL_24:
    ++v22;
  }
}

void sub_1BE6888D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a16)
  {
    operator delete(a16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE688960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1BE6903F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void CHDrawingStrokes::getBoundingBoxForStroke(CHDrawingStrokes *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *begin;
  char *v9;
  void *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;

  v6 = a2 >> 6;
  v7 = 1 << a2;
  if ((this->strokeBoundsValidity.__begin_[a2 >> 6] & (1 << a2)) == 0)
  {
    CHDrawingStrokes::computeBoundingBoxForStroke(this, a2, (double **)&v17);
    begin = this->strokeBounds.__begin_;
    v9 = (char *)this->strokeBounds.__begin_ + 24 * a2;
    v10 = *(void **)v9;
    if (*(_QWORD *)v9)
    {
      begin[3 * a2 + 1] = v10;
      operator delete(v10);
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
    }
    *(_OWORD *)v9 = v17;
    begin[3 * a2 + 2] = v18;
    this->strokeBoundsValidity.__begin_[v6] |= v7;
  }
  v11 = (char *)this->strokeBounds.__begin_ + 24 * a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v13 = *(_BYTE **)v11;
  v12 = (_BYTE *)*((_QWORD *)v11 + 1);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_1BE61F930();
    v15 = (char *)operator new(v12 - v13);
    *a3 = v15;
    v16 = &v15[8 * (v14 >> 3)];
    a3[2] = v16;
    memcpy(v15, v13, v14);
    a3[1] = v16;
  }
}

void sub_1BE688A94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CHDrawingStrokes::computeBoundingBoxForStroke(CHDrawingStrokes *this@<X0>, uint64_t a2@<X1>, double **a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  double *v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = (uint64_t *)((char *)this->strokes.__begin_ + 24 * a2);
  v5 = *v4;
  v6 = v4[1] - *v4;
  if ((unint64_t)v6 >= 0x10)
  {
    v11 = (unint64_t)(v6 >> 3) >> 1;
    if (v11 <= 1)
      v11 = 1;
    v12 = (double *)(v5 + 8);
    v9 = -1.79769313e308;
    v10 = 1.79769313e308;
    v7 = -1.79769313e308;
    v8 = 1.79769313e308;
    do
    {
      v13 = *(v12 - 1);
      v14 = *v12;
      if (v13 < v10)
        v10 = *(v12 - 1);
      if (v13 > v9)
        v9 = *(v12 - 1);
      if (v14 < v8)
        v8 = *v12;
      if (v14 > v7)
        v7 = *v12;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  else
  {
    v7 = -1.79769313e308;
    v8 = 1.79769313e308;
    v9 = -1.79769313e308;
    v10 = 1.79769313e308;
  }
  sub_1BE6946E8((uint64_t)a3, 4uLL);
  v15 = *a3;
  if (vabdd_f64(v7, v8) >= 0.000001)
    v16 = v7;
  else
    v16 = v7 + 1.0;
  v17 = v9 + 1.0;
  *v15 = v10;
  v15[1] = v8;
  if (vabdd_f64(v9, v10) >= 0.000001)
    v17 = v9;
  v15[2] = v17;
  v15[3] = v16;
}

void sub_1BE688BBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CHDrawingStrokes::readCharacter(CHDrawingStrokes *this, const char *__filename)
{
  FILE *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  char v9;
  uint8_t buf[4];
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (__filename && *__filename)
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v4 = fopen(__filename, "rt");
    if (!v4)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v5 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v11 = __filename;
        _os_log_impl(&dword_1BE607000, v5, OS_LOG_TYPE_FAULT, "Error: readCharacter: Wrong filename :%s:\n", buf, 0xCu);
      }

    }
    sub_1BE683638((uint64_t *)this);
    do
    {
      buf[0] = 0;
      while (fgets((char *)buf, 1024, v4))
      {
        if (sscanf((const char *)buf, "%d %d %d", &v8, (char *)&v7 + 4, &v7) < 1)
          break;
        sub_1BE688E58(this, (double)v8, (double)SHIDWORD(v7));
      }
      if (*((_QWORD *)this->strokes.__end_ - 2) != *((_QWORD *)this->strokes.__end_ - 3))
      {
        ++this->currentStrokeIndex;
        sub_1BE68A1A4(this);
      }
    }
    while (sscanf((const char *)buf, " %c", &v9) > 0);
    fclose(v4);
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v6 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v6, OS_LOG_TYPE_ERROR, "filename is empty", buf, 2u);
    }

  }
}

void sub_1BE688E58(_QWORD *a1, double a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  double *v9;
  double *v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  double *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  double *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  double *v33;
  unint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  double *v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  _OWORD *v50;
  double *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  v5 = a1;
  v6 = a1[15];
  v7 = a1[12] + 24 * v6;
  v8 = (uint64_t *)(v7 + 8);
  v9 = *(double **)(v7 + 8);
  v10 = v9;
  v11 = *(_QWORD *)(v7 + 16);
  if ((unint64_t)v9 < v11)
  {
    *v9 = a2;
    v12 = (uint64_t)(v9 + 1);
    goto LABEL_23;
  }
  v13 = *(double **)v7;
  v14 = (uint64_t)v9 - *(_QWORD *)v7;
  v15 = v14 >> 3;
  v16 = (v14 >> 3) + 1;
  if (v16 >> 61)
    goto LABEL_45;
  v17 = v11 - (_QWORD)v13;
  if (v17 >> 2 > v16)
    v16 = v17 >> 2;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
    v18 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
  {
    if (v18 >> 61)
      goto LABEL_46;
    v19 = operator new(8 * v18);
    v20 = (double *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = a2;
    v12 = (uint64_t)(v20 + 1);
    v22 = (char *)v9 - (char *)v13;
    if (v9 == v13)
      goto LABEL_20;
    goto LABEL_14;
  }
  v19 = 0;
  v20 = (double *)(8 * v15);
  v21 = 0;
  *(double *)(8 * v15) = a2;
  v12 = 8 * v15 + 8;
  v22 = (char *)v9 - (char *)v13;
  if (v9 != v13)
  {
LABEL_14:
    v23 = v22 - 8;
    if (v23 < 0x58)
      goto LABEL_49;
    if ((unint64_t)((char *)v9 - v19 - v14) < 0x20)
      goto LABEL_49;
    v24 = (v23 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v10 = &v9[v25 / 0xFFFFFFFFFFFFFFF8];
    v20 = (double *)((char *)v20 - v25);
    v26 = &v19[8 * v15 - 16];
    v27 = v9 - 2;
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 4;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v30 = *((_QWORD *)v10-- - 1);
        *((_QWORD *)v20-- - 1) = v30;
      }
      while (v10 != v13);
    }
  }
LABEL_20:
  *(_QWORD *)v7 = v20;
  *v8 = v12;
  *(_QWORD *)(v7 + 16) = v21;
  if (v13)
  {
    operator delete(v13);
    v5 = a1;
    v6 = a1[15];
  }
  else
  {
    v5 = a1;
  }
LABEL_23:
  *v8 = v12;
  v31 = v5[12] + 24 * v6;
  v32 = (uint64_t *)(v31 + 8);
  v33 = *(double **)(v31 + 8);
  v34 = *(_QWORD *)(v31 + 16);
  if ((unint64_t)v33 < v34)
  {
    *v33 = a3;
    v35 = (uint64_t)(v33 + 1);
    goto LABEL_44;
  }
  v36 = *(double **)v31;
  v37 = (uint64_t)v33 - *(_QWORD *)v31;
  v38 = v37 >> 3;
  v39 = (v37 >> 3) + 1;
  if (v39 >> 61)
LABEL_45:
    sub_1BE61F930();
  v40 = v34 - (_QWORD)v36;
  if (v40 >> 2 > v39)
    v39 = v40 >> 2;
  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
    v41 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v41 = v39;
  if (!v41)
  {
    v42 = 0;
    v43 = (double *)(8 * v38);
    v44 = 0;
    *(double *)(8 * v38) = a3;
    v35 = 8 * v38 + 8;
    v45 = (char *)v33 - (char *)v36;
    if (v33 == v36)
      goto LABEL_42;
LABEL_36:
    v46 = v45 - 8;
    if (v46 < 0x58)
      goto LABEL_50;
    if ((unint64_t)((char *)v33 - v42 - v37) < 0x20)
      goto LABEL_50;
    v47 = (v46 >> 3) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v49 = &v33[v48 / 0xFFFFFFFFFFFFFFF8];
    v43 = (double *)((char *)v43 - v48);
    v50 = &v42[8 * v38 - 16];
    v51 = v33 - 2;
    v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 4;
      v52 -= 4;
    }
    while (v52);
    v33 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        v54 = *((_QWORD *)v33-- - 1);
        *((_QWORD *)v43-- - 1) = v54;
      }
      while (v33 != v36);
    }
    goto LABEL_42;
  }
  if (v41 >> 61)
LABEL_46:
    sub_1BE61F100();
  v42 = operator new(8 * v41);
  v43 = (double *)&v42[8 * v38];
  v44 = &v42[8 * v41];
  *v43 = a3;
  v35 = (uint64_t)(v43 + 1);
  v45 = (char *)v33 - (char *)v36;
  if (v33 != v36)
    goto LABEL_36;
LABEL_42:
  *(_QWORD *)v31 = v43;
  *v32 = v35;
  *(_QWORD *)(v31 + 16) = v44;
  if (v36)
  {
    operator delete(v36);
    v6 = v5[15];
  }
LABEL_44:
  *v32 = v35;
  *(_QWORD *)(v5[3] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v6);
}

void sub_1BE689388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE6895E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE68998C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE68A08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{

  sub_1BE690148((void **)&STACK[0x400]);
  _Unwind_Resume(a1);
}

void sub_1BE68A1A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v4 = a1[12];
  v3 = a1[13];
  v2 = (uint64_t)(a1 + 12);
  if (v3 != v4 && *(_QWORD *)(v3 - 16) != *(_QWORD *)(v3 - 24))
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
    v6 = a1[15] + 1;
    if (v6 <= v5)
    {
      if (v6 < v5)
      {
        v7 = v4 + 24 * v6;
        if (v3 != v7)
        {
          v8 = v3;
          do
          {
            v10 = *(void **)(v8 - 24);
            v8 -= 24;
            v9 = v10;
            if (v10)
            {
              *(_QWORD *)(v3 - 16) = v9;
              operator delete(v9);
            }
            v3 = v8;
          }
          while (v8 != v7);
        }
        a1[13] = v7;
      }
    }
    else
    {
      sub_1BE6942B0(v2, v6 - v5);
    }
    v11 = a1[15] + 1;
    v12 = a1[1];
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 3);
    if (v11 <= v13)
    {
      if (v11 < v13)
      {
        v14 = *a1 + 24 * v11;
        if (v12 != v14)
        {
          v15 = a1[1];
          do
          {
            v17 = *(void **)(v15 - 24);
            v15 -= 24;
            v16 = v17;
            if (v17)
            {
              *(_QWORD *)(v12 - 16) = v16;
              operator delete(v16);
            }
            v12 = v15;
          }
          while (v15 != v14);
        }
        a1[1] = v14;
      }
    }
    else
    {
      sub_1BE6942B0((uint64_t)a1, v11 - v13);
    }
    sub_1BE6837E8((uint64_t)(a1 + 3), a1[15] + 1, 0);
  }
}

void sub_1BE68A2DC(_QWORD *a1, double a2)
{
  unint64_t v4;
  double *v5;
  double *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  double *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  double *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (double *)a1[7];
  v4 = a1[8];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *v5 = a2;
    v7 = (uint64_t)(v5 + 1);
    goto LABEL_22;
  }
  v8 = (double *)a1[6];
  v9 = v5 - v8;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    sub_1BE61F930();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      sub_1BE61F100();
    v13 = operator new(8 * v12);
    v14 = (double *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = (char *)v5 - (char *)v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (double *)(8 * v9);
  v15 = 0;
  *(double *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = (char *)v5 - (char *)v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)((char *)v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[v19 / 0xFFFFFFFFFFFFFFF8];
    v14 = (double *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 2;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6-- - 1);
        *((_QWORD *)v14-- - 1) = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[6] = v14;
  a1[7] = v7;
  a1[8] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[7] = v7;
}

void sub_1BE68A454(_QWORD *a1, double a2)
{
  unint64_t v4;
  double *v5;
  double *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  double *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  double *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (double *)a1[10];
  v4 = a1[11];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *v5 = a2;
    v7 = (uint64_t)(v5 + 1);
    goto LABEL_22;
  }
  v8 = (double *)a1[9];
  v9 = v5 - v8;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    sub_1BE61F930();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      sub_1BE61F100();
    v13 = operator new(8 * v12);
    v14 = (double *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = (char *)v5 - (char *)v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (double *)(8 * v9);
  v15 = 0;
  *(double *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = (char *)v5 - (char *)v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)((char *)v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[v19 / 0xFFFFFFFFFFFFFFF8];
    v14 = (double *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 2;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6-- - 1);
        *((_QWORD *)v14-- - 1) = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[9] = v14;
  a1[10] = v7;
  a1[11] = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  a1[10] = v7;
}

void sub_1BE68A82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1BE68A9A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68A9B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE68A9CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (a1 != a2)
  {
    sub_1BE690A80(a1, *(char ***)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    v4 = *(_QWORD *)(a2 + 32);
    if (v4)
    {
      v5 = *(void **)(a1 + 24);
      if (v4 > *(_QWORD *)(a1 + 40) << 6)
      {
        if (v5)
        {
          operator delete(v5);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          v4 = *(_QWORD *)(a2 + 32);
        }
        if ((v4 & 0x8000000000000000) != 0)
          sub_1BE61F930();
        v6 = ((v4 - 1) >> 6) + 1;
        v5 = operator new(8 * v6);
        *(_QWORD *)(a1 + 24) = v5;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = v6;
        v4 = *(_QWORD *)(a2 + 32);
      }
      memmove(v5, *(const void **)(a2 + 24), (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v4 = *(_QWORD *)(a2 + 32);
    }
    *(_QWORD *)(a1 + 32) = v4;
    sub_1BE62037C((_QWORD *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
    sub_1BE62037C((_QWORD *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
    sub_1BE690A80(a1 + 96, *(char ***)(a2 + 96), *(_QWORD *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  }
  v7 = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v7;
  v8 = *(_QWORD *)(a1 + 384);
  if (v8)
    MEMORY[0x1C3B812C8](v8, 0x1000C8000313F17);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  v9 = (void *)operator new[]();
  *(_QWORD *)(a1 + 384) = v9;
  memcpy(v9, *(const void **)(a2 + 384), 8 * (*(_DWORD *)(a1 + 396) * *(_DWORD *)(a1 + 392)));
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  if (a1 != a2)
    sub_1BE66E294((_QWORD *)(a1 + 520), *(char **)(a2 + 520), *(char **)(a2 + 528), (uint64_t)(*(_QWORD *)(a2 + 528) - *(_QWORD *)(a2 + 520)) >> 2);
  return a1;
}

void sub_1BE68AC2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68AC3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68AC50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68AC64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68AC78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68AD44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68AD54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68AD64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68AD74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68B1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v17 = a14;
    if (!a14)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    v17 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v17);

  _Unwind_Resume(a1);
}

void sub_1BE68B4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1BE68B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE68B5DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68B5EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE68B638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE68B8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);
  sub_1BE690148((void **)va);
  sub_1BE690148((void **)&STACK[0x380]);

  _Unwind_Resume(a1);
}

void sub_1BE68BAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_1BE68BB0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t sub_1BE68BB1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  double v13;
  double v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(*(void **)(a1 + 32), v9, (uint64_t)a2, i, v10, v11);
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v13
                                                                  + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                              + 24);
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v14
                                                                  + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                              + 24);
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      result = objc_msgSend_pointCountForStrokeIndex_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17, v18);
    }
  }
  return result;
}

void sub_1BE68BC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1BE68BCB0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1BE68BCC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGRect v11;

  objc_msgSend_boundsForStrokeIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  v11.origin.x = v7;
  v11.origin.y = v8;
  v11.size.width = v9;
  v11.size.height = v10;
  *(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = CGRectUnion(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 48), v11);
}

void sub_1BE68C0C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C0D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C0E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C1D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C1E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C3F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C56C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68C580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68C754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1BE68C9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);
  sub_1BE690148((void **)va);
  sub_1BE690148((void **)&STACK[0x300]);

  _Unwind_Resume(a1);
}

void sub_1BE68CD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;

  if (v14)
    operator delete(v14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1BE68D244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v16;

  if (__p)
  {
    operator delete(__p);
    v16 = a14;
    if (!a14)
      goto LABEL_7;
  }
  else
  {
    v16 = a14;
    if (!a14)
LABEL_7:
      _Unwind_Resume(a1);
  }
  operator delete(v16);
  goto LABEL_7;
}

void sub_1BE68D40C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68D41C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68D42C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68D524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  sub_1BE690148(&a9);
  sub_1BE690148((void **)&STACK[0x280]);
  sub_1BE690148((void **)&STACK[0x500]);

  _Unwind_Resume(a1);
}

void sub_1BE68D654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  sub_1BE690148(&a9);
  sub_1BE690148((void **)&STACK[0x280]);
  sub_1BE690148((void **)&STACK[0x500]);

  _Unwind_Resume(a1);
}

void sub_1BE68D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  sub_1BE690148(&a9);
  sub_1BE690148((void **)&STACK[0x280]);
  sub_1BE690148((void **)&STACK[0x500]);

  _Unwind_Resume(a1);
}

void sub_1BE68D88C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68D89C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68D960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68D970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68D980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68DC0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE68DD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE68DDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE68DDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE68DDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE68DDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE68DE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE68DE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE68DE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE68DE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE68DE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE68DF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE68DF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double sub_1BE68DF44(void *a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  double v36;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double MaxX;
  uint64_t v58;
  double v59;
  double v60;
  double MinY;
  double MinX;
  CGFloat rect;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;

  v5 = a2;
  v11 = a3;
  if (a1)
  {
    v12 = objc_msgSend_strokeIndex(v5, v6, v7, v8, v9, v10);
    v18 = objc_msgSend_pointIndex(v5, v13, v14, v15, v16, v17);
    v24 = objc_msgSend_strokeIndex(v11, v19, v20, v21, v22, v23);
    v30 = objc_msgSend_pointIndex(v11, v25, v26, v27, v28, v29);
    if (v12 <= v24)
    {
      v38 = v30;
      v39 = -3.4028e38;
      v35 = 3.4028e38;
      v40 = 3.4028e38;
      v41 = -3.4028e38;
      v42 = v12;
      do
      {
        if (v42 == v12)
          v44 = v18;
        else
          v44 = 0;
        v45 = v38;
        if (v42 != v24)
          v45 = objc_msgSend_pointCountForStrokeIndex_(a1, v31, v42, v32, v33, v34) - 1;
        objc_msgSend_boundsForStrokeIndex_(a1, v31, v42, v32, v33, v34);
        rect = v46;
        v48 = v47;
        v50 = v49;
        v52 = v51;
        if (objc_msgSend_pointCountForStrokeIndex_(a1, v53, v42, v54, v55, v56) == v45 - v44 + 1)
        {
          v64.origin.x = v48;
          v64.origin.y = v50;
          v64.size.width = v52;
          v64.size.height = rect;
          MinX = CGRectGetMinX(v64);
          v65.origin.x = v48;
          v65.origin.y = v50;
          v65.size.width = v52;
          v65.size.height = rect;
          MinY = CGRectGetMinY(v65);
          v66.origin.x = v48;
          v66.origin.y = v50;
          v66.size.width = v52;
          v66.size.height = rect;
          MaxX = CGRectGetMaxX(v66);
          v67.origin.x = v48;
          v67.origin.y = v50;
          v67.size.width = v52;
          v67.size.height = rect;
          v35 = fmin(v35, MinX);
          v40 = fmin(v40, MinY);
          v39 = fmax(v39, MaxX);
          v41 = fmax(v41, CGRectGetMaxY(v67));
        }
        else
        {
          v68.origin.x = v48;
          v68.origin.y = v50;
          v68.size.width = v52;
          v68.size.height = rect;
          if (CGRectGetMinX(v68) > v35)
            goto LABEL_19;
          v69.origin.x = v48;
          v69.origin.y = v50;
          v69.size.width = v52;
          v69.size.height = rect;
          if (CGRectGetMaxX(v69) > v39)
            goto LABEL_19;
          v70.origin.x = v48;
          v70.origin.y = v50;
          v70.size.width = v52;
          v70.size.height = rect;
          if (CGRectGetMinY(v70) < v40
            || (v71.origin.x = v48,
                v71.origin.y = v50,
                v71.size.width = v52,
                v71.size.height = rect,
                CGRectGetMaxY(v71) > v41))
          {
LABEL_19:
            if (v45 >= v44)
            {
              v58 = v45 + 1;
              do
              {
                objc_msgSend_pointForStrokeIndex_pointIndex_(a1, v31, v42, v44, v33, v34);
                v35 = fmin(v35, v59);
                v40 = fmin(v40, v60);
                v39 = fmax(v39, v59);
                v41 = fmax(v41, v60);
                ++v44;
              }
              while (v58 != v44);
            }
          }
        }
      }
      while (v42++ != v24);
    }
    else
    {
      v35 = 3.4028e38;
    }
    v36 = v35;
  }
  else
  {
    v36 = 0.0;
  }

  return v36;
}

void sub_1BE68E25C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68E270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68E284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68E298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68E2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68E2C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68E2D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68E2E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68E690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE68E768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  sub_1BE690148(&a9);

  _Unwind_Resume(a1);
}

void sub_1BE68E8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE68E950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE68E970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE68E990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE68E9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE68E9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE68E9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE68E9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE68ECC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE68EEE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE68EF14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3, a4, a5, a6);
}

void sub_1BE68F084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE68F120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68F130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68F1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68F1EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68F324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68F334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE68F37C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68F390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE68F48C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1BE68F4CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE68F560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

BOOL sub_1BE68F578(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;

  objc_msgSend_segmentID(a2, (const char *)a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_unsignedIntegerValue(v7, v8, v9, v10, v11, v12);
  v19 = v13 == objc_msgSend_unsignedIntegerValue(*(void **)(a1 + 32), v14, v15, v16, v17, v18);

  return v19;
}

void sub_1BE68F5CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68F6CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE68F7A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE68F7D8(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 256) = &off_1E77F07D0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  sub_1BE683638((uint64_t *)a1);
  return a1;
}

void sub_1BE68F840(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v6 = *(void **)(v1 + 520);
  if (v6)
  {
    *(_QWORD *)(v1 + 528) = v6;
    operator delete(v6);
    *(_QWORD *)(v1 + 256) = v4;
    v7 = *(_QWORD *)(v1 + 384);
    if (!v7)
    {
LABEL_3:
      sub_1BE63CEBC(v2);
      v8 = *(void **)(v1 + 72);
      if (!v8)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    *(_QWORD *)(v1 + 256) = v4;
    v7 = *(_QWORD *)(v1 + 384);
    if (!v7)
      goto LABEL_3;
  }
  MEMORY[0x1C3B812C8](v7, 0x1000C8000313F17);
  *v3 = 0;
  sub_1BE63CEBC(v2);
  v8 = *(void **)(v1 + 72);
  if (!v8)
  {
LABEL_4:
    v9 = *(void **)(v1 + 48);
    if (!v9)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_QWORD *)(v1 + 80) = v8;
  operator delete(v8);
  v9 = *(void **)(v1 + 48);
  if (!v9)
  {
LABEL_5:
    v10 = *(void **)(v1 + 24);
    if (!v10)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v1 + 56) = v9;
  operator delete(v9);
  v10 = *(void **)(v1 + 24);
  if (!v10)
  {
LABEL_6:
    sub_1BE63CEBC((void **)v1);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(v10);
  sub_1BE63CEBC((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE68F8F8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E77F07D0;
  v2 = a1[16];
  if (v2)
  {
    MEMORY[0x1C3B812C8](v2, 0x1000C8000313F17);
    a1[16] = 0;
  }
  return a1;
}

void sub_1BE68F944(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E77F07D0;
  v1 = a1[16];
  if (v1)
    MEMORY[0x1C3B812C8](v1, 0x1000C8000313F17);
  JUMPOUT(0x1C3B812E0);
}

uint64_t sub_1BE68F990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v24;
  uint64_t v25;
  double v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v34;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  int i;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _OWORD *v49;

  v6 = *(_DWORD *)(a1 + 140);
  v7 = *(_DWORD *)(a2 + 136);
  *(_QWORD *)a3 = &off_1E77F07D0;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = *(unsigned int *)(a2 + 136);
    if ((_DWORD)v10)
    {
      v11 = *(unsigned int *)(a1 + 136);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = *(_QWORD *)(a2 + 128);
        v15 = *(_QWORD *)(a1 + 128);
        v16 = v11 - 1;
        v17 = v11 & 0xFFFFFFFC;
        while (1)
        {
          v18 = 0;
          v19 = 8 * (v11 * v13);
          v20 = v15 + v19;
          v21 = v15 + 8 * v11 + v19;
          v24 = __CFADD__(v11 * v13, v16) || (unint64_t)(v11 - 1) >> 32 != 0 || (_DWORD)v10 != 1;
          do
          {
            v25 = (v13 * v7 + v18);
            *(_QWORD *)(result + 8 * v25) = 0;
            v26 = 0.0;
            if (v11 < 0x14 || (__CFADD__((_DWORD)v18, v16) ? (v27 = 1) : (v27 = v24), (v27 & 1) != 0))
            {
              v28 = 0;
LABEL_21:
              v29 = v18 + v10 * v28;
              do
              {
                v26 = v26 + *(double *)(v15 + 8 * (v12 + v28)) * *(double *)(v14 + 8 * v29);
                *(double *)(result + 8 * v25) = v26;
                ++v28;
                v29 += v10;
              }
              while (v11 != v28);
              goto LABEL_23;
            }
            v28 = 0;
            v30 = 8 * (v13 * v7 + v18);
            v31 = result + v30;
            v32 = result + 8 + v30;
            v34 = result + v30 < (unint64_t)(v14 + 8 * v11 + 8 * v18) && v14 + 8 * v18 < v32;
            if (v20 < v32 && v31 < v21)
              goto LABEL_21;
            if (v34)
              goto LABEL_21;
            v36 = 0;
            do
            {
              v37 = (float64x2_t *)(v15 + 8 * (v12 + v36));
              v38 = *v37;
              v39 = v37[1];
              v40 = (float64x2_t *)(v14 + 8 * (v18 + v36));
              v41 = vmulq_f64(v38, *v40);
              v42 = vmulq_f64(v39, v40[1]);
              v26 = v26 + v41.f64[0] + v41.f64[1] + v42.f64[0] + v42.f64[1];
              v36 += 4;
            }
            while (v17 != v36);
            *(double *)(result + 8 * v25) = v26;
            v28 = v11 & 0xFFFFFFFC;
            if (v17 != v11)
              goto LABEL_21;
LABEL_23:
            ++v18;
          }
          while (v18 != v10);
          ++v13;
          v12 += v11;
          if (v13 == v9)
            return result;
        }
      }
      for (i = 0; i != v9; ++i)
      {
        if (v10 >= 8)
        {
          v44 = 0;
          if (!__CFADD__(v7 * i, v10 - 1) && !((unint64_t)(v10 - 1) >> 32))
          {
            v47 = v11;
            v48 = v10 & 0xFFFFFFFC;
            do
            {
              v49 = (_OWORD *)(result + 8 * v47);
              *v49 = 0uLL;
              v49[1] = 0uLL;
              v47 += 4;
              v48 -= 4;
            }
            while (v48);
            v44 = v10 & 0xFFFFFFFC;
            if (v44 == v10)
              goto LABEL_42;
          }
        }
        else
        {
          v44 = 0;
        }
        v45 = v10 - v44;
        v46 = v11 + v44;
        do
        {
          *(_QWORD *)(result + 8 * v46++) = 0;
          --v45;
        }
        while (v45);
LABEL_42:
        LODWORD(v11) = v11 + v7;
      }
    }
  }
  return result;
}

uint64_t sub_1BE68FC14@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  double v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &off_1E77F07D0;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = *(unsigned int *)(a1 + 136);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = *a2;
      v15 = *(_QWORD *)(a1 + 128);
      v16 = v10 - 1;
      do
      {
        if (v10 >= 0xC)
        {
          v17 = 0;
          v19 = v10 * v13;
          v20 = __CFADD__(v7 * v13, v16);
          v21 = __CFADD__(v19, v16);
          if (!v20
            && !v21
            && !((unint64_t)(v10 - 1) >> 32)
            && result + 8 * (v7 * v13) - (v15 + 8 * (unint64_t)v19) >= 0x20)
          {
            v22 = v11;
            v23 = v12;
            v24 = v10 & 0xFFFFFFFC;
            do
            {
              v25 = (float64x2_t *)(v15 + 8 * v23);
              v26 = *v25;
              v27 = v25[1];
              v28 = (float64x2_t *)(result + 8 * v22);
              *v28 = vmulq_n_f64(v26, v14);
              v28[1] = vmulq_n_f64(v27, v14);
              v23 += 4;
              v22 += 4;
              v24 -= 4;
            }
            while (v24);
            v17 = v10 & 0xFFFFFFFC;
            if (v17 == v10)
              goto LABEL_4;
          }
        }
        else
        {
          v17 = 0;
        }
        v18 = v10 - v17;
        do
        {
          *(double *)(result + 8 * (v11 + v17)) = v14
                                                                * *(double *)(v15 + 8 * (v12 + v17));
          LODWORD(v17) = v17 + 1;
          --v18;
        }
        while (v18);
LABEL_4:
        ++v13;
        v12 += v10;
        v11 += v7;
      }
      while (v13 != v9);
    }
  }
  return result;
}

uint64_t sub_1BE68FD70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;

  v7 = *(_DWORD *)(a1 + 136);
  v6 = *(_DWORD *)(a1 + 140);
  *(_QWORD *)a3 = &off_1E77F07D0;
  *(_DWORD *)(a3 + 136) = v7;
  *(_DWORD *)(a3 + 140) = v6;
  result = operator new[]();
  *(_QWORD *)(a3 + 128) = result;
  v9 = *(_DWORD *)(a1 + 140);
  if (v9)
  {
    v10 = *(unsigned int *)(a1 + 136);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = *(_QWORD *)(a2 + 128);
      v16 = *(_DWORD *)(a2 + 136);
      v17 = *(_QWORD *)(a1 + 128);
      v18 = v10 - 1;
      do
      {
        if (v10 >= 0x10)
        {
          v19 = 0;
          v21 = v16 * v14;
          v22 = __CFADD__(v7 * v14, v18);
          v23 = __CFADD__(v10 * v14, v18);
          if (!__CFADD__(v21, v18) && !v22 && !v23 && !((unint64_t)(v10 - 1) >> 32))
          {
            v19 = 0;
            v24 = result + 8 * (v7 * v14);
            if (v24 - (v17 + 8 * (unint64_t)(v10 * v14)) >= 0x20
              && v24 - (v15 + 8 * (unint64_t)v21) >= 0x20)
            {
              v25 = v11;
              v26 = v12;
              v27 = v13;
              v28 = v10 & 0xFFFFFFFC;
              do
              {
                v29 = (float64x2_t *)(v17 + 8 * v27);
                v30 = *v29;
                v31 = v29[1];
                v32 = (float64x2_t *)(v15 + 8 * v26);
                v33 = *v32;
                v34 = v32[1];
                v35 = (float64x2_t *)(result + 8 * v25);
                *v35 = vaddq_f64(v30, v33);
                v35[1] = vaddq_f64(v31, v34);
                v27 += 4;
                v26 += 4;
                v25 += 4;
                v28 -= 4;
              }
              while (v28);
              v19 = v10 & 0xFFFFFFFC;
              if (v19 == v10)
                goto LABEL_8;
            }
          }
        }
        else
        {
          v19 = 0;
        }
        v20 = v10 - v19;
        do
        {
          *(double *)(result + 8 * (v11 + v19)) = *(double *)(v17 + 8 * (v13 + v19))
                                                                + *(double *)(v15 + 8 * (v12 + v19));
          LODWORD(v19) = v19 + 1;
          --v20;
        }
        while (v20);
LABEL_8:
        ++v14;
        v13 += v10;
        v12 += v16;
        v11 += v7;
      }
      while (v14 != v9);
    }
  }
  return result;
}

uint64_t sub_1BE68FF10(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;

  v2 = *(_DWORD *)(result + 140);
  if (v2)
  {
    v3 = *(unsigned int *)(result + 136);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 128);
      v8 = *(_DWORD *)(a2 + 136);
      v9 = v3 - 1;
      v10 = *(_QWORD *)(result + 128);
      do
      {
        if (v3 >= 0xC)
        {
          v11 = 0;
          v13 = __CFADD__(v3 * v6, v9);
          v14 = __CFADD__(v8 * v6, v9);
          if (v13 || v14 || (unint64_t)(v3 - 1) >> 32)
            goto LABEL_6;
          v15 = 8 * (v3 * v6);
          v16 = 8 * (v8 * v6);
          if (v10 + v15 >= (unint64_t)(v7 + 8 * v3 + v16) || v7 + v16 >= (unint64_t)(v10 + 8 * v3 + v15))
          {
            v17 = v4;
            v18 = v5;
            v19 = v3 & 0xFFFFFFFC;
            do
            {
              v20 = (float64x2_t *)(v7 + 8 * v18);
              v21 = *v20;
              v22 = v20[1];
              v23 = (float64x2_t *)(v10 + 8 * v17);
              v24 = vaddq_f64(v22, v23[1]);
              *v23 = vaddq_f64(v21, *v23);
              v23[1] = v24;
              v18 += 4;
              v17 += 4;
              v19 -= 4;
            }
            while (v19);
            v11 = v3 & 0xFFFFFFFC;
            if (v11 == v3)
              goto LABEL_8;
            goto LABEL_6;
          }
        }
        v11 = 0;
LABEL_6:
        v12 = v3 - v11;
        do
        {
          *(double *)(v10 + 8 * (v4 + v11)) = *(double *)(v7 + 8 * (v5 + v11))
                                                            + *(double *)(v10 + 8 * (v4 + v11));
          LODWORD(v11) = v11 + 1;
          --v12;
        }
        while (v12);
LABEL_8:
        ++v6;
        v5 += v8;
        v4 += v3;
      }
      while (v6 != v2);
    }
  }
  return result;
}

uint64_t sub_1BE690040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  void *v6;

  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    MEMORY[0x1C3B812C8](v4, 0x1000C8000313F17);
  v5 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = v5;
  v6 = (void *)operator new[]();
  *(_QWORD *)(a1 + 128) = v6;
  memcpy(v6, *(const void **)(a2 + 128), 8 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

uint64_t sub_1BE6900BC(uint64_t a1, const void *a2)
{
  memcpy(*(void **)(a1 + 128), a2, 8 * (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 136)));
  return a1;
}

BOOL sub_1BE6900F0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 136);
  if (v2 == *(_DWORD *)(a2 + 136) && (v3 = *(_DWORD *)(a1 + 140), v3 == *(_DWORD *)(a2 + 140)))
    return memcmp(*(const void **)(a1 + 128), *(const void **)(a2 + 128), 8 * (v3 * v2)) == 0;
  else
    return 0;
}

void **sub_1BE690148(void **a1)
{
  void *v2;
  void *v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;

  v2 = a1[65];
  if (v2)
  {
    a1[66] = v2;
    operator delete(v2);
  }
  a1[32] = &off_1E77F07D0;
  v3 = a1[48];
  if (v3)
  {
    MEMORY[0x1C3B812C8](v3, 0x1000C8000313F17);
    a1[48] = 0;
  }
  v4 = (char *)a1[12];
  if (v4)
  {
    v5 = (char *)a1[13];
    v6 = a1[12];
    if (v5 != v4)
    {
      v7 = (char *)a1[13];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = a1[12];
    }
    a1[13] = v4;
    operator delete(v6);
  }
  v10 = a1[9];
  if (v10)
  {
    a1[10] = v10;
    operator delete(v10);
  }
  v11 = a1[6];
  if (v11)
  {
    a1[7] = v11;
    operator delete(v11);
  }
  v12 = a1[3];
  if (v12)
    operator delete(v12);
  v13 = (char *)*a1;
  if (*a1)
  {
    v14 = (char *)a1[1];
    v15 = *a1;
    if (v14 != v13)
    {
      v16 = (char *)a1[1];
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v14 - 2) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = *a1;
    }
    a1[1] = v13;
    operator delete(v15);
  }
  return a1;
}

double sub_1BE690270(uint64_t a1, double a2)
{
  double *v2;
  double *v3;
  unint64_t v4;
  unint64_t v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double result;
  std::logic_error *exception;

  if (a2 < 0.0 || *(double *)(a1 + 48) < a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1BE690430(exception);
    __cxa_throw(exception, (struct type_info *)off_1E77EE958, MEMORY[0x1E0DE42C0]);
  }
  v2 = *(double **)(a1 + 24);
  v3 = v2;
  if (*(double **)(a1 + 32) != v2)
  {
    v4 = (uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v2) >> 3;
    v3 = *(double **)(a1 + 24);
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[v4 >> 1];
      v8 = *v6;
      v7 = v6 + 1;
      v4 += ~(v4 >> 1);
      if (v8 > a2)
        v4 = v5;
      else
        v3 = v7;
    }
    while (v4);
  }
  v9 = *(v3 - 1);
  v10 = (char *)(v3 - 1) - (char *)v2;
  v11 = (v10 >> 3) + 1;
  v12 = v2[v11];
  v13 = (v10 >> 3) - 1;
  v14 = v2[v13];
  v15 = v9 - a2;
  if ((v10 >> 3) + 2 == (uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v2) >> 3)
    v16 = 0;
  else
    v16 = (v10 >> 3) + 2;
  v17 = v2[v16];
  v18 = 1.0 / (v9 - v14);
  v19 = -(v14 - a2);
  v20 = 1.0 / (v12 - v9);
  v21 = v12 - a2;
  v22 = -v15;
  v23 = 1.0 / (v12 - v14);
  v24 = v17 - a2;
  v25 = 1.0 / (v17 - v12);
  v26 = 1.0 / (v17 - v9);
  v27 = *(float64x2_t *)(*(_QWORD *)a1 + 2 * v10);
  v28 = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v27, v19), *(float64x2_t *)(*(_QWORD *)a1 + 16 * v13), v15), v18);
  v29 = *(float64x2_t *)(*(_QWORD *)a1 + 16 * v11);
  v30 = vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v29, v22), v27, v21), v20);
  *(_QWORD *)&result = *(_OWORD *)&vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)a1 + 16 * v16), -v21), v29, v24), v25), v22), v30, v24), v26), v22), vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, v19), v28, v21), v23), v21), v20);
  return result;
}

void sub_1BE6903DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6903F0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

std::logic_error *sub_1BE690430(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "Parameter outside bounds.");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  return result;
}

uint64_t sub_1BE69045C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;

  v4 = sub_1BE690700((_QWORD *)a1, (uint64_t *)a2);
  sub_1BE690978(v4 + 3, a2 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = *(_BYTE **)(a2 + 48);
  v5 = *(_BYTE **)(a2 + 56);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_1BE61F930();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 64) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 56) = v9;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = *(_BYTE **)(a2 + 72);
  v10 = *(_BYTE **)(a2 + 80);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_1BE61F930();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 88) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 80) = v14;
  }
  sub_1BE690700((_QWORD *)(a1 + 96), (uint64_t *)(a2 + 96));
  v15 = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a1 + 256) = &off_1E77F07D0;
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  v16 = (void *)operator new[]();
  *(_QWORD *)(a1 + 384) = v16;
  memcpy(v16, *(const void **)(a2 + 384), 8 * (*(_DWORD *)(a2 + 396) * *(_DWORD *)(a2 + 392)));
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  v17 = *(_BYTE **)(a2 + 520);
  v18 = *(_BYTE **)(a2 + 528);
  v19 = v18 - v17;
  if (v18 != v17)
  {
    if (v19 < 0)
      sub_1BE61F930();
    v20 = (char *)operator new(v18 - v17);
    *(_QWORD *)(a1 + 520) = v20;
    *(_QWORD *)(a1 + 528) = v20;
    v21 = &v20[4 * (v19 >> 2)];
    *(_QWORD *)(a1 + 536) = v21;
    memcpy(v20, v17, v19);
    *(_QWORD *)(a1 + 528) = v21;
  }
  return a1;
}

void sub_1BE69062C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;

  sub_1BE63CEBC(v5);
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v7;
    operator delete(v7);
    v8 = *v3;
    if (!*v3)
    {
LABEL_3:
      v9 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 56) = v8;
  operator delete(v8);
  v9 = *v2;
  if (!*v2)
  {
LABEL_4:
    sub_1BE63CEBC((void **)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v9);
  sub_1BE63CEBC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1BE6906F0()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x1BE6906CCLL);
  JUMPOUT(0x1BE6906A4);
}

_QWORD *sub_1BE690700(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_1BE69080C(v3, v4, v5, v8);
  }
  return a1;
}

void sub_1BE6907A8(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1BE69080C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_1BE61F930();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1BE6908D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE6908E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE69090C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

_QWORD *sub_1BE690978(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0)
      sub_1BE61F930();
    v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    a1[1] = v8;
    v9 = (v8 - 1) >> 6;
    if (v8 < 0x41)
      v9 = 0;
    v6[v9] = 0;
    v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = &v7[v8 >> 6];
      do
      {
        v15 = 1 << v11;
        if (((*v7 >> v13) & 1) != 0)
          v16 = *v6 | v15;
        else
          v16 = *v6 & ~v15;
        *v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63)
          v13 = 0;
        v6 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

void sub_1BE690A80(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_1BE61F930();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_1BE69080C(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_1BE62037C(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_1BE69080C(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_1BE62037C(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_1BE690CE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE690CEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_1BE690CF4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v14;

  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 != *a1)
  {
    v4 = 0;
    v5 = v3 >> 3;
    v6 = 1.79769313e308;
    do
    {
      if (*(double *)(*a1 + 8 * v4) < v6)
        v6 = *(double *)(*a1 + 8 * v4);
      v4 += 2;
    }
    while (v4 < v5);
    v7 = *a2;
    v8 = a2[1];
    v9 = v8 - *a2;
    if (v8 != *a2)
      goto LABEL_7;
    return v6 < 1.79769313e308;
  }
  v6 = 1.79769313e308;
  v7 = *a2;
  v14 = a2[1];
  v9 = v14 - *a2;
  if (v14 == *a2)
    return v6 < 1.79769313e308;
LABEL_7:
  v10 = 0;
  v11 = v9 >> 3;
  v12 = 1.79769313e308;
  do
  {
    if (*(double *)(v7 + 8 * v10) < v12)
      v12 = *(double *)(v7 + 8 * v10);
    v10 += 2;
  }
  while (v10 < v11);
  return v6 < v12;
}

void sub_1BE690D90(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  BOOL v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char v47;
  char *v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  void *v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  int64_t v58;
  uint64_t *v59;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  void *v70;
  uint64_t *v71;
  char v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  void *v76;
  uint64_t *v77;
  char v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  int64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;

void sub_1BE6918BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE691924(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v11 = a1 + 2;
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v12 = a1[1];
      a1[1] = a3[1];
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      v19 = a1[1];
      a1[1] = a2[1];
      a2[1] = v19;
      v11 = a2 + 2;
      v20 = a1[2];
      a1[2] = a2[2];
      a2[2] = v20;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      v12 = a2[1];
      a2[1] = a3[1];
    }
    a3[1] = v12;
    v16 = a3 + 2;
    goto LABEL_10;
  }
  if ((_DWORD)result)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    v16 = a2 + 2;
    v15 = a2[2];
    a2[2] = a3[2];
    a3[2] = v15;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v17 = *a1;
      *a1 = *a2;
      *a2 = v17;
      v18 = a1[1];
      a1[1] = a2[1];
      a2[1] = v18;
      v11 = a1 + 2;
LABEL_10:
      v22 = *v11;
      *v11 = *v16;
      *v16 = v22;
    }
  }
  return result;
}

BOOL sub_1BE691A98(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  char v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  v6 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (!(*a3)(a2 - 3, a1))
        return 1;
      v8 = *a1;
      *a1 = *(a2 - 3);
      *(a2 - 3) = v8;
      v9 = a1[1];
      a1[1] = *(a2 - 2);
      *(a2 - 2) = v9;
      v10 = a1[2];
      a1[2] = *(a2 - 1);
      *(a2 - 1) = v10;
      return 1;
    case 3uLL:
      sub_1BE691924(a1, a1 + 3, a2 - 3, a3);
      return 1;
    case 4uLL:
      sub_1BE691D24(a1, a1 + 3, a1 + 6, a2 - 3, a3);
      return 1;
    case 5uLL:
      sub_1BE691E34(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3, a3);
      return 1;
    default:
      v11 = a1 + 6;
      sub_1BE691924(a1, a1 + 3, a1 + 6, a3);
      v12 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v12, v11))
    {
      v18 = 0;
      v24 = *(_OWORD *)v12;
      v25 = v12[2];
      v12[1] = 0;
      v12[2] = 0;
      *v12 = 0;
      v19 = v13;
      do
      {
        v20 = (char *)a1 + v19;
        v21 = (uint64_t *)((char *)a1 + v19 + 72);
        if (v18)
        {
          *((_QWORD *)v20 + 10) = v18;
          operator delete(v18);
          *v21 = 0;
          *(uint64_t *)((char *)a1 + v19 + 80) = 0;
          *(uint64_t *)((char *)a1 + v19 + 88) = 0;
        }
        *(_OWORD *)v21 = *((_OWORD *)v20 + 3);
        *((_QWORD *)v20 + 11) = *((_QWORD *)v20 + 8);
        *((_QWORD *)v20 + 6) = 0;
        *((_QWORD *)v20 + 7) = 0;
        *((_QWORD *)v20 + 8) = 0;
        if (v19 == -48)
        {
          v15 = a1 + 1;
          v16 = a1;
          goto LABEL_7;
        }
        v22 = (*a3)((uint64_t *)&v24, (uint64_t *)((char *)a1 + v19 + 24));
        v18 = (void *)*((_QWORD *)v20 + 6);
        v19 -= 24;
      }
      while ((v22 & 1) != 0);
      v23 = (char *)a1 + v19;
      v15 = (uint64_t *)((char *)a1 + v19 + 80);
      v16 = (uint64_t *)(v23 + 72);
      if (v18)
      {
        *((_QWORD *)v23 + 10) = v18;
        operator delete(v18);
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
      }
LABEL_7:
      v17 = *((_QWORD *)&v24 + 1);
      *v16 = v24;
      *v15 = v17;
      v16[2] = v25;
      if (++v14 == 8)
        return v12 + 3 == a2;
    }
    v11 = v12;
    v13 += 24;
    v12 += 3;
    if (v12 == a2)
      return 1;
  }
}

void sub_1BE691D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BE691D24(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1BE691924(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    v13 = a3[2];
    a3[2] = a4[2];
    a4[2] = v13;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v15 = a2[1];
      a2[1] = a3[1];
      a3[1] = v15;
      v16 = a2[2];
      a2[2] = a3[2];
      a3[2] = v16;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        v18 = a1[1];
        a1[1] = a2[1];
        a2[1] = v18;
        v19 = a1[2];
        a1[2] = a2[2];
        a2[2] = v19;
      }
    }
  }
  return result;
}

uint64_t sub_1BE691E34(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1BE691D24(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    v15 = a4[2];
    a4[2] = a5[2];
    a5[2] = v15;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      v17 = a3[1];
      a3[1] = a4[1];
      a4[1] = v17;
      v18 = a3[2];
      a3[2] = a4[2];
      a4[2] = v18;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        v20 = a2[1];
        a2[1] = a3[1];
        a3[1] = v20;
        v21 = a2[2];
        a2[2] = a3[2];
        a3[2] = v21;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
          v23 = a1[1];
          a1[1] = a2[1];
          a2[1] = v23;
          v24 = a1[2];
          a1[2] = a2[2];
          a2[2] = v24;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1BE691F8C(unint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  unint64_t v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  unint64_t v43;
  double v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  double v61;
  unint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  double v79;
  unint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  double v89;
  unint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  double v105;
  unint64_t v106;
  uint64_t *v107;
  BOOL v108;
  unint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  double v117;
  uint64_t v118;
  double v119;
  unint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  double v130;
  unint64_t v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  double v140;
  unint64_t v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  unint64_t v154;
  uint64_t v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  double v169;
  uint64_t v170;
  unint64_t v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  double v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  double v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  double v210;
  double v211;
  unint64_t v212;
  double v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  int64_t v219;
  int64_t v220;
  int64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  double v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  double v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  double v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  double v251;
  double v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  double v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  double v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  double v272;
  unint64_t v273;
  uint64_t v274;
  int64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t *v280;
  uint64_t v281;
  int64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  double v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  double v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  double v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  double v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  double v319;
  unint64_t v320;
  double v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  double v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  double v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  double v339;
  uint64_t v340;
  uint64_t *v341;
  double v342;
  unint64_t v343;
  double v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t *v351;
  uint64_t *v352;
  uint64_t *v353;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v350 = a2 - 3;
  v351 = a2 - 2;
  v10 = v8;
  v352 = a2;
  v353 = a2 - 1;
  while (2)
  {
    v8 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v178 = *(a2 - 1);
        v179 = *v10;
        v180 = **a3;
        v181 = *(_QWORD *)(v180 + 24 * v178);
        v182 = *(_QWORD *)(v180 + 24 * v178 + 8);
        v183 = v182 - v181;
        if (v182 == v181)
        {
          v186 = 1.79769313e308;
          v349 = (uint64_t *)(v180 + 24 * v179);
          v187 = *v349;
          v348 = v349[1];
          v190 = v348 - *v349;
          if (v348 != *v349)
            goto LABEL_246;
        }
        else
        {
          v184 = 0;
          v185 = v183 >> 3;
          v186 = 1.79769313e308;
          do
          {
            if (*(double *)(v181 + 8 * v184) < v186)
              v186 = *(double *)(v181 + 8 * v184);
            v184 += 2;
          }
          while (v184 < v185);
          v189 = (uint64_t *)(v180 + 24 * v179);
          v187 = *v189;
          v188 = v189[1];
          v190 = v188 - *v189;
          if (v188 != *v189)
          {
LABEL_246:
            v191 = 0;
            v192 = v190 >> 3;
            v193 = 1.79769313e308;
            do
            {
              if (*(double *)(v187 + 8 * v191) < v193)
                v193 = *(double *)(v187 + 8 * v191);
              v191 += 2;
            }
            while (v191 < v192);
            if (v186 >= v193)
              return result;
LABEL_459:
            *v10 = v178;
            *(a2 - 1) = v179;
            return result;
          }
        }
        if (v186 >= 1.79769313e308)
          return result;
        goto LABEL_459;
      case 3:
        return (unint64_t)sub_1BE6935A4(v10, v10 + 1, v9, **a3);
      case 4:
        return (unint64_t)sub_1BE693CB0(v10, v10 + 1, v10 + 2, v9, a3);
      case 5:
        return (unint64_t)sub_1BE693F50(v10, v10 + 1, v10 + 2, v10 + 3, v9, a3);
      default:
        if (v11 <= 191)
        {
          v194 = *a3;
          if ((a5 & 1) != 0)
          {
            if (v10 == a2)
              return result;
            v195 = v10 + 1;
            if (v10 + 1 == a2)
              return result;
            v196 = *v194;
            v197 = v10;
            while (1)
            {
              v199 = v195;
              v200 = v197[1];
              v202 = *(_QWORD *)(v196 + 24 * v200);
              v201 = *(_QWORD *)(v196 + 24 * v200 + 8);
              v203 = (v201 - v202) >> 3;
              if (v201 == v202)
              {
                v205 = 1.79769313e308;
                v206 = *v197;
                v207 = *(_QWORD *)(v196 + 24 * *v197);
                result = *(_QWORD *)(v196 + 24 * *v197 + 8);
                v208 = result - v207;
                if (result == v207)
                  goto LABEL_275;
              }
              else
              {
                v204 = 0;
                v205 = 1.79769313e308;
                do
                {
                  if (*(double *)(v202 + 8 * v204) < v205)
                    v205 = *(double *)(v202 + 8 * v204);
                  v204 += 2;
                }
                while (v204 < v203);
                v206 = *v197;
                v207 = *(_QWORD *)(v196 + 24 * *v197);
                result = *(_QWORD *)(v196 + 24 * *v197 + 8);
                v208 = result - v207;
                if (result == v207)
                {
LABEL_275:
                  if (v205 >= 1.79769313e308)
                    goto LABEL_261;
                  goto LABEL_276;
                }
              }
              result = 0;
              v209 = v208 >> 3;
              v210 = 1.79769313e308;
              do
              {
                if (*(double *)(v207 + 8 * result) < v210)
                  v210 = *(double *)(v207 + 8 * result);
                result += 2;
              }
              while (result < v209);
              if (v205 >= v210)
                goto LABEL_261;
LABEL_276:
              v198 = v199;
              while (1)
              {
                *v198 = v206;
                if (v197 == v10)
                  break;
                v198 = v197;
                if (v201 == v202)
                {
                  v213 = 1.79769313e308;
                  --v197;
                  v206 = *(v198 - 1);
                  result = *(_QWORD *)(v196 + 24 * v206);
                  v216 = *(_QWORD *)(v196 + 24 * v206 + 8);
                  v215 = v216 - result;
                  if (v216 != result)
                    goto LABEL_288;
                }
                else
                {
                  v212 = 0;
                  v213 = 1.79769313e308;
                  do
                  {
                    if (*(double *)(v202 + 8 * v212) < v213)
                      v213 = *(double *)(v202 + 8 * v212);
                    v212 += 2;
                  }
                  while (v212 < v203);
                  v197 = v198 - 1;
                  v206 = *(v198 - 1);
                  result = *(_QWORD *)(v196 + 24 * v206);
                  v214 = *(_QWORD *)(v196 + 24 * v206 + 8);
                  v215 = v214 - result;
                  if (v214 != result)
                  {
LABEL_288:
                    v217 = 0;
                    v218 = v215 >> 3;
                    v211 = 1.79769313e308;
                    do
                    {
                      if (*(double *)(result + 8 * v217) < v211)
                        v211 = *(double *)(result + 8 * v217);
                      v217 += 2;
                    }
                    while (v217 < v218);
                    goto LABEL_278;
                  }
                }
                result = 0x7FEFFFFFFFFFFFFFLL;
                v211 = 1.79769313e308;
LABEL_278:
                if (v213 >= v211)
                  goto LABEL_260;
              }
              v198 = v10;
LABEL_260:
              *v198 = v200;
LABEL_261:
              v195 = v199 + 1;
              v197 = v199;
              if (v199 + 1 == a2)
                return result;
            }
          }
          if (v10 == a2)
            return result;
          v326 = v10 + 1;
          if (v10 + 1 == a2)
            return result;
          v327 = *v194;
LABEL_427:
          v328 = v326;
          v329 = v8[1];
          v331 = *(_QWORD *)(v327 + 24 * v329);
          v330 = *(_QWORD *)(v327 + 24 * v329 + 8);
          v332 = (v330 - v331) >> 3;
          if (v330 == v331)
          {
            v334 = 1.79769313e308;
            v335 = *v8;
            v336 = *(_QWORD *)(v327 + 24 * *v8);
            v340 = *(_QWORD *)(v327 + 24 * *v8 + 8);
            result = v340 - v336;
            if (v340 != v336)
              goto LABEL_433;
          }
          else
          {
            v333 = 0;
            v334 = 1.79769313e308;
            do
            {
              if (*(double *)(v331 + 8 * v333) < v334)
                v334 = *(double *)(v331 + 8 * v333);
              v333 += 2;
            }
            while (v333 < v332);
            v335 = *v8;
            v336 = *(_QWORD *)(v327 + 24 * *v8);
            v337 = *(_QWORD *)(v327 + 24 * *v8 + 8);
            result = v337 - v336;
            if (v337 != v336)
            {
LABEL_433:
              v338 = 0;
              result = (uint64_t)result >> 3;
              v339 = 1.79769313e308;
              do
              {
                if (*(double *)(v336 + 8 * v338) < v339)
                  v339 = *(double *)(v336 + 8 * v338);
                v338 += 2;
              }
              while (v338 < result);
              if (v334 >= v339)
                goto LABEL_426;
LABEL_441:
              v341 = v328;
              while (1)
              {
                *v341 = v335;
                v341 = v8;
                if (v330 == v331)
                {
                  v344 = 1.79769313e308;
                  --v8;
                  v335 = *(v341 - 1);
                  v345 = *(_QWORD *)(v327 + 24 * v335);
                  result = *(_QWORD *)(v327 + 24 * v335 + 8);
                  v346 = result - v345;
                  if (result != v345)
                    goto LABEL_452;
                }
                else
                {
                  v343 = 0;
                  v344 = 1.79769313e308;
                  do
                  {
                    if (*(double *)(v331 + 8 * v343) < v344)
                      v344 = *(double *)(v331 + 8 * v343);
                    v343 += 2;
                  }
                  while (v343 < v332);
                  --v8;
                  v335 = *(v341 - 1);
                  v345 = *(_QWORD *)(v327 + 24 * v335);
                  result = *(_QWORD *)(v327 + 24 * v335 + 8);
                  v346 = result - v345;
                  if (result != v345)
                  {
LABEL_452:
                    result = 0;
                    v347 = v346 >> 3;
                    v342 = 1.79769313e308;
                    do
                    {
                      if (*(double *)(v345 + 8 * result) < v342)
                        v342 = *(double *)(v345 + 8 * result);
                      result += 2;
                    }
                    while (result < v347);
                    goto LABEL_443;
                  }
                }
                v342 = 1.79769313e308;
LABEL_443:
                if (v344 >= v342)
                {
                  *v341 = v329;
LABEL_426:
                  v326 = v328 + 1;
                  v8 = v328;
                  if (v328 + 1 == a2)
                    return result;
                  goto LABEL_427;
                }
              }
            }
          }
          if (v334 >= 1.79769313e308)
            goto LABEL_426;
          goto LABEL_441;
        }
        if (!a4)
        {
          if (v10 == a2)
            return result;
          v219 = (unint64_t)(v12 - 2) >> 1;
          v220 = v219;
          while (1)
          {
            v221 = v220;
            if (v219 < v220)
              goto LABEL_296;
            v222 = (2 * v220) | 1;
            v223 = &v10[v222];
            v224 = 2 * v220 + 2;
            v225 = **a3;
            if (v224 < v12)
            {
              v227 = *(_QWORD *)(v225 + 24 * *v223);
              v226 = *(_QWORD *)(v225 + 24 * *v223 + 8);
              v228 = v226 - v227;
              if (v226 == v227)
              {
                v231 = 1.79769313e308;
              }
              else
              {
                v229 = 0;
                v230 = v228 >> 3;
                v231 = 1.79769313e308;
                do
                {
                  if (*(double *)(v227 + 8 * v229) < v231)
                    v231 = *(double *)(v227 + 8 * v229);
                  v229 += 2;
                }
                while (v229 < v230);
              }
              v232 = *(_QWORD *)(v225 + 24 * v223[1]);
              v233 = *(_QWORD *)(v225 + 24 * v223[1] + 8);
              v234 = v233 - v232;
              if (v233 == v232)
              {
                if (v231 < 1.79769313e308)
                  goto LABEL_312;
              }
              else
              {
                v235 = 0;
                v236 = v234 >> 3;
                v237 = 1.79769313e308;
                do
                {
                  if (*(double *)(v232 + 8 * v235) < v237)
                    v237 = *(double *)(v232 + 8 * v235);
                  v235 += 2;
                }
                while (v235 < v236);
                if (v231 < v237)
                {
LABEL_312:
                  ++v223;
                  v222 = 2 * v221 + 2;
                }
              }
            }
            v238 = *v223;
            v239 = *(_QWORD *)(v225 + 24 * *v223);
            v240 = *(_QWORD *)(v225 + 24 * *v223 + 8);
            v241 = v240 - v239;
            if (v240 == v239)
            {
              v244 = 1.79769313e308;
            }
            else
            {
              v242 = 0;
              v243 = v241 >> 3;
              v244 = 1.79769313e308;
              do
              {
                if (*(double *)(v239 + 8 * v242) < v244)
                  v244 = *(double *)(v239 + 8 * v242);
                v242 += 2;
              }
              while (v242 < v243);
            }
            v245 = &v10[v221];
            v246 = *v245;
            v248 = *(_QWORD *)(v225 + 24 * *v245);
            v247 = *(_QWORD *)(v225 + 24 * *v245 + 8);
            v249 = (v247 - v248) >> 3;
            if (v247 == v248)
            {
              if (v244 >= 1.79769313e308)
                goto LABEL_331;
              goto LABEL_296;
            }
            v250 = 0;
            v251 = 1.79769313e308;
            do
            {
              if (*(double *)(v248 + 8 * v250) < v251)
                v251 = *(double *)(v248 + 8 * v250);
              v250 += 2;
            }
            while (v250 < v249);
            if (v244 >= v251)
            {
              while (1)
              {
LABEL_331:
                *v245 = v238;
                v245 = v223;
                if (v219 < v222)
                {
LABEL_295:
                  *v245 = v246;
                  break;
                }
                v253 = 2 * v222;
                v222 = (2 * v222) | 1;
                v223 = &v10[v222];
                v254 = v253 + 2;
                if (v254 < v12)
                {
                  v255 = *(_QWORD *)(v225 + 24 * *v223);
                  v256 = *(_QWORD *)(v225 + 24 * *v223 + 8);
                  v257 = v256 - v255;
                  if (v256 == v255)
                  {
                    v260 = 1.79769313e308;
                  }
                  else
                  {
                    v258 = 0;
                    v259 = v257 >> 3;
                    v260 = 1.79769313e308;
                    do
                    {
                      if (*(double *)(v255 + 8 * v258) < v260)
                        v260 = *(double *)(v255 + 8 * v258);
                      v258 += 2;
                    }
                    while (v258 < v259);
                  }
                  v261 = *(_QWORD *)(v225 + 24 * v223[1]);
                  v262 = *(_QWORD *)(v225 + 24 * v223[1] + 8);
                  v263 = v262 - v261;
                  if (v262 == v261)
                  {
                    if (v260 < 1.79769313e308)
                      goto LABEL_346;
                  }
                  else
                  {
                    v264 = 0;
                    v265 = v263 >> 3;
                    v266 = 1.79769313e308;
                    do
                    {
                      if (*(double *)(v261 + 8 * v264) < v266)
                        v266 = *(double *)(v261 + 8 * v264);
                      v264 += 2;
                    }
                    while (v264 < v265);
                    if (v260 < v266)
                    {
LABEL_346:
                      ++v223;
                      v222 = v254;
                    }
                  }
                }
                v238 = *v223;
                v267 = *(_QWORD *)(v225 + 24 * *v223);
                v268 = *(_QWORD *)(v225 + 24 * *v223 + 8);
                v269 = v268 - v267;
                if (v268 == v267)
                {
                  v272 = 1.79769313e308;
                  if (v247 != v248)
                    goto LABEL_355;
                }
                else
                {
                  v270 = 0;
                  v271 = v269 >> 3;
                  v272 = 1.79769313e308;
                  do
                  {
                    if (*(double *)(v267 + 8 * v270) < v272)
                      v272 = *(double *)(v267 + 8 * v270);
                    v270 += 2;
                  }
                  while (v270 < v271);
                  if (v247 != v248)
                  {
LABEL_355:
                    v273 = 0;
                    v252 = 1.79769313e308;
                    do
                    {
                      if (*(double *)(v248 + 8 * v273) < v252)
                        v252 = *(double *)(v248 + 8 * v273);
                      v273 += 2;
                    }
                    while (v273 < v249);
                    goto LABEL_330;
                  }
                }
                v252 = 1.79769313e308;
LABEL_330:
                if (v272 < v252)
                  goto LABEL_295;
              }
            }
LABEL_296:
            v220 = v221 - 1;
            if (!v221)
            {
              v274 = (unint64_t)v11 >> 3;
              while (1)
              {
                v276 = 0;
                v277 = *v10;
                v278 = *a3;
                v279 = v10;
                do
                {
                  v280 = v279;
                  v279 += v276 + 1;
                  v281 = 2 * v276;
                  result = (2 * v276) | 1;
                  v276 = result;
                  v282 = v281 + 2;
                  if (v282 >= v274)
                    goto LABEL_368;
                  v283 = *v278;
                  v284 = *(_QWORD *)(*v278 + 24 * *v279);
                  v285 = *(_QWORD *)(*v278 + 24 * *v279 + 8);
                  v286 = v285 - v284;
                  if (v285 == v284)
                  {
                    v289 = 1.79769313e308;
                    result = (unint64_t)(v279 + 1);
                    v298 = (uint64_t *)(v283 + 24 * v279[1]);
                    v290 = *v298;
                    v297 = v298[1];
                    v293 = v297 - *v298;
                    if (v297 == *v298)
                      goto LABEL_383;
                  }
                  else
                  {
                    v287 = 0;
                    v288 = v286 >> 3;
                    v289 = 1.79769313e308;
                    do
                    {
                      if (*(double *)(v284 + 8 * v287) < v289)
                        v289 = *(double *)(v284 + 8 * v287);
                      v287 += 2;
                    }
                    while (v287 < v288);
                    result = (unint64_t)(v279 + 1);
                    v292 = (uint64_t *)(v283 + 24 * v279[1]);
                    v290 = *v292;
                    v291 = v292[1];
                    v293 = v291 - *v292;
                    if (v291 == *v292)
                    {
LABEL_383:
                      if (v289 >= 1.79769313e308)
                        goto LABEL_368;
LABEL_384:
                      v279 = (uint64_t *)result;
                      v276 = v282;
                      goto LABEL_368;
                    }
                  }
                  v294 = 0;
                  v295 = v293 >> 3;
                  v296 = 1.79769313e308;
                  do
                  {
                    if (*(double *)(v290 + 8 * v294) < v296)
                      v296 = *(double *)(v290 + 8 * v294);
                    v294 += 2;
                  }
                  while (v294 < v295);
                  if (v289 < v296)
                    goto LABEL_384;
LABEL_368:
                  *v280 = *v279;
                }
                while (v276 <= (uint64_t)((unint64_t)(v274 - 2) >> 1));
                if (v279 == --a2)
                {
                  *v279 = v277;
                  goto LABEL_366;
                }
                *v279 = *a2;
                *a2 = v277;
                v299 = (char *)v279 - (char *)v10 + 8;
                if (v299 < 9)
                  goto LABEL_366;
                v300 = (((unint64_t)v299 >> 3) - 2) >> 1;
                v301 = &v10[v300];
                v302 = *v301;
                v303 = **a3;
                v304 = *(_QWORD *)(v303 + 24 * *v301);
                v305 = *(_QWORD *)(v303 + 24 * *v301 + 8);
                v306 = v305 - v304;
                if (v305 == v304)
                {
                  v309 = 1.79769313e308;
                  v310 = *v279;
                  v311 = *(_QWORD *)(v303 + 24 * *v279);
                  result = *(_QWORD *)(v303 + 24 * *v279 + 8) - v311;
                  if (result)
                    goto LABEL_393;
                }
                else
                {
                  v307 = 0;
                  v308 = v306 >> 3;
                  v309 = 1.79769313e308;
                  do
                  {
                    if (*(double *)(v304 + 8 * v307) < v309)
                      v309 = *(double *)(v304 + 8 * v307);
                    v307 += 2;
                  }
                  while (v307 < v308);
                  v310 = *v279;
                  v311 = *(_QWORD *)(v303 + 24 * *v279);
                  result = *(_QWORD *)(v303 + 24 * *v279 + 8) - v311;
                  if (result)
                  {
LABEL_393:
                    v312 = 0;
                    result = (uint64_t)result >> 3;
                    v313 = 1.79769313e308;
                    do
                    {
                      if (*(double *)(v311 + 8 * v312) < v313)
                        v313 = *(double *)(v311 + 8 * v312);
                      v312 += 2;
                    }
                    while (v312 < result);
                    if (v309 < v313)
                    {
                      do
                      {
                        *v279 = v302;
                        v279 = v301;
                        if (!v300)
                          break;
                        v300 = (v300 - 1) >> 1;
                        v301 = &v10[v300];
                        v302 = *v301;
                        v314 = *(_QWORD *)(v303 + 24 * *v301);
                        v315 = *(_QWORD *)(v303 + 24 * *v301 + 8);
                        v316 = v315 - v314;
                        if (v315 == v314)
                        {
                          v319 = 1.79769313e308;
                        }
                        else
                        {
                          v317 = 0;
                          v318 = v316 >> 3;
                          v319 = 1.79769313e308;
                          do
                          {
                            if (*(double *)(v314 + 8 * v317) < v319)
                              v319 = *(double *)(v314 + 8 * v317);
                            v317 += 2;
                          }
                          while (v317 < v318);
                        }
                        v320 = 0;
                        v321 = 1.79769313e308;
                        do
                        {
                          if (*(double *)(v311 + 8 * v320) < v321)
                            v321 = *(double *)(v311 + 8 * v320);
                          v320 += 2;
                        }
                        while (v320 < result);
                      }
                      while (v319 < v321);
                      goto LABEL_421;
                    }
                    goto LABEL_366;
                  }
                }
                if (v309 < 1.79769313e308)
                {
                  do
                  {
                    *v279 = v302;
                    v279 = v301;
                    if (!v300)
                      break;
                    v300 = (v300 - 1) >> 1;
                    v301 = &v10[v300];
                    v302 = *v301;
                    v322 = *(_QWORD *)(v303 + 24 * *v301);
                    result = *(_QWORD *)(v303 + 24 * *v301 + 8);
                    v323 = result - v322;
                    if (result == v322)
                      break;
                    result = 0;
                    v324 = v323 >> 3;
                    v325 = 1.79769313e308;
                    do
                    {
                      if (*(double *)(v322 + 8 * result) < v325)
                        v325 = *(double *)(v322 + 8 * result);
                      result += 2;
                    }
                    while (result < v324);
                  }
                  while (v325 < 1.79769313e308);
LABEL_421:
                  *v279 = v310;
                }
LABEL_366:
                if (v274-- <= 2)
                  return result;
              }
            }
          }
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        v15 = **a3;
        if ((unint64_t)v11 < 0x401)
        {
          result = (unint64_t)sub_1BE6935A4(v14, v8, v9, v15);
          --a4;
          v18 = **a3;
          v19 = *v8;
          if ((a5 & 1) != 0)
          {
LABEL_36:
            v27 = *(_QWORD *)(v18 + 24 * v19);
            v46 = *(_QWORD *)(v18 + 24 * v19 + 8);
            v31 = (v46 - v27) >> 3;
            v32 = v46 == v27;
            if (v46 == v27)
              goto LABEL_37;
LABEL_20:
            v33 = v8;
            do
            {
              v34 = v33;
              v36 = v33[1];
              ++v33;
              v35 = v36;
              v37 = *(_QWORD *)(v18 + 24 * v36);
              v38 = *(_QWORD *)(v18 + 24 * v36 + 8);
              v39 = v38 - v37;
              if (v38 == v37)
              {
                v42 = 1.79769313e308;
              }
              else
              {
                v40 = 0;
                v41 = v39 >> 3;
                v42 = 1.79769313e308;
                do
                {
                  if (*(double *)(v37 + 8 * v40) < v42)
                    v42 = *(double *)(v37 + 8 * v40);
                  v40 += 2;
                }
                while (v40 < v41);
              }
              v43 = 0;
              v44 = 1.79769313e308;
              do
              {
                if (*(double *)(v27 + 8 * v43) < v44)
                  v44 = *(double *)(v27 + 8 * v43);
                v43 += 2;
              }
              while (v43 < v31);
            }
            while (v42 < v44);
            v26 = v27;
            v45 = a2;
            if (v34 == v8)
              goto LABEL_112;
            goto LABEL_49;
          }
        }
        else
        {
          sub_1BE6935A4(v8, v14, v9, v15);
          v16 = &v8[v13];
          sub_1BE6935A4(v8 + 1, v16 - 1, v351, **a3);
          a2 = v352;
          sub_1BE6935A4(v8 + 2, &v8[v13 + 1], v350, **a3);
          result = (unint64_t)sub_1BE6935A4(v16 - 1, v14, &v8[v13 + 1], **a3);
          v17 = *v8;
          *v8 = *v16;
          *v16 = v17;
          v9 = v353;
          --a4;
          v18 = **a3;
          v19 = *v8;
          if ((a5 & 1) != 0)
            goto LABEL_36;
        }
        v20 = *(_QWORD *)(v18 + 24 * *(v8 - 1));
        v21 = *(_QWORD *)(v18 + 24 * *(v8 - 1) + 8);
        v22 = v21 - v20;
        if (v21 == v20)
        {
          v25 = 1.79769313e308;
          v27 = *(_QWORD *)(v18 + 24 * v19);
          v26 = *(_QWORD *)(v18 + 24 * v19 + 8);
          v28 = (v26 - v27) >> 3;
          if (v26 != v27)
            goto LABEL_14;
LABEL_39:
          if (v25 < 1.79769313e308)
          {
            v31 = 0;
            goto LABEL_41;
          }
          v110 = 1.79769313e308;
          v111 = *(_QWORD *)(v18 + 24 * *v9);
          v118 = *(_QWORD *)(v18 + 24 * *v9 + 8);
          v114 = v118 - v111;
          if (v118 == v111)
            goto LABEL_144;
LABEL_137:
          v115 = 0;
          v116 = v114 >> 3;
          v117 = 1.79769313e308;
          do
          {
            if (*(double *)(v111 + 8 * v115) < v117)
              v117 = *(double *)(v111 + 8 * v115);
            v115 += 2;
          }
          while (v115 < v116);
          v10 = v8;
          if (v110 < v117)
            goto LABEL_145;
LABEL_163:
          do
          {
            if (++v10 >= a2)
              break;
            if (v26 == v27)
            {
              v132 = 1.79769313e308;
              v133 = *(_QWORD *)(v18 + 24 * *v10);
              v136 = *(_QWORD *)(v18 + 24 * *v10 + 8);
              v135 = v136 - v133;
              if (v136 != v133)
                goto LABEL_172;
            }
            else
            {
              v131 = 0;
              v132 = 1.79769313e308;
              do
              {
                if (*(double *)(v27 + 8 * v131) < v132)
                  v132 = *(double *)(v27 + 8 * v131);
                v131 += 2;
              }
              while (v131 < v28);
              v133 = *(_QWORD *)(v18 + 24 * *v10);
              v134 = *(_QWORD *)(v18 + 24 * *v10 + 8);
              v135 = v134 - v133;
              if (v134 != v133)
              {
LABEL_172:
                v137 = 0;
                v138 = v135 >> 3;
                v130 = 1.79769313e308;
                do
                {
                  if (*(double *)(v133 + 8 * v137) < v130)
                    v130 = *(double *)(v133 + 8 * v137);
                  v137 += 2;
                }
                while (v137 < v138);
                continue;
              }
            }
            v130 = 1.79769313e308;
          }
          while (v132 >= v130);
LABEL_177:
          v139 = a2;
          if (v10 < a2)
          {
            v139 = a2;
            do
            {
              if (v26 == v27)
              {
                v142 = 1.79769313e308;
                v147 = *--v139;
                v144 = *(_QWORD *)(v18 + 24 * v147);
                v148 = *(_QWORD *)(v18 + 24 * v147 + 8);
                v146 = v148 - v144;
                if (v148 != v144)
                  goto LABEL_189;
              }
              else
              {
                v141 = 0;
                v142 = 1.79769313e308;
                do
                {
                  if (*(double *)(v27 + 8 * v141) < v142)
                    v142 = *(double *)(v27 + 8 * v141);
                  v141 += 2;
                }
                while (v141 < v28);
                v143 = *--v139;
                v144 = *(_QWORD *)(v18 + 24 * v143);
                v145 = *(_QWORD *)(v18 + 24 * v143 + 8);
                v146 = v145 - v144;
                if (v145 != v144)
                {
LABEL_189:
                  v149 = 0;
                  v150 = v146 >> 3;
                  v140 = 1.79769313e308;
                  do
                  {
                    if (*(double *)(v144 + 8 * v149) < v140)
                      v140 = *(double *)(v144 + 8 * v149);
                    v149 += 2;
                  }
                  while (v149 < v150);
                  continue;
                }
              }
              v140 = 1.79769313e308;
            }
            while (v142 < v140);
          }
          if (v10 >= v139)
            goto LABEL_234;
          v151 = *v10;
          v152 = *v139;
          while (2)
          {
            *v10 = v152;
            *v139 = v151;
            if (v26 == v27)
            {
              do
              {
                v163 = v10[1];
                ++v10;
                v151 = v163;
                v164 = *(_QWORD *)(v18 + 24 * v163);
                v165 = *(_QWORD *)(v18 + 24 * v163 + 8);
                v166 = v165 - v164;
                if (v165 == v164)
                {
                  v162 = 1.79769313e308;
                }
                else
                {
                  v167 = 0;
                  v168 = v166 >> 3;
                  v162 = 1.79769313e308;
                  do
                  {
                    if (*(double *)(v164 + 8 * v167) < v162)
                      v162 = *(double *)(v164 + 8 * v167);
                    v167 += 2;
                  }
                  while (v167 < v168);
                }
              }
              while (v162 <= 1.79769313e308);
            }
            else
            {
              do
              {
                v154 = 0;
                v155 = v10[1];
                ++v10;
                v151 = v155;
                v156 = 1.79769313e308;
                do
                {
                  if (*(double *)(v27 + 8 * v154) < v156)
                    v156 = *(double *)(v27 + 8 * v154);
                  v154 += 2;
                }
                while (v154 < v28);
                v157 = *(_QWORD *)(v18 + 24 * v151);
                v158 = *(_QWORD *)(v18 + 24 * v151 + 8);
                v159 = v158 - v157;
                if (v158 == v157)
                {
                  v153 = 1.79769313e308;
                }
                else
                {
                  v160 = 0;
                  v161 = v159 >> 3;
                  v153 = 1.79769313e308;
                  do
                  {
                    if (*(double *)(v157 + 8 * v160) < v153)
                      v153 = *(double *)(v157 + 8 * v160);
                    v160 += 2;
                  }
                  while (v160 < v161);
                }
              }
              while (v156 >= v153);
            }
            do
            {
              v170 = *--v139;
              v152 = v170;
              if (v26 == v27)
              {
                v172 = 1.79769313e308;
                v173 = *(_QWORD *)(v18 + 24 * v152);
                v175 = *(_QWORD *)(v18 + 24 * v152 + 8);
                result = v175 - v173;
                if (v175 == v173)
                  goto LABEL_219;
              }
              else
              {
                v171 = 0;
                v172 = 1.79769313e308;
                do
                {
                  if (*(double *)(v27 + 8 * v171) < v172)
                    v172 = *(double *)(v27 + 8 * v171);
                  v171 += 2;
                }
                while (v171 < v28);
                v173 = *(_QWORD *)(v18 + 24 * v152);
                v174 = *(_QWORD *)(v18 + 24 * v152 + 8);
                result = v174 - v173;
                if (v174 == v173)
                {
LABEL_219:
                  v169 = 1.79769313e308;
                  continue;
                }
              }
              v176 = 0;
              result = (uint64_t)result >> 3;
              v169 = 1.79769313e308;
              do
              {
                if (*(double *)(v173 + 8 * v176) < v169)
                  v169 = *(double *)(v173 + 8 * v176);
                v176 += 2;
              }
              while (v176 < result);
            }
            while (v172 < v169);
            if (v10 < v139)
              continue;
            break;
          }
LABEL_234:
          v177 = v10 - 1;
          if (v10 - 1 != v8)
            *v8 = *v177;
          a5 = 0;
          *v177 = v19;
          continue;
        }
        v23 = 0;
        v24 = v22 >> 3;
        v25 = 1.79769313e308;
        do
        {
          if (*(double *)(v20 + 8 * v23) < v25)
            v25 = *(double *)(v20 + 8 * v23);
          v23 += 2;
        }
        while (v23 < v24);
        v27 = *(_QWORD *)(v18 + 24 * v19);
        v26 = *(_QWORD *)(v18 + 24 * v19 + 8);
        v28 = (v26 - v27) >> 3;
        if (v26 == v27)
          goto LABEL_39;
LABEL_14:
        v29 = 0;
        v30 = 1.79769313e308;
        do
        {
          if (*(double *)(v27 + 8 * v29) < v30)
            v30 = *(double *)(v27 + 8 * v29);
          v29 += 2;
        }
        while (v29 < v28);
        if (v25 >= v30)
        {
          v109 = 0;
          v110 = 1.79769313e308;
          do
          {
            if (*(double *)(v27 + 8 * v109) < v110)
              v110 = *(double *)(v27 + 8 * v109);
            v109 += 2;
          }
          while (v109 < v28);
          v113 = (uint64_t *)(v18 + 24 * *v9);
          v111 = *v113;
          v112 = v113[1];
          v114 = v112 - *v113;
          if (v112 != *v113)
            goto LABEL_137;
LABEL_144:
          v10 = v8;
          if (v110 >= 1.79769313e308)
            goto LABEL_163;
LABEL_145:
          v10 = v8;
          while (1)
          {
            if (v26 == v27)
            {
              v121 = 1.79769313e308;
              v126 = v10[1];
              ++v10;
              v123 = *(_QWORD *)(v18 + 24 * v126);
              v127 = *(_QWORD *)(v18 + 24 * v126 + 8);
              v125 = v127 - v123;
              if (v127 != v123)
                goto LABEL_156;
            }
            else
            {
              v120 = 0;
              v121 = 1.79769313e308;
              do
              {
                if (*(double *)(v27 + 8 * v120) < v121)
                  v121 = *(double *)(v27 + 8 * v120);
                v120 += 2;
              }
              while (v120 < v28);
              v122 = v10[1];
              ++v10;
              v123 = *(_QWORD *)(v18 + 24 * v122);
              v124 = *(_QWORD *)(v18 + 24 * v122 + 8);
              v125 = v124 - v123;
              if (v124 != v123)
              {
LABEL_156:
                v128 = 0;
                v129 = v125 >> 3;
                v119 = 1.79769313e308;
                do
                {
                  if (*(double *)(v123 + 8 * v128) < v119)
                    v119 = *(double *)(v123 + 8 * v128);
                  v128 += 2;
                }
                while (v128 < v129);
                goto LABEL_147;
              }
            }
            v119 = 1.79769313e308;
LABEL_147:
            if (v121 < v119)
              goto LABEL_177;
          }
        }
        v31 = (v26 - v27) >> 3;
        v32 = v26 == v27;
        if (v26 != v27)
          goto LABEL_20;
LABEL_37:
        v26 = v27;
LABEL_41:
        v33 = v8;
        do
        {
          v47 = v33;
          v48 = v33[1];
          ++v33;
          v35 = v48;
          v49 = *(_QWORD *)(v18 + 24 * v48);
          v50 = *(_QWORD *)(v18 + 24 * v48 + 8);
          v51 = v50 - v49;
          if (v50 == v49)
            break;
          v52 = 0;
          v53 = v51 >> 3;
          v54 = 1.79769313e308;
          do
          {
            if (*(double *)(v49 + 8 * v52) < v54)
              v54 = *(double *)(v49 + 8 * v52);
            v52 += 2;
          }
          while (v52 < v53);
        }
        while (v54 < 1.79769313e308);
        v32 = 1;
        v45 = a2;
        if (v47 == v8)
        {
          while (1)
          {
LABEL_112:
            if (v33 >= v45)
              goto LABEL_63;
            v99 = *--v45;
            v100 = *(_QWORD *)(v18 + 24 * v99);
            v101 = *(_QWORD *)(v18 + 24 * v99 + 8);
            v102 = v101 - v100;
            if (v101 == v100)
            {
              v105 = 1.79769313e308;
              if (!v32)
                goto LABEL_121;
            }
            else
            {
              v103 = 0;
              v104 = v102 >> 3;
              v105 = 1.79769313e308;
              do
              {
                if (*(double *)(v100 + 8 * v103) < v105)
                  v105 = *(double *)(v100 + 8 * v103);
                v103 += 2;
              }
              while (v103 < v104);
              if (!v32)
              {
LABEL_121:
                v106 = 0;
                v98 = 1.79769313e308;
                do
                {
                  if (*(double *)(v26 + 8 * v106) < v98)
                    v98 = *(double *)(v26 + 8 * v106);
                  v106 += 2;
                }
                while (v106 < v31);
                goto LABEL_111;
              }
            }
            v98 = 1.79769313e308;
LABEL_111:
            if (v105 < v98)
              goto LABEL_63;
          }
        }
LABEL_49:
        v45 = a2;
        if (v32)
        {
          v45 = a2;
          do
          {
            v92 = *--v45;
            v93 = *(_QWORD *)(v18 + 24 * v92);
            v94 = *(_QWORD *)(v18 + 24 * v92 + 8);
            v95 = v94 - v93;
            if (v94 == v93)
            {
              v91 = 1.79769313e308;
            }
            else
            {
              v96 = 0;
              v97 = v95 >> 3;
              v91 = 1.79769313e308;
              do
              {
                if (*(double *)(v93 + 8 * v96) < v91)
                  v91 = *(double *)(v93 + 8 * v96);
                v96 += 2;
              }
              while (v96 < v97);
            }
          }
          while (v91 >= 1.79769313e308);
        }
        else
        {
          do
          {
            v55 = *--v45;
            v56 = *(_QWORD *)(v18 + 24 * v55);
            v57 = *(_QWORD *)(v18 + 24 * v55 + 8);
            v58 = v57 - v56;
            if (v57 == v56)
            {
              v61 = 1.79769313e308;
            }
            else
            {
              v59 = 0;
              v60 = v58 >> 3;
              v61 = 1.79769313e308;
              do
              {
                if (*(double *)(v56 + 8 * v59) < v61)
                  v61 = *(double *)(v56 + 8 * v59);
                v59 += 2;
              }
              while (v59 < v60);
            }
            v62 = 0;
            v63 = 1.79769313e308;
            do
            {
              if (*(double *)(v26 + 8 * v62) < v63)
                v63 = *(double *)(v26 + 8 * v62);
              v62 += 2;
            }
            while (v62 < v31);
          }
          while (v61 >= v63);
        }
LABEL_63:
        v10 = v33;
        if (v33 >= v45)
          goto LABEL_126;
        v64 = *v45;
        v10 = v33;
        v65 = v45;
        while (2)
        {
          *v10 = v64;
          *v65 = v35;
          if (v32)
          {
            do
            {
              v66 = v10[1];
              ++v10;
              v35 = v66;
              v68 = *(_QWORD *)(v18 + 24 * v66);
              v67 = *(_QWORD *)(v18 + 24 * v66 + 8);
              v69 = v67 - v68;
              if (v67 == v68)
                break;
              v70 = 0;
              v71 = v69 >> 3;
              v72 = 1.79769313e308;
              do
              {
                if (*(double *)(v68 + 8 * v70) < v72)
                  v72 = *(double *)(v68 + 8 * v70);
                v70 += 2;
              }
              while (v70 < v71);
            }
            while (v72 < 1.79769313e308);
          }
          else
          {
            do
            {
              v73 = v10[1];
              ++v10;
              v35 = v73;
              v75 = *(_QWORD *)(v18 + 24 * v73);
              v74 = *(_QWORD *)(v18 + 24 * v73 + 8);
              v76 = v74 - v75;
              if (v74 == v75)
              {
                v79 = 1.79769313e308;
              }
              else
              {
                v77 = 0;
                v78 = v76 >> 3;
                v79 = 1.79769313e308;
                do
                {
                  if (*(double *)(v75 + 8 * v77) < v79)
                    v79 = *(double *)(v75 + 8 * v77);
                  v77 += 2;
                }
                while (v77 < v78);
              }
              v80 = 0;
              v81 = 1.79769313e308;
              do
              {
                if (*(double *)(v26 + 8 * v80) < v81)
                  v81 = *(double *)(v26 + 8 * v80);
                v80 += 2;
              }
              while (v80 < v31);
            }
            while (v79 < v81);
          }
          while (2)
          {
            v83 = *--v65;
            v64 = v83;
            v84 = *(_QWORD *)(v18 + 24 * v83);
            v85 = *(_QWORD *)(v18 + 24 * v83 + 8);
            v86 = v85 - v84;
            if (v85 == v84)
            {
              v89 = 1.79769313e308;
              if (!v32)
                goto LABEL_97;
LABEL_87:
              v82 = 1.79769313e308;
              goto LABEL_88;
            }
            v87 = 0;
            v88 = v86 >> 3;
            v89 = 1.79769313e308;
            do
            {
              if (*(double *)(v84 + 8 * v87) < v89)
                v89 = *(double *)(v84 + 8 * v87);
              v87 += 2;
            }
            while (v87 < v88);
            if (v32)
              goto LABEL_87;
LABEL_97:
            v90 = 0;
            v82 = 1.79769313e308;
            do
            {
              if (*(double *)(v26 + 8 * v90) < v82)
                v82 = *(double *)(v26 + 8 * v90);
              v90 += 2;
            }
            while (v90 < v31);
LABEL_88:
            if (v89 >= v82)
              continue;
            break;
          }
          if (v10 < v65)
            continue;
          break;
        }
LABEL_126:
        v107 = v10 - 1;
        if (v10 - 1 != v8)
          *v8 = *v107;
        *v107 = v19;
        if (v33 < v45)
        {
LABEL_131:
          result = sub_1BE691F8C(v8, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v108 = sub_1BE6938F8(v8, v10 - 1, a3);
        result = sub_1BE6938F8(v10, a2, a3);
        if (!(_DWORD)result)
        {
          if (v108)
            continue;
          goto LABEL_131;
        }
        a2 = v10 - 1;
        if (!v108)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1BE6935A4(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  uint64_t v49;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(a4 + 24 * *a2);
  v7 = *(_QWORD *)(a4 + 24 * *a2 + 8);
  v8 = (v7 - v6) >> 3;
  if (v7 != v6)
  {
    v9 = 0;
    v10 = 1.79769313e308;
    do
    {
      if (*(double *)(v6 + 8 * v9) < v10)
        v10 = *(double *)(v6 + 8 * v9);
      v9 += 2;
    }
    while (v9 < v8);
    v11 = *(_QWORD *)(a4 + 24 * v5);
    v12 = *(_QWORD *)(a4 + 24 * v5 + 8);
    v13 = (v12 - v11) >> 3;
    if (v12 != v11)
      goto LABEL_7;
LABEL_13:
    v15 = 1.79769313e308;
    goto LABEL_14;
  }
  v10 = 1.79769313e308;
  v11 = *(_QWORD *)(a4 + 24 * v5);
  v12 = *(_QWORD *)(a4 + 24 * v5 + 8);
  v13 = (v12 - v11) >> 3;
  if (v12 == v11)
    goto LABEL_13;
LABEL_7:
  v14 = 0;
  v15 = 1.79769313e308;
  do
  {
    if (*(double *)(v11 + 8 * v14) < v15)
      v15 = *(double *)(v11 + 8 * v14);
    v14 += 2;
  }
  while (v14 < v13);
LABEL_14:
  v16 = *a3;
  v18 = *(_QWORD *)(a4 + 24 * *a3);
  v17 = *(_QWORD *)(a4 + 24 * *a3 + 8);
  v19 = (v17 - v18) >> 3;
  if (v10 >= v15)
  {
    if (v17 == v18)
    {
      v25 = 1.79769313e308;
      if (v7 != v6)
        goto LABEL_33;
    }
    else
    {
      v24 = 0;
      v25 = 1.79769313e308;
      do
      {
        if (*(double *)(v18 + 8 * v24) < v25)
          v25 = *(double *)(v18 + 8 * v24);
        v24 += 2;
      }
      while (v24 < v19);
      if (v7 != v6)
      {
LABEL_33:
        v26 = 0;
        v27 = 1.79769313e308;
        do
        {
          if (*(double *)(v6 + 8 * v26) < v27)
            v27 = *(double *)(v6 + 8 * v26);
          v26 += 2;
        }
        while (v26 < v8);
        if (v25 >= v27)
          return result;
LABEL_55:
        *a2 = v16;
        *a3 = v4;
        v36 = *result;
        v37 = *(_QWORD *)(a4 + 24 * *a2);
        v38 = *(_QWORD *)(a4 + 24 * *a2 + 8);
        v39 = v38 - v37;
        if (v38 == v37)
        {
          v42 = 1.79769313e308;
          v43 = *(_QWORD *)(a4 + 24 * v36);
          v49 = *(_QWORD *)(a4 + 24 * v36 + 8);
          v45 = v49 - v43;
          if (v49 != v43)
            goto LABEL_61;
        }
        else
        {
          v40 = 0;
          v41 = v39 >> 3;
          v42 = 1.79769313e308;
          do
          {
            if (*(double *)(v37 + 8 * v40) < v42)
              v42 = *(double *)(v37 + 8 * v40);
            v40 += 2;
          }
          while (v40 < v41);
          v43 = *(_QWORD *)(a4 + 24 * v36);
          v44 = *(_QWORD *)(a4 + 24 * v36 + 8);
          v45 = v44 - v43;
          if (v44 != v43)
          {
LABEL_61:
            v46 = 0;
            v47 = v45 >> 3;
            v48 = 1.79769313e308;
            do
            {
              if (*(double *)(v43 + 8 * v46) < v48)
                v48 = *(double *)(v43 + 8 * v46);
              v46 += 2;
            }
            while (v46 < v47);
            if (v42 >= v48)
              return result;
LABEL_72:
            *result = *a2;
            *a2 = v36;
            return result;
          }
        }
        if (v42 >= 1.79769313e308)
          return result;
        goto LABEL_72;
      }
    }
    if (v25 >= 1.79769313e308)
      return result;
    goto LABEL_55;
  }
  if (v17 == v18)
  {
    v21 = 1.79769313e308;
    if (v7 != v6)
      goto LABEL_21;
  }
  else
  {
    v20 = 0;
    v21 = 1.79769313e308;
    do
    {
      if (*(double *)(v18 + 8 * v20) < v21)
        v21 = *(double *)(v18 + 8 * v20);
      v20 += 2;
    }
    while (v20 < v19);
    if (v7 != v6)
    {
LABEL_21:
      v22 = 0;
      v23 = 1.79769313e308;
      do
      {
        if (*(double *)(v6 + 8 * v22) < v23)
          v23 = *(double *)(v6 + 8 * v22);
        v22 += 2;
      }
      while (v22 < v8);
      if (v21 < v23)
        goto LABEL_26;
      goto LABEL_41;
    }
  }
  if (v21 < 1.79769313e308)
  {
LABEL_26:
    *result = v16;
    *a3 = v5;
    return result;
  }
LABEL_41:
  *result = v4;
  *a2 = v5;
  v28 = *(_QWORD *)(a4 + 24 * *a3);
  v29 = *(_QWORD *)(a4 + 24 * *a3 + 8);
  v30 = v29 - v28;
  if (v29 == v28)
  {
    v33 = 1.79769313e308;
    if (v12 != v11)
      goto LABEL_47;
  }
  else
  {
    v31 = 0;
    v32 = v30 >> 3;
    v33 = 1.79769313e308;
    do
    {
      if (*(double *)(v28 + 8 * v31) < v33)
        v33 = *(double *)(v28 + 8 * v31);
      v31 += 2;
    }
    while (v31 < v32);
    if (v12 != v11)
    {
LABEL_47:
      v34 = 0;
      v35 = 1.79769313e308;
      do
      {
        if (*(double *)(v11 + 8 * v34) < v35)
          v35 = *(double *)(v11 + 8 * v34);
        v34 += 2;
      }
      while (v34 < v13);
      if (v33 < v35)
        goto LABEL_69;
      return result;
    }
  }
  if (v33 < 1.79769313e308)
  {
LABEL_69:
    *a2 = *a3;
    *a3 = v5;
  }
  return result;
}

BOOL sub_1BE6938F8(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t *v53;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v36 = *(a2 - 1);
      v37 = *a1;
      v38 = **a3;
      v39 = *(_QWORD *)(v38 + 24 * v36);
      v40 = *(_QWORD *)(v38 + 24 * v36 + 8);
      v41 = v40 - v39;
      if (v40 != v39)
      {
        v42 = 0;
        v43 = v41 >> 3;
        v44 = 1.79769313e308;
        do
        {
          if (*(double *)(v39 + 8 * v42) < v44)
            v44 = *(double *)(v39 + 8 * v42);
          v42 += 2;
        }
        while (v42 < v43);
        v47 = (uint64_t *)(v38 + 24 * v37);
        v45 = *v47;
        v46 = v47[1];
        v48 = v46 - *v47;
        if (v46 != *v47)
          goto LABEL_44;
LABEL_54:
        if (v44 >= 1.79769313e308)
          return 1;
        goto LABEL_55;
      }
      v44 = 1.79769313e308;
      v53 = (uint64_t *)(v38 + 24 * v37);
      v45 = *v53;
      v52 = v53[1];
      v48 = v52 - *v53;
      if (v52 == *v53)
        goto LABEL_54;
LABEL_44:
      v49 = 0;
      v50 = v48 >> 3;
      v51 = 1.79769313e308;
      do
      {
        if (*(double *)(v45 + 8 * v49) < v51)
          v51 = *(double *)(v45 + 8 * v49);
        v49 += 2;
      }
      while (v49 < v50);
      if (v44 >= v51)
        return 1;
LABEL_55:
      *a1 = v36;
      *(a2 - 1) = v37;
      return 1;
    case 3:
      sub_1BE6935A4(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_1BE693CB0(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1BE693F50(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1BE6935A4(a1, a1 + 1, a1 + 2, **a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = **a3;
LABEL_7:
      v13 = *v9;
      v15 = *(_QWORD *)(v11 + 24 * *v9);
      v14 = *(_QWORD *)(v11 + 24 * *v9 + 8);
      v16 = (v14 - v15) >> 3;
      if (v14 == v15)
      {
        v18 = 1.79769313e308;
        v19 = *v8;
        v21 = *(_QWORD *)(v11 + 24 * *v8);
        v26 = *(_QWORD *)(v11 + 24 * *v8 + 8);
        v22 = v26 - v21;
        if (v26 != v21)
        {
LABEL_13:
          v23 = 0;
          v24 = v22 >> 3;
          v25 = 1.79769313e308;
          do
          {
            if (*(double *)(v21 + 8 * v23) < v25)
              v25 = *(double *)(v21 + 8 * v23);
            v23 += 2;
          }
          while (v23 < v24);
          if (v18 >= v25)
            goto LABEL_6;
LABEL_21:
          v12 = v9;
          while (1)
          {
            *v12 = v19;
            if (v8 == a1)
            {
              v12 = a1;
LABEL_5:
              *v12 = v13;
              if (++v10 != 8)
              {
LABEL_6:
                v8 = v9++;
                if (v9 == a2)
                  return 1;
                goto LABEL_7;
              }
              return v9 + 1 == a2;
            }
            v12 = v8;
            if (v14 == v15)
            {
              v29 = 1.79769313e308;
              --v8;
              v19 = *(v12 - 1);
              v30 = *(_QWORD *)(v11 + 24 * v19);
              v33 = *(_QWORD *)(v11 + 24 * v19 + 8);
              v32 = v33 - v30;
              if (v33 != v30)
                goto LABEL_33;
            }
            else
            {
              v28 = 0;
              v29 = 1.79769313e308;
              do
              {
                if (*(double *)(v15 + 8 * v28) < v29)
                  v29 = *(double *)(v15 + 8 * v28);
                v28 += 2;
              }
              while (v28 < v16);
              --v8;
              v19 = *(v12 - 1);
              v30 = *(_QWORD *)(v11 + 24 * v19);
              v31 = *(_QWORD *)(v11 + 24 * v19 + 8);
              v32 = v31 - v30;
              if (v31 != v30)
              {
LABEL_33:
                v34 = 0;
                v35 = v32 >> 3;
                v27 = 1.79769313e308;
                do
                {
                  if (*(double *)(v30 + 8 * v34) < v27)
                    v27 = *(double *)(v30 + 8 * v34);
                  v34 += 2;
                }
                while (v34 < v35);
                goto LABEL_23;
              }
            }
            v27 = 1.79769313e308;
LABEL_23:
            if (v29 >= v27)
              goto LABEL_5;
          }
        }
      }
      else
      {
        v17 = 0;
        v18 = 1.79769313e308;
        do
        {
          if (*(double *)(v15 + 8 * v17) < v18)
            v18 = *(double *)(v15 + 8 * v17);
          v17 += 2;
        }
        while (v17 < v16);
        v19 = *v8;
        v21 = *(_QWORD *)(v11 + 24 * *v8);
        v20 = *(_QWORD *)(v11 + 24 * *v8 + 8);
        v22 = v20 - v21;
        if (v20 != v21)
          goto LABEL_13;
      }
      if (v18 >= 1.79769313e308)
        goto LABEL_6;
      goto LABEL_21;
  }
}

uint64_t *sub_1BE693CB0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t *v55;

  result = sub_1BE6935A4(a1, a2, a3, **a5);
  v11 = *a3;
  v12 = **a5;
  v13 = *(_QWORD *)(v12 + 24 * *a4);
  v14 = *(_QWORD *)(v12 + 24 * *a4 + 8);
  v15 = v14 - v13;
  if (v14 == v13)
  {
    v18 = 1.79769313e308;
    v19 = *(_QWORD *)(v12 + 24 * v11);
    v25 = *(_QWORD *)(v12 + 24 * v11 + 8);
    v21 = v25 - v19;
    if (v25 != v19)
      goto LABEL_7;
LABEL_14:
    if (v18 >= 1.79769313e308)
      return result;
LABEL_15:
    *a3 = *a4;
    *a4 = v11;
    v26 = *a2;
    v27 = *(_QWORD *)(v12 + 24 * *a3);
    v28 = *(_QWORD *)(v12 + 24 * *a3 + 8);
    v29 = v28 - v27;
    if (v28 == v27)
    {
      v32 = 1.79769313e308;
      v33 = *(_QWORD *)(v12 + 24 * v26);
      v39 = *(_QWORD *)(v12 + 24 * v26 + 8);
      v35 = v39 - v33;
      if (v39 != v33)
        goto LABEL_21;
    }
    else
    {
      v30 = 0;
      v31 = v29 >> 3;
      v32 = 1.79769313e308;
      do
      {
        if (*(double *)(v27 + 8 * v30) < v32)
          v32 = *(double *)(v27 + 8 * v30);
        v30 += 2;
      }
      while (v30 < v31);
      v33 = *(_QWORD *)(v12 + 24 * v26);
      v34 = *(_QWORD *)(v12 + 24 * v26 + 8);
      v35 = v34 - v33;
      if (v34 != v33)
      {
LABEL_21:
        v36 = 0;
        v37 = v35 >> 3;
        v38 = 1.79769313e308;
        do
        {
          if (*(double *)(v33 + 8 * v36) < v38)
            v38 = *(double *)(v33 + 8 * v36);
          v36 += 2;
        }
        while (v36 < v37);
        if (v32 >= v38)
          return result;
LABEL_29:
        *a2 = *a3;
        *a3 = v26;
        v40 = *a1;
        v41 = *(_QWORD *)(v12 + 24 * *a2);
        v42 = *(_QWORD *)(v12 + 24 * *a2 + 8);
        v43 = v42 - v41;
        if (v42 == v41)
        {
          v46 = 1.79769313e308;
          v55 = (uint64_t *)(v12 + 24 * v40);
          v47 = *v55;
          v54 = v55[1];
          v50 = v54 - *v55;
          if (v54 != *v55)
            goto LABEL_35;
        }
        else
        {
          v44 = 0;
          v45 = v43 >> 3;
          v46 = 1.79769313e308;
          do
          {
            if (*(double *)(v41 + 8 * v44) < v46)
              v46 = *(double *)(v41 + 8 * v44);
            v44 += 2;
          }
          while (v44 < v45);
          v49 = (uint64_t *)(v12 + 24 * v40);
          v47 = *v49;
          v48 = v49[1];
          v50 = v48 - *v49;
          if (v48 != *v49)
          {
LABEL_35:
            v51 = 0;
            v52 = v50 >> 3;
            v53 = 1.79769313e308;
            do
            {
              if (*(double *)(v47 + 8 * v51) < v53)
                v53 = *(double *)(v47 + 8 * v51);
              v51 += 2;
            }
            while (v51 < v52);
            if (v46 >= v53)
              return result;
LABEL_43:
            *a1 = *a2;
            *a2 = v40;
            return result;
          }
        }
        if (v46 >= 1.79769313e308)
          return result;
        goto LABEL_43;
      }
    }
    if (v32 >= 1.79769313e308)
      return result;
    goto LABEL_29;
  }
  v16 = 0;
  v17 = v15 >> 3;
  v18 = 1.79769313e308;
  do
  {
    if (*(double *)(v13 + 8 * v16) < v18)
      v18 = *(double *)(v13 + 8 * v16);
    v16 += 2;
  }
  while (v16 < v17);
  v19 = *(_QWORD *)(v12 + 24 * v11);
  v20 = *(_QWORD *)(v12 + 24 * v11 + 8);
  v21 = v20 - v19;
  if (v20 == v19)
    goto LABEL_14;
LABEL_7:
  v22 = 0;
  v23 = v21 >> 3;
  v24 = 1.79769313e308;
  do
  {
    if (*(double *)(v19 + 8 * v22) < v24)
      v24 = *(double *)(v19 + 8 * v22);
    v22 += 2;
  }
  while (v22 < v23);
  if (v18 < v24)
    goto LABEL_15;
  return result;
}

uint64_t *sub_1BE693F50(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t *v71;

  result = sub_1BE693CB0(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = **a6;
  v15 = *(_QWORD *)(v14 + 24 * *a5);
  v16 = *(_QWORD *)(v14 + 24 * *a5 + 8);
  v17 = v16 - v15;
  if (v16 == v15)
  {
    v20 = 1.79769313e308;
    v21 = *(_QWORD *)(v14 + 24 * v13);
    v27 = *(_QWORD *)(v14 + 24 * v13 + 8);
    v23 = v27 - v21;
    if (v27 != v21)
      goto LABEL_7;
LABEL_14:
    if (v20 >= 1.79769313e308)
      return result;
LABEL_15:
    *a4 = *a5;
    *a5 = v13;
    v28 = *a3;
    v29 = *(_QWORD *)(v14 + 24 * *a4);
    v30 = *(_QWORD *)(v14 + 24 * *a4 + 8);
    v31 = v30 - v29;
    if (v30 == v29)
    {
      v34 = 1.79769313e308;
      v35 = *(_QWORD *)(v14 + 24 * v28);
      v41 = *(_QWORD *)(v14 + 24 * v28 + 8);
      v37 = v41 - v35;
      if (v41 != v35)
        goto LABEL_21;
    }
    else
    {
      v32 = 0;
      v33 = v31 >> 3;
      v34 = 1.79769313e308;
      do
      {
        if (*(double *)(v29 + 8 * v32) < v34)
          v34 = *(double *)(v29 + 8 * v32);
        v32 += 2;
      }
      while (v32 < v33);
      v35 = *(_QWORD *)(v14 + 24 * v28);
      v36 = *(_QWORD *)(v14 + 24 * v28 + 8);
      v37 = v36 - v35;
      if (v36 != v35)
      {
LABEL_21:
        v38 = 0;
        v39 = v37 >> 3;
        v40 = 1.79769313e308;
        do
        {
          if (*(double *)(v35 + 8 * v38) < v40)
            v40 = *(double *)(v35 + 8 * v38);
          v38 += 2;
        }
        while (v38 < v39);
        if (v34 >= v40)
          return result;
LABEL_29:
        *a3 = *a4;
        *a4 = v28;
        v42 = *a2;
        v43 = *(_QWORD *)(v14 + 24 * *a3);
        v44 = *(_QWORD *)(v14 + 24 * *a3 + 8);
        v45 = v44 - v43;
        if (v44 == v43)
        {
          v48 = 1.79769313e308;
          v49 = *(_QWORD *)(v14 + 24 * v42);
          v55 = *(_QWORD *)(v14 + 24 * v42 + 8);
          v51 = v55 - v49;
          if (v55 != v49)
            goto LABEL_35;
        }
        else
        {
          v46 = 0;
          v47 = v45 >> 3;
          v48 = 1.79769313e308;
          do
          {
            if (*(double *)(v43 + 8 * v46) < v48)
              v48 = *(double *)(v43 + 8 * v46);
            v46 += 2;
          }
          while (v46 < v47);
          v49 = *(_QWORD *)(v14 + 24 * v42);
          v50 = *(_QWORD *)(v14 + 24 * v42 + 8);
          v51 = v50 - v49;
          if (v50 != v49)
          {
LABEL_35:
            v52 = 0;
            v53 = v51 >> 3;
            v54 = 1.79769313e308;
            do
            {
              if (*(double *)(v49 + 8 * v52) < v54)
                v54 = *(double *)(v49 + 8 * v52);
              v52 += 2;
            }
            while (v52 < v53);
            if (v48 >= v54)
              return result;
LABEL_43:
            *a2 = *a3;
            *a3 = v42;
            v56 = *a1;
            v57 = *(_QWORD *)(v14 + 24 * *a2);
            v58 = *(_QWORD *)(v14 + 24 * *a2 + 8);
            v59 = v58 - v57;
            if (v58 == v57)
            {
              v62 = 1.79769313e308;
              v71 = (uint64_t *)(v14 + 24 * v56);
              v63 = *v71;
              v70 = v71[1];
              v66 = v70 - *v71;
              if (v70 != *v71)
                goto LABEL_49;
            }
            else
            {
              v60 = 0;
              v61 = v59 >> 3;
              v62 = 1.79769313e308;
              do
              {
                if (*(double *)(v57 + 8 * v60) < v62)
                  v62 = *(double *)(v57 + 8 * v60);
                v60 += 2;
              }
              while (v60 < v61);
              v65 = (uint64_t *)(v14 + 24 * v56);
              v63 = *v65;
              v64 = v65[1];
              v66 = v64 - *v65;
              if (v64 != *v65)
              {
LABEL_49:
                v67 = 0;
                v68 = v66 >> 3;
                v69 = 1.79769313e308;
                do
                {
                  if (*(double *)(v63 + 8 * v67) < v69)
                    v69 = *(double *)(v63 + 8 * v67);
                  v67 += 2;
                }
                while (v67 < v68);
                if (v62 >= v69)
                  return result;
LABEL_57:
                *a1 = *a2;
                *a2 = v56;
                return result;
              }
            }
            if (v62 >= 1.79769313e308)
              return result;
            goto LABEL_57;
          }
        }
        if (v48 >= 1.79769313e308)
          return result;
        goto LABEL_43;
      }
    }
    if (v34 >= 1.79769313e308)
      return result;
    goto LABEL_29;
  }
  v18 = 0;
  v19 = v17 >> 3;
  v20 = 1.79769313e308;
  do
  {
    if (*(double *)(v15 + 8 * v18) < v20)
      v20 = *(double *)(v15 + 8 * v18);
    v18 += 2;
  }
  while (v18 < v19);
  v21 = *(_QWORD *)(v14 + 24 * v13);
  v22 = *(_QWORD *)(v14 + 24 * v13 + 8);
  v23 = v22 - v21;
  if (v22 == v21)
    goto LABEL_14;
LABEL_7:
  v24 = 0;
  v25 = v23 >> 3;
  v26 = 1.79769313e308;
  do
  {
    if (*(double *)(v21 + 8 * v24) < v26)
      v26 = *(double *)(v21 + 8 * v24);
    v24 += 2;
  }
  while (v24 < v25);
  if (v20 < v26)
    goto LABEL_15;
  return result;
}

void sub_1BE6942B0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F930();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F100();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_1BE694488(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_1BE61F930();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_1BE694588(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  _OWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_1BE670C48(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = operator new(0x30uLL);
        v11[2] = *((_OWORD *)v6 + 2);
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t *)v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = sub_1BE61F5C0(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t sub_1BE694694(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_1BE62033C(i - 24, *(_QWORD **)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1BE6946E8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_1BE61F930();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1BE61F100();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_1BE694884(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  uint64_t v93;
  double v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t *v101;
  double v102;
  double v103;
  uint64_t *v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  uint64_t v156;
  uint64_t v157;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v87 = *(a2 - 1);
        v88 = *v10;
        if (*(double *)(**a3 + 8 * v87) < *(double *)(**a3 + 8 * *v10))
        {
          *v10 = v87;
          goto LABEL_173;
        }
        return result;
      case 3:
        v89 = **a3;
        v88 = *v10;
        v90 = v10[1];
        v91 = *(double *)(v89 + 8 * v90);
        v92 = *(double *)(v89 + 8 * *v10);
        v93 = *(a2 - 1);
        v94 = *(double *)(v89 + 8 * v93);
        if (v91 >= v92)
        {
          if (v94 < v91)
          {
            v10[1] = v93;
            *(a2 - 1) = v90;
            v146 = *v10;
            v145 = v10[1];
            if (*(double *)(v89 + 8 * v145) < *(double *)(v89 + 8 * *v10))
            {
              *v10 = v145;
              v10[1] = v146;
            }
          }
        }
        else
        {
          if (v94 >= v91)
          {
            *v10 = v90;
            v10[1] = v88;
            v157 = *(a2 - 1);
            if (*(double *)(v89 + 8 * v157) >= v92)
              return result;
            v10[1] = v157;
          }
          else
          {
            *v10 = v93;
          }
LABEL_173:
          *(a2 - 1) = v88;
        }
        return result;
      case 4:
        v95 = v10 + 1;
        v96 = v10[1];
        v97 = v10 + 2;
        v98 = v10[2];
        v99 = **a3;
        v100 = *(double *)(v99 + 8 * v96);
        v101 = (uint64_t *)*v10;
        v102 = *(double *)(v99 + 8 * *v10);
        v103 = *(double *)(v99 + 8 * v98);
        if (v100 >= v102)
        {
          if (v103 >= v100)
          {
LABEL_167:
            v96 = v98;
            v147 = *(a2 - 1);
            if (*(double *)(v99 + 8 * v147) >= *(double *)(v99 + 8 * v96))
              return result;
LABEL_168:
            *v97 = v147;
            *(a2 - 1) = v96;
            v153 = *v97;
            v154 = *v95;
            v155 = *(double *)(v99 + 8 * v153);
            if (v155 < *(double *)(v99 + 8 * v154))
            {
              v10[1] = v153;
              v10[2] = v154;
              v156 = *v10;
              if (v155 < *(double *)(v99 + 8 * *v10))
              {
                *v10 = v153;
                v10[1] = v156;
              }
            }
            return result;
          }
          *v95 = v98;
          *v97 = v96;
          v104 = v10;
          v105 = (uint64_t **)(v10 + 1);
          result = v96;
          if (v103 >= v102)
          {
LABEL_158:
            v147 = *(a2 - 1);
            if (*(double *)(v99 + 8 * v147) >= *(double *)(v99 + 8 * v96))
              return result;
            goto LABEL_168;
          }
        }
        else
        {
          v104 = v10;
          v105 = (uint64_t **)(v10 + 2);
          result = *v10;
          if (v103 >= v100)
          {
            *v10 = v96;
            v10[1] = (uint64_t)v101;
            v104 = v10 + 1;
            v105 = (uint64_t **)(v10 + 2);
            result = (uint64_t)v101;
            if (v103 >= v102)
              goto LABEL_167;
          }
        }
        *v104 = v98;
        *v105 = v101;
        v96 = result;
        goto LABEL_158;
      case 5:
        return (uint64_t)sub_1BE695354(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, **a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v117 = (unint64_t)(v12 - 2) >> 1;
              v118 = v117;
              do
              {
                if (v117 >= v118)
                {
                  v120 = (2 * v118) | 1;
                  v121 = &v10[v120];
                  v122 = **a3;
                  if (2 * v118 + 2 < v12 && *(double *)(v122 + 8 * *v121) < *(double *)(v122 + 8 * v121[1]))
                  {
                    ++v121;
                    v120 = 2 * v118 + 2;
                  }
                  result = (uint64_t)&v10[v118];
                  v123 = *v121;
                  v124 = *(_QWORD *)result;
                  v125 = *(double *)(v122 + 8 * *(_QWORD *)result);
                  if (*(double *)(v122 + 8 * *v121) >= v125)
                  {
                    do
                    {
                      v126 = v121;
                      *(_QWORD *)result = v123;
                      if (v117 < v120)
                        break;
                      v127 = 2 * v120;
                      v120 = (2 * v120) | 1;
                      v121 = &v10[v120];
                      v128 = v127 + 2;
                      if (v128 < v12 && *(double *)(v122 + 8 * *v121) < *(double *)(v122 + 8 * v121[1]))
                      {
                        ++v121;
                        v120 = v128;
                      }
                      v123 = *v121;
                      result = (uint64_t)v126;
                    }
                    while (*(double *)(v122 + 8 * *v121) >= v125);
                    *v126 = v124;
                  }
                }
                v119 = v118-- <= 0;
              }
              while (!v119);
              v129 = (unint64_t)v11 >> 3;
              do
              {
                v130 = 0;
                v131 = *v10;
                v132 = *a3;
                v133 = v10;
                do
                {
                  v134 = v133;
                  v133 += v130 + 1;
                  v135 = 2 * v130;
                  v130 = (2 * v130) | 1;
                  v136 = v135 + 2;
                  if (v136 < v129)
                  {
                    result = v133[1];
                    if (*(double *)(*v132 + 8 * *v133) < *(double *)(*v132 + 8 * result))
                    {
                      ++v133;
                      v130 = v136;
                    }
                  }
                  *v134 = *v133;
                }
                while (v130 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                if (v133 == --a2)
                {
                  *v133 = v131;
                }
                else
                {
                  *v133 = *a2;
                  *a2 = v131;
                  v137 = (char *)v133 - (char *)v10 + 8;
                  if (v137 >= 9)
                  {
                    v138 = (((unint64_t)v137 >> 3) - 2) >> 1;
                    v139 = &v10[v138];
                    v140 = *v139;
                    v141 = *v133;
                    v142 = **a3;
                    v143 = *(double *)(v142 + 8 * *v133);
                    if (*(double *)(v142 + 8 * *v139) < v143)
                    {
                      do
                      {
                        v144 = v139;
                        *v133 = v140;
                        if (!v138)
                          break;
                        v138 = (v138 - 1) >> 1;
                        v139 = &v10[v138];
                        v140 = *v139;
                        v133 = v144;
                      }
                      while (*(double *)(v142 + 8 * *v139) < v143);
                      *v144 = v141;
                    }
                  }
                }
                v119 = v129-- <= 2;
              }
              while (!v119);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(double *)(v15 + 8 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(double *)(v15 + 8 * *v10);
            v25 = *(double *)(v15 + 8 * *v14);
            if (v24 >= v25)
            {
              if (v17 < v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(double *)(v15 + 8 * *v10) < *(double *)(v15 + 8 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 < v24)
              {
                *v14 = v16;
                goto LABEL_31;
              }
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(double *)(v15 + 8 * v40) < v25)
              {
                *v10 = v40;
LABEL_31:
                *(a2 - 1) = v23;
              }
            }
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(double *)(v15 + 8 * *v14);
          v21 = *(double *)(v15 + 8 * *v10);
          if (v20 >= v21)
          {
            if (v17 < v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(double *)(v15 + 8 * *v14) < *(double *)(v15 + 8 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 >= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(double *)(v15 + 8 * v29) >= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(double *)(v15 + 8 * v33);
          v36 = *(double *)(v15 + 8 * v34);
          v37 = *(a2 - 2);
          v38 = *(double *)(v15 + 8 * v37);
          if (v35 >= v36)
          {
            if (v38 < v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(double *)(v15 + 8 * *v31) < *(double *)(v15 + 8 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v41 = *(a2 - 2);
              if (*(double *)(v15 + 8 * v41) >= v36)
                goto LABEL_37;
              *v31 = v41;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v42 = &v10[v13];
          v45 = v42[1];
          v43 = v42 + 1;
          v44 = v45;
          v46 = v10[2];
          v47 = *(double *)(v15 + 8 * v45);
          v48 = *(double *)(v15 + 8 * v46);
          v49 = *(a2 - 3);
          v50 = *(double *)(v15 + 8 * v49);
          if (v47 >= v48)
          {
            if (v50 < v47)
            {
              *v43 = v49;
              *(a2 - 3) = v44;
              v51 = v10[2];
              if (*(double *)(v15 + 8 * *v43) < *(double *)(v15 + 8 * v51))
              {
                v10[2] = *v43;
                *v43 = v51;
              }
            }
          }
          else
          {
            if (v50 >= v47)
            {
              v10[2] = v44;
              *v43 = v46;
              v52 = *(a2 - 3);
              if (*(double *)(v15 + 8 * v52) >= v48)
                goto LABEL_46;
              *v43 = v52;
            }
            else
            {
              v10[2] = v49;
            }
            *(a2 - 3) = v46;
          }
LABEL_46:
          v53 = *v14;
          v54 = *v31;
          v55 = *(double *)(v15 + 8 * *v14);
          v56 = *(double *)(v15 + 8 * *v31);
          v57 = *v43;
          v58 = *(double *)(v15 + 8 * *v43);
          if (v55 < v56)
          {
            if (v58 >= v55)
            {
              *v31 = v53;
              *v14 = v54;
              v31 = v14;
              v53 = v57;
              if (v58 >= v56)
              {
                v59 = *v10;
                *v10 = v54;
                *v14 = v59;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v58 >= v55)
            goto LABEL_54;
          *v14 = v57;
          *v43 = v53;
          v43 = v14;
          v53 = v54;
          if (v58 < v56)
          {
LABEL_53:
            *v31 = v57;
            *v43 = v54;
LABEL_54:
            v60 = *v10;
            *v10 = v53;
            *v14 = v60;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v61 = *(double *)(v15 + 8 * v28);
            if (*(double *)(v15 + 8 * *(v10 - 1)) < v61)
              goto LABEL_56;
            if (v61 >= *(double *)(v15 + 8 * *(a2 - 1)))
            {
              v79 = v10 + 1;
              do
              {
                v10 = v79;
                if (v79 >= a2)
                  break;
                ++v79;
              }
              while (v61 >= *(double *)(v15 + 8 * *v10));
            }
            else
            {
              do
              {
                v78 = v10[1];
                ++v10;
              }
              while (v61 >= *(double *)(v15 + 8 * v78));
            }
            v80 = a2;
            if (v10 < a2)
            {
              v80 = a2;
              do
                v81 = *--v80;
              while (v61 < *(double *)(v15 + 8 * v81));
            }
            if (v10 < v80)
            {
              v82 = *v10;
              v83 = *v80;
              do
              {
                *v10 = v83;
                *v80 = v82;
                do
                {
                  v84 = v10[1];
                  ++v10;
                  v82 = v84;
                }
                while (v61 >= *(double *)(v15 + 8 * v84));
                do
                {
                  v85 = *--v80;
                  v83 = v85;
                }
                while (v61 < *(double *)(v15 + 8 * v85));
              }
              while (v10 < v80);
            }
            v86 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v86;
            a5 = 0;
            *v86 = v28;
            continue;
          }
          v77 = *v10;
          *v10 = v57;
          *v14 = v77;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v62 = 0;
          v63 = **a3;
          v64 = *(double *)(v63 + 8 * v28);
          do
            v65 = v10[++v62];
          while (*(double *)(v63 + 8 * v65) < v64);
          v66 = &v10[v62];
          v67 = a2;
          if (v62 == 1)
          {
            v67 = a2;
            do
            {
              if (v66 >= v67)
                break;
              v69 = *--v67;
            }
            while (*(double *)(v63 + 8 * v69) >= v64);
          }
          else
          {
            do
              v68 = *--v67;
            while (*(double *)(v63 + 8 * v68) >= v64);
          }
          if (v66 >= v67)
          {
            v75 = v66 - 1;
            if (v66 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v70 = *v67;
            v71 = &v10[v62];
            v72 = v67;
            do
            {
              *v71 = v70;
              *v72 = v65;
              do
              {
                v73 = v71[1];
                ++v71;
                v65 = v73;
              }
              while (*(double *)(v63 + 8 * v73) < v64);
              do
              {
                v74 = *--v72;
                v70 = v74;
              }
              while (*(double *)(v63 + 8 * v74) >= v64);
            }
            while (v71 < v72);
            v75 = v71 - 1;
            if (v71 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v75;
          }
LABEL_74:
          *v75 = v28;
          if (v66 < v67)
            goto LABEL_77;
          v76 = sub_1BE6954F0(v10, v75, *a3);
          v10 = v75 + 1;
          result = sub_1BE6954F0(v75 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v76)
              continue;
LABEL_77:
            result = sub_1BE694884(v9, v75, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v75 + 1;
            continue;
          }
          a2 = v75;
          if (v76)
            return result;
          goto LABEL_2;
        }
        v106 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v107 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v108 = *v106;
              v109 = 8;
              v110 = v10;
              do
              {
                v113 = *v110;
                v112 = v110[1];
                v110 = v107;
                v114 = *(double *)(v108 + 8 * v112);
                if (v114 < *(double *)(v108 + 8 * v113))
                {
                  v115 = v109;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v115) = v113;
                    v116 = v115 - 8;
                    if (v115 == 8)
                    {
                      v111 = v10;
                      goto LABEL_116;
                    }
                    v113 = *(uint64_t *)((char *)v10 + v115 - 16);
                    v115 -= 8;
                  }
                  while (v114 < *(double *)(v108 + 8 * v113));
                  v111 = (uint64_t *)((char *)v10 + v116);
LABEL_116:
                  *v111 = v112;
                }
                v107 = v110 + 1;
                v109 += 8;
              }
              while (v110 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v148 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v149 = *v106;
            do
            {
              v151 = *v9;
              v150 = v9[1];
              v9 = v148;
              v152 = *(double *)(v149 + 8 * v150);
              if (v152 < *(double *)(v149 + 8 * v151))
              {
                do
                {
                  *v148 = v151;
                  v151 = *(v148 - 2);
                  --v148;
                }
                while (v152 < *(double *)(v149 + 8 * v151));
                *v148 = v150;
              }
              v148 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t *sub_1BE695354(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a2;
  v7 = *result;
  v8 = *(double *)(a6 + 8 * *a2);
  v9 = *(double *)(a6 + 8 * *result);
  v10 = *a3;
  v11 = *(double *)(a6 + 8 * *a3);
  if (v8 >= v9)
  {
    if (v11 >= v8)
    {
      v6 = *a3;
      v13 = *a4;
      if (*(double *)(a6 + 8 * *a4) >= *(double *)(a6 + 8 * v10))
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v10;
    *a3 = v6;
    v12 = *result;
    if (*(double *)(a6 + 8 * *a2) < *(double *)(a6 + 8 * *result))
    {
      *result = *a2;
      *a2 = v12;
      v6 = *a3;
      v13 = *a4;
      if (*(double *)(a6 + 8 * *a4) >= *(double *)(a6 + 8 * *a3))
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v11 >= v8)
    {
      *result = v6;
      *a2 = v7;
      v6 = *a3;
      if (*(double *)(a6 + 8 * *a3) >= v9)
        goto LABEL_11;
      *a2 = v6;
    }
    else
    {
      *result = v10;
    }
    *a3 = v7;
    v6 = v7;
  }
LABEL_11:
  v13 = *a4;
  if (*(double *)(a6 + 8 * *a4) >= *(double *)(a6 + 8 * v6))
    goto LABEL_17;
LABEL_14:
  *a3 = v13;
  *a4 = v6;
  v14 = *a2;
  if (*(double *)(a6 + 8 * *a3) < *(double *)(a6 + 8 * *a2))
  {
    *a2 = *a3;
    *a3 = v14;
    v15 = *result;
    if (*(double *)(a6 + 8 * *a2) < *(double *)(a6 + 8 * *result))
    {
      *result = *a2;
      *a2 = v15;
    }
  }
LABEL_17:
  v16 = *a4;
  if (*(double *)(a6 + 8 * *a5) < *(double *)(a6 + 8 * *a4))
  {
    *a4 = *a5;
    *a5 = v16;
    v17 = *a3;
    if (*(double *)(a6 + 8 * *a4) < *(double *)(a6 + 8 * *a3))
    {
      *a3 = *a4;
      *a4 = v17;
      v18 = *a2;
      if (*(double *)(a6 + 8 * *a3) < *(double *)(a6 + 8 * *a2))
      {
        *a2 = *a3;
        *a3 = v18;
        v19 = *result;
        if (*(double *)(a6 + 8 * *a2) < *(double *)(a6 + 8 * *result))
        {
          *result = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL sub_1BE6954F0(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v14 = *(a2 - 1);
      v15 = *a1;
      if (*(double *)(*a3 + 8 * v14) >= *(double *)(*a3 + 8 * *a1))
        return 1;
      *a1 = v14;
      *(a2 - 1) = v15;
      return 1;
    case 3:
      v16 = *a3;
      v17 = *a1;
      v18 = a1[1];
      v19 = *(double *)(*a3 + 8 * v18);
      v20 = *(double *)(*a3 + 8 * *a1);
      v21 = *(a2 - 1);
      v22 = *(double *)(*a3 + 8 * v21);
      if (v19 >= v20)
      {
        if (v22 >= v19)
          return 1;
        a1[1] = v21;
        *(a2 - 1) = v18;
        v44 = *a1;
        v43 = a1[1];
        if (*(double *)(v16 + 8 * v43) >= *(double *)(v16 + 8 * *a1))
          return 1;
        *a1 = v43;
        a1[1] = v44;
        return 1;
      }
      else if (v22 >= v19)
      {
        *a1 = v18;
        a1[1] = v17;
        v50 = *(a2 - 1);
        if (*(double *)(v16 + 8 * v50) >= v20)
          return 1;
        a1[1] = v50;
        *(a2 - 1) = v17;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v17;
        return 1;
      }
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a3;
      v28 = *(double *)(*a3 + 8 * v24);
      v29 = *a1;
      v30 = *(double *)(*a3 + 8 * *a1);
      v31 = *(double *)(*a3 + 8 * v26);
      if (v28 < v30)
      {
        v32 = a1;
        v33 = a1 + 2;
        v34 = *a1;
        if (v31 >= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          v32 = a1 + 1;
          v33 = a1 + 2;
          v34 = v29;
          if (v31 >= v30)
            goto LABEL_38;
        }
LABEL_35:
        *v32 = v26;
        *v33 = v29;
        v24 = v34;
LABEL_36:
        v45 = *(a2 - 1);
        if (*(double *)(v27 + 8 * v45) >= *(double *)(v27 + 8 * v24))
          return 1;
        goto LABEL_39;
      }
      if (v31 < v28)
      {
        *v23 = v26;
        *v25 = v24;
        v32 = a1;
        v33 = a1 + 1;
        v34 = v24;
        if (v31 >= v30)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v24 = v26;
      v45 = *(a2 - 1);
      if (*(double *)(v27 + 8 * v45) >= *(double *)(v27 + 8 * v24))
        return 1;
LABEL_39:
      *v25 = v45;
      *(a2 - 1) = v24;
      v46 = *v25;
      v47 = *v23;
      v48 = *(double *)(v27 + 8 * v46);
      if (v48 >= *(double *)(v27 + 8 * v47))
        return 1;
      a1[1] = v46;
      a1[2] = v47;
      v49 = *a1;
      if (v48 >= *(double *)(v27 + 8 * *a1))
        return 1;
      *a1 = v46;
      a1[1] = v49;
      return 1;
    case 5:
      sub_1BE695354(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v5 = a1 + 2;
      v4 = a1[2];
      v6 = a1[1];
      v7 = *a3;
      v8 = *(double *)(*a3 + 8 * v6);
      v9 = *a1;
      v10 = *(double *)(*a3 + 8 * *a1);
      v11 = *(double *)(*a3 + 8 * v4);
      if (v8 >= v10)
      {
        if (v11 >= v8 || (a1[1] = v4, *v5 = v6, v12 = a1, v13 = a1 + 1, v11 >= v10))
        {
LABEL_20:
          v35 = a1 + 3;
          if (a1 + 3 == a2)
            return 1;
          v36 = 0;
          for (i = 24; ; i += 8)
          {
            v38 = *v35;
            v39 = *v5;
            v40 = *(double *)(v7 + 8 * *v35);
            if (v40 < *(double *)(v7 + 8 * v39))
              break;
LABEL_23:
            v5 = v35++;
            if (v35 == a2)
              return 1;
          }
          v41 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v41) = v39;
            v42 = v41 - 8;
            if (v41 == 8)
            {
              *a1 = v38;
              if (++v36 != 8)
                goto LABEL_23;
              return v35 + 1 == a2;
            }
            v39 = *(uint64_t *)((char *)a1 + v41 - 16);
            v41 -= 8;
          }
          while (v40 < *(double *)(v7 + 8 * v39));
          *(uint64_t *)((char *)a1 + v42) = v38;
          if (++v36 != 8)
            goto LABEL_23;
          return v35 + 1 == a2;
        }
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 >= v8)
        {
          *a1 = v6;
          a1[1] = v9;
          v12 = a1 + 1;
          v13 = a1 + 2;
          if (v11 >= v10)
            goto LABEL_20;
        }
      }
      *v12 = v4;
      *v13 = v9;
      goto LABEL_20;
  }
}

__n128 sub_1BE695874(uint64_t *a1, uint64_t *a2, __int128 *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  __n128 result;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  __int128 v54;

  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      if (sub_1BE695BB4((uint64_t)a3, *(a2 - 1), *a1))
      {
        v10 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      v22 = a4 >> 1;
      v23 = &a1[a4 >> 1];
      v24 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        sub_1BE695874(a1, v23, a3, v24, a5, a6);
        sub_1BE695874(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        result.n128_u64[0] = sub_1BE696058(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
        return result;
      }
      sub_1BE695D64(a1, v23, (uint64_t)a3, v24, a5);
      v25 = &a5[v22];
      result.n128_u64[0] = sub_1BE695D64(&v8[a4 >> 1], a2, (uint64_t)a3, a4 - (a4 >> 1), v25).n128_u64[0];
      v26 = v25;
      v27 = a5;
      v28 = v8;
      v29 = &a5[a4];
      do
      {
        if (v26 == v29)
        {
          if (v27 == v25)
            return result;
          v45 = (char *)&a5[v22] - (char *)v27 - 8;
          if (v45 >= 0x38 && (unint64_t)((char *)v8 - (char *)v27) >= 0x20)
          {
            v49 = 0;
            v50 = (v45 >> 3) + 1;
            v51 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            v46 = &v27[v51];
            v47 = &v28[v51];
            v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v53 = &v28[v49];
              result = *(__n128 *)&v27[v49];
              v54 = *(_OWORD *)&v27[v49 + 2];
              *(__n128 *)v53 = result;
              *((_OWORD *)v53 + 1) = v54;
              v49 += 4;
              v52 -= 4;
            }
            while (v52);
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v46 = v27;
            v47 = v28;
          }
          do
          {
            v48 = *v46++;
            *v47++ = v48;
          }
          while (v46 != v25);
          return result;
        }
        v30 = v26;
        v31 = sub_1BE695BB4((uint64_t)a3, *v26, *v27);
        if (v31)
          v32 = v30;
        else
          v32 = v27;
        v27 += v31 ^ 1u;
        v26 = &v30[v31];
        *v28++ = *v32;
        ++v8;
      }
      while (v27 != v25);
      if (v26 != v29)
      {
        v33 = -8;
        if (!v31)
          v33 = 0;
        v34 = (char *)&a5[a4] - (char *)v30 + v33 - 8;
        if (v34 < 0x68)
          goto LABEL_48;
        v35 = 8;
        if (!v31)
          v35 = 0;
        if ((unint64_t)((char *)v8 - (char *)v30 - v35) < 0x20)
          goto LABEL_48;
        v36 = 0;
        v37 = (v34 >> 3) + 1;
        v38 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        v39 = &v26[v38];
        v40 = &v28[v38];
        v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = &v28[v36];
          result = *(__n128 *)&v26[v36];
          v43 = *(_OWORD *)&v26[v36 + 2];
          *(__n128 *)v42 = result;
          *((_OWORD *)v42 + 1) = v43;
          v36 += 4;
          v41 -= 4;
        }
        while (v41);
        v26 = v39;
        v28 = v40;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v44 = *v26++;
            *v28++ = v44;
          }
          while (v26 != v29);
        }
      }
    }
    else if (a1 != a2)
    {
      v12 = a1 + 1;
      if (a1 + 1 != a2)
      {
        v13 = 0;
        v14 = a1;
        do
        {
          v16 = *v14;
          v14 = v12;
          if (sub_1BE695BB4((uint64_t)a3, *v12, v16))
          {
            v17 = *v14;
            v18 = v13;
            do
            {
              v19 = (char *)v8 + v18;
              *(uint64_t *)((char *)v8 + v18 + 8) = *(uint64_t *)((char *)v8 + v18);
              if (!v18)
              {
                v15 = v8;
                goto LABEL_10;
              }
              v18 -= 8;
            }
            while ((sub_1BE695BB4((uint64_t)a3, v17, *((_QWORD *)v19 - 1)) & 1) != 0);
            v15 = (uint64_t *)((char *)v8 + v18 + 8);
LABEL_10:
            *v15 = v17;
          }
          v12 = v14 + 1;
          v13 += 8;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1BE695BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double MinX;
  double MaxX;
  double v9;
  double v10;
  int v11;
  double MidX;
  double v13;

  MinX = CGRectGetMinX(*(CGRect *)(**(_QWORD **)a1 + 32 * a2));
  if (MinX < CGRectGetMinX(*(CGRect *)(**(_QWORD **)a1 + 32 * a3)))
  {
    MaxX = CGRectGetMaxX(*(CGRect *)(**(_QWORD **)a1 + 32 * a2));
    if (MaxX > CGRectGetMaxX(*(CGRect *)(**(_QWORD **)a1 + 32 * a3)))
      return 1;
  }
  v9 = CGRectGetMinX(*(CGRect *)(**(_QWORD **)a1 + 32 * a3));
  if (v9 < CGRectGetMinX(*(CGRect *)(**(_QWORD **)a1 + 32 * a2)))
  {
    v10 = CGRectGetMaxX(*(CGRect *)(**(_QWORD **)a1 + 32 * a3));
    if (v10 > CGRectGetMaxX(*(CGRect *)(**(_QWORD **)a1 + 32 * a2)))
      return 0;
  }
  v11 = *(unsigned __int8 *)(a1 + 8);
  MidX = CGRectGetMidX(*(CGRect *)(**(_QWORD **)a1 + 32 * a2));
  v13 = CGRectGetMidX(*(CGRect *)(**(_QWORD **)a1 + 32 * a3));
  if (v11)
    return MidX > v13;
  else
    return MidX < v13;
}

__n128 sub_1BE695D64(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  int v11;
  __n128 result;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  __int128 v52;

  if (a4)
  {
    v5 = a5;
    v7 = a1;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      v11 = sub_1BE695BB4(a3, *(a2 - 1), *a1);
      if (v11)
        v13 = v10;
      else
        v13 = v7;
      *v5++ = *v13;
      if (!v11)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v22 = a4 >> 1;
      v23 = a4 >> 1;
      v24 = &a1[v23];
      sub_1BE695874(a1, &a1[v23], a3, a4 >> 1, a5, a4 >> 1);
      sub_1BE695874(&v7[v23], a2, a3, a4 - v22, &v5[v23], a4 - v22);
      v25 = v5;
      v26 = v7;
      v27 = v24;
      do
      {
        if (v27 == a2)
        {
          if (v26 == v24)
            return result;
          v43 = (char *)&v7[v22] - (char *)v26 - 8;
          if (v43 >= 0x38 && (unint64_t)((char *)v25 - (char *)v26) >= 0x20)
          {
            v47 = 0;
            v48 = (v43 >> 3) + 1;
            v49 = v48 & 0x3FFFFFFFFFFFFFFCLL;
            v44 = &v5[v49];
            v45 = &v26[v49];
            v50 = v48 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v51 = &v5[v47];
              result = *(__n128 *)&v26[v47];
              v52 = *(_OWORD *)&v26[v47 + 2];
              *(__n128 *)v51 = result;
              *((_OWORD *)v51 + 1) = v52;
              v47 += 4;
              v50 -= 4;
            }
            while (v50);
            if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v44 = v5;
            v45 = v26;
          }
          do
          {
            v46 = *v45++;
            *v44++ = v46;
          }
          while (v45 != v24);
          return result;
        }
        v28 = v27;
        v29 = sub_1BE695BB4(a3, *v27, *v26);
        if (v29)
          v30 = v28;
        else
          v30 = v26;
        v27 = &v28[v29];
        v26 += v29 ^ 1u;
        *v5++ = *v30;
        ++v25;
      }
      while (v26 != v24);
      if (v27 != a2)
      {
        v31 = -8;
        if (!v29)
          v31 = 0;
        v32 = (char *)a2 - (char *)v28 + v31 - 8;
        if (v32 < 0x68)
          goto LABEL_51;
        v33 = 8;
        if (!v29)
          v33 = 0;
        if ((unint64_t)((char *)v25 - (char *)v28 - v33) < 0x20)
          goto LABEL_51;
        v34 = 0;
        v35 = (v32 >> 3) + 1;
        v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        v37 = &v5[v36];
        v38 = &v27[v36];
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = &v5[v34];
          result = *(__n128 *)&v27[v34];
          v41 = *(_OWORD *)&v27[v34 + 2];
          *(__n128 *)v40 = result;
          *((_OWORD *)v40 + 1) = v41;
          v34 += 4;
          v39 -= 4;
        }
        while (v39);
        v5 = v37;
        v27 = v38;
        if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          do
          {
            v42 = *v27++;
            *v5++ = v42;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v14 = a1 + 1;
      *a5 = *a1;
      if (a1 + 1 != a2)
      {
        v15 = 0;
        v16 = a5;
        do
        {
          v18 = v16;
          v19 = *v16++;
          v20 = v16;
          if (sub_1BE695BB4(a3, *v14, v19))
          {
            v18[1] = *v18;
            v20 = v5;
            if (v18 != v5)
            {
              v21 = v15;
              while (1)
              {
                v20 = (uint64_t *)((char *)v5 + v21);
                if (!sub_1BE695BB4(a3, *v14, *(uint64_t *)((char *)v5 + v21 - 8)))
                  break;
                *v20 = *(v20 - 1);
                v21 -= 8;
                if (!v21)
                {
                  v20 = v5;
                  break;
                }
              }
            }
          }
          v17 = *v14++;
          *v20 = v17;
          v15 += 8;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

__n128 sub_1BE696058(uint64_t *a1, uint64_t *a2, uint64_t *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  unint64_t v15;
  uint64_t v16;
  __n128 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  __n128 *v69;
  __n128 *v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __n128 *v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *__src;
  uint64_t *v106;
  uint64_t v107;
  __int128 v108;

  v107 = a6;
  if (!a6)
    return result;
  while (a5 > a8 && v107 > a8)
  {
    if (!a5)
      return result;
    v15 = 0;
    v16 = -a5;
    while ((sub_1BE695BB4((uint64_t)a4, *a2, a1[v15 / 8]) & 1) == 0)
    {
      v15 += 8;
      if (__CFADD__(v16++, 1))
        return result;
    }
    v19 = -v16;
    __src = a7;
    v20 = v107;
    v106 = a3;
    if (-v16 >= v107)
    {
      if (v16 == -1)
      {
        v85 = a1[v15 / 8];
        a1[v15 / 8] = *a2;
        *a2 = v85;
        return result;
      }
      if (v16 > 0)
        v19 = 1 - v16;
      v29 = v19 >> 1;
      v24 = &a1[(v19 >> 1) + v15 / 8];
      v108 = *a4;
      v36 = a3;
      v23 = a2;
      if (a2 != v36)
      {
        v102 = v29;
        v37 = v106 - a2;
        v23 = a2;
        do
        {
          v38 = &v23[v37 >> 1];
          v40 = *v38;
          v39 = v38 + 1;
          v41 = sub_1BE695BB4((uint64_t)&v108, v40, *v24);
          if (v41)
            v37 += ~(v37 >> 1);
          else
            v37 >>= 1;
          if (v41)
            v23 = v39;
        }
        while (v37);
        v29 = v102;
        v20 = v107;
      }
      v22 = v23 - a2;
      if (v24 != a2)
      {
LABEL_22:
        v30 = (char *)v23 - (char *)a2;
        if (v23 == a2)
        {
          a2 = v24;
        }
        else
        {
          v101 = v29;
          v104 = v22;
          v31 = v24 + 1;
          if (v24 + 1 == a2)
          {
            v42 = a8;
            v43 = *v24;
            memmove(v24, a2, (char *)v23 - (char *)a2);
            a2 = (uint64_t *)((char *)v24 + v30);
            *(uint64_t *)((char *)v24 + v30) = v43;
            a8 = v42;
          }
          else
          {
            v32 = a2 + 1;
            if (a2 + 1 == v23)
            {
              v44 = *(v23 - 1);
              a2 = v24 + 1;
              if (v23 - 1 != v24)
                memmove(v24 + 1, v24, (char *)(v23 - 1) - (char *)v24);
              *v24 = v44;
            }
            else
            {
              v33 = a2 - v24;
              if (v33 == v30 >> 3)
              {
                do
                {
                  v34 = *(v31 - 1);
                  *(v31 - 1) = *(v32 - 1);
                  *(v32 - 1) = v34;
                  if (v31 == a2)
                    break;
                  ++v31;
                }
                while (v32++ != v23);
              }
              else
              {
                v45 = v30 >> 3;
                v46 = a2 - v24;
                do
                {
                  v47 = v46;
                  v46 = v45;
                  v45 = v47 % v45;
                }
                while (v45);
                if (v46)
                {
                  v48 = &v24[v46];
                  do
                  {
                    v50 = *--v48;
                    v49 = v50;
                    v51 = &v48[v33];
                    v52 = v48;
                    do
                    {
                      v53 = v51;
                      *v52 = *v51;
                      v54 = v23 - v51;
                      v55 = __OFSUB__(v33, v54);
                      v57 = v33 - v54;
                      v56 = (v57 < 0) ^ v55;
                      v51 = &v24[v57];
                      if (v56)
                        v51 = &v53[v33];
                      v52 = v53;
                    }
                    while (v51 != v48);
                    *v53 = v49;
                  }
                  while (v48 != v24);
                }
                a2 = &v24[v30 >> 3];
              }
            }
          }
          v20 = v107;
          v29 = v101;
          v22 = v104;
        }
        goto LABEL_60;
      }
    }
    else
    {
      if (v107 >= 0)
        v21 = v107;
      else
        v21 = v107 + 1;
      v22 = v21 >> 1;
      v23 = &a2[v21 >> 1];
      v24 = a2;
      if ((char *)a2 - (char *)a1 != v15)
      {
        v103 = v21 >> 1;
        v100 = a8;
        v25 = (uint64_t)((char *)a2 - (char *)a1 - v15) >> 3;
        v24 = &a1[v15 / 8];
        do
        {
          v26 = &v24[v25 >> 1];
          v28 = *v26;
          v27 = v26 + 1;
          if (sub_1BE695BB4((uint64_t)a4, *v23, v28))
          {
            v25 >>= 1;
          }
          else
          {
            v24 = v27;
            v25 += ~(v25 >> 1);
          }
        }
        while (v25);
        a8 = v100;
        v20 = v107;
        v22 = v103;
      }
      v29 = (uint64_t)((char *)v24 - (char *)a1 - v15) >> 3;
      if (v24 != a2)
        goto LABEL_22;
    }
    a2 = v23;
LABEL_60:
    a5 = -v29 - v16;
    v58 = v20 - v22;
    if (v29 + v22 >= v20 - (v29 + v22) - v16)
    {
      v60 = a2;
      v61 = a5;
      a5 = v29;
      v62 = v22;
      sub_1BE696058(a2, v23, v106, a4, v61, v20 - v22, __src, a8);
      a2 = v24;
      a7 = __src;
      a3 = v60;
      a1 = (uint64_t *)((char *)a1 + v15);
      v107 = v62;
      if (!v62)
        return result;
    }
    else
    {
      v59 = v24;
      a7 = __src;
      sub_1BE696058(&a1[v15 / 8], v59, a2, a4, v29, v22, __src, a8);
      a1 = a2;
      a2 = v23;
      a3 = v106;
      v107 = v58;
      if (!v58)
        return result;
    }
  }
  if (a5 <= v107)
  {
    if (a1 != a2)
    {
      v73 = (char *)a2 - (char *)a1 - 8;
      v74 = a7;
      v75 = a1;
      if (v73 < 0x18)
        goto LABEL_113;
      v74 = a7;
      v75 = a1;
      if ((unint64_t)((char *)a7 - (char *)a1) < 0x20)
        goto LABEL_113;
      v76 = (v73 >> 3) + 1;
      v77 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      v74 = &a7[v77];
      v75 = &a1[v77];
      v78 = (__n128 *)(a1 + 2);
      v79 = (__n128 *)(a7 + 2);
      v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v78[-1];
        v81 = *v78;
        v79[-1] = result;
        *v79 = v81;
        v78 += 2;
        v79 += 2;
        v80 -= 4;
      }
      while (v80);
      if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_113:
        do
        {
          v82 = *v75++;
          *v74++ = v82;
        }
        while (v75 != a2);
      }
      if (v74 != a7)
      {
        while (a2 != a3)
        {
          v83 = sub_1BE695BB4((uint64_t)a4, *a2, *a7);
          if (v83)
            v84 = a2;
          else
            v84 = a7;
          a2 += v83;
          a7 += v83 ^ 1;
          *a1++ = *v84;
          if (a7 == v74)
            return result;
        }
        memmove(a1, a7, (char *)v74 - (char *)a7);
      }
    }
    return result;
  }
  v63 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v64 = v63 - 8;
  if ((unint64_t)(v63 - 8) < 0x18)
  {
    v65 = a7;
    v66 = a2;
    do
    {
LABEL_90:
      v86 = *v66++;
      *v65++ = v86;
    }
    while (v66 != a3);
    goto LABEL_91;
  }
  v65 = a7;
  v66 = a2;
  if ((unint64_t)((char *)a7 - (char *)a2) < 0x20)
    goto LABEL_90;
  v67 = (v64 >> 3) + 1;
  v68 = v67 & 0x3FFFFFFFFFFFFFFCLL;
  v65 = &a7[v68];
  v66 = &a2[v68];
  v69 = (__n128 *)(a2 + 2);
  v70 = (__n128 *)(a7 + 2);
  v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = v69[-1];
    v72 = *v69;
    v70[-1] = result;
    *v70 = v72;
    v69 += 2;
    v70 += 2;
    v71 -= 4;
  }
  while (v71);
  if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_90;
LABEL_91:
  if (v65 != a7)
  {
    v87 = a3;
    while (a2 != a1)
    {
      v88 = sub_1BE695BB4((uint64_t)a4, *(v65 - 1), *(a2 - 1));
      if (v88)
        v89 = a2;
      else
        v89 = v65;
      if (v88)
        --a2;
      else
        --v65;
      *--a3 = *(v89 - 1);
      --v87;
      if (v65 == a7)
        return result;
    }
    v90 = (char *)v65 - (char *)a7 - 8;
    if (v90 < 0x58 || (unint64_t)((char *)v65 - (char *)v87) < 0x20)
    {
      v91 = v65;
      v92 = a3;
      goto LABEL_105;
    }
    v95 = 0;
    v96 = (v90 >> 3) + 1;
    v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
    v91 = &v65[v97 / 0xFFFFFFFFFFFFFFF8];
    v92 = &a3[v97 / 0xFFFFFFFFFFFFFFF8];
    v98 = v96 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = *(__n128 *)&v65[v95 - 2];
      v99 = &a3[v95];
      *((_OWORD *)v99 - 2) = *(_OWORD *)&v65[v95 - 4];
      *((__n128 *)v99 - 1) = result;
      v95 -= 4;
      v98 -= 4;
    }
    while (v98);
    if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_105:
      v93 = v92 - 1;
      do
      {
        v94 = *--v91;
        *v93-- = v94;
      }
      while (v91 != a7);
    }
  }
  return result;
}

void sub_1BE696698(CGRect *a1, CGRect *a2, uint64_t a3, char a4)
{
  CGRect *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  CGRect *v12;
  uint64_t v13;
  CGSize v14;
  double v15;
  uint64_t v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  CGRect *v22;
  CGRect *v23;
  double v24;
  double v25;
  CGPoint *v26;
  CGSize v27;
  double v28;
  double v29;
  CGSize v30;
  BOOL v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double v36;
  double v37;
  CGRect *v38;
  double v39;
  CGFloat v40;
  CGRect *v41;
  double v42;
  CGSize v43;
  double v44;
  double v45;
  CGSize v46;
  CGRect *v47;
  double MinX;
  CGSize v49;
  CGRect *v50;
  BOOL v52;
  uint64_t v53;
  CGRect *v54;
  CGFloat *v55;
  CGFloat *p_x;
  double v57;
  CGFloat v58;
  CGFloat y;
  CGFloat width;
  uint64_t v61;
  CGFloat height;
  char *v63;
  __int128 v64;
  double v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  CGRect *v70;
  double v71;
  CGRect *v72;
  double v73;
  CGFloat x;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  double v78;
  CGPoint *p_origin;
  CGSize v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  CGPoint *v85;
  _OWORD *v87;
  uint64_t v88;
  CGRect *v89;
  CGSize v90;
  CGPoint *v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  CGSize v95;
  uint64_t v96;
  unint64_t v97;
  CGRect *v98;
  double v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  CGPoint *v104;
  CGSize v105;
  double v106;
  _QWORD *v107;
  double v108;
  uint64_t v109;
  CGFloat v110;
  CGFloat v111;
  _OWORD *v112;
  CGFloat v113;
  CGFloat *v114;
  __int128 v115;
  uint64_t v116;
  CGFloat v117;
  CGFloat v118;
  double v119;
  CGRect *v120;
  CGPoint v121;
  CGPoint v122;
  CGPoint v123;
  CGPoint origin;
  CGPoint v125;
  CGSize v126;
  CGSize v127;
  CGSize v128;
  CGSize size;
  CGSize v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;

void sub_1BE69705C(CGRect *a1, CGPoint *a2, CGPoint *a3, CGPoint *a4, CGPoint *a5)
{
  double MinX;
  CGPoint v11;
  CGPoint v12;
  CGPoint v13;
  CGFloat y;
  double v15;
  CGPoint v16;
  CGPoint v17;
  CGPoint v18;
  CGFloat v19;
  double v20;
  CGPoint v21;
  CGPoint v22;
  CGPoint v23;
  CGFloat v24;
  double v25;
  CGSize size;
  CGPoint origin;
  CGSize v28;

  sub_1BE6974B4(a1, a2, a3, a4);
  MinX = CGRectGetMinX(*(CGRect *)&a5->x);
  if (MinX < CGRectGetMinX(*(CGRect *)&a4->x))
  {
    v12 = *a4;
    v11 = a4[1];
    v13 = a5[1];
    *a4 = *a5;
    a4[1] = v13;
    *a5 = v12;
    a5[1] = v11;
    v11.x = a4->x;
    v12.x = a4->y;
    v13.x = a4[1].x;
    y = a4[1].y;
    v15 = CGRectGetMinX(*(CGRect *)((char *)&v12 - 8));
    if (v15 < CGRectGetMinX(*(CGRect *)&a3->x))
    {
      v17 = *a3;
      v16 = a3[1];
      v18 = a4[1];
      *a3 = *a4;
      a3[1] = v18;
      *a4 = v17;
      a4[1] = v16;
      v16.x = a3->x;
      v17.x = a3->y;
      v18.x = a3[1].x;
      v19 = a3[1].y;
      v20 = CGRectGetMinX(*(CGRect *)((char *)&v17 - 8));
      if (v20 < CGRectGetMinX(*(CGRect *)&a2->x))
      {
        v22 = *a2;
        v21 = a2[1];
        v23 = a3[1];
        *a2 = *a3;
        a2[1] = v23;
        *a3 = v22;
        a3[1] = v21;
        v21.x = a2->x;
        v22.x = a2->y;
        v23.x = a2[1].x;
        v24 = a2[1].y;
        v25 = CGRectGetMinX(*(CGRect *)((char *)&v22 - 8));
        if (v25 < CGRectGetMinX(*a1))
        {
          origin = a1->origin;
          size = a1->size;
          v28 = (CGSize)a2[1];
          a1->origin = *a2;
          a1->size = v28;
          *a2 = origin;
          a2[1] = (CGPoint)size;
        }
      }
    }
  }
}

void sub_1BE69717C(CGRect *a1, CGPoint *a2, CGPoint *a3)
{
  double MinX;
  double v7;
  double v8;
  double v9;
  CGSize v10;
  CGPoint v11;
  CGSize v12;
  CGPoint v13;
  CGPoint v14;
  CGPoint v15;
  CGFloat y;
  double v17;
  CGSize size;
  CGPoint origin;
  CGSize v20;
  CGSize v21;
  CGPoint v22;
  CGSize v23;
  CGFloat v24;
  double v25;
  CGPoint v26;

  MinX = CGRectGetMinX(*(CGRect *)&a2->x);
  v7 = CGRectGetMinX(*a1);
  v8 = CGRectGetMinX(*(CGRect *)&a3->x);
  v9 = CGRectGetMinX(*(CGRect *)&a2->x);
  if (MinX >= v7)
  {
    if (v8 < v9)
    {
      v14 = *a2;
      v13 = a2[1];
      v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      *a3 = v14;
      a3[1] = v13;
      v13.x = a2->x;
      v14.x = a2->y;
      v15.x = a2[1].x;
      y = a2[1].y;
      v17 = CGRectGetMinX(*(CGRect *)((char *)&v14 - 8));
      if (v17 < CGRectGetMinX(*a1))
      {
        origin = a1->origin;
        size = a1->size;
        v20 = (CGSize)a2[1];
        a1->origin = *a2;
        a1->size = v20;
        *a2 = origin;
        a2[1] = (CGPoint)size;
      }
    }
  }
  else
  {
    if (v8 >= v9)
    {
      v22 = a1->origin;
      v21 = a1->size;
      v23 = (CGSize)a2[1];
      a1->origin = *a2;
      a1->size = v23;
      *a2 = v22;
      a2[1] = (CGPoint)v21;
      v21.width = a3->x;
      v22.x = a3->y;
      v23.width = a3[1].x;
      v24 = a3[1].y;
      v25 = CGRectGetMinX(*(CGRect *)((char *)&v22 - 8));
      if (v25 >= CGRectGetMinX(*(CGRect *)&a2->x))
        return;
      v11 = *a2;
      v10 = (CGSize)a2[1];
      v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
    }
    else
    {
      v11 = a1->origin;
      v10 = a1->size;
      v12 = (CGSize)a3[1];
      a1->origin = *a3;
      a1->size = v12;
    }
    *a3 = v11;
    a3[1] = (CGPoint)v10;
  }
}

BOOL sub_1BE6972B0(__int128 *a1, CGRect *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  double MinX;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CGRect *v11;
  CGRect *v12;
  uint64_t v13;
  int v14;
  double v15;
  CGFloat x;
  CGFloat y;
  uint64_t v18;
  CGFloat height;
  CGFloat width;
  uint64_t v21;
  __int128 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  CGRect v26;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)&a2[-1];
      MinX = CGRectGetMinX(a2[-1]);
      if (MinX < CGRectGetMinX(*(CGRect *)a1))
      {
        v9 = *a1;
        v8 = a1[1];
        v10 = v6[1];
        *a1 = *v6;
        a1[1] = v10;
        *v6 = v9;
        v6[1] = v8;
      }
      return 1;
    case 3:
      sub_1BE69717C((CGRect *)a1, (CGPoint *)a1 + 2, &a2[-1].origin);
      return 1;
    case 4:
      sub_1BE6974B4((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4, &a2[-1].origin);
      return 1;
    case 5:
      sub_1BE69705C((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4, (CGPoint *)a1 + 6, &a2[-1].origin);
      return 1;
    default:
      v11 = (CGRect *)(a1 + 4);
      sub_1BE69717C((CGRect *)a1, (CGPoint *)a1 + 2, (CGPoint *)a1 + 4);
      v12 = (CGRect *)(a1 + 6);
      if (a1 + 6 == (__int128 *)a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = CGRectGetMinX(*v12);
    if (v15 < CGRectGetMinX(*v11))
      break;
LABEL_13:
    v11 = v12;
    v13 += 32;
    if (++v12 == a2)
      return 1;
  }
  x = v12->origin.x;
  y = v12->origin.y;
  v18 = v13;
  width = v12->size.width;
  height = v12->size.height;
  do
  {
    v21 = (uint64_t)a1 + v18;
    v22 = *(__int128 *)((char *)a1 + v18 + 80);
    *(_OWORD *)(v21 + 96) = *(__int128 *)((char *)a1 + v18 + 64);
    *(_OWORD *)(v21 + 112) = v22;
    if (v18 == -64)
    {
      *(CGFloat *)a1 = x;
      *((CGFloat *)a1 + 1) = y;
      *((CGFloat *)a1 + 2) = width;
      *((CGFloat *)a1 + 3) = height;
      if (++v14 != 8)
        goto LABEL_13;
      return &v12[1] == a2;
    }
    v26.origin.x = x;
    v26.origin.y = y;
    v26.size.width = width;
    v26.size.height = height;
    v23 = CGRectGetMinX(v26);
    v18 -= 32;
  }
  while (v23 < CGRectGetMinX(*(CGRect *)(v21 + 32)));
  v24 = (uint64_t)a1 + v18;
  *(CGFloat *)(v24 + 96) = x;
  *(CGFloat *)(v24 + 104) = y;
  v25 = (uint64_t)a1 + v18 + 96;
  *(CGFloat *)(v25 + 16) = width;
  *(CGFloat *)(v25 + 24) = height;
  if (++v14 != 8)
    goto LABEL_13;
  return &v12[1] == a2;
}

void sub_1BE6974B4(CGRect *a1, CGPoint *a2, CGPoint *a3, CGPoint *a4)
{
  double MinX;
  CGPoint v9;
  CGPoint v10;
  CGPoint v11;
  CGFloat y;
  double v13;
  CGPoint v14;
  CGPoint v15;
  CGPoint v16;
  CGFloat v17;
  double v18;
  CGSize size;
  CGPoint origin;
  CGSize v21;

  sub_1BE69717C(a1, a2, a3);
  MinX = CGRectGetMinX(*(CGRect *)&a4->x);
  if (MinX < CGRectGetMinX(*(CGRect *)&a3->x))
  {
    v10 = *a3;
    v9 = a3[1];
    v11 = a4[1];
    *a3 = *a4;
    a3[1] = v11;
    *a4 = v10;
    a4[1] = v9;
    v9.x = a3->x;
    v10.x = a3->y;
    v11.x = a3[1].x;
    y = a3[1].y;
    v13 = CGRectGetMinX(*(CGRect *)((char *)&v10 - 8));
    if (v13 < CGRectGetMinX(*(CGRect *)&a2->x))
    {
      v15 = *a2;
      v14 = a2[1];
      v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      *a3 = v15;
      a3[1] = v14;
      v14.x = a2->x;
      v15.x = a2->y;
      v16.x = a2[1].x;
      v17 = a2[1].y;
      v18 = CGRectGetMinX(*(CGRect *)((char *)&v15 - 8));
      if (v18 < CGRectGetMinX(*a1))
      {
        origin = a1->origin;
        size = a1->size;
        v21 = (CGSize)a2[1];
        a1->origin = *a2;
        a1->size = v21;
        *a2 = origin;
        a2[1] = (CGPoint)size;
      }
    }
  }
}

void sub_1BE6990BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], a2, (uint64_t)&unk_1E7827C68, a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF567FC8;
  qword_1EF567FC8 = v6;

}

uint64_t sub_1BE699DE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE699F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE699F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t Script;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  int v16;

  Script = uscript_getScript();
  v8 = (void *)objc_opt_class();
  result = objc_msgSend_isSkippableScriptCode_(v8, v9, Script, v10, v11, v12);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v15 = *(_DWORD *)(v14 + 24);
  if (v15 == -1)
    v16 = Script;
  else
    v16 = *(_DWORD *)(v14 + 24);
  if (!(_DWORD)result)
    v16 = Script;
  if (v15 == -1 || v16 == v15)
  {
    *(_DWORD *)(v14 + 24) = v16;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == -1)
LABEL_14:
      *a5 = 1;
  }
  else
  {
    *(_DWORD *)(v14 + 24) = -1;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == -1)
      goto LABEL_14;
  }
  return result;
}

void sub_1BE69A678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE69A690(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE69A6A0(uint64_t a1)
{

}

void sub_1BE69A6A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  uint64_t ShortName;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;

  objc_msgSend_scriptCodeForCodepoint_(CHTextInputScriptSpec, a2, (uint64_t)a2, a4, a5, a6);
  v7 = (void *)MEMORY[0x1E0CB3940];
  ShortName = uscript_getShortName();
  objc_msgSend_stringWithUTF8String_(v7, v9, ShortName, v10, v11, v12);
  v35 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v13, (uint64_t)v35, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    v22 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v18, (uint64_t)v35, v19, v20, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend_unsignedLongValue(v23, v24, v25, v26, v27, v28);
    objc_msgSend_numberWithUnsignedLong_(v22, v30, v29 + 1, v31, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v34 = &unk_1E78284A8;
  }
  objc_msgSend_setObject_forKey_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v18, (uint64_t)v34, (uint64_t)v35, v20, v21);

}

uint64_t Segment::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  if (a1 != a2)
  {
    sub_1BE62037C((_QWORD *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
    sub_1BE66E294((_QWORD *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
    sub_1BE66E294((_QWORD *)(a1 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2);
  }
  return a1;
}

double Segment::horizontalOverlap(double *a1, double *a2, int a3)
{
  double v3;
  double v4;
  double *v5;
  double *v6;
  double v7;
  double result;

  v3 = a2[2];
  v4 = a1[2];
  if (v3 >= v4)
    v5 = a1;
  else
    v5 = a2;
  if (v3 >= v4)
    v6 = a2;
  else
    v6 = a1;
  v7 = v5[4];
  if (v6[4] < v7)
    return *v6;
  result = v7 - (v6[2] - (double)a3);
  if (result < 0.0)
    return 0.0;
  return result;
}

double Segment::verticalOverlap(double *a1, double *a2)
{
  double v2;
  double v3;
  double *v4;
  double *v5;
  double v6;
  double result;

  v2 = a2[3];
  v3 = a1[3];
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v6 = v4[5];
  if (v5[5] < v6)
    return v5[1];
  result = v6 - v5[3];
  if (result < 0.0)
    return 0.0;
  return result;
}

BOOL Segment::findIntersection(double *a1, double *a2)
{
  double v2;
  double v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double v14;

  v2 = a2[3];
  v3 = a1[3];
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v6 = v4[5];
  if (v5[5] >= v6)
  {
    v7 = v6 - v5[3];
    if (v7 < 0.0)
      v7 = 0.0;
  }
  else
  {
    v7 = v5[1];
  }
  v8 = a2[2];
  v9 = a1[2];
  if (v8 >= v9)
    v10 = a1;
  else
    v10 = a2;
  if (v8 >= v9)
    v11 = a2;
  else
    v11 = a1;
  v12 = v10[4];
  if (v11[4] >= v12)
  {
    v14 = v12 - (v11[2] + -5.0);
    if (v14 < 0.0)
      v14 = 0.0;
    return v14 > 0.0 && v7 > 0.0;
  }
  else
  {
    return *v11 > 0.0 && v7 > 0.0;
  }
}

BOOL Segment::verticalSeperated(Segment *this, const Segment *a2)
{
  char *v4;
  _DWORD *v5;
  _DWORD *v6;
  char *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  _DWORD *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  char *v40;
  _DWORD *v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  _BOOL8 v48;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  char *v56;
  __int128 *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  __int128 *v66;
  _OWORD *v67;
  __int128 *v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *((double *)this + 3);
  v9 = *((double *)a2 + 3);
  if (v8 >= v9)
    v10 = *((double *)a2 + 3);
  else
    v10 = *((double *)this + 3);
  v11 = (int)v10;
  v12 = *((double *)this + 5);
  if (v12 <= *((double *)a2 + 5))
    v12 = *((double *)a2 + 5);
  v13 = ((int)v12 - v11);
  v14 = (int)v13 + 1;
  if ((_DWORD)v13 != -1)
  {
    if ((int)v13 <= -2)
      sub_1BE61F930();
    v4 = (char *)operator new(4 * ((int)v13 + 1));
    memset_pattern16(v4, &unk_1BE8D5D20, 4 * v14);
    v5 = operator new(4 * v14);
    memset_pattern16(v5, &unk_1BE8D5D30, 4 * v14);
    v6 = operator new(4 * v14);
    memset_pattern16(v6, &unk_1BE8D5D20, 4 * v14);
    v7 = (char *)operator new(4 * v14);
    memset_pattern16(v7, &unk_1BE8D5D30, 4 * v14);
  }
  v15 = *((_QWORD *)this + 9);
  v16 = *((_QWORD *)this + 10) - v15;
  if (v16)
  {
    v17 = v16 >> 2;
    v18 = *((_QWORD *)this + 12);
    v19 = (int)v8 - v11;
    if (v17 <= 1)
      v20 = 1;
    else
      v20 = v17;
    if (v20 < 0x10)
    {
      v21 = 0;
LABEL_15:
      v22 = v20 - v21;
      v23 = (int *)(v18 + 4 * v21);
      v24 = (int *)(v15 + 4 * v21);
      v25 = v21 + v19;
      v26 = &v5[v25];
      v27 = &v4[v25 * 4];
      do
      {
        v28 = *v24++;
        *(_DWORD *)v27 = v28;
        v27 += 4;
        v29 = *v23++;
        *v26++ = v29;
        --v22;
      }
      while (v22);
      goto LABEL_17;
    }
    v21 = 0;
    v50 = v19;
    v51 = (char *)&v5[v19];
    v52 = &v4[4 * v19];
    if ((unint64_t)(v51 - v52) < 0x20)
      goto LABEL_15;
    if ((unint64_t)&v52[-v15] < 0x20)
      goto LABEL_15;
    if ((unint64_t)(v18 - (_QWORD)v52) < 0x20)
      goto LABEL_15;
    if ((unint64_t)&v51[-v15] < 0x20)
      goto LABEL_15;
    if ((unint64_t)&v51[-v18] < 0x20)
      goto LABEL_15;
    v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    v53 = v50 * 4 + 16;
    v54 = &v5[v50 + 4];
    v55 = (__int128 *)(v18 + 16);
    v56 = &v4[v53];
    v57 = (__int128 *)(v15 + 16);
    v58 = v20 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v59 = *v57;
      *((_OWORD *)v56 - 1) = *(v57 - 1);
      *(_OWORD *)v56 = v59;
      v60 = *v55;
      *(v54 - 1) = *(v55 - 1);
      *v54 = v60;
      v54 += 2;
      v55 += 2;
      v56 += 32;
      v57 += 2;
      v58 -= 8;
    }
    while (v58);
    if (v20 != v21)
      goto LABEL_15;
  }
LABEL_17:
  v30 = *((_QWORD *)a2 + 12);
  v31 = *((_QWORD *)a2 + 13) - v30;
  if (!v31)
    goto LABEL_24;
  v32 = v31 >> 2;
  v33 = *((_QWORD *)a2 + 9);
  v34 = (int)v9 - v11;
  if (v32 <= 1)
    v32 = 1;
  if (v32 < 0x10)
  {
    v35 = 0;
LABEL_22:
    v36 = v32 - v35;
    v37 = (int *)(v30 + 4 * v35);
    v38 = (int *)(v33 + 4 * v35);
    v39 = v35 + v34;
    v40 = &v7[v39 * 4];
    v41 = &v6[v39];
    do
    {
      v42 = *v38++;
      *v41++ = v42;
      v43 = *v37++;
      *(_DWORD *)v40 = v43;
      v40 += 4;
      --v36;
    }
    while (v36);
    goto LABEL_24;
  }
  v35 = 0;
  v61 = 4 * v34;
  v62 = &v7[4 * v34];
  v63 = (char *)&v6[v34];
  if ((unint64_t)(v62 - v63) < 0x20)
    goto LABEL_22;
  if ((unint64_t)&v63[-v33] < 0x20)
    goto LABEL_22;
  if ((unint64_t)(v30 - (_QWORD)v63) < 0x20)
    goto LABEL_22;
  if ((unint64_t)&v62[-v33] < 0x20)
    goto LABEL_22;
  if ((unint64_t)&v62[-v30] < 0x20)
    goto LABEL_22;
  v35 = v32 & 0xFFFFFFFFFFFFFFF8;
  v64 = v61 + 16;
  v65 = &v7[v61 + 16];
  v66 = (__int128 *)(v30 + 16);
  v67 = (_OWORD *)((char *)v6 + v64);
  v68 = (__int128 *)(v33 + 16);
  v69 = v32 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v70 = *v68;
    *(v67 - 1) = *(v68 - 1);
    *v67 = v70;
    v71 = *v66;
    *((_OWORD *)v65 - 1) = *(v66 - 1);
    *(_OWORD *)v65 = v71;
    v65 += 32;
    v66 += 2;
    v67 += 2;
    v68 += 2;
    v69 -= 8;
  }
  while (v69);
  if (v32 != v35)
    goto LABEL_22;
LABEL_24:
  if ((v13 & 0x80000000) != 0)
  {
    v48 = 1;
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (*v5 >= *v6)
  {
    v48 = 0;
    if (!v7)
      goto LABEL_33;
LABEL_32:
    operator delete(v7);
    goto LABEL_33;
  }
  v44 = 0;
  do
  {
    v45 = v44;
    if ((v13 + 1) - 1 == v44)
      break;
    v46 = v5[v44 + 1];
    v47 = v6[++v44];
  }
  while (v46 < v47);
  v48 = v45 >= v13;
  if (v7)
    goto LABEL_32;
LABEL_33:
  if (v6)
    operator delete(v6);
  if (v5)
    operator delete(v5);
  if (v4)
    operator delete(v4);
  return v48;
}

void sub_1BE69AD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  operator delete(v13);
  operator delete(v12);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void Segment::mergeBoundingBoxes(Segment *this@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char **v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  unint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  *(_OWORD *)(a4 + 48) = 0u;
  v6 = (char **)(a4 + 48);
  v7 = *((float64x2_t *)this + 2);
  v8 = a2[2];
  v9 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(a2[1], *((float64x2_t *)this + 1)), *((int8x16_t *)this + 1), (int8x16_t)a2[1]);
  *(_QWORD *)(a4 + 112) = 0;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  v10 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v8), (int8x16_t)v7, (int8x16_t)v8);
  *(float64x2_t *)(a4 + 16) = v9;
  *(float64x2_t *)(a4 + 32) = v10;
  *(float64x2_t *)a4 = vsubq_f64(v10, v9);
  if ((Segment *)a4 == this)
  {
    v15 = 0;
    v13 = 0;
    v11 = 0;
    v12 = (uint64_t *)(a4 + 56);
    v16 = 0;
    v17 = 0;
    v18 = 1;
  }
  else
  {
    sub_1BE62037C(v6, *((char **)this + 6), *((char **)this + 7), (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3);
    v13 = *(char **)(a4 + 56);
    v11 = *(_QWORD *)(a4 + 64);
    v12 = (uint64_t *)(a4 + 56);
    if ((unint64_t)v13 < v11)
    {
      *(_QWORD *)v13 = a3;
      v14 = (uint64_t)(v13 + 8);
      goto LABEL_27;
    }
    v15 = *v6;
    v16 = v13 - *v6;
    v17 = v16 >> 3;
    v18 = (v16 >> 3) + 1;
    if (v18 >> 61)
      sub_1BE61F930();
  }
  v19 = v11 - (_QWORD)v15;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      sub_1BE61F100();
    v21 = operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = a3;
    v14 = (uint64_t)(v22 + 1);
    v24 = v13 - v15;
    if (v13 == v15)
      goto LABEL_25;
  }
  else
  {
    v21 = 0;
    v22 = (_QWORD *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = a3;
    v14 = 8 * v17 + 8;
    v24 = v13 - v15;
    if (v13 == v15)
      goto LABEL_25;
  }
  v25 = v24 - 8;
  if (v25 < 0x58)
  {
    v26 = v13;
    goto LABEL_24;
  }
  if ((unint64_t)(v13 - &v21[v16]) < 0x20)
  {
    v26 = v13;
    do
    {
LABEL_24:
      v33 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      *--v22 = v33;
    }
    while (v26 != v15);
    goto LABEL_25;
  }
  v27 = (v25 >> 3) + 1;
  v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
  v26 = &v13[-v28];
  v22 = (_QWORD *)((char *)v22 - v28);
  v29 = &v21[8 * v17 - 16];
  v30 = v13 - 16;
  v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v32 = *(_OWORD *)v30;
    *(v29 - 1) = *((_OWORD *)v30 - 1);
    *v29 = v32;
    v29 -= 2;
    v30 -= 32;
    v31 -= 4;
  }
  while (v31);
  if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_24;
LABEL_25:
  *(_QWORD *)(a4 + 48) = v22;
  *(_QWORD *)(a4 + 56) = v14;
  *(_QWORD *)(a4 + 64) = v23;
  if (v15)
    operator delete(v15);
LABEL_27:
  *v12 = v14;
}

void sub_1BE69AF8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1BE69AFBC(v1);
  _Unwind_Resume(a1);
}

void Segment::Segment(Segment *this)
{
  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

{
  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

_QWORD *sub_1BE69AFBC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  return a1;
}

void Segment::mergeIntoSegment(Segment *this, const Segment *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  char *v33;
  char *v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 *v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int32x4_t *v70;
  int32x4_t *v71;
  int32x4_t *v72;
  int32x4_t *v73;
  int32x4_t *v74;
  int32x4_t *v75;
  char *v76;
  double v77;
  int v78;
  unsigned int v79;
  size_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __int32 *v89;
  __int32 *v90;
  uint64_t v91;
  __int32 *v92;
  __int32 *v93;
  __int32 v94;
  __int32 v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  __int32 *v103;
  __int32 *v104;
  uint64_t v105;
  __int32 *v106;
  __int32 *v107;
  __int32 v108;
  __int32 v109;
  uint64_t v110;
  __int32 v111;
  __int32 v112;
  uint64_t v113;
  __int8 *v114;
  __int8 *v115;
  uint64_t v116;
  __int8 *v117;
  __int128 *v118;
  __int8 *v119;
  __int128 *v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int8 *v125;
  __int8 *v126;
  uint64_t v127;
  __int8 *v128;
  __int128 *v129;
  __int8 *v130;
  __int128 *v131;
  unint64_t v132;
  __int128 v133;
  __int128 v134;
  int32x4_t *v135;
  int32x4_t *v136;
  int32x4_t *v137;
  int32x4_t *v138;
  int32x4_t *v139;
  int32x4_t *v140;
  uint64_t v141;
  int32x4_t v142;
  int32x4_t v143;
  char *v144;
  unint64_t v145;

  v4 = *((double *)this + 2);
  v5 = *((double *)this + 3);
  if (v4 >= *((double *)a2 + 2))
    v4 = *((double *)a2 + 2);
  *((double *)this + 2) = v4;
  v6 = *((double *)a2 + 3);
  if (v5 < v6)
    v6 = v5;
  *((double *)this + 3) = v6;
  v7 = *((double *)a2 + 4);
  v8 = *((double *)this + 5);
  if (*((double *)this + 4) > v7)
    v7 = *((double *)this + 4);
  *((double *)this + 4) = v7;
  v9 = *((double *)a2 + 5);
  if (v8 > v9)
    v9 = v8;
  *((double *)this + 5) = v9;
  *(double *)this = v7 - v4;
  *((double *)this + 1) = v9 - v6;
  v11 = (char *)*((_QWORD *)a2 + 6);
  v10 = (char *)*((_QWORD *)a2 + 7);
  v12 = v10 - v11;
  if (v10 - v11 >= 1)
  {
    v13 = *((_QWORD *)this + 6);
    v14 = v12 >> 3;
    v16 = (char *)*((_QWORD *)this + 7);
    v15 = *((_QWORD *)this + 8);
    v17 = (unint64_t)&v16[-v13];
    v18 = (uint64_t)&v16[-v13] >> 3;
    v19 = (char *)(v13 + ((unint64_t)&v16[-v13] & 0xFFFFFFFFFFFFFFF8));
    if (v12 >> 3 > (v15 - (uint64_t)v16) >> 3)
    {
      v20 = v18 + v14;
      if ((unint64_t)(v18 + v14) >> 61)
        sub_1BE61F930();
      v21 = v15 - v13;
      if (v21 >> 2 > v20)
        v20 = v21 >> 2;
      v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8;
      v23 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v22)
        v23 = v20;
      v145 = v23;
      if (v23)
      {
        if (v23 >> 61)
          sub_1BE61F100();
        v24 = operator new(8 * v23);
        v19 = (char *)(v13 + ((unint64_t)&v16[-v13] & 0xFFFFFFFFFFFFFFF8));
        v18 = (uint64_t)&v16[-v13] >> 3;
        v25 = (uint64_t)&v24[8 * v18];
        v26 = (char *)(v25 + 8 * v14);
        v27 = v12 - 8;
        if ((unint64_t)(v12 - 8) < 0x38)
          goto LABEL_19;
      }
      else
      {
        v24 = 0;
        v25 = 8 * v18;
        v26 = (char *)(8 * v18 + 8 * v14);
        v27 = v12 - 8;
        if ((unint64_t)(v12 - 8) < 0x38)
        {
LABEL_19:
          v28 = (char *)v25;
          goto LABEL_36;
        }
      }
      v28 = (char *)v25;
      if ((unint64_t)(&v24[v17 & 0xFFFFFFFFFFFFFFF8] - v11) >= 0x20)
      {
        v42 = (v27 >> 3) + 1;
        v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        v28 = (char *)(v25 + v43);
        v44 = &v11[v43];
        v45 = (__int128 *)(v11 + 16);
        v46 = &v24[8 * v18 + 16];
        v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v48 = *v45;
          *(v46 - 1) = *(v45 - 1);
          *v46 = v48;
          v45 += 2;
          v46 += 2;
          v47 -= 4;
        }
        while (v47);
        v11 = v44;
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_37:
          if ((char *)v13 != v16)
          {
            if (v17 - 8 >= 0x68)
            {
              v50 = v19;
              if ((v17 & 0xFFFFFFFFFFFFFFF8) + v13 - (unint64_t)&v24[v17 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                v51 = ((v17 - 8) >> 3) + 1;
                v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
                v50 = &v19[-v52];
                v25 -= v52;
                v53 = 8 * v18 - 16;
                v54 = &v24[v53];
                v55 = (__int128 *)(v13 + v53);
                v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v57 = *v55;
                  *(v54 - 1) = *(v55 - 1);
                  *v54 = v57;
                  v54 -= 2;
                  v55 -= 2;
                  v56 -= 4;
                }
                while (v56);
                if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_45;
              }
            }
            else
            {
              v50 = v19;
            }
            do
            {
              v58 = *((_QWORD *)v50 - 1);
              v50 -= 8;
              *(_QWORD *)(v25 - 8) = v58;
              v25 -= 8;
            }
            while (v50 != (char *)v13);
          }
LABEL_45:
          v59 = &v24[8 * v145];
          v60 = v16 - v19;
          if (v60)
            memmove(v26, v19, v60);
          *((_QWORD *)this + 6) = v25;
          *((_QWORD *)this + 7) = &v26[v60];
          *((_QWORD *)this + 8) = v59;
          if (v13)
            operator delete((void *)v13);
          goto LABEL_58;
        }
      }
      do
      {
LABEL_36:
        v49 = *(_QWORD *)v11;
        v11 += 8;
        *(_QWORD *)v28 = v49;
        v28 += 8;
      }
      while (v28 != v26);
      goto LABEL_37;
    }
    v29 = v16 - v19;
    v30 = (v16 - v19) >> 3;
    if (v30 >= v14)
    {
      v31 = &v11[8 * v14];
      v33 = (char *)*((_QWORD *)this + 7);
    }
    else
    {
      v31 = &v11[8 * v30];
      v32 = v10 - v31;
      if (v10 != v31)
      {
        v144 = &v11[8 * v30];
        memmove(*((void **)this + 7), v144, v10 - v31);
        v18 = (uint64_t)&v16[-v13] >> 3;
        v31 = v144;
        v19 = (char *)(v13 + ((unint64_t)&v16[-v13] & 0xFFFFFFFFFFFFFFF8));
      }
      v33 = &v16[v32];
      *((_QWORD *)this + 7) = &v16[v32];
      if (v29 < 1)
        goto LABEL_58;
    }
    v34 = &v19[8 * v14];
    v35 = v33 - v34;
    v36 = (v33 - v34) >> 3;
    v37 = &v33[-8 * v14];
    v38 = v33;
    if (v37 < v16)
    {
      v39 = (v17 & 0xFFFFFFFFFFFFFFF8) + v35;
      v40 = v39 + v13 + 8;
      if ((unint64_t)v16 > v40)
        v40 = (unint64_t)v16;
      v41 = v40 + ~v13 - v39;
      if (v41 >= 0x58)
      {
        v38 = v33;
        if ((unint64_t)&v34[-(v17 & 0xFFFFFFFFFFFFFFF8) - v13] >= 0x20)
        {
          v61 = (v41 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v37 += v62;
          v38 = &v33[v62];
          v63 = v33 + 16;
          v64 = (__int128 *)(8 * v36 + 8 * v18 + v13 + 16);
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v64;
            *(v63 - 1) = *(v64 - 1);
            *v63 = v66;
            v63 += 2;
            v64 += 2;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_54;
        }
      }
      else
      {
        v38 = v33;
      }
      do
      {
        v67 = *(_QWORD *)v37;
        v37 += 8;
        *(_QWORD *)v38 = v67;
        v38 += 8;
      }
      while (v37 < v16);
    }
LABEL_54:
    *((_QWORD *)this + 7) = v38;
    if (v33 != v34)
    {
      v68 = v19;
      memmove(&v33[-8 * v36], v19, v35);
      v19 = v68;
    }
    if (v31 != v11)
      memmove(v19, v11, v31 - v11);
  }
LABEL_58:
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = *((double *)this + 3);
  v78 = (int)*((double *)this + 5) - (int)v77;
  v79 = v78 + 1;
  if (v78 != -1)
  {
    if (v78 <= -2)
      sub_1BE61F930();
    v80 = 4 * (v78 + 1);
    v70 = (int32x4_t *)operator new(v80);
    memset_pattern16(v70, &unk_1BE8D5D20, v80);
    v71 = (int32x4_t *)operator new(v80);
    memset_pattern16(v71, &unk_1BE8D5D30, v80);
    v72 = (int32x4_t *)operator new(v80);
    memset_pattern16(v72, &unk_1BE8D5D20, v80);
    v73 = (int32x4_t *)operator new(v80);
    memset_pattern16(v73, &unk_1BE8D5D30, v80);
    v74 = (int32x4_t *)operator new(v80);
    bzero(v74, v80);
    v75 = (int32x4_t *)operator new(v80);
    bzero(v75, v80);
    v69 = &v74->i8[v80];
    v76 = &v75->i8[v80];
    v79 = v78 + 1;
  }
  v81 = *((_QWORD *)this + 9);
  v82 = *((_QWORD *)this + 10) - v81;
  if (v82)
  {
    v83 = v82 >> 2;
    v84 = *((_QWORD *)this + 12);
    v85 = (int)(v5 - v77);
    if (v83 <= 1)
      v86 = 1;
    else
      v86 = v83;
    if (v86 < 0x10)
    {
      v87 = 0;
LABEL_67:
      v88 = v86 - v87;
      v89 = (__int32 *)(v84 + 4 * v87);
      v90 = (__int32 *)(v81 + 4 * v87);
      v91 = v87 + v85;
      v92 = &v71->i32[v91];
      v93 = &v70->i32[v91];
      do
      {
        v94 = *v90++;
        *v93++ = v94;
        v95 = *v89++;
        *v92++ = v95;
        --v88;
      }
      while (v88);
      goto LABEL_69;
    }
    v87 = 0;
    v113 = 4 * v85;
    v114 = &v71->i8[4 * v85];
    v115 = &v70->i8[4 * v85];
    if ((unint64_t)(v114 - v115) < 0x20)
      goto LABEL_67;
    if ((unint64_t)&v115[-v81] < 0x20)
      goto LABEL_67;
    if ((unint64_t)(v84 - (_QWORD)v115) < 0x20)
      goto LABEL_67;
    if ((unint64_t)&v114[-v81] < 0x20)
      goto LABEL_67;
    if ((unint64_t)&v114[-v84] < 0x20)
      goto LABEL_67;
    v87 = v86 & 0xFFFFFFFFFFFFFFF8;
    v116 = v113 + 16;
    v117 = &v71[1].i8[v113];
    v118 = (__int128 *)(v84 + 16);
    v119 = &v70->i8[v116];
    v120 = (__int128 *)(v81 + 16);
    v121 = v86 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v122 = *v120;
      *((_OWORD *)v119 - 1) = *(v120 - 1);
      *(_OWORD *)v119 = v122;
      v123 = *v118;
      *((_OWORD *)v117 - 1) = *(v118 - 1);
      *(_OWORD *)v117 = v123;
      v117 += 32;
      v118 += 2;
      v119 += 32;
      v120 += 2;
      v121 -= 8;
    }
    while (v121);
    if (v86 != v87)
      goto LABEL_67;
  }
LABEL_69:
  v96 = *((_QWORD *)a2 + 12);
  v97 = *((_QWORD *)a2 + 13) - v96;
  if (!v97)
    goto LABEL_76;
  v98 = v97 >> 2;
  v99 = *((_QWORD *)a2 + 9);
  v100 = (int)(*((double *)a2 + 3) - v77);
  if (v98 <= 1)
    v98 = 1;
  if (v98 < 0x10)
  {
    v101 = 0;
LABEL_74:
    v102 = v98 - v101;
    v103 = (__int32 *)(v96 + 4 * v101);
    v104 = (__int32 *)(v99 + 4 * v101);
    v105 = v101 + v100;
    v106 = &v73->i32[v105];
    v107 = &v72->i32[v105];
    do
    {
      v108 = *v104++;
      *v107++ = v108;
      v109 = *v103++;
      *v106++ = v109;
      --v102;
    }
    while (v102);
    goto LABEL_76;
  }
  v101 = 0;
  v124 = 4 * v100;
  v125 = &v73->i8[4 * v100];
  v126 = &v72->i8[4 * v100];
  if ((unint64_t)(v125 - v126) < 0x20)
    goto LABEL_74;
  if ((unint64_t)&v126[-v99] < 0x20)
    goto LABEL_74;
  if ((unint64_t)(v96 - (_QWORD)v126) < 0x20)
    goto LABEL_74;
  if ((unint64_t)&v125[-v99] < 0x20)
    goto LABEL_74;
  if ((unint64_t)&v125[-v96] < 0x20)
    goto LABEL_74;
  v101 = v98 & 0xFFFFFFFFFFFFFFF8;
  v127 = v124 + 16;
  v128 = &v73[1].i8[v124];
  v129 = (__int128 *)(v96 + 16);
  v130 = &v72->i8[v127];
  v131 = (__int128 *)(v99 + 16);
  v132 = v98 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v133 = *v131;
    *((_OWORD *)v130 - 1) = *(v131 - 1);
    *(_OWORD *)v130 = v133;
    v134 = *v129;
    *((_OWORD *)v128 - 1) = *(v129 - 1);
    *(_OWORD *)v128 = v134;
    v128 += 32;
    v129 += 2;
    v130 += 32;
    v131 += 2;
    v132 -= 8;
  }
  while (v132);
  if (v98 != v101)
    goto LABEL_74;
LABEL_76:
  if (v78 < 0)
    goto LABEL_84;
  if (v79 >= 0x10)
  {
    v110 = 0;
    if ((unint64_t)((char *)v75 - (char *)v74) >= 0x20
      && (unint64_t)((char *)v74 - (char *)v72) >= 0x20
      && (unint64_t)((char *)v74 - (char *)v70) >= 0x20
      && (unint64_t)((char *)v71 - (char *)v74) >= 0x20
      && (unint64_t)((char *)v73 - (char *)v74) >= 0x20
      && (unint64_t)((char *)v75 - (char *)v72) >= 0x20
      && (unint64_t)((char *)v75 - (char *)v70) >= 0x20
      && (unint64_t)((char *)v75 - (char *)v71) >= 0x20
      && (unint64_t)((char *)v75 - (char *)v73) >= 0x20)
    {
      v110 = v79 & 0xFFFFFFF8;
      v135 = v70 + 1;
      v136 = v75 + 1;
      v137 = v72 + 1;
      v138 = v73 + 1;
      v139 = v74 + 1;
      v140 = v71 + 1;
      v141 = v110;
      do
      {
        v142 = vminq_s32(*v137, *v135);
        v139[-1] = vminq_s32(v137[-1], v135[-1]);
        *v139 = v142;
        v143 = vmaxq_s32(*v140, *v138);
        v136[-1] = vmaxq_s32(v140[-1], v138[-1]);
        *v136 = v143;
        v135 += 2;
        v136 += 2;
        v137 += 2;
        v138 += 2;
        v139 += 2;
        v140 += 2;
        v141 -= 8;
      }
      while (v141);
      if (v110 == v79)
        goto LABEL_84;
    }
  }
  else
  {
    v110 = 0;
  }
  do
  {
    v111 = v72->i32[v110];
    if (v111 >= v70->i32[v110])
      v111 = v70->i32[v110];
    v74->i32[v110] = v111;
    v112 = v71->i32[v110];
    if (v112 <= v73->i32[v110])
      v112 = v73->i32[v110];
    v75->i32[v110++] = v112;
  }
  while (v79 != v110);
LABEL_84:
  sub_1BE66E294((_QWORD *)this + 9, v74->i8, v69, (v69 - (char *)v74) >> 2);
  sub_1BE66E294((_QWORD *)this + 12, v75->i8, v76, (v76 - (char *)v75) >> 2);
  if (v75)
    operator delete(v75);
  if (v74)
    operator delete(v74);
  if (v73)
    operator delete(v73);
  if (v72)
    operator delete(v72);
  if (v71)
    operator delete(v71);
  if (v70)
    operator delete(v70);
}

void sub_1BE69B900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  operator delete(v17);
  if (v16)
  {
    operator delete(v16);
    if (v15)
    {
LABEL_8:
      operator delete(v15);
      if (v14)
      {
LABEL_9:
        operator delete(v14);
        if (!v13)
          goto LABEL_11;
        goto LABEL_10;
      }
LABEL_4:
      if (!v13)
LABEL_11:
        _Unwind_Resume(a1);
LABEL_10:
      operator delete(v13);
      goto LABEL_11;
    }
  }
  else if (v15)
  {
    goto LABEL_8;
  }
  if (v14)
    goto LABEL_9;
  goto LABEL_4;
}

BOOL Segment::sameSegment(Segment *this, const Segment *a2, int a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  Segment *v8;
  Segment *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v16;
  Segment *v17;
  double *v18;
  double v19;
  double v20;
  _BOOL4 v21;

  v3 = *(double *)a2;
  if (*(double *)a2 >= 1.0)
    v4 = *(double *)a2;
  else
    v4 = 1.0;
  if (*(double *)this >= 1.0)
    v5 = *(double *)this;
  else
    v5 = 1.0;
  v6 = *((double *)a2 + 2);
  v7 = *((double *)this + 2);
  if (v6 >= v7)
    v8 = this;
  else
    v8 = a2;
  if (v6 >= v7)
  {
    v9 = a2;
  }
  else
  {
    v3 = *(double *)this;
    v9 = this;
  }
  v10 = *((double *)v9 + 4);
  v11 = *((double *)v8 + 4);
  v12 = v3;
  if (v10 >= v11)
  {
    v12 = v11 - (*((double *)v9 + 2) - (double)a3);
    if (v12 < 0.0)
      v12 = 0.0;
  }
  if (v5 < v4)
    v4 = v5;
  v13 = v12 / v4;
  if (v13 > 0.4)
    return 1;
  v15 = *((double *)a2 + 3);
  v16 = *((double *)this + 3);
  if (v15 >= v16)
    v17 = this;
  else
    v17 = a2;
  if (v15 >= v16)
    v18 = (double *)a2;
  else
    v18 = (double *)this;
  v19 = *((double *)v17 + 5);
  if (v18[5] >= v19)
  {
    v20 = v19 - v18[3];
    if (v20 < 0.0)
      v20 = 0.0;
    if (v10 < v11)
      goto LABEL_34;
    goto LABEL_32;
  }
  v20 = v18[1];
  if (v10 >= v11)
  {
LABEL_32:
    v3 = v11 - (*((double *)v9 + 2) + -5.0);
    if (v3 < 0.0)
      v3 = 0.0;
  }
LABEL_34:
  v21 = v13 > 0.2;
  if (v20 <= 0.0)
    v21 = 0;
  return v3 > 0.0 && v21;
}

void Segment::Segment(Segment *this, const Segment *a2)
{
  _QWORD *v3;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v3 = (_QWORD *)((char *)this + 96);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  if (this != a2)
  {
    sub_1BE62037C((_QWORD *)this + 6, *((char **)a2 + 6), *((char **)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3);
    sub_1BE66E294((_QWORD *)this + 9, *((char **)a2 + 9), *((char **)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
    sub_1BE66E294(v3, *((char **)a2 + 12), *((char **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 2);
  }
}

void sub_1BE69BB84(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v3;
  if (*v3)
  {
    v1[13] = v6;
    operator delete(v6);
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v7 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[10] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v1[7] = v8;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

void Segment::Segment(Segment *this, Segment *a2)
{
  _QWORD *v3;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v3 = (_QWORD *)((char *)this + 96);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  if (this != a2)
  {
    sub_1BE62037C((_QWORD *)this + 6, *((char **)a2 + 6), *((char **)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3);
    sub_1BE66E294((_QWORD *)this + 9, *((char **)a2 + 9), *((char **)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
    sub_1BE66E294(v3, *((char **)a2 + 12), *((char **)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 2);
  }
}

void sub_1BE69BCA0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v3;
  if (*v3)
  {
    v1[13] = v6;
    operator delete(v6);
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v7 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[10] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v1[7] = v8;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

void Segment::Segment(Segment *this, CHDrawing *a2, uint64_t a3)
{
  CHDrawing *v5;
  _QWORD *v6;
  CHDrawing *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  Segment *v26;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  unint64_t i;
  double v48;
  double v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  char *v60;
  double *v61;
  double v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  double *v68;
  double *v69;
  double *v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  double *v80;
  double *v81;
  double *v82;
  unint64_t v83;
  unint64_t v84;
  double *v85;
  unint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  double *v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v96;
  char *v98;
  char *v99;
  Segment *v100;
  uint64_t v101;
  void *__p;
  void *v103;
  unint64_t v104;

  v5 = a2;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v98 = (char *)this + 96;
  v99 = (char *)this + 72;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 14) = 0;
  v6 = operator new(8uLL);
  *v6 = a3;
  *((_QWORD *)this + 7) = v6 + 1;
  *((_QWORD *)this + 8) = v6 + 1;
  *((_QWORD *)this + 6) = v6;
  v100 = this;
  v7 = v5;
  v15 = objc_msgSend_pointCountForStrokeIndex_(v7, v8, a3, v9, v10, v11);
  v101 = a3;
  if (v15)
  {
    v16 = 0;
    v17 = 0x7FFFFFFF;
    v18 = 0x80000000;
    v19 = 0x80000000;
    v20 = 0x7FFFFFFF;
    do
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v7, v12, v101, v16, v13, v14);
      v23 = (double)v20;
      if (v21 <= (double)v20)
        v23 = v21;
      v20 = (int)v23;
      v24 = (double)v17;
      if (v22 <= (double)v17)
        v24 = v22;
      v17 = (int)v24;
      if (v21 < (double)v19)
        v21 = (double)v19;
      v19 = (int)v21;
      v25 = (double)v18;
      if (v22 >= (double)v18)
        v25 = v22;
      v18 = (int)v25;
      ++v16;
    }
    while (v15 != v16);
    v26 = this;
    *(double *)this = (double)(v19 - v20);
    if (v19 == v20)
    {
      *(_QWORD *)this = 0x3FF0000000000000;
      v19 = v20 + 1;
    }
    *((double *)this + 1) = (double)(v18 - v17);
    a3 = v101;
    if (v18 == v17)
    {
      *((_QWORD *)this + 1) = 0x3FF0000000000000;
      v18 = v17 + 1;
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    v26 = this;
    *(_OWORD *)this = _Q0;
    v20 = 0x7FFFFFFF;
    v19 = 0x80000000;
    v17 = 0x7FFFFFFF;
    v18 = 0x80000000;
  }
  *((double *)v26 + 2) = (double)v20;
  *((double *)v26 + 3) = (double)v17;
  *((double *)v26 + 4) = (double)v19;
  *((double *)v26 + 5) = (double)v18;

  v33 = (int)(*((double *)v26 + 5) - *((double *)v26 + 3) + 1.0);
  LODWORD(__p) = -1;
  v34 = *((_QWORD *)v26 + 9);
  v35 = (*((_QWORD *)v26 + 10) - v34) >> 2;
  if (v33 <= v35)
  {
    if (v33 < v35)
      *((_QWORD *)v100 + 10) = v34 + 4 * v33;
  }
  else
  {
    sub_1BE6A4734((uint64_t)v99, v33 - v35, (const float *)&__p);
  }
  LODWORD(__p) = -1;
  v36 = *((_QWORD *)v100 + 12);
  v37 = (*((_QWORD *)v100 + 13) - v36) >> 2;
  v38 = (const char *)(v33 - v37);
  if (v33 <= v37)
  {
    if (v33 < v37)
      *((_QWORD *)v100 + 13) = v36 + 4 * v33;
  }
  else
  {
    sub_1BE6A4734((uint64_t)v98, (unint64_t)v38, (const float *)&__p);
  }
  __p = 0;
  v103 = 0;
  v104 = 0;
  objc_msgSend_pointForStrokeIndex_pointIndex_(v7, v38, a3, 0, v31, v32);
  v44 = v43;
  v46 = v45;
  for (i = 1; ; ++i)
  {
    v48 = v46;
    v49 = v44;
    if (i >= objc_msgSend_pointCountForStrokeIndex_(v7, v39, a3, v40, v41, v42))
      break;
    objc_msgSend_pointForStrokeIndex_pointIndex_(v7, v50, a3, i, v51, v52);
    v44 = v53;
    v46 = v54;
    v55 = (double *)__p;
    v103 = __p;
    v56 = v53 - v49;
    v57 = v54 - v48;
    if (vabdd_f64(v44, v49) > vabdd_f64(v46, v48))
    {
      if (v49 >= v44)
        v58 = v44;
      else
        v58 = v49;
      if (v49 >= v44)
        v59 = v49;
      else
        v59 = v44;
      if (v58 > v59)
        continue;
      v60 = (char *)v104;
      v61 = (double *)__p;
      v62 = v57 / v56;
      while (1)
      {
        while (1)
        {
          v63 = v48 + (v58 - v49) * v62;
          if (v61 >= (double *)v60)
            break;
          *v61 = v58;
          v61[1] = v63;
          v61 += 2;
          v58 = v58 + 1.0;
          if (v58 > v59)
            goto LABEL_88;
        }
        v64 = ((char *)v61 - (char *)v55) >> 4;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 60)
          goto LABEL_118;
        if ((v60 - (char *)v55) >> 3 > v65)
          v65 = (v60 - (char *)v55) >> 3;
        if ((unint64_t)(v60 - (char *)v55) >= 0x7FFFFFFFFFFFFFF0)
          v66 = 0xFFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
        {
          if (v66 >> 60)
            goto LABEL_119;
          v67 = (char *)operator new(16 * v66);
          v68 = (double *)&v67[16 * v64];
          *v68 = v58;
          v68[1] = v63;
          if (v61 == v55)
          {
LABEL_55:
            v70 = v68;
            v60 = &v67[16 * v66];
            v61 = v68 + 2;
            if (!v55)
              goto LABEL_52;
            goto LABEL_51;
          }
        }
        else
        {
          v67 = 0;
          v68 = (double *)(16 * v64);
          *v68 = v58;
          v68[1] = v63;
          if (v61 == v55)
            goto LABEL_55;
        }
        v69 = v68;
        do
        {
          v70 = v69 - 2;
          *((_OWORD *)v69 - 1) = *((_OWORD *)v61 - 1);
          v61 -= 2;
          v69 -= 2;
        }
        while (v61 != v55);
        v60 = &v67[16 * v66];
        v61 = v68 + 2;
        if (!v55)
          goto LABEL_52;
LABEL_51:
        operator delete(v55);
LABEL_52:
        v55 = v70;
        v58 = v58 + 1.0;
        if (v58 > v59)
          goto LABEL_88;
      }
    }
    if (v48 >= v46)
      v71 = v48;
    else
      v71 = v46;
    if (v57 != 0.0)
    {
      if (v48 >= v46)
        v73 = v46;
      else
        v73 = v48;
      if (v73 > v71)
        continue;
      v60 = (char *)v104;
      v61 = (double *)__p;
      v74 = v56 / v57;
      while (1)
      {
        while (1)
        {
          v75 = v49 + (v73 - v48) * v74;
          if (v61 >= (double *)v60)
            break;
          *v61 = v75;
          v61[1] = v73;
          v61 += 2;
          v73 = v73 + 1.0;
          if (v73 > v71)
            goto LABEL_88;
        }
        v76 = ((char *)v61 - (char *)v55) >> 4;
        v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 60)
        {
LABEL_118:
          v103 = v61;
          v104 = (unint64_t)v60;
          __p = v55;
          sub_1BE61F930();
        }
        if ((v60 - (char *)v55) >> 3 > v77)
          v77 = (v60 - (char *)v55) >> 3;
        if ((unint64_t)(v60 - (char *)v55) >= 0x7FFFFFFFFFFFFFF0)
          v78 = 0xFFFFFFFFFFFFFFFLL;
        else
          v78 = v77;
        if (v78)
        {
          if (v78 >> 60)
          {
LABEL_119:
            v103 = v61;
            v104 = (unint64_t)v60;
            __p = v55;
            goto LABEL_120;
          }
          v79 = (char *)operator new(16 * v78);
          v80 = (double *)&v79[16 * v76];
          *v80 = v75;
          v80[1] = v73;
          if (v61 == v55)
          {
LABEL_86:
            v82 = v80;
            v60 = &v79[16 * v78];
            v61 = v80 + 2;
            if (!v55)
              goto LABEL_83;
            goto LABEL_82;
          }
        }
        else
        {
          v79 = 0;
          v80 = (double *)(16 * v76);
          *v80 = v75;
          v80[1] = v73;
          if (v61 == v55)
            goto LABEL_86;
        }
        v81 = v80;
        do
        {
          v82 = v81 - 2;
          *((_OWORD *)v81 - 1) = *((_OWORD *)v61 - 1);
          v61 -= 2;
          v81 -= 2;
        }
        while (v61 != v55);
        v60 = &v79[16 * v78];
        v61 = v80 + 2;
        if (!v55)
          goto LABEL_83;
LABEL_82:
        operator delete(v55);
LABEL_83:
        v55 = v82;
        v73 = v73 + 1.0;
        if (v73 > v71)
        {
LABEL_88:
          v103 = v61;
          v104 = (unint64_t)v60;
          __p = v55;
          v72 = (char *)v61 - (char *)v55;
          _ZF = v61 == v55;
          a3 = v101;
          if (!_ZF)
            goto LABEL_100;
          goto LABEL_26;
        }
      }
    }
    if ((unint64_t)__p < v104)
    {
      *(double *)__p = v44;
      v55[1] = v46;
      v103 = v55 + 2;
      v72 = 16;
      a3 = v101;
      goto LABEL_100;
    }
    v83 = (uint64_t)(v104 - (_QWORD)__p) >> 3;
    if (v83 <= 1)
      v83 = 1;
    if (v104 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
      v84 = 0xFFFFFFFFFFFFFFFLL;
    else
      v84 = v83;
    if (v84 >> 60)
LABEL_120:
      sub_1BE61F100();
    v85 = (double *)operator new(16 * v84);
    *v85 = v44;
    v85[1] = v46;
    __p = v85;
    v104 = (unint64_t)&v85[2 * v84];
    if (v55)
      operator delete(v55);
    v55 = v85;
    v103 = v85 + 2;
    v72 = 16;
    a3 = v101;
LABEL_100:
    v86 = v72 >> 4;
    v87 = *((double *)v100 + 3);
    v88 = *((_QWORD *)v100 + 9);
    v89 = *((_QWORD *)v100 + 12);
    if (v86 <= 1)
      v86 = 1;
    v90 = v55 + 1;
    do
    {
      v91 = (int)((double)(int)*v90 - v87);
      v92 = (int)*(v90 - 1);
      v93 = 4 * (v91 & ~(v91 >> 31));
      v94 = *(_DWORD *)(v88 + v93);
      _ZF = v94 > v92 || v94 == -1;
      if (_ZF)
        v94 = (int)*(v90 - 1);
      v96 = *(_DWORD *)(v89 + v93);
      if (v96 >= v92 && v96 != -1)
        v92 = *(_DWORD *)(v89 + v93);
      *(_DWORD *)(v88 + v93) = v94;
      *(_DWORD *)(v89 + v93) = v92;
      v90 += 2;
      --v86;
    }
    while (v86);
LABEL_26:
    ;
  }
  if (__p)
    operator delete(__p);

}

void sub_1BE69C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, _QWORD *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v20;
  void *v21;
  void *v22;

  v20 = *a12;
  if (*a12)
  {
    a14[13] = v20;
    operator delete(v20);
    v21 = *a13;
    if (!*a13)
    {
LABEL_3:
      v22 = *a11;
      if (!*a11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v21 = *a13;
    if (!*a13)
      goto LABEL_3;
  }
  a14[10] = v21;
  operator delete(v21);
  v22 = *a11;
  if (!*a11)
  {
LABEL_4:

    _Unwind_Resume(a1);
  }
LABEL_7:
  a14[7] = v22;
  operator delete(v22);

  _Unwind_Resume(a1);
}

unint64_t sub_1BE69C498(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD **v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD **v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD **v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD **v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD **v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD **v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD **v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _BYTE *v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD **v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _BYTE *v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  size_t v113;
  BOOL v114;
  BOOL v115;
  unint64_t v116;
  unint64_t i;
  unsigned __int8 v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  void **v123;
  uint64_t *v124;
  size_t v125;
  BOOL v126;
  unint64_t v127;
  unsigned __int8 v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  void **v133;
  uint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  uint64_t *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  int64x2_t *v152;
  uint64_t v153;
  __int8 *v154;
  char *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  _BYTE *v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _BYTE *v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _BYTE *v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *__p[2];
  int64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  __int128 v237;
  unint64_t v238;

  v235 = 0;
  v236 = 0;
  v233 = 0;
  v234 = &v235;
  v232 = 0;
  v6 = operator new(0x30uLL);
  *v6 = 0;
  v6[1] = 0;
  v6[4] = 0;
  v6[5] = 0;
  v6[2] = &v235;
  v234 = v6;
  v235 = v6;
  *((_BYTE *)v6 + 24) = 1;
  v236 = 1;
  v7 = operator new(0x30uLL);
  v7[4] = 0;
  v7[5] = 0;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = &v232;
  v231 = v7;
  v232 = v7;
  sub_1BE61F5C0(v7, v7);
  ++v233;
  v9 = *a2;
  v8 = a2[1];
  v229 = 0;
  v230 = 0;
  v228 = &v229;
  v10 = v8 - v9;
  if (!v10)
  {
    v209 = 0;
    v11 = 0;
    goto LABEL_375;
  }
  v218 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v10 / 24;
  v221 = (_QWORD *)(a1 + 128);
  if (v13 <= 1)
    v13 = 1;
  v212 = v13;
  v14 = 1;
  v213 = a3;
  while (2)
  {
    v15 = *(_QWORD *)(*a2 + 24 * v12 + 8) - *(_QWORD *)(*a2 + 24 * v12);
    if (!v15)
      goto LABEL_5;
    v16 = 0;
    v17 = v15 >> 4;
    v215 = v12;
    v216 = v17 - 1;
    if (v17 <= 1)
      v17 = 1;
    v214 = v17;
    do
    {
LABEL_11:
      v18 = (unint64_t *)(*(_QWORD *)(*a2 + 24 * v12) + 16 * v16);
      v20 = *v18;
      v19 = v18[1];
      v21 = v235;
      if (v235)
      {
        v22 = &v235;
        v23 = v235;
        do
        {
          v24 = v23;
          v25 = v22;
          v26 = v23[4];
          if (v26 >= v20)
            v22 = (_QWORD **)v23;
          else
            ++v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
        if (v22 != &v235)
        {
          if (v26 < v20)
            v24 = v25;
          if (v20 >= v24[4])
          {
            do
            {
              while (1)
              {
                v43 = v21;
                v44 = v21[4];
                if (v20 < v44)
                  break;
                if (v44 >= v20)
                {
                  v223 = v21[5];
                  v64 = v14;
                  v65 = v19 + 1;
                  v66 = v235;
                  v225 = v20;
                  goto LABEL_91;
                }
                v21 = (_QWORD *)v21[1];
                if (!v21)
                {
                  v45 = v43 + 1;
                  goto LABEL_279;
                }
              }
              v21 = (_QWORD *)*v21;
            }
            while (*v43);
            v45 = v43;
LABEL_279:
            v176 = operator new(0x30uLL);
            v176[4] = v20;
            v176[5] = 0;
            *v176 = 0;
            v176[1] = 0;
            v176[2] = v43;
            *v45 = v176;
            if (*v234)
            {
              v234 = (_QWORD *)*v234;
              v176 = (_QWORD *)*v45;
            }
            v177 = v235;
            *((_BYTE *)v176 + 24) = v176 == v235;
            if (v176 != v177)
            {
              do
              {
                v178 = v176[2];
                if (*(_BYTE *)(v178 + 24))
                  break;
                v179 = *(_QWORD **)(v178 + 16);
                v180 = *v179;
                if (*v179 == v178)
                {
                  v183 = v179[1];
                  if (!v183 || (v184 = *(unsigned __int8 *)(v183 + 24), v181 = (_BYTE *)(v183 + 24), v184))
                  {
                    if (*(_QWORD **)v178 == v176)
                    {
                      *(_BYTE *)(v178 + 24) = 1;
                      *((_BYTE *)v179 + 24) = 0;
                      v187 = *(_QWORD *)(v178 + 8);
                      *v179 = v187;
                      if (v187)
                        goto LABEL_295;
                    }
                    else
                    {
                      v185 = *(uint64_t **)(v178 + 8);
                      v186 = *v185;
                      *(_QWORD *)(v178 + 8) = *v185;
                      if (v186)
                      {
                        *(_QWORD *)(v186 + 16) = v178;
                        v179 = *(_QWORD **)(v178 + 16);
                      }
                      v185[2] = (uint64_t)v179;
                      *(_QWORD *)(*(_QWORD *)(v178 + 16) + 8 * (**(_QWORD **)(v178 + 16) != v178)) = v185;
                      *v185 = v178;
                      *(_QWORD *)(v178 + 16) = v185;
                      v179 = (_QWORD *)v185[2];
                      v178 = *v179;
                      *((_BYTE *)v185 + 24) = 1;
                      *((_BYTE *)v179 + 24) = 0;
                      v187 = *(_QWORD *)(v178 + 8);
                      *v179 = v187;
                      if (v187)
LABEL_295:
                        *(_QWORD *)(v187 + 16) = v179;
                    }
                    *(_QWORD *)(v178 + 16) = v179[2];
                    *(_QWORD *)(v179[2] + 8 * (*(_QWORD *)v179[2] != (_QWORD)v179)) = v178;
                    *(_QWORD *)(v178 + 8) = v179;
LABEL_352:
                    v179[2] = v178;
                    break;
                  }
                }
                else if (!v180 || (v182 = *(unsigned __int8 *)(v180 + 24), v181 = (_BYTE *)(v180 + 24), v182))
                {
                  if (*(_QWORD **)v178 == v176)
                  {
                    v207 = v176[1];
                    *(_QWORD *)v178 = v207;
                    if (v207)
                    {
                      *(_QWORD *)(v207 + 16) = v178;
                      v179 = *(_QWORD **)(v178 + 16);
                    }
                    v176[2] = v179;
                    *(_QWORD *)(*(_QWORD *)(v178 + 16) + 8 * (**(_QWORD **)(v178 + 16) != v178)) = v176;
                    v176[1] = v178;
                    *(_QWORD *)(v178 + 16) = v176;
                    v179 = (_QWORD *)v176[2];
                    *((_BYTE *)v176 + 24) = 1;
                    *((_BYTE *)v179 + 24) = 0;
                    v178 = v179[1];
                    v205 = *(_QWORD **)v178;
                    v179[1] = *(_QWORD *)v178;
                    if (v205)
LABEL_350:
                      v205[2] = v179;
                  }
                  else
                  {
                    *(_BYTE *)(v178 + 24) = 1;
                    *((_BYTE *)v179 + 24) = 0;
                    v178 = v179[1];
                    v205 = *(_QWORD **)v178;
                    v179[1] = *(_QWORD *)v178;
                    if (v205)
                      goto LABEL_350;
                  }
                  *(_QWORD *)(v178 + 16) = v179[2];
                  *(_QWORD *)(v179[2] + 8 * (*(_QWORD *)v179[2] != (_QWORD)v179)) = v178;
                  *(_QWORD *)v178 = v179;
                  goto LABEL_352;
                }
                *(_BYTE *)(v178 + 24) = 1;
                v176 = v179;
                *((_BYTE *)v179 + 24) = v179 == v177;
                *v181 = 1;
              }
              while (v179 != v177);
            }
            v223 = 0;
            v66 = v235;
            ++v236;
            v64 = v14;
            v65 = v19 + 1;
            v225 = v20;
            if (!v235)
              goto LABEL_100;
LABEL_91:
            v68 = &v235;
            v69 = v66;
            do
            {
              v70 = v69;
              v71 = v68;
              v72 = v69[4];
              if (v72 >= v65)
                v68 = (_QWORD **)v69;
              else
                ++v69;
              v69 = (_QWORD *)*v69;
            }
            while (v69);
            if (v68 != &v235)
            {
              if (v72 < v65)
                v70 = v71;
              if (v65 >= v70[4])
              {
                v90 = v16;
                do
                {
                  while (1)
                  {
                    v91 = v66;
                    v92 = v66[4];
                    if (v65 < v92)
                      break;
                    if (v92 >= v65)
                    {
                      v219 = v64;
                      v78 = v66[5];
                      v16 = v90;
                      goto LABEL_171;
                    }
                    v66 = (_QWORD *)v66[1];
                    if (!v66)
                    {
                      v93 = v91 + 1;
                      goto LABEL_299;
                    }
                  }
                  v66 = (_QWORD *)*v66;
                }
                while (*v91);
                v93 = v91;
LABEL_299:
                v188 = operator new(0x30uLL);
                v188[4] = v65;
                v188[5] = 0;
                *v188 = 0;
                v188[1] = 0;
                v188[2] = v91;
                *v93 = v188;
                if (*v234)
                {
                  v234 = (_QWORD *)*v234;
                  v188 = (_QWORD *)*v93;
                }
                v189 = v235;
                *((_BYTE *)v188 + 24) = v188 == v235;
                v16 = v90;
                if (v188 != v189)
                {
                  do
                  {
                    v190 = v188[2];
                    if (*(_BYTE *)(v190 + 24))
                      break;
                    v191 = *(_QWORD **)(v190 + 16);
                    v192 = *v191;
                    if (*v191 == v190)
                    {
                      v195 = v191[1];
                      if (!v195 || (v196 = *(unsigned __int8 *)(v195 + 24), v193 = (_BYTE *)(v195 + 24), v196))
                      {
                        if (*(_QWORD **)v190 == v188)
                        {
                          *(_BYTE *)(v190 + 24) = 1;
                          *((_BYTE *)v191 + 24) = 0;
                          v199 = *(_QWORD *)(v190 + 8);
                          *v191 = v199;
                          if (v199)
                            goto LABEL_315;
                        }
                        else
                        {
                          v197 = *(uint64_t **)(v190 + 8);
                          v198 = *v197;
                          *(_QWORD *)(v190 + 8) = *v197;
                          if (v198)
                          {
                            *(_QWORD *)(v198 + 16) = v190;
                            v191 = *(_QWORD **)(v190 + 16);
                          }
                          v197[2] = (uint64_t)v191;
                          *(_QWORD *)(*(_QWORD *)(v190 + 16) + 8 * (**(_QWORD **)(v190 + 16) != v190)) = v197;
                          *v197 = v190;
                          *(_QWORD *)(v190 + 16) = v197;
                          v191 = (_QWORD *)v197[2];
                          v190 = *v191;
                          *((_BYTE *)v197 + 24) = 1;
                          *((_BYTE *)v191 + 24) = 0;
                          v199 = *(_QWORD *)(v190 + 8);
                          *v191 = v199;
                          if (v199)
LABEL_315:
                            *(_QWORD *)(v199 + 16) = v191;
                        }
                        *(_QWORD *)(v190 + 16) = v191[2];
                        *(_QWORD *)(v191[2] + 8 * (*(_QWORD *)v191[2] != (_QWORD)v191)) = v190;
                        *(_QWORD *)(v190 + 8) = v191;
LABEL_359:
                        v191[2] = v190;
                        break;
                      }
                    }
                    else if (!v192 || (v194 = *(unsigned __int8 *)(v192 + 24), v193 = (_BYTE *)(v192 + 24), v194))
                    {
                      if (*(_QWORD **)v190 == v188)
                      {
                        v208 = v188[1];
                        *(_QWORD *)v190 = v208;
                        if (v208)
                        {
                          *(_QWORD *)(v208 + 16) = v190;
                          v191 = *(_QWORD **)(v190 + 16);
                        }
                        v188[2] = v191;
                        *(_QWORD *)(*(_QWORD *)(v190 + 16) + 8 * (**(_QWORD **)(v190 + 16) != v190)) = v188;
                        v188[1] = v190;
                        *(_QWORD *)(v190 + 16) = v188;
                        v191 = (_QWORD *)v188[2];
                        *((_BYTE *)v188 + 24) = 1;
                        *((_BYTE *)v191 + 24) = 0;
                        v190 = v191[1];
                        v206 = *(_QWORD **)v190;
                        v191[1] = *(_QWORD *)v190;
                        if (v206)
LABEL_357:
                          v206[2] = v191;
                      }
                      else
                      {
                        *(_BYTE *)(v190 + 24) = 1;
                        *((_BYTE *)v191 + 24) = 0;
                        v190 = v191[1];
                        v206 = *(_QWORD **)v190;
                        v191[1] = *(_QWORD *)v190;
                        if (v206)
                          goto LABEL_357;
                      }
                      *(_QWORD *)(v190 + 16) = v191[2];
                      *(_QWORD *)(v191[2] + 8 * (*(_QWORD *)v191[2] != (_QWORD)v191)) = v190;
                      *(_QWORD *)v190 = v191;
                      goto LABEL_359;
                    }
                    *(_BYTE *)(v190 + 24) = 1;
                    v188 = v191;
                    *((_BYTE *)v191 + 24) = v191 == v189;
                    *v193 = 1;
                  }
                  while (v191 != v189);
                }
                ++v236;
                v219 = v64;
                v78 = 0;
                goto LABEL_171;
              }
            }
            goto LABEL_100;
          }
        }
      }
      v27 = operator new(0x30uLL);
      v27[4] = v20;
      v27[5] = v14;
      v28 = &v235;
      v29 = &v235;
      if (v21)
      {
        do
        {
          while (1)
          {
            v29 = (_QWORD **)v21;
            v32 = v21[4];
            if (v20 >= v32)
              break;
            v21 = (_QWORD *)*v21;
            v28 = v29;
            if (!*v29)
              goto LABEL_22;
          }
          if (v32 >= v20)
          {
            operator delete(v27);
            goto LABEL_58;
          }
          v21 = (_QWORD *)v21[1];
        }
        while (v21);
        v28 = v29 + 1;
        *v27 = 0;
        v27[1] = 0;
        v27[2] = v29;
        v29[1] = v27;
        v30 = (_QWORD *)*v234;
        if (*v234)
          goto LABEL_23;
      }
      else
      {
LABEL_22:
        *v27 = 0;
        v27[1] = 0;
        v27[2] = v29;
        *v28 = v27;
        v30 = (_QWORD *)*v234;
        if (*v234)
        {
LABEL_23:
          v234 = v30;
          v27 = (_QWORD *)*v28;
        }
      }
      v31 = v235;
      *((_BYTE *)v27 + 24) = v27 == v235;
      if (v27 != v31)
      {
        do
        {
          v33 = v27[2];
          if (*(_BYTE *)(v33 + 24))
            break;
          v34 = *(_QWORD **)(v33 + 16);
          v35 = *v34;
          if (*v34 == v33)
          {
            v38 = v34[1];
            if (!v38 || (v39 = *(unsigned __int8 *)(v38 + 24), v36 = (_BYTE *)(v38 + 24), v39))
            {
              if (*(_QWORD **)v33 == v27)
              {
                *(_BYTE *)(v33 + 24) = 1;
                *((_BYTE *)v34 + 24) = 0;
                v42 = *(_QWORD *)(v33 + 8);
                *v34 = v42;
                if (v42)
                  goto LABEL_44;
              }
              else
              {
                v40 = *(uint64_t **)(v33 + 8);
                v41 = *v40;
                *(_QWORD *)(v33 + 8) = *v40;
                if (v41)
                {
                  *(_QWORD *)(v41 + 16) = v33;
                  v34 = *(_QWORD **)(v33 + 16);
                }
                v40[2] = (uint64_t)v34;
                *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8 * (**(_QWORD **)(v33 + 16) != v33)) = v40;
                *v40 = v33;
                *(_QWORD *)(v33 + 16) = v40;
                v34 = (_QWORD *)v40[2];
                v33 = *v34;
                *((_BYTE *)v40 + 24) = 1;
                *((_BYTE *)v34 + 24) = 0;
                v42 = *(_QWORD *)(v33 + 8);
                *v34 = v42;
                if (v42)
LABEL_44:
                  *(_QWORD *)(v42 + 16) = v34;
              }
              *(_QWORD *)(v33 + 16) = v34[2];
              *(_QWORD *)(v34[2] + 8 * (*(_QWORD *)v34[2] != (_QWORD)v34)) = v33;
              *(_QWORD *)(v33 + 8) = v34;
LABEL_56:
              v34[2] = v33;
              break;
            }
          }
          else if (!v35 || (v37 = *(unsigned __int8 *)(v35 + 24), v36 = (_BYTE *)(v35 + 24), v37))
          {
            if (*(_QWORD **)v33 == v27)
            {
              v200 = v27[1];
              *(_QWORD *)v33 = v200;
              if (v200)
              {
                *(_QWORD *)(v200 + 16) = v33;
                v34 = *(_QWORD **)(v33 + 16);
              }
              v27[2] = v34;
              *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8 * (**(_QWORD **)(v33 + 16) != v33)) = v27;
              v27[1] = v33;
              *(_QWORD *)(v33 + 16) = v27;
              v34 = (_QWORD *)v27[2];
              *((_BYTE *)v27 + 24) = 1;
              *((_BYTE *)v34 + 24) = 0;
              v33 = v34[1];
              v46 = *(_QWORD **)v33;
              v34[1] = *(_QWORD *)v33;
              if (v46)
LABEL_54:
                v46[2] = v34;
            }
            else
            {
              *(_BYTE *)(v33 + 24) = 1;
              *((_BYTE *)v34 + 24) = 0;
              v33 = v34[1];
              v46 = *(_QWORD **)v33;
              v34[1] = *(_QWORD *)v33;
              if (v46)
                goto LABEL_54;
            }
            *(_QWORD *)(v33 + 16) = v34[2];
            *(_QWORD *)(v34[2] + 8 * (*(_QWORD *)v34[2] != (_QWORD)v34)) = v33;
            *(_QWORD *)v33 = v34;
            goto LABEL_56;
          }
          *(_BYTE *)(v33 + 24) = 1;
          v27 = v34;
          *((_BYTE *)v34 + 24) = v34 == v31;
          *v36 = 1;
        }
        while (v34 != v31);
      }
      ++v236;
LABEL_58:
      v47 = operator new(0x30uLL);
      v47[4] = v14;
      v47[5] = v20;
      v48 = &v232;
      v49 = &v232;
      v50 = v232;
      if (v232)
      {
        while (1)
        {
          while (1)
          {
            v48 = (_QWORD **)v50;
            v53 = v50[4];
            if (v14 >= v53)
              break;
            v50 = (_QWORD *)*v50;
            v49 = v48;
            if (!*v48)
              goto LABEL_59;
          }
          if (v53 >= v14)
            break;
          v50 = (_QWORD *)v50[1];
          if (!v50)
          {
            v49 = v48 + 1;
            *v47 = 0;
            v47[1] = 0;
            v47[2] = v48;
            v48[1] = v47;
            v51 = (_QWORD *)*v231;
            if (*v231)
              goto LABEL_60;
            goto LABEL_61;
          }
        }
        operator delete(v47);
        v64 = v14 + 1;
        v223 = v14;
        v65 = v19 + 1;
        v66 = v235;
        v225 = v20;
        if (v235)
          goto LABEL_91;
        goto LABEL_100;
      }
LABEL_59:
      *v47 = 0;
      v47[1] = 0;
      v47[2] = v48;
      *v49 = v47;
      v51 = (_QWORD *)*v231;
      if (*v231)
      {
LABEL_60:
        v231 = v51;
        v47 = (_QWORD *)*v49;
      }
LABEL_61:
      v52 = v232;
      *((_BYTE *)v47 + 24) = v47 == v232;
      if (v47 != v52)
      {
        do
        {
          v54 = v47[2];
          if (*(_BYTE *)(v54 + 24))
            break;
          v55 = *(_QWORD **)(v54 + 16);
          v56 = *v55;
          if (*v55 == v54)
          {
            v59 = v55[1];
            if (!v59 || (v60 = *(unsigned __int8 *)(v59 + 24), v57 = (_BYTE *)(v59 + 24), v60))
            {
              if (*(_QWORD **)v54 == v47)
              {
                *(_BYTE *)(v54 + 24) = 1;
                *((_BYTE *)v55 + 24) = 0;
                v63 = *(_QWORD *)(v54 + 8);
                *v55 = v63;
                if (v63)
                  goto LABEL_81;
              }
              else
              {
                v61 = *(uint64_t **)(v54 + 8);
                v62 = *v61;
                *(_QWORD *)(v54 + 8) = *v61;
                if (v62)
                {
                  *(_QWORD *)(v62 + 16) = v54;
                  v55 = *(_QWORD **)(v54 + 16);
                }
                v61[2] = (uint64_t)v55;
                *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v61;
                *v61 = v54;
                *(_QWORD *)(v54 + 16) = v61;
                v55 = (_QWORD *)v61[2];
                v54 = *v55;
                *((_BYTE *)v61 + 24) = 1;
                *((_BYTE *)v55 + 24) = 0;
                v63 = *(_QWORD *)(v54 + 8);
                *v55 = v63;
                if (v63)
LABEL_81:
                  *(_QWORD *)(v63 + 16) = v55;
              }
              *(_QWORD *)(v54 + 16) = v55[2];
              *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
              *(_QWORD *)(v54 + 8) = v55;
LABEL_89:
              v55[2] = v54;
              break;
            }
          }
          else if (!v56 || (v58 = *(unsigned __int8 *)(v56 + 24), v57 = (_BYTE *)(v56 + 24), v58))
          {
            if (*(_QWORD **)v54 == v47)
            {
              v201 = v47[1];
              *(_QWORD *)v54 = v201;
              if (v201)
              {
                *(_QWORD *)(v201 + 16) = v54;
                v55 = *(_QWORD **)(v54 + 16);
              }
              v47[2] = v55;
              *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v47;
              v47[1] = v54;
              *(_QWORD *)(v54 + 16) = v47;
              v55 = (_QWORD *)v47[2];
              *((_BYTE *)v47 + 24) = 1;
              *((_BYTE *)v55 + 24) = 0;
              v54 = v55[1];
              v67 = *(_QWORD **)v54;
              v55[1] = *(_QWORD *)v54;
              if (v67)
LABEL_87:
                v67[2] = v55;
            }
            else
            {
              *(_BYTE *)(v54 + 24) = 1;
              *((_BYTE *)v55 + 24) = 0;
              v54 = v55[1];
              v67 = *(_QWORD **)v54;
              v55[1] = *(_QWORD *)v54;
              if (v67)
                goto LABEL_87;
            }
            *(_QWORD *)(v54 + 16) = v55[2];
            *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
            *(_QWORD *)v54 = v55;
            goto LABEL_89;
          }
          *(_BYTE *)(v54 + 24) = 1;
          v47 = v55;
          *((_BYTE *)v55 + 24) = v55 == v52;
          *v57 = 1;
        }
        while (v55 != v52);
      }
      ++v233;
      v64 = v14 + 1;
      v223 = v14;
      v65 = v19 + 1;
      v66 = v235;
      v225 = v20;
      if (v235)
        goto LABEL_91;
LABEL_100:
      v73 = operator new(0x30uLL);
      v73[4] = v65;
      v73[5] = v64;
      v74 = &v235;
      v75 = &v235;
      if (v66)
      {
        do
        {
          while (1)
          {
            v75 = (_QWORD **)v66;
            v79 = v66[4];
            if (v65 >= v79)
              break;
            v66 = (_QWORD *)*v66;
            v74 = v75;
            if (!*v75)
              goto LABEL_101;
          }
          if (v79 >= v65)
          {
            operator delete(v73);
            v78 = v64;
            goto LABEL_138;
          }
          v66 = (_QWORD *)v66[1];
        }
        while (v66);
        v74 = v75 + 1;
        *v73 = 0;
        v73[1] = 0;
        v73[2] = v75;
        v75[1] = v73;
        v76 = (_QWORD *)*v234;
        if (*v234)
          goto LABEL_102;
      }
      else
      {
LABEL_101:
        *v73 = 0;
        v73[1] = 0;
        v73[2] = v75;
        *v74 = v73;
        v76 = (_QWORD *)*v234;
        if (*v234)
        {
LABEL_102:
          v234 = v76;
          v73 = (_QWORD *)*v74;
        }
      }
      v77 = v235;
      *((_BYTE *)v73 + 24) = v73 == v235;
      v78 = v64;
      if (v73 != v77)
      {
        do
        {
          v80 = v73[2];
          if (*(_BYTE *)(v80 + 24))
            break;
          v81 = *(_QWORD **)(v80 + 16);
          v82 = *v81;
          if (*v81 == v80)
          {
            v85 = v81[1];
            if (!v85 || (v86 = *(unsigned __int8 *)(v85 + 24), v83 = (_BYTE *)(v85 + 24), v86))
            {
              if (*(_QWORD **)v80 == v73)
              {
                *(_BYTE *)(v80 + 24) = 1;
                *((_BYTE *)v81 + 24) = 0;
                v89 = *(_QWORD *)(v80 + 8);
                *v81 = v89;
                if (v89)
                  goto LABEL_123;
              }
              else
              {
                v87 = *(uint64_t **)(v80 + 8);
                v88 = *v87;
                *(_QWORD *)(v80 + 8) = *v87;
                if (v88)
                {
                  *(_QWORD *)(v88 + 16) = v80;
                  v81 = *(_QWORD **)(v80 + 16);
                }
                v87[2] = (uint64_t)v81;
                *(_QWORD *)(*(_QWORD *)(v80 + 16) + 8 * (**(_QWORD **)(v80 + 16) != v80)) = v87;
                *v87 = v80;
                *(_QWORD *)(v80 + 16) = v87;
                v81 = (_QWORD *)v87[2];
                v80 = *v81;
                *((_BYTE *)v87 + 24) = 1;
                *((_BYTE *)v81 + 24) = 0;
                v89 = *(_QWORD *)(v80 + 8);
                *v81 = v89;
                if (v89)
LABEL_123:
                  *(_QWORD *)(v89 + 16) = v81;
              }
              *(_QWORD *)(v80 + 16) = v81[2];
              *(_QWORD *)(v81[2] + 8 * (*(_QWORD *)v81[2] != (_QWORD)v81)) = v80;
              *(_QWORD *)(v80 + 8) = v81;
LABEL_136:
              v81[2] = v80;
              break;
            }
          }
          else if (!v82 || (v84 = *(unsigned __int8 *)(v82 + 24), v83 = (_BYTE *)(v82 + 24), v84))
          {
            if (*(_QWORD **)v80 == v73)
            {
              v202 = v73[1];
              *(_QWORD *)v80 = v202;
              if (v202)
              {
                *(_QWORD *)(v202 + 16) = v80;
                v81 = *(_QWORD **)(v80 + 16);
              }
              v73[2] = v81;
              *(_QWORD *)(*(_QWORD *)(v80 + 16) + 8 * (**(_QWORD **)(v80 + 16) != v80)) = v73;
              v73[1] = v80;
              *(_QWORD *)(v80 + 16) = v73;
              v81 = (_QWORD *)v73[2];
              *((_BYTE *)v73 + 24) = 1;
              *((_BYTE *)v81 + 24) = 0;
              v80 = v81[1];
              v94 = *(_QWORD **)v80;
              v81[1] = *(_QWORD *)v80;
              if (v94)
LABEL_134:
                v94[2] = v81;
            }
            else
            {
              *(_BYTE *)(v80 + 24) = 1;
              *((_BYTE *)v81 + 24) = 0;
              v80 = v81[1];
              v94 = *(_QWORD **)v80;
              v81[1] = *(_QWORD *)v80;
              if (v94)
                goto LABEL_134;
            }
            *(_QWORD *)(v80 + 16) = v81[2];
            *(_QWORD *)(v81[2] + 8 * (*(_QWORD *)v81[2] != (_QWORD)v81)) = v80;
            *(_QWORD *)v80 = v81;
            goto LABEL_136;
          }
          *(_BYTE *)(v80 + 24) = 1;
          v73 = v81;
          *((_BYTE *)v81 + 24) = v81 == v77;
          *v83 = 1;
        }
        while (v81 != v77);
      }
      ++v236;
LABEL_138:
      v95 = operator new(0x30uLL);
      v95[4] = v78;
      v95[5] = v65;
      v96 = &v232;
      v97 = &v232;
      v98 = v232;
      if (v232)
      {
        do
        {
          while (1)
          {
            v96 = (_QWORD **)v98;
            v101 = v98[4];
            if (v78 >= v101)
              break;
            v98 = (_QWORD *)*v98;
            v97 = v96;
            if (!*v96)
              goto LABEL_139;
          }
          if (v101 >= v78)
          {
            operator delete(v95);
            goto LABEL_170;
          }
          v98 = (_QWORD *)v98[1];
        }
        while (v98);
        v97 = v96 + 1;
        *v95 = 0;
        v95[1] = 0;
        v95[2] = v96;
        v96[1] = v95;
        v99 = (_QWORD *)*v231;
        if (*v231)
          goto LABEL_140;
      }
      else
      {
LABEL_139:
        *v95 = 0;
        v95[1] = 0;
        v95[2] = v96;
        *v97 = v95;
        v99 = (_QWORD *)*v231;
        if (*v231)
        {
LABEL_140:
          v231 = v99;
          v95 = (_QWORD *)*v97;
        }
      }
      v100 = v232;
      *((_BYTE *)v95 + 24) = v95 == v232;
      if (v95 != v100)
      {
        do
        {
          v102 = v95[2];
          if (*(_BYTE *)(v102 + 24))
            break;
          v103 = *(_QWORD **)(v102 + 16);
          v104 = *v103;
          if (*v103 == v102)
          {
            v107 = v103[1];
            if (!v107 || (v108 = *(unsigned __int8 *)(v107 + 24), v105 = (_BYTE *)(v107 + 24), v108))
            {
              if (*(_QWORD **)v102 == v95)
              {
                *(_BYTE *)(v102 + 24) = 1;
                *((_BYTE *)v103 + 24) = 0;
                v111 = *(_QWORD *)(v102 + 8);
                *v103 = v111;
                if (v111)
                  goto LABEL_161;
              }
              else
              {
                v109 = *(uint64_t **)(v102 + 8);
                v110 = *v109;
                *(_QWORD *)(v102 + 8) = *v109;
                if (v110)
                {
                  *(_QWORD *)(v110 + 16) = v102;
                  v103 = *(_QWORD **)(v102 + 16);
                }
                v109[2] = (uint64_t)v103;
                *(_QWORD *)(*(_QWORD *)(v102 + 16) + 8 * (**(_QWORD **)(v102 + 16) != v102)) = v109;
                *v109 = v102;
                *(_QWORD *)(v102 + 16) = v109;
                v103 = (_QWORD *)v109[2];
                v102 = *v103;
                *((_BYTE *)v109 + 24) = 1;
                *((_BYTE *)v103 + 24) = 0;
                v111 = *(_QWORD *)(v102 + 8);
                *v103 = v111;
                if (v111)
LABEL_161:
                  *(_QWORD *)(v111 + 16) = v103;
              }
              *(_QWORD *)(v102 + 16) = v103[2];
              *(_QWORD *)(v103[2] + 8 * (*(_QWORD *)v103[2] != (_QWORD)v103)) = v102;
              *(_QWORD *)(v102 + 8) = v103;
LABEL_168:
              v103[2] = v102;
              break;
            }
          }
          else if (!v104 || (v106 = *(unsigned __int8 *)(v104 + 24), v105 = (_BYTE *)(v104 + 24), v106))
          {
            if (*(_QWORD **)v102 == v95)
            {
              v203 = v95[1];
              *(_QWORD *)v102 = v203;
              if (v203)
              {
                *(_QWORD *)(v203 + 16) = v102;
                v103 = *(_QWORD **)(v102 + 16);
              }
              v95[2] = v103;
              *(_QWORD *)(*(_QWORD *)(v102 + 16) + 8 * (**(_QWORD **)(v102 + 16) != v102)) = v95;
              v95[1] = v102;
              *(_QWORD *)(v102 + 16) = v95;
              v103 = (_QWORD *)v95[2];
              *((_BYTE *)v95 + 24) = 1;
              *((_BYTE *)v103 + 24) = 0;
              v102 = v103[1];
              v112 = *(_QWORD **)v102;
              v103[1] = *(_QWORD *)v102;
              if (v112)
LABEL_166:
                v112[2] = v103;
            }
            else
            {
              *(_BYTE *)(v102 + 24) = 1;
              *((_BYTE *)v103 + 24) = 0;
              v102 = v103[1];
              v112 = *(_QWORD **)v102;
              v103[1] = *(_QWORD *)v102;
              if (v112)
                goto LABEL_166;
            }
            *(_QWORD *)(v102 + 16) = v103[2];
            *(_QWORD *)(v103[2] + 8 * (*(_QWORD *)v103[2] != (_QWORD)v103)) = v102;
            *(_QWORD *)v102 = v103;
            goto LABEL_168;
          }
          *(_BYTE *)(v102 + 24) = 1;
          v95 = v103;
          *((_BYTE *)v103 + 24) = v103 == v100;
          *v105 = 1;
        }
        while (v103 != v100);
      }
      ++v233;
LABEL_170:
      v219 = v78 + 1;
LABEL_171:
      v113 = 0;
      v114 = 0;
      v224 = v16;
      if (v11)
        v115 = 0;
      else
        v115 = v16 == v216;
      v222 = v78;
      if (v115)
        v11 = v78;
      v220 = v11;
      HIBYTE(v227) = 0;
      LOBYTE(__p[0]) = 0;
      v116 = 1;
      for (i = v225; ; i /= 0xAuLL)
      {
        v118 = (i % 0xA) | 0x30;
        if (v116 >= 0x17)
        {
          v120 = (v116 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v116 | 7) != 0x17)
            v120 = v116 | 7;
          v121 = v120 + 1;
          v122 = operator new(v120 + 1);
          *((_QWORD *)&v237 + 1) = v116;
          v238 = v121 | 0x8000000000000000;
          *(_QWORD *)&v237 = v122;
          *v122 = v118;
          v119 = v122 + 1;
        }
        else
        {
          v238 = 0;
          HIBYTE(v238) = v116;
          v119 = (char *)&v237 + 1;
          v237 = v118;
          if (!v113)
          {
            BYTE1(v237) = 0;
            if (!v114)
              goto LABEL_181;
LABEL_180:
            operator delete(__p[0]);
            goto LABEL_181;
          }
        }
        if (v114)
          v123 = (void **)__p[0];
        else
          v123 = __p;
        memmove(v119, v123, v113);
        v119[v113] = 0;
        if (v114)
          goto LABEL_180;
LABEL_181:
        *(_OWORD *)__p = v237;
        v227 = v238;
        if (i < 0xA)
          break;
        v114 = v227 < 0;
        if (v227 >= 0)
          v113 = HIBYTE(v227);
        else
          v113 = (size_t)__p[1];
        v116 = v113 + 1;
        if (v113 + 1 > 0x7FFFFFFFFFFFFFF7)
          sub_1BE61F1B4();
      }
      v124 = sub_1BE66A2C4(v221, (uint64_t)__p);
      if (SHIBYTE(v227) < 0)
        operator delete(__p[0]);
      v125 = 0;
      v126 = 0;
      HIBYTE(v227) = 0;
      LOBYTE(__p[0]) = 0;
      v127 = 1;
      while (2)
      {
        v128 = (v19 % 0xA) | 0x30;
        if (v127 >= 0x17)
        {
          v130 = (v127 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v127 | 7) != 0x17)
            v130 = v127 | 7;
          v131 = v130 + 1;
          v132 = operator new(v130 + 1);
          *((_QWORD *)&v237 + 1) = v127;
          v238 = v131 | 0x8000000000000000;
          *(_QWORD *)&v237 = v132;
          *v132 = v128;
          v129 = v132 + 1;
        }
        else
        {
          v238 = 0;
          HIBYTE(v238) = v127;
          v129 = (char *)&v237 + 1;
          v237 = v128;
          if (!v125)
          {
            BYTE1(v237) = 0;
            if (v126)
              goto LABEL_201;
            goto LABEL_202;
          }
        }
        if (v126)
          v133 = (void **)__p[0];
        else
          v133 = __p;
        memmove(v129, v133, v125);
        v129[v125] = 0;
        if (v126)
LABEL_201:
          operator delete(__p[0]);
LABEL_202:
        *(_OWORD *)__p = v237;
        v227 = v238;
        if (v19 >= 0xA)
        {
          v126 = v227 < 0;
          if (v227 >= 0)
            v125 = HIBYTE(v227);
          else
            v125 = (size_t)__p[1];
          v127 = v125 + 1;
          v19 /= 0xAuLL;
          if (v125 + 1 > 0x7FFFFFFFFFFFFFF7)
            sub_1BE61F1B4();
          continue;
        }
        break;
      }
      v134 = sub_1BE66A2C4(v221, (uint64_t)__p);
      if (SHIBYTE(v227) < 0)
        operator delete(__p[0]);
      v135 = v222 + 10000 * v223;
      v136 = v229;
      v11 = v220;
      if (v229)
      {
        v137 = &v229;
        do
        {
          v138 = v136;
          v139 = v137;
          v140 = v136[4];
          v141 = v136 + 1;
          if (v140 >= v135)
          {
            v141 = v138;
            v137 = v138;
          }
          v136 = (_QWORD *)*v141;
        }
        while (v136);
        if (v137 != &v229)
        {
          if (v140 < v135)
            v138 = v139;
          if (v135 >= v138[4])
          {
            v12 = v215;
            v14 = v219;
            v16 = v224 + 1;
            if (v224 + 1 == v214)
              break;
            goto LABEL_11;
          }
        }
      }
      v142 = v65 - v225;
      v144 = *(unint64_t **)(v213 + 8);
      v143 = *(_QWORD *)(v213 + 16);
      if ((unint64_t)v144 < v143)
      {
        *v144 = v223;
        v144[1] = v222;
        v144[2] = (unint64_t)v124;
        v144[3] = (unint64_t)v134;
        v144[4] = 0;
        v144[6] = v142;
        v144[7] = v142;
        v145 = (uint64_t *)(v144 + 9);
        v144[8] = v142;
        goto LABEL_241;
      }
      v146 = *(unint64_t **)v213;
      v147 = 0x8E38E38E38E38E39 * (((uint64_t)v144 - *(_QWORD *)v213) >> 3);
      v148 = v147 + 1;
      if (v147 + 1 > 0x38E38E38E38E38ELL)
        sub_1BE61F930();
      v149 = 0x8E38E38E38E38E39 * ((uint64_t)(v143 - (_QWORD)v146) >> 3);
      if (2 * v149 > v148)
        v148 = 2 * v149;
      if (v149 >= 0x1C71C71C71C71C7)
        v150 = 0x38E38E38E38E38ELL;
      else
        v150 = v148;
      if (v150 > 0x38E38E38E38E38ELL)
        sub_1BE61F100();
      v151 = (char *)operator new(72 * v150);
      v152 = (int64x2_t *)&v151[72 * v147];
      v152->i64[0] = v223;
      v152->i64[1] = v222;
      v152[1].i64[0] = (uint64_t)v124;
      v152[1].i64[1] = (uint64_t)v134;
      v152[2].i64[0] = 0;
      v152[3] = vdupq_n_s64(v142);
      v152[4].i64[0] = v142;
      if (v144 == v146)
      {
        v174 = &v151[72 * v150];
        v145 = &v152[4].i64[1];
        *(_QWORD *)v213 = v152;
        *(_QWORD *)(v213 + 8) = (char *)v152 + 72;
        *(_QWORD *)(v213 + 16) = v174;
        if (v146)
          goto LABEL_240;
      }
      else
      {
        v153 = 0;
        do
        {
          v154 = &v152->i8[v153 * 8];
          *(_OWORD *)(v154 - 72) = *(_OWORD *)&v144[v153 - 9];
          *(_OWORD *)(v154 - 56) = *(_OWORD *)&v144[v153 - 7];
          *(_OWORD *)(v154 - 40) = *(_OWORD *)&v144[v153 - 5];
          *(_OWORD *)(v154 - 24) = *(_OWORD *)&v144[v153 - 3];
          *((_QWORD *)v154 - 1) = v144[v153 - 1];
          v153 -= 9;
        }
        while (&v144[v153] != v146);
        v155 = &v151[72 * v150];
        v145 = &v152[4].i64[1];
        *(_QWORD *)v213 = (char *)v152 + v153 * 8;
        *(_QWORD *)(v213 + 8) = (char *)v152 + 72;
        *(_QWORD *)(v213 + 16) = v155;
        if (v146)
LABEL_240:
          operator delete(v146);
      }
LABEL_241:
      *(_QWORD *)(v213 + 8) = v145;
      v156 = v229;
      v157 = &v229;
      v158 = &v229;
      v159 = v224;
      if (v229)
      {
        while (1)
        {
          while (1)
          {
            v157 = v156;
            v160 = v156[4];
            if (v135 >= v160)
              break;
            v156 = (_QWORD *)*v157;
            v158 = v157;
            if (!*v157)
              goto LABEL_248;
          }
          if (v160 >= v135)
            break;
          v156 = (_QWORD *)v157[1];
          if (!v156)
          {
            v158 = v157 + 1;
            goto LABEL_248;
          }
        }
        v161 = v157;
        v12 = v215;
        v14 = v219;
      }
      else
      {
LABEL_248:
        v161 = operator new(0x30uLL);
        v161[4] = v135;
        v161[5] = 0;
        *v161 = 0;
        v161[1] = 0;
        v161[2] = v157;
        *v158 = v161;
        v162 = v161;
        if (*v228)
        {
          v228 = (_QWORD *)*v228;
          v162 = (_QWORD *)*v158;
        }
        v163 = v229;
        v115 = v162 == v229;
        *((_BYTE *)v162 + 24) = v162 == v229;
        v12 = v215;
        v159 = v224;
        v14 = v219;
        if (!v115)
        {
          do
          {
            v164 = v162[2];
            if (*(_BYTE *)(v164 + 24))
              break;
            v165 = *(uint64_t **)(v164 + 16);
            v166 = *v165;
            if (*v165 == v164)
            {
              v169 = v165[1];
              if (!v169 || (v170 = *(unsigned __int8 *)(v169 + 24), v167 = (_BYTE *)(v169 + 24), v170))
              {
                if (*(_QWORD **)v164 == v162)
                {
                  *(_BYTE *)(v164 + 24) = 1;
                  *((_BYTE *)v165 + 24) = 0;
                  v173 = *(_QWORD *)(v164 + 8);
                  *v165 = v173;
                  if (v173)
                    goto LABEL_265;
                }
                else
                {
                  v171 = *(uint64_t **)(v164 + 8);
                  v172 = *v171;
                  *(_QWORD *)(v164 + 8) = *v171;
                  if (v172)
                  {
                    *(_QWORD *)(v172 + 16) = v164;
                    v165 = *(uint64_t **)(v164 + 16);
                  }
                  v171[2] = (uint64_t)v165;
                  *(_QWORD *)(*(_QWORD *)(v164 + 16) + 8 * (**(_QWORD **)(v164 + 16) != v164)) = v171;
                  *v171 = v164;
                  *(_QWORD *)(v164 + 16) = v171;
                  v165 = (uint64_t *)v171[2];
                  v164 = *v165;
                  *((_BYTE *)v171 + 24) = 1;
                  *((_BYTE *)v165 + 24) = 0;
                  v173 = *(_QWORD *)(v164 + 8);
                  *v165 = v173;
                  if (v173)
LABEL_265:
                    *(_QWORD *)(v173 + 16) = v165;
                }
                *(_QWORD *)(v164 + 16) = v165[2];
                *(_QWORD *)(v165[2] + 8 * (*(_QWORD *)v165[2] != (_QWORD)v165)) = v164;
                *(_QWORD *)(v164 + 8) = v165;
LABEL_274:
                v165[2] = v164;
                break;
              }
            }
            else if (!v166 || (v168 = *(unsigned __int8 *)(v166 + 24), v167 = (_BYTE *)(v166 + 24), v168))
            {
              if (*(_QWORD **)v164 == v162)
              {
                v204 = v162[1];
                *(_QWORD *)v164 = v204;
                if (v204)
                {
                  *(_QWORD *)(v204 + 16) = v164;
                  v165 = *(uint64_t **)(v164 + 16);
                }
                v162[2] = v165;
                *(_QWORD *)(*(_QWORD *)(v164 + 16) + 8 * (**(_QWORD **)(v164 + 16) != v164)) = v162;
                v162[1] = v164;
                *(_QWORD *)(v164 + 16) = v162;
                v165 = (uint64_t *)v162[2];
                *((_BYTE *)v162 + 24) = 1;
                *((_BYTE *)v165 + 24) = 0;
                v164 = v165[1];
                v175 = *(_QWORD **)v164;
                v165[1] = *(_QWORD *)v164;
                if (v175)
LABEL_272:
                  v175[2] = v165;
              }
              else
              {
                *(_BYTE *)(v164 + 24) = 1;
                *((_BYTE *)v165 + 24) = 0;
                v164 = v165[1];
                v175 = *(_QWORD **)v164;
                v165[1] = *(_QWORD *)v164;
                if (v175)
                  goto LABEL_272;
              }
              *(_QWORD *)(v164 + 16) = v165[2];
              *(_QWORD *)(v165[2] + 8 * (*(_QWORD *)v165[2] != (_QWORD)v165)) = v164;
              *(_QWORD *)v164 = v165;
              goto LABEL_274;
            }
            *(_BYTE *)(v164 + 24) = 1;
            v162 = v165;
            *((_BYTE *)v165 + 24) = v165 == v163;
            *v167 = 1;
          }
          while (v165 != v163);
        }
        ++v230;
      }
      v161[5] = v218++;
      v16 = v159 + 1;
    }
    while (v16 != v214);
LABEL_5:
    if (++v12 != v212)
      continue;
    break;
  }
  v209 = v229;
LABEL_375:
  *a4 = v236;
  sub_1BE62033C((uint64_t)&v228, v209);
  sub_1BE62033C((uint64_t)&v231, v232);
  sub_1BE62033C((uint64_t)&v234, v235);
  return v11;
}

void sub_1BE69DC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36)
{
  uint64_t v36;

  sub_1BE62033C(v36 - 160, 0);
  sub_1BE62033C(v36 - 136, *(_QWORD **)(v36 - 128));
  _Unwind_Resume(a1);
}

void spatialSegmentationNetworkFromDrawing(CHDrawing *a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  CHDrawing *v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t j;
  double v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  char *v61;
  char *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  void *v67;
  unint64_t v68;
  void *__p;
  _OWORD *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;

  v6 = a1;
  v7 = 0;
  v8 = 0;
  v9 = 0.0;
  for (i = objc_msgSend_strokeCount(v6, v10, v11, v12, v13, v14);
        v8 < i;
        i = objc_msgSend_strokeCount(v6, v23, v24, v25, v26, v27))
  {
    for (j = 0; j < objc_msgSend_pointCountForStrokeIndex_(v6, v16, v8, v18, v19, v20); ++j)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v6, v23, v8, j, v26, v27);
      v9 = v28;
      if (v7 + j)
      {
        v22 = v28 - v3;
        v3 = v3 + (v9 - v3) / (double)(v7 + j + 1);
        v4 = v2 + v22 * (v9 - v3);
        v2 = v4;
      }
      else
      {
        v2 = 0.0;
        v3 = v28;
      }
    }
    ++v8;
    v7 += j;
  }
  if (objc_msgSend_pointCount(v6, v16, v17, v18, v19, v20) == 1)
  {
    v29 = v9 + 1.0;
    v30 = v9 + -1.0;
    if (v7)
    {
      v31 = v7 + 1;
      if (v7 == -1)
      {
        v2 = 0.0;
        v32 = 2;
        v3 = v9 + -1.0;
        goto LABEL_22;
      }
      v33 = v2 + (v29 - v3) * (v29 - (v3 + (v29 - v3) / (double)v31));
      v7 += 2;
      v29 = v3 + (v29 - v3) / (double)v31;
    }
    else
    {
      v33 = 0.0;
      v7 = 2;
    }
    v3 = v29 + (v30 - v29) / (double)v7;
    v4 = v33 + (v30 - v29) * (v30 - v3);
    v2 = v4;
  }
  if (v7 < 2)
  {
    v29 = v9 + 1.0;
    v30 = v9 + -1.0;
    v32 = 2;
    if (!v7)
    {
      v36 = 0.0;
      goto LABEL_25;
    }
  }
  else
  {
    v34 = v4 / (double)(v7 - 1);
    if (v34 >= 0.0001)
    {
LABEL_26:
      v35 = sqrt(v34);
      goto LABEL_27;
    }
    v35 = 0.0;
    v32 = v7 + 1;
    if (v7 == -1)
      goto LABEL_27;
    v29 = v9 + 1.0;
    v30 = v9 + -1.0;
  }
LABEL_22:
  v35 = 0.0;
  if (v32 != -1)
  {
    v36 = v2 + (v29 - v3) * (v29 - (v3 + (v29 - v3) / (double)v32));
    v29 = v3 + (v29 - v3) / (double)v32++;
LABEL_25:
    v34 = (v36 + (v30 - v29) * (v30 - (v29 + (v30 - v29) / (double)v32))) / (double)(v32 - 1);
    goto LABEL_26;
  }
LABEL_27:

  v75 = 0;
  v76 = 0;
  v77 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  sub_1BE69E2C4(v6, &v75, &v72, v35 * 3.0);
  __p = 0;
  v70 = 0;
  v71 = 0;
  sub_1BE66ADA4(a2);
  v68 = 0;
  v43 = (uint64_t **)(a2 + 64);
  v42 = *(uint64_t **)(a2 + 64);
  if (v42)
  {
    v44 = *(uint64_t **)(a2 + 64);
    do
    {
      v45 = v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
    if (v45 != (uint64_t *)v43 && !v45[4])
    {
      v46 = (uint64_t *)v45[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        v48 = v45;
        do
        {
          v47 = (uint64_t *)v48[2];
          v49 = *v47 == (_QWORD)v48;
          v48 = v47;
        }
        while (!v49);
      }
      if (*(uint64_t **)(a2 + 56) == v45)
        *(_QWORD *)(a2 + 56) = v47;
      --*(_QWORD *)(a2 + 72);
      sub_1BE670DF8(v42, v45);
      operator delete(v45);
    }
  }
  *(_BYTE *)(*(_QWORD *)(a2 + 32) + 32) = 0;
  objc_msgSend_strokeCount(v6, v37, v38, v39, v40, v41, v68);
  v50 = sub_1BE69C498(a2, (uint64_t *)&v72, (uint64_t)&__p, (uint64_t *)&v68);
  v51 = *(_QWORD *)(a2 + 32);
  v52 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a2 + 40) - v51) >> 3);
  if (v68 > v52)
  {
    sub_1BE66CE80((void **)(a2 + 32), v68 - v52);
    goto LABEL_44;
  }
  if (v68 >= v52)
  {
LABEL_44:
    v53 = *v43;
    v54 = (uint64_t **)(a2 + 64);
    if (*v43)
      goto LABEL_49;
    goto LABEL_53;
  }
  *(_QWORD *)(a2 + 40) = v51 + 40 * v68;
  v53 = *v43;
  v54 = (uint64_t **)(a2 + 64);
  if (!*v43)
  {
LABEL_53:
    v56 = (uint64_t *)operator new(0x28uLL);
    v56[4] = v50;
    *v56 = 0;
    v56[1] = 0;
    v56[2] = (uint64_t)v54;
    *v43 = v56;
    v57 = **(_QWORD **)(a2 + 56);
    if (v57)
    {
      *(_QWORD *)(a2 + 56) = v57;
      v56 = *v43;
    }
    sub_1BE61F5C0(*(uint64_t **)(a2 + 64), v56);
    ++*(_QWORD *)(a2 + 72);
    goto LABEL_56;
  }
  while (1)
  {
LABEL_49:
    while (1)
    {
      v54 = (uint64_t **)v53;
      v55 = v53[4];
      if (v55 <= v50)
        break;
      v53 = *v54;
      v43 = v54;
      if (!*v54)
        goto LABEL_53;
    }
    if (v55 >= v50)
      break;
    v53 = v54[1];
    if (!v53)
    {
      v43 = v54 + 1;
      goto LABEL_53;
    }
  }
LABEL_56:
  v58 = *(_QWORD *)(a2 + 32);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a2 + 40) - v58) >> 3) >= v50)
    *(_BYTE *)(v58 + 40 * v50 + 32) = 1;
  sub_1BE828388(a2, (uint64_t)&__p);
  v59 = __p;
  v60 = v70;
  if (__p != v70)
  {
    v61 = *(char **)(a2 + 88);
    do
    {
      if ((unint64_t)v61 < *(_QWORD *)(a2 + 96))
      {
        *(_OWORD *)v61 = *v59;
        *((_OWORD *)v61 + 1) = v59[1];
        *((_OWORD *)v61 + 2) = v59[2];
        *((_OWORD *)v61 + 3) = v59[3];
        *((_QWORD *)v61 + 8) = *((_QWORD *)v59 + 8);
        v61 += 72;
      }
      else
      {
        v61 = sub_1BE66D0D0((char **)(a2 + 80), (uint64_t)v59);
      }
      *(_QWORD *)(a2 + 88) = v61;
      v59 = (_OWORD *)((char *)v59 + 72);
    }
    while (v59 != v60);
  }
  Network::prepareNetwork((Network *)a2);
  if (__p)
  {
    v70 = __p;
    operator delete(__p);
  }
  v62 = (char *)v72;
  if (v72)
  {
    v63 = v73;
    v64 = v72;
    if (v73 != v72)
    {
      v65 = v73;
      do
      {
        v67 = (void *)*((_QWORD *)v65 - 3);
        v65 -= 24;
        v66 = v67;
        if (v67)
        {
          *((_QWORD *)v63 - 2) = v66;
          operator delete(v66);
        }
        v63 = v65;
      }
      while (v65 != v62);
      v64 = v72;
    }
    v73 = v62;
    operator delete(v64);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }

}

void sub_1BE69E1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v19;

  if (__p)
  {
    operator delete(__p);
    sub_1BE63CEBC(&a13);
    v19 = a16;
    if (!a16)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_1BE63CEBC(&a13);
    v19 = a16;
    if (!a16)
      goto LABEL_3;
  }
  a17 = (uint64_t)v19;
  operator delete(v19);

  _Unwind_Resume(a1);
}

void sub_1BE69E288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE69E29C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE69E2B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE69E2C4(void *a1, _QWORD *a2, _QWORD *a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  Segment *v14;
  Segment *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  double v30;
  double v31;
  BOOL v32;
  Segment *v34;
  Segment *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *i64;
  uint64_t *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int64x2_t *v45;
  char *v46;
  int v47;
  int v48;
  int64x2_t *v49;
  Segment *v50;
  void *v51;
  Segment *v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  int64x2_t *v58;
  Segment *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  double *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  double v69;
  double v70;
  double *v71;
  int v72;
  double v73;
  int v74;
  _BYTE *v75;
  unint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  BOOL v81;
  double *v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  double *v92;
  double *v93;
  double v94;
  double v95;
  double v96;
  double *v97;
  double v98;
  double v99;
  BOOL v100;
  double *v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double *v108;
  double v109;
  double *v110;
  double *v111;
  double *v112;
  double v113;
  BOOL v114;
  uint64_t v115;
  float64x2_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  int64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t *v128;
  Segment *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  int64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  size_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  __int128 *v182;
  _OWORD *v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  char *v187;
  unint64_t v188;
  uint64_t v189;
  _OWORD *v190;
  __int128 *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  size_t v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD *v198;
  __int128 *v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  float64x2_t *v207;
  char *v208;
  _BYTE *v209;
  _BYTE *v210;
  size_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  _BYTE *v215;
  _BYTE *v216;
  size_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  _BYTE *v221;
  _BYTE *v222;
  size_t v223;
  uint64_t v224;
  char *v225;
  Segment *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  float64_t v231;
  const void *v232;
  size_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  size_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  void *v247;
  __int128 v248;
  size_t v249;
  unint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  char **v256;
  _BYTE *v257;
  unint64_t v258;
  uint64_t v259;
  const void *v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  double v265;
  _BOOL4 v266;
  uint64_t v267;
  float64_t v268;
  uint64_t v269;
  double *v270;
  const Segment *v271;
  uint64_t v272;
  _BOOL4 v273;
  double v274;
  double v275;
  const Segment *v276;
  double *v277;
  double v278;
  float64_t v279;
  float64_t v280;
  void *v281;
  void *v282;
  void *v283;
  int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  Segment *v290;
  Segment *v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  char *j;
  void *v299;
  void *v300;
  void *v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  char *k;
  void *v309;
  void *v310;
  void *v311;
  const char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  char *m;
  void *v319;
  void *v320;
  void *v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  char *n;
  void *v329;
  void *v330;
  void *v331;
  const char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  double v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  double v346;
  unint64_t v347;
  double *v348;
  unint64_t v349;
  double *v350;
  double v351;
  double v352;
  char *v353;
  char *ii;
  void *v355;
  void *v356;
  void *v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  char *jj;
  void *v365;
  void *v366;
  void *v367;
  const char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  const char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  char *kk;
  void *v380;
  void *v381;
  void *v382;
  const char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  char *mm;
  void *v390;
  void *v391;
  void *v392;
  const char *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  char *nn;
  void *v400;
  void *v401;
  void *v402;
  void **v403;
  void **v404;
  float64_t v405;
  unint64_t v406;
  uint64_t v407;
  char *v408;
  uint64_t **v409;
  char *v410;
  uint64_t **v411;
  unint64_t v412;
  char **v413;
  uint64_t v414;
  int v415;
  double v416;
  double v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  char *v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  char *v427;
  char *v428;
  uint64_t v429;
  unint64_t v430;
  char *v431;
  uint64_t **v432;
  char *v433;
  uint64_t **v434;
  unint64_t v435;
  char **v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  __int128 v440;
  size_t v441;
  unint64_t v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  unint64_t v446;
  char *v447;
  unint64_t v448;
  const void *v449;
  void *v450;
  char *v451;
  char *v452;
  size_t v453;
  unint64_t v454;
  uint64_t v455;
  char *v456;
  uint64_t v457;
  unint64_t v458;
  char *v459;
  unint64_t v460;
  char *v461;
  void *v462;
  char *v463;
  char *v464;
  size_t v465;
  unint64_t v466;
  uint64_t v467;
  char *v468;
  uint64_t v469;
  unint64_t v470;
  char *v471;
  unint64_t v472;
  char *v473;
  void *v474;
  char *v475;
  char **v476;
  char **v477;
  uint64_t **v478;
  char *v479;
  char *v480;
  uint64_t **v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  char *v488;
  char *v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  char *v494;
  char *v495;
  uint64_t v496;
  unint64_t v497;
  char *v498;
  uint64_t **v499;
  char *v500;
  uint64_t **v501;
  unint64_t v502;
  char **v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  uint64_t v509;
  void *v510;
  const char *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  _QWORD *v516;
  uint64_t v517;
  char *v518;
  unint64_t v519;
  unint64_t v520;
  _QWORD *v521;
  __int128 v522;
  char **v523;
  char *v524;
  _QWORD *v525;
  unint64_t v526;
  char *v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t v531;
  char *v532;
  char *v533;
  _OWORD *v534;
  _OWORD *v535;
  CHDrawing *v536;
  const char *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  const char *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  double v547;
  const char *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  const char *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  const char *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  _QWORD *v564;
  uint64_t v565;
  char *v566;
  char **v567;
  uint64_t v568;
  uint64_t *v569;
  char *v570;
  unint64_t v571;
  char **v572;
  char *v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  char *v578;
  char *v579;
  char *v580;
  uint64_t v581;
  const char *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  char *v587;
  _QWORD *v588;
  double v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  char *v593;
  uint64_t v594;
  uint64_t v595;
  double v596;
  double v597;
  float v598;
  float64_t v599;
  float *v600;
  float64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  unint64_t v605;
  char *v606;
  char *v607;
  float64_t v608;
  float64_t v609;
  float *v610;
  char *v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  unint64_t v615;
  void *v616;
  float *v617;
  int64_t v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  float *v622;
  _OWORD *v623;
  float *v624;
  uint64_t v625;
  __int128 v626;
  int v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t *v630;
  uint64_t v631;
  uint64_t v632;
  _OWORD *v633;
  char *v634;
  char *v635;
  uint64_t v636;
  unint64_t v637;
  uint64_t v638;
  unint64_t v639;
  char *v640;
  char *v641;
  uint64_t v642;
  _OWORD *v643;
  uint64_t *v644;
  uint64_t *v645;
  uint64_t *v646;
  uint64_t v647;
  unint64_t v648;
  unint64_t v649;
  _BYTE *v650;
  uint64_t *v651;
  uint64_t *v652;
  int64_t v653;
  unint64_t v654;
  uint64_t *v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  _OWORD *v660;
  uint64_t *v661;
  uint64_t v662;
  __int128 v663;
  char *v664;
  char *v665;
  unint64_t v666;
  char *v667;
  uint64_t v668;
  char *v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  char *v673;
  uint64_t v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  unint64_t v678;
  _BYTE *v679;
  _QWORD *v680;
  int64_t v681;
  unint64_t v682;
  char *v683;
  uint64_t v684;
  char *v685;
  char *v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  _OWORD *v690;
  char *v691;
  uint64_t v692;
  __int128 v693;
  char *v694;
  char *v695;
  void *v696;
  void *v697;
  void *v698;
  void *v699;
  char *v700;
  char *v701;
  void *v702;
  void *v703;
  void *v704;
  void *v705;
  Segment *v706;
  Segment *v707;
  void *v708;
  void *v709;
  void *v710;
  void *v711;
  Segment *v712;
  Segment *v713;
  void *v714;
  void *v715;
  void *v716;
  void *v717;
  Segment *v718;
  Segment *v719;
  void *v720;
  void *v721;
  void *v722;
  void *v723;
  unint64_t v725;
  int v727;
  CHDrawing *v728;
  uint64_t v729;
  uint64_t v730;
  int v731[2];
  int v732[2];
  CHDrawing *v733;
  uint64_t v734;
  int v735[4];
  uint64_t v736;
  char *v737;
  char *v738;
  char *v739;
  void *v740;
  char *v741;
  uint64_t v742;
  void *v743;
  char v744;
  void *v745[2];
  char v746;
  void *v747;
  char *v748;
  uint64_t v749;
  void *v750;
  Segment *v751;
  unint64_t v752;
  void *v753;
  Segment *v754;
  unint64_t v755;
  __int128 v756;
  float64x2_t v757;
  float64x2_t v758;
  void *v759;
  char *v760;
  void *v761;
  char *v762;
  void *__p;
  char *v764;
  void *v765;
  Segment *v766;
  unint64_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  void *v774[4];
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  __int128 __dst;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  char *v782;
  uint64_t *v783;
  char *v784;
  unint64_t v785;

  v753 = 0;
  v754 = 0;
  v755 = 0;
  v750 = 0;
  v751 = 0;
  v752 = 0;
  v5 = 0;
  v6 = 0;
  v783 = 0;
  v784 = 0;
  v785 = 0;
  v728 = a1;
  v765 = 0;
  v766 = 0;
  v767 = 0;
  v7 = 1;
  for (i = objc_msgSend_strokeCount(v728, v8, v9, v10, v11, v12);
        v6 < i;
        i = objc_msgSend_strokeCount(v728, v24, v25, v26, v27, v28))
  {
    Segment::Segment((Segment *)&v775, v728, v6);
    v14 = v754;
    if ((unint64_t)v754 >= v755)
    {
      v15 = sub_1BE6A39C0((Segment **)&v753, (const Segment *)&v775);
    }
    else
    {
      Segment::Segment(v754, (const Segment *)&v775);
      v15 = (Segment *)((char *)v14 + 120);
    }
    v754 = v15;
    v773 = 0u;
    memset(v774, 0, 24);
    v771 = 0u;
    v772 = 0u;
    v769 = 0u;
    v770 = 0u;
    v768 = 0u;
    v784 = (char *)v783;
    if (v751 == v750)
      goto LABEL_27;
    v16 = -1 - 0x1111111111111111 * ((v751 - (Segment *)v750) >> 3);
    Segment::mergeBoundingBoxes((Segment *)((char *)v750 + 120 * v16), &v775, v6, (uint64_t)&v756);
    v768 = (float64x2_t)v756;
    v769 = v757;
    v770 = v758;
    sub_1BE62037C(&v771, (char *)v759, v760, (v760 - (_BYTE *)v759) >> 3);
    sub_1BE66E294((_QWORD *)&v772 + 1, (char *)v761, v762, (v762 - (_BYTE *)v761) >> 2);
    sub_1BE66E294(v774, (char *)__p, v764, (v764 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v764 = (char *)__p;
      operator delete(__p);
    }
    if (v761)
    {
      v762 = (char *)v761;
      operator delete(v761);
    }
    if (v759)
    {
      v760 = (char *)v759;
      operator delete(v759);
    }
    v22 = v768;
    v23 = objc_msgSend_strokeCount(v728, v17, v18, v19, v20, v21);
    v29 = v22.f64[1] <= a4 || v23 >= 5;
    v30 = v29 ? a4 : v22.f64[1];
    v31 = v30 + v30;
    v32 = v22.f64[0] <= v31 || v22.f64[0] <= *((double *)v750 + 15 * v16);
    if (!v32 || v22.f64[1] > v31)
    {
LABEL_27:
      v34 = v751;
      if ((unint64_t)v751 >= v752)
      {
        v35 = sub_1BE6A39C0((Segment **)&v750, (const Segment *)&v775);
      }
      else
      {
        Segment::Segment(v751, (const Segment *)&v775);
        v35 = (Segment *)((char *)v34 + 120);
      }
      v751 = v35;
      v36 = v6 - 1;
      v37 = (uint64_t *)v784;
      if ((unint64_t)v784 < v785)
      {
        *(_QWORD *)v784 = v36;
        v37[1] = v36;
        i64 = v37 + 2;
        goto LABEL_50;
      }
      v39 = v783;
      v40 = (v784 - (char *)v783) >> 4;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60)
        sub_1BE61F930();
      v42 = v785 - (_QWORD)v783;
      if ((uint64_t)(v785 - (_QWORD)v783) >> 3 > v41)
        v41 = v42 >> 3;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
        v43 = 0xFFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 60)
          sub_1BE61F100();
        v44 = (char *)operator new(16 * v43);
        v45 = (int64x2_t *)&v44[16 * v40];
        *v45 = vdupq_n_s64(v36);
        i64 = v45[1].i64;
        if (v37 == v39)
        {
LABEL_48:
          v783 = (uint64_t *)v45;
          v784 = (char *)i64;
          v785 = (unint64_t)&v44[16 * v43];
          if (v37)
            goto LABEL_49;
          goto LABEL_50;
        }
      }
      else
      {
        v44 = 0;
        v45 = (int64x2_t *)(16 * v40);
        v49 = (int64x2_t *)(16 * v40);
        *v49 = vdupq_n_s64(v36);
        i64 = v49[1].i64;
        if (v37 == v39)
          goto LABEL_48;
      }
      do
      {
        v45[-1] = *((int64x2_t *)v37 - 1);
        --v45;
        v37 -= 2;
      }
      while (v37 != v39);
      v37 = v783;
      v783 = (uint64_t *)v45;
      v784 = (char *)i64;
      v785 = (unint64_t)&v44[16 * v43];
      if (v37)
LABEL_49:
        operator delete(v37);
LABEL_50:
      v784 = (char *)i64;
      v50 = v766;
      if ((unint64_t)v766 < v767)
      {
        *(_QWORD *)v766 = v36;
        *((_QWORD *)v50 + 1) = v36;
        v766 = (Segment *)((char *)v50 + 16);
        v51 = v774[0];
        if (!v774[0])
          goto LABEL_53;
LABEL_52:
        v774[1] = v51;
        operator delete(v51);
        goto LABEL_53;
      }
      v52 = (Segment *)v765;
      v53 = (v766 - (Segment *)v765) >> 4;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 60)
        sub_1BE61F930();
      v55 = v767 - (_QWORD)v765;
      if ((uint64_t)(v767 - (_QWORD)v765) >> 3 > v54)
        v54 = v55 >> 3;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
        v56 = 0xFFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        if (v56 >> 60)
          sub_1BE61F100();
        v57 = (char *)operator new(16 * v56);
        v58 = (int64x2_t *)&v57[16 * v53];
        *v58 = vdupq_n_s64(v36);
        v59 = (Segment *)&v58[1];
        if (v50 == v52)
        {
LABEL_77:
          v765 = v58;
          v767 = (unint64_t)&v57[16 * v56];
          if (v50)
            goto LABEL_78;
          goto LABEL_79;
        }
      }
      else
      {
        v57 = 0;
        v58 = (int64x2_t *)(16 * v53);
        *(int64x2_t *)(16 * v53) = vdupq_n_s64(v36);
        v59 = (Segment *)(16 * v53 + 16);
        if (v50 == v52)
          goto LABEL_77;
      }
      do
      {
        v58[-1] = *((int64x2_t *)v50 - 1);
        --v58;
        v50 = (Segment *)((char *)v50 - 16);
      }
      while (v50 != v52);
      v50 = (Segment *)v765;
      v765 = v58;
      v767 = (unint64_t)&v57[16 * v56];
      if (v50)
LABEL_78:
        operator delete(v50);
LABEL_79:
      v766 = v59;
      v51 = v774[0];
      if (v774[0])
        goto LABEL_52;
      goto LABEL_53;
    }
    v46 = (char *)v753;
    if (v5 > v6)
    {
      v47 = 0;
      v48 = 10000000;
      goto LABEL_105;
    }
    v60 = v6 + 1 - v5;
    if (v60 < 2)
    {
      v47 = 0;
      v48 = 10000000;
      v61 = v5;
LABEL_99:
      v71 = (double *)((char *)v753 + 120 * v61 + 32);
      do
      {
        v72 = (int)*(v71 - 2);
        v73 = *v71;
        v71 += 15;
        v74 = (int)v73;
        if (v48 >= v72)
          v48 = v72;
        if (v47 <= v74)
          v47 = v74;
        ++v61;
      }
      while (v7 != v61);
      goto LABEL_105;
    }
    v47 = 0;
    v62 = 0;
    v61 = v5 + (v60 & 0xFFFFFFFFFFFFFFFELL);
    v63 = (v7 - v5) & 0xFFFFFFFFFFFFFFFELL;
    v64 = (double *)((char *)v753 + 120 * v5 + 152);
    v65 = 10000000;
    v66 = 10000000;
    do
    {
      v67 = (int)*(v64 - 17);
      v68 = (int)*(v64 - 2);
      v69 = *(v64 - 15);
      v70 = *v64;
      v64 += 30;
      v24 = (const char *)(int)v69;
      v25 = (int)v70;
      if (v65 >= v67)
        v65 = v67;
      if (v66 >= v68)
        v66 = v68;
      if (v47 <= (int)v24)
        v47 = (int)v69;
      if (v62 <= (int)v25)
        v62 = v25;
      v63 -= 2;
    }
    while (v63);
    if (v47 <= v62)
      v47 = v62;
    if (v65 >= v66)
      v48 = v66;
    else
      v48 = v65;
    if (v60 != (v60 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_99;
LABEL_105:
    v75 = 0;
    v756 = 0uLL;
    v757.f64[0] = 0.0;
    v76 = v47 - v48 + 1;
    if (v47 - v48 != -1)
    {
      if (v47 - v48 <= -2)
        sub_1BE61F930();
      v77 = operator new(8 * ((v76 - 1) >> 6) + 8);
      v75 = v77;
      if (v76 >= 0x41)
        v78 = (v76 - 1) >> 6;
      else
        v78 = 0;
      *(_QWORD *)&v77[8 * v78] = 0;
      if (v76 >= 0x40)
        bzero(v77, 8 * (v76 >> 6));
      if ((v76 & 0x3F) != 0)
        *(_QWORD *)&v75[8 * (v76 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v76 & 0x3F));
    }
    if (v5 <= v6)
    {
      v80 = v5;
      do
      {
        v82 = (double *)&v46[120 * v80];
        v83 = (int)v82[2];
        v84 = (int)v82[4];
        if (v83 <= v84)
        {
          v85 = v84 - v83 + 1;
          v86 = v83 - (uint64_t)v48;
          do
          {
            *(_QWORD *)&v75[(v86 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v86;
            ++v86;
            --v85;
          }
          while (v85);
        }
        v81 = v80++ == v6;
      }
      while (!v81);
    }
    if ((_DWORD)v76)
    {
      if ((*v75 & 1) != 0)
      {
        v87 = 1;
        while (v76 != v87)
        {
          v88 = v87 + 1;
          v89 = *(_QWORD *)&v75[(v87 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v87;
          ++v87;
          if ((v89 & 1) == 0)
          {
            v90 = v88 - 1;
            goto LABEL_131;
          }
        }
        v90 = v76;
LABEL_131:
        v79 = v90 < v76;
      }
      else
      {
        v79 = 1;
      }
      operator delete(v75);
      if (v79)
        v5 = v6;
    }
    else if (v75)
    {
      operator delete(v75);
    }
    v91 = v750;
    v92 = (double *)((char *)v750 + 120 * v16);
    v93 = v92 + 4;
    v94 = *v92;
    if (v775.f64[0] >= 1.0)
      v95 = v775.f64[0];
    else
      v95 = 1.0;
    if (v94 >= 1.0)
      v96 = *v92;
    else
      v96 = 1.0;
    v98 = v92[2];
    v97 = v92 + 2;
    v99 = v98;
    v100 = v776.f64[0] < v98;
    if (v776.f64[0] < v98)
    {
      v101 = v93;
    }
    else
    {
      v94 = v775.f64[0];
      v101 = (double *)&v777;
    }
    v102 = *v101;
    if (v100)
      v93 = (double *)&v777;
    v103 = *v93;
    if (v100)
      v104 = v99;
    else
      v104 = v776.f64[0];
    v105 = v103 - v104;
    if (v105 < 0.0)
      v105 = 0.0;
    if (v102 < v103)
      v105 = v94;
    if (v96 < v95)
      v95 = v96;
    v106 = v105 / v95;
    if (v106 > 0.4)
    {
      if ((v16 & 0x80000000) != 0)
        goto LABEL_27;
      goto LABEL_182;
    }
    v107 = v776.f64[1];
    v108 = (double *)((char *)v750 + 120 * v16);
    v109 = v108[3];
    v110 = v108 + 5;
    if (v776.f64[1] >= v109)
      v111 = &v777.f64[1];
    else
      v111 = v110;
    if (v776.f64[1] < v109)
      v110 = &v777.f64[1];
    if (*v111 >= *v110)
    {
      if (v776.f64[1] < v109)
        v107 = v109;
      v113 = *v110 - v107;
      if (v113 < 0.0)
        v113 = 0.0;
      if (v102 >= v103)
      {
LABEL_172:
        if (v776.f64[0] >= v99)
          v97 = (double *)&v776;
        v94 = v103 - (*v97 + -5.0);
        if (v94 < 0.0)
          v94 = 0.0;
      }
    }
    else
    {
      v112 = (double *)((char *)v750 + 120 * v16 + 8);
      if (v776.f64[1] >= v109)
        v112 = &v775.f64[1];
      v113 = *v112;
      if (v102 >= v103)
        goto LABEL_172;
    }
    v114 = v106 > 0.2;
    if (v113 <= 0.0)
      v114 = 0;
    if (v94 <= 0.0)
      v114 = 0;
    if ((v16 & 0x80000000) != 0 || !v114)
      goto LABEL_27;
LABEL_182:
    v115 = -1 - 0x1111111111111111 * ((v751 - (Segment *)v750) >> 3);
    v116 = (float64x2_t *)((char *)v750 + 120 * v115);
    *v116 = v768;
    v116[1] = v769;
    v116[2] = v770;
    if (v116 != &v768)
    {
      sub_1BE62037C(&v91[15 * v115 + 6], (char *)v771, *((char **)&v771 + 1), (uint64_t)(*((_QWORD *)&v771 + 1) - v771) >> 3);
      sub_1BE66E294(&v91[15 * v115 + 9], *((char **)&v772 + 1), (char *)v773, (uint64_t)(v773 - *((_QWORD *)&v772 + 1)) >> 2);
      sub_1BE66E294(&v91[15 * v115 + 12], (char *)v774[0], (char *)v774[1], ((char *)v774[1] - (char *)v774[0]) >> 2);
    }
    v117 = *(_QWORD *)v771;
    v118 = v6 - 1;
    v119 = (uint64_t *)v784;
    if ((unint64_t)v784 < v785)
    {
      *(_QWORD *)v784 = v117;
      v119[1] = v118;
      v120 = v119 + 2;
      goto LABEL_202;
    }
    v121 = v783;
    v122 = (v784 - (char *)v783) >> 4;
    v123 = v122 + 1;
    if ((unint64_t)(v122 + 1) >> 60)
      sub_1BE61F930();
    v124 = v785 - (_QWORD)v783;
    if ((uint64_t)(v785 - (_QWORD)v783) >> 3 > v123)
      v123 = v124 >> 3;
    if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0)
      v125 = 0xFFFFFFFFFFFFFFFLL;
    else
      v125 = v123;
    if (v125)
    {
      if (v125 >> 60)
        sub_1BE61F100();
      v126 = (char *)operator new(16 * v125);
      v127 = (uint64_t *)&v126[16 * v122];
      *v127 = v117;
      v127[1] = v118;
      v128 = v127;
      if (v119 == v121)
      {
LABEL_200:
        v120 = v127 + 2;
        v783 = v128;
        v784 = (char *)(v127 + 2);
        v785 = (unint64_t)&v126[16 * v125];
        if (!v119)
          goto LABEL_202;
LABEL_201:
        operator delete(v119);
        goto LABEL_202;
      }
    }
    else
    {
      v126 = 0;
      v127 = (uint64_t *)(16 * v122);
      *v127 = v117;
      v127[1] = v118;
      v128 = (uint64_t *)(16 * v122);
      if (v119 == v121)
        goto LABEL_200;
    }
    do
    {
      *((_OWORD *)v128 - 1) = *((_OWORD *)v119 - 1);
      v128 -= 2;
      v119 -= 2;
    }
    while (v119 != v121);
    v119 = v783;
    v120 = v127 + 2;
    v783 = v128;
    v784 = (char *)(v127 + 2);
    v785 = (unint64_t)&v126[16 * v125];
    if (v119)
      goto LABEL_201;
LABEL_202:
    v784 = (char *)v120;
    v129 = v766;
    *((_QWORD *)v766 - 2) = v117;
    *((_QWORD *)v129 - 1) = v118;
    v51 = v774[0];
    if (v774[0])
      goto LABEL_52;
LABEL_53:
    if (*((_QWORD *)&v772 + 1))
    {
      *(_QWORD *)&v773 = *((_QWORD *)&v772 + 1);
      operator delete(*((void **)&v772 + 1));
    }
    if ((_QWORD)v771)
    {
      *((_QWORD *)&v771 + 1) = v771;
      operator delete((void *)v771);
    }
    if ((_QWORD)v781)
    {
      *((_QWORD *)&v781 + 1) = v781;
      operator delete((void *)v781);
    }
    if (*((_QWORD *)&v779 + 1))
    {
      *(_QWORD *)&v780 = *((_QWORD *)&v779 + 1);
      operator delete(*((void **)&v779 + 1));
    }
    if ((_QWORD)__dst)
    {
      *((_QWORD *)&__dst + 1) = __dst;
      operator delete((void *)__dst);
    }
    ++v6;
    ++v7;
  }
  if (v765)
    operator delete(v765);
  if (v783)
  {
    v784 = (char *)v783;
    operator delete(v783);
  }

  objc_msgSend_strokeCount(v728, v130, v131, v132, v133, v134);
  sub_1BE6A2510(&v750, a3);
  v765 = 0;
  v766 = 0;
  v767 = 0;
  if (v751 != v750)
  {
    v140 = 0;
    v141 = 0;
    v142 = 0xEEEEEEEEEEEEEEEFLL * ((v751 - (Segment *)v750) >> 3);
    do
    {
      v725 = v140;
      if (v142 > v141 + 10)
        LODWORD(v142) = v141 + 10;
      v727 = v141;
      v729 = v141;
      v730 = (int)v142;
      while (1)
      {
        v144 = v729;
        v143 = v730;
        if (v730 <= v729)
          break;
        v145 = 0;
        --v730;
        v756 = 0uLL;
        v757.f64[0] = 0.0;
        v734 = v143;
        do
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                v146 = (char *)v750 + 120 * v144;
                v148 = (char *)*((_QWORD *)v146 + 6);
                v147 = (char *)*((_QWORD *)v146 + 7);
                v149 = v147 - v148;
                if (v147 - v148 >= 1)
                  break;
                if (++v144 >= v143)
                  goto LABEL_272;
              }
              v150 = v149 >> 3;
              v151 = v756;
              v152 = (unint64_t)&v145[-v756];
              v153 = (uint64_t)&v145[-v756] >> 3;
              v154 = (char *)(v756 + ((unint64_t)&v145[-v756] & 0xFFFFFFFFFFFFFFF8));
              if (v149 >> 3 <= (uint64_t)(*(_QWORD *)&v757.f64[0] - (_QWORD)v145) >> 3)
                break;
              v155 = v153 + v150;
              if ((unint64_t)(v153 + v150) >> 61)
                sub_1BE61F930();
              v156 = *(_QWORD *)&v757.f64[0] - v756;
              if ((uint64_t)(*(_QWORD *)&v757.f64[0] - v756) >> 2 > v155)
                v155 = v156 >> 2;
              v29 = (unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8;
              v157 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v29)
                v157 = v155;
              *(_QWORD *)v731 = v157;
              if (v157)
              {
                if (v157 >> 61)
                  sub_1BE61F100();
                v158 = (uint64_t)&v145[-v756] >> 3;
                v159 = v756 + ((unint64_t)&v145[-v756] & 0xFFFFFFFFFFFFFFF8);
                v160 = operator new(8 * v157);
                v154 = (char *)v159;
                v153 = v158;
                v161 = (uint64_t)&v160[8 * v158];
                v162 = (char *)(v161 + 8 * v150);
                v163 = v149 - 8;
                if ((unint64_t)(v149 - 8) < 0x38)
                {
LABEL_228:
                  v164 = (char *)v161;
                  do
                  {
LABEL_247:
                    v186 = *(_QWORD *)v148;
                    v148 += 8;
                    *(_QWORD *)v164 = v186;
                    v164 += 8;
                  }
                  while (v164 != v162);
                  goto LABEL_248;
                }
              }
              else
              {
                v160 = 0;
                v161 = 8 * v153;
                v162 = (char *)(8 * v153 + 8 * v150);
                v163 = v149 - 8;
                if ((unint64_t)(v149 - 8) < 0x38)
                  goto LABEL_228;
              }
              v164 = (char *)v161;
              if ((unint64_t)(&v160[v152 & 0xFFFFFFFFFFFFFFF8] - v148) < 0x20)
                goto LABEL_247;
              v179 = (v163 >> 3) + 1;
              v180 = 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
              v164 = (char *)(v161 + v180);
              v181 = &v148[v180];
              v182 = (__int128 *)(v148 + 16);
              v183 = &v160[8 * v153 + 16];
              v184 = v179 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v185 = *v182;
                *(v183 - 1) = *(v182 - 1);
                *v183 = v185;
                v182 += 2;
                v183 += 2;
                v184 -= 4;
              }
              while (v184);
              v148 = v181;
              if (v179 != (v179 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_247;
LABEL_248:
              if ((char *)v151 != v145)
              {
                if (v152 - 8 >= 0x68)
                {
                  v187 = v154;
                  if (v151 + (v152 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v160[v152 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
                  {
                    v188 = ((v152 - 8) >> 3) + 1;
                    v189 = 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL);
                    v187 = &v154[-v189];
                    v161 -= v189;
                    v190 = &v160[8 * v153 - 16];
                    v191 = (__int128 *)(v151 + 8 * v153 - 16);
                    v192 = v188 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v193 = *v191;
                      *(v190 - 1) = *(v191 - 1);
                      *v190 = v193;
                      v190 -= 2;
                      v191 -= 2;
                      v192 -= 4;
                    }
                    while (v192);
                    if (v188 == (v188 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_256;
                  }
                }
                else
                {
                  v187 = v154;
                }
                do
                {
                  v194 = *((_QWORD *)v187 - 1);
                  v187 -= 8;
                  *(_QWORD *)(v161 - 8) = v194;
                  v161 -= 8;
                }
                while (v187 != (char *)v151);
              }
LABEL_256:
              v195 = v145 - v154;
              if (v195)
                memmove(v162, v154, v195);
              *(_QWORD *)&v756 = v161;
              *((_QWORD *)&v756 + 1) = &v162[v195];
              *(_QWORD *)&v757.f64[0] = &v160[8 * *(_QWORD *)v731];
              if (v151)
                operator delete((void *)v151);
              v143 = v734;
              ++v144;
              v145 = &v162[v195];
              if (v144 >= v734)
                goto LABEL_272;
            }
            v165 = v145 - v154;
            v166 = (v145 - v154) >> 3;
            if (v166 >= v150)
            {
              v167 = &v148[8 * v150];
              v170 = v145;
              break;
            }
            v167 = &v148[8 * v166];
            v168 = v147 - v167;
            if (v147 != v167)
            {
              *(_QWORD *)v732 = v756 + ((unint64_t)&v145[-v756] & 0xFFFFFFFFFFFFFFF8);
              v169 = (uint64_t)&v145[-v756] >> 3;
              memmove(v145, &v148[8 * v166], v147 - v167);
              v153 = v169;
              v154 = *(char **)v732;
            }
            v170 = &v145[v168];
            *((_QWORD *)&v756 + 1) = &v145[v168];
            if (v165 >= 1)
              break;
            v143 = v734;
            ++v144;
            v145 += v168;
            if (v144 >= v734)
              goto LABEL_272;
          }
          v171 = &v154[8 * v150];
          v172 = v170 - v171;
          v173 = (v170 - v171) >> 3;
          v174 = &v170[-8 * v150];
          v175 = v170;
          if (v174 >= v145)
            goto LABEL_267;
          v176 = (v152 & 0xFFFFFFFFFFFFFFF8) + v172;
          v177 = v151 + v176 + 8;
          if ((unint64_t)v145 > v177)
            v177 = (unint64_t)v145;
          v178 = v177 + ~v151 - v176;
          if (v178 < 0x58)
          {
            v175 = v170;
            do
            {
LABEL_266:
              v202 = *(_QWORD *)v174;
              v174 += 8;
              *(_QWORD *)v175 = v202;
              v175 += 8;
            }
            while (v174 < v145);
            goto LABEL_267;
          }
          v175 = v170;
          if ((unint64_t)&v171[-(v152 & 0xFFFFFFFFFFFFFFF8) - v151] < 0x20)
            goto LABEL_266;
          v196 = (v178 >> 3) + 1;
          v197 = 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
          v174 += v197;
          v175 = &v170[v197];
          v198 = v170 + 16;
          v199 = (__int128 *)(v151 + 8 * v173 + 8 * v153 + 16);
          v200 = v196 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v201 = *v199;
            *(v198 - 1) = *(v199 - 1);
            *v198 = v201;
            v198 += 2;
            v199 += 2;
            v200 -= 4;
          }
          while (v200);
          if (v196 != (v196 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_266;
LABEL_267:
          *((_QWORD *)&v756 + 1) = v175;
          if (v170 != v171)
          {
            v203 = v154;
            memmove(&v170[-8 * v173], v154, v172);
            v154 = v203;
          }
          if (v167 != v148)
            memmove(v154, v148, v167 - v148);
          v143 = v734;
          ++v144;
          v145 = v175;
        }
        while (v144 < v734);
LABEL_272:
        v204 = v756;
        v205 = *(_QWORD *)v756;
        v206 = (char *)v753;
        v207 = (float64x2_t *)((char *)v753 + 120 * *(_QWORD *)v756);
        v775 = *v207;
        __dst = 0u;
        v779 = 0u;
        v780 = 0u;
        v781 = 0u;
        v782 = 0;
        v776 = v207[1];
        v777 = v207[2];
        if (&v775 != v207)
        {
          v208 = (char *)v753 + 120 * v205;
          v210 = (_BYTE *)*((_QWORD *)v208 + 6);
          v209 = (_BYTE *)*((_QWORD *)v208 + 7);
          v211 = v209 - v210;
          v212 = (v209 - v210) >> 3;
          if (v209 == v210)
          {
            v213 = 0;
          }
          else
          {
            if ((v211 & 0x8000000000000000) != 0)
              sub_1BE61F930();
            v213 = (char *)operator new(v209 - v210);
            *(_QWORD *)&__dst = v213;
            *((_QWORD *)&__dst + 1) = v213;
            *(_QWORD *)&v779 = &v213[8 * v212];
            memcpy(v213, v210, v211);
          }
          *((_QWORD *)&__dst + 1) = &v213[8 * v212];
          v214 = &v206[120 * v205];
          v216 = (_BYTE *)*((_QWORD *)v214 + 9);
          v215 = (_BYTE *)*((_QWORD *)v214 + 10);
          v217 = v215 - v216;
          v218 = (v215 - v216) >> 2;
          if (v215 != v216)
          {
            if ((v217 & 0x8000000000000000) == 0)
            {
              v219 = (char *)operator new(v215 - v216);
              *((_QWORD *)&v779 + 1) = v219;
              *(_QWORD *)&v780 = v219;
              *((_QWORD *)&v780 + 1) = &v219[4 * v218];
              memcpy(v219, v216, v217);
              goto LABEL_281;
            }
LABEL_959:
            sub_1BE61F930();
          }
          v219 = 0;
LABEL_281:
          *(_QWORD *)&v780 = &v219[4 * v218];
          v220 = &v206[120 * v205];
          v222 = (_BYTE *)*((_QWORD *)v220 + 12);
          v221 = (_BYTE *)*((_QWORD *)v220 + 13);
          v223 = v221 - v222;
          v224 = (v221 - v222) >> 2;
          if (v221 == v222)
          {
            v225 = 0;
          }
          else
          {
            if ((v223 & 0x8000000000000000) != 0)
              goto LABEL_959;
            v225 = (char *)operator new(v221 - v222);
            *(_QWORD *)&v781 = v225;
            *((_QWORD *)&v781 + 1) = v225;
            v782 = &v225[4 * v224];
            memcpy(v225, v222, v223);
          }
          *((_QWORD *)&v781 + 1) = &v225[4 * v224];
        }
        v768 = 0uLL;
        v769.f64[0] = 0.0;
        v226 = sub_1BE6A39C0((Segment **)&v768, (const Segment *)&v775);
        *(_QWORD *)&v768.f64[1] = v226;
        if ((unint64_t)(*((_QWORD *)&v756 + 1) - v204) >= 9)
        {
          v227 = (*((_QWORD *)&v756 + 1) - v204) >> 3;
          if (v227 <= 2)
            v227 = 2;
          v228 = v227 - 1;
          v229 = (uint64_t *)(v204 + 8);
          while (2)
          {
            while (1)
            {
              v230 = *v229++;
              Segment::mergeIntoSegment((Segment *)&v775, (const Segment *)((char *)v753 + 120 * v230));
              v231 = v768.f64[1];
              if (*(_QWORD *)&v768.f64[1] < *(_QWORD *)&v769.f64[0])
                break;
              v226 = sub_1BE6A39C0((Segment **)&v768, (const Segment *)&v775);
              *(_QWORD *)&v768.f64[1] = v226;
              if (!--v228)
                goto LABEL_339;
            }
            **(_OWORD **)&v768.f64[1] = v775;
            *(_OWORD *)(*(_QWORD *)&v231 + 48) = 0u;
            *(_OWORD *)(*(_QWORD *)&v231 + 96) = 0u;
            *(_OWORD *)(*(_QWORD *)&v231 + 64) = 0u;
            *(_OWORD *)(*(_QWORD *)&v231 + 80) = 0u;
            *(_QWORD *)(*(_QWORD *)&v231 + 112) = 0;
            *(float64x2_t *)(*(_QWORD *)&v231 + 16) = v776;
            *(float64x2_t *)(*(_QWORD *)&v231 + 32) = v777;
            if (*(float64x2_t **)&v231 == &v775)
              goto LABEL_338;
            v232 = (const void *)__dst;
            v233 = *((_QWORD *)&__dst + 1) - __dst;
            v234 = (uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 3;
            if (*((_QWORD *)&__dst + 1) == (_QWORD)__dst)
            {
              v235 = 0;
            }
            else
            {
              if ((v233 & 0x8000000000000000) != 0)
                sub_1BE61F930();
              v235 = (char *)operator new(*((_QWORD *)&__dst + 1) - __dst);
              *(_QWORD *)(*(_QWORD *)&v231 + 48) = v235;
              *(_QWORD *)(*(_QWORD *)&v231 + 56) = v235;
              *(_QWORD *)(*(_QWORD *)&v231 + 64) = &v235[8 * v234];
              memcpy(v235, v232, v233);
              v233 = *(_QWORD *)(*(_QWORD *)&v231 + 72);
            }
            *(_QWORD *)(*(_QWORD *)&v231 + 56) = &v235[8 * v234];
            v236 = (char *)*((_QWORD *)&v779 + 1);
            v237 = (char *)v780;
            v238 = v780 - *((_QWORD *)&v779 + 1);
            v239 = (uint64_t)(v780 - *((_QWORD *)&v779 + 1)) >> 2;
            v240 = *(_QWORD *)(*(_QWORD *)&v231 + 88);
            if (v239 <= (uint64_t)(v240 - v233) >> 2)
            {
              v244 = *(_QWORD *)(*(_QWORD *)&v231 + 80);
              v245 = (uint64_t)(v244 - v233) >> 2;
              if (v245 >= v239)
              {
                if ((_QWORD)v780 == *((_QWORD *)&v779 + 1))
                  goto LABEL_317;
                v247 = (void *)v233;
                v246 = (char *)*((_QWORD *)&v779 + 1);
              }
              else
              {
                if (v244 != v233)
                {
                  memmove((void *)v233, *((const void **)&v779 + 1), v244 - v233);
                  v233 = *(_QWORD *)(*(_QWORD *)&v231 + 80);
                }
                v246 = &v236[4 * v245];
                v238 = v237 - v246;
                if (v237 == v246)
                  goto LABEL_317;
                v247 = (void *)v233;
              }
              memmove(v247, v246, v238);
              goto LABEL_317;
            }
            if (v233)
            {
              *(_QWORD *)(*(_QWORD *)&v231 + 80) = v233;
              operator delete((void *)v233);
              v240 = 0;
              *(_QWORD *)(*(_QWORD *)&v231 + 72) = 0;
              *(_QWORD *)(*(_QWORD *)&v231 + 80) = 0;
              *(_QWORD *)(*(_QWORD *)&v231 + 88) = 0;
            }
            if ((v238 & 0x8000000000000000) != 0)
              goto LABEL_955;
            v241 = v240 >> 1;
            if (v240 >> 1 <= v239)
              v241 = v239;
            v242 = (unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v241;
            if (v242 >> 62)
LABEL_955:
              sub_1BE61F930();
            v243 = (char *)operator new(4 * v242);
            v233 = (size_t)v243;
            *(_QWORD *)(*(_QWORD *)&v231 + 72) = v243;
            *(_QWORD *)(*(_QWORD *)&v231 + 80) = v243;
            *(_QWORD *)(*(_QWORD *)&v231 + 88) = &v243[4 * v242];
            if (v237 != v236)
              memcpy(v243, v236, v238);
LABEL_317:
            *(_QWORD *)(*(_QWORD *)&v231 + 80) = v233 + v238;
            v248 = v781;
            v249 = *((_QWORD *)&v781 + 1) - v781;
            v250 = (uint64_t)(*((_QWORD *)&v781 + 1) - v781) >> 2;
            v251 = *(_QWORD *)(*(_QWORD *)&v231 + 112);
            v252 = *(char **)(*(_QWORD *)&v231 + 96);
            if (v250 > (v251 - (uint64_t)v252) >> 2)
            {
              if (v252)
              {
                *(_QWORD *)(*(_QWORD *)&v231 + 104) = v252;
                operator delete(v252);
                v251 = 0;
                *(_QWORD *)(*(_QWORD *)&v231 + 96) = 0;
                *(_QWORD *)(*(_QWORD *)&v231 + 104) = 0;
                *(_QWORD *)(*(_QWORD *)&v231 + 112) = 0;
              }
              if ((v249 & 0x8000000000000000) != 0)
                goto LABEL_955;
              v253 = v251 >> 1;
              if (v251 >> 1 <= v250)
                v253 = v250;
              v254 = (unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v253;
              if (v254 >> 62)
                goto LABEL_955;
              v255 = (char *)operator new(4 * v254);
              v252 = v255;
              *(_QWORD *)(*(_QWORD *)&v231 + 104) = v255;
              v256 = (char **)(*(_QWORD *)&v231 + 104);
              *(_QWORD *)(*(_QWORD *)&v231 + 96) = v255;
              *(_QWORD *)(*(_QWORD *)&v231 + 112) = &v255[4 * v254];
              if (*((_QWORD *)&v248 + 1) != (_QWORD)v248)
                memcpy(v255, (const void *)v248, v249);
LABEL_337:
              *v256 = &v252[v249];
LABEL_338:
              v226 = (Segment *)(*(_QWORD *)&v231 + 120);
              *(_QWORD *)&v768.f64[1] = *(_QWORD *)&v231 + 120;
              if (!--v228)
                goto LABEL_339;
              continue;
            }
            break;
          }
          v256 = (char **)(*(_QWORD *)&v231 + 104);
          v257 = *(_BYTE **)(*(_QWORD *)&v231 + 104);
          v258 = (v257 - v252) >> 2;
          if (v258 >= v250)
          {
            if (*((_QWORD *)&v781 + 1) == (_QWORD)v781)
              goto LABEL_337;
            v261 = *(void **)(*(_QWORD *)&v231 + 96);
            v260 = (const void *)v781;
          }
          else
          {
            if (v257 != v252)
            {
              v259 = (v257 - v252) >> 2;
              memmove(*(void **)(*(_QWORD *)&v231 + 96), (const void *)v781, v257 - v252);
              v258 = v259;
              v252 = *v256;
            }
            v260 = (const void *)(v248 + 4 * v258);
            v249 = *((_QWORD *)&v248 + 1) - (_QWORD)v260;
            if (*((const void **)&v248 + 1) == v260)
              goto LABEL_337;
            v261 = v252;
          }
          memmove(v261, v260, v249);
          goto LABEL_337;
        }
LABEL_339:
        v262 = ((uint64_t)v226 - *(_QWORD *)&v768.f64[0]) / 120;
        v263 = 120 * v262;
        v264 = v262 - 1;
        while (1)
        {
          v267 = v264;
          v268 = v768.f64[0];
          if (!v264)
            break;
          v269 = *(_QWORD *)(v204 + 8 * v264);
          v270 = (double *)v753;
          v271 = (const Segment *)((char *)v753 + 120 * v269);
          v272 = *(_QWORD *)&v768.f64[0] + v263;
          v273 = Segment::verticalSeperated((Segment *)(*(_QWORD *)&v768.f64[0] + v263 - 240), v271);
          v274 = v270[15 * v269 + 2];
          v275 = *(double *)(v272 - 224);
          if (v274 >= v275)
            v276 = (const Segment *)(v272 - 240);
          else
            v276 = v271;
          if (v274 >= v275)
            v277 = (double *)v271;
          else
            v277 = (double *)(v272 - 240);
          v278 = *((double *)v276 + 4);
          if (v277[4] >= v278)
          {
            v265 = v278 - (v277[2] + -5.0);
            if (v265 < 0.0)
              v265 = 0.0;
          }
          else
          {
            v265 = *v277;
          }
          v266 = v265 <= 35.0 && v273;
          v263 -= 120;
          v264 = v267 - 1;
          if (v266)
          {
            v268 = v768.f64[0];
            break;
          }
        }
        if (v268 != 0.0)
        {
          v279 = v768.f64[1];
          v280 = v268;
          if (*(_QWORD *)&v768.f64[1] != *(_QWORD *)&v268)
          {
            do
            {
              v281 = *(void **)(*(_QWORD *)&v279 - 24);
              if (v281)
              {
                *(_QWORD *)(*(_QWORD *)&v279 - 16) = v281;
                operator delete(v281);
              }
              v282 = *(void **)(*(_QWORD *)&v279 - 48);
              if (v282)
              {
                *(_QWORD *)(*(_QWORD *)&v279 - 40) = v282;
                operator delete(v282);
              }
              v283 = *(void **)(*(_QWORD *)&v279 - 72);
              if (v283)
              {
                *(_QWORD *)(*(_QWORD *)&v279 - 64) = v283;
                operator delete(v283);
              }
              *(_QWORD *)&v279 -= 120;
            }
            while (*(_QWORD *)&v279 != *(_QWORD *)&v268);
            v280 = v768.f64[0];
          }
          v768.f64[1] = v268;
          operator delete(*(void **)&v280);
        }
        if ((_QWORD)v781)
        {
          *((_QWORD *)&v781 + 1) = v781;
          operator delete((void *)v781);
        }
        if (*((_QWORD *)&v779 + 1))
        {
          *(_QWORD *)&v780 = *((_QWORD *)&v779 + 1);
          operator delete(*((void **)&v779 + 1));
        }
        if ((_QWORD)__dst)
        {
          *((_QWORD *)&__dst + 1) = __dst;
          operator delete((void *)__dst);
        }
        if ((_QWORD)v756)
          operator delete((void *)v756);
        if (!v267)
        {
          v284 = v734 - v727;
          goto LABEL_378;
        }
      }
      v284 = 1;
      LODWORD(v730) = v727;
LABEL_378:
      Segment::Segment((Segment *)&v775, (const Segment *)((char *)v750 + 120 * v725));
      if ((int)v730 <= v727)
        v285 = v727;
      else
        v285 = v730;
      v286 = v285;
      v287 = 120 * (int)v729 + 120;
      v288 = v286 - v729 + 1;
      while (--v288)
      {
        v289 = v287 + 120;
        Segment::mergeIntoSegment((Segment *)&v775, (const Segment *)((char *)v750 + v287));
        v287 = v289;
      }
      v290 = v766;
      if ((unint64_t)v766 >= v767)
      {
        v291 = sub_1BE6A39C0((Segment **)&v765, (const Segment *)&v775);
      }
      else
      {
        Segment::Segment(v766, (const Segment *)&v775);
        v291 = (Segment *)((char *)v290 + 120);
      }
      v766 = v291;
      if ((_QWORD)v781)
      {
        *((_QWORD *)&v781 + 1) = v781;
        operator delete((void *)v781);
      }
      if (*((_QWORD *)&v779 + 1))
      {
        *(_QWORD *)&v780 = *((_QWORD *)&v779 + 1);
        operator delete(*((void **)&v779 + 1));
      }
      if ((_QWORD)__dst)
      {
        *((_QWORD *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      v141 = v284 + v727;
      v140 = v284 + v727;
      v142 = 0xEEEEEEEEEEEEEEEFLL * ((v751 - (Segment *)v750) >> 3);
    }
    while (v142 > v140);
  }
  objc_msgSend_strokeCount(v728, v135, v136, v137, v138, v139);
  sub_1BE6A2510(&v765, a3);
  v747 = 0;
  v748 = 0;
  v749 = 0;
  sub_1BE6A2734((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.0);
  d2s(0.0, v745);
  objc_msgSend_strokeCount(v728, v292, v293, v294, v295, v296);
  sub_1BE6A2510(&v747, a3);
  if (v746 < 0)
    operator delete(v745[0]);
  v297 = (char *)v747;
  for (j = v748; j != v297; j -= 120)
  {
    v299 = (void *)*((_QWORD *)j - 3);
    if (v299)
    {
      *((_QWORD *)j - 2) = v299;
      operator delete(v299);
    }
    v300 = (void *)*((_QWORD *)j - 6);
    if (v300)
    {
      *((_QWORD *)j - 5) = v300;
      operator delete(v300);
    }
    v301 = (void *)*((_QWORD *)j - 9);
    if (v301)
    {
      *((_QWORD *)j - 8) = v301;
      operator delete(v301);
    }
  }
  v748 = v297;
  sub_1BE6A2734((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.1);
  d2s(0.1, v745);
  objc_msgSend_strokeCount(v728, v302, v303, v304, v305, v306);
  sub_1BE6A2510(&v747, a3);
  if (v746 < 0)
    operator delete(v745[0]);
  v307 = (char *)v747;
  for (k = v748; k != v307; k -= 120)
  {
    v309 = (void *)*((_QWORD *)k - 3);
    if (v309)
    {
      *((_QWORD *)k - 2) = v309;
      operator delete(v309);
    }
    v310 = (void *)*((_QWORD *)k - 6);
    if (v310)
    {
      *((_QWORD *)k - 5) = v310;
      operator delete(v310);
    }
    v311 = (void *)*((_QWORD *)k - 9);
    if (v311)
    {
      *((_QWORD *)k - 8) = v311;
      operator delete(v311);
    }
  }
  v748 = v307;
  sub_1BE6A2734((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.15);
  d2s(0.15, v745);
  objc_msgSend_strokeCount(v728, v312, v313, v314, v315, v316);
  sub_1BE6A2510(&v747, a3);
  if (v746 < 0)
    operator delete(v745[0]);
  v317 = (char *)v747;
  for (m = v748; m != v317; m -= 120)
  {
    v319 = (void *)*((_QWORD *)m - 3);
    if (v319)
    {
      *((_QWORD *)m - 2) = v319;
      operator delete(v319);
    }
    v320 = (void *)*((_QWORD *)m - 6);
    if (v320)
    {
      *((_QWORD *)m - 5) = v320;
      operator delete(v320);
    }
    v321 = (void *)*((_QWORD *)m - 9);
    if (v321)
    {
      *((_QWORD *)m - 8) = v321;
      operator delete(v321);
    }
  }
  v748 = v317;
  sub_1BE6A2734((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.3);
  d2s(0.3, v745);
  objc_msgSend_strokeCount(v728, v322, v323, v324, v325, v326);
  sub_1BE6A2510(&v747, a3);
  if (v746 < 0)
    operator delete(v745[0]);
  v327 = (char *)v747;
  for (n = v748; n != v327; n -= 120)
  {
    v329 = (void *)*((_QWORD *)n - 3);
    if (v329)
    {
      *((_QWORD *)n - 2) = v329;
      operator delete(v329);
    }
    v330 = (void *)*((_QWORD *)n - 6);
    if (v330)
    {
      *((_QWORD *)n - 5) = v330;
      operator delete(v330);
    }
    v331 = (void *)*((_QWORD *)n - 9);
    if (v331)
    {
      *((_QWORD *)n - 8) = v331;
      operator delete(v331);
    }
  }
  v748 = v327;
  sub_1BE6A2734((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.35);
  d2s(0.35, v745);
  objc_msgSend_strokeCount(v728, v332, v333, v334, v335, v336);
  sub_1BE6A2510(&v747, a3);
  if (v746 < 0)
    operator delete(v745[0]);
  if (0xEEEEEEEEEEEEEEEFLL * ((v751 - (Segment *)v750) >> 3) <= 1)
    goto LABEL_473;
  objc_msgSend_bounds(v728, v337, v338, v339, v340, v341);
  v343 = (v751 - (Segment *)v750) / 120;
  if (v751 == v750)
  {
    v346 = 0.0;
  }
  else
  {
    if (v343 <= 1)
      v344 = 1;
    else
      v344 = (v751 - (Segment *)v750) / 120;
    if (v344 >= 2)
    {
      v345 = v344 & 0xFFFFFFFFFFFFFFFELL;
      v346 = 0.0;
      v347 = v344 & 0xFFFFFFFFFFFFFFFELL;
      v348 = (double *)v750;
      do
      {
        v346 = v346 + *v348 + v348[15];
        v348 += 30;
        v347 -= 2;
      }
      while (v347);
      if (v344 == v345)
        goto LABEL_452;
    }
    else
    {
      v345 = 0;
      v346 = 0.0;
    }
    v349 = v344 - v345;
    v350 = (double *)((char *)v750 + 120 * v345);
    do
    {
      v351 = *v350;
      v350 += 15;
      v346 = v346 + v351;
      --v349;
    }
    while (v349);
  }
LABEL_452:
  v352 = (v342 - v346) / (double)v343 / a4;
  if (v352 > 0.3)
  {
    v353 = (char *)v747;
    for (ii = v748; ii != v353; ii -= 120)
    {
      v355 = (void *)*((_QWORD *)ii - 3);
      if (v355)
      {
        *((_QWORD *)ii - 2) = v355;
        operator delete(v355);
      }
      v356 = (void *)*((_QWORD *)ii - 6);
      if (v356)
      {
        *((_QWORD *)ii - 5) = v356;
        operator delete(v356);
      }
      v357 = (void *)*((_QWORD *)ii - 9);
      if (v357)
      {
        *((_QWORD *)ii - 8) = v357;
        operator delete(v357);
      }
    }
    v748 = v353;
    sub_1BE6A2734((uint64_t *)&v750, (uint64_t)&v747, a4 * 0.5);
    objc_msgSend_strokeCount(v728, v358, v359, v360, v361, v362);
    sub_1BE6A2510(&v747, a3);
    v363 = (char *)v747;
    for (jj = v748; jj != v363; jj -= 120)
    {
      v365 = (void *)*((_QWORD *)jj - 3);
      if (v365)
      {
        *((_QWORD *)jj - 2) = v365;
        operator delete(v365);
      }
      v366 = (void *)*((_QWORD *)jj - 6);
      if (v366)
      {
        *((_QWORD *)jj - 5) = v366;
        operator delete(v366);
      }
      v367 = (void *)*((_QWORD *)jj - 9);
      if (v367)
      {
        *((_QWORD *)jj - 8) = v367;
        operator delete(v367);
      }
    }
    v748 = v363;
    sub_1BE6A2734((uint64_t *)&v750, (uint64_t)&v747, v352 * a4);
    d2s(v352, &v743);
    objc_msgSend_strokeCount(v728, v368, v369, v370, v371, v372);
    sub_1BE6A2510(&v747, a3);
    if (v744 < 0)
      operator delete(v743);
  }
LABEL_473:
  v740 = 0;
  v741 = 0;
  v742 = 0;
  sub_1BE6A31F8((uint64_t *)&v750, (uint64_t)&v740, a4);
  objc_msgSend_strokeCount(v728, v373, v374, v375, v376, v377);
  sub_1BE6A2510(&v740, a3);
  v378 = (char *)v740;
  for (kk = v741; kk != v378; kk -= 120)
  {
    v380 = (void *)*((_QWORD *)kk - 3);
    if (v380)
    {
      *((_QWORD *)kk - 2) = v380;
      operator delete(v380);
    }
    v381 = (void *)*((_QWORD *)kk - 6);
    if (v381)
    {
      *((_QWORD *)kk - 5) = v381;
      operator delete(v381);
    }
    v382 = (void *)*((_QWORD *)kk - 9);
    if (v382)
    {
      *((_QWORD *)kk - 8) = v382;
      operator delete(v382);
    }
  }
  v741 = v378;
  sub_1BE6A31F8((uint64_t *)&v747, (uint64_t)&v740, a4);
  objc_msgSend_strokeCount(v728, v383, v384, v385, v386, v387);
  sub_1BE6A2510(&v740, a3);
  v388 = (char *)v740;
  for (mm = v741; mm != v388; mm -= 120)
  {
    v390 = (void *)*((_QWORD *)mm - 3);
    if (v390)
    {
      *((_QWORD *)mm - 2) = v390;
      operator delete(v390);
    }
    v391 = (void *)*((_QWORD *)mm - 6);
    if (v391)
    {
      *((_QWORD *)mm - 5) = v391;
      operator delete(v391);
    }
    v392 = (void *)*((_QWORD *)mm - 9);
    if (v392)
    {
      *((_QWORD *)mm - 8) = v392;
      operator delete(v392);
    }
  }
  v741 = v388;
  sub_1BE6A31F8((uint64_t *)&v765, (uint64_t)&v740, a4);
  objc_msgSend_strokeCount(v728, v393, v394, v395, v396, v397);
  sub_1BE6A2510(&v740, a3);
  v398 = (char *)v740;
  for (nn = v741; nn != v398; nn -= 120)
  {
    v400 = (void *)*((_QWORD *)nn - 3);
    if (v400)
    {
      *((_QWORD *)nn - 2) = v400;
      operator delete(v400);
    }
    v401 = (void *)*((_QWORD *)nn - 6);
    if (v401)
    {
      *((_QWORD *)nn - 5) = v401;
      operator delete(v401);
    }
    v402 = (void *)*((_QWORD *)nn - 9);
    if (v402)
    {
      *((_QWORD *)nn - 8) = v402;
      operator delete(v402);
    }
  }
  v741 = v398;
  v737 = 0;
  v738 = 0;
  v739 = 0;
  v784 = 0;
  v785 = 0;
  v783 = (uint64_t *)&v784;
  v757 = 0u;
  v758 = 0u;
  v756 = 0u;
  sub_1BE6A3E70((uint64_t)&v756);
  v403 = (void **)*((_QWORD *)&v756 + 1);
  v404 = *(void ***)&v757.f64[0];
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1)
                        + (((*(_QWORD *)&v758.f64[0] + *(_QWORD *)&v758.f64[1]) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*(_QWORD *)&v758.f64[0] + *(_QWORD *)&v758.f64[1]) & 0x1FFLL)) = 0;
  v29 = __CFADD__(*(_QWORD *)&v758.f64[1], 1);
  *(_QWORD *)&v405 = ++*(_QWORD *)&v758.f64[1];
  if (v29)
    goto LABEL_682;
  while (2)
  {
    v406 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v756 + 1)
                                 + (((unint64_t)(*(_QWORD *)&v758.f64[0] + *(_QWORD *)&v405 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((*(_QWORD *)&v758.f64[0] + *(_QWORD *)&v405 - 1) & 0x1FF));
    if (*(_QWORD *)&v757.f64[0] == *((_QWORD *)&v756 + 1))
      v407 = 0;
    else
      v407 = ((*(_QWORD *)&v757.f64[0] - *((_QWORD *)&v756 + 1)) << 6) - 1;
    *(_QWORD *)&v758.f64[1] = *(_QWORD *)&v405 - 1;
    if ((unint64_t)(v407 - (*(_QWORD *)&v405 + *(_QWORD *)&v758.f64[0]) + 1) >= 0x400)
    {
      operator delete(*(void **)(*(_QWORD *)&v757.f64[0] - 8));
      *(_QWORD *)&v757.f64[0] -= 8;
    }
    v408 = v784;
    if (v784)
    {
      v409 = (uint64_t **)&v784;
      do
      {
        v410 = v408;
        v411 = v409;
        v412 = *((_QWORD *)v408 + 4);
        v413 = (char **)(v408 + 8);
        if (v412 >= v406)
        {
          v413 = (char **)v410;
          v409 = (uint64_t **)v410;
        }
        v408 = *v413;
      }
      while (v408);
      if (v409 != (uint64_t **)&v784)
      {
        if (v412 < v406)
          v410 = (char *)v411;
        if (v406 >= *((_QWORD *)v410 + 4))
          goto LABEL_502;
      }
    }
    v782 = 0;
    v780 = 0u;
    v781 = 0u;
    __dst = 0u;
    v779 = 0u;
    v776 = 0u;
    v777 = 0u;
    v775 = 0u;
    Segment::Segment((Segment *)&v768, (const Segment *)((char *)v765 + 120 * v406));
    v414 = 0;
    v415 = 0;
    v416 = 100000.0;
    do
    {
      if (v414)
        Segment::mergeIntoSegment((Segment *)&v768, (const Segment *)((char *)v765 + 120 * v414 + 120 * v406));
      v417 = vabdd_f64(v768.f64[0], a4);
      if (v417 < a4 * 0.5)
      {
        v418 = **((_QWORD **)v765 + 15 * v406 + 6);
        v419 = v414 + v406;
        v420 = *(_QWORD *)(*((_QWORD *)v765 + 15 * v414 + 15 * v406 + 7) - 8);
        v421 = v738;
        if (v738 < v739)
        {
          *(_QWORD *)v738 = v418;
          *((_QWORD *)v738 + 1) = v420;
          v422 = v738 + 16;
LABEL_535:
          v738 = v422;
          v430 = v419 + 1;
          if (v419 + 1 < 0xEEEEEEEEEEEEEEEFLL * ((v766 - (Segment *)v765) >> 3))
          {
            v431 = v784;
            if (!v784)
              goto LABEL_545;
            v432 = (uint64_t **)&v784;
            do
            {
              v433 = v431;
              v434 = v432;
              v435 = *((_QWORD *)v431 + 4);
              v436 = (char **)(v431 + 8);
              if (v435 >= v430)
              {
                v436 = (char **)v433;
                v432 = (uint64_t **)v433;
              }
              v431 = *v436;
            }
            while (v431);
            if (v432 == (uint64_t **)&v784)
              goto LABEL_545;
            if (v435 < v430)
              v433 = (char *)v434;
            if (v430 < *((_QWORD *)v433 + 4))
            {
LABEL_545:
              v437 = *((_QWORD *)&v756 + 1);
              v438 = ((*(_QWORD *)&v757.f64[0] - *((_QWORD *)&v756 + 1)) << 6) - 1;
              if (*(_QWORD *)&v757.f64[0] == *((_QWORD *)&v756 + 1))
                v438 = 0;
              v439 = *(_QWORD *)&v758.f64[1] + *(_QWORD *)&v758.f64[0];
              if (v438 == *(_QWORD *)&v758.f64[1] + *(_QWORD *)&v758.f64[0])
              {
                sub_1BE6A3E70((uint64_t)&v756);
                v437 = *((_QWORD *)&v756 + 1);
                v439 = *(_QWORD *)&v758.f64[1] + *(_QWORD *)&v758.f64[0];
              }
              *(_QWORD *)(*(_QWORD *)(v437 + ((v439 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v439 & 0x1FF)) = v430;
              ++*(_QWORD *)&v758.f64[1];
            }
          }
          goto LABEL_550;
        }
        v423 = (v738 - v737) >> 4;
        v424 = v423 + 1;
        if ((unint64_t)(v423 + 1) >> 60)
          sub_1BE61F930();
        v425 = v739 - v737;
        if ((v739 - v737) >> 3 > v424)
          v424 = v425 >> 3;
        if ((unint64_t)v425 >= 0x7FFFFFFFFFFFFFF0)
          v426 = 0xFFFFFFFFFFFFFFFLL;
        else
          v426 = v424;
        if (v426)
        {
          if (v426 >> 60)
            sub_1BE61F100();
          v427 = (char *)operator new(16 * v426);
          v428 = &v427[16 * v423];
          *(_QWORD *)v428 = v418;
          *((_QWORD *)v428 + 1) = v420;
          v429 = (uint64_t)v428;
          if (v738 != v737)
          {
            do
            {
LABEL_532:
              *(_OWORD *)(v429 - 16) = *((_OWORD *)v421 - 1);
              v429 -= 16;
              v421 -= 16;
            }
            while (v421 != v737);
            v421 = v737;
            v422 = v428 + 16;
            v737 = (char *)v429;
            v739 = &v427[16 * v426];
            if (!v421)
              goto LABEL_535;
LABEL_534:
            operator delete(v421);
            goto LABEL_535;
          }
        }
        else
        {
          v427 = 0;
          v428 = (char *)(16 * v423);
          *(_QWORD *)v428 = v418;
          *((_QWORD *)v428 + 1) = v420;
          v429 = 16 * v423;
          if (v738 != v737)
            goto LABEL_532;
        }
        v422 = v428 + 16;
        v737 = (char *)v429;
        v739 = &v427[16 * v426];
        if (!v738)
          goto LABEL_535;
        goto LABEL_534;
      }
LABEL_550:
      if (v417 < v416)
      {
        v775 = v768;
        v776 = v769;
        v777 = v770;
        v440 = v771;
        v441 = *((_QWORD *)&v771 + 1) - v771;
        v442 = (uint64_t)(*((_QWORD *)&v771 + 1) - v771) >> 3;
        v443 = v779;
        v444 = (char *)__dst;
        if (v442 > (uint64_t)(v779 - __dst) >> 3)
        {
          if ((_QWORD)__dst)
          {
            *((_QWORD *)&__dst + 1) = __dst;
            operator delete((void *)__dst);
            v443 = 0;
            __dst = 0uLL;
            *(_QWORD *)&v779 = 0;
          }
          if ((v441 & 0x8000000000000000) != 0)
            goto LABEL_961;
          v445 = v443 >> 2;
          if (v443 >> 2 <= v442)
            v445 = v442;
          v446 = (unint64_t)v443 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v445;
          if (v446 >> 61)
LABEL_961:
            sub_1BE61F930();
          v447 = (char *)operator new(8 * v446);
          v444 = v447;
          *(_QWORD *)&__dst = v447;
          *((_QWORD *)&__dst + 1) = v447;
          *(_QWORD *)&v779 = &v447[8 * v446];
          if (*((_QWORD *)&v440 + 1) != (_QWORD)v440)
            memcpy(v447, (const void *)v440, v441);
          goto LABEL_571;
        }
        v448 = (uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 3;
        if (v448 >= v442)
        {
          if (*((_QWORD *)&v771 + 1) == (_QWORD)v771)
            goto LABEL_571;
          v450 = (void *)__dst;
          v449 = (const void *)v771;
        }
        else
        {
          if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
          {
            memmove((void *)__dst, (const void *)v771, *((_QWORD *)&__dst + 1) - __dst);
            v444 = (char *)*((_QWORD *)&__dst + 1);
          }
          v449 = (const void *)(v440 + 8 * v448);
          v441 = *((_QWORD *)&v440 + 1) - (_QWORD)v449;
          if (*((const void **)&v440 + 1) == v449)
          {
LABEL_571:
            *((_QWORD *)&__dst + 1) = &v444[v441];
            v451 = (char *)*((_QWORD *)&v772 + 1);
            v452 = (char *)v773;
            v453 = v773 - *((_QWORD *)&v772 + 1);
            v454 = (uint64_t)(v773 - *((_QWORD *)&v772 + 1)) >> 2;
            v455 = *((_QWORD *)&v780 + 1);
            v456 = (char *)*((_QWORD *)&v779 + 1);
            if (v454 > (uint64_t)(*((_QWORD *)&v780 + 1) - *((_QWORD *)&v779 + 1)) >> 2)
            {
              if (*((_QWORD *)&v779 + 1))
              {
                *(_QWORD *)&v780 = *((_QWORD *)&v779 + 1);
                operator delete(*((void **)&v779 + 1));
                v455 = 0;
                *((_QWORD *)&v779 + 1) = 0;
                v780 = 0uLL;
              }
              if ((v453 & 0x8000000000000000) != 0)
                goto LABEL_960;
              v457 = v455 >> 1;
              if (v455 >> 1 <= v454)
                v457 = v454;
              v458 = (unint64_t)v455 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v457;
              if (v458 >> 62)
LABEL_960:
                sub_1BE61F930();
              v459 = (char *)operator new(4 * v458);
              v456 = v459;
              *((_QWORD *)&v779 + 1) = v459;
              *(_QWORD *)&v780 = v459;
              *((_QWORD *)&v780 + 1) = &v459[4 * v458];
              if (v452 != v451)
                memcpy(v459, v451, v453);
LABEL_591:
              *(_QWORD *)&v780 = &v456[v453];
              v463 = (char *)v774[0];
              v464 = (char *)v774[1];
              v465 = (char *)v774[1] - (char *)v774[0];
              v466 = ((char *)v774[1] - (char *)v774[0]) >> 2;
              v467 = (uint64_t)v782;
              v468 = (char *)v781;
              if (v466 > (uint64_t)&v782[-v781] >> 2)
              {
                if ((_QWORD)v781)
                {
                  *((_QWORD *)&v781 + 1) = v781;
                  operator delete((void *)v781);
                  v467 = 0;
                  v781 = 0uLL;
                  v782 = 0;
                }
                if ((v465 & 0x8000000000000000) != 0)
                  goto LABEL_960;
                v469 = v467 >> 1;
                if (v467 >> 1 <= v466)
                  v469 = v466;
                v470 = (unint64_t)v467 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v469;
                if (v470 >> 62)
                  goto LABEL_960;
                v471 = (char *)operator new(4 * v470);
                v468 = v471;
                *(_QWORD *)&v781 = v471;
                *((_QWORD *)&v781 + 1) = v471;
                v782 = &v471[4 * v470];
                if (v464 != v463)
                  memcpy(v471, v463, v465);
                goto LABEL_611;
              }
              v472 = (uint64_t)(*((_QWORD *)&v781 + 1) - v781) >> 2;
              if (v472 >= v466)
              {
                if (v774[1] == v774[0])
                {
LABEL_611:
                  *((_QWORD *)&v781 + 1) = &v468[v465];
                  v415 = v414;
                  v416 = v417;
                  goto LABEL_612;
                }
                v474 = (void *)v781;
                v473 = (char *)v774[0];
              }
              else
              {
                if (*((_QWORD *)&v781 + 1) != (_QWORD)v781)
                {
                  memmove((void *)v781, v774[0], *((_QWORD *)&v781 + 1) - v781);
                  v468 = (char *)*((_QWORD *)&v781 + 1);
                }
                v473 = &v463[4 * v472];
                v465 = v464 - v473;
                if (v464 == v473)
                  goto LABEL_611;
                v474 = v468;
              }
              memmove(v474, v473, v465);
              goto LABEL_611;
            }
            v460 = (uint64_t)(v780 - *((_QWORD *)&v779 + 1)) >> 2;
            if (v460 >= v454)
            {
              if ((_QWORD)v773 == *((_QWORD *)&v772 + 1))
                goto LABEL_591;
              v462 = (void *)*((_QWORD *)&v779 + 1);
              v461 = (char *)*((_QWORD *)&v772 + 1);
            }
            else
            {
              if ((_QWORD)v780 != *((_QWORD *)&v779 + 1))
              {
                memmove(*((void **)&v779 + 1), *((const void **)&v772 + 1), v780 - *((_QWORD *)&v779 + 1));
                v456 = (char *)v780;
              }
              v461 = &v451[4 * v460];
              v453 = v452 - v461;
              if (v452 == v461)
                goto LABEL_591;
              v462 = v456;
            }
            memmove(v462, v461, v453);
            goto LABEL_591;
          }
          v450 = v444;
        }
        memmove(v450, v449, v441);
        goto LABEL_571;
      }
LABEL_612:
      if (v414 == 7)
        break;
      ++v414;
    }
    while (v414 + v406 < 0xEEEEEEEEEEEEEEEFLL * ((v766 - (Segment *)v765) >> 3));
    v475 = v784;
    v476 = &v784;
    v477 = &v784;
    if (v784)
    {
      v478 = (uint64_t **)&v784;
      v479 = v784;
      do
      {
        v480 = v479;
        v481 = v478;
        v482 = *((_QWORD *)v479 + 4);
        if (v482 >= v406)
          v478 = (uint64_t **)v479;
        else
          v479 += 8;
        v479 = *(char **)v479;
      }
      while (v479);
      if (v478 == (uint64_t **)&v784)
        goto LABEL_631;
      if (v482 < v406)
        v480 = (char *)v481;
      if (v406 < *((_QWORD *)v480 + 4))
      {
LABEL_631:
        while (1)
        {
          while (1)
          {
            v477 = (char **)v475;
            v483 = *((_QWORD *)v475 + 4);
            if (v406 >= v483)
              break;
            v475 = *v477;
            v476 = v477;
            if (!*v477)
              goto LABEL_634;
          }
          if (v483 >= v406)
            break;
          v475 = v477[1];
          if (!v475)
          {
            v476 = v477 + 1;
            goto LABEL_634;
          }
        }
      }
    }
    else
    {
LABEL_634:
      v484 = (uint64_t *)operator new(0x28uLL);
      v484[4] = v406;
      *v484 = 0;
      v484[1] = 0;
      v484[2] = (uint64_t)v477;
      *v476 = (char *)v484;
      if (*v783)
      {
        v783 = (uint64_t *)*v783;
        v484 = (uint64_t *)*v476;
      }
      sub_1BE61F5C0((uint64_t *)v784, v484);
      ++v785;
    }
    v485 = **((_QWORD **)v765 + 15 * v406 + 6);
    v486 = v406 + v415;
    v487 = *(_QWORD *)(*((_QWORD *)v765 + 15 * v486 + 7) - 8);
    v488 = v738;
    if (v738 >= v739)
    {
      v490 = (v738 - v737) >> 4;
      v491 = v490 + 1;
      if ((unint64_t)(v490 + 1) >> 60)
        sub_1BE61F930();
      v492 = v739 - v737;
      if ((v739 - v737) >> 3 > v491)
        v491 = v492 >> 3;
      if ((unint64_t)v492 >= 0x7FFFFFFFFFFFFFF0)
        v493 = 0xFFFFFFFFFFFFFFFLL;
      else
        v493 = v491;
      if (v493)
      {
        if (v493 >> 60)
          sub_1BE61F100();
        v494 = (char *)operator new(16 * v493);
        v495 = &v494[16 * v490];
        *(_QWORD *)v495 = v485;
        *((_QWORD *)v495 + 1) = v487;
        v496 = (uint64_t)v495;
        if (v738 != v737)
        {
          do
          {
LABEL_648:
            *(_OWORD *)(v496 - 16) = *((_OWORD *)v488 - 1);
            v496 -= 16;
            v488 -= 16;
          }
          while (v488 != v737);
          v488 = v737;
          v489 = v495 + 16;
          v737 = (char *)v496;
          v739 = &v494[16 * v493];
          if (!v488)
            goto LABEL_651;
LABEL_650:
          operator delete(v488);
          goto LABEL_651;
        }
      }
      else
      {
        v494 = 0;
        v495 = (char *)(16 * v490);
        *(_QWORD *)v495 = v485;
        *((_QWORD *)v495 + 1) = v487;
        v496 = 16 * v490;
        if (v738 != v737)
          goto LABEL_648;
      }
      v489 = v495 + 16;
      v737 = (char *)v496;
      v739 = &v494[16 * v493];
      if (!v738)
        goto LABEL_651;
      goto LABEL_650;
    }
    *(_QWORD *)v738 = v485;
    *((_QWORD *)v738 + 1) = v487;
    v489 = v738 + 16;
LABEL_651:
    v738 = v489;
    v497 = v486 + 1;
    if (v497 < 0xEEEEEEEEEEEEEEEFLL * ((v766 - (Segment *)v765) >> 3))
    {
      v498 = v784;
      if (!v784)
        goto LABEL_661;
      v499 = (uint64_t **)&v784;
      do
      {
        v500 = v498;
        v501 = v499;
        v502 = *((_QWORD *)v498 + 4);
        v503 = (char **)(v498 + 8);
        if (v502 >= v497)
        {
          v503 = (char **)v500;
          v499 = (uint64_t **)v500;
        }
        v498 = *v503;
      }
      while (v498);
      if (v499 == (uint64_t **)&v784)
        goto LABEL_661;
      if (v502 < v497)
        v500 = (char *)v501;
      if (v497 < *((_QWORD *)v500 + 4))
      {
LABEL_661:
        v504 = *((_QWORD *)&v756 + 1);
        v505 = ((*(_QWORD *)&v757.f64[0] - *((_QWORD *)&v756 + 1)) << 6) - 1;
        if (*(_QWORD *)&v757.f64[0] == *((_QWORD *)&v756 + 1))
          v505 = 0;
        v506 = *(_QWORD *)&v758.f64[1] + *(_QWORD *)&v758.f64[0];
        if (v505 == *(_QWORD *)&v758.f64[1] + *(_QWORD *)&v758.f64[0])
        {
          sub_1BE6A3E70((uint64_t)&v756);
          v504 = *((_QWORD *)&v756 + 1);
          v506 = *(_QWORD *)&v758.f64[1] + *(_QWORD *)&v758.f64[0];
        }
        *(_QWORD *)(*(_QWORD *)(v504 + ((v506 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v506 & 0x1FF)) = v497;
        ++*(_QWORD *)&v758.f64[1];
      }
    }
    if (v774[0])
    {
      v774[1] = v774[0];
      operator delete(v774[0]);
    }
    if (*((_QWORD *)&v772 + 1))
    {
      *(_QWORD *)&v773 = *((_QWORD *)&v772 + 1);
      operator delete(*((void **)&v772 + 1));
    }
    if ((_QWORD)v771)
    {
      *((_QWORD *)&v771 + 1) = v771;
      operator delete((void *)v771);
    }
    if ((_QWORD)v781)
    {
      *((_QWORD *)&v781 + 1) = v781;
      operator delete((void *)v781);
    }
    if (*((_QWORD *)&v779 + 1))
    {
      *(_QWORD *)&v780 = *((_QWORD *)&v779 + 1);
      operator delete(*((void **)&v779 + 1));
    }
    if ((_QWORD)__dst)
    {
      *((_QWORD *)&__dst + 1) = __dst;
      operator delete((void *)__dst);
    }
LABEL_502:
    v405 = v758.f64[1];
    if (*(_QWORD *)&v758.f64[1])
      continue;
    break;
  }
  v403 = (void **)*((_QWORD *)&v756 + 1);
  v404 = *(void ***)&v757.f64[0];
LABEL_682:
  v758.f64[1] = 0.0;
  v507 = (char *)v404 - (char *)v403;
  if ((unint64_t)((char *)v404 - (char *)v403) >= 0x11)
  {
    do
    {
      operator delete(*v403);
      v404 = *(void ***)&v757.f64[0];
      v403 = (void **)(*((_QWORD *)&v756 + 1) + 8);
      *((_QWORD *)&v756 + 1) = v403;
      v507 = *(_QWORD *)&v757.f64[0] - (_QWORD)v403;
    }
    while (*(_QWORD *)&v757.f64[0] - (_QWORD)v403 > 0x10uLL);
  }
  v508 = v507 >> 3;
  if (v508 == 1)
  {
    v509 = 256;
LABEL_688:
    *(_QWORD *)&v758.f64[0] = v509;
  }
  else if (v508 == 2)
  {
    v509 = 512;
    goto LABEL_688;
  }
  if (v403 != v404)
  {
    do
    {
      v510 = *v403++;
      operator delete(v510);
    }
    while (v403 != v404);
    if (*(_QWORD *)&v757.f64[0] != *((_QWORD *)&v756 + 1))
      *(_QWORD *)&v757.f64[0] += (*((_QWORD *)&v756 + 1) - *(_QWORD *)&v757.f64[0] + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  if ((_QWORD)v756)
    operator delete((void *)v756);
  sub_1BE62033C((uint64_t)&v783, v784);
  objc_msgSend_strokeCount(v728, v511, v512, v513, v514, v515);
  v517 = *a3;
  v516 = (_QWORD *)a3[1];
  if ((unint64_t)v516 < a3[2])
  {
    *v516 = 0;
    v516[1] = 0;
    v516[2] = 0;
    a3[1] = v516 + 3;
    a3[1] = v516 + 3;
    v518 = v737;
    if (v738 == v737)
      goto LABEL_718;
LABEL_699:
    v519 = 0;
    v520 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v516 - v517) >> 3);
    v521 = a3;
    while (2)
    {
      while (1)
      {
        v522 = *(_OWORD *)&v518[16 * v519];
        v523 = (char **)(*v521 + 24 * v520);
        v525 = v523 + 1;
        v524 = v523[1];
        v526 = (unint64_t)v523[2];
        if ((unint64_t)v524 >= v526)
          break;
        *(_OWORD *)v524 = v522;
        *v525 = v524 + 16;
        ++v519;
        v518 = v737;
        if (v519 >= (v738 - v737) >> 4)
          goto LABEL_718;
      }
      v527 = *v523;
      v528 = (v524 - *v523) >> 4;
      v529 = v528 + 1;
      if ((unint64_t)(v528 + 1) >> 60)
        sub_1BE61F930();
      v530 = v526 - (_QWORD)v527;
      if (v530 >> 3 > v529)
        v529 = v530 >> 3;
      if ((unint64_t)v530 >= 0x7FFFFFFFFFFFFFF0)
        v531 = 0xFFFFFFFFFFFFFFFLL;
      else
        v531 = v529;
      if (v531)
      {
        *(_OWORD *)v735 = v522;
        if (v531 >> 60)
          sub_1BE61F100();
        v532 = (char *)operator new(16 * v531);
        v533 = &v532[16 * v528];
        *(_OWORD *)v533 = *(_OWORD *)v735;
        v534 = v533 + 16;
        if (v524 == v527)
        {
LABEL_715:
          *v523 = v533;
          *v525 = v534;
          v523[2] = &v532[16 * v531];
          if (v524)
            operator delete(v524);
          v521 = a3;
          *v525 = v534;
          ++v519;
          v518 = v737;
          if (v519 >= (v738 - v737) >> 4)
            goto LABEL_718;
          continue;
        }
      }
      else
      {
        v532 = 0;
        v533 = (char *)(16 * v528);
        v535 = (_OWORD *)(16 * v528);
        *v535 = v522;
        v534 = v535 + 1;
        if (v524 == v527)
          goto LABEL_715;
      }
      break;
    }
    do
    {
      *((_OWORD *)v533 - 1) = *((_OWORD *)v524 - 1);
      v533 -= 16;
      v524 -= 16;
    }
    while (v524 != v527);
    v524 = *v523;
    goto LABEL_715;
  }
  a3[1] = sub_1BE6A3C70((char **)a3, 0, 0);
  v518 = v737;
  if (v738 != v737)
    goto LABEL_699;
LABEL_718:
  v536 = v728;
  objc_msgSend_bounds(v536, v537, v538, v539, v540, v541);
  if (v547 >= a4 + a4
    && (unint64_t)objc_msgSend_pointCount(v536, v542, v543, v544, v545, v546) >= 0x19
    && ((unint64_t)objc_msgSend_strokeCount(v536, v548, v549, v550, v551, v552) > 2
     || (unint64_t)objc_msgSend_pointCount(v536, v582, v583, v584, v585, v586) >= 0x32))
  {

    goto LABEL_745;
  }

  v563 = objc_msgSend_strokeCount(v536, v553, v554, v555, v556, v557);
  v565 = *a3;
  v564 = (_QWORD *)a3[1];
  if ((unint64_t)v564 >= a3[2])
  {
    v566 = sub_1BE6A3C70((char **)a3, 0, 0);
  }
  else
  {
    *v564 = 0;
    v564[1] = 0;
    v564[2] = 0;
    v566 = (char *)(v564 + 3);
    a3[1] = v564 + 3;
  }
  a3[1] = v566;
  v568 = v563 - 1;
  v567 = (char **)(*a3 + 8 * (((uint64_t)v564 - v565) >> 3));
  v569 = (uint64_t *)(v567 + 1);
  v570 = v567[1];
  v572 = v567 + 2;
  v571 = (unint64_t)v567[2];
  if ((unint64_t)v570 < v571)
  {
    *(_QWORD *)v570 = 0;
    *((_QWORD *)v570 + 1) = v568;
    *v569 = (uint64_t)(v570 + 16);
    goto LABEL_745;
  }
  v573 = *v567;
  v574 = (v570 - *v567) >> 4;
  v575 = v574 + 1;
  if ((unint64_t)(v574 + 1) >> 60)
    sub_1BE61F930();
  v576 = v571 - (_QWORD)v573;
  if (v576 >> 3 > v575)
    v575 = v576 >> 3;
  if ((unint64_t)v576 >= 0x7FFFFFFFFFFFFFF0)
    v577 = 0xFFFFFFFFFFFFFFFLL;
  else
    v577 = v575;
  if (v577)
  {
    if (v577 >> 60)
      sub_1BE61F100();
    v578 = (char *)operator new(16 * v577);
    v579 = &v578[16 * v574];
    v580 = &v578[16 * v577];
    *(_QWORD *)v579 = 0;
    *((_QWORD *)v579 + 1) = v568;
    v581 = (uint64_t)(v579 + 16);
    if (v570 == v573)
    {
LABEL_742:
      *v567 = v579;
      *v569 = v581;
      *v572 = v580;
      if (v570)
        goto LABEL_743;
      goto LABEL_744;
    }
  }
  else
  {
    v579 = (char *)(16 * v574);
    v580 = 0;
    *(_QWORD *)v579 = 0;
    *((_QWORD *)v579 + 1) = v568;
    v581 = 16 * v574 + 16;
    if (v570 == v573)
      goto LABEL_742;
  }
  do
  {
    *((_OWORD *)v579 - 1) = *((_OWORD *)v570 - 1);
    v579 -= 16;
    v570 -= 16;
  }
  while (v570 != v573);
  v570 = *v567;
  *v567 = v579;
  *v569 = v581;
  *v572 = v580;
  if (v570)
LABEL_743:
    operator delete(v570);
LABEL_744:
  *v569 = v581;
LABEL_745:
  v775 = 0uLL;
  v776.f64[0] = 0.0;
  v768 = 0uLL;
  v769.f64[0] = 0.0;
  objc_msgSend_strokeCount(v536, v558, v559, v560, v561, v562);
  v733 = v536;
  v587 = (char *)v750;
  v588 = a2;
  v589 = 0.0;
  if (v751 != v750)
  {
    v590 = 0;
    v591 = 0;
    do
    {
      v593 = &v587[120 * v590];
      v594 = v591 + ((uint64_t)(*((_QWORD *)v593 + 7) - *((_QWORD *)v593 + 6)) >> 3);
      v595 = v594 - 1;
      v596 = *(double *)v593;
      if (*((double *)v593 + 1) <= 0.0)
        v597 = 1.0;
      else
        v597 = *((double *)v593 + 1);
      if (*(_QWORD *)&v589 < *(_QWORD *)&v776.f64[0])
      {
        **(_QWORD **)&v589 = v591;
        *(_QWORD *)(*(_QWORD *)&v589 + 8) = v595;
        *(_QWORD *)&v589 += 16;
        v598 = v596 / v597;
        v775.f64[1] = v589;
        v600 = *(float **)&v768.f64[1];
        v599 = v769.f64[0];
        if (*(_QWORD *)&v768.f64[1] >= *(_QWORD *)&v769.f64[0])
          goto LABEL_769;
        goto LABEL_747;
      }
      v601 = v775.f64[0];
      v602 = (uint64_t)(*(_QWORD *)&v589 - *(_QWORD *)&v775.f64[0]) >> 4;
      v603 = v602 + 1;
      if ((unint64_t)(v602 + 1) >> 60)
        sub_1BE61F930();
      v604 = *(_QWORD *)&v776.f64[0] - *(_QWORD *)&v775.f64[0];
      if ((uint64_t)(*(_QWORD *)&v776.f64[0] - *(_QWORD *)&v775.f64[0]) >> 3 > v603)
        v603 = v604 >> 3;
      if ((unint64_t)v604 >= 0x7FFFFFFFFFFFFFF0)
        v605 = 0xFFFFFFFFFFFFFFFLL;
      else
        v605 = v603;
      if (v605)
      {
        if (v605 >> 60)
          goto LABEL_968;
        v606 = (char *)operator new(16 * v605);
        v607 = &v606[16 * v602];
        *(_QWORD *)v607 = v591;
        *((_QWORD *)v607 + 1) = v595;
        if (*(_QWORD *)&v589 == *(_QWORD *)&v601)
        {
LABEL_780:
          v609 = v589;
          *(_QWORD *)&v589 = v607 + 16;
          *(_QWORD *)&v775.f64[0] = v607;
          *(_QWORD *)&v775.f64[1] = v607 + 16;
          *(_QWORD *)&v776.f64[0] = &v606[16 * v605];
          if (v609 != 0.0)
            goto LABEL_767;
          goto LABEL_768;
        }
      }
      else
      {
        v606 = 0;
        v607 = (char *)(16 * v602);
        *(_QWORD *)v607 = v591;
        *((_QWORD *)v607 + 1) = v595;
        if (*(_QWORD *)&v589 == *(_QWORD *)&v601)
          goto LABEL_780;
      }
      v608 = *(double *)&v607;
      do
      {
        *(_OWORD *)(*(_QWORD *)&v608 - 16) = *(_OWORD *)(*(_QWORD *)&v589 - 16);
        *(_QWORD *)&v608 -= 16;
        *(_QWORD *)&v589 -= 16;
      }
      while (*(_QWORD *)&v589 != *(_QWORD *)&v601);
      v609 = v775.f64[0];
      *(_QWORD *)&v589 = v607 + 16;
      v775.f64[0] = v608;
      *(_QWORD *)&v775.f64[1] = v607 + 16;
      *(_QWORD *)&v776.f64[0] = &v606[16 * v605];
      if (v609 != 0.0)
LABEL_767:
        operator delete(*(void **)&v609);
LABEL_768:
      v588 = a2;
      v598 = v596 / v597;
      v775.f64[1] = v589;
      v600 = *(float **)&v768.f64[1];
      v599 = v769.f64[0];
      if (*(_QWORD *)&v768.f64[1] >= *(_QWORD *)&v769.f64[0])
      {
LABEL_769:
        v610 = *(float **)&v768.f64[0];
        v611 = (char *)v600 - *(_QWORD *)&v768.f64[0];
        v612 = ((uint64_t)v600 - *(_QWORD *)&v768.f64[0]) >> 2;
        v613 = v612 + 1;
        if ((unint64_t)(v612 + 1) >> 62)
          sub_1BE61F930();
        v614 = *(_QWORD *)&v599 - *(_QWORD *)&v768.f64[0];
        if (v614 >> 1 > v613)
          v613 = v614 >> 1;
        if ((unint64_t)v614 >= 0x7FFFFFFFFFFFFFFCLL)
          v615 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v615 = v613;
        if (v615)
        {
          if (v615 >> 62)
LABEL_968:
            sub_1BE61F100();
          v616 = operator new(4 * v615);
          v617 = (float *)((char *)v616 + 4 * v612);
          *v617 = v598;
          v592 = (uint64_t)(v617 + 1);
          v618 = (char *)v600 - (char *)v610;
          if (v600 == v610)
            goto LABEL_789;
LABEL_783:
          v619 = v618 - 4;
          if (v619 < 0x2C)
            goto LABEL_988;
          if ((unint64_t)((char *)v600 - &v611[(_QWORD)v616]) < 0x20)
            goto LABEL_988;
          v620 = (v619 >> 2) + 1;
          v621 = 4 * (v620 & 0x7FFFFFFFFFFFFFF8);
          v622 = &v600[v621 / 0xFFFFFFFFFFFFFFFCLL];
          v617 = (float *)((char *)v617 - v621);
          v623 = (char *)v616 + 4 * v612 - 16;
          v624 = v600 - 4;
          v625 = v620 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v626 = *(_OWORD *)v624;
            *(v623 - 1) = *((_OWORD *)v624 - 1);
            *v623 = v626;
            v623 -= 2;
            v624 -= 8;
            v625 -= 8;
          }
          while (v625);
          v600 = v622;
          if (v620 != (v620 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_988:
            do
            {
              v627 = *((_DWORD *)v600-- - 1);
              *((_DWORD *)v617-- - 1) = v627;
            }
            while (v600 != v610);
          }
        }
        else
        {
          v616 = 0;
          v617 = (float *)(4 * v612);
          *(float *)(4 * v612) = v598;
          v592 = 4 * v612 + 4;
          v618 = (char *)v600 - (char *)v610;
          if (v600 != v610)
            goto LABEL_783;
        }
LABEL_789:
        *(_QWORD *)&v768.f64[0] = v617;
        *(_QWORD *)&v769.f64[0] = (char *)v616 + 4 * v615;
        if (v610)
          operator delete(v610);
        v588 = a2;
        goto LABEL_748;
      }
LABEL_747:
      *v600 = v598;
      v592 = (uint64_t)(v600 + 1);
LABEL_748:
      *(_QWORD *)&v768.f64[1] = v592;
      ++v590;
      v587 = (char *)v750;
      v591 = v594;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((v751 - (Segment *)v750) >> 3) > v590);
  }
  v756 = 0uLL;
  v757.f64[0] = 0.0;
  if (*(_QWORD *)&v589 == *(_QWORD *)&v775.f64[0])
    goto LABEL_855;
  v628 = 0;
  if ((unint64_t)((uint64_t)(*(_QWORD *)&v589 - *(_QWORD *)&v775.f64[0]) >> 4) <= 1)
    v629 = 1;
  else
    v629 = (uint64_t)(*(_QWORD *)&v589 - *(_QWORD *)&v775.f64[0]) >> 4;
  v736 = v629;
  while (2)
  {
    while (2)
    {
      if (*(float *)(*(_QWORD *)&v768.f64[0] + 4 * v628) < 1.0
        || (v630 = (uint64_t *)(*(_QWORD *)&v775.f64[0] + 16 * v628), v632 = *v630, v631 = v630[1], v631 - *v630 <= 1))
      {
        v633 = (_OWORD *)(*(_QWORD *)&v775.f64[0] + 16 * v628);
        v634 = (char *)*((_QWORD *)&v756 + 1);
        if (*((_QWORD *)&v756 + 1) < *(_QWORD *)&v757.f64[0])
        {
          **((_OWORD **)&v756 + 1) = *v633;
          *((_QWORD *)&v756 + 1) = v634 + 16;
          if (++v628 == v629)
            goto LABEL_855;
          continue;
        }
        v635 = (char *)v756;
        v636 = (uint64_t)(*((_QWORD *)&v756 + 1) - v756) >> 4;
        v637 = v636 + 1;
        if ((unint64_t)(v636 + 1) >> 60)
          sub_1BE61F930();
        v638 = *(_QWORD *)&v757.f64[0] - v756;
        if ((uint64_t)(*(_QWORD *)&v757.f64[0] - v756) >> 3 > v637)
          v637 = v638 >> 3;
        if ((unint64_t)v638 >= 0x7FFFFFFFFFFFFFF0)
          v639 = 0xFFFFFFFFFFFFFFFLL;
        else
          v639 = v637;
        if (v639)
        {
          if (v639 >> 60)
            sub_1BE61F100();
          v640 = (char *)operator new(16 * v639);
          v641 = &v640[16 * v636];
          *(_OWORD *)v641 = *v633;
          v642 = (uint64_t)v641;
          if (v634 != v635)
          {
LABEL_810:
            v629 = v736;
            do
            {
              *(_OWORD *)(v642 - 16) = *((_OWORD *)v634 - 1);
              v642 -= 16;
              v634 -= 16;
            }
            while (v634 != v635);
            v634 = (char *)v756;
            v643 = v641 + 16;
            *(_QWORD *)&v756 = v642;
            *(_QWORD *)&v757.f64[0] = &v640[16 * v639];
            if (v634)
LABEL_813:
              operator delete(v634);
LABEL_814:
            v588 = a2;
            *((_QWORD *)&v756 + 1) = v643;
            if (++v628 == v629)
              goto LABEL_855;
            continue;
          }
        }
        else
        {
          v640 = 0;
          v641 = (char *)(16 * v636);
          *(_OWORD *)(16 * v636) = *v633;
          v642 = 16 * v636;
          if (v634 != v635)
            goto LABEL_810;
        }
        v629 = v736;
        v643 = v641 + 16;
        *(_QWORD *)&v756 = v642;
        *(_QWORD *)&v757.f64[0] = &v640[16 * v639];
        if (v634)
          goto LABEL_813;
        goto LABEL_814;
      }
      break;
    }
    v783 = 0;
    v784 = 0;
    v785 = 0;
    if (v631 < v632)
      goto LABEL_854;
    v644 = 0;
    v645 = 0;
    v646 = 0;
    while (2)
    {
      while (v646 < v645)
      {
        *v646++ = v632;
        v784 = (char *)v646;
        v81 = v632++ == v631;
        if (v81)
          goto LABEL_852;
      }
      v647 = v646 - v644;
      v648 = v647 + 1;
      if ((unint64_t)(v647 + 1) >> 61)
        sub_1BE61F930();
      if (((char *)v645 - (char *)v644) >> 2 > v648)
        v648 = ((char *)v645 - (char *)v644) >> 2;
      if ((unint64_t)((char *)v645 - (char *)v644) >= 0x7FFFFFFFFFFFFFF8)
        v649 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v649 = v648;
      if (!v649)
      {
        v650 = 0;
        v651 = (uint64_t *)(8 * v647);
        *(_QWORD *)(8 * v647) = v632;
        v652 = (uint64_t *)(8 * v647 + 8);
        v653 = (char *)v646 - (char *)v644;
        if (v646 == v644)
          goto LABEL_834;
LABEL_831:
        v654 = v653 - 8;
        if (v654 >= 0x168)
        {
          v657 = ((char *)(v646 - 1) - (char *)v644) & 0xFFFFFFFFFFFFFFF8;
          if (&v650[(char *)v646 - (char *)v644 - 8 - v657] > &v650[(char *)v646 - (char *)v644 - 8])
          {
            v655 = v646;
          }
          else if ((uint64_t *)((char *)v646 - v657 - 8) > v646 - 1)
          {
            v655 = v646;
          }
          else if ((unint64_t)((char *)v644 - v650) >= 0x20)
          {
            v658 = (v654 >> 3) + 1;
            v659 = 8 * (v658 & 0x3FFFFFFFFFFFFFFCLL);
            v655 = &v646[v659 / 0xFFFFFFFFFFFFFFF8];
            v651 = (uint64_t *)((char *)v651 - v659);
            v660 = &v650[8 * v647 - 16];
            v661 = v646 - 2;
            v662 = v658 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v663 = *(_OWORD *)v661;
              *(v660 - 1) = *((_OWORD *)v661 - 1);
              *v660 = v663;
              v660 -= 2;
              v661 -= 4;
              v662 -= 4;
            }
            while (v662);
            if (v658 == (v658 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_834;
          }
          else
          {
            v655 = v646;
          }
        }
        else
        {
          v655 = v646;
        }
        do
        {
          v656 = *--v655;
          *--v651 = v656;
        }
        while (v655 != v644);
        goto LABEL_834;
      }
      if (v649 >> 61)
        sub_1BE61F100();
      v650 = operator new(8 * v649);
      v651 = (uint64_t *)&v650[8 * v647];
      *v651 = v632;
      v652 = v651 + 1;
      v653 = (char *)v646 - (char *)v644;
      if (v646 != v644)
        goto LABEL_831;
LABEL_834:
      v645 = (uint64_t *)&v650[8 * v649];
      v783 = v651;
      v784 = (char *)v652;
      v785 = (unint64_t)v645;
      if (v644)
        operator delete(v644);
      v644 = v651;
      v784 = (char *)v652;
      v646 = v652;
      v81 = v632++ == v631;
      if (!v81)
        continue;
      break;
    }
LABEL_852:
    v629 = v736;
    if (v783)
      operator delete(v783);
LABEL_854:
    v588 = a2;
    if (++v628 != v629)
      continue;
    break;
  }
LABEL_855:
  v665 = (char *)v740;
  v664 = v741;
  if (v741 != v740)
  {
    v666 = 0;
    v667 = (char *)v588[1];
    do
    {
      v669 = &v665[120 * v666];
      v670 = *((_QWORD *)v669 + 6);
      v671 = ((*((_QWORD *)v669 + 7) - v670) >> 3) - 1;
      v672 = v588[2];
      if ((unint64_t)v667 < v672)
      {
        *(_QWORD *)v667 = *(_QWORD *)(v670 + 8 * v671);
        v668 = (uint64_t)(v667 + 8);
      }
      else
      {
        v673 = (char *)*v588;
        v674 = (uint64_t)&v667[-*v588];
        v675 = v674 >> 3;
        v676 = (v674 >> 3) + 1;
        if (v676 >> 61)
          sub_1BE61F930();
        v677 = v672 - (_QWORD)v673;
        if (v677 >> 2 > v676)
          v676 = v677 >> 2;
        if ((unint64_t)v677 >= 0x7FFFFFFFFFFFFFF8)
          v678 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v678 = v676;
        if (v678)
        {
          if (v678 >> 61)
            sub_1BE61F100();
          v679 = operator new(8 * v678);
          v680 = &v679[8 * v675];
          *v680 = *(_QWORD *)(v670 + 8 * v671);
          v668 = (uint64_t)(v680 + 1);
          v681 = v667 - v673;
          if (v667 != v673)
          {
LABEL_869:
            v682 = v681 - 8;
            if (v682 < 0x168
              || (v687 = (v667 - 8 - v673) & 0xFFFFFFFFFFFFFFF8, &v679[v674 - 8 - v687] > &v679[v674 - 8])
              || &v667[-v687 - 8] > v667 - 8
              || (unint64_t)(v667 - v679 - v674) < 0x20)
            {
              v683 = v667;
            }
            else
            {
              v688 = (v682 >> 3) + 1;
              v689 = 8 * (v688 & 0x3FFFFFFFFFFFFFFCLL);
              v683 = &v667[-v689];
              v680 = (_QWORD *)((char *)v680 - v689);
              v690 = &v679[8 * v675 - 16];
              v691 = v667 - 16;
              v692 = v688 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v693 = *(_OWORD *)v691;
                *(v690 - 1) = *((_OWORD *)v691 - 1);
                *v690 = v693;
                v690 -= 2;
                v691 -= 32;
                v692 -= 4;
              }
              while (v692);
              if (v688 == (v688 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_872:
                v685 = &v679[8 * v678];
                v588 = a2;
                *a2 = v680;
                a2[1] = v668;
                a2[2] = v685;
                if (!v673)
                  goto LABEL_858;
LABEL_876:
                operator delete(v673);
                v588 = a2;
                v665 = (char *)v740;
                v664 = v741;
                goto LABEL_858;
              }
            }
            do
            {
              v684 = *((_QWORD *)v683 - 1);
              v683 -= 8;
              *--v680 = v684;
            }
            while (v683 != v673);
            goto LABEL_872;
          }
        }
        else
        {
          v679 = 0;
          v680 = (_QWORD *)(8 * v675);
          *(_QWORD *)(8 * v675) = *(_QWORD *)(v670 + 8 * v671);
          v668 = 8 * v675 + 8;
          v681 = v667 - v673;
          if (v667 != v673)
            goto LABEL_869;
        }
        v686 = &v679[8 * v678];
        v588 = a2;
        *a2 = v680;
        a2[1] = v668;
        a2[2] = v686;
        if (v673)
          goto LABEL_876;
      }
LABEL_858:
      v588[1] = v668;
      ++v666;
      v667 = (char *)v668;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((v664 - v665) >> 3) > v666);
  }
  if ((_QWORD)v756)
    operator delete((void *)v756);
  if (*(_QWORD *)&v768.f64[0])
    operator delete(*(void **)&v768.f64[0]);
  if (*(_QWORD *)&v775.f64[0])
    operator delete(*(void **)&v775.f64[0]);
  if (v737)
    operator delete(v737);
  v694 = (char *)v740;
  if (v740)
  {
    v695 = v741;
    v696 = v740;
    if (v741 != v740)
    {
      do
      {
        v697 = (void *)*((_QWORD *)v695 - 3);
        if (v697)
        {
          *((_QWORD *)v695 - 2) = v697;
          operator delete(v697);
        }
        v698 = (void *)*((_QWORD *)v695 - 6);
        if (v698)
        {
          *((_QWORD *)v695 - 5) = v698;
          operator delete(v698);
        }
        v699 = (void *)*((_QWORD *)v695 - 9);
        if (v699)
        {
          *((_QWORD *)v695 - 8) = v699;
          operator delete(v699);
        }
        v695 -= 120;
      }
      while (v695 != v694);
      v696 = v740;
    }
    v741 = v694;
    operator delete(v696);
  }
  v700 = (char *)v747;
  if (v747)
  {
    v701 = v748;
    v702 = v747;
    if (v748 != v747)
    {
      do
      {
        v703 = (void *)*((_QWORD *)v701 - 3);
        if (v703)
        {
          *((_QWORD *)v701 - 2) = v703;
          operator delete(v703);
        }
        v704 = (void *)*((_QWORD *)v701 - 6);
        if (v704)
        {
          *((_QWORD *)v701 - 5) = v704;
          operator delete(v704);
        }
        v705 = (void *)*((_QWORD *)v701 - 9);
        if (v705)
        {
          *((_QWORD *)v701 - 8) = v705;
          operator delete(v705);
        }
        v701 -= 120;
      }
      while (v701 != v700);
      v702 = v747;
    }
    v748 = v700;
    operator delete(v702);
  }
  v706 = (Segment *)v765;
  if (v765)
  {
    v707 = v766;
    v708 = v765;
    if (v766 != v765)
    {
      do
      {
        v709 = (void *)*((_QWORD *)v707 - 3);
        if (v709)
        {
          *((_QWORD *)v707 - 2) = v709;
          operator delete(v709);
        }
        v710 = (void *)*((_QWORD *)v707 - 6);
        if (v710)
        {
          *((_QWORD *)v707 - 5) = v710;
          operator delete(v710);
        }
        v711 = (void *)*((_QWORD *)v707 - 9);
        if (v711)
        {
          *((_QWORD *)v707 - 8) = v711;
          operator delete(v711);
        }
        v707 = (Segment *)((char *)v707 - 120);
      }
      while (v707 != v706);
      v708 = v765;
    }
    v766 = v706;
    operator delete(v708);
  }
  v712 = (Segment *)v750;
  if (v750)
  {
    v713 = v751;
    v714 = v750;
    if (v751 != v750)
    {
      do
      {
        v715 = (void *)*((_QWORD *)v713 - 3);
        if (v715)
        {
          *((_QWORD *)v713 - 2) = v715;
          operator delete(v715);
        }
        v716 = (void *)*((_QWORD *)v713 - 6);
        if (v716)
        {
          *((_QWORD *)v713 - 5) = v716;
          operator delete(v716);
        }
        v717 = (void *)*((_QWORD *)v713 - 9);
        if (v717)
        {
          *((_QWORD *)v713 - 8) = v717;
          operator delete(v717);
        }
        v713 = (Segment *)((char *)v713 - 120);
      }
      while (v713 != v712);
      v714 = v750;
    }
    v751 = v712;
    operator delete(v714);
  }
  v718 = (Segment *)v753;
  if (v753)
  {
    v719 = v754;
    v720 = v753;
    if (v754 != v753)
    {
      do
      {
        v721 = (void *)*((_QWORD *)v719 - 3);
        if (v721)
        {
          *((_QWORD *)v719 - 2) = v721;
          operator delete(v721);
        }
        v722 = (void *)*((_QWORD *)v719 - 6);
        if (v722)
        {
          *((_QWORD *)v719 - 5) = v722;
          operator delete(v722);
        }
        v723 = (void *)*((_QWORD *)v719 - 9);
        if (v723)
        {
          *((_QWORD *)v719 - 8) = v723;
          operator delete(v723);
        }
        v719 = (Segment *)((char *)v719 - 120);
      }
      while (v719 != v718);
      v720 = v753;
    }
    v754 = v718;
    operator delete(v720);
  }

}

void sub_1BE6A18F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;

  if (__p)
    operator delete(__p);
  sub_1BE6A3930(&a29);
  sub_1BE6A3930(&a38);
  v64 = a62;
  if (a62)
  {
    v67 = a63;
    v68 = a62;
    if ((void *)a63 != a62)
    {
      do
      {
        v69 = *(void **)(v67 - 24);
        if (v69)
        {
          *(_QWORD *)(v67 - 16) = v69;
          operator delete(v69);
        }
        v70 = *(void **)(v67 - 48);
        if (v70)
        {
          *(_QWORD *)(v67 - 40) = v70;
          operator delete(v70);
        }
        v71 = *(void **)(v67 - 72);
        if (v71)
        {
          *(_QWORD *)(v67 - 64) = v71;
          operator delete(v71);
        }
        v67 -= 120;
      }
      while ((void *)v67 != v64);
      v68 = a62;
    }
    a63 = (uint64_t)v64;
    operator delete(v68);
    v65 = a41;
    if (!a41)
    {
LABEL_5:
      v66 = a44;
      if (!a44)
        goto LABEL_6;
      goto LABEL_29;
    }
  }
  else
  {
    v65 = a41;
    if (!a41)
      goto LABEL_5;
  }
  v72 = a42;
  v73 = v65;
  if ((void *)a42 != v65)
  {
    do
    {
      v74 = *(void **)(v72 - 24);
      if (v74)
      {
        *(_QWORD *)(v72 - 16) = v74;
        operator delete(v74);
      }
      v75 = *(void **)(v72 - 48);
      if (v75)
      {
        *(_QWORD *)(v72 - 40) = v75;
        operator delete(v75);
      }
      v76 = *(void **)(v72 - 72);
      if (v76)
      {
        *(_QWORD *)(v72 - 64) = v76;
        operator delete(v76);
      }
      v72 -= 120;
    }
    while ((void *)v72 != v65);
    v73 = a41;
  }
  a42 = (uint64_t)v65;
  operator delete(v73);
  v66 = a44;
  if (!a44)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_29:
  v77 = a45;
  v78 = v66;
  if ((void *)a45 != v66)
  {
    do
    {
      v79 = *(void **)(v77 - 24);
      if (v79)
      {
        *(_QWORD *)(v77 - 16) = v79;
        operator delete(v79);
      }
      v80 = *(void **)(v77 - 48);
      if (v80)
      {
        *(_QWORD *)(v77 - 40) = v80;
        operator delete(v80);
      }
      v81 = *(void **)(v77 - 72);
      if (v81)
      {
        *(_QWORD *)(v77 - 64) = v81;
        operator delete(v81);
      }
      v77 -= 120;
    }
    while ((void *)v77 != v66);
    v78 = a44;
  }
  a45 = (uint64_t)v66;
  operator delete(v78);

  _Unwind_Resume(a1);
}

void sub_1BE6A1F54(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t i;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char isEndOfStroke;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  BOOL v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t **v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  Network *v87;
  char *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  void *v92;
  void *v93;
  Network *v94;
  id v95;
  void *v96;
  unint64_t v97;
  unint64_t v98;
  void *__p;
  _OWORD *v100;
  uint64_t v101;
  void *v102;
  _QWORD *v103;
  _QWORD *v104;

  v3 = a1;
  v94 = (Network *)a2;
  sub_1BE66ADA4(a2);
  objc_msgSend_segments(v3, v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v97 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);
  v96 = v9;
  v19 = operator new(0x18uLL);
  *v19 = 0;
  v19[1] = 0;
  v19[2] = 0;
  v103 = v19 + 3;
  v104 = v19 + 3;
  v102 = v19;
  v95 = v3;
  if (v97)
  {
    for (i = 0; i != v97; ++i)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = v21 + i;
        v25 = v21 + i >= v97 || v23 > 3;
        if (v25 || v22 > 4)
          break;
        v28 = (_QWORD *)v19[1];
        v27 = v19[2];
        if ((unint64_t)v28 < v27)
        {
          *v28 = i;
          v28[1] = v24;
          v29 = v28 + 2;
          goto LABEL_33;
        }
        v30 = (_QWORD *)*v19;
        v31 = ((uint64_t)v28 - *v19) >> 4;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60)
          sub_1BE61F930();
        v33 = v27 - (_QWORD)v30;
        if (v33 >> 3 > v32)
          v32 = v33 >> 3;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
          v34 = 0xFFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 >> 60)
            sub_1BE61F100();
          v35 = (char *)operator new(16 * v34);
          v36 = &v35[16 * v31];
          *(_QWORD *)v36 = i;
          *((_QWORD *)v36 + 1) = v24;
          v37 = (uint64_t)v36;
          if (v28 == v30)
          {
LABEL_31:
            v29 = v36 + 16;
            *v19 = v37;
            v19[1] = v36 + 16;
            v19[2] = &v35[16 * v34];
            if (!v28)
              goto LABEL_33;
LABEL_32:
            operator delete(v28);
            goto LABEL_33;
          }
        }
        else
        {
          v35 = 0;
          v36 = (char *)(16 * v31);
          *(_QWORD *)v36 = i;
          *((_QWORD *)v36 + 1) = v24;
          v37 = 16 * v31;
          if (v28 == v30)
            goto LABEL_31;
        }
        do
        {
          *(_OWORD *)(v37 - 16) = *((_OWORD *)v28 - 1);
          v37 -= 16;
          v28 -= 2;
        }
        while (v28 != v30);
        v28 = (_QWORD *)*v19;
        v29 = v36 + 16;
        *v19 = v37;
        v19[1] = v36 + 16;
        v19[2] = &v35[16 * v34];
        if (v28)
          goto LABEL_32;
LABEL_33:
        v19[1] = v29;
        objc_msgSend_objectAtIndex_(v96, v15, v21 + i, v16, v17, v18);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend_strokeCount(v38, v39, v40, v41, v42, v43);
        objc_msgSend_startCutPoint(v38, v45, v46, v47, v48, v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend_isStartOfStroke(v50, v51, v52, v53, v54, v55) & 1) != 0)
        {
          objc_msgSend_endCutPoint(v38, v56, v57, v58, v59, v60);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          isEndOfStroke = objc_msgSend_isEndOfStroke(v61, v62, v63, v64, v65, v66);

          if ((isEndOfStroke & 1) != 0)
            goto LABEL_7;
        }
        else
        {

        }
        ++v22;
LABEL_7:
        v3 = v95;
        v23 += v44;

        ++v21;
      }
      while (v21 != 4);
    }
  }
  __p = 0;
  v100 = 0;
  v101 = 0;
  v98 = 0;
  v69 = (uint64_t **)((char *)v94 + 64);
  v68 = (uint64_t *)*((_QWORD *)v94 + 8);
  if (v68)
  {
    v70 = (uint64_t *)*((_QWORD *)v94 + 8);
    do
    {
      v71 = v70;
      v70 = (uint64_t *)*v70;
    }
    while (v70);
    if (v71 != (uint64_t *)v69 && !v71[4])
    {
      v72 = (uint64_t *)v71[1];
      if (v72)
      {
        do
        {
          v73 = v72;
          v72 = (uint64_t *)*v72;
        }
        while (v72);
      }
      else
      {
        v74 = v71;
        do
        {
          v73 = (uint64_t *)v74[2];
          v75 = *v73 == (_QWORD)v74;
          v74 = v73;
        }
        while (!v75);
      }
      if (*((uint64_t **)v94 + 7) == v71)
        *((_QWORD *)v94 + 7) = v73;
      --*((_QWORD *)v94 + 9);
      sub_1BE670DF8(v68, v71);
      operator delete(v71);
    }
  }
  *(_BYTE *)(*((_QWORD *)v94 + 4) + 32) = 0;
  v76 = sub_1BE69C498((uint64_t)v94, (uint64_t *)&v102, (uint64_t)&__p, (uint64_t *)&v98);
  v77 = *((_QWORD *)v94 + 4);
  v78 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v94 + 5) - v77) >> 3);
  if (v98 <= v78)
  {
    if (v98 < v78)
    {
      *((_QWORD *)v94 + 5) = v77 + 40 * v98;
      v79 = *v69;
      v80 = (uint64_t **)((char *)v94 + 64);
      if (*v69)
        goto LABEL_58;
      goto LABEL_62;
    }
  }
  else
  {
    sub_1BE66CE80((void **)v94 + 4, v98 - v78);
  }
  v79 = *v69;
  v80 = (uint64_t **)((char *)v94 + 64);
  if (!*v69)
  {
LABEL_62:
    v82 = (uint64_t *)operator new(0x28uLL);
    v82[4] = v76;
    *v82 = 0;
    v82[1] = 0;
    v82[2] = (uint64_t)v80;
    *v69 = v82;
    v83 = **((_QWORD **)v94 + 7);
    if (v83)
    {
      *((_QWORD *)v94 + 7) = v83;
      v82 = *v69;
    }
    sub_1BE61F5C0(*((uint64_t **)v94 + 8), v82);
    ++*((_QWORD *)v94 + 9);
    goto LABEL_65;
  }
  while (1)
  {
LABEL_58:
    while (1)
    {
      v80 = (uint64_t **)v79;
      v81 = v79[4];
      if (v81 <= v76)
        break;
      v79 = *v80;
      v69 = v80;
      if (!*v80)
        goto LABEL_62;
    }
    if (v81 >= v76)
      break;
    v79 = v80[1];
    if (!v79)
    {
      v69 = v80 + 1;
      goto LABEL_62;
    }
  }
LABEL_65:
  v84 = *((_QWORD *)v94 + 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)v94 + 5) - v84) >> 3) >= v76)
    *(_BYTE *)(v84 + 40 * v76 + 32) = 1;
  sub_1BE828388((uint64_t)v94, (uint64_t)&__p);
  v86 = __p;
  v85 = v100;
  v87 = v94;
  if (__p != v100)
  {
    v88 = (char *)*((_QWORD *)v94 + 11);
    do
    {
      if ((unint64_t)v88 < *((_QWORD *)v87 + 12))
      {
        *(_OWORD *)v88 = *v86;
        *((_OWORD *)v88 + 1) = v86[1];
        *((_OWORD *)v88 + 2) = v86[2];
        *((_OWORD *)v88 + 3) = v86[3];
        *((_QWORD *)v88 + 8) = *((_QWORD *)v86 + 8);
        v88 += 72;
      }
      else
      {
        v88 = sub_1BE66D0D0((char **)v94 + 10, (uint64_t)v86);
      }
      v87 = v94;
      *((_QWORD *)v94 + 11) = v88;
      v86 = (_OWORD *)((char *)v86 + 72);
    }
    while (v86 != v85);
  }
  Network::prepareNetwork(v87);
  if (__p)
  {
    v100 = __p;
    operator delete(__p);
  }

  v89 = (char *)v102;
  if (v102)
  {
    v90 = v103;
    if (v103 != v102)
    {
      v91 = (char *)v103;
      do
      {
        v93 = (void *)*((_QWORD *)v91 - 3);
        v91 -= 24;
        v92 = v93;
        if (v93)
        {
          *(v90 - 2) = v92;
          operator delete(v92);
        }
        v90 = v91;
      }
      while (v91 != v89);
    }
    operator delete(v89);
  }

}

void sub_1BE6A2470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  sub_1BE63CEBC(&a18);
  sub_1BE66A0DC(a10);

  _Unwind_Resume(a1);
}

void sub_1BE6A2510(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;

  v2 = a2;
  v3 = a1;
  v5 = (char *)*a2;
  v4 = (char *)a2[1];
  if ((unint64_t)v4 < a2[2])
  {
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    a2[1] = v4 + 24;
    v6 = *a1;
    if (a1[1] == *a1)
      return;
    goto LABEL_5;
  }
  a2[1] = sub_1BE6A3C70((char **)a2, 0, 0);
  v6 = *v3;
  if (v3[1] != *v3)
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v25 = v9;
    v26 = v2;
    while (1)
    {
      v11 = v8 + ((uint64_t)(*(_QWORD *)(v6 + 120 * v7 + 56) - *(_QWORD *)(v6 + 120 * v7 + 48)) >> 3);
      v12 = v11 - 1;
      v13 = (uint64_t *)(*v2 + 24 * v9);
      v15 = v13 + 1;
      v14 = (_QWORD *)v13[1];
      v16 = v13[2];
      if ((unint64_t)v14 >= v16)
        break;
      *v14 = v8;
      v14[1] = v12;
      v10 = v14 + 2;
LABEL_7:
      *v15 = v10;
      ++v7;
      v6 = *v3;
      v8 = v11;
      if (v7 >= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v3[1] - *v3) >> 3))
        return;
    }
    v17 = v3;
    v18 = (_QWORD *)*v13;
    v19 = ((uint64_t)v14 - *v13) >> 4;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
      sub_1BE61F930();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 3 > v20)
      v20 = v21 >> 3;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    v27 = v20;
    v28 = v11;
    if (v20)
    {
      if (v20 >> 60)
        sub_1BE61F100();
      v22 = (char *)operator new(16 * v20);
      v23 = &v22[16 * v19];
      *(_QWORD *)v23 = v8;
      *((_QWORD *)v23 + 1) = v12;
      v24 = (uint64_t)v23;
      v3 = v17;
      if (v14 == v18)
        goto LABEL_21;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(16 * v19);
      *(_QWORD *)v23 = v8;
      *((_QWORD *)v23 + 1) = v12;
      v24 = 16 * v19;
      v3 = v17;
      if (v14 == v18)
      {
LABEL_21:
        v2 = v26;
        *v13 = v24;
        v10 = v23 + 16;
        *v15 = v23 + 16;
        v13[2] = (uint64_t)&v22[16 * v27];
        if (v14)
          operator delete(v14);
        v9 = v25;
        v11 = v28;
        goto LABEL_7;
      }
    }
    do
    {
      *(_OWORD *)(v24 - 16) = *((_OWORD *)v14 - 1);
      v24 -= 16;
      v14 -= 2;
    }
    while (v14 != v18);
    v14 = (_QWORD *)*v13;
    goto LABEL_21;
  }
}

void sub_1BE6A2734(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  Segment *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const Segment *v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  _BYTE *v35;
  char *v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  _BYTE *v48;
  char *v49;
  size_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  void *v59;
  _BYTE *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  char *v70;
  _BYTE *v71;
  char *v72;
  size_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  char *v81;
  void *v82;
  uint64_t v83;
  double *v84;
  const Segment *v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  double v98;
  double v99;
  const Segment *v100;
  double *v101;
  double v102;
  double v103;
  BOOL v104;
  float v105;
  BOOL v106;
  char v107;
  unint64_t v108;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void *v115[2];
  void *v116[2];
  __int128 v117;
  void *v118[2];
  char *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  void *__p[2];
  void *__dst[2];
  __int128 v125;
  void *v126[2];
  char *v127;

  v127 = 0;
  v125 = 0u;
  *(_OWORD *)v126 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)__dst = 0u;
  v121 = 0u;
  v122 = 0u;
  v120 = 0u;
  v119 = 0;
  v117 = 0u;
  *(_OWORD *)v118 = 0u;
  *(_OWORD *)v115 = 0u;
  *(_OWORD *)v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v112 = 0u;
  v3 = *a1;
  if (a1[1] == *a1)
    goto LABEL_185;
  v5 = 0;
  v6 = (double)(int)a3;
  while (2)
  {
    v8 = 0;
    v9 = (int)v5;
    v10 = 120 * (int)v5;
    v11 = (v5 << 32) + 0x100000000;
    do
    {
      v110 = v11;
      v111 = v9;
      v12 = (const Segment *)(v3 + v10);
      if ((v8 & 1) != 0)
      {
        Segment::mergeIntoSegment((Segment *)&v120, v12);
        Segment::mergeIntoSegment((Segment *)&v112, (const Segment *)(*a1 + v10));
        goto LABEL_134;
      }
      v120 = *(_OWORD *)v12;
      v121 = *((_OWORD *)v12 + 1);
      v122 = *((_OWORD *)v12 + 2);
      if (v12 != (const Segment *)&v120)
      {
        v14 = *(char **)(v3 + v10 + 48);
        v13 = *(_BYTE **)(v3 + v10 + 56);
        v15 = v13 - v14;
        v16 = (v13 - v14) >> 3;
        v17 = (uint64_t)__dst[0];
        v18 = (char *)__p[0];
        if (v16 <= ((char *)__dst[0] - (char *)__p[0]) >> 3)
        {
          v22 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          if (v22 >= v16)
          {
            if (v13 != v14)
              memmove(__p[0], *(const void **)(v3 + v10 + 48), v13 - v14);
          }
          else
          {
            if (__p[1] != __p[0])
            {
              memmove(__p[0], *(const void **)(v3 + v10 + 48), (char *)__p[1] - (char *)__p[0]);
              v18 = (char *)__p[1];
            }
            v23 = &v14[8 * v22];
            v15 = v13 - v23;
            if (v13 != v23)
              memmove(v18, v23, v13 - v23);
          }
        }
        else
        {
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
            v17 = 0;
            __p[0] = 0;
            __p[1] = 0;
            __dst[0] = 0;
          }
          if (v15 < 0)
            goto LABEL_197;
          v19 = v17 >> 2;
          if (v17 >> 2 <= v16)
            v19 = (v13 - v14) >> 3;
          v20 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v19;
          if (v20 >> 61)
LABEL_197:
            sub_1BE61F930();
          v21 = (char *)operator new(8 * v20);
          v18 = v21;
          __p[0] = v21;
          __p[1] = v21;
          __dst[0] = &v21[8 * v20];
          if (v13 != v14)
            memcpy(v21, v14, v13 - v14);
        }
        __p[1] = &v18[v15];
        v25 = *(char **)(v3 + v10 + 72);
        v24 = *(_BYTE **)(v3 + v10 + 80);
        v26 = v24 - v25;
        v27 = (v24 - v25) >> 2;
        v28 = *((_QWORD *)&v125 + 1);
        v29 = (char *)__dst[1];
        if (v27 <= (uint64_t)(*((_QWORD *)&v125 + 1) - (unint64_t)__dst[1]) >> 2)
        {
          v33 = (uint64_t)(v125 - (unint64_t)__dst[1]) >> 2;
          if (v33 >= v27)
          {
            if (v24 != v25)
              memmove(__dst[1], *(const void **)(v3 + v10 + 72), v24 - v25);
          }
          else
          {
            if ((void *)v125 != __dst[1])
            {
              memmove(__dst[1], *(const void **)(v3 + v10 + 72), v125 - (unint64_t)__dst[1]);
              v29 = (char *)v125;
            }
            v34 = &v25[4 * v33];
            v26 = v24 - v34;
            if (v24 != v34)
              memmove(v29, v34, v24 - v34);
          }
        }
        else
        {
          if (__dst[1])
          {
            *(void **)&v125 = __dst[1];
            operator delete(__dst[1]);
            v28 = 0;
            __dst[1] = 0;
            v125 = 0uLL;
          }
          if (v26 < 0)
            goto LABEL_196;
          v30 = v28 >> 1;
          if (v28 >> 1 <= v27)
            v30 = (v24 - v25) >> 2;
          v31 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v30;
          if (v31 >> 62)
LABEL_196:
            sub_1BE61F930();
          v32 = (char *)operator new(4 * v31);
          v29 = v32;
          __dst[1] = v32;
          *(_QWORD *)&v125 = v32;
          *((_QWORD *)&v125 + 1) = &v32[4 * v31];
          if (v24 != v25)
            memcpy(v32, v25, v24 - v25);
        }
        *(_QWORD *)&v125 = &v29[v26];
        v36 = *(char **)(v3 + v10 + 96);
        v35 = *(_BYTE **)(v3 + v10 + 104);
        v37 = v35 - v36;
        v38 = (v35 - v36) >> 2;
        v39 = (uint64_t)v127;
        v40 = (char *)v126[0];
        if (v38 > (v127 - (char *)v126[0]) >> 2)
        {
          if (v126[0])
          {
            v126[1] = v126[0];
            operator delete(v126[0]);
            v39 = 0;
            v126[0] = 0;
            v126[1] = 0;
            v127 = 0;
          }
          if ((v37 & 0x8000000000000000) != 0)
            goto LABEL_196;
          v41 = v39 >> 1;
          if (v39 >> 1 <= v38)
            v41 = (v35 - v36) >> 2;
          v42 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v41;
          if (v42 >> 62)
            goto LABEL_196;
          v43 = (char *)operator new(4 * v42);
          v40 = v43;
          v126[0] = v43;
          v126[1] = v43;
          v127 = &v43[4 * v42];
          if (v35 != v36)
            memcpy(v43, v36, v35 - v36);
          goto LABEL_71;
        }
        v44 = ((char *)v126[1] - (char *)v126[0]) >> 2;
        if (v44 >= v38)
        {
          if (v35 == v36)
          {
LABEL_71:
            v126[1] = &v40[v37];
            v3 = *a1;
            goto LABEL_72;
          }
          v46 = v126[0];
          v45 = v36;
        }
        else
        {
          if (v126[1] != v126[0])
          {
            memmove(v126[0], v36, (char *)v126[1] - (char *)v126[0]);
            v40 = (char *)v126[1];
          }
          v45 = &v36[4 * v44];
          v37 = v35 - v45;
          if (v35 == v45)
            goto LABEL_71;
          v46 = v40;
        }
        memmove(v46, v45, v37);
        goto LABEL_71;
      }
LABEL_72:
      v47 = v3 + v10;
      v112 = *(_OWORD *)(v3 + v10);
      v113 = *(_OWORD *)(v3 + v10 + 16);
      v114 = *(_OWORD *)(v3 + v10 + 32);
      if ((__int128 *)(v3 + v10) == &v112)
        goto LABEL_134;
      v49 = *(char **)(v47 + 48);
      v48 = *(_BYTE **)(v47 + 56);
      v50 = v48 - v49;
      v51 = (v48 - v49) >> 3;
      v52 = (uint64_t)v116[0];
      v53 = (char *)v115[0];
      if (v51 <= ((char *)v116[0] - (char *)v115[0]) >> 3)
      {
        v57 = ((char *)v115[1] - (char *)v115[0]) >> 3;
        if (v57 >= v51)
        {
          if (v48 == v49)
            goto LABEL_93;
          v59 = v115[0];
          v58 = v49;
        }
        else
        {
          if (v115[1] != v115[0])
          {
            memmove(v115[0], v49, (char *)v115[1] - (char *)v115[0]);
            v53 = (char *)v115[1];
          }
          v58 = &v49[8 * v57];
          v50 = v48 - v58;
          if (v48 == v58)
            goto LABEL_93;
          v59 = v53;
        }
        memmove(v59, v58, v50);
        goto LABEL_93;
      }
      if (v115[0])
      {
        v115[1] = v115[0];
        operator delete(v115[0]);
        v52 = 0;
        v115[0] = 0;
        v115[1] = 0;
        v116[0] = 0;
      }
      if ((v50 & 0x8000000000000000) != 0)
        goto LABEL_197;
      v54 = v52 >> 2;
      if (v52 >> 2 <= v51)
        v54 = (v48 - v49) >> 3;
      v55 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v54;
      if (v55 >> 61)
        goto LABEL_197;
      v56 = (char *)operator new(8 * v55);
      v53 = v56;
      v115[0] = v56;
      v115[1] = v56;
      v116[0] = &v56[8 * v55];
      if (v48 != v49)
        memcpy(v56, v49, v48 - v49);
LABEL_93:
      v115[1] = &v53[v50];
      v61 = *(char **)(v3 + v10 + 72);
      v60 = *(_BYTE **)(v3 + v10 + 80);
      v62 = v60 - v61;
      v63 = (v60 - v61) >> 2;
      v64 = *((_QWORD *)&v117 + 1);
      v65 = (char *)v116[1];
      if (v63 <= (uint64_t)(*((_QWORD *)&v117 + 1) - (unint64_t)v116[1]) >> 2)
      {
        v69 = (uint64_t)(v117 - (unint64_t)v116[1]) >> 2;
        if (v69 >= v63)
        {
          if (v60 != v61)
            memmove(v116[1], *(const void **)(v3 + v10 + 72), v60 - v61);
        }
        else
        {
          if ((void *)v117 != v116[1])
          {
            memmove(v116[1], *(const void **)(v3 + v10 + 72), v117 - (unint64_t)v116[1]);
            v65 = (char *)v117;
          }
          v70 = &v61[4 * v69];
          v62 = v60 - v70;
          if (v60 != v70)
            memmove(v65, v70, v60 - v70);
        }
      }
      else
      {
        if (v116[1])
        {
          *(void **)&v117 = v116[1];
          operator delete(v116[1]);
          v64 = 0;
          v116[1] = 0;
          v117 = 0uLL;
        }
        if (v62 < 0)
          goto LABEL_196;
        v66 = v64 >> 1;
        if (v64 >> 1 <= v63)
          v66 = (v60 - v61) >> 2;
        v67 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v66;
        if (v67 >> 62)
          goto LABEL_196;
        v68 = (char *)operator new(4 * v67);
        v65 = v68;
        v116[1] = v68;
        *(_QWORD *)&v117 = v68;
        *((_QWORD *)&v117 + 1) = &v68[4 * v67];
        if (v60 != v61)
          memcpy(v68, v61, v60 - v61);
      }
      *(_QWORD *)&v117 = &v65[v62];
      v72 = *(char **)(v3 + v10 + 96);
      v71 = *(_BYTE **)(v3 + v10 + 104);
      v73 = v71 - v72;
      v74 = (v71 - v72) >> 2;
      v75 = (uint64_t)v119;
      v76 = (char *)v118[0];
      if (v74 > (v119 - (char *)v118[0]) >> 2)
      {
        if (v118[0])
        {
          v118[1] = v118[0];
          operator delete(v118[0]);
          v75 = 0;
          v118[0] = 0;
          v118[1] = 0;
          v119 = 0;
        }
        if ((v73 & 0x8000000000000000) != 0)
          goto LABEL_196;
        v77 = v75 >> 1;
        if (v75 >> 1 <= v74)
          v77 = (v71 - v72) >> 2;
        v78 = (unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v77;
        if (v78 >> 62)
          goto LABEL_196;
        v79 = (char *)operator new(4 * v78);
        v76 = v79;
        v118[0] = v79;
        v118[1] = v79;
        v119 = &v79[4 * v78];
        if (v71 != v72)
          memcpy(v79, v72, v71 - v72);
        goto LABEL_133;
      }
      v80 = ((char *)v118[1] - (char *)v118[0]) >> 2;
      if (v80 < v74)
      {
        if (v118[1] != v118[0])
        {
          memmove(v118[0], v72, (char *)v118[1] - (char *)v118[0]);
          v76 = (char *)v118[1];
        }
        v81 = &v72[4 * v80];
        v73 = v71 - v81;
        if (v71 == v81)
          goto LABEL_133;
        v82 = v76;
        goto LABEL_132;
      }
      if (v71 != v72)
      {
        v82 = v118[0];
        v81 = v72;
LABEL_132:
        memmove(v82, v81, v73);
      }
LABEL_133:
      v118[1] = &v76[v73];
LABEL_134:
      v9 = v111 + 1;
      v83 = *a1;
      if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) <= v111 + 1)
        goto LABEL_6;
      v84 = (double *)(v83 + v10);
      v85 = (const Segment *)(v83 + v10 + 120);
      v86 = *(double *)v85;
      if (*(double *)v85 >= 1.0)
        v87 = *(double *)(v83 + v10 + 120);
      else
        v87 = 1.0;
      if (*(double *)(v83 + v10) >= 1.0)
        v88 = *(double *)(v83 + v10);
      else
        v88 = 1.0;
      v89 = v84[17];
      v90 = v84[2];
      if (v89 >= v90)
        v91 = v83 + v10;
      else
        v91 = v83 + v10 + 120;
      if (v89 >= v90)
      {
        v92 = v83 + v10 + 120;
      }
      else
      {
        v86 = *(double *)(v83 + v10);
        v92 = v83 + v10;
      }
      v93 = *(double *)(v92 + 32);
      v94 = *(double *)(v91 + 32);
      v95 = v86;
      if (v93 >= v94)
      {
        v95 = v94 - (*(double *)(v92 + 16) - v6);
        if (v95 < 0.0)
          v95 = 0.0;
      }
      if (v88 < v87)
        v87 = v88;
      v96 = v95 / v87;
      if (v96 > 0.4)
      {
        v8 = 1;
        goto LABEL_173;
      }
      v97 = v83 + v10;
      v98 = *(double *)(v97 + 144);
      v99 = *(double *)(v97 + 24);
      if (v98 >= v99)
        v100 = (const Segment *)v84;
      else
        v100 = v85;
      if (v98 >= v99)
        v101 = (double *)v85;
      else
        v101 = v84;
      v102 = *((double *)v100 + 5);
      if (v101[5] >= v102)
      {
        v103 = v102 - v101[3];
        if (v103 < 0.0)
          v103 = 0.0;
        if (v93 < v94)
          goto LABEL_168;
LABEL_166:
        v86 = v94 - (*(double *)(v92 + 16) + -5.0);
        if (v86 < 0.0)
          v86 = 0.0;
        goto LABEL_168;
      }
      v103 = v101[1];
      if (v93 >= v94)
        goto LABEL_166;
LABEL_168:
      v104 = v96 > 0.2;
      if (v103 <= 0.0)
        v104 = 0;
      v8 = v86 > 0.0 && v104;
LABEL_173:
      Segment::mergeIntoSegment((Segment *)&v112, v85);
      if (v111 < 1)
      {
LABEL_6:
        if ((v8 & 1) == 0)
          break;
        goto LABEL_7;
      }
      v105 = *(double *)&v112 / (*((double *)&v112 + 1) + 1.0);
      v106 = v105 > 1.6 && (void *)((char *)__p[1] - (char *)__p[0]) >= (void *)9;
      v107 = v106 ? 0 : v8;
      if ((v107 & 1) == 0)
        break;
LABEL_7:
      v3 = *a1;
      v10 += 120;
      v11 = v110 + 0x100000000;
      v8 = 1;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) > v9);
    v108 = *(_QWORD *)(a2 + 8);
    if (v108 >= *(_QWORD *)(a2 + 16))
    {
      v7 = sub_1BE6A39C0((Segment **)a2, (const Segment *)&v120);
    }
    else
    {
      Segment::Segment(*(Segment **)(a2 + 8), (const Segment *)&v120);
      v7 = (Segment *)(v108 + 120);
      *(_QWORD *)(a2 + 8) = v108 + 120;
    }
    v5 = v111 + 1;
    *(_QWORD *)(a2 + 8) = v7;
    v3 = *a1;
    if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) > v110 >> 32)
      continue;
    break;
  }
  if (v118[0])
  {
    v118[1] = v118[0];
    operator delete(v118[0]);
  }
LABEL_185:
  if (v116[1])
  {
    *(void **)&v117 = v116[1];
    operator delete(v116[1]);
  }
  if (v115[0])
  {
    v115[1] = v115[0];
    operator delete(v115[0]);
  }
  if (v126[0])
  {
    v126[1] = v126[0];
    operator delete(v126[0]);
  }
  if (__dst[1])
  {
    *(void **)&v125 = __dst[1];
    operator delete(__dst[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1BE6A31B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_1BE69AFBC(&a19);
  sub_1BE69AFBC(&a35);
  _Unwind_Resume(a1);
}

void sub_1BE6A31F8(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  unint64_t v6;
  int v7;
  double v8;
  double v9;
  char *v10;
  char *v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  char *v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  void *v39;
  char *v40;
  char *v41;
  size_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  void *v51;
  char *v52;
  char *v53;
  size_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  void *v63;
  uint64_t v64;
  Segment *v65;
  int v66;
  Segment *v67;
  int v69;
  double v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  void *v74;
  char *v75;
  void *v76;
  char *v77;
  void *v78;
  char *v79;
  _OWORD v80[3];
  __int128 __p;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;

  v3 = *a1;
  if (a1[1] != *a1)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v85 = 0;
      v83 = 0u;
      v84 = 0u;
      __p = 0u;
      v82 = 0u;
      memset(v80, 0, sizeof(v80));
      Segment::Segment((Segment *)&v70, (const Segment *)(v3 + 120 * v6));
      v8 = vabdd_f64(v70, a3);
      v9 = 100000.0;
      if (v8 >= 100000.0)
        goto LABEL_26;
      *(_OWORD *)((char *)v80 + 8) = v71;
      *(_OWORD *)((char *)&v80[1] + 8) = v72;
      *(double *)v80 = v70;
      *((_QWORD *)&v80[2] + 1) = v73;
      v11 = (char *)v74;
      v10 = v75;
      v12 = v75 - (_BYTE *)v74;
      v13 = (v75 - (_BYTE *)v74) >> 3;
      v14 = v82;
      v15 = (char *)__p;
      if (v13 > (uint64_t)(v82 - __p) >> 3)
      {
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
          v14 = 0;
          __p = 0uLL;
          *(_QWORD *)&v82 = 0;
        }
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_109;
        v16 = v14 >> 2;
        if (v14 >> 2 <= v13)
          v16 = v13;
        v17 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v16;
        if (v17 >> 61)
LABEL_109:
          sub_1BE61F930();
        v18 = (char *)operator new(8 * v17);
        v15 = v18;
        *(_QWORD *)&__p = v18;
        *((_QWORD *)&__p + 1) = v18;
        *(_QWORD *)&v82 = &v18[8 * v17];
        if (v10 != v11)
          memcpy(v18, v11, v12);
        goto LABEL_25;
      }
      v19 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
      if (v19 < v13)
        break;
      if (v75 != v74)
      {
        v21 = (void *)__p;
        v20 = (char *)v74;
LABEL_24:
        memmove(v21, v20, v12);
      }
LABEL_25:
      *((_QWORD *)&__p + 1) = &v15[v12];
      sub_1BE66E294((_QWORD *)&v82 + 1, (char *)v76, v77, (v77 - (_BYTE *)v76) >> 2);
      sub_1BE66E294(&v84, (char *)v78, v79, (v79 - (_BYTE *)v78) >> 2);
      v9 = v8;
LABEL_26:
      v69 = v7;
      v22 = v7;
      v23 = *a1;
      if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) > v7 + 1)
      {
        v24 = 0;
        v25 = 120 * v7 + 120;
        v26 = 1;
        while (2)
        {
          Segment::mergeIntoSegment((Segment *)&v70, (const Segment *)(v23 + v25));
          v27 = vabdd_f64(v70, a3);
          if (v27 >= v9)
            goto LABEL_90;
          *(_OWORD *)((char *)v80 + 8) = v71;
          *(_OWORD *)((char *)&v80[1] + 8) = v72;
          *(double *)v80 = v70;
          *((_QWORD *)&v80[2] + 1) = v73;
          v29 = (char *)v74;
          v28 = v75;
          v30 = v75 - (_BYTE *)v74;
          v31 = (v75 - (_BYTE *)v74) >> 3;
          v32 = v82;
          v33 = (char *)__p;
          if (v31 <= (uint64_t)(v82 - __p) >> 3)
          {
            v37 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
            if (v37 >= v31)
            {
              if (v75 == v74)
                goto LABEL_49;
              v39 = (void *)__p;
              v38 = (char *)v74;
            }
            else
            {
              if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
              {
                memmove((void *)__p, v74, *((_QWORD *)&__p + 1) - __p);
                v33 = (char *)*((_QWORD *)&__p + 1);
              }
              v38 = &v29[8 * v37];
              v30 = v28 - v38;
              if (v28 == v38)
                goto LABEL_49;
              v39 = v33;
            }
            memmove(v39, v38, v30);
            goto LABEL_49;
          }
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
            v32 = 0;
            __p = 0uLL;
            *(_QWORD *)&v82 = 0;
          }
          if ((v30 & 0x8000000000000000) != 0)
            goto LABEL_109;
          v34 = v32 >> 2;
          if (v32 >> 2 <= v31)
            v34 = v31;
          v35 = (unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v34;
          if (v35 >> 61)
            goto LABEL_109;
          v36 = (char *)operator new(8 * v35);
          v33 = v36;
          *(_QWORD *)&__p = v36;
          *((_QWORD *)&__p + 1) = v36;
          *(_QWORD *)&v82 = &v36[8 * v35];
          if (v28 != v29)
            memcpy(v36, v29, v30);
LABEL_49:
          *((_QWORD *)&__p + 1) = &v33[v30];
          v41 = (char *)v76;
          v40 = v77;
          v42 = v77 - (_BYTE *)v76;
          v43 = (v77 - (_BYTE *)v76) >> 2;
          v44 = *((_QWORD *)&v83 + 1);
          v45 = (char *)*((_QWORD *)&v82 + 1);
          if (v43 <= (uint64_t)(*((_QWORD *)&v83 + 1) - *((_QWORD *)&v82 + 1)) >> 2)
          {
            v49 = (uint64_t)(v83 - *((_QWORD *)&v82 + 1)) >> 2;
            if (v49 >= v43)
            {
              if (v77 == v76)
                goto LABEL_69;
              v51 = (void *)*((_QWORD *)&v82 + 1);
              v50 = (char *)v76;
            }
            else
            {
              if ((_QWORD)v83 != *((_QWORD *)&v82 + 1))
              {
                memmove(*((void **)&v82 + 1), v76, v83 - *((_QWORD *)&v82 + 1));
                v45 = (char *)v83;
              }
              v50 = &v41[4 * v49];
              v42 = v40 - v50;
              if (v40 == v50)
                goto LABEL_69;
              v51 = v45;
            }
            memmove(v51, v50, v42);
            goto LABEL_69;
          }
          if (*((_QWORD *)&v82 + 1))
          {
            *(_QWORD *)&v83 = *((_QWORD *)&v82 + 1);
            operator delete(*((void **)&v82 + 1));
            v44 = 0;
            *((_QWORD *)&v82 + 1) = 0;
            v83 = 0uLL;
          }
          if ((v42 & 0x8000000000000000) != 0)
            goto LABEL_110;
          v46 = v44 >> 1;
          if (v44 >> 1 <= v43)
            v46 = v43;
          v47 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v46;
          if (v47 >> 62)
LABEL_110:
            sub_1BE61F930();
          v48 = (char *)operator new(4 * v47);
          v45 = v48;
          *((_QWORD *)&v82 + 1) = v48;
          *(_QWORD *)&v83 = v48;
          *((_QWORD *)&v83 + 1) = &v48[4 * v47];
          if (v40 != v41)
            memcpy(v48, v41, v42);
LABEL_69:
          *(_QWORD *)&v83 = &v45[v42];
          v53 = (char *)v78;
          v52 = v79;
          v54 = v79 - (_BYTE *)v78;
          v55 = (v79 - (_BYTE *)v78) >> 2;
          v56 = (uint64_t)v85;
          v57 = (char *)v84;
          if (v55 > (uint64_t)&v85[-v84] >> 2)
          {
            if ((_QWORD)v84)
            {
              *((_QWORD *)&v84 + 1) = v84;
              operator delete((void *)v84);
              v56 = 0;
              v84 = 0uLL;
              v85 = 0;
            }
            if ((v54 & 0x8000000000000000) != 0)
              goto LABEL_110;
            v58 = v56 >> 1;
            if (v56 >> 1 <= v55)
              v58 = v55;
            v59 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v58;
            if (v59 >> 62)
              goto LABEL_110;
            v60 = (char *)operator new(4 * v59);
            v57 = v60;
            *(_QWORD *)&v84 = v60;
            *((_QWORD *)&v84 + 1) = v60;
            v85 = &v60[4 * v59];
            if (v52 != v53)
              memcpy(v60, v53, v54);
LABEL_89:
            *((_QWORD *)&v84 + 1) = &v57[v54];
            v24 = v26;
            v9 = v27;
LABEL_90:
            if (v26 == 7 || (++v26, v23 = *a1, v25 += 120, 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) <= v22 + v26))
            {
              v64 = a2;
              v65 = *(Segment **)(a2 + 8);
              if ((unint64_t)v65 < *(_QWORD *)(a2 + 16))
                goto LABEL_93;
LABEL_95:
              v67 = sub_1BE6A39C0((Segment **)v64, (const Segment *)v80);
              v66 = v69;
              goto LABEL_96;
            }
            continue;
          }
          break;
        }
        v61 = (uint64_t)(*((_QWORD *)&v84 + 1) - v84) >> 2;
        if (v61 >= v55)
        {
          if (v79 == v78)
            goto LABEL_89;
          v63 = (void *)v84;
          v62 = (char *)v78;
        }
        else
        {
          if (*((_QWORD *)&v84 + 1) != (_QWORD)v84)
          {
            memmove((void *)v84, v78, *((_QWORD *)&v84 + 1) - v84);
            v57 = (char *)*((_QWORD *)&v84 + 1);
          }
          v62 = &v53[4 * v61];
          v54 = v52 - v62;
          if (v52 == v62)
            goto LABEL_89;
          v63 = v57;
        }
        memmove(v63, v62, v54);
        goto LABEL_89;
      }
      v24 = 0;
      v64 = a2;
      v65 = *(Segment **)(a2 + 8);
      if ((unint64_t)v65 >= *(_QWORD *)(a2 + 16))
        goto LABEL_95;
LABEL_93:
      Segment::Segment(v65, (const Segment *)v80);
      v66 = v69;
      v67 = (Segment *)((char *)v65 + 120);
      *(_QWORD *)(v64 + 8) = (char *)v65 + 120;
LABEL_96:
      *(_QWORD *)(v64 + 8) = v67;
      if (v78)
      {
        v79 = (char *)v78;
        operator delete(v78);
      }
      if (v76)
      {
        v77 = (char *)v76;
        operator delete(v76);
      }
      if (v74)
      {
        v75 = (char *)v74;
        operator delete(v74);
      }
      if ((_QWORD)v84)
      {
        *((_QWORD *)&v84 + 1) = v84;
        operator delete((void *)v84);
      }
      if (*((_QWORD *)&v82 + 1))
      {
        *(_QWORD *)&v83 = *((_QWORD *)&v82 + 1);
        operator delete(*((void **)&v82 + 1));
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v6 = v66 + v24 + 1;
      v3 = *a1;
      v7 = v66 + v24 + 1;
      if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3) <= v6)
        return;
    }
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      memmove((void *)__p, v74, *((_QWORD *)&__p + 1) - __p);
      v15 = (char *)*((_QWORD *)&__p + 1);
    }
    v20 = &v11[8 * v19];
    v12 = v10 - v20;
    if (v10 == v20)
      goto LABEL_25;
    v21 = v15;
    goto LABEL_24;
  }
}

void sub_1BE6A38CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_1BE69AFBC(&a14);
  sub_1BE69AFBC(&a29);
  _Unwind_Resume(a1);
}

void **sub_1BE6A3930(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v3 - 9);
        if (v7)
        {
          *((_QWORD *)v3 - 8) = v7;
          operator delete(v7);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

Segment *sub_1BE6A39C0(Segment **a1, const Segment *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  Segment *v8;
  Segment *v9;
  Segment *v10;
  uint64_t v11;
  Segment *v12;
  Segment *v13;
  void *v14;
  void *v15;
  void *v16;
  Segment *v18;
  Segment *v19;

  v2 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x222222222222222)
    sub_1BE61F930();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x222222222222222)
      sub_1BE61F100();
    v7 = (char *)operator new(120 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (Segment *)&v7[120 * v2];
  v19 = (Segment *)&v7[120 * v6];
  Segment::Segment(v18, a2);
  v8 = (Segment *)((char *)v18 + 120);
  v10 = *a1;
  v9 = a1[1];
  if (v9 == *a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = v19;
  }
  else
  {
    v11 = 0;
    do
    {
      Segment::Segment((Segment *)((char *)v18 + v11 - 120), (Segment *)((char *)v9 + v11 - 120));
      v11 -= 120;
    }
    while ((Segment *)((char *)v9 + v11) != v10);
    v12 = *a1;
    v9 = a1[1];
    v13 = (Segment *)((char *)v18 + v11);
    v8 = (Segment *)((char *)v18 + 120);
    *a1 = v13;
    a1[1] = (Segment *)((char *)v18 + 120);
    a1[2] = v19;
    if (v9 != v12)
    {
      do
      {
        v14 = (void *)*((_QWORD *)v9 - 3);
        if (v14)
        {
          *((_QWORD *)v9 - 2) = v14;
          operator delete(v14);
        }
        v15 = (void *)*((_QWORD *)v9 - 6);
        if (v15)
        {
          *((_QWORD *)v9 - 5) = v15;
          operator delete(v15);
        }
        v16 = (void *)*((_QWORD *)v9 - 9);
        if (v16)
        {
          *((_QWORD *)v9 - 8) = v16;
          operator delete(v16);
        }
        v9 = (Segment *)((char *)v9 - 120);
      }
      while (v9 != v12);
      v9 = v12;
    }
  }
  if (v9)
    operator delete(v9);
  return v8;
}

void sub_1BE6A3B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE6A3BEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE6A3B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  if (v2)
  {
    v5 = v3 + 104;
    do
    {
      v6 = *(void **)(v5 + v2 - 8);
      if (v6)
      {
        *(_QWORD *)(v5 + v2) = v6;
        operator delete(v6);
      }
      v7 = *(void **)(v5 + v2 - 32);
      if (v7)
      {
        *(_QWORD *)(v5 + v2 - 24) = v7;
        operator delete(v7);
      }
      v8 = *(void **)(v5 + v2 - 56);
      if (v8)
      {
        *(_QWORD *)(v5 + v2 - 48) = v8;
        operator delete(v8);
      }
      v2 += 120;
    }
    while (v2);
  }
  sub_1BE6A3BEC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6A3BEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(i - 72);
    if (v6)
    {
      *(_QWORD *)(i - 64) = v6;
      operator delete(v6);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_1BE6A3C70(char **a1, const void *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F930();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F100();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v5];
  v13 = &v11[24 * v10];
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)&v25 + 1) = v13;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = 0;
  v14 = a3 - (_QWORD)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_1BE61F930();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v12 = v15;
    *((_QWORD *)v12 + 2) = &v15[16 * (v14 >> 4)];
    v16 = v14 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v15, a2, v16);
    *((_QWORD *)v12 + 1) = &v15[v16];
  }
  v17 = v12 + 24;
  *(_QWORD *)&v25 = v12 + 24;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v18 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v3)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_1BE6A3E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_1BE63E4E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BE6A3E70(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_1BE61F100();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      sub_1BE6A4410((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    sub_1BE6A459C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_1BE61F100();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_1BE61F100();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_1BE6A43B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6A43CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6A43E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6A43F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6A4410(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_1BE61F100();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_1BE6A459C(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_1BE61F100();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_1BE6A4734(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_1BE61F930();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_1BE61F100();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

id *sub_1BE6A4994(void *a1, void *a2, unint64_t a3, void *a4, NSUInteger a5, NSUInteger a6, const void *a7, uint64_t a8, NSUInteger a9, NSUInteger a10, NSUInteger a11, NSUInteger a12, char a13, NSUInteger a14, NSUInteger a15, int a16, int a17, int a18, void *a19, char a20,void *a21,void *a22)
{
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSUInteger v32;
  NSObject *v33;
  unint64_t v34;
  void *v35;
  NSUInteger v36;
  NSObject *v37;
  unint64_t v38;
  void *v39;
  NSUInteger v40;
  NSUInteger v41;
  NSUInteger v42;
  NSObject *v43;
  unint64_t v44;
  void *v45;
  NSObject *v46;
  NSUInteger v47;
  unint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSUInteger v55;
  NSObject *v56;
  NSUInteger v57;
  NSUInteger v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSUInteger v66;
  NSObject *v67;
  NSUInteger v68;
  void *v69;
  void *v70;
  id *v71;
  id *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  NSObject *v87;
  void *v88;
  void *v89;
  void *v93;
  id v94;
  id v95;
  id v96;
  objc_super v97;
  uint8_t buf[4];
  void *v99;
  __int16 v100;
  unint64_t v101;
  uint64_t v102;
  NSRange v103;
  NSRange v104;
  NSRange v105;
  NSRange v106;
  NSRange v107;
  NSRange v108;
  NSRange v109;
  NSRange v110;

  v102 = *MEMORY[0x1E0C80C00];
  v94 = a2;
  v96 = a4;
  v95 = a22;
  v93 = a1;
  if (!a1)
  {
    v72 = 0;
    goto LABEL_48;
  }
  v32 = a14;
  if (a11 != 0x7FFFFFFFFFFFFFFFLL && a11 + a12 > a3)
  {
    if (qword_1EF568E88 == -1)
    {
      v33 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
      {
LABEL_7:

        goto LABEL_8;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v33 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
        goto LABEL_7;
    }
    v103.location = a11;
    v103.length = a12;
    NSStringFromRange(v103);
    v34 = a3;
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v99 = v35;
    v100 = 2048;
    v101 = v34;
    _os_log_impl(&dword_1BE607000, v33, OS_LOG_TYPE_FAULT, "selectedTextRange %@ beyond text length %ld", buf, 0x16u);

    a3 = v34;
    v32 = a14;
    goto LABEL_7;
  }
LABEL_8:
  v36 = a15;
  if (v32 != 0x7FFFFFFFFFFFFFFFLL && v32 + a15 > a3)
  {
    if (qword_1EF568E88 == -1)
    {
      v37 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
      {
LABEL_13:

        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v37 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
        goto LABEL_13;
    }
    v104.location = v32;
    v104.length = a15;
    NSStringFromRange(v104);
    v38 = a3;
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v99 = v39;
    v100 = 2048;
    v101 = v38;
    _os_log_impl(&dword_1BE607000, v37, OS_LOG_TYPE_FAULT, "activePreviewRange %@ beyond text length %ld", buf, 0x16u);

    a3 = v38;
    goto LABEL_13;
  }
LABEL_14:
  if (a5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v40 = a5 + a6;
    if (a5 + a6 <= a3)
      goto LABEL_16;
    goto LABEL_23;
  }
  if (qword_1EF568E88 == -1)
  {
    v43 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
      goto LABEL_22;
    goto LABEL_21;
  }
  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v43 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
  {
LABEL_21:
    v105.location = 0x7FFFFFFFFFFFFFFFLL;
    v105.length = a6;
    NSStringFromRange(v105);
    v44 = a3;
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v99 = v45;
    _os_log_impl(&dword_1BE607000, v43, OS_LOG_TYPE_FAULT, "Invalid referenceSubstringRange %@", buf, 0xCu);

    a3 = v44;
  }
LABEL_22:

  v40 = a6 + 0x7FFFFFFFFFFFFFFFLL;
  if (a6 + 0x7FFFFFFFFFFFFFFFLL <= a3)
  {
LABEL_16:
    v41 = a9;
    if (a6 == objc_msgSend_length(v96, v27, v28, v29, v30, v31))
      goto LABEL_17;
    goto LABEL_27;
  }
LABEL_23:
  if (qword_1EF568E88 == -1)
  {
    v46 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
      goto LABEL_26;
    goto LABEL_25;
  }
  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v46 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
  {
LABEL_25:
    v106.location = a5;
    v106.length = a6;
    NSStringFromRange(v106);
    v47 = v32;
    v48 = a3;
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v99 = v49;
    v100 = 2048;
    v101 = v48;
    _os_log_impl(&dword_1BE607000, v46, OS_LOG_TYPE_FAULT, "referenceSubstringRange %@ beyond text length %ld", buf, 0x16u);

    a3 = v48;
    v32 = v47;
    v36 = a15;
  }
LABEL_26:

  v41 = a9;
  if (a6 == objc_msgSend_length(v96, v50, v51, v52, v53, v54))
  {
LABEL_17:
    v42 = a10;
    if (v41 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_39;
LABEL_31:
    if (v41 < a5 || v41 - a5 >= a6 || v41 + v42 > v40)
    {
      v66 = v41;
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v67 = (id)qword_1EF568E48;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        v108.location = v66;
        v108.length = v42;
        NSStringFromRange(v108);
        v68 = v36;
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v109.location = a5;
        v109.length = a6;
        NSStringFromRange(v109);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v99 = v69;
        v100 = 2112;
        v101 = (unint64_t)v70;
        _os_log_impl(&dword_1BE607000, v67, OS_LOG_TYPE_ERROR, "The strokeCoveredTextRange %@ must be within the referenceSubstringRange %@", buf, 0x16u);

        v36 = v68;
      }

      v41 = v66;
    }
    goto LABEL_39;
  }
LABEL_27:
  v55 = v41;
  if (qword_1EF568E88 == -1)
  {
    v56 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
      goto LABEL_30;
    goto LABEL_29;
  }
  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v56 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
  {
LABEL_29:
    v107.location = a5;
    v107.length = a6;
    NSStringFromRange(v107);
    v57 = v36;
    v58 = a5;
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend_length(v96, v60, v61, v62, v63, v64);
    *(_DWORD *)buf = 138412546;
    v99 = v59;
    v100 = 2048;
    v101 = v65;
    _os_log_impl(&dword_1BE607000, v56, OS_LOG_TYPE_FAULT, "Invalid referenceSubstringRange %@, length doesn't match string length %ld", buf, 0x16u);

    a5 = v58;
    v36 = v57;
  }
LABEL_30:

  v41 = v55;
  v42 = a10;
  if (v41 != 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_31;
LABEL_39:
  v97.receiver = v93;
  v97.super_class = (Class)CHTextInputTargetContentInfo;
  v71 = (id *)objc_msgSendSuper2(&v97, sel_init);
  v72 = v71;
  if (v71)
  {
    objc_storeStrong(v71 + 1, a2);
    v72[2] = (id)a3;
    v78 = objc_msgSend_copy(v96, v73, v74, v75, v76, v77);
    v79 = v72[3];
    v72[3] = (id)v78;

    v72[4] = (id)a5;
    v72[5] = (id)a6;
    v72[7] = (id)v41;
    v72[8] = (id)v42;
    v72[9] = (id)a11;
    v72[10] = (id)a12;
    *((_BYTE *)v72 + 88) = a13;
    v72[12] = (id)v32;
    v72[13] = (id)v36;
    *((_DWORD *)v72 + 28) = a16;
    *((_DWORD *)v72 + 29) = a17;
    *((_DWORD *)v72 + 30) = a18;
    v72[16] = a19;
    *((_BYTE *)v72 + 136) = a20;
    v72[18] = a21;
    v85 = objc_msgSend_copy(v95, v80, v81, v82, v83, v84);
    v86 = v72[19];
    v72[19] = (id)v85;

    if (a6)
    {
      if (!a7)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v87 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v87, OS_LOG_TYPE_FAULT))
        {
          v110.location = a5;
          v110.length = a6;
          NSStringFromRange(v110);
          v88 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v99 = v88;
          _os_log_impl(&dword_1BE607000, v87, OS_LOG_TYPE_FAULT, "charRectsInReferenceSubstring cannot be NULL for referenceSubstringRange: %@", buf, 0xCu);

        }
      }
      v89 = malloc_type_calloc(a6, 0x20uLL, 0x1000040E0EAB150uLL);
      v72[6] = v89;
      memcpy(v89, a7, 32 * a6);
    }
  }
LABEL_48:

  return v72;
}

id sub_1BE6A5E34(uint64_t a1, void *a2)
{
  return a2;
}

void sub_1BE6A61D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("+-.:<=>acemnorsuvwxz~«»æœавгежзиклмнопстхчшъыьэюяє•←→"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF567FD8;
  qword_1EF567FD8 = v6;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v8, (uint64_t)CFSTR(",;_gpqy¡¿çдруцщạẹọụỵ"),
    v9,
    v10,
    v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)qword_1EF567FE0;
  qword_1EF567FE0 = v12;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v14, (uint64_t)CFSTR("!\"#&'*/0123456789?ABCDEFGHIJKLMNOPRSTUVWXYZ\\^bdfhiklt£¥ª°ºÀÁÂÃÄÆÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝßàáâãäèéêëìíîïñòóôõöùúûüĂăĐđĨĩŒŨũŸƠơƯưЁЄІЇАБВГЕЖЗИЙКЛМНОПРСТУФХЧШЪЫЬЭЮЯбйёіїҐґẢảẤấẦầẨẩẪẫẮắẰằẲẳẴẵẺẻẼẽẾếỀềỂểỄễỈỉỎỏỐốỒồỔổỖỗỚớỜờỞởỠỡỦủỨứỪừỬửỮữỲỶỸ₫€₴₽↑↓"), v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)qword_1EF567FE8;
  qword_1EF567FE8 = v18;

}

uint64_t sub_1BE6A6394(_QWORD *a1, uint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  a3.n128_u64[0] = *MEMORY[0x1E0C9D628];
  a4.n128_u64[0] = *(_QWORD *)(MEMORY[0x1E0C9D628] + 8);
  a5.n128_u64[0] = *(_QWORD *)(MEMORY[0x1E0C9D628] + 16);
  a6.n128_u64[0] = *(_QWORD *)(MEMORY[0x1E0C9D628] + 24);
  if (a2 < 0)
    goto LABEL_4;
  if (a1[6] > a2)
  {
    v6 = (unint64_t *)(*(_QWORD *)(a1[4] + 48) + 32 * a2);
    a3.n128_u64[0] = *v6;
    a4.n128_u64[0] = v6[1];
    a5.n128_u64[0] = v6[2];
    a6.n128_u64[0] = v6[3];
LABEL_4:
    v7 = a1[5];
LABEL_6:
    v8 = *(_QWORD *)(a1[4] + 32) + a2;
    return (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(v7 + 16))(v7, v8, a3, a4, a5, a6);
  }
  v7 = a1[5];
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_6;
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(v7 + 16))(v7, v8, a3, a4, a5, a6);
}

void sub_1BE6A653C(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGRect v5;

  v5.size.height = a5;
  v5.size.width = a4;
  v5.origin.y = a3;
  v5.origin.x = a2;
  *(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32) = CGRectUnion(*(CGRect *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 32), v5);
}

void sub_1BE6A6678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6A677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6A7104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1BE6A715C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1BE6A7178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1BE6A719C()
{
  void *v0;

  JUMPOUT(0x1BE6A71C0);
}

void sub_1BE6A71BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,uint64_t a26)
{
  void *v26;
  void *v27;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE6A73C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6A7668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6A7710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6A7728(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  float v14;
  id v15;

  v15 = a2;
  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 8), v3, (uint64_t)v15, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v7;
  if (v7)
  {
    objc_msgSend_floatValue(v7, v8, v9, v10, v11, v12);
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                            + 24)
                                                                + v14;
  }

}

void sub_1BE6A7798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6A77B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6A7880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE6A78A0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  float v14;
  id v15;

  v15 = a2;
  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v3, (uint64_t)v15, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v7;
  if (v7)
  {
    objc_msgSend_floatValue(v7, v8, v9, v10, v11, v12);
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                            + 24)
                                                                + v14;
  }

}

void sub_1BE6A7910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6A7928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6A7B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE6A7BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6A7F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1BE6A83A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6A83F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6A8410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6A8424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6A8744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6A8754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6A87D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6A87E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6A880C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6A8820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6A8848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6A885C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6A891C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6A8930(uint64_t a1, void *a2, double a3, double a4)
{
  id v7;
  void *v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v7 = a2;
  if (a1)
  {
    v30 = (uint64_t)v7;
    sub_1BE6A8A20(a1, v7);
    v8 = *(void **)(a1 + 8);
    *(float *)&v9 = a3;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v10, v11, v12, v13, v14, v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v8, v16, (uint64_t)v15, v30, v17, v18);

    v19 = *(void **)(a1 + 16);
    *(float *)&v20 = a4;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v21, v22, v23, v24, v25, v20);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v19, v27, (uint64_t)v26, v30, v28, v29);

    *(double *)(a1 + 24) = *(double *)(a1 + 24) + a3;
    v7 = (id)v30;
  }

}

void sub_1BE6A89F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6A8A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL sub_1BE6A8A20(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BOOL8 v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    objc_msgSend_objectForKey_(*(void **)(a1 + 8), v4, (uint64_t)v3, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v9;
    v16 = v9 != 0;
    if (v9)
    {
      objc_msgSend_doubleValue(v9, v10, v11, v12, v13, v14);
      *(double *)(a1 + 24) = *(double *)(a1 + 24) - v17;
      objc_msgSend_removeObjectForKey_(*(void **)(a1 + 8), v18, (uint64_t)v8, v19, v20, v21);
      objc_msgSend_removeObjectForKey_(*(void **)(a1 + 16), v22, (uint64_t)v8, v23, v24, v25);
    }

    return v16;
  }
  else
  {

    return 0;
  }
}

void sub_1BE6A8AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6A8AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6A966C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE6A98F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6A9908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6A9F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6AB134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  void *v43;

  sub_1BE6ABA04(&a43);
  _Unwind_Resume(a1);
}

void sub_1BE6AB654(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Index;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  double v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  float64_t v34;
  float64x2_t v35;
  double v36;
  uint64_t v37;
  double v38;
  float64_t v39;
  float64_t v40;

  objc_msgSend_cornerIndexes(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  Index = objc_msgSend_firstIndex(v8, v9, v10, v11, v12, v13);

  if ((const char *)Index != a2)
  {
    v20 = *(void **)(a1 + 32);
    objc_msgSend_resampledDrawing(v20, v15, v16, v17, v18, v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v23 = v21;
    v27 = v23;
    if (v20)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v23, v24, 0, v22, v25, v26);
      v39 = v29;
      v40 = v28;
      objc_msgSend_pointForStrokeIndex_pointIndex_(v27, v30, 0, (uint64_t)a2, v31, v32);
      v33.f64[0] = v40;
      v33.f64[1] = v39;
      v35.f64[1] = v34;
      *(float32x2_t *)&v35.f64[0] = vsub_f32(vcvt_f32_f64(v33), vcvt_f32_f64(v35));
      v36 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v35.f64[0], *(float32x2_t *)&v35.f64[0])));
    }
    else
    {
      v36 = 0.0;
    }

    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v38 = *(double *)(v37 + 24);
    if (v38 <= v36)
      v38 = v36;
    *(double *)(v37 + 24) = v38;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  }
}

void sub_1BE6AB760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6AB778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6AB788(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Index;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  double v54;
  double v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t v59;
  float64_t v60;
  float64x2_t v61;
  double v62;
  float32x2_t v63;
  float32_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t *v69;
  float32x2_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float64_t v75;
  float64_t v76;

  objc_msgSend_resampledDrawing(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pointForStrokeIndex_pointIndex_(v8, v9, 0, (uint64_t)a2, v10, v11);
  v13 = v12;
  v15 = v14;

  objc_msgSend_cornerIndexes(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  Index = objc_msgSend_firstIndex(v21, v22, v23, v24, v25, v26);

  if ((const char *)Index != a2)
  {
    objc_msgSend_resampledDrawing(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pointForStrokeIndex_pointIndex_(v33, v34, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v35, v36);
    v38 = v37;
    v40 = v39;

    v41 = *(void **)(a1 + 32);
    objc_msgSend_resampledDrawing(v41, v42, v43, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v49 = v47;
    v53 = v49;
    if (v41)
    {
      objc_msgSend_pointForStrokeIndex_pointIndex_(v49, v50, 0, v48, v51, v52);
      v75 = v55;
      v76 = v54;
      objc_msgSend_pointForStrokeIndex_pointIndex_(v53, v56, 0, (uint64_t)a2, v57, v58);
      v59.f64[0] = v76;
      v59.f64[1] = v75;
      v61.f64[1] = v60;
      *(float32x2_t *)&v61.f64[0] = vsub_f32(vcvt_f32_f64(v59), vcvt_f32_f64(v61));
      v62 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v61.f64[0], *(float32x2_t *)&v61.f64[0])));

      if (v62 <= *(double *)(a1 + 64))
        goto LABEL_8;
    }
    else
    {

      if (*(double *)(a1 + 64) >= 0.0)
        goto LABEL_8;
    }
    v63.f32[0] = v38 - v13;
    v64 = v40 - v15;
    v63.f32[1] = v64;
    v65 = vmul_f32(v63, v63);
    v65.i32[0] = vadd_f32(v65, (float32x2_t)vdup_lane_s32((int32x2_t)v65, 1)).u32[0];
    v66 = vrsqrte_f32((float32x2_t)v65.u32[0]);
    v67 = vmul_f32(v66, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(v66, v66)));
    v68 = vmul_n_f32(v63, vmul_f32(v67, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(v67, v67))).f32[0]);
    v69 = *(float32x2_t **)(*(_QWORD *)(a1 + 56) + 8);
    v70 = v69[3];
    if (sqrtf(vaddv_f32(vmul_f32(v70, v70))) > 0.0 && acosf(vaddv_f32(vmul_f32(v68, v70))) > 1.57079633)
    {
      ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
      objc_msgSend_addIndex_(*(void **)(a1 + 40), v71, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v72, v73, v74);
      v69 = *(float32x2_t **)(*(_QWORD *)(a1 + 56) + 8);
    }
    v69[3] = v68;
  }
LABEL_8:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
}

void sub_1BE6AB9B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6AB9CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6AB9DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6AB9EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void **sub_1BE6ABA04(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        sub_1BE62033C((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_1BE6ABA6C(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  id v20;
  void *v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  double v25;
  id v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  float64_t v36;
  float64x2_t v37;
  double v38;
  _BOOL8 v39;
  float64_t v41;
  float64_t v42;
  float64_t v43;
  float64_t v44;
  float64_t v45;
  float64_t v46;

  v7 = a1;
  v8 = v7;
  if (a2 != a3)
  {
    v9 = v7;
    objc_msgSend_pointForStrokeIndex_pointIndex_(v9, v10, 0, a2, v11, v12);
    v43 = v14;
    v45 = v13;
    objc_msgSend_pointForStrokeIndex_pointIndex_(v9, v15, 0, a3, v16, v17);
    v41 = v19;
    v42 = v18;

    v20 = v9;
    v21 = v20;
    if (a2 < a3)
    {
      v22.f64[0] = v45;
      v22.f64[1] = v43;
      v23.f64[0] = v42;
      v23.f64[1] = v41;
      *(float32x2_t *)&v22.f64[0] = vsub_f32(vcvt_f32_f64(v22), vcvt_f32_f64(v23));
      v24 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v22.f64[0], *(float32x2_t *)&v22.f64[0])));
      v25 = 0.0;
      do
      {
        v26 = v21;
        objc_msgSend_pointForStrokeIndex_pointIndex_(v26, v27, 0, a2, v28, v29);
        v44 = v31;
        v46 = v30;
        objc_msgSend_pointForStrokeIndex_pointIndex_(v26, v32, 0, ++a2, v33, v34);
        v35.f64[0] = v46;
        v35.f64[1] = v44;
        v37.f64[1] = v36;
        *(float32x2_t *)&v37.f64[0] = vsub_f32(vcvt_f32_f64(v35), vcvt_f32_f64(v37));
        v38 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v37.f64[0], *(float32x2_t *)&v37.f64[0])));

        v25 = v25 + v38;
      }
      while (a3 != a2);

      if (v25 >= 0.001)
      {
        v39 = v24 / v25 > a4;
        goto LABEL_8;
      }
    }
    else
    {

    }
  }
  v39 = 0;
LABEL_8:

  return v39;
}

void sub_1BE6ABBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6ABBEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6ABC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE6ABC1C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1BE6ABC58(uint64_t a1)
{
  sub_1BE62033C(a1 + 48, *(_QWORD **)(a1 + 56));
}

uint64_t sub_1BE6ABC68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  NSObject *v17;
  __int16 v19[8];

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = (uint64_t **)(v8 + 56);
  v9 = *(uint64_t **)(v8 + 56);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = v9[4];
        if (v12 <= (uint64_t)a2)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_8;
      }
      if (v12 >= (uint64_t)a2)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v11 = (uint64_t **)(v8 + 56);
LABEL_8:
    v13 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x30uLL);
    v11[4] = (uint64_t *)a2;
    v11[5] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    *v10 = (uint64_t *)v11;
    v14 = **(_QWORD **)(v8 + 48);
    v15 = (uint64_t *)v11;
    if (v14)
    {
      *(_QWORD *)(v8 + 48) = v14;
      v15 = *v10;
    }
    sub_1BE61F5C0(*(uint64_t **)(v8 + 56), v15);
    ++*(_QWORD *)(v8 + 64);
  }
  v16 = (uint64_t)v11[5];
  if (v16 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v17 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      v19[0] = 0;
      _os_log_impl(&dword_1BE607000, v17, OS_LOG_TYPE_FAULT, "Could not find a point in the drawing to match that in the resampled drawing", (uint8_t *)v19, 2u);
    }

  }
  return objc_msgSend_addIndex_(*(void **)(a1 + 32), a2, v16, a4, a5, a6);
}

void sub_1BE6ABE94(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v33 = (uint64_t *)v10[1];
            if (!v33)
              break;
            do
            {
              v10 = v33;
              v33 = (uint64_t *)*v33;
            }
            while (v33);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = v13[4];
          v12[4] = v14;
          v12[5] = v13[5];
          v15 = *v8;
          v16 = (uint64_t **)(a1 + 8);
          v17 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = **(_QWORD **)a1;
          if (v18)
            goto LABEL_15;
LABEL_16:
          sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (uint64_t *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v15;
            if (v14 >= v15[4])
              break;
            v15 = (uint64_t *)*v15;
            v17 = v16;
            if (!*v16)
              goto LABEL_14;
          }
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
        v17 = v16 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        v16[1] = v12;
        v18 = **(_QWORD **)a1;
        if (!v18)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v18;
        v12 = *v17;
        goto LABEL_16;
      }
LABEL_42:
      sub_1BE62033C(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_1BE62033C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v25 = (uint64_t *)operator new(0x30uLL);
      v26 = v25;
      *((_OWORD *)v25 + 2) = *((_OWORD *)v4 + 2);
      v27 = *v24;
      v28 = (uint64_t **)(a1 + 8);
      v29 = (uint64_t **)(a1 + 8);
      if (*v24)
        break;
LABEL_54:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v28;
      *v29 = v25;
      v30 = **(_QWORD **)a1;
      if (v30)
        goto LABEL_55;
LABEL_56:
      sub_1BE61F5C0(*(uint64_t **)(a1 + 8), v26);
      ++*(_QWORD *)(a1 + 16);
      v31 = (_QWORD *)v4[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v4[2];
          v20 = *v32 == (_QWORD)v4;
          v4 = v32;
        }
        while (!v20);
      }
      v4 = v32;
      if (v32 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v28 = (uint64_t **)v27;
        if (v25[4] >= v27[4])
          break;
        v27 = (uint64_t *)*v27;
        v29 = v28;
        if (!*v28)
          goto LABEL_54;
      }
      v27 = (uint64_t *)v27[1];
    }
    while (v27);
    v29 = v28 + 1;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v28;
    v28[1] = v25;
    v30 = **(_QWORD **)a1;
    if (!v30)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v30;
    v26 = *v29;
    goto LABEL_56;
  }
}

void sub_1BE6AC8A0(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 248));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6AC8DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6AC8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  _Block_object_dispose(&a48, 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose((const void *)(v52 - 248), 8);
  _Block_object_dispose((const void *)(v52 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1BE6AC92C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1BE6AC944(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6AC958(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE6AC968(uint64_t a1)
{

}

void sub_1BE6AC970(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE6ACA74(_QWORD *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[4] + 8) + 40), a2);
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a3);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v9 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_localizedDescription(v8, v10, v11, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412290;
      v17 = v15;
      _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEBUG, "Error during sketch recognition: %@", (uint8_t *)&v16, 0xCu);

    }
  }
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;

}

void sub_1BE6ACD6C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void **v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint8_t v11[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void **)WeakRetained;
    objc_sync_enter(v3);
    objc_msgSend_invalidate(v3[7], v4, v5, v6, v7, v8);
    v9 = v3[7];
    v3[7] = 0;

    objc_sync_exit(v3);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E38;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was interrupted", v11, 2u);
  }

}

void sub_1BE6ACE50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6ACE64()
{
  NSObject *v0;
  uint8_t v1[16];

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v0 = (id)qword_1EF568E38;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1BE607000, v0, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was invalidated", v1, 2u);
  }

}

void sub_1BE6ACF78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6AD088(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6ADF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE6AE5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

BOOL sub_1BE6AE64C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_classification(a2, (const char *)a2, a3, a4, a5, a6) == *(_QWORD *)(a1 + 32);
}

void sub_1BE6AE6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6AE708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6AE8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE6AED4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6AEE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6AEEB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6AEEC0(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;

  v4 = a2;
  v5 = a3;
  objc_msgSend_bounds(v4, v6, v7, v8, v9, v10);
  v12 = v11;
  objc_msgSend_bounds(v4, v13, v14, v15, v16, v17);
  v19 = v18;
  objc_msgSend_bounds(v5, v20, v21, v22, v23, v24);
  v26 = v25;
  objc_msgSend_bounds(v5, v27, v28, v29, v30, v31);
  if (v12 * v19 <= v26 * v32)
    v33 = 1;
  else
    v33 = -1;

  return v33;
}

void sub_1BE6AEF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6AEF64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6AEF78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6AEF8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6B1F10(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,void *a35,void *a36,void *a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a70;

  STACK[0x210] = a1;
  _Unwind_Resume((_Unwind_Exception *)STACK[0x210]);
}

void sub_1BE6B2DE0(void **a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int isStrokeClassificationTextOrMath;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;

  v79 = a2;
  v5 = a3;
  objc_msgSend_strokeClassificationsByStrokeIdentifier(a1[4], v6, v7, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v11, v12, (uint64_t)v79, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = objc_msgSend_integerValue(v16, v17, v18, v19, v20, v21);
  v28 = objc_msgSend_integerValue(v5, v23, v24, v25, v26, v27);
  v29 = v28;
  if (!v16)
  {
    v45 = (void *)objc_opt_class();
    isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(v45, v46, v29, v47, v48, v49);
    v44 = a1 + 6;
    if (isStrokeClassificationTextOrMath)
      v44 = a1 + 5;
LABEL_8:
    objc_msgSend_addObject_(*v44, v40, (uint64_t)v79, v41, v42, v43);
    goto LABEL_9;
  }
  if (v28 != v22)
  {
    v30 = (void *)objc_opt_class();
    if (objc_msgSend_isStrokeClassificationTextOrMath_(v30, v31, v29, v32, v33, v34)
      && (v35 = (void *)objc_opt_class(),
          objc_msgSend_isStrokeClassificationTextOrMath_(v35, v36, v22, v37, v38, v39)))
    {
      v44 = a1 + 7;
    }
    else
    {
      v51 = (void *)objc_opt_class();
      if ((objc_msgSend_isStrokeClassificationTextOrMath_(v51, v52, v22, v53, v54, v55) & 1) != 0
        || (v56 = (void *)objc_opt_class(),
            (objc_msgSend_isStrokeClassificationTextOrMath_(v56, v57, v29, v58, v59, v60) & 1) != 0))
      {
        v61 = (void *)objc_opt_class();
        if (objc_msgSend_isStrokeClassificationTextOrMath_(v61, v62, v29, v63, v64, v65))
        {
          objc_msgSend_addObject_(a1[5], v66, (uint64_t)v79, v67, v68, v69);
          v44 = a1 + 9;
        }
        else
        {
          v70 = (void *)objc_opt_class();
          if (!objc_msgSend_isStrokeClassificationTextOrMath_(v70, v71, v22, v72, v73, v74))
            goto LABEL_9;
          objc_msgSend_addObject_(a1[10], v75, (uint64_t)v79, v76, v77, v78);
          v44 = a1 + 6;
        }
      }
      else
      {
        v44 = a1 + 8;
      }
    }
    goto LABEL_8;
  }
LABEL_9:

}

void sub_1BE6B2F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6B2FB4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v25 = a2;
  objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v8, v9, (uint64_t)v25, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_integerValue(v13, v14, v15, v16, v17, v18);

  objc_opt_self();
  v24 = 48;
  if (v19 == 5)
    v24 = 40;
  objc_msgSend_addObject_(*(void **)(a1 + v24), v20, (uint64_t)v25, v21, v22, v23);

}

void sub_1BE6B3044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6B3060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6B3078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B308C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v25 = a2;
  objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v8, v9, (uint64_t)v25, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_integerValue(v13, v14, v15, v16, v17, v18);

  objc_opt_self();
  v24 = 48;
  if (v19 == 5)
    v24 = 40;
  objc_msgSend_addObject_(*(void **)(a1 + v24), v20, (uint64_t)v25, v21, v22, v23);

}

void sub_1BE6B311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6B3138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6B3150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B3164(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  id v47;

  v47 = a2;
  objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v8, v9, (uint64_t)v47, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_integerValue(v13, v14, v15, v16, v17, v18);

  objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 40), v20, v21, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v25, v26, (uint64_t)v47, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend_integerValue(v30, v31, v32, v33, v34, v35);

  objc_opt_self();
  objc_opt_self();
  v41 = v36 != 5;
  if (v36 == 5 && v19 != 5)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 48), v37, (uint64_t)v47, v38, v39, v40);
    v46 = (void **)(a1 + 56);
LABEL_7:
    objc_msgSend_addObject_(*v46, v42, (uint64_t)v47, v43, v44, v45);
    goto LABEL_8;
  }
  if (v36 != 5 && v19 == 5)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 64), v37, (uint64_t)v47, v38, v39, v40);
    v46 = (void **)(a1 + 72);
    goto LABEL_7;
  }
  if (v19 != 5)
    v41 = 1;
  if (!v41)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
LABEL_8:

}

void sub_1BE6B328C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B32A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6B32BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6B32D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B32E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6B3304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6B331C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B3330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6B3344(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v63 = a2;
  v8 = objc_msgSend_classification(v63, v3, v4, v5, v6, v7);
  objc_opt_self();
  if (v8 == 5)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
      goto LABEL_3;
  }
  else
  {
    v44 = objc_msgSend_classification(v63, v9, v10, v11, v12, v13);
    objc_opt_self();
    if ((unint64_t)(v44 - 6) > 2)
    {
LABEL_20:
      v61 = 0;
      goto LABEL_21;
    }
    if (objc_msgSend_count(*(void **)(a1 + 32), v45, v46, v47, v48, v49))
    {
      objc_msgSend_strokeIdentifiers(v63, v50, v51, v52, v53, v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = objc_msgSend_intersectsSet_(v55, v56, *(_QWORD *)(a1 + 32), v57, v58, v59);

      if (v60)
      {
LABEL_3:
        objc_msgSend_addObject_(*(void **)(a1 + 40), v9, (uint64_t)v63, v11, v12, v13);
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        objc_msgSend_strokeIdentifiers(v63, v14, v15, v16, v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v64, (uint64_t)v68, 16, v21);
        if (v26)
        {
          v27 = *(_QWORD *)v65;
          do
          {
            for (i = 0; i != v26; ++i)
            {
              if (*(_QWORD *)v65 != v27)
                objc_enumerationMutation(v19);
              v29 = *(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * i);
              if ((objc_msgSend_containsObject_(*(void **)(a1 + 48), v22, v29, v23, v24, v25) & 1) == 0)
              {
                objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 56), v22, v30, v23, v24, v25);
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_objectForKey_(v31, v32, v29, v33, v34, v35);
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                v42 = objc_msgSend_integerValue(v36, v37, v38, v39, v40, v41);

                objc_opt_self();
                v43 = (void **)(a1 + 64);
                if (v42 == 5 || (objc_opt_self(), v43 = (void **)(a1 + 72), (unint64_t)(v42 - 6) <= 2))
                  objc_msgSend_addObject_(*v43, v22, v29, v23, v24, v25);
              }
            }
            v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v64, (uint64_t)v68, 16, v25);
          }
          while (v26);
        }

        goto LABEL_20;
      }
    }
  }
  v61 = 1;
LABEL_21:

  return v61;
}

void sub_1BE6B358C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1BE6B35EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  objc_msgSend_strokeForIdentifier_inStrokeProvider_(CHStrokeUtilities, a2, (uint64_t)a2, *(_QWORD *)(a1 + 32), a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(*(void **)(a1 + 40), v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE6B363C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B3650(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int isEqualToNumber;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = a2;
  objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v8, v9, (uint64_t)v23, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToNumber = objc_msgSend_isEqualToNumber_(v13, v14, *(_QWORD *)(a1 + 40), v15, v16, v17);

  if (isEqualToNumber)
    objc_msgSend_addObject_(*(void **)(a1 + 48), v19, (uint64_t)v23, v20, v21, v22);

}

void sub_1BE6B36CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6B36E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6B3700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B3714(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int isEqualToNumber;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = a2;
  objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v8, v9, (uint64_t)v23, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToNumber = objc_msgSend_isEqualToNumber_(v13, v14, *(_QWORD *)(a1 + 40), v15, v16, v17);

  if (isEqualToNumber)
    objc_msgSend_addObject_(*(void **)(a1 + 48), v19, (uint64_t)v23, v20, v21, v22);

}

void sub_1BE6B3790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6B37AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6B37C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B37D8(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int isEqualToNumber;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  id v36;

  v36 = a2;
  objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v8, v9, (uint64_t)v36, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToNumber = objc_msgSend_isEqualToNumber_(v13, v14, *(_QWORD *)(a1 + 40), v15, v16, v17);

  if (isEqualToNumber)
  {
    v24 = (void **)(a1 + 48);
LABEL_5:
    objc_msgSend_addObject_(*v24, v19, (uint64_t)v36, v21, v22, v23);
    goto LABEL_6;
  }
  objc_msgSend_strokeClassificationsByStrokeIdentifier(*(void **)(a1 + 56), v19, v20, v21, v22, v23);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v25, v26, (uint64_t)v36, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend_isEqualToNumber_(v30, v31, *(_QWORD *)(a1 + 40), v32, v33, v34);

  if (v35)
  {
    v24 = (void **)(a1 + 64);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_1BE6B3898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6B38D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6B38E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6B38FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a3;
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(*(void **)(a1 + 32), v11, (uint64_t)v5, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(*(void **)(a1 + 32), v16, (uint64_t)v10, (uint64_t)v15, v17, v18);

  return v19;
}

void sub_1BE6B3978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6B3998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6B39A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isEqualToString;

  objc_msgSend_strategyIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(_QWORD *)(a1 + 32), v9, v10, v11);

  return isEqualToString;
}

void sub_1BE6B39E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6B39F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isEqualToString;

  objc_msgSend_strategyIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v7, v8, *(_QWORD *)(a1 + 32), v9, v10, v11);

  return isEqualToString;
}

void sub_1BE6B3A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6B3A48(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;

  v4 = a2;
  v5 = a3;
  objc_msgSend_groupingConfidence(v4, v6, v7, v8, v9, v10);
  v12 = v11;
  objc_msgSend_groupingConfidence(v5, v13, v14, v15, v16, v17);
  if (v12 >= v23)
  {
    objc_msgSend_groupingConfidence(v4, v18, v19, v20, v21, v22);
    v26 = v25;
    objc_msgSend_groupingConfidence(v5, v27, v28, v29, v30, v31);
    if (v26 > v32)
      v24 = -1;
    else
      v24 = 0;
  }
  else
  {
    v24 = 1;
  }

  return v24;
}

void sub_1BE6B3AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6B4014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6B41C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  objc_msgSend_strokeIdentifier(a2, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v5, v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v6, v19, (uint64_t)v12, (uint64_t)v18, v20, v21);

  return v22;
}

void sub_1BE6B4238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6B4258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6B4268(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  void *v11;

  v11 = *(void **)(a1 + 32);
  if (v11)
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  return objc_msgSend_addPoint_(*(void **)(a1 + 40), a2, a3, a4, a5, a6, a7 - *(double *)(a1 + 48), a8 - *(double *)(a1 + 56));
}

void sub_1BE6B44F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B4610(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;

  if (a2)
  {
    sub_1BE6B4610(a1, *a2);
    sub_1BE6B4610(a1, a2[1]);
    v4 = (_QWORD *)a2[7];
    if (v4)
    {
      v5 = (_QWORD *)a2[8];
      v6 = (void *)a2[7];
      if (v5 != v4)
      {
        do
        {
          v7 = (_QWORD *)*(v5 - 3);
          if (v7)
          {
            do
            {
              v8 = (_QWORD *)*v7;
              operator delete(v7);
              v7 = v8;
            }
            while (v8);
          }
          v10 = (void *)*(v5 - 5);
          v5 -= 5;
          v9 = v10;
          *v5 = 0;
          if (v10)
            operator delete(v9);
        }
        while (v5 != v4);
        v6 = (void *)a2[7];
      }
      a2[8] = v4;
      operator delete(v6);
    }
    sub_1BE62033C((uint64_t)(a2 + 4), (_QWORD *)a2[5]);
    operator delete(a2);
  }
}

_QWORD *sub_1BE6B46CC(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_1BE6B47D4(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (uint64_t **)result;
        sub_1BE6B4B48((uint64_t)v7, (uint64_t)(v6 + 4), (uint64_t)&v16);
        v11 = v18[0];
        v12 = v16;
        *v16 = 0;
        v12[1] = 0;
        v12[2] = v11;
        *v10 = v12;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v12 = *v10;
        }
        result = sub_1BE61F5C0(v7[1], v12);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v14 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v14 = (_QWORD *)v6[2];
        v15 = *v14 == (_QWORD)v6;
        v6 = v14;
      }
      while (!v15);
LABEL_3:
      v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

_QWORD *sub_1BE6B47D4(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;

  if (a1 + 1 != a2)
  {
    v5 = a5 + 1;
    v6 = (_QWORD *)*a5;
    v7 = (_QWORD *)a2[4];
    v8 = a2 + 5;
    if (v7 == a2 + 5)
    {
LABEL_24:
      if (v6 == v5)
      {
LABEL_41:
        *a3 = a2;
        *a4 = a2;
        return a4;
      }
      v21 = (_QWORD *)*a5;
      while (v7 != v8)
      {
        v22 = v7[4];
        v23 = v21[4];
        if (v22 < v23)
          break;
        if (v23 >= v22)
        {
          v24 = (_QWORD *)v7[1];
          v25 = v7;
          if (v24)
          {
            do
            {
              v7 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v7 = (_QWORD *)v25[2];
              v15 = *v7 == (_QWORD)v25;
              v25 = v7;
            }
            while (!v15);
          }
          v26 = (_QWORD *)v21[1];
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v21[2];
              v15 = *v27 == (_QWORD)v21;
              v21 = v27;
            }
            while (!v15);
          }
          v21 = v27;
          if (v27 != v5)
            continue;
        }
        goto LABEL_41;
      }
      v29 = a2[1];
      if (v29)
      {
        v30 = (_QWORD *)a2[1];
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        v41 = a2;
        do
        {
          v31 = (_QWORD *)v41[2];
          v15 = *v31 == (_QWORD)v41;
          v41 = v31;
        }
        while (!v15);
      }
      if (v31 != a1 + 1)
      {
        v42 = (_QWORD *)v31[4];
        if (v42 == v31 + 5)
          return sub_1BE6B4C18((uint64_t)a1, a3, a5);
        while (v6 != v5)
        {
          v43 = v6[4];
          v44 = v42[4];
          if (v43 < v44)
            break;
          if (v44 >= v43)
          {
            v45 = (_QWORD *)v6[1];
            v46 = v6;
            if (v45)
            {
              do
              {
                v6 = v45;
                v45 = (_QWORD *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v46[2];
                v15 = *v6 == (_QWORD)v46;
                v46 = v6;
              }
              while (!v15);
            }
            v47 = (_QWORD *)v42[1];
            if (v47)
            {
              do
              {
                v48 = v47;
                v47 = (_QWORD *)*v47;
              }
              while (v47);
            }
            else
            {
              do
              {
                v48 = (_QWORD *)v42[2];
                v15 = *v48 == (_QWORD)v42;
                v42 = v48;
              }
              while (!v15);
            }
            v42 = v48;
            if (v48 != v31 + 5)
              continue;
          }
          return sub_1BE6B4C18((uint64_t)a1, a3, a5);
        }
      }
      if (v29)
      {
        *a3 = v31;
        return v31;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    v9 = (_QWORD *)*a5;
    v10 = (_QWORD *)a2[4];
    while (v9 != v5)
    {
      v11 = v9[4];
      v12 = v10[4];
      if (v11 < v12)
        break;
      if (v12 >= v11)
      {
        v13 = (_QWORD *)v9[1];
        v14 = v9;
        if (v13)
        {
          do
          {
            v9 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v14[2];
            v15 = *v9 == (_QWORD)v14;
            v14 = v9;
          }
          while (!v15);
        }
        v16 = (_QWORD *)v10[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v10[2];
            v15 = *v17 == (_QWORD)v10;
            v10 = v17;
          }
          while (!v15);
        }
        v10 = v17;
        if (v17 != v8)
          continue;
      }
      goto LABEL_24;
    }
  }
  v18 = *a2;
  if ((_QWORD *)*a1 != a2)
  {
    if (v18)
    {
      v19 = (_QWORD *)*a2;
      do
      {
        v20 = v19;
        v19 = (_QWORD *)v19[1];
      }
      while (v19);
    }
    else
    {
      v32 = a2;
      do
      {
        v20 = (_QWORD *)v32[2];
        v15 = *v20 == (_QWORD)v32;
        v32 = v20;
      }
      while (v15);
    }
    v33 = (_QWORD *)*a5;
    if ((_QWORD *)*a5 != a5 + 1)
    {
      v34 = (_QWORD *)v20[4];
      while (v34 != v20 + 5)
      {
        v35 = v34[4];
        v36 = v33[4];
        if (v35 < v36)
          break;
        if (v36 >= v35)
        {
          v37 = (_QWORD *)v34[1];
          v38 = v34;
          if (v37)
          {
            do
            {
              v34 = v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v34 = (_QWORD *)v38[2];
              v15 = *v34 == (_QWORD)v38;
              v38 = v34;
            }
            while (!v15);
          }
          v39 = (_QWORD *)v33[1];
          if (v39)
          {
            do
            {
              v40 = v39;
              v39 = (_QWORD *)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              v40 = (_QWORD *)v33[2];
              v15 = *v40 == (_QWORD)v33;
              v33 = v40;
            }
            while (!v15);
          }
          v33 = v40;
          if (v40 != a5 + 1)
            continue;
        }
        return sub_1BE6B4C18((uint64_t)a1, a3, a5);
      }
      goto LABEL_43;
    }
    return sub_1BE6B4C18((uint64_t)a1, a3, a5);
  }
  v20 = a2;
LABEL_43:
  if (v18)
  {
    *a3 = v20;
    return v20 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t sub_1BE6B4B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[5] = 0;
  v6[4] = v6 + 5;
  v6[6] = 0;
  sub_1BE66AAE8(v6 + 4, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  result = sub_1BE6B4E7C((uint64_t)(v6 + 7), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1BE6B4BEC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1BE62033C(v4, *(_QWORD **)(v2 + 40));
  *v1 = 0;
  sub_1BE6B54B4(v3, (_QWORD *)v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE6B4C18(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v8 = (_QWORD *)*a3;
    v6 = a3 + 1;
    v7 = v8;
    if (v8 != v6)
    {
      do
      {
        while (1)
        {
          v12 = v4;
          v21 = (_QWORD *)v4[4];
          v22 = v4 + 5;
          v23 = v7;
          v24 = v21;
          if (v21 != v22)
            break;
LABEL_25:
          v25 = v7;
          while (v21 != v22)
          {
            v26 = v21[4];
            v27 = v25[4];
            if (v26 < v27)
              break;
            if (v27 >= v26)
            {
              v28 = (_QWORD *)v21[1];
              v29 = v21;
              if (v28)
              {
                do
                {
                  v21 = v28;
                  v28 = (_QWORD *)*v28;
                }
                while (v28);
              }
              else
              {
                do
                {
                  v21 = (_QWORD *)v29[2];
                  v18 = *v21 == (_QWORD)v29;
                  v29 = v21;
                }
                while (!v18);
              }
              v30 = (_QWORD *)v25[1];
              if (v30)
              {
                do
                {
                  v31 = v30;
                  v30 = (_QWORD *)*v30;
                }
                while (v30);
              }
              else
              {
                do
                {
                  v31 = (_QWORD *)v25[2];
                  v18 = *v31 == (_QWORD)v25;
                  v25 = v31;
                }
                while (!v18);
              }
              v25 = v31;
              if (v31 != v6)
                continue;
            }
            goto LABEL_59;
          }
          result = v12 + 1;
          v4 = (_QWORD *)v12[1];
          if (!v4)
            goto LABEL_59;
        }
        while (v23 != v6)
        {
          v32 = v23[4];
          v33 = v24[4];
          if (v32 < v33)
            break;
          if (v33 >= v32)
          {
            v34 = (_QWORD *)v23[1];
            v35 = v23;
            if (v34)
            {
              do
              {
                v23 = v34;
                v34 = (_QWORD *)*v34;
              }
              while (v34);
            }
            else
            {
              do
              {
                v23 = (_QWORD *)v35[2];
                v18 = *v23 == (_QWORD)v35;
                v35 = v23;
              }
              while (!v18);
            }
            v36 = (_QWORD *)v24[1];
            if (v36)
            {
              do
              {
                v37 = v36;
                v36 = (_QWORD *)*v36;
              }
              while (v36);
            }
            else
            {
              do
              {
                v37 = (_QWORD *)v24[2];
                v18 = *v37 == (_QWORD)v24;
                v24 = v37;
              }
              while (!v18);
            }
            v24 = v37;
            if (v37 != v22)
              continue;
          }
          goto LABEL_25;
        }
        v4 = (_QWORD *)*v12;
        result = v12;
      }
      while (*v12);
      goto LABEL_59;
    }
    v9 = (_QWORD *)v4[4];
    v10 = v4 + 5;
    if (v9 != v4 + 5)
    {
      v11 = result;
      v12 = v4;
      do
      {
        result = v12;
        v13 = v7;
        while (v13 != v6)
        {
          v14 = v13[4];
          v15 = v9[4];
          if (v14 < v15)
            break;
          if (v15 >= v14)
          {
            v16 = (_QWORD *)v13[1];
            v17 = v13;
            if (v16)
            {
              do
              {
                v13 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v13 = (_QWORD *)v17[2];
                v18 = *v13 == (_QWORD)v17;
                v17 = v13;
              }
              while (!v18);
            }
            v19 = (_QWORD *)v9[1];
            if (v19)
            {
              do
              {
                v20 = v19;
                v19 = (_QWORD *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = (_QWORD *)v9[2];
                v18 = *v20 == (_QWORD)v9;
                v9 = v20;
              }
              while (!v18);
            }
            v9 = v20;
            if (v20 != v10)
              continue;
          }
          v38 = result;
          result = v11;
          *a2 = v38;
          return result;
        }
        v12 = (_QWORD *)*result;
        if (!*result)
          goto LABEL_60;
        v9 = (_QWORD *)v12[4];
        v10 = v12 + 5;
        v11 = result;
      }
      while (v9 != v12 + 5);
LABEL_59:
      *a2 = v12;
      return result;
    }
    *a2 = v4;
  }
  else
  {
LABEL_60:
    *a2 = result;
  }
  return result;
}

uint64_t sub_1BE6B4E7C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x666666666666667)
      sub_1BE61F930();
    result = (uint64_t)operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 40 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_1BE6B5054(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1BE6B4F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1BE6B4FA0(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE6B4F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;

  if (v12)
  {
    do
    {
      v14 = (_QWORD *)*(v11 - 3);
      if (v14)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          operator delete(v14);
          v14 = v15;
        }
        while (v15);
      }
      v17 = (void *)*(v11 - 5);
      v11 -= 5;
      v16 = v17;
      *v11 = 0;
      if (v17)
        operator delete(v16);
    }
    while (v11 != v10);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_1BE6B4FA0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1BE6B4FA0(void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (_QWORD *)*(v4 - 3);
          if (v6)
          {
            do
            {
              v7 = (_QWORD *)*v6;
              operator delete(v6);
              v6 = v7;
            }
            while (v7);
          }
          v9 = (void *)*(v4 - 5);
          v4 -= 5;
          v8 = v9;
          *v4 = 0;
          if (v9)
            operator delete(v8);
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_1BE6B5054(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_1BE61F23C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1BE6B5194(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1BE6B516C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6B5180(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1BE65DB88(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE6B5194(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_1BE61F23C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1BE6B54A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6B54B4(uint64_t a1, _QWORD *__p)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (_QWORD *)__p[7];
    if (v3)
    {
      v4 = (_QWORD *)__p[8];
      v5 = (void *)__p[7];
      if (v4 != v3)
      {
        do
        {
          v6 = (_QWORD *)*(v4 - 3);
          if (v6)
          {
            do
            {
              v7 = (_QWORD *)*v6;
              operator delete(v6);
              v6 = v7;
            }
            while (v7);
          }
          v9 = (void *)*(v4 - 5);
          v4 -= 5;
          v8 = v9;
          *v4 = 0;
          if (v9)
            operator delete(v8);
        }
        while (v4 != v3);
        v5 = (void *)__p[7];
      }
      __p[8] = v3;
      operator delete(v5);
    }
    sub_1BE62033C((uint64_t)(__p + 4), (_QWORD *)__p[5]);
    operator delete(__p);
  }
  else if (__p)
  {
    operator delete(__p);
  }
}

void sub_1BE6B55D0(uint64_t a1)
{
  id WeakRetained;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  NSObject *v9;
  uint8_t v10[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend_invalidate(*((void **)WeakRetained + 1), v2, v3, v4, v5, v6);
    v8 = (void *)v7[1];
    v7[1] = 0;

  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v9 = (id)qword_1EF568E38;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was interrupted", v10, 2u);
  }

}

void sub_1BE6B5688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6B5698()
{
  NSObject *v0;
  uint8_t v1[16];

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v0 = (id)qword_1EF568E38;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1BE607000, v0, OS_LOG_TYPE_ERROR, "Remote connection to handwritingd was invalidated", v1, 2u);
  }

}

void sub_1BE6B5780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHRemoteLineWrapper;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE6B5B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id *v40;

  objc_destroyWeak(v40);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1BE6B5C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6B5C54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE6B5C64(uint64_t a1)
{

}

void sub_1BE6B5C6C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E70;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE6B5D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6B5D88(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  }
  else if (v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v9 = (id)qword_1EF568E70;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_localizedDescription(v8, v10, v11, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412290;
      v17 = v15;
      _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEBUG, "Error during line wrapping analysis: %@", (uint8_t *)&v16, 0xCu);

    }
  }

}

void sub_1BE6B5ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6B5F74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6B5FF0()
{
  CHTextInputProtoSettings *v0;
  void *v1;

  v0 = objc_alloc_init(CHTextInputProtoSettings);
  v1 = (void *)qword_1EF567FF8;
  qword_1EF567FF8 = (uint64_t)v0;

  if (qword_1EF568008 != -1)
    dispatch_once(&qword_1EF568008, &unk_1E77F3188);
}

void sub_1BE6B6050()
{
  id v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;

  v0 = sub_1BE609DD0();
  objc_msgSend_sharedSettings(v0, v1, v2, v3, v4, v5);
  v61 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if ((objc_opt_respondsToSelector() & 1) == 0)
      goto LABEL_3;
LABEL_6:
    objc_msgSend_autoLineBreakAreaWidthFactor(v61, v11, v12, v13, v14, v15);
    *(_QWORD *)(qword_1EF567FF8 + 32) = v49;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      goto LABEL_4;
    goto LABEL_7;
  }
  *(_BYTE *)(qword_1EF567FF8 + 8) = objc_msgSend_autoLineBreakEnabled(v61, v6, v7, v8, v9, v10);
  *(_BYTE *)(qword_1EF567FF8 + 9) = objc_msgSend_autoLineBreakRequireWeakCursor(v61, v22, v23, v24, v25, v26);
  objc_msgSend_autoLineBreakVerticalDistance(v61, v27, v28, v29, v30, v31);
  *(_QWORD *)(qword_1EF567FF8 + 16) = v32;
  objc_msgSend_autoLineBreakDualVerticalDistance(v61, v33, v34, v35, v36, v37);
  *(_QWORD *)(qword_1EF567FF8 + 24) = v38;
  *(_BYTE *)(qword_1EF567FF8 + 10) = objc_msgSend_lineBreakVerticalBarGestureEnabled(v61, v39, v40, v41, v42, v43);
  *(_BYTE *)(qword_1EF567FF8 + 11) = objc_msgSend_lineBreakVerticalBarUpToDelete(v61, v44, v45, v46, v47, v48);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    goto LABEL_6;
LABEL_3:
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
LABEL_4:
    objc_msgSend_subwordGestureEndingSpeedRange(v61, v16, v17, v18, v19, v20);
    goto LABEL_8;
  }
LABEL_7:
  v21 = 0x3FE999999999999ALL;
LABEL_8:
  *(_QWORD *)(qword_1EF567FF8 + 40) = v21;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend_subwordGestureSpeedThreshold(v61, v50, v51, v52, v53, v54);
  else
    v55 = 0x4049000000000000;
  *(_QWORD *)(qword_1EF567FF8 + 48) = v55;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    *(_BYTE *)(qword_1EF567FF8 + 12) = objc_msgSend_preventLeftoverCharsInSubwordGestures(v61, v56, v57, v58, v59, v60);
  else
    *(_BYTE *)(qword_1EF567FF8 + 12) = 0;

}

void sub_1BE6B62F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6B6308(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_isScribbleActive(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

Class sub_1BE6B6388(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EF568018)
  {
    qword_1EF568018 = _sl_dlopen();
    if (!qword_1EF568018)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("PKTextInputSettings");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1EF568010 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1BE6B67D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  uint8_t v14[16];
  uint8_t buf[16];

  v7 = a4;
  v8 = a3;
  v9 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E50;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v11, OS_SIGNPOST_INTERVAL_END, v12, "CHTextStrokeTransformationQuery", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHTextStrokeTransformationQuery\"", v14, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ChatBubbleRegressor::ChatBubbleRegressor(ChatBubbleRegressor *this, CHDrawing *a2, HTMLog *a3)
{
  CHDrawing *v5;
  void **v6;
  ChatBubbleRegressor *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  double v31;
  double v32;
  double v33;
  double *v34;
  unint64_t v35;
  float v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  double *v41;
  double v42;
  double v43;
  double *v44;
  float v45;
  float v46;
  float v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  int v52;
  float v53;
  int v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  double *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  double v72;
  double v73;
  float v74;
  float v75;
  float v76;
  double v77;
  double v78;
  float v79;
  float v80;
  float v81;
  float v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  float64x2_t v97;
  float v98;
  unint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  char *v102;
  size_t v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  float64x2_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  double *v115;
  double *v116;
  ChatBubbleRegressor *v117;
  double *v118;
  unint64_t v119;
  double v120;
  double v121;
  float v122;
  float v123;
  float v124;
  float v125;
  double v126;
  float v127;
  float v128;
  int v129;
  double *v130;
  uint64_t v131;
  double v132;
  double v133;
  double v134;
  double v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  double *v141;
  double v142;
  double v143;
  float v144;
  float v145;
  float v146;
  float v147;
  int v148;
  double *v149;
  int64_t v150;
  uint64_t v151;
  float v152;
  float v153;
  int v154;
  float64x2_t *v155;
  double *v156;
  BOOL v157;
  double v158;
  float v159;
  float v160;
  float v161;
  float v162;
  double *v163;
  uint64_t v164;
  uint64_t v165;
  double *v166;
  unint64_t v167;
  double v168;
  double v169;
  double v170;
  float v171;
  float v172;
  float v173;
  double *v174;
  uint64_t v175;
  double v176;
  double v177;
  double v178;
  double v179;
  float v180;
  float v181;
  float v182;
  uint64_t v183;
  float v184;
  uint64_t v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  unint64_t v192;
  uint64_t v193;
  double v194;
  unint64_t v195;
  unsigned int v196;
  uint64_t v197;
  float v198;
  float v199;
  double *v200;
  double v201;
  uint64_t v202;
  float v203;
  uint64_t v204;
  float v205;
  float v206;
  float v207;
  float v208;
  uint64_t v209;
  double v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64_t *v218;
  int32x4_t v219;
  int32x4_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  unint64_t v229;
  double *v230;
  float v231;
  uint64_t v232;
  unint64_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64_t *v237;
  int32x4_t v238;
  int32x4_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  unint64_t v248;
  double *v249;
  float v250;
  double *v251;
  double v252;
  double v253;
  float v254;
  double v255;
  float v256;
  float v257;
  float64x2_t *v258;
  float64x2_t *v259;
  double v260;
  float32x2_t v261;
  float32x2_t v262;
  double v263;
  float64x2_t v264;
  float v265;
  uint64_t v266;
  double *v267;
  double v268;
  double v269;
  uint64_t v270;
  float32x2_t v271;
  float v272;
  float64x2_t v273;
  float v274;
  float v275;
  float v276;
  float v277;
  ChatBubbleRegressor *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  float64x2_t v283;
  void *__p;
  void *v285;
  char *v286;
  double *v287;
  __int128 v288;
  float64x2_t v289;

  v5 = a2;
  *(_QWORD *)this = &unk_1E77F0798;
  *((_QWORD *)this + 4) = 0;
  *((_OWORD *)this + 3) = 0u;
  v6 = (void **)((char *)this + 72);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  objc_storeStrong((id *)this + 4, a2);
  v13 = sub_1BE6294F4(v5, (double **)this + 6, 15.0);
  v15 = *((_QWORD *)this + 6);
  v14 = (char *)*((_QWORD *)this + 7);
  v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v14[-v15] >> 3);
  if (v16 < 7)
    goto LABEL_75;
  v17 = v13;
  v18 = 0;
  v19 = v16 - 3;
  v20 = v13 * 1.5;
  v21 = v16 - 4;
  v22 = (double *)(v15 + 128);
  v9 = 0xFFFFFFFFLL;
  do
  {
    if (v18 == v19)
      break;
    v23 = (double *)(v15 + 40 * v18);
    v24 = *v23;
    v25 = v23[1];
    v26 = v23[5] - *v23;
    v27 = v23[6] - v25;
    v28 = (float)(v27 * v27) + (float)(v26 * v26);
    v29 = v27 / v28;
    if (v28 > 0.0)
    {
      v30 = v26 / v28;
    }
    else
    {
      v29 = v23[6] - v25;
      v30 = v23[5] - *v23;
    }
    if (v16 - 1 > v18 + 3)
    {
      v31 = sqrtf(v28);
      v32 = v30;
      v33 = v29;
      v34 = v22;
      v35 = v21;
      while (1)
      {
        v36 = ((*v34 - v25) * v33 + (*(v34 - 1) - v24) * v32) * v31;
        v37 = v36 <= 0.0 || v20 <= v36;
        if (!v37)
          break;
        v34 += 5;
        if (!--v35)
          goto LABEL_3;
      }
      v9 = v18;
    }
LABEL_3:
    ++v18;
    --v21;
    v22 += 5;
  }
  while ((v9 & 0x80000000) != 0);
  v38 = v16 - 4;
  v39 = -858993459 * ((uint64_t)&v14[-v15] >> 3);
  v40 = v16 - 3;
  do
  {
    if ((int)v39 <= 3)
    {
      if ((int)v9 >= 3)
        goto LABEL_31;
      goto LABEL_39;
    }
    v10 = v39 - 1;
    v41 = (double *)(v15 + 40 * (v39 - 1));
    v42 = *v41;
    v43 = v41[1];
    v44 = (double *)(v15 + 40 * (v39 - 2));
    v45 = *v44 - *v41;
    v46 = v44[1] - v43;
    v47 = (float)(v46 * v46) + (float)(v45 * v45);
    if (v47 > 0.0)
    {
      v45 = v45 / v47;
      v46 = v46 / v47;
    }
    v48 = (double *)(v15 + 8 + 40 * v38);
    v39 = v10;
    v49 = sqrtf(v47);
    v50 = v45;
    v51 = v46;
    v52 = v40;
    while (1)
    {
      v53 = ((*v48 - v43) * v51 + (*(v48 - 1) - v42) * v50) * v49;
      if (v53 > 0.0 && v20 > v53)
        break;
      --v52;
      v48 -= 5;
      if (v52 <= 0)
      {
        v10 = 0xFFFFFFFFLL;
        break;
      }
    }
    --v38;
    --v40;
  }
  while ((v10 & 0x80000000) != 0);
  if ((int)v9 > 2)
  {
    if (v19 <= v10 || v16 - v10 <= v9)
    {
LABEL_31:
      v55 = 0;
      LODWORD(v10) = v16 - 1;
LABEL_38:
      ChatBubbleRegressor::regressLollipop(this, v55, v9, v10);
      goto LABEL_77;
    }
LABEL_37:
    LODWORD(v9) = 0;
    v55 = v16 - 1;
    goto LABEL_38;
  }
  if (v19 > v10)
    goto LABEL_37;
LABEL_39:
  v56 = *((_QWORD *)this + 8);
  if ((unint64_t)v14 >= v56)
  {
    v60 = v16 + 1;
    if (v16 + 1 > 0x666666666666666)
      sub_1BE61F930();
    v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v56 - v15) >> 3);
    if (2 * v61 > v60)
      v60 = 2 * v61;
    if (v61 >= 0x333333333333333)
      v62 = 0x666666666666666;
    else
      v62 = v60;
    if (v62)
    {
      if (v62 > 0x666666666666666)
        sub_1BE61F100();
      v7 = (ChatBubbleRegressor *)operator new(40 * v62);
    }
    else
    {
      v7 = 0;
    }
    v63 = (char *)v7 + 8 * ((uint64_t)&v14[-v15] >> 3);
    v64 = *(_OWORD *)v15;
    v65 = *(_OWORD *)(v15 + 16);
    *((_QWORD *)v63 + 4) = *(_QWORD *)(v15 + 32);
    *(_OWORD *)v63 = v64;
    *((_OWORD *)v63 + 1) = v65;
    v59 = v63 + 40;
    if (v14 != (char *)v15)
    {
      do
      {
        v66 = *(_OWORD *)(v14 - 40);
        v67 = *(_OWORD *)(v14 - 24);
        *(_QWORD *)(v63 - 11) = *(_QWORD *)(v14 - 11);
        *(_OWORD *)(v63 - 24) = v67;
        *(_OWORD *)(v63 - 40) = v66;
        v63 -= 40;
        v14 -= 40;
      }
      while (v14 != (char *)v15);
      v14 = (char *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v63;
    *((_QWORD *)this + 7) = v59;
    *((_QWORD *)this + 8) = (char *)v7 + 40 * v62;
    if (v14)
      operator delete(v14);
  }
  else
  {
    v57 = *(_OWORD *)v15;
    v58 = *(_OWORD *)(v15 + 16);
    *((_QWORD *)v14 + 4) = *(_QWORD *)(v15 + 32);
    *(_OWORD *)v14 = v57;
    *((_OWORD *)v14 + 1) = v58;
    v59 = v14 + 40;
  }
  *((_QWORD *)this + 7) = v59;
  v68 = (double *)*((_QWORD *)this + 6);
  v69 = 0xCCCCCCCCCCCCCCCDLL * ((v59 - (char *)v68) >> 3) - 1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v59 - (char *)v68) >> 3) == 1)
  {
    *((_QWORD *)this + 7) = v59 - 40;
LABEL_75:
    v100 = ChatBubbleRegressor::provideAnAnswer(v7, v5, v9, v10, v11, v12);
    goto LABEL_76;
  }
  v70 = 0;
  v73 = *v68;
  v72 = v68[1];
  v71 = v68 + 6;
  v74 = 0.0;
  v75 = 0.0;
  v76 = 0.0;
  do
  {
    *((_DWORD *)v71 - 7) = v70;
    v78 = *((double *)v71 - 1);
    v77 = *(double *)v71;
    v79 = v73 * *(double *)v71 - v78 * v72;
    v80 = v73 + v78;
    v81 = v72 + *(double *)v71;
    v74 = v74 + v79;
    v75 = v75 + (float)(v80 * v79);
    v71 += 5;
    v76 = v76 + (float)(v81 * v79);
    v72 = v77;
    v73 = v78;
    ++v70;
  }
  while (v69 != v70);
  *((_QWORD *)this + 7) = v59 - 40;
  if (v74 == 0.0)
    goto LABEL_75;
  v82 = v74 * 3.0;
  v83 = (float)(v75 / v82);
  v84 = (float)(v76 / v82);
  v289.f64[0] = v83;
  v289.f64[1] = v84;
  objc_msgSend_bounds(v5, v8, v9, v10, v11, v12);
  v37 = v87 <= v83;
  v89 = v87 + v88;
  if (!v37 || v85 > v84 || v89 < v83 || v85 + v86 < v84)
  {
    v102 = (char *)*((_QWORD *)this + 6);
    v101 = (_BYTE *)*((_QWORD *)this + 7);
    v103 = v101 - v102;
    v93 = (v101 - v102) >> 3;
    v104 = 0xCCCCCCCCCCCCCCCDLL * v93;
    v94 = (0xCCCCCCCCCCCCCCCDLL * v93) >> 2;
    v95 = (unint64_t)(0x6666666666666667 * v93) >> 2;
    v96 = v95 - v94;
    if (v95 <= v94)
    {
      v97 = 0uLL;
      v98 = 0.0;
    }
    else
    {
      if (v96 >= 2)
      {
        v99 = v94 + (v96 & 0xFFFFFFFFFFFFFFFELL);
        v105 = &v102[40 * v94];
        v97 = 0uLL;
        v98 = 0.0;
        v106 = v96 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v98 = (float)(v98 + 1.0) + 1.0;
          v97 = vaddq_f64(vaddq_f64(v97, *(float64x2_t *)v105), *(float64x2_t *)(v105 + 40));
          v105 += 80;
          v106 -= 2;
        }
        while (v106);
        if (v96 == (v96 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_84;
      }
      else
      {
        v97 = 0uLL;
        v98 = 0.0;
        v99 = v94;
      }
      v107 = v95 - v99;
      v108 = &v102[40 * v99];
      do
      {
        v109 = *(float64x2_t *)v108;
        v108 += 40;
        v97 = vaddq_f64(v97, v109);
        v98 = v98 + 1.0;
        --v107;
      }
      while (v107);
    }
LABEL_84:
    v289 = vdivq_f64(v97, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v98), 0));
    goto LABEL_85;
  }
  v102 = (char *)*((_QWORD *)this + 6);
  v101 = (_BYTE *)*((_QWORD *)this + 7);
  v103 = v101 - v102;
  v104 = 0xCCCCCCCCCCCCCCCDLL * ((v101 - v102) >> 3);
LABEL_85:
  v285 = 0;
  v286 = 0;
  __p = 0;
  if (v101 != v102)
  {
    if (v104 > 0x666666666666666)
      sub_1BE61F930();
    __p = operator new(v103);
    v286 = (char *)__p + 40 * v104;
    memcpy(__p, v102, v103 - 3);
    v285 = v286;
  }
  sub_1BE629CD4((uint64_t *)&__p, (uint64_t)&v287);
  v114 = *v6;
  if (*v6)
  {
    *((_QWORD *)this + 10) = v114;
    operator delete(v114);
    *v6 = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  v115 = v287;
  *((_QWORD *)this + 9) = v287;
  v116 = (double *)v288;
  *((_OWORD *)this + 5) = v288;
  v288 = 0uLL;
  v287 = 0;
  v117 = (ChatBubbleRegressor *)__p;
  if (__p)
  {
    v285 = __p;
    operator delete(__p);
    v115 = (double *)*((_QWORD *)this + 9);
    v118 = (double *)*((_QWORD *)this + 10);
  }
  else
  {
    v118 = v116;
  }
  v119 = 0xCCCCCCCCCCCCCCCDLL * (v118 - v115);
  if (v119 < 7)
  {
    v100 = ChatBubbleRegressor::provideAnAnswer(v117, v5, v110, v111, v112, v113);
    goto LABEL_76;
  }
  if ((char *)v118 - (char *)v115 == 280)
  {
    v119 = 7;
  }
  else
  {
    do
    {
      v121 = *(v118 - 5);
      v120 = *(v118 - 4);
      v122 = v115[5] - v121;
      v123 = v115[6] - v120;
      v124 = (float)(v123 * v123) + (float)(v122 * v122);
      if (v124 > 0.0)
      {
        v122 = v122 / v124;
        v123 = v123 / v124;
      }
      v125 = sqrtf(v124);
      v126 = v115[1];
      v127 = ((*v115 - v121) * v123 - (v126 - v120) * v122) * v125;
      v128 = fabsf(v127);
      if (v119 - 1 < 2)
      {
        v129 = 0;
      }
      else
      {
        v129 = 0;
        v130 = v115 + 6;
        v131 = 2;
        v132 = v115[1];
        v133 = *v115;
        do
        {
          v138 = v130[4] - v133;
          v139 = v130[5] - v132;
          v140 = (float)(v139 * v139) + (float)(v138 * v138);
          if (v140 > 0.0)
          {
            v138 = v138 / v140;
            v139 = v139 / v140;
          }
          v134 = *(v130 - 1);
          v135 = *v130;
          v136 = ((v134 - v133) * v139 - (*v130 - v132) * v138) * sqrtf(v140);
          v137 = fabsf(v136);
          if (v137 < v128)
            v129 = v131 - 1;
          ++v131;
          if (v137 < v128)
            v128 = v137;
          v130 += 5;
          v132 = v135;
          v133 = v134;
        }
        while (v119 != v131);
      }
      v141 = &v115[5 * v119];
      v143 = *(v141 - 10);
      v142 = *(v141 - 9);
      v144 = *v115 - v143;
      v145 = v126 - v142;
      v146 = (float)(v145 * v145) + (float)(v144 * v144);
      if (v146 > 0.0)
      {
        v144 = v144 / v146;
        v145 = v145 / v146;
      }
      v147 = ((v121 - v143) * v145 - (v120 - v142) * v144) * sqrtf(v146);
      v148 = v119 - 1;
      if (fabsf(v147) >= v128)
        v148 = v129;
      v149 = &v115[5 * v148];
      v150 = (char *)v118 - (char *)(v149 + 5);
      if (v118 != v149 + 5)
      {
        memmove(&v115[5 * v148], v149 + 5, v150 - 3);
        v115 = (double *)*v6;
      }
      v118 = (double *)((char *)v149 + v150);
      *((_QWORD *)this + 10) = (char *)v149 + v150;
      v119 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v149 + v150 - (char *)v115) >> 3);
    }
    while (v119 > 7);
    if (v118 == v115)
    {
      v153 = -1.0;
      goto LABEL_171;
    }
  }
  v151 = 0;
  v152 = v17 + v17;
  v153 = -1.0;
  v154 = -1;
  do
  {
    v163 = &v115[5 * v151];
    v164 = *((int *)v163 + 5);
    if ((_DWORD)v164)
    {
      v166 = (double *)*((_QWORD *)this + 6);
      v165 = *((_QWORD *)this + 7);
      v167 = 0xCCCCCCCCCCCCCCCDLL * ((v165 - (uint64_t)v166) >> 3);
      if (v167 - 1 != v164)
      {
        v155 = (float64x2_t *)&v166[5 * (int)v164 - 5];
        v156 = &v166[5 * (int)v164 + 5];
LABEL_120:
        v157 = 1;
        goto LABEL_121;
      }
      v168 = v166[1];
      v169 = *(double *)(v165 - 40);
      v170 = *(double *)(v165 - 32);
      v171 = *v166 - v169;
      v172 = v168 - v170;
      v173 = sqrtf((float)(v172 * v172) + (float)(v171 * v171));
      if (v173 < v17)
      {
        v155 = (float64x2_t *)&v166[((v165 - (uint64_t)v166) >> 3) - 10];
        v156 = v166 + 10;
        goto LABEL_120;
      }
      if (v173 < v152)
      {
        v155 = (float64x2_t *)&v166[((v165 - (uint64_t)v166) >> 3) - 10];
        v156 = v166 + 5;
        goto LABEL_120;
      }
      v198 = v166[5] - *v166;
      v199 = v166[6] - v168;
      v200 = &v166[(v165 - (uint64_t)v166) >> 3];
      v201 = *(v200 - 10);
      v156 = v200 - 10;
      *(double *)&v202 = v201;
      v203 = v169 - v201;
      v204 = *((uint64_t *)v156 + 1);
      v205 = v170 - *(double *)&v204;
      v206 = (float)(v199 * v205) + (float)(v198 * v203);
      v207 = sqrtf((float)(v199 * v199) + (float)(v198 * v198));
      v208 = (float)(v205 * v205) + (float)(v203 * v203);
      if ((float)(v206 / (float)(v207 * sqrtf(v208))) <= 0.5)
      {
LABEL_146:
        v157 = 1;
        v155 = &v289;
        goto LABEL_121;
      }
      if (v208 > 0.0)
      {
        v203 = v203 / v208;
        v205 = v205 / v208;
      }
      if (v167 >= 4)
      {
        *(double *)&v209 = v203;
        v210 = v205;
        v211 = v167 - 3;
        if (v167 - 3 >= 9)
        {
          v232 = v211 & 7;
          if ((v211 & 7) == 0)
            v232 = 8;
          v233 = v211 - v232;
          v234 = (float64x2_t)vdupq_lane_s64(v202, 0);
          v235 = (float64x2_t)vdupq_lane_s64(v204, 0);
          v212 = v233 + 3;
          v236 = (float64x2_t)vdupq_lane_s64(v209, 0);
          v237 = v166 + 26;
          v238 = 0uLL;
          v239 = 0uLL;
          do
          {
            v240.f64[0] = *(v237 - 1);
            v241.f64[0] = *v237;
            v240.f64[1] = v237[4];
            v242.f64[0] = *(v237 - 11);
            v243.f64[0] = *(v237 - 10);
            v242.f64[1] = *(v237 - 6);
            v244.f64[0] = v237[19];
            v245.f64[0] = v237[20];
            v244.f64[1] = v237[24];
            v246.f64[0] = v237[9];
            v247.f64[0] = v237[10];
            v246.f64[1] = v237[14];
            v243.f64[1] = *(v237 - 5);
            v241.f64[1] = v237[5];
            v247.f64[1] = v237[15];
            v245.f64[1] = v237[25];
            v238 = vsubq_s32(v238, vcgtzq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v243, v235), v210), v236, vsubq_f64(v242, v234))), vmlaq_f64(vmulq_n_f64(vsubq_f64(v241, v235), v210), v236, vsubq_f64(v240, v234)))));
            v239 = vsubq_s32(v239, vcgtzq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v247, v235), v210), v236, vsubq_f64(v246, v234))), vmlaq_f64(vmulq_n_f64(vsubq_f64(v245, v235), v210), v236, vsubq_f64(v244, v234)))));
            v237 += 40;
            v233 -= 8;
          }
          while (v233);
          v196 = vaddvq_s32(vaddq_s32(v239, v238));
        }
        else
        {
          v196 = 0;
          v212 = 3;
        }
        v248 = v167 - v212;
        v249 = &v166[5 * v212 + 1];
        do
        {
          v250 = (*v249 - *(double *)&v204) * v210 + (*(v249 - 1) - *(double *)&v202) * *(double *)&v209;
          if (v250 > 0.0)
            ++v196;
          v249 += 5;
          --v248;
        }
        while (v248);
        goto LABEL_167;
      }
    }
    else
    {
      v174 = (double *)*((_QWORD *)this + 6);
      v175 = *((_QWORD *)this + 7);
      v176 = *v174;
      v177 = v174[1];
      v179 = *(double *)(v175 - 40);
      v178 = *(double *)(v175 - 32);
      v180 = *v174 - v179;
      v181 = v177 - v178;
      v182 = sqrtf((float)(v181 * v181) + (float)(v180 * v180));
      if (v182 < v17)
      {
        v155 = (float64x2_t *)(v175 - 80);
        v156 = v174 + 5;
        goto LABEL_120;
      }
      if (v182 < v152)
      {
        v155 = (float64x2_t *)(v175 - 40);
        v156 = v174 + 5;
        goto LABEL_120;
      }
      v156 = v174 + 5;
      v183 = *((uint64_t *)v174 + 5);
      v184 = *(double *)&v183 - v176;
      v185 = *((uint64_t *)v174 + 6);
      v186 = *(double *)&v185 - v177;
      v187 = v179 - *(double *)(v175 - 80);
      v188 = v178 - *(double *)(v175 - 72);
      if ((float)((float)((float)(v186 * v188) + (float)(v184 * v187))
                 / (float)(sqrtf((float)(v186 * v186) + (float)(v184 * v184))
                         * sqrtf((float)(v188 * v188) + (float)(v187 * v187)))) <= 0.5)
        goto LABEL_146;
      v189 = v176 - *(double *)&v183;
      v190 = v177 - *(double *)&v185;
      v191 = (float)(v190 * v190) + (float)(v189 * v189);
      if (v191 > 0.0)
      {
        v189 = v189 / v191;
        v190 = v190 / v191;
      }
      v192 = 0xCCCCCCCCCCCCCCCDLL * ((v175 - (uint64_t)v174) >> 3);
      if (v192 >= 4)
      {
        *(double *)&v193 = v189;
        v194 = v190;
        v195 = v192 - 3;
        if (v192 - 3 >= 9)
        {
          v213 = v195 & 7;
          if ((v195 & 7) == 0)
            v213 = 8;
          v214 = v195 - v213;
          v215 = (float64x2_t)vdupq_lane_s64(v183, 0);
          v216 = (float64x2_t)vdupq_lane_s64(v185, 0);
          v197 = v214 + 3;
          v217 = (float64x2_t)vdupq_lane_s64(v193, 0);
          v218 = v174 + 26;
          v219 = 0uLL;
          v220 = 0uLL;
          do
          {
            v221.f64[0] = *(v218 - 1);
            v222.f64[0] = *v218;
            v221.f64[1] = v218[4];
            v223.f64[0] = *(v218 - 11);
            v224.f64[0] = *(v218 - 10);
            v223.f64[1] = *(v218 - 6);
            v225.f64[0] = v218[19];
            v226.f64[0] = v218[20];
            v225.f64[1] = v218[24];
            v227.f64[0] = v218[9];
            v228.f64[0] = v218[10];
            v227.f64[1] = v218[14];
            v224.f64[1] = *(v218 - 5);
            v222.f64[1] = v218[5];
            v228.f64[1] = v218[15];
            v226.f64[1] = v218[25];
            v219 = vsubq_s32(v219, vcgtzq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v224, v216), v194), v217, vsubq_f64(v223, v215))), vmlaq_f64(vmulq_n_f64(vsubq_f64(v222, v216), v194), v217, vsubq_f64(v221, v215)))));
            v220 = vsubq_s32(v220, vcgtzq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v228, v216), v194), v217, vsubq_f64(v227, v215))), vmlaq_f64(vmulq_n_f64(vsubq_f64(v226, v216), v194), v217, vsubq_f64(v225, v215)))));
            v218 += 40;
            v214 -= 8;
          }
          while (v214);
          v196 = vaddvq_s32(vaddq_s32(v220, v219));
        }
        else
        {
          v196 = 0;
          v197 = 3;
        }
        v229 = v192 - v197;
        v230 = &v174[5 * v197 + 1];
        do
        {
          v231 = (*v230 - *(double *)&v185) * v194 + (*(v230 - 1) - *(double *)&v183) * *(double *)&v193;
          if (v231 > 0.0)
            ++v196;
          v230 += 5;
          --v229;
        }
        while (v229);
        goto LABEL_167;
      }
    }
    v196 = 0;
LABEL_167:
    v157 = v196 < 5;
    v155 = &v289;
LABEL_121:
    v158 = v163[1];
    v159 = v155->f64[0] - *v163;
    v160 = v155->f64[1] - v158;
    v161 = *v156 - *v163;
    *(float *)&v158 = v156[1] - v158;
    v162 = (float)((float)(v160 * *(float *)&v158) + (float)(v159 * v161))
         / (float)(sqrtf((float)(v160 * v160) + (float)(v159 * v159))
                 * sqrtf((float)(*(float *)&v158 * *(float *)&v158) + (float)(v161 * v161)));
    if (v157 && v162 > v153)
    {
      v153 = v162;
      v154 = v151;
    }
    ++v151;
  }
  while (v151 != v119);
  if (v154 == -1)
LABEL_171:
    v154 = 0;
  v251 = &v115[5 * v154];
  v252 = *v251;
  v253 = v251[1];
  v254 = v289.f64[0] - *v251;
  v283 = v289;
  v255 = v289.f64[1];
  v256 = v289.f64[1] - v253;
  v257 = (float)(v256 * v256) + (float)(v254 * v254);
  if (v257 > 0.0)
  {
    v254 = v254 / v257;
    v256 = v256 / v257;
  }
  v258 = (float64x2_t *)*((_QWORD *)this + 6);
  v259 = (float64x2_t *)*((_QWORD *)this + 7);
  if (v258 == v259)
  {
    v261 = (float32x2_t)vdup_n_s32(0xE0AD78EC);
    v262 = (float32x2_t)vdup_n_s32(0x60AD78ECu);
  }
  else
  {
    v260 = v254;
    v261 = (float32x2_t)vdup_n_s32(0xE0AD78EC);
    v262 = (float32x2_t)vdup_n_s32(0x60AD78ECu);
    v263 = v256;
    do
    {
      v264 = *v258;
      v265 = (v258->f64[1] - v253) * v263 + (v258->f64[0] - v252) * v260;
      if (v265 > 0.75)
      {
        v262 = vcvt_f32_f64(vminnmq_f64(v264, vcvtq_f64_f32(v262)));
        v261 = vcvt_f32_f64(vmaxnmq_f64(v264, vcvtq_f64_f32(v261)));
      }
      v258 = (float64x2_t *)((char *)v258 + 40);
    }
    while (v258 != v259);
  }
  v266 = operator new();
  v267 = (double *)((char *)*v6 + 40 * v154);
  v269 = *v267;
  v268 = v267[1];
  v270 = operator new();
  v271 = vcvt_f32_f64(vmaxnmq_f64(vsubq_f64(v283, vcvtq_f64_f32(v262)), vsubq_f64(vcvtq_f64_f32(v261), v283)));
  v272 = acosf(v153);
  *(_QWORD *)v270 = &unk_1E77F08B0;
  *(float64_t *)(v270 + 16) = v283.f64[0];
  *(double *)(v270 + 24) = v255;
  v273 = vcvtq_f64_f32(vadd_f32(v271, v271));
  *(float64x2_t *)(v270 + 32) = v273;
  *(_QWORD *)(v270 + 48) = 0;
  *(_QWORD *)v266 = &unk_1E77F06E8;
  *(double *)(v266 + 16) = v269;
  *(double *)(v266 + 24) = v268;
  *(double *)(v266 + 32) = v272;
  *(_QWORD *)(v266 + 40) = v270;
  *((_QWORD *)this + 5) = v266;
  v274 = v283.f64[0] - v269;
  v275 = v255 - v268;
  v276 = (float)((float)(v275 * 0.0) + v274) / (0.5 * v273.f64[0]);
  v277 = (float)-(float)(v275 - (float)(v274 * 0.0)) / vmuld_lane_f64(0.5, v273, 1);
  if ((float)((float)(v277 * v277) + (float)(v276 * v276)) <= 1.0)
  {
    *(_QWORD *)v266 = &unk_1E77F06E8;
    MEMORY[0x1C3B812EC](v270, 0x1081C406FCD2653);
    v278 = (ChatBubbleRegressor *)MEMORY[0x1C3B812EC](v266, 0x10A1C40547AA8FDLL);
    v100 = ChatBubbleRegressor::provideAnAnswer(v278, v5, v279, v280, v281, v282);
LABEL_76:
    *((_QWORD *)this + 5) = v100;
  }
LABEL_77:

}

void sub_1BE6B85E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  uint64_t v13;
  id *v14;
  void **v15;
  uint64_t v16;
  void **v17;
  void *v19;
  void *v20;

  MEMORY[0x1C3B812EC](v16, 0x10A1C40547AA8FDLL);
  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v13 + 80) = v19;
    operator delete(v19);
    v20 = *v15;
    if (!*v15)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    v20 = *v15;
    if (!*v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v13 + 56) = v20;
  operator delete(v20);

  _Unwind_Resume(a1);
}

uint64_t ChatBubbleRegressor::provideAnAnswer(ChatBubbleRegressor *this, CHDrawing *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;

  objc_msgSend_bounds(a2, (const char *)a2, a3, a4, a5, a6);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = operator new();
  v15 = operator new();
  v16 = v9 + v13;
  v17 = v7;
  v18 = v7 + v11;
  v19 = v9;
  *(_QWORD *)v15 = &unk_1E77F08B0;
  *(double *)(v15 + 16) = v18 * 0.5 + v17 * 0.5;
  *(double *)(v15 + 24) = v16 * 0.4 + v19 * 0.6;
  *(double *)(v15 + 32) = (float)(v18 - v17);
  *(double *)(v15 + 40) = (float)(v16 - v19) * 0.8;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)v14 = &unk_1E77F06E8;
  *(double *)(v14 + 16) = v18 * 0.25 + v17 * 0.75;
  *(double *)(v14 + 24) = v16;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = v15;
  return v14;
}

void sub_1BE6B87C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B812EC](v1, 0x10A1C40547AA8FDLL);
  _Unwind_Resume(a1);
}

uint64_t ChatBubbleRegressor::regressLollipop(ChatBubbleRegressor *this, int a2, int a3, int a4)
{
  float32x2_t v6;
  float32x2_t v7;
  int v8;
  _OWORD *v9;
  float64x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  uint64_t result;
  float32x2_t v17;
  double v18;
  double v19;
  float64x2_t v25;
  float v26;
  float v27;
  ChatBubbleRegressor *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a3 <= a4)
  {
    v8 = a4 - a3 + 1;
    v9 = (_OWORD *)(*((_QWORD *)this + 6) + 40 * a3);
    v6 = (float32x2_t)vdup_n_s32(0xD01502F9);
    v7 = (float32x2_t)vdup_n_s32(0x501502F9u);
    do
    {
      v10 = *(float64x2_t *)v9;
      v9 = (_OWORD *)((char *)v9 + 40);
      v11 = vcvt_f32_f64(v10);
      v7 = vminnm_f32(v11, v7);
      v6 = vmaxnm_f32(v11, v6);
      --v8;
    }
    while (v8);
  }
  else
  {
    v6 = (float32x2_t)vdup_n_s32(0xD01502F9);
    v7 = (float32x2_t)vdup_n_s32(0x501502F9u);
  }
  v12 = operator new();
  v13 = (double *)(*((_QWORD *)this + 6) + 40 * a2);
  v15 = *v13;
  v14 = v13[1];
  result = operator new();
  v17 = vsub_f32(v6, v7);
  v18 = v17.f32[0];
  v19 = v17.f32[1];
  *(_QWORD *)result = &unk_1E77F08B0;
  __asm { FMOV            V4.2D, #0.5 }
  v25 = vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v6), _Q4), _Q4, vcvtq_f64_f32(v7));
  *(float64x2_t *)(result + 16) = v25;
  *(double *)(result + 32) = v18;
  *(double *)(result + 40) = v19;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)v12 = &unk_1E77F06E8;
  *(double *)(v12 + 16) = v15;
  *(double *)(v12 + 24) = v14;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = result;
  *((_QWORD *)this + 5) = v12;
  v26 = v25.f64[0] - v15;
  *(float *)v25.f64 = v25.f64[1] - v14;
  *(float *)&v18 = (float)((float)(*(float *)v25.f64 * 0.0) + v26) / (v18 * 0.5);
  v27 = (float)-(float)(*(float *)v25.f64 - (float)(v26 * 0.0)) / (v19 * 0.5);
  if ((float)((float)(v27 * v27) + (float)(*(float *)&v18 * *(float *)&v18)) <= 1.0)
  {
    *(_QWORD *)v12 = &unk_1E77F06E8;
    MEMORY[0x1C3B812EC]();
    v28 = (ChatBubbleRegressor *)MEMORY[0x1C3B812EC](v12, 0x10A1C40547AA8FDLL);
    result = ChatBubbleRegressor::provideAnAnswer(v28, *((CHDrawing **)this + 4), v29, v30, v31, v32);
    *((_QWORD *)this + 5) = result;
  }
  return result;
}

void sub_1BE6B89B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B812EC](v1, 0x10A1C40547AA8FDLL);
  _Unwind_Resume(a1);
}

void sub_1BE6B8CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1BE6B8D8C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend_strokeIndexes(v3, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectsAtIndexes_(v4, v11, (uint64_t)v10, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = (void *)objc_opt_class();
  objc_msgSend_boundsForStrokes_(v16, v17, (uint64_t)v15, v18, v19, v20);
  v34[0] = v21;
  v34[1] = v22;
  v34[2] = v23;
  v34[3] = v24;
  v25 = *(void **)(a1 + 40);
  objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E0CB3B18], v26, (uint64_t)v34, (uint64_t)"{CGRect={CGPoint=dd}{CGSize=dd}}", v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v25, v30, (uint64_t)v29, v31, v32, v33);

}

void sub_1BE6B8E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6B8E58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6B8E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6B8E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6B8E90(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  if ((objc_msgSend_strokeAttributes(v14, v5, v6, v7, v8, v9) & 4) != 0)
    objc_msgSend_addIndex_(*(void **)(a1 + 32), v10, a3, v11, v12, v13);

}

void sub_1BE6B8ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6B9308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;

  v32 = v27;
  v33 = v25;

  _Unwind_Resume(a1);
}

void sub_1BE6B9588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE6B9894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6B9AC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE6B9B28(void *a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL4 v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t j;
  void *v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const __CFString *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  const __CFString *v184;
  __CFString *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  double v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  id obj;
  uint64_t i;
  id v207;
  id v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  void (**v212)(id, void *, void *);
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  uint64_t v217;
  void *v218;
  void *v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  _BYTE v232[128];
  _BYTE v233[128];
  _BYTE v234[128];
  uint64_t v235;

  v235 = *MEMORY[0x1E0C80C00];
  v208 = a2;
  v212 = a3;
  v214 = a1;
  if (!a1)
  {
    v210 = 0;
    goto LABEL_51;
  }
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v5, v6, v7, v8, v9);
  v210 = (id)objc_claimAutoreleasedReturnValue();
  v230 = 0u;
  v231 = 0u;
  v228 = 0u;
  v229 = 0u;
  objc_msgSend_locales(a1, v10, v11, v12, v13, v14);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v202 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v15, (uint64_t)&v228, (uint64_t)v234, 16, v16);
  if (!v202)
    goto LABEL_50;
  v203 = *(_QWORD *)v229;
  do
  {
    for (i = 0; i != v202; ++i)
    {
      if (*(_QWORD *)v229 != v203)
        objc_enumerationMutation(obj);
      v215 = *(void **)(*((_QWORD *)&v228 + 1) + 8 * i);
      objc_msgSend_localeIdentifier(v215, v17, v18, v19, v20, v21);
      v204 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendFormat_(v210, v22, (uint64_t)CFSTR("== %@ ==\n"), v23, v24, v25, v204);
      v226 = 0u;
      v227 = 0u;
      v224 = 0u;
      v225 = 0u;
      objc_msgSend_strokeGroupingResult(v214, v26, v27, v28, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_strokeGroupsSortedBy_textGroupsOnly_(v31, v32, 0, 1, v33, v34);
      v207 = (id)objc_claimAutoreleasedReturnValue();

      v211 = objc_msgSend_countByEnumeratingWithState_objects_count_(v207, v35, (uint64_t)&v224, (uint64_t)v233, 16, v36);
      if (v211)
      {
        v209 = *(_QWORD *)v225;
        do
        {
          v217 = 0;
          do
          {
            if (*(_QWORD *)v225 != v209)
              objc_enumerationMutation(v207);
            v42 = *(void **)(*((_QWORD *)&v224 + 1) + 8 * v217);
            v43 = objc_msgSend_uniqueIdentifier(v42, v37, v38, v39, v40, v41);
            objc_msgSend_recognitionResultForStrokeGroupIdentifier_(v214, v44, v43, v45, v46, v47);
            v218 = (void *)objc_claimAutoreleasedReturnValue();
            v53 = objc_msgSend_uniqueIdentifier(v42, v48, v49, v50, v51, v52);
            objc_msgSend_textCorrectionResultForStrokeGroupIdentifier_(v214, v54, v53, v55, v56, v57);
            v216 = (void *)objc_claimAutoreleasedReturnValue();
            if (v218)
            {
              objc_msgSend_recognitionResultsByLocale(v218, v58, v59, v60, v61, v62);
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectForKeyedSubscript_(v63, v64, (uint64_t)v215, v65, v66, v67);
              v68 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_errorsByLocale(v218, v69, v70, v71, v72, v73);
              v74 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectForKeyedSubscript_(v74, v75, (uint64_t)v215, v76, v77, v78);
              v219 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              if (!v216)
              {
                v219 = 0;
                v68 = 0;
                goto LABEL_17;
              }
              objc_msgSend_textCorrectionResult(v216, v58, v59, v60, v61, v62);
              v79 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_textResult(v79, v80, v81, v82, v83, v84);
              v68 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_textCorrectionResult(v216, v85, v86, v87, v88, v89);
              v74 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_error(v74, v90, v91, v92, v93, v94);
              v219 = (void *)objc_claimAutoreleasedReturnValue();
            }

LABEL_17:
            objc_msgSend_string(MEMORY[0x1E0CB37A0], v58, v59, v60, v61, v62);
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v212 || (v212[2](v212, v42, v215), (v101 = objc_claimAutoreleasedReturnValue()) == 0))
            {
              v102 = (void *)MEMORY[0x1E0CB3940];
              v103 = objc_msgSend_uniqueIdentifier(v42, v95, v96, v97, v98, v99);
              objc_msgSend_stringWithFormat_(v102, v104, (uint64_t)CFSTR("GroupID %ld"), v105, v106, v107, v103);
              v101 = objc_claimAutoreleasedReturnValue();
            }
            objc_msgSend_appendFormat_(v100, v95, (uint64_t)CFSTR("%@: {\n  "), v97, v98, v99, v101);
            v213 = (void *)v101;
            if (v68)
            {
              objc_msgSend_transcriptionPaths(v68, v108, v109, v110, v111, v112);
              v113 = (void *)objc_claimAutoreleasedReturnValue();
              v119 = objc_msgSend_count(v113, v114, v115, v116, v117, v118) == 0;

              if (v119)
                objc_msgSend_appendFormat_(v100, v120, (uint64_t)CFSTR("%@"), v122, v123, v124, CFSTR("<NO RESULT>\n"));
              v222 = 0u;
              v223 = 0u;
              v220 = 0u;
              v221 = 0u;
              objc_msgSend_transcriptionPaths(v68, v120, v121, v122, v123, v124);
              v125 = (void *)objc_claimAutoreleasedReturnValue();
              v133 = objc_msgSend_countByEnumeratingWithState_objects_count_(v125, v126, (uint64_t)&v220, (uint64_t)v232, 16, v127);
              if (v133)
              {
                v134 = *(_QWORD *)v221;
                do
                {
                  for (j = 0; j != v133; ++j)
                  {
                    if (*(_QWORD *)v221 != v134)
                      objc_enumerationMutation(v125);
                    v136 = *(void **)(*((_QWORD *)&v220 + 1) + 8 * j);
                    objc_msgSend_transcriptionPaths(v68, v128, v129, v130, v131, v132);
                    v137 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_lastObject(v137, v138, v139, v140, v141, v142);
                    v143 = (void *)objc_claimAutoreleasedReturnValue();

                    v149 = objc_msgSend_length(v136, v144, v145, v146, v147, v148);
                    objc_msgSend_transcriptionWithPath_columnRange_filterLowConfidence_(v68, v150, (uint64_t)v136, 0, v149, 0);
                    v151 = objc_claimAutoreleasedReturnValue();
                    v156 = (void *)v151;
                    v157 = CFSTR(", ");
                    if (v136 == v143)
                      v157 = CFSTR("\n");
                    objc_msgSend_appendFormat_(v100, v152, (uint64_t)CFSTR("\"%@\"%@"), v153, v154, v155, v151, v157);

                  }
                  v133 = objc_msgSend_countByEnumeratingWithState_objects_count_(v125, v128, (uint64_t)&v220, (uint64_t)v232, 16, v132);
                }
                while (v133);
              }
            }
            else
            {
              if (!v219)
              {
                objc_msgSend_appendFormat_(v100, v108, (uint64_t)CFSTR("%@"), v110, v111, v112, CFSTR("<NO RESULT>\n"));
                goto LABEL_36;
              }
              objc_msgSend_localizedDescription(v219, v108, v109, v110, v111, v112);
              v125 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_appendFormat_(v100, v158, (uint64_t)CFSTR("<ERROR: %@>\n"), v159, v160, v161, v125);
            }

LABEL_36:
            objc_msgSend_appendFormat_(v100, v162, (uint64_t)CFSTR("},\n"), v163, v164, v165);
            if (v68)
            {
              objc_msgSend_transcriptionPaths(v68, v166, v167, v168, v169, v170);
              v171 = (void *)objc_claimAutoreleasedReturnValue();
              v177 = objc_msgSend_count(v171, v172, v173, v174, v175, v176) == 0;

              if (!v177)
              {
                v179 = objc_msgSend_recognizerGenerationIdentifier(v68, v166, v178, v168, v169, v170);
                v184 = CFSTR("Gen 1");
                if (v179 == 2)
                  v184 = CFSTR("Gen 2");
                objc_msgSend_appendFormat_(v100, v180, (uint64_t)CFSTR("Recognizer Generation: %@\n"), v181, v182, v183, v184);
                v185 = CFSTR("None");
                objc_msgSend_languageFitnessForLocale_(v218, v186, (uint64_t)v215, v187, v188, v189);
                if (v194 > -3.40282347e38)
                {
                  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v190, (uint64_t)CFSTR("(%.3f, %.3f)"), v191, v192, v193, *(_QWORD *)&v194, v195);
                  v185 = (__CFString *)objc_claimAutoreleasedReturnValue();
                }
                objc_msgSend_appendFormat_(v100, v190, (uint64_t)CFSTR("Language Fitness: %@\n\n"), v191, v192, v193, v185);

              }
            }
            objc_msgSend_appendString_(v210, v166, (uint64_t)v100, v168, v169, v170);
            objc_msgSend_addObject_(v208, v196, (uint64_t)v100, v197, v198, v199);

            ++v217;
          }
          while (v217 != v211);
          v200 = objc_msgSend_countByEnumeratingWithState_objects_count_(v207, v37, (uint64_t)&v224, (uint64_t)v233, 16, v41);
          v211 = v200;
        }
        while (v200);
      }

    }
    v202 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v17, (uint64_t)&v228, (uint64_t)v234, 16, v21);
  }
  while (v202);
LABEL_50:

LABEL_51:
  return v210;
}

void sub_1BE6BA1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1BE6BA3AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE6BA3BC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v4 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0CB3940];
  v12 = objc_msgSend_uniqueIdentifier(v4, v7, v8, v9, v10, v11);
  objc_msgSend_localeIdentifier(v5, v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v6, v19, (uint64_t)CFSTR("GroupID %ld, %@"), v20, v21, v22, v12, v18);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  return v23;
}

void sub_1BE6BA450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BA468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BAB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1BE6BAD24(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int isEqualToString;
  id v55;

  v3 = a2;
  v4 = (void *)a1[4];
  v55 = v3;
  objc_msgSend_strokeIndexes(v3, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addIndexes_(v4, v11, (uint64_t)v10, v12, v13, v14);

  objc_msgSend_string(v55, v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (isSymbolStructural((NSString *)v20))
  {

  }
  else
  {
    objc_msgSend_strokeIndexes(v55, v21, v22, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend_count(v26, v27, v28, v29, v30, v31);

    if (v32)
    {

    }
    else
    {
      objc_msgSend_string(v55, v33, v34, v35, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_isEqualToString_(v38, v39, (uint64_t)CFSTR("="), v40, v41, v42))
      {

        v48 = a1[5];
      }
      else
      {
        objc_msgSend_string(v55, v43, v44, v45, v46, v47);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        isEqualToString = objc_msgSend_isEqualToString_(v49, v50, (uint64_t)CFSTR("\\hline"), v51, v52, v53);

        if (isEqualToString)
          v48 = a1[5];
        else
          v48 = a1[6];
      }
      *(_BYTE *)(*(_QWORD *)(v48 + 8) + 24) = 1;

    }
  }
}

void sub_1BE6BAE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6BAE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6BAEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6BAEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6BAF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BAF54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BAFCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BAFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BB058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BB06C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BB1F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BB5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE6BBDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE6BCB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6BCDF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_isEquivalentToStrokeGroup_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4, a5, a6);
}

void sub_1BE6BCF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6BCF90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6BCFAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BCFC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BCFD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BCFEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BCFFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BD2D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v9 = v7;

  _Unwind_Resume(a1);
}

void sub_1BE6BD3BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BD620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6BD634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6BD678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6BDCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_1BE6BE318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BE328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BE338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BE348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BE358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BE368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BE378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE3A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE3D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE3E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE3FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE4AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE4C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE4F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BE51C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BE62C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6BE650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BE664(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BE8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE6BEB68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BEB80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6BEB98(uint64_t a1, const char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a3, a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE6BEBE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BEC6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BEC8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BED48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BED5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BED6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BEE34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BEE44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BEEA0()
{
  void *v0;

  v0 = (void *)qword_1EF568020;
  qword_1EF568020 = (uint64_t)&unk_1E7827CB0;

}

void sub_1BE6BEF04()
{
  void *v0;

  v0 = (void *)qword_1EF568030;
  qword_1EF568030 = (uint64_t)&unk_1E7827CC8;

}

void sub_1BE6BEF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6BEF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6BF0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BF1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BF214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BF228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BF2A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BF398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BF4D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE6BF5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BF5B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6BF5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BF658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6BF674(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6BF68C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t isStrokeClassificationTextOrMath;

  v3 = a3;
  v4 = (void *)objc_opt_class();
  v10 = objc_msgSend_integerValue(v3, v5, v6, v7, v8, v9);
  isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(v4, v11, v10, v12, v13, v14);

  return isStrokeClassificationTextOrMath;
}

void sub_1BE6BF6DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6BF8D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6BFA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6BFA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6BFDD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1BE6C00B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C0144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C015C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C0170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C03B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE6C05C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C05E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C0640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C0658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C0670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C0684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C06A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C06B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C06CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C093C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C0EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C11E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6C13A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C13B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C13DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE6C13F0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  if (!a1)
    return 0;
  if ((a2 & 1) != 0)
    objc_msgSend_textStrokeGroups(a1, a2, a3, a4, a5, a6);
  else
    objc_msgSend_strokeGroups(a1, a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allObjects(v6, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sortedArrayUsingComparator_(v12, v13, (uint64_t)&unk_1E77F3390, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_1BE6C1474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C1498(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double MinY;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double MidY;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double MaxY;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double MinX;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v4 = a2;
  v5 = a3;
  objc_msgSend_bounds(v4, v6, v7, v8, v9, v10);
  MinY = CGRectGetMinY(v56);
  objc_msgSend_bounds(v4, v12, v13, v14, v15, v16);
  MidY = CGRectGetMidY(v57);
  objc_msgSend_bounds(v4, v18, v19, v20, v21, v22);
  MaxY = CGRectGetMaxY(v58);
  objc_msgSend_bounds(v4, v24, v25, v26, v27, v28);
  MinX = CGRectGetMinX(v59);
  objc_msgSend_bounds(v5, v30, v31, v32, v33, v34);
  v35 = CGRectGetMinY(v60);
  objc_msgSend_bounds(v5, v36, v37, v38, v39, v40);
  v41 = CGRectGetMidY(v61);
  objc_msgSend_bounds(v5, v42, v43, v44, v45, v46);
  v47 = CGRectGetMaxY(v62);
  objc_msgSend_bounds(v5, v48, v49, v50, v51, v52);
  v53 = CGRectGetMinX(v63);
  v54 = 1;
  if (MidY <= v47 && MinY <= v41)
  {
    v54 = -1;
    if (v41 <= MaxY && v35 <= MidY)
    {
      if (MinX > v53)
        v54 = 1;
      else
        v54 = -1;
    }
  }

  return v54;
}

void sub_1BE6C15A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C15BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C15D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C15E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C15F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C160C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE6C1648(id a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  long double v23;
  long double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v94;
  _QWORD v95[5];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[128];
  uint64_t v101;

  v94 = (char)a2;
  v6 = a1;
  v101 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return v6;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  objc_msgSend_textStrokeGroups(a1, a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v96, (uint64_t)v100, 16, v9);
  if (!v15)
  {

    v59 = 0;
    v61 = 0;
    v18 = 0;
    v17 = 0;
LABEL_27:
    v60 = 0;
    v16 = v59;
    v59 = v61;
    goto LABEL_28;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)v97;
  do
  {
    v21 = 0;
    do
    {
      if (*(_QWORD *)v97 != v20)
        objc_enumerationMutation(v7);
      v22 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * v21);
      objc_msgSend_averageWritingOrientation(v22, v10, v11, v12, v13, v14);
      v30 = atan2(v24, v23);
      v31 = fabs(v30);
      if (v31 <= 0.785398163)
      {
        objc_msgSend_strokeIdentifiers(v22, v25, v26, v27, v28, v29);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v19 += objc_msgSend_count(v32, v38, v39, v40, v41, v42);
      }
      else if (v31 <= 2.35619449)
      {
        if (v30 >= 0.0)
        {
          objc_msgSend_strokeIdentifiers(v22, v25, v26, v27, v28, v29);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v18 += objc_msgSend_count(v32, v48, v49, v50, v51, v52);
        }
        else
        {
          objc_msgSend_strokeIdentifiers(v22, v25, v26, v27, v28, v29);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v17 += objc_msgSend_count(v32, v43, v44, v45, v46, v47);
        }
      }
      else
      {
        objc_msgSend_strokeIdentifiers(v22, v25, v26, v27, v28, v29);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v16 += objc_msgSend_count(v32, v33, v34, v35, v36, v37);
      }

      ++v21;
    }
    while (v15 != v21);
    v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v96, (uint64_t)v100, 16, v14);
    v15 = v53;
  }
  while (v53);

  if (v19 < 0)
    v59 = -1;
  else
    v59 = v19;
  if (v16 <= v59)
  {
    if (v16 < 0)
      v61 = -1;
    else
      v61 = v16;
    if (v19 < 0)
    {
      v60 = 0;
      v16 = v59;
      v59 = -1;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v60 = 1;
LABEL_28:
  if (v17 <= v59)
    v62 = v59;
  else
    v62 = v17;
  if (v16 < 0)
    v63 = -1;
  else
    v63 = v16;
  if (v16 >= 0)
    v59 = v62;
  if (v17 <= v16)
  {
    v64 = v63;
  }
  else
  {
    v60 = 2;
    v64 = v17;
  }
  if (v17 > v16)
    v59 = v16;
  if (v18 <= v59)
    v65 = v59;
  else
    v65 = v18;
  if (v64 < 0)
    v66 = -1;
  else
    v66 = v64;
  if (v64 < 0)
    v65 = v59;
  if (v18 <= v64)
    v67 = v60;
  else
    v67 = 3;
  if (v18 <= v64)
    v68 = v66;
  else
    v68 = v18;
  if (v18 <= v64)
    v69 = v65;
  else
    v69 = v64;
  if (v69 >= 1 && (double)v68 / (double)v69 < 1.2)
  {
    v70 = (void *)MEMORY[0x1E0C99DC8];
    objc_msgSend_preferredLanguages(MEMORY[0x1E0C99DC8], v54, v55, v56, v57, v58);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_firstObject(v71, v72, v73, v74, v75, v76);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_lineDirectionForLanguage_(v70, v78, (uint64_t)v77, v79, v80, v81);

    v67 = 0;
  }
  if ((v94 & 1) != 0)
    objc_msgSend_textStrokeGroups(v6, v54, v55, v56, v57, v58);
  else
    objc_msgSend_strokeGroups(v6, v54, v55, v56, v57, v58);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allObjects(v82, v83, v84, v85, v86, v87);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  v95[0] = MEMORY[0x1E0C809B0];
  v95[1] = 3221225472;
  v95[2] = sub_1BE6C1A20;
  v95[3] = &unk_1E77F33B0;
  v95[4] = v67;
  objc_msgSend_sortedArrayUsingComparator_(v88, v89, (uint64_t)v95, v90, v91, v92);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1BE6C19A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C1A20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  double MinX;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double MidX;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double MaxX;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double MinY;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double MidY;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double MaxY;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  double v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;

  v5 = a2;
  v11 = a3;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = 1;
  switch(v12)
  {
    case 3:
      goto LABEL_7;
    case 2:
      v13 = -1;
LABEL_7:
      objc_msgSend_bounds(v5, v6, v7, v8, v9, v10);
      MinX = CGRectGetMinX(v146);
      objc_msgSend_bounds(v5, v50, v51, v52, v53, v54);
      MidX = CGRectGetMidX(v147);
      objc_msgSend_bounds(v5, v55, v56, v57, v58, v59);
      MaxX = CGRectGetMaxX(v148);
      objc_msgSend_bounds(v11, v60, v61, v62, v63, v64);
      MinY = CGRectGetMinX(v149);
      objc_msgSend_bounds(v11, v65, v66, v67, v68, v69);
      MidY = CGRectGetMidX(v150);
      objc_msgSend_bounds(v11, v70, v71, v72, v73, v74);
      MaxY = CGRectGetMaxX(v151);
      goto LABEL_8;
    case 1:
      v13 = -1;
      break;
  }
  objc_msgSend_bounds(v5, v6, v7, v8, v9, v10);
  MinX = CGRectGetMinY(v140);
  objc_msgSend_bounds(v5, v15, v16, v17, v18, v19);
  MidX = CGRectGetMidY(v141);
  objc_msgSend_bounds(v5, v21, v22, v23, v24, v25);
  MaxX = CGRectGetMaxY(v142);
  objc_msgSend_bounds(v11, v27, v28, v29, v30, v31);
  MinY = CGRectGetMinY(v143);
  objc_msgSend_bounds(v11, v33, v34, v35, v36, v37);
  MidY = CGRectGetMidY(v144);
  objc_msgSend_bounds(v11, v39, v40, v41, v42, v43);
  MaxY = CGRectGetMaxY(v145);
LABEL_8:
  v75 = 1;
  if (MidX <= MaxY && MinX <= MidY)
  {
    v75 = -1;
    if (MidY <= MaxX && MinY <= MidX)
    {
      objc_msgSend_firstStrokeOrigin(v5, v44, v45, v46, v47, v48);
      v77 = v76;
      objc_msgSend_firstStrokeOrigin(v5, v78, v79, v80, v81, v82);
      v84 = v83;
      objc_msgSend_firstStrokeOrigin(v5, v85, v86, v87, v88, v89);
      v91 = v90;
      objc_msgSend_firstStrokeOrigin(v5, v92, v93, v94, v95, v96);
      v98 = v97;
      objc_msgSend_firstStrokeOrigin(v11, v99, v100, v101, v102, v103);
      v105 = v104;
      objc_msgSend_firstStrokeOrigin(v11, v106, v107, v108, v109, v110);
      v112 = v111;
      objc_msgSend_firstStrokeOrigin(v11, v113, v114, v115, v116, v117);
      v119 = v118;
      objc_msgSend_firstStrokeOrigin(v11, v120, v121, v122, v123, v124);
      v130 = (v91 * v98 + v77 * v84) * (double)v13;
      v132 = (v119 * v131 + v105 * v112) * (double)v13;
      if (v130 >= v132)
      {
        if (v130 <= v132)
        {
          v133 = objc_msgSend_uniqueIdentifier(v5, v125, v126, v127, v128, v129);
          if (v133 < objc_msgSend_uniqueIdentifier(v11, v134, v135, v136, v137, v138))
            v75 = -1;
          else
            v75 = 1;
        }
        else
        {
          v75 = 1;
        }
      }
    }
  }

  return v75;
}

void sub_1BE6C1C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE6C1D04(id a1, int a2)
{
  id v2;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CHCTLD *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1;
  if (a1)
  {
    v9 = objc_alloc_init(CHCTLD);
    if (a2)
      objc_msgSend_textStrokeGroups(v2, v4, v5, v6, v7, v8);
    else
      objc_msgSend_strokeGroups(v2, v4, v5, v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allObjects(v10, v11, v12, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_orderStrokeGroups_(v9, v17, (uint64_t)v16, v18, v19, v20);
    v2 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

void sub_1BE6C1DA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1DC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C1DD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C1F44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE6C1FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6C2008(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE6C21D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6C2588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE6C2674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6C2690(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C26A8(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t isStrokeClassificationTextOrMath;

  v2 = a2;
  v3 = (void *)objc_opt_class();
  v9 = objc_msgSend_classification(v2, v4, v5, v6, v7, v8);
  isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(v3, v10, v9, v11, v12, v13);

  return isStrokeClassificationTextOrMath;
}

void sub_1BE6C26F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C3298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE6C3650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C3810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C3864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C387C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C3890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C3ABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C3AD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C3B50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C3B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C3BE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C3BF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C41B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  objc_sync_exit(v18);
  _Unwind_Resume(a1);
}

void sub_1BE6C4420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C4438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C444C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C445C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C44F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C450C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C4524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C48B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v5;

  _Unwind_Resume(a1);
}

id sub_1BE6C4954(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_1BE6C4970(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1BE6C4AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6C4AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE6C4ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE6C4AF0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29[2];
  _QWORD v30[2];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend_getValue_(v6, v7, (uint64_t)v29, v8, v9, v10);
  v30[0] = CFSTR("rawScore");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v11, v12, v13, v14, v15, v29[0]);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v30[1] = CFSTR("combinedScore");
  v31[0] = v16;
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v17, v18, v19, v20, v21, v29[1]);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v31[1] = v22;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v23, (uint64_t)v31, (uint64_t)v30, 2, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v26, (uint64_t)v25, (uint64_t)v5, v27, v28);

}

void sub_1BE6C4BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6C5120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE6C525C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];

  v5 = a2;
  v6 = a3;
  objc_msgSend_objectForKeyedSubscript_(v6, v7, (uint64_t)CFSTR("rawScore"), v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_doubleValue(v11, v12, v13, v14, v15, v16);
  v18 = v17;

  objc_msgSend_objectForKeyedSubscript_(v6, v19, (uint64_t)CFSTR("combinedScore"), v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_doubleValue(v23, v24, v25, v26, v27, v28);
  v30 = v29;

  v38[0] = v18;
  v38[1] = v30;
  objc_msgSend_value_withObjCType_(MEMORY[0x1E0CB3B18], v31, (uint64_t)v38, (uint64_t)"{?=dd}", v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v35, (uint64_t)v34, (uint64_t)v5, v36, v37);

}

void sub_1BE6C532C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C5374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C5388(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v5 = a2;
  v6 = a3;
  objc_msgSend_doubleValue(v6, v7, v8, v9, v10, v11);
  v20[0] = v12;
  v20[1] = 0;
  objc_msgSend_value_withObjCType_(MEMORY[0x1E0CB3B18], v13, (uint64_t)v20, (uint64_t)"{?=dd}", v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v17, (uint64_t)v16, (uint64_t)v5, v18, v19);

}

void sub_1BE6C5410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C5428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C543C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C5664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C56F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C5708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C571C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C5964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE6C5B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C5BE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v50[2];
  double v51[2];

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v7, a2, v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v11, v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v6, v18, (uint64_t)v17, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getValue_(v22, v23, (uint64_t)v51, v24, v25, v26);

  v27 = *(void **)(a1 + 32);
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 40), v28, (uint64_t)v5, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v32, v33, v34, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v27, v39, (uint64_t)v38, v40, v41, v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getValue_(v43, v44, (uint64_t)v50, v45, v46, v47);

  if (v51[0] - v50[0] <= 0.00499999989)
    v48 = v51[0] - v50[0] < -0.00499999989;
  else
    v48 = -1;

  return v48;
}

void sub_1BE6C5CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C5D18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C5D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C5D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C5D54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C5D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C5D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C5D9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C5FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C6088(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  double v27[2];
  double v28[2];

  v5 = a3;
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getValue_(v10, v11, (uint64_t)v28, v12, v13, v14);

  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v15, (uint64_t)v5, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getValue_(v19, v20, (uint64_t)v27, v21, v22, v23);

  v24 = v28[0] - v27[0];
  if (v24 <= 0.005)
    v25 = v24 < -0.005;
  else
    v25 = -1;

  return v25;
}

void sub_1BE6C6154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C617C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C618C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  double v27;
  double v28;
  double v29;

  v5 = a3;
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getValue_(v10, v11, (uint64_t)&v28, v12, v13, v14);

  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v15, (uint64_t)v5, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getValue_(v19, v20, (uint64_t)&v26, v21, v22, v23);

  if (v28 - v26 > 0.1)
    goto LABEL_4;
  if (v28 - v26 < -0.1)
  {
LABEL_6:
    v24 = 1;
    goto LABEL_7;
  }
  if (v29 - v27 <= 0.00499999989)
  {
    if (v29 - v27 >= -0.00499999989)
    {
      v24 = 0;
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_4:
  v24 = -1;
LABEL_7:

  return v24;
}

void sub_1BE6C6278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C628C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C629C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C62B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C62C0(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;

  v4 = a2;
  v5 = a3;
  objc_opt_self();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BE6C6394;
  v13[3] = &unk_1E77F3540;
  v6 = v4;
  v14 = v6;
  v11 = objc_msgSend_indexOfObjectPassingTest_(v5, v7, (uint64_t)v13, v8, v9, v10);

  return v11;
}

void sub_1BE6C6364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE6C6380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C6394(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t hasPrefix;

  objc_msgSend_languageCode(a2, (const char *)a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  hasPrefix = objc_msgSend_hasPrefix_(v7, v8, *(_QWORD *)(a1 + 32), v9, v10, v11);

  return hasPrefix;
}

void sub_1BE6C63D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C6E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28)
{
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

unint64_t sub_1BE6C7068(uint64_t a1, const char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(void **)(a1 + 32);
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v7) = objc_msgSend_containsObject_(v7, v9, (uint64_t)v8, v10, v11, v12);

  return (a3 >> 29) & 1 | v7;
}

void sub_1BE6C70C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE6C70D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id obj;
  id v49;
  id v50;
  id v51;
  _QWORD v52[4];
  id v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v51 = a3;
  v50 = a4;
  objc_opt_self();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v7, v8, v9, v10, v11);
  v49 = (id)objc_claimAutoreleasedReturnValue();
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  obj = v6;
  v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v59, (uint64_t)v63, 16, v13);
  if (v18)
  {
    v19 = *(_QWORD *)v60;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v60 != v19)
          objc_enumerationMutation(obj);
        v21 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * i);
        objc_msgSend_objectForKey_(v51, v14, v21, v15, v16, v17);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = 0;
        v56 = &v55;
        v57 = 0x2020000000;
        v58 = 0;
        objc_msgSend_topTranscription(v22, v23, v24, v25, v26, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_topTranscription(v22, v29, v30, v31, v32, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = objc_msgSend_length(v34, v35, v36, v37, v38, v39);
        v52[0] = MEMORY[0x1E0C809B0];
        v52[1] = 3221225472;
        v52[2] = sub_1BE6C7498;
        v52[3] = &unk_1E77F35D0;
        v54 = &v55;
        v53 = v50;
        objc_msgSend_enumerateCodepointsInRange_usingBlock_(v28, v41, 0, v40, (uint64_t)v52, v42);

        if (*((_BYTE *)v56 + 24))
          objc_msgSend_addObject_(v49, v43, v21, v44, v45, v46);

        _Block_object_dispose(&v55, 8);
      }
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v59, (uint64_t)v63, 16, v17);
    }
    while (v18);
  }

  return v49;
}

void sub_1BE6C7308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C73B0(uint64_t a1, int a2, unint64_t a3)
{
  if ((a2 & 0xFFFFFFFD) == 0x14)
    return 1;
  else
    return (a3 >> 29) & 1;
}

uint64_t sub_1BE6C73C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  double v27;
  _BYTE v28[8];
  double v29;

  v5 = a3;
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v6, a2, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getValue_(v10, v11, (uint64_t)v28, v12, v13, v14);

  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v15, (uint64_t)v5, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_getValue_(v19, v20, (uint64_t)&v26, v21, v22, v23);

  if (v29 <= v27)
    v24 = v29 < v27;
  else
    v24 = -1;

  return v24;
}

void sub_1BE6C7460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C7488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C7498(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  objc_msgSend_scriptCodeForCodepoint_(CHTextInputScriptSpec, a2, (uint64_t)a2, a4, (uint64_t)a5, a6);
  objc_msgSend_characterType_(CHCharacterSetRules, v9, (uint64_t)a2, v10, v11, v12);
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  *a5 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

void sub_1BE6C7588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C75AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C8048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6C85EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C8684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C87C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C8864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C8878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C88DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6C8990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C89BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C8ABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C8AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6C8B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C8B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6C8BCC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1BE6B4610(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1BE6B4610(*(_QWORD *)a1, v2);
  }
  return a1;
}

void sub_1BE6C8C20(void **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    v16 = (char *)a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
    {
      if (a2 == a3)
      {
        v19 = (char *)*a1;
      }
      else
      {
        v19 = (char *)*a1;
        do
        {
          if ((char *)v6 != v9)
          {
            *((_DWORD *)v9 + 8) = *(_DWORD *)(v6 + 32);
            sub_1BE6C8F78(v9, *(uint64_t **)(v6 + 16), 0);
          }
          v6 += 40;
          v9 += 40;
          v19 += 40;
        }
        while (v6 != a3);
        v16 = (char *)a1[1];
      }
      while (v16 != v19)
      {
        v28 = (_QWORD *)*((_QWORD *)v16 - 3);
        if (v28)
        {
          do
          {
            v29 = (_QWORD *)*v28;
            operator delete(v28);
            v28 = v29;
          }
          while (v29);
        }
        v31 = (void *)*((_QWORD *)v16 - 5);
        v16 -= 40;
        v30 = v31;
        *(_QWORD *)v16 = 0;
        if (v31)
          operator delete(v30);
      }
      a1[1] = v19;
    }
    else
    {
      v17 = a2 + 8 * ((v16 - v9) >> 3);
      if (v16 != v9)
      {
        v18 = 8 * ((v16 - v9) >> 3);
        do
        {
          if ((char *)v6 != v9)
          {
            *((_DWORD *)v9 + 8) = *(_DWORD *)(v6 + 32);
            sub_1BE6C8F78(v9, *(uint64_t **)(v6 + 16), 0);
          }
          v6 += 40;
          v9 += 40;
          v18 -= 40;
        }
        while (v18);
        v9 = (char *)a1[1];
      }
      v26 = v9;
      if (v17 != a3)
      {
        v27 = 0;
        do
        {
          sub_1BE6B5054((uint64_t)&v9[v27], v17 + v27);
          v27 += 40;
        }
        while (v17 + v27 != a3);
        v26 = &v9[v27];
      }
      a1[1] = v26;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (char *)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (_QWORD *)*((_QWORD *)v10 - 3);
          if (v12)
          {
            do
            {
              v13 = (_QWORD *)*v12;
              operator delete(v12);
              v12 = v13;
            }
            while (v13);
          }
          v15 = (void *)*((_QWORD *)v10 - 5);
          v10 -= 40;
          v14 = v15;
          *(_QWORD *)v10 = 0;
          if (v15)
            operator delete(v14);
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_49;
    v20 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x333333333333333 ? 0x666666666666666 : v21;
    if (v22 > 0x666666666666666)
LABEL_49:
      sub_1BE61F930();
    v23 = 40 * v22;
    v24 = (char *)operator new(40 * v22);
    *a1 = v24;
    a1[1] = v24;
    a1[2] = &v24[v23];
    if (v6 != a3)
    {
      v25 = 0;
      do
      {
        sub_1BE6B5054((uint64_t)&v24[v25], v6 + v25);
        v25 += 40;
      }
      while (v6 + v25 != a3);
      v24 += v25;
    }
    a1[1] = v24;
  }
}

void sub_1BE6C8F78(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *(_QWORD *)(v8 + 16) = a2[2];
      *(_DWORD *)(v8 + 24) = *((_DWORD *)a2 + 6);
      v9 = *(_QWORD *)v8;
      sub_1BE6C90A8(a1, (uint64_t *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v11 = *(_QWORD *)v8;
      operator delete((void *)v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x20uLL);
      *(_QWORD *)v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v10 + 1) = *((_QWORD *)v10 + 2);
      sub_1BE6C90A8(a1, (uint64_t *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1BE6C9060(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BE6C9080(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BE6C9094(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE6C90A8(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = a2 + 2;
  v4 = a2[2];
  *(v5 - 1) = v4;
  v6 = sub_1BE6C91CC((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *(v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!v6)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *v6;
  *v6 = (uint64_t)a2;
  if (*a2)
  {
    v10 = *(_QWORD *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

_QWORD *sub_1BE6C91CC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD *result;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
  v16 = 1;
  if (v6 >= 3)
    v16 = (v6 & (v6 - 1)) != 0;
  v17 = v16 | (2 * v6);
  v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v6)
    goto LABEL_22;
  if (prime < v6)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
        if (prime <= v20)
          prime = v20;
        if (prime >= v6)
          goto LABEL_35;
LABEL_22:
        sub_1BE6C9454(a1, prime);
        goto LABEL_35;
      }
    }
    v23 = std::__next_prime(v20);
    if (prime <= v23)
      prime = v23;
    if (prime < v6)
      goto LABEL_22;
  }
LABEL_35:
  v6 = *(_QWORD *)(a1 + 8);
  v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      v11 = 0;
      v12 = *a3;
      while (1)
      {
        result = v10;
        v10 = (_QWORD *)*v10;
        if (!v10)
          break;
        v15 = v10[1];
        if ((v15 & v9) != (v9 & a2))
          break;
        if (v15 == a2)
        {
          v13 = v11 & (v10[2] != v12);
          v11 |= v10[2] == v12;
          if ((v13 & 1) != 0)
            return result;
        }
        else if ((v11 & 1) != 0)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  v24 = a2;
  if (v6 <= a2)
    v24 = a2 % v6;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v24);
  if (!v25)
    return 0;
  v26 = 0;
  v27 = *a3;
  while (1)
  {
    result = v25;
    v25 = (_QWORD *)*v25;
    if (!v25)
      break;
    v29 = v25[1];
    v30 = v29;
    if (v29 >= v6)
      v30 = v29 % v6;
    if (v30 != v24)
      break;
    if (v29 == a2)
    {
      v28 = v26 & (v25[2] != v27);
      v26 |= v25[2] == v27;
      if (v28 == 1)
        return result;
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_1BE6C9454(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  if (a2)
  {
    if (a2 >> 61)
      sub_1BE61F100();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v8 = a1 + 16;
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v9 = v7[1];
      v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2)
          v9 %= a2;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
        while (1)
        {
          v18 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v19 = v18[1];
          if (v19 >= a2)
            v19 %= a2;
          if (v19 == v9)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v20 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v19))
            {
              do
              {
                v21 = v20;
                v20 = (_QWORD *)*v20;
              }
              while (v20 && v18[2] == v20[2]);
              *v7 = v20;
              v22 = 8 * v19;
              *v21 = **(_QWORD **)(*(_QWORD *)a1 + v22);
              **(_QWORD **)(*(_QWORD *)a1 + v22) = v18;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v7;
              v7 = v18;
              v9 = v19;
            }
          }
        }
      }
      else
      {
        v11 = v9 & v10;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
        while (1)
        {
          v12 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v13 = v12[1] & v10;
          if (v13 == v11)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v14 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14 && v12[2] == v14[2]);
              *v7 = v14;
              v16 = 8 * v13;
              *v15 = **(_QWORD **)(*(_QWORD *)a1 + v16);
              **(_QWORD **)(*(_QWORD *)a1 + v16) = v12;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              v7 = v12;
              v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v17)
      operator delete(v17);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1BE6C96F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6C9714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6C99FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1BE6C9B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6C9B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6C9C28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C9D08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6C9DE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CA36C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6CA3A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6CA3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6CA3D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CA44C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CA500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CA510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CA5CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CHOSLogForCategory(int a1)
{
  if (qword_1EF568E88 == -1)
    return (id)qword_1EF568E18[a1];
  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  return (id)qword_1EF568E18[a1];
}

void sub_1BE6CA6B0()
{
  os_log_t v0;
  void *v1;
  os_log_t v2;
  void *v3;
  os_log_t v4;
  void *v5;
  os_log_t v6;
  void *v7;
  os_log_t v8;
  void *v9;
  os_log_t v10;
  void *v11;
  os_log_t v12;
  void *v13;
  os_log_t v14;
  void *v15;
  os_log_t v16;
  void *v17;
  os_log_t v18;
  void *v19;
  os_log_t v20;
  void *v21;
  os_log_t v22;
  void *v23;
  os_log_t v24;
  void *v25;

  v0 = os_log_create("com.apple.corehandwriting", "General");
  v1 = (void *)qword_1EF568E18[0];
  qword_1EF568E18[0] = (uint64_t)v0;

  v2 = os_log_create("com.apple.corehandwriting", "Recognizer");
  v3 = (void *)qword_1EF568E20;
  qword_1EF568E20 = (uint64_t)v2;

  v4 = os_log_create("com.apple.corehandwriting", "RecognitionSession");
  v5 = (void *)qword_1EF568E28;
  qword_1EF568E28 = (uint64_t)v4;

  v6 = os_log_create("com.apple.corehandwriting", "StrokeGrouping");
  v7 = (void *)qword_1EF568E30;
  qword_1EF568E30 = (uint64_t)v6;

  v8 = os_log_create("com.apple.corehandwriting", "ClutterFiltering");
  v9 = (void *)qword_1EF568E40;
  qword_1EF568E40 = (uint64_t)v8;

  v10 = os_log_create("com.apple.corehandwriting", "RemoteRecognizer");
  v11 = (void *)qword_1EF568E38;
  qword_1EF568E38 = (uint64_t)v10;

  v12 = os_log_create("com.apple.corehandwriting", "TextCorrectionRecognizer");
  v13 = (void *)qword_1EF568E48;
  qword_1EF568E48 = (uint64_t)v12;

  v14 = os_log_create("com.apple.corehandwriting", "CoreHandwritingSignPosts");
  v15 = (void *)qword_1EF568E50;
  qword_1EF568E50 = (uint64_t)v14;

  v16 = os_log_create("com.apple.corehandwriting", "Synthesizer");
  v17 = (void *)qword_1EF568E60;
  qword_1EF568E60 = (uint64_t)v16;

  v18 = os_log_create("com.apple.corehandwriting", "TextTransform");
  v19 = (void *)qword_1EF568E68;
  qword_1EF568E68 = (uint64_t)v18;

  v20 = os_log_create("com.apple.corehandwriting", "LineWrapping");
  v21 = (void *)qword_1EF568E70;
  qword_1EF568E70 = (uint64_t)v20;

  v22 = os_log_create("com.apple.corehandwriting", "StrokeClassification");
  v23 = (void *)qword_1EF568E78;
  qword_1EF568E78 = (uint64_t)v22;

  v24 = os_log_create("com.apple.corehandwriting", "SessionTracker");
  v25 = (void *)qword_1EF568E80;
  qword_1EF568E80 = (uint64_t)v24;

}

uint64_t castCHRemoteSynthesisOptionInventoryRequestTypeFromNSInteger(uint64_t a1)
{
  uint64_t v1;

  v1 = 2;
  if (a1 < 2)
    v1 = a1;
  return v1 & ~(v1 >> 63);
}

void sub_1BE6CAA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v28 = v23;

  _Unwind_Resume(a1);
}

void sub_1BE6CAB48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6CAD08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6CAD28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CAE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE6CB27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  void *v25;
  uint64_t v26;

  _Unwind_Resume(a1);
}

void sub_1BE6CB3B8()
{
  JUMPOUT(0x1BE6CB378);
}

void sub_1BE6CB650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6CB67C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CB850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  _Unwind_Resume(a1);
}

void sub_1BE6CBA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6CBD04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1BE6CC230(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[5];

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BE6CC2C8;
  v13[3] = &unk_1E77F3600;
  v13[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend_ch_descriptionWithSeparator_filterBlock_(a2, (const char *)a2, (uint64_t)CFSTR(", "), (uint64_t)v13, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("  %@"), v8, v9, v10, v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id sub_1BE6CC2C8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v56;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v9 = v3;
  if (!v2)
  {
    v54 = 0;
    goto LABEL_9;
  }
  v10 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_string(v3, v4, v5, v6, v7, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v10, v12, (uint64_t)CFSTR("[%p \"%@\""), v13, v14, v15, v9, v11);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v17 = v9;
    objc_msgSend_recognitionScore(v17, v18, v19, v20, v21, v22);
    v24 = v23;
    objc_msgSend_combinedScore(v17, v25, v26, v27, v28, v29);
    v31 = v30;
    objc_msgSend_modelScore(v17, v32, v33, v34, v35, v36);
    v38 = v37;

    objc_msgSend_stringByAppendingFormat_(v16, v39, (uint64_t)CFSTR(" %.2f, %.2f, %.2f]"), v40, v41, v42, v24, v31, v38);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend_stringByAppendingString_(v16, v43, (uint64_t)CFSTR("]"), v45, v46, v47);
      v53 = objc_claimAutoreleasedReturnValue();
      goto LABEL_8;
    }
    objc_msgSend_score(v9, v43, v44, v45, v46, v47);
    objc_msgSend_stringByAppendingFormat_(v16, v48, (uint64_t)CFSTR(" %.2f]"), v49, v50, v51, v52, v56);
  }
  v53 = objc_claimAutoreleasedReturnValue();
LABEL_8:
  v54 = (void *)v53;

LABEL_9:
  return v54;
}

void sub_1BE6CC4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6CC4EC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int isEquivalentToToken;
  id v30;

  v30 = a2;
  v12 = objc_msgSend_count(v30, v7, v8, v9, v10, v11);
  if (v12 == *(_QWORD *)(a1 + 56))
  {
    v17 = *(_QWORD *)(a1 + 48);
    if (v17 >= v17 + v12)
    {
LABEL_6:
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
      *a4 = 1;
    }
    else
    {
      v18 = 0;
      while (1)
      {
        objc_msgSend_objectAtIndex_(v30, v13, v18, v14, v15, v16);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndex_(*(void **)(a1 + 32), v20, v17 + v18, v21, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        isEquivalentToToken = objc_msgSend_isEquivalentToToken_(v19, v25, (uint64_t)v24, v26, v27, v28);

        if (!isEquivalentToToken)
          break;
        ++v18;
        if (v17 + v18 >= *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 48))
          goto LABEL_6;
      }
    }
  }

}

void sub_1BE6CC688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6CC6A0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isEquivalentToToken;

  objc_msgSend_firstObject(a2, (const char *)a2, a3, (uint64_t)a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  isEquivalentToToken = objc_msgSend_isEquivalentToToken_(v8, v9, *(_QWORD *)(a1 + 32), v10, v11, v12);

  if (isEquivalentToToken)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

uint64_t sub_1BE6CD2F4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v39, (uint64_t)v44, 16, v7);
  v14 = 0.0;
  v15 = 0.0;
  if (v8)
  {
    v16 = v8;
    v17 = *(_QWORD *)v40;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v40 != v17)
          objc_enumerationMutation(v4);
        objc_msgSend_combinedScore(*(void **)(*((_QWORD *)&v39 + 1) + 8 * v18), v9, v10, v11, v12, v13);
        v15 = v15 + v19;
        ++v18;
      }
      while (v16 != v18);
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v9, (uint64_t)&v39, (uint64_t)v44, 16, v13);
    }
    while (v16);
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v20 = v5;
  v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v35, (uint64_t)v43, 16, v22);
  if (v23)
  {
    v29 = v23;
    v30 = *(_QWORD *)v36;
    v14 = 0.0;
    do
    {
      v31 = 0;
      do
      {
        if (*(_QWORD *)v36 != v30)
          objc_enumerationMutation(v20);
        objc_msgSend_combinedScore(*(void **)(*((_QWORD *)&v35 + 1) + 8 * v31), v24, v25, v26, v27, v28, (_QWORD)v35);
        v14 = v14 + v32;
        ++v31;
      }
      while (v29 != v31);
      v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v24, (uint64_t)&v35, (uint64_t)v43, 16, v28);
    }
    while (v29);
  }

  if (v15 < v14)
    v33 = -1;
  else
    v33 = v15 > v14;

  return v33;
}

uint64_t sub_1BE6CD4B8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v39, (uint64_t)v44, 16, v7);
  v14 = 0.0;
  v15 = 0.0;
  if (v8)
  {
    v16 = v8;
    v17 = *(_QWORD *)v40;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v40 != v17)
          objc_enumerationMutation(v4);
        objc_msgSend_score(*(void **)(*((_QWORD *)&v39 + 1) + 8 * v18), v9, v10, v11, v12, v13);
        v15 = v15 + v19;
        ++v18;
      }
      while (v16 != v18);
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v9, (uint64_t)&v39, (uint64_t)v44, 16, v13);
    }
    while (v16);
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v20 = v5;
  v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v35, (uint64_t)v43, 16, v22);
  if (v23)
  {
    v29 = v23;
    v30 = *(_QWORD *)v36;
    v14 = 0.0;
    do
    {
      v31 = 0;
      do
      {
        if (*(_QWORD *)v36 != v30)
          objc_enumerationMutation(v20);
        objc_msgSend_score(*(void **)(*((_QWORD *)&v35 + 1) + 8 * v31), v24, v25, v26, v27, v28, (_QWORD)v35);
        v14 = v14 + v32;
        ++v31;
      }
      while (v29 != v31);
      v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v24, (uint64_t)&v35, (uint64_t)v43, 16, v28);
    }
    while (v29);
  }

  if (v15 < v14)
    v33 = -1;
  else
    v33 = v15 > v14;

  return v33;
}

void sub_1BE6CD704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CD7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE6CDAE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6CDBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6CDE44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v7 = (id)qword_1EF568E50;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v24) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v8, OS_SIGNPOST_INTERVAL_END, v9, "CHContextLookupQuery_atLocation", "", (uint8_t *)&v24, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v24) = 0;
    _os_log_impl(&dword_1BE607000, v10, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_atLocation\"", (uint8_t *)&v24, 2u);
  }

  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v11 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    goto LABEL_12;
  }
  v11 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    v17 = objc_msgSend_count(v5, v12, v13, v14, v15, v16);
    v23 = objc_msgSend_length(v6, v18, v19, v20, v21, v22);
    v24 = 134218240;
    v25 = v17;
    v26 = 2048;
    v27 = v23;
    _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_atLocation returning nt strokes %ld, text transcription length %ld", (uint8_t *)&v24, 0x16u);
  }
LABEL_13:

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE6CE290(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  CHContextualTextResults *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E50;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    LOWORD(v45) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v11, OS_SIGNPOST_INTERVAL_END, v12, "CHContextLookupQuery_withPath", "", (uint8_t *)&v45, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v45) = 0;
    _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_withPath\"", (uint8_t *)&v45, 2u);
  }

  v14 = [CHContextualTextResults alloc];
  v19 = (void *)objc_msgSend_initWithTextResults_(v14, v15, (uint64_t)v9, v16, v17, v18);

  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v20 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    goto LABEL_12;
  }
  v20 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    v26 = objc_msgSend_count(v7, v21, v22, v23, v24, v25);
    v32 = objc_msgSend_count(v8, v27, v28, v29, v30, v31);
    objc_msgSend_textResults(v19, v33, v34, v35, v36, v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend_count(v38, v39, v40, v41, v42, v43);
    v45 = 134218496;
    v46 = v26;
    v47 = 2048;
    v48 = v32;
    v49 = 2048;
    v50 = v44;
    _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_withPath returning coveredStrokes %ld, ntStrokes %ld, textResults %ld", (uint8_t *)&v45, 0x20u);

  }
LABEL_13:

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE6CE758(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  CHContextualTextResults *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v10 = (id)qword_1EF568E50;
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    LOWORD(v51) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v11, OS_SIGNPOST_INTERVAL_END, v12, "CHContextLookupQuery_withSelectedStrokes", "", (uint8_t *)&v51, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51) = 0;
    _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_withSelectedStrokes\"", (uint8_t *)&v51, 2u);
  }

  v14 = [CHContextualTextResults alloc];
  v19 = (void *)objc_msgSend_initWithTextResults_(v14, v15, (uint64_t)v9, v16, v17, v18);

  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v20 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    goto LABEL_12;
  }
  v20 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    v26 = objc_msgSend_count(*(void **)(a1 + 32), v21, v22, v23, v24, v25);
    v32 = objc_msgSend_count(v7, v27, v28, v29, v30, v31);
    v38 = objc_msgSend_count(v8, v33, v34, v35, v36, v37);
    objc_msgSend_textResults(v19, v39, v40, v41, v42, v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend_count(v44, v45, v46, v47, v48, v49);
    v51 = 134218752;
    v52 = v26;
    v53 = 2048;
    v54 = v32;
    v55 = 2048;
    v56 = v38;
    v57 = 2048;
    v58 = v50;
    _os_log_impl(&dword_1BE607000, v20, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_withSelectedStrokes with %ld selected strokes returning coveredStrokes %ld, ntStrokes %ld, textResults %ld", (uint8_t *)&v51, 0x2Au);

  }
LABEL_13:

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1BE6CEC20(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  os_signpost_id_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = a4;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E50;
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 48);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    LOWORD(v58) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v14, OS_SIGNPOST_INTERVAL_END, v15, "CHContextLookupQuery_withPath", "", (uint8_t *)&v58, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v16 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v58) = 0;
    _os_log_impl(&dword_1BE607000, v16, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_withPath\"", (uint8_t *)&v58, 2u);
  }

  objc_msgSend_recognitionSession(*(void **)(a1 + 32), v17, v18, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_structuredContextualTextResultsWithTextResults_(v22, v23, (uint64_t)v12, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_recognitionSession(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_structuredContextualTextResultsWithTextResults_(v33, v34, (uint64_t)v11, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v39 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    goto LABEL_12;
  }
  v39 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    v45 = objc_msgSend_count(v9, v40, v41, v42, v43, v44);
    v51 = objc_msgSend_count(v10, v46, v47, v48, v49, v50);
    v57 = objc_msgSend_count(v27, v52, v53, v54, v55, v56);
    v58 = 134218496;
    v59 = v45;
    v60 = 2048;
    v61 = v51;
    v62 = 2048;
    v63 = v57;
    _os_log_impl(&dword_1BE607000, v39, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_withPath returning coveredStrokes %ld, ntStrokes %ld, textResults %ld", (uint8_t *)&v58, 0x20u);
  }
LABEL_13:

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1BE6CF128(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  os_signpost_id_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = a4;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E50;
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 56);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    LOWORD(v64) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v14, OS_SIGNPOST_INTERVAL_END, v15, "CHContextLookupQuery_withSelectedStrokes", "", (uint8_t *)&v64, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v16 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v64) = 0;
    _os_log_impl(&dword_1BE607000, v16, OS_LOG_TYPE_DEFAULT, "END \"CHContextLookupQuery_withSelectedStrokes\"", (uint8_t *)&v64, 2u);
  }

  objc_msgSend_recognitionSession(*(void **)(a1 + 32), v17, v18, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_structuredContextualTextResultsWithTextResults_(v22, v23, (uint64_t)v12, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_recognitionSession(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_structuredContextualTextResultsWithTextResults_(v33, v34, (uint64_t)v11, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  if (qword_1EF568E88 != -1)
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v39 = (id)qword_1EF568E18[0];
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    goto LABEL_12;
  }
  v39 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
LABEL_12:
    v45 = objc_msgSend_count(*(void **)(a1 + 40), v40, v41, v42, v43, v44);
    v51 = objc_msgSend_count(v9, v46, v47, v48, v49, v50);
    v57 = objc_msgSend_count(v10, v52, v53, v54, v55, v56);
    v63 = objc_msgSend_count(v27, v58, v59, v60, v61, v62);
    v64 = 134218752;
    v65 = v45;
    v66 = 2048;
    v67 = v51;
    v68 = 2048;
    v69 = v57;
    v70 = 2048;
    v71 = v63;
    _os_log_impl(&dword_1BE607000, v39, OS_LOG_TYPE_DEFAULT, "CHContextLookupQuery_withSelectedStrokes with %ld selected strokes returning coveredStrokes %ld, ntStrokes %ld, textResults %ld", (uint8_t *)&v64, 0x2Au);
  }
LABEL_13:

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1BE6CF5BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE6CF5E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6CF9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE6CFC14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CFC90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CFD98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6CFDAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6CFE98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D040C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D0938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6D0974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D0988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D099C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D0A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D0B5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D0B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D0B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D0E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1BE6D0ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE6D0EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE6D0F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  _Unwind_Resume(a1);
}

id sub_1BE6D0F14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_localeIdentifier(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_1BE6D0F30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%p"), a4, a5, a6, a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1BE6D126C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;
  void *v23;
  void *v24;

  v24 = v23;

  _Unwind_Resume(a1);
}

__n128 sub_1BE6D12D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE6D12F4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE6D130C(uint64_t a1, const void *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v8;
  void *v9;

  v4 = 0;
  v5 = 0;
  if (a3 >= 0)
    v6 = a3;
  else
    v6 = a3 + 3;
  if ((unint64_t)(a3 + 3) >= 7)
  {
    if (a3 <= -4)
      sub_1BE61F930();
    v5 = (char *)operator new(v6 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = &v5[4 * (v6 >> 2)];
    memcpy(v5, a2, v6 & 0xFFFFFFFFFFFFFFFCLL);
  }
  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v9 = (void *)v8[6];
  if (v9)
  {
    v8[7] = v9;
    operator delete(v9);
    v8[6] = 0;
    v8[7] = 0;
    v8[8] = 0;
  }
  v8[6] = v5;
  v8[7] = v4;
  v8[8] = v4;
}

void sub_1BE6D13CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE6D155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1BE6D15B8(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;

  v11 = a2;
  objc_msgSend_floatValue(v11, v5, v6, v7, v8, v9);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) + 4 * a3) = v10;

}

void sub_1BE6D1600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D16A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D16B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D1D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6D1D90()
{
  return 0;
}

void sub_1BE6D1E60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6D1E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D1EA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D1EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D1FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1BE6D21B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v20;
  void *v22;
  void *v23;

  if (__p)
  {
    operator delete(__p);
    v22 = a16;
    if (!a16)
    {
LABEL_3:
      v23 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v22 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v22);
  v23 = a19;
  if (!a19)
  {
LABEL_4:

    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v23);

  _Unwind_Resume(a1);
}

void sub_1BE6D2244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D2254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D2264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D2458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v20;
  void *v22;
  void *v23;

  if (__p)
  {
    operator delete(__p);
    v22 = a16;
    if (!a16)
    {
LABEL_3:
      v23 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v22 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v22);
  v23 = a19;
  if (!a19)
  {
LABEL_4:

    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v23);

  _Unwind_Resume(a1);
}

void sub_1BE6D24E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D24F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D2508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D2630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6D26E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE6D2780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6D2974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE6D2AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6D2AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D2BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE6D2C34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D2D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6D2D5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE6D2DB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D3024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE6D3098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D30AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D3264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE6D3380(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  int v14;
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_containerURLForSecurityApplicationGroupIdentifier_(v6, v7, (uint64_t)CFSTR("group.com.apple.corehandwriting"), v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)qword_1EF568040;
  qword_1EF568040 = v11;

  if (!qword_1EF568040)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v13 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      v14 = 138412290;
      v15 = CFSTR("group.com.apple.corehandwriting");
      _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_FAULT, "NSURL for group container %@ not found", (uint8_t *)&v14, 0xCu);
    }

  }
}

void sub_1BE6D3494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D3560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D3578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D358C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D3600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D3614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D3670()
{
  void *v0;

  v0 = (void *)qword_1EF568050;
  qword_1EF568050 = (uint64_t)CFSTR("0.0.8");

}

void sub_1BE6D3728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D3748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D37A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_ch_mathCharSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568060;
  qword_1EF568060 = v6;

}

void sub_1BE6D385C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D3A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6D3AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE6D3B20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D3B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D3B94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D4220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6D4444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE6D4924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6D4A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6D4AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D4B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6D4B90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE6D4BA0(uint64_t a1)
{

}

void sub_1BE6D4BA8(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 24));
}

uint64_t sub_1BE6D4C10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v35, (uint64_t)v39, 16, v15);
  if (v21)
  {
    v22 = *(_QWORD *)v36;
    do
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v36 != v22)
          objc_enumerationMutation(v13);
        v24 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v23);
        v25 = objc_msgSend_currentSamplingTimestep(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
        objc_msgSend_shiftTimestepsByOffset_(v24, v26, v25, v27, v28, v29);
        ++v23;
      }
      while (v21 != v23);
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v35, (uint64_t)v39, 16, v20);
    }
    while (v21);
  }

  return objc_msgSend_setCurrentSamplingTimestep_(*(void **)(a1 + 32), v30, 0, v31, v32, v33);
}

void sub_1BE6D4D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D4DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6D4DF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;

  v7 = *(void **)(a1 + 32);
  objc_msgSend_transcription(*(void **)(a1 + 40), a2, a3, a4, a5, a6);
  v38 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifiers(*(void **)(a1 + 40), v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v7) = objc_msgSend_containsSampleWithTranscription_strokeIdentifiers_(v7, v14, (uint64_t)v38, (uint64_t)v13, v15, v16);

  if ((_DWORD)v7)
  {
    objc_msgSend_styles(*(void **)(a1 + 32), v17, v18, v19, v20, v21);
    v39 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_strokeIdentifiers(*(void **)(a1 + 40), v22, v23, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v39, v28, (uint64_t)v27, v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_incrementSamplingCount(v32, v33, v34, v35, v36, v37);

  }
}

void sub_1BE6D4EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6D4EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6D4EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D4F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6D4F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D503C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6D5054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D5068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D5078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6D5098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6D573C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6D57B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = objc_msgSend_copy(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1BE6D5838(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_hasInventoryChanged(*(void **)(a1 + 32), a2, a3, a4, a5, a6))
  {
    objc_msgSend_removeStyleSamplesIfNeeded(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
    objc_msgSend_resetCurrentSamplingTimestep(*(void **)(a1 + 32), v12, v13, v14, v15, v16);
    if (objc_msgSend_save(*(void **)(a1 + 32), v17, v18, v19, v20, v21))
    {
      objc_msgSend_setHasInventoryChanged_(*(void **)(a1 + 32), v22, 0, v23, v24, v25);
      objc_msgSend_now(MEMORY[0x1E0C99D68], v26, v27, v28, v29, v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setLastSavedDate_(*(void **)(a1 + 32), v32, (uint64_t)v31, v33, v34, v35);

      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v36 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend_lastSavedDate(*(void **)(a1 + 32), v37, v38, v39, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = 138412290;
        v44 = v42;
        _os_log_impl(&dword_1BE607000, v36, OS_LOG_TYPE_DEBUG, "style inventory last saved on: %@)", (uint8_t *)&v43, 0xCu);

      }
    }
  }
}

void sub_1BE6D597C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D598C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D5A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6D5AA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v7, v8, *(_QWORD *)(a1 + 40), v9, v10, v11);
  v24 = (id)objc_claimAutoreleasedReturnValue();

  v17 = v24;
  if (v24)
  {
    v18 = *(void **)(a1 + 48);
    objc_msgSend_transcription(v24, v12, v13, v14, v15, v16);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend_isEqualToString_(v18, v20, (uint64_t)v19, v21, v22, v23);

    v17 = v24;
  }

}

void sub_1BE6D5B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6D5B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D5B5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D5BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6D5C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D5C18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;

  objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1BE6D5CE0;
  v20[3] = &unk_1E77F3858;
  v14 = *(id *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 32);
  v21 = v14;
  v22 = v15;
  objc_msgSend_enumerateObjectsUsingBlock_(v13, v16, (uint64_t)v20, v17, v18, v19);

}

void sub_1BE6D5CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6D5CD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D5CE0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v18 = a2;
  objc_msgSend_strokeIdentifiers(v18, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_intersectsSet_(v8, v9, *(_QWORD *)(a1 + 32), v10, v11, v12);

  if (v13)
    objc_msgSend__unsafeRemoveSample_(*(void **)(a1 + 40), v14, (uint64_t)v18, v15, v16, v17);

}

void sub_1BE6D5D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6D5D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6D5E44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v7, v8, v9, v10, v11, v12);

  objc_msgSend_sampleCountByCharacter(*(void **)(a1 + 32), v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeAllObjects(v18, v19, v20, v21, v22, v23);

  return objc_msgSend_save(*(void **)(a1 + 32), v24, v25, v26, v27, v28);
}

void sub_1BE6D5E94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D5EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D63D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE6D6544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6D655C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend__unsafeAddSample_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4, a5, a6);
}

void sub_1BE6D65E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE6D65F8(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = *(id *)(a1 + 32);
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v12, (uint64_t)v16, 16, v4);
  if (v9)
  {
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v2);
        objc_msgSend__unsafeAddSample_(*(void **)(a1 + 40), v5, *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v11++), v6, v7, v8, (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v12, (uint64_t)v16, 16, v8);
    }
    while (v9);
  }

}

void sub_1BE6D66E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D6780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6D6798(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend__unsafeRemoveSample_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4, a5, a6);
}

void sub_1BE6D68D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D68EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE6D6908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D691C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D69DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE6D69FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  v7 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend_sampleCountByCharacter(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v21 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allKeys(v21, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithArray_(v7, v14, (uint64_t)v13, v15, v16, v17);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;

}

void sub_1BE6D6A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6D6A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D6C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D7090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D72A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D7688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D769C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D76B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D76C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D76D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE6D76F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D7708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D771C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D772C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D7810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE6D7840(void **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, void *);
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;

  objc_msgSend_set(MEMORY[0x1E0C99E20], a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0C99DE8];
  v14 = objc_msgSend_tokenColumnCount(a1[4], v9, v10, v11, v12, v13);
  objc_msgSend_arrayWithCapacity_(v8, v15, v14, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = a1[4];
  v37 = MEMORY[0x1E0C809B0];
  v38 = 3221225472;
  v39 = sub_1BE6D79C0;
  v40 = &unk_1E77F3880;
  v41 = v20;
  v21 = a1[5];
  v22 = a1[6];
  v42 = v21;
  v43 = v22;
  v23 = v7;
  v44 = v23;
  v45 = a1[7];
  v24 = v19;
  v46 = v24;
  objc_msgSend_enumerateTokensInTopTranscriptionPathWithBlock_(v41, v25, (uint64_t)&v37, v26, v27, v28);
  objc_msgSend_removeSamplesContainingStrokeIdentifiers_(a1[6], v29, (uint64_t)v23, v30, v31, v32, v37, v38, v39, v40);
  objc_msgSend_addSamplesWithArray_(a1[6], v33, (uint64_t)v24, v34, v35, v36);

}

void sub_1BE6D7970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE6D79B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D79C0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isSingleTokenResult;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void *v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  isSingleTokenResult = objc_msgSend_isSingleTokenResult(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
  v15 = (void *)MEMORY[0x1E0C99E60];
  v16 = *(void **)(a1 + 40);
  if (isSingleTokenResult)
  {
    objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v10, *(_QWORD *)(a1 + 40), v12, v13, v14);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend_strokeIndexes(v3, v10, v11, v12, v13, v14);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectsAtIndexes_(v16, v24, (uint64_t)v23, v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setWithArray_(v15, v29, (uint64_t)v28, v30, v31, v32);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v33 = *(void **)(a1 + 48);
  objc_msgSend_string(v3, v17, v18, v19, v20, v21);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v33) = objc_msgSend_containsSampleWithTranscription_strokeIdentifiers_(v33, v35, (uint64_t)v34, (uint64_t)v22, v36, v37);

  if ((_DWORD)v33)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v42 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_string(v3, v43, v44, v45, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v95 = 138739971;
      v96 = v48;
      _os_log_impl(&dword_1BE607000, v42, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: token already in the inventory. token string: %{sensitive}@", (uint8_t *)&v95, 0xCu);

    }
    goto LABEL_20;
  }
  objc_msgSend_unionSet_(*(void **)(a1 + 56), v38, (uint64_t)v22, v39, v40, v41);
  if (objc_msgSend_shouldBypassGating(CHSynthesisStyleInventory, v49, v50, v51, v52, v53))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v58 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_string(v3, v59, v60, v61, v62, v63);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v95 = 138739971;
      v96 = v64;
      _os_log_impl(&dword_1BE607000, v58, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: bypassing gating for text token: %{sensitive}@", (uint8_t *)&v95, 0xCu);

    }
    goto LABEL_16;
  }
  if ((objc_msgSend_isTokenAcceptable_(*(void **)(a1 + 48), v54, (uint64_t)v3, v55, v56, v57) & 1) != 0)
  {
LABEL_16:
    v70 = objc_msgSend_isSingleTokenResult(*(void **)(a1 + 32), v65, v66, v67, v68, v69);
    v76 = *(void **)(a1 + 64);
    if (v70)
    {
      v42 = v76;
    }
    else
    {
      objc_msgSend_strokeIndexes(v3, v71, v72, v73, v74, v75);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_drawingWithStrokesFromIndexSet_(v76, v83, (uint64_t)v82, v84, v85, v86);
      v42 = objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend_string(v3, v77, v78, v79, v80, v81);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sampleWithTranscription_drawing_strokeIdentifiers_(CHSynthesisStyleSample, v88, (uint64_t)v87, (uint64_t)v42, (uint64_t)v22, v89);
    v90 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_addObject_(*(void **)(a1 + 72), v91, (uint64_t)v90, v92, v93, v94);
LABEL_20:

  }
}

void sub_1BE6D7CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6D7DB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6D7DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D7EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE6D7ED4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  uint32_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int shouldBypassGating;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  char v51;
  const char *v52;
  uint64_t v53;
  char v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  NSObject *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  objc_msgSend_preferredTranscription(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isTrivialTextTranscriptionAvailableForLatex_(CHTokenizedMathResult, v8, (uint64_t)v7, v9, v10, v11) & 1) != 0)
  {
    objc_msgSend_textTranscriptionForLatex_(CHTokenizedMathResult, v12, (uint64_t)v7, v13, v14, v15);
    v16 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v17, *(_QWORD *)(a1 + 40), v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_containsSampleWithTranscription_strokeIdentifiers_(*(void **)(a1 + 48), v22, (uint64_t)v16, (uint64_t)v21, v23, v24))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v29 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        goto LABEL_36;
      v71 = 138739971;
      v72 = (uint64_t)v16;
      v30 = "Inventory data ingestion: token already in the inventory. token string: %{sensitive}@";
      v31 = v29;
      v32 = 12;
    }
    else
    {
      objc_msgSend_removeSamplesContainingStrokeIdentifiers_(*(void **)(a1 + 48), v25, (uint64_t)v21, v26, v27, v28);
      shouldBypassGating = objc_msgSend_shouldBypassGating(CHSynthesisStyleInventory, v33, v34, v35, v36, v37);
      if (shouldBypassGating)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v44 = (id)qword_1EF568E60;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          v71 = 138739971;
          v72 = (uint64_t)v16;
          _os_log_impl(&dword_1BE607000, v44, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: bypassing gating for math token: %{sensitive}@", (uint8_t *)&v71, 0xCu);
        }

      }
      objc_msgSend_score(*(void **)(a1 + 32), v38, v39, v40, v41, v42);
      if (v50 >= 0.949999988)
        v51 = 1;
      else
        v51 = shouldBypassGating;
      if ((v51 & 1) != 0)
      {
        if ((unint64_t)objc_msgSend_length(v16, v45, v46, v47, v48, v49) > 2)
          v54 = 1;
        else
          v54 = shouldBypassGating;
        if ((v54 & 1) != 0)
        {
          objc_msgSend_sampleWithTranscription_drawing_strokeIdentifiers_(CHSynthesisStyleSample, v52, (uint64_t)v16, *(_QWORD *)(a1 + 56), (uint64_t)v21, v53);
          v29 = objc_claimAutoreleasedReturnValue();
          objc_msgSend_addSample_(*(void **)(a1 + 48), v55, (uint64_t)v29, v56, v57, v58);
LABEL_36:

          goto LABEL_37;
        }
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v29 = (id)qword_1EF568E60;
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          goto LABEL_36;
        v70 = objc_msgSend_length(v16, v65, v66, v67, v68, v69);
        v71 = 134218499;
        v72 = v70;
        v73 = 2048;
        v74 = 3;
        v75 = 2117;
        v76 = v16;
        v30 = "Inventory data ingestion: rejecting math token due to length (%ld) smaller than %ld. token string: %{sensitive}@";
      }
      else
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v29 = (id)qword_1EF568E60;
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          goto LABEL_36;
        objc_msgSend_score(*(void **)(a1 + 32), v59, v60, v61, v62, v63);
        v71 = 134218499;
        v72 = v64;
        v73 = 2048;
        v74 = 0x3FEE666660000000;
        v75 = 2117;
        v76 = v16;
        v30 = "Inventory data ingestion: rejecting math token due to recognition score (%2.2f) smaller than threshold %2."
              "2f. token string: %{sensitive}@";
      }
      v31 = v29;
      v32 = 32;
    }
    _os_log_impl(&dword_1BE607000, v31, OS_LOG_TYPE_DEBUG, v30, (uint8_t *)&v71, v32);
    goto LABEL_36;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v16 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v71 = 138739971;
    v72 = (uint64_t)v7;
    _os_log_impl(&dword_1BE607000, v16, OS_LOG_TYPE_DEBUG, "Inventory data ingestion: rejecting math token as it does not have trivial text transcription. token string: %{sensitive}@", (uint8_t *)&v71, 0xCu);
  }
LABEL_37:

}

void sub_1BE6D82C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6D83A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE6D83C0(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *__p;
  void *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v2 = *(id *)(a1 + 32);
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v49, (uint64_t)v53, 16, v4);
  if (v10)
  {
    v11 = *(_QWORD *)v50;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v50 != v11)
          objc_enumerationMutation(v2);
        v13 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
        v14 = *(void **)(a1 + 40);
        objc_msgSend_transcription(v13, v5, v6, v7, v8, v9);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeIdentifiers(v13, v16, v17, v18, v19, v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v14) = objc_msgSend_containsSampleWithTranscription_strokeIdentifiers_(v14, v22, (uint64_t)v15, (uint64_t)v21, v23, v24);

        if ((_DWORD)v14)
        {
          objc_msgSend_styles(*(void **)(a1 + 40), v5, v6, v7, v8, v9);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_strokeIdentifiers(v13, v26, v27, v28, v29, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v25, v32, (uint64_t)v31, v33, v34, v35);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
          {
            objc_msgSend_embeddingVector(v13, v36, v37, v38, v39, v40);
          }
          else
          {
            __p = 0;
            v47 = 0;
            v48 = 0;
          }
          objc_msgSend_setEmbeddingVector_(v41, v36, (uint64_t)&__p, v38, v39, v40);
          if (__p)
          {
            v47 = __p;
            operator delete(__p);
          }

          objc_msgSend_setHasInventoryChanged_(*(void **)(a1 + 40), v42, 1, v43, v44, v45);
        }
      }
      v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v49, (uint64_t)v53, 16, v9);
    }
    while (v10);
  }

}

void sub_1BE6D8588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6D8694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6D86AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  uint64_t v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allValues(v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v38, (uint64_t)v44, 16, v15);
  if (v21)
  {
    v22 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)v39 != v22)
          objc_enumerationMutation(v13);
        v24 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        if ((objc_msgSend_hasEmbeddingVector(v24, v16, v17, v18, v19, v20) & 1) == 0)
        {
          v25 = *(void **)(a1 + 40);
          v26 = (void *)objc_msgSend_copy(v24, v16, v17, v18, v19, v20);
          objc_msgSend_addObject_(v25, v27, (uint64_t)v26, v28, v29, v30);

        }
      }
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v38, (uint64_t)v44, 16, v20);
    }
    while (v21);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v31 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    v37 = objc_msgSend_count(*(void **)(a1 + 40), v32, v33, v34, v35, v36);
    *(_DWORD *)buf = 134217984;
    v43 = v37;
    _os_log_impl(&dword_1BE607000, v31, OS_LOG_TYPE_DEBUG, "Inventory style samples without style embedding: %lu", buf, 0xCu);
  }

}

void sub_1BE6D886C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D8A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6D8AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6D8AF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;

  objc_msgSend__unsafeSamplesWithStylePrediction(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v29 = (id)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_count(v29, v7, v8, v9, v10, v11);
  if (v12 >= objc_msgSend_minimumNumberOfSamplesWithStylePrediction(*(void **)(a1 + 32), v13, v14, v15, v16, v17)
    || (v23 = objc_msgSend_count(v29, v18, v19, v20, v21, v22),
        v23 == objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v24, v25, v26, v27, v28)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }

}

void sub_1BE6D8B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6D8FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6D9350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v21 = v20;

  _Unwind_Resume(a1);
}

void sub_1BE6D93EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  void *v17;
  float v18;
  float v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  id v47;
  id v48;
  __int16 v49;
  char *v50;
  void *v51;
  void *v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  BOOL *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  uint64_t i;
  unsigned __int8 *v76;
  int v77;
  BOOL v78;
  BOOL v79;
  int v80;
  int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  NSObject *v89;
  unsigned __int8 *j;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v95;
  unsigned __int8 *v96;
  void *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void **v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  int v121;
  BOOL v122;
  BOOL v123;
  int v124;
  __int16 v125;
  float v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  void *v130;
  unsigned __int8 *v131;
  __int16 v132;
  void *v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  unsigned __int8 *v137;
  uint64_t v138;
  void *v139;
  unint64_t v140;
  uint64_t v141;
  unsigned __int8 *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  void *v146;
  unsigned __int8 v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char *v155;
  unsigned __int8 *v156;
  char *v157;
  __int16 v158;
  unsigned __int8 v159;
  _BYTE buf[12];
  __int16 v161;
  uint64_t v162;
  _BYTE v163[128];
  uint64_t v164;

  v6 = a1;
  v164 = *MEMORY[0x1E0C80C00];
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v154 = 0u;
  objc_msgSend__unsafeSamplesWithStylePrediction(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v151, (uint64_t)v163, 16, v9);
  v150 = v6;
  v15 = 0;
  if (v14)
  {
    v148 = *(_QWORD *)v152;
    while (1)
    {
      v16 = 0;
      v145 = v14;
      do
      {
        if (*(_QWORD *)v152 != v148)
          objc_enumerationMutation(v7);
        v17 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * v16);
        objc_msgSend_cosineSimilarityToSample_(*(void **)(v6 + 40), v10, (uint64_t)v17, v11, v12, v13, v145);
        v19 = v18;
        objc_msgSend_remainingCharacterSetFromPromptCharacterSet_withSample_(CHSynthesisStyleInventory, v20, *(_QWORD *)(v6 + 48), (uint64_t)v17, v21, v22);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19 >= 0.55)
        {
          objc_msgSend_transcription(v17, v23, v24, v25, v26, v27);
          v146 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = (unint64_t)objc_msgSend_length(v146, v29, v30, v31, v32, v33) < *(_QWORD *)(v6 + 64);
          v40 = objc_msgSend_count(*(void **)(v6 + 48), v35, v36, v37, v38, v39);
          v46 = v40 - objc_msgSend_count(v28, v41, v42, v43, v44, v45);
          v47 = v17;
          v48 = v47;
          if (v15 >= (unsigned __int8 *)v157)
          {
            v52 = v7;
            v53 = (unsigned __int8 *)v155;
            v54 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned __int8 *)v155) >> 3);
            v55 = v54 + 1;
            if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_1BE61F930();
            if (0x5555555555555556 * ((v157 - v155) >> 3) > v55)
              v55 = 0x5555555555555556 * ((v157 - v155) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v157 - v155) >> 3) >= 0x555555555555555)
              v56 = 0xAAAAAAAAAAAAAAALL;
            else
              v56 = v55;
            if (v56 > 0xAAAAAAAAAAAAAAALL)
              sub_1BE61F100();
            v57 = (char *)operator new(24 * v56);
            v58 = (BOOL *)&v57[24 * v54];
            *v58 = v34;
            *((_DWORD *)v58 + 1) = v46;
            *((float *)v58 + 2) = v19;
            *((_QWORD *)v58 + 2) = v48;
            v50 = (char *)(v58 + 24);
            if (v15 == v53)
            {
              v155 = &v57[24 * v54];
              v156 = (unsigned __int8 *)(v58 + 24);
              v157 = &v57[24 * v56];
              v7 = v52;
              v14 = v145;
              v51 = v146;
              if (!v53)
                goto LABEL_23;
            }
            else
            {
              v59 = v15;
              v7 = v52;
              do
              {
                v60 = *((_QWORD *)v59 - 3);
                v59 -= 24;
                v61 = *((_DWORD *)v59 + 2);
                *((_QWORD *)v58 - 3) = v60;
                v58 -= 24;
                *((_DWORD *)v58 + 2) = v61;
                v62 = *((_QWORD *)v59 + 2);
                *((_QWORD *)v59 + 2) = 0;
                *((_QWORD *)v58 + 2) = v62;
              }
              while (v59 != v53);
              v155 = (char *)v58;
              v156 = (unsigned __int8 *)v50;
              v157 = &v57[24 * v56];
              v14 = v145;
              do
              {

                v15 -= 24;
              }
              while (v15 != v53);
              v51 = v146;
              if (!v53)
                goto LABEL_23;
            }
            operator delete(v53);
          }
          else
          {
            *v15 = v34;
            v49 = *(_WORD *)buf;
            v15[3] = buf[2];
            *(_WORD *)(v15 + 1) = v49;
            *((_DWORD *)v15 + 1) = v46;
            *((float *)v15 + 2) = v19;
            *((_QWORD *)v15 + 2) = v47;
            v50 = (char *)(v15 + 24);
            v51 = v146;
          }
LABEL_23:
          v156 = (unsigned __int8 *)v50;

          v15 = (unsigned __int8 *)v50;
        }

        ++v16;
        v6 = v150;
      }
      while (v16 != v14);
      v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v151, (uint64_t)v163, 16, v13);
      v14 = v63;
      if (!v63)
      {
        v64 = (unsigned __int8 *)v155;
        goto LABEL_31;
      }
    }
  }
  v64 = 0;
LABEL_31:

  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v64) >> 3) >= 0xA)
    v65 = 10;
  else
    v65 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v64) >> 3);
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v66 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v15 - v64) >> 3);
    v161 = 2048;
    v162 = v65;
    _os_log_impl(&dword_1BE607000, v66, OS_LOG_TYPE_DEBUG, "Style Sampling: nearestInventorySamplesToSample for input style sample: found %zu nearest samples, capping to %ld", buf, 0x16u);
  }

  if (v65)
  {
    v71 = &v64[24 * v65];
    if (v65 != 1)
    {
      v72 = (unint64_t)(v65 - 2) >> 1;
      v73 = v72 + 1;
      v74 = &v64[24 * v72];
      do
      {
        sub_1BE6DF51C((uint64_t)v64, v65, v74);
        v74 -= 24;
        --v73;
      }
      while (v73);
    }
    if (v71 != v15)
    {
      for (i = 24 * v65; &v64[i] != v15; i += 24)
      {
        v76 = &v64[i];
        v77 = *v64;
        if (v64[i])
          v78 = v77 == 0;
        else
          v78 = 1;
        if (v78)
        {
          if (v64[i])
            v79 = v77 == 0;
          else
            v79 = 0;
          if (!v79)
            continue;
        }
        else
        {
          v80 = *((_DWORD *)v76 + 1);
          v81 = *((_DWORD *)v64 + 1);
          if (v80 <= v81 && (v80 != v81 || *(float *)&v64[i + 8] <= *((float *)v64 + 2)))
            continue;
        }
        *(_QWORD *)buf = *(_QWORD *)v76;
        *(_DWORD *)&buf[8] = *((_DWORD *)v76 + 2);
        v82 = &v64[i];
        v83 = *(_QWORD *)&v64[i + 16];
        *((_QWORD *)v82 + 2) = 0;
        v84 = *(_QWORD *)v64;
        *((_DWORD *)v76 + 2) = *((_DWORD *)v64 + 2);
        *(_QWORD *)v76 = v84;
        v85 = *((_QWORD *)v64 + 2);
        *((_QWORD *)v64 + 2) = 0;
        v86 = *(void **)&v64[i + 16];
        *((_QWORD *)v82 + 2) = v85;

        *(_QWORD *)v64 = *(_QWORD *)buf;
        *((_DWORD *)v64 + 2) = *(_DWORD *)&buf[8];
        v87 = (void *)*((_QWORD *)v64 + 2);
        *((_QWORD *)v64 + 2) = v83;

        sub_1BE6DF51C((uint64_t)v64, v65, v64);
      }
    }
    if (v65 == 1)
    {
LABEL_62:
      v64 = (unsigned __int8 *)v155;
      v88 = 16;
      do
      {
        objc_msgSend_addObject_(*(void **)(v150 + 56), v67, *(_QWORD *)&v64[v88], v68, v69, v70, v145);
        v88 += 24;
        --v65;
      }
      while (v65);
      goto LABEL_64;
    }
    v91 = v65;
LABEL_75:
    v95 = 0;
    v96 = v71;
    *(_QWORD *)buf = *(_QWORD *)v64;
    *(_DWORD *)&buf[8] = *((_DWORD *)v64 + 2);
    v97 = (void *)*((_QWORD *)v64 + 2);
    *((_QWORD *)v64 + 2) = 0;
    v98 = v64;
    while (1)
    {
      v99 = v95 + 1;
      v100 = &v98[24 * v95 + 24];
      v101 = 2 * v95;
      v95 = (2 * v95) | 1;
      v102 = v101 + 2;
      if (v102 < v91)
      {
        v103 = v100[24];
        if (*v100)
          v104 = v103 == 0;
        else
          v104 = 1;
        if (v104)
        {
          if (*v100)
            v105 = v103 == 0;
          else
            v105 = 0;
          if (!v105)
            goto LABEL_89;
        }
        else
        {
          v106 = *(_DWORD *)&v98[24 * v99 + 4];
          v107 = *((_DWORD *)v100 + 7);
          if (v106 <= v107 && (v106 != v107 || *(float *)&v98[24 * v99 + 8] <= *((float *)v100 + 8)))
            goto LABEL_89;
        }
        v100 += 24;
        v95 = v102;
      }
LABEL_89:
      v108 = *(_QWORD *)v100;
      *((_DWORD *)v98 + 2) = *((_DWORD *)v100 + 2);
      *(_QWORD *)v98 = v108;
      v109 = *((_QWORD *)v100 + 2);
      *((_QWORD *)v100 + 2) = 0;
      v110 = (void *)*((_QWORD *)v98 + 2);
      *((_QWORD *)v98 + 2) = v109;

      v98 = v100;
      if (v95 > (uint64_t)((unint64_t)(v91 - 2) >> 1))
      {
        v71 -= 24;
        if (v100 == v96 - 24)
        {
          v92 = *(_QWORD *)buf;
          *((_DWORD *)v100 + 2) = *(_DWORD *)&buf[8];
          *(_QWORD *)v100 = v92;
          v93 = (void *)*((_QWORD *)v100 + 2);
          *((_QWORD *)v100 + 2) = v97;

        }
        else
        {
          v111 = *(_QWORD *)v71;
          *((_DWORD *)v100 + 2) = *((_DWORD *)v96 - 4);
          *(_QWORD *)v100 = v111;
          v113 = *((_QWORD *)v96 - 1);
          v112 = (void **)(v96 - 8);
          *v112 = 0;
          v114 = (void *)*((_QWORD *)v100 + 2);
          *((_QWORD *)v100 + 2) = v113;

          v115 = *(_QWORD *)buf;
          *((_DWORD *)v71 + 2) = *(_DWORD *)&buf[8];
          *(_QWORD *)v71 = v115;
          v116 = *v112;
          *v112 = v97;

          v117 = v100 + 24 - v64;
          if (v117 >= 25)
          {
            v118 = v117 / 0x18uLL - 2;
            v119 = v118 >> 1;
            v120 = &v64[24 * (v118 >> 1)];
            v121 = *v100;
            if (*v120)
              v122 = v121 == 0;
            else
              v122 = 1;
            if (v122)
            {
              if (*v120)
                v123 = v121 == 0;
              else
                v123 = 0;
              if (v123)
              {
                v149 = *((_DWORD *)v100 + 1);
                goto LABEL_108;
              }
            }
            else
            {
              v124 = *(_DWORD *)&v64[24 * v119 + 4];
              v149 = *((_DWORD *)v100 + 1);
              if (v124 > v149
                || v124 == v149
                && (v149 = *(_DWORD *)&v64[24 * v119 + 4], *(float *)&v64[24 * v119 + 8] > *((float *)v100 + 2)))
              {
LABEL_108:
                v147 = *v100;
                v125 = *(_WORD *)(v100 + 1);
                v159 = v100[3];
                v158 = v125;
                v126 = *((float *)v100 + 2);
                v145 = *((_QWORD *)v100 + 2);
                *((_QWORD *)v100 + 2) = 0;
                v127 = *(_QWORD *)v120;
                *((_DWORD *)v100 + 2) = *((_DWORD *)v120 + 2);
                *(_QWORD *)v100 = v127;
                v128 = &v64[24 * v119];
                v129 = *((_QWORD *)v128 + 2);
                *((_QWORD *)v128 + 2) = 0;
                v130 = (void *)*((_QWORD *)v100 + 2);
                *((_QWORD *)v100 + 2) = v129;

                if (v118 >= 2)
                {
                  if (v147)
                  {
                    while (1)
                    {
                      v134 = v119 - 1;
                      v119 = (v119 - 1) >> 1;
                      v131 = &v64[24 * v119];
                      if (!*v131)
                        break;
                      v135 = *(_DWORD *)&v64[24 * v119 + 4];
                      if (v135 <= v149 && (v135 != v149 || *(float *)&v64[24 * v119 + 8] <= v126))
                        break;
                      v136 = *(_QWORD *)v131;
                      *((_DWORD *)v120 + 2) = *((_DWORD *)v131 + 2);
                      *(_QWORD *)v120 = v136;
                      v137 = &v64[24 * v119];
                      v138 = *((_QWORD *)v137 + 2);
                      *((_QWORD *)v137 + 2) = 0;
                      v139 = (void *)*((_QWORD *)v120 + 2);
                      *((_QWORD *)v120 + 2) = v138;

                      v120 = &v64[24 * v119];
                      if (v134 <= 1)
                        goto LABEL_110;
                    }
                  }
                  else
                  {
                    while (1)
                    {
                      v140 = v119 - 1;
                      v119 = (v119 - 1) >> 1;
                      v131 = &v64[24 * v119];
                      if (!*v131)
                        break;
                      v141 = *(_QWORD *)v131;
                      *((_DWORD *)v120 + 2) = *((_DWORD *)v131 + 2);
                      *(_QWORD *)v120 = v141;
                      v142 = &v64[24 * v119];
                      v143 = *((_QWORD *)v142 + 2);
                      *((_QWORD *)v142 + 2) = 0;
                      v144 = (void *)*((_QWORD *)v120 + 2);
                      *((_QWORD *)v120 + 2) = v143;

                      v120 = &v64[24 * v119];
                      if (v140 < 2)
                        goto LABEL_110;
                    }
                  }
                }
                v131 = v120;
LABEL_110:
                *v131 = v147;
                v132 = v158;
                v131[3] = v159;
                *(_WORD *)(v131 + 1) = v132;
                *((_DWORD *)v131 + 1) = v149;
                *((float *)v131 + 2) = v126;
                v133 = (void *)*((_QWORD *)v131 + 2);
                *((_QWORD *)v131 + 2) = v145;

              }
            }
          }
        }
        if (v91-- <= 2)
          goto LABEL_62;
        goto LABEL_75;
      }
    }
  }
LABEL_64:
  if (qword_1EF568E88 == -1)
  {
    v89 = (id)qword_1EF568E60;
    if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
      goto LABEL_67;
    goto LABEL_66;
  }
  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v89 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
  {
LABEL_66:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v89, OS_LOG_TYPE_DEBUG, "Style Sampling: nearestInventorySamplesToSample for input style sample: Completed", buf, 2u);
  }
LABEL_67:

  if (v64)
  {
    for (j = v156; j != v64; j -= 24)

    operator delete(v64);
  }
}

void sub_1BE6D9D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  sub_1BE6D9DB8((void **)va);
  _Unwind_Resume(a1);
}

void **sub_1BE6D9DB8(void **a1)
{
  id *v2;
  id *v3;
  void *v4;
  id *v5;

  v2 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 3;

        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE6DA0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v29 = v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DA16C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  id obj;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = *(id *)(a1 + 32);
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v40, (uint64_t)v44, 16, v3);
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v41 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
        v15 = (void *)MEMORY[0x1E0C99E20];
        objc_msgSend_characterCoverage(v14, v4, v5, v6, v7, v8);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setWithSet_(v15, v17, (uint64_t)v16, v18, v19, v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_intersectSet_(v21, v22, *(_QWORD *)(a1 + 40), v23, v24, v25);
        if (objc_msgSend_count(v21, v26, v27, v28, v29, v30) >= v10)
        {
          v10 = objc_msgSend_count(v21, v31, v32, v33, v34, v35);
          v36 = v14;

          v11 = v36;
        }

      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v40, (uint64_t)v44, 16, v8);
    }
    while (v9);
  }
  else
  {
    v11 = 0;
  }

  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v38 = *(void **)(v37 + 40);
  *(_QWORD *)(v37 + 40) = v11;

}

void sub_1BE6DA2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6DA56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DA5E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t *v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t *v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  _BOOL4 v75;
  unint64_t v77;
  BOOL v78;
  int v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t *v86;
  __int128 v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v95;
  int v96;
  BOOL v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t *v110;
  __int128 v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  _BOOL4 v116;
  unint64_t v118;
  BOOL v119;
  int v120;
  BOOL v121;
  id v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  __int128 v130;
  NSObject *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int64_t v165;
  __int128 v166;
  uint64_t *v167;
  __int128 v168;
  uint64_t *v169;
  uint64_t v170;
  int64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  BOOL v176;
  int v177;
  BOOL v178;
  uint64_t *v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t *v191;
  __int128 v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  BOOL v196;
  _BOOL4 v197;
  unint64_t v199;
  BOOL v200;
  int v201;
  BOOL v202;
  void *v203;
  uint64_t *v204;
  uint8_t buf[16];
  uint64_t v207;
  uint64_t v208;

  v204 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v208 = *MEMORY[0x1E0C80C00];
  while (v8 < objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6))
  {
    v13 = v8;
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v9, v8, v10, v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)MEMORY[0x1E0C99E20];
    objc_msgSend_characterCoverage(v14, v16, v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setWithSet_(v15, v22, (uint64_t)v21, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_intersectSet_(v26, v27, *(_QWORD *)(a1 + 40), v28, v29, v30);
    v203 = v26;
    v36 = objc_msgSend_count(v26, v31, v32, v33, v34, v35);
    objc_msgSend_transcription(v14, v37, v38, v39, v40, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = v14;
    v49 = objc_msgSend_length(v42, v44, v45, v46, v47, v48);
    v50 = v49;
    if (v6 >= v204)
    {
      v53 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7) + 1;
      if (v53 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F930();
      if (0x5555555555555556 * (v204 - v7) > v53)
        v53 = 0x5555555555555556 * (v204 - v7);
      if (0xAAAAAAAAAAAAAAABLL * (v204 - v7) >= 0x555555555555555)
        v54 = 0xAAAAAAAAAAAAAAALL;
      else
        v54 = v53;
      if (v54)
      {
        if (v54 > 0xAAAAAAAAAAAAAAALL)
          sub_1BE61F100();
        v55 = (char *)operator new(24 * v54);
        v56 = (uint64_t *)&v55[8 * (v6 - v7)];
        v51 = v13;
        *v56 = v13;
        v56[1] = v36;
        v56[2] = v50;
        if (v6 != v7)
          goto LABEL_15;
LABEL_109:
        v7 = v56;
        v204 = (uint64_t *)&v55[24 * v54];
        v52 = (char *)(v56 + 3);
        if (!v6)
          goto LABEL_19;
      }
      else
      {
        v55 = 0;
        v56 = (uint64_t *)(8 * (v6 - v7));
        v51 = v13;
        *v56 = v13;
        v56[1] = v36;
        v56[2] = v50;
        if (v6 == v7)
          goto LABEL_109;
LABEL_15:
        v57 = v56;
        do
        {
          v58 = *(_OWORD *)(v6 - 3);
          *(v57 - 1) = *(v6 - 1);
          *(_OWORD *)(v57 - 3) = v58;
          v57 -= 3;
          v6 -= 3;
        }
        while (v6 != v7);
        v6 = v7;
        v7 = v57;
        v204 = (uint64_t *)&v55[24 * v54];
        v52 = (char *)(v56 + 3);
        if (!v6)
          goto LABEL_19;
      }
      operator delete(v6);
      goto LABEL_19;
    }
    v51 = v13;
    *v6 = v13;
    v6[1] = v36;
    v52 = (char *)(v6 + 3);
    v6[2] = v49;
LABEL_19:
    v59 = v52 - (char *)v7;
    if (v52 - (char *)v7 >= 25)
    {
      v60 = v59 / 0x18uLL - 2;
      v61 = v60 >> 1;
      v62 = &v7[3 * (v60 >> 1)];
      v63 = v62[1];
      v64 = *((_QWORD *)v52 - 2);
      v65 = *((_QWORD *)v52 - 1);
      if (v63 > v64
        || v63 == v64
        && ((v77 = v62[2], v65 >= 3) ? (v78 = v77 >= v65) : (v78 = 0),
            v78 ? (v79 = 0) : (v79 = 1),
            v77 >= 3 ? (v80 = v79 == 0) : (v80 = 1),
            !v80))
      {
        v66 = v52 - 24;
        v67 = *((_QWORD *)v52 - 3);
        v68 = *(_OWORD *)v62;
        *((_QWORD *)v66 + 2) = v62[2];
        *(_OWORD *)v66 = v68;
        if (v60 >= 2)
        {
          while (1)
          {
            v71 = v61 - 1;
            v61 = (v61 - 1) >> 1;
            v69 = &v7[3 * v61];
            v72 = v69[1];
            if (v72 <= v64)
            {
              if (v72 != v64)
                break;
              v73 = v69[2];
              v74 = v65 >= 3 && v73 >= v65;
              v75 = !v74;
              if (v73 < 3 || !v75)
                break;
            }
            v70 = *(_OWORD *)v69;
            v62[2] = v69[2];
            *(_OWORD *)v62 = v70;
            v62 = &v7[3 * v61];
            if (v71 <= 1)
              goto LABEL_23;
          }
        }
        v69 = v62;
LABEL_23:
        *v69 = v67;
        v69[1] = v64;
        v69[2] = v65;
      }
    }

    v81 = 0xAAAAAAAAAAAAAAABLL * (v59 >> 3);
    v82 = *(_QWORD *)(a1 + 56);
    while (v81 > v82)
    {
      if (v59 >= 25)
      {
        v84 = 0;
        v85 = *(_OWORD *)v7;
        v207 = v7[2];
        *(_OWORD *)buf = v85;
        v86 = v7;
        do
        {
          v88 = v86;
          v86 += 3 * v84 + 3;
          v89 = 2 * v84;
          v84 = (2 * v84) | 1;
          v90 = v89 + 2;
          if (v90 < (uint64_t)v81)
          {
            v91 = v86[1];
            v92 = v86[4];
            if (v91 > v92
              || v91 == v92
              && ((v93 = v86[2], v94 = v86[5], v94 >= 3) ? (v95 = v93 >= v94) : (v95 = 0),
                  v95 ? (v96 = 0) : (v96 = 1),
                  v93 >= 3 ? (v97 = v96 == 0) : (v97 = 1),
                  !v97))
            {
              v86 += 3;
              v84 = v90;
            }
          }
          v87 = *(_OWORD *)v86;
          v88[2] = v86[2];
          *(_OWORD *)v88 = v87;
        }
        while (v84 <= (uint64_t)((v81 - 2) >> 1));
        v98 = v52 - 24;
        if (v86 == (uint64_t *)(v52 - 24))
        {
          v83 = *(_OWORD *)buf;
          v86[2] = v207;
          *(_OWORD *)v86 = v83;
        }
        else
        {
          v99 = *(_OWORD *)v98;
          v86[2] = *((_QWORD *)v52 - 1);
          *(_OWORD *)v86 = v99;
          v100 = *(_OWORD *)buf;
          *((_QWORD *)v52 - 1) = v207;
          *(_OWORD *)v98 = v100;
          v101 = (char *)v86 - (char *)v7 + 24;
          if (v101 >= 25)
          {
            v102 = v101 / 0x18uLL - 2;
            v103 = v102 >> 1;
            v104 = &v7[3 * (v102 >> 1)];
            v105 = v104[1];
            v106 = v86[1];
            v107 = v86[2];
            if (v105 > v106
              || v105 == v106
              && ((v118 = v104[2], v107 >= 3) ? (v119 = v118 >= v107) : (v119 = 0),
                  v119 ? (v120 = 0) : (v120 = 1),
                  v118 >= 3 ? (v121 = v120 == 0) : (v121 = 1),
                  !v121))
            {
              v108 = *v86;
              v109 = *(_OWORD *)v104;
              v86[2] = v104[2];
              *(_OWORD *)v86 = v109;
              if (v102 >= 2)
              {
                while (1)
                {
                  v112 = v103 - 1;
                  v103 = (v103 - 1) >> 1;
                  v110 = &v7[3 * v103];
                  v113 = v110[1];
                  if (v113 <= v106)
                  {
                    if (v113 != v106)
                      break;
                    v114 = v110[2];
                    v115 = v107 >= 3 && v114 >= v107;
                    v116 = !v115;
                    if (v114 < 3 || !v116)
                      break;
                  }
                  v111 = *(_OWORD *)v110;
                  v104[2] = v110[2];
                  *(_OWORD *)v104 = v111;
                  v104 = &v7[3 * v103];
                  if (v112 <= 1)
                    goto LABEL_80;
                }
              }
              v110 = v104;
LABEL_80:
              *v110 = v108;
              v110[1] = v106;
              v110[2] = v107;
            }
          }
        }
        v82 = *(_QWORD *)(a1 + 56);
      }
      v52 -= 24;
      v59 = v52 - (char *)v7;
      v81 = 0xAAAAAAAAAAAAAAABLL * ((v52 - (char *)v7) >> 3);
    }

    v8 = v51 + 1;
    v6 = (uint64_t *)v52;
  }
  if (v7 != v6)
  {
    v122 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v127 = objc_msgSend_initWithCapacity_(v122, v123, 0xAAAAAAAAAAAAAAABLL * (v6 - v7), v124, v125, v126);
    v128 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v129 = *(void **)(v128 + 40);
    *(_QWORD *)(v128 + 40) = v127;

    while (qword_1EF568E88 == -1)
    {
      v131 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
        goto LABEL_117;
LABEL_118:

      v149 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v150, *v7, v151, v152, v153);
      v154 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_normalizeStyleSample_(CHSynthesisStyleSample, v155, (uint64_t)v154, v156, v157, v158);
      v159 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v149, v160, (uint64_t)v159, v161, v162, v163);

      if ((char *)v6 - (char *)v7 >= 25)
      {
        v164 = 0;
        v165 = 0xAAAAAAAAAAAAAAABLL * (v6 - v7);
        v166 = *(_OWORD *)v7;
        v207 = v7[2];
        *(_OWORD *)buf = v166;
        v167 = v7;
        do
        {
          v169 = v167;
          v167 += 3 * v164 + 3;
          v170 = 2 * v164;
          v164 = (2 * v164) | 1;
          v171 = v170 + 2;
          if (v171 < v165)
          {
            v172 = v167[1];
            v173 = v167[4];
            if (v172 > v173
              || v172 == v173
              && ((v174 = v167[2], v175 = v167[5], v175 >= 3) ? (v176 = v174 >= v175) : (v176 = 0),
                  v176 ? (v177 = 0) : (v177 = 1),
                  v174 >= 3 ? (v178 = v177 == 0) : (v178 = 1),
                  !v178))
            {
              v167 += 3;
              v164 = v171;
            }
          }
          v168 = *(_OWORD *)v167;
          v169[2] = v167[2];
          *(_OWORD *)v169 = v168;
        }
        while (v164 <= (uint64_t)((unint64_t)(v165 - 2) >> 1));
        v179 = v6 - 3;
        if (v167 == v6 - 3)
        {
          v130 = *(_OWORD *)buf;
          v167[2] = v207;
          *(_OWORD *)v167 = v130;
        }
        else
        {
          v180 = *(_OWORD *)v179;
          v167[2] = *(v6 - 1);
          *(_OWORD *)v167 = v180;
          v181 = *(_OWORD *)buf;
          *(v6 - 1) = v207;
          *(_OWORD *)v179 = v181;
          v182 = (char *)v167 - (char *)v7 + 24;
          if (v182 >= 25)
          {
            v183 = v182 / 0x18uLL - 2;
            v184 = v183 >> 1;
            v185 = &v7[3 * (v183 >> 1)];
            v186 = v185[1];
            v187 = v167[1];
            v188 = v167[2];
            if (v186 > v187
              || v186 == v187
              && ((v199 = v185[2], v188 >= 3) ? (v200 = v199 >= v188) : (v200 = 0),
                  v200 ? (v201 = 0) : (v201 = 1),
                  v199 >= 3 ? (v202 = v201 == 0) : (v202 = 1),
                  !v202))
            {
              v189 = *v167;
              v190 = *(_OWORD *)v185;
              v167[2] = v185[2];
              *(_OWORD *)v167 = v190;
              if (v183 >= 2)
              {
                while (1)
                {
                  v193 = v184 - 1;
                  v184 = (v184 - 1) >> 1;
                  v191 = &v7[3 * v184];
                  v194 = v191[1];
                  if (v194 <= v187)
                  {
                    if (v194 != v187)
                      break;
                    v195 = v191[2];
                    v196 = v188 >= 3 && v195 >= v188;
                    v197 = !v196;
                    if (v195 < 3 || !v197)
                      break;
                  }
                  v192 = *(_OWORD *)v191;
                  v185[2] = v191[2];
                  *(_OWORD *)v185 = v192;
                  v185 = &v7[3 * v184];
                  if (v193 <= 1)
                    goto LABEL_142;
                }
              }
              v191 = v185;
LABEL_142:
              *v191 = v189;
              v191[1] = v187;
              v191[2] = v188;
            }
          }
        }
      }
      v6 -= 3;
      if (v7 == v6)
        goto LABEL_172;
    }
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v131 = (id)qword_1EF568E60;
    if (!os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
      goto LABEL_118;
LABEL_117:
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v132, *v7, v133, v134, v135);
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_transcription(v136, v137, v138, v139, v140, v141);
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    v148 = objc_msgSend_length(v142, v143, v144, v145, v146, v147);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v148;
    _os_log_impl(&dword_1BE607000, v131, OS_LOG_TYPE_DEFAULT, "Style Sampling: found style sample with length: %lu", buf, 0xCu);

    goto LABEL_118;
  }
LABEL_172:
  if (v7)
    operator delete(v7);
}

void sub_1BE6DAE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
  {
    operator delete(v10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE6DB170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v23 = v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DB1C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t i;
  const char *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void **v24;
  unint64_t v25;
  void **v26;
  uint64_t v27;
  void **v28;
  void *v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void **v47;
  void **v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void **k;
  void *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  void **v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  id v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  _BOOL4 v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  void *v117;
  void **v118;
  void *v120;
  id v121;
  void *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  void **v126;
  id v127;
  void *v128;
  id v129;
  id *v130;
  unint64_t v131;
  id v132;
  id v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  BOOL v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BOOL4 v164;
  id v165;
  void *v166;
  void *v167;
  void **j;
  uint64_t v170;
  void **__p;
  uint64_t v172;
  uint64_t v173;
  id obj;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  char *v179;
  void **v180;
  unint64_t v181;
  _BYTE v182[128];
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  v179 = 0;
  v180 = 0;
  v181 = 0;
  objc_msgSend__unsafeSamplesWithStylePrediction(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v177 = 0u;
  v178 = 0u;
  v175 = 0u;
  v176 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v175, (uint64_t)v182, 16, v7);
  if (v8)
  {
    v9 = 0;
    v10 = *(_QWORD *)v176;
    v172 = *(_QWORD *)v176;
    while (1)
    {
      for (i = 0; i != v8; ++i)
      {
        while (1)
        {
          if (*(_QWORD *)v176 != v10)
            objc_enumerationMutation(obj);
          v14 = *(void **)(*((_QWORD *)&v175 + 1) + 8 * i);
          if ((unint64_t)v9 >= v181)
            break;
          *v9++ = v14;
          v180 = v9;
          if (++i == v8)
            goto LABEL_44;
        }
        v15 = v179;
        v16 = (char *)((char *)v9 - v179);
        v17 = ((char *)v9 - v179) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_1BE61F930();
        v19 = v181 - (_QWORD)v179;
        if ((uint64_t)(v181 - (_QWORD)v179) >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          if (v20 >> 61)
            sub_1BE61F100();
          v21 = (char *)operator new(8 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[8 * v17];
        v23 = &v21[8 * v20];
        *(_QWORD *)v22 = v14;
        v24 = (void **)(v22 + 8);
        if (v9 == (void **)v15)
        {
          v179 = &v21[8 * v17];
          v180 = (void **)(v22 + 8);
          v181 = (unint64_t)v23;
          v10 = v172;
          if (v9)
            goto LABEL_26;
          goto LABEL_27;
        }
        v25 = (char *)v9 - v15 - 8;
        if (v25 < 0x138)
        {
          v26 = v9;
          goto LABEL_21;
        }
        v30 = (char *)(v9 - 1) - v15;
        if ((void **)((char *)v9 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8) > v9 - 1)
        {
          v26 = v9;
          do
          {
LABEL_21:
            v27 = (uint64_t)*--v26;
            *v26 = 0;
            *((_QWORD *)v22 - 1) = v27;
            v22 -= 8;
          }
          while (v26 != (void **)v15);
          goto LABEL_22;
        }
        if (&v16[(_QWORD)v21 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v16[(_QWORD)v21 - 8])
        {
          v26 = v9;
          goto LABEL_21;
        }
        v31 = v30 & 0xFFFFFFFFFFFFFFF8;
        if ((char *)v9 - v31 - 8 < v22 && &v16[(_QWORD)v21 - v31 - 8] < (char *)v9)
        {
          v26 = v9;
          goto LABEL_21;
        }
        v32 = (v25 >> 3) + 1;
        v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        v22 -= v33;
        v26 = &v9[v33 / 0xFFFFFFFFFFFFFFF8];
        v34 = v9 - 2;
        v35 = &v21[8 * v17 - 16];
        v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v38 = *((_OWORD *)v34 - 1);
          v37 = *(_OWORD *)v34;
          *((_OWORD *)v34 - 1) = 0uLL;
          *(_OWORD *)v34 = 0uLL;
          *((_OWORD *)v35 - 1) = v38;
          *(_OWORD *)v35 = v37;
          v34 -= 4;
          v35 -= 32;
          v36 -= 4;
        }
        while (v36);
        if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_21;
LABEL_22:
        v9 = (void **)v179;
        v28 = v180;
        v179 = v22;
        v180 = v24;
        v181 = (unint64_t)v23;
        if (v28 == v9)
        {
          v10 = v172;
          if (v9)
            goto LABEL_26;
        }
        else
        {
          v10 = v172;
          do
          {
            v29 = *--v28;

          }
          while (v28 != v9);
          if (v9)
LABEL_26:
            operator delete(v9);
        }
LABEL_27:
        v9 = v24;
        v180 = v24;
      }
LABEL_44:
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v175, (uint64_t)v182, 16, v13);
      if (!v8)
      {
        __p = (void **)v179;
        goto LABEL_47;
      }
    }
  }
  __p = 0;
  v9 = 0;
LABEL_47:

  v44 = v9 - __p;
  if (v44 >= 0xA)
    v44 = 10;
  if (!v44)
  {

    if (!__p)
      return;
    goto LABEL_64;
  }
  v170 = v44;
  if (v44 != 1)
  {
    v45 = (v44 - 2) >> 1;
    v46 = v45 + 1;
    v47 = &__p[v45];
    do
    {
      sub_1BE6DF95C((uint64_t)__p, v170, v47--);
      --v46;
    }
    while (v46);
  }
  v48 = &__p[v170];
  for (j = v48; v48 != v9; ++v48)
  {
    if (sub_1BE6DF888(*v48, *__p))
    {
      v69 = *v48;
      *v48 = 0;
      v70 = *__p;
      *__p = 0;
      v71 = *v48;
      *v48 = v70;

      v72 = *__p;
      *__p = v69;

      sub_1BE6DF95C((uint64_t)__p, v170, __p);
    }
  }
  if (v170 != 1)
  {
    v75 = v170;
    do
    {
      v77 = 0;
      v78 = __p;
      v167 = *__p;
      *__p = 0;
      v173 = v75;
      v79 = (unint64_t)(v75 - 2) >> 1;
      do
      {
        v80 = (uint64_t)&v78[v77 + 1];
        v81 = 2 * v77;
        v77 = (2 * v77) | 1;
        v82 = v81 + 2;
        if (v81 + 2 < v173)
        {
          v83 = *(void **)(v80 + 8);
          v84 = *(id *)v80;
          v85 = v83;
          v91 = objc_msgSend_samplingCount(v84, v86, v87, v88, v89, v90);
          if (v91 == objc_msgSend_samplingCount(v85, v92, v93, v94, v95, v96))
          {
            objc_msgSend_creationDate(v84, v97, v98, v99, v100, v101);
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_creationDate(v85, v103, v104, v105, v106, v107);
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            v109 = v102 > v108;

          }
          else
          {
            v110 = objc_msgSend_samplingCount(v84, v97, v98, v99, v100, v101);
            v109 = v110 > objc_msgSend_samplingCount(v85, v111, v112, v113, v114, v115);
          }

          if (v109)
          {
            v80 += 8;
            v77 = v82;
          }
        }
        v116 = *(id *)v80;
        *(_QWORD *)v80 = 0;
        v117 = *v78;
        *v78 = v116;

        v78 = (void **)v80;
      }
      while (v77 <= v79);
      v118 = j - 1;
      if (v80 == (_QWORD)--j)
      {
        v76 = *(id *)v80;
        *(_QWORD *)v80 = v167;
      }
      else
      {
        v120 = *v118;
        *v118 = 0;
        v121 = *(id *)v80;
        *(_QWORD *)v80 = v120;

        v122 = *j;
        *j = v167;

        v123 = v80 + 8 - (_QWORD)__p;
        if (v123 < 9)
          goto LABEL_72;
        v124 = ((unint64_t)v123 >> 3) - 2;
        v125 = v124 >> 1;
        v126 = &__p[v124 >> 1];
        if (!sub_1BE6DF888(*v126, *(void **)v80))
          goto LABEL_72;
        v127 = *(id *)v80;
        *(_QWORD *)v80 = 0;
        v128 = *v126;
        *v126 = 0;
        v129 = *(id *)v80;
        *(_QWORD *)v80 = v128;

        if (v124 >= 2)
        {
          do
          {
            v131 = v125 - 1;
            v125 = (v125 - 1) >> 1;
            v130 = &__p[v125];
            v132 = *v130;
            v133 = v127;
            v139 = objc_msgSend_samplingCount(v132, v134, v135, v136, v137, v138);
            if (v139 == objc_msgSend_samplingCount(v133, v140, v141, v142, v143, v144))
            {
              objc_msgSend_creationDate(v132, v145, v146, v147, v148, v149);
              v150 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_creationDate(v133, v151, v152, v153, v154, v155);
              v156 = (void *)objc_claimAutoreleasedReturnValue();
              v157 = v150 > v156;

              if (!v157)
                goto LABEL_85;
            }
            else
            {
              v158 = objc_msgSend_samplingCount(v132, v145, v146, v147, v148, v149);
              v164 = v158 > objc_msgSend_samplingCount(v133, v159, v160, v161, v162, v163);

              if (!v164)
                goto LABEL_85;
            }
            v165 = *v130;
            *v130 = 0;
            v166 = *v126;
            *v126 = v165;

            v126 = &__p[v125];
          }
          while (v131 > 1);
        }
        else
        {
LABEL_85:
          v130 = v126;
        }
        v76 = *v130;
        *v130 = v127;
      }

LABEL_72:
      v75 = v173 - 1;
    }
    while (v173 > 2);
  }
  v49 = 0;
  __p = (void **)v179;
  do
  {
    objc_msgSend_transcription(__p[v49], v39, v40, v41, v42, v43);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = objc_msgSend_length(v50, v51, v52, v53, v54, v55);
    objc_msgSend_transcription(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v57, v58, v59, v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = v56 > objc_msgSend_length(v62, v63, v64, v65, v66, v67);

    if (v68)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), __p[v49]);
    ++v49;
  }
  while (v170 != v49);

LABEL_64:
  for (k = v180; k != __p; --k)
  {
    v74 = *(k - 1);

  }
  v180 = __p;
  operator delete(__p);
}

void sub_1BE6DB910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  sub_1BE6DB9C4(&a26);
  _Unwind_Resume(a1);
}

void **sub_1BE6DB9C4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1BE6DBDD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DBE78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  unint64_t v87;
  id obj;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _BYTE v97[128];
  _BYTE v98[128];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v87 = objc_msgSend__maxSamplesToStitch(CHSynthesisStyleInventory, a2, a3, a4, a5, a6);
  if (objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v7, v8, v9, v10, v11))
  {
    objc_msgSend_nearestInventorySamplesToSample_prompt_maxStyleSampleLength_(*(void **)(a1 + 32), v12, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72), v13);
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v93, (uint64_t)v98, 16, v15);
    if (v21)
    {
      v22 = *(_QWORD *)v94;
      while (2)
      {
        v23 = 0;
        do
        {
          if (*(_QWORD *)v94 != v22)
            objc_enumerationMutation(obj);
          objc_msgSend_transcription(*(void **)(*((_QWORD *)&v93 + 1) + 8 * v23), v16, v17, v18, v19, v20);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = (unint64_t)objc_msgSend_length(v24, v25, v26, v27, v28, v29) < *(_QWORD *)(a1 + 72);

          if (v30)
          {
            v31 = 1;
            goto LABEL_12;
          }
          ++v23;
        }
        while (v21 != v23);
        v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v93, (uint64_t)v98, 16, v20);
        if (v21)
          continue;
        break;
      }
    }
    v31 = 0;
LABEL_12:

    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v86 = obj;
    v34 = 0;
    v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v86, v32, (uint64_t)&v89, (uint64_t)v97, 16, v33);
    if (v40)
    {
      v41 = 0;
      v42 = *(_QWORD *)v90;
LABEL_14:
      v43 = 0;
      while (1)
      {
        if (*(_QWORD *)v90 != v42)
          objc_enumerationMutation(v86);
        v44 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * v43);
        if (!v31
          || (objc_msgSend_transcription(*(void **)(*((_QWORD *)&v89 + 1) + 8 * v43), v35, v36, v37, v38, v39),
              v45 = (void *)objc_claimAutoreleasedReturnValue(),
              v51 = (unint64_t)(v41 + objc_msgSend_length(v45, v46, v47, v48, v49, v50) + 1) > *(_QWORD *)(a1 + 72),
              v45,
              !v51))
        {
          objc_msgSend_remainingCharacterSetFromPromptCharacterSet_withSample_(CHSynthesisStyleInventory, v35, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), (uint64_t)v44, v38, v39);
          v52 = (void *)objc_claimAutoreleasedReturnValue();

          v34 = v52;
          v58 = objc_msgSend_count(v52, v53, v54, v55, v56, v57);
          if (v58 < objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v59, v60, v61, v62, v63))
          {
            objc_msgSend_addObject_(*(void **)(a1 + 56), v64, (uint64_t)v44, v66, v67, v68);
            objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v34);
            objc_msgSend_transcription(v44, v69, v70, v71, v72, v73);
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            v80 = objc_msgSend_length(v74, v75, v76, v77, v78, v79);

            v41 += v80;
          }
          if (!objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v64, v65, v66, v67, v68)
            || objc_msgSend_count(*(void **)(a1 + 56), v81, v82, v83, v84, v85) >= v87)
          {
            break;
          }
        }
        if (v40 == ++v43)
        {
          v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v86, v35, (uint64_t)&v89, (uint64_t)v97, 16, v39);
          if (v40)
            goto LABEL_14;
          break;
        }
      }
    }

  }
}

void sub_1BE6DC16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6DC1D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(void **)(a1 + 32);
  v7 = objc_msgSend_currentSamplingTimestep(v6, a2, a3, a4, a5, a6) + 1;
  return objc_msgSend_setCurrentSamplingTimestep_(v6, v8, v7, v9, v10, v11);
}

void sub_1BE6DC27C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6DC680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6DC9F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6DCB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE6DCB50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6DCB64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DCB74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isFastPath;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  uint8_t buf[4];
  uint64_t v195;
  __int16 v196;
  uint64_t v197;
  __int16 v198;
  double v199;
  __int16 v200;
  void *v201;
  __int16 v202;
  uint64_t v203;
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend_requestType(*(void **)(a1 + 32), a2, a3, a4, a5, a6))
  {
    objc_msgSend_options(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    isFastPath = objc_msgSend_isFastPath(v12, v13, v14, v15, v16, v17);

    if ((isFastPath & 1) == 0)
    {
      objc_msgSend_string(*(void **)(a1 + 32), v19, v20, v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend_length(v24, v25, v26, v27, v28, v29);

      if (!v30)
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v31 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v31, OS_LOG_TYPE_FAULT, "Style Sampling: requesting style sample for generation of empty prompt!", buf, 2u);
        }

      }
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v32 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_string(*(void **)(a1 + 32), v33, v34, v35, v36, v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend_length(v38, v39, v40, v41, v42, v43);
        *(_DWORD *)buf = 134217984;
        v195 = v44;
        _os_log_impl(&dword_1BE607000, v32, OS_LOG_TYPE_DEFAULT, "Style Sampling: request sent to the inventory to find a style sample for text prompt with length: %lu", buf, 0xCu);

      }
      objc_msgSend_styleDrawing(*(void **)(a1 + 40), v45, v46, v47, v48, v49);
      v192 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_styleContent(*(void **)(a1 + 40), v50, v51, v52, v53, v54);
      v191 = (void *)objc_claimAutoreleasedReturnValue();
      v193 = 0;
      if (!v192 || !v191)
      {
LABEL_19:
        objc_msgSend_string(*(void **)(a1 + 32), v55, v56, v57, v58, v59);
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        v91 = objc_msgSend_maxStyleSampleLengthForPrompt_(CHSynthesisStyleInventory, v87, (uint64_t)v86, v88, v89, v90);

        v92 = *(void **)(a1 + 48);
        objc_msgSend_string(*(void **)(a1 + 32), v93, v94, v95, v96, v97);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_styleSampleForInputSample_prompt_samplingAlgorithm_maxStyleSampleLength_(v92, v99, (uint64_t)v193, (uint64_t)v98, *(_QWORD *)(a1 + 56), v91);
        v100 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v100)
        {
LABEL_24:

          return;
        }
        objc_msgSend_drawing(v100, v101, v102, v103, v104, v105);
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setStyleDrawing_(*(void **)(a1 + 40), v107, (uint64_t)v106, v108, v109, v110);

        objc_msgSend_transcription(v100, v111, v112, v113, v114, v115);
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setStyleContent_(*(void **)(a1 + 40), v117, (uint64_t)v116, v118, v119, v120);

        objc_msgSend_string(*(void **)(a1 + 32), v121, v122, v123, v124, v125);
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_characterCoverageWithString_(CHSynthesisStyleSample, v127, (uint64_t)v126, v128, v129, v130);
        v131 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_remainingCharacterSetFromPromptCharacterSet_withSample_(CHSynthesisStyleInventory, v132, (uint64_t)v131, (uint64_t)v100, v133, v134);
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        v141 = objc_msgSend_count(v131, v136, v137, v138, v139, v140);
        v147 = objc_msgSend_count(v135, v142, v143, v144, v145, v146);
        v153 = objc_msgSend_count(v131, v148, v149, v150, v151, v152);
        if (qword_1EF568E88 == -1)
        {
          v154 = (id)qword_1EF568E60;
          if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
          {
LABEL_23:

            goto LABEL_24;
          }
        }
        else
        {
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v154 = (id)qword_1EF568E60;
          if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
            goto LABEL_23;
        }
        objc_msgSend_transcription(v100, v155, v156, v157, v158, v159);
        v190 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_transcription(v100, v160, v161, v162, v163, v164);
        v189 = (void *)objc_claimAutoreleasedReturnValue();
        v170 = objc_msgSend_length(v189, v165, v166, v167, v168, v169);
        objc_msgSend_string(*(void **)(a1 + 32), v171, v172, v173, v174, v175);
        v176 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_string(*(void **)(a1 + 32), v177, v178, v179, v180, v181);
        v182 = (void *)objc_claimAutoreleasedReturnValue();
        v188 = objc_msgSend_length(v182, v183, v184, v185, v186, v187);
        *(_DWORD *)buf = 138740995;
        v195 = (uint64_t)v190;
        v196 = 2048;
        v197 = v170;
        v198 = 2048;
        v199 = (double)(unint64_t)(v141 - v147) / (double)(unint64_t)v153 * 100.0;
        v200 = 2117;
        v201 = v176;
        v202 = 2048;
        v203 = v188;
        _os_log_impl(&dword_1BE607000, v154, OS_LOG_TYPE_DEFAULT, "Style Sampling: using style sample: %{sensitive}@ of length: %lu with character coverage percentage: %f for synthesis request with prompt: %{sensitive}@ of length: %lu", buf, 0x34u);

        goto LABEL_23;
      }
      objc_msgSend_styleContent(*(void **)(a1 + 40), v55, v56, v57, v58, v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_styleDrawing(*(void **)(a1 + 40), v61, v62, v63, v64, v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_set(MEMORY[0x1E0C99E60], v67, v68, v69, v70, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_sampleWithTranscription_drawing_strokeIdentifiers_(CHSynthesisStyleSample, v73, (uint64_t)v60, (uint64_t)v66, (uint64_t)v72, v74);
      v193 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_stylePrediction(*(void **)(a1 + 40), v75, v76, v77, v78, v79);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_updateStyleEmbedding_(v193, v81, (uint64_t)v80, v82, v83, v84);

      if (qword_1EF568E88 == -1)
      {
        v85 = (id)qword_1EF568E60;
        if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
LABEL_18:

          goto LABEL_19;
        }
      }
      else
      {
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v85 = (id)qword_1EF568E60;
        if (!os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
      }
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v85, OS_LOG_TYPE_DEFAULT, "Style Sampling: input sample is part of the synthesis request", buf, 2u);
      goto LABEL_18;
    }
  }
}

void sub_1BE6DD0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE6DD2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6DD2C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_count(*(void **)(*(_QWORD *)(a1 + 32) + 32), a2, a3, a4, a5, a6);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE6DD3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DD40C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DD41C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int isEqualToDictionary;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int isEqual;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int isEqualToString;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  BOOL v111;
  id v112;

  v112 = *(id *)(a1 + 32);
  objc_msgSend_styles(*(void **)(a1 + 40), v2, v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_styles(v112, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToDictionary = objc_msgSend_isEqualToDictionary_(v7, v14, (uint64_t)v13, v15, v16, v17);

  if (!isEqualToDictionary)
    goto LABEL_8;
  objc_msgSend_sampleCountByCharacter(*(void **)(a1 + 40), v19, v20, v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sampleCountByCharacter(v112, v25, v26, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend_isEqualToDictionary_(v24, v31, (uint64_t)v30, v32, v33, v34);

  if (!v35)
    goto LABEL_8;
  objc_msgSend_inventoryStorageURL(*(void **)(a1 + 40), v36, v37, v38, v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_inventoryStorageURL(v112, v42, v43, v44, v45, v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  isEqual = objc_msgSend_isEqual_(v41, v48, (uint64_t)v47, v49, v50, v51);

  if (!isEqual)
    goto LABEL_8;
  objc_msgSend_synthesisModelHash(*(void **)(a1 + 40), v53, v54, v55, v56, v57);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_synthesisModelHash(v112, v59, v60, v61, v62, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v58, v65, (uint64_t)v64, v66, v67, v68);

  if (!isEqualToString)
    goto LABEL_8;
  v75 = objc_msgSend_currentSamplingTimestep(*(void **)(a1 + 40), v70, v71, v72, v73, v74);
  if (v75 != objc_msgSend_currentSamplingTimestep(v112, v76, v77, v78, v79, v80))
    goto LABEL_8;
  objc_msgSend_fastPathCharacterStyles(*(void **)(a1 + 40), v81, v82, v83, v84, v85);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fastPathCharacterStyles(v112, v87, v88, v89, v90, v91);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v97 = objc_msgSend_isEqualToDictionary_(v86, v93, (uint64_t)v92, v94, v95, v96);

  if (v97)
  {
    objc_msgSend_characterStyleTimestamp(*(void **)(a1 + 40), v98, v99, v100, v101, v102);
    v104 = v103;
    objc_msgSend_characterStyleTimestamp(v112, v105, v106, v107, v108, v109);
    v111 = v104 == v110;
  }
  else
  {
LABEL_8:
    v111 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v111;

}

void sub_1BE6DD5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6DD664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6DD67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6DD78C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DD838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6DD850(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = objc_msgSend_isEqualToString_(*(void **)(*(_QWORD *)(a1 + 32) + 16), a2, *(_QWORD *)(a1 + 40), a4, a5, a6);
  if ((result & 1) == 0)
  {
    objc_msgSend_stringWithString_(MEMORY[0x1E0CB3940], v8, *(_QWORD *)(a1 + 40), v9, v10, v11);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(v13 + 16);
    *(_QWORD *)(v13 + 16) = v12;

    objc_msgSend_clearSamplesEmbeddingVector(*(void **)(a1 + 32), v15, v16, v17, v18, v19);
    return objc_msgSend_setHasInventoryChanged_(*(void **)(a1 + 32), v20, 1, v21, v22, v23);
  }
  return result;
}

void sub_1BE6DD968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE6DD988(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_1BE6DDA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_1BE6DDA44(uint64_t a1)
{
  double result;

  result = *(double *)(*(_QWORD *)(a1 + 32) + 80);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1BE6DDB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6DDB38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  _QWORD v9[5];

  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BE6DDB90;
  v9[3] = &unk_1E77F3970;
  v9[4] = v6;
  return objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v7, a2, (uint64_t)v9, a4, a5, a6);
}

void sub_1BE6DDB90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int CodepointInString;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;

  v42 = a2;
  v5 = a3;
  CodepointInString = objc_msgSend_firstCodepointInString(v42, v6, v7, v8, v9, v10);
  unicodeToNSString(CodepointInString, v12, v13, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v18, (uint64_t)v17, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v22)
  {
    v27 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v28, (uint64_t)v27, (uint64_t)v17, v29, v30);

  }
  objc_msgSend_objectForKeyedSubscript_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v23, (uint64_t)v17, v24, v25, v26);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = (void *)objc_msgSend_copy(v5, v32, v33, v34, v35, v36);
  objc_msgSend_addObject_(v31, v38, (uint64_t)v37, v39, v40, v41);

}

void sub_1BE6DDC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE6DDCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6DDCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6DDD38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_removeAllObjects(*(void **)(*(_QWORD *)(a1 + 32) + 56), a2, a3, a4, a5, a6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = 0;
  return result;
}

void sub_1BE6DDE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE6DDE50(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint8_t buf[4];
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  unicodeToNSString(*(_DWORD *)(a1 + 64), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v7;
  if (*(uint64_t *)(a1 + 56) >= 1)
  {
    objc_msgSend_stringByAppendingFormat_(v7, v8, (uint64_t)CFSTR(" %d"), v10, v11, v12, *(_QWORD *)(a1 + 56));
    v14 = objc_claimAutoreleasedReturnValue();

    v13 = (void *)v14;
  }
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v8, v9, v10, v11, v12);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = v15;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  objc_msgSend_set(MEMORY[0x1E0C99E60], v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sampleWithTranscription_drawing_strokeIdentifiers_(CHSynthesisStyleSample, v24, v16, v17, (uint64_t)v23, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 56), v27, (uint64_t)v26, (uint64_t)v13, v28, v29);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v30 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v32 = v13;
    _os_log_impl(&dword_1BE607000, v30, OS_LOG_TYPE_DEBUG, "Added personalized character for \"%@\"", buf, 0xCu);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 1;
}

void sub_1BE6DDFE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6DE000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6DE014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DE33C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  NSObject *v77;
  uint64_t v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id obj;
  id v88;
  _QWORD v89[8];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _QWORD v94[4];
  id v95;
  uint8_t v96[4];
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint8_t v100[128];
  _BYTE buf[24];
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v2 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v8 = objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v3, v4, v5, v6, v7);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2048;
    v102 = v10;
    _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_DEFAULT, "Inventory data ingestion: removing style samples if needed for inventory size: %lu, maximum size: %lu, minimum sample count by characters: %lu", buf, 0x20u);
  }

  if ((unint64_t)objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v11, v12, v13, v14, v15) > *(_QWORD *)(a1 + 40))
  {
    v21 = objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v16, v17, v18, v19, v20);
    v22 = *(_QWORD *)(a1 + 40);
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v23, v24, v25, v26, v27);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_styles(*(void **)(a1 + 32), v28, v29, v30, v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_allValues(v33, v34, v35, v36, v37, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v94[0] = MEMORY[0x1E0C809B0];
    v94[1] = 3221225472;
    v94[2] = sub_1BE6DE850;
    v94[3] = &unk_1E77F39C0;
    v88 = v86;
    v95 = v88;
    objc_msgSend_enumerateObjectsUsingBlock_(v39, v40, (uint64_t)v94, v41, v42, v43);

    objc_msgSend_allKeys(v88, v44, v45, v46, v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sortedArrayUsingComparator_(v49, v50, (uint64_t)&unk_1E77F39E0, v51, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v102 = 0;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    obj = v54;
    v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v55, (uint64_t)&v90, (uint64_t)v100, 16, v56);
    v62 = v21 - v22;
    if (v61)
    {
      v63 = *(_QWORD *)v91;
LABEL_8:
      v64 = 0;
      while (1)
      {
        if (*(_QWORD *)v91 != v63)
          objc_enumerationMutation(obj);
        objc_msgSend_objectForKeyedSubscript_(v88, v57, *(_QWORD *)(*((_QWORD *)&v90 + 1) + 8 * v64), v58, v59, v60);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_sortedArrayUsingComparator_(v65, v66, (uint64_t)&unk_1E77EFC98, v67, v68, v69);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v89[0] = MEMORY[0x1E0C809B0];
        v89[1] = 3221225472;
        v89[2] = sub_1BE6DEA20;
        v89[3] = &unk_1E77F3A28;
        v71 = *(_QWORD *)(a1 + 48);
        v89[4] = *(_QWORD *)(a1 + 32);
        v89[5] = buf;
        v89[6] = v71;
        v89[7] = v62;
        objc_msgSend_enumerateObjectsUsingBlock_(v70, v72, (uint64_t)v89, v73, v74, v75);
        v76 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24) < v62;

        if (!v76)
          break;
        if (v61 == ++v64)
        {
          v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v57, (uint64_t)&v90, (uint64_t)v100, 16, v60);
          if (v61)
            goto LABEL_8;
          break;
        }
      }
    }

    if (*(_QWORD *)(*(_QWORD *)&buf[8] + 24) > v62)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v77 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v77, OS_LOG_TYPE_FAULT))
      {
        v78 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
        *(_DWORD *)v96 = 134218240;
        v97 = v78;
        v98 = 2048;
        v99 = v62;
        _os_log_impl(&dword_1BE607000, v77, OS_LOG_TYPE_FAULT, "Deleted more samples (%ld) than requested (%ld).", v96, 0x16u);
      }

    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v79 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      v85 = objc_msgSend_countOfStyleSamples(*(void **)(a1 + 32), v80, v81, v82, v83, v84);
      *(_DWORD *)v96 = 134217984;
      v97 = v85;
      _os_log_impl(&dword_1BE607000, v79, OS_LOG_TYPE_DEFAULT, "Inventory data ingestion: Inventory size after removing samples: %ld", v96, 0xCu);
    }

    _Block_object_dispose(buf, 8);
  }
}

void sub_1BE6DE798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  uint64_t v35;

  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DE850(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;

  v39 = a2;
  v8 = objc_msgSend_creationTimestep(v39, v3, v4, v5, v6, v7);
  v14 = objc_msgSend_samplingCount(v39, v9, v10, v11, v12, v13);
  objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v15, v14 + v8, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v20, (uint64_t)v19, v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v24)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v25, v26, v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 32), v31, (uint64_t)v30, (uint64_t)v19, v32, v33);

  }
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v25, (uint64_t)v19, v27, v28, v29);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v34, v35, (uint64_t)v39, v36, v37, v38);

}

void sub_1BE6DE918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE6DE938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6DE94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6DE960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6DE978(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3, a4, a5, a6);
}

uint64_t sub_1BE6DE980(uint64_t a1, void *a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a3;
  objc_msgSend_creationDate(a2, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_creationDate(v4, v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_compare_(v10, v17, (uint64_t)v16, v18, v19, v20);

  return v21;
}

void sub_1BE6DE9EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE6DEA10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DEA20(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;

  v6 = a2;
  v7 = *(void **)(a1 + 32);
  v21 = v6;
  objc_msgSend_characterCoverage(v6, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v7) = objc_msgSend__unsafeHasLowSampleCountForCharacters_minimumSampleCount_(v7, v14, (uint64_t)v13, *(_QWORD *)(a1 + 48), v15, v16);

  if ((v7 & 1) == 0)
  {
    objc_msgSend__unsafeRemoveSample_(*(void **)(a1 + 32), v17, (uint64_t)v21, v18, v19, v20);
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) >= *(_QWORD *)(a1 + 56))
    *a4 = 1;

}

void sub_1BE6DEAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6DEAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6DEB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DEB94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("0"), a4, a5, a6, CFSTR("1"), CFSTR("2"), CFSTR("3"), CFSTR("4"), CFSTR("5"), CFSTR("6"), CFSTR("7"), CFSTR("8"), CFSTR("9"), 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_characterCoverage(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend_isSubsetOfSet_(v17, v13, (uint64_t)v12, v14, v15, v16);

}

void sub_1BE6DEC60(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void sub_1BE6DEC78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DED38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DED68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[6];
  _QWORD v14[4];

  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v14[3] = 0;
  objc_msgSend_characterCoverage(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BE6DEE3C;
  v13[3] = &unk_1E77F3A50;
  v8 = *(_QWORD *)(a1 + 40);
  v13[4] = v14;
  v13[5] = v8;
  objc_msgSend_enumerateObjectsUsingBlock_(v7, v9, (uint64_t)v13, v10, v11, v12);

  _Block_object_dispose(v14, 8);
}

void sub_1BE6DEE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DEE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6DEE3C(uint64_t a1, void *a2, _BYTE *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int IsMember;
  void *v21;
  id v22;

  v22 = a2;
  objc_msgSend_lowercaseLetterCharacterSet(MEMORY[0x1E0CB3500], v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_characterAtIndex_(v22, v11, 0, v12, v13, v14);
  IsMember = objc_msgSend_characterIsMember_(v10, v16, v15, v17, v18, v19);

  if (IsMember)
  {
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v21 = v22;
    if (*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) < 10)
      goto LABEL_3;
LABEL_5:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
    goto LABEL_3;
  }
  v21 = v22;
  if (*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) >= 10)
    goto LABEL_5;
LABEL_3:

}

void sub_1BE6DEF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6DEF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6DEFD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DF148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE6DF1C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DF250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6DF268(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;

  objc_msgSend_styles(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1BE6DF300;
  v12[3] = &unk_1E77F3A78;
  v13 = *(id *)(a1 + 40);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v7, v8, (uint64_t)v12, v9, v10, v11);

}

void sub_1BE6DF2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6DF300(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE6DF3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6DF408(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1BE6DF51C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  char v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  __int16 v46;
  unsigned __int8 v47;

  v3 = a2 - 2;
  if (a2 < 2)
    return;
  v5 = v3 >> 1;
  if ((uint64_t)(v3 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a3[-a1] >> 3)))
    return;
  v7 = (0x5555555555555556 * ((uint64_t)&a3[-a1] >> 3)) | 1;
  v8 = (uint64_t *)(a1 + 24 * v7);
  if (0x5555555555555556 * ((uint64_t)&a3[-a1] >> 3) + 2 < a2)
  {
    v9 = *((unsigned __int8 *)v8 + 24);
    if (*(_BYTE *)v8)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v12 = *(_DWORD *)(a1 + 24 * v7 + 4);
      v13 = *((_DWORD *)v8 + 7);
      if (v12 <= v13 && (v12 != v13 || *(float *)(a1 + 24 * v7 + 8) <= *((float *)v8 + 8)))
        goto LABEL_16;
      goto LABEL_15;
    }
    if (*(_BYTE *)v8)
      v11 = v9 == 0;
    else
      v11 = 0;
    if (v11)
    {
LABEL_15:
      v8 += 3;
      v7 = 0x5555555555555556 * ((uint64_t)&a3[-a1] >> 3) + 2;
    }
  }
LABEL_16:
  v14 = *a3;
  v15 = *a3;
  if (*(_BYTE *)v8)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (v16)
  {
    if (*(_BYTE *)v8)
      v17 = v15 == 0;
    else
      v17 = 0;
    if (v17)
      return;
    v18 = *((_DWORD *)a3 + 1);
  }
  else
  {
    v19 = *((_DWORD *)v8 + 1);
    v18 = *((_DWORD *)a3 + 1);
    if (v19 > v18)
      return;
    if (v19 == v18)
    {
      v18 = *((_DWORD *)v8 + 1);
      if (*((float *)v8 + 2) > *((float *)a3 + 2))
        return;
    }
  }
  v46 = *(_WORD *)(a3 + 1);
  v47 = a3[3];
  v20 = *((float *)a3 + 2);
  v21 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = 0;
  v22 = *v8;
  *((_DWORD *)a3 + 2) = *((_DWORD *)v8 + 2);
  *(_QWORD *)a3 = v22;
  v23 = v8[2];
  v8[2] = 0;
  v24 = (void *)*((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v23;

  if (v5 < v7)
    goto LABEL_77;
  if (!v14)
  {
    v25 = v8;
    while (1)
    {
      v26 = 2 * v7;
      v7 = (2 * v7) | 1;
      v8 = (uint64_t *)(a1 + 24 * v7);
      if (v26 + 2 < a2)
      {
        v27 = *((unsigned __int8 *)v8 + 24);
        if (*(_BYTE *)v8)
          v28 = v27 == 0;
        else
          v28 = 1;
        if (v28)
        {
          if (*(_BYTE *)v8)
            v29 = v27 == 0;
          else
            v29 = 0;
          if (!v29)
            goto LABEL_45;
        }
        else
        {
          v30 = *(_DWORD *)(a1 + 24 * v7 + 4);
          v31 = *((_DWORD *)v8 + 7);
          if (v30 <= v31 && (v30 != v31 || *(float *)(a1 + 24 * v7 + 8) <= *((float *)v8 + 8)))
            goto LABEL_45;
        }
        v8 += 3;
        v7 = v26 + 2;
      }
LABEL_45:
      if (*(_BYTE *)v8)
        goto LABEL_76;
      v32 = *v8;
      *((_DWORD *)v25 + 2) = *((_DWORD *)v8 + 2);
      *v25 = v32;
      v33 = v8[2];
      v8[2] = 0;
      v34 = (void *)v25[2];
      v25[2] = v33;

      v25 = v8;
      if (v5 < v7)
        goto LABEL_77;
    }
  }
  while (1)
  {
    v25 = v8;
    v38 = 2 * v7;
    v7 = (2 * v7) | 1;
    v8 = (uint64_t *)(a1 + 24 * v7);
    if (v38 + 2 < a2)
    {
      v39 = *((unsigned __int8 *)v8 + 24);
      if (*(_BYTE *)v8)
        v40 = v39 == 0;
      else
        v40 = 1;
      if (v40)
      {
        if (*(_BYTE *)v8)
          v41 = v39 == 0;
        else
          v41 = 0;
        if (v41)
        {
LABEL_64:
          v8 += 3;
          v7 = v38 + 2;
        }
      }
      else
      {
        v42 = *(_DWORD *)(a1 + 24 * v7 + 4);
        v43 = *((_DWORD *)v8 + 7);
        if (v42 > v43 || v42 == v43 && *(float *)(a1 + 24 * v7 + 8) > *((float *)v8 + 8))
          goto LABEL_64;
      }
    }
    if (*(_BYTE *)v8)
    {
      v44 = *((_DWORD *)v8 + 1);
      if (v44 > v18 || v44 == v18 && *((float *)v8 + 2) > v20)
        break;
    }
    v35 = *v8;
    *((_DWORD *)v25 + 2) = *((_DWORD *)v8 + 2);
    *v25 = v35;
    v36 = v8[2];
    v8[2] = 0;
    v37 = (void *)v25[2];
    v25[2] = v36;

    if (v5 < v7)
      goto LABEL_77;
  }
LABEL_76:
  v8 = v25;
LABEL_77:
  *(_BYTE *)v8 = v14;
  *((_BYTE *)v8 + 3) = v47;
  *(_WORD *)((char *)v8 + 1) = v46;
  *((_DWORD *)v8 + 1) = v18;
  *((float *)v8 + 2) = v20;
  v45 = (void *)v8[2];
  v8[2] = v21;

}

BOOL sub_1BE6DF888(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _BOOL8 v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = a1;
  v4 = a2;
  v10 = objc_msgSend_samplingCount(v3, v5, v6, v7, v8, v9);
  if (v10 == objc_msgSend_samplingCount(v4, v11, v12, v13, v14, v15))
  {
    objc_msgSend_creationDate(v3, v16, v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_creationDate(v4, v22, v23, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v21 > v27;

  }
  else
  {
    v29 = objc_msgSend_samplingCount(v3, v16, v17, v18, v19, v20);
    v28 = v29 > objc_msgSend_samplingCount(v4, v30, v31, v32, v33, v34);
  }

  return v28;
}

void sub_1BE6DF930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6DF948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6DF95C(uint64_t a1, uint64_t a2, void **a3)
{
  unint64_t v3;
  void **v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *v12;
  void **v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= ((uint64_t)a3 - a1) >> 3)
    {
      v8 = ((uint64_t)a3 - a1) >> 2;
      v9 = v8 | 1;
      v10 = (void **)(a1 + 8 * (v8 | 1));
      v11 = v8 + 2;
      if (v8 + 2 < a2 && sub_1BE6DF888(*v10, v10[1]))
      {
        ++v10;
        v9 = v11;
      }
      if (!sub_1BE6DF888(*v10, *v4))
      {
        v12 = *v4;
        *v4 = 0;
        do
        {
          v13 = v4;
          v4 = v10;
          v14 = *v10;
          *v10 = 0;
          v15 = *v13;
          *v13 = v14;

          if (v6 < v9)
            break;
          v16 = (2 * v9) | 1;
          v10 = (void **)(a1 + 8 * v16);
          v9 = 2 * v9 + 2;
          if (v9 >= a2)
          {
            v9 = v16;
          }
          else if (sub_1BE6DF888(*v10, v10[1]))
          {
            ++v10;
          }
          else
          {
            v9 = v16;
          }
        }
        while (!sub_1BE6DF888(*v10, v12));
        v17 = *v4;
        *v4 = v12;

      }
    }
  }
}

void sub_1BE6DFA9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DFAAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

IOSurfaceRef CHCreateIOSurface(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const __CFDictionary *v27;
  IOSurfaceRef v28;
  _QWORD v30[4];
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v30[0] = *MEMORY[0x1E0CBC1E0];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, a1, a4, a5, a6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = v9;
  v30[1] = *MEMORY[0x1E0CBC008];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v10, (uint64_t)a2, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v31[1] = v14;
  v30[2] = *MEMORY[0x1E0CBBF00];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v15, a3, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v31[2] = v19;
  v30[3] = *MEMORY[0x1E0CBBF08];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, a4, v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v31[3] = v24;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v25, (uint64_t)v31, (uint64_t)v30, 4, v26);
  v27 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v28 = IOSurfaceCreate(v27);
  return v28;
}

void sub_1BE6DFC0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

id CHDebugIOSurfaceFP16Description(__IOSurface *a1)
{
  size_t Width;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  vImage_Buffer v27;
  vImage_Buffer src;

  Width = IOSurfaceGetWidth(a1);
  objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v3, Width, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = malloc_type_calloc(Width, 4uLL, 0x100004052888210uLL);
  IOSurfaceLock(a1, 0, 0);
  src.data = IOSurfaceGetBaseAddress(a1);
  src.height = 1;
  src.width = Width;
  src.rowBytes = 2 * Width;
  v27.data = v8;
  v27.height = 1;
  v27.width = Width;
  v27.rowBytes = 4 * Width;
  vImageConvert_Planar16FtoPlanarF(&src, &v27, 0);
  for (; Width; --Width)
  {
    LODWORD(v14) = *v8;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v9, v10, v11, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v7, v16, (uint64_t)v15, v17, v18, v19);

    ++v8;
  }
  IOSurfaceUnlock(a1, 0, 0);
  objc_msgSend_description(v7, v20, v21, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  return v25;
}

void sub_1BE6DFD68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DFD78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DFD88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6DFD9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CHConvertFloat16BufferToFloat32Buffer(void *a1, void *a2, vImagePixelCount a3, _QWORD *a4)
{
  id result;
  const char *v6;
  uint64_t v7;
  vImage_Buffer v8;
  vImage_Buffer src;

  src.data = a1;
  src.height = 1;
  src.width = a3;
  src.rowBytes = 2 * a3;
  v8.data = a2;
  v8.height = 1;
  v8.width = a3;
  v8.rowBytes = 4 * a3;
  result = (id)vImageConvert_Planar16FtoPlanarF(&src, &v8, 0);
  if (a4)
  {
    if (result)
    {
      objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CFSTR("com.apple.corehandwriting"), -1005, 0, v7);
      result = (id)objc_claimAutoreleasedReturnValue();
      *a4 = result;
    }
  }
  return result;
}

id CHDebugBufferFP32Description(_DWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *i;
  double v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v6 = a2;
  objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], a2, (uint64_t)a2, a4, a5, a6);
  for (i = (void *)objc_claimAutoreleasedReturnValue(); v6; --v6)
  {
    LODWORD(v14) = *a1;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v8, v9, v10, v11, v12, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(i, v16, (uint64_t)v15, v17, v18, v19);

    ++a1;
  }
  objc_msgSend_description(i, v8, v9, v10, v11, v12);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

void sub_1BE6DFEC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6DFED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6DFEE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CHConvertFloat32BufferToFloat16Buffer(void *a1, void *a2, vImagePixelCount a3, _QWORD *a4)
{
  id result;
  const char *v6;
  uint64_t v7;
  vImage_Buffer v8;
  vImage_Buffer src;

  src.data = a1;
  src.height = 1;
  src.width = a3;
  src.rowBytes = 4 * a3;
  v8.data = a2;
  v8.height = 1;
  v8.width = a3;
  v8.rowBytes = 2 * a3;
  result = (id)vImageConvert_PlanarFtoPlanar16F(&src, &v8, 0);
  if (a4)
  {
    if (result)
    {
      objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CFSTR("com.apple.corehandwriting"), -1005, 0, v7);
      result = (id)objc_claimAutoreleasedReturnValue();
      *a4 = result;
    }
  }
  return result;
}

void sub_1BE6DFF78()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.CoreHandwriting.StrokeGroupID", v2);
  v1 = (void *)qword_1EF568070;
  qword_1EF568070 = (uint64_t)v0;

}

uint64_t sub_1BE6DFFC8(uint64_t result)
{
  uint64_t v1;

  v1 = qword_1EF567ED0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = qword_1EF567ED0;
  qword_1EF567ED0 = v1 + 1;
  return result;
}

void sub_1BE6E0250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6E03D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE6E043C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6E0670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE6E07D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6E0828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E0838(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E0A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE6E0CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v10;

  _Unwind_Resume(a1);
}

void sub_1BE6E0CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6E0CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6E0D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6E0D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6E0FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6E12BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6E132C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6E1344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E1358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E1514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E1524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E1538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6E156C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E1580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E16F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6E1708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E171C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6E1734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E1748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6E1760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E1774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E21E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;

  if (v34)
    operator delete(v34);

  _Unwind_Resume(a1);
}

void sub_1BE6E23B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E24A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E24B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6E24D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6E24EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E2B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sub_1BE6DB9C4((void **)va);
  _Unwind_Resume(a1);
}

double sub_1BE6E2C00(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isStrokeClassificationTextOrMath;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v2 = a2;
  objc_opt_self();
  v8 = objc_msgSend_classification(v2, v3, v4, v5, v6, v7);
  isStrokeClassificationTextOrMath = objc_msgSend_isStrokeClassificationTextOrMath_(CHStrokeUtilities, v9, v8, v10, v11, v12);
  objc_msgSend_bounds(v2, v14, v15, v16, v17, v18);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  objc_msgSend_normalizedSize(v2, v25, v26, v27, v28, v29);
  if (v35 <= 0.0)
  {
    v36 = v22;
    v37 = v24;
  }
  else
  {
    objc_msgSend_normalizedSize(v2, v30, v31, v32, v33, v34);
  }
  v38 = v36 * 0.1;
  if (isStrokeClassificationTextOrMath)
    v38 = v37 * 1.5;
  v39 = v20 - v38 * 0.5;

  return v39;
}

void sub_1BE6E2CF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E2D00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E2D10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E2D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E2E08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E2E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6E3050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE6E3228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E3238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E3248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E3258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E3268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E3278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E3288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E3298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E32A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E34A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E35D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E3704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6E415C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{

  _Unwind_Resume(a1);
}

void sub_1BE6E44B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6E44D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E45A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE6E45CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E45E4(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t j;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  id v112;
  id v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  id obj;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  id v121;
  id v122;
  id v123;
  _QWORD v124[4];
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _QWORD v138[4];
  id v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[128];
  _BYTE v145[128];
  _BYTE v146[128];
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v134 = 0u;
  v135 = 0u;
  v136 = 0u;
  v137 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v134, (uint64_t)v145, 16, v3);
  if (v4)
  {
    v118 = *(_QWORD *)v135;
    do
    {
      v10 = 0;
      v119 = v4;
      do
      {
        if (*(_QWORD *)v135 != v118)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v134 + 1) + 8 * v10);
        v12 = (void *)MEMORY[0x1E0CB37E8];
        v13 = objc_msgSend_uniqueIdentifier(v11, v5, v6, v7, v8, v9);
        objc_msgSend_numberWithInteger_(v12, v14, v13, v15, v16, v17);
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 40);
        v19 = *(void **)(a1 + 32);
        v122 = *(id *)(a1 + 48);
        v123 = v11;
        v121 = v19;
        if (v18)
        {
          objc_msgSend_set(MEMORY[0x1E0C99E20], v20, v21, v22, v23, v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v142 = 0u;
          v143 = 0u;
          v140 = 0u;
          v141 = 0u;
          objc_msgSend_strokeIdentifiers(v123, v26, v27, v28, v29, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v140, (uint64_t)v146, 16, v33);
          if (v39)
          {
            v40 = *(_QWORD *)v141;
            do
            {
              for (i = 0; i != v39; ++i)
              {
                if (*(_QWORD *)v141 != v40)
                  objc_enumerationMutation(v31);
                v42 = *(_QWORD *)(*((_QWORD *)&v140 + 1) + 8 * i);
                objc_msgSend_strokeProvider(v18, v34, v35, v36, v37, v38);
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_strokeIdentifierFromData_(v43, v44, v42, v45, v46, v47);
                v48 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_addObject_(v25, v49, (uint64_t)v48, v50, v51, v52);
              }
              v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v34, (uint64_t)&v140, (uint64_t)v146, 16, v38);
            }
            while (v39);
          }

          objc_msgSend_queryItemStableIdentifierForStrokeGroup_(CHTextInputQuery, v53, (uint64_t)v123, v54, v55, v56);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            v63 = (void *)MEMORY[0x1E0C99DE8];
            v64 = objc_msgSend_count(v121, v58, v59, v60, v61, v62);
            objc_msgSend_arrayWithCapacity_(v63, v65, v64, v66, v67, v68);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            v138[0] = MEMORY[0x1E0C809B0];
            v138[1] = 3221225472;
            v138[2] = sub_1BE6E5100;
            v138[3] = &unk_1E77F3B18;
            v70 = v69;
            v139 = v70;
            objc_msgSend_enumerateObjectsUsingBlock_(v121, v71, (uint64_t)v138, v72, v73, v74);
            objc_msgSend_textInputTargetForItemStableIdentifier_strokeIdentifiers_simultaneousItemStableIdentifiers_(v122, v75, (uint64_t)v57, (uint64_t)v25, (uint64_t)v70, v76);
            v77 = (void *)objc_claimAutoreleasedReturnValue();

          }
          else
          {
            objc_msgSend_textInputTargetForItemStableIdentifier_strokeIdentifiers_(v122, v58, (uint64_t)v57, (uint64_t)v25, v61, v62);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
          }

        }
        else
        {
          v77 = 0;
        }

        if (v77)
        {
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
          objc_msgSend_set(MEMORY[0x1E0C99E20], v78, v79, v80, v81, v82);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          objc_msgSend_strokeIdentifiers(v123, v84, v85, v86, v87, v88);
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          v97 = objc_msgSend_countByEnumeratingWithState_objects_count_(v89, v90, (uint64_t)&v130, (uint64_t)v144, 16, v91);
          if (v97)
          {
            v98 = *(_QWORD *)v131;
            do
            {
              for (j = 0; j != v97; ++j)
              {
                if (*(_QWORD *)v131 != v98)
                  objc_enumerationMutation(v89);
                v100 = *(_QWORD *)(*((_QWORD *)&v130 + 1) + 8 * j);
                objc_msgSend_strokeProvider(*(void **)(a1 + 40), v92, v93, v94, v95, v96);
                v101 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_strokeIdentifierFromData_(v101, v102, v100, v103, v104, v105);
                v106 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_addObject_(v83, v107, (uint64_t)v106, v108, v109, v110);
              }
              v97 = objc_msgSend_countByEnumeratingWithState_objects_count_(v89, v92, (uint64_t)&v130, (uint64_t)v144, 16, v96);
            }
            while (v97);
          }

          v111 = *(void **)(a1 + 48);
          v124[0] = MEMORY[0x1E0C809B0];
          v124[1] = 3221225472;
          v124[2] = sub_1BE6E4BD0;
          v124[3] = &unk_1E77F3AC8;
          v112 = v77;
          v125 = v112;
          v113 = *(id *)(a1 + 64);
          v114 = *(_QWORD *)(a1 + 72);
          v126 = v113;
          v129 = v114;
          v127 = v120;
          v128 = *(id *)(a1 + 56);
          objc_msgSend_fetchContentInfoForTextInputTarget_strokeIdentifiers_completion_(v111, v115, (uint64_t)v112, (uint64_t)v83, (uint64_t)v124, v116);

        }
        ++v10;
      }
      while (v10 != v119);
      v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v134, (uint64_t)v145, 16, v9);
    }
    while (v4);
  }

}

void sub_1BE6E4A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6E4BD0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSUInteger v78;
  const char *v79;
  NSUInteger v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSUInteger v85;
  const char *length;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  NSObject *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  int v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  uint64_t v115;
  NSRange v116;
  NSRange v117;
  NSRange v118;
  NSRange v119;
  NSRange v120;

  v115 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v9 = v3;
  if (!v3)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v92 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      v98 = *(_QWORD *)(a1 + 32);
      v111 = 138412290;
      v112 = v98;
      _os_log_impl(&dword_1BE607000, v92, OS_LOG_TYPE_ERROR, "Received nil target content info for target %@", (uint8_t *)&v111, 0xCu);
    }
    goto LABEL_34;
  }
  objc_msgSend_referenceSubstring(v3, v4, v5, v6, v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_length(v10, v11, v12, v13, v14, v15);
  objc_msgSend_referenceSubstringRange(v9, v17, v18, v19, v20, v21);
  v23 = v22;

  v29 = v16 == v23;
  if (v16 != v23)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v30 = (id)qword_1EF568E28;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_referenceSubstring(v9, v31, v32, v33, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend_length(v36, v37, v38, v39, v40, v41);
      objc_msgSend_referenceSubstringRange(v9, v43, v44, v45, v46, v47);
      v111 = 134218240;
      v112 = v42;
      v113 = 2048;
      v114 = v48;
      _os_log_impl(&dword_1BE607000, v30, OS_LOG_TYPE_ERROR, "Target content info is invalid, ignoring. referenceSubstring.length %ld != referenceSubstringRange.length %ld", (uint8_t *)&v111, 0x16u);

    }
  }
  if (objc_msgSend_selectedTextRange(v9, v24, v25, v26, v27, v28) != 0x7FFFFFFFFFFFFFFFLL)
  {
    v54 = objc_msgSend_selectedTextRange(v9, v49, v50, v51, v52, v53);
    if ((unint64_t)&v59[v54] > objc_msgSend_textContentLength(v9, v59, v55, v56, v57, v58))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v60 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        v116.location = objc_msgSend_selectedTextRange(v9, v61, v62, v63, v64, v65);
        NSStringFromRange(v116);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        v72 = objc_msgSend_textContentLength(v9, v67, v68, v69, v70, v71);
        v111 = 138412546;
        v112 = (uint64_t)v66;
        v113 = 2048;
        v114 = v72;
        _os_log_impl(&dword_1BE607000, v60, OS_LOG_TYPE_ERROR, "Target content info is invalid, ignoring. selectedTextRange %@ invalid for length %ld", (uint8_t *)&v111, 0x16u);

      }
      v29 = 0;
    }
  }
  if (objc_msgSend_strokeCoveredTextRange(v9, v49, v50, v51, v52, v53) != 0x7FFFFFFFFFFFFFFFLL)
  {
    v78 = objc_msgSend_strokeCoveredTextRange(v9, v73, v74, v75, v76, v77);
    v80 = (NSUInteger)v79;
    v120.location = objc_msgSend_referenceSubstringRange(v9, v79, v81, v82, v83, v84);
    v120.length = v85;
    v117.location = v78;
    v117.length = v80;
    length = (const char *)NSIntersectionRange(v117, v120).length;
    objc_msgSend_strokeCoveredTextRange(v9, length, v87, v88, v89, v90);
    if (length != v91)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v92 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        v118.location = objc_msgSend_strokeCoveredTextRange(v9, v99, v100, v101, v102, v103);
        NSStringFromRange(v118);
        v104 = (id)objc_claimAutoreleasedReturnValue();
        v119.location = objc_msgSend_referenceSubstringRange(v9, v105, v106, v107, v108, v109);
        NSStringFromRange(v119);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        v111 = 138412546;
        v112 = (uint64_t)v104;
        v113 = 2112;
        v114 = (uint64_t)v110;
        _os_log_impl(&dword_1BE607000, v92, OS_LOG_TYPE_ERROR, "Target content info is invalid, ignoring. strokeCoveredTextRange %@ is not in range of referenceSubstringRange %@", (uint8_t *)&v111, 0x16u);

      }
      goto LABEL_34;
    }
  }
  if (v29)
  {
    v92 = *(id *)(a1 + 40);
    objc_sync_enter(v92);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v96 = (id)qword_1EF568E28;
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        v97 = *(_QWORD *)(a1 + 32);
        v111 = 138412290;
        v112 = v97;
        _os_log_impl(&dword_1BE607000, v96, OS_LOG_TYPE_ERROR, "Request for target content info timed out for target %@", (uint8_t *)&v111, 0xCu);
      }

    }
    else
    {
      objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 40), v93, (uint64_t)v9, *(_QWORD *)(a1 + 48), v94, v95);
    }
    objc_sync_exit(v92);
LABEL_34:

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void sub_1BE6E5060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE6E5100(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  objc_msgSend_queryItemStableIdentifierForStrokeGroup_(CHTextInputQuery, a2, (uint64_t)a2, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(*(void **)(a1 + 32), v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE6E514C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle::CHFastPathCharacterHolderAppleStyle(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v7;
  dispatch_queue_t v8;
  void *v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = (_DWORD)a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_QWORD *)a1 = &off_1E77EF888;
  objc_msgSend_currentLocale(MEMORY[0x1E0C99DC8], a2, a3, a4, a5, a6);
  *(_QWORD *)(a1 + 40) = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 48) = 0;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderAppleStyleQueue", v7);
  v9 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;

  return a1;
}

void sub_1BE6E5268(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = &unk_1E77EF858;
  sub_1BE6E7EB4(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle::reloadAllCharactersIfNeeded(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle *this)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 6);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BE6E5324;
  v4[3] = &unk_1E77F3B40;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BE6E5324(uint64_t a1)
{
  uint64_t v2;
  NSString *v3;
  void *v4;
  float32x2_t **v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  double v62;
  double v63;
  double v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x2_t *v70;
  id v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float32x2_t v88;
  unsigned __int32 v89;
  float32x2_t **v90;
  float32x2_t **v91;
  float32x2_t *v92;
  unsigned __int32 v93;
  _DWORD *v94;
  float32x2_t *v95;
  float32x2_t *v96;
  BOOL v97;
  float32x2_t v98;
  float32x2_t *v99;
  float32x2_t v100;
  _BYTE *v101;
  int v102;
  float32x2_t v103;
  int v104;
  float32x2_t *v105;
  float32x2_t *v106;
  float32x2_t v107;
  float32x2_t *v108;
  __int32 v109;
  uint64_t v110;
  uint64_t v111;
  float32x2_t v112;
  unint64_t v113;
  char *v114;
  float32x2_t *v115;
  _BYTE *v116;
  unint64_t v117;
  float32x2_t **v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  float32x2_t *v122;
  char *v123;
  float32x2_t v124;
  char *v125;
  void *v126;
  float32x2_t v127;
  float32x2_t *v128;
  NSObject *v129;
  uint64_t v130;
  float32x2_t *v131;
  void *v132;
  void *v133;
  NSObject *v134;
  NSObject *v135;
  char *v136;
  char *v137;
  void *v138;
  void *v139;
  float32x2_t v140;
  float32x2_t *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  id obj;
  uint64_t v147;
  int v148;
  void *v149;
  id v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  float64x2_t v154;
  float32x2_t *v155;
  void *v156;
  void *__p;
  float32x2_t *v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  void *v164;
  char *v165;
  float32x2_t **v166;
  float32x2_t *v167;
  uint64_t v168;
  uint8_t buf[4];
  void *v170;
  uint8_t v171[128];
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 24))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return;
  }
  v148 = *(_DWORD *)(v2 + 36);
  v150 = *(id *)(v2 + 40);
  CoreHandwriting::synthesis::fast_path::uncompressInventoryFromLZFSE((CoreHandwriting::synthesis::fast_path *)CFSTR("default_style_inventory_A.lzfse"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v149 = v4;
  v144 = v2;
  v145 = a1;
  if (v4)
  {
    v167 = 0;
    v168 = 0;
    v5 = &v167;
    v166 = &v167;
    sub_1BE6E5FD4((char **)&v164, v4, CFSTR("n"), v148, v150);
    if (v165 != v164)
    {
      v11 = (void *)objc_msgSend_copy(*(void **)v164, v6, v7, v8, v9, v10);
      objc_msgSend_bounds(v11, v12, v13, v14, v15, v16);
      v18 = v17;

      v24 = (void *)objc_msgSend_copy(*(void **)v164, v19, v20, v21, v22, v23);
      objc_msgSend_bounds(v24, v25, v26, v27, v28, v29);
      v31 = v30;
      v37 = (void *)objc_msgSend_copy(*(void **)v164, v32, v33, v34, v35, v36);
      objc_msgSend_bounds(v37, v38, v39, v40, v41, v42);
      v44 = v43;

      v45 = v149;
      objc_msgSend_objectForKey_(v149, v46, (uint64_t)CFSTR("glyphs"), v47, v48, v49);
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      v143 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_allKeys(v143, v50, v51, v52, v53, v54);
      obj = (id)objc_claimAutoreleasedReturnValue();
      v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v55, (uint64_t)&v160, (uint64_t)v171, 16, v56);
      if (!v57)
        goto LABEL_83;
      v147 = *(_QWORD *)v161;
      v58 = v18;
      v59 = v31 + v44;
      *(double *)&v60 = v31 + v44 - v18;
      v61 = 1.0 / (float)(v59 - v58);
      v62 = (float)(0.0 / v61);
      v63 = (float)((float)(1.0 / v61) - v59);
      v64 = v61;
      v154 = (float64x2_t)vdupq_lane_s64(v60, 0);
      while (1)
      {
        v152 = v57;
        v153 = 0;
        while (2)
        {
          if (*(_QWORD *)v161 != v147)
            objc_enumerationMutation(obj);
          v151 = *(void **)(*((_QWORD *)&v160 + 1) + 8 * v153);
          sub_1BE6E5FD4((char **)&__p, v45, v151, v148, v150);
          v70 = (float32x2_t *)__p;
          v155 = v158;
          if (__p == v158)
          {
LABEL_73:
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v129 = (id)qword_1EF568E60;
            if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v170 = v151;
              _os_log_impl(&dword_1BE607000, v129, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle Could not add glyph %@ to inventory", buf, 0xCu);
            }

            v128 = (float32x2_t *)__p;
            goto LABEL_78;
          }
          do
          {
            v71 = (id)objc_msgSend_copy(*(void **)v70, v65, v67, v68, v69, v66);
            objc_msgSend_bounds(v71, v72, v73, v74, v75, v76);
            objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v71, v78, v79, v80, v81, v82, v62 - v77, v63, v64);
            v156 = (void *)objc_claimAutoreleasedReturnValue();

            v88 = v70[2];
            v89 = v70[1].u32[1];
            v90 = v5;
            v91 = v5;
            v92 = v167;
            if (v167)
            {
              while (1)
              {
                while (1)
                {
                  v91 = (float32x2_t **)v92;
                  v93 = v92[4].u32[0];
                  if (v89 >= v93)
                    break;
                  v92 = *v91;
                  v90 = v91;
                  if (!*v91)
                    goto LABEL_20;
                }
                if (v93 >= v89)
                  break;
                v92 = v91[1];
                if (!v92)
                {
                  v90 = v91 + 1;
                  goto LABEL_20;
                }
              }
              v94 = v91;
            }
            else
            {
LABEL_20:
              v94 = operator new(0x40uLL);
              v94[8] = v89;
              *((_QWORD *)v94 + 6) = 0;
              *((_QWORD *)v94 + 7) = 0;
              *((_QWORD *)v94 + 5) = 0;
              *(_QWORD *)v94 = 0;
              *((_QWORD *)v94 + 1) = 0;
              *((_QWORD *)v94 + 2) = v91;
              *v90 = (float32x2_t *)v94;
              v95 = (float32x2_t *)v94;
              if (*v166)
              {
                v166 = (float32x2_t **)*v166;
                v95 = *v90;
              }
              v96 = v167;
              v97 = v95 == v167;
              v95[3].i8[0] = v95 == v167;
              if (!v97)
              {
                do
                {
                  v98 = v95[2];
                  if (*(_BYTE *)(*(_QWORD *)&v98 + 24))
                    break;
                  v99 = *(float32x2_t **)(*(_QWORD *)&v98 + 16);
                  v100 = *v99;
                  if (*v99 == *(_QWORD *)&v98)
                  {
                    v103 = v99[1];
                    if (!*(_QWORD *)&v103
                      || (v104 = *(unsigned __int8 *)(*(_QWORD *)&v103 + 24),
                          v101 = (_BYTE *)(*(_QWORD *)&v103 + 24),
                          v104))
                    {
                      if (**(float32x2_t ***)&v98 == v95)
                      {
                        *(_BYTE *)(*(_QWORD *)&v98 + 24) = 1;
                        v99[3].i8[0] = 0;
                        v107 = *(float32x2_t *)(*(_QWORD *)&v98 + 8);
                        *v99 = v107;
                        if (v107)
                          goto LABEL_37;
                      }
                      else
                      {
                        v105 = *(float32x2_t **)(*(_QWORD *)&v98 + 8);
                        v106 = (float32x2_t *)*v105;
                        *(float32x2_t *)(*(_QWORD *)&v98 + 8) = *v105;
                        if (v106)
                        {
                          v106[2] = v98;
                          v99 = *(float32x2_t **)(*(_QWORD *)&v98 + 16);
                        }
                        v105[2] = (float32x2_t)v99;
                        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v98 + 16)
                                  + 8 * (**(_QWORD **)(*(_QWORD *)&v98 + 16) != *(_QWORD *)&v98)) = v105;
                        *v105 = v98;
                        *(_QWORD *)(*(_QWORD *)&v98 + 16) = v105;
                        v99 = (float32x2_t *)v105[2];
                        v98 = *v99;
                        v105[3].i8[0] = 1;
                        v99[3].i8[0] = 0;
                        v107 = *(float32x2_t *)(*(_QWORD *)&v98 + 8);
                        *v99 = v107;
                        if (v107)
LABEL_37:
                          *(_QWORD *)(*(_QWORD *)&v107 + 16) = v99;
                      }
                      *(float32x2_t *)(*(_QWORD *)&v98 + 16) = v99[2];
                      *(float32x2_t *)(*(_QWORD *)&v99[2] + 8 * (**(_QWORD **)&v99[2] != (_QWORD)v99)) = v98;
                      *(_QWORD *)(*(_QWORD *)&v98 + 8) = v99;
LABEL_44:
                      v99[2] = v98;
                      break;
                    }
                  }
                  else if (!*(_QWORD *)&v100
                         || (v102 = *(unsigned __int8 *)(*(_QWORD *)&v100 + 24),
                             v101 = (_BYTE *)(*(_QWORD *)&v100 + 24),
                             v102))
                  {
                    if (**(float32x2_t ***)&v98 == v95)
                    {
                      v127 = v95[1];
                      **(float32x2_t **)&v98 = v127;
                      if (v127)
                      {
                        *(float32x2_t *)(*(_QWORD *)&v127 + 16) = v98;
                        v99 = *(float32x2_t **)(*(_QWORD *)&v98 + 16);
                      }
                      v95[2] = (float32x2_t)v99;
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v98 + 16)
                                + 8 * (**(_QWORD **)(*(_QWORD *)&v98 + 16) != *(_QWORD *)&v98)) = v95;
                      v95[1] = v98;
                      *(_QWORD *)(*(_QWORD *)&v98 + 16) = v95;
                      v99 = (float32x2_t *)v95[2];
                      v95[3].i8[0] = 1;
                      v99[3].i8[0] = 0;
                      v98 = v99[1];
                      v108 = **(float32x2_t ***)&v98;
                      v99[1] = **(float32x2_t **)&v98;
                      if (v108)
LABEL_42:
                        v108[2] = (float32x2_t)v99;
                    }
                    else
                    {
                      *(_BYTE *)(*(_QWORD *)&v98 + 24) = 1;
                      v99[3].i8[0] = 0;
                      v98 = v99[1];
                      v108 = **(float32x2_t ***)&v98;
                      v99[1] = **(float32x2_t **)&v98;
                      if (v108)
                        goto LABEL_42;
                    }
                    *(float32x2_t *)(*(_QWORD *)&v98 + 16) = v99[2];
                    *(float32x2_t *)(*(_QWORD *)&v99[2] + 8 * (**(_QWORD **)&v99[2] != (_QWORD)v99)) = v98;
                    **(_QWORD **)&v98 = v99;
                    goto LABEL_44;
                  }
                  *(_BYTE *)(*(_QWORD *)&v98 + 24) = 1;
                  v95 = v99;
                  v99[3].i8[0] = v99 == v96;
                  *v101 = 1;
                }
                while (v99 != v96);
              }
              ++v168;
              v89 = v70[1].u32[1];
            }
            v109 = v70[1].i32[0];
            v110 = objc_msgSend_copy(v156, v83, v84, v85, v86, v87);
            v111 = v110;
            v112 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(v88), v154));
            v114 = (char *)*((_QWORD *)v94 + 6);
            v113 = *((_QWORD *)v94 + 7);
            if ((unint64_t)v114 < v113)
            {
              *(_QWORD *)v114 = v110;
              *((_DWORD *)v114 + 2) = v109;
              *((_DWORD *)v114 + 3) = v89;
              v115 = (float32x2_t *)(v114 + 24);
              *((float32x2_t *)v114 + 2) = v112;
              goto LABEL_62;
            }
            v116 = (_BYTE *)*((_QWORD *)v94 + 5);
            v117 = 0xAAAAAAAAAAAAAAABLL * ((v114 - v116) >> 3) + 1;
            if (v117 > 0xAAAAAAAAAAAAAAALL)
              sub_1BE6E7EA0();
            v118 = v5;
            v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - (_QWORD)v116) >> 3);
            if (2 * v119 > v117)
              v117 = 2 * v119;
            if (v119 >= 0x555555555555555)
              v120 = 0xAAAAAAAAAAAAAAALL;
            else
              v120 = v117;
            if (v120 > 0xAAAAAAAAAAAAAAALL)
              sub_1BE61F100();
            v121 = (char *)operator new(24 * v120);
            v122 = (float32x2_t *)&v121[8 * ((v114 - v116) >> 3)];
            *v122 = (float32x2_t)v111;
            v123 = &v121[24 * v120];
            v122[1].i32[0] = v109;
            v122[1].i32[1] = v89;
            v122[2] = v112;
            v115 = v122 + 3;
            if (v114 == v116)
            {
              *((_QWORD *)v94 + 5) = v122;
              *((_QWORD *)v94 + 6) = v115;
              *((_QWORD *)v94 + 7) = v123;
              v5 = v118;
              if (v114)
                goto LABEL_61;
            }
            else
            {
              v5 = v118;
              do
              {
                v124 = *(float32x2_t *)(v114 - 24);
                v114 -= 24;
                *(_QWORD *)v114 = 0;
                v122[-3] = v124;
                v122 -= 3;
                *(_OWORD *)v122[1].f32 = *(_OWORD *)(v114 + 8);
              }
              while (v114 != v116);
              v114 = (char *)*((_QWORD *)v94 + 5);
              v125 = (char *)*((_QWORD *)v94 + 6);
              *((_QWORD *)v94 + 5) = v122;
              *((_QWORD *)v94 + 6) = v115;
              *((_QWORD *)v94 + 7) = v123;
              while (v125 != v114)
              {
                v126 = (void *)*((_QWORD *)v125 - 3);
                v125 -= 24;

              }
              if (v114)
LABEL_61:
                operator delete(v114);
            }
LABEL_62:
            *((_QWORD *)v94 + 6) = v115;

            v70 += 3;
          }
          while (v70 != v155);
          v128 = (float32x2_t *)__p;
          if (v158 == __p)
            goto LABEL_73;
LABEL_78:
          v130 = v152;
          if (v128)
          {
            v131 = v158;
            v132 = v128;
            if (v158 != v128)
            {
              do
              {
                v133 = (void *)v131[-3];
                v131 -= 3;

              }
              while (v131 != v128);
              v132 = __p;
              v130 = v152;
            }
            v158 = v128;
            operator delete(v132);
          }
          ++v153;
          v45 = v149;
          if (v153 != v130)
            continue;
          break;
        }
        v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v65, (uint64_t)&v160, (uint64_t)v171, 16, v66);
        if (!v57)
        {
LABEL_83:

          __p = v166;
          v158 = v167;
          v159 = v168;
          if (v168)
          {
            v167[2] = (float32x2_t)&v158;
            v166 = v5;
            *v5 = 0;
            v5[1] = 0;
          }
          else
          {
            __p = &v158;
          }

          goto LABEL_97;
        }
      }
    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v135 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v171 = 0;
      _os_log_impl(&dword_1BE607000, v135, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle failed to load character 'n' for retrieving scale of the inventory.", v171, 2u);
    }

    v158 = 0;
    v159 = 0;
    __p = &v158;
LABEL_97:
    v136 = (char *)v164;
    if (v164)
    {
      v137 = v165;
      v138 = v164;
      if (v165 != v164)
      {
        do
        {
          v139 = (void *)*((_QWORD *)v137 - 3);
          v137 -= 24;

        }
        while (v137 != v136);
        v138 = v164;
      }
      v165 = v136;
      operator delete(v138);
    }
    sub_1BE6E7EB4((uint64_t)&v166, v167);
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v134 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v171 = 0;
      _os_log_impl(&dword_1BE607000, v134, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle Failed to load inventory", v171, 2u);
    }

    v158 = 0;
    v159 = 0;
    __p = &v158;
  }

  v140 = (float32x2_t)(v144 + 16);
  sub_1BE6E7EB4(v144 + 8, *(_QWORD **)(v144 + 16));
  *(_QWORD *)(v144 + 8) = __p;
  v141 = v158;
  *(_QWORD *)(v144 + 16) = v158;
  v142 = v159;
  *(_QWORD *)(v144 + 24) = v159;
  if (v142)
  {
    v141[2] = v140;
    __p = &v158;
    v158 = 0;
    v159 = 0;
    v141 = 0;
  }
  else
  {
    *(float32x2_t *)(v144 + 8) = v140;
  }
  sub_1BE6E7EB4((uint64_t)&__p, v141);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v145 + 32) + 8) + 24) = *(_QWORD *)(v144 + 24) != 0;
}

void sub_1BE6E5CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *__p,char *a40,uint64_t a41,char a42,_QWORD *a43)
{
  char *v44;
  char *v45;
  void *v46;

  if (__p)
  {
    v44 = a40;
    v45 = __p;
    if (a40 != __p)
    {
      do
      {
        v46 = (void *)*((_QWORD *)v44 - 3);
        v44 -= 24;

      }
      while (v44 != __p);
      v45 = __p;
    }
    operator delete(v45);
  }
  sub_1BE6E7EB4((uint64_t)&a42, a43);

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle::doAddCharacter()
{
  NSObject *v0;
  uint8_t v1[16];

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v0 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1BE607000, v0, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle addCharacter not supported!", v1, 2u);
  }

}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle::setLocale(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle *this, NSLocale *a2)
{
  NSLocale *v3;
  NSObject *v4;
  NSLocale *v5;
  _QWORD block[4];
  NSLocale *v7;
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderAppleStyle *v8;

  v3 = a2;
  v4 = *((_QWORD *)this + 6);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE6E5F18;
  block[3] = &unk_1E77F24A0;
  v7 = v3;
  v8 = this;
  v5 = v3;
  dispatch_sync(v4, block);

}

void sub_1BE6E5F18(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 40), *(id *)(a1 + 32));
}

uint64_t sub_1BE6E5F24(uint64_t a1)
{

  *(_QWORD *)a1 = &unk_1E77EF858;
  sub_1BE6E7EB4(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1BE6E5F70(uint64_t a1)
{

  *(_QWORD *)a1 = &unk_1E77EF858;
  sub_1BE6E7EB4(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1C3B812ECLL);
}

void sub_1BE6E5FD4(char **a1, void *a2, void *a3, int a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  BOOL v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  id v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  NSObject *v94;
  NSObject *v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  NSObject *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  CGFloat MaxY;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int CodepointInString;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  float v163;
  float v164;
  unint64_t v165;
  uint64_t *v166;
  char *v167;
  NSObject *v168;
  uint64_t v169;
  char **v170;
  uint64_t *v171;
  char **v172;
  uint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t *v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  CHDrawing *v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t *v204;
  char *v205;
  uint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t *v214;
  uint64_t v215;
  void *v216;
  id v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  uint64_t v222;
  id obj;
  NSObject *v225;
  void *v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t (*v234)(uint64_t, uint64_t);
  void (*v235)(uint64_t);
  id v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t (*v240)(uint64_t, uint64_t);
  void (*v241)(uint64_t);
  id v242;
  _BYTE buf[24];
  void *v244;
  _BYTE v245[32];
  double v246;
  _BYTE v247[128];
  uint64_t v248;
  CGRect v249;

  v248 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = a5;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v221 = v8;
  v226 = v9;
  v219 = v10;
  objc_msgSend_objectForKey_(v8, v11, (uint64_t)CFSTR("glyphs"), v12, v13, v14);
  v220 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v220, v15, (uint64_t)v9, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v19;
  if (v19)
  {
    v218 = v19;
    objc_msgSend_objectForKey_(v19, v20, (uint64_t)CFSTR("characters"), v21, v22, v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndexedSubscript_(v25, v26, 0, v27, v28, v29);
    v30 = objc_claimAutoreleasedReturnValue();

    objc_msgSend_objectForKey_(v24, v31, (uint64_t)CFSTR("advance"), v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35)
    {
      objc_msgSend_objectForKey_(v24, v36, (uint64_t)CFSTR("advance"), v37, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_floatValue(v40, v41, v42, v43, v44, v45);
      v47 = v46;

      if (v30)
      {
LABEL_6:
        v225 = v30;
        v57 = v24;
        v58 = v10;
        v237 = 0;
        v238 = &v237;
        v239 = 0x3032000000;
        v240 = sub_1BE6E7C58;
        v241 = sub_1BE6E7C68;
        v242 = 0;
        v231 = 0;
        v232 = &v231;
        v233 = 0x3032000000;
        v234 = sub_1BE6E7C58;
        v235 = sub_1BE6E7C68;
        v236 = 0;
        objc_msgSend_objectForKey_(v57, v59, (uint64_t)CFSTR("locales"), v60, v61, v62);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        v64 = v63 == 0;

        if (!v64)
        {
          objc_msgSend_localeIdentifier(v58, v65, v66, v67, v68, v69);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_regionCode(v58, v71, v72, v73, v74, v75);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v57, v77, (uint64_t)CFSTR("locales"), v78, v79, v80);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_1BE6E7C70;
          v244 = &unk_1E77F3B68;
          v82 = v70;
          *(_QWORD *)v245 = v82;
          *(_QWORD *)&v245[16] = &v237;
          *(_QWORD *)&v245[24] = &v231;
          v83 = v76;
          *(_QWORD *)&v245[8] = v83;
          objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v81, v84, (uint64_t)buf, v85, v86, v87);

        }
        v88 = v238;
        if (!v238[5])
          v88 = v232;
        v217 = (id)v88[5];
        _Block_object_dispose(&v231, 8);

        _Block_object_dispose(&v237, 8);
        if (v217)
        {
          v93 = v226;
          if ((objc_msgSend_isEqualToString_(v217, v89, (uint64_t)v226, v90, v91, v92) & 1) == 0)
          {
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v94 = (id)qword_1EF568E60;
            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = v217;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v226;
              _os_log_impl(&dword_1BE607000, v94, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: use localised glyph name %@ for glyph %@", buf, 0x16u);
            }

            v93 = v217;
          }
        }
        else
        {
          v93 = v226;
        }
        v226 = v93;
        sub_1BE6E6C24(v221, v93);
        v229 = 0u;
        v230 = 0u;
        v227 = 0u;
        v228 = 0u;
        obj = (id)objc_claimAutoreleasedReturnValue();
        v103 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v96, (uint64_t)&v227, (uint64_t)v247, 16, v97);
        if (v103)
        {
          v104 = *(_QWORD *)v228;
          v105 = &qword_1EF568000;
          do
          {
            v106 = 0;
            v222 = v103;
            do
            {
              if (*(_QWORD *)v228 != v104)
                objc_enumerationMutation(obj);
              v107 = *(void **)(*((_QWORD *)&v227 + 1) + 8 * v106);
              if (objc_msgSend_pointCount(v107, v98, v99, v100, v101, v102))
              {
                objc_msgSend_bounds(v107, v108, v109, v110, v111, v112);
                v114 = v113;
                objc_msgSend_bounds(v107, v115, v116, v117, v118, v119);
                v121 = v120;
                objc_msgSend_bounds(v107, v122, v123, v124, v125, v126);
                v128 = v127;
                if (v105[465] != -1)
                  dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
                v129 = v47 - v121 - v128;
                v130 = (id)qword_1EF568E60;
                if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
                {
                  v136 = objc_msgSend_pointCount(v107, v131, v132, v133, v134, v135);
                  objc_msgSend_bounds(v107, v137, v138, v139, v140, v141);
                  v143 = v142;
                  objc_msgSend_bounds(v107, v144, v145, v146, v147, v148);
                  MaxY = CGRectGetMaxY(v249);
                  *(_DWORD *)buf = 138413826;
                  *(_QWORD *)&buf[4] = v226;
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = v225;
                  *(_WORD *)&buf[22] = 2048;
                  v244 = (void *)v136;
                  *(_WORD *)v245 = 2048;
                  *(_QWORD *)&v245[2] = v143;
                  *(_WORD *)&v245[10] = 2048;
                  *(CGFloat *)&v245[12] = MaxY;
                  *(_WORD *)&v245[20] = 2048;
                  *(double *)&v245[22] = v114;
                  *(_WORD *)&v245[30] = 2048;
                  v246 = v129;
                  _os_log_impl(&dword_1BE607000, v130, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterHolderAppleStyle glyph:%@ character:%@ drawing with %lu points, miny=%f, maxy=%f leftAdvance=%f rightAdvance=%f", buf, 0x48u);
                }

                CodepointInString = objc_msgSend_firstCodepointInString(v225, v150, v151, v152, v153, v154);
                v161 = objc_msgSend_copy(v107, v156, v157, v158, v159, v160);
                v162 = v161;
                v163 = v129;
                v164 = v114;
                v166 = (uint64_t *)a1[1];
                v165 = (unint64_t)a1[2];
                if ((unint64_t)v166 >= v165)
                {
                  v169 = v104;
                  v170 = a1;
                  v171 = v105;
                  v172 = v170;
                  v173 = (uint64_t *)*v170;
                  v174 = 0xAAAAAAAAAAAAAAABLL * (((char *)v166 - *v170) >> 3);
                  v175 = v174 + 1;
                  if (v174 + 1 > 0xAAAAAAAAAAAAAAALL)
                    sub_1BE6E7EA0();
                  v176 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v165 - (_QWORD)v173) >> 3);
                  if (2 * v176 > v175)
                    v175 = 2 * v176;
                  if (v176 >= 0x555555555555555)
                    v177 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v177 = v175;
                  if (v177 > 0xAAAAAAAAAAAAAAALL)
                    sub_1BE61F100();
                  v178 = (char *)operator new(24 * v177);
                  v179 = &v178[24 * v174];
                  *(_QWORD *)v179 = v162;
                  *((_DWORD *)v179 + 2) = a4;
                  *((_DWORD *)v179 + 3) = CodepointInString;
                  v180 = &v178[24 * v177];
                  *((float *)v179 + 4) = v164;
                  *((float *)v179 + 5) = v163;
                  v167 = v179 + 24;
                  if (v166 == v173)
                  {
                    *v172 = v179;
                    v172[1] = v167;
                    v172[2] = v180;
                    v105 = v171;
                    a1 = v172;
                    v104 = v169;
                    v103 = v222;
                    if (!v166)
                      goto LABEL_53;
                  }
                  else
                  {
                    v181 = v166;
                    v105 = v171;
                    do
                    {
                      v182 = *(v181 - 3);
                      v181 -= 3;
                      *v181 = 0;
                      *((_QWORD *)v179 - 3) = v182;
                      v179 -= 24;
                      *(_OWORD *)(v179 + 8) = *(_OWORD *)(v181 + 1);
                    }
                    while (v181 != v173);
                    a1 = v172;
                    *v172 = v179;
                    v172[1] = v167;
                    v172[2] = v180;
                    v104 = v169;
                    v103 = v222;
                    do
                    {
                      v183 = (void *)*(v166 - 3);
                      v166 -= 3;

                    }
                    while (v166 != v173);
                    v166 = v173;
                    if (!v173)
                      goto LABEL_53;
                  }
                  operator delete(v166);
                }
                else
                {
                  *v166 = v161;
                  *((_DWORD *)v166 + 2) = a4;
                  *((_DWORD *)v166 + 3) = CodepointInString;
                  v167 = (char *)(v166 + 3);
                  *((float *)v166 + 4) = v164;
                  *((float *)v166 + 5) = v163;
                }
LABEL_53:
                v168 = 0;
                a1[1] = v167;
                goto LABEL_54;
              }
              if (v105[465] != -1)
                dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
              v168 = (id)qword_1EF568E60;
              if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v226;
                _os_log_impl(&dword_1BE607000, v168, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle: drawing for char %@. Skip it.", buf, 0xCu);
              }
LABEL_54:

              ++v106;
            }
            while (v106 != v103);
            v184 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v98, (uint64_t)&v227, (uint64_t)v247, 16, v102);
            v103 = v184;
          }
          while (v184);
        }

        if (*a1 == a1[1]
          && objc_msgSend_isEqualToString_(v226, v185, (uint64_t)CFSTR("space"), v186, v187, v188))
        {
          v189 = objc_alloc_init(CHDrawing);
          v195 = objc_msgSend_firstCodepointInString(v225, v190, v191, v192, v193, v194);
          v201 = objc_msgSend_copy(v189, v196, v197, v198, v199, v200);
          v202 = v201;
          v204 = (uint64_t *)a1[1];
          v203 = (unint64_t)a1[2];
          if ((unint64_t)v204 >= v203)
          {
            v206 = (uint64_t *)*a1;
            v207 = 0xAAAAAAAAAAAAAAABLL * (((char *)v204 - *a1) >> 3);
            v208 = v207 + 1;
            if (v207 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_1BE6E7EA0();
            v209 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v203 - (_QWORD)v206) >> 3);
            if (2 * v209 > v208)
              v208 = 2 * v209;
            if (v209 >= 0x555555555555555)
              v210 = 0xAAAAAAAAAAAAAAALL;
            else
              v210 = v208;
            if (v210 > 0xAAAAAAAAAAAAAAALL)
              sub_1BE61F100();
            v211 = (char *)operator new(24 * v210);
            v212 = &v211[24 * v207];
            *(_QWORD *)v212 = v202;
            *((_DWORD *)v212 + 2) = a4;
            *((_DWORD *)v212 + 3) = v195;
            v213 = &v211[24 * v210];
            *((_DWORD *)v212 + 4) = 0;
            *((float *)v212 + 5) = v47;
            v205 = v212 + 24;
            if (v204 == v206)
            {
              *a1 = v212;
              a1[1] = v205;
              a1[2] = v213;
            }
            else
            {
              v214 = v204;
              do
              {
                v215 = *(v214 - 3);
                v214 -= 3;
                *v214 = 0;
                *((_QWORD *)v212 - 3) = v215;
                v212 -= 24;
                *(_OWORD *)(v212 + 8) = *(_OWORD *)(v214 + 1);
              }
              while (v214 != v206);
              *a1 = v212;
              a1[1] = v205;
              a1[2] = v213;
              do
              {
                v216 = (void *)*(v204 - 3);
                v204 -= 3;

              }
              while (v204 != v206);
              v204 = v206;
            }
            if (v204)
              operator delete(v204);
          }
          else
          {
            *v204 = v201;
            *((_DWORD *)v204 + 2) = a4;
            *((_DWORD *)v204 + 3) = v195;
            *((_DWORD *)v204 + 4) = 0;
            v205 = (char *)(v204 + 3);
            *((float *)v204 + 5) = v47;
          }
          a1[1] = v205;

        }
        v30 = v225;
        goto LABEL_85;
      }
      if (objc_msgSend_isEqualToString_(v9, v48, (uint64_t)CFSTR(".notdef"), v49, v50, v51))
      {
        unicodeToNSString(9633, v52, v53, v54, v55, v56);
        v30 = objc_claimAutoreleasedReturnValue();
        goto LABEL_6;
      }
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v30 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl(&dword_1BE607000, v30, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: empty characters field for glyph %@. Skip it", buf, 0xCu);
      }
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v95 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl(&dword_1BE607000, v95, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: no advance for glyph %@. Skip it", buf, 0xCu);
      }

    }
LABEL_85:

    v24 = v218;
  }

}

void sub_1BE6E6A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void **v25;

  sub_1BE6E6BC8(v25);
  _Unwind_Resume(a1);
}

void **sub_1BE6E6BC8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        v3 -= 24;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

NSObject *sub_1BE6E6C24(void *a1, void *a2)
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  BOOL v98;
  NSObject *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  float v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  float v123;
  const char *v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t i;
  void *v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t j;
  void *v159;
  id v160;
  const char *v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t k;
  uint64_t v171;
  void *v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  NSObject *v183;
  NSObject *v184;
  NSObject *v185;
  NSObject *v186;
  id v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  uint64_t v199;
  void *v200;
  CHDrawing *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t n;
  void *v206;
  id v207;
  const char *v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t ii;
  void *v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  float v224;
  float v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  float v236;
  float v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  const char *v254;
  uint64_t v255;
  const char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  NSObject *v267;
  uint64_t v268;
  const char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t jj;
  void *v273;
  NSObject *v274;
  const char *v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t kk;
  uint64_t v285;
  void *v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  const char *v295;
  uint64_t v296;
  CGSize v298;
  id obj;
  uint64_t v300;
  void *v301;
  void *v302;
  CGSize v303;
  uint64_t v304;
  void *v305;
  id v306;
  id v307;
  void *v308;
  id v309;
  NSObject *v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  id v315;
  id v316;
  id v317;
  NSObject *v318;
  NSObject *v319;
  id m;
  uint64_t v321;
  NSObject *v322;
  uint64_t v323;
  void *v324;
  id v325;
  id v326;
  NSObject *v327;
  id v328;
  uint64_t v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  CGAffineTransform v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  CGAffineTransformComponents components;
  CGAffineTransform v357;
  _BYTE v358[128];
  _BYTE v359[128];
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  _BYTE v364[128];
  uint8_t v365[128];
  uint8_t buf[4];
  void *v367;
  uint64_t v368;

  v368 = *MEMORY[0x1E0C80C00];
  v306 = a1;
  v307 = a2;
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend_objectForKey_(v306, v4, (uint64_t)CFSTR("glyphs"), v5, v6, v7);
  v302 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v302, v8, (uint64_t)v307, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v301 = v12;
  if (v12)
  {
    v13 = v12;
    v317 = v306;
    v305 = v13;
    v310 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend_objectForKey_(v13, v14, (uint64_t)CFSTR("components"), v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      objc_msgSend_objectForKeyedSubscript_(v305, v19, (uint64_t)CFSTR("components"), v20, v21, v22);
      v349 = 0u;
      v350 = 0u;
      v347 = 0u;
      v348 = 0u;
      obj = (id)objc_claimAutoreleasedReturnValue();
      v300 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v23, (uint64_t)&v347, (uint64_t)v365, 16, v24);
      if (!v300)
        goto LABEL_76;
      v304 = *(_QWORD *)v348;
      __asm { FMOV            V0.2D, #1.0 }
      v303 = _Q0;
      *(_QWORD *)&_Q0.width = 138412290;
      v298 = _Q0;
      while (1)
      {
        v311 = 0;
        do
        {
          if (*(_QWORD *)v348 != v304)
            objc_enumerationMutation(obj);
          v35 = *(void **)(*((_QWORD *)&v347 + 1) + 8 * v311);
          if (objc_msgSend_count(v35, v25, v26, v27, v28, v29, v298) != 2)
          {
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v40 = (id)qword_1EF568E18[0];
            if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1BE607000, v40, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: Expected exactly 2 elements in the component: GlyphName and AffineTransform", buf, 2u);
            }

          }
          objc_msgSend_objectAtIndexedSubscript_(v35, v36, 0, v37, v38, v39);
          v313 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v313)
          {
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v45 = (id)qword_1EF568E18[0];
            if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1BE607000, v45, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: Component glyph name is nil", buf, 2u);
            }

          }
          objc_msgSend_objectAtIndexedSubscript_(v35, v41, 1, v42, v43, v44);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v46)
          {
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v52 = (id)qword_1EF568E18[0];
            if (os_log_type_enabled(v52, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1BE607000, v52, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: affine transform for component is nil", buf, 2u);
            }

            v46 = 0;
          }
          v308 = v46;
          if (objc_msgSend_count(v46, v47, v48, v49, v50, v51) != 6)
          {
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v53 = (id)qword_1EF568E18[0];
            if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1BE607000, v53, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: affine transform for component should has length 6", buf, 2u);
            }

          }
          sub_1BE6E6C24(v317, v313);
          v309 = (id)objc_claimAutoreleasedReturnValue();
          v315 = v308;
          objc_msgSend_objectAtIndexedSubscript_(v315, v54, 0, v55, v56, v57);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_floatValue(v58, v59, v60, v61, v62, v63);
          if (v68 == 1.0)
          {
            objc_msgSend_objectAtIndexedSubscript_(v315, v64, 0, v65, v66, v67);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_floatValue(v69, v70, v71, v72, v73, v74);
            if (v79 == 1.0)
            {
              objc_msgSend_objectAtIndexedSubscript_(v315, v75, 0, v76, v77, v78);
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_floatValue(v80, v81, v82, v83, v84, v85);
              if (v90 == 1.0)
              {
                objc_msgSend_objectAtIndexedSubscript_(v315, v86, 0, v87, v88, v89);
                v91 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_floatValue(v91, v92, v93, v94, v95, v96);
                v98 = v97 == 1.0;

                if (v98)
                  goto LABEL_45;
                goto LABEL_40;
              }

            }
          }

LABEL_40:
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v99 = (id)qword_1EF568E18[0];
          if (os_log_type_enabled(v99, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1BE607000, v99, OS_LOG_TYPE_FAULT, "CHFastPathCharacterHolderAppleStyle: unsupported componentTransform", buf, 2u);
          }

LABEL_45:
          v328 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          objc_msgSend_objectAtIndexedSubscript_(v315, v100, 4, v101, v102, v103);
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_floatValue(v104, v105, v106, v107, v108, v109);
          v111 = v110;
          objc_msgSend_objectAtIndexedSubscript_(v315, v112, 5, v113, v114, v115);
          v116 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_floatValue(v116, v117, v118, v119, v120, v121);
          v123 = v122;

          memset(&v357, 0, sizeof(v357));
          components.scale = v303;
          components.horizontalShear = 0.0;
          components.rotation = 0.0;
          components.translation.dx = v111;
          components.translation.dy = (float)-v123;
          CGAffineTransformMakeWithComponents(&v357, &components);
          v354 = 0u;
          v355 = 0u;
          v352 = 0u;
          v353 = 0u;
          v325 = v309;
          v130 = objc_msgSend_countByEnumeratingWithState_objects_count_(v325, v124, (uint64_t)&v352, (uint64_t)buf, 16, v125);
          if (v130)
          {
            v131 = *(_QWORD *)v353;
            do
            {
              for (i = 0; i != v130; ++i)
              {
                if (*(_QWORD *)v353 != v131)
                  objc_enumerationMutation(v325);
                v133 = *(void **)(*((_QWORD *)&v352 + 1) + 8 * i);
                v351 = v357;
                v134 = (void *)objc_msgSend_newDrawingWithAffineTransform_(v133, v126, (uint64_t)&v351, v127, v128, v129);
                objc_msgSend_addObject_(v328, v135, (uint64_t)v134, v136, v137, v138);

              }
              v130 = objc_msgSend_countByEnumeratingWithState_objects_count_(v325, v126, (uint64_t)&v352, (uint64_t)buf, 16, v129);
            }
            while (v130);
          }

          if (objc_msgSend_count(v328, v139, v140, v141, v142, v143))
          {
            if (objc_msgSend_count(v310, v144, v145, v146, v147, v148))
            {
              v154 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              v345 = 0u;
              v346 = 0u;
              v343 = 0u;
              v344 = 0u;
              v319 = v310;
              v157 = objc_msgSend_countByEnumeratingWithState_objects_count_(v319, v155, (uint64_t)&v343, (uint64_t)v364, 16, v156);
              if (v157)
              {
                v321 = *(_QWORD *)v344;
                do
                {
                  v323 = v157;
                  for (j = 0; j != v323; ++j)
                  {
                    if (*(_QWORD *)v344 != v321)
                      objc_enumerationMutation(v319);
                    v159 = *(void **)(*((_QWORD *)&v343 + 1) + 8 * j);
                    v339 = 0u;
                    v340 = 0u;
                    v341 = 0u;
                    v342 = 0u;
                    v160 = v328;
                    v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v160, v161, (uint64_t)&v339, (uint64_t)&v360, 16, v162);
                    if (v168)
                    {
                      v169 = *(_QWORD *)v340;
                      do
                      {
                        for (k = 0; k != v168; ++k)
                        {
                          if (*(_QWORD *)v340 != v169)
                            objc_enumerationMutation(v160);
                          v171 = *(_QWORD *)(*((_QWORD *)&v339 + 1) + 8 * k);
                          v172 = (void *)objc_msgSend_copy(v159, v163, v164, v165, v166, v167);
                          objc_msgSend_appendDrawing_(v172, v173, v171, v174, v175, v176);
                          objc_msgSend_addObject_(v154, v177, (uint64_t)v172, v178, v179, v180);

                        }
                        v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v160, v163, (uint64_t)&v339, (uint64_t)&v360, 16, v167);
                      }
                      while (v168);
                    }

                  }
                  v157 = objc_msgSend_countByEnumeratingWithState_objects_count_(v319, v181, (uint64_t)&v343, (uint64_t)v364, 16, v182);
                }
                while (v157);
              }

              v310 = v154;
              v183 = v319;
            }
            else
            {
              v183 = v310;
              v310 = objc_msgSend_copy(v328, v149, v150, v151, v152, v153);
            }
          }
          else
          {
            if (qword_1EF568E88 != -1)
              dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
            v183 = (id)qword_1EF568E60;
            if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = LODWORD(v298.width);
              v367 = v313;
              _os_log_impl(&dword_1BE607000, v183, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderAppleStyle: No drawings for component %@", buf, 0xCu);
            }
          }

          ++v311;
        }
        while (v311 != v300);
        v300 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v25, (uint64_t)&v347, (uint64_t)v365, 16, v29);
        if (!v300)
        {
LABEL_76:

          v184 = v310;
          v185 = v184;
          goto LABEL_79;
        }
      }
    }
    v185 = v310;
LABEL_79:
    v322 = v185;

    v187 = v305;
    v318 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v324 = v187;
    objc_msgSend_objectForKey_(v187, v188, (uint64_t)CFSTR("paths"), v189, v190, v191);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v187) = v192 == 0;

    if ((v187 & 1) == 0)
    {
      objc_msgSend_objectForKeyedSubscript_(v324, v193, (uint64_t)CFSTR("paths"), v194, v195, v196);
      v197 = (void *)objc_claimAutoreleasedReturnValue();
      v363 = 0u;
      v361 = 0u;
      v362 = 0u;
      v360 = 0u;
      v316 = v197;
      v312 = objc_msgSend_countByEnumeratingWithState_objects_count_(v316, v198, (uint64_t)&v360, (uint64_t)buf, 16, v199);
      if (v312)
      {
        v314 = *(_QWORD *)v361;
        do
        {
          for (m = 0; m != (id)v312; m = (char *)m + 1)
          {
            if (*(_QWORD *)v361 != v314)
              objc_enumerationMutation(v316);
            v200 = *(void **)(*((_QWORD *)&v360 + 1) + 8 * (_QWORD)m);
            v201 = objc_alloc_init(CHDrawing);
            v354 = 0u;
            v355 = 0u;
            v352 = 0u;
            v353 = 0u;
            v326 = v200;
            v204 = objc_msgSend_countByEnumeratingWithState_objects_count_(v326, v202, (uint64_t)&v352, (uint64_t)v365, 16, v203);
            if (v204)
            {
              v329 = *(_QWORD *)v353;
              do
              {
                for (n = 0; n != v204; ++n)
                {
                  if (*(_QWORD *)v353 != v329)
                    objc_enumerationMutation(v326);
                  v206 = *(void **)(*((_QWORD *)&v352 + 1) + 8 * n);
                  v347 = 0u;
                  v348 = 0u;
                  v349 = 0u;
                  v350 = 0u;
                  v207 = v206;
                  v214 = objc_msgSend_countByEnumeratingWithState_objects_count_(v207, v208, (uint64_t)&v347, (uint64_t)v364, 16, v209);
                  if (v214)
                  {
                    v215 = *(_QWORD *)v348;
                    do
                    {
                      for (ii = 0; ii != v214; ++ii)
                      {
                        if (*(_QWORD *)v348 != v215)
                          objc_enumerationMutation(v207);
                        v217 = *(void **)(*((_QWORD *)&v347 + 1) + 8 * ii);
                        objc_msgSend_objectAtIndex_(v217, v210, 0, v211, v212, v213);
                        v218 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_floatValue(v218, v219, v220, v221, v222, v223);
                        v225 = v224;

                        objc_msgSend_objectAtIndex_(v217, v226, 1, v227, v228, v229);
                        v230 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_floatValue(v230, v231, v232, v233, v234, v235);
                        v237 = v236;

                        objc_msgSend_addPoint_(v201, v238, v239, v240, v241, v242, v225, -v237);
                      }
                      v214 = objc_msgSend_countByEnumeratingWithState_objects_count_(v207, v210, (uint64_t)&v347, (uint64_t)v364, 16, v213);
                    }
                    while (v214);
                  }

                  objc_msgSend_endStroke(v201, v243, v244, v245, v246, v247);
                }
                v204 = objc_msgSend_countByEnumeratingWithState_objects_count_(v326, v248, (uint64_t)&v352, (uint64_t)v365, 16, v249);
              }
              while (v204);
            }

            objc_msgSend_addObject_(v318, v250, (uint64_t)v201, v251, v252, v253);
          }
          v312 = objc_msgSend_countByEnumeratingWithState_objects_count_(v316, v254, (uint64_t)&v360, (uint64_t)buf, 16, v255);
        }
        while (v312);
      }

    }
    v261 = objc_msgSend_count(v322, v256, v257, v258, v259, v260);
    v267 = v318;
    if (v261)
    {
      v268 = objc_msgSend_count(v318, v262, v263, v264, v265, v266);
      v267 = v322;
      if (v268)
      {
        v337 = 0u;
        v338 = 0u;
        v335 = 0u;
        v336 = 0u;
        v327 = v322;
        v271 = objc_msgSend_countByEnumeratingWithState_objects_count_(v327, v269, (uint64_t)&v335, (uint64_t)v359, 16, v270);
        if (v271)
        {
          v330 = *(_QWORD *)v336;
          do
          {
            for (jj = 0; jj != v271; ++jj)
            {
              if (*(_QWORD *)v336 != v330)
                objc_enumerationMutation(v327);
              v273 = *(void **)(*((_QWORD *)&v335 + 1) + 8 * jj);
              v331 = 0u;
              v332 = 0u;
              v333 = 0u;
              v334 = 0u;
              v274 = v318;
              v282 = objc_msgSend_countByEnumeratingWithState_objects_count_(v274, v275, (uint64_t)&v331, (uint64_t)v358, 16, v276);
              if (v282)
              {
                v283 = *(_QWORD *)v332;
                do
                {
                  for (kk = 0; kk != v282; ++kk)
                  {
                    if (*(_QWORD *)v332 != v283)
                      objc_enumerationMutation(v274);
                    v285 = *(_QWORD *)(*((_QWORD *)&v331 + 1) + 8 * kk);
                    v286 = (void *)objc_msgSend_copy(v273, v277, v278, v279, v280, v281);
                    objc_msgSend_appendDrawing_(v286, v287, v285, v288, v289, v290);
                    objc_msgSend_addObject_(v3, v291, (uint64_t)v286, v292, v293, v294);

                  }
                  v282 = objc_msgSend_countByEnumeratingWithState_objects_count_(v274, v277, (uint64_t)&v331, (uint64_t)v358, 16, v281);
                }
                while (v282);
              }

            }
            v271 = objc_msgSend_countByEnumeratingWithState_objects_count_(v327, v295, (uint64_t)&v335, (uint64_t)v359, 16, v296);
          }
          while (v271);
        }

        v267 = v3;
      }
    }
    v186 = v267;

  }
  else
  {
    v186 = v3;
  }

  return v186;
}

void sub_1BE6E7958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,void *a31,void *a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6E7C58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE6E7C68(uint64_t a1)
{

}

void sub_1BE6E7C70(uint64_t *a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  if (objc_msgSend_containsObject_(v9, v10, a1[4], v11, v12, v13))
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v18 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
      v20 = a1[4];
      v24 = 138412546;
      v25 = v19;
      v26 = 2112;
      v27 = v20;
      _os_log_impl(&dword_1BE607000, v18, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: localised version with glyph name %@ and locale %@ was found", (uint8_t *)&v24, 0x16u);
    }

    *a4 = 1;
  }
  else if (!*(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40)
         && objc_msgSend_containsObject_(v9, v14, a1[5], v15, v16, v17))
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), a2);
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v21 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40);
      v23 = a1[5];
      v24 = 138412546;
      v25 = v22;
      v26 = 2112;
      v27 = v23;
      _os_log_impl(&dword_1BE607000, v21, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderAppleStyle: localised version with glyph name %@ and locale %@ was found", (uint8_t *)&v24, 0x16u);
    }

  }
}

void sub_1BE6E7E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E7EA0()
{
  sub_1BE61F1C8("vector");
}

void sub_1BE6E7EB4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (a2)
  {
    sub_1BE6E7EB4(a1, *a2);
    sub_1BE6E7EB4(a1, a2[1]);
    v4 = a2[5];
    if (v4)
    {
      v5 = a2[6];
      v6 = (void *)a2[5];
      if (v5 != v4)
      {
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;

        }
        while (v5 != v4);
        v6 = (void *)a2[5];
      }
      a2[6] = v4;
      operator delete(v6);
    }
    operator delete(a2);
  }
}

void sub_1BE6E83B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Block_object_dispose(&location, 8);

  _Unwind_Resume(a1);
}

void sub_1BE6E8458(int a1, id val)
{
  sub_1BE6E8460(val);
}

void sub_1BE6E8460(id val)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;
  id location;

  if (val)
  {
    objc_initWeak(&location, val);
    v2 = (void *)*((_QWORD *)val + 6);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1BE6E86C0;
    v7[3] = &unk_1E77F3BB8;
    v7[4] = val;
    objc_copyWeak(&v8, &location);
    objc_msgSend_queryTextReplacementsWithCallback_(v2, v3, (uint64_t)v7, v4, v5, v6);
    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
  }
}

void sub_1BE6E84F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BE6E85C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)CHInputContextLexiconManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

id sub_1BE6E8600()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EF568098;
  v7 = qword_1EF568098;
  if (!qword_1EF568098)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1BE6EA108;
    v3[3] = &unk_1E77F2D50;
    v3[4] = &v4;
    sub_1BE6EA108((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1BE6E86A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE6E86C0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  _QWORD block[4];
  id v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1BE6E876C;
  block[3] = &unk_1E77F3B90;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v10);
}

void sub_1BE6E876C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  __CFString *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v4 = *(id *)(a1 + 32);
    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v27, (uint64_t)v31, 16, v6);
    if (v12)
    {
      v13 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v28 != v13)
            objc_enumerationMutation(v4);
          v15 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
          objc_msgSend_shortcut(v15, v7, v8, v9, v10, v11, (_QWORD)v27);
          v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_phrase(v15, v17, v18, v19, v20, v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKey_(*(void **)(*(_QWORD *)(a1 + 40) + 40), v23, (uint64_t)v22, (uint64_t)v16, v24, v25);
          v26 = objc_loadWeakRetained(v2);
          sub_1BE6E891C((uint64_t)v26, v16);

        }
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v27, (uint64_t)v31, 16, v11);
      }
      while (v12);
    }

  }
}

void sub_1BE6E88D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E891C(uint64_t a1, CFStringRef theString)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  const char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[8];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (!*(_QWORD *)(a1 + 72))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v4 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_FAULT, "Transient lexicon must be non-nil", buf, 2u);
      }

    }
    if (CFStringGetLength(theString) >= 1)
    {
      sub_1BE6E95D4(a1);
      objc_msgSend_splitStringIntoSubtokensForLexicon_minLength_(CHLanguageUtilities, v5, (uint64_t)theString, 3, v6, v7);
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v8 = (id)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v16, (uint64_t)v21, 16, v10);
      if (v11)
      {
        v12 = *(_QWORD *)v17;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v17 != v12)
              objc_enumerationMutation(v8);
            sub_1BE6E95D4(a1);
          }
          v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v14, (uint64_t)&v16, (uint64_t)v21, 16, v15);
        }
        while (v11);
      }

    }
  }
}

void sub_1BE6E8AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6E8BA0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE6E8BB0(uint64_t a1)
{

}

void sub_1BE6E8BB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 32) + 40), a2, a3, a4, a5, a6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1BE6E8CA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 32) + 64), a2, a3, a4, a5, a6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1BE6E8CDC(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend_lexiconQueue(WeakRetained, v6, v7, v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1BE6E8DBC;
  v13[3] = &unk_1E77F3C08;
  v14 = v3;
  v12 = v3;
  objc_copyWeak(&v15, v4);
  dispatch_async(v11, v13);

  objc_destroyWeak(&v15);
}

void sub_1BE6E8DA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E8DBC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  id *v8;
  id WeakRetained;
  id v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, void *);
  void *v25;
  id v26;

  v7 = (void *)objc_msgSend_copy(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v8 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v10 = v7;
  v11 = MEMORY[0x1E0C809B0];
  if (WeakRetained)
  {
    LMVocabularyReset();
    LMVocabularySetLanguages();
    v22 = v11;
    v23 = 3221225472;
    v24 = sub_1BE6E9AC4;
    v25 = &unk_1E77F3C58;
    v26 = WeakRetained;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v10, v12, (uint64_t)&v22, v13, v14, v15);
  }

  v16 = objc_loadWeakRetained(v8);
  v21 = v10;
  if (v16)
  {
    if (qword_1EF567EC8 != -1)
      dispatch_once(&qword_1EF567EC8, &unk_1E77F16D0);
    v22 = v11;
    v23 = 3221225472;
    v24 = sub_1BE6E9818;
    v25 = &unk_1E77F3C58;
    v26 = v16;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v21, v17, (uint64_t)&v22, v18, v19, v20, v21);
  }

}

void sub_1BE6E8EEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E8F04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E8F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E8F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  const void *LexiconImplementation;
  CFTypeRef v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  NSObject *v37;
  const void *RootCursor;
  _QWORD *v39;
  double v40;
  uint64_t v41;
  dispatch_time_t v42;
  NSObject *v43;
  uint64_t v44;
  id WeakRetained;
  id location[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD block[5];
  id v51[11];
  __int128 buf;
  void (*v53)(uint64_t);
  void *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;

  v1 = a1;
  v57 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = *(_QWORD *)(v1 + 32);
    if (v2)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v44 = v1;
      v3 = (id)qword_1EF568E38;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_DEBUG, "Updating named entity lexicons", (uint8_t *)&buf, 2u);
      }

      v4 = sub_1BE6E8600();
      objc_msgSend_sharedManager(v4, v5, v6, v7, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_loadLexiconsUsingFilter_(v10, v11, 0, v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      v48 = 0u;
      v49 = 0u;
      *(_OWORD *)location = 0u;
      v47 = 0u;
      v16 = v15;
      v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)location, (uint64_t)block, 16, v18);
      if (v24)
      {
        v25 = 0;
        v26 = *(_QWORD *)v47;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v47 != v26)
              objc_enumerationMutation(v16);
            v28 = (void *)*((_QWORD *)location[1] + i);
            if ((objc_msgSend_typeFlags(v28, v19, v20, v21, v22, v23, v44, WeakRetained) & 1) != 0)
            {
              LexiconImplementation = (const void *)objc_msgSend_getLexiconImplementation(v28, v19, v20, v21, v22, v23);
              v30 = CFRetain(LexiconImplementation);
              v36 = objc_msgSend_typeFlags(v28, v31, v32, v33, v34, v35);
              if (qword_1EF568E88 != -1)
                dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
              v37 = (id)qword_1EF568E38;
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
              {
                LODWORD(buf) = 134217984;
                *(_QWORD *)((char *)&buf + 4) = v30;
                _os_log_impl(&dword_1BE607000, v37, OS_LOG_TYPE_DEBUG, "Adding named entity lexicon %p", (uint8_t *)&buf, 0xCu);
              }

              RootCursor = (const void *)LXLexiconCreateRootCursor();
              *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
              *((_QWORD *)&buf + 1) = 3221225472;
              v53 = sub_1BE6E9368;
              v54 = &unk_1E77F3C30;
              v56 = (v36 & 4) != 0;
              v55 = v2;
              LXCursorEnumerateEntriesRecursively();
              CFRelease(RootCursor);
              CFRelease(v30);
              v25 = 1;
            }
          }
          v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)location, (uint64_t)block, 16, v23);
        }
        while (v24);

        v39 = *(_QWORD **)(v44 + 32);
        if ((v25 & 1) != 0)
        {
          v40 = 600.0;
          goto LABEL_26;
        }
        v1 = v44;
        v41 = v39[3];
        if (v41 < 11)
        {
LABEL_25:
          v39[3] = v41 + 1;
          v39 = *(_QWORD **)(v1 + 32);
          v40 = 0.5;
LABEL_26:
          if (!v39)
            goto LABEL_31;
          goto LABEL_30;
        }
      }
      else
      {

        v39 = *(_QWORD **)(v1 + 32);
        v41 = v39[3];
        if (v41 < 11)
          goto LABEL_25;
      }
    }
    else
    {
      v39 = 0;
      v41 = MEMORY[0x18];
      if (MEMORY[0x18] < 11)
        goto LABEL_25;
    }
    v40 = 600.0;
LABEL_30:
    objc_initWeak(location, v39);
    v42 = dispatch_time(0, (uint64_t)(v40 * 1000000000.0));
    v43 = v39[1];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1BE6E8F34;
    block[3] = &unk_1E77F3C08;
    objc_copyWeak(v51, location);
    block[4] = v39;
    dispatch_after(v42, v43, block);
    objc_destroyWeak(v51);
    objc_destroyWeak(location);
  }
LABEL_31:

}

void sub_1BE6E9314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6E9368(uint64_t a1)
{
  __CFString *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD v24[5];
  uint8_t buf[16];

  v2 = (__CFString *)(id)LXEntryCopyString();
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_rangeOfCharacterFromSet_(v2, v9, (uint64_t)v8, v10, v11, v12);

  if (*(_BYTE *)(a1 + 40) || v13 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v19 = objc_msgSend_length(v2, v14, v15, v16, v17, v18);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = sub_1BE6E95CC;
    v24[3] = &unk_1E77F2070;
    v24[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v2, v20, 0, v19, 3, (uint64_t)v24);
    v21 = *(_QWORD *)(a1 + 32);
    if (v21)
    {
      if (!*(_QWORD *)(v21 + 80))
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v22 = (id)qword_1EF568E18[0];
        if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BE607000, v22, OS_LOG_TYPE_FAULT, "Transient phrase lexicon must be non-nil", buf, 2u);
        }

      }
      if (CFStringGetLength(v2) >= 1)
      {
        if (LXLexiconAdd())
        {
          LXLexiconIncrementUsageCount();
        }
        else
        {
          if (qword_1EF568E88 != -1)
            dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
          v23 = (id)qword_1EF568E18[0];
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1BE607000, v23, OS_LOG_TYPE_ERROR, "A token ID should be assigned when adding to the phrase lexicon. Skipping phrase lexicon entry.", buf, 2u);
          }

        }
      }
    }
  }
  else
  {
    sub_1BE6E891C(*(_QWORD *)(a1 + 32), v2);
  }
  CFRelease(v2);

}

void sub_1BE6E9578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E9588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E9598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E95AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E95BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E95CC(uint64_t a1, const __CFString *a2)
{
  sub_1BE6E891C(*(_QWORD *)(a1 + 32), a2);
}

void sub_1BE6E95D4(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[16];
  uint8_t buf[16];

  if (*(_QWORD *)(a1 + 72))
  {
    if (LXLexiconAdd())
    {
LABEL_3:
      LXLexiconIncrementUsageCount();
      LXLexiconSetUserBitfield();
      return;
    }
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v1 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v1, OS_LOG_TYPE_FAULT, "Transient lexicon must be non-nil", buf, 2u);
    }

    if (LXLexiconAdd())
      goto LABEL_3;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v2 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_ERROR, "A token ID should be assigned when adding to the lexicon. Skipping lexicon entry.", v3, 2u);
  }

}

void sub_1BE6E9748()
{
  id v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3780]);
  objc_msgSend_ch_katakanaCharacterSet(MEMORY[0x1E0CB3500], v1, v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v0, v7, (uint64_t)v6, v8, v9, v10);

  objc_msgSend_ch_hiraganaCharacterSet(MEMORY[0x1E0CB3500], v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v0, v17, (uint64_t)v16, v18, v19, v20);

  objc_msgSend_ch_kanjiCharacterSet(MEMORY[0x1E0CB3500], v21, v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v0, v27, (uint64_t)v26, v28, v29, v30);

  v31 = (void *)qword_1EF567EC0;
  qword_1EF567EC0 = (uint64_t)v0;

}

void sub_1BE6E97E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE6E9808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6E9818(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;

  v84 = a3;
  objc_msgSend_firstName(v84, v4, v5, v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_lastName(v84, v10, v11, v12, v13, v14);
  v20 = objc_claimAutoreleasedReturnValue();
  if (!(v9 | v20))
    goto LABEL_19;
  objc_msgSend_phoneticFirstName(v84, v15, v16, v17, v18, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(v21, v22, v23, v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_phoneticLastName(v84, v28, v29, v30, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(v33, v34, v35, v36, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9 && v20)
  {
    v45 = objc_msgSend_rangeOfCharacterFromSet_((void *)v9, v40, qword_1EF567EC0, v42, v43, v44);
    v50 = objc_msgSend_rangeOfCharacterFromSet_((void *)v20, v46, qword_1EF567EC0, v47, v48, v49);
    if (v45 != 0x7FFFFFFFFFFFFFFFLL && v50 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend_stringByAppendingString_((void *)v20, v40, v9, v42, v43, v44);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_length(v27, v52, v53, v54, v55, v56) && objc_msgSend_length(v39, v57, v58, v59, v60, v61))
      {
        objc_msgSend_stringByAppendingString_(v39, v57, (uint64_t)v27, v59, v60, v61);
        v62 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend_null(MEMORY[0x1E0C99E38], v57, v58, v59, v60, v61);
        v62 = objc_claimAutoreleasedReturnValue();
      }
      v67 = (void *)v62;
      objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 64), v63, (uint64_t)v51, v64, v65, v66);
      objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 64), v68, (uint64_t)v67, v69, v70, v71);

    }
    goto LABEL_13;
  }
  if (v20)
  {
LABEL_13:
    if (objc_msgSend_length(v39, v40, v41, v42, v43, v44))
    {
      objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 64), v40, v20, v42, v43, v44);
      objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 64), v72, (uint64_t)v39, v73, v74, v75);
    }
  }
  if (v9 && objc_msgSend_length(v27, v40, v41, v42, v43, v44))
  {
    objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 64), v76, v9, v77, v78, v79);
    objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 64), v80, (uint64_t)v27, v81, v82, v83);
  }

LABEL_19:
}

void sub_1BE6E99F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE6E9AC4(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  long double v10;
  CFIndex v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CFString *v17;
  CFIndex v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __CFString *v24;
  CFIndex v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __CFString *v31;
  CFIndex v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __CFString *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const __CFString *v45;
  __CFString *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const __CFString *v53;
  __CFString *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  _QWORD v77[6];
  _QWORD v78[6];

  v76 = a3;
  objc_msgSend_score(v76, v4, v5, v6, v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 32);
  objc_msgSend_firstName(v76, v12, v13, v14, v15, v16);
  v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
  sub_1BE6E9D88(v11, v17, v10);

  v18 = *(_QWORD *)(a1 + 32);
  objc_msgSend_middleName(v76, v19, v20, v21, v22, v23);
  v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
  sub_1BE6E9D88(v18, v24, v10);

  v25 = *(_QWORD *)(a1 + 32);
  objc_msgSend_lastName(v76, v26, v27, v28, v29, v30);
  v31 = (__CFString *)objc_claimAutoreleasedReturnValue();
  sub_1BE6E9D88(v25, v31, v10);

  v32 = *(_QWORD *)(a1 + 32);
  objc_msgSend_nickname(v76, v33, v34, v35, v36, v37);
  v38 = (__CFString *)objc_claimAutoreleasedReturnValue();
  sub_1BE6E9D88(v32, v38, v10);

  v39 = *(_QWORD *)(a1 + 32);
  objc_msgSend_organizationName(v76, v40, v41, v42, v43, v44);
  v45 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  v46 = (__CFString *)v45;
  if (v39 && v45 && CFStringGetLength(v45) >= 1)
  {
    sub_1BE6E891C(v39, v46);
    log10(v10);
    LMVocabularyAddLemma();
  }

  v47 = *(_QWORD *)(a1 + 32);
  objc_msgSend_jobTitle(v76, v48, v49, v50, v51, v52);
  v53 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  v54 = (__CFString *)v53;
  if (v47 && v53 && CFStringGetLength(v53) >= 1)
  {
    sub_1BE6E891C(v47, v54);
    log10(v10);
    LMVocabularyAddLemma();
  }

  objc_msgSend_relations(v76, v55, v56, v57, v58, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = MEMORY[0x1E0C809B0];
  v78[0] = MEMORY[0x1E0C809B0];
  v78[1] = 3221225472;
  v78[2] = sub_1BE6E9E54;
  v78[3] = &unk_1E77F3C80;
  v78[4] = *(_QWORD *)(a1 + 32);
  *(long double *)&v78[5] = v10;
  objc_msgSend_enumerateObjectsUsingBlock_(v60, v62, (uint64_t)v78, v63, v64, v65);

  objc_msgSend_cities(v76, v66, v67, v68, v69, v70);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v77[0] = v61;
  v77[1] = 3221225472;
  v77[2] = sub_1BE6E9EEC;
  v77[3] = &unk_1E77F3C80;
  v77[4] = *(_QWORD *)(a1 + 32);
  *(long double *)&v77[5] = v10;
  objc_msgSend_enumerateObjectsUsingBlock_(v71, v72, (uint64_t)v77, v73, v74, v75);

}

void sub_1BE6E9D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6E9D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

CFIndex sub_1BE6E9D88(CFIndex result, CFStringRef theString, long double a3)
{
  uint64_t v5;

  if (result)
  {
    if (theString)
    {
      v5 = result;
      result = CFStringGetLength(theString);
      if (result >= 1)
      {
        sub_1BE6E891C(v5, theString);
        log10(a3);
        result = LMVocabularyAddLemma();
        if ((_DWORD)result)
          return LMVocabularyEnumerateInflectionsOfLemma();
      }
    }
  }
  return result;
}

void sub_1BE6E9E54(uint64_t a1, void *a2)
{
  uint64_t v3;
  long double v4;
  __CFString *theString;

  theString = a2;
  if (theString)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(double *)(a1 + 40);
      if (CFStringGetLength(theString) >= 1)
      {
        sub_1BE6E891C(v3, theString);
        log10(v4);
        LMVocabularyAddLemma();
      }
    }
  }

}

void sub_1BE6E9ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6E9EEC(uint64_t a1, void *a2)
{
  uint64_t v3;
  long double v4;
  __CFString *theString;

  theString = a2;
  if (theString)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(double *)(a1 + 40);
      if (CFStringGetLength(theString) >= 1)
      {
        sub_1BE6E891C(v3, theString);
        log10(v4);
        LMVocabularyAddLemma();
      }
    }
  }

}

void sub_1BE6E9F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6E9F84(uint64_t a1, const __CFString *a2)
{
  sub_1BE6E891C(*(_QWORD *)(a1 + 32), a2);
}

Class sub_1BE6EA004(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EF568088)
  {
    qword_1EF568088 = _sl_dlopen();
    if (!qword_1EF568088)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("_KSTextReplacementClientStore");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1EF568080 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1BE6EA108(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EF5680A0)
  {
    qword_1EF5680A0 = _sl_dlopen();
    if (!qword_1EF5680A0)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("_ICInputContextManager");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1EF568098 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1BE6EAE5C(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  id v5;
  CHDrawing *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CHDrawing *v36;
  id v37;
  id v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CGFloat MinX;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CGFloat MaxX;
  CHDrawing *v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  _QWORD v60[4];
  CHDrawing *v61;
  id v62;
  id v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  __n128 (*v74)(__n128 *, __n128 *);
  void (*v75)(uint64_t);
  void *v76;
  void *__p;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[3];
  char v89;
  _QWORD v90[6];
  _QWORD **v91;
  _QWORD *v92[2];
  _QWORD v93[3];
  int v94;
  CGRect v95;
  CGRect v96;

  v5 = a1;
  v6 = objc_alloc_init(CHDrawing);
  v93[0] = 0;
  v93[1] = v93;
  v93[2] = 0x2020000000;
  v94 = 0;
  v90[0] = 0;
  v90[1] = v90;
  v90[2] = 0x4812000000;
  v90[3] = sub_1BE6EB270;
  v90[4] = sub_1BE6EB2AC;
  v92[0] = 0;
  v92[1] = 0;
  v90[5] = &unk_1BE94989A;
  v91 = v92;
  v7 = (void *)MEMORY[0x1E0C99DE8];
  v13 = objc_msgSend_countCodepoints(v5, v8, v9, v10, v11, v12, v6);
  objc_msgSend_arrayWithCapacity_(v7, v14, v13, v15, v16, v17);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)MEMORY[0x1E0C99DE8];
  v24 = objc_msgSend_countCodepoints(v5, v19, v20, v21, v22, v23);
  objc_msgSend_arrayWithCapacity_(v18, v25, v24, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v88[0] = 0;
  v88[1] = v88;
  v88[2] = 0x2020000000;
  v89 = 0;
  v84 = 0;
  v85 = &v84;
  v86 = 0x2020000000;
  v87 = 0;
  v80 = 0;
  v81 = &v80;
  v82 = 0x2020000000;
  v83 = 0;
  v71 = 0;
  v72 = &v71;
  v73 = 0x4812000000;
  v74 = sub_1BE6EB2BC;
  v75 = sub_1BE6EB2E0;
  v76 = &unk_1BE94989A;
  __p = 0;
  v78 = 0;
  v79 = 0;
  v35 = objc_msgSend_length(v5, v30, v31, v32, v33, v34);
  v60[0] = MEMORY[0x1E0C809B0];
  v60[1] = 3221225472;
  v60[2] = sub_1BE6EB2F8;
  v60[3] = &unk_1E77F3D00;
  v36 = v6;
  v61 = v36;
  v64 = v93;
  v65 = v88;
  v70 = a2;
  v66 = &v84;
  v37 = v59;
  v62 = v37;
  v67 = v90;
  v68 = &v71;
  v69 = &v80;
  v38 = v29;
  v63 = v38;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v5, v39, 0, v35, (uint64_t)v60, v40);
  objc_msgSend_bounds(v36, v41, v42, v43, v44, v45);
  MinX = CGRectGetMinX(v95);
  objc_msgSend_bounds(v36, v47, v48, v49, v50, v51);
  MaxX = CGRectGetMaxX(v96);
  *(CGFloat *)(a3 + 8) = MinX;
  *(_QWORD *)(a3 + 16) = 0x4039000000000000;
  *(CGFloat *)(a3 + 24) = MaxX;
  *(_QWORD *)(a3 + 32) = 0x4039000000000000;
  *(CGFloat *)(a3 + 40) = MinX;
  *(_QWORD *)(a3 + 48) = 0x4034000000000000;
  *(CGFloat *)(a3 + 56) = MaxX;
  *(_QWORD *)(a3 + 64) = 0x4034000000000000;
  *(CGFloat *)(a3 + 72) = MinX;
  *(_QWORD *)(a3 + 80) = 0x4024000000000000;
  *(CGFloat *)(a3 + 88) = MaxX;
  *(_QWORD *)(a3 + 96) = 0x4024000000000000;
  *(CGFloat *)(a3 + 104) = MinX;
  *(_QWORD *)(a3 + 112) = 0x4014000000000000;
  *(CGFloat *)(a3 + 120) = MaxX;
  *(_QWORD *)(a3 + 128) = 0x4014000000000000;
  v53 = v36;
  *(_QWORD *)a3 = v53;
  v54 = v37;
  *(_QWORD *)(a3 + 136) = v54;
  v55 = v38;
  v56 = v85[3];
  *(_QWORD *)(a3 + 144) = v55;
  *(_QWORD *)(a3 + 152) = v56;
  *(_QWORD *)(a3 + 160) = v81[3];
  v57 = v72;
  v58 = v72[8];
  *(_OWORD *)(a3 + 168) = *((_OWORD *)v72 + 3);
  *(_QWORD *)(a3 + 184) = v58;
  v57[7] = 0;
  v57[8] = 0;
  v57[6] = 0;

  _Block_object_dispose(&v71, 8);
  if (__p)
  {
    v78 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v80, 8);
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(v88, 8);

  _Block_object_dispose(v90, 8);
  sub_1BE62033C((uint64_t)&v91, v92[0]);
  _Block_object_dispose(v93, 8);

}

void sub_1BE6EB1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  void *v40;
  uint64_t v41;

  _Block_object_dispose(&a26, 8);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v41 - 240), 8);

  _Block_object_dispose((const void *)(v41 - 208), 8);
  sub_1BE62033C(a10, *(_QWORD **)(v41 - 152));
  _Block_object_dispose((const void *)(v41 - 136), 8);

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE6EB270(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1BE6EB2AC(uint64_t a1)
{
  sub_1BE62033C(a1 + 48, *(_QWORD **)(a1 + 56));
}

__n128 sub_1BE6EB2BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE6EB2E0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE6EB2F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int isEqualToString;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  int v72;
  int v73;
  id v74;
  id v75;
  uint64_t v76;
  int v77;
  int v78;
  char *v79;
  char *i;
  void *v81;
  void *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  BOOL v121;
  uint64_t *v122;
  int v123;
  char *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t **v128;
  uint64_t **v129;
  unsigned int v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t **v134;
  uint64_t **v135;
  unsigned int v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  float *v141;
  double v142;
  float v143;
  id v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double MidX;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  CGFloat MidY;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  __int32 v163;
  uint64_t v164;
  unsigned __int32 v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  unsigned int v169;
  int8x16_t v170;
  int8x16_t v171;
  int32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x8_t v175;
  int32x2_t v176;
  int8x8_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int8x16_t v180;
  int8x8_t v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  float64x2_t v185;
  float64x2_t v186;
  int32x2_t v187;
  int8x8_t v188;
  int8x8_t v189;
  int8x8_t v190;
  uint64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v199;
  float64x2_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  double v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  CGFloat v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  id v224;
  NSObject *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  double v235;
  float v236;
  _QWORD *v237;
  unint64_t v238;
  char *v239;
  _QWORD *v240;
  char *v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  int8x16_t *v248;
  void *__p;
  char *v250;
  char *v251;
  CGAffineTransform buf;
  CGAffineTransformComponents components;
  CGAffineTransform v254;
  _BYTE __token[36];
  int v256;
  int v257;
  int8x16_t v258[2];
  int v259;
  int v260;
  uint64_t v261;
  std::random_device v262;
  CGRect v263;
  CGRect v264;
  CGRect v265;
  CGRect v266;

  v6 = a2;
  v8 = objc_msgSend_strokeCount(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  unicodeToNSString(v6, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)CFSTR(" "), v16, v17, v18);

  if (isEqualToString)
  {
    *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                          + 24)
                                                               + 12.0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
    goto LABEL_27;
  }
  v25 = *(_QWORD *)(a1 + 104);
  v250 = 0;
  v251 = 0;
  __p = 0;
  v28 = *(uint64_t **)(v25 + 8);
  v26 = (uint64_t *)(v25 + 8);
  v27 = v28;
  if (!v28)
    goto LABEL_21;
  v248 = v258;
  v29 = v26;
  v30 = v27;
  while (1)
  {
    v31 = *((_DWORD *)v30 + 8);
    if (v31 <= v6)
      break;
LABEL_5:
    v30 = (uint64_t *)*v30;
    if (!v30)
    {
      v32 = 9633;
      goto LABEL_11;
    }
  }
  if (v31 < v6)
  {
    ++v30;
    goto LABEL_5;
  }
  v32 = v6;
  do
  {
LABEL_11:
    v33 = *((_DWORD *)v27 + 8);
    _CF = v33 >= v32;
    if (v33 >= v32)
      v35 = (uint64_t **)v27;
    else
      v35 = (uint64_t **)(v27 + 1);
    if (_CF)
      v29 = v27;
    v27 = *v35;
  }
  while (*v35);
  if (v29 == v26 || v32 < *((_DWORD *)v29 + 8) || (v36 = v29[5], v37 = v29[6], v36 == v37))
  {
LABEL_21:
    v38 = 0;
    goto LABEL_22;
  }
  while (2)
  {
    v70 = (char *)__p;
    v71 = v250;
    if (v250 == __p)
    {
      if (v250 < v251)
      {
LABEL_46:
        *(_QWORD *)v71 = *(id *)v36;
        *(_OWORD *)(v71 + 8) = *(_OWORD *)(v36 + 8);
        v69 = v71 + 24;
        goto LABEL_31;
      }
LABEL_30:
      v69 = sub_1BE6EC070(&__p, v36);
LABEL_31:
      v250 = v69;
      goto LABEL_32;
    }
    v72 = *(_DWORD *)(v36 + 8);
    v73 = *((_DWORD *)__p + 2);
    if (v72 <= v73)
    {
      if (v72 != v73)
        goto LABEL_32;
      if (v250 < v251)
        goto LABEL_46;
      goto LABEL_30;
    }
    v74 = *(id *)v36;
    v75 = *(id *)v36;
    v76 = *(_QWORD *)(v36 + 8);
    v78 = *(_DWORD *)(v36 + 16);
    v77 = *(_DWORD *)(v36 + 20);
    if (v251 == v70)
    {
      do
      {
        v82 = (void *)*((_QWORD *)v71 - 3);
        v71 -= 24;

      }
      while (v71 != v70);
      v250 = v70;
      operator delete(__p);
      __p = 0;
      v250 = 0;
      v251 = 0;
      v83 = (char *)operator new(0x18uLL);
      __p = v83;
      v250 = v83;
      v79 = v83 + 24;
      v251 = v83 + 24;
      *(_QWORD *)v83 = v75;
      *((_QWORD *)v83 + 1) = v76;
      *((_DWORD *)v83 + 4) = v78;
      *((_DWORD *)v83 + 5) = v77;
    }
    else
    {
      v79 = v70 + 24;
      objc_storeStrong((id *)v70, v74);
      *((_QWORD *)v70 + 1) = v76;
      *((_DWORD *)v70 + 4) = v78;
      *((_DWORD *)v70 + 5) = v77;
      for (i = v250; i != v79; i -= 24)
      {
        v81 = (void *)*((_QWORD *)i - 3);

      }
    }
    v250 = v79;

LABEL_32:
    v36 += 24;
    if (v36 != v37)
      continue;
    break;
  }
  v38 = (char *)__p;
  if (__p == v250)
  {
LABEL_22:
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
    if (!v38)
    {
LABEL_27:
      if (objc_msgSend_strokeCount(*(void **)(a1 + 32), v20, v21, v22, v23, v24, v248) > v8)
      {
        v47 = *(void **)(a1 + 40);
        unicodeToNSString(v6, v42, v43, v44, v45, v46);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v47, v49, (uint64_t)v48, v50, v51, v52);

        v53 = *(void **)(a1 + 48);
        v54 = (void *)MEMORY[0x1E0CB36B8];
        v60 = objc_msgSend_strokeCount(*(void **)(a1 + 32), v55, v56, v57, v58, v59);
        objc_msgSend_indexSetWithIndexesInRange_(v54, v61, v8, v60 - v8, v62, v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v53, v65, (uint64_t)v64, v66, v67, v68);

      }
      return;
    }
LABEL_23:
    v39 = v250;
    v40 = v38;
    if (v250 != v38)
    {
      do
      {
        v41 = (void *)*((_QWORD *)v39 - 3);
        v39 -= 24;

      }
      while (v39 != v38);
      v40 = __p;
    }
    v250 = v38;
    operator delete(v40);
    goto LABEL_27;
  }
  if (*((_DWORD *)__p + 3) != 9633)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
LABEL_60:
    v116 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v117 = *(uint64_t **)(v116 + 56);
    if (!v117)
      goto LABEL_71;
    v118 = v116 + 56;
    v119 = *(_QWORD *)(v116 + 56);
    do
    {
      v120 = *(_DWORD *)(v119 + 32);
      v121 = v120 >= v6;
      if (v120 >= v6)
        v122 = (uint64_t *)v119;
      else
        v122 = (uint64_t *)(v119 + 8);
      if (v121)
        v118 = v119;
      v119 = *v122;
    }
    while (*v122);
    if (v118 == v116 + 56 || *(_DWORD *)(v118 + 32) > v6)
    {
LABEL_71:
      v123 = rand();
      v125 = __p;
      v124 = v250;
      v126 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v128 = (uint64_t **)(v126 + 56);
      v127 = *(uint64_t **)(v126 + 56);
      if (v127)
      {
        while (1)
        {
          while (1)
          {
            v129 = (uint64_t **)v127;
            v130 = *((_DWORD *)v127 + 8);
            if (v130 <= v6)
              break;
            v127 = *v129;
            v128 = v129;
            if (!*v129)
              goto LABEL_78;
          }
          if (v130 >= v6)
            break;
          v127 = v129[1];
          if (!v127)
          {
            v128 = v129 + 1;
            goto LABEL_78;
          }
        }
        v131 = v129;
      }
      else
      {
        v129 = (uint64_t **)(v126 + 56);
LABEL_78:
        v131 = operator new(0x30uLL);
        v131[8] = v6;
        *((_QWORD *)v131 + 5) = 0;
        *(_QWORD *)v131 = 0;
        *((_QWORD *)v131 + 1) = 0;
        *((_QWORD *)v131 + 2) = v129;
        *v128 = (uint64_t *)v131;
        v132 = **(_QWORD **)(v126 + 48);
        v133 = (uint64_t *)v131;
        if (v132)
        {
          *(_QWORD *)(v126 + 48) = v132;
          v133 = *v128;
        }
        sub_1BE61F5C0(*(uint64_t **)(v126 + 56), v133);
        ++*(_QWORD *)(v126 + 64);
      }
      *((_QWORD *)v131 + 5) = v123 % (0xAAAAAAAAAAAAAAABLL * ((v124 - v125) >> 3));
      v116 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v117 = *(uint64_t **)(v116 + 56);
    }
    if (v117)
    {
      while (1)
      {
        while (1)
        {
          v135 = (uint64_t **)v117;
          v136 = *((_DWORD *)v117 + 8);
          if (v136 <= v6)
            break;
          v117 = *v135;
          v134 = v135;
          if (!*v135)
            goto LABEL_90;
        }
        if (v136 >= v6)
          break;
        v117 = v135[1];
        if (!v117)
        {
          v134 = v135 + 1;
          goto LABEL_90;
        }
      }
      v137 = v135;
    }
    else
    {
      v134 = (uint64_t **)(v116 + 56);
      v135 = (uint64_t **)(v116 + 56);
LABEL_90:
      v137 = operator new(0x30uLL);
      v137[8] = v6;
      *((_QWORD *)v137 + 5) = 0;
      *(_QWORD *)v137 = 0;
      *((_QWORD *)v137 + 1) = 0;
      *((_QWORD *)v137 + 2) = v135;
      *v134 = (uint64_t *)v137;
      v138 = **(_QWORD **)(v116 + 48);
      v139 = (uint64_t *)v137;
      if (v138)
      {
        *(_QWORD *)(v116 + 48) = v138;
        v139 = *v134;
      }
      sub_1BE61F5C0(*(uint64_t **)(v116 + 56), v139);
      ++*(_QWORD *)(v116 + 64);
    }
    v140 = *((_QWORD *)v137 + 5);
    v141 = (float *)((char *)__p + 24 * v140);
    v142 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) + (float)(v141[4] * 10.0);
    v143 = v142;
    CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::getNormalizedDrawing((void **)v141, 10.0, 20.0, v143, v20, v21, v22, v23, v24);
    v144 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_bounds(v144, v145, v146, v147, v148, v149);
    MidX = CGRectGetMidX(v263);
    objc_msgSend_bounds(v144, v151, v152, v153, v154, v155);
    MidY = CGRectGetMidY(v264);
    objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v144, v157, v158, v159, v160, v161, -MidX, -MidY, 0.100000001);
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    __token[23] = 12;
    strcpy(__token, "/dev/urandom");
    std::random_device::random_device(&v262, (const std::string *)__token);
    if ((__token[23] & 0x80000000) != 0)
      operator delete(*(void **)__token);
    v163 = MEMORY[0x1C3B811FC](&v262);
    v164 = 1;
    v165 = v163;
    do
    {
      v165 = v164 + 1812433253 * (v165 ^ (v165 >> 30));
      *(_DWORD *)&__token[4 * v164++] = v165;
    }
    while (v164 != 624);
    v166 = *(int8x16_t *)&__token[4];
    v167 = *(int8x16_t *)&__token[4];
    v167.i32[0] = v163;
    v168 = *(int8x16_t *)&__token[20];
    v261 = 8;
    *(_DWORD *)&__token[32] = v259 ^ ((v256 & 0x7FFFFFFE | *(_DWORD *)&__token[32] & 0x80000000) >> 1) ^ (v256 << 31 >> 31) & 0x9908B0DF;
    v169 = ((*(_DWORD *)&__token[32] ^ (*(_DWORD *)&__token[32] >> 11)) << 7) & 0x9D2C5680 ^ *(_DWORD *)&__token[32] ^ (*(_DWORD *)&__token[32] >> 11);
    v167.i32[3] = *(_DWORD *)&__token[12];
    v170.i64[0] = 0x100000001;
    v170.i64[1] = 0x100000001;
    v171 = v168;
    v171.i32[0] = *(_DWORD *)&__token[16];
    v166.i32[2] = *(_DWORD *)&__token[4];
    v172 = (int32x4_t)vandq_s8(v166, (int8x16_t)xmmword_1BE8D5FD0);
    v173 = (int8x16_t)vdupq_n_s32(0x9908B0DF);
    v174 = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8((int8x16_t)vuzp1q_s32(v172, vrev64q_s32(v172)), vandq_s8(v167, (int8x16_t)xmmword_1BE8D5FC0)), 1uLL), veorq_s8(v258[0], vbicq_s8(v173, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)&__token[4], v170)))));
    v167.i64[0] = vextq_s8(v174, v174, 8uLL).u64[0];
    v175 = (int8x8_t)vzip1_s32(*(int32x2_t *)v174.i8, *(int32x2_t *)v167.i8);
    v176 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v175, 0xBuLL), v175);
    v177 = (int8x8_t)vdup_n_s32(0x9D2C5680);
    *(int32x2_t *)v167.i8 = vzip2_s32(*(int32x2_t *)v174.i8, *(int32x2_t *)v167.i8);
    *(int8x8_t *)v167.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v167.i8, 0xBuLL), *(int8x8_t *)v167.i8);
    v171.i32[3] = v168.i32[2];
    v178 = (int32x4_t)vandq_s8(v168, v170);
    v168.i32[2] = v168.i32[0];
    v179 = (int32x4_t)vandq_s8(v168, (int8x16_t)xmmword_1BE8D5FD0);
    v180 = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8((int8x16_t)vuzp1q_s32(v179, vrev64q_s32(v179)), vandq_s8(v171, (int8x16_t)xmmword_1BE8D5FC0)), 1uLL), veorq_s8(v258[1], vbicq_s8(v173, (int8x16_t)vceqzq_s32(v178))));
    v179.i64[0] = vextq_s8(v180, v180, 8uLL).u64[0];
    *(int32x2_t *)v168.i8 = vzip1_s32(*(int32x2_t *)v180.i8, *(int32x2_t *)v179.i8);
    *(int8x8_t *)v168.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v168.i8, 0xBuLL), *(int8x8_t *)v168.i8);
    v181 = vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v168.i8, 7uLL), v177);
    *(int8x16_t *)__token = v174;
    *(int8x16_t *)&__token[16] = v180;
    *(int32x2_t *)v180.i8 = vzip2_s32(*(int32x2_t *)v180.i8, *(int32x2_t *)v179.i8);
    *(int8x8_t *)v180.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v180.i8, 0xBuLL), *(int8x8_t *)v180.i8);
    *(int8x8_t *)v179.i8 = vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v180.i8, 7uLL), v177);
    v182 = v260 ^ ((v257 & 0x7FFFFFFE | v256 & 0x80000000) >> 1);
    v183 = v182 ^ (v257 << 31 >> 31) & 0x9908B0DF ^ ((v182 ^ (v257 << 31 >> 31) & 0x9908B0DF) >> 11);
    v184 = (((v183 << 7) & 0x9D2C5680 ^ v183) << 15) & 0xEFC60000 ^ (v183 << 7) & 0x9D2C5680 ^ v183;
    v185 = (float64x2_t)vdupq_n_s64(0x41F0000000000000uLL);
    v186 = (float64x2_t)vdupq_n_s64(0x3BF0000000000000uLL);
    v187 = (int32x2_t)veor_s8(vand_s8((int8x8_t)vshl_n_s32(v176, 7uLL), v177), (int8x8_t)v176);
    v188 = (int8x8_t)vdup_n_s32(0xEFC60000);
    v189 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(v187, 0xFuLL), v188), (int8x8_t)v187);
    v190 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v189, 0x12uLL), v189);
    v191.i64[0] = v190.u32[0];
    v191.i64[1] = v190.u32[1];
    v192 = vcvtq_f64_u64(v191);
    *(int8x8_t *)v167.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v167.i8, 7uLL), v177), *(int8x8_t *)v167.i8);
    *(int8x8_t *)v167.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v167.i8, 0xFuLL), v188), *(int8x8_t *)v167.i8);
    *(int8x8_t *)v167.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v167.i8, 0x12uLL), *(int8x8_t *)v167.i8);
    v191.i64[0] = v167.u32[0];
    v191.i64[1] = v167.u32[1];
    v193 = vmulq_f64(vmlaq_f64(v192, v185, vcvtq_f64_u64(v191)), v186);
    __asm
    {
      FMOV            V6.2D, #2.0
      FMOV            V17.2D, #-1.0
    }
    v199 = vmlaq_f64(_Q17, _Q6, v193);
    __asm { FMOV            V3.2D, #1.0 }
    memset(&v254, 0, sizeof(v254));
    *(int8x8_t *)v168.i8 = veor_s8(v181, *(int8x8_t *)v168.i8);
    *(int8x8_t *)v168.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v168.i8, 0xFuLL), v188), *(int8x8_t *)v168.i8);
    *(int8x8_t *)v168.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v168.i8, 0x12uLL), *(int8x8_t *)v168.i8);
    v191.i64[0] = v168.u32[0];
    v191.i64[1] = v168.u32[1];
    v201 = vcvtq_f64_u64(v191);
    *(int8x8_t *)v180.i8 = veor_s8(*(int8x8_t *)v179.i8, *(int8x8_t *)v180.i8);
    *(int8x8_t *)v180.i8 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v180.i8, 0xFuLL), v188), *(int8x8_t *)v180.i8);
    *(int8x8_t *)v180.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v180.i8, 0x12uLL), *(int8x8_t *)v180.i8);
    v191.i64[0] = v180.u32[0];
    v191.i64[1] = v180.u32[1];
    components.scale = (CGSize)vmlaq_f64(_Q3, (float64x2_t)vdupq_n_s64(0x3FB99999A0000000uLL), v199);
    *(float64x2_t *)&components.horizontalShear = vmulq_f64(vmlaq_f64(_Q17, _Q6, vmulq_f64(vmlaq_f64(v201, v185, vcvtq_f64_u64(v191)), v186)), (float64x2_t)vdupq_n_s64(0x3FA99999A0000000uLL));
    components.translation.dx = 0.0;
    components.translation.dy = (((double)((v169 << 15) & 0xEFC60000 ^ v169 ^ (((v169 << 15) & 0xEFC60000 ^ v169) >> 18))
                                + (double)(v184 ^ (v184 >> 18)) * 4294967300.0)
                               * 5.42101086e-20
                               * 2.0
                               + -1.0)
                              * 0.0599999987;
    CGAffineTransformMakeWithComponents(&v254, &components);
    if (v254.a < 0.0 || v254.d < 0.0)
    {
      CHOSLogForCategory(9);
      v225 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.a) = 0;
        _os_log_impl(&dword_1BE607000, v225, OS_LOG_TYPE_DEBUG, "applyRandomAffineTransform transformation is invalid.", (uint8_t *)&buf, 2u);
      }

      v224 = v144;
    }
    else
    {
      buf = v254;
      v206 = (void *)objc_msgSend_newDrawingWithAffineTransform_(v162, v202, (uint64_t)&buf, v203, v204, v205);

      objc_msgSend_bounds(v144, v207, v208, v209, v210, v211);
      v212 = CGRectGetMidX(v265);
      objc_msgSend_bounds(v144, v213, v214, v215, v216, v217);
      v218 = CGRectGetMidY(v266);
      objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v206, v219, v220, v221, v222, v223, v212 / 10.0, v218 / 10.0, 10.0);
      v224 = (id)objc_claimAutoreleasedReturnValue();
      v162 = v206;
    }
    std::random_device::~random_device(&v262);

    objc_msgSend_appendDrawing_(*(void **)(a1 + 32), v226, (uint64_t)v224, v227, v228, v229);
    objc_msgSend_bounds(v224, v230, v231, v232, v233, v234);
    v236 = v142 + v235 + (float)(*((float *)__p + 6 * v140 + 5) * 10.0);
    *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v236;
    v237 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 8);
    v239 = (char *)v237[7];
    v238 = v237[8];
    if ((unint64_t)v239 >= v238)
    {
      v241 = (char *)v237[6];
      v242 = (v239 - v241) >> 4;
      v243 = v242 + 1;
      if ((unint64_t)(v242 + 1) >> 60)
        sub_1BE61F930();
      v244 = v238 - (_QWORD)v241;
      if (v244 >> 3 > v243)
        v243 = v244 >> 3;
      if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFF0)
        v245 = 0xFFFFFFFFFFFFFFFLL;
      else
        v245 = v243;
      if (v245)
      {
        if (v245 >> 60)
          sub_1BE61F100();
        v246 = (char *)operator new(16 * v245);
      }
      else
      {
        v246 = 0;
      }
      v247 = &v246[16 * v242];
      *(_DWORD *)v247 = v6;
      *((_QWORD *)v247 + 1) = v140;
      v240 = v247 + 16;
      if (v239 != v241)
      {
        do
        {
          *((_OWORD *)v247 - 1) = *((_OWORD *)v239 - 1);
          v247 -= 16;
          v239 -= 16;
        }
        while (v239 != v241);
        v239 = (char *)v237[6];
      }
      v237[6] = v247;
      v237[7] = v240;
      v237[8] = &v246[16 * v245];
      if (v239)
        operator delete(v239);
    }
    else
    {
      *(_DWORD *)v239 = v6;
      *((_QWORD *)v239 + 1) = v140;
      v240 = v239 + 16;
    }
    v237[7] = v240;

    v38 = (char *)__p;
    if (!__p)
      goto LABEL_27;
    goto LABEL_23;
  }
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  v84 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (!*(_BYTE *)(v84 + 24))
  {
    *(_BYTE *)(v84 + 24) = 1;
    goto LABEL_60;
  }
  objc_msgSend_lastObject(*(void **)(a1 + 40), v20, v21, v22, v23, v24);
  v85 = (void *)objc_claimAutoreleasedReturnValue();

  if (v85)
  {
    objc_msgSend_lastObject(*(void **)(a1 + 40), v86, v87, v88, v89, v90);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    unicodeToNSString(v6, v92, v93, v94, v95, v96);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByAppendingString_(v91, v98, (uint64_t)v97, v99, v100, v101);
    v102 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_removeLastObject(*(void **)(a1 + 40), v103, v104, v105, v106, v107);
    objc_msgSend_addObject_(*(void **)(a1 + 40), v108, (uint64_t)v102, v109, v110, v111);

  }
  v112 = (char *)__p;
  if (__p)
  {
    v113 = v250;
    v114 = __p;
    if (v250 != __p)
    {
      do
      {
        v115 = (void *)*((_QWORD *)v113 - 3);
        v113 -= 24;

      }
      while (v113 != v112);
      v114 = __p;
    }
    v250 = v112;
    operator delete(v114);
  }
}

void sub_1BE6EBEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE6EBF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE6EBF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE6EBF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE6EBF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE6EBF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  sub_1BE6E6BC8(&a10);
  _Unwind_Resume(a1);
}

void sub_1BE6EBFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE6EBFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE6EC014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6EC024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6EC034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1BE6E6BC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BE6EC048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6EC05C()
{
  JUMPOUT(0x1C3B812ECLL);
}

char *sub_1BE6EC070(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE6E7EA0();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE61F100();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_QWORD *)v8 = *(id *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_16;
  }
  do
  {
    v13 = *((_QWORD *)v12 - 3);
    v12 -= 24;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v8 - 3) = v13;
    v8 -= 24;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)(v12 + 8);
  }
  while (v12 != v11);
  v12 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  while (v14 != v12)
  {
    v15 = (void *)*((_QWORD *)v14 - 3);
    v14 -= 24;

  }
  if (v12)
LABEL_16:
    operator delete(v12);
  return v10;
}

_QWORD *CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getCharacterRepresentations@<X0>(char **this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  char *v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  unsigned int v11;
  BOOL v12;
  char **v13;

  result = (_QWORD *)(*((uint64_t (**)(char **))*this + 2))(this);
  v9 = this[2];
  v8 = (char *)(this + 2);
  v7 = v9;
  if (v9)
  {
    v10 = (uint64_t *)v8;
    do
    {
      v11 = *((_DWORD *)v7 + 8);
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = (char **)v7;
      else
        v13 = (char **)(v7 + 8);
      if (v12)
        v10 = (uint64_t *)v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != (uint64_t *)v8 && *((_DWORD *)v10 + 8) <= a2)
      return sub_1BE6EC438(a3, v10 + 5);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getSupportedCharactersInfo(CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **this@<X0>, uint64_t *a2@<X8>)
{
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t *v14;
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *v15;
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;

  (*((void (**)(CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **))*this + 2))(this);
  v20 = 0;
  v21 = 0;
  v19 = &v20;
  v4 = this[1];
  v5 = (unsigned int *)&v20;
  if (v4 != (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *)(this + 2))
  {
    v18 = a2;
    do
    {
      v7 = *((_QWORD *)v4 + 5);
      v6 = *((_QWORD *)v4 + 6);
      v8 = &v20;
      v9 = &v20;
      v10 = *((_DWORD *)v4 + 8);
      if (v20)
      {
        v11 = v20;
        while (1)
        {
          while (1)
          {
            v9 = (uint64_t **)v11;
            v12 = *((_DWORD *)v11 + 8);
            if (v10 >= v12)
              break;
            v11 = *v9;
            v8 = v9;
            if (!*v9)
              goto LABEL_11;
          }
          if (v12 >= v10)
            break;
          v11 = v9[1];
          if (!v11)
          {
            v8 = v9 + 1;
            goto LABEL_11;
          }
        }
        v13 = v9;
      }
      else
      {
LABEL_11:
        v13 = operator new(0x30uLL);
        v13[8] = v10;
        *((_QWORD *)v13 + 5) = 0;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = v9;
        *v8 = (uint64_t *)v13;
        v14 = (uint64_t *)v13;
        if (*v19)
        {
          v19 = (uint64_t **)*v19;
          v14 = *v8;
        }
        sub_1BE61F5C0(v20, v14);
        ++v21;
      }
      *((_QWORD *)v13 + 5) = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
      v15 = (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *)*((_QWORD *)v4 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *)*((_QWORD *)v4 + 2);
          v17 = *(_QWORD *)v16 == (_QWORD)v4;
          v4 = v16;
        }
        while (!v17);
      }
      v4 = v16;
    }
    while (v16 != (CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder *)(this + 2));
    a2 = v18;
    v5 = (unsigned int *)v19;
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  sub_1BE6EC544(a2, v5, (unsigned int *)&v20);
  sub_1BE62033C((uint64_t)&v19, v20);
}

void sub_1BE6EC3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  sub_1BE62033C(v11, *(_QWORD **)(v11 + 8));
  sub_1BE62033C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1BE6EC414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_1BE62033C((uint64_t)va, v2);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::addCharacter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

_QWORD *sub_1BE6EC438(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE6E7EA0();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    do
    {
      v9 = v3 + v8;
      v10 = &v7[v8];
      *(_QWORD *)v10 = *(id *)(v3 + v8);
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v3 + v8 + 8);
      v8 += 24;
    }
    while (v9 + 24 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_1BE6EC504(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        v4 -= 24;

      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1BE6EC544(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_1BE6EC650(v7, v8, v18, &v17, v6 + 8);
      if (*result)
      {
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x30uLL);
        v11[2] = *((_OWORD *)v6 + 2);
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = sub_1BE61F5C0((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (unsigned int *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *sub_1BE6EC650(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory::CHFastPathCharacterHolderStyleInventory(uint64_t a1, int a2, int a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  dispatch_queue_t v10;
  void *v11;

  v7 = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_QWORD *)a1 = &off_1E77EF8E8;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v7;
  v10 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderStyleInventoryQueue", v8);
  v11 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;

  return a1;
}

{
  id v7;
  NSObject *v8;
  id v9;
  dispatch_queue_t v10;
  void *v11;

  v7 = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_QWORD *)a1 = &off_1E77EF8E8;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v7;
  v10 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderStyleInventoryQueue", v8);
  v11 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;

  return a1;
}

BOOL CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory::reloadAllCharactersIfNeeded(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  NSObject *v8;
  uint64_t v9;
  NSObject *v11;
  _QWORD v12[6];
  uint8_t buf[16];

  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    objc_msgSend_getLastCharacterStyleTimestamp(*((void **)this + 5), a2, a3, a4, a5, a6);
    v8 = *((_QWORD *)this + 7);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_1BE6ECA3C;
    v12[3] = &unk_1E77F3D60;
    v12[4] = this;
    v12[5] = v9;
    dispatch_sync(v8, v12);
    return v6 != 0;
  }
  else
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v11 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterHolderStyleInventory inventory is null", buf, 2u);
    }

    return 0;
  }
}

void sub_1BE6ECA3C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD **v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int CodepointInString;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t **v37;
  unsigned int v38;
  _DWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  CHDrawing *v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  id obj;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t **v80;
  uint64_t v81;
  uint8_t buf[8];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[128];
  _BYTE v93[128];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v81 = *(_QWORD *)(a1 + 32);
  if (*(double *)(a1 + 40) > *(double *)(v81 + 48))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v2 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderStyleInventory: need to reload inventory.", buf, 2u);
    }

    *(_QWORD *)(v81 + 48) = *(_QWORD *)(a1 + 40);
    objc_msgSend_fastPathCharacterStylesWithVariations(*(void **)(v81 + 40), v3, v4, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (_QWORD **)(v81 + 8);
    sub_1BE6E7EB4(v81 + 8, *(_QWORD **)(v81 + 16));
    *(_QWORD *)(v81 + 8) = v81 + 16;
    *(_QWORD *)(v81 + 16) = 0;
    *(_QWORD *)(v81 + 24) = 0;
    v80 = (uint64_t **)(v81 + 16);
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    obj = v8;
    v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v88, (uint64_t)v93, 16, v11);
    if (v16)
    {
      v74 = *(_QWORD *)v89;
      do
      {
        v17 = 0;
        v75 = v16;
        do
        {
          if (*(_QWORD *)v89 != v74)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * v17);
          objc_msgSend_objectForKeyedSubscript_(obj, v12, (uint64_t)v18, v13, v14, v15);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          CodepointInString = objc_msgSend_firstCodepointInString(v18, v19, v20, v21, v22, v23);
          v77 = v17;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v78 = v73;
          v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v25, (uint64_t)&v84, (uint64_t)v92, 16, v26);
          if (v32)
          {
            v79 = *(_QWORD *)v85;
            do
            {
              v33 = 0;
              do
              {
                if (*(_QWORD *)v85 != v79)
                  objc_enumerationMutation(v78);
                v34 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * v33);
                v35 = (uint64_t **)(v81 + 16);
                while (1)
                {
                  v36 = *v35;
                  v37 = v35;
                  if (!*v35)
                    break;
                  while (1)
                  {
                    v35 = (uint64_t **)v36;
                    v38 = *((_DWORD *)v36 + 8);
                    if (CodepointInString < v38)
                      break;
                    if (v38 >= CodepointInString)
                    {
                      v39 = v35;
                      goto LABEL_48;
                    }
                    v36 = v35[1];
                    if (!v36)
                    {
                      v37 = v35 + 1;
                      goto LABEL_22;
                    }
                  }
                }
LABEL_22:
                v39 = operator new(0x40uLL);
                v39[8] = CodepointInString;
                *((_QWORD *)v39 + 6) = 0;
                *((_QWORD *)v39 + 7) = 0;
                *((_QWORD *)v39 + 5) = 0;
                *(_QWORD *)v39 = 0;
                *((_QWORD *)v39 + 1) = 0;
                *((_QWORD *)v39 + 2) = v35;
                *v37 = (uint64_t *)v39;
                v40 = (_QWORD *)**v9;
                v41 = (uint64_t *)v39;
                if (v40)
                {
                  *v9 = v40;
                  v41 = *v37;
                }
                v42 = *v80;
                v43 = v41 == *v80;
                *((_BYTE *)v41 + 24) = v43;
                if (!v43)
                {
                  do
                  {
                    v44 = v41[2];
                    if (*(_BYTE *)(v44 + 24))
                      break;
                    v45 = *(uint64_t **)(v44 + 16);
                    v46 = *v45;
                    if (*v45 == v44)
                    {
                      v49 = v45[1];
                      if (!v49 || (v50 = *(unsigned __int8 *)(v49 + 24), v47 = (_BYTE *)(v49 + 24), v50))
                      {
                        if (*(uint64_t **)v44 == v41)
                        {
                          *(_BYTE *)(v44 + 24) = 1;
                          *((_BYTE *)v45 + 24) = 0;
                          v53 = *(_QWORD *)(v44 + 8);
                          *v45 = v53;
                          if (v53)
                            goto LABEL_39;
                        }
                        else
                        {
                          v51 = *(uint64_t **)(v44 + 8);
                          v52 = *v51;
                          *(_QWORD *)(v44 + 8) = *v51;
                          if (v52)
                          {
                            *(_QWORD *)(v52 + 16) = v44;
                            v45 = *(uint64_t **)(v44 + 16);
                          }
                          v51[2] = (uint64_t)v45;
                          *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v51;
                          *v51 = v44;
                          *(_QWORD *)(v44 + 16) = v51;
                          v45 = (uint64_t *)v51[2];
                          v44 = *v45;
                          *((_BYTE *)v51 + 24) = 1;
                          *((_BYTE *)v45 + 24) = 0;
                          v53 = *(_QWORD *)(v44 + 8);
                          *v45 = v53;
                          if (v53)
LABEL_39:
                            *(_QWORD *)(v53 + 16) = v45;
                        }
                        *(_QWORD *)(v44 + 16) = v45[2];
                        *(_QWORD *)(v45[2] + 8 * (*(_QWORD *)v45[2] != (_QWORD)v45)) = v44;
                        *(_QWORD *)(v44 + 8) = v45;
LABEL_46:
                        v45[2] = v44;
                        break;
                      }
                    }
                    else if (!v46 || (v48 = *(unsigned __int8 *)(v46 + 24), v47 = (_BYTE *)(v46 + 24), v48))
                    {
                      if (*(uint64_t **)v44 == v41)
                      {
                        v71 = v41[1];
                        *(_QWORD *)v44 = v71;
                        if (v71)
                        {
                          *(_QWORD *)(v71 + 16) = v44;
                          v45 = *(uint64_t **)(v44 + 16);
                        }
                        v41[2] = (uint64_t)v45;
                        *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v41;
                        v41[1] = v44;
                        *(_QWORD *)(v44 + 16) = v41;
                        v45 = (uint64_t *)v41[2];
                        *((_BYTE *)v41 + 24) = 1;
                        *((_BYTE *)v45 + 24) = 0;
                        v44 = v45[1];
                        v54 = *(uint64_t **)v44;
                        v45[1] = *(_QWORD *)v44;
                        if (v54)
LABEL_44:
                          v54[2] = (uint64_t)v45;
                      }
                      else
                      {
                        *(_BYTE *)(v44 + 24) = 1;
                        *((_BYTE *)v45 + 24) = 0;
                        v44 = v45[1];
                        v54 = *(uint64_t **)v44;
                        v45[1] = *(_QWORD *)v44;
                        if (v54)
                          goto LABEL_44;
                      }
                      *(_QWORD *)(v44 + 16) = v45[2];
                      *(_QWORD *)(v45[2] + 8 * (*(_QWORD *)v45[2] != (_QWORD)v45)) = v44;
                      *(_QWORD *)v44 = v45;
                      goto LABEL_46;
                    }
                    *(_BYTE *)(v44 + 24) = 1;
                    v41 = v45;
                    *((_BYTE *)v45 + 24) = v45 == v42;
                    *v47 = 1;
                  }
                  while (v45 != v42);
                }
                ++*(_QWORD *)(v81 + 24);
LABEL_48:
                objc_msgSend_drawing(v34, v27, v28, v29, v30, v31);
                v55 = (CHDrawing *)objc_claimAutoreleasedReturnValue();
                CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter((CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)buf, v55, *(_DWORD *)(v81 + 36), CodepointInString);
                v57 = *((_QWORD *)v39 + 6);
                v56 = *((_QWORD *)v39 + 7);
                if (v57 >= v56)
                {
                  v60 = *((_QWORD *)v39 + 5);
                  v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - v60) >> 3) + 1;
                  if (v61 > 0xAAAAAAAAAAAAAAALL)
                    sub_1BE6E7EA0();
                  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - v60) >> 3);
                  if (2 * v62 > v61)
                    v61 = 2 * v62;
                  if (v62 >= 0x555555555555555)
                    v63 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v63 = v61;
                  if (v63)
                  {
                    if (v63 > 0xAAAAAAAAAAAAAAALL)
                      sub_1BE61F100();
                    v64 = (char *)operator new(24 * v63);
                  }
                  else
                  {
                    v64 = 0;
                  }
                  v65 = &v64[8 * ((uint64_t)(v57 - v60) >> 3)];
                  v66 = &v64[24 * v63];
                  v67 = *(id *)buf;
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)v65 = v67;
                  *(_OWORD *)(v65 + 8) = v83;
                  v59 = v65 + 24;
                  if (v57 == v60)
                  {
                    *((_QWORD *)v39 + 5) = v65;
                    *((_QWORD *)v39 + 6) = v59;
                    *((_QWORD *)v39 + 7) = v66;
                  }
                  else
                  {
                    do
                    {
                      v68 = *(_QWORD *)(v57 - 24);
                      v57 -= 24;
                      *(_QWORD *)v57 = 0;
                      *((_QWORD *)v65 - 3) = v68;
                      v65 -= 24;
                      *(_OWORD *)(v65 + 8) = *(_OWORD *)(v57 + 8);
                    }
                    while (v57 != v60);
                    v57 = *((_QWORD *)v39 + 5);
                    v69 = *((_QWORD *)v39 + 6);
                    *((_QWORD *)v39 + 5) = v65;
                    *((_QWORD *)v39 + 6) = v59;
                    *((_QWORD *)v39 + 7) = v66;
                    while (v69 != v57)
                    {
                      v70 = *(void **)(v69 - 24);
                      v69 -= 24;

                    }
                  }
                  if (v57)
                    operator delete((void *)v57);
                }
                else
                {
                  v58 = *(id *)buf;
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)v57 = v58;
                  *(_OWORD *)(v57 + 8) = v83;
                  v59 = (char *)(v57 + 24);
                }
                *((_QWORD *)v39 + 6) = v59;

                ++v33;
                v9 = (_QWORD **)(v81 + 8);
              }
              while (v33 != v32);
              v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v27, (uint64_t)&v84, (uint64_t)v92, 16, v31);
              v32 = v72;
            }
            while (v72);
          }

          v17 = v77 + 1;
          v9 = (_QWORD **)(v81 + 8);
        }
        while (v77 + 1 != v75);
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v88, (uint64_t)v93, 16, v15);
      }
      while (v16);
    }

  }
}

void sub_1BE6ED0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory::doAddCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderStyleInventory *this, const CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  int v34;
  void *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 5);
  if (qword_1EF568E88 == -1)
  {
    v7 = (id)qword_1EF568E60;
    v8 = v7;
    if (v6)
    {
LABEL_3:
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        unicodeToNSString(*((_DWORD *)a2 + 3), v9, v10, v11, v12, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = (void *)objc_msgSend_copy(*(void **)a2, v15, v16, v17, v18, v19);
        v34 = 138412802;
        v35 = v14;
        v36 = 1024;
        v37 = a3;
        v38 = 2112;
        v39 = v20;
        _os_log_impl(&dword_1BE607000, v8, OS_LOG_TYPE_DEFAULT, "CHFastPathCharacterHolderStyleInventory: add character %@, version %d, drawing %@ into inventory", (uint8_t *)&v34, 0x1Cu);

      }
      v21 = (void *)*((_QWORD *)this + 5);
      v8 = objc_msgSend_copy(*(void **)a2, v22, v23, v24, v25, v26);
      unicodeToNSString(*((_DWORD *)a2 + 3), v27, v28, v29, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addSampleOfSynthesizedCharacter_transcription_key_version_(v21, v33, (uint64_t)v8, (uint64_t)v32, *((unsigned int *)a2 + 3), a3);

      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v7 = (id)qword_1EF568E60;
    v8 = v7;
    if (v6)
      goto LABEL_3;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v34) = 0;
    _os_log_impl(&dword_1BE607000, v8, OS_LOG_TYPE_DEBUG, "CHFastPathCharacterHolderStyleInventory inventory is null", (uint8_t *)&v34, 2u);
  }
LABEL_9:

}

void sub_1BE6ED2EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6ED300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6ED310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6ED334(uint64_t a1)
{

  *(_QWORD *)a1 = &unk_1E77EF858;
  sub_1BE6E7EB4(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1BE6ED380(uint64_t a1)
{

  *(_QWORD *)a1 = &unk_1E77EF858;
  sub_1BE6E7EB4(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1C3B812ECLL);
}

CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *this, CHDrawing *a2, int a3, int a4)
{
  CHDrawing *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float v22;

  v7 = a2;
  *(_QWORD *)this = objc_msgSend_copy(v7, v8, v9, v10, v11, v12);
  *((_DWORD *)this + 2) = a3;
  *((_DWORD *)this + 3) = a4;
  *((_QWORD *)this + 2) = 0;
  if (objc_msgSend_characterAtIndex_(CFSTR("."), v13, 0, v14, v15, v16) == a4
    || (v21 = objc_msgSend_characterAtIndex_(CFSTR(","), v17, 0, v18, v19, v20), v22 = 0.25, v21 == a4))
  {
    v22 = 0.325;
  }
  *((float *)this + 4) = v22;
  *((float *)this + 5) = v22;

  return this;
}

{
  CHDrawing *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float v22;

  v7 = a2;
  *(_QWORD *)this = objc_msgSend_copy(v7, v8, v9, v10, v11, v12);
  *((_DWORD *)this + 2) = a3;
  *((_DWORD *)this + 3) = a4;
  *((_QWORD *)this + 2) = 0;
  if (objc_msgSend_characterAtIndex_(CFSTR("."), v13, 0, v14, v15, v16) == a4
    || (v21 = objc_msgSend_characterAtIndex_(CFSTR(","), v17, 0, v18, v19, v20), v22 = 0.25, v21 == a4))
  {
    v22 = 0.325;
  }
  *((float *)this + 4) = v22;
  *((float *)this + 5) = v22;

  return this;
}

void sub_1BE6ED46C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6ED47C(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6ED52C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6ED540(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::getNormalizedDrawing(void **this, float a2, float a3, float a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v12 = (id)objc_msgSend_copy(*this, a5, a6, a7, a8, a9);
  objc_msgSend_bounds(v12, v13, v14, v15, v16, v17);
  objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v12, v19, v20, v21, v22, v23, (float)(a4 / (float)(a3 - a2)) - v18, (float)((float)(a3 / (float)(a3 - a2)) + -1.0), (float)(a3 - a2));
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

void sub_1BE6ED5E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6ED5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::fast_path::renormalizedDrawing(CoreHandwriting::synthesis::fast_path *this, const CHDrawing *a2, float a3, float a4, float a5, float a6, float a7)
{
  CoreHandwriting::synthesis::fast_path *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v12 = this;
  objc_msgSend_bounds(v12, v13, v14, v15, v16, v17);
  objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v12, v19, v20, v21, v22, v23, (float)(a5 / (float)((float)(a4 - a3) / (float)(a7 - a6))) - v18, (float)((float)(a4 / (float)((float)(a4 - a3) / (float)(a7 - a6))) - a7), (float)((float)(a4 - a3) / (float)(a7 - a6)));
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

void sub_1BE6ED69C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6ED6AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::CHFastPathCharacterInventoryExtensionTransliteration(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *this)
{
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *v1;
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int CodepointInString;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t **v45;
  unsigned int v46;
  _DWORD *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _BYTE *v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int v69;
  int v70;
  uint64_t **v71;
  uint64_t **v72;
  uint64_t *v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _DWORD *v87;
  int64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  int v97;
  uint64_t *v98;
  uint64_t **v99;
  uint64_t **v100;
  _QWORD **v101;
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *v102;
  uint64_t **v103;
  id obj;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[128];
  uint64_t v110;

  v1 = this;
  v110 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E77EF958;
  *((_QWORD *)this + 2) = 0;
  v103 = (uint64_t **)((char *)this + 16);
  *((_QWORD *)this + 1) = (char *)this + 16;
  v2 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  v100 = (uint64_t **)((char *)this + 40);
  CoreHandwriting::synthesis::CHDiffusionSynthesisTransliterationCharacterExtensionMap(this);
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v105, (uint64_t)v109, 16, v4);
  v101 = (_QWORD **)v2;
  v102 = v1;
  if (v5)
  {
    v6 = *(_QWORD *)v106;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v106 != v6)
          objc_enumerationMutation(obj);
        v8 = *(id *)(*((_QWORD *)&v105 + 1) + 8 * v7);
        if (objc_msgSend_countCodepoints(v8, v9, v10, v11, v12, v13) == 1)
        {
          objc_msgSend_objectForKeyedSubscript_(obj, v14, (uint64_t)v8, v15, v16, v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend_countCodepoints(v18, v19, v20, v21, v22, v23) == 1;

          if (v24)
          {
            objc_msgSend_objectForKeyedSubscript_(obj, v25, (uint64_t)v8, v26, v27, v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            CodepointInString = objc_msgSend_firstCodepointInString(v29, v30, v31, v32, v33, v34);
            v41 = objc_msgSend_firstCodepointInString(v8, v36, v37, v38, v39, v40);
            v42 = v41;
            v43 = v103;
            while (1)
            {
              v44 = *v43;
              v45 = v43;
              if (!*v43)
                break;
              while (1)
              {
                v43 = (uint64_t **)v44;
                v46 = *((_DWORD *)v44 + 7);
                if (v41 < v46)
                  break;
                if (v46 >= v41)
                {
                  v47 = v43;
                  v2 = v101;
                  v1 = v102;
                  goto LABEL_40;
                }
                v44 = v43[1];
                if (!v44)
                {
                  v45 = v43 + 1;
                  goto LABEL_14;
                }
              }
            }
LABEL_14:
            v47 = operator new(0x28uLL);
            v47[7] = v42;
            v47[8] = 0;
            *(_QWORD *)v47 = 0;
            *((_QWORD *)v47 + 1) = 0;
            *((_QWORD *)v47 + 2) = v43;
            *v45 = (uint64_t *)v47;
            v2 = v101;
            v48 = (_QWORD *)**v101;
            v49 = (uint64_t *)v47;
            if (v48)
            {
              *v101 = v48;
              v49 = *v45;
            }
            v1 = v102;
            v50 = *v103;
            v51 = v49 == *v103;
            *((_BYTE *)v49 + 24) = v51;
            if (!v51)
            {
              do
              {
                v52 = v49[2];
                if (*(_BYTE *)(v52 + 24))
                  break;
                v53 = *(uint64_t **)(v52 + 16);
                v54 = *v53;
                if (*v53 == v52)
                {
                  v57 = v53[1];
                  if (!v57 || (v58 = *(unsigned __int8 *)(v57 + 24), v55 = (_BYTE *)(v57 + 24), v58))
                  {
                    if (*(uint64_t **)v52 == v49)
                    {
                      *(_BYTE *)(v52 + 24) = 1;
                      *((_BYTE *)v53 + 24) = 0;
                      v61 = *(_QWORD *)(v52 + 8);
                      *v53 = v61;
                      if (v61)
                        goto LABEL_31;
                    }
                    else
                    {
                      v59 = *(uint64_t **)(v52 + 8);
                      v60 = *v59;
                      *(_QWORD *)(v52 + 8) = *v59;
                      if (v60)
                      {
                        *(_QWORD *)(v60 + 16) = v52;
                        v53 = *(uint64_t **)(v52 + 16);
                      }
                      v59[2] = (uint64_t)v53;
                      *(_QWORD *)(*(_QWORD *)(v52 + 16) + 8 * (**(_QWORD **)(v52 + 16) != v52)) = v59;
                      *v59 = v52;
                      *(_QWORD *)(v52 + 16) = v59;
                      v53 = (uint64_t *)v59[2];
                      v52 = *v53;
                      *((_BYTE *)v59 + 24) = 1;
                      *((_BYTE *)v53 + 24) = 0;
                      v61 = *(_QWORD *)(v52 + 8);
                      *v53 = v61;
                      if (v61)
LABEL_31:
                        *(_QWORD *)(v61 + 16) = v53;
                    }
                    *(_QWORD *)(v52 + 16) = v53[2];
                    *(_QWORD *)(v53[2] + 8 * (*(_QWORD *)v53[2] != (_QWORD)v53)) = v52;
                    *(_QWORD *)(v52 + 8) = v53;
LABEL_38:
                    v53[2] = v52;
                    break;
                  }
                }
                else if (!v54 || (v56 = *(unsigned __int8 *)(v54 + 24), v55 = (_BYTE *)(v54 + 24), v56))
                {
                  if (*(uint64_t **)v52 == v49)
                  {
                    v65 = v49[1];
                    *(_QWORD *)v52 = v65;
                    if (v65)
                    {
                      *(_QWORD *)(v65 + 16) = v52;
                      v53 = *(uint64_t **)(v52 + 16);
                    }
                    v49[2] = (uint64_t)v53;
                    *(_QWORD *)(*(_QWORD *)(v52 + 16) + 8 * (**(_QWORD **)(v52 + 16) != v52)) = v49;
                    v49[1] = v52;
                    *(_QWORD *)(v52 + 16) = v49;
                    v53 = (uint64_t *)v49[2];
                    *((_BYTE *)v49 + 24) = 1;
                    *((_BYTE *)v53 + 24) = 0;
                    v52 = v53[1];
                    v62 = *(uint64_t **)v52;
                    v53[1] = *(_QWORD *)v52;
                    if (v62)
LABEL_36:
                      v62[2] = (uint64_t)v53;
                  }
                  else
                  {
                    *(_BYTE *)(v52 + 24) = 1;
                    *((_BYTE *)v53 + 24) = 0;
                    v52 = v53[1];
                    v62 = *(uint64_t **)v52;
                    v53[1] = *(_QWORD *)v52;
                    if (v62)
                      goto LABEL_36;
                  }
                  *(_QWORD *)(v52 + 16) = v53[2];
                  *(_QWORD *)(v53[2] + 8 * (*(_QWORD *)v53[2] != (_QWORD)v53)) = v52;
                  *(_QWORD *)v52 = v53;
                  goto LABEL_38;
                }
                *(_BYTE *)(v52 + 24) = 1;
                v49 = v53;
                *((_BYTE *)v53 + 24) = v53 == v50;
                *v55 = 1;
              }
              while (v53 != v50);
            }
            ++*((_QWORD *)v102 + 3);
LABEL_40:
            v47[8] = CodepointInString;

          }
        }

        ++v7;
      }
      while (v7 != v5);
      v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v63, (uint64_t)&v105, (uint64_t)v109, 16, v64);
      v5 = v66;
    }
    while (v66);
  }

  v67 = (_QWORD *)*v2;
  if ((uint64_t **)*v2 != v103)
  {
    do
    {
      v70 = *((_DWORD *)v67 + 7);
      v69 = *((_DWORD *)v67 + 8);
      v71 = v100;
      v72 = v100;
      v73 = *v100;
      if (*v100)
      {
        while (1)
        {
          while (1)
          {
            v72 = (uint64_t **)v73;
            v74 = *((_DWORD *)v73 + 8);
            if (v74 <= v69)
              break;
            v73 = *v72;
            v71 = v72;
            if (!*v72)
              goto LABEL_60;
          }
          if (v74 >= v69)
            break;
          v73 = v72[1];
          if (!v73)
          {
            v71 = v72 + 1;
            goto LABEL_60;
          }
        }
        v75 = v72;
        v79 = (char *)v72[6];
        v78 = (unint64_t)v72[7];
        if ((unint64_t)v79 >= v78)
        {
LABEL_65:
          v81 = (char *)v75[5];
          v82 = (v79 - v81) >> 2;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62)
            sub_1BE61F930();
          v84 = v78 - (_QWORD)v81;
          if (v84 >> 1 > v83)
            v83 = v84 >> 1;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
            v85 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v85 = v83;
          if (v85)
          {
            if (v85 >> 62)
              sub_1BE61F100();
            v86 = operator new(4 * v85);
            v87 = &v86[4 * v82];
            *v87 = v70;
            v80 = (uint64_t)(v87 + 1);
            v88 = v79 - v81;
            if (v79 != v81)
            {
LABEL_74:
              v89 = v88 - 4;
              if (v89 < 0x2C)
              {
                v1 = v102;
                goto LABEL_82;
              }
              v1 = v102;
              if ((unint64_t)(v81 - v86) < 0x20)
                goto LABEL_95;
              v90 = (v89 >> 2) + 1;
              v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
              v92 = &v79[-v91];
              v87 = (_DWORD *)((char *)v87 - v91);
              v93 = &v86[4 * v82 - 16];
              v94 = v79 - 16;
              v95 = v90 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v96 = *(_OWORD *)v94;
                *(v93 - 1) = *((_OWORD *)v94 - 1);
                *v93 = v96;
                v93 -= 2;
                v94 -= 32;
                v95 -= 8;
              }
              while (v95);
              v79 = v92;
              if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_95:
                do
                {
LABEL_82:
                  v97 = *((_DWORD *)v79 - 1);
                  v79 -= 4;
                  *--v87 = v97;
                }
                while (v79 != v81);
              }
LABEL_83:
              v75[5] = v87;
              v75[6] = v80;
              v75[7] = &v86[4 * v85];
              if (v81)
                operator delete(v81);
              goto LABEL_85;
            }
          }
          else
          {
            v86 = 0;
            v87 = (_DWORD *)(4 * v82);
            *(_DWORD *)(4 * v82) = v70;
            v80 = 4 * v82 + 4;
            v88 = v79 - v81;
            if (v79 != v81)
              goto LABEL_74;
          }
          v1 = v102;
          goto LABEL_83;
        }
      }
      else
      {
LABEL_60:
        v75 = operator new(0x40uLL);
        *((_DWORD *)v75 + 8) = v69;
        v75[6] = 0;
        v75[7] = 0;
        v75[5] = 0;
        *v75 = 0;
        v75[1] = 0;
        v75[2] = v72;
        *v71 = v75;
        v1 = v102;
        v76 = **((_QWORD **)v102 + 4);
        v77 = v75;
        if (v76)
        {
          *((_QWORD *)v102 + 4) = v76;
          v77 = *v71;
        }
        sub_1BE61F5C0(*((uint64_t **)v102 + 5), v77);
        ++*((_QWORD *)v102 + 6);
        v79 = (char *)v75[6];
        v78 = v75[7];
        if ((unint64_t)v79 >= v78)
          goto LABEL_65;
      }
      *(_DWORD *)v79 = v70;
      v80 = (uint64_t)(v79 + 4);
LABEL_85:
      v75[6] = v80;
      v98 = (_QWORD *)v67[1];
      if (v98)
      {
        do
        {
          v99 = (uint64_t **)v98;
          v98 = (_QWORD *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (uint64_t **)v67[2];
          v51 = *v99 == v67;
          v67 = v99;
        }
        while (!v51);
      }
      v67 = v99;
    }
    while (v99 != v103);
  }

  return v1;
}

void sub_1BE6EDCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10, uint64_t a11, uint64_t a12, _QWORD **a13, void *a14)
{
  uint64_t v14;

  sub_1BE6EF83C(*a10);
  sub_1BE62033C(v14, *a13);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::hasExtensionRulesToCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *this, unsigned int a2)
{
  uint64_t *v2;
  unsigned int v4;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (!v2)
    return 0;
  while (1)
  {
    v4 = *((_DWORD *)v2 + 7);
    if (v4 <= a2)
      break;
LABEL_3:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_3;
  }
  return 1;
}

_DWORD *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::getCharactersWhichCanBeExtendedToCodepoint@<X0>(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  int v11;
  _DWORD *v12;

  v6 = *((_QWORD *)this + 2);
  result = (_DWORD *)((char *)this + 16);
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = (uint64_t)result;
  do
  {
    v8 = *(_DWORD *)(v5 + 28);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if ((_DWORD *)v7 != result && *(_DWORD *)(v7 + 28) <= a2)
  {
    v11 = *(_DWORD *)(v7 + 32);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v12 = operator new(4uLL);
    *a3 = v12;
    *v12 = v11;
    result = v12 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_1BE6EDE58(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  size_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  char *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  unsigned int *v75;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = a3;
    v7 = (_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
    {
      v8 = 0;
      v74 = v5;
      v75 = a2[1];
LABEL_5:
      v9 = *v4;
      v10 = v7;
      do
      {
        v11 = *(_DWORD *)(v6 + 32);
        v12 = v11 >= v9;
        if (v11 >= v9)
          v13 = (uint64_t *)v6;
        else
          v13 = (uint64_t *)(v6 + 8);
        if (v12)
          v10 = (_QWORD *)v6;
        v6 = *v13;
      }
      while (*v13);
      if (v10 != v7 && v9 >= *((_DWORD *)v10 + 8))
      {
        v15 = (char *)v10[5];
        v14 = (char *)v10[6];
        v16 = v14 - v15;
        if (v14 - v15 >= 1)
        {
          v17 = v16 >> 2;
          v18 = *v5;
          v19 = (uint64_t)&v8[-*v5];
          v20 = v19 >> 2;
          v21 = (char *)(*v5 + (v19 & 0xFFFFFFFFFFFFFFFCLL));
          v22 = v5[2];
          if (v16 >> 2 > (v22 - (uint64_t)v8) >> 2)
          {
            v23 = v20 + v17;
            if ((unint64_t)(v20 + v17) >> 62)
              sub_1BE61F930();
            v24 = v22 - v18;
            if (v24 >> 1 > v23)
              v23 = v24 >> 1;
            v12 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL;
            v25 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v12)
              v25 = v23;
            v72 = v25;
            if (v25)
            {
              if (v25 >> 62)
                sub_1BE61F100();
              v26 = *v5 + (v19 & 0xFFFFFFFFFFFFFFFCLL);
              v27 = operator new(4 * v25);
              v21 = (char *)v26;
              v20 = v19 >> 2;
              v28 = (uint64_t)&v27[4 * (v19 >> 2)];
              v29 = (char *)(v28 + 4 * v17);
              v30 = v16 - 4;
              if ((unint64_t)(v16 - 4) < 0x1C)
                goto LABEL_25;
            }
            else
            {
              v27 = 0;
              v28 = 4 * v20;
              v29 = (char *)(4 * v20 + 4 * v17);
              v30 = v16 - 4;
              if ((unint64_t)(v16 - 4) < 0x1C)
              {
LABEL_25:
                v31 = (char *)v28;
                goto LABEL_42;
              }
            }
            v31 = (char *)v28;
            if ((unint64_t)(&v27[v19 & 0xFFFFFFFFFFFFFFFCLL] - v15) >= 0x20)
            {
              v45 = (v30 >> 2) + 1;
              v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
              v31 = (char *)(v28 + v46);
              v47 = &v15[v46];
              v48 = (__int128 *)(v15 + 16);
              v49 = &v27[4 * v20 + 16];
              v50 = v45 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v51 = *v48;
                *(v49 - 1) = *(v48 - 1);
                *v49 = v51;
                v48 += 2;
                v49 += 2;
                v50 -= 8;
              }
              while (v50);
              v15 = v47;
              if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_43:
                if ((char *)v18 != v8)
                {
                  if ((unint64_t)(v19 - 4) >= 0x3C)
                  {
                    v53 = v21;
                    if (v18 + (v19 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v27[v19 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
                    {
                      v54 = ((unint64_t)(v19 - 4) >> 2) + 1;
                      v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
                      v53 = &v21[-v55];
                      v28 -= v55;
                      v56 = &v27[4 * v20 - 16];
                      v57 = (__int128 *)(v18 + 4 * v20 - 16);
                      v58 = v54 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v59 = *v57;
                        *(v56 - 1) = *(v57 - 1);
                        *v56 = v59;
                        v56 -= 2;
                        v57 -= 2;
                        v58 -= 8;
                      }
                      while (v58);
                      if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
                        goto LABEL_51;
                    }
                  }
                  else
                  {
                    v53 = v21;
                  }
                  do
                  {
                    v60 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *(_DWORD *)(v28 - 4) = v60;
                    v28 -= 4;
                  }
                  while (v53 != (char *)v18);
                }
LABEL_51:
                v61 = v8 - v21;
                if (v61)
                {
                  v62 = v27;
                  memmove(v29, v21, v61);
                  v27 = v62;
                }
                v8 = &v29[v61];
                v5 = v74;
                *v74 = v28;
                v74[1] = (uint64_t)v8;
                v74[2] = (uint64_t)&v27[4 * v72];
                if (v18)
                  operator delete((void *)v18);
                goto LABEL_65;
              }
            }
            do
            {
LABEL_42:
              v52 = *(_DWORD *)v15;
              v15 += 4;
              *(_DWORD *)v31 = v52;
              v31 += 4;
            }
            while (v31 != v29);
            goto LABEL_43;
          }
          v32 = v8 - v21;
          v33 = (v8 - v21) >> 2;
          if (v33 >= v17)
          {
            v34 = &v15[4 * v17];
            v36 = v8;
          }
          else
          {
            v34 = &v15[4 * v33];
            v35 = v14 - v34;
            if (v14 != v34)
            {
              v71 = &v15[4 * v33];
              v73 = v21;
              memmove(v8, v71, v14 - v34);
              v20 = v19 >> 2;
              v34 = v71;
              v21 = v73;
            }
            v36 = &v8[v35];
            v5 = v74;
            v74[1] = (uint64_t)v36;
            if (v32 < 1)
            {
              v8 = v36;
LABEL_65:
              v3 = v75;
              goto LABEL_66;
            }
          }
          v37 = &v21[4 * v17];
          v38 = v36 - v37;
          v39 = (v36 - v37) >> 2;
          v40 = &v36[-4 * v17];
          v41 = v36;
          if (v40 < v8)
          {
            v42 = (v19 & 0xFFFFFFFFFFFFFFFCLL) + v38;
            v43 = v18 + v42 + 4;
            if ((unint64_t)v8 > v43)
              v43 = (unint64_t)v8;
            v44 = v43 + ~v18 - v42;
            if (v44 >= 0x2C)
            {
              v41 = v36;
              if ((unint64_t)&v37[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - v18] >= 0x20)
              {
                v63 = (v44 >> 2) + 1;
                v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
                v40 += v64;
                v41 = &v36[v64];
                v65 = v36 + 16;
                v66 = (__int128 *)(v18 + 4 * v39 + 4 * v20 + 16);
                v67 = v63 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v68 = *v66;
                  *(v65 - 1) = *(v66 - 1);
                  *v65 = v68;
                  v65 += 2;
                  v66 += 2;
                  v67 -= 8;
                }
                while (v67);
                if (v63 == (v63 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_60;
              }
            }
            else
            {
              v41 = v36;
            }
            do
            {
              v69 = *(_DWORD *)v40;
              v40 += 4;
              *(_DWORD *)v41 = v69;
              v41 += 4;
            }
            while (v40 < v8);
          }
LABEL_60:
          v5[1] = (uint64_t)v41;
          if (v36 != v37)
          {
            v70 = v21;
            memmove(&v36[-4 * v39], v21, v38);
            v21 = v70;
          }
          if (v34 != v15)
            memmove(v21, v15, v34 - v15);
          v8 = v41;
          goto LABEL_65;
        }
      }
LABEL_66:
      while (++v4 != v3)
      {
        v6 = *v7;
        if (*v7)
          goto LABEL_5;
      }
    }
  }
}

void sub_1BE6EE2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
  {
    *(_QWORD *)(a11 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::extend@<Q0>(const CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *a1@<X3>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = *(id *)a1;
  result = *(__n128 *)((char *)a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::CHFastPathCharacterInventoryExtensionSuperscript(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *this)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t ***v4;
  uint64_t **v5;
  char *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v16;
  unsigned int v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  unsigned int v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **v26;
  BOOL v27;
  _QWORD **v28;

  v2 = 0;
  *(_QWORD *)this = &off_1E77EF918;
  *((_QWORD *)this + 2) = 0;
  v3 = (uint64_t **)((char *)this + 16);
  *((_QWORD *)this + 1) = (char *)this + 16;
  v4 = (uint64_t ***)((char *)this + 8);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  v5 = (uint64_t **)((char *)this + 40);
  *((_QWORD *)this + 4) = (char *)this + 40;
  v28 = (_QWORD **)((char *)this + 32);
  *((_QWORD *)this + 6) = 0;
  do
  {
    v6 = &aP_8[8 * v2];
    v7 = *v3;
    v8 = v3;
    v9 = v3;
    if (*v3)
    {
      v10 = *(_DWORD *)v6;
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v7;
          v11 = *((_DWORD *)v7 + 7);
          if (v10 >= v11)
            break;
          v7 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_11;
        }
        if (v11 >= v10)
          break;
        v7 = v9[1];
        if (!v7)
        {
          v8 = v9 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      v12 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v12 + 28) = *(_QWORD *)v6;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v9;
      *v8 = v12;
      v13 = **v4;
      if (v13)
      {
        *v4 = (uint64_t **)v13;
        v12 = *v8;
      }
      sub_1BE61F5C0(*((uint64_t **)this + 2), v12);
      ++*((_QWORD *)this + 3);
    }
    ++v2;
  }
  while (v2 != 12);
  v14 = (uint64_t *)*v4;
  if (*v4 != v3)
  {
    do
    {
      v16 = *((_DWORD *)v14 + 7);
      v17 = *((_DWORD *)v14 + 8);
      v18 = v5;
      v19 = v5;
      if (*v5)
      {
        v20 = *v5;
        while (1)
        {
          while (1)
          {
            v19 = (uint64_t **)v20;
            v21 = *((_DWORD *)v20 + 7);
            if (v21 <= v17)
              break;
            v20 = *v19;
            v18 = v19;
            if (!*v19)
              goto LABEL_23;
          }
          if (v21 >= v17)
            break;
          v20 = v19[1];
          if (!v20)
          {
            v18 = v19 + 1;
            goto LABEL_23;
          }
        }
        *((_DWORD *)v19 + 8) = v16;
        v25 = (uint64_t *)v14[1];
        if (v25)
        {
          do
          {
LABEL_28:
            v26 = (uint64_t **)v25;
            v25 = (uint64_t *)*v25;
          }
          while (v25);
          goto LABEL_15;
        }
      }
      else
      {
LABEL_23:
        v22 = operator new(0x28uLL);
        v22[7] = v17;
        v22[8] = 0;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = v19;
        *v18 = (uint64_t *)v22;
        v23 = (_QWORD *)**v28;
        v24 = (uint64_t *)v22;
        if (v23)
        {
          *v28 = v23;
          v24 = *v18;
        }
        sub_1BE61F5C0(*((uint64_t **)this + 5), v24);
        ++*((_QWORD *)this + 6);
        v22[8] = v16;
        v25 = (uint64_t *)v14[1];
        if (v25)
          goto LABEL_28;
      }
      do
      {
        v26 = (uint64_t **)v14[2];
        v27 = *v26 == v14;
        v14 = (uint64_t *)v26;
      }
      while (!v27);
LABEL_15:
      v14 = (uint64_t *)v26;
    }
    while (v26 != v3);
  }
  return this;
}

void sub_1BE6EE530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  _QWORD **v11;

  sub_1BE62033C(a10, v10);
  sub_1BE62033C(a9, *v11);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::hasExtensionRulesToCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *this, unsigned int a2)
{
  uint64_t *v2;
  unsigned int v4;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (!v2)
    return 0;
  while (1)
  {
    v4 = *((_DWORD *)v2 + 7);
    if (v4 <= a2)
      break;
LABEL_3:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_3;
  }
  return 1;
}

_DWORD *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::getCharactersWhichCanBeExtendedToCodepoint@<X0>(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  int v11;
  _DWORD *v12;

  v6 = *((_QWORD *)this + 2);
  result = (_DWORD *)((char *)this + 16);
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = (uint64_t)result;
  do
  {
    v8 = *(_DWORD *)(v5 + 28);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if ((_DWORD *)v7 != result && *(_DWORD *)(v7 + 28) <= a2)
  {
    v11 = *(_DWORD *)(v7 + 32);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v12 = operator new(4uLL);
    *a3 = v12;
    *v12 = v11;
    result = v12 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_1BE6EE628(uint64_t a1@<X0>, unsigned int **a2@<X1>, char **a3@<X8>)
{
  unsigned int *v3;
  unsigned int *v4;
  char **v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  char **v33;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = a3;
    v7 = (_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v33 = v5;
LABEL_4:
      v11 = *v3;
      v12 = v7;
      do
      {
        v13 = *(_DWORD *)(v6 + 28);
        v14 = v13 >= v11;
        if (v13 >= v11)
          v15 = (uint64_t *)v6;
        else
          v15 = (uint64_t *)(v6 + 8);
        if (v14)
          v12 = (_QWORD *)v6;
        v6 = *v15;
      }
      while (*v15);
      if (v12 != v7 && v11 >= *((_DWORD *)v12 + 7))
      {
        if (v10 < v9)
        {
          *(_DWORD *)v10 = *((_DWORD *)v12 + 8);
          v16 = (uint64_t)(v10 + 4);
LABEL_31:
          v5[1] = (char *)v16;
          v10 = (char *)v16;
          goto LABEL_32;
        }
        v17 = (v10 - v8) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          sub_1BE61F930();
        if ((v9 - v8) >> 1 > v18)
          v18 = (v9 - v8) >> 1;
        if ((unint64_t)(v9 - v8) >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
        {
          if (v19 >> 62)
            sub_1BE61F100();
          v20 = operator new(4 * v19);
          v21 = &v20[4 * v17];
          *(_DWORD *)v21 = *((_DWORD *)v12 + 8);
          v16 = (uint64_t)(v21 + 4);
          v22 = v10 - v8;
          if (v10 != v8)
          {
LABEL_25:
            v23 = v22 - 4;
            if (v23 < 0xBC
              || (v26 = (v10 - 4 - v8) & 0xFFFFFFFFFFFFFFFCLL, &v20[v10 - v8 - 4 - v26] > &v20[v10 - v8 - 4])
              || &v10[-v26 - 4] > v10 - 4
              || (unint64_t)(v8 - v20) < 0x20)
            {
              v24 = v10;
              v5 = v33;
            }
            else
            {
              v27 = (v23 >> 2) + 1;
              v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
              v24 = &v10[-v28];
              v21 -= v28;
              v29 = &v20[4 * v17 - 16];
              v30 = v10 - 16;
              v31 = v27 & 0x7FFFFFFFFFFFFFF8;
              v5 = v33;
              do
              {
                v32 = *(_OWORD *)v30;
                *(v29 - 1) = *((_OWORD *)v30 - 1);
                *v29 = v32;
                v29 -= 2;
                v30 -= 32;
                v31 -= 8;
              }
              while (v31);
              if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_28:
                v9 = &v20[4 * v19];
                *v5 = v21;
                v5[1] = (char *)v16;
                v5[2] = v9;
                if (!v8)
                {
LABEL_30:
                  v8 = v21;
                  goto LABEL_31;
                }
LABEL_29:
                operator delete(v8);
                goto LABEL_30;
              }
            }
            do
            {
              v25 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v21 - 1) = v25;
              v21 -= 4;
            }
            while (v24 != v8);
            goto LABEL_28;
          }
        }
        else
        {
          v20 = 0;
          v21 = (char *)(4 * v17);
          *(_DWORD *)(4 * v17) = *((_DWORD *)v12 + 8);
          v16 = 4 * v17 + 4;
          v22 = v10 - v8;
          if (v10 != v8)
            goto LABEL_25;
        }
        v5 = v33;
        v9 = &v20[4 * v19];
        *v33 = v21;
        v33[1] = (char *)v16;
        v33[2] = v9;
        if (!v8)
          goto LABEL_30;
        goto LABEL_29;
      }
LABEL_32:
      while (++v3 != v4)
      {
        v6 = *v7;
        if (*v7)
          goto LABEL_4;
      }
    }
  }
}

void sub_1BE6EE884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::extend(void **a1@<X3>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, float32x2_t *a6@<X8>)
{
  __int32 v8;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  v8 = a3;
  v10 = (id)objc_msgSend_copy(*a1, a2, a3, (uint64_t)a1, a4, a5);
  objc_msgSend_bounds(v10, v11, v12, v13, v14, v15);
  objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v10, v17, v18, v19, v20, v21, 0.0 - v16, -1.0, 0.5);
  v28 = (id)objc_claimAutoreleasedReturnValue();

  v22 = (float32x2_t)a1[2];
  LODWORD(v10) = *((_DWORD *)a1 + 2);
  *a6 = (float32x2_t)objc_msgSend_copy(v28, v23, v24, v25, v26, v27);
  a6[1].i32[0] = (int)v10;
  a6[1].i32[1] = v8;
  a6[2] = vmul_f32(v22, (float32x2_t)0x3F0000003F000000);

}

void sub_1BE6EE94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE6EE960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6EE974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory *CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::CHFastPathCharacterInventory(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  __int128 v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  __int128 v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v2 = (_QWORD *)((char *)this + 24);
  *(_OWORD *)this = 0u;
  v3 = operator new(0x50uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E77EFA88;
  v4 = v3 + 3;
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript::CHFastPathCharacterInventoryExtensionSuperscript((CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionSuperscript *)(v3 + 3));
  v6 = (_QWORD *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5);
  if ((unint64_t)v6 >= v5)
  {
    v7 = (_QWORD *)*v2;
    v8 = ((uint64_t)v6 - *v2) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_1BE61F930();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11 >> 60)
      sub_1BE61F100();
    v12 = (char *)operator new(16 * v11);
    v13 = &v12[16 * v8];
    *(_QWORD *)v13 = v4;
    *((_QWORD *)v13 + 1) = v3;
    v14 = &v12[16 * v11];
    v15 = v13 + 16;
    if (v6 == v7)
    {
      *((_QWORD *)this + 3) = v13;
      *((_QWORD *)this + 4) = v15;
      *((_QWORD *)this + 5) = v14;
    }
    else
    {
      do
      {
        v16 = *((_OWORD *)v6 - 1);
        v6 -= 2;
        *((_OWORD *)v13 - 1) = v16;
        v13 -= 16;
        *v6 = 0;
        v6[1] = 0;
      }
      while (v6 != v7);
      v6 = (_QWORD *)*((_QWORD *)this + 3);
      v17 = (_QWORD *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 3) = v13;
      *((_QWORD *)this + 4) = v15;
      *((_QWORD *)this + 5) = v14;
      while (v17 != v6)
      {
        v18 = (std::__shared_weak_count *)*(v17 - 1);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v17 -= 2;
      }
    }
    if (v6)
      operator delete(v6);
    *((_QWORD *)this + 4) = v15;
  }
  else
  {
    *v6 = v4;
    v6[1] = v3;
    *((_QWORD *)this + 4) = v6 + 2;
  }
  v21 = operator new(0x50uLL);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = &off_1E77EFAC0;
  v22 = v21 + 3;
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration::CHFastPathCharacterInventoryExtensionTransliteration((CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventoryExtensionTransliteration *)(v21 + 3));
  v24 = (_QWORD *)*((_QWORD *)this + 4);
  v23 = *((_QWORD *)this + 5);
  if ((unint64_t)v24 >= v23)
  {
    v25 = (_QWORD *)*v2;
    v26 = ((uint64_t)v24 - *v2) >> 4;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60)
      sub_1BE61F930();
    v28 = v23 - (_QWORD)v25;
    if (v28 >> 3 > v27)
      v27 = v28 >> 3;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
      v29 = 0xFFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29 >> 60)
      sub_1BE61F100();
    v30 = (char *)operator new(16 * v29);
    v31 = &v30[16 * v26];
    *(_QWORD *)v31 = v22;
    *((_QWORD *)v31 + 1) = v21;
    v32 = &v30[16 * v29];
    v33 = v31 + 16;
    if (v24 == v25)
    {
      *((_QWORD *)this + 3) = v31;
      *((_QWORD *)this + 4) = v33;
      *((_QWORD *)this + 5) = v32;
    }
    else
    {
      do
      {
        v34 = *((_OWORD *)v24 - 1);
        v24 -= 2;
        *((_OWORD *)v31 - 1) = v34;
        v31 -= 16;
        *v24 = 0;
        v24[1] = 0;
      }
      while (v24 != v25);
      v24 = (_QWORD *)*((_QWORD *)this + 3);
      v35 = (_QWORD *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 3) = v31;
      *((_QWORD *)this + 4) = v33;
      *((_QWORD *)this + 5) = v32;
      while (v35 != v24)
      {
        v36 = (std::__shared_weak_count *)*(v35 - 1);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v35 -= 2;
      }
    }
    if (v24)
      operator delete(v24);
    *((_QWORD *)this + 4) = v33;
  }
  else
  {
    *v24 = v22;
    v24[1] = v21;
    *((_QWORD *)this + 4) = v24 + 2;
  }
  return this;
}

void sub_1BE6EECD0(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  void *v5;

  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  sub_1BE6EEDCC(v2);
  sub_1BE6EEDCC(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6EED1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;
  void **v10;

  sub_1BE6EED64((uint64_t)&a9);
  sub_1BE6EEDCC(v10);
  sub_1BE6EEDCC(v9);
  _Unwind_Resume(a1);
}

void sub_1BE6EED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;
  void **v10;

  sub_1BE6EED64((uint64_t)&a9);
  sub_1BE6EEDCC(v10);
  sub_1BE6EEDCC(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6EED64(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_1BE6EEDCC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::collectFastPathCharactersFromHolders(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  id v25;
  uint64_t v26;
  char *v27;
  void *v28;
  char *v29;
  char *v30;
  void *v31;
  _QWORD *v32;
  unsigned int *v35;
  unsigned int *v36;
  id v37;
  __int128 v38;
  char *v39;
  char *v40;
  void *__p;
  unsigned int *v42;

  v4 = a2;
  CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::lookupInAllHolders(a1, a2, a3, (uint64_t)a4);
  if (a4[1] != *a4)
    return;
  v7 = *(_QWORD **)(a1 + 24);
  v6 = *(_QWORD **)(a1 + 32);
  if (v7 == v6)
    return;
  v32 = *(_QWORD **)(a1 + 32);
  while (2)
  {
    if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, v4) & 1) == 0)
      goto LABEL_6;
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v7 + 24))(&__p, *v7, v4);
    v8 = (unsigned int *)__p;
    v35 = v42;
    if (__p == v42)
    {
      if (__p)
        goto LABEL_42;
      goto LABEL_5;
    }
    while (2)
    {
      v36 = v8;
      v9 = *v8;
      CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::lookupInAllHolders(a1, v9, a3, (uint64_t)&v39);
      v11 = v39;
      v10 = v40;
      if (v39 == v40)
      {
        if (v39)
          goto LABEL_38;
        goto LABEL_12;
      }
      do
      {
        (*(void (**)(id *__return_ptr, _QWORD, uint64_t, uint64_t, char *))(*(_QWORD *)*v7 + 40))(&v37, *v7, v9, v4, v11);
        v15 = (unint64_t)a4[1];
        v14 = (unint64_t)a4[2];
        if (v15 < v14)
        {
          v12 = v37;
          v37 = 0;
          *(_QWORD *)v15 = v12;
          *(_OWORD *)(v15 + 8) = v38;
          v13 = (char *)(v15 + 24);
          goto LABEL_17;
        }
        v16 = v4;
        v17 = *a4;
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)*a4) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_1BE6E7EA0();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v17) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 > 0xAAAAAAAAAAAAAAALL)
            sub_1BE61F100();
          v22 = (char *)operator new(24 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[24 * v18];
        v24 = &v22[24 * v21];
        v25 = v37;
        v37 = 0;
        *(_QWORD *)v23 = v25;
        *(_OWORD *)(v23 + 8) = v38;
        v13 = v23 + 24;
        if ((char *)v15 == v17)
        {
          *a4 = v23;
          a4[1] = v13;
          a4[2] = v24;
          v4 = v16;
          if (!v15)
            goto LABEL_17;
LABEL_36:
          operator delete((void *)v15);
          goto LABEL_17;
        }
        do
        {
          v26 = *(_QWORD *)(v15 - 24);
          v15 -= 24;
          *(_QWORD *)v15 = 0;
          *((_QWORD *)v23 - 3) = v26;
          v23 -= 24;
          *(_OWORD *)(v23 + 8) = *(_OWORD *)(v15 + 8);
        }
        while ((char *)v15 != v17);
        v15 = (unint64_t)*a4;
        v27 = a4[1];
        *a4 = v23;
        a4[1] = v13;
        a4[2] = v24;
        v4 = v16;
        while (v27 != (char *)v15)
        {
          v28 = (void *)*((_QWORD *)v27 - 3);
          v27 -= 24;

        }
        if (v15)
          goto LABEL_36;
LABEL_17:
        a4[1] = v13;

        v11 += 24;
      }
      while (v11 != v10);
      v11 = v39;
      if (v39)
      {
LABEL_38:
        v29 = v40;
        v30 = v11;
        if (v40 != v11)
        {
          do
          {
            v31 = (void *)*((_QWORD *)v29 - 3);
            v29 -= 24;

          }
          while (v29 != v11);
          v30 = v39;
        }
        v40 = v11;
        operator delete(v30);
      }
LABEL_12:
      v8 = v36 + 1;
      if (v36 + 1 != v35)
        continue;
      break;
    }
    v8 = (unsigned int *)__p;
    if (__p)
    {
LABEL_42:
      v42 = v8;
      operator delete(v8);
    }
LABEL_5:
    v6 = v32;
LABEL_6:
    v7 += 2;
    if (v7 != v6)
      continue;
    break;
  }
}

void sub_1BE6EF154(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE6E6BC8(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6EF16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void **v23;

  if (__p)
    operator delete(__p);
  sub_1BE6E6BC8(v23);
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::lookupInAllHolders(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  void *v35;
  void *v36;
  void *__p;
  char *v38;
  uint64_t v39;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v5)
  {
    if (a3)
    {
      do
      {
        v9 = (_QWORD *)*v4;
        if (*(_DWORD *)(*v4 + 32) == a3)
        {
          (*(void (**)(_QWORD))(*v9 + 16))(*v4);
          v12 = v9[2];
          v11 = v9 + 2;
          v10 = v12;
          if (!v12)
            goto LABEL_18;
          v13 = v11;
          do
          {
            v14 = *(_DWORD *)(v10 + 32);
            v15 = v14 >= a2;
            if (v14 >= a2)
              v16 = (uint64_t *)v10;
            else
              v16 = (uint64_t *)(v10 + 8);
            if (v15)
              v13 = (_QWORD *)v10;
            v10 = *v16;
          }
          while (*v16);
          if (v13 != v11 && *((_DWORD *)v13 + 8) <= a2)
          {
            sub_1BE6EC438(&__p, v13 + 5);
            v18 = __p;
            v17 = (uint64_t)v38;
          }
          else
          {
LABEL_18:
            v17 = 0;
            v18 = 0;
            __p = 0;
            v38 = 0;
            v39 = 0;
          }
          sub_1BE6EF924((char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)v18, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - (uint64_t)v18) >> 3));
          v19 = (char *)__p;
          if (__p)
          {
            v20 = v38;
            v21 = __p;
            if (v38 != __p)
            {
              do
              {
                v22 = (void *)*((_QWORD *)v20 - 3);
                v20 -= 24;

              }
              while (v20 != v19);
              v21 = __p;
            }
            v38 = v19;
            operator delete(v21);
          }
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
    else
    {
      do
      {
        v23 = *v4;
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
        v26 = *(_QWORD *)(v23 + 16);
        v25 = v23 + 16;
        v24 = v26;
        if (!v26)
          goto LABEL_38;
        v27 = v25;
        do
        {
          v28 = *(_DWORD *)(v24 + 32);
          v29 = v28 >= a2;
          if (v28 >= a2)
            v30 = (uint64_t *)v24;
          else
            v30 = (uint64_t *)(v24 + 8);
          if (v29)
            v27 = v24;
          v24 = *v30;
        }
        while (*v30);
        if (v27 != v25 && *(_DWORD *)(v27 + 32) <= a2)
        {
          sub_1BE6EC438(&__p, (uint64_t *)(v27 + 40));
          v32 = __p;
          v31 = (uint64_t)v38;
        }
        else
        {
LABEL_38:
          v31 = 0;
          v32 = 0;
          __p = 0;
          v38 = 0;
          v39 = 0;
        }
        sub_1BE6EF924((char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)v32, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v32) >> 3));
        v33 = (char *)__p;
        if (__p)
        {
          v34 = v38;
          v35 = __p;
          if (v38 != __p)
          {
            do
            {
              v36 = (void *)*((_QWORD *)v34 - 3);
              v34 -= 24;

            }
            while (v34 != v33);
            v35 = __p;
          }
          v38 = v33;
          operator delete(v35);
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
  }
}

void sub_1BE6EF3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  sub_1BE6E6BC8((void **)va);
  sub_1BE6E6BC8(v2);
  _Unwind_Resume(a1);
}

void sub_1BE6EF3F4(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE6E6BC8(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6EF408(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE6E6BC8(v1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterInventory::getSupportedCharacters(CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder ****this@<X0>, uint64_t a2@<X8>)
{
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder ***v4;
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder ***v5;
  void **v6;
  void **v7;
  void **v8;
  BOOL v9;
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder ***v10;
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder ***v11;
  CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **v12;
  uint64_t *v13;
  size_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  unsigned int *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *__p;
  char *v26;
  char *v27;
  _DWORD *v28;
  _DWORD *v29;
  void *v30[2];
  void *v31[2];
  int v32;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4 = *this;
  v5 = this[1];
  if (*this != v5)
  {
    do
    {
      CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder::getSupportedCharactersInfo(*v4, (uint64_t *)v30);
      v6 = (void **)v30[0];
      if (v30[0] != &v30[1])
      {
        do
        {
          if (v6[5])
            sub_1BE6719D8(a2, (unsigned int *)v6 + 8, (_DWORD *)v6 + 8);
          v7 = (void **)v6[1];
          if (v7)
          {
            do
            {
              v8 = v7;
              v7 = (void **)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              v8 = (void **)v6[2];
              v9 = *v8 == v6;
              v6 = v8;
            }
            while (!v9);
          }
          v6 = v8;
        }
        while (v8 != &v30[1]);
      }
      sub_1BE62033C((uint64_t)v30, (_QWORD *)v30[1]);
      v4 += 2;
    }
    while (v4 != v5);
  }
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)v31 = 0u;
  v32 = 1065353216;
  v10 = this[3];
  v11 = this[4];
  if (v10 != v11)
  {
    do
    {
      v12 = *v10;
      v13 = *(uint64_t **)(a2 + 16);
      v26 = 0;
      v27 = 0;
      __p = 0;
      if (v13)
      {
        v14 = 0;
        v15 = -1;
        v16 = v13;
        do
        {
          v16 = (_QWORD *)*v16;
          ++v15;
          v14 += 4;
        }
        while (v16);
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          sub_1BE61F930();
        v17 = (char *)operator new(v14);
        v18 = 0;
        __p = v17;
        v27 = &v17[v14];
        do
        {
          *(_DWORD *)&v17[v18] = *((_DWORD *)v13 + 4);
          v13 = (uint64_t *)*v13;
          v18 += 4;
        }
        while (v13);
        v26 = &v17[v18];
      }
      (*((void (**)(_DWORD **__return_ptr, CoreHandwriting::synthesis::fast_path::CHAbstractFastPathCharacterHolder **, void **))*v12
       + 4))(&v28, v12, &__p);
      if (__p)
      {
        v26 = (char *)__p;
        operator delete(__p);
      }
      v19 = v28;
      v20 = v29;
      if (v28 != v29)
      {
        do
        {
          LODWORD(__p) = 0;
          LODWORD(__p) = *v19;
          sub_1BE6719D8((uint64_t)v30, (unsigned int *)&__p, &__p);
          ++v19;
        }
        while (v19 != v20);
        v19 = v28;
      }
      if (v19)
      {
        v29 = v19;
        operator delete(v19);
      }
      v10 += 2;
    }
    while (v10 != v11);
    v21 = (unsigned int *)v31[0];
    if (v31[0])
    {
      do
      {
        sub_1BE6719D8(a2, v21 + 4, v21 + 4);
        v21 = *(unsigned int **)v21;
      }
      while (v21);
      v22 = v31[0];
      if (v31[0])
      {
        do
        {
          v23 = (_QWORD *)*v22;
          operator delete(v22);
          v22 = v23;
        }
        while (v23);
      }
    }
  }
  v24 = v30[0];
  v30[0] = 0;
  if (v24)
    operator delete(v24);
}

void sub_1BE6EF66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_1BE65DB88((uint64_t)va);
  sub_1BE65DB88(v7);
  _Unwind_Resume(a1);
}

void sub_1BE6EF68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  uint64_t v16;

  if (__p)
  {
    operator delete(__p);
    sub_1BE65DB88((uint64_t)&a15);
    sub_1BE65DB88(v16);
    _Unwind_Resume(a1);
  }
  sub_1BE65DB88((uint64_t)&a15);
  sub_1BE65DB88(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6EF71C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E77EF958;
  sub_1BE6EF83C(*(_QWORD **)(a1 + 40));
  sub_1BE62033C(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1BE6EF75C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E77EF958;
  sub_1BE6EF83C(*(_QWORD **)(a1 + 40));
  sub_1BE62033C(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE6EF7AC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E77EF918;
  sub_1BE62033C(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_1BE62033C(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1BE6EF7EC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E77EF918;
  sub_1BE62033C(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_1BE62033C(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1C3B812ECLL);
}

void sub_1BE6EF83C(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_1BE6EF83C(*a1);
    sub_1BE6EF83C(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void sub_1BE6EF884(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EFA88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BE6EF894(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EFA88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE6EF8C4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1BE6EF8D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EFAC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BE6EF8E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E77EFAC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE6EF914(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1BE6EF924(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  char *v41;
  void *v42;
  char *v43;
  uint64_t v44;

  if (a5 < 1)
    return;
  v6 = a3;
  v8 = *a1;
  v9 = (unint64_t)a1[1];
  v10 = (a2 - (uint64_t)*a1) / 24;
  v11 = (uint64_t)&(*a1)[24 * v10];
  v12 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-v9] >> 3)) < a5)
  {
    v13 = a5 - 0x5555555555555555 * ((uint64_t)(v9 - (_QWORD)v8) >> 3);
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      sub_1BE6E7EA0();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        sub_1BE61F100();
      v16 = (char *)operator new(24 * v15);
    }
    else
    {
      v16 = 0;
    }
    v33 = &v16[24 * v10];
    v34 = &v33[24 * a5];
    v35 = v33;
    do
    {
      *(_QWORD *)v35 = *(id *)v6;
      *(_OWORD *)(v35 + 8) = *(_OWORD *)(v6 + 8);
      v35 += 24;
      v6 += 24;
    }
    while (v35 != v34);
    v36 = *a1;
    if (*a1 != (char *)v11)
    {
      v37 = v11;
      do
      {
        v38 = *(_QWORD *)(v37 - 24);
        v37 -= 24;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v33 - 3) = v38;
        v33 -= 24;
        *(_OWORD *)(v33 + 8) = *(_OWORD *)(v37 + 8);
      }
      while ((char *)v37 != v36);
    }
    v39 = a1[1];
    if (v39 != (char *)v11)
    {
      do
      {
        v40 = *(id *)v11;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)v34 = v40;
        *(_OWORD *)(v34 + 8) = *(_OWORD *)(v11 + 8);
        v34 += 24;
        v11 += 24;
      }
      while ((char *)v11 != v39);
      v11 = (uint64_t)a1[1];
    }
    v41 = *a1;
    *a1 = v33;
    a1[1] = v34;
    a1[2] = &v16[24 * v15];
    while ((char *)v11 != v41)
    {
      v42 = *(void **)(v11 - 24);
      v11 -= 24;

    }
    if (v41)
      operator delete(v41);
    return;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 3)) >= a5)
  {
    v18 = a3 + 24 * a5;
    v19 = a1[1];
    goto LABEL_19;
  }
  v44 = (a2 - (uint64_t)*a1) / 24;
  v43 = *a1;
  v18 = a3 + 8 * ((uint64_t)(v9 - v11) >> 3);
  v19 = a1[1];
  if (v18 != a4)
  {
    v20 = a3 + 8 * ((uint64_t)(v9 - v11) >> 3);
    v21 = a1[1];
    do
    {
      *(_QWORD *)v21 = *(id *)v20;
      *(_OWORD *)(v21 + 8) = *(_OWORD *)(v20 + 8);
      v19 += 24;
      v20 += 24;
      v21 += 24;
    }
    while (v20 != a4);
  }
  a1[1] = v19;
  if ((uint64_t)(v9 - v11) >= 1)
  {
    v8 = v43;
    v10 = v44;
LABEL_19:
    v22 = v11 + 24 * a5;
    v23 = &v19[-24 * a5];
    v24 = v19;
    if ((unint64_t)v23 < v9)
    {
      v24 = v19;
      do
      {
        v25 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        *(_QWORD *)v24 = v25;
        *(_OWORD *)(v24 + 8) = *(_OWORD *)(v23 + 8);
        v24 += 24;
        v23 += 24;
      }
      while ((unint64_t)v23 < v9);
    }
    a1[1] = v24;
    if (v19 != (char *)v22)
    {
      v26 = 0;
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-v22] >> 3);
      v28 = &v8[24 * v10 + 24 * v27];
      v29 = -24 * v27;
      do
      {
        v30 = &v19[v26];
        v31 = *(_QWORD *)&v28[v26 - 24];
        *(_QWORD *)&v28[v26 - 24] = 0;
        v32 = *(void **)&v19[v26 - 24];
        *(_QWORD *)&v19[v26 - 24] = v31;

        *((_QWORD *)v30 - 2) = *(_QWORD *)&v28[v26 - 16];
        *((_DWORD *)v30 - 2) = *(_DWORD *)&v28[v26 - 8];
        *((_DWORD *)v30 - 1) = *(_DWORD *)&v28[v26 - 4];
        v26 -= 24;
      }
      while (v29 != v26);
    }
    for (; v6 != v18; v11 += 24)
    {
      objc_storeStrong((id *)v11, *(id *)v6);
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v6 + 16);
      v6 += 24;
    }
  }
}

void sub_1BE6EFD00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6EFD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CHSessionStateTracker;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE6EFD84(void *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void **obj;

  if (a1)
  {
    obj = a1;
    objc_sync_enter(obj);
    objc_msgSend_setIdle(obj, v1, v2, v3, v4, v5);
    objc_msgSend_invalidate(obj[1], v6, v7, v8, v9, v10);
    v11 = obj[1];
    obj[1] = 0;

    objc_sync_exit(obj);
  }
}

void sub_1BE6EFDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1BE6EFE18(void *a1, uint64_t a2)
{
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[5];
  _QWORD v63[4];
  id v64;
  id location;
  _BYTE buf[24];
  uint64_t (*v67)(uint64_t, uint64_t);
  void (*v68)(uint64_t);
  id v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = a1;
    objc_sync_enter(v3);
    if (v3[2] == a2)
    {
LABEL_13:
      objc_sync_exit(v3);

      return;
    }
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v4 = (id)qword_1EF568E80;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v5 = v3[2];
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_DEBUG, "CHSessionStateTracker updating state %li -> %li", buf, 0x16u);
    }

    v3[2] = a2;
    v6 = v3;
    objc_sync_enter(v6);
    v7 = MEMORY[0x1E0C809B0];
    if (v6[1])
    {
LABEL_12:
      objc_sync_exit(v6);

      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v67 = sub_1BE6F0430;
      v68 = sub_1BE6F0440;
      v69 = 0;
      v47 = v6[1];
      v62[0] = v7;
      v62[1] = 3221225472;
      v62[2] = sub_1BE6F0448;
      v62[3] = &unk_1E77F2310;
      v62[4] = buf;
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v47, v48, (uint64_t)v62, v49, v50, v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v53, a2, v54, v55, v56);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleSessionStateUpdate_(v52, v58, (uint64_t)v57, v59, v60, v61);

      _Block_object_dispose(buf, 8);
      goto LABEL_13;
    }
    if (qword_1EF568E88 == -1)
    {
      v8 = (id)qword_1EF568E80;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:

        v9 = objc_alloc(MEMORY[0x1E0CB3B38]);
        v13 = objc_msgSend_initWithMachServiceName_options_(v9, v10, (uint64_t)CFSTR("com.apple.handwritingd.remoterecognition"), 0, v11, v12);
        v14 = v6[1];
        v6[1] = (void *)v13;

        objc_msgSend_interfaceWithProtocol_(MEMORY[0x1E0CB3B50], v15, (uint64_t)&unk_1EF58B478, v16, v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = (void *)MEMORY[0x1E0C99E60];
        v21 = objc_opt_class();
        objc_msgSend_setWithObjects_(v20, v22, v21, v23, v24, v25, 0);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(v19, v27, (uint64_t)v26, (uint64_t)sel_handleSessionStateUpdate_, 0, 0);
        objc_msgSend_setRemoteObjectInterface_(v6[1], v28, (uint64_t)v19, v29, v30, v31);
        objc_initWeak(&location, v6);
        v32 = v6[1];
        *(_QWORD *)buf = v7;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_1BE6F02D4;
        v67 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E77F3140;
        objc_copyWeak((id *)&v68, &location);
        objc_msgSend_setInterruptionHandler_(v32, v33, (uint64_t)buf, v34, v35, v36);
        v37 = v6[1];
        v63[0] = v7;
        v63[1] = 3221225472;
        v63[2] = sub_1BE6F0388;
        v63[3] = &unk_1E77F3140;
        objc_copyWeak(&v64, &location);
        objc_msgSend_setInvalidationHandler_(v37, v38, (uint64_t)v63, v39, v40, v41);
        objc_msgSend_resume(v6[1], v42, v43, v44, v45, v46);
        objc_destroyWeak(&v64);
        objc_destroyWeak((id *)&v68);
        objc_destroyWeak(&location);

        goto LABEL_12;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v8 = (id)qword_1EF568E80;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        goto LABEL_11;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v8, OS_LOG_TYPE_DEBUG, "CHSessionStateTracker setting up connection", buf, 2u);
    goto LABEL_11;
  }
}

void sub_1BE6F01E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;
  id *v29;
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);

  objc_sync_exit(v26);
  objc_sync_exit(v26);

  _Unwind_Resume(a1);
}

void sub_1BE6F02D4(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  uint8_t v3[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_1BE6EFD84(WeakRetained);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v2 = (id)qword_1EF568E80;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_DEBUG, "Interrupted tracker connection.", v3, 2u);
  }

}

void sub_1BE6F0378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6F0388(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    *((_QWORD *)WeakRetained + 2) = 0;
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v3 = (id)qword_1EF568E80;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BE607000, v3, OS_LOG_TYPE_DEBUG, "Invalidated tracker connection.", v4, 2u);
    }

  }
}

uint64_t sub_1BE6F0430(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE6F0440(uint64_t a1)
{

}

void sub_1BE6F0448(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E80;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend_description(v3, v5, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412290;
    v14 = v10;
    _os_log_impl(&dword_1BE607000, v4, OS_LOG_TYPE_ERROR, "An XPC proxy service error occurred: %@", (uint8_t *)&v13, 0xCu);

  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v3;

}

void sub_1BE6F054C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE::CHFastPathCharacterHolderLZFSE(uint64_t a1, int a2, int a3)
{
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_QWORD *)a1 = &off_1E77EF828;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 40) = CFSTR("unknown_default.lzfse");
  *(_QWORD *)(a1 + 48) = 0;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderLZFSEQueue", v4);
  v6 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;

  return a1;
}

{
  NSObject *v4;
  dispatch_queue_t v5;
  void *v6;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_QWORD *)a1 = &off_1E77EF828;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 40) = CFSTR("unknown_default.lzfse");
  *(_QWORD *)(a1 + 48) = 0;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = dispatch_queue_create("com.apple.CoreHandwriting.CHFPCharacterHolderLZFSEQueue", v4);
  v6 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;

  return a1;
}

uint64_t CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE::reloadAllCharactersIfNeeded(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE *this)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 6);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1BE6F07F4;
  v4[3] = &unk_1E77F3B40;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BE6F07F4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  CoreHandwriting::synthesis::fast_path *v4;
  NSString *v5;
  CoreHandwriting::synthesis *v6;
  CoreHandwriting::synthesis *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t ***v24;
  uint64_t *v25;
  uint64_t **v26;
  BOOL v27;
  unsigned int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  unsigned int v32;
  _DWORD *v33;
  uint8_t *v34;
  uint8_t *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  CoreHandwriting::synthesis *v41;
  CoreHandwriting::synthesis::fast_path *v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD v46[4];
  CoreHandwriting::synthesis *v47;
  uint8_t *v48;
  int v49;
  uint8_t buf[8];
  uint8_t *v51;
  uint64_t v52;
  _QWORD *(*v53)(_QWORD *, _QWORD *);
  void (*v54)(uint64_t);
  void *v55;
  _QWORD **v56;
  _QWORD *v57[3];

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 24))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return;
  }
  v3 = *(_DWORD *)(v2 + 36);
  v4 = (CoreHandwriting::synthesis::fast_path *)*(id *)(v2 + 40);
  CoreHandwriting::synthesis::fast_path::uncompressInventoryFromLZFSE(v4, v5);
  v6 = (CoreHandwriting::synthesis *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v36 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v36, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderLZFSE Failed to load inventory", buf, 2u);
    }

    v44 = 0;
    v45 = 0;
    v43 = &v44;
    goto LABEL_42;
  }
  *(_QWORD *)buf = 0;
  v51 = buf;
  v52 = 0x4812000000;
  v53 = sub_1BE6F25B0;
  v54 = sub_1BE6F25EC;
  v57[0] = 0;
  v57[1] = 0;
  v55 = &unk_1BE94989A;
  v56 = v57;
  v41 = v6;
  v42 = v4;
  CoreHandwriting::synthesis::CHDiffusionSynthesisStringWithAllSupportedCharactersByModel(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByAppendingString_(v8, v9, (uint64_t)CFSTR("×÷·"), v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v40 = v13;
  v19 = objc_msgSend_length(v13, v14, v15, v16, v17, v18);
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = sub_1BE6F25FC;
  v46[3] = &unk_1E77F3D88;
  v49 = v3;
  v47 = v7;
  v48 = buf;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v13, v20, 0, v19, (uint64_t)v46, v21);
  v44 = 0;
  v45 = 0;
  v43 = &v44;
  v22 = (uint8_t *)*((_QWORD *)v51 + 6);
  v23 = v51 + 56;
  if (v22 != v51 + 56)
  {
    while (1)
    {
      v24 = (uint64_t ***)&v44;
      if (v43 != &v44)
      {
        v25 = v44;
        v26 = &v44;
        if (v44)
        {
          do
          {
            v24 = (uint64_t ***)v25;
            v25 = (uint64_t *)v25[1];
          }
          while (v25);
        }
        else
        {
          do
          {
            v24 = (uint64_t ***)v26[2];
            v27 = *v24 == v26;
            v26 = (uint64_t **)v24;
          }
          while (v27);
        }
        v28 = *((_DWORD *)v22 + 8);
        if (*((_DWORD *)v24 + 8) >= v28)
          break;
      }
      if (v44)
        v29 = (uint64_t **)v24;
      else
        v29 = &v44;
      if (v44)
      {
        v30 = (uint64_t **)(v24 + 1);
      }
      else
      {
        v24 = &v43;
        v30 = &v44;
      }
      if (!v24[1])
        goto LABEL_28;
LABEL_31:
      v34 = (uint8_t *)*((_QWORD *)v22 + 1);
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = *(uint8_t **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (uint8_t *)*((_QWORD *)v22 + 2);
          v27 = *(_QWORD *)v35 == (_QWORD)v22;
          v22 = v35;
        }
        while (!v27);
      }
      v22 = v35;
      if (v35 == v23)
        goto LABEL_5;
    }
    v30 = &v44;
    v29 = &v44;
    if (v44)
    {
      v31 = v44;
      while (1)
      {
        while (1)
        {
          v29 = (uint64_t **)v31;
          v32 = *((_DWORD *)v31 + 8);
          if (v32 <= v28)
            break;
          v31 = *v29;
          v30 = v29;
          if (!*v29)
            goto LABEL_28;
        }
        if (v32 >= v28)
          goto LABEL_31;
        v31 = v29[1];
        if (!v31)
        {
          v30 = v29 + 1;
          break;
        }
      }
    }
LABEL_28:
    v33 = operator new(0x40uLL);
    v33[8] = *((_DWORD *)v22 + 8);
    sub_1BE6EC438((_QWORD *)v33 + 5, (uint64_t *)v22 + 5);
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = 0;
    *((_QWORD *)v33 + 2) = v29;
    *v30 = (uint64_t *)v33;
    if (*v43)
    {
      v43 = (uint64_t **)*v43;
      v33 = *v30;
    }
    sub_1BE61F5C0(v44, (uint64_t *)v33);
    ++v45;
    goto LABEL_31;
  }
LABEL_5:

  _Block_object_dispose(buf, 8);
  sub_1BE6E7EB4((uint64_t)&v56, v57[0]);
  v7 = v41;
  v4 = v42;
LABEL_42:

  v37 = v2 + 16;
  sub_1BE6E7EB4(v2 + 8, *(_QWORD **)(v2 + 16));
  *(_QWORD *)(v2 + 8) = v43;
  v38 = v44;
  *(_QWORD *)(v2 + 16) = v44;
  v39 = v45;
  *(_QWORD *)(v2 + 24) = v45;
  if (v39)
  {
    v38[2] = v37;
    v43 = &v44;
    v44 = 0;
    v45 = 0;
    v38 = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 8) = v37;
  }
  sub_1BE6E7EB4((uint64_t)&v43, v38);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(v2 + 24) != 0;
}

void sub_1BE6F0BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30)
{

  _Block_object_dispose(&a23, 8);
  sub_1BE6E7EB4(a10, a30);

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE::doAddCharacter(CoreHandwriting::synthesis::fast_path::CHFastPathCharacterHolderLZFSE *this, const CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v2 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BE607000, v2, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderLZFSE addCharacter not supported!", v3, 2u);
  }

}

void CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSegmentedData(CoreHandwriting::synthesis::fast_path *this@<X0>, NSDictionary *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  _QWORD *v68;
  _QWORD **v69;
  _QWORD *v70;
  int v71;
  int v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  BOOL v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _BYTE *v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  uint64_t i;
  void *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BOOL4 v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  float v212;
  float v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  float v224;
  float v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  int v233;
  int v234;
  int v235;
  _QWORD *v236;
  int v237;
  int v238;
  int v239;
  _QWORD *v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  double *v255;
  double v256;
  void *v257;
  double *v258;
  double v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  double *v264;
  double v265;
  float v266;
  double v267;
  double v268;
  CHDrawing *v269;
  const char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  float v275;
  float v276;
  double v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  double v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  double *v292;
  double v293;
  const char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  double *v306;
  double v307;
  float *v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  id v316;
  uint64_t v317;
  void *v320;
  CoreHandwriting::synthesis::fast_path *v321;
  void *v323;
  id *__p;
  void *__pa;
  void *v326;
  CoreHandwriting::synthesis::fast_path *v327;
  id obj;
  id obja;
  CHDrawing *v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  int *v334;
  int v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  _QWORD *v340;
  _QWORD *v341;
  uint64_t v342;
  __int128 v343;
  void *v344;
  __int128 v345;
  void *v346;
  _BYTE v347[128];
  void *v348[2];
  void *v349[4];
  void *v350[2];
  void *v351[2];
  __int128 v352;
  _OWORD v353[4];
  uint64_t v354;

  v354 = *MEMORY[0x1E0C80C00];
  v321 = this;
  v330 = objc_alloc_init(CHDrawing);
  objc_msgSend_objectForKeyedSubscript_(v321, v4, (uint64_t)CFSTR("segmentationStrokes"), v5, v6, v7);
  v320 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v321, v8, (uint64_t)CFSTR("data"), v9, v10, v11);
  v326 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v321, v12, (uint64_t)CFSTR("unicodeCodePoints"), v13, v14, v15);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v17, (uint64_t)CFSTR("0x%04x"), v18, v19, v20, a2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend_indexOfObject_(v16, v22, (uint64_t)v21, v23, v24, v25);

  if (v26 == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
    goto LABEL_153;
  }
  v316 = v16;
  v317 = v26;
  v327 = v321;
  objc_msgSend_objectForKey_(v327, v27, (uint64_t)CFSTR("annotatedPrincipalLines"), v28, v29, v30);
  v341 = 0;
  v342 = 0;
  v340 = &v341;
  v323 = (void *)objc_claimAutoreleasedReturnValue();
  if (v323)
  {
    v31 = operator new(0x40uLL);
    v36 = 0;
    *v31 = CFSTR("toplinePoints");
    v31[2] = CFSTR("descenderlinePoints");
    *((_DWORD *)v31 + 2) = 0;
    v31[4] = CFSTR("baselinePoints");
    *((_DWORD *)v31 + 10) = 2;
    v31[6] = CFSTR("midlinePoints");
    *((_DWORD *)v31 + 14) = 3;
    __p = (id *)v31;
    *((_DWORD *)v31 + 6) = 1;
    do
    {
      v37 = (uint64_t *)&__p[2 * v36];
      v334 = (int *)(v37 + 1);
      objc_msgSend_objectForKey_(v323, v32, *v37, v33, v34, v35);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      memset(v353, 0, sizeof(v353));
      obj = v38;
      v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v39, (uint64_t)v353, (uint64_t)v348, 16, v40);
      if (v45)
      {
        v332 = **(_QWORD **)&v353[1];
        do
        {
          v46 = 0;
          do
          {
            if (**(_QWORD **)&v353[1] != v332)
              objc_enumerationMutation(obj);
            v47 = *(void **)(*((_QWORD *)&v353[0] + 1) + 8 * v46);
            objc_msgSend_objectAtIndexedSubscript_(v47, v41, 0, v42, v43, v44);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = objc_msgSend_intValue(v48, v49, v50, v51, v52, v53);
            objc_msgSend_objectAtIndexedSubscript_(v47, v55, 1, v56, v57, v58);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            v65 = objc_msgSend_intValue(v59, v60, v61, v62, v63, v64);
            v66 = v65;
            v67 = *v334;
            v68 = v341;
            v69 = &v341;
LABEL_12:
            v70 = v69;
            if (v68)
            {
              do
              {
                v69 = (_QWORD **)v68;
                v71 = *((_DWORD *)v68 + 7);
                if (v54 < v71)
                {
LABEL_11:
                  v68 = *v69;
                  goto LABEL_12;
                }
                if (v54 == v71)
                {
                  v72 = *((_DWORD *)v69 + 8);
                  if (v65 < v72)
                    goto LABEL_11;
                  if (v65 == v72)
                  {
                    v73 = *((_DWORD *)v69 + 9);
                    if (v67 < v73)
                      goto LABEL_11;
                    if (v73 >= v67)
                      goto LABEL_50;
                  }
                  else if (v72 >= v65)
                  {
                    goto LABEL_50;
                  }
                }
                else if (v71 >= v54)
                {
                  goto LABEL_50;
                }
                v68 = v69[1];
              }
              while (v68);
              v70 = v69 + 1;
            }
            v74 = operator new(0x28uLL);
            *((_DWORD *)v74 + 7) = v54;
            *((_DWORD *)v74 + 8) = v66;
            *((_DWORD *)v74 + 9) = v67;
            *v74 = 0;
            v74[1] = 0;
            v74[2] = v69;
            *v70 = v74;
            if (*v340)
            {
              v340 = (_QWORD *)*v340;
              v74 = (_QWORD *)*v70;
            }
            v75 = v341;
            v76 = v74 == v341;
            *((_BYTE *)v74 + 24) = v74 == v341;
            if (!v76)
            {
              do
              {
                v77 = v74[2];
                if (*(_BYTE *)(v77 + 24))
                  break;
                v78 = *(_QWORD **)(v77 + 16);
                v79 = *v78;
                if (*v78 == v77)
                {
                  v82 = v78[1];
                  if (!v82 || (v83 = *(unsigned __int8 *)(v82 + 24), v80 = (_BYTE *)(v82 + 24), v83))
                  {
                    if (*(_QWORD **)v77 == v74)
                    {
                      *(_BYTE *)(v77 + 24) = 1;
                      *((_BYTE *)v78 + 24) = 0;
                      v86 = *(_QWORD *)(v77 + 8);
                      *v78 = v86;
                      if (v86)
                        goto LABEL_42;
                    }
                    else
                    {
                      v84 = *(uint64_t **)(v77 + 8);
                      v85 = *v84;
                      *(_QWORD *)(v77 + 8) = *v84;
                      if (v85)
                      {
                        *(_QWORD *)(v85 + 16) = v77;
                        v78 = *(_QWORD **)(v77 + 16);
                      }
                      v84[2] = (uint64_t)v78;
                      *(_QWORD *)(*(_QWORD *)(v77 + 16) + 8 * (**(_QWORD **)(v77 + 16) != v77)) = v84;
                      *v84 = v77;
                      *(_QWORD *)(v77 + 16) = v84;
                      v78 = (_QWORD *)v84[2];
                      v77 = *v78;
                      *((_BYTE *)v84 + 24) = 1;
                      *((_BYTE *)v78 + 24) = 0;
                      v86 = *(_QWORD *)(v77 + 8);
                      *v78 = v86;
                      if (v86)
LABEL_42:
                        *(_QWORD *)(v86 + 16) = v78;
                    }
                    *(_QWORD *)(v77 + 16) = v78[2];
                    *(_QWORD *)(v78[2] + 8 * (*(_QWORD *)v78[2] != (_QWORD)v78)) = v77;
                    *(_QWORD *)(v77 + 8) = v78;
LABEL_48:
                    v78[2] = v77;
                    break;
                  }
                }
                else if (!v79 || (v81 = *(unsigned __int8 *)(v79 + 24), v80 = (_BYTE *)(v79 + 24), v81))
                {
                  if (*(_QWORD **)v77 == v74)
                  {
                    v88 = v74[1];
                    *(_QWORD *)v77 = v88;
                    if (v88)
                    {
                      *(_QWORD *)(v88 + 16) = v77;
                      v78 = *(_QWORD **)(v77 + 16);
                    }
                    v74[2] = v78;
                    *(_QWORD *)(*(_QWORD *)(v77 + 16) + 8 * (**(_QWORD **)(v77 + 16) != v77)) = v74;
                    v74[1] = v77;
                    *(_QWORD *)(v77 + 16) = v74;
                    v78 = (_QWORD *)v74[2];
                    *((_BYTE *)v74 + 24) = 1;
                    *((_BYTE *)v78 + 24) = 0;
                    v77 = v78[1];
                    v87 = *(_QWORD **)v77;
                    v78[1] = *(_QWORD *)v77;
                    if (v87)
LABEL_46:
                      v87[2] = v78;
                  }
                  else
                  {
                    *(_BYTE *)(v77 + 24) = 1;
                    *((_BYTE *)v78 + 24) = 0;
                    v77 = v78[1];
                    v87 = *(_QWORD **)v77;
                    v78[1] = *(_QWORD *)v77;
                    if (v87)
                      goto LABEL_46;
                  }
                  *(_QWORD *)(v77 + 16) = v78[2];
                  *(_QWORD *)(v78[2] + 8 * (*(_QWORD *)v78[2] != (_QWORD)v78)) = v77;
                  *(_QWORD *)v77 = v78;
                  goto LABEL_48;
                }
                *(_BYTE *)(v77 + 24) = 1;
                v74 = v78;
                *((_BYTE *)v78 + 24) = v78 == v75;
                *v80 = 1;
              }
              while (v78 != v75);
            }
            ++v342;
LABEL_50:

            ++v46;
          }
          while (v46 != v45);
          v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v41, (uint64_t)v353, (uint64_t)v348, 16, v44);
          v45 = v89;
        }
        while (v89);
      }

      ++v36;
    }
    while (v36 != 4);

    operator delete(__p);
  }

  v336 = 0u;
  v337 = 0u;
  v338 = 0u;
  v339 = 0u;
  objc_msgSend_objectAtIndex_(v320, v90, v317, v91, v92, v93);
  __pa = (void *)objc_claimAutoreleasedReturnValue();
  v96 = objc_msgSend_countByEnumeratingWithState_objects_count_(__pa, v94, (uint64_t)&v336, (uint64_t)v347, 16, v95);
  if (!v96)
  {
    v333 = 0;
    v102 = 0;
    v335 = 0;
    v103 = 0;
    v104 = -1.0;
    v105 = 0.0;
    v106 = 3.4028e38;
    v107 = 0.0;
    v108 = 0.0;
    v109 = 0.0;
    goto LABEL_132;
  }
  v333 = 0;
  v102 = 0;
  v335 = 0;
  v103 = 0;
  obja = *(id *)v337;
  v104 = -1.0;
  v105 = 0.0;
  v106 = 3.4028e38;
  v107 = 0.0;
  v108 = 0.0;
  v109 = 0.0;
  do
  {
    v331 = v96;
    for (i = 0; i != v331; ++i)
    {
      if (*(id *)v337 != obja)
        objc_enumerationMutation(__pa);
      v111 = *(void **)(*((_QWORD *)&v336 + 1) + 8 * i);
      v112 = objc_msgSend_integerValue(v111, v97, v98, v99, v100, v101);
      objc_msgSend_objectForKeyedSubscript_(v327, v113, (uint64_t)CFSTR("annotatedCutPoints"), v114, v115, v116);
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndex_(v117, v118, v112, v119, v120, v121);
      v122 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_objectAtIndexedSubscript_(v122, v123, 1, v124, v125, v126);
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      v133 = objc_msgSend_intValue(v127, v128, v129, v130, v131, v132);

      if ((int)objc_msgSend_intValue(v111, v134, v135, v136, v137, v138) < 1)
      {
        v181 = 0;
      }
      else
      {
        objc_msgSend_objectForKeyedSubscript_(v327, v139, (uint64_t)CFSTR("annotatedCutPoints"), v140, v141, v142);
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndex_(v143, v144, v112 - 1, v145, v146, v147);
        v148 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend_objectAtIndexedSubscript_(v148, v149, 0, v150, v151, v152);
        v153 = (void *)objc_claimAutoreleasedReturnValue();
        v159 = objc_msgSend_intValue(v153, v154, v155, v156, v157, v158);
        objc_msgSend_objectAtIndexedSubscript_(v122, v160, 0, v161, v162, v163);
        v164 = (void *)objc_claimAutoreleasedReturnValue();
        v170 = v159 == objc_msgSend_intValue(v164, v165, v166, v167, v168, v169);

        if (v170)
        {
          objc_msgSend_objectAtIndexedSubscript_(v148, v171, 1, v172, v173, v174);
          v175 = (void *)objc_claimAutoreleasedReturnValue();
          v181 = objc_msgSend_intValue(v175, v176, v177, v178, v179, v180);

        }
        else
        {
          v181 = 0;
        }

      }
      objc_msgSend_objectAtIndexedSubscript_(v122, v139, 0, v140, v141, v142);
      v182 = (void *)objc_claimAutoreleasedReturnValue();
      v188 = objc_msgSend_intValue(v182, v183, v184, v185, v186, v187);

      objc_msgSend_objectAtIndex_(v326, v189, v188, v190, v191, v192);
      v198 = (void *)objc_claimAutoreleasedReturnValue();
      if (v181 > v133)
        goto LABEL_128;
      v199 = v133;
      v200 = v181;
      while (2)
      {
        objc_msgSend_objectAtIndex_(v198, v193, v200, v195, v196, v197);
        v201 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectAtIndexedSubscript_(v201, v202, 0, v203, v204, v205);
        v206 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_floatValue(v206, v207, v208, v209, v210, v211);
        v213 = v212;

        objc_msgSend_objectAtIndexedSubscript_(v201, v214, 1, v215, v216, v217);
        v218 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_floatValue(v218, v219, v220, v221, v222, v223);
        v225 = v224;

        objc_msgSend_addPoint_(v330, v226, v227, v228, v229, v230, v213, v225);
        v231 = v341;
        if (!v341)
          goto LABEL_126;
        v232 = v341;
        while (1)
        {
          v233 = *((_DWORD *)v232 + 7);
          if (v233 > v188)
            goto LABEL_78;
          if (v233 != v188)
          {
            if (v233 >= v188)
              break;
            goto LABEL_77;
          }
          v234 = *((_DWORD *)v232 + 8);
          if (v234 > (int)v200)
            goto LABEL_78;
          if (v234 == (_DWORD)v200)
          {
            v235 = *((_DWORD *)v232 + 9);
            if (v235 > 0)
              goto LABEL_78;
            if ((v235 & 0x80000000) == 0)
              break;
            goto LABEL_77;
          }
          if (v234 >= (int)v200)
            break;
LABEL_77:
          ++v232;
LABEL_78:
          v232 = (_QWORD *)*v232;
          if (!v232)
            goto LABEL_88;
        }
        v103 = 1;
        v109 = v225;
LABEL_88:
        v236 = v341;
        while (2)
        {
          v237 = *((_DWORD *)v236 + 7);
          if (v237 > v188)
            goto LABEL_91;
          if (v237 != v188)
          {
            if (v237 >= v188)
              goto LABEL_100;
            goto LABEL_90;
          }
          v238 = *((_DWORD *)v236 + 8);
          if (v238 > (int)v200)
          {
LABEL_91:
            v236 = (_QWORD *)*v236;
            if (!v236)
              goto LABEL_101;
            continue;
          }
          break;
        }
        if (v238 == (_DWORD)v200)
        {
          v239 = *((_DWORD *)v236 + 9);
          if (v239 <= 1)
          {
            if (v239 == 1)
              goto LABEL_100;
LABEL_90:
            ++v236;
          }
          goto LABEL_91;
        }
        if (v238 < (int)v200)
          goto LABEL_90;
LABEL_100:
        v333 = 1;
        v105 = v225;
LABEL_101:
        v240 = v341;
        while (2)
        {
          v241 = *((_DWORD *)v240 + 7);
          if (v241 > v188)
            goto LABEL_104;
          if (v241 != v188)
          {
            if (v241 >= v188)
              goto LABEL_113;
            goto LABEL_103;
          }
          v242 = *((_DWORD *)v240 + 8);
          if (v242 > (int)v200)
          {
LABEL_104:
            v240 = (_QWORD *)*v240;
            if (!v240)
              goto LABEL_117;
            continue;
          }
          break;
        }
        if (v242 == (_DWORD)v200)
        {
          v243 = *((_DWORD *)v240 + 9);
          if (v243 <= 2)
          {
            if (v243 == 2)
              goto LABEL_113;
LABEL_103:
            ++v240;
          }
          goto LABEL_104;
        }
        if (v242 < (int)v200)
          goto LABEL_103;
LABEL_113:
        v102 = 1;
        v108 = v225;
LABEL_117:
        while (2)
        {
          v244 = *((_DWORD *)v231 + 7);
          if (v244 > v188)
            goto LABEL_116;
          if (v244 != v188)
          {
            if (v244 >= v188)
              goto LABEL_125;
            goto LABEL_115;
          }
          v245 = *((_DWORD *)v231 + 8);
          if (v245 > (int)v200)
          {
LABEL_116:
            v231 = (_QWORD *)*v231;
            if (!v231)
              goto LABEL_126;
            continue;
          }
          break;
        }
        if (v245 == (_DWORD)v200)
        {
          v246 = *((_DWORD *)v231 + 9);
          if (v246 <= 3)
          {
            if (v246 == 3)
              goto LABEL_125;
LABEL_115:
            ++v231;
          }
          goto LABEL_116;
        }
        if (v245 < (int)v200)
          goto LABEL_115;
LABEL_125:
        v335 = 1;
        v107 = v225;
LABEL_126:

        v104 = fmaxf(v104, v225);
        v106 = fminf(v106, v225);
        v76 = v200++ == v199;
        if (!v76)
          continue;
        break;
      }
LABEL_128:
      objc_msgSend_endStroke(v330, v193, v194, v195, v196, v197);

    }
    v96 = objc_msgSend_countByEnumeratingWithState_objects_count_(__pa, v97, (uint64_t)&v336, (uint64_t)v347, 16, v101);
  }
  while (v96);
LABEL_132:

  *(_OWORD *)v351 = 0u;
  v352 = 0u;
  *(_OWORD *)v350 = 0u;
  *(_OWORD *)v348 = 0u;
  memset(v349, 0, sizeof(v349));
  if (objc_msgSend_characterAtIndex_(CFSTR("."), v247, 0, v248, v249, v250) == (_DWORD)a2)
  {
    v255 = (double *)operator new(0x20uLL);
    v256 = (float)(v106 + -8.0);
    v257 = v255 + 4;
    *v255 = 0.0;
    v255[1] = v256;
    v255[2] = 1.0;
    v255[3] = v256;
    if (v350[0])
    {
      v350[1] = v350[0];
      operator delete(v350[0]);
    }
    goto LABEL_135;
  }
  if (objc_msgSend_characterAtIndex_(CFSTR(","), v251, 0, v252, v253, v254) == (_DWORD)a2)
  {
    v264 = (double *)operator new(0x20uLL);
    v265 = (float)(v106 + -8.0);
    *v264 = 0.0;
    v264[1] = v265;
    v264[2] = 1.0;
    v264[3] = v265;
    if (v350[0])
    {
      v350[1] = v350[0];
      operator delete(v350[0]);
    }
    v350[0] = v264;
    v350[1] = v264 + 4;
    v351[0] = v264 + 4;
    v258 = (double *)operator new(0x20uLL);
    v266 = -5.0;
    goto LABEL_140;
  }
  if (objc_msgSend_characterAtIndex_(CFSTR("I"), v260, 0, v261, v262, v263) != (_DWORD)a2)
  {
    if (objc_msgSend_characterAtIndex_(CFSTR("-"), v283, 0, v284, v285, v286) == (_DWORD)a2)
    {
      v292 = (double *)operator new(0x20uLL);
      v293 = (float)(v106 + -1.0);
      *v292 = 0.0;
      v292[1] = v293;
      v292[2] = 1.0;
      v292[3] = v293;
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      v350[0] = v292;
      v350[1] = v292 + 4;
      v351[0] = v292 + 4;
      v258 = (double *)operator new(0x20uLL);
      v266 = 10.0;
LABEL_140:
      v259 = (float)(v104 + v266);
      goto LABEL_141;
    }
    if (objc_msgSend_characterAtIndex_(CFSTR("+"), v288, 0, v289, v290, v291) == (_DWORD)a2
      || objc_msgSend_characterAtIndex_(CFSTR("*"), v294, 0, v295, v296, v297) == (_DWORD)a2
      || objc_msgSend_characterAtIndex_(CFSTR("="), v298, 0, v299, v300, v301) == (_DWORD)a2)
    {
      v306 = (double *)operator new(0x20uLL);
      v307 = (float)(v106 + -1.0);
      *v306 = 0.0;
      v306[1] = v307;
      v306[2] = 1.0;
      v306[3] = v307;
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      v350[0] = v306;
      v350[1] = v306 + 4;
      v351[0] = v306 + 4;
      v258 = (double *)operator new(0x20uLL);
      v266 = 6.0;
      goto LABEL_140;
    }
    if (objc_msgSend_characterAtIndex_(CFSTR("'"), v302, 0, v303, v304, v305) == (_DWORD)a2)
    {
      *(_QWORD *)&v353[0] = 0;
      *((double *)v353 + 1) = v104;
      *(_QWORD *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v104;
      sub_1BE6F2810(&v345, v353, 2uLL);
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      *(_OWORD *)v350 = v345;
      v351[0] = v346;
      *(_QWORD *)&v353[0] = 0;
      *((double *)v353 + 1) = (float)-(float)(v106 - (float)(v104 * 2.0));
      *(_QWORD *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = *((double *)v353 + 1);
      sub_1BE6F2810(&v345, v353, 2uLL);
LABEL_177:
      if (v349[1])
      {
        v349[2] = v349[1];
        operator delete(v349[1]);
      }
      *(_OWORD *)&v349[1] = v345;
      v349[3] = v346;
      v258 = (double *)v345;
      goto LABEL_144;
    }
    if (v335 && v102)
    {
      *(_QWORD *)&v353[0] = 0;
      *((double *)v353 + 1) = v107;
      *(_QWORD *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v107;
      sub_1BE6F2810(&v345, v353, 2uLL);
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      *(_OWORD *)v350 = v345;
      v351[0] = v346;
      *(_QWORD *)&v353[0] = 0;
      *((double *)v353 + 1) = v108;
      *(_QWORD *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v108;
      sub_1BE6F2810(&v345, v353, 2uLL);
      goto LABEL_177;
    }
    v345 = 0uLL;
    v346 = 0;
    if (v103)
      sub_1BE6F28A0((char **)&v345, (unint64_t)LODWORD(v109) << 32);
    if (v335)
      sub_1BE6F28A0((char **)&v345, ((unint64_t)LODWORD(v107) << 32) | 0x41A00000);
    if (v102)
      sub_1BE6F28A0((char **)&v345, ((unint64_t)LODWORD(v108) << 32) | 0x42200000);
    if (v333)
      sub_1BE6F28A0((char **)&v345, ((unint64_t)LODWORD(v105) << 32) | 0x42700000);
    v308 = (float *)v345;
    if (*((_QWORD *)&v345 + 1) - (_QWORD)v345 >= 0x10uLL
      && (v309 = *(float *)(v345 + 12), v310 = *(float *)(v345 + 4), vabds_f32(v309, v310) >= 0.0001))
    {
      v311 = v309 - v310;
      v312 = *(float *)(v345 + 8);
      v313 = (float)(v312 - *(float *)v345) / v311;
      *(_QWORD *)&v353[0] = 0;
      if (v335)
      {
        *((double *)v353 + 1) = v107;
        *(_QWORD *)&v353[1] = 0x3FF0000000000000;
        *((double *)&v353[1] + 1) = v107;
      }
      else
      {
        *((double *)v353 + 1) = (float)(v309 + (float)((float)(20.0 - v312) / v313));
        *(_QWORD *)&v353[1] = 0x3FF0000000000000;
        *((double *)&v353[1] + 1) = *((double *)v353 + 1);
      }
      sub_1BE6F2810(&v343, v353, 2uLL);
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      *(_OWORD *)v350 = v343;
      v351[0] = v344;
      if (v102)
      {
        *(_QWORD *)&v353[0] = 0;
        *((double *)v353 + 1) = v108;
        *(_QWORD *)&v353[1] = 0x3FF0000000000000;
        *((double *)&v353[1] + 1) = v108;
      }
      else
      {
        v314 = v308[2];
        v315 = v308[3];
        *(_QWORD *)&v353[0] = 0;
        *((double *)v353 + 1) = (float)(v315 + (float)((float)(40.0 - v314) / v313));
        *(_QWORD *)&v353[1] = 0x3FF0000000000000;
        *((double *)&v353[1] + 1) = *((double *)v353 + 1);
      }
      sub_1BE6F2810(&v343, v353, 2uLL);
      if (v349[1])
      {
        v349[2] = v349[1];
        operator delete(v349[1]);
      }
      *(_OWORD *)&v349[1] = v343;
      v349[3] = v344;
    }
    else
    {
      *(_QWORD *)&v353[0] = 0;
      *((double *)v353 + 1) = v104;
      *(_QWORD *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v104;
      sub_1BE6F2810(&v343, v353, 2uLL);
      if (v349[1])
      {
        v349[2] = v349[1];
        operator delete(v349[1]);
      }
      *(_OWORD *)&v349[1] = v343;
      v349[3] = v344;
      *(_QWORD *)&v353[0] = 0;
      *((double *)v353 + 1) = v106;
      *(_QWORD *)&v353[1] = 0x3FF0000000000000;
      *((double *)&v353[1] + 1) = v106;
      sub_1BE6F2810(&v343, v353, 2uLL);
      if (v350[0])
      {
        v350[1] = v350[0];
        operator delete(v350[0]);
      }
      *(_OWORD *)v350 = v343;
      v351[0] = v344;
      if (!v308)
        goto LABEL_208;
    }
    operator delete(v308);
LABEL_208:
    v258 = (double *)v349[1];
    goto LABEL_144;
  }
  v255 = (double *)operator new(0x20uLL);
  v287 = (float)(v106 + 4.0);
  v257 = v255 + 4;
  *v255 = 0.0;
  v255[1] = v287;
  v255[2] = 1.0;
  v255[3] = v287;
  if (v350[0])
  {
    v350[1] = v350[0];
    operator delete(v350[0]);
  }
LABEL_135:
  v350[0] = v255;
  v350[1] = v257;
  v351[0] = v257;
  v258 = (double *)operator new(0x20uLL);
  v259 = v104;
LABEL_141:
  *v258 = 0.0;
  v258[1] = v259;
  v258[2] = 1.0;
  v258[3] = v259;
  if (v349[1])
  {
    v349[2] = v349[1];
    operator delete(v349[1]);
  }
  v349[1] = v258;
  v349[2] = v258 + 4;
  v349[3] = v258 + 4;
LABEL_144:
  v267 = *((double *)v350[0] + 1);
  v268 = v258[1];
  v269 = v330;
  objc_msgSend_bounds(v269, v270, v271, v272, v273, v274);
  v275 = v268;
  v276 = v267;
  objc_msgSend_drawingTransformedWithTranslation_scaleFactor_(v269, v278, v279, v280, v281, v282, (float)(0.0 / (float)(1.0 / (float)(v275 - v276))) - v277, (float)((float)(1.0 / (float)(1.0 / (float)(v275 - v276))) - v275), (float)(1.0 / (float)(v275 - v276)));
  v330 = (CHDrawing *)objc_claimAutoreleasedReturnValue();

  CoreHandwriting::synthesis::fast_path::CHFastPathCharacter::CHFastPathCharacter((CoreHandwriting::synthesis::fast_path::CHFastPathCharacter *)v353, v330, a3, (int)a2);
  *(_QWORD *)a4 = *(_QWORD *)&v353[0];
  *(_OWORD *)(a4 + 8) = *(_OWORD *)((char *)v353 + 8);
  *(_BYTE *)(a4 + 24) = 1;
  v16 = v316;
  if (v351[1])
  {
    *(void **)&v352 = v351[1];
    operator delete(v351[1]);
  }
  if (v350[0])
  {
    v350[1] = v350[0];
    operator delete(v350[0]);
  }
  if (v349[1])
  {
    v349[2] = v349[1];
    operator delete(v349[1]);
  }
  if (v348[0])
  {
    v348[1] = v348[0];
    operator delete(v348[0]);
  }
  sub_1BE671438(v341);
LABEL_153:

}

void sub_1BE6F1EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,_QWORD *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (__p)
    operator delete(__p);
  sub_1BE6F2154((uint64_t)&a63);
  sub_1BE671438(a37);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6F2154(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

id CoreHandwriting::synthesis::fast_path::uncompressInventoryFromLZFSE(CoreHandwriting::synthesis::fast_path *this, NSString *a2)
{
  CoreHandwriting::synthesis::fast_path *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSData *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  NSObject *v43;
  uint8_t v45[16];
  uint8_t buf[8];
  size_t v47;
  int64_t v48;
  char __s[1024];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = objc_retainAutorelease(this);
  v8 = (const char *)objc_msgSend_UTF8String(v2, v3, v4, v5, v6, v7);
  if (pathForResource(v8, 0, (UInt8 *)__s))
  {
    v9 = strlen(__s);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    v13 = v9;
    if (v9 >= 0x17)
    {
      v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v17 = v9 | 7;
      v18 = v17 + 1;
      v14 = operator new(v17 + 1);
      v47 = v13;
      v48 = v18 | 0x8000000000000000;
      *(_QWORD *)buf = v14;
    }
    else
    {
      HIBYTE(v48) = v9;
      v14 = buf;
      if (!v9)
        goto LABEL_15;
    }
    memcpy(v14, __s, v13);
LABEL_15:
    *((_BYTE *)v14 + v13) = 0;
    if (v48 >= 0)
      objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v10, (uint64_t)buf, 4, v11, v12);
    else
      objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v10, *(uint64_t *)buf, 4, v11, v12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dataWithContentsOfFile_(MEMORY[0x1E0C99D50], v20, (uint64_t)v19, v21, v22, v23);
    v24 = (NSData *)objc_claimAutoreleasedReturnValue();
    v25 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend_stringByAppendingString_(v19, v26, (uint64_t)CFSTR(".size"), v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithContentsOfFile_encoding_error_(v25, v31, (uint64_t)v30, 4, 0, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    v39 = objc_msgSend_integerValue(v33, v34, v35, v36, v37, v38);
    uncompressLZFSEData(v24, v39);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    if (v42)
    {
      objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E0CB36D8], v40, (uint64_t)v42, 1, 0, v41);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v43 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_1BE607000, v43, OS_LOG_TYPE_ERROR, "uncompressInventoryFromLZFSE Failed to load inventory", v45, 2u);
      }

      v16 = 0;
    }

    if (SHIBYTE(v48) < 0)
      operator delete(*(void **)buf);
    goto LABEL_27;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v15 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v15, OS_LOG_TYPE_ERROR, "uncompressInventoryFromLZFSE Could not find annotated synthesis style.", buf, 2u);
  }

  v16 = 0;
LABEL_27:

  return v16;
}

void sub_1BE6F2490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v21 = v20;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6F2508(uint64_t a1)
{

  *(_QWORD *)a1 = &unk_1E77EF858;
  sub_1BE6E7EB4(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1BE6F2554(uint64_t a1)
{

  *(_QWORD *)a1 = &unk_1E77EF858;
  sub_1BE6E7EB4(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE6F25B0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1BE6F25EC(uint64_t a1)
{
  sub_1BE6E7EB4(a1 + 48, *(_QWORD **)(a1 + 56));
}

void sub_1BE6F25FC(uint64_t a1, NSDictionary *a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  NSObject *v13;
  char *v14;
  int v15;
  NSObject *v16;
  __int128 v17;
  unsigned __int8 v18;
  uint8_t buf[4];
  unsigned int v20;
  uint64_t v21;

  v2 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  CoreHandwriting::synthesis::fast_path::createCHFastPathCharacterFromSegmentedData(*(CoreHandwriting::synthesis::fast_path **)(a1 + 32), a2, *(_DWORD *)(a1 + 48), (uint64_t)&v16);
  if (!v18)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v13 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v20 = v2;
      _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_ERROR, "CHFastPathCharacterHolderLZFSE Could not add codepoint %d to inventory", buf, 8u);
    }
    goto LABEL_20;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = (uint64_t **)(v4 + 56);
  v5 = *(uint64_t **)(v4 + 56);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= v2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= v2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
    v9 = v7;
    v12 = v7[6];
    if (v12 < v7[7])
      goto LABEL_12;
  }
  else
  {
    v7 = (uint64_t **)(v4 + 56);
LABEL_9:
    v9 = operator new(0x40uLL);
    *((_DWORD *)v9 + 8) = v2;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 5) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = **(_QWORD **)(v4 + 48);
    v11 = (uint64_t *)v9;
    if (v10)
    {
      *(_QWORD *)(v4 + 48) = v10;
      v11 = *v6;
    }
    sub_1BE61F5C0(*(uint64_t **)(v4 + 56), v11);
    ++*(_QWORD *)(v4 + 64);
    v12 = (uint64_t *)*((_QWORD *)v9 + 6);
    if ((unint64_t)v12 < *((_QWORD *)v9 + 7))
    {
LABEL_12:
      v13 = v16;
      *v12 = (uint64_t)v13;
      *(_OWORD *)(v12 + 1) = v17;
      *((_QWORD *)v9 + 6) = v12 + 3;
      goto LABEL_20;
    }
  }
  v14 = sub_1BE6EC070((void **)v9 + 5, (uint64_t)&v16);
  v15 = v18;
  *((_QWORD *)v9 + 6) = v14;
  if (!v15)
    return;
  v13 = v16;
LABEL_20:

}

void sub_1BE6F27EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)

  _Unwind_Resume(exception_object);
}

_QWORD *sub_1BE6F2810(_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_1BE61F930();
    v5 = 16 * a3;
    v6 = (char *)operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BE6F2884(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE6F28A0(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = *a1;
  v9 = v5 - *a1;
  v10 = v9 >> 3;
  v11 = (v9 >> 3) + 1;
  if (v11 >> 61)
    sub_1BE61F930();
  v12 = v4 - (_QWORD)v8;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_1BE61F100();
    v14 = operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v5 - v14 - v9) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = v5 - 16;
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v8);
    }
    v6 = *a1;
  }
LABEL_21:
  *a1 = v15;
  a1[1] = (char *)v7;
  a1[2] = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  a1[1] = (char *)v7;
}

void sub_1BE6F2C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE6F2EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE6F30DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE6F4A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  void *v57;
  void *v58;
  void *v59;
  void *v60;

  _Unwind_Resume(a1);
}

id sub_1BE6F4D98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1BE6F4DB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v6 = (void *)MEMORY[0x1E0CB37E8];
  v7 = *(void **)(a1 + 32);
  *(float *)&v8 = (float)(unint64_t)a2
                / (float)(unint64_t)objc_msgSend_length(*(void **)(a1 + 40), a2, a3, a4, a5, a6);
  objc_msgSend_numberWithFloat_(v6, v9, v10, v11, v12, v13, v8);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v7, v14, (uint64_t)v18, v15, v16, v17);

}

void sub_1BE6F4E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6F4E2C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a2;
  objc_msgSend_substroke(*(void **)(a1 + 32), v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v9, v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend_containsObject_(v3, v16, (uint64_t)v15, v17, v18, v19);

  return v20;
}

void sub_1BE6F4E94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE6F4EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6F4EC8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_substroke(a2, (const char *)a2, a3, a4, a5, a6);
  v17 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifier(v17, v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v13, (uint64_t)v12, v14, v15, v16);

}

void sub_1BE6F4F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE6F4F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE6F4F48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObjectsFromArray_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1BE6F4F54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_containsIndex_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4, a5, a6);
}

void sub_1BE6F527C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE6F5350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE6F5364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE6F5864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *__p,uint64_t a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *sub_1BE6F5A88(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_1BE61F930();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_1BE6F5BCC(double **a1, char **a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  int64_t v28;
  double *v29;
  char *v30;
  _OWORD *v31;
  double *v32;
  __int128 v33;
  double v34;
  float64x2_t *v35;
  float64x2_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int8x16_t v40;
  int64x2_t *v41;
  const double *i64;
  int64x2_t v43;
  int64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  unint64_t v53;
  unint64_t v54;
  _OWORD *v55;
  __int128 v56;
  double *v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  int v71;
  uint64_t v72;
  double v73;
  double v74;
  double *v75;
  double v76;
  double v77;
  double v78;
  double *v79;
  double v80;
  double v82;
  double v83;
  double v84;
  unint64_t v85;
  double *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  double *v92;
  char *v93;
  __int128 v94;
  char *v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  unint64_t v109;
  __int128 v110;
  double *v111;
  double *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  int v127;
  int v129;
  unint64_t v130;
  float64x2x4_t v132;

  if (a5)
  {
    v13 = *(_QWORD **)(a5 + 8);
    v12 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v13 >= v12)
    {
      v15 = *(_QWORD **)a5;
      v16 = ((uint64_t)v13 - *(_QWORD *)a5) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        sub_1BE6FB4B8();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 3 > v17)
        v17 = v18 >> 3;
      v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0;
      v20 = 0xFFFFFFFFFFFFFFFLL;
      if (!v19)
        v20 = v17;
      if (v20 >> 60)
        sub_1BE61F100();
      v21 = 16 * v20;
      v22 = (char *)operator new(16 * v20);
      v23 = &v22[16 * v16];
      v24 = &v22[v21];
      *(_QWORD *)v23 = a6;
      *((_QWORD *)v23 + 1) = 0;
      v14 = v23 + 16;
      if (v13 == v15)
      {
        *(_QWORD *)a5 = v23;
        *(_QWORD *)(a5 + 8) = v14;
        *(_QWORD *)(a5 + 16) = v24;
        if (!v15)
          goto LABEL_14;
      }
      else
      {
        do
        {
          v25 = v23 - 16;
          *((_OWORD *)v23 - 1) = *((_OWORD *)v13 - 1);
          v13 -= 2;
          v23 -= 16;
        }
        while (v13 != v15);
        *(_QWORD *)a5 = v25;
        *(_QWORD *)(a5 + 8) = v14;
        *(_QWORD *)(a5 + 16) = v24;
        if (!v15)
          goto LABEL_14;
      }
      operator delete(v15);
    }
    else
    {
      *v13 = a6;
      v13[1] = 0;
      v14 = v13 + 2;
    }
LABEL_14:
    *(_QWORD *)(a5 + 8) = v14;
  }
  v27 = *a2;
  v26 = a2[1];
  v28 = v26 - *a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if ((unint64_t)v28 <= 0x3F)
  {
    if (v26 != v27)
    {
      v29 = (double *)operator new(v28);
      *a1 = v29;
      a1[1] = v29;
      v30 = (char *)&v29[4 * (v28 >> 5)];
      a1[2] = (double *)v30;
      memcpy(v29, v27, v28 - 7);
      a1[1] = (double *)v30;
    }
    return;
  }
  v129 = a3;
  v31 = operator new(0x20uLL);
  v32 = (double *)(v31 + 2);
  v33 = *((_OWORD *)v27 + 1);
  *v31 = *(_OWORD *)v27;
  v31[1] = v33;
  a1[1] = (double *)(v31 + 2);
  a1[2] = (double *)(v31 + 2);
  *a1 = (double *)v31;
  v34 = 0.0;
  if (v27 != v26)
  {
    v35 = (float64x2_t *)(v27 + 32);
    if (v27 + 32 != v26)
    {
      v36 = *(float64x2_t *)v27;
      if ((unint64_t)(v28 - 64) >= 0x80)
      {
        v37 = ((unint64_t)(v28 - 64) >> 5) + 1;
        v38 = v37 & 3;
        if ((v37 & 3) == 0)
          v38 = 4;
        v39 = v37 - v38;
        v35 += 2 * v39;
        v40 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v36.f64[0], 0);
        v41 = (int64x2_t *)(v27 + 96);
        do
        {
          i64 = (const double *)v41[-4].i64;
          v132 = vld4q_f64(i64);
          v43 = v41[2];
          v44 = *v41;
          v41 += 8;
          v45 = (float64x2_t)vzip1q_s64(v44, v43);
          v46 = (float64x2_t)vzip2q_s64(v44, v43);
          v47 = vsubq_f64((float64x2_t)vextq_s8(v40, (int8x16_t)v132.val[0], 8uLL), v132.val[0]);
          v48 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v132.val[0], (int8x16_t)v45, 8uLL), v45);
          v49 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v132.val[1], 8uLL), v132.val[1]);
          v132.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v132.val[1], (int8x16_t)v46, 8uLL), v46);
          v50 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v49, v49), v47, v47));
          v132.val[0] = vsqrtq_f64(vmlaq_f64(vmulq_f64(v132.val[0], v132.val[0]), v48, v48));
          v34 = v34 + v50.f64[0] + v50.f64[1] + v132.val[0].f64[0] + v132.val[0].f64[1];
          v36 = v46;
          v40 = (int8x16_t)v45;
          v39 -= 4;
        }
        while (v39);
        v36 = (float64x2_t)v43;
      }
      do
      {
        v51 = *v35;
        v35 += 2;
        v52 = vsubq_f64(v36, v51);
        v34 = v34 + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v52, v52).f64[1]), v52.f64[0], v52.f64[0]));
        v36 = v51;
      }
      while (v35 != (float64x2_t *)v26);
    }
  }
  if (a4 >= 2)
  {
    v53 = (unint64_t)(ceil(v34 / a7) + 1.0);
    v54 = v53 % a4;
    if (v54)
      a7 = v34 / (double)(~v54 + a4 + v53);
  }
  if (v34 < a7)
  {
    v55 = operator new(0x40uLL);
    v56 = *((_OWORD *)v26 - 1);
    v55[2] = *((_OWORD *)v26 - 2);
    v55[3] = v56;
    *v55 = *v31;
    *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)((char *)v31 + 9);
    v57 = (double *)(v55 + 4);
    *a1 = (double *)v55;
    a1[1] = (double *)(v55 + 4);
    a1[2] = (double *)(v55 + 4);
    operator delete(v31);
    a1[1] = v57;
    if (!a5)
      return;
    v58 = ((a2[1] - *a2) >> 5) - 1;
    v60 = *(_QWORD **)(a5 + 8);
    v59 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v60 < v59)
      goto LABEL_118;
    v61 = *(_QWORD **)a5;
    v62 = ((uint64_t)v60 - *(_QWORD *)a5) >> 4;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 60)
      sub_1BE6FB4B8();
    v64 = v59 - (_QWORD)v61;
    if (v64 >> 3 > v63)
      v63 = v64 >> 3;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
      v65 = 0xFFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65 >> 60)
      sub_1BE61F100();
    v66 = (char *)operator new(16 * v65);
    v67 = &v66[16 * v62];
    v68 = &v66[16 * v65];
    *(_QWORD *)v67 = a6;
    *((_QWORD *)v67 + 1) = v58;
    v69 = v67 + 16;
    if (v60 != v61)
    {
      do
      {
        v70 = v67 - 16;
        *((_OWORD *)v67 - 1) = *((_OWORD *)v60 - 1);
        v60 -= 2;
        v67 -= 16;
      }
      while (v60 != v61);
      goto LABEL_130;
    }
    goto LABEL_129;
  }
  v71 = a3;
  v130 = (a3 - 1);
  v127 = a4;
  if (a3 >= 1 && vcvtpd_u64_f64(v34 / a7) > a3)
    a7 = v34 / (double)(int)v130;
  v72 = 1;
  v73 = 0.0;
  while (2)
  {
    v75 = (double *)&v27[32 * v72];
    v76 = *(v75 - 4);
    v77 = *(v75 - 3);
    v78 = *v75;
    v79 = v75 + 1;
    v80 = v75[1];
    v74 = sqrt((v77 - v80) * (v77 - v80) + (v76 - *v75) * (v76 - *v75));
    v73 = v73 + v74;
    if (v74 <= 0.0 || v73 < a7)
      goto LABEL_49;
    while (v71 < 1 || v130 > ((char *)v32 - (char *)*a1) >> 5)
    {
      v82 = (a7 - (v73 - v74)) / v74;
      v83 = v76 + v82 * (v78 - v76);
      v84 = v77 + v82 * (v80 - v77);
      v85 = (unint64_t)a1[2];
      if ((unint64_t)v32 < v85)
      {
        *v32 = v83;
        v32[1] = v84;
        v32[2] = 0.0;
        *((_BYTE *)v32 + 24) = 0;
        v32 += 4;
        goto LABEL_70;
      }
      v86 = *a1;
      v87 = ((char *)v32 - (char *)*a1) >> 5;
      v88 = v87 + 1;
      if ((unint64_t)(v87 + 1) >> 59)
        sub_1BE6FB4B8();
      v89 = v85 - (_QWORD)v86;
      if (v89 >> 4 > v88)
        v88 = v89 >> 4;
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFE0)
        v90 = 0x7FFFFFFFFFFFFFFLL;
      else
        v90 = v88;
      if (v90 >> 59)
        sub_1BE61F100();
      v91 = (char *)operator new(32 * v90);
      v92 = (double *)&v91[32 * v87];
      *v92 = v83;
      v92[1] = v84;
      v92[2] = 0.0;
      *((_BYTE *)v92 + 24) = 0;
      if (v32 == v86)
      {
        v32 = v92 + 4;
        *a1 = v92;
        a1[1] = v92 + 4;
        a1[2] = (double *)&v91[32 * v90];
        if (v86)
          goto LABEL_69;
      }
      else
      {
        v93 = &v91[32 * v87];
        do
        {
          v94 = *((_OWORD *)v32 - 2);
          v95 = v93 - 32;
          *(_OWORD *)(v93 - 23) = *(_OWORD *)((char *)v32 - 23);
          *((_OWORD *)v93 - 2) = v94;
          v32 -= 4;
          v93 -= 32;
        }
        while (v32 != v86);
        v32 = v92 + 4;
        *a1 = (double *)v95;
        a1[1] = v92 + 4;
        a1[2] = (double *)&v91[32 * v90];
        if (v86)
LABEL_69:
          operator delete(v86);
      }
LABEL_70:
      a1[1] = v32;
      if (!a5)
        goto LABEL_86;
      v97 = *(_QWORD **)(a5 + 8);
      v96 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v97 >= v96)
      {
        v99 = *(_QWORD **)a5;
        v100 = ((uint64_t)v97 - *(_QWORD *)a5) >> 4;
        v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 60)
          sub_1BE6FB4B8();
        v102 = v96 - (_QWORD)v99;
        if (v102 >> 3 > v101)
          v101 = v102 >> 3;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
          v103 = 0xFFFFFFFFFFFFFFFLL;
        else
          v103 = v101;
        if (v103 >> 60)
          sub_1BE61F100();
        v104 = (char *)operator new(16 * v103);
        v105 = &v104[16 * v100];
        *(_QWORD *)v105 = a6;
        *((_QWORD *)v105 + 1) = v72;
        if (v97 == v99)
        {
          v71 = v129;
          v98 = v105 + 16;
          *(_QWORD *)a5 = v105;
          *(_QWORD *)(a5 + 8) = v105 + 16;
          *(_QWORD *)(a5 + 16) = &v104[16 * v103];
          if (!v99)
            goto LABEL_85;
        }
        else
        {
          v106 = &v104[16 * v100];
          v71 = v129;
          do
          {
            v107 = v106 - 16;
            *((_OWORD *)v106 - 1) = *((_OWORD *)v97 - 1);
            v97 -= 2;
            v106 -= 16;
          }
          while (v97 != v99);
          v98 = v105 + 16;
          *(_QWORD *)a5 = v107;
          *(_QWORD *)(a5 + 8) = v105 + 16;
          *(_QWORD *)(a5 + 16) = &v104[16 * v103];
          if (!v99)
            goto LABEL_85;
        }
        operator delete(v99);
        v32 = a1[1];
      }
      else
      {
        *v97 = a6;
        v97[1] = v72;
        v98 = v97 + 2;
      }
LABEL_85:
      *(_QWORD *)(a5 + 8) = v98;
LABEL_86:
      v78 = *v75;
      v76 = *(v32 - 4);
      v77 = *(v32 - 3);
      v80 = *v79;
      v74 = sqrt((v77 - *v79) * (v77 - *v79) + (v76 - *v75) * (v76 - *v75));
      if (v74 >= a7)
      {
        v73 = v74;
        if (v74 > 0.0)
          continue;
      }
      goto LABEL_48;
    }
    v74 = v73;
LABEL_48:
    v27 = *a2;
    v26 = a2[1];
    v73 = v74;
LABEL_49:
    if (++v72 < (unint64_t)((v26 - v27) >> 5))
      continue;
    break;
  }
  if (v127 > 1 && !((((char *)v32 - (char *)*a1) >> 5) % (unint64_t)v127))
  {
    v32 -= 4;
    a1[1] = v32;
    if (a5)
      *(_QWORD *)(a5 + 8) -= 16;
  }
  v108 = v26 - 32;
  v109 = (unint64_t)a1[2];
  if ((unint64_t)v32 >= v109)
  {
    v112 = *a1;
    v113 = ((char *)v32 - (char *)*a1) >> 5;
    v114 = v113 + 1;
    if ((unint64_t)(v113 + 1) >> 59)
      sub_1BE6FB4B8();
    v115 = v109 - (_QWORD)v112;
    if (v115 >> 4 > v114)
      v114 = v115 >> 4;
    if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFE0)
      v116 = 0x7FFFFFFFFFFFFFFLL;
    else
      v116 = v114;
    if (v116)
    {
      if (v116 >> 59)
        sub_1BE61F100();
      v117 = (char *)operator new(32 * v116);
    }
    else
    {
      v117 = 0;
    }
    v118 = &v117[32 * v113];
    v119 = *((_OWORD *)v108 + 1);
    *(_OWORD *)v118 = *(_OWORD *)v108;
    *((_OWORD *)v118 + 1) = v119;
    v111 = (double *)(v118 + 32);
    if (v32 != v112)
    {
      do
      {
        v120 = *((_OWORD *)v32 - 2);
        *(_OWORD *)(v118 - 23) = *(_OWORD *)((char *)v32 - 23);
        *((_OWORD *)v118 - 2) = v120;
        v118 -= 32;
        v32 -= 4;
      }
      while (v32 != v112);
      v32 = v112;
    }
    *a1 = (double *)v118;
    a1[1] = v111;
    a1[2] = (double *)&v117[32 * v116];
    if (v32)
      operator delete(v32);
  }
  else
  {
    v110 = *((_OWORD *)v26 - 1);
    *(_OWORD *)v32 = *(_OWORD *)v108;
    *((_OWORD *)v32 + 1) = v110;
    v111 = v32 + 4;
  }
  a1[1] = v111;
  if (!a5)
    return;
  v58 = ((a2[1] - *a2) >> 5) - 1;
  v60 = *(_QWORD **)(a5 + 8);
  v121 = *(_QWORD *)(a5 + 16);
  if ((unint64_t)v60 < v121)
  {
LABEL_118:
    *v60 = a6;
    v60[1] = v58;
    v69 = v60 + 2;
    goto LABEL_132;
  }
  v61 = *(_QWORD **)a5;
  v122 = ((uint64_t)v60 - *(_QWORD *)a5) >> 4;
  v123 = v122 + 1;
  if ((unint64_t)(v122 + 1) >> 60)
    sub_1BE6FB4B8();
  v124 = v121 - (_QWORD)v61;
  if (v124 >> 3 > v123)
    v123 = v124 >> 3;
  if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0)
    v125 = 0xFFFFFFFFFFFFFFFLL;
  else
    v125 = v123;
  if (v125 >> 60)
    sub_1BE61F100();
  v126 = (char *)operator new(16 * v125);
  v67 = &v126[16 * v122];
  v68 = &v126[16 * v125];
  *(_QWORD *)v67 = a6;
  *((_QWORD *)v67 + 1) = v58;
  v69 = v67 + 16;
  if (v60 == v61)
  {
LABEL_129:
    v70 = v67;
    goto LABEL_130;
  }
  do
  {
    v70 = v67 - 16;
    *((_OWORD *)v67 - 1) = *((_OWORD *)v60 - 1);
    v60 -= 2;
    v67 -= 16;
  }
  while (v60 != v61);
LABEL_130:
  *(_QWORD *)a5 = v70;
  *(_QWORD *)(a5 + 8) = v69;
  *(_QWORD *)(a5 + 16) = v68;
  if (v61)
    operator delete(v61);
LABEL_132:
  *(_QWORD *)(a5 + 8) = v69;
}

void sub_1BE6F64C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float64x2_t CoreHandwriting::Rescaling::processInplace(uint64_t a1, uint64_t a2)
{
  float64x2_t **v2;
  float64x2_t **v3;
  float64x2_t *v4;
  float64x2_t *v5;
  float64x2_t v6;
  float64x2_t result;

  v2 = *(float64x2_t ***)a2;
  v3 = *(float64x2_t ***)(a2 + 8);
  while (v2 != v3)
  {
    v4 = *v2;
    v5 = v2[1];
    if (*v2 != v5)
    {
      v6 = *(float64x2_t *)(a1 + 8);
      do
      {
        *v4 = vmulq_f64(v6, *v4);
        v4 += 2;
      }
      while (v4 != v5);
    }
    v2 += 3;
  }
  result = vmulq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 48));
  *(float64x2_t *)(a2 + 48) = result;
  return result;
}

void CoreHandwriting::LeftToRightByCenterStrokeReordering::processInplace(CoreHandwriting::LeftToRightByCenterStrokeReordering *this, void **a2, CoreHandwriting::InkMapping *a3)
{
  double **v5;
  double **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  int64x2_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  int64x2_t v16;
  int64x2_t *v17;
  int64x2_t v18;
  int64x2_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  double **v25;
  double **v26;
  double *v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  double *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  double *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  double *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  char **v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char **v79;
  char *v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  void *v97;
  void *v98;
  char *v99;
  char *v100;
  void *v101;
  char *v102;
  void *v103;
  void *v104;
  char *v105;
  char *v106;
  void *v107;
  char *v108;
  void *v109;
  void *v110;
  CoreHandwriting::InkMapping *v111;
  void **v112;
  uint64_t *v113;
  unint64_t v114;
  double **v115;
  unint64_t v116;
  __int128 v117;
  uint64_t v118;
  void *__p;
  char *v120;
  uint64_t v121;
  void *v122;
  char *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  double *v127;
  void *v128;
  uint64_t *v129;
  uint64_t *v130;

  v5 = (double **)*a2;
  v6 = (double **)a2[1];
  v129 = 0;
  v130 = 0;
  v128 = 0;
  v7 = v6 - v5;
  v8 = 0xAAAAAAAAAAAAAAABLL * v7;
  v9 = (0xAAAAAAAAAAAAAAABLL * v7) >> 61;
  v10 = 0x5555555555555558 * v7;
  if (v6 == v5)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_10;
  }
  if (v9)
    sub_1BE61F930();
  v11 = (int64x2_t *)operator new(0x5555555555555558 * v7);
  v128 = v11;
  v130 = &v11->i64[v8];
  bzero(v11, v10);
  v12 = &v11->i64[v10 / 8];
  v129 = &v11->i64[v10 / 8];
  if (v10 - 8 < 0x18)
  {
    v13 = 0;
    v14 = (uint64_t *)v11;
    do
LABEL_9:
      *v14++ = v13++;
    while (v14 != v12);
    goto LABEL_10;
  }
  v15 = ((v10 - 8) >> 3) + 1;
  v13 = v15 & 0x3FFFFFFFFFFFFFFCLL;
  v14 = &v11->i64[v15 & 0x3FFFFFFFFFFFFFFCLL];
  v16 = (int64x2_t)xmmword_1BE8D5080;
  v17 = v11 + 1;
  v18 = vdupq_n_s64(2uLL);
  v19 = vdupq_n_s64(4uLL);
  v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v17[-1] = v16;
    *v17 = vaddq_s64(v16, v18);
    v16 = vaddq_s64(v16, v19);
    v17 += 2;
    v20 -= 4;
  }
  while (v20);
  if (v15 != v13)
    goto LABEL_9;
LABEL_10:
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v111 = a3;
  v112 = a2;
  v113 = v12;
  if (v6 == v5)
  {
    v115 = v5;
    goto LABEL_55;
  }
  if (v9)
    sub_1BE61F930();
  v21 = (double *)operator new(v10);
  v22 = v21;
  v23 = &v21[v8];
  v125 = v21;
  v126 = (uint64_t)v21;
  v127 = v23;
  v115 = v5;
  if (v6 != v5)
  {
    v24 = v21;
    v25 = v5;
    v26 = v6;
    do
    {
      while (1)
      {
        v27 = *v25;
        v28 = v25[1];
        if (*v25 != v28)
          break;
        v33 = 0.0 * 0.5;
        if (v22 >= v23)
          goto LABEL_27;
LABEL_16:
        *v22++ = v33;
        v126 = (uint64_t)v22;
        v25 += 3;
        v6 = v26;
        if (v25 == v26)
          goto LABEL_55;
      }
      v29 = 1.79769313e308;
      v30 = -1.79769313e308;
      do
      {
        v31 = *v27;
        v27 += 4;
        v32 = v31;
        if (v29 > v31)
          v29 = v32;
        if (v30 < v32)
          v30 = v32;
      }
      while (v27 != v28);
      v33 = (v30 + v29) * 0.5;
      if (v22 < v23)
        goto LABEL_16;
LABEL_27:
      v34 = v22 - v24;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        sub_1BE61F930();
      if (((char *)v23 - (char *)v24) >> 2 > v35)
        v35 = ((char *)v23 - (char *)v24) >> 2;
      if ((unint64_t)((char *)v23 - (char *)v24) >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
      {
        if (v36 >> 61)
          sub_1BE61F100();
        v37 = operator new(8 * v36);
        v38 = (double *)&v37[8 * v34];
        *v38 = v33;
        v39 = (uint64_t)(v38 + 1);
        v40 = (char *)v22 - (char *)v24;
        if (v22 == v24)
          goto LABEL_41;
      }
      else
      {
        v37 = 0;
        v38 = (double *)(8 * v34);
        *(double *)(8 * v34) = v33;
        v39 = 8 * v34 + 8;
        v40 = (char *)v22 - (char *)v24;
        if (v22 == v24)
          goto LABEL_41;
      }
      v41 = v40 - 8;
      if (v41 >= 0x168)
      {
        v44 = ((char *)(v22 - 1) - (char *)v24) & 0xFFFFFFFFFFFFFFF8;
        if (&v37[(char *)v22 - (char *)v24 - 8 - v44] > &v37[(char *)v22 - (char *)v24 - 8])
        {
          v42 = v22;
        }
        else if ((double *)((char *)v22 - v44 - 8) > v22 - 1)
        {
          v42 = v22;
        }
        else if ((unint64_t)((char *)v24 - v37) >= 0x20)
        {
          v45 = (v41 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v42 = &v22[v46 / 0xFFFFFFFFFFFFFFF8];
          v38 = (double *)((char *)v38 - v46);
          v47 = &v37[8 * v34 - 16];
          v48 = v22 - 2;
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 4;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_41;
        }
        else
        {
          v42 = v22;
        }
      }
      else
      {
        v42 = v22;
      }
      do
      {
        v43 = *((_QWORD *)v42-- - 1);
        *((_QWORD *)v38-- - 1) = v43;
      }
      while (v42 != v24);
LABEL_41:
      v23 = (double *)&v37[8 * v36];
      v125 = v38;
      v127 = v23;
      if (v24)
        operator delete(v24);
      v24 = v38;
      v126 = v39;
      v25 += 3;
      v22 = (double *)v39;
      v6 = v26;
    }
    while (v25 != v26);
  }
LABEL_55:
  v122 = &v125;
  v51 = 126 - 2 * __clz(((char *)v113 - (char *)v11) >> 3);
  if (v6 == v115)
    v52 = 0;
  else
    v52 = v51;
  sub_1BE6FB5CC((uint64_t)v11, v113, (uint64_t **)&v122, v52, 1);
  v122 = 0;
  v123 = 0;
  v124 = 0;
  sub_1BE6F6E10((uint64_t)&v122, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3));
  if (v6 != v115)
  {
    v53 = v123;
    do
    {
      v54 = v11->i64[0];
      v55 = *a2;
      v56 = (uint64_t)*a2 + 24 * v11->i64[0];
      if ((unint64_t)v53 < v124)
      {
        *(_QWORD *)v53 = 0;
        *((_QWORD *)v53 + 1) = 0;
        *((_QWORD *)v53 + 2) = 0;
        *(_OWORD *)v53 = *(_OWORD *)v56;
        *((_QWORD *)v53 + 2) = v55[3 * v54 + 2];
        *(_QWORD *)v56 = 0;
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v56 + 16) = 0;
        v53 += 24;
      }
      else
      {
        v53 = sub_1BE6FC420((char **)&v122, v56);
      }
      v123 = v53;
      v11 = (int64x2_t *)((char *)v11 + 8);
    }
    while (v11 != (int64x2_t *)v113);
  }
  if (&v122 != a2)
    sub_1BE6FC56C((uint64_t)a2, (char **)v122, (uint64_t)v123, 0xAAAAAAAAAAAAAAABLL * ((v123 - (_BYTE *)v122) >> 3));
  if (v111)
  {
    __p = 0;
    v120 = 0;
    v121 = 0;
    v57 = (char *)*a2;
    if (a2[1] != *a2)
    {
      v58 = 0;
      while (1)
      {
        v59 = &v57[24 * v58];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v114 = v58 + 1;
        v116 = v58;
        v62 = (char *)__p;
        v63 = 0xAAAAAAAAAAAAAAABLL * ((v120 - (_BYTE *)__p) >> 3);
        if (v63 <= v58)
        {
          sub_1BE7CAFF4((uint64_t)&__p, v114 - v63);
          v62 = (char *)__p;
          v58 = v116;
        }
        v64 = v60 - v61;
        v65 = (v60 - v61) >> 5;
        v66 = &v62[24 * v58];
        v67 = v66 + 16;
        v68 = *(char **)v66;
        if (v65 > (uint64_t)(*((_QWORD *)v66 + 2) - *(_QWORD *)v66) >> 4)
        {
          if ((v64 & 0x8000000000000000) != 0)
            sub_1BE6FB4B8();
          v69 = &v62[24 * v58];
          v72 = (char *)*((_QWORD *)v69 + 1);
          v70 = (char **)(v69 + 8);
          v71 = v72;
          v73 = (char *)operator new(v64 >> 1);
          v74 = &v73[(v72 - v68) & 0xFFFFFFFFFFFFFFF0];
          v75 = v74;
          if (v72 != v68)
          {
            v76 = &v73[(v71 - v68) & 0xFFFFFFFFFFFFFFF0];
            do
            {
              v75 = v76 - 16;
              *((_OWORD *)v76 - 1) = *((_OWORD *)v71 - 1);
              v71 -= 16;
              v76 -= 16;
            }
            while (v71 != v68);
          }
          *(_QWORD *)v66 = v75;
          *v70 = v74;
          *v67 = &v73[16 * v65];
          v58 = v116;
          if (v68)
          {
            operator delete(v68);
            v58 = v116;
          }
        }
        if (v60 != v61)
          break;
LABEL_69:
        v57 = (char *)*v112;
        v58 = v114;
        if (v114 >= 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v112[1] - (_BYTE *)*v112) >> 3))
          goto LABEL_101;
      }
      v77 = 0;
      v78 = &v62[24 * v58];
      v81 = (char *)*((_QWORD *)v78 + 1);
      v79 = (char **)(v78 + 8);
      v80 = v81;
      if (v65 <= 1)
        v82 = 1;
      else
        v82 = v65;
      v83 = v128;
      while (1)
      {
        if ((unint64_t)v80 < *v67)
        {
          *(_QWORD *)v80 = v83[v58];
          *((_QWORD *)v80 + 1) = v77;
          v80 += 16;
        }
        else
        {
          v84 = *(char **)v66;
          v85 = (uint64_t)&v80[-*(_QWORD *)v66] >> 4;
          v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 60)
            sub_1BE6FB4B8();
          v87 = *v67 - (_QWORD)v84;
          if (v87 >> 3 > v86)
            v86 = v87 >> 3;
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
            v88 = 0xFFFFFFFFFFFFFFFLL;
          else
            v88 = v86;
          if (v88 >> 60)
            sub_1BE61F100();
          v89 = (char *)operator new(16 * v88);
          v58 = v116;
          v90 = &v89[16 * v85];
          *(_QWORD *)v90 = v83[v116];
          *((_QWORD *)v90 + 1) = v77;
          if (v80 != v84)
          {
            v91 = &v89[16 * v85];
            do
            {
              v92 = v91 - 16;
              *((_OWORD *)v91 - 1) = *((_OWORD *)v80 - 1);
              v80 -= 16;
              v91 -= 16;
            }
            while (v80 != v84);
            *(_QWORD *)v66 = v92;
            v80 = v90 + 16;
            *v79 = v90 + 16;
            *v67 = &v89[16 * v88];
            if (!v84)
              goto LABEL_85;
LABEL_100:
            operator delete(v84);
            v58 = v116;
            goto LABEL_85;
          }
          *(_QWORD *)v66 = v90;
          v80 = v90 + 16;
          *v79 = v90 + 16;
          *v67 = &v89[16 * v88];
          if (v84)
            goto LABEL_100;
        }
LABEL_85:
        *v79 = v80;
        if (++v77 == v82)
          goto LABEL_69;
      }
    }
LABEL_101:
    CoreHandwriting::InkMapping::composeWith(v111, (const CoreHandwriting::InkMapping *)&__p, &v117);
    v93 = *(char **)v111;
    if (*(_QWORD *)v111)
    {
      v94 = (char *)*((_QWORD *)v111 + 1);
      v95 = *(char **)v111;
      if (v94 != v93)
      {
        v96 = (char *)*((_QWORD *)v111 + 1);
        do
        {
          v98 = (void *)*((_QWORD *)v96 - 3);
          v96 -= 24;
          v97 = v98;
          if (v98)
          {
            *((_QWORD *)v94 - 2) = v97;
            operator delete(v97);
          }
          v94 = v96;
        }
        while (v96 != v93);
        v95 = *(char **)v111;
      }
      *((_QWORD *)v111 + 1) = v93;
      operator delete(v95);
      *(_QWORD *)v111 = 0;
      *((_QWORD *)v111 + 1) = 0;
      *((_QWORD *)v111 + 2) = 0;
    }
    *(_OWORD *)v111 = v117;
    v99 = (char *)__p;
    *((_QWORD *)v111 + 2) = v118;
    if (v99)
    {
      v100 = v120;
      v101 = v99;
      if (v120 != v99)
      {
        v102 = v120;
        do
        {
          v104 = (void *)*((_QWORD *)v102 - 3);
          v102 -= 24;
          v103 = v104;
          if (v104)
          {
            *((_QWORD *)v100 - 2) = v103;
            operator delete(v103);
          }
          v100 = v102;
        }
        while (v102 != v99);
        v101 = __p;
      }
      v120 = v99;
      operator delete(v101);
    }
  }
  v105 = (char *)v122;
  if (v122)
  {
    v106 = v123;
    v107 = v122;
    if (v123 != v122)
    {
      v108 = v123;
      do
      {
        v110 = (void *)*((_QWORD *)v108 - 3);
        v108 -= 24;
        v109 = v110;
        if (v110)
        {
          *((_QWORD *)v106 - 2) = v109;
          operator delete(v109);
        }
        v106 = v108;
      }
      while (v108 != v105);
      v107 = v122;
    }
    v123 = v105;
    operator delete(v107);
  }
  if (v125)
  {
    v126 = (uint64_t)v125;
    operator delete(v125);
  }
  if (v128)
    operator delete(v128);
}

void sub_1BE6F6D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  sub_1BE63CEBC(&a16);
  sub_1BE63CEBC(&a19);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void sub_1BE6F6E10(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE6FB4B8();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void CoreHandwriting::RightToLeftByHorizontalOverlapReordering::processInplace(CoreHandwriting::RightToLeftByHorizontalOverlapReordering *this, uint64_t **a2, CoreHandwriting::InkMapping *a3, int64x2_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  size_t v8;
  int64x2_t *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  int64x2_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t *i;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  double *v34;
  double *v35;
  __int128 v36;
  double *v37;
  const std::nothrow_t *v38;
  unint64_t v39;
  char *v40;
  BOOL v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  char *v59;
  char **v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char **v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  char *v89;
  char *v90;
  void *v91;
  char *v92;
  void *v93;
  void *v94;
  char *v95;
  char *v96;
  void *v97;
  char *v98;
  void *v99;
  void *v100;
  CoreHandwriting::Ink *v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  void *__p;
  char *v109;
  uint64_t v110;
  void *v111;
  char *v112;
  unint64_t v113;
  void *v114;
  void *v115;
  double *v116;
  void *v117;
  uint64_t *v118;
  uint64_t *v119;

  v5 = *a2;
  v6 = a2[1];
  v118 = 0;
  v119 = 0;
  v117 = 0;
  v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5);
  if (v6 == v5)
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_10;
  }
  if (v7 >> 61)
    sub_1BE61F930();
  v8 = 0x5555555555555558 * (v6 - v5);
  v9 = (int64x2_t *)operator new(v8);
  v117 = v9;
  v119 = &v9->i64[v8 / 8];
  bzero(v9, v8);
  v10 = &v9->i8[v8];
  v118 = &v9->i64[v8 / 8];
  if (v8 - 8 < 0x18)
  {
    v11 = 0;
    v12 = (char *)v9;
    do
    {
LABEL_9:
      *(_QWORD *)v12 = v11;
      v12 += 8;
      ++v11;
    }
    while (v12 != v10);
    goto LABEL_10;
  }
  v13 = ((v8 - 8) >> 3) + 1;
  v11 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  v12 = &v9->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
  a4 = (int64x2_t)xmmword_1BE8D5080;
  v14 = v9 + 1;
  v15 = vdupq_n_s64(2uLL);
  v16 = vdupq_n_s64(4uLL);
  v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v14[-1] = a4;
    *v14 = vaddq_s64(a4, v15);
    a4 = vaddq_s64(a4, v16);
    v14 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v13 != v11)
    goto LABEL_9;
LABEL_10:
  v114 = 0;
  v115 = 0;
  v116 = 0;
  if (v6 == v5)
  {
    v102 = (CoreHandwriting::Ink *)a2;
    v104 = v5;
    goto LABEL_49;
  }
  if (v7 >> 59)
    sub_1BE6FB4B8();
  v18 = (double *)operator new(0x5555555555555560 * (v6 - v5));
  v19 = v18;
  v20 = &v18[0xAAAAAAAAAAAAAACLL * (v6 - v5)];
  v114 = v18;
  v115 = v18;
  v116 = v20;
  v102 = (CoreHandwriting::Ink *)a2;
  v104 = v5;
  if (v6 != v5)
  {
    v21 = v18;
    for (i = v104; i != v6; i += 3)
    {
      while (1)
      {
        v23 = *i;
        v24 = i[1];
        if (*i != v24)
          break;
        v25 = 1.79769313e308;
        v26 = -1.79769313e308;
        v27 = -1.79769313e308;
        v28 = 1.79769313e308;
        if (v19 >= v20)
          goto LABEL_31;
LABEL_16:
        *v19 = v28;
        v19[1] = v27;
        v19[2] = v25;
        v19[3] = v26;
        v19 += 4;
        v115 = v19;
        i += 3;
        if (i == v6)
          goto LABEL_49;
      }
      v25 = 1.79769313e308;
      v26 = -1.79769313e308;
      v27 = -1.79769313e308;
      v28 = 1.79769313e308;
      do
      {
        a4.i64[0] = *(_QWORD *)v23;
        v29 = *(double *)(v23 + 8);
        v23 += 32;
        if (v28 > *(double *)a4.i64)
          v28 = *(double *)a4.i64;
        if (v27 < *(double *)a4.i64)
          v27 = *(double *)a4.i64;
        if (v25 > v29)
          v25 = v29;
        if (v26 < v29)
          v26 = v29;
      }
      while (v23 != v24);
      if (v19 < v20)
        goto LABEL_16;
LABEL_31:
      v30 = ((char *)v19 - (char *)v21) >> 5;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 59)
        sub_1BE6FB4B8();
      if (((char *)v20 - (char *)v21) >> 4 > v31)
        v31 = ((char *)v20 - (char *)v21) >> 4;
      if ((unint64_t)((char *)v20 - (char *)v21) >= 0x7FFFFFFFFFFFFFE0)
        v32 = 0x7FFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        if (v32 >> 59)
          sub_1BE61F100();
        v33 = (char *)operator new(32 * v32);
        v34 = (double *)&v33[32 * v30];
        *v34 = v28;
        v34[1] = v27;
        v34[2] = v25;
        v34[3] = v26;
        if (v19 == v21)
        {
LABEL_47:
          v37 = v34;
          v20 = (double *)&v33[32 * v32];
          v19 = v34 + 4;
          v114 = v34;
          v116 = v20;
          if (!v21)
            goto LABEL_44;
          goto LABEL_43;
        }
      }
      else
      {
        v33 = 0;
        v34 = (double *)(32 * v30);
        *v34 = v28;
        v34[1] = v27;
        v34[2] = v25;
        v34[3] = v26;
        if (v19 == v21)
          goto LABEL_47;
      }
      v35 = v34;
      do
      {
        a4 = *(int64x2_t *)(v19 - 4);
        v36 = *((_OWORD *)v19 - 1);
        v37 = v35 - 4;
        *((int64x2_t *)v35 - 2) = a4;
        *((_OWORD *)v35 - 1) = v36;
        v19 -= 4;
        v35 -= 4;
      }
      while (v19 != v21);
      v20 = (double *)&v33[32 * v32];
      v19 = v34 + 4;
      v114 = v37;
      v116 = v20;
      if (!v21)
        goto LABEL_44;
LABEL_43:
      operator delete(v21);
LABEL_44:
      v21 = v37;
      v115 = v19;
    }
  }
LABEL_49:
  v111 = &v114;
  if (v10 - (char *)v9 < 1025)
  {
LABEL_53:
    sub_1BE6FC92C(v9->i8, v10, (uint64_t **)&v111, (v10 - (char *)v9) >> 3, 0, 0, (__n128)a4);
  }
  else
  {
    v38 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v39 = (v10 - (char *)v9) >> 3;
    while (1)
    {
      v40 = (char *)operator new(8 * v39, v38);
      if (v40)
        break;
      v41 = v39 > 1;
      v39 >>= 1;
      if (!v41)
        goto LABEL_53;
    }
    v42 = v40;
    sub_1BE6FC92C(v9->i8, v10, (uint64_t **)&v111, (v10 - (char *)v9) >> 3, v40, v39, (__n128)a4);
    operator delete(v42);
  }
  v111 = 0;
  v112 = 0;
  v113 = 0;
  sub_1BE6F6E10((uint64_t)&v111, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v102 + 1) - *(_QWORD *)v102) >> 3));
  if (v6 != v104)
  {
    v43 = v112;
    do
    {
      v44 = v9->i64[0];
      v45 = *(char **)v102;
      v46 = *(_QWORD *)v102 + 24 * v9->i64[0];
      if ((unint64_t)v43 < v113)
      {
        *(_QWORD *)v43 = 0;
        *((_QWORD *)v43 + 1) = 0;
        *((_QWORD *)v43 + 2) = 0;
        *(_OWORD *)v43 = *(_OWORD *)v46;
        *((_QWORD *)v43 + 2) = *(_QWORD *)&v45[24 * v44 + 16];
        *(_QWORD *)v46 = 0;
        *(_QWORD *)(v46 + 8) = 0;
        *(_QWORD *)(v46 + 16) = 0;
        v43 += 24;
      }
      else
      {
        v43 = sub_1BE6FC420((char **)&v111, v46);
      }
      v112 = v43;
      v9 = (int64x2_t *)((char *)v9 + 8);
    }
    while (v9 != (int64x2_t *)v10);
  }
  if (&v111 != (void **)v102)
    sub_1BE6FC56C((uint64_t)v102, (char **)v111, (uint64_t)v112, 0xAAAAAAAAAAAAAAABLL * ((v112 - (_BYTE *)v111) >> 3));
  if (a3)
  {
    __p = 0;
    v109 = 0;
    v110 = 0;
    v47 = *(char **)v102;
    if (*((_QWORD *)v102 + 1) != *(_QWORD *)v102)
    {
      v48 = 0;
      while (1)
      {
        v49 = &v47[24 * v48];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v103 = v48 + 1;
        v105 = v48;
        v52 = (char *)__p;
        v53 = 0xAAAAAAAAAAAAAAABLL * ((v109 - (_BYTE *)__p) >> 3);
        if (v53 <= v48)
        {
          sub_1BE7CAFF4((uint64_t)&__p, v103 - v53);
          v52 = (char *)__p;
          v48 = v105;
        }
        v54 = v50 - v51;
        v55 = (v50 - v51) >> 5;
        v56 = &v52[24 * v48];
        v57 = v56 + 16;
        v58 = *(char **)v56;
        if (v55 > (uint64_t)(*((_QWORD *)v56 + 2) - *(_QWORD *)v56) >> 4)
        {
          if ((v54 & 0x8000000000000000) != 0)
            sub_1BE6FB4B8();
          v59 = &v52[24 * v48];
          v62 = (char *)*((_QWORD *)v59 + 1);
          v60 = (char **)(v59 + 8);
          v61 = v62;
          v63 = (char *)operator new(v54 >> 1);
          v64 = &v63[(v62 - v58) & 0xFFFFFFFFFFFFFFF0];
          v65 = v64;
          if (v62 != v58)
          {
            v66 = &v63[(v61 - v58) & 0xFFFFFFFFFFFFFFF0];
            do
            {
              v65 = v66 - 16;
              *((_OWORD *)v66 - 1) = *((_OWORD *)v61 - 1);
              v61 -= 16;
              v66 -= 16;
            }
            while (v61 != v58);
          }
          *(_QWORD *)v56 = v65;
          *v60 = v64;
          *v57 = &v63[16 * v55];
          v48 = v105;
          if (v58)
          {
            operator delete(v58);
            v48 = v105;
          }
        }
        if (v50 != v51)
          break;
LABEL_66:
        v47 = *(char **)v102;
        v48 = v103;
        if (v103 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v102 + 1) - *(_QWORD *)v102) >> 3))
          goto LABEL_98;
      }
      v67 = 0;
      v68 = &v52[24 * v48];
      v71 = (char *)*((_QWORD *)v68 + 1);
      v69 = (char **)(v68 + 8);
      v70 = v71;
      if (v55 <= 1)
        v72 = 1;
      else
        v72 = v55;
      v73 = v117;
      while (1)
      {
        if ((unint64_t)v70 < *v57)
        {
          *(_QWORD *)v70 = v73[v48];
          *((_QWORD *)v70 + 1) = v67;
          v70 += 16;
        }
        else
        {
          v74 = *(char **)v56;
          v75 = (uint64_t)&v70[-*(_QWORD *)v56] >> 4;
          v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 60)
            sub_1BE6FB4B8();
          v77 = *v57 - (_QWORD)v74;
          if (v77 >> 3 > v76)
            v76 = v77 >> 3;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
            v78 = 0xFFFFFFFFFFFFFFFLL;
          else
            v78 = v76;
          if (v78 >> 60)
            sub_1BE61F100();
          v79 = (char *)operator new(16 * v78);
          v48 = v105;
          v80 = &v79[16 * v75];
          *(_QWORD *)v80 = v73[v105];
          *((_QWORD *)v80 + 1) = v67;
          if (v70 != v74)
          {
            v81 = &v79[16 * v75];
            do
            {
              v82 = v81 - 16;
              *((_OWORD *)v81 - 1) = *((_OWORD *)v70 - 1);
              v70 -= 16;
              v81 -= 16;
            }
            while (v70 != v74);
            *(_QWORD *)v56 = v82;
            v70 = v80 + 16;
            *v69 = v80 + 16;
            *v57 = &v79[16 * v78];
            if (!v74)
              goto LABEL_82;
LABEL_97:
            operator delete(v74);
            v48 = v105;
            goto LABEL_82;
          }
          *(_QWORD *)v56 = v80;
          v70 = v80 + 16;
          *v69 = v80 + 16;
          *v57 = &v79[16 * v78];
          if (v74)
            goto LABEL_97;
        }
LABEL_82:
        *v69 = v70;
        if (++v67 == v72)
          goto LABEL_66;
      }
    }
LABEL_98:
    CoreHandwriting::InkMapping::composeWith(a3, (const CoreHandwriting::InkMapping *)&__p, &v106);
    v83 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v84 = *((_QWORD *)a3 + 1);
      v85 = *(void **)a3;
      if (v84 != v83)
      {
        v86 = *((_QWORD *)a3 + 1);
        do
        {
          v88 = *(void **)(v86 - 24);
          v86 -= 24;
          v87 = v88;
          if (v88)
          {
            *(_QWORD *)(v84 - 16) = v87;
            operator delete(v87);
          }
          v84 = v86;
        }
        while (v86 != v83);
        v85 = *(void **)a3;
      }
      *((_QWORD *)a3 + 1) = v83;
      operator delete(v85);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *(_OWORD *)a3 = v106;
    v89 = (char *)__p;
    *((_QWORD *)a3 + 2) = v107;
    if (v89)
    {
      v90 = v109;
      v91 = v89;
      if (v109 != v89)
      {
        v92 = v109;
        do
        {
          v94 = (void *)*((_QWORD *)v92 - 3);
          v92 -= 24;
          v93 = v94;
          if (v94)
          {
            *((_QWORD *)v90 - 2) = v93;
            operator delete(v93);
          }
          v90 = v92;
        }
        while (v92 != v89);
        v91 = __p;
      }
      v109 = v89;
      operator delete(v91);
    }
  }
  v95 = (char *)v111;
  if (v111)
  {
    v96 = v112;
    v97 = v111;
    if (v112 != v111)
    {
      v98 = v112;
      do
      {
        v100 = (void *)*((_QWORD *)v98 - 3);
        v98 -= 24;
        v99 = v100;
        if (v100)
        {
          *((_QWORD *)v96 - 2) = v99;
          operator delete(v99);
        }
        v96 = v98;
      }
      while (v98 != v95);
      v97 = v111;
    }
    v112 = v95;
    operator delete(v97);
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  if (v117)
    operator delete(v117);
}

void sub_1BE6F7760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  sub_1BE63CEBC(&a16);
  sub_1BE63CEBC(&a19);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void CoreHandwriting::LegacyStrokePadding::processInplace(CoreHandwriting::LegacyStrokePadding *this, char ***a2, CoreHandwriting::InkMapping *a3)
{
  char **v3;
  char **v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v4 = *a2;
  v3 = a2[1];
  if (*a2 != v3 - 3)
  {
    LODWORD(v6) = *((_DWORD *)this + 2);
    do
    {
      v7 = *v4;
      v8 = v4[1];
      v10 = v4 == *a2;
      v9 = v8 - *v4;
      v11 = v9 >> 5;
      if (v4 == *a2)
        v12 = v11 + 1;
      else
        v12 = v9 >> 5;
      if (v12 % (int)v6)
      {
        do
        {
          v13 = (unint64_t)v4[2];
          if ((unint64_t)v8 < v13)
          {
            *((_QWORD *)v8 + 2) = 0;
            *(_OWORD *)v8 = 0uLL;
            v8[24] = 1;
            v8 += 32;
          }
          else
          {
            v14 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 59)
              sub_1BE6FB4B8();
            v15 = v13 - (_QWORD)v7;
            if (v15 >> 4 > v14)
              v14 = v15 >> 4;
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
              v16 = 0x7FFFFFFFFFFFFFFLL;
            else
              v16 = v14;
            if (v16)
            {
              if (v16 >> 59)
                sub_1BE61F100();
              v17 = (char *)operator new(32 * v16);
            }
            else
            {
              v17 = 0;
            }
            v18 = &v17[32 * v11];
            *(_OWORD *)v18 = 0uLL;
            *((_QWORD *)v18 + 2) = 0;
            v18[24] = 1;
            v19 = v18;
            if (v8 != v7)
            {
              do
              {
                v20 = *((_OWORD *)v8 - 2);
                *(_OWORD *)(v19 - 23) = *(_OWORD *)(v8 - 23);
                *((_OWORD *)v19 - 2) = v20;
                v19 -= 32;
                v8 -= 32;
              }
              while (v8 != v7);
              v7 = *v4;
            }
            v8 = v18 + 32;
            *v4 = v19;
            v4[1] = v18 + 32;
            v4[2] = &v17[32 * v16];
            if (v7)
              operator delete(v7);
          }
          v4[1] = v8;
          v7 = *v4;
          v11 = (v8 - *v4) >> 5;
          v6 = *((int *)this + 2);
        }
        while ((v11 + v10) % v6);
        v3 = a2[1];
      }
      v4 += 3;
    }
    while (v4 != v3 - 3);
  }
}

void CoreHandwriting::SimpleStrokePadding::processInplace(CoreHandwriting::SimpleStrokePadding *this, char ***a2, CoreHandwriting::InkMapping *a3)
{
  char **v3;
  char **v4;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;

  v4 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    LODWORD(v7) = *((_DWORD *)this + 2);
    do
    {
      v8 = *v4;
      v9 = v4[1];
      v10 = (v9 - *v4) >> 5;
      if (v10 % (int)v7)
      {
        do
        {
          v11 = (unint64_t)v4[2];
          if ((unint64_t)v9 < v11)
          {
            *((_QWORD *)v9 + 2) = 0;
            *(_OWORD *)v9 = 0uLL;
            v9[24] = 1;
            v9 += 32;
          }
          else
          {
            v12 = v10 + 1;
            if ((v10 + 1) >> 59)
              sub_1BE6FB4B8();
            v13 = v11 - (_QWORD)v8;
            if (v13 >> 4 > v12)
              v12 = v13 >> 4;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
              v14 = 0x7FFFFFFFFFFFFFFLL;
            else
              v14 = v12;
            if (v14)
            {
              if (v14 >> 59)
                sub_1BE61F100();
              v15 = (char *)operator new(32 * v14);
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[32 * v10];
            *(_OWORD *)v16 = 0uLL;
            *((_QWORD *)v16 + 2) = 0;
            v16[24] = 1;
            v17 = v16;
            if (v9 != v8)
            {
              do
              {
                v18 = *((_OWORD *)v9 - 2);
                *(_OWORD *)(v17 - 23) = *(_OWORD *)(v9 - 23);
                *((_OWORD *)v17 - 2) = v18;
                v17 -= 32;
                v9 -= 32;
              }
              while (v9 != v8);
              v8 = *v4;
            }
            v9 = v16 + 32;
            *v4 = v17;
            v4[1] = v16 + 32;
            v4[2] = &v15[32 * v14];
            if (v8)
              operator delete(v8);
          }
          v4[1] = v9;
          v8 = *v4;
          v10 = (v9 - *v4) >> 5;
          v7 = *((int *)this + 2);
        }
        while (v10 % v7);
        v3 = a2[1];
      }
      v4 += 3;
    }
    while (v4 != v3);
  }
}

void CoreHandwriting::InkPadding::processInplace(CoreHandwriting::InkPadding *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  const double *v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  void **v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  float64x2x3_t v34;
  float64x2x3_t v35;

  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 == v4)
  {
    v6 = 0;
  }
  else
  {
    v5 = v4 - v3 - 24;
    if (v5 >= 0x60)
    {
      v7 = v5 / 0x18 + 1;
      v8 = v7 & 3;
      if ((v7 & 3) == 0)
        v8 = 4;
      v9 = v7 - v8;
      v10 = v3 + 24 * v9;
      v11 = 0uLL;
      v12 = 0uLL;
      do
      {
        v13 = v3 + 96;
        v34 = vld3q_f64((const double *)v3);
        v14 = (const double *)(v3 + 48);
        v11 = vsraq_n_s64(v11, vsubq_s64((int64x2_t)v34.val[1], (int64x2_t)v34.val[0]), 5uLL);
        v35 = vld3q_f64(v14);
        v12 = vsraq_n_s64(v12, vsubq_s64((int64x2_t)v35.val[1], (int64x2_t)v35.val[0]), 5uLL);
        v3 = v13;
        v9 -= 4;
      }
      while (v9);
      v6 = vaddvq_s64(vaddq_s64(v12, v11));
      v3 = v10;
    }
    else
    {
      v6 = 0;
    }
    do
    {
      v15 = *(double *)v3;
      v16 = *(_QWORD *)(v3 + 8);
      v3 += 24;
      v6 += (v16 - *(_QWORD *)&v15) >> 5;
    }
    while (v3 != v4);
  }
  v17 = *((int *)this + 2);
  v18 = v6 % v17;
  if (v18)
  {
    v19 = v17 - v18;
    if ((int)v17 - v18 >= 1)
    {
      v20 = 0;
      v21 = (void **)(v4 - 24);
      v22 = *(char **)(v4 - 16);
      do
      {
        v24 = *(_QWORD *)(v4 - 8);
        if ((unint64_t)v22 < v24)
        {
          *((_QWORD *)v22 + 2) = 0;
          *(_OWORD *)v22 = 0uLL;
          v22[24] = 1;
          v23 = v22 + 32;
        }
        else
        {
          v25 = (char *)*v21;
          v26 = (v22 - (_BYTE *)*v21) >> 5;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 59)
            sub_1BE6FB4B8();
          v28 = v24 - (_QWORD)v25;
          if (v28 >> 4 > v27)
            v27 = v28 >> 4;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0)
            v29 = 0x7FFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            if (v29 >> 59)
              sub_1BE61F100();
            v30 = (char *)operator new(32 * v29);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[32 * v26];
          *(_OWORD *)v31 = 0uLL;
          *((_QWORD *)v31 + 2) = 0;
          v31[24] = 1;
          v32 = v31;
          if (v22 != v25)
          {
            do
            {
              v33 = *((_OWORD *)v22 - 2);
              *(_OWORD *)(v32 - 23) = *(_OWORD *)(v22 - 23);
              *((_OWORD *)v32 - 2) = v33;
              v32 -= 32;
              v22 -= 32;
            }
            while (v22 != v25);
            v22 = (char *)*v21;
          }
          v23 = v31 + 32;
          *(_QWORD *)(v4 - 24) = v32;
          *(_QWORD *)(v4 - 16) = v31 + 32;
          *(_QWORD *)(v4 - 8) = &v30[32 * v29];
          if (v22)
            operator delete(v22);
        }
        *(_QWORD *)(v4 - 16) = v23;
        ++v20;
        v22 = v23;
      }
      while (v20 < v19);
    }
  }
}

uint64_t CoreHandwriting::AnchorClipping::processInplace(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v2 = *(double *)(result + 8);
  v3 = -v2;
  v4 = *(double *)(a2 + 48);
  v5 = *(double *)(a2 + 56);
  if (v2 >= v4)
    v2 = *(double *)(a2 + 48);
  if (v4 < v3)
    v2 = v3;
  *(double *)(a2 + 48) = v2;
  v6 = *(double *)(result + 8);
  if (v6 >= v5)
    v6 = v5;
  if (v5 < v3)
    v6 = v3;
  *(double *)(a2 + 56) = v6;
  return result;
}

void CoreHandwriting::SpatialResampling::processInplace(CoreHandwriting::SpatialResampling *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  uint64_t v4;
  uint64_t v7;
  char **v8;
  char **v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  void *__p;
  char *v35;
  uint64_t v36;

  __p = 0;
  v35 = 0;
  v36 = 0;
  v33 = 0;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1))
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 1;
    do
    {
      v11 = v4 + v7;
      if (*(_QWORD *)(v4 + v7) != *(_QWORD *)(v4 + v7 + 8))
      {
        if (a3)
        {
          v12 = (_QWORD *)operator new();
          *v12 = 0;
          v12[1] = 0;
          v12[2] = 0;
          v33 = v12;
          if (v9)
          {
            v13 = *v9;
            if (*v9)
            {
              v9[1] = v13;
              operator delete(v13);
            }
            MEMORY[0x1C3B812EC](v9, 0x20C40960023A9);
            v12 = v33;
          }
        }
        else
        {
          v12 = v9;
        }
        sub_1BE6F5BCC((double **)&v31, (char **)(v4 + v7), *((_DWORD *)this + 5), *((_DWORD *)this + 4), (uint64_t)v12, v10 - 1, *((double *)this + 1));
        v14 = *(void **)v11;
        if (*(_QWORD *)v11)
        {
          *(_QWORD *)(v11 + 8) = v14;
          operator delete(v14);
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = 0;
        }
        v15 = v4 + v7;
        *(_OWORD *)v15 = v31;
        *(_QWORD *)(v15 + 16) = v32;
        v8 = (char **)v33;
        if (v33)
        {
          v16 = (char *)__p;
          v17 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (_BYTE *)__p) >> 3);
          if (v17 < v10)
          {
            sub_1BE7CAFF4((uint64_t)&__p, v10 - v17);
            v16 = (char *)__p;
          }
          if (&v16[v7] != (char *)v8)
            sub_1BE6FDB64((uint64_t)&v16[v7], *v8, v8[1], (v8[1] - *v8) >> 4);
          v9 = v8;
        }
        else
        {
          v9 = 0;
        }
      }
      v7 += 24;
      ++v10;
    }
    while (v4 + v7 != *((_QWORD *)a2 + 1));
  }
  if (a3)
  {
    CoreHandwriting::InkMapping::composeWith((CoreHandwriting::InkMapping *)&__p, a3, &v31);
    v18 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v19 = *((_QWORD *)a3 + 1);
      v20 = *(void **)a3;
      if (v19 != v18)
      {
        v21 = *((_QWORD *)a3 + 1);
        do
        {
          v23 = *(void **)(v21 - 24);
          v21 -= 24;
          v22 = v23;
          if (v23)
          {
            *(_QWORD *)(v19 - 16) = v22;
            operator delete(v22);
          }
          v19 = v21;
        }
        while (v21 != v18);
        v20 = *(void **)a3;
      }
      *((_QWORD *)a3 + 1) = v18;
      operator delete(v20);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *(_OWORD *)a3 = v31;
    *((_QWORD *)a3 + 2) = v32;
  }
  v33 = 0;
  if (v8)
  {
    v24 = *v8;
    if (*v8)
    {
      v8[1] = v24;
      operator delete(v24);
    }
    MEMORY[0x1C3B812EC](v8, 0x20C40960023A9);
  }
  v25 = (char *)__p;
  if (__p)
  {
    v26 = v35;
    v27 = __p;
    if (v35 != __p)
    {
      v28 = v35;
      do
      {
        v30 = (void *)*((_QWORD *)v28 - 3);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *((_QWORD *)v26 - 2) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = __p;
    }
    v35 = v25;
    operator delete(v27);
  }
}

void sub_1BE6F8048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  sub_1BE6F806C((uint64_t *)va);
  sub_1BE63CEBC((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1BE6F806C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1C3B812EC](v2, 0x20C40960023A9);
  }
  return a1;
}

double CoreHandwriting::RescaleByAverageCharacterHeight::estimateAverageCharacterHeight(CoreHandwriting::RescaleByAverageCharacterHeight *this, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  size_t v5;
  double *v6;
  __n128 v7;
  double *v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  double *v22;
  __n128 v23;
  double *v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double *v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v40;
  double v42;
  double v43;
  double v44;
  double v45;

  v3 = *a2;
  v2 = a2[1];
  if (v2 == *a2)
    return 0.0;
  if ((0xAAAAAAAAAAAAAAABLL * (v2 - *a2)) >> 59)
    sub_1BE6FB4B8();
  v5 = 0xAAAAAAAAAAAAAACLL * (v2 - *a2);
  v6 = (double *)operator new(v5 * 8);
  v8 = &v6[v5];
  v9 = (__n128 *)v6;
  do
  {
    v10 = *v3;
    v11 = v3[1];
    if (*v3 == v11)
      goto LABEL_5;
    v12 = 1.79769313e308;
    v13 = -1.79769313e308;
    v14 = -1.79769313e308;
    v15 = 1.79769313e308;
    do
    {
      v7.n128_u64[0] = *(_QWORD *)v10;
      v16 = *(double *)(v10 + 8);
      v10 += 32;
      if (v15 > v7.n128_f64[0])
        v15 = v7.n128_f64[0];
      if (v14 < v7.n128_f64[0])
        v14 = v7.n128_f64[0];
      if (v12 > v16)
        v12 = v16;
      if (v13 < v16)
        v13 = v16;
    }
    while (v10 != v11);
    if (v9 < (__n128 *)v8)
    {
      v9->n128_f64[0] = v15;
      v9->n128_f64[1] = v14;
      v9[1].n128_f64[0] = v12;
      v9[1].n128_f64[1] = v13;
      v9 += 2;
      goto LABEL_5;
    }
    v17 = ((char *)v9 - (char *)v6) >> 5;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 59)
      sub_1BE6FB4B8();
    if (((char *)v8 - (char *)v6) >> 4 > v18)
      v18 = ((char *)v8 - (char *)v6) >> 4;
    if ((unint64_t)((char *)v8 - (char *)v6) >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
    {
      if (v19 >> 59)
        sub_1BE61F100();
      v20 = (char *)operator new(32 * v19);
      v21 = (double *)&v20[32 * v17];
      *v21 = v15;
      v21[1] = v14;
      v21[2] = v12;
      v21[3] = v13;
      if (v9 == (__n128 *)v6)
      {
LABEL_33:
        v24 = v21;
        v8 = (double *)&v20[32 * v19];
        v9 = (__n128 *)(v21 + 4);
        if (!v6)
          goto LABEL_31;
        goto LABEL_30;
      }
    }
    else
    {
      v20 = 0;
      v21 = (double *)(32 * v17);
      *v21 = v15;
      v21[1] = v14;
      v21[2] = v12;
      v21[3] = v13;
      if (v9 == (__n128 *)v6)
        goto LABEL_33;
    }
    v22 = v21;
    do
    {
      v7 = v9[-2];
      v23 = v9[-1];
      v24 = v22 - 4;
      *((__n128 *)v22 - 2) = v7;
      *((__n128 *)v22 - 1) = v23;
      v9 -= 2;
      v22 -= 4;
    }
    while (v9 != (__n128 *)v6);
    v8 = (double *)&v20[32 * v19];
    v9 = (__n128 *)(v21 + 4);
    if (!v6)
      goto LABEL_31;
LABEL_30:
    operator delete(v6);
LABEL_31:
    v6 = v24;
LABEL_5:
    v3 += 3;
  }
  while (v3 != v2);
  v25 = 126 - 2 * __clz(((char *)v9 - (char *)v6) >> 5);
  if (v9 == (__n128 *)v6)
    v26 = 0;
  else
    v26 = v25;
  sub_1BE6FDE18((uint64_t)v6, v9, v26, 1, v7);
  v28 = v6[2];
  v27 = v6[3];
  v29 = v6 + 4;
  if (v6 + 4 == (double *)v9)
  {
    v30 = 0;
    v40 = v27 - v28;
    v33 = 0.0;
LABEL_68:
    v44 = v40 + v33;
    ++v30;
    goto LABEL_69;
  }
  v30 = 0;
  v31 = *((double *)this + 2) * 0.5;
  v32 = v6[1];
  v33 = 0.0;
  v34 = 1.79769313e308;
  v35 = -1.79769313e308;
  do
  {
    while (1)
    {
      v38 = v27 - v28;
      if (*v29 - v32 < 5.0 || v38 < v31)
        break;
      v33 = v38 + v33;
      v32 = v29[1];
      v36 = v29[2];
      ++v30;
      v35 = v27;
      v34 = v28;
      v37 = v29[3];
      v29 += 4;
      v27 = v37;
      v28 = v36;
      if (v29 == (double *)v9)
        goto LABEL_55;
    }
    if (v32 < v29[1])
      v32 = v29[1];
    if (v28 <= v29[2])
      v36 = v28;
    else
      v36 = v29[2];
    if (v27 < v29[3])
      v37 = v29[3];
    else
      v37 = v27;
    v29 += 4;
    v27 = v37;
    v28 = v36;
  }
  while (v29 != (double *)v9);
LABEL_55:
  v40 = v37 - v36;
  if (v37 - v36 >= v31 || v30 == 0)
    goto LABEL_68;
  if (v36 <= v34)
    v42 = v36;
  else
    v42 = v34;
  if (v37 >= v35)
    v43 = v37;
  else
    v43 = v35;
  v44 = v43 - v42 + v33 - (v35 - v34);
LABEL_69:
  v45 = v44 / (double)v30;
  operator delete(v6);
  return v45;
}

void sub_1BE6F83E0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

float64x2_t CoreHandwriting::RescaleByAverageCharacterHeight::processInplace(CoreHandwriting::RescaleByAverageCharacterHeight *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  double v5;
  double v6;
  uint64_t *v7;
  uint64_t *v8;
  int64x2_t v9;
  double v10;
  uint64_t *v11;
  float64x2_t v12;
  double v13;
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t result;

  v5 = CoreHandwriting::RescaleByAverageCharacterHeight::estimateAverageCharacterHeight(this, (uint64_t **)a2);
  if (v5 <= *((double *)this + 2))
    v5 = *((double *)this + 2);
  v6 = *((double *)this + 1) / v5;
  v7 = *(uint64_t **)a2;
  v8 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (*(uint64_t **)a2 != v8)
  {
    v9 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v10 = -1.79769313e308;
    v11 = *(uint64_t **)a2;
    v12 = (float64x2_t)v9;
    do
    {
      v14 = (float64x2_t *)*v11;
      v15 = (float64x2_t *)v11[1];
      if ((float64x2_t *)*v11 == v15)
        goto LABEL_5;
      v13 = -1.79769313e308;
      v16 = (float64x2_t)v9;
      do
      {
        v17 = *v14;
        v14 += 2;
        v16 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v16, v17), (int8x16_t)v17, (int8x16_t)v16);
        v18 = v17.f64[1];
        if (v13 < v17.f64[1])
          v13 = v18;
      }
      while (v14 != v15);
      v12 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v12, v16), (int8x16_t)v16, (int8x16_t)v12);
      if (v10 >= v13)
LABEL_5:
        v13 = v10;
      v11 += 3;
      v10 = v13;
    }
    while (v11 != v8);
    if (v7 != v8)
    {
      v19 = *(uint64_t **)a2;
      do
      {
        v20 = *v19;
        v21 = v19[1];
        while (v20 != v21)
        {
          if (!*(_BYTE *)(v20 + 24))
            *(float64x2_t *)v20 = vsubq_f64(*(float64x2_t *)v20, v12);
          v20 += 32;
        }
        v19 += 3;
      }
      while (v19 != v8);
      do
      {
        v22 = *v7;
        v23 = v7[1];
        while (v22 != v23)
        {
          if (!*(_BYTE *)(v22 + 24))
            *(float64x2_t *)v22 = vmulq_n_f64(*(float64x2_t *)v22, v6);
          v22 += 32;
        }
        v7 += 3;
      }
      while (v7 != v8);
    }
  }
  result = vmulq_n_f64(*((float64x2_t *)a2 + 3), v6);
  *((float64x2_t *)a2 + 3) = result;
  return result;
}

void sub_1BE6F8544(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  double *v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double *v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  __int128 *v46;
  __int128 *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  __int128 *v52;
  unint64_t v53;
  unint64_t i;
  int v55;
  __int128 v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  void **v69;
  void **v70;
  unint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *__p;
  unint64_t v77;
  uint64_t v78;
  void *v79[2];
  __int128 v80;
  __int128 v81;

  v80 = 0u;
  v81 = 0u;
  *(_OWORD *)v79 = 0u;
  v8 = *a2;
  v7 = a2[1];
  sub_1BE6FAC20(v79);
  v74 = a4;
  v9 = ((char *)a2[1] - (char *)*a2) >> 5;
  v10 = *((_QWORD *)&v81 + 1);
  v11 = v81;
  v12 = (void **)v79[1];
  v13 = (void **)v80;
  v14 = (_QWORD *)(*(_QWORD *)((char *)v79[1] + ((((_QWORD)v81 + *((_QWORD *)&v81 + 1)) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (v81 + BYTE8(v81)));
  *v14 = 0;
  v14[1] = (((char *)v7 - (char *)v8) >> 5) - 1;
  v15 = v10 + 1;
  *((_QWORD *)&v81 + 1) = v10 + 1;
  __p = 0;
  v77 = 0;
  v78 = 0;
  sub_1BE6837E8((uint64_t)&__p, v9, 1uLL);
  while (v15)
  {
    v17 = 32 * ((char *)v13 - (char *)v12) - 1;
    if (v13 == v12)
      v17 = 0;
    v18 = v15 + v11;
    --v15;
    v19 = (uint64_t *)(*(char **)((char *)v12 + (((unint64_t)(v11 + v15) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v11 + v15));
    v20 = *v19;
    v21 = v19[1];
    *((_QWORD *)&v81 + 1) = v15;
    if ((unint64_t)(v17 - v18 + 1) >= 0x200)
    {
      operator delete(*--v13);
      *(_QWORD *)&v80 = v13;
    }
    v22 = (double *)&(*a2)[2 * v20];
    v23 = (double *)&(*a2)[2 * v21];
    v24 = v20 + 1;
    v25 = 0.0;
    v26 = v20;
    if (v20 + 1 < v21)
    {
      v27 = v22 + 5;
      v28 = v20 + 1;
      v26 = v20;
      do
      {
        if (((*(_QWORD *)((char *)__p + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
        {
          v29 = *(v27 - 1);
          v30 = *v27;
          v31 = *v22;
          v32 = v22[1];
          v33 = v23[1];
          v34 = *v22 == *v23 && v32 == v33;
          if (v34 && v22[2] == v23[2])
          {
            v35 = sqrt((v32 - v30) * (v32 - v30) + (v31 - v29) * (v31 - v29));
            if (v35 > v25)
              goto LABEL_22;
          }
          else
          {
            v35 = fabs((*v23 - v31) * (v32 - v30) - (v31 - v29) * (v33 - v32));
            if (v35 > v25)
            {
LABEL_22:
              v26 = v28;
              v25 = v35;
            }
          }
        }
        ++v28;
        v27 += 4;
      }
      while (v21 != v28);
    }
    v36 = v22[1];
    v37 = v23[1];
    v38 = *v22 == *v23 && v36 == v37;
    if (v38 && *(double *)&(*a2)[2 * v20 + 1] == *(double *)&(*a2)[2 * v21 + 1])
    {
      if (v25 <= *(double *)(a1 + 8))
        goto LABEL_41;
    }
    else if (v25 / sqrt((v36 - v37) * (v36 - v37) + (*v22 - *v23) * (*v22 - *v23)) <= *(double *)(a1 + 8))
    {
LABEL_41:
      if (v24 < v21)
      {
        v45 = (char *)__p;
        do
        {
          *(_QWORD *)&v45[(v24 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v24);
          ++v24;
        }
        while (v21 != v24);
      }
      continue;
    }
    if (v13 == v12)
      v39 = 0;
    else
      v39 = 32 * ((char *)v13 - (char *)v12) - 1;
    v40 = v15 + v11;
    if (v39 == v15 + v11)
    {
      sub_1BE6FAC20(v79);
      v12 = (void **)v79[1];
      v13 = (void **)v80;
      v15 = *((_QWORD *)&v81 + 1);
      v11 = v81;
      v40 = *((_QWORD *)&v81 + 1) + v81;
    }
    v41 = (unint64_t *)(*(char **)((char *)v12 + ((v40 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v40);
    *v41 = v20;
    v41[1] = v26;
    v42 = v15 + 1;
    *((_QWORD *)&v81 + 1) = v15 + 1;
    if (v13 == v12)
      v43 = 0;
    else
      v43 = 32 * ((char *)v13 - (char *)v12) - 1;
    v44 = v42 + v11;
    if (v43 == v42 + v11)
    {
      sub_1BE6FAC20(v79);
      v12 = (void **)v79[1];
      v13 = (void **)v80;
      v42 = *((_QWORD *)&v81 + 1);
      v11 = v81;
      v44 = *((_QWORD *)&v81 + 1) + v81;
    }
    v16 = (unint64_t *)(*(char **)((char *)v12 + ((v44 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v44);
    *v16 = v26;
    v16[1] = v21;
    v15 = v42 + 1;
    *((_QWORD *)&v81 + 1) = v42 + 1;
  }
  v47 = *a2;
  v46 = a2[1];
  if (*a2 != v46)
  {
    v48 = 0;
    v49 = __p;
    v50 = __p;
    while (1)
    {
      if (v48 == 63)
      {
        v49 = v50 + 1;
        v51 = 0;
      }
      else
      {
        v51 = v48 + 1;
      }
      if (((*v50 >> v48) & 1) == 0)
        break;
      if (v48 == 63)
        ++v50;
      v47 += 2;
      v48 = v51;
      if (v47 == v46)
        goto LABEL_58;
    }
    if (v47 != v46)
    {
      v52 = v47 + 2;
      if (v47 + 2 == v46)
      {
        if (v47 == v46)
          goto LABEL_58;
LABEL_87:
        a2[1] = v47;
        if (!a3)
          goto LABEL_88;
        goto LABEL_59;
      }
      do
      {
        if (v51 == 63)
          v55 = 0;
        else
          v55 = v51 + 1;
        if (((*v49 >> v51) & 1) != 0)
        {
          v56 = *v52;
          *(__int128 *)((char *)v47 + 9) = *(__int128 *)((char *)v52 + 9);
          *v47 = v56;
          v47 += 2;
        }
        v49 += v51 == 63;
        v52 += 2;
        v51 = v55;
      }
      while (v52 != v46);
      if (v47 != a2[1])
        goto LABEL_87;
    }
  }
LABEL_58:
  if (!a3)
    goto LABEL_88;
LABEL_59:
  v53 = v77;
  if (v77)
  {
    for (i = 0; i < v53; ++i)
    {
      if (((*(_QWORD *)((char *)__p + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
        continue;
      v59 = *(_QWORD **)(a3 + 8);
      v58 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v59 < v58)
      {
        *v59 = v74;
        v59[1] = i;
        v57 = v59 + 2;
      }
      else
      {
        v60 = *(_QWORD **)a3;
        v61 = ((uint64_t)v59 - *(_QWORD *)a3) >> 4;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 60)
          sub_1BE6FB4B8();
        v63 = v58 - (_QWORD)v60;
        if (v63 >> 3 > v62)
          v62 = v63 >> 3;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
          v64 = 0xFFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64 >> 60)
          sub_1BE61F100();
        v65 = (char *)operator new(16 * v64);
        v66 = &v65[16 * v61];
        *(_QWORD *)v66 = v74;
        *((_QWORD *)v66 + 1) = i;
        if (v59 != v60)
        {
          v67 = &v65[16 * v61];
          do
          {
            v68 = v67 - 16;
            *((_OWORD *)v67 - 1) = *((_OWORD *)v59 - 1);
            v59 -= 2;
            v67 -= 16;
          }
          while (v59 != v60);
          v57 = v66 + 16;
          *(_QWORD *)a3 = v68;
          *(_QWORD *)(a3 + 8) = v66 + 16;
          *(_QWORD *)(a3 + 16) = &v65[16 * v64];
          if (!v60)
            goto LABEL_68;
LABEL_85:
          operator delete(v60);
          v53 = v77;
          goto LABEL_68;
        }
        v57 = v66 + 16;
        *(_QWORD *)a3 = v66;
        *(_QWORD *)(a3 + 8) = v66 + 16;
        *(_QWORD *)(a3 + 16) = &v65[16 * v64];
        if (v60)
          goto LABEL_85;
      }
LABEL_68:
      *(_QWORD *)(a3 + 8) = v57;
    }
  }
LABEL_88:
  if (__p)
    operator delete(__p);
  v69 = (void **)v79[1];
  v70 = (void **)v80;
  v71 = v80 - (unint64_t)v79[1];
  if ((unint64_t)v80 - (unint64_t)v79[1] >= 0x11)
  {
    do
    {
      v72 = *v69++;
      operator delete(v72);
      v71 -= 8;
    }
    while (v71 > 0x10);
  }
  while (v69 != v70)
  {
    v73 = *v69++;
    operator delete(v73);
  }
  if (v79[0])
    operator delete(v79[0]);
}

void sub_1BE6F8AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_1BE6FB2E8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreHandwriting::RamerDouglasPeuckerResampling::processInplace(CoreHandwriting::RamerDouglasPeuckerResampling *this, __int128 ***a2, CoreHandwriting::InkMapping *a3)
{
  __int128 **v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  void *__p;
  char *v32;
  uint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v4 = *a2;
  if (*a2 == a2[1])
    goto LABEL_15;
  if (!a3)
  {
    v14 = 0;
    do
    {
      sub_1BE6F8544((uint64_t)this, v4, 0, v14++);
      v4 += 3;
    }
    while (v4 != a2[1]);
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  v7 = 0;
  v8 = 0;
  v9 = 1;
  do
  {
    v10 = operator new();
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    v30 = v10;
    if (v8)
    {
      v11 = *(void **)v8;
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)(v8 + 8) = v11;
        operator delete(v11);
      }
      MEMORY[0x1C3B812EC](v8, 0x20C40960023A9);
    }
    sub_1BE6F8544((uint64_t)this, &v4[v7], v10, v9 - 1);
    v12 = (char *)__p;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (_BYTE *)__p) >> 3);
    if (v13 < v9)
    {
      sub_1BE7CAFF4((uint64_t)&__p, v9 - v13);
      v12 = (char *)__p;
    }
    if (&v12[v7 * 8] != (char *)v10)
      sub_1BE6FDB64((uint64_t)&v12[v7 * 8], *(char **)v10, *(char **)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 4);
    v7 += 3;
    ++v9;
    v8 = v10;
  }
  while (&v4[v7] != a2[1]);
LABEL_16:
  if (a3)
  {
    CoreHandwriting::InkMapping::composeWith((CoreHandwriting::InkMapping *)&__p, a3, &v28);
    v15 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v16 = *((_QWORD *)a3 + 1);
      v17 = *(void **)a3;
      if (v16 != v15)
      {
        v18 = *((_QWORD *)a3 + 1);
        do
        {
          v20 = *(void **)(v18 - 24);
          v18 -= 24;
          v19 = v20;
          if (v20)
          {
            *(_QWORD *)(v16 - 16) = v19;
            operator delete(v19);
          }
          v16 = v18;
        }
        while (v18 != v15);
        v17 = *(void **)a3;
      }
      *((_QWORD *)a3 + 1) = v15;
      operator delete(v17);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *(_OWORD *)a3 = v28;
    *((_QWORD *)a3 + 2) = v29;
  }
  if (v10)
  {
    v21 = *(char **)v10;
    if (*(_QWORD *)v10)
    {
      *(_QWORD *)(v10 + 8) = v21;
      operator delete(v21);
    }
    MEMORY[0x1C3B812EC](v10, 0x20C40960023A9);
  }
  v22 = (char *)__p;
  if (__p)
  {
    v23 = v32;
    v24 = __p;
    if (v32 != __p)
    {
      v25 = v32;
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v23 - 2) = v26;
          operator delete(v26);
        }
        v23 = v25;
      }
      while (v25 != v22);
      v24 = __p;
    }
    v32 = v22;
    operator delete(v24);
  }
}

void sub_1BE6F8D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  sub_1BE6F806C((uint64_t *)va);
  sub_1BE63CEBC((void **)va1);
  _Unwind_Resume(a1);
}

void CoreHandwriting::StrokeDirectionReversal::processInplace(CoreHandwriting::StrokeDirectionReversal *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  double **v3;
  double **v4;
  char *v6;
  double *v7;
  double *v8;
  double *v9;
  double v10;
  double *v12;
  __int128 v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE v23[32];

  *((_QWORD *)a2 + 4) = 0;
  v3 = *(double ***)a2;
  v4 = (double **)*((_QWORD *)a2 + 1);
  if (*(double ***)a2 != v4)
  {
    v6 = (char *)a2 + 24;
    do
    {
      while (1)
      {
        v7 = *v3;
        v8 = v3[1];
        v10 = *(v8 - 4);
        v9 = v8 - 4;
        if (v10 - **v3 > 0.0)
          break;
        v19 = *((_QWORD *)a2 + 4);
        v20 = *((_QWORD *)a2 + 5);
        if (v19 == v20 << 6)
        {
          if ((uint64_t)(v19 + 1) < 0)
LABEL_32:
            sub_1BE61F930();
          v21 = v20 << 7;
          if (v21 <= (v19 & 0xFFFFFFFFFFFFFFC0) + 64)
            v21 = (v19 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v19 <= 0x3FFFFFFFFFFFFFFELL)
            v22 = v21;
          else
            v22 = 0x7FFFFFFFFFFFFFFFLL;
          sub_1BE694488((uint64_t)v6, v22);
          v19 = *((_QWORD *)a2 + 4);
        }
        *((_QWORD *)a2 + 4) = v19 + 1;
        *(_QWORD *)(*((_QWORD *)a2 + 3) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
        v3 += 3;
        if (v3 == v4)
          return;
      }
      if (v7 != v3[1] && v9 > v7)
      {
        v12 = v7 + 4;
        do
        {
          *(_OWORD *)v23 = *((_OWORD *)v12 - 2);
          *(_OWORD *)&v23[16] = *((_OWORD *)v12 - 1);
          v13 = *(_OWORD *)((char *)v9 + 9);
          *((_OWORD *)v12 - 2) = *(_OWORD *)v9;
          *(_OWORD *)((char *)v12 - 23) = v13;
          *(_OWORD *)v9 = *(_OWORD *)v23;
          *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)&v23[9];
          v9 -= 4;
          v14 = v12 >= v9;
          v12 += 4;
        }
        while (!v14);
      }
      v15 = *((_QWORD *)a2 + 4);
      v16 = *((_QWORD *)a2 + 5);
      if (v15 == v16 << 6)
      {
        if ((uint64_t)(v15 + 1) < 0)
          goto LABEL_32;
        v17 = v16 << 7;
        if (v17 <= (v15 & 0xFFFFFFFFFFFFFFC0) + 64)
          v17 = (v15 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v15 <= 0x3FFFFFFFFFFFFFFELL)
          v18 = v17;
        else
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        sub_1BE694488((uint64_t)v6, v18);
        v15 = *((_QWORD *)a2 + 4);
      }
      *((_QWORD *)a2 + 4) = v15 + 1;
      *(_QWORD *)(*((_QWORD *)a2 + 3) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void CoreHandwriting::SpatialResamplingToFixedNumberOfPoints::calcNumPointsPerStroke(const CoreHandwriting::Ink *a1@<X1>, unint64_t a2@<X2>, uint64_t **a3@<X8>)
{
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  char *v35;
  double v36;
  char *v37;
  char *v38;
  _OWORD *v39;
  double v40;
  float64x2_t *v41;
  float64x2_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  int64x2_t *v48;
  const double *i64;
  int64x2_t v50;
  int64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  int32x4_t *v63;
  char *v64;
  unint64_t v65;
  float v66;
  double v67;
  char *v68;
  _OWORD *v69;
  double v70;
  float64x2_t *v71;
  float64x2_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t v77;
  int64x2_t *v78;
  const double *v79;
  int64x2_t v80;
  int64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  unint64_t v90;
  int v91;
  int32x4_t *v92;
  uint64_t v93;
  int32x4_t *v94;
  int32x4_t v95;
  uint64_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int v102;
  unint64_t v103;
  int64x2_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  int64x2_t v109;
  int64x2_t *v110;
  int64x2_t v111;
  int64x2_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  int64x2_t *v122;
  uint64_t *v123;
  uint64_t v124;
  float v125;
  int64x2_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  int64_t v149;
  int64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  void *v162;
  float64x2x4_t v163;
  float64x2x4_t v164;

  v5 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = *(_QWORD **)a1;
  v6 = (_QWORD *)*((_QWORD *)a1 + 1);
  if (v6 != *(_QWORD **)a1)
  {
    v8 = (uint64_t)v6 - *(_QWORD *)a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    if (v9 >> 61)
      sub_1BE61F930();
    v10 = (uint64_t *)operator new(0x5555555555555558 * (v8 >> 3));
    *v5 = v10;
    v5[1] = v10;
    v5[2] = &v10[v9];
    v11 = a2;
    while (1)
    {
      while (1)
      {
        v13 = v7[1] - *v7 <= 0x20uLL ? 1 : 2;
        v14 = (unint64_t)v5[2];
        if ((unint64_t)v10 >= v14)
          break;
        *v10++ = v13;
        v12 = (uint64_t)v10;
        v5[1] = v10;
        v11 -= v13;
        v7 += 3;
        if (v7 == v6)
          goto LABEL_36;
      }
      v15 = *v5;
      v16 = (char *)v10 - (char *)*v5;
      v17 = v16 >> 3;
      v18 = (v16 >> 3) + 1;
      if (v18 >> 61)
        sub_1BE61F930();
      v19 = v14 - (_QWORD)v15;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v18;
      if (v20)
      {
        if (v20 >> 61)
          sub_1BE61F100();
        v21 = operator new(8 * v20);
        v22 = (uint64_t *)&v21[8 * v17];
        *v22 = v13;
        v12 = (uint64_t)(v22 + 1);
        v23 = (char *)v10 - (char *)v15;
        if (v10 == v15)
        {
LABEL_26:
          v5 = a3;
          *a3 = v22;
          a3[1] = (uint64_t *)v12;
          a3[2] = (uint64_t *)&v21[8 * v20];
          if (!v15)
            goto LABEL_23;
LABEL_22:
          operator delete(v15);
          goto LABEL_23;
        }
      }
      else
      {
        v21 = 0;
        v22 = (uint64_t *)(8 * v17);
        *(_QWORD *)(8 * v17) = v13;
        v12 = 8 * v17 + 8;
        v23 = (char *)v10 - (char *)v15;
        if (v10 == v15)
          goto LABEL_26;
      }
      v24 = v23 - 8;
      if (v24 < 0x168)
        break;
      v27 = ((char *)(v10 - 1) - (char *)v15) & 0xFFFFFFFFFFFFFFF8;
      if (&v21[v16 - 8 - v27] > &v21[v16 - 8]
        || (uint64_t *)((char *)v10 - v27 - 8) > v10 - 1
        || (unint64_t)((char *)v10 - v21 - v16) < 0x20)
      {
        break;
      }
      v28 = (v24 >> 3) + 1;
      v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v10[v29 / 0xFFFFFFFFFFFFFFF8];
      v22 = (uint64_t *)((char *)v22 - v29);
      v30 = &v21[8 * v17 - 16];
      v31 = v10 - 2;
      v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *v30 = v33;
        v30 -= 2;
        v31 -= 4;
        v32 -= 4;
      }
      while (v32);
      v5 = a3;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_20;
LABEL_21:
      *v5 = v22;
      v5[1] = (uint64_t *)v12;
      v5[2] = (uint64_t *)&v21[8 * v20];
      if (v15)
        goto LABEL_22;
LABEL_23:
      v5[1] = (uint64_t *)v12;
      v11 -= v13;
      v7 += 3;
      v10 = (uint64_t *)v12;
      if (v7 == v6)
        goto LABEL_36;
    }
    v25 = v10;
    v5 = a3;
    do
    {
LABEL_20:
      v26 = *--v25;
      *--v22 = v26;
    }
    while (v25 != v15);
    goto LABEL_21;
  }
  v12 = 0;
  v11 = a2;
LABEL_36:
  if (v11 >= 1)
  {
    v34 = *(char **)a1;
    v35 = (char *)*((_QWORD *)a1 + 1);
    if (*(char **)a1 == v35)
    {
      v60 = (v35 - v34) / 24;
      v162 = 0;
    }
    else
    {
      v36 = 0.0;
      v37 = *(char **)a1;
      do
      {
        v39 = *(_OWORD **)v37;
        v38 = (char *)*((_QWORD *)v37 + 1);
        v40 = 0.0;
        if (*(char **)v37 != v38)
        {
          v41 = (float64x2_t *)(v39 + 2);
          if (v39 + 2 != (_OWORD *)v38)
          {
            v42 = *(float64x2_t *)v39;
            v43 = v38 - (char *)v39 - 64;
            if (v43 >= 0x80)
            {
              v44 = (v43 >> 5) + 1;
              v45 = v44 & 3;
              if ((v44 & 3) == 0)
                v45 = 4;
              v46 = v44 - v45;
              v41 += 2 * v46;
              v47 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v42.f64[0], 0);
              v48 = (int64x2_t *)(v39 + 6);
              do
              {
                i64 = (const double *)v48[-4].i64;
                v163 = vld4q_f64(i64);
                v50 = v48[2];
                v51 = *v48;
                v48 += 8;
                v52 = (float64x2_t)vzip1q_s64(v51, v50);
                v53 = (float64x2_t)vzip2q_s64(v51, v50);
                v54 = vsubq_f64((float64x2_t)vextq_s8(v47, (int8x16_t)v163.val[0], 8uLL), v163.val[0]);
                v55 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v163.val[0], (int8x16_t)v52, 8uLL), v52);
                v56 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v163.val[1], 8uLL), v163.val[1]);
                v163.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v163.val[1], (int8x16_t)v53, 8uLL), v53);
                v57 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v56, v56), v54, v54));
                v163.val[0] = vsqrtq_f64(vmlaq_f64(vmulq_f64(v163.val[0], v163.val[0]), v55, v55));
                v40 = v40 + v57.f64[0] + v57.f64[1] + v163.val[0].f64[0] + v163.val[0].f64[1];
                v42 = v53;
                v47 = (int8x16_t)v52;
                v46 -= 4;
              }
              while (v46);
              v42 = (float64x2_t)v50;
            }
            do
            {
              v58 = *v41;
              v41 += 2;
              v59 = vsubq_f64(v42, v58);
              v40 = v40
                  + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v59, v59).f64[1]), v59.f64[0], v59.f64[0]));
              v42 = v58;
            }
            while (v41 != (float64x2_t *)v38);
          }
        }
        v36 = v36 + v40;
        v37 += 24;
      }
      while (v37 != v35);
      v162 = 0;
      v60 = (v35 - v34) / 24;
      if (v35 != v34)
      {
        if (v60 >> 62)
          sub_1BE61F930();
        v61 = operator new(4 * v60);
        v162 = v61;
        bzero(v61, 4 * v60);
        v62 = 0;
        v63 = (int32x4_t *)*a3;
        v64 = v34;
        v65 = a2;
        do
        {
          v69 = *(_OWORD **)v64;
          v68 = (char *)*((_QWORD *)v64 + 1);
          v70 = 0.0;
          if (*(char **)v64 != v68)
          {
            v71 = (float64x2_t *)(v69 + 2);
            if (v69 + 2 != (_OWORD *)v68)
            {
              v72 = *(float64x2_t *)v69;
              v73 = v68 - (char *)v69 - 64;
              if (v73 >= 0x80)
              {
                v74 = (v73 >> 5) + 1;
                v75 = v74 & 3;
                if ((v74 & 3) == 0)
                  v75 = 4;
                v76 = v74 - v75;
                v71 += 2 * v76;
                v77 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v72.f64[0], 0);
                v78 = (int64x2_t *)(v69 + 6);
                do
                {
                  v79 = (const double *)v78[-4].i64;
                  v164 = vld4q_f64(v79);
                  v80 = v78[2];
                  v81 = *v78;
                  v78 += 8;
                  v82 = (float64x2_t)vzip1q_s64(v81, v80);
                  v83 = (float64x2_t)vzip2q_s64(v81, v80);
                  v84 = vsubq_f64((float64x2_t)vextq_s8(v77, (int8x16_t)v164.val[0], 8uLL), v164.val[0]);
                  v85 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v164.val[0], (int8x16_t)v82, 8uLL), v82);
                  v86 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v164.val[1], 8uLL), v164.val[1]);
                  v164.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v164.val[1], (int8x16_t)v83, 8uLL), v83);
                  v87 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v86, v86), v84, v84));
                  v164.val[0] = vsqrtq_f64(vmlaq_f64(vmulq_f64(v164.val[0], v164.val[0]), v85, v85));
                  v70 = v70 + v87.f64[0] + v87.f64[1] + v164.val[0].f64[0] + v164.val[0].f64[1];
                  v72 = v83;
                  v77 = (int8x16_t)v82;
                  v76 -= 4;
                }
                while (v76);
                v72 = (float64x2_t)v80;
              }
              do
              {
                v88 = *v71;
                v71 += 2;
                v89 = vsubq_f64(v72, v88);
                v70 = v70
                    + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v89, v89).f64[1]), v89.f64[0], v89.f64[0]));
                v72 = v88;
              }
              while (v71 != (float64x2_t *)v68);
            }
          }
          v66 = v70;
          *((float *)v61 + v62) = v66;
          v67 = v70 * (double)v11 / v36;
          if (v36 <= 0.0)
            v67 = (double)(v11 / v60);
          v63->i64[v62] = (unint64_t)(floor(v67) + (double)v63->u64[v62]);
          ++v62;
          v64 += 24;
        }
        while (v64 != v35);
LABEL_68:
        if (v63 == (int32x4_t *)v12)
        {
          v91 = 0;
          goto LABEL_76;
        }
        v90 = v12 - (_QWORD)v63 - 8;
        if (v90 >= 0x38)
        {
          v93 = (v90 >> 3) + 1;
          v92 = (int32x4_t *)((char *)v63 + 8 * (v93 & 0x3FFFFFFFFFFFFFF8));
          v94 = v63 + 2;
          v95 = 0uLL;
          v96 = v93 & 0x3FFFFFFFFFFFFFF8;
          v97 = 0uLL;
          do
          {
            v99 = v94[-2];
            v98 = v94[-1];
            v101 = *v94;
            v100 = v94[1];
            v94 += 4;
            v95 = vaddq_s32(v95, vuzp1q_s32(v99, v98));
            v97 = vaddq_s32(v97, vuzp1q_s32(v101, v100));
            v96 -= 8;
          }
          while (v96);
          v91 = vaddvq_s32(vaddq_s32(v97, v95));
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_76:
            v103 = v65 - v91;
            if (v65 <= v91)
            {
LABEL_133:
              if (v61)
                operator delete(v61);
              return;
            }
            if (v34 == v35)
            {
              v104 = 0;
              v105 = 0;
              goto LABEL_86;
            }
            if (v60 >> 61)
              sub_1BE61F930();
            v104 = (int64x2_t *)operator new(8 * v60);
            bzero(v104, 8 * v60);
            v105 = &v104->i64[v60];
            if (8 * v60 - 8 >= 0x18)
            {
              v108 = ((8 * v60 - 8) >> 3) + 1;
              v106 = v108 & 0x3FFFFFFFFFFFFFFCLL;
              v107 = &v104->i64[v108 & 0x3FFFFFFFFFFFFFFCLL];
              v109 = (int64x2_t)xmmword_1BE8D5080;
              v110 = v104 + 1;
              v111 = vdupq_n_s64(2uLL);
              v112 = vdupq_n_s64(4uLL);
              v113 = v108 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v110[-1] = v109;
                *v110 = vaddq_s64(v109, v111);
                v109 = vaddq_s64(v109, v112);
                v110 += 2;
                v113 -= 4;
              }
              while (v113);
              if (v108 == v106)
              {
LABEL_86:
                if (v103 >= ((char *)v105 - (char *)v104) >> 3)
                  v114 = ((char *)v105 - (char *)v104) >> 3;
                else
                  v114 = v103;
                if (!v114)
                {
LABEL_130:
                  if (v104)
                    operator delete(v104);
                  v61 = v162;
                  goto LABEL_133;
                }
                v115 = &v104->i64[v114];
                v116 = 8 * v114;
                v117 = (8 * v114) >> 3;
                if (8 * v114 >= 9 && (unint64_t)v116 >= 0x10)
                {
                  v149 = (unint64_t)(v117 - 2) >> 1;
                  v150 = v149;
                  do
                  {
                    if (v149 >= v150)
                    {
                      v151 = (2 * v150) | 1;
                      v152 = &v104->i64[v151];
                      if (2 * v150 + 2 < v117 && *((float *)v61 + *v152) > *((float *)v61 + v152[1]))
                      {
                        ++v152;
                        v151 = 2 * v150 + 2;
                      }
                      v153 = &v104->i64[v150];
                      v154 = *v152;
                      v155 = *v153;
                      v156 = *((float *)v61 + *v153);
                      if (*((float *)v61 + *v152) <= v156)
                      {
                        do
                        {
                          *v153 = v154;
                          v153 = v152;
                          if (v149 < v151)
                            break;
                          v157 = 2 * v151;
                          v151 = (2 * v151) | 1;
                          v152 = &v104->i64[v151];
                          v158 = v157 + 2;
                          if (v158 < v117 && *((float *)v61 + *v152) > *((float *)v61 + v152[1]))
                          {
                            ++v152;
                            v151 = v158;
                          }
                          v154 = *v152;
                        }
                        while (*((float *)v61 + *v152) <= v156);
                        *v153 = v155;
                      }
                    }
                    v133 = v150-- <= 0;
                  }
                  while (!v133);
                }
                if (v115 == v105)
                {
LABEL_113:
                  if (v116 > 8)
                  {
                    v132 = v114 & 0x1FFFFFFFFFFFFFFFLL;
                    do
                    {
                      v134 = 0;
                      v135 = v104->i64[0];
                      v136 = (uint64_t *)v104;
                      do
                      {
                        v137 = v136;
                        v136 += v134 + 1;
                        v138 = 2 * v134;
                        v134 = (2 * v134) | 1;
                        v139 = v138 + 2;
                        if (v139 < v132 && *((float *)v162 + *v136) > *((float *)v162 + v136[1]))
                        {
                          ++v136;
                          v134 = v139;
                        }
                        *v137 = *v136;
                      }
                      while (v134 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                      if (v136 == --v115)
                      {
                        *v136 = v135;
                      }
                      else
                      {
                        *v136 = *v115;
                        *v115 = v135;
                        v140 = (char *)v136 - (char *)v104 + 8;
                        if (v140 >= 9)
                        {
                          v141 = (((unint64_t)v140 >> 3) - 2) >> 1;
                          v142 = &v104->i64[v141];
                          v143 = *v142;
                          v144 = *v136;
                          v145 = *((float *)v162 + *v136);
                          if (*((float *)v162 + *v142) > v145)
                          {
                            do
                            {
                              v146 = v142;
                              *v136 = v143;
                              if (!v141)
                                break;
                              v141 = (v141 - 1) >> 1;
                              v142 = &v104->i64[v141];
                              v143 = *v142;
                              v136 = v146;
                            }
                            while (*((float *)v162 + *v142) > v145);
                            *v146 = v144;
                          }
                        }
                      }
                      v133 = v132-- <= 2;
                    }
                    while (!v133);
                  }
                  v147 = (uint64_t *)v104;
                  do
                  {
                    v148 = *v147++;
                    ++v63->i64[v148];
                    v116 -= 8;
                  }
                  while (v116);
                  goto LABEL_130;
                }
                if (v116 < 16)
                {
                  v118 = v104->i64[0];
                  v119 = &v104->i64[v114];
                  do
                  {
                    v120 = *v119;
                    if (*((float *)v61 + *v119) > *((float *)v61 + v118))
                    {
                      *v119 = v118;
                      v104->i64[0] = v120;
                      v118 = v120;
                    }
                    ++v119;
                  }
                  while (v119 != v105);
                  goto LABEL_113;
                }
                v121 = &v104->i64[1];
                v122 = v104 + 1;
                v123 = &v104->i64[v114];
                while (1)
                {
                  v124 = *v123;
                  v125 = *((float *)v61 + *v123);
                  if (v125 > *((float *)v61 + v104->i64[0]))
                  {
                    *v123 = v104->i64[0];
                    v104->i64[0] = v124;
                    if (v116 == 16 || *((float *)v61 + *v121) <= *((float *)v61 + v122->i64[0]))
                    {
                      v126 = (int64x2_t *)&v104->u64[1];
                      v127 = 1;
                      v128 = *v121;
                      if (*((float *)v61 + *v121) <= v125)
                      {
LABEL_107:
                        v129 = (uint64_t *)v104;
                        do
                        {
                          *v129 = v128;
                          v129 = (uint64_t *)v126;
                          if ((uint64_t)((unint64_t)(v117 - 2) >> 1) < v127)
                            break;
                          v130 = 2 * v127;
                          v127 = (2 * v127) | 1;
                          v126 = (int64x2_t *)((char *)v104 + 8 * v127);
                          v131 = v130 + 2;
                          if (v131 < v117 && *((float *)v61 + v126->i64[0]) > *((float *)v61 + v126->i64[1]))
                          {
                            v126 = (int64x2_t *)((char *)v126 + 8);
                            v127 = v131;
                          }
                          v128 = v126->i64[0];
                        }
                        while (*((float *)v61 + v126->i64[0]) <= v125);
                        *v129 = v124;
                      }
                    }
                    else
                    {
                      v126 = v104 + 1;
                      v127 = 2;
                      v128 = v122->i64[0];
                      if (*((float *)v61 + v122->i64[0]) <= v125)
                        goto LABEL_107;
                    }
                  }
                  if (++v123 == v105)
                    goto LABEL_113;
                }
              }
            }
            else
            {
              v106 = 0;
              v107 = (uint64_t *)v104;
            }
            do
              *v107++ = v106++;
            while (v107 != v105);
            goto LABEL_86;
          }
        }
        else
        {
          v91 = 0;
          v92 = v63;
        }
        do
        {
          v102 = v92->i32[0];
          v92 = (int32x4_t *)((char *)v92 + 8);
          v91 += v102;
        }
        while (v92 != (int32x4_t *)v12);
        goto LABEL_76;
      }
    }
    v61 = 0;
    v63 = (int32x4_t *)*a3;
    v65 = a2;
    goto LABEL_68;
  }
}

void sub_1BE6F9A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  void *v19;

  if (__p)
    operator delete(__p);
  if (v17)
    operator delete(v17);
  v19 = *(void **)a12;
  if (*(_QWORD *)a12)
  {
    *(_QWORD *)(a12 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::SpatialResamplingToFixedNumberOfPoints::processInplace(CoreHandwriting::SpatialResamplingToFixedNumberOfPoints *this, CoreHandwriting::Ink *a2, CoreHandwriting::InkMapping *a3)
{
  uint64_t v5;
  char **v6;
  char **v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  float64x2_t *v12;
  float64x2_t *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  float64x2_t v19;
  unint64_t v20;
  uint64_t *v21;
  float64x2_t *v22;
  double v23;
  float64x2_t *v24;
  float64x2_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int64x2_t *v31;
  const double *i64;
  int64x2_t v33;
  int64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  char *v66;
  void *v67;
  void *v68;
  __int128 v69;
  char *v70;
  void *__p[3];
  _QWORD *v72;
  void *v73;
  char *v74;
  uint64_t v75;
  float64x2x4_t v76;

  v73 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  CoreHandwriting::SpatialResamplingToFixedNumberOfPoints::calcNumPointsPerStroke(a2, *((_QWORD *)this + 1), (uint64_t **)__p);
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 != *((_QWORD *)a2 + 1))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (*(_QWORD *)v5 == *(_QWORD *)(v5 + 8))
    {
LABEL_4:
      v5 += 24;
      ++v8;
      if (v5 == *((_QWORD *)a2 + 1))
        goto LABEL_58;
    }
    if (a3)
    {
      v9 = (_QWORD *)operator new();
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v72 = v9;
      if (v7)
      {
        v10 = *v7;
        if (*v7)
        {
          v7[1] = v10;
          operator delete(v10);
        }
        MEMORY[0x1C3B812EC](v7, 0x20C40960023A9);
        v9 = v72;
      }
      v11 = *((_QWORD *)__p[0] + v8);
      v13 = *(float64x2_t **)v5;
      v12 = *(float64x2_t **)(v5 + 8);
      v14 = (char *)v12 - *(_QWORD *)v5;
      if (v11 < 2)
        goto LABEL_22;
    }
    else
    {
      v9 = v7;
      v11 = *((_QWORD *)__p[0] + v8);
      v13 = *(float64x2_t **)v5;
      v12 = *(float64x2_t **)(v5 + 8);
      v14 = (char *)v12 - *(_QWORD *)v5;
      if (v11 < 2)
        goto LABEL_22;
    }
    if (v14 == (char *)32)
    {
      v69 = 0uLL;
      v70 = 0;
      if (v11 >> 59)
        sub_1BE6FB4B8();
      v15 = 32 * v11;
      v16 = (char *)operator new(32 * v11);
      v17 = 0;
      *(_QWORD *)&v69 = v16;
      v70 = &v16[v15];
      do
      {
        v18 = &v16[v17];
        v19 = v13[1];
        *(float64x2_t *)v18 = *v13;
        *((float64x2_t *)v18 + 1) = v19;
        v17 += 32;
      }
      while (v15 != v17);
      *((_QWORD *)&v69 + 1) = &v16[v15];
      if (!v9)
      {
LABEL_32:
        v22 = *(float64x2_t **)v5;
        if (!*(_QWORD *)v5)
          goto LABEL_34;
        goto LABEL_33;
      }
      v21 = (uint64_t *)v9[1];
      v20 = v9[2];
      if ((unint64_t)v21 < v20)
      {
        *v21 = v8;
        v21[1] = 0;
        v9[1] = v21 + 2;
        v22 = *(float64x2_t **)v5;
        if (!*(_QWORD *)v5)
          goto LABEL_34;
        goto LABEL_33;
      }
      v46 = (uint64_t *)*v9;
      v47 = ((uint64_t)v21 - *v9) >> 4;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 60)
        sub_1BE6FB4B8();
      v49 = v20 - (_QWORD)v46;
      if (v49 >> 3 > v48)
        v48 = v49 >> 3;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
        v50 = 0xFFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50 >> 60)
        sub_1BE61F100();
      v51 = (char *)operator new(16 * v50);
      v52 = (uint64_t *)&v51[16 * v47];
      *v52 = v8;
      v52[1] = 0;
      if (v21 == v46)
      {
        v55 = v52 + 2;
        *v9 = v52;
        v9[1] = v52 + 2;
        v9[2] = &v51[16 * v50];
        if (v46)
LABEL_52:
          operator delete(v46);
      }
      else
      {
        v53 = &v51[16 * v47];
        do
        {
          v54 = v53 - 16;
          *((_OWORD *)v53 - 1) = *((_OWORD *)v21 - 1);
          v21 -= 2;
          v53 -= 16;
        }
        while (v21 != v46);
        v55 = v52 + 2;
        *v9 = v54;
        v9[1] = v52 + 2;
        v9[2] = &v51[16 * v50];
        if (v46)
          goto LABEL_52;
      }
      v9[1] = v55;
      v22 = *(float64x2_t **)v5;
      if (!*(_QWORD *)v5)
      {
LABEL_34:
        *(_OWORD *)v5 = v69;
        *(_QWORD *)(v5 + 16) = v70;
        v6 = (char **)v72;
        if (v72)
        {
          v43 = v73;
          v44 = 0xAAAAAAAAAAAAAAABLL * ((v74 - (_BYTE *)v73) >> 3);
          if (v8 + 1 > v44)
          {
            sub_1BE7CAFF4((uint64_t)&v73, v8 + 1 - v44);
            v43 = v73;
          }
          v45 = (uint64_t)v43 + 24 * v8;
          if ((char **)v45 != v6)
            sub_1BE6FDB64(v45, *v6, v6[1], (v6[1] - *v6) >> 4);
          v7 = v6;
        }
        else
        {
          v7 = 0;
        }
        goto LABEL_4;
      }
LABEL_33:
      *(_QWORD *)(v5 + 8) = v22;
      operator delete(v22);
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      goto LABEL_34;
    }
LABEL_22:
    v23 = 0.0;
    if (v13 != v12)
    {
      v24 = v13 + 2;
      if (&v13[2] != v12)
      {
        v25 = *v13;
        v26 = (unint64_t)(v14 - 64);
        if (v26 >= 0x80)
        {
          v27 = (v26 >> 5) + 1;
          v28 = v27 & 3;
          if ((v27 & 3) == 0)
            v28 = 4;
          v29 = v27 - v28;
          v24 += 2 * v29;
          v30 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v25.f64[0], 0);
          v31 = (int64x2_t *)&v13[6];
          do
          {
            i64 = (const double *)v31[-4].i64;
            v76 = vld4q_f64(i64);
            v33 = v31[2];
            v34 = *v31;
            v31 += 8;
            v35 = (float64x2_t)vzip1q_s64(v34, v33);
            v36 = (float64x2_t)vzip2q_s64(v34, v33);
            v37 = vsubq_f64((float64x2_t)vextq_s8(v30, (int8x16_t)v76.val[0], 8uLL), v76.val[0]);
            v38 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v76.val[0], (int8x16_t)v35, 8uLL), v35);
            v39 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v76.val[1], 8uLL), v76.val[1]);
            v76.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v76.val[1], (int8x16_t)v36, 8uLL), v36);
            v40 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v39, v39), v37, v37));
            v76.val[0] = vsqrtq_f64(vmlaq_f64(vmulq_f64(v76.val[0], v76.val[0]), v38, v38));
            v23 = v23 + v40.f64[0] + v40.f64[1] + v76.val[0].f64[0] + v76.val[0].f64[1];
            v25 = v36;
            v30 = (int8x16_t)v35;
            v29 -= 4;
          }
          while (v29);
          v25 = (float64x2_t)v33;
        }
        do
        {
          v41 = *v24;
          v24 += 2;
          v42 = vsubq_f64(v25, v41);
          v23 = v23 + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v42, v42).f64[1]), v42.f64[0], v42.f64[0]));
          v25 = v41;
        }
        while (v24 != v12);
      }
    }
    sub_1BE6F5BCC((double **)&v69, (char **)v5, v11, 1, (uint64_t)v9, v8, v23 / (double)(v11 - 1));
    goto LABEL_32;
  }
  v6 = 0;
LABEL_58:
  if (a3)
  {
    CoreHandwriting::InkMapping::composeWith((CoreHandwriting::InkMapping *)&v73, a3, &v69);
    v56 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v57 = *((_QWORD *)a3 + 1);
      v58 = *(void **)a3;
      if (v57 != v56)
      {
        v59 = *((_QWORD *)a3 + 1);
        do
        {
          v61 = *(void **)(v59 - 24);
          v59 -= 24;
          v60 = v61;
          if (v61)
          {
            *(_QWORD *)(v57 - 16) = v60;
            operator delete(v60);
          }
          v57 = v59;
        }
        while (v59 != v56);
        v58 = *(void **)a3;
      }
      *((_QWORD *)a3 + 1) = v56;
      operator delete(v58);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *(_OWORD *)a3 = v69;
    *((_QWORD *)a3 + 2) = v70;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v72 = 0;
  if (v6)
  {
    v62 = *v6;
    if (*v6)
    {
      v6[1] = v62;
      operator delete(v62);
    }
    MEMORY[0x1C3B812EC](v6, 0x20C40960023A9);
  }
  v63 = (char *)v73;
  if (v73)
  {
    v64 = v74;
    v65 = v73;
    if (v74 != v73)
    {
      v66 = v74;
      do
      {
        v68 = (void *)*((_QWORD *)v66 - 3);
        v66 -= 24;
        v67 = v68;
        if (v68)
        {
          *((_QWORD *)v64 - 2) = v67;
          operator delete(v67);
        }
        v64 = v66;
      }
      while (v66 != v63);
      v65 = v73;
    }
    v74 = v63;
    operator delete(v65);
  }
}

void sub_1BE6FA000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p)
  {
    operator delete(__p);
    sub_1BE6F806C(&a15);
    sub_1BE63CEBC(&a16);
    _Unwind_Resume(a1);
  }
  sub_1BE6F806C(&a15);
  sub_1BE63CEBC(&a16);
  _Unwind_Resume(a1);
}

char *CoreHandwriting::PreprocessingManager::addStep(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *result;
  uint64_t v5;

  v5 = a2;
  v3 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_1BE6FEE3C((char **)a1, &v5);
  }
  else
  {
    *v3 = a2;
    result = (char *)(v3 + 1);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t CoreHandwriting::PreprocessingManager::pyAddStep(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&v7, a2);
  v3 = (uint64_t *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    v5 = sub_1BE6FEFD4(a1, &v7);
  }
  else
  {
    v4 = v7;
    v7 = 0;
    *v3 = v4;
    v5 = v3 + 1;
  }
  a1[1] = v5;
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1BE6FA184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *CoreHandwriting::PreprocessingManager::process@<X0>(CoreHandwriting::PreprocessingManager *this@<X0>, const CoreHandwriting::Ink *a2@<X1>, CoreHandwriting::InkMapping *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  __int128 v9;
  _QWORD *i;
  _QWORD *v11;

  sub_1BE6FB3AC((_QWORD *)a4, (uint64_t *)a2);
  result = sub_1BE690978((_QWORD *)(a4 + 24), (uint64_t)a2 + 24);
  v9 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a4 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a4 + 64) = v9;
  v11 = *(_QWORD **)this;
  for (i = (_QWORD *)*((_QWORD *)this + 1); v11 != i; ++v11)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, CoreHandwriting::InkMapping *))(*(_QWORD *)*v11 + 24))(*v11, a4, a3);
  return result;
}

void sub_1BE6FA224(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE6FA27C(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE6FA2E4(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreHandwriting::PreprocessingManager::processInplace(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;

  v3 = *(uint64_t **)result;
  v4 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v4)
  {
    do
    {
      v7 = *v3++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, a2, a3);
    }
    while (v3 != v4);
  }
  return result;
}

void **sub_1BE6FA2E4(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v2 = a1[3];
  if (v2)
    operator delete(v2);
  v3 = (char *)*a1;
  if (*a1)
  {
    v4 = (char *)a1[1];
    v5 = *a1;
    if (v4 != v3)
    {
      v6 = (char *)a1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

CoreHandwriting::PreprocessingManager *CoreHandwriting::PreprocessingManager::PreprocessingManager(CoreHandwriting::PreprocessingManager *this, const PreprocessingManager *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  while (v3 != v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v3 + 32))(&v10);
    v5 = (uint64_t *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2))
    {
      v7 = sub_1BE6FEFD4(this, &v10);
    }
    else
    {
      v6 = v10;
      v10 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    *((_QWORD *)this + 1) = v7;
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v3 += 8;
  }
  return this;
}

void sub_1BE6FA40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    sub_1BE6FA44C(v10);
    _Unwind_Resume(a1);
  }
  sub_1BE6FA44C(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE6FA44C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

CoreHandwriting::PreprocessingManager *CoreHandwriting::PreprocessingManager::PreprocessingManager(CoreHandwriting::PreprocessingManager *this, const CoreHandwriting::PreprocessingManager *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  while (v3 != v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v3 + 32))(&v10);
    v5 = (uint64_t *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2))
    {
      v7 = sub_1BE6FEFD4(this, &v10);
    }
    else
    {
      v6 = v10;
      v10 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    *((_QWORD *)this + 1) = v7;
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v3 += 8;
  }
  return this;
}

void sub_1BE6FA568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    v12 = *v10;
    if (!*v10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v12 = *v10;
    if (!*v10)
      goto LABEL_3;
  }
  v13 = v10[1];
  v14 = v12;
  if (v13 != v12)
  {
    do
    {
      v16 = *--v13;
      v15 = v16;
      *v13 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    while (v13 != v12);
    v14 = *v10;
  }
  v10[1] = v12;
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t CoreHandwriting::PreprocessingManager::operator=(uint64_t a1, const CoreHandwriting::PreprocessingManager *a2)
{
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __p[24];

  CoreHandwriting::PreprocessingManager::PreprocessingManager((CoreHandwriting::PreprocessingManager *)__p, a2);
  v4 = *(_OWORD *)__p;
  v5 = *(_QWORD *)&__p[16];
  *(_QWORD *)__p = *(_QWORD *)a1;
  v3 = *(_QWORD **)__p;
  v6 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)&__p[8] = v6;
  if (v3)
  {
    v7 = (_QWORD *)v6;
    v8 = v3;
    if ((_QWORD *)v6 != v3)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      while (v7 != v3);
      v8 = *(void **)__p;
    }
    *(_QWORD *)&__p[8] = v3;
    operator delete(v8);
  }
  return a1;
}

void sub_1BE6FA69C()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE6FA6B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;

  sub_1BE6FB3AC((_QWORD *)a4, (uint64_t *)a2);
  sub_1BE690978((_QWORD *)(a4 + 24), a2 + 24);
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a4 + 64) = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a4, a3);
}

void sub_1BE6FA714(_Unwind_Exception *a1)
{
  void **v1;

  sub_1BE6FA2E4(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6FA728(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1BE6FA780@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E77F0958;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *a2 = v4;
  return result;
}

void sub_1BE6FA7D4()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE6FA7E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_1E77F0990;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  *a2 = result;
  return result;
}

void sub_1BE6FA83C()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE6FA850@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_1E77F09C8;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  *a2 = result;
  return result;
}

void sub_1BE6FA8A4()
{
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE6FA8B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_1E77F08E8;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  *a2 = result;
  return result;
}

void sub_1BE6FA90C()
{
  JUMPOUT(0x1C3B812ECLL);
}

double sub_1BE6FA920@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E77F0920;
  result = *(double *)(a1 + 8);
  *(double *)(v4 + 8) = result;
  *a2 = v4;
  return result;
}

void sub_1BE6FA974()
{
  JUMPOUT(0x1C3B812ECLL);
}

__n128 sub_1BE6FA988@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E77F0D60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *a2 = v4;
  return result;
}

void sub_1BE6FA9DC()
{
  JUMPOUT(0x1C3B812ECLL);
}

__n128 sub_1BE6FA9F0@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E77F0B88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *a2 = v4;
  return result;
}

void sub_1BE6FAA44()
{
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE6FAA58@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0C38;
  *a1 = result;
  return result;
}

void sub_1BE6FAAA0()
{
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE6FAAB4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0CE8;
  *a1 = result;
  return result;
}

void sub_1BE6FAAFC()
{
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE6FAB10@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E77F0A70;
  *a1 = result;
  return result;
}

void sub_1BE6FAB58()
{
  JUMPOUT(0x1C3B812ECLL);
}

double sub_1BE6FAB6C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E77F0B18;
  result = *(double *)(a1 + 8);
  *(double *)(v4 + 8) = result;
  *a2 = v4;
  return result;
}

void sub_1BE6FABC0()
{
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE6FABD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &off_1E77F0C70;
  result[1] = v5;
  *a2 = result;
  return result;
}

void sub_1BE6FAC20(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_1BE61F100();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_1BE61F100();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_1BE61F100();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_1BE6FB288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6FB2A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6FB2B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE6FB2D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6FB2E8(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1BE6FB3AC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE6FB4B8();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_1BE6FB4CC(v3, v4, v5, v8);
  }
  return a1;
}

void sub_1BE6FB454(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE6FB4B8()
{
  sub_1BE61F1C8("vector");
}

_QWORD *sub_1BE6FB4CC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_1BE6FB4B8();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[32 * (v10 >> 5)];
        a4[2] = v7;
        memcpy(v11, v9, v10 - 7);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1BE6FB594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE6FB5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1BE69090C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6FB5CC(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  uint64_t v93;
  double v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t *v101;
  double v102;
  double v103;
  uint64_t *v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  uint64_t v156;
  uint64_t v157;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v87 = *(a2 - 1);
        v88 = *v10;
        if (*(double *)(**a3 + 8 * v87) < *(double *)(**a3 + 8 * *v10))
        {
          *v10 = v87;
          goto LABEL_173;
        }
        return result;
      case 3:
        v89 = **a3;
        v88 = *v10;
        v90 = v10[1];
        v91 = *(double *)(v89 + 8 * v90);
        v92 = *(double *)(v89 + 8 * *v10);
        v93 = *(a2 - 1);
        v94 = *(double *)(v89 + 8 * v93);
        if (v91 >= v92)
        {
          if (v94 < v91)
          {
            v10[1] = v93;
            *(a2 - 1) = v90;
            v146 = *v10;
            v145 = v10[1];
            if (*(double *)(v89 + 8 * v145) < *(double *)(v89 + 8 * *v10))
            {
              *v10 = v145;
              v10[1] = v146;
            }
          }
        }
        else
        {
          if (v94 >= v91)
          {
            *v10 = v90;
            v10[1] = v88;
            v157 = *(a2 - 1);
            if (*(double *)(v89 + 8 * v157) >= v92)
              return result;
            v10[1] = v157;
          }
          else
          {
            *v10 = v93;
          }
LABEL_173:
          *(a2 - 1) = v88;
        }
        return result;
      case 4:
        v95 = v10 + 1;
        v96 = v10[1];
        v97 = v10 + 2;
        v98 = v10[2];
        v99 = **a3;
        v100 = *(double *)(v99 + 8 * v96);
        v101 = (uint64_t *)*v10;
        v102 = *(double *)(v99 + 8 * *v10);
        v103 = *(double *)(v99 + 8 * v98);
        if (v100 >= v102)
        {
          if (v103 >= v100)
          {
LABEL_167:
            v96 = v98;
            v147 = *(a2 - 1);
            if (*(double *)(v99 + 8 * v147) >= *(double *)(v99 + 8 * v96))
              return result;
LABEL_168:
            *v97 = v147;
            *(a2 - 1) = v96;
            v153 = *v97;
            v154 = *v95;
            v155 = *(double *)(v99 + 8 * v153);
            if (v155 < *(double *)(v99 + 8 * v154))
            {
              v10[1] = v153;
              v10[2] = v154;
              v156 = *v10;
              if (v155 < *(double *)(v99 + 8 * *v10))
              {
                *v10 = v153;
                v10[1] = v156;
              }
            }
            return result;
          }
          *v95 = v98;
          *v97 = v96;
          v104 = v10;
          v105 = (uint64_t **)(v10 + 1);
          result = v96;
          if (v103 >= v102)
          {
LABEL_158:
            v147 = *(a2 - 1);
            if (*(double *)(v99 + 8 * v147) >= *(double *)(v99 + 8 * v96))
              return result;
            goto LABEL_168;
          }
        }
        else
        {
          v104 = v10;
          v105 = (uint64_t **)(v10 + 2);
          result = *v10;
          if (v103 >= v100)
          {
            *v10 = v96;
            v10[1] = (uint64_t)v101;
            v104 = v10 + 1;
            v105 = (uint64_t **)(v10 + 2);
            result = (uint64_t)v101;
            if (v103 >= v102)
              goto LABEL_167;
          }
        }
        *v104 = v98;
        *v105 = v101;
        v96 = result;
        goto LABEL_158;
      case 5:
        return (uint64_t)sub_1BE695354(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, **a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v117 = (unint64_t)(v12 - 2) >> 1;
              v118 = v117;
              do
              {
                if (v117 >= v118)
                {
                  v120 = (2 * v118) | 1;
                  v121 = &v10[v120];
                  v122 = **a3;
                  if (2 * v118 + 2 < v12 && *(double *)(v122 + 8 * *v121) < *(double *)(v122 + 8 * v121[1]))
                  {
                    ++v121;
                    v120 = 2 * v118 + 2;
                  }
                  result = (uint64_t)&v10[v118];
                  v123 = *v121;
                  v124 = *(_QWORD *)result;
                  v125 = *(double *)(v122 + 8 * *(_QWORD *)result);
                  if (*(double *)(v122 + 8 * *v121) >= v125)
                  {
                    do
                    {
                      v126 = v121;
                      *(_QWORD *)result = v123;
                      if (v117 < v120)
                        break;
                      v127 = 2 * v120;
                      v120 = (2 * v120) | 1;
                      v121 = &v10[v120];
                      v128 = v127 + 2;
                      if (v128 < v12 && *(double *)(v122 + 8 * *v121) < *(double *)(v122 + 8 * v121[1]))
                      {
                        ++v121;
                        v120 = v128;
                      }
                      v123 = *v121;
                      result = (uint64_t)v126;
                    }
                    while (*(double *)(v122 + 8 * *v121) >= v125);
                    *v126 = v124;
                  }
                }
                v119 = v118-- <= 0;
              }
              while (!v119);
              v129 = (unint64_t)v11 >> 3;
              do
              {
                v130 = 0;
                v131 = *v10;
                v132 = *a3;
                v133 = v10;
                do
                {
                  v134 = v133;
                  v133 += v130 + 1;
                  v135 = 2 * v130;
                  v130 = (2 * v130) | 1;
                  v136 = v135 + 2;
                  if (v136 < v129)
                  {
                    result = v133[1];
                    if (*(double *)(*v132 + 8 * *v133) < *(double *)(*v132 + 8 * result))
                    {
                      ++v133;
                      v130 = v136;
                    }
                  }
                  *v134 = *v133;
                }
                while (v130 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                if (v133 == --a2)
                {
                  *v133 = v131;
                }
                else
                {
                  *v133 = *a2;
                  *a2 = v131;
                  v137 = (char *)v133 - (char *)v10 + 8;
                  if (v137 >= 9)
                  {
                    v138 = (((unint64_t)v137 >> 3) - 2) >> 1;
                    v139 = &v10[v138];
                    v140 = *v139;
                    v141 = *v133;
                    v142 = **a3;
                    v143 = *(double *)(v142 + 8 * *v133);
                    if (*(double *)(v142 + 8 * *v139) < v143)
                    {
                      do
                      {
                        v144 = v139;
                        *v133 = v140;
                        if (!v138)
                          break;
                        v138 = (v138 - 1) >> 1;
                        v139 = &v10[v138];
                        v140 = *v139;
                        v133 = v144;
                      }
                      while (*(double *)(v142 + 8 * *v139) < v143);
                      *v144 = v141;
                    }
                  }
                }
                v119 = v129-- <= 2;
              }
              while (!v119);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(double *)(v15 + 8 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(double *)(v15 + 8 * *v10);
            v25 = *(double *)(v15 + 8 * *v14);
            if (v24 >= v25)
            {
              if (v17 < v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(double *)(v15 + 8 * *v10) < *(double *)(v15 + 8 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 < v24)
              {
                *v14 = v16;
                goto LABEL_31;
              }
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(double *)(v15 + 8 * v40) < v25)
              {
                *v10 = v40;
LABEL_31:
                *(a2 - 1) = v23;
              }
            }
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(double *)(v15 + 8 * *v14);
          v21 = *(double *)(v15 + 8 * *v10);
          if (v20 >= v21)
          {
            if (v17 < v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(double *)(v15 + 8 * *v14) < *(double *)(v15 + 8 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 >= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(double *)(v15 + 8 * v29) >= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(double *)(v15 + 8 * v33);
          v36 = *(double *)(v15 + 8 * v34);
          v37 = *(a2 - 2);
          v38 = *(double *)(v15 + 8 * v37);
          if (v35 >= v36)
          {
            if (v38 < v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(double *)(v15 + 8 * *v31) < *(double *)(v15 + 8 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v41 = *(a2 - 2);
              if (*(double *)(v15 + 8 * v41) >= v36)
                goto LABEL_37;
              *v31 = v41;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v42 = &v10[v13];
          v45 = v42[1];
          v43 = v42 + 1;
          v44 = v45;
          v46 = v10[2];
          v47 = *(double *)(v15 + 8 * v45);
          v48 = *(double *)(v15 + 8 * v46);
          v49 = *(a2 - 3);
          v50 = *(double *)(v15 + 8 * v49);
          if (v47 >= v48)
          {
            if (v50 < v47)
            {
              *v43 = v49;
              *(a2 - 3) = v44;
              v51 = v10[2];
              if (*(double *)(v15 + 8 * *v43) < *(double *)(v15 + 8 * v51))
              {
                v10[2] = *v43;
                *v43 = v51;
              }
            }
          }
          else
          {
            if (v50 >= v47)
            {
              v10[2] = v44;
              *v43 = v46;
              v52 = *(a2 - 3);
              if (*(double *)(v15 + 8 * v52) >= v48)
                goto LABEL_46;
              *v43 = v52;
            }
            else
            {
              v10[2] = v49;
            }
            *(a2 - 3) = v46;
          }
LABEL_46:
          v53 = *v14;
          v54 = *v31;
          v55 = *(double *)(v15 + 8 * *v14);
          v56 = *(double *)(v15 + 8 * *v31);
          v57 = *v43;
          v58 = *(double *)(v15 + 8 * *v43);
          if (v55 < v56)
          {
            if (v58 >= v55)
            {
              *v31 = v53;
              *v14 = v54;
              v31 = v14;
              v53 = v57;
              if (v58 >= v56)
              {
                v59 = *v10;
                *v10 = v54;
                *v14 = v59;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v58 >= v55)
            goto LABEL_54;
          *v14 = v57;
          *v43 = v53;
          v43 = v14;
          v53 = v54;
          if (v58 < v56)
          {
LABEL_53:
            *v31 = v57;
            *v43 = v54;
LABEL_54:
            v60 = *v10;
            *v10 = v53;
            *v14 = v60;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v61 = *(double *)(v15 + 8 * v28);
            if (*(double *)(v15 + 8 * *(v10 - 1)) < v61)
              goto LABEL_56;
            if (v61 >= *(double *)(v15 + 8 * *(a2 - 1)))
            {
              v79 = v10 + 1;
              do
              {
                v10 = v79;
                if (v79 >= a2)
                  break;
                ++v79;
              }
              while (v61 >= *(double *)(v15 + 8 * *v10));
            }
            else
            {
              do
              {
                v78 = v10[1];
                ++v10;
              }
              while (v61 >= *(double *)(v15 + 8 * v78));
            }
            v80 = a2;
            if (v10 < a2)
            {
              v80 = a2;
              do
                v81 = *--v80;
              while (v61 < *(double *)(v15 + 8 * v81));
            }
            if (v10 < v80)
            {
              v82 = *v10;
              v83 = *v80;
              do
              {
                *v10 = v83;
                *v80 = v82;
                do
                {
                  v84 = v10[1];
                  ++v10;
                  v82 = v84;
                }
                while (v61 >= *(double *)(v15 + 8 * v84));
                do
                {
                  v85 = *--v80;
                  v83 = v85;
                }
                while (v61 < *(double *)(v15 + 8 * v85));
              }
              while (v10 < v80);
            }
            v86 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v86;
            a5 = 0;
            *v86 = v28;
            continue;
          }
          v77 = *v10;
          *v10 = v57;
          *v14 = v77;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v62 = 0;
          v63 = **a3;
          v64 = *(double *)(v63 + 8 * v28);
          do
            v65 = v10[++v62];
          while (*(double *)(v63 + 8 * v65) < v64);
          v66 = &v10[v62];
          v67 = a2;
          if (v62 == 1)
          {
            v67 = a2;
            do
            {
              if (v66 >= v67)
                break;
              v69 = *--v67;
            }
            while (*(double *)(v63 + 8 * v69) >= v64);
          }
          else
          {
            do
              v68 = *--v67;
            while (*(double *)(v63 + 8 * v68) >= v64);
          }
          if (v66 >= v67)
          {
            v75 = v66 - 1;
            if (v66 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v70 = *v67;
            v71 = &v10[v62];
            v72 = v67;
            do
            {
              *v71 = v70;
              *v72 = v65;
              do
              {
                v73 = v71[1];
                ++v71;
                v65 = v73;
              }
              while (*(double *)(v63 + 8 * v73) < v64);
              do
              {
                v74 = *--v72;
                v70 = v74;
              }
              while (*(double *)(v63 + 8 * v74) >= v64);
            }
            while (v71 < v72);
            v75 = v71 - 1;
            if (v71 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v75;
          }
LABEL_74:
          *v75 = v28;
          if (v66 < v67)
            goto LABEL_77;
          v76 = sub_1BE6FC09C(v10, v75, *a3);
          v10 = v75 + 1;
          result = sub_1BE6FC09C(v75 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v76)
              continue;
LABEL_77:
            result = sub_1BE6FB5CC(v9, v75, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v75 + 1;
            continue;
          }
          a2 = v75;
          if (v76)
            return result;
          goto LABEL_2;
        }
        v106 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v107 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v108 = *v106;
              v109 = 8;
              v110 = v10;
              do
              {
                v113 = *v110;
                v112 = v110[1];
                v110 = v107;
                v114 = *(double *)(v108 + 8 * v112);
                if (v114 < *(double *)(v108 + 8 * v113))
                {
                  v115 = v109;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v115) = v113;
                    v116 = v115 - 8;
                    if (v115 == 8)
                    {
                      v111 = v10;
                      goto LABEL_116;
                    }
                    v113 = *(uint64_t *)((char *)v10 + v115 - 16);
                    v115 -= 8;
                  }
                  while (v114 < *(double *)(v108 + 8 * v113));
                  v111 = (uint64_t *)((char *)v10 + v116);
LABEL_116:
                  *v111 = v112;
                }
                v107 = v110 + 1;
                v109 += 8;
              }
              while (v110 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v148 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v149 = *v106;
            do
            {
              v151 = *v9;
              v150 = v9[1];
              v9 = v148;
              v152 = *(double *)(v149 + 8 * v150);
              if (v152 < *(double *)(v149 + 8 * v151))
              {
                do
                {
                  *v148 = v151;
                  v151 = *(v148 - 2);
                  --v148;
                }
                while (v152 < *(double *)(v149 + 8 * v151));
                *v148 = v150;
              }
              v148 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_1BE6FC09C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v14 = *(a2 - 1);
      v15 = *a1;
      if (*(double *)(*a3 + 8 * v14) >= *(double *)(*a3 + 8 * *a1))
        return 1;
      *a1 = v14;
      *(a2 - 1) = v15;
      return 1;
    case 3:
      v16 = *a3;
      v17 = *a1;
      v18 = a1[1];
      v19 = *(double *)(*a3 + 8 * v18);
      v20 = *(double *)(*a3 + 8 * *a1);
      v21 = *(a2 - 1);
      v22 = *(double *)(*a3 + 8 * v21);
      if (v19 >= v20)
      {
        if (v22 >= v19)
          return 1;
        a1[1] = v21;
        *(a2 - 1) = v18;
        v44 = *a1;
        v43 = a1[1];
        if (*(double *)(v16 + 8 * v43) >= *(double *)(v16 + 8 * *a1))
          return 1;
        *a1 = v43;
        a1[1] = v44;
        return 1;
      }
      else if (v22 >= v19)
      {
        *a1 = v18;
        a1[1] = v17;
        v50 = *(a2 - 1);
        if (*(double *)(v16 + 8 * v50) >= v20)
          return 1;
        a1[1] = v50;
        *(a2 - 1) = v17;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v17;
        return 1;
      }
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a3;
      v28 = *(double *)(*a3 + 8 * v24);
      v29 = *a1;
      v30 = *(double *)(*a3 + 8 * *a1);
      v31 = *(double *)(*a3 + 8 * v26);
      if (v28 < v30)
      {
        v32 = a1;
        v33 = a1 + 2;
        v34 = *a1;
        if (v31 >= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          v32 = a1 + 1;
          v33 = a1 + 2;
          v34 = v29;
          if (v31 >= v30)
            goto LABEL_38;
        }
LABEL_35:
        *v32 = v26;
        *v33 = v29;
        v24 = v34;
LABEL_36:
        v45 = *(a2 - 1);
        if (*(double *)(v27 + 8 * v45) >= *(double *)(v27 + 8 * v24))
          return 1;
        goto LABEL_39;
      }
      if (v31 < v28)
      {
        *v23 = v26;
        *v25 = v24;
        v32 = a1;
        v33 = a1 + 1;
        v34 = v24;
        if (v31 >= v30)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v24 = v26;
      v45 = *(a2 - 1);
      if (*(double *)(v27 + 8 * v45) >= *(double *)(v27 + 8 * v24))
        return 1;
LABEL_39:
      *v25 = v45;
      *(a2 - 1) = v24;
      v46 = *v25;
      v47 = *v23;
      v48 = *(double *)(v27 + 8 * v46);
      if (v48 >= *(double *)(v27 + 8 * v47))
        return 1;
      a1[1] = v46;
      a1[2] = v47;
      v49 = *a1;
      if (v48 >= *(double *)(v27 + 8 * *a1))
        return 1;
      *a1 = v46;
      a1[1] = v49;
      return 1;
    case 5:
      sub_1BE695354(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v5 = a1 + 2;
      v4 = a1[2];
      v6 = a1[1];
      v7 = *a3;
      v8 = *(double *)(*a3 + 8 * v6);
      v9 = *a1;
      v10 = *(double *)(*a3 + 8 * *a1);
      v11 = *(double *)(*a3 + 8 * v4);
      if (v8 >= v10)
      {
        if (v11 >= v8 || (a1[1] = v4, *v5 = v6, v12 = a1, v13 = a1 + 1, v11 >= v10))
        {
LABEL_20:
          v35 = a1 + 3;
          if (a1 + 3 == a2)
            return 1;
          v36 = 0;
          for (i = 24; ; i += 8)
          {
            v38 = *v35;
            v39 = *v5;
            v40 = *(double *)(v7 + 8 * *v35);
            if (v40 < *(double *)(v7 + 8 * v39))
              break;
LABEL_23:
            v5 = v35++;
            if (v35 == a2)
              return 1;
          }
          v41 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v41) = v39;
            v42 = v41 - 8;
            if (v41 == 8)
            {
              *a1 = v38;
              if (++v36 != 8)
                goto LABEL_23;
              return v35 + 1 == a2;
            }
            v39 = *(uint64_t *)((char *)a1 + v41 - 16);
            v41 -= 8;
          }
          while (v40 < *(double *)(v7 + 8 * v39));
          *(uint64_t *)((char *)a1 + v42) = v38;
          if (++v36 != 8)
            goto LABEL_23;
          return v35 + 1 == a2;
        }
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 >= v8)
        {
          *a1 = v6;
          a1[1] = v9;
          v12 = a1 + 1;
          v13 = a1 + 2;
          if (v11 >= v10)
            goto LABEL_20;
        }
      }
      *v12 = v4;
      *v13 = v9;
      goto LABEL_20;
  }
}

char *sub_1BE6FC420(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE6FB4B8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1BE61F100();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_1BE6FC56C(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_1BE6FB4B8();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_1BE6FB4CC(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_1BE6FC7E0(v10, *v6, v6[1], (v6[1] - *v6) >> 5);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_1BE6FB4CC(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_1BE6FC7E0(v10, *v6, v6[1], (v6[1] - *v6) >> 5);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_1BE6FC7D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BE6FC7D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE6FC7E0(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  void *v20;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_22;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_22:
      sub_1BE6FB4B8();
    v13 = 4 * v12;
    result = operator new(32 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 7);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = v14 - 7;
    v20 = (void *)*result;
LABEL_20:
    result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 7);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v14 - 7;
    v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

__n128 sub_1BE6FC92C(char *a1, char *a2, uint64_t **a3, unint64_t a4, char *a5, uint64_t a6, __n128 result)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  __n128 v38;
  __n128 v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  __n128 *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  unint64_t v52;
  char *v53;
  __n128 *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  __n128 *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 *v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 *v70;
  __n128 v71;

  if (a4 < 2)
    return result;
  v9 = (__n128 *)a1;
  if (a4 == 2)
  {
    v10 = *((_QWORD *)a2 - 1);
    v11 = *(_QWORD *)a1;
    v12 = **a3;
    result.n128_u64[0] = *(_QWORD *)(v12 + 32 * v10);
    v13 = *(double *)(v12 + 32 * *(_QWORD *)a1);
    if (result.n128_f64[0] >= v13 || *(double *)(v12 + 32 * v10 + 8) <= *(double *)(v12 + 32 * v11 + 8))
    {
      if (v13 >= result.n128_f64[0])
      {
        result.n128_f64[0] = result.n128_f64[0] + *(double *)(v12 + 32 * v10 + 8);
        if (result.n128_f64[0] <= v13 + *(double *)(v12 + 32 * v11 + 8))
          return result;
      }
      else
      {
        v14 = *(double *)(v12 + 32 * v11 + 8);
        v15 = *(double *)(v12 + 32 * v10 + 8);
        if (v14 > v15)
          return result;
        result.n128_f64[0] = result.n128_f64[0] + v15;
        if (result.n128_f64[0] <= v13 + v14)
          return result;
      }
    }
    *(_QWORD *)a1 = v10;
    *((_QWORD *)a2 - 1) = v11;
    return result;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2)
      return result;
    v17 = a1 + 8;
    if (a1 + 8 == a2)
      return result;
    v18 = 0;
    v19 = **a3;
    v20 = a1;
    while (1)
    {
      v21 = v20;
      v20 = v17;
      v22 = *(_QWORD *)v17;
      v23 = *(_QWORD *)v21;
      result.n128_u64[0] = *(_QWORD *)(v19 + 32 * v22);
      v24 = *(double *)(v19 + 32 * *(_QWORD *)v21);
      if (result.n128_f64[0] < v24)
      {
        v25 = *(double *)(v19 + 32 * v22 + 8);
        if (v25 > *(double *)(v19 + 32 * v23 + 8))
          break;
      }
      if (v24 >= result.n128_f64[0])
      {
        v25 = *(double *)(v19 + 32 * v22 + 8);
        if (result.n128_f64[0] + v25 > v24 + *(double *)(v19 + 32 * v23 + 8))
          break;
      }
      else
      {
        v26 = *(double *)(v19 + 32 * v23 + 8);
        v25 = *(double *)(v19 + 32 * v22 + 8);
        if (v26 <= v25 && result.n128_f64[0] + v25 > v24 + v26)
          break;
      }
LABEL_15:
      v17 = v20 + 8;
      v18 += 8;
      if (v20 + 8 == a2)
        return result;
    }
    *(_QWORD *)v20 = v23;
    if (v21 == a1)
    {
LABEL_13:
      v21 = a1;
    }
    else
    {
      v27 = v18;
      while (1)
      {
        v28 = *(_QWORD *)&a1[v27 - 8];
        v29 = (double *)(v19 + 32 * v28);
        v30 = *v29;
        v31 = v29[1];
        if (result.n128_f64[0] >= *v29 || v25 <= v31)
        {
          if (v30 < result.n128_f64[0] && v31 > v25)
            goto LABEL_14;
          if (result.n128_f64[0] + v25 <= v30 + v31)
            break;
        }
        v21 -= 8;
        *(_QWORD *)&a1[v27] = v28;
        v27 -= 8;
        if (!v27)
          goto LABEL_13;
      }
      v21 = &a1[v27];
    }
LABEL_14:
    *(_QWORD *)v21 = v22;
    goto LABEL_15;
  }
  v35 = a4 >> 1;
  v36 = &a1[8 * (a4 >> 1)];
  v37 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    sub_1BE6FC92C(a1, v36, a3, v37, a5, a6);
    sub_1BE6FC92C(&v9->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
    result.n128_u64[0] = sub_1BE6FD2D8(v9, (__n128 *)((char *)v9 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6, v38).n128_u64[0];
    return result;
  }
  v39 = sub_1BE6FCE00(a1, v36, a3, v37, a5, result);
  v40 = &a5[8 * v35];
  result.n128_u64[0] = sub_1BE6FCE00(&v9->n128_i8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v40, v39).n128_u64[0];
  v41 = *a3;
  v42 = v40;
  v43 = a5;
  v44 = v9;
  v45 = &a5[8 * a4];
  do
  {
    while (1)
    {
      if (v42 == v45)
      {
        if (v43 == v40)
          return result;
        v56 = &a5[8 * v35] - v43 - 8;
        if (v56 >= 0x38 && (unint64_t)((char *)v9 - v43) >= 0x20)
        {
          v66 = 0;
          v67 = (v56 >> 3) + 1;
          v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
          v57 = &v43[v68];
          v58 = (__n128 *)((char *)v44 + v68);
          v69 = v67 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v70 = &v44[v66];
            result = *(__n128 *)&v43[v66 * 16];
            v71 = *(__n128 *)&v43[v66 * 16 + 16];
            *v70 = result;
            v70[1] = v71;
            v66 += 2;
            v69 -= 4;
          }
          while (v69);
          if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v57 = v43;
          v58 = v44;
        }
        do
        {
          v59 = *(_QWORD *)v57;
          v57 += 8;
          v58->n128_u64[0] = v59;
          v58 = (__n128 *)((char *)v58 + 8);
        }
        while (v57 != v40);
        return result;
      }
      v46 = *(_QWORD *)v42;
      v47 = *(_QWORD *)v43;
      v48 = *v41;
      result.n128_u64[0] = *(_QWORD *)(*v41 + 32 * *(_QWORD *)v42);
      v49 = *(double *)(*v41 + 32 * *(_QWORD *)v43);
      if (result.n128_f64[0] < v49 && *(double *)(v48 + 32 * v46 + 8) > *(double *)(v48 + 32 * v47 + 8))
        goto LABEL_42;
      if (v49 < result.n128_f64[0])
        break;
      result.n128_f64[0] = result.n128_f64[0] + *(double *)(v48 + 32 * v46 + 8);
      if (result.n128_f64[0] <= v49 + *(double *)(v48 + 32 * v47 + 8))
        goto LABEL_51;
LABEL_42:
      v44->n128_u64[0] = v46;
      v44 = (__n128 *)((char *)v44 + 8);
      v42 += 8;
      v9 = (__n128 *)((char *)v9 + 8);
      if (v43 == v40)
        goto LABEL_52;
    }
    v50 = *(double *)(v48 + 32 * v47 + 8);
    v51 = *(double *)(v48 + 32 * v46 + 8);
    if (v50 <= v51)
    {
      result.n128_f64[0] = result.n128_f64[0] + v51;
      if (result.n128_f64[0] > v49 + v50)
        goto LABEL_42;
    }
LABEL_51:
    v44->n128_u64[0] = v47;
    v44 = (__n128 *)((char *)v44 + 8);
    v43 += 8;
    v9 = (__n128 *)((char *)v9 + 8);
  }
  while (v43 != v40);
LABEL_52:
  if (v42 == v45)
    return result;
  v52 = &a5[8 * a4] - v42 - 8;
  if (v52 < 0x48 || (unint64_t)((char *)v9 - v42) < 0x20)
  {
    v53 = v42;
    v54 = v44;
    do
    {
LABEL_56:
      v55 = *(_QWORD *)v53;
      v53 += 8;
      v54->n128_u64[0] = v55;
      v54 = (__n128 *)((char *)v54 + 8);
    }
    while (v53 != v45);
    return result;
  }
  v60 = 0;
  v61 = (v52 >> 3) + 1;
  v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
  v53 = &v42[v62];
  v54 = (__n128 *)((char *)v44 + v62);
  v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v64 = &v44[v60];
    result = *(__n128 *)&v42[v60 * 16];
    v65 = *(__n128 *)&v42[v60 * 16 + 16];
    *v64 = result;
    v64[1] = v65;
    v60 += 2;
    v63 -= 4;
  }
  while (v63);
  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_56;
  return result;
}

__n128 sub_1BE6FCE00(char *a1, char *a2, uint64_t **a3, unint64_t a4, char *a5, __n128 result)
{
  char *v6;
  char *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  __int128 v69;

  if (!a4)
    return result;
  v6 = a5;
  v8 = a1;
  if (a4 == 1)
  {
LABEL_11:
    *(_QWORD *)v6 = *(_QWORD *)v8;
    return result;
  }
  if (a4 == 2)
  {
    v11 = *((_QWORD *)a2 - 1);
    v12 = *(_QWORD *)a1;
    v13 = **a3;
    result.n128_u64[0] = *(_QWORD *)(v13 + 32 * v11);
    v14 = *(double *)(v13 + 32 * *(_QWORD *)a1);
    if (result.n128_f64[0] < v14 && *(double *)(v13 + 32 * v11 + 8) > *(double *)(v13 + 32 * v12 + 8))
      goto LABEL_10;
    if (v14 >= result.n128_f64[0])
    {
      result.n128_f64[0] = result.n128_f64[0] + *(double *)(v13 + 32 * v11 + 8);
      if (result.n128_f64[0] > v14 + *(double *)(v13 + 32 * v12 + 8))
        goto LABEL_10;
    }
    else
    {
      v15 = *(double *)(v13 + 32 * v12 + 8);
      v16 = *(double *)(v13 + 32 * v11 + 8);
      if (v15 <= v16)
      {
        result.n128_f64[0] = result.n128_f64[0] + v16;
        if (result.n128_f64[0] > v14 + v15)
          goto LABEL_10;
      }
    }
    v11 = *(_QWORD *)a1;
    v8 = a2 - 8;
LABEL_10:
    *(_QWORD *)a5 = v11;
    v6 = a5 + 8;
    goto LABEL_11;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2)
      return result;
    v17 = *a3;
    v18 = a1 + 8;
    *(_QWORD *)a5 = *(_QWORD *)a1;
    if (a1 + 8 == a2)
      return result;
    v19 = 0;
    v20 = *v17;
    v21 = a5;
    v22 = (uint64_t *)a5;
    while (1)
    {
      v26 = *v22++;
      v25 = v26;
      v27 = *(_QWORD *)v18;
      result.n128_u64[0] = *(_QWORD *)(v20 + 32 * *(_QWORD *)v18);
      v28 = *(double *)(v20 + 32 * v26);
      if (result.n128_f64[0] < v28 && *(double *)(v20 + 32 * v27 + 8) > *(double *)(v20 + 32 * v25 + 8))
        goto LABEL_24;
      if (v28 >= result.n128_f64[0])
      {
        result.n128_f64[0] = result.n128_f64[0] + *(double *)(v20 + 32 * v27 + 8);
        if (result.n128_f64[0] <= v28 + *(double *)(v20 + 32 * v25 + 8))
          goto LABEL_35;
LABEL_24:
        *((_QWORD *)v21 + 1) = v25;
        v23 = a5;
        if (v21 != a5)
        {
          v31 = v19;
          while (1)
          {
            v34 = *(_QWORD *)v18;
            v35 = *(_QWORD *)&a5[v31 - 8];
            result.n128_u64[0] = *(_QWORD *)(v20 + 32 * *(_QWORD *)v18);
            v36 = *(double *)(v20 + 32 * v35);
            if (result.n128_f64[0] >= v36 || *(double *)(v20 + 32 * v34 + 8) <= *(double *)(v20 + 32 * v35 + 8))
            {
              if (v36 >= result.n128_f64[0])
              {
                v32 = *(double *)(v20 + 32 * v34 + 8);
                v33 = *(double *)(v20 + 32 * v35 + 8);
              }
              else
              {
                v33 = *(double *)(v20 + 32 * v35 + 8);
                v32 = *(double *)(v20 + 32 * v34 + 8);
                if (v33 > v32)
                {
                  v23 = v21;
                  goto LABEL_18;
                }
              }
              result.n128_f64[0] = result.n128_f64[0] + v32;
              if (result.n128_f64[0] <= v36 + v33)
                break;
            }
            v21 -= 8;
            *(_QWORD *)&a5[v31] = v35;
            v31 -= 8;
            if (!v31)
            {
              v23 = a5;
              goto LABEL_18;
            }
          }
          v23 = &a5[v31];
        }
LABEL_18:
        v24 = *(_QWORD *)v18;
        v18 += 8;
        *(_QWORD *)v23 = v24;
        v19 += 8;
        v21 = (char *)v22;
        if (v18 == a2)
          return result;
      }
      else
      {
        v29 = *(double *)(v20 + 32 * v25 + 8);
        v30 = *(double *)(v20 + 32 * v27 + 8);
        if (v29 <= v30)
        {
          result.n128_f64[0] = result.n128_f64[0] + v30;
          if (result.n128_f64[0] > v28 + v29)
            goto LABEL_24;
        }
LABEL_35:
        *v22 = v27;
        v18 += 8;
        v19 += 8;
        v21 = (char *)v22;
        if (v18 == a2)
          return result;
      }
    }
  }
  v37 = a4 >> 1;
  v38 = 8 * (a4 >> 1);
  v39 = &a1[v38];
  sub_1BE6FC92C(a1, &a1[v38], a3, a4 >> 1, a5, a4 >> 1);
  sub_1BE6FC92C(&v8[v38], a2, a3, a4 - v37, &v6[v38], a4 - v37);
  v40 = *a3;
  v41 = v6;
  v42 = v8;
  v43 = &v8[v38];
  do
  {
    while (1)
    {
      if (v43 == a2)
      {
        if (v42 == v39)
          return result;
        v54 = &v8[8 * v37] - v42 - 8;
        if (v54 >= 0x38 && (unint64_t)(v41 - v42) >= 0x20)
        {
          v64 = 0;
          v65 = (v54 >> 3) + 1;
          v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          v55 = &v6[v66];
          v56 = &v42[v66];
          v67 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = &v6[v64];
            result = *(__n128 *)&v42[v64];
            v69 = *(_OWORD *)&v42[v64 + 16];
            *(__n128 *)v68 = result;
            *((_OWORD *)v68 + 1) = v69;
            v64 += 32;
            v67 -= 4;
          }
          while (v67);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v55 = v6;
          v56 = v42;
        }
        do
        {
          v57 = *(_QWORD *)v56;
          v56 += 8;
          *(_QWORD *)v55 = v57;
          v55 += 8;
        }
        while (v56 != v39);
        return result;
      }
      v44 = *(_QWORD *)v43;
      v45 = *(_QWORD *)v42;
      v46 = *v40;
      result.n128_u64[0] = *(_QWORD *)(*v40 + 32 * *(_QWORD *)v43);
      v47 = *(double *)(*v40 + 32 * *(_QWORD *)v42);
      if (result.n128_f64[0] < v47 && *(double *)(v46 + 32 * v44 + 8) > *(double *)(v46 + 32 * v45 + 8))
        goto LABEL_39;
      if (v47 < result.n128_f64[0])
        break;
      result.n128_f64[0] = result.n128_f64[0] + *(double *)(v46 + 32 * v44 + 8);
      if (result.n128_f64[0] <= v47 + *(double *)(v46 + 32 * v45 + 8))
        goto LABEL_48;
LABEL_39:
      *(_QWORD *)v6 = v44;
      v6 += 8;
      v43 += 8;
      v41 += 8;
      if (v42 == v39)
        goto LABEL_49;
    }
    v48 = *(double *)(v46 + 32 * v45 + 8);
    v49 = *(double *)(v46 + 32 * v44 + 8);
    if (v48 <= v49)
    {
      result.n128_f64[0] = result.n128_f64[0] + v49;
      if (result.n128_f64[0] > v47 + v48)
        goto LABEL_39;
    }
LABEL_48:
    *(_QWORD *)v6 = v45;
    v6 += 8;
    v42 += 8;
    v41 += 8;
  }
  while (v42 != v39);
LABEL_49:
  if (v43 == a2)
    return result;
  v50 = a2 - v43 - 8;
  if (v50 < 0x48 || (unint64_t)(v41 - v43) < 0x20)
  {
    v51 = v6;
    v52 = v43;
    do
    {
LABEL_53:
      v53 = *(_QWORD *)v52;
      v52 += 8;
      *(_QWORD *)v51 = v53;
      v51 += 8;
    }
    while (v52 != a2);
    return result;
  }
  v58 = 0;
  v59 = (v50 >> 3) + 1;
  v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
  v51 = &v6[v60];
  v52 = &v43[v60];
  v61 = v59 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v62 = &v6[v58];
    result = *(__n128 *)&v43[v58];
    v63 = *(_OWORD *)&v43[v58 + 16];
    *(__n128 *)v62 = result;
    *((_OWORD *)v62 + 1) = v63;
    v58 += 32;
    v61 -= 4;
  }
  while (v61);
  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_53;
  return result;
}

__n128 sub_1BE6FD2D8(__n128 *a1, __n128 *a2, char *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v9;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  double *v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v22;
  double v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  __n128 *v28;
  unint64_t v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __n128 *v43;
  __n128 *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  double *v49;
  double *v50;
  double v51;
  double v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  int64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 *v70;
  unint64_t v71;
  unint64_t v72;
  __n128 *v73;
  __n128 *v74;
  __n128 *v75;
  uint64_t v76;
  BOOL v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  __n128 *v82;
  uint64_t **v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t **v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;
  char *v95;
  __n128 *v96;
  uint64_t v97;
  uint64_t v98;
  __n128 *v99;
  __n128 *v100;
  uint64_t v101;
  __n128 v102;
  unint64_t v103;
  char *v104;
  __n128 *v105;
  uint64_t v106;
  uint64_t v107;
  __n128 *v108;
  __n128 *v109;
  uint64_t v110;
  __n128 v111;
  unint64_t v112;
  uint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  unint64_t v120;
  uint64_t *v121;
  char *v122;
  uint64_t v123;
  __n128 *v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t **v146;
  uint64_t **v147;
  char *v148;
  char *v149;

  if (!a6)
    return result;
  v9 = a6;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5)
      return result;
    v13 = 0;
    v14 = **a4;
    v15 = (_QWORD *)(v14 + 32 * a2->n128_u64[0]);
    v17 = *v15;
    v16 = (double *)(v15 + 1);
    result.n128_u64[0] = v17;
    v18 = -a5;
    while (1)
    {
      v22 = a1->n128_i64[v13 / 8];
      v23 = *(double *)(v14 + 32 * v22);
      if (result.n128_f64[0] < v23 && *v16 > *(double *)(v14 + 32 * v22 + 8))
        break;
      if (v23 >= result.n128_f64[0])
      {
        v19 = *v16;
        v20 = *(double *)(v14 + 32 * v22 + 8);
LABEL_8:
        if (result.n128_f64[0] + v19 > v23 + v20)
          break;
        goto LABEL_9;
      }
      v20 = *(double *)(v14 + 32 * v22 + 8);
      v19 = *v16;
      if (v20 <= *v16)
        goto LABEL_8;
LABEL_9:
      v13 += 8;
      if (__CFADD__(v18++, 1))
        return result;
    }
    v24 = (__n128 *)((char *)a1 + v13);
    if (-v18 >= v9)
    {
      if (v18 == -1)
      {
        a1->n128_u64[v13 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v22;
        return result;
      }
      if (v18 <= 0)
        v39 = -v18;
      else
        v39 = 1 - v18;
      v40 = v39 >> 1;
      v28 = (__n128 *)((char *)a1 + 8 * (v39 >> 1) + v13);
      if (a2 == (__n128 *)a3)
      {
        v26 = 0;
LABEL_37:
        v41 = (8 * v26) >> 3;
        v27 = v28;
        v42 = &a2->n128_i8[8 * v26];
        if (v28 != a2)
          goto LABEL_41;
        goto LABEL_38;
      }
      v26 = 0;
      v48 = (a3 - (char *)a2) >> 3;
      v49 = (double *)(v14 + 32 * v28->n128_u64[0]);
      v51 = *v49;
      v50 = v49 + 1;
      v52 = v51;
      while (2)
      {
        v53 = v48 >> 1;
        v54 = (v48 >> 1) + v26;
        v55 = a2->n128_i64[v54];
        v56 = *(double *)(v14 + 32 * v55);
        if (v56 >= v52 || *(double *)(v14 + 32 * v55 + 8) <= *v50)
        {
          if (v52 >= v56)
          {
            if (v56 + *(double *)(v14 + 32 * v55 + 8) <= v52 + *v50)
              goto LABEL_49;
          }
          else
          {
            v57 = *(double *)(v14 + 32 * v55 + 8);
            if (*v50 > v57 || v56 + v57 <= v52 + *v50)
            {
LABEL_49:
              v48 = v53;
              if (!v53)
                goto LABEL_37;
              continue;
            }
          }
        }
        break;
      }
      v26 = v54 + 1;
      v53 = v48 + ~v53;
      goto LABEL_49;
    }
    if (v9 >= 0)
      v25 = v9;
    else
      v25 = v9 + 1;
    v26 = v25 >> 1;
    v27 = a2;
    v28 = (__n128 *)((char *)a1 + v13);
    if ((char *)a2 - (char *)a1 != v13)
    {
      v29 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 3;
      v30 = (double *)(v14 + 32 * a2->n128_u64[v26]);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = v32;
      v28 = (__n128 *)((char *)a1 + v13);
      while (1)
      {
        v34 = v29 >> 1;
        v35 = &v28->n128_u64[v29 >> 1];
        v36 = *v35;
        v37 = *(double *)(v14 + 32 * *v35);
        if (v33 < v37 && *v31 > *(double *)(v14 + 32 * v36 + 8))
          goto LABEL_22;
        if (v37 >= v33)
        {
          if (v33 + *v31 > v37 + *(double *)(v14 + 32 * v36 + 8))
            goto LABEL_22;
        }
        else
        {
          v38 = *(double *)(v14 + 32 * v36 + 8);
          if (v38 <= *v31 && v33 + *v31 > v37 + v38)
            goto LABEL_22;
        }
        v28 = (__n128 *)(v35 + 1);
        v34 = v29 + ~v34;
LABEL_22:
        v29 = v34;
        if (!v34)
        {
          v27 = v28;
          break;
        }
      }
    }
    v40 = (uint64_t)((char *)v27 - (char *)a1 - v13) >> 3;
    v41 = v26;
    v42 = &a2->n128_i8[8 * v26];
    if (v28 != a2)
    {
LABEL_41:
      v43 = v27;
      if (v26)
      {
        v44 = (__n128 *)&v28->n128_i8[8];
        if (&v28->n128_i8[8] == (__int8 *)a2)
        {
          v141 = v28->n128_u64[0];
          v143 = v41;
          v58 = v42 - (char *)a2;
          v147 = a4;
          v149 = a7;
          v59 = a3;
          v60 = a8;
          v145 = v40;
          memmove(v28, a2, v42 - (char *)a2);
          v41 = v143;
          v40 = v145;
          v24 = (__n128 *)((char *)a1 + v13);
          a4 = v147;
          a8 = v60;
          a3 = v59;
          a7 = v149;
          v43 = (__n128 *)((char *)v28 + v58);
          v43->n128_u64[0] = v141;
        }
        else if (v26 == 1)
        {
          v45 = *((_QWORD *)v42 - 1);
          v43 = (__n128 *)&v27->n128_i8[8];
          if (v42 - 8 != (char *)v28)
          {
            v146 = a4;
            v148 = a7;
            v46 = a3;
            v47 = a8;
            v144 = v40;
            v140 = *((_QWORD *)v42 - 1);
            v142 = v41;
            memmove(&v27->n128_i8[8], v28, v42 - 8 - (char *)v27);
            v45 = v140;
            v41 = v142;
            v40 = v144;
            v24 = (__n128 *)((char *)a1 + v13);
            a8 = v47;
            a4 = v146;
            a7 = v148;
            a3 = v46;
          }
          v28->n128_u64[0] = v45;
        }
        else
        {
          v61 = ((char *)a2 - (char *)v27) >> 3;
          v62 = (v42 - (char *)a2) >> 3;
          if (v61 == v62)
          {
            v63 = 8 * v26 - 8;
            v64 = a2;
            do
            {
              v65 = v44[-1].n128_i64[1];
              v44[-1].n128_u64[1] = v64->n128_u64[0];
              v64->n128_u64[0] = v65;
              v64 = (__n128 *)((char *)v64 + 8);
              if (v44 == a2)
                break;
              v44 = (__n128 *)((char *)v44 + 8);
              v66 = v63;
              v63 -= 8;
            }
            while (v66);
            v43 = a2;
          }
          else
          {
            v67 = (v42 - (char *)a2) >> 3;
            v68 = ((char *)a2 - (char *)v27) >> 3;
            do
            {
              v69 = v68;
              v68 = v67;
              v67 = v69 % v67;
            }
            while (v67);
            if (v68)
            {
              v70 = (__n128 *)((char *)v28 + 8 * v68);
              do
              {
                v72 = v70[-1].n128_u64[1];
                v70 = (__n128 *)((char *)v70 - 8);
                v71 = v72;
                v73 = (__n128 *)((char *)v70 + 8 * v61);
                v74 = v70;
                do
                {
                  v75 = v73;
                  v74->n128_u64[0] = v73->n128_u64[0];
                  v76 = (v42 - (char *)v73) >> 3;
                  v77 = __OFSUB__(v61, v76);
                  v79 = v61 - v76;
                  v78 = (v79 < 0) ^ v77;
                  v73 = (__n128 *)((char *)v28 + 8 * v79);
                  if (v78)
                    v73 = (__n128 *)((char *)v75 + 8 * v61);
                  v74 = v75;
                }
                while (v73 != v70);
                v75->n128_u64[0] = v71;
              }
              while (v70 != v28);
            }
            v43 = (__n128 *)((char *)v28 + 8 * v62);
          }
        }
      }
      goto LABEL_74;
    }
LABEL_38:
    v43 = (__n128 *)v42;
LABEL_74:
    a5 = -v40 - v18;
    v80 = v9 - v41;
    if (v40 + v41 >= v9 - (v40 + v41) - v18)
    {
      v87 = a4;
      v88 = v40;
      v89 = v41;
      v90 = a7;
      v91 = a8;
      a1 = v24;
      sub_1BE6FD2D8(v43, v42, a3);
      v92 = v89;
      a5 = v88;
      a3 = (char *)v43;
      v9 = v92;
      a2 = v27;
      a7 = v90;
      a4 = v87;
      a8 = v91;
      if (!v92)
        return result;
    }
    else
    {
      v81 = &a1->n128_u64[v13 / 8];
      v82 = v27;
      v83 = a4;
      v84 = a7;
      v85 = a8;
      v86 = a3;
      sub_1BE6FD2D8(v81, v82, v43);
      a3 = v86;
      a1 = v43;
      v9 = v80;
      a2 = (__n128 *)v42;
      a7 = v84;
      a4 = v83;
      a8 = v85;
      if (!v80)
        return result;
    }
  }
  if (a5 <= v9)
  {
    if (a1 == a2)
      return result;
    v103 = (char *)a2 - (char *)a1 - 8;
    v104 = a7;
    v105 = a1;
    if (v103 < 0x18)
      goto LABEL_135;
    v104 = a7;
    v105 = a1;
    if ((unint64_t)(a7 - (char *)a1) < 0x20)
      goto LABEL_135;
    v106 = (v103 >> 3) + 1;
    v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
    v104 = &a7[v107];
    v105 = (__n128 *)((char *)a1 + v107);
    v108 = a1 + 1;
    v109 = (__n128 *)(a7 + 16);
    v110 = v106 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = v108[-1];
      v111 = *v108;
      v109[-1] = result;
      *v109 = v111;
      v108 += 2;
      v109 += 2;
      v110 -= 4;
    }
    while (v110);
    if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_135:
      do
      {
        v112 = v105->n128_u64[0];
        v105 = (__n128 *)((char *)v105 + 8);
        *(_QWORD *)v104 = v112;
        v104 += 8;
      }
      while (v105 != a2);
    }
    if (v104 == a7)
      return result;
    v113 = *a4;
    while (1)
    {
      if (a2 == (__n128 *)a3)
      {
        memmove(a1, a7, v104 - a7);
        return result;
      }
      v114 = a2->n128_u64[0];
      v115 = *(_QWORD *)a7;
      v116 = *v113;
      result.n128_u64[0] = *(_QWORD *)(*v113 + 32 * a2->n128_u64[0]);
      v117 = *(double *)(*v113 + 32 * *(_QWORD *)a7);
      if (result.n128_f64[0] < v117 && *(double *)(v116 + 32 * v114 + 8) > *(double *)(v116 + 32 * v115 + 8))
        goto LABEL_96;
      if (v117 >= result.n128_f64[0])
      {
        v119 = *(double *)(v116 + 32 * v114 + 8);
        v118 = *(double *)(v116 + 32 * v115 + 8);
      }
      else
      {
        v118 = *(double *)(v116 + 32 * v115 + 8);
        v119 = *(double *)(v116 + 32 * v114 + 8);
        if (v118 > v119)
          goto LABEL_105;
      }
      result.n128_f64[0] = result.n128_f64[0] + v119;
      if (result.n128_f64[0] > v117 + v118)
      {
LABEL_96:
        a1->n128_u64[0] = v114;
        a1 = (__n128 *)((char *)a1 + 8);
        a2 = (__n128 *)((char *)a2 + 8);
        if (a7 == v104)
          return result;
      }
      else
      {
LABEL_105:
        a1->n128_u64[0] = v115;
        a1 = (__n128 *)((char *)a1 + 8);
        a7 += 8;
        if (a7 == v104)
          return result;
      }
    }
  }
  v93 = a3 - (char *)a2;
  if (a3 == (char *)a2)
    return result;
  v94 = v93 - 8;
  if ((unint64_t)(v93 - 8) < 0x18)
  {
    v95 = a7;
    v96 = a2;
  }
  else
  {
    v95 = a7;
    v96 = a2;
    if ((unint64_t)(a7 - (char *)a2) >= 0x20)
    {
      v97 = (v94 >> 3) + 1;
      v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      v95 = &a7[v98];
      v96 = (__n128 *)((char *)a2 + v98);
      v99 = a2 + 1;
      v100 = (__n128 *)(a7 + 16);
      v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v99[-1];
        v102 = *v99;
        v100[-1] = result;
        *v100 = v102;
        v99 += 2;
        v100 += 2;
        v101 -= 4;
      }
      while (v101);
      if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_111;
    }
  }
  do
  {
    v120 = v96->n128_u64[0];
    v96 = (__n128 *)((char *)v96 + 8);
    *(_QWORD *)v95 = v120;
    v95 += 8;
  }
  while (v96 != (__n128 *)a3);
LABEL_111:
  if (v95 == a7)
    return result;
  v121 = *a4;
  v122 = a3;
  while (a2 != a1)
  {
    v124 = (__n128 *)((char *)a2 - 8);
    v123 = a2[-1].n128_i64[1];
    v125 = *((_QWORD *)v95 - 1);
    v126 = *v121;
    result.n128_u64[0] = *(_QWORD *)(*v121 + 32 * v125);
    v127 = *(double *)(*v121 + 32 * v123);
    if (result.n128_f64[0] < v127 && *(double *)(v126 + 32 * v125 + 8) > *(double *)(v126 + 32 * v123 + 8))
      goto LABEL_114;
    if (v127 >= result.n128_f64[0])
    {
      result.n128_f64[0] = result.n128_f64[0] + *(double *)(v126 + 32 * v125 + 8);
      if (result.n128_f64[0] > v127 + *(double *)(v126 + 32 * v123 + 8))
        goto LABEL_114;
    }
    else
    {
      v128 = *(double *)(v126 + 32 * v123 + 8);
      v129 = *(double *)(v126 + 32 * v125 + 8);
      if (v128 <= v129)
      {
        result.n128_f64[0] = result.n128_f64[0] + v129;
        if (result.n128_f64[0] > v127 + v128)
          goto LABEL_114;
      }
    }
    v123 = *((_QWORD *)v95 - 1);
    v124 = a2;
    v95 -= 8;
LABEL_114:
    *((_QWORD *)a3 - 1) = v123;
    a3 -= 8;
    v122 -= 8;
    a2 = v124;
    if (v95 == a7)
      return result;
  }
  v130 = v95 - a7 - 8;
  if (v130 < 0x58 || (unint64_t)(v95 - v122) < 0x20)
  {
    v131 = v95;
    v132 = a3;
    goto LABEL_127;
  }
  v135 = 0;
  v136 = (v130 >> 3) + 1;
  v137 = 8 * (v136 & 0x3FFFFFFFFFFFFFFCLL);
  v131 = &v95[-v137];
  v132 = &a3[-v137];
  v138 = v136 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = *(__n128 *)&v95[v135 - 16];
    v139 = &a3[v135];
    *((_OWORD *)v139 - 2) = *(_OWORD *)&v95[v135 - 32];
    *((__n128 *)v139 - 1) = result;
    v135 -= 32;
    v138 -= 4;
  }
  while (v138);
  if (v136 != (v136 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_127:
    v133 = v132 - 8;
    do
    {
      v134 = *((_QWORD *)v131 - 1);
      v131 -= 8;
      *(_QWORD *)v133 = v134;
      v133 -= 8;
    }
    while (v131 != a7);
  }
  return result;
}

_OWORD *sub_1BE6FDB64(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  _OWORD *v22;
  char *v23;
  __int128 v24;
  _BYTE *v25;
  _OWORD *v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  BOOL v35;
  char v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  _OWORD *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(_OWORD **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v35 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v35)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      sub_1BE6FB4B8();
    v12 = v11;
    result = operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = memcpy(result, a2, (a3 - a2) & 0xFFFFFFFFFFFFFFF0);
      v14 = &v13[(a3 - a2) & 0xFFFFFFFFFFFFFFF0];
    }
    v15 = v14 - v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(_BYTE **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = v17 - (_BYTE *)result;
  v19 = (v17 - (_BYTE *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v29 = (char *)result;
    }
    else
    {
      v28 = a3 - a2 - 16;
      if (v28 < 0xF0
        || ((v47 = v28 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)&a2[v47],
             v50 = (v28 & 0xFFFFFFFFFFFFFFF0) + 16,
             (char *)result + 8 < &a2[v50])
          ? (v51 = a2 + 8 >= (char *)result + v50)
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v29 = (char *)result;
        v30 = a2;
      }
      else
      {
        v54 = (v28 >> 4) + 1;
        v55 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        v29 = (char *)&result[v55];
        v30 = &a2[v55 * 16];
        v56 = (__int128 *)(a2 + 32);
        v57 = result + 2;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v60 = *(v56 - 2);
          v59 = *(v56 - 1);
          v62 = *v56;
          v61 = v56[1];
          v56 += 4;
          *(v57 - 2) = v60;
          *(v57 - 1) = v59;
          *v57 = v62;
          v57[1] = v61;
          v57 += 4;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v31 = *(_OWORD *)v30;
        v30 += 16;
        *(_OWORD *)v29 = v31;
        v29 += 16;
      }
      while (v30 != a3);
    }
LABEL_28:
    v15 = v29 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[16 * v19];
  if (v13 != (_BYTE *)result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v32 = v18 & 0xFFFFFFFFFFFFFFF0,
           v33 = (char *)result + v32 - 8,
           v34 = (unint64_t)&a2[v32 - 8],
           (char *)result + 8 < &a2[v32])
        ? (v35 = a2 + 8 >= (char *)result + v32)
        : (v35 = 1),
          v35 ? (v36 = 0) : (v36 = 1),
          v33 > a2 ? (v37 = (unint64_t)result >= v34) : (v37 = 1),
          !v37 || (v36 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v38 = (v21 >> 4) + 1;
      v39 = v38 & 0x1FFFFFFFFFFFFFFCLL;
      v22 = &result[v39];
      v23 = &a2[v39 * 16];
      v40 = (__int128 *)(a2 + 32);
      v41 = result + 2;
      v42 = v38 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *(v40 - 2);
        v43 = *(v40 - 1);
        v46 = *v40;
        v45 = v40[1];
        v40 += 4;
        *(v41 - 2) = v44;
        *(v41 - 1) = v43;
        *v41 = v46;
        v41[1] = v45;
        v41 += 4;
        v42 -= 4;
      }
      while (v42);
      if (v38 == (v38 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_OWORD *)v23;
      v23 += 16;
      *v22++ = v24;
    }
    while (v23 != v20);
  }
LABEL_18:
  v25 = v13;
  if (v20 != a3)
  {
    v26 = v13;
    do
    {
      v27 = *(_OWORD *)v20;
      v20 += 16;
      *v26++ = v27;
      v25 += 16;
    }
    while (v20 != a3);
  }
  v15 = v25 - v13;
LABEL_29:
  *v16 = &v13[v15];
  return result;
}

double sub_1BE6FDE18(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  double *n128_f64;
  double *v10;
  double *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  double v17;
  double v18;
  __n128 v19;
  double v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  double v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  double v32;
  double v33;
  double v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 *v46;
  unint64_t v47;
  __n128 *v48;
  double v49;
  double v50;
  double v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  double v61;
  double v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  uint64_t v69;
  double v70;
  unint64_t v71;
  __n128 *v72;
  double v73;
  double v74;
  __n128 *v75;
  __n128 v76;
  double v77;
  double v78;
  __int128 v79;
  BOOL v80;
  __n128 v81;
  double v82;
  unint64_t v83;
  __n128 *v84;
  double v85;
  __n128 v86;
  double v87;
  double v88;
  __int128 v89;
  __n128 *v90;
  double v91;
  __n128 *v92;
  double v93;
  double v94;
  __n128 v95;
  __n128 v96;
  __n128 *v97;
  __n128 *v98;
  __n128 *v99;
  __n128 *v100;
  double v101;
  __n128 v102;
  __n128 v103;
  __int128 v104;
  __n128 v105;
  __int128 v106;
  __int128 v107;
  __n128 *v108;
  BOOL v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  __n128 *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  int64_t v118;
  int64_t v119;
  BOOL v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  double v124;
  _OWORD *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __n128 *v131;
  __n128 v132;
  __n128 *v133;
  uint64_t v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  unint64_t v138;
  __n128 *v139;
  __n128 *v140;
  __n128 v141;
  __n128 v142;
  __int128 v143;
  uint64_t v144;
  __n128 *v145;
  __n128 v146;
  double v147;
  __int128 v148;
  __n128 v149;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __int128 v178;
  __int128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  __n128 v212;
  __n128 v213;
  __int128 v214;
  unint64_t v215;
  __int128 v216;

BOOL sub_1BE6FE9B4(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 *v8;
  double v9;
  double v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 *v14;
  double v15;
  __n128 *v16;
  double v17;
  double v18;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *v25;
  double v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __int128 v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __n128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __n128 v40;
  __int128 v41;
  __int128 v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  __n128 v46;
  __int128 v47;
  __int128 v48;
  __n128 v49;
  __int128 v50;
  __int128 v51;
  __n128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __n128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v5 = (a2 - a1) >> 5;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = (__n128 *)(a2 - 32);
      if (*(double *)(a2 - 32) < *(double *)a1)
        goto LABEL_7;
      return result;
    case 3:
      v8 = (__n128 *)(a1 + 32);
      v9 = *(double *)(a1 + 32);
      v7 = (__n128 *)(a2 - 32);
      v10 = *(double *)(a2 - 32);
      if (v9 >= *(double *)a1)
      {
        if (v10 < v9)
        {
          v40 = *v8;
          v39 = *(_OWORD *)(a1 + 48);
          v41 = *(_OWORD *)(a2 - 16);
          *v8 = *v7;
          *(_OWORD *)(a1 + 48) = v41;
          *v7 = v40;
          *(_OWORD *)(a2 - 16) = v39;
          if (*(double *)(a1 + 32) < *(double *)a1)
          {
            v43 = *(__n128 *)a1;
            v42 = *(_OWORD *)(a1 + 16);
            v44 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v8;
            *(_OWORD *)(a1 + 16) = v44;
            *v8 = v43;
            *(_OWORD *)(a1 + 48) = v42;
          }
        }
      }
      else
      {
        if (v10 < v9)
        {
LABEL_7:
          v12 = *(__n128 *)a1;
          v11 = *(__n128 *)(a1 + 16);
          v13 = v7[1];
          *(__n128 *)a1 = *v7;
          *(__n128 *)(a1 + 16) = v13;
LABEL_8:
          *v7 = v12;
          v7[1] = v11;
          return result;
        }
        v52 = *(__n128 *)a1;
        v51 = *(_OWORD *)(a1 + 16);
        v53 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v8;
        *(_OWORD *)(a1 + 16) = v53;
        *v8 = v52;
        *(_OWORD *)(a1 + 48) = v51;
        if (v7->n128_f64[0] < *(double *)(a1 + 32))
        {
          v12 = *v8;
          v11 = *(__n128 *)(a1 + 48);
          v54 = *(_OWORD *)(a2 - 16);
          *v8 = *v7;
          *(_OWORD *)(a1 + 48) = v54;
          goto LABEL_8;
        }
      }
      return result;
    case 4:
      sub_1BE6FED30((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a2 - 32), a3);
      return 1;
    case 5:
      v22 = (__n128 *)(a1 + 32);
      v23 = (__n128 *)(a1 + 64);
      v24 = (__n128 *)(a1 + 96);
      sub_1BE6FED30((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), a3);
      v26 = *(double *)(a2 - 32);
      v25 = (__n128 *)(a2 - 32);
      if (v26 < *(double *)(a1 + 96))
      {
        v28 = *v24;
        v27 = *(__n128 *)(a1 + 112);
        v29 = v25[1];
        *v24 = *v25;
        *(__n128 *)(a1 + 112) = v29;
        *v25 = v28;
        v25[1] = v27;
        if (v24->n128_f64[0] < v23->n128_f64[0])
        {
          v31 = *v23;
          v30 = *(_OWORD *)(a1 + 80);
          v32 = *(_OWORD *)(a1 + 112);
          *v23 = *v24;
          *(_OWORD *)(a1 + 80) = v32;
          *v24 = v31;
          *(_OWORD *)(a1 + 112) = v30;
          if (v23->n128_f64[0] < v22->n128_f64[0])
          {
            v34 = *v22;
            v33 = *(_OWORD *)(a1 + 48);
            v35 = *(_OWORD *)(a1 + 80);
            *v22 = *v23;
            *(_OWORD *)(a1 + 48) = v35;
            *v23 = v34;
            *(_OWORD *)(a1 + 80) = v33;
            if (*(double *)(a1 + 32) < *(double *)a1)
            {
              v37 = *(__n128 *)a1;
              v36 = *(_OWORD *)(a1 + 16);
              v38 = *(_OWORD *)(a1 + 48);
              *(__n128 *)a1 = *v22;
              *(_OWORD *)(a1 + 16) = v38;
              *v22 = v37;
              *(_OWORD *)(a1 + 48) = v36;
            }
          }
        }
      }
      return 1;
    default:
      v14 = (__n128 *)(a1 + 64);
      v15 = *(double *)(a1 + 64);
      v16 = (__n128 *)(a1 + 32);
      v17 = *(double *)(a1 + 32);
      v18 = *(double *)a1;
      if (v17 >= *(double *)a1)
      {
        if (v15 < v17)
        {
          v46 = *v16;
          v45 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v16 = *v14;
          *(_OWORD *)(a1 + 48) = v47;
          *v14 = v46;
          *(_OWORD *)(a1 + 80) = v45;
          if (v16->n128_f64[0] < v18)
          {
            v49 = *(__n128 *)a1;
            v48 = *(_OWORD *)(a1 + 16);
            v50 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v16;
            *(_OWORD *)(a1 + 16) = v50;
            *v16 = v49;
            *(_OWORD *)(a1 + 48) = v48;
          }
        }
      }
      else
      {
        if (v15 >= v17)
        {
          v56 = *(__n128 *)a1;
          v55 = *(_OWORD *)(a1 + 16);
          v57 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v16;
          *(_OWORD *)(a1 + 16) = v57;
          *v16 = v56;
          *(_OWORD *)(a1 + 48) = v55;
          if (v15 >= *(double *)(a1 + 32))
            goto LABEL_29;
          v20 = *v16;
          v19 = *(_OWORD *)(a1 + 48);
          v58 = *(_OWORD *)(a1 + 80);
          *v16 = *v14;
          *(_OWORD *)(a1 + 48) = v58;
        }
        else
        {
          v20 = *(__n128 *)a1;
          v19 = *(_OWORD *)(a1 + 16);
          v21 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v21;
        }
        *v14 = v20;
        *(_OWORD *)(a1 + 80) = v19;
      }
LABEL_29:
      v59 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v60 = 0;
      v61 = 0;
      while (1)
      {
        v63 = *(double *)v59;
        if (*(double *)v59 < v14->n128_f64[0])
        {
          v67 = *(_OWORD *)(v59 + 8);
          v68 = *(_QWORD *)(v59 + 24);
          v64 = v60;
          do
          {
            v65 = a1 + v64;
            v66 = *(_OWORD *)(a1 + v64 + 80);
            *(_OWORD *)(v65 + 96) = *(_OWORD *)(a1 + v64 + 64);
            *(_OWORD *)(v65 + 112) = v66;
            if (v64 == -64)
            {
              v62 = a1;
              goto LABEL_32;
            }
            v64 -= 32;
          }
          while (v63 < *(double *)(v65 + 32));
          v62 = a1 + v64 + 96;
LABEL_32:
          *(double *)v62 = v63;
          *(_OWORD *)(v62 + 8) = v67;
          *(_QWORD *)(v62 + 24) = v68;
          if (++v61 == 8)
            return v59 + 32 == a2;
        }
        v14 = (__n128 *)v59;
        v60 += 32;
        v59 += 32;
        if (v59 == a2)
          return 1;
      }
  }
}

__n128 sub_1BE6FED30(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  double v5;
  double v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;

  v5 = a2->n128_f64[0];
  v6 = a3->n128_f64[0];
  if (a2->n128_f64[0] >= a1->n128_f64[0])
  {
    if (v6 < v5)
    {
      v9 = *a2;
      result = a2[1];
      v10 = a3[1];
      *a2 = *a3;
      a2[1] = v10;
      *a3 = v9;
      a3[1] = result;
      if (a2->n128_f64[0] < a1->n128_f64[0])
      {
        v11 = *a1;
        result = a1[1];
        v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        *a2 = v11;
        a2[1] = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = *a1;
      result = a1[1];
      v8 = a3[1];
      *a1 = *a3;
      a1[1] = v8;
LABEL_9:
      *a3 = v7;
      a3[1] = result;
      goto LABEL_10;
    }
    v13 = *a1;
    result = a1[1];
    v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    *a2 = v13;
    a2[1] = result;
    if (a3->n128_f64[0] < a2->n128_f64[0])
    {
      v7 = *a2;
      result = a2[1];
      v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = a4->n128_u64[0];
  if (a4->n128_f64[0] < a3->n128_f64[0])
  {
    v16 = *a3;
    result = a3[1];
    v17 = a4[1];
    *a3 = *a4;
    a3[1] = v17;
    *a4 = v16;
    a4[1] = result;
    result.n128_u64[0] = a3->n128_u64[0];
    if (a3->n128_f64[0] < a2->n128_f64[0])
    {
      v18 = *a2;
      result = a2[1];
      v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *a3 = v18;
      a3[1] = result;
      result.n128_u64[0] = a2->n128_u64[0];
      if (a2->n128_f64[0] < a1->n128_f64[0])
      {
        v20 = *a1;
        result = a1[1];
        v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        *a2 = v20;
        a2[1] = result;
      }
    }
  }
  return result;
}

char *sub_1BE6FEE3C(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_1BE6FB4B8();
  v9 = a1[2] - v3;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      sub_1BE61F100();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  if (v2 == v3)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v2 - v3 - 8;
    if (v15 < 0x78 || &v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v2)
      goto LABEL_31;
    v16 = (v15 >> 3) + 1;
    v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v17;
    v18 = &v2[-v17];
    v19 = v2 - 16;
    v20 = &v11[8 * v5 - 16];
    v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *((_OWORD *)v19 - 1);
      v22 = *(_OWORD *)v19;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)v19 = 0uLL;
      *((_OWORD *)v20 - 1) = v23;
      *(_OWORD *)v20 = v22;
      v19 -= 32;
      v20 -= 32;
      v21 -= 4;
    }
    while (v21);
    v2 = v18;
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v24 = *((_QWORD *)v2 - 1);
        v2 -= 8;
        *(_QWORD *)v2 = 0;
        *((_QWORD *)v12 - 1) = v24;
        v12 -= 8;
      }
      while (v2 != v3);
    }
    v2 = *a1;
    v25 = a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    while (v25 != v2)
    {
      v27 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      v26 = v27;
      *(_QWORD *)v25 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

_QWORD *sub_1BE6FEFD4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_1BE6FB4B8();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_1BE61F100();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    v19 = &v15[-v18];
    v20 = v15 - 16;
    v21 = &v9[8 * v3 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

id CoreHandwriting::synthesis::loadModel(CoreHandwriting::synthesis *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  size_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint8_t buf[8];
  size_t v43;
  int64_t v44;
  uint8_t v45[4];
  void *v46;
  char __s[1024];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = (const char *)objc_msgSend_UTF8String(CFSTR("diffusion_latn.bundle"), a2, a3, a4, a5, a6);
  if (pathForResource(v6, 0, (UInt8 *)__s))
  {
    v7 = strlen(__s);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      sub_1BE61F1B4();
    v11 = v7;
    if (v7 >= 0x17)
    {
      v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v15 = v7 | 7;
      v16 = v15 + 1;
      v12 = operator new(v15 + 1);
      v43 = v11;
      v44 = v16 | 0x8000000000000000;
      *(_QWORD *)buf = v12;
    }
    else
    {
      HIBYTE(v44) = v7;
      v12 = buf;
      if (!v7)
        goto LABEL_15;
    }
    memcpy(v12, __s, v11);
LABEL_15:
    *((_BYTE *)v12 + v11) = 0;
    if (v44 >= 0)
      objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v8, (uint64_t)buf, 4, v9, v10);
    else
      objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v8, *(uint64_t *)buf, 4, v9, v10);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fileURLWithPath_(MEMORY[0x1E0C99E98], v18, (uint64_t)v17, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_alloc(MEMORY[0x1E0C9E958]);
    v28 = (void *)objc_msgSend_initWithComputeUnits_(v23, v24, 0, v25, v26, v27);
    v41 = 0;
    objc_msgSend_modelWithContentsOfURL_configuration_error_(MEMORY[0x1E0C9E940], v29, (uint64_t)v22, (uint64_t)v28, (uint64_t)&v41, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v41;
    if (v31)
    {
      v33 = v31;
    }
    else
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v34 = (id)qword_1EF568E60;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_localizedDescription(v32, v35, v36, v37, v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v45 = 138412290;
        v46 = v40;
        _os_log_impl(&dword_1BE607000, v34, OS_LOG_TYPE_ERROR, "Model: An error occurred when loading a model: %@", v45, 0xCu);

      }
    }

    if (SHIBYTE(v44) < 0)
      operator delete(*(void **)buf);
    return v31;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v13 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v13, OS_LOG_TYPE_ERROR, "Model: Could not find model: diffusion_latn.bundle", buf, 2u);
  }

  return 0;
}

void sub_1BE6FF434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::loadCodemap(const char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  const char *v8;
  size_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *__p[2];
  unint64_t v30;
  void *__dst[2];
  int64_t v32;
  char __s[1024];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = (const char *)objc_msgSend_UTF8String(CFSTR("diffusion_latn.codemap"), a1, a2, a3, a4, a5);
  pathForResource(v8, 0, (UInt8 *)__s);
  v9 = strlen(__s);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v13 = (void *)v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    v32 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_8;
  }
  HIBYTE(v32) = v9;
  v14 = __dst;
  if (v9)
LABEL_8:
    memcpy(v14, __s, (size_t)v13);
  *((_BYTE *)v13 + (_QWORD)v14) = 0;
  if (v32 >= 0)
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v10, (uint64_t)__dst, 4, v11, v12);
  else
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v10, (uint64_t)__dst[0], 4, v11, v12);
  v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v22 = (const char *)objc_msgSend_cStringUsingEncoding_(v17, v18, 4, v19, v20, v21);
  v23 = strlen(v22);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    sub_1BE61F1B4();
  v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    __p[1] = v24;
    v30 = v27 | 0x8000000000000000;
    __p[0] = v25;
    goto LABEL_19;
  }
  HIBYTE(v30) = v23;
  v25 = __p;
  if (v23)
LABEL_19:
    memmove(v25, v22, (size_t)v24);
  *((_BYTE *)v24 + (_QWORD)v25) = 0;
  v28 = sub_1BE7E7FD4((uint64_t *)__p);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  *a6 = v28;

  if (SHIBYTE(v32) < 0)
    operator delete(__dst[0]);
}

void sub_1BE6FF67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a15 < 0)
    operator delete(__p);

  if (a21 < 0)
  {
    operator delete(a16);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::loadPPC(uint64_t **a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;

  v3 = atomic_load((unsigned __int8 *)&unk_1EF5680A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_1EF5680A8))
  {
    qword_1EF5680F8 = 0;
    qword_1EF5680F0 = 0;
    qword_1EF5680E8 = (uint64_t)&qword_1EF5680F0;
    __cxa_atexit((void (*)(void *))sub_1BE6FF900, &qword_1EF5680E8, &dword_1BE607000);
    __cxa_guard_release((__guard *)&unk_1EF5680A8);
  }
  if (qword_1EF5680B0 != -1)
    dispatch_once(&qword_1EF5680B0, &unk_1E77F1710);
  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  v5 = (uint64_t *)qword_1EF5680E8;
  if ((uint64_t *)qword_1EF5680E8 != &qword_1EF5680F0)
  {
    v6 = a1 + 1;
    while (1)
    {
      v7 = v5[4];
      v8 = *v4;
      v9 = a1 + 1;
      if (v6 != v4)
      {
        v10 = *v4;
        v11 = a1 + 1;
        if (v8)
        {
          do
          {
            v9 = v10;
            v10 = (uint64_t *)v10[1];
          }
          while (v10);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v11[2];
            v12 = *v9 == (_QWORD)v11;
            v11 = v9;
          }
          while (v12);
        }
        if (v9[4] >= v7)
          break;
      }
      if (v8)
        v13 = v9;
      else
        v13 = a1 + 1;
      if (v8)
        v14 = v9 + 1;
      else
        v14 = a1 + 1;
      if (!*v14)
        goto LABEL_28;
LABEL_31:
      v19 = (uint64_t *)v5[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (uint64_t *)v5[2];
          v12 = *v20 == (_QWORD)v5;
          v5 = v20;
        }
        while (!v12);
      }
      v5 = v20;
      if (v20 == &qword_1EF5680F0)
        return;
    }
    v14 = a1 + 1;
    v13 = a1 + 1;
    if (v8)
    {
      v15 = *v4;
      while (1)
      {
        while (1)
        {
          v13 = v15;
          v16 = v15[4];
          if (v16 <= v7)
            break;
          v15 = (uint64_t *)*v13;
          v14 = v13;
          if (!*v13)
            goto LABEL_28;
        }
        if (v16 >= v7)
          goto LABEL_31;
        v15 = (uint64_t *)v13[1];
        if (!v15)
        {
          v14 = v13 + 1;
          break;
        }
      }
    }
LABEL_28:
    v17 = operator new(0x30uLL);
    v17[2] = *((_OWORD *)v5 + 2);
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v13;
    *v14 = v17;
    v18 = (uint64_t *)**a1;
    if (v18)
    {
      *a1 = v18;
      v17 = (_OWORD *)*v14;
    }
    sub_1BE61F5C0(a1[1], (uint64_t *)v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v6 = (uint64_t **)*a1;
    goto LABEL_31;
  }
}

void sub_1BE6FF8E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_1BE62033C(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE6FF900(uint64_t a1)
{
  sub_1BE62033C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1BE6FF928(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  size_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  int v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _BYTE *v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id obj;
  void *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *__dst[2];
  int64_t v78;
  char v79[128];
  char __s[1024];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = (const char *)objc_msgSend_UTF8String(CFSTR("diffusion_latn_ppc_lookup.json"), a2, a3, a4, a5, a6);
  pathForResource(v6, 0, (UInt8 *)__s);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1BE61F1B4();
  v11 = (void *)v7;
  if (v7 >= 0x17)
  {
    v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v13 = v7 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v78 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_8;
  }
  HIBYTE(v78) = v7;
  v12 = __dst;
  if (v7)
LABEL_8:
    memcpy(v12, __s, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  if (v78 >= 0)
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v8, (uint64_t)__dst, 4, v9, v10);
  else
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v8, (uint64_t)__dst[0], 4, v9, v10);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dataWithContentsOfFile_(MEMORY[0x1E0C99D50], v15, (uint64_t)v69, v16, v17, v18);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E0CB36D8], v19, (uint64_t)v70, 1, 0, v20);
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_allKeys(v72, v21, v22, v23, v24, v25);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v26, (uint64_t)&v73, (uint64_t)v79, 16, v27);
  if (v33)
  {
    v34 = *(_QWORD *)v74;
    do
    {
      for (i = 0; i != v33; ++i)
      {
        while (1)
        {
          if (*(_QWORD *)v74 != v34)
            objc_enumerationMutation(obj);
          v36 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * i);
          v37 = objc_msgSend_intValue(v36, v28, v29, v30, v31, v32);
          objc_msgSend_objectForKey_(v72, v38, (uint64_t)v36, v39, v40, v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = objc_msgSend_intValue(v42, v43, v44, v45, v46, v47);

          v49 = qword_1EF5680F0;
          if (qword_1EF5680F0)
            break;
          v50 = &qword_1EF5680F0;
          v51 = &qword_1EF5680F0;
LABEL_28:
          v53 = operator new(0x30uLL);
          v53[4] = v37;
          *((_DWORD *)v53 + 10) = 0;
          *v53 = 0;
          v53[1] = 0;
          v53[2] = v51;
          *v50 = (uint64_t)v53;
          v54 = v53;
          if (*(_QWORD *)qword_1EF5680E8)
          {
            qword_1EF5680E8 = *(_QWORD *)qword_1EF5680E8;
            v54 = (_QWORD *)*v50;
          }
          v55 = qword_1EF5680F0;
          v56 = v54 == (_QWORD *)qword_1EF5680F0;
          *((_BYTE *)v54 + 24) = v54 == (_QWORD *)qword_1EF5680F0;
          if (!v56)
          {
            do
            {
              v57 = v54[2];
              if (*(_BYTE *)(v57 + 24))
                break;
              v58 = *(uint64_t **)(v57 + 16);
              v59 = *v58;
              if (*v58 == v57)
              {
                v62 = v58[1];
                if (!v62 || (v63 = *(unsigned __int8 *)(v62 + 24), v60 = (_BYTE *)(v62 + 24), v63))
                {
                  if (*(_QWORD **)v57 == v54)
                  {
                    *(_BYTE *)(v57 + 24) = 1;
                    *((_BYTE *)v58 + 24) = 0;
                    v66 = *(_QWORD *)(v57 + 8);
                    *v58 = v66;
                    if (v66)
                      goto LABEL_45;
                  }
                  else
                  {
                    v64 = *(uint64_t **)(v57 + 8);
                    v65 = *v64;
                    *(_QWORD *)(v57 + 8) = *v64;
                    if (v65)
                    {
                      *(_QWORD *)(v65 + 16) = v57;
                      v58 = *(uint64_t **)(v57 + 16);
                    }
                    v64[2] = (uint64_t)v58;
                    *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8 * (**(_QWORD **)(v57 + 16) != v57)) = v64;
                    *v64 = v57;
                    *(_QWORD *)(v57 + 16) = v64;
                    v58 = (uint64_t *)v64[2];
                    v57 = *v58;
                    *((_BYTE *)v64 + 24) = 1;
                    *((_BYTE *)v58 + 24) = 0;
                    v66 = *(_QWORD *)(v57 + 8);
                    *v58 = v66;
                    if (v66)
LABEL_45:
                      *(_QWORD *)(v66 + 16) = v58;
                  }
                  *(_QWORD *)(v57 + 16) = v58[2];
                  *(_QWORD *)(v58[2] + 8 * (*(_QWORD *)v58[2] != (_QWORD)v58)) = v57;
                  *(_QWORD *)(v57 + 8) = v58;
LABEL_17:
                  v58[2] = v57;
                  break;
                }
              }
              else if (!v59 || (v61 = *(unsigned __int8 *)(v59 + 24), v60 = (_BYTE *)(v59 + 24), v61))
              {
                if (*(_QWORD **)v57 == v54)
                {
                  v68 = v54[1];
                  *(_QWORD *)v57 = v68;
                  if (v68)
                  {
                    *(_QWORD *)(v68 + 16) = v57;
                    v58 = *(uint64_t **)(v57 + 16);
                  }
                  v54[2] = v58;
                  *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8 * (**(_QWORD **)(v57 + 16) != v57)) = v54;
                  v54[1] = v57;
                  *(_QWORD *)(v57 + 16) = v54;
                  v58 = (uint64_t *)v54[2];
                  *((_BYTE *)v54 + 24) = 1;
                  *((_BYTE *)v58 + 24) = 0;
                  v57 = v58[1];
                  v67 = *(_QWORD **)v57;
                  v58[1] = *(_QWORD *)v57;
                  if (!v67)
                    goto LABEL_16;
                }
                else
                {
                  *(_BYTE *)(v57 + 24) = 1;
                  *((_BYTE *)v58 + 24) = 0;
                  v57 = v58[1];
                  v67 = *(_QWORD **)v57;
                  v58[1] = *(_QWORD *)v57;
                  if (!v67)
                    goto LABEL_16;
                }
                v67[2] = v58;
LABEL_16:
                *(_QWORD *)(v57 + 16) = v58[2];
                *(_QWORD *)(v58[2] + 8 * (*(_QWORD *)v58[2] != (_QWORD)v58)) = v57;
                *(_QWORD *)v57 = v58;
                goto LABEL_17;
              }
              *(_BYTE *)(v57 + 24) = 1;
              v54 = v58;
              *((_BYTE *)v58 + 24) = v58 == (uint64_t *)v55;
              *v60 = 1;
            }
            while (v58 != (uint64_t *)v55);
          }
          ++qword_1EF5680F8;
          *((_DWORD *)v53 + 10) = v48;
          if (++i == v33)
            goto LABEL_58;
        }
        while (1)
        {
          while (1)
          {
            v51 = (uint64_t *)v49;
            v52 = *(_QWORD *)(v49 + 32);
            if (v52 <= v37)
              break;
            v49 = *v51;
            v50 = v51;
            if (!*v51)
              goto LABEL_28;
          }
          if (v52 >= v37)
            break;
          v49 = v51[1];
          if (!v49)
          {
            v50 = v51 + 1;
            goto LABEL_28;
          }
        }
        *((_DWORD *)v51 + 10) = v48;
      }
LABEL_58:
      v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v28, (uint64_t)&v73, (uint64_t)v79, 16, v32);
    }
    while (v33);
  }

  if (SHIBYTE(v78) < 0)
    operator delete(__dst[0]);
}

void sub_1BE6FFDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{

  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CoreHandwriting::synthesis::CHDiffusionSynthesisModel *CoreHandwriting::synthesis::CHDiffusionSynthesisModel::CHDiffusionSynthesisModel(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void **v7;
  uint64_t **v8;
  _QWORD **v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  unsigned int v54;
  _DWORD *v55;
  _QWORD *v56;
  uint64_t *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  char *v71;
  void **v72;
  _QWORD *v73;
  id v74;
  void *v75;
  char *v76;
  id v77;
  id v78;
  _BYTE buf[24];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 8) = 0u;
  v7 = (void **)((char *)this + 8);
  *((_QWORD *)this + 7) = 0;
  v76 = (char *)this + 56;
  *((_QWORD *)this + 9) = 0;
  v8 = (uint64_t **)((char *)this + 72);
  *((_QWORD *)this + 8) = (char *)this + 72;
  v9 = (_QWORD **)((char *)this + 64);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 11) = (char *)this + 96;
  v73 = (_QWORD *)((char *)this + 88);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v71 = (char *)this + 96;
  v72 = (void **)((char *)this + 112);
  *((_QWORD *)this + 15) = 0;
  v78 = 0;
  objc_msgSend_createProgramLibraryWithError_(CHDiffusionModelE5ML, a2, (uint64_t)&v78, a4, a5, a6);
  v10 = objc_claimAutoreleasedReturnValue();
  v74 = v78;
  v11 = *v7;
  *v7 = (void *)v10;

  v77 = v74;
  objc_msgSend_createProgramLibraryWithError_(CHStyleEncoderModelE5ML, v12, (uint64_t)&v77, v13, v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = v77;

  v18 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v16;

  v75 = v17;
  if (v17)
  {
    if (qword_1EF568E88 == -1)
    {
      v19 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
LABEL_5:

        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v19 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        goto LABEL_5;
    }
    objc_msgSend_localizedDescription(v17, v20, v21, v22, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v25;
    _os_log_impl(&dword_1BE607000, v19, OS_LOG_TYPE_ERROR, "Model: An error occurred loading a program library: %@", buf, 0xCu);

    goto LABEL_5;
  }
LABEL_6:
  *(_QWORD *)this = -1;
  CoreHandwriting::synthesis::CHDiffusionSynthesisModel::switchModelConfigurationForWidth(this, 8);
  if (!*((_QWORD *)this + 2) || !*((_QWORD *)this + 5))
  {
    if (qword_1EF568E88 == -1)
    {
      v42 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        goto LABEL_40;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v42 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        goto LABEL_40;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v42, OS_LOG_TYPE_ERROR, "Model: failed to load.", buf, 2u);
    goto LABEL_40;
  }
  CoreHandwriting::synthesis::loadCodemap(v26, v27, v28, v29, v30, buf);
  v31 = *(_QWORD *)v76;
  *(_QWORD *)v76 = *(_QWORD *)buf;
  if (v31)
  {
    if (*(_QWORD *)v31)
      munmap(*(void **)v31, *(_QWORD *)(v31 + 8));
    MEMORY[0x1C3B812EC](v31, 0x1010C40A749B91FLL);
  }
  sub_1BE62033C((uint64_t)v9, *((_QWORD **)this + 9));
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = v8;
  objc_msgSend_set(MEMORY[0x1E0C99E20], v32, v33, v34, v35, v36);
  v42 = objc_claimAutoreleasedReturnValue();
  v43 = *(_QWORD *)v76;
  if (*(_DWORD *)(*(_QWORD *)v76 + 24))
  {
    v44 = 0;
    do
    {
      v50 = *(_DWORD *)CHCodeMap::operator[](v43, v44);
      v51 = *v8;
      v52 = v8;
      v53 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            v53 = (uint64_t **)v51;
            v54 = *((_DWORD *)v51 + 8);
            if (v50 >= v54)
              break;
            v51 = *v53;
            v52 = v53;
            if (!*v53)
              goto LABEL_21;
          }
          if (v54 >= v50)
            break;
          v51 = v53[1];
          if (!v51)
          {
            v52 = v53 + 1;
            goto LABEL_21;
          }
        }
        v55 = v53;
      }
      else
      {
LABEL_21:
        v55 = operator new(0x30uLL);
        v55[8] = v50;
        *((_QWORD *)v55 + 5) = 0;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 1) = 0;
        *((_QWORD *)v55 + 2) = v53;
        *v52 = (uint64_t *)v55;
        v56 = (_QWORD *)**v9;
        v57 = (uint64_t *)v55;
        if (v56)
        {
          *v9 = v56;
          v57 = *v52;
        }
        sub_1BE61F5C0(*((uint64_t **)this + 9), v57);
        ++*((_QWORD *)this + 10);
      }
      *((_QWORD *)v55 + 5) = v44;
      unicodeToNSString(v50, v45, v46, v47, v48, v49);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v42, v59, (uint64_t)v58, v60, v61, v62);
      if (v50 == 57426)
        *((_QWORD *)this + 15) = v44;

      ++v44;
      v43 = *(_QWORD *)v76;
    }
    while (v44 < *(unsigned int *)(*(_QWORD *)v76 + 24));
  }
  v63 = objc_msgSend_copy(v42, v37, v38, v39, v40, v41);
  v64 = *v72;
  *v72 = (void *)v63;

  CoreHandwriting::synthesis::loadPPC((uint64_t **)buf);
  sub_1BE62033C((uint64_t)v73, *((_QWORD **)this + 12));
  v65 = *(_QWORD **)&buf[8];
  *((_QWORD *)this + 11) = *(_QWORD *)buf;
  *((_QWORD *)this + 12) = v65;
  v66 = *(_QWORD *)&buf[16];
  *((_QWORD *)this + 13) = *(_QWORD *)&buf[16];
  if (v66)
  {
    v65[2] = v71;
    *(_QWORD *)buf = &buf[8];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    sub_1BE62033C((uint64_t)buf, 0);
    if (*((_QWORD *)this + 10) == *((_QWORD *)this + 13))
      goto LABEL_40;
  }
  else
  {
    *v73 = v71;
    sub_1BE62033C((uint64_t)buf, v65);
    if (*((_QWORD *)this + 10) == *((_QWORD *)this + 13))
      goto LABEL_40;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v67 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v67, OS_LOG_TYPE_FAULT))
  {
    v68 = *((_QWORD *)this + 13);
    v69 = *((_QWORD *)this + 10);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v68;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v69;
    _os_log_impl(&dword_1BE607000, v67, OS_LOG_TYPE_FAULT, "Model: Codemap and points-per-character lookup are expected to have the same size: %lu != %lu", buf, 0x16u);
  }

LABEL_40:
  return this;
}

void sub_1BE7003AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
    sub_1BE61BEE4(exception_object);
  _Unwind_Resume(exception_object);
}

void CoreHandwriting::synthesis::CHDiffusionSynthesisModel::switchModelConfigurationForWidth(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this, uint64_t a2)
{
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  CHDiffusionModelE5ML *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  CHStyleEncoderModelE5ML *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  NSObject *v36;
  uint8_t v37[16];
  uint8_t v38[16];
  uint8_t v39[16];
  uint8_t buf[16];

  if (*(_QWORD *)this != a2)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v4 = (id)qword_1EF568E50;
    v5 = os_signpost_id_generate(v4);

    if (qword_1EF568E88 == -1)
    {
      v6 = (id)qword_1EF568E50;
      v7 = v5 - 1;
      if (v5 - 1 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_8;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v6 = (id)qword_1EF568E50;
      v7 = v5 - 1;
      if (v5 - 1 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_8;
    }
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE607000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CHDiffusionSwitchConfiguration", "", buf, 2u);
    }
LABEL_8:

    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v8 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_1BE607000, v8, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHDiffusionSwitchConfiguration\"", v39, 2u);
    }

    *(_QWORD *)this = a2;
    v9 = [CHDiffusionModelE5ML alloc];
    v13 = objc_msgSend_initWithProgramLibrary_width_(v9, v10, *((_QWORD *)this + 1), a2, v11, v12);
    v14 = (void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v13;

    objc_msgSend_createExecutionContext(*((void **)this + 2), v15, v16, v17, v18, v19);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v20;

    v22 = [CHStyleEncoderModelE5ML alloc];
    v26 = objc_msgSend_initWithProgramLibrary_width_(v22, v23, *((_QWORD *)this + 4), a2, v24, v25);
    v27 = (void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v26;

    objc_msgSend_createExecutionContext(*((void **)this + 5), v28, v29, v30, v31, v32);
    v33 = objc_claimAutoreleasedReturnValue();
    v34 = (void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v33;

    if (qword_1EF568E88 == -1)
    {
      v35 = (id)qword_1EF568E50;
      if (v7 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_16;
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v35 = (id)qword_1EF568E50;
      if (v7 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_16;
    }
    if (os_signpost_enabled(v35))
    {
      *(_WORD *)v38 = 0;
      _os_signpost_emit_with_name_impl(&dword_1BE607000, v35, OS_SIGNPOST_INTERVAL_END, v5, "CHDiffusionSwitchConfiguration", "", v38, 2u);
    }
LABEL_16:

    if (qword_1EF568E88 == -1)
    {
      v36 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
LABEL_19:

        return;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v36 = (id)qword_1EF568E18[0];
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
    }
    *(_WORD *)v37 = 0;
    _os_log_impl(&dword_1BE607000, v36, OS_LOG_TYPE_DEFAULT, "END \"CHDiffusionSwitchConfiguration\"", v37, 2u);
    goto LABEL_19;
  }
}

uint64_t *sub_1BE700798(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_QWORD *)v2)
      munmap(*(void **)v2, *(_QWORD *)(v2 + 8));
    MEMORY[0x1C3B812EC](v2, 0x1010C40A749B91FLL);
  }
  return a1;
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predictStyle(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *a1, void *a2)
{
  id v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  NSObject *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  NSObject *v81;
  NSObject *v82;
  os_signpost_id_t spid;
  id v85;
  uint8_t buf[4];
  void *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E50;
  v5 = os_signpost_id_generate(v4);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v6 = (id)qword_1EF568E50;
  v7 = v6;
  spid = v5;
  v8 = v5 - 1;
  if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v7, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CHStyleEncoderModelInference", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v9 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHStyleEncoderModelInference\"", buf, 2u);
  }

  objc_msgSend_featureValueForName_(v3, v10, (uint64_t)CFSTR("input_labels"), v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v14, v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_shape(v20, v21, v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v26, v27, 1, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend_intValue(v31, v32, v33, v34, v35, v36);

  objc_msgSend_featureValueForName_(v3, v38, (uint64_t)CFSTR("input_style_labels"), v39, v40, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v42, v43, v44, v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_shape(v48, v49, v50, v51, v52, v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v54, v55, 1, v56, v57, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = objc_msgSend_intValue(v59, v60, v61, v62, v63, v64);

  if (v37 <= v65)
    v66 = v65;
  else
    v66 = v37;
  if (v66 <= 8)
    v67 = 8;
  else
    v67 = 48;
  CoreHandwriting::synthesis::CHDiffusionSynthesisModel::switchModelConfigurationForWidth(a1, v67);
  v68 = (void *)*((_QWORD *)a1 + 6);
  v85 = 0;
  objc_msgSend_predictionFromFeatureProvider_error_(v68, v69, (uint64_t)v3, (uint64_t)&v85, v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = v85;
  if (v73)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v74 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_localizedDescription(v73, v75, v76, v77, v78, v79);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v87 = v80;
      _os_log_impl(&dword_1BE607000, v74, OS_LOG_TYPE_ERROR, "Model: An error occurred during style encoder inference: %@", buf, 0xCu);

    }
  }
  if (qword_1EF568E88 == -1)
  {
    v81 = (id)qword_1EF568E50;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_28;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v81 = (id)qword_1EF568E50;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_28;
  }
  if (os_signpost_enabled(v81))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v81, OS_SIGNPOST_INTERVAL_END, spid, "CHStyleEncoderModelInference", "", buf, 2u);
  }
LABEL_28:

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v82 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v82, OS_LOG_TYPE_DEFAULT, "END \"CHStyleEncoderModelInference\"", buf, 2u);
  }

  return v72;
}

void sub_1BE700C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predict(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *a1, void *a2)
{
  id v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  id v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _BOOL4 v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  id v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  NSObject *v137;
  NSObject *v138;
  os_signpost_id_t spid;
  os_signpost_id_t spida;
  id v142;
  uint8_t buf[4];
  void *v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v4 = (id)qword_1EF568E50;
  v5 = os_signpost_id_generate(v4);

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v6 = (id)qword_1EF568E50;
  v7 = v6;
  spid = v5;
  v8 = v5 - 1;
  if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v7, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CHDiffusionModelInference", "", buf, 2u);
  }

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v9 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v9, OS_LOG_TYPE_DEFAULT, "BEGIN \"CHDiffusionModelInference\"", buf, 2u);
  }

  objc_msgSend_featureValueForName_(v3, v10, (uint64_t)CFSTR("input_labels"), v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v14, v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_shape(v20, v21, v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v26, v27, 1, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend_intValue(v31, v32, v33, v34, v35, v36);

  objc_msgSend_featureValueForName_(v3, v38, (uint64_t)CFSTR("input_style_labels"), v39, v40, v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_multiArrayValue(v42, v43, v44, v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_shape(v48, v49, v50, v51, v52, v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(v54, v55, 1, v56, v57, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = objc_msgSend_intValue(v59, v60, v61, v62, v63, v64);

  if (v37 <= v65)
    v66 = v65;
  else
    v66 = v37;
  if (v66 <= 8)
    v67 = 8;
  else
    v67 = 48;
  CoreHandwriting::synthesis::CHDiffusionSynthesisModel::switchModelConfigurationForWidth(a1, v67);
  v68 = v3;
  objc_msgSend_featureValueForName_(v68, v69, (uint64_t)CFSTR("input_diffusion_style_encoding"), v70, v71, v72);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v73 == 0;

  if (v74)
  {
    v80 = v68;
    CoreHandwriting::synthesis::CHDiffusionSynthesisModel::predictStyle(a1, v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dictionary(v80, v82, v83, v84, v85, v86);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = (void *)objc_msgSend_mutableCopy(v87, v88, v89, v90, v91, v92);

    objc_msgSend_featureValueForName_(v81, v94, (uint64_t)CFSTR("diffusion_style_encoding"), v95, v96, v97);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v93, v98, (uint64_t)v78, (uint64_t)CFSTR("input_diffusion_style_encoding"), v99, v100);
    v101 = objc_alloc(MEMORY[0x1E0C9E8F8]);
    v79 = (void *)objc_msgSend_initWithFeatureValueDictionary_(v101, v102, (uint64_t)v93, v103, v104, v105);

  }
  else
  {
    v78 = 0;
    v79 = v68;
  }
  v106 = (void *)*((_QWORD *)a1 + 3);
  v142 = 0;
  objc_msgSend_predictionFromFeatureProvider_error_(v106, v75, (uint64_t)v79, (uint64_t)&v142, v76, v77, spid);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  v113 = v142;
  if (v78)
  {
    objc_msgSend_dictionary(v107, v108, v109, v110, v111, v112);
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    v120 = (void *)objc_msgSend_mutableCopy(v114, v115, v116, v117, v118, v119);

    objc_msgSend_setObject_forKeyedSubscript_(v120, v121, (uint64_t)v78, (uint64_t)CFSTR("diffusion_style_encoding"), v122, v123);
    v124 = objc_alloc(MEMORY[0x1E0C9E8F8]);
    v129 = objc_msgSend_initWithFeatureValueDictionary_(v124, v125, (uint64_t)v120, v126, v127, v128);

    v107 = (void *)v129;
  }
  if (v113)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v130 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_localizedDescription(v113, v131, v132, v133, v134, v135);
      v136 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v144 = v136;
      _os_log_impl(&dword_1BE607000, v130, OS_LOG_TYPE_ERROR, "Model: An error occurred during denoiser inference: %@", buf, 0xCu);

    }
  }
  if (qword_1EF568E88 == -1)
  {
    v137 = (id)qword_1EF568E50;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v137 = (id)qword_1EF568E50;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_33;
  }
  if (os_signpost_enabled(v137))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BE607000, v137, OS_SIGNPOST_INTERVAL_END, spida, "CHDiffusionModelInference", "", buf, 2u);
  }
LABEL_33:

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v138 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BE607000, v138, OS_LOG_TYPE_DEFAULT, "END \"CHDiffusionModelInference\"", buf, 2u);
  }

  return v107;
}

void sub_1BE701260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::CHDiffusionSynthesisModel::encodeString(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this@<X0>, NSString *a2@<X1>, _QWORD *a3@<X8>)
{
  NSString *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  int64_t v44;
  char *v45;
  char *v46;
  char *v47;
  _QWORD v48[6];
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  __n128 (*v52)(__n128 *, __n128 *);
  void (*v53)(uint64_t);
  void *v54;
  void *__p;
  char *v56;
  char *v57;
  uint8_t buf[4];
  int v59;
  __int16 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v49 = 0;
  v50 = &v49;
  v51 = 0x4812000000;
  v52 = sub_1BE701754;
  v53 = sub_1BE701778;
  v54 = &unk_1BE94989A;
  __p = 0;
  v56 = 0;
  v57 = 0;
  v11 = objc_msgSend_length(v5, v6, v7, v8, v9, v10);
  v17 = v11;
  v18 = __p;
  if (v11 <= (v57 - (_BYTE *)__p) >> 3)
    goto LABEL_13;
  if (v11 >> 61)
    sub_1BE61F930();
  v19 = v56;
  v20 = (char *)operator new(8 * v11);
  v21 = v19 - v18;
  v22 = &v20[(v19 - v18) & 0xFFFFFFFFFFFFFFF8];
  v23 = v22;
  if (v19 != v18)
  {
    if ((unint64_t)(v21 - 8) < 0x58)
    {
      v23 = &v20[(v19 - v18) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        v32 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v23 - 1) = v32;
        v23 -= 8;
      }
      while (v19 != v18);
      goto LABEL_11;
    }
    v23 = &v20[(v19 - v18) & 0xFFFFFFFFFFFFFFF8];
    if (v19 - v20 - (v21 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_10;
    v24 = v21 >> 3;
    v25 = ((unint64_t)(v21 - 8) >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v19[-v26];
    v23 = &v22[-v26];
    v28 = &v20[8 * v24 - 16];
    v29 = (__int128 *)(v19 - 16);
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *v29;
      *((_OWORD *)v28 - 1) = *(v29 - 1);
      *(_OWORD *)v28 = v31;
      v28 -= 32;
      v29 -= 2;
      v30 -= 4;
    }
    while (v30);
    v19 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  __p = v23;
  v56 = v22;
  v57 = &v20[8 * v17];
  if (v18)
    operator delete(v18);
LABEL_13:
  v33 = objc_msgSend_length(v5, v12, v13, v14, v15, v16);
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 3221225472;
  v48[2] = sub_1BE701790;
  v48[3] = &unk_1E77F3E90;
  v48[4] = &v49;
  v48[5] = this;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v5, v34, 0, v33, (uint64_t)v48, v35);
  v37 = (unint64_t *)v50[6];
  v36 = (unint64_t *)v50[7];
  if (v37 == v36)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 0;
    _Block_object_dispose(&v49, 8);
    v47 = (char *)__p;
    if (!__p)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (!*((_QWORD *)this + 12))
LABEL_22:
    sub_1BE61C778("map::at:  key not found");
  v38 = 0;
  v39 = (unint64_t *)v50[6];
  do
  {
    v40 = *v39;
    v41 = (uint64_t *)*((_QWORD *)this + 12);
    while (1)
    {
      while (1)
      {
        v42 = v41[4];
        if (v42 <= v40)
          break;
        v41 = (uint64_t *)*v41;
        if (!v41)
          goto LABEL_22;
      }
      if (v42 >= v40)
        break;
      v41 = (uint64_t *)v41[1];
      if (!v41)
        goto LABEL_22;
    }
    v38 += *((_DWORD *)v41 + 10);
    ++v39;
  }
  while (v39 != v36);
  if (v38 >= 1153)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v43 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      v59 = 1152;
      v60 = 1024;
      v61 = v38;
      _os_log_impl(&dword_1BE607000, v43, OS_LOG_TYPE_FAULT, "Model: Expected numPoints <= %i but got numPoints=%i", buf, 0xEu);
    }

    v37 = (unint64_t *)v50[6];
    v36 = (unint64_t *)v50[7];
    v38 = 1152;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v44 = (char *)v36 - (char *)v37;
  if (v36 != v37)
  {
    if (v44 < 0)
      sub_1BE61F930();
    v45 = (char *)operator new((char *)v36 - (char *)v37);
    *a3 = v45;
    v46 = &v45[8 * (v44 >> 3)];
    a3[2] = v46;
    memcpy(v45, v37, v44);
    a3[1] = v46;
  }
  a3[3] = v38;
  _Block_object_dispose(&v49, 8);
  v47 = (char *)__p;
  if (__p)
  {
LABEL_33:
    v56 = v47;
    operator delete(v47);
  }
LABEL_34:

}

void sub_1BE701704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  uint64_t v24;
  void *v26;

  v26 = *(void **)v24;
  if (*(_QWORD *)v24)
  {
    *(_QWORD *)(v24 + 8) = v26;
    operator delete(v26);
  }
  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1BE701754(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE701778(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE701790(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  NSObject *v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _DWORD v32[2];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(v3 + 72);
  v4 = v3 + 72;
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v4;
  do
  {
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *(_DWORD *)(v7 + 32) <= a2)
  {
    v12 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v14 = (char *)v12[7];
    v13 = v12[8];
    if ((unint64_t)v14 >= v13)
    {
      v15 = (char *)v12[6];
      v16 = (v14 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        sub_1BE61F930();
      v18 = v13 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          sub_1BE61F100();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      *v21 = *(_QWORD *)(v7 + 40);
      v22 = v21 + 1;
      if (v14 != v15)
      {
        v23 = v14 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_43;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_43;
        v24 = (v23 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v26 = &v14[-v25];
        v21 = (_QWORD *)((char *)v21 - v25);
        v27 = &v20[8 * v16 - 16];
        v28 = v14 - 16;
        v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        v14 = v26;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_43:
          do
          {
            v31 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v21 = v31;
          }
          while (v14 != v15);
        }
      }
      v12[6] = v21;
      v12[7] = v22;
      v12[8] = &v20[8 * v19];
      if (v15)
        operator delete(v15);
      v12[7] = v22;
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)(v7 + 40);
      v12[7] = v14 + 8;
    }
  }
  else
  {
LABEL_12:
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v11 = (id)qword_1EF568E60;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v32[0] = 67109120;
      v32[1] = a2;
      _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_ERROR, "Model: Got unknown codepoint %u", (uint8_t *)v32, 8u);
    }

  }
}

uint64_t CoreHandwriting::synthesis::CHDiffusionSynthesisModel::canEncodeString(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this, NSString *a2)
{
  NSString *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v3 = a2;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  v9 = objc_msgSend_length(v3, v4, v5, v6, v7, v8);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1BE701AC0;
  v14[3] = &unk_1E77F3E90;
  v14[4] = &v15;
  v14[5] = this;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v3, v10, 0, v9, (uint64_t)v14, v11);
  v12 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v15, 8);

  return v12;
}

void sub_1BE701AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE701AC0(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;

  v5 = *(_QWORD *)(result + 40);
  v8 = *(_QWORD *)(v5 + 72);
  v6 = v5 + 72;
  v7 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = v6;
  do
  {
    v10 = *(_DWORD *)(v7 + 32);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (v11)
      v9 = v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 == v6 || *(_DWORD *)(v9 + 32) > a2)
  {
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
    *a5 = 1;
  }
  return result;
}

double CoreHandwriting::synthesis::CHDiffusionSynthesisModel::getComposerConditionsForBeautification@<D0>(_QWORD *a1@<X8>)
{
  _DWORD *v3;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(0x14uLL);
  a1[1] = v3 + 5;
  a1[2] = v3 + 5;
  v3[4] = -1082130432;
  result = 0.0;
  *(_OWORD *)v3 = xmmword_1BE8D6638;
  *a1 = v3;
  return result;
}

double CoreHandwriting::synthesis::CHDiffusionSynthesisModel::getComposerMaskForBeautification@<D0>(_QWORD *a1@<X8>)
{
  _DWORD *v3;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(0x14uLL);
  a1[1] = v3 + 5;
  a1[2] = v3 + 5;
  v3[4] = 1065353216;
  result = 0.0;
  *(_OWORD *)v3 = xmmword_1BE8D664C;
  *a1 = v3;
  return result;
}

uint64_t CoreHandwriting::synthesis::CHDiffusionSynthesisModel::getModelHash(CoreHandwriting::synthesis::CHDiffusionSynthesisModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1E0DE7D20](CHDiffusionModelE5ML, sel_modelHash, a3, a4, a5, a6);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisStringWithAllSupportedCharactersByModel(CoreHandwriting::synthesis *this)
{
  if (qword_1EF5680C0 != -1)
    dispatch_once(&qword_1EF5680C0, &unk_1E77EF4A8);
  return (id)qword_1EF5680B8;
}

void sub_1BE701C10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  objc_msgSend_ch_latinCharacterString(MEMORY[0x1E0CB3940], a2, a3, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v11, v6, (uint64_t)CFSTR("①②③④⑤⑥⑦⑧⑨"), (uint64_t)&stru_1E77F6F28, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)qword_1EF5680B8;
  qword_1EF5680B8 = v9;

}

void sub_1BE701C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisSetOfSupportedCharacterByModel(CoreHandwriting::synthesis *this)
{
  if (qword_1EF5680C8 != -1)
    dispatch_once(&qword_1EF5680C8, &unk_1E77EF4C8);
  return (id)qword_1EF5680D0;
}

void sub_1BE701CD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  objc_msgSend_ch_latinCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_mutableCopy(v6, v7, v8, v9, v10, v11);

  objc_msgSend_removeCharactersInString_(v12, v13, (uint64_t)CFSTR("①②③④⑤⑥⑦⑧⑨"), v14, v15, v16);
  v17 = (void *)qword_1EF5680D0;
  qword_1EF5680D0 = (uint64_t)v12;

}

void sub_1BE701D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE701D40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisTransliterationCharacterExtensionMap(CoreHandwriting::synthesis *this)
{
  if (qword_1EF5680E0 != -1)
    dispatch_once(&qword_1EF5680E0, &unk_1E77EF508);
  return (id)qword_1EF5680D8;
}

void sub_1BE701D9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  _QWORD v173[104];
  _QWORD v174[106];

  v174[104] = *MEMORY[0x1E0C80C00];
  v173[0] = CFSTR("✽");
  v173[1] = CFSTR("✱");
  v174[0] = CFSTR("*");
  v174[1] = CFSTR("*");
  v173[2] = CFSTR("✷");
  v173[3] = CFSTR("✻");
  v174[2] = CFSTR("*");
  v174[3] = CFSTR("*");
  v173[4] = CFSTR("✼");
  v173[5] = CFSTR("⁎");
  v174[4] = CFSTR("*");
  v174[5] = CFSTR("*");
  v173[6] = CFSTR("❄");
  v173[7] = CFSTR("✴");
  v174[6] = CFSTR("*");
  v174[7] = CFSTR("*");
  v173[8] = CFSTR("❈");
  v173[9] = CFSTR("꘎");
  v174[8] = CFSTR("*");
  v174[9] = CFSTR("*");
  v173[10] = CFSTR("⁕");
  v173[11] = CFSTR("✹");
  v174[10] = CFSTR("*");
  v174[11] = CFSTR("*");
  v173[12] = CFSTR("∗");
  v173[13] = CFSTR("✲");
  v174[12] = CFSTR("*");
  v174[13] = CFSTR("*");
  v173[14] = CFSTR("✳");
  v173[15] = CFSTR("❋");
  v174[14] = CFSTR("*");
  v174[15] = CFSTR("*");
  v173[16] = CFSTR("✸");
  v173[17] = CFSTR("﹡");
  v174[16] = CFSTR("*");
  v174[17] = CFSTR("*");
  v173[18] = CFSTR("⚹");
  v173[19] = CFSTR("❊");
  v174[18] = CFSTR("*");
  v174[19] = CFSTR("*");
  v173[20] = CFSTR("＂");
  v173[21] = CFSTR("“");
  v174[20] = CFSTR("\"");
  v174[21] = CFSTR("\"");
  v173[22] = CFSTR("”");
  v173[23] = CFSTR("❝");
  v174[22] = CFSTR("\"");
  v174[23] = CFSTR("\"");
  v173[24] = CFSTR("❞");
  v173[25] = CFSTR("＇");
  v174[24] = CFSTR("\"");
  v174[25] = CFSTR("'");
  v173[26] = CFSTR("‘");
  v173[27] = CFSTR("’");
  v174[26] = CFSTR("'");
  v174[27] = CFSTR("'");
  v173[28] = CFSTR("′");
  v173[29] = CFSTR("ʼ");
  v174[28] = CFSTR("'");
  v174[29] = CFSTR("'");
  v173[30] = CFSTR("❛");
  v173[31] = CFSTR("❜");
  v174[30] = CFSTR("'");
  v174[31] = CFSTR("'");
  v173[32] = CFSTR("─");
  v173[33] = CFSTR("ー");
  v174[32] = CFSTR("-");
  v174[33] = CFSTR("-");
  v173[34] = CFSTR("━");
  v173[35] = CFSTR("‒");
  v174[34] = CFSTR("-");
  v174[35] = CFSTR("-");
  v173[36] = CFSTR("⁃");
  v173[37] = CFSTR("–");
  v174[36] = CFSTR("-");
  v174[37] = CFSTR("-");
  v173[38] = CFSTR("−");
  v173[39] = CFSTR("‑");
  v174[38] = CFSTR("-");
  v174[39] = CFSTR("-");
  v173[40] = CFSTR("‐");
  v173[41] = CFSTR("⸺");
  v174[40] = CFSTR("-");
  v174[41] = CFSTR("-");
  v173[42] = CFSTR("⸻");
  v173[43] = CFSTR("│");
  v174[42] = CFSTR("-");
  v174[43] = CFSTR("|");
  v173[44] = CFSTR("ᵒ");
  v173[45] = CFSTR("➔");
  v174[44] = CFSTR("º");
  v174[45] = CFSTR("→");
  v173[46] = CFSTR("⇒");
  v173[47] = CFSTR("⟶");
  v174[46] = CFSTR("→");
  v174[47] = CFSTR("→");
  v173[48] = CFSTR("➝");
  v173[49] = CFSTR("⇾");
  v174[48] = CFSTR("→");
  v174[49] = CFSTR("→");
  v173[50] = CFSTR("➞");
  v173[51] = CFSTR("✔");
  v174[50] = CFSTR("→");
  v174[51] = CFSTR("✓");
  v173[52] = CFSTR("￥");
  v173[53] = CFSTR("（");
  v174[52] = CFSTR("¥");
  v174[53] = CFSTR("(");
  v173[54] = CFSTR("）");
  v173[55] = CFSTR("：");
  v174[54] = CFSTR(")");
  v174[55] = CFSTR(":");
  v173[56] = CFSTR("；");
  v173[57] = CFSTR("？");
  v174[56] = CFSTR(";");
  v174[57] = CFSTR("?");
  v173[58] = CFSTR("，");
  v173[59] = CFSTR("、");
  v174[58] = CFSTR(",");
  v174[59] = CFSTR(",");
  v173[60] = CFSTR("．");
  v173[61] = CFSTR("。");
  v174[60] = CFSTR(".");
  v174[61] = CFSTR(".");
  v173[62] = CFSTR("％");
  v173[63] = CFSTR("／");
  v174[62] = CFSTR("%");
  v174[63] = CFSTR("/");
  v173[64] = CFSTR("＊");
  v174[64] = CFSTR("*");
  v173[65] = CFSTR("［");
  v174[65] = CFSTR("[");
  v173[66] = CFSTR("］");
  v174[66] = CFSTR("]");
  v173[67] = CFSTR("！");
  v174[67] = CFSTR("!");
  v173[68] = CFSTR("￡");
  v174[68] = CFSTR("£");
  v173[69] = CFSTR("⇐");
  v174[69] = CFSTR("←");
  v174[70] = CFSTR("'");
  v173[71] = CFSTR("―");
  v174[71] = CFSTR("-");
  v173[72] = CFSTR("—");
  v174[72] = CFSTR("-");
  v173[73] = CFSTR("″");
  v174[73] = CFSTR("\"");
  v173[74] = CFSTR("…");
  v174[74] = CFSTR("...");
  v173[75] = CFSTR("⋅");
  v174[75] = CFSTR("·");
  unicodeToNSString(160, a2, a3, a4, a5, a6);
  v172 = (void *)objc_claimAutoreleasedReturnValue();
  v173[76] = v172;
  v174[76] = CFSTR(" ");
  unicodeToNSString(0x2000, v6, v7, v8, v9, v10);
  v171 = (void *)objc_claimAutoreleasedReturnValue();
  v173[77] = v171;
  v174[77] = CFSTR(" ");
  unicodeToNSString(8193, v11, v12, v13, v14, v15);
  v170 = (void *)objc_claimAutoreleasedReturnValue();
  v173[78] = v170;
  v174[78] = CFSTR(" ");
  unicodeToNSString(8194, v16, v17, v18, v19, v20);
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  v173[79] = v169;
  v174[79] = CFSTR(" ");
  unicodeToNSString(8195, v21, v22, v23, v24, v25);
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  v173[80] = v168;
  v174[80] = CFSTR(" ");
  unicodeToNSString(8196, v26, v27, v28, v29, v30);
  v167 = (void *)objc_claimAutoreleasedReturnValue();
  v173[81] = v167;
  v174[81] = CFSTR(" ");
  unicodeToNSString(8197, v31, v32, v33, v34, v35);
  v166 = (void *)objc_claimAutoreleasedReturnValue();
  v173[82] = v166;
  v174[82] = CFSTR(" ");
  unicodeToNSString(8198, v36, v37, v38, v39, v40);
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  v173[83] = v165;
  v174[83] = CFSTR(" ");
  unicodeToNSString(8199, v41, v42, v43, v44, v45);
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  v173[84] = v164;
  v174[84] = CFSTR(" ");
  unicodeToNSString(8200, v46, v47, v48, v49, v50);
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  v173[85] = v163;
  v174[85] = CFSTR(" ");
  unicodeToNSString(8201, v51, v52, v53, v54, v55);
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  v173[86] = v162;
  v174[86] = CFSTR(" ");
  unicodeToNSString(8202, v56, v57, v58, v59, v60);
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  v173[87] = v161;
  v174[87] = CFSTR(" ");
  unicodeToNSString(8203, v61, v62, v63, v64, v65);
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  v173[88] = v160;
  v174[88] = CFSTR(" ");
  unicodeToNSString(8239, v66, v67, v68, v69, v70);
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  v173[89] = v159;
  v174[89] = CFSTR(" ");
  unicodeToNSString(8287, v71, v72, v73, v74, v75);
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  v173[90] = v158;
  v174[90] = CFSTR(" ");
  unicodeToNSString(12288, v76, v77, v78, v79, v80);
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  v173[91] = v157;
  v174[91] = CFSTR(" ");
  unicodeToNSString(1643, v81, v82, v83, v84, v85);
  v156 = (void *)objc_claimAutoreleasedReturnValue();
  v173[92] = v156;
  v174[92] = CFSTR(",");
  unicodeToNSString(1644, v86, v87, v88, v89, v90);
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  v173[93] = v155;
  v174[93] = CFSTR("'");
  unicodeToNSString(1632, v91, v92, v93, v94, v95);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  v173[94] = v96;
  v174[94] = CFSTR("0");
  unicodeToNSString(1633, v97, v98, v99, v100, v101);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  v173[95] = v102;
  v174[95] = CFSTR("1");
  unicodeToNSString(1634, v103, v104, v105, v106, v107);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  v173[96] = v108;
  v174[96] = CFSTR("2");
  unicodeToNSString(1635, v109, v110, v111, v112, v113);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  v173[97] = v114;
  v174[97] = CFSTR("3");
  unicodeToNSString(1636, v115, v116, v117, v118, v119);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  v173[98] = v120;
  v174[98] = CFSTR("4");
  unicodeToNSString(1637, v121, v122, v123, v124, v125);
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  v173[99] = v126;
  v174[99] = CFSTR("5");
  unicodeToNSString(1638, v127, v128, v129, v130, v131);
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  v173[100] = v132;
  v174[100] = CFSTR("6");
  unicodeToNSString(1639, v133, v134, v135, v136, v137);
  v138 = (void *)objc_claimAutoreleasedReturnValue();
  v173[101] = v138;
  v174[101] = CFSTR("7");
  unicodeToNSString(1640, v139, v140, v141, v142, v143);
  v144 = (void *)objc_claimAutoreleasedReturnValue();
  v173[102] = v144;
  v174[102] = CFSTR("8");
  unicodeToNSString(1641, v145, v146, v147, v148, v149);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  v173[103] = v150;
  v174[103] = CFSTR("9");
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v151, (uint64_t)v174, (uint64_t)v173, 104, v152);
  v153 = objc_claimAutoreleasedReturnValue();
  v154 = (void *)qword_1EF5680D8;
  qword_1EF5680D8 = v153;

}

void sub_1BE702720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  _Unwind_Resume(a1);
}

id CoreHandwriting::synthesis::CHDiffusionSynthesisApplyAllowedUnicodeDecomposition(int a1, uint64_t a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  const char *v31;
  uint64_t v32;
  int v33;
  id v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  NSObject *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  id v71;
  _QWORD v72[4];
  id v73;
  _BYTE *v74;
  _QWORD v75[4];
  id v76;
  _BYTE *v77;
  _BYTE buf[32];
  void (*v79)(uint64_t);
  id v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0CB3940]);
  if (qword_1EF5680C8 != -1)
    dispatch_once(&qword_1EF5680C8, &unk_1E77EF4C8);
  v71 = (id)qword_1EF5680D0;
  unicodeToNSString(a1, v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_decomposedStringWithCanonicalMapping(v10, v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v17 = (id)qword_1EF568E60;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    unicodeToNSString(a1, v18, v19, v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a1;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v16;
    _os_log_impl(&dword_1BE607000, v17, OS_LOG_TYPE_DEBUG, "Canonical decomposition of %@(%d) is %@", buf, 0x1Cu);

  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  buf[24] = 1;
  v29 = objc_msgSend_length(v16, v24, v25, v26, v27, v28);
  v75[0] = MEMORY[0x1E0C809B0];
  v75[1] = 3221225472;
  v75[2] = sub_1BE702D88;
  v75[3] = &unk_1E77F3EB8;
  v30 = v71;
  v76 = v30;
  v77 = buf;
  objc_msgSend_enumerateCodepointsInRange_usingBlock_(v16, v31, 0, v29, (uint64_t)v75, v32);
  v33 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
  if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
  {
    v34 = v16;

    v4 = v34;
  }

  _Block_object_dispose(buf, 8);
  if (a2 != 1 && v33 == 0)
  {
    unicodeToNSString(a1, v35, v36, v37, v38, v39);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_decomposedStringWithCompatibilityMapping(v41, v42, v43, v44, v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    if (qword_1EF568E88 == -1)
    {
      v48 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
LABEL_16:

        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        *(_QWORD *)&buf[24] = sub_1BE702DC0;
        v79 = sub_1BE702DD0;
        v80 = objc_alloc_init(MEMORY[0x1E0CB3940]);
        v60 = objc_msgSend_length(v47, v55, v56, v57, v58, v59);
        v72[0] = MEMORY[0x1E0C809B0];
        v72[1] = 3221225472;
        v72[2] = sub_1BE702DD8;
        v72[3] = &unk_1E77F3EB8;
        v73 = v30;
        v74 = buf;
        objc_msgSend_enumerateCodepointsInRange_usingBlock_(v47, v61, 0, v60, (uint64_t)v72, v62);
        if (objc_msgSend_length(*(void **)(*(_QWORD *)&buf[8] + 40), v63, v64, v65, v66, v67))
        {
          v68 = *(id *)(*(_QWORD *)&buf[8] + 40);

          v4 = v68;
        }

        _Block_object_dispose(buf, 8);
        goto LABEL_19;
      }
    }
    else
    {
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v48 = (id)qword_1EF568E60;
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        goto LABEL_16;
    }
    unicodeToNSString(a1, v49, v50, v51, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v54;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a1;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v47;
    _os_log_impl(&dword_1BE607000, v48, OS_LOG_TYPE_DEBUG, "Compatibility decomposition of %@(%d) is %@", buf, 0x1Cu);

    goto LABEL_16;
  }
LABEL_19:
  v69 = v4;

  return v69;
}

void sub_1BE702CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE702D88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = objc_msgSend_characterIsMember_(*(void **)(a1 + 32), a2, (unsigned __int16)a2, a4, a5, a6);
  if ((result & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return result;
}

uint64_t sub_1BE702DC0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE702DD0(uint64_t a1)
{

}

void sub_1BE702DD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  v6 = (int)a2;
  if (objc_msgSend_characterIsMember_(*(void **)(a1 + 32), a2, (unsigned __int16)a2, a4, a5, a6))
  {
    v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    unicodeToNSString(v6, v8, v9, v10, v11, v12);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByAppendingString_(v13, v14, (uint64_t)v21, v15, v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;

  }
}

void sub_1BE702E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL pathForResource(const char *a1, const char *a2, UInt8 *a3)
{
  char *v5;
  char *v6;
  const __CFAllocator *v7;
  const __CFString *v8;
  const __CFString *v9;
  __CFBundle *BundleWithIdentifier;
  const __CFURL *v11;
  _BOOL8 v12;
  char *__lasts;

  if (!a1)
    return 0;
  v5 = strdup(a1);
  __lasts = 0;
  v6 = strtok_r(v5, ".", &__lasts);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, 0x8000100u);
  if (!__lasts)
  {
    v9 = 0;
    if (!a2)
      goto LABEL_5;
    goto LABEL_4;
  }
  v9 = CFStringCreateWithCString(v7, __lasts, 0x8000100u);
  if (a2)
LABEL_4:
    a2 = (const char *)CFStringCreateWithCString(v7, a2, 0x8000100u);
LABEL_5:
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.CoreHandwriting"));
  v11 = CFBundleCopyResourceURL(BundleWithIdentifier, v8, v9, (CFStringRef)a2);
  v12 = CFURLGetFileSystemRepresentation(v11, 1u, a3, 1024) != 0;
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (a2)
    CFRelease(a2);
  if (v11)
    CFRelease(v11);
  free(v5);
  return v12;
}

id modifyIndexPath(NSIndexPath *a1, uint64_t a2, uint64_t a3)
{
  NSIndexPath *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint8_t buf[8];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v11 = objc_msgSend_length(v5, v6, v7, v8, v9, v10);
  MEMORY[0x1E0C80A78](v11);
  v13 = &buf[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = objc_msgSend_length(v5, v14, v15, v16, v17, v18);
  objc_msgSend_getIndexes_range_(v5, v20, (uint64_t)v13, 0, v19, v21);
  *(_QWORD *)&v13[8 * a2] = a3;
  v22 = (void *)MEMORY[0x1E0CB36B0];
  v28 = objc_msgSend_length(v5, v23, v24, v25, v26, v27);
  objc_msgSend_indexPathWithIndexes_length_(v22, v29, (uint64_t)v13, v28, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_length(v5, v33, v34, v35, v36, v37);
  if (v38 != objc_msgSend_length(v32, v39, v40, v41, v42, v43))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v44 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v44, OS_LOG_TYPE_FAULT, "The length of the computed path must be the same as the input", buf, 2u);
    }

  }
  return v32;
}

void sub_1BE70313C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id insertToIndexPath(NSIndexPath *a1, unint64_t a2, uint64_t a3)
{
  NSIndexPath *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  id v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint8_t buf[8];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v11 = objc_msgSend_length(v5, v6, v7, v8, v9, v10);
  MEMORY[0x1E0C80A78](v11);
  v13 = &buf[-((v12 + 23) & 0xFFFFFFFFFFFFFFF0)];
  v19 = objc_msgSend_length(v5, v14, v15, v16, v17, v18);
  objc_msgSend_getIndexes_range_(v5, v20, (uint64_t)v13, 0, v19, v21);
  v22 = objc_alloc_init(MEMORY[0x1E0CB36B0]);
  v27 = v22;
  if (a2)
  {
    v28 = 0;
    do
    {
      v29 = objc_msgSend_indexAtPosition_(v5, v23, v28, v24, v25, v26);
      objc_msgSend_indexPathByAddingIndex_(v27, v30, v29, v31, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();

      ++v28;
      v27 = v34;
    }
    while (a2 != v28);
  }
  else
  {
    v34 = v22;
  }
  objc_msgSend_indexPathByAddingIndex_(v34, v23, a3, v24, v25, v26);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  while (a2 < objc_msgSend_length(v5, v36, v37, v38, v39, v40))
  {
    v46 = objc_msgSend_indexAtPosition_(v5, v41, a2, v43, v44, v45);
    objc_msgSend_indexPathByAddingIndex_(v35, v47, v46, v48, v49, v50);
    v51 = objc_claimAutoreleasedReturnValue();

    ++a2;
    v35 = (void *)v51;
  }
  v52 = objc_msgSend_length(v5, v41, v42, v43, v44, v45);
  if (v52 + 1 != objc_msgSend_length(v35, v53, v54, v55, v56, v57))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v58 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v58, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v58, OS_LOG_TYPE_FAULT, "The length of the computed path must be one more than the input", buf, 2u);
    }

  }
  return v35;
}

void sub_1BE703374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id trimIndexPath(NSIndexPath *a1, _NSRange a2)
{
  NSUInteger length;
  NSUInteger location;
  NSIndexPath *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSRange v10;
  void *v11;
  NSUInteger v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSRange v25;
  NSRange v26;

  length = a2.length;
  location = a2.location;
  v4 = a1;
  v25.length = objc_msgSend_length(v4, v5, v6, v7, v8, v9);
  v25.location = 0;
  v26.location = location;
  v26.length = length;
  v10 = NSIntersectionRange(v25, v26);
  v11 = 0;
  if (v10.location == location)
  {
    v12 = v10.length;
    if (v10.length == length)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0CB36B0]);
      v18 = v13;
      if (location >= v10.length + location)
      {
        v11 = v13;
      }
      else
      {
        do
        {
          v19 = objc_msgSend_indexAtPosition_(v4, v14, location, v15, v16, v17);
          objc_msgSend_indexPathByAddingIndex_(v18, v20, v19, v21, v22, v23);
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          ++location;
          v18 = v11;
          --v12;
        }
        while (v12);
      }
    }
  }

  return v11;
}

void sub_1BE703478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70348C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id firstMatchingResourceForLocale(NSLocale *a1, NSString *a2, NSString *a3, UInt8 *a4)
{
  NSString *v7;
  NSString *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  id v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  rankedCandidateIdentifiersForLocale(a1);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v35, (uint64_t)v39, 16, v11);
  if (v16)
  {
    v17 = *(_QWORD *)v36;
    while (2)
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v36 != v17)
          objc_enumerationMutation(v9);
        v19 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
        objc_msgSend_stringByAppendingString_(v7, v12, (uint64_t)v19, v13, v14, v15, (_QWORD)v35);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringByAppendingPathExtension_(v20, v21, (uint64_t)v8, v22, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        v26 = objc_retainAutorelease(v25);
        v32 = (const char *)objc_msgSend_UTF8String(v26, v27, v28, v29, v30, v31);
        if (pathForResource(v32, 0, a4))
        {
          v33 = v19;

          goto LABEL_11;
        }

      }
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v12, (uint64_t)&v35, (uint64_t)v39, 16, v15);
      if (v16)
        continue;
      break;
    }
  }
  v33 = 0;
LABEL_11:

  return v33;
}

void sub_1BE703628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id rankedCandidateIdentifiersForLocale(NSLocale *a1)
{
  NSLocale *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  BOOL v48;
  int v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = a1;
  objc_msgSend_languageCode(v1, v2, v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lowercaseString(v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_scriptCode(v1, v14, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_capitalizedString(v19, v20, v21, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_countryCode(v1, v26, v27, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_uppercaseString(v31, v32, v33, v34, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v38, v39, v40, v41, v42);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
    v48 = v25 == 0;
  else
    v48 = 1;
  v49 = !v48;
  if (!v48 && v37)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v43, (uint64_t)CFSTR("%@-%@_%@"), v44, v45, v46, v13, v25, v37);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v47, v51, (uint64_t)v50, v52, v53, v54);

  }
  if (v13 && v37)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v43, (uint64_t)CFSTR("%@_%@"), v44, v45, v46, v13, v37);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v47, v56, (uint64_t)v55, v57, v58, v59);

  }
  if (v49)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v43, (uint64_t)CFSTR("%@-%@"), v44, v45, v46, v13, v25);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v47, v61, (uint64_t)v60, v62, v63, v64);

LABEL_16:
    objc_msgSend_addObject_(v47, v43, (uint64_t)v13, v44, v45, v46);
    goto LABEL_17;
  }
  if (v13)
    goto LABEL_16;
LABEL_17:

  return v47;
}

void sub_1BE703804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

id NSStringFromUInt32Ptr(unsigned int *a1, const char *a2, _NSRange a3, uint64_t a4, uint64_t a5)
{
  NSUInteger length;
  NSUInteger location;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSUInteger v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD v23[2];

  if (a1)
  {
    length = a3.length;
    location = a3.location;
    objc_msgSend_string(MEMORY[0x1E0CB37A0], a2, a3.location, a3.length, a4, a5);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2 && length)
    {
      v13 = 0;
      do
      {
        v14 = a1[v13];
        if (v14 == 1)
        {
          ++location;
        }
        else if (location <= v13 && location + length > v13)
        {
          if ((v14 - 0x10000) >> 20)
          {
            v15 = a1[v13];
            v16 = 1;
          }
          else
          {
            v15 = ((v14 + 67043328) >> 10) - 10240;
            v23[1] = v14 & 0x3FF | 0xDC00;
            v16 = 2;
          }
          v23[0] = v15;
          objc_msgSend_stringWithCharacters_length_(MEMORY[0x1E0CB3940], v9, (uint64_t)v23, v16, v10, v11);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_appendString_(v12, v18, (uint64_t)v17, v19, v20, v21);

        }
        ++v13;
      }
      while (a2 != (const char *)v13);
    }
  }
  else
  {
    v12 = 0;
  }
  return v12;
}

void sub_1BE7039F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE703A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id unicodeToNSString(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  uint64_t v7;
  _WORD v9[2];

  if ((a1 - 0x10000) >> 20)
  {
    v7 = 1;
    LOWORD(v6) = a1;
  }
  else
  {
    v6 = ((a1 + 67043328) >> 10) - 10240;
    v9[1] = a1 & 0x3FF | 0xDC00;
    v7 = 2;
  }
  v9[0] = v6;
  objc_msgSend_stringWithCharacters_length_(MEMORY[0x1E0CB3940], a2, (uint64_t)v9, v7, a5, a6);
  return (id)objc_claimAutoreleasedReturnValue();
}

void *createUInt32PtrWithNSString(NSString *a1, unint64_t a2, __int16 a3, unint64_t *a4, BOOL *a5)
{
  NSString *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  _QWORD v26[9];
  BOOL v27;
  _QWORD v28[4];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;

  v9 = a1;
  v14 = objc_msgSend_lengthOfBytesUsingEncoding_(v9, v10, 2348810496, v11, v12, v13);
  v15 = 0;
  *a4 = 0;
  *a5 = 0;
  if (v14 >> 2 < a2)
    a2 = v14 >> 2;
  if (v14 >= 4 && a2)
  {
    v29 = 0;
    v30 = &v29;
    v31 = 0x2020000000;
    v32 = 0;
    v32 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x2020000000;
    v21 = a2 - 1;
    if ((a3 & 0x100) == 0)
      v21 = 0;
    v28[3] = v21;
    v22 = objc_msgSend_length(v9, v16, v17, v18, v19, v20);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = sub_1BE703C68;
    v26[3] = &unk_1E77F3EE0;
    v26[4] = &v29;
    v26[5] = v28;
    v27 = (a3 & 0x100) == 0;
    v26[6] = a4;
    v26[7] = a5;
    v26[8] = a2;
    objc_msgSend_enumerateCodepointsInRange_reverse_usingBlock_(v9, v23, 0, v22, (unint64_t)(a3 & 0x100) >> 8, (uint64_t)v26);
    v24 = *a4;
    if (*a4)
    {
      v15 = (void *)v30[3];
      if (a2 == v24)
      {
LABEL_12:
        _Block_object_dispose(v28, 8);
        _Block_object_dispose(&v29, 8);
        goto LABEL_13;
      }
      v15 = malloc_type_realloc((void *)v30[3], 4 * v24, 0x100004052888210uLL);
    }
    else
    {
      free((void *)v30[3]);
      v15 = 0;
    }
    v30[3] = (uint64_t)v15;
    goto LABEL_12;
  }
LABEL_13:

  return v15;
}

void sub_1BE703C2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE703C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE703C68(uint64_t result, int a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24)
            + 4 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24)) = a2;
  v5 = *(unint64_t **)(result + 48);
  v6 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  v8 = v7 - 1;
  if (*(_BYTE *)(result + 72))
    v8 = v7 + 1;
  *(_QWORD *)(v6 + 24) = v8;
  v9 = *v5 + 1;
  *v5 = v9;
  v10 = *(_QWORD *)(result + 64);
  **(_BYTE **)(result + 56) |= a4 == 2;
  if (v9 >= v10)
    *a5 = 1;
  return result;
}

uint64_t halfWidthToFullWidthCode(uint64_t result)
{
  if ((result - 33) < 0xF
    || (result - 91) <= 0x23 && ((1 << (result - 91)) & 0xF0000003FLL) != 0
    || (result - 58) < 6)
  {
    if ((_DWORD)result == 46)
      return 12290;
    else
      return (result + 65248);
  }
  return result;
}

id uppercaseFirstLetter(NSString *a1)
{
  NSString *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  _QWORD v17[4];
  id v18;

  v1 = a1;
  v7 = (void *)objc_msgSend_mutableCopy(v1, v2, v3, v4, v5, v6);
  v13 = objc_msgSend_length(v1, v8, v9, v10, v11, v12);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_1BE703E04;
  v17[3] = &unk_1E77F2070;
  v14 = v7;
  v18 = v14;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v1, v15, 0, v13, 2, (uint64_t)v17);

  return v14;
}

void sub_1BE703DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE703DF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE703E04(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  id v41;

  v41 = a2;
  objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3500], v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_rangeOfCharacterFromSet_(v41, v17, (uint64_t)v16, v18, v19, v20) == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend_symbolCharacterSet(MEMORY[0x1E0CB3500], v21, v22, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend_rangeOfCharacterFromSet_(v41, v27, (uint64_t)v26, v28, v29, v30);

    if (v31 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v37 = *(void **)(a1 + 32);
      objc_msgSend_uppercaseString(v41, v32, v33, v34, v35, v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_replaceCharactersInRange_withString_(v37, v39, a3, a4, (uint64_t)v38, v40);

      *a7 = 1;
    }
  }
  else
  {

  }
}

void sub_1BE703EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE703F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE703F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE703F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE703F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE703F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id lowercaseFirstLetter(NSString *a1)
{
  NSString *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  _QWORD v17[4];
  id v18;

  v1 = a1;
  v7 = (void *)objc_msgSend_mutableCopy(v1, v2, v3, v4, v5, v6);
  v13 = objc_msgSend_length(v1, v8, v9, v10, v11, v12);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_1BE704058;
  v17[3] = &unk_1E77F2070;
  v14 = v7;
  v18 = v14;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v1, v15, 0, v13, 2, (uint64_t)v17);

  return v14;
}

void sub_1BE704024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE704048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE704058(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  id v41;

  v41 = a2;
  objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3500], v11, v12, v13, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_rangeOfCharacterFromSet_(v41, v17, (uint64_t)v16, v18, v19, v20) == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend_symbolCharacterSet(MEMORY[0x1E0CB3500], v21, v22, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend_rangeOfCharacterFromSet_(v41, v27, (uint64_t)v26, v28, v29, v30);

    if (v31 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v37 = *(void **)(a1 + 32);
      objc_msgSend_lowercaseString(v41, v32, v33, v34, v35, v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_replaceCharactersInRange_withString_(v37, v39, a3, a4, (uint64_t)v38, v40);

      *a7 = 1;
    }
  }
  else
  {

  }
}

void sub_1BE704148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE704160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE704174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE704190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7041A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7041C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t rangeOfCharactersFromSet(NSString *a1, NSCharacterSet *a2, int a3)
{
  NSString *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v11 = objc_msgSend_length(v4, v5, v6, v7, v8, v9);
  if (a3)
    v12 = 258;
  else
    v12 = 2;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1BE7042E4;
  v21[3] = &unk_1E77F3F08;
  v21[4] = &v22;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v4, v10, 0, v11, v12, (uint64_t)v21);
  if (v23[3])
  {
    if (a3)
    {
      v18 = objc_msgSend_length(v4, v13, v14, v15, v16, v17);
      v19 = v18 - v23[3];
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  _Block_object_dispose(&v22, 8);

  return v19;
}

void sub_1BE7042C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE7042E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSCharacterSet *v14;
  _BOOL4 v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString *v21;

  v21 = a2;
  objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3500], v9, v10, v11, v12, v13);
  v14 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  v15 = isStringEntirelyFromSet(v21, v14);

  if (v15)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += objc_msgSend_length(v21, v16, v17, v18, v19, v20);
  else
    *a7 = 1;

}

void sub_1BE704388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE7043A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL isStringEntirelyFromSet(NSString *a1, NSCharacterSet *a2)
{
  NSString *v3;
  NSCharacterSet *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7, v8, v9))
  {
    objc_msgSend_stringByTrimmingCharactersInSet_(v3, v10, (uint64_t)v4, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend_length(v14, v15, v16, v17, v18, v19) == 0;

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

void sub_1BE70442C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE704444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id lastWordInString(NSString *a1)
{
  NSString *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  id v9;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v1 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = sub_1BE704548;
  v16 = sub_1BE704558;
  v17 = 0;
  v7 = objc_msgSend_length(v1, v2, v3, v4, v5, v6);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BE704560;
  v11[3] = &unk_1E77F3F08;
  v11[4] = &v12;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v1, v8, 0, v7, 1283, (uint64_t)v11);
  v9 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v9;
}

void sub_1BE704524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE704548(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE704558(uint64_t a1)
{

}

void sub_1BE704560(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  v13 = a2;
  if (a3 == a5 && a4 == a6)
  {
    v22 = v13;
    v19 = objc_msgSend_copy(v13, v14, v15, v16, v17, v18);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;

    v13 = v22;
  }
  *a7 = 1;

}

void sub_1BE7045E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

unint64_t stringHasEmoticonStartingAtIndex(uint64_t a1, NSString *a2, uint64_t a3, int a4)
{
  NSString *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v7 = a2;
  v13 = v7;
  if (a3)
  {
    if (!a4)
      goto LABEL_8;
  }
  else
  {
    objc_msgSend_composedCharacterAtIndex_(v7, v8, a1, v10, v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(a3) = objc_msgSend_characterTypeFromString_(CHCharacterSetRules, v15, (uint64_t)v14, v16, v17, v18);

    if (!a4)
      goto LABEL_8;
  }
  if ((a3 & 0x40000) != 0)
  {
    if ((a3 & 0x80000000) != 0)
      goto LABEL_14;
    goto LABEL_9;
  }
LABEL_8:
  if ((a3 & 0x40000) == 0)
  {
LABEL_14:
    v38 = 0;
    goto LABEL_17;
  }
LABEL_9:
  if (a1 + 1 >= (unint64_t)objc_msgSend_length(v13, v8, v9, v10, v11, v12))
    goto LABEL_14;
  objc_msgSend_composedCharacterAtIndex_(v13, v19, a1 + 1, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend_characterTypeFromString_(CHCharacterSetRules, v24, (uint64_t)v23, v25, v26, v27);
  if ((v33 & 0x100000) != 0)
  {
    v38 = 1;
  }
  else
  {
    v38 = 0;
    if (a1 + 2 < (unint64_t)objc_msgSend_length(v13, v28, v29, v30, v31, v32) && (v33 & 0x80000) != 0)
    {
      objc_msgSend_composedCharacterAtIndex_(v13, v34, a1 + 2, v35, v36, v37);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = ((unint64_t)objc_msgSend_characterTypeFromString_(CHCharacterSetRules, v40, (uint64_t)v39, v41, v42, v43) >> 20) & 1;

    }
  }

LABEL_17:
  return v38;
}

void sub_1BE704718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE704730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE704744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE704758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70476C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70477C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE704790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7047A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t isStringNumber(NSString *a1)
{
  NSString *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  BOOL v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (qword_1EF568108 != -1)
    dispatch_once(&qword_1EF568108, &unk_1E77F1730);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = (id)qword_1EF568100;
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v15, (uint64_t)v19, 16, v4);
  if (v9)
  {
    v10 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v2);
        objc_msgSend_numberFromString_(*(void **)(*((_QWORD *)&v15 + 1) + 8 * i), v5, (uint64_t)v1, v6, v7, v8, (_QWORD)v15);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = v12 == 0;

        if (!v13)
        {
          v9 = 1;
          goto LABEL_13;
        }
      }
      v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v15, (uint64_t)v19, 16, v8);
      if (v9)
        continue;
      break;
    }
  }
LABEL_13:

  return v9;
}

void sub_1BE7048FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE704920(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _QWORD v49[4];

  v49[3] = *MEMORY[0x1E0C80C00];
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], a2, (uint64_t)CFSTR("en_US"), a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  objc_msgSend_setNumberStyle_(v7, v8, 1, v9, v10, v11);
  objc_msgSend_setLocale_(v7, v12, (uint64_t)v6, v13, v14, v15);
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v16, (uint64_t)CFSTR("de_DE"), v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  objc_msgSend_setNumberStyle_(v21, v22, 1, v23, v24, v25);
  objc_msgSend_setLocale_(v21, v26, (uint64_t)v20, v27, v28, v29);
  objc_msgSend_localeWithLocaleIdentifier_(MEMORY[0x1E0C99DC8], v30, (uint64_t)CFSTR("en_IN"), v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  objc_msgSend_setNumberStyle_(v35, v36, 1, v37, v38, v39);
  objc_msgSend_setLocale_(v35, v40, (uint64_t)v34, v41, v42, v43);
  v49[0] = v7;
  v49[1] = v21;
  v49[2] = v35;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v44, (uint64_t)v49, 3, v45, v46);
  v47 = objc_claimAutoreleasedReturnValue();
  v48 = (void *)qword_1EF568100;
  qword_1EF568100 = v47;

}

void sub_1BE704A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t editDistance(NSString *a1, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  BOOL v21[2];
  unint64_t v22;
  unint64_t v23;

  v3 = a1;
  v4 = a2;
  v22 = 0;
  v23 = 0;
  *(_WORD *)v21 = 0;
  v10 = objc_msgSend_length(v3, v5, v6, v7, v8, v9);
  v11 = (unsigned int *)createUInt32PtrWithNSString(v3, v10, 2, &v23, &v21[1]);
  v17 = objc_msgSend_length(v4, v12, v13, v14, v15, v16);
  v18 = (unsigned int *)createUInt32PtrWithNSString(v4, v17, 2, &v22, v21);
  v19 = editDistance(v11, v23, v18, v22);
  free(v11);
  free(v18);

  return v19;
}

void sub_1BE704BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE704BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE704BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t editDistance(unsigned int *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD *v25;
  int64x2_t *v26;
  unint64_t v27;
  int64x2_t v28;
  int64x2_t *v29;
  int64x2_t v30;
  int64x2_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *__p;
  _QWORD *v55;
  _QWORD *v56;
  void **p_p;
  char v58;

  v4 = a4;
  if (!a2 || !a4)
    return a4 + a2;
  v8 = 0;
  v9 = 0;
  v10 = a4 + 1;
  if (a4 != -1)
  {
    if (v10 >> 61)
      sub_1BE61F930();
    v9 = (char *)operator new(8 * v10);
    bzero(v9, 8 * v10);
    v8 = &v9[8 * v10];
  }
  __p = 0;
  v55 = 0;
  v56 = 0;
  p_p = &__p;
  v58 = 0;
  v11 = a2 + 1;
  v53 = a2;
  if (a2 == -1)
  {
    v13 = 0;
    if (v9)
    {
LABEL_18:
      operator delete(v9);
      v13 = __p;
    }
  }
  else
  {
    if (v11 >= 0xAAAAAAAAAAAAAABLL)
      sub_1BE61F930();
    v12 = operator new(24 * v11);
    v13 = v12;
    __p = v12;
    v55 = v12;
    v50 = &v12[3 * v11];
    v51 = v4 + 1;
    v56 = v50;
    v14 = v8 - v9;
    v52 = v4;
    if (v14)
    {
      if (v14 < 0)
      {
        *v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
        sub_1BE61F930();
      }
      v15 = 24 * a2 + 24;
      v16 = v12;
      do
      {
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        v17 = (char *)operator new(v14);
        *v16 = v17;
        v18 = &v17[8 * (v14 >> 3)];
        v16[2] = v18;
        memcpy(v17, v9, v14);
        v16[1] = v18;
        v16 += 3;
        v15 -= 24;
      }
      while (v15);
    }
    else
    {
      bzero(v12, 24 * ((24 * v11 - 24) / 0x18) + 24);
    }
    v10 = v51;
    v55 = v50;
    v4 = v52;
    if (v9)
      goto LABEL_18;
  }
  if (v11)
  {
    if (v53)
    {
      v20 = 0;
      v21 = v11 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v13;
      do
      {
        v23 = (_QWORD *)v22[3];
        *(_QWORD *)*v22 = v20;
        *v23 = v20 + 1;
        v22 += 6;
        v20 += 2;
      }
      while (v20 != v21);
      if (v11 == v21)
        goto LABEL_28;
    }
    else
    {
      v21 = 0;
    }
    v24 = (_QWORD **)&v13[3 * v21];
    do
    {
      v25 = *v24;
      v24 += 3;
      *v25 = v21++;
    }
    while (v11 != v21);
LABEL_28:
    v13 = __p;
  }
  if (v10)
  {
    v26 = (int64x2_t *)*v13;
    if (v10 >= 4)
    {
      v27 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v28 = (int64x2_t)xmmword_1BE8D5080;
      v29 = v26 + 1;
      v30 = vdupq_n_s64(2uLL);
      v31 = vdupq_n_s64(4uLL);
      v32 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v29[-1] = v28;
        *v29 = vaddq_s64(v28, v30);
        v28 = vaddq_s64(v28, v31);
        v29 += 2;
        v32 -= 4;
      }
      while (v32);
      goto LABEL_39;
    }
    v27 = 0;
    do
    {
      v26->i64[v27] = v27;
      ++v27;
LABEL_39:
      ;
    }
    while (v10 != v27);
    v13 = __p;
  }
  v33 = 2;
  if (v10 <= 2)
    v34 = 2;
  else
    v34 = v10;
  if (v11 > 2)
    v33 = v11;
  v35 = (unint64_t *)*v13;
  v36 = v34 - 1;
  for (i = 1; i != v33; ++i)
  {
    v38 = 0;
    v39 = a1[i - 1];
    v40 = (unint64_t *)v13[3 * i];
    v41 = *v40;
    do
    {
      v42 = fmin((double)(v35[v38 + 1] + 1), (double)(v41 + 1));
      if (v39 == a3[v38])
        v43 = v35[v38];
      else
        v43 = v35[v38] + 1;
      v41 = (unint64_t)fmin((double)(unint64_t)v42, (double)(unint64_t)v43);
      v40[++v38] = v41;
    }
    while (v36 != v38);
    v35 = v40;
  }
  v19 = *(_QWORD *)(v13[3 * v53] + 8 * v4);
  v44 = v55;
  v45 = v13;
  if (v55 != v13)
  {
    v46 = v55;
    do
    {
      v48 = (void *)*(v46 - 3);
      v46 -= 3;
      v47 = v48;
      if (v48)
      {
        *(v44 - 2) = v47;
        operator delete(v47);
      }
      v44 = v46;
    }
    while (v46 != v13);
    v45 = __p;
  }
  v55 = v13;
  operator delete(v45);
  return v19;
}

uint64_t isMixedCaseString(NSString *a1)
{
  NSString *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int isEqualToString;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = a1;
  objc_msgSend_lowercaseString(v1, v2, v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isEqualToString_(v1, v8, (uint64_t)v7, v9, v10, v11) & 1) != 0)
  {
    isEqualToString = 1;
  }
  else
  {
    objc_msgSend_uppercaseString(v1, v12, v13, v14, v15, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isEqualToString_(v1, v19, (uint64_t)v18, v20, v21, v22) & 1) != 0)
    {
      isEqualToString = 1;
    }
    else
    {
      objc_msgSend_capitalizedString(v1, v23, v24, v25, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v1, v29, (uint64_t)v28, v30, v31, v32);

    }
  }

  return isEqualToString ^ 1u;
}

void sub_1BE705098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7050BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7050CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t isUndetectableAddressCandidate(NSString *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  BOOL v50;
  BOOL v51;
  uint64_t v52;
  BOOL v53;
  id obj;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  objc_msgSend_componentsSeparatedByString_(a1, a2, (uint64_t)CFSTR(" "), a4, a5, a6);
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v58, (uint64_t)v62, 16, v7);
  if (v8)
  {
    v57 = *(_QWORD *)v59;
    v14 = 0x1E0CB3000uLL;
    do
    {
      v15 = 0;
      v56 = v8;
      do
      {
        if (*(_QWORD *)v59 != v57)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * v15);
        objc_msgSend_letterCharacterSet(*(void **)(v14 + 1280), v9, v10, v11, v12, v13);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend_rangeOfCharacterFromSet_(v16, v18, (uint64_t)v17, v19, v20, v21);

        objc_msgSend_decimalDigitCharacterSet(*(void **)(v14 + 1280), v23, v24, v25, v26, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend_rangeOfCharacterFromSet_(v16, v29, (uint64_t)v28, v30, v31, v32);

        v34 = v14;
        objc_msgSend_characterSetWithCharactersInString_(*(void **)(v14 + 1280), v35, (uint64_t)CFSTR(","), v36, v37, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend_rangeOfCharacterFromSet_(v16, v40, (uint64_t)v39, v41, v42, v43);
        v46 = v45;

        v14 = v34;
        if (v44 != 0x7FFFFFFFFFFFFFFFLL && v22 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v48 = objc_msgSend_length(v16, v9, v10, v11, v12, v13);
          v50 = v48 - 1 < v44 || v48 - 1 - v44 >= v46;
          v51 = v33 == 0x7FFFFFFFFFFFFFFFLL || v22 == 0x7FFFFFFFFFFFFFFFLL;
          v52 = 1;
          if (!v51)
            goto LABEL_30;
        }
        else
        {
          v50 = 0;
          v53 = v33 == 0x7FFFFFFFFFFFFFFFLL || v22 == 0x7FFFFFFFFFFFFFFFLL;
          v52 = 1;
          if (!v53)
            goto LABEL_30;
        }
        if (v50)
          goto LABEL_30;
        ++v15;
      }
      while (v56 != v15);
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v58, (uint64_t)v62, 16, v13);
    }
    while (v8);
  }
  v52 = 0;
LABEL_30:

  return v52;
}

void sub_1BE7052F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id reformatToBetterAddressMatching(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v59;
  id v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  _BOOL4 v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v140;
  id obj;
  uint64_t v143;
  uint64_t v144;
  uint64_t i;
  void *v146;
  id v147;
  void *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _BYTE v153[128];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  objc_msgSend_componentsSeparatedByString_(a1, a2, (uint64_t)CFSTR(" "), a4, a5, a6);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v6, v7, v8, v9, v10);
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v11, v12, v13, v14, v15);
  v147 = (id)objc_claimAutoreleasedReturnValue();
  v151 = 0u;
  v152 = 0u;
  v149 = 0u;
  v150 = 0u;
  obj = v140;
  v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v149, (uint64_t)v153, 16, v17);
  if (v23)
  {
    v24 = 0;
    v143 = *(_QWORD *)v150;
    do
    {
      v144 = v23;
      for (i = 0; i != v144; ++i)
      {
        if (*(_QWORD *)v150 != v143)
          objc_enumerationMutation(obj);
        v25 = *(void **)(*((_QWORD *)&v149 + 1) + 8 * i);
        objc_msgSend_letterCharacterSet(MEMORY[0x1E0CB3500], v18, v19, v20, v21, v22);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend_rangeOfCharacterFromSet_(v25, v27, (uint64_t)v26, v28, v29, v30);

        objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v32, v33, v34, v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = objc_msgSend_rangeOfCharacterFromSet_(v25, v38, (uint64_t)v37, v39, v40, v41);

        objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v43, (uint64_t)CFSTR(","), v44, v45, v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = objc_msgSend_rangeOfCharacterFromSet_(v25, v48, (uint64_t)v47, v49, v50, v51);

        v59 = v31 != 0x7FFFFFFFFFFFFFFFLL && v42 != 0x7FFFFFFFFFFFFFFFLL;
        if (v52 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v60 = v25;
          if (!v59)
            goto LABEL_38;
        }
        else
        {
          v128 = v52 != objc_msgSend_length(v25, v53, v54, v55, v56, v57) - 1;
          v60 = v25;
          if (!v59 && !v128)
          {
LABEL_38:
            v89 = v60;
            goto LABEL_39;
          }
        }
        v146 = v60;
        v66 = v60;
        do
        {
          if (v52 >= v31 || v52 >= v42)
          {
            v68 = v52 + 1;
            if (v52 >= v31)
              v69 = v31;
            else
              v69 = v52 + 1;
            if (v52 >= v42)
              v68 = v42;
            if (v31 < v42)
            {
              v67 = v68;
              objc_msgSend_substringWithRange_(v66, v61, 0, v68, v64, v65);
            }
            else
            {
              v67 = v69;
              objc_msgSend_substringWithRange_(v66, v61, 0, v69, v64, v65);
            }
          }
          else
          {
            v67 = v52 + 1;
            objc_msgSend_substringWithRange_(v66, v61, 0, v52 + 1, v64, v65);
          }
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v148, v71, (uint64_t)v70, v72, v73, v74);
          v80 = objc_msgSend_length(v70, v75, v76, v77, v78, v79) + v24;
          objc_msgSend_addIndex_(v147, v81, v80, v82, v83, v84);
          objc_msgSend_substringFromIndex_(v66, v85, v67, v86, v87, v88);
          v89 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_letterCharacterSet(MEMORY[0x1E0CB3500], v90, v91, v92, v93, v94);
          v95 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = objc_msgSend_rangeOfCharacterFromSet_(v89, v96, (uint64_t)v95, v97, v98, v99);

          objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v100, v101, v102, v103, v104);
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend_rangeOfCharacterFromSet_(v89, v106, (uint64_t)v105, v107, v108, v109);

          objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v110, (uint64_t)CFSTR(","), v111, v112, v113);
          v114 = (void *)objc_claimAutoreleasedReturnValue();
          v52 = objc_msgSend_rangeOfCharacterFromSet_(v89, v115, (uint64_t)v114, v116, v117, v118);

          v125 = v31 != 0x7FFFFFFFFFFFFFFFLL && v42 != 0x7FFFFFFFFFFFFFFFLL;
          v126 = v52 != 0x7FFFFFFFFFFFFFFFLL && v52 != objc_msgSend_length(v146, v119, v120, v121, v122, v123) - 1;

          v24 = v80 + 1;
          v127 = v125 || v126;
          v66 = v89;
        }
        while (v127);
LABEL_39:
        v129 = objc_msgSend_length(v89, v61, v62, v63, v64, v65);
        objc_msgSend_addObject_(v148, v130, (uint64_t)v89, v131, v132, v133);

        v24 += v129 + 1;
      }
      v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v18, (uint64_t)&v149, (uint64_t)v153, 16, v22);
    }
    while (v23);
  }

  if (a2)
    *(_QWORD *)a2 = objc_retainAutorelease(v147);
  objc_msgSend_componentsJoinedByString_(v148, v134, (uint64_t)CFSTR(" "), v135, v136, v137);
  v138 = (void *)objc_claimAutoreleasedReturnValue();

  return v138;
}

void sub_1BE705740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

NSUInteger rangeFromRangeRemovingIndexes(_NSRange a1, NSIndexSet *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSUInteger location;
  NSUInteger v6;
  _QWORD v8[6];
  _NSRange v9;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  location = a1.location;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v10[3] = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1BE705934;
  v8[3] = &unk_1E77F3F30;
  v9 = a1;
  v8[4] = &v11;
  v8[5] = v10;
  objc_msgSend_enumerateIndexesUsingBlock_(a2, (const char *)a1.length, (uint64_t)v8, a3, a4, a5);
  v6 = location - v12[3];
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1BE705910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE705934(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;

  v2 = result[6];
  if (v2 >= a2)
  {
    ++*(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24);
    v5 = result[6];
    v4 = a2 >= v5;
    v6 = a2 - v5;
    if (v4 && v6 < result[7])
      goto LABEL_12;
  }
  else
  {
    v4 = a2 >= v2;
    v3 = a2 - v2;
    v4 = !v4 || v3 >= result[7];
    if (!v4)
LABEL_12:
      ++*(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24);
  }
  return result;
}

id commonIndexSetsFromSets(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int isEqualToIndexSet;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v3 = a1;
  v4 = a2;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_count(v3, v11, v12, v13, v14, v15) || !objc_msgSend_count(v4, v16, v17, v18, v19, v20))
    goto LABEL_26;
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v21, v22, v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v27, v28, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v3, v33, v34, v35, v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addIndexes_(v26, v39, (uint64_t)v38, v40, v41, v42);

  objc_msgSend_firstObject(v4, v43, v44, v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addIndexes_(v32, v49, (uint64_t)v48, v50, v51, v52);
  v53 = 0;
  v54 = 0;
LABEL_4:

  while (1)
  {
    v60 = v53;
    if (v53 >= objc_msgSend_count(v3, v55, v56, v57, v58, v59)
      || v54 >= objc_msgSend_count(v4, v61, v62, v63, v64, v65))
    {
      break;
    }
    isEqualToIndexSet = objc_msgSend_isEqualToIndexSet_(v26, v61, (uint64_t)v32, v63, v64, v65);
    if (isEqualToIndexSet)
    {
      if (objc_msgSend_count(v26, v66, v67, v68, v69, v70))
      {
        v77 = (void *)objc_msgSend_copy(v26, v72, v73, v74, v75, v76);
        objc_msgSend_addObject_(v10, v78, (uint64_t)v77, v79, v80, v81);

      }
      objc_msgSend_removeAllIndexes(v26, v72, v73, v74, v75, v76);
      objc_msgSend_removeAllIndexes(v32, v82, v83, v84, v85, v86);
    }
    else
    {
      if ((objc_msgSend_containsIndexes_(v26, v66, (uint64_t)v32, v68, v69, v70) & 1) != 0)
        goto LABEL_19;
      if ((objc_msgSend_containsIndexes_(v32, v55, (uint64_t)v26, v57, v58, v59) & 1) == 0)
      {
        objc_msgSend_removeAllObjects(v10, v87, v88, v89, v90, v91);
        break;
      }
    }
    v53 = v60 + 1;
    if (v60 + 1 >= objc_msgSend_count(v3, v87, v88, v89, v90, v91))
    {
      if (isEqualToIndexSet)
      {
        v53 = v60 + 1;
LABEL_19:
        if (++v54 < objc_msgSend_count(v4, v55, v56, v57, v58, v59))
        {
          objc_msgSend_objectAtIndex_(v4, v55, v54, v57, v58, v59);
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addIndexes_(v32, v97, (uint64_t)v48, v98, v99, v100);
          goto LABEL_4;
        }
      }
    }
    else
    {
      objc_msgSend_objectAtIndex_(v3, v55, v60 + 1, v57, v58, v59);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addIndexes_(v26, v93, (uint64_t)v92, v94, v95, v96);

      if ((isEqualToIndexSet & 1) != 0)
        goto LABEL_19;
    }
  }
  if (objc_msgSend_count(v26, v61, v62, v63, v64, v65) || objc_msgSend_count(v32, v101, v102, v103, v104, v105))
    objc_msgSend_removeAllObjects(v10, v101, v102, v103, v104, v105);

LABEL_26:
  return v10;
}

void sub_1BE705BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id sub_1BE705C80(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD v22[4];
  id v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;

  v3 = a1;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 1;
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v4, v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_1BE705DB0;
  v22[3] = &unk_1E77F3F58;
  v25 = a2;
  v10 = v9;
  v23 = v10;
  v24 = &v26;
  objc_msgSend_enumerateIndexesUsingBlock_(v3, v11, (uint64_t)v22, v12, v13, v14);
  if (*((_BYTE *)v27 + 24))
    v20 = (void *)objc_msgSend_copy(v10, v15, v16, v17, v18, v19);
  else
    v20 = 0;

  _Block_object_dispose(&v26, 8);
  return v20;
}

void sub_1BE705D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE705D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE705DB0(uint64_t result, const char *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = **(_QWORD **)(result + 48);
  if ((unint64_t)a2 < (*(_QWORD *)(*(_QWORD *)(result + 48) + 8) - v6) >> 3)
    return objc_msgSend_addIndex_(*(void **)(result + 32), a2, *(_QWORD *)(v6 + 8 * (_QWORD)a2), a4, a5, a6);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 0;
  *a3 = 1;
  return result;
}

double ratioHorizontalOverlapOfSubjectToReferenceRect(CGRect a1, CGRect a2)
{
  CGFloat width;
  CGFloat x;
  double v4;
  CGFloat v5;
  double v6;
  uint64_t v7;
  double v8;
  double MinX;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  width = a2.size.width;
  x = a2.origin.x;
  v4 = a1.size.width;
  v5 = a1.origin.x;
  if (a1.size.width == 0.0)
  {
    v6 = 0.0;
    v7 = 0;
    v8 = 1.0;
    MinX = CGRectGetMinX(a1);
    v16.origin.y = 0.0;
    v16.size.height = 1.0;
    v16.origin.x = x;
    v16.size.width = width;
    if (MinX >= CGRectGetMinX(v16))
    {
      v17.origin.y = 0.0;
      v17.size.height = 1.0;
      v17.origin.x = v5;
      v17.size.width = v4;
      v10 = CGRectGetMinX(v17);
      v18.origin.y = 0.0;
      v18.size.height = 1.0;
      v18.origin.x = x;
      v18.size.width = width;
      if (v10 <= CGRectGetMaxX(v18))
        return 1.0;
    }
  }
  else
  {
    v6 = 0.0;
    if (a2.size.width > 0.0)
    {
      v11 = 0;
      v12 = 1.0;
      v13 = 0;
      v14 = 1.0;
      v19 = CGRectIntersection(a1, a2);
      return v19.size.width / v4;
    }
  }
  return v6;
}

__CFString *convertLMTokenIDToString(unsigned int a1, const _LXLexicon *a2)
{
  uint64_t v2;
  const void *v3;
  void *v4;

  v2 = LXLexiconCopyEntryForTokenID();
  if (!v2)
    return CFSTR("UNK");
  v3 = (const void *)v2;
  LXEntryCopyString();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CFRelease(v3);
  return (__CFString *)v4;
}

void sub_1BE705F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1BE705F60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD v30[2];
  _WORD v31[2];

  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 - 0x10000) >> 20)
  {
    v10 = 1;
    v9 = *(_DWORD *)a1;
  }
  else
  {
    v9 = ((v8 + 67043328) >> 10) - 10240;
    v30[1] = v8 & 0x3FF | 0xDC00;
    v10 = 2;
  }
  v30[0] = v9;
  objc_msgSend_stringWithCharacters_length_(MEMORY[0x1E0CB3940], a2, (uint64_t)v30, v10, a5, a6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = *(_QWORD *)a2;
  v15 = *((_QWORD *)a2 + 1);
  v17 = 0.0;
  if (v15 != *(_QWORD *)a2)
  {
    v18 = 0;
    v19 = 0;
    while (*(float *)(v16 + v18 + 4) >= 0.0001)
    {
      v20 = *(_DWORD *)(v16 + v18);
      if (v20 != *(_DWORD *)a1)
      {
        if ((v20 - 0x10000) >> 20)
        {
          v21 = *(_DWORD *)(v16 + v18);
          v22 = 1;
        }
        else
        {
          v21 = ((v20 + 67043328) >> 10) - 10240;
          v31[1] = v20 & 0x3FF | 0xDC00;
          v22 = 2;
        }
        v31[0] = v21;
        objc_msgSend_stringWithCharacters_length_(MEMORY[0x1E0CB3940], v11, (uint64_t)v31, v22, v12, v13);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend_caseInsensitiveCompare_(v14, v24, (uint64_t)v23, v25, v26, v27);

        if (!v28)
        {
          v17 = (float)(*(float *)(*(_QWORD *)a2 + v18 + 4)
                      / (float)(*(float *)(*(_QWORD *)a2 + v18 + 4) + *(float *)(a1 + 4)));
          break;
        }
        v16 = *(_QWORD *)a2;
        v15 = *((_QWORD *)a2 + 1);
      }
      ++v19;
      v18 += 8;
      if (v19 >= (v15 - v16) >> 3)
        break;
    }
  }

  return v17;
}

void sub_1BE7060F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70610C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id halfWidthFullWidthTransform(NSString *a1, NSCharacterSet *a2, NSString *a3, int a4, char a5)
{
  NSString *v9;
  NSCharacterSet *v10;
  NSString *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  NSString *v31;
  uint64_t v32;
  uint64_t v33;
  NSCharacterSet *v34;
  id v35;
  const char *v36;
  void *v37;
  id v38;
  uint64_t v40;
  void *v41;
  _QWORD v42[4];
  NSCharacterSet *v43;
  id v44;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  char v48;
  _QWORD v49[3];
  char v50;
  _QWORD v51[3];
  BOOL v52;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v12, v13, v14, v15, v16);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11
    || (unint64_t)objc_msgSend_length(v9, v17, v18, v19, v20, v21) >= 2
    && (v27 = objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(v9, v17, 1, v19, v20, v21),
        objc_msgSend_substringWithRange_(v9, v28, v27, (uint64_t)v28, v29, v30),
        (v11 = (NSString *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v23 = objc_msgSend_lengthOfBytesUsingEncoding_(v11, v17, 4, v19, v20, v21, v11);
    v25 = a5;
    v26 = v23 != 1;
  }
  else
  {
    v25 = a5;
    v40 = 0;
    v26 = 1;
  }
  v51[0] = 0;
  v51[1] = v51;
  v51[2] = 0x2020000000;
  v52 = v26;
  v49[0] = 0;
  v49[1] = v49;
  v49[2] = 0x2020000000;
  v50 = 0;
  v31 = v9;
  v32 = objc_msgSend_length(v9, v17, v24, v19, v20, v21, v40);
  if (a4)
    v33 = 258;
  else
    v33 = 2;
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = sub_1BE706390;
  v42[3] = &unk_1E77F3F80;
  v34 = v10;
  v43 = v34;
  v45 = v51;
  v46 = v49;
  v47 = a4;
  v35 = v22;
  v44 = v35;
  v48 = v25;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v31, v36, 0, v32, v33, (uint64_t)v42);
  v37 = v44;
  v38 = v35;

  _Block_object_dispose(v49, 8);
  _Block_object_dispose(v51, 8);

  return v38;
}

void sub_1BE7062FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE706370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE706390(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString *v15;
  NSString *v16;
  char v17;
  NSCharacterSet *v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;

  v25 = a2;
  if (objc_msgSend_rangeOfCharacterFromSet_(v25, v3, *(_QWORD *)(a1 + 32), v4, v5, v6) == 0x7FFFFFFFFFFFFFFFLL)
  {
    v15 = (NSString *)v25;
  }
  else
  {
    objc_msgSend_stringByApplyingTransform_reverse_(v25, v7, *MEMORY[0x1E0C99870], *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v8, v9);
    v16 = (NSString *)objc_claimAutoreleasedReturnValue();
    v15 = v16;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      v17 = objc_msgSend_isEqualToString_(v16, v10, (uint64_t)v25, v12, v13, v14) ^ 1;
      goto LABEL_6;
    }
  }
  v17 = 0;
LABEL_6:
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v10, v11, v12, v13, v14);
  v18 = (NSCharacterSet *)objc_claimAutoreleasedReturnValue();
  if (isStringEntirelyFromSet(v15, v18))
  {
    v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);

    if (v19)
      goto LABEL_12;
    v24 = *(void **)(a1 + 40);
    if (*(_BYTE *)(a1 + 64))
      goto LABEL_9;
  }
  else
  {

    v24 = *(void **)(a1 + 40);
    if (*(_BYTE *)(a1 + 64))
    {
LABEL_9:
      objc_msgSend_insertString_atIndex_(v24, v20, (uint64_t)v15, 0, v22, v23);
      goto LABEL_12;
    }
  }
  objc_msgSend_appendString_(v24, v20, (uint64_t)v15, v21, v22, v23);
LABEL_12:
  if (*(_BYTE *)(a1 + 65))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend_lengthOfBytesUsingEncoding_(v15, v20, 4, v21, v22, v23) != 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v17;

}

void sub_1BE7064F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE706508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE706520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE70653C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE706550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id phraseMatchingCandidates(NSString *a1, const _LXLexicon *a2, _NSRange a3, _NSRange a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  NSUInteger length;
  NSUInteger location;
  NSString *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString *v30;
  id v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  _QWORD v43[4];
  NSString *v44;
  id v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t *v48;
  const _LXLexicon *v49;
  uint64_t v50;
  NSUInteger v51;
  NSUInteger v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[4];
  _QWORD v59[5];

  length = a4.length;
  location = a4.location;
  v12 = a1;
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x2020000000;
  v59[3] = 0;
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x2020000000;
  v58[3] = 0;
  v54 = 0;
  v55 = &v54;
  v56 = 0x2020000000;
  v57 = 0;
  v57 = objc_msgSend_length(v12, v19, v20, v21, v22, v23);
  v29 = objc_msgSend_length(v12, v24, v25, v26, v27, v28);
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 3221225472;
  v43[2] = sub_1BE706790;
  v43[3] = &unk_1E77F3FF8;
  v46 = v59;
  v30 = v12;
  v44 = v30;
  v47 = v58;
  v49 = a2;
  v50 = a5;
  v51 = location;
  v52 = length;
  v53 = a6;
  v31 = v18;
  v45 = v31;
  v48 = &v54;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v30, v32, 0, v29, 3, (uint64_t)v43);
  if (a7)
  {
    v38 = v55[3];
    if (v38 >= objc_msgSend_length(v30, v33, v34, v35, v36, v37))
      v39 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v39 = v55[3];
    *a7 = v39;
  }
  v40 = v45;
  v41 = v31;

  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(v58, 8);
  _Block_object_dispose(v59, 8);

  return v41;
}

void sub_1BE706724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  uint64_t v30;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v30 - 120), 8);

  _Unwind_Resume(a1);
}

void sub_1BE706780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE706790(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  const char *v19;
  const void *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[3];
  char v34;
  _QWORD v35[4];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t RootCursor;

  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  objc_msgSend_substringFromIndex_(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2020000000;
  RootCursor = 0;
  RootCursor = LXLexiconCreateRootCursor();
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x2020000000;
  v35[3] = 0;
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2020000000;
  v34 = 0;
  v14 = objc_msgSend_length(v8, v9, v10, v11, v12, v13);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1BE706994;
  v21[3] = &unk_1E77F3FD0;
  v15 = *(_QWORD *)(a1 + 80);
  v24 = *(_QWORD *)(a1 + 56);
  v29 = v15;
  v16 = v8;
  v22 = v16;
  v30 = a3;
  v31 = *(_OWORD *)(a1 + 88);
  v25 = v35;
  v26 = &v36;
  v27 = v33;
  v32 = *(_QWORD *)(a1 + 104);
  v17 = *(id *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 64);
  v23 = v17;
  v28 = v18;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v16, v19, 0, v14, 3, (uint64_t)v21);
  v20 = (const void *)v37[3];
  if (v20)
    CFRelease(v20);

  _Block_object_dispose(v33, 8);
  _Block_object_dispose(v35, 8);
  _Block_object_dispose(&v36, 8);

}

void sub_1BE706934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 144), 8);
  _Block_object_dispose((const void *)(v18 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1BE706984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE706994(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == *(_QWORD *)(a1 + 88))
  {
    *a7 = 1;
  }
  else
  {
    v9 = a3 + a4;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    objc_msgSend_substringWithRange_(*(void **)(a1 + 32), a2, v10, v9 - v10, a5, a6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = LXCursorCreateByAdvancing();
    CFRelease(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v12;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      v18 = (_QWORD *)(a1 + 104);
      v17 = *(_QWORD *)(a1 + 104);
      v19 = *(_QWORD *)(a1 + 96);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v19 + v9 == *(_QWORD *)(a1 + 120);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v9;
      if (v19 + v9 > v17)
      {
        objc_msgSend_substringToIndex_(*(void **)(a1 + 32), v13, v9, v14, v15, v16);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 0;
        if (*v18 >= v19)
          v26 = *v18 - v19;
        else
          v26 = 0;
        if (v19 < v17)
        {
          objc_msgSend_substringToIndex_(v24, v20, v26, v21, v22, v23);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
        }
        v27 = v25;
        v28 = v24;
        v31 = *(id *)(a1 + 40);
        LXCursorEnumerateEntries();
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) && LXCursorHasChildren())
        {
          v29 = *(_QWORD *)(a1 + 96);
          v30 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
          if (v29 < *(_QWORD *)(v30 + 24))
            *(_QWORD *)(v30 + 24) = v29;
        }

      }
    }
    else
    {
      *a7 = 1;
    }

  }
}

void sub_1BE706BE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE706C24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE706C34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE706C44(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int hasPrefix;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  char *cf;

  LXEntryCopyString();
  v2 = (char *)objc_claimAutoreleasedReturnValue();
  v6 = v2;
  v7 = *(_QWORD *)(a1 + 32);
  cf = v2;
  if (!v7 || (hasPrefix = objc_msgSend_hasPrefix_(v2, v2, v7, v3, v4, v5), v6 = cf, hasPrefix))
  {
    v9 = objc_msgSend_compare_(*(void **)(a1 + 40), v6, (uint64_t)v6, v3, v4, v5);
    v14 = objc_msgSend_caseInsensitiveCompare_(*(void **)(a1 + 40), v10, (uint64_t)cf, v11, v12, v13);
    v6 = cf;
    if (v9)
    {
      if (!v14)
      {
        if (*(_BYTE *)(a1 + 88))
          v18 = 0;
        else
          v18 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 64);
        objc_msgSend_substringFromIndex_(cf, cf, *(_QWORD *)(a1 + 80), v15, v16, v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 48);
        objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v21, v18, v22, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKey_(v20, v26, (uint64_t)v25, v27, v28, v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v30
          || (v36 = objc_msgSend_length(v19, v31, v32, v33, v34, v35),
              v36 > objc_msgSend_length(v30, v37, v38, v39, v40, v41)))
        {
          v42 = *(void **)(a1 + 48);
          objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v31, v18, v33, v34, v35);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKey_(v42, v44, (uint64_t)v19, (uint64_t)v43, v45, v46);

        }
        v6 = cf;
      }
    }
  }
  CFRelease(v6);

}

void sub_1BE706D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE706E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE706E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE706E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL isCharacterLatinOrCommonScript(NSString *a1)
{
  NSString *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 v9;

  v1 = a1;
  v2 = (void *)objc_opt_class();
  v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6);
  v9 = v7 == 25 || v7 == 0;

  return v9;
}

void sub_1BE706E84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL isCharacterLatinScript(NSString *a1)
{
  NSString *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v1 = a1;
  v2 = (void *)objc_opt_class();
  v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) == 25;

  return v7;
}

void sub_1BE706ED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL isCharacterCyrillicScript(NSString *a1)
{
  NSString *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v1 = a1;
  v2 = (void *)objc_opt_class();
  v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) == 8;

  return v7;
}

void sub_1BE706F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL isCharacterArabicScript(NSString *a1)
{
  NSString *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v1 = a1;
  v2 = (void *)objc_opt_class();
  v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) == 2;

  return v7;
}

void sub_1BE706F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL isCharacterHanScript(NSString *a1)
{
  NSString *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v1 = a1;
  v2 = (void *)objc_opt_class();
  v7 = objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) == 17;

  return v7;
}

void sub_1BE706FD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL isCharacterKanaScript(NSString *a1)
{
  NSString *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v1 = a1;
  v2 = (void *)objc_opt_class();
  v7 = (objc_msgSend_singleScriptCodeForString_(v2, v3, (uint64_t)v1, v4, v5, v6) & 0xFFFFFFFD) == 20;

  return v7;
}

void sub_1BE70702C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t isCharacterFullWidth(NSString *a1)
{
  NSString *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  v2 = (void *)objc_opt_class();
  v7 = objc_msgSend_isCharacterFullWidth_(v2, v3, (uint64_t)v1, v4, v5, v6);

  return v7;
}

void sub_1BE70707C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t isCharacterCJKSymbolsPunctuations(NSString *a1)
{
  NSString *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  v2 = (void *)objc_opt_class();
  v7 = objc_msgSend_isCharacterCJKSymbolsPunctuations_(v2, v3, (uint64_t)v1, v4, v5, v6);

  return v7;
}

void sub_1BE7070CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t shouldForbidSpaceInBetween(NSString *a1, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  NSString *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSString *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int isCharacterCJKSymbolsPunctuations;
  NSString *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  NSString *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  NSString *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = (void *)objc_opt_class();
  LODWORD(v3) = objc_msgSend_singleScriptCodeForString_(v6, v7, (uint64_t)v5, v8, v9, v10);

  if ((_DWORD)v3 == 17
    || (v11 = v5,
        v12 = (void *)objc_opt_class(),
        v17 = objc_msgSend_singleScriptCodeForString_(v12, v13, (uint64_t)v11, v14, v15, v16) & 0xFFFFFFFD,
        v11,
        v17 == 20))
  {
    isCharacterCJKSymbolsPunctuations = 1;
  }
  else
  {
    v19 = v11;
    v20 = (void *)objc_opt_class();
    isCharacterCJKSymbolsPunctuations = objc_msgSend_isCharacterCJKSymbolsPunctuations_(v20, v21, (uint64_t)v19, v22, v23, v24);

  }
  v25 = v4;
  v26 = (void *)objc_opt_class();
  v31 = objc_msgSend_singleScriptCodeForString_(v26, v27, (uint64_t)v25, v28, v29, v30);

  if (v31 == 17
    || (v32 = v25,
        v33 = (void *)objc_opt_class(),
        v38 = objc_msgSend_singleScriptCodeForString_(v33, v34, (uint64_t)v32, v35, v36, v37) & 0xFFFFFFFD,
        v32,
        v38 == 20))
  {
    v39 = 1;
  }
  else
  {
    v40 = v32;
    v41 = (void *)objc_opt_class();
    v39 = objc_msgSend_isCharacterCJKSymbolsPunctuations_(v41, v42, (uint64_t)v40, v43, v44, v45);

  }
  return isCharacterCJKSymbolsPunctuations | v39;
}

void sub_1BE707224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70725C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE707274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70728C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void parseFloatsFromString(NSString *a1@<X0>, char **a2@<X8>)
{
  NSString *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char i;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  NSString *v52;
  int v53;

  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v52 = v3;
  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v4, (uint64_t)CFSTR("0123456789.-"), v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_scannerWithString_(MEMORY[0x1E0CB3900], v9, (uint64_t)v3, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  v15 = 0;
  v16 = 0;
  for (i = objc_msgSend_isAtEnd(v13, v17, v18, v19, v20, v21);
        (i & 1) == 0;
        i = objc_msgSend_isAtEnd(v13, v31, v32, v33, v34, v35))
  {
    objc_msgSend_scanUpToCharactersFromSet_intoString_(v13, v23, (uint64_t)v8, 0, v24, v25);
    v53 = 0;
    if (objc_msgSend_scanFloat_(v13, v27, (uint64_t)&v53, v28, v29, v30))
    {
      if (v16 < v15)
      {
        *(_DWORD *)v16 = v53;
        v26 = (uint64_t)(v16 + 4);
      }
      else
      {
        v36 = (v16 - v14) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          sub_1BE61F930();
        if ((v15 - v14) >> 1 > v37)
          v37 = (v15 - v14) >> 1;
        if ((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        if (v38)
        {
          if (v38 >> 62)
            sub_1BE61F100();
          v39 = operator new(4 * v38);
          v40 = &v39[4 * v36];
          *(_DWORD *)v40 = v53;
          v26 = (uint64_t)(v40 + 4);
          v41 = v16 - v14;
          if (v16 == v14)
            goto LABEL_22;
        }
        else
        {
          v39 = 0;
          v40 = (char *)(4 * v36);
          *(_DWORD *)(4 * v36) = v53;
          v26 = 4 * v36 + 4;
          v41 = v16 - v14;
          if (v16 == v14)
            goto LABEL_22;
        }
        v42 = v41 - 4;
        if (v42 >= 0xBC)
        {
          v45 = (v16 - 4 - v14) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v39[v16 - v14 - 4 - v45] > &v39[v16 - v14 - 4])
          {
            v43 = v16;
          }
          else if (&v16[-v45 - 4] > v16 - 4)
          {
            v43 = v16;
          }
          else if ((unint64_t)(v14 - v39) >= 0x20)
          {
            v46 = (v42 >> 2) + 1;
            v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
            v43 = &v16[-v47];
            v40 -= v47;
            v48 = &v39[4 * v36 - 16];
            v49 = v16 - 16;
            v50 = v46 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 8;
            }
            while (v50);
            if (v46 == (v46 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_22;
          }
          else
          {
            v43 = v16;
          }
        }
        else
        {
          v43 = v16;
        }
        do
        {
          v44 = *((_DWORD *)v43 - 1);
          v43 -= 4;
          *((_DWORD *)v40 - 1) = v44;
          v40 -= 4;
        }
        while (v43 != v14);
LABEL_22:
        v15 = &v39[4 * v38];
        *a2 = v40;
        a2[1] = (char *)v26;
        a2[2] = v15;
        if (v14)
          operator delete(v14);
        v14 = v40;
      }
      a2[1] = (char *)v26;
      v16 = (char *)v26;
      continue;
    }
  }

}

void sub_1BE707514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  void *v10;
  void *v12;

  v12 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

uint64_t affineTransformToString(CGAffineTransform *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("[%f, %f, %f, %f, %f, %f]"), a4, a5, a6, *(_QWORD *)&a1->a, *(_QWORD *)&a1->b, *(_QWORD *)&a1->c, *(_QWORD *)&a1->d, *(_QWORD *)&a1->tx, *(_QWORD *)&a1->ty);
}

void affineTransformFromString(NSString *a1@<X0>, float64x2_t *a2@<X8>)
{
  float32x2_t *v3;
  float64x2_t v4;
  float64x2_t *v5;
  float64x2_t v6;
  float32x2_t *v7;
  float32x2_t *v8;

  parseFloatsFromString(a1, (char **)&v7);
  v3 = v7;
  if ((char *)v8 - (char *)v7 == 24)
  {
    v4 = vcvtq_f64_f32(v7[1]);
    *a2 = vcvtq_f64_f32(*v7);
    a2[1] = v4;
    a2[2] = vcvtq_f64_f32(v3[2]);
  }
  else
  {
    v5 = (float64x2_t *)MEMORY[0x1E0C9BAA8];
    v6 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 16);
    *a2 = *(float64x2_t *)MEMORY[0x1E0C9BAA8];
    a2[1] = v6;
    a2[2] = v5[2];
    if (!v3)
      return;
  }
  v8 = v3;
  operator delete(v3);
}

uint64_t rectToString(CGRect a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a3, (uint64_t)CFSTR("[%f, %f, %f, %f]"), a5, a6, a7, *(_QWORD *)&a1.origin.x, *(_QWORD *)&a1.origin.y, *(_QWORD *)&a1.size.width, *(_QWORD *)&a1.size.height);
}

double rectFromString(NSString *a1)
{
  double v1;
  float *v3;
  float *v4;

  parseFloatsFromString(a1, (char **)&v3);
  if ((char *)v4 - (char *)v3 == 16)
  {
    v1 = *v3;
LABEL_4:
    v4 = v3;
    operator delete(v3);
    return v1;
  }
  v1 = *MEMORY[0x1E0C9D628];
  if (v3)
    goto LABEL_4;
  return v1;
}

uint64_t pointToString(CGPoint a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a3, (uint64_t)CFSTR("[%f, %f]"), a5, a6, a7, *(_QWORD *)&a1.x, *(_QWORD *)&a1.y);
}

double pointFromString(NSString *a1)
{
  double v1;
  float *v3;
  float *v4;

  parseFloatsFromString(a1, (char **)&v3);
  if ((char *)v4 - (char *)v3 == 8)
  {
    v1 = *v3;
LABEL_4:
    v4 = v3;
    operator delete(v3);
    return v1;
  }
  v1 = *MEMORY[0x1E0C9D538];
  if (v3)
    goto LABEL_4;
  return v1;
}

uint64_t sizeToString(CGSize a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a3, (uint64_t)CFSTR("[%f, %f]"), a5, a6, a7, *(_QWORD *)&a1.width, *(_QWORD *)&a1.height);
}

double sizeFromString(NSString *a1)
{
  double v1;
  float *v3;
  float *v4;

  parseFloatsFromString(a1, (char **)&v3);
  if ((char *)v4 - (char *)v3 == 8)
  {
    v1 = *v3;
LABEL_4:
    v4 = v3;
    operator delete(v3);
    return v1;
  }
  v1 = *MEMORY[0x1E0C9D820];
  if (v3)
    goto LABEL_4;
  return v1;
}

id compatibilityJamoFromComposedHangulString(NSString *a1)
{
  NSString *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v23[4];
  id v24;

  v1 = a1;
  if (qword_1EF568C30 != -1)
    dispatch_once(&qword_1EF568C30, &unk_1E77F4018);
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend_precomposedStringWithCanonicalMapping(v1, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_length(v8, v9, v10, v11, v12, v13);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = sub_1BE7079B4;
  v23[3] = &unk_1E77F2070;
  v15 = v2;
  v24 = v15;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v8, v16, 0, v14, 2, (uint64_t)v23);
  objc_msgSend_componentsJoinedByString_(v15, v17, (uint64_t)&stru_1E77F6F28, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_1BE707918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE70794C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70795C()
{
  void *v0;
  void *v1;
  void *v2;

  v0 = (void *)qword_1EF568110;
  qword_1EF568110 = (uint64_t)&unk_1E7827D10;

  v1 = (void *)qword_1EF568118;
  qword_1EF568118 = (uint64_t)&unk_1E7827D28;

  v2 = (void *)qword_1EF568120;
  qword_1EF568120 = (uint64_t)&unk_1E7827D40;

}

void sub_1BE7079B4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;

  v47 = a2;
  v7 = objc_msgSend_characterAtIndex_(v47, v3, 0, v4, v5, v6);
  if (objc_msgSend_length(v47, v8, v9, v10, v11, v12) == 1 && v7 >> 10 >= 0x2B && v7 <= 0xD7A3)
  {
    v17 = v7 - 44032;
    objc_msgSend_objectAtIndex_((void *)qword_1EF568110, v13, (unsigned __int16)(v7 + 21504) / 0x24Cu, v14, v15, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (unsigned __int16)v17 % 0x1Cu;
    objc_msgSend_objectAtIndex_((void *)qword_1EF568118, v20, (2341 * ((v17 - v19) % 0x24CuLL)) >> 16, v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectAtIndex_((void *)qword_1EF568120, v25, v19, v26, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(*(void **)(a1 + 32), v30, (uint64_t)v18, v31, v32, v33);
    objc_msgSend_addObject_(*(void **)(a1 + 32), v34, (uint64_t)v24, v35, v36, v37);
    if (objc_msgSend_length(v29, v38, v39, v40, v41, v42))
      objc_msgSend_addObject_(*(void **)(a1 + 32), v43, (uint64_t)v29, v44, v45, v46);

  }
  else
  {
    objc_msgSend_addObject_(*(void **)(a1 + 32), v13, (uint64_t)v47, v14, v15, v16);

  }
}

void sub_1BE707B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE707B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id uncompressLZFSEData(NSData *a1, uint64_t a2)
{
  NSData *v3;
  uint8_t *v4;
  NSData *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const uint8_t *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v3 = a1;
  if (a2 < 1)
  {
    v21 = 0;
  }
  else
  {
    v4 = (uint8_t *)malloc_type_malloc(a2, 0xFC535680uLL);
    v5 = objc_retainAutorelease(v3);
    v11 = (const uint8_t *)objc_msgSend_bytes(v5, v6, v7, v8, v9, v10);
    v17 = objc_msgSend_length(v5, v12, v13, v14, v15, v16);
    if (compression_decode_buffer(v4, a2, v11, v17, 0, COMPRESSION_LZFSE) == a2)
    {
      objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v18, (uint64_t)v4, a2, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v21 = 0;
    }
    free(v4);
  }

  return v21;
}

void sub_1BE707C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE707C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id getAlphaShape(void *a1, double a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  char *v61;
  void *__p;
  char *v63;
  char *v64;

  v3 = a1;
  __p = 0;
  v63 = 0;
  v64 = 0;
  v9 = objc_msgSend_count(v3, v4, v5, v6, v7, v8);
  v15 = v9;
  if (v9)
  {
    if (v9 >> 60)
      sub_1BE61F930();
    __p = operator new(16 * v9);
    v63 = (char *)__p;
    v64 = (char *)__p + 16 * v15;
  }
  for (i = 0; objc_msgSend_count(v3, v10, v11, v12, v13, v14) > i; ++i)
  {
    objc_msgSend_objectAtIndexedSubscript_(v3, v18, i, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_ch_CGPointValue(v22, v23, v24, v25, v26, v27);
    v30 = v28;
    v31 = v29;
    v32 = v63;
    if (v63 < v64)
    {
      *(_QWORD *)v63 = v28;
      *((_QWORD *)v32 + 1) = v29;
      v17 = v32 + 16;
      goto LABEL_6;
    }
    v33 = (char *)__p;
    v34 = (v63 - (_BYTE *)__p) >> 4;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 60)
      sub_1BE61F930();
    v36 = v64 - (_BYTE *)__p;
    if ((v64 - (_BYTE *)__p) >> 3 > v35)
      v35 = v36 >> 3;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
      v37 = 0xFFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 60)
        sub_1BE61F100();
      v38 = (char *)operator new(16 * v37);
      v39 = &v38[16 * v34];
      *(_QWORD *)v39 = v30;
      *((_QWORD *)v39 + 1) = v31;
      v40 = v39;
      if (v32 == v33)
      {
LABEL_18:
        v17 = v39 + 16;
        __p = v40;
        v64 = &v38[16 * v37];
        if (v32)
          goto LABEL_23;
        goto LABEL_6;
      }
    }
    else
    {
      v38 = 0;
      v39 = (char *)(16 * v34);
      *(_QWORD *)v39 = v28;
      *((_QWORD *)v39 + 1) = v29;
      v40 = (char *)(16 * v34);
      if (v32 == v33)
        goto LABEL_18;
    }
    do
    {
      *((_OWORD *)v40 - 1) = *((_OWORD *)v32 - 1);
      v40 -= 16;
      v32 -= 16;
    }
    while (v32 != v33);
    v32 = v33;
    v17 = v39 + 16;
    __p = v40;
    v64 = &v38[16 * v37];
    if (v32)
LABEL_23:
      operator delete(v32);
LABEL_6:
    v63 = v17;

  }
  sub_1BE7F67A0((uint64_t)&__p, &v60, a2);
  objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v41, (v61 - v60) >> 4, v42, v43, v44);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = v61;
  if (v61 != v60)
  {
    v52 = 0;
    v53 = 0;
    v51 = v60;
    do
    {
      objc_msgSend_ch_valueWithCGPoint_(MEMORY[0x1E0CB3B18], v45, v46, v47, v48, v49, *(double *)&v51[v52], *(double *)&v51[v52 + 8]);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v50, v55, (uint64_t)v54, v56, v57, v58);

      ++v53;
      v51 = v60;
      v52 += 16;
    }
    while (v53 < (v61 - v60) >> 4);
  }
  if (v51)
  {
    v61 = v51;
    operator delete(v51);
  }
  if (__p)
  {
    v63 = (char *)__p;
    operator delete(__p);
  }

  return v50;
}

void sub_1BE707F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);

  _Unwind_Resume(a1);
}

id runCommand(NSString *a1)
{
  NSString *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;

  v1 = a1;
  if ((os_variant_has_internal_diagnostics() & 1) != 0)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0CB3958]);
    objc_msgSend_setLaunchPath_(v2, v3, (uint64_t)CFSTR("/bin/sh"), v4, v5, v6);
    v7 = (void *)MEMORY[0x1E0C99D20];
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v8, (uint64_t)CFSTR("%@"), v9, v10, v11, v1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_arrayWithObjects_(v7, v13, (uint64_t)CFSTR("-c"), v14, v15, v16, v12, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_setArguments_(v2, v18, (uint64_t)v17, v19, v20, v21);
    objc_msgSend_pipe(MEMORY[0x1E0CB3860], v22, v23, v24, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setStandardOutput_(v2, v28, (uint64_t)v27, v29, v30, v31);
    objc_msgSend_setStandardError_(v2, v32, (uint64_t)v27, v33, v34, v35);
    objc_msgSend_fileHandleForReading(v27, v36, v37, v38, v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_launchAndReturnError_(v2, v42, 0, v43, v44, v45);
    objc_msgSend_readDataToEndOfFile(v41, v46, v47, v48, v49, v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_alloc(MEMORY[0x1E0CB3940]);
    v56 = (void *)objc_msgSend_initWithData_encoding_(v52, v53, (uint64_t)v51, 4, v54, v55);
    objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v57, v58, v59, v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByTrimmingCharactersInSet_(v56, v63, (uint64_t)v62, v64, v65, v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v67 = 0;
  }

  return v67;
}

void sub_1BE708134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1BE7081EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id clearStyleInventory(void)
{
  id result;
  id v1;
  id v2;

  result = (id)os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    v1 = objc_unsafeClaimAutoreleasedReturnValue(runCommand(&CFSTR("launchctl unload /System/Library/LaunchDaemons/com.apple.ha"
                                                                   "ndwritingd.plist").isa));
    v2 = runCommand(CFSTR("login -f mobile /usr/libexec/handwritingd --clear-inventory"));
    return objc_unsafeClaimAutoreleasedReturnValue(runCommand(&CFSTR("launchctl load /System/Library/LaunchDaemons/com.apple.ha"
                                                                     "ndwritingd.plist").isa));
  }
  return result;
}

void useInventoryWithRelativePath(NSString *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  id v6;
  id v7;
  NSString *v8;

  v8 = a1;
  if ((os_variant_has_internal_diagnostics() & 1) != 0)
  {
    v1 = objc_unsafeClaimAutoreleasedReturnValue(runCommand(&CFSTR("launchctl unload /System/Library/LaunchDaemons/com.apple.ha"
                                                                   "ndwritingd.plist").isa));
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)v8, (uint64_t)CFSTR("login -f mobile defaults write \"Apple Global Domain\" com.apple.corehandwriting -dict-add CHCustomStyleInventoryPath -string \"%@\""), v2, v3, v4, v8);
    v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    v6 = runCommand(v5);

    v7 = runCommand(CFSTR("launchctl load /System/Library/LaunchDaemons/com.apple.handwritingd.plist"));
  }

}

void sub_1BE708300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE708318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void useDefaultInventory(void)
{
  if (os_variant_has_internal_diagnostics())
    useInventoryWithRelativePath(0);
}

uint64_t useInventoryWithRelativePathWithChecks(NSString *a1)
{
  NSString *v1;
  CHRemoteTextSynthesizer *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isEqualToString;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSString *v59;

  v1 = a1;
  v2 = objc_alloc_init(CHRemoteTextSynthesizer);
  objc_msgSend_styleInventoryStatus(v2, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_inventoryRelativePath(v8, v9, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v1, v16, v17, v18);

  if ((isEqualToString & 1) != 0)
  {
    v20 = 0;
  }
  else
  {
    useInventoryWithRelativePath(v1);
    objc_msgSend_styleInventoryStatus(v2, v21, v22, v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_inventoryRelativePath(v26, v27, v28, v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend_isEqualToString_(v32, v33, (uint64_t)v1, v34, v35, v36);

    if ((v20 & 1) == 0)
    {
      objc_msgSend_inventoryRelativePath(v8, v37, v38, v39, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_inventoryRelativePath(v26, v43, v44, v45, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = objc_msgSend_isEqualToString_(v42, v49, (uint64_t)v48, v50, v51, v52);

      if ((v53 & 1) == 0)
      {
        objc_msgSend_inventoryRelativePath(v8, v54, v55, v56, v57, v58);
        v59 = (NSString *)objc_claimAutoreleasedReturnValue();
        useInventoryWithRelativePath(v59);

      }
    }

  }
  return v20;
}

void sub_1BE708474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE7084A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7084C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE7084E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7084F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE708504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id deviceANESubType(void)
{
  if (qword_1EF568130 != -1)
    dispatch_once(&qword_1EF568130, &unk_1E77F4038);
  return (id)qword_1EF568128;
}

void sub_1BE708568()
{
  id v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;

  v0 = sub_1BE7085E4();
  if (objc_msgSend_hasANE(v0, v1, v2, v3, v4, v5))
  {
    v6 = sub_1BE7085E4();
    objc_msgSend_aneSubType(v6, v7, v8, v9, v10, v11);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_uppercaseString(v19, v12, v13, v14, v15, v16);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)qword_1EF568128;
    qword_1EF568128 = v17;

  }
}

void sub_1BE7085D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1BE7085E4()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EF568138;
  v7 = qword_1EF568138;
  if (!qword_1EF568138)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1BE70869C;
    v3[3] = &unk_1E77F2D50;
    v3[4] = &v4;
    sub_1BE70869C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1BE708684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1BE70869C(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EF568140)
  {
    qword_1EF568140 = _sl_dlopen();
    if (!qword_1EF568140)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("_ANEDeviceInfo");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1EF568138 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void ***sub_1BE7087A0(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = (char *)v2[1];
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1BE70967C()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("com.apple.CoreHandwriting.CHSingletonMLModelQueue", v0);
  v2 = (void *)qword_1EF568150;
  qword_1EF568150 = (uint64_t)v1;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v3, v4, v5, v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)qword_1EF568148;
  qword_1EF568148 = v8;

}

void sub_1BE70982C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE70985C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE709870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE709884(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  CHSingletonMLModel *v11;
  void *v12;
  id v13;
  id *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  objc_super v29;

  objc_msgSend_objectForKey_((void *)qword_1EF568148, a2, a1[4], a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend_modelWithContentsOfURL_configuration_error_(MEMORY[0x1E0C9E940], v8, a1[5], a1[6], a1[7], v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = [CHSingletonMLModel alloc];
    v12 = (void *)a1[4];
    v28 = v10;
    v13 = v12;
    if (v11)
    {
      objc_opt_self();
      if (qword_1EF568158 != -1)
        dispatch_once(&qword_1EF568158, &unk_1E77F1750);
      v29.receiver = v11;
      v29.super_class = (Class)CHSingletonMLModel;
      v14 = (id *)objc_msgSendSuper2(&v29, sel_init);
      v15 = (uint64_t)v14;
      if (v14)
      {
        objc_storeStrong(v14 + 1, v12);
        *(_QWORD *)(v15 + 16) = 0;
        objc_storeStrong((id *)(v15 + 24), v10);
      }
    }
    else
    {
      v15 = 0;
    }

    objc_msgSend_setObject_forKey_((void *)qword_1EF568148, v16, v15, a1[4], v17, v18);
    v24 = objc_msgSend_powerLogModelNameForModelKey_(CHSingletonMLModel, v19, a1[4], v20, v21, v22);
    if (v24 != 0x7FFFFFFFFFFFFFFFLL)
      objc_msgSend_logModelLoaded_(CHPowerLogging, v23, v24, v25, v26, v27);

  }
}

void sub_1BE709A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE709A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE709BB0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE709BC0(uint64_t a1)
{

}

void sub_1BE709BC8(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id obj;

  v7 = a1[5];
  v8 = *(void **)(a1[4] + 24);
  v9 = a1[6];
  v10 = *(_QWORD *)(a1[8] + 8);
  obj = *(id *)(v10 + 40);
  objc_msgSend_predictionFromFeatures_options_error_(v8, a2, v7, v9, (uint64_t)&obj, a6);
  v11 = objc_claimAutoreleasedReturnValue();
  objc_storeStrong((id *)(v10 + 40), obj);
  v12 = *(_QWORD *)(a1[7] + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

}

void sub_1BE709CDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  objc_msgSend_objectForKey_((void *)qword_1EF568148, a2, *(_QWORD *)(a1 + 32), a4, a5, a6);
  v25 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  if (v25)
  {
    --v25[2];
    if (!objc_msgSend_usageCount(v25, v7, v8, v9, v10, v11))
    {
      objc_msgSend_removeObjectForKey_((void *)qword_1EF568148, v12, *(_QWORD *)(a1 + 32), v13, v14, v15);
      v21 = objc_msgSend_powerLogModelNameForModelKey_(CHSingletonMLModel, v16, *(_QWORD *)(a1 + 32), v17, v18, v19);
      if (v21 != 0x7FFFFFFFFFFFFFFFLL)
        objc_msgSend_logModelUnloaded_(CHPowerLogging, v20, v21, v22, v23, v24);
    }
  }

}

void sub_1BE709D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE709D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE709F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE709FE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70A274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE70A580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70A80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70A91C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE70A938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70A950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70A964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70AA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70AAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE70AC50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70AF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70AF64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70AF78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70AF8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70AFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70AFB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70B144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70B164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70B4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE70B518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70B528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70B53C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70B550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70B658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70B674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70BA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE70BAAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70BABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70BAD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70BAE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70BAF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70BB0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70BC7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70BCA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70C050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE70C074(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70C084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C1B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C1D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70C438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70C454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70C464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C54C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70C76C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70C784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70C86C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70CA6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70CA88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70CA98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70CAAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70CB80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70CB98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70CDC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70CDE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70CDF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70CE04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70CED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70CEF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70D11C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70D138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70D148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70D15C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70D230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70D248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70D474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70D490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70D4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70D4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70D588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70D5A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70D7CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE70D7E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70D7F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70D80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70D8E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE70D8F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE70DCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE70DD64(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a2;
  v5 = a3;
  v11 = objc_msgSend_ancestorIdentifier(v4, v6, v7, v8, v9, v10);
  if (v11 <= objc_msgSend_ancestorIdentifier(v5, v12, v13, v14, v15, v16))
  {
    v23 = objc_msgSend_ancestorIdentifier(v4, v17, v18, v19, v20, v21);
    if (v23 >= objc_msgSend_ancestorIdentifier(v5, v24, v25, v26, v27, v28))
      v22 = 0;
    else
      v22 = -1;
  }
  else
  {
    v22 = 1;
  }

  return v22;
}

void sub_1BE70DDE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CoreHandwriting::synthesis::getCosineScheduleTrainedBetas(CoreHandwriting::synthesis *this@<X0>, float **a2@<X8>)
{
  int v2;
  float **v3;
  float *v4;
  float *v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;
  float *v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  float *v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  float *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  float *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  float *v34;
  float *v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  double v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  float *v48;
  float v49;
  int64_t v50;
  unint64_t v51;
  float *v52;
  int v53;
  float v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  float *v59;
  uint64_t v60;
  __int128 v61;
  unint64_t v62;

  v2 = (int)this;
  v3 = a2;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v6 = (int)this + 1;
  if ((_DWORD)this != -1)
  {
    if ((int)this <= -2)
      sub_1BE61F930();
    v4 = (float *)operator new(4 * ((int)this + 1));
    v5 = &v4[v6];
  }
  v7 = 0;
  v8 = (float)v2;
  v9 = INFINITY;
  v10 = v4;
  do
  {
    while (1)
    {
      v12 = cos((float)((float)((float)v7 / v8) + 0.008) / 1.008 * 3.14159265 * 0.5);
      v13 = v12 * v12;
      if (v9 == INFINITY)
        v9 = v13;
      v14 = v13 / v9;
      if (v4 >= v5)
        break;
      *v4++ = v14;
      v11 = v7++ == (_DWORD)v6;
      if (v11)
        goto LABEL_38;
    }
    v15 = v4 - v10;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      sub_1BE61F930();
    if (((char *)v5 - (char *)v10) >> 1 > v16)
      v16 = ((char *)v5 - (char *)v10) >> 1;
    if ((unint64_t)((char *)v5 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 >> 62)
        sub_1BE61F100();
      v18 = operator new(4 * v17);
      v19 = (float *)&v18[4 * v15];
      *v19 = v14;
      v20 = (uint64_t)(v19 + 1);
      v21 = (char *)v4 - (char *)v10;
      if (v4 == v10)
        goto LABEL_23;
    }
    else
    {
      v18 = 0;
      v19 = (float *)(4 * v15);
      *(float *)(4 * v15) = v14;
      v20 = 4 * v15 + 4;
      v21 = (char *)v4 - (char *)v10;
      if (v4 == v10)
        goto LABEL_23;
    }
    v22 = v21 - 4;
    if (v22 < 0xBC)
    {
      v23 = v4;
      goto LABEL_22;
    }
    v25 = ((char *)(v4 - 1) - (char *)v10) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v18[(char *)v4 - (char *)v10 - 4 - v25] > &v18[(char *)v4 - (char *)v10 - 4])
    {
      v23 = v4;
      do
      {
LABEL_22:
        v24 = *((_DWORD *)v23-- - 1);
        *((_DWORD *)v19-- - 1) = v24;
      }
      while (v23 != v10);
      goto LABEL_23;
    }
    if ((float *)((char *)v4 - v25 - 4) > v4 - 1)
    {
      v23 = v4;
      goto LABEL_22;
    }
    if ((unint64_t)((char *)v10 - v18) < 0x20)
    {
      v23 = v4;
      goto LABEL_22;
    }
    v26 = (v22 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v23 = &v4[v27 / 0xFFFFFFFFFFFFFFFCLL];
    v19 = (float *)((char *)v19 - v27);
    v28 = &v18[4 * v15 - 16];
    v29 = v4 - 4;
    v30 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 8;
      v30 -= 8;
    }
    while (v30);
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_22;
LABEL_23:
    v5 = (float *)&v18[4 * v17];
    if (v10)
      operator delete(v10);
    v10 = v19;
    v4 = (float *)v20;
    v11 = v7++ == (_DWORD)v6;
  }
  while (!v11);
LABEL_38:
  if ((unint64_t)((char *)v4 - (char *)v10) >= 5)
  {
    v32 = 0;
    v33 = v4 - v10;
    if (v33 <= 2)
      v33 = 2;
    v34 = v3[1];
    v35 = v3[2];
    v36 = v33 - 2;
    v37 = 1;
    v62 = v33 - 2;
    while (1)
    {
      v40 = v10[v32];
      v41 = (float)(1.0 - (float)(v10[v37] / v40)) <= 0.999 ? (float)(1.0 - (float)(v10[v37] / v40)) : 0.999;
      if (v34 >= v35)
        break;
      v38 = v41;
      *v34 = v38;
      v39 = (uint64_t)(v34 + 1);
LABEL_43:
      v3[1] = (float *)v39;
      ++v37;
      v34 = (float *)v39;
      v11 = v32++ == v36;
      if (v11)
        goto LABEL_73;
    }
    v42 = *v3;
    v43 = (char *)v34 - (char *)*v3;
    v44 = v43 >> 2;
    v45 = (v43 >> 2) + 1;
    if (v45 >> 62)
      sub_1BE61F930();
    if (((char *)v35 - (char *)v42) >> 1 > v45)
      v45 = ((char *)v35 - (char *)v42) >> 1;
    if ((unint64_t)((char *)v35 - (char *)v42) >= 0x7FFFFFFFFFFFFFFCLL)
      v46 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
    {
      if (v46 >> 62)
        sub_1BE61F100();
      v47 = operator new(4 * v46);
      v48 = (float *)&v47[4 * v44];
      v49 = v41;
      *v48 = v49;
      v39 = (uint64_t)(v48 + 1);
      v50 = (char *)v34 - (char *)v42;
      if (v34 != v42)
      {
LABEL_57:
        v51 = v50 - 4;
        if (v51 < 0xBC
          || (v55 = ((char *)(v34 - 1) - (char *)v42) & 0xFFFFFFFFFFFFFFFCLL, &v47[v43 - 4 - v55] > &v47[v43 - 4])
          || (float *)((char *)v34 - v55 - 4) > v34 - 1
          || (unint64_t)((char *)v34 - v47 - v43) < 0x20)
        {
          v52 = v34;
          v3 = a2;
        }
        else
        {
          v56 = (v51 >> 2) + 1;
          v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
          v52 = &v34[v57 / 0xFFFFFFFFFFFFFFFCLL];
          v48 = (float *)((char *)v48 - v57);
          v58 = &v47[4 * v44 - 16];
          v59 = v34 - 4;
          v60 = v56 & 0x7FFFFFFFFFFFFFF8;
          v3 = a2;
          do
          {
            v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *v58 = v61;
            v58 -= 2;
            v59 -= 8;
            v60 -= 8;
          }
          while (v60);
          if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_60:
            v35 = (float *)&v47[4 * v46];
            *v3 = v48;
            v3[1] = (float *)v39;
            v3[2] = v35;
            if (v42)
              goto LABEL_61;
            goto LABEL_62;
          }
        }
        do
        {
          v53 = *((_DWORD *)v52-- - 1);
          *((_DWORD *)v48-- - 1) = v53;
        }
        while (v52 != v42);
        goto LABEL_60;
      }
    }
    else
    {
      v47 = 0;
      v48 = (float *)(4 * v44);
      v54 = v41;
      *(float *)(4 * v44) = v54;
      v39 = 4 * v44 + 4;
      v50 = (char *)v34 - (char *)v42;
      if (v34 != v42)
        goto LABEL_57;
    }
    v3 = a2;
    v35 = (float *)&v47[4 * v46];
    *a2 = v48;
    a2[1] = (float *)v39;
    a2[2] = v35;
    if (v42)
LABEL_61:
      operator delete(v42);
LABEL_62:
    v36 = v62;
    goto LABEL_43;
  }
LABEL_73:
  if (v10)
    operator delete(v10);
}

void sub_1BE70FA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  void *v15;
  void *v16;

  v15 = *(void **)a11;
  if (*(_QWORD *)a11)
  {
    *(_QWORD *)(a11 + 8) = v15;
    operator delete(v15);
    v16 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v16 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t CoreHandwriting::synthesis::AbstractDiffusionScheduler::getNumInferenceTimesteps(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CoreHandwriting::synthesis::AbstractDiffusionScheduler::getTimesteps(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this)
{
  return (uint64_t)this + 8;
}

uint64_t CoreHandwriting::synthesis::AbstractDiffusionScheduler::getClosestTimeStep(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this, float a2)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t result;
  unsigned int v6;
  int v7;
  int v8;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    result = 0;
    v6 = llroundf((float)*((int *)this + 8) * a2);
    v7 = 0x7FFFFFFF;
    while (1)
    {
      v8 = *v2 - v6;
      if (v8 < 0)
        v8 = v6 - *v2;
      if (v8 < v7)
      {
        result = *v2;
        v7 = v8;
      }
      else if (v8 > v7)
      {
        return result;
      }
      if (++v2 == v3)
        return result;
    }
  }
  return 0;
}

_DWORD *CoreHandwriting::synthesis::AbstractDiffusionScheduler::timeStepsBegin(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this, float a2)
{
  int v3;
  _DWORD *result;
  _DWORD *v5;

  v3 = (*(uint64_t (**)(CoreHandwriting::synthesis::AbstractDiffusionScheduler *, float))(*(_QWORD *)this
                                                                                                  + 56))(this, a2);
  result = (_DWORD *)*((_QWORD *)this + 1);
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  if (result != v5)
  {
    while (v3 < *result)
    {
      if (++result == v5)
        return (_DWORD *)*((_QWORD *)this + 2);
    }
  }
  return result;
}

uint64_t CoreHandwriting::synthesis::AbstractDiffusionScheduler::timeStepsEnd(CoreHandwriting::synthesis::AbstractDiffusionScheduler *this, float a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t *CoreHandwriting::synthesis::DDIMScheduler::setTimesteps(uint64_t *this, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;

  v3 = (uint64_t)this;
  *((_DWORD *)this + 8) = a3;
  *((_DWORD *)this + 9) = a2;
  v13 = this + 1;
  if (a2 >= 1)
  {
    v4 = a2;
    v5 = 0;
    v6 = a3 / a2;
    do
    {
      this = sub_1BE66E3D8((uint64_t *)&v13, v5);
      v5 += v6;
      --v4;
    }
    while (v4);
  }
  v8 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  if (v8 != v7)
  {
    v9 = (_DWORD *)(v7 - 4);
    if ((unint64_t)v9 > v8)
    {
      v10 = v8 + 4;
      do
      {
        v11 = *(_DWORD *)(v10 - 4);
        *(_DWORD *)(v10 - 4) = *v9;
        *v9-- = v11;
        v12 = v10 >= (unint64_t)v9;
        v10 += 4;
      }
      while (!v12);
    }
  }
  return this;
}

void (***CoreHandwriting::synthesis::DDIMScheduler::DDIMScheduler(void (***this)(), CoreHandwriting::synthesis *a2, int a3))()
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  int64_t v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  float *v22;
  float v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v30;
  int v31;
  BOOL v32;
  void (**v33)();
  void (**v34)();
  void (**v35)();
  _QWORD *v37;
  _QWORD *v38;
  void (**v39)();
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44[2];
  void (**v45)();
  void *__p[2];
  _OWORD v47[2];
  int v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51[2];

  this[1] = 0;
  v5 = this + 1;
  this[2] = 0;
  this[3] = 0;
  this[4] = (void (**)())0x1E000003E8;
  *this = (void (**)())&off_1E77F0D98;
  *(_OWORD *)(this + 5) = 0u;
  v6 = this + 5;
  *(_OWORD *)(this + 11) = 0u;
  v38 = this + 11;
  v37 = this + 8;
  *(_OWORD *)(this + 7) = 0u;
  *(_OWORD *)(this + 9) = 0u;
  this[13] = 0;
  *((_DWORD *)this + 28) = 1065353216;
  CoreHandwriting::synthesis::getCosineScheduleTrainedBetas(a2, (float **)&v49);
  v41 = 0;
  v42 = 0;
  v43 = 0x1E000003E8;
  v39 = (void (**)())&off_1E77F0D98;
  v40 = 0;
  v44[1] = 0;
  v45 = 0;
  v44[0] = 0;
  v7 = v49;
  v8 = v50 - (_BYTE *)v49;
  if (v50 == v49)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_1BE61F930();
    v9 = (float *)operator new(v50 - (_BYTE *)v49);
    v44[0] = v9;
    v10 = &v9[v8 >> 2];
    v45 = (void (**)())v10;
    memcpy(v9, v7, v8);
    v44[1] = v10;
  }
  memset(v47, 0, sizeof(v47));
  *(_OWORD *)__p = 0u;
  v48 = 1065353216;
  HIDWORD(v43) = a3;
  v11 = (char *)v10 - (char *)v9;
  if (v10 == v9)
  {
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
  }
  else
  {
    if (v11 < 0)
      sub_1BE61F930();
    __p[0] = operator new((char *)v10 - (char *)v9);
    __p[1] = __p[0];
    *(_QWORD *)&v47[0] = (char *)__p[0] + 4 * (v11 >> 2);
    v51[0] = (uint64_t)__p;
    do
      sub_1BE711E94(v51, 1.0 - *v9++);
    while (v9 != v10);
    v13 = (float *)__p[0];
    v12 = (float *)__p[1];
    v14 = *((_QWORD *)&v47[0] + 1);
    v15 = *(_QWORD *)&v47[1];
  }
  v16 = v12 - v13;
  v17 = (v15 - v14) >> 2;
  if (v16 <= v17)
  {
    if (v16 < v17)
      *(_QWORD *)&v47[1] = v14 + 4 * v16;
  }
  else
  {
    sub_1BE712014((uint64_t)v47 + 8, v16 - v17);
    v13 = (float *)__p[0];
    v12 = (float *)__p[1];
  }
  if (v13 != v12)
  {
    v18 = *((_QWORD *)&v47[0] + 1);
    v20 = *v13;
    v19 = v13 + 1;
    v21 = v20;
    **((float **)&v47[0] + 1) = v20;
    if (v19 != v12)
    {
      v22 = (float *)(v18 + 4);
      do
      {
        v23 = *v19++;
        v21 = v21 * v23;
        *v22++ = v21;
      }
      while (v19 != v12);
    }
  }
  LODWORD(v43) = ((unint64_t)(v50 - (_BYTE *)v49) >> 2) - 1;
  HIDWORD(v43) = a3;
  v51[0] = (uint64_t)&v40;
  if (a3 >= 1)
  {
    v24 = 0;
    v25 = (int)(((unint64_t)(v50 - (_BYTE *)v49) >> 2) - 1) / a3;
    do
    {
      sub_1BE66E3D8(v51, v24);
      v24 += v25;
      --a3;
    }
    while (a3);
  }
  v26 = (char *)v40;
  v27 = v41;
  v28 = v41 - 4;
  if (v40 != v41 && v28 > v40)
  {
    v30 = (char *)v40 + 4;
    do
    {
      v31 = *((_DWORD *)v30 - 1);
      *((_DWORD *)v30 - 1) = *(_DWORD *)v28;
      *(_DWORD *)v28 = v31;
      v28 -= 4;
      v32 = v30 >= v28;
      v30 += 4;
    }
    while (!v32);
  }
  if (&v39 != this)
    sub_1BE66E294(v5, v26, v27, (v27 - v26) >> 2);
  this[4] = (void (**)())v43;
  v33 = this[5];
  if (v33)
  {
    this[6] = v33;
    operator delete(v33);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(this + 5) = *(_OWORD *)v44;
  this[7] = v45;
  v44[1] = 0;
  v45 = 0;
  v44[0] = 0;
  v34 = this[8];
  if (v34)
  {
    this[9] = v34;
    operator delete(v34);
    *v37 = 0;
    v37[1] = 0;
    v37[2] = 0;
  }
  *((_OWORD *)this + 4) = *(_OWORD *)__p;
  this[10] = *(void (***)())&v47[0];
  __p[1] = 0;
  *(_QWORD *)&v47[0] = 0;
  __p[0] = 0;
  v35 = this[11];
  if (v35)
  {
    this[12] = v35;
    operator delete(v35);
    *v38 = 0;
    v38[1] = 0;
    v38[2] = 0;
    v35 = (void (**)())__p[0];
  }
  *(_OWORD *)(this + 11) = *(_OWORD *)((char *)v47 + 8);
  this[13] = (void (**)())*((_QWORD *)&v47[1] + 1);
  memset((char *)v47 + 8, 0, 24);
  *((_DWORD *)this + 28) = v48;
  v39 = (void (**)())&off_1E77F0D98;
  if (v35)
  {
    __p[1] = v35;
    operator delete(v35);
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  v39 = off_1E77F0DF8;
  if (v40)
  {
    v41 = (char *)v40;
    operator delete(v40);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  return this;
}

void sub_1BE70FF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _QWORD *v27;
  void **v28;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  sub_1BE7100F4(&a11);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
    v30 = *a10;
    if (!*a10)
    {
LABEL_3:
      v31 = *a9;
      if (!*a9)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v30 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  v27[12] = v30;
  operator delete(v30);
  v31 = *a9;
  if (!*a9)
  {
LABEL_4:
    v32 = *v28;
    if (!*v28)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  v27[9] = v31;
  operator delete(v31);
  v32 = *v28;
  if (!*v28)
  {
LABEL_5:
    *v27 = off_1E77F0DF8;
    v33 = (void *)v27[1];
    if (!v33)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  v27[6] = v32;
  operator delete(v32);
  *v27 = off_1E77F0DF8;
  v33 = (void *)v27[1];
  if (!v33)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  v27[2] = v33;
  operator delete(v33);
  _Unwind_Resume(a1);
}

_QWORD *sub_1BE7100F4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E77F0D98;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  *a1 = off_1E77F0DF8;
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

id sub_1BE710170(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  id v20;
  void *v21;
  NSObject *v22;
  int v23;
  BOOL v24;
  char v25;
  int v26;
  uint64_t v27;
  float v28;
  float *v29;
  float v30;
  id v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  id v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  id v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const float *v60;
  id v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const float *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  vDSP_Length v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  vDSP_Length v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  vDSP_Length v85;
  float v86;
  id v87;
  uint64_t v88;
  id v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  id v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  void *v117;
  id v118;
  id v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float __B;
  uint8_t buf[8];
  uint64_t v127;
  void *v128;
  void *v129;
  id v130;
  id v131;

  v7 = a4;
  if (objc_msgSend_dataType(v7, v8, v9, v10, v11, v12, v7) != 65568)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v18 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v18, OS_LOG_TYPE_FAULT, "Only MLMultiArrayDataTypeFloat32 model outputs are supported.", buf, 2u);
    }

  }
  if (objc_msgSend_dataType(v7, v13, v14, v15, v16, v17) != 65568)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v19 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v19, OS_LOG_TYPE_FAULT, "Only MLMultiArrayDataTypeFloat32 samples are supported.", buf, 2u);
    }

  }
  v20 = *(id *)(*(_QWORD *)(a2 + 8) - 8);
  v21 = v20;
  if (!v7 || !v20)
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v22 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BE607000, v22, OS_LOG_TYPE_FAULT, "step() inputs cannot be nil!", buf, 2u);
    }

  }
  v23 = *(_DWORD *)(a1 + 32) / *(_DWORD *)(a1 + 36);
  v24 = __OFSUB__(a3, v23);
  v26 = a3 - v23;
  v25 = (v26 < 0) ^ v24;
  v27 = *(_QWORD *)(a1 + 88);
  v28 = *(float *)(v27 + 4 * a3);
  v29 = (float *)(v27 + 4 * v26);
  if (v25)
    v29 = (float *)(a1 + 112);
  v30 = *v29;
  v31 = objc_alloc(MEMORY[0x1E0C9E970]);
  objc_msgSend_shape(v21, v32, v33, v34, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend_dataType(v21, v38, v39, v40, v41, v42);
  v46 = (void *)objc_msgSend_initWithShape_dataType_error_(v31, v44, (uint64_t)v37, v43, 0, v45);

  v47 = objc_retainAutorelease(v46);
  v53 = (float *)objc_msgSend_dataPointer(v47, v48, v49, v50, v51, v52);
  v54 = objc_retainAutorelease(v7);
  v60 = (const float *)objc_msgSend_dataPointer(v54, v55, v56, v57, v58, v59);
  v61 = objc_retainAutorelease(v21);
  v67 = (const float *)objc_msgSend_dataPointer(v61, v62, v63, v64, v65, v66);
  *(_DWORD *)buf = sqrtf(1.0 - v28);
  v73 = objc_msgSend_count(v61, v68, v69, v70, v71, v72);
  vDSP_vsmul(v67, 1, (const float *)buf, v53, 1, v73);
  v79 = objc_msgSend_count(v61, v74, v75, v76, v77, v78);
  vDSP_vsub(v53, 1, v60, 1, v53, 1, v79);
  __B = sqrtf(v28);
  v85 = objc_msgSend_count(v61, v80, v81, v82, v83, v84);
  vDSP_vsdiv(v53, 1, &__B, v53, 1, v85);
  v86 = sqrt(1.0 - v30);
  v87 = v61;
  v88 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v127 = 3221225472;
  v128 = sub_1BE711B44;
  v129 = &unk_1E77F40A0;
  *(float *)&v131 = v86;
  v89 = v87;
  v130 = v89;
  objc_msgSend_getMutableBytesWithHandler_(v89, v90, (uint64_t)buf, v91, v92, v93);

  v94 = v47;
  *(_QWORD *)buf = v88;
  v127 = 3221225472;
  v128 = sub_1BE711B44;
  v129 = &unk_1E77F40A0;
  LODWORD(v131) = sqrtf(v30);
  v95 = v94;
  v130 = v95;
  objc_msgSend_getMutableBytesWithHandler_(v95, v96, (uint64_t)buf, v97, v98, v99);

  v100 = v95;
  v101 = v89;
  v102 = objc_alloc(MEMORY[0x1E0C9E970]);
  objc_msgSend_shape(v100, v103, v104, v105, v106, v107);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  v114 = objc_msgSend_dataType(v100, v109, v110, v111, v112, v113);
  v117 = (void *)objc_msgSend_initWithShape_dataType_error_(v102, v115, (uint64_t)v108, v114, 0, v116);

  *(_QWORD *)buf = v88;
  v127 = 3221225472;
  v128 = sub_1BE711B84;
  v129 = &unk_1E77F4118;
  v118 = v100;
  v130 = v118;
  v119 = v101;
  v131 = v119;
  objc_msgSend_getMutableBytesWithHandler_(v117, v120, (uint64_t)buf, v121, v122, v123);

  return v117;
}

void sub_1BE7105E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1BE710668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE710684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1BE71069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE7106B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

float CoreHandwriting::synthesis::DDIMScheduler::getForwardCoefficients(CoreHandwriting::synthesis::DDIMScheduler *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *((_QWORD *)this + 11);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 12) - v4) >> 2))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v6 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v7 = (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 2;
      v9[0] = 67109376;
      v9[1] = a2;
      v10 = 2048;
      v11 = v7;
      _os_log_impl(&dword_1BE607000, v6, OS_LOG_TYPE_FAULT, "Got timestep beyond available alpha coefficients: t=%i vs size=%lu", (uint8_t *)v9, 0x12u);
    }

    v4 = *((_QWORD *)this + 11);
  }
  return sqrtf(*(float *)(v4 + 4 * v3));
}

void CoreHandwriting::synthesis::DPMSolverMultistepScheduler::setTimesteps(CoreHandwriting::synthesis::DPMSolverMultistepScheduler *this, int a2, int a3)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  void *v13;
  float *v14;
  float *v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  float v19;
  float *v20;
  void *v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  float v25;
  float v26;
  float *v27;
  void **v28;
  void *v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float *v36;
  uint64_t v37;
  float v38;
  float v39;
  unint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  float *v48;
  int64_t v49;
  unint64_t v50;
  float *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  float *v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  uint64_t v60;

  *((_DWORD *)this + 47) = a3;
  *((_DWORD *)this + 48) = a2;
  v60 = (uint64_t)this + 8;
  if (a2 >= 1)
  {
    v4 = a2;
    v5 = (a3 - 1) / (a2 + 1);
    v6 = v5;
    do
    {
      sub_1BE66E3D8(&v60, v6);
      v6 += v5;
      --v4;
    }
    while (v4);
  }
  v8 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  if (v8 != v7)
  {
    v9 = (_DWORD *)(v7 - 4);
    if ((unint64_t)v9 > v8)
    {
      v10 = v8 + 4;
      do
      {
        v11 = *(_DWORD *)(v10 - 4);
        *(_DWORD *)(v10 - 4) = *v9;
        *v9-- = v11;
        v12 = v10 >= (unint64_t)v9;
        v10 += 4;
      }
      while (!v12);
    }
  }
  v13 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 12) = v13;
  v15 = (float *)*((_QWORD *)this + 20);
  v14 = (float *)*((_QWORD *)this + 21);
  v16 = (char *)v14 - (char *)v15;
  v17 = v14 - v15;
  if (v17 > (uint64_t)(*((_QWORD *)this + 13) - (_QWORD)v13) >> 2)
  {
    if ((v16 & 0x8000000000000000) != 0)
      goto LABEL_60;
    v18 = (char *)operator new(v16);
    *((_QWORD *)this + 11) = v18;
    *((_QWORD *)this + 12) = v18;
    *((_QWORD *)this + 13) = &v18[4 * v17];
    if (v13)
    {
      operator delete(v13);
      v15 = (float *)*((_QWORD *)this + 20);
      v14 = (float *)*((_QWORD *)this + 21);
    }
  }
  v60 = (uint64_t)this + 88;
  if (v15 == v14)
  {
    v20 = v14;
  }
  else
  {
    do
    {
      v19 = *v15++;
      sub_1BE711E94(&v60, sqrtf(v19));
    }
    while (v15 != v14);
    v14 = (float *)*((_QWORD *)this + 20);
    v20 = (float *)*((_QWORD *)this + 21);
  }
  v21 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 15) = v21;
  v22 = (char *)v20 - (char *)v14;
  v23 = v20 - v14;
  if (v23 > (uint64_t)(*((_QWORD *)this + 16) - (_QWORD)v21) >> 2)
  {
    if ((v22 & 0x8000000000000000) != 0)
      goto LABEL_60;
    v24 = (char *)operator new(v22);
    *((_QWORD *)this + 14) = v24;
    *((_QWORD *)this + 15) = v24;
    *((_QWORD *)this + 16) = &v24[4 * v23];
    if (v21)
    {
      operator delete(v21);
      v14 = (float *)*((_QWORD *)this + 20);
      v20 = (float *)*((_QWORD *)this + 21);
    }
  }
  v60 = (uint64_t)this + 112;
  if (v14 == v20)
  {
    v27 = v20;
  }
  else
  {
    do
    {
      v25 = *v14++;
      v26 = sqrt(1.0 - v25);
      sub_1BE711E94(&v60, v26);
    }
    while (v14 != v20);
    v20 = (float *)*((_QWORD *)this + 20);
    v27 = (float *)*((_QWORD *)this + 21);
  }
  v28 = (void **)((char *)this + 136);
  v29 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 18) = v29;
  v30 = (char *)v27 - (char *)v20;
  v31 = v27 - v20;
  if (v31 <= (uint64_t)(*((_QWORD *)this + 19) - (_QWORD)v29) >> 2)
    goto LABEL_29;
  if ((v30 & 0x8000000000000000) != 0)
LABEL_60:
    sub_1BE61F930();
  v32 = (char *)operator new(v30);
  *((_QWORD *)this + 17) = v32;
  *((_QWORD *)this + 18) = v32;
  *((_QWORD *)this + 19) = &v32[4 * v31];
  if (v29)
    operator delete(v29);
LABEL_29:
  v33 = *((_QWORD *)this + 11);
  v34 = *((_QWORD *)this + 12);
  if (v34 != v33)
  {
    v35 = 0;
    v36 = (float *)*((_QWORD *)this + 18);
    while (1)
    {
      v38 = logf(*(float *)(v33 + 4 * v35));
      v39 = v38 - logf(*(float *)(*((_QWORD *)this + 14) + 4 * v35));
      v40 = *((_QWORD *)this + 19);
      if ((unint64_t)v36 >= v40)
        break;
      *v36 = v39;
      v37 = (uint64_t)(v36 + 1);
LABEL_32:
      *((_QWORD *)this + 18) = v37;
      ++v35;
      v33 = *((_QWORD *)this + 11);
      v36 = (float *)v37;
      if (v35 >= (v34 - v33) >> 2)
        return;
    }
    v41 = (float *)*v28;
    v42 = (char *)v36 - (_BYTE *)*v28;
    v43 = v42 >> 2;
    v44 = (v42 >> 2) + 1;
    if (v44 >> 62)
      goto LABEL_60;
    v45 = v40 - (_QWORD)v41;
    if (v45 >> 1 > v44)
      v44 = v45 >> 1;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
      v46 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (v46)
    {
      if (v46 >> 62)
        sub_1BE61F100();
      v47 = operator new(4 * v46);
      v48 = (float *)&v47[4 * v43];
      *v48 = v39;
      v37 = (uint64_t)(v48 + 1);
      v49 = (char *)v36 - (char *)v41;
      if (v36 == v41)
        goto LABEL_57;
    }
    else
    {
      v47 = 0;
      v48 = (float *)(4 * v43);
      *(float *)(4 * v43) = v39;
      v37 = 4 * v43 + 4;
      v49 = (char *)v36 - (char *)v41;
      if (v36 == v41)
        goto LABEL_57;
    }
    v50 = v49 - 4;
    if (v50 >= 0xBC)
    {
      v52 = ((char *)(v36 - 1) - (char *)v41) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v47[v42 - 4 - v52] > &v47[v42 - 4])
      {
        v51 = v36;
      }
      else if ((float *)((char *)v36 - v52 - 4) > v36 - 1)
      {
        v51 = v36;
      }
      else if ((unint64_t)((char *)v36 - v47 - v42) >= 0x20)
      {
        v53 = (v50 >> 2) + 1;
        v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
        v51 = &v36[v54 / 0xFFFFFFFFFFFFFFFCLL];
        v48 = (float *)((char *)v48 - v54);
        v55 = &v47[4 * v43 - 16];
        v56 = v36 - 4;
        v57 = v53 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v58 = *(_OWORD *)v56;
          *(v55 - 1) = *((_OWORD *)v56 - 1);
          *v55 = v58;
          v55 -= 2;
          v56 -= 8;
          v57 -= 8;
        }
        while (v57);
        if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_57;
      }
      else
      {
        v51 = v36;
      }
    }
    else
    {
      v51 = v36;
    }
    do
    {
      v59 = *((_DWORD *)v51-- - 1);
      *((_DWORD *)v48-- - 1) = v59;
    }
    while (v51 != v41);
LABEL_57:
    *((_QWORD *)this + 17) = v48;
    *((_QWORD *)this + 18) = v37;
    *((_QWORD *)this + 19) = &v47[4 * v46];
    if (v41)
    {
      operator delete(v41);
      v34 = *((_QWORD *)this + 12);
    }
    goto LABEL_32;
  }
}

void (***CoreHandwriting::synthesis::DPMSolverMultistepScheduler::DPMSolverMultistepScheduler(void (***this)(), CoreHandwriting::synthesis *a2, int a3))()
{
  _QWORD *v5;
  char *v6;
  float *v7;
  int64_t v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  float *v22;
  float v23;
  void (**v24)();
  void (**v25)();
  void (**v26)();
  void (**v27)();
  void (**v28)();
  void (**v29)();
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void (**v37)();
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  void (**v43)();
  void *v44[2];
  void *v45[4];
  void *v46[2];
  void *__p[4];
  __int128 v48;
  void (**v49)();
  uint64_t v50;
  int v51;
  float *v52;
  float *v53;
  void **v54;

  this[1] = 0;
  v5 = this + 1;
  this[2] = 0;
  this[3] = 0;
  this[4] = (void (**)())0x1E000003E8;
  *this = (void (**)())&off_1E77F0E58;
  *(_OWORD *)(this + 5) = 0u;
  v31 = this + 5;
  *(_OWORD *)(this + 11) = 0u;
  v32 = this + 8;
  v33 = this + 11;
  *(_OWORD *)(this + 17) = 0u;
  v35 = this + 17;
  *((_DWORD *)this + 46) = 1065353216;
  v6 = (char *)(this + 23);
  v34 = this + 14;
  v36 = this + 20;
  *(_OWORD *)(this + 7) = 0u;
  *(_OWORD *)(this + 9) = 0u;
  *(_OWORD *)(this + 13) = 0u;
  *(_OWORD *)(this + 15) = 0u;
  *(_OWORD *)(this + 19) = 0u;
  *(_OWORD *)(this + 21) = 0u;
  *(void (***)())((char *)this + 188) = (void (**)())0x1E000003E8;
  CoreHandwriting::synthesis::getCosineScheduleTrainedBetas(a2, &v52);
  v39 = 0;
  v40 = 0;
  v41 = 0x1E000003E8;
  v37 = (void (**)())&off_1E77F0E58;
  v38 = 0;
  v42[1] = 0;
  v43 = 0;
  v42[0] = 0;
  v7 = v52;
  v8 = (char *)v53 - (char *)v52;
  if (v53 == v52)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_1BE61F930();
    v9 = (float *)operator new((char *)v53 - (char *)v52);
    v42[0] = v9;
    v10 = &v9[v8 >> 2];
    v43 = (void (**)())v10;
    memcpy(v9, v7, v8);
    v42[1] = v10;
  }
  v48 = 0u;
  *(_OWORD *)v46 = 0u;
  memset(__p, 0, sizeof(__p));
  memset(v45, 0, sizeof(v45));
  *(_OWORD *)v44 = 0u;
  v49 = 0;
  v50 = 0x3E83F800000;
  v51 = a3;
  v11 = (char *)v10 - (char *)v9;
  if (v10 == v9)
  {
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
  }
  else
  {
    if (v11 < 0)
      sub_1BE61F930();
    v44[0] = operator new((char *)v10 - (char *)v9);
    v44[1] = v44[0];
    v45[0] = (char *)v44[0] + 4 * (v11 >> 2);
    v54 = v44;
    do
      sub_1BE711E94((uint64_t *)&v54, 1.0 - *v9++);
    while (v9 != v10);
    v13 = (float *)v44[0];
    v12 = (float *)v44[1];
    v15 = *((_QWORD *)&v48 + 1);
    v14 = v48;
  }
  v16 = v12 - v13;
  v17 = (v15 - v14) >> 2;
  if (v16 <= v17)
  {
    if (v16 < v17)
      *((_QWORD *)&v48 + 1) = v14 + 4 * v16;
  }
  else
  {
    sub_1BE712014((uint64_t)&v48, v16 - v17);
    v13 = (float *)v44[0];
    v12 = (float *)v44[1];
  }
  if (v13 != v12)
  {
    v18 = v48;
    v20 = *v13;
    v19 = v13 + 1;
    v21 = v20;
    *(float *)v48 = v20;
    if (v19 != v12)
    {
      v22 = (float *)(v18 + 4);
      do
      {
        v23 = *v19++;
        v21 = v21 * v23;
        *v22++ = v21;
      }
      while (v19 != v12);
    }
  }
  CoreHandwriting::synthesis::DPMSolverMultistepScheduler::setTimesteps((CoreHandwriting::synthesis::DPMSolverMultistepScheduler *)&v37, a3, ((unint64_t)((char *)v53 - (char *)v52) >> 2) - 1);
  if (&v37 != this)
    sub_1BE66E294(v5, (char *)v38, v39, (v39 - (_BYTE *)v38) >> 2);
  this[4] = (void (**)())v41;
  v24 = this[5];
  if (v24)
  {
    this[6] = v24;
    operator delete(v24);
    *v31 = 0;
    v31[1] = 0;
    v31[2] = 0;
  }
  *(_OWORD *)(this + 5) = *(_OWORD *)v42;
  this[7] = v43;
  v42[1] = 0;
  v43 = 0;
  v42[0] = 0;
  v25 = this[8];
  if (v25)
  {
    this[9] = v25;
    operator delete(v25);
    *v32 = 0;
    v32[1] = 0;
    v32[2] = 0;
  }
  *((_OWORD *)this + 4) = *(_OWORD *)v44;
  this[10] = (void (**)())v45[0];
  v44[1] = 0;
  v45[0] = 0;
  v44[0] = 0;
  v26 = this[11];
  if (v26)
  {
    this[12] = v26;
    operator delete(v26);
    *v33 = 0;
    v33[1] = 0;
    v33[2] = 0;
  }
  *(_OWORD *)(this + 11) = *(_OWORD *)&v45[1];
  this[13] = (void (**)())v45[3];
  memset(&v45[1], 0, 24);
  v27 = this[14];
  if (v27)
  {
    this[15] = v27;
    operator delete(v27);
    *v34 = 0;
    v34[1] = 0;
    v34[2] = 0;
  }
  *((_OWORD *)this + 7) = *(_OWORD *)v46;
  this[16] = (void (**)())__p[0];
  v46[1] = 0;
  __p[0] = 0;
  v46[0] = 0;
  v28 = this[17];
  if (v28)
  {
    this[18] = v28;
    operator delete(v28);
    *v35 = 0;
    v35[1] = 0;
    v35[2] = 0;
  }
  *(_OWORD *)(this + 17) = *(_OWORD *)&__p[1];
  this[19] = (void (**)())__p[3];
  memset(&__p[1], 0, 24);
  v29 = this[20];
  if (v29)
  {
    this[21] = v29;
    operator delete(v29);
    *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
    v29 = (void (**)())__p[1];
  }
  *((_OWORD *)this + 10) = v48;
  this[22] = v49;
  v49 = 0;
  v48 = 0uLL;
  *(_QWORD *)v6 = v50;
  *((_DWORD *)v6 + 2) = v51;
  v37 = (void (**)())&off_1E77F0E58;
  if (v29)
  {
    __p[2] = v29;
    operator delete(v29);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  if (v45[1])
  {
    v45[2] = v45[1];
    operator delete(v45[1]);
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  v37 = off_1E77F0DF8;
  if (v38)
  {
    v39 = (char *)v38;
    operator delete(v38);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  return this;
}

void sub_1BE711048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  _QWORD *v36;
  uint64_t v37;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  sub_1BE711DEC(&a15);
  v39 = *(void **)(v37 - 136);
  if (v39)
  {
    *(_QWORD *)(v37 - 128) = v39;
    operator delete(v39);
    v40 = *a14;
    if (!*a14)
    {
LABEL_3:
      v41 = *a13;
      if (!*a13)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v40 = *a14;
    if (!*a14)
      goto LABEL_3;
  }
  v36[21] = v40;
  operator delete(v40);
  v41 = *a13;
  if (!*a13)
  {
LABEL_4:
    v42 = *a12;
    if (!*a12)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v36[18] = v41;
  operator delete(v41);
  v42 = *a12;
  if (!*a12)
  {
LABEL_5:
    v43 = *a11;
    if (!*a11)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v36[15] = v42;
  operator delete(v42);
  v43 = *a11;
  if (!*a11)
  {
LABEL_6:
    v44 = *a10;
    if (!*a10)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v36[12] = v43;
  operator delete(v43);
  v44 = *a10;
  if (!*a10)
  {
LABEL_7:
    v45 = *a9;
    if (!*a9)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v36[9] = v44;
  operator delete(v44);
  v45 = *a9;
  if (!*a9)
  {
LABEL_8:
    *v36 = off_1E77F0DF8;
    v46 = (void *)v36[1];
    if (!v46)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v36[6] = v45;
  operator delete(v45);
  *v36 = off_1E77F0DF8;
  v46 = (void *)v36[1];
  if (!v46)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_17:
  v36[2] = v46;
  operator delete(v46);
  _Unwind_Resume(a1);
}

id sub_1BE711264(_QWORD *a1, id **a2, int a3, void *a4)
{
  id v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  id *v42;
  id *v43;
  int v44;
  _BOOL4 v46;
  id v48;
  id v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  double v58;
  id v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  id v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  double v102;
  float v103;
  uint64_t v104;
  id *v105;
  id *v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  float v112;
  float v113;
  float v114;
  uint64_t v115;
  float v116;
  float v117;
  id v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  void *v133;
  id v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  float v167;
  id v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  id v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  unint64_t v212;
  double v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t i;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  double v225;
  id v227;
  uint8_t buf[4];
  uint64_t v229;
  uint64_t v230;

  v230 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = (_DWORD *)a1[1];
  v9 = (_DWORD *)a1[2];
  v10 = v8;
  if (v8 != v9)
  {
    while (*v10 != a3)
    {
      if (++v10 == v9)
      {
        v10 = (_DWORD *)a1[2];
        break;
      }
    }
  }
  v11 = v10 - v8;
  if (v11 >= v9 - v8 - 1)
    v12 = 0;
  else
    v12 = v8[v11 + 1];
  v13 = 4 * a3;
  v14 = *(float *)(a1[11] + v13);
  v15 = *(float *)(a1[14] + v13);
  v16 = objc_retainAutorelease(*(a2[1] - 1));
  v22 = objc_msgSend_dataPointer(v16, v17, v18, v19, v20, v21);
  v23 = objc_retainAutorelease(v7);
  v34 = objc_msgSend_dataPointer(v23, v24, v25, v26, v27, v28);
  v35 = 0;
  v36 = a3;
  v37 = v14;
  v38 = v15;
  while (v35 < objc_msgSend_count(*(a2[1] - 1), v29, v30, v31, v32, v33))
  {
    v39 = (*(float *)(v34 + 4 * v35) - *(float *)(v22 + 4 * v35) * v38) / v37;
    *(float *)(v22 + 4 * v35++) = v39;
  }
  v41 = a1[1];
  v40 = a1[2];
  v43 = *a2;
  v42 = a2[1];
  v44 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  v46 = v11 >= ((v40 - v41) >> 2) - 2 && (unint64_t)(v40 - v41) < 0x3C;
  if (v44 <= (unint64_t)(v42 - v43) && !v46)
  {
    v104 = *(int *)(a1[1] + 4 * v11 - 4);
    v227 = v23;
    v106 = *a2;
    v105 = a2[1];
    if ((*(int (**)(_QWORD *))(*a1 + 72))(a1) != v105 - v106)
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v107 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v107, OS_LOG_TYPE_FAULT))
      {
        v108 = a2[1] - *a2;
        *(_DWORD *)buf = 134217984;
        v229 = v108;
        _os_log_impl(&dword_1BE607000, v107, OS_LOG_TYPE_FAULT, "Expected two model outputs, but got %lu", buf, 0xCu);
      }

    }
    v109 = a1[17];
    v110 = 4 * v12;
    v111 = *(float *)(v109 + v110);
    v112 = *(float *)(v109 + 4 * v36);
    v113 = *(float *)(v109 + 4 * v104);
    v114 = *(float *)(a1[11] + v110);
    v115 = a1[14];
    v116 = *(float *)(v115 + v110);
    v117 = *(float *)(v115 + 4 * v36);
    v118 = objc_alloc(MEMORY[0x1E0C9E970]);
    objc_msgSend_shape((*a2)[1], v119, v120, v121, v122, v123);
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v130 = objc_msgSend_dataType((*a2)[1], v125, v126, v127, v128, v129);
    v133 = (void *)objc_msgSend_initWithShape_dataType_error_(v118, v131, (uint64_t)v124, v130, 0, v132);

    v134 = objc_retainAutorelease(v133);
    v140 = objc_msgSend_dataPointer(v134, v135, v136, v137, v138, v139);
    v141 = objc_retainAutorelease((*a2)[1]);
    v147 = objc_msgSend_dataPointer(v141, v142, v143, v144, v145, v146);
    v148 = objc_retainAutorelease(**a2);
    v159 = objc_msgSend_dataPointer(v148, v149, v150, v151, v152, v153);
    v160 = 0;
    v161 = v111;
    v162 = v112;
    v163 = v114;
    v164 = v116;
    v165 = v161 - v162;
    v166 = 1.0 / ((v162 - v113) / (v161 - v162));
    while (v160 < objc_msgSend_count((*a2)[1], v154, v155, v156, v157, v158))
    {
      v167 = -v166 * *(float *)(v159 + 4 * v160) + *(float *)(v147 + 4 * v160) * v166;
      *(float *)(v140 + 4 * v160++) = v167;
    }
    v168 = objc_alloc(MEMORY[0x1E0C9E970]);
    objc_msgSend_shape((*a2)[1], v169, v170, v171, v172, v173);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    v180 = objc_msgSend_dataType((*a2)[1], v175, v176, v177, v178, v179);
    v183 = (void *)objc_msgSend_initWithShape_dataType_error_(v168, v181, (uint64_t)v174, v180, 0, v182);

    v75 = objc_retainAutorelease(v183);
    v189 = objc_msgSend_dataPointer(v75, v184, v185, v186, v187, v188);
    v190 = objc_retainAutorelease((*a2)[1]);
    v196 = objc_msgSend_dataPointer(v190, v191, v192, v193, v194, v195);
    v197 = objc_retainAutorelease(v134);
    v203 = objc_msgSend_dataPointer(v197, v198, v199, v200, v201, v202);
    v204 = objc_retainAutorelease(v227);
    v210 = objc_msgSend_dataPointer(v204, v205, v206, v207, v208, v209);
    v211 = v164 / v117;
    v212 = 0;
    v213 = -(v163 * (exp(-v165) + -1.0));
    for (i = objc_msgSend_count((*a2)[1], v214, v215, v216, v217, v218, 0.5);
          v212 < i;
          i = objc_msgSend_count((*a2)[1], v220, v221, v222, v223, v224, v225))
    {
      v225 = v213 * *(float *)(v196 + 4 * v212)
           + *(float *)(v210 + 4 * v212) * v211
           + *(float *)(v203 + 4 * v212) * (v213 * 0.5);
      *(float *)&v225 = v225;
      *(_DWORD *)(v189 + 4 * v212++) = LODWORD(v225);
    }

  }
  else
  {
    v48 = *(a2[1] - 1);
    v49 = v23;
    v50 = a1[17];
    v51 = *(float *)(v50 + 4 * v36);
    v52 = 4 * v12;
    v53 = *(float *)(v50 + v52);
    v54 = *(float *)(a1[11] + v52);
    v55 = a1[14];
    v56 = *(float *)(v55 + 4 * v36);
    v57 = *(float *)(v55 + v52);
    v58 = exp(v51 - v53);
    v59 = objc_alloc(MEMORY[0x1E0C9E970]);
    objc_msgSend_shape(v48, v60, v61, v62, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = objc_msgSend_dataType(v48, v66, v67, v68, v69, v70);
    v74 = (void *)objc_msgSend_initWithShape_dataType_error_(v59, v72, (uint64_t)v65, v71, 0, v73);

    v75 = objc_retainAutorelease(v74);
    v81 = objc_msgSend_dataPointer(v75, v76, v77, v78, v79, v80);
    v82 = objc_retainAutorelease(v49);
    v88 = objc_msgSend_dataPointer(v82, v83, v84, v85, v86, v87);
    v89 = objc_retainAutorelease(v48);
    v100 = objc_msgSend_dataPointer(v89, v90, v91, v92, v93, v94);
    v101 = 0;
    v102 = -(v54 * (v58 + -1.0));
    while (v101 < objc_msgSend_count(v89, v95, v96, v97, v98, v99))
    {
      v103 = v102 * *(float *)(v100 + 4 * v101) + v57 / v56 * *(float *)(v88 + 4 * v101);
      *(float *)(v81 + 4 * v101++) = v103;
    }

  }
  return v75;
}

void sub_1BE71186C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

float CoreHandwriting::synthesis::DPMSolverMultistepScheduler::getForwardCoefficients(CoreHandwriting::synthesis::DPMSolverMultistepScheduler *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *((_QWORD *)this + 20);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 21) - v4) >> 2))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v6 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v7 = (uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 2;
      v9[0] = 67109376;
      v9[1] = a2;
      v10 = 2048;
      v11 = v7;
      _os_log_impl(&dword_1BE607000, v6, OS_LOG_TYPE_FAULT, "Got timestep beyond available alpha coefficients: t=%i vs size=%lu", (uint8_t *)v9, 0x12u);
    }

    v4 = *((_QWORD *)this + 20);
  }
  return sqrtf(*(float *)(v4 + 4 * v3));
}

void sub_1BE711A88(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E77F0D98;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  *a1 = off_1E77F0DF8;
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE711B10()
{
  return 1;
}

void sub_1BE711B18(_QWORD *a1)
{
  sub_1BE711DEC(a1);
  JUMPOUT(0x1C3B812ECLL);
}

uint64_t sub_1BE711B3C()
{
  return 2;
}

void sub_1BE711B44(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  vDSP_Length v8;

  v8 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  vDSP_vsmul((const float *)a2, 1, (const float *)(a1 + 40), (float *)a2, 1, v8);
}

void sub_1BE711B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1BE711C34;
  v11[3] = &unk_1E77F40F0;
  v6 = *(void **)(a1 + 32);
  v12 = *(id *)(a1 + 40);
  v14 = a3;
  v15 = a2;
  v13 = *(id *)(a1 + 32);
  objc_msgSend_getBytesWithHandler_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE711C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE711C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1BE711CBC;
  v9[3] = &unk_1E77F40C8;
  v3 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = a3;
  v13 = a2;
  v14 = v3;
  v4 = *(void **)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  objc_msgSend_getBytesWithHandler_(v4, v5, (uint64_t)v9, v6, v7, v8);

}

void sub_1BE711CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE711CBC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const float *v14;
  float *v15;
  vDSP_Length v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 != a3 || v8 != *(_QWORD *)(a1 + 48))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v11 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      v12 = *(_QWORD *)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 48);
      v17 = 134218496;
      v18 = v12;
      v19 = 2048;
      v20 = v13;
      v21 = 2048;
      v22 = a3;
      _os_log_impl(&dword_1BE607000, v11, OS_LOG_TYPE_FAULT, "Mismatched multiarray sizes: out=%ld lhs=%ld rhs=%ld", (uint8_t *)&v17, 0x20u);
    }

  }
  v14 = *(const float **)(a1 + 56);
  v15 = *(float **)(a1 + 64);
  v16 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4, a5, a6);
  vDSP_vadd(v14, 1, (const float *)a2, 1, v15, 1, v16);
}

_QWORD *sub_1BE711DEC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_1E77F0E58;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[11];
  if (v5)
  {
    a1[12] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[8];
  if (v6)
  {
    a1[9] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[5];
  if (v7)
  {
    a1[6] = v7;
    operator delete(v7);
  }
  *a1 = off_1E77F0DF8;
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t *sub_1BE711E94(uint64_t *a1, float a2)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  float *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  float *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v4 = *a1;
  v6 = *(float **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *v6 = a2;
    v8 = (uint64_t)(v6 + 1);
    goto LABEL_22;
  }
  v9 = *(float **)v4;
  v10 = (uint64_t)v6 - *(_QWORD *)v4;
  v11 = v10 >> 2;
  v12 = (v10 >> 2) + 1;
  if (v12 >> 62)
    sub_1BE61F930();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 1 > v12)
    v12 = v13 >> 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v14 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 62)
      sub_1BE61F100();
    v15 = operator new(4 * v14);
    v16 = (float *)&v15[4 * v11];
    v17 = &v15[4 * v14];
    *v16 = a2;
    v8 = (uint64_t)(v16 + 1);
    v18 = (char *)v6 - (char *)v9;
    if (v6 == v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (float *)(4 * v11);
  v17 = 0;
  *(float *)(4 * v11) = a2;
  v8 = 4 * v11 + 4;
  v18 = (char *)v6 - (char *)v9;
  if (v6 != v9)
  {
LABEL_14:
    v19 = v18 - 4;
    if (v19 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)((char *)v6 - v15 - v10) < 0x20)
      goto LABEL_27;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v7 = &v6[v21 / 0xFFFFFFFFFFFFFFFCLL];
    v16 = (float *)((char *)v16 - v21);
    v22 = &v15[4 * v11 - 16];
    v23 = v6 - 4;
    v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 8;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v26 = *((_DWORD *)v7-- - 1);
        *((_DWORD *)v16-- - 1) = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(_QWORD *)v4 = v16;
  *(_QWORD *)(v4 + 8) = v8;
  *(_QWORD *)(v4 + 16) = v17;
  if (v9)
    operator delete(v9);
LABEL_22:
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void sub_1BE712014(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_1BE61F930();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_1BE61F100();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_1BE7125B8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a2;
  v5 = a3;
  v11 = objc_msgSend_ancestorIdentifier(v4, v6, v7, v8, v9, v10);
  if (v11 <= objc_msgSend_ancestorIdentifier(v5, v12, v13, v14, v15, v16))
  {
    v23 = objc_msgSend_ancestorIdentifier(v4, v17, v18, v19, v20, v21);
    if (v23 >= objc_msgSend_ancestorIdentifier(v5, v24, v25, v26, v27, v28))
      v22 = 0;
    else
      v22 = -1;
  }
  else
  {
    v22 = 1;
  }

  return v22;
}

void sub_1BE712638(uint64_t a1, CGFloat a2, CGFloat a3)
{
  _BOOL4 IsEmpty;
  CGPath *v7;

  IsEmpty = CGPathIsEmpty(*(CGPathRef *)(a1 + 32));
  v7 = *(CGPath **)(a1 + 32);
  if (IsEmpty)
    CGPathMoveToPoint(v7, 0, a2, a3);
  else
    CGPathAddLineToPoint(v7, 0, a2, a3);
}

void sub_1BE71378C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7137A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7137BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7137D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7137EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71381C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71384C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71387C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7138AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7138C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7138DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7138F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71393C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7139B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7139CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7139E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE7139FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

void sub_1BE713A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1BE713A60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE713A70(uint64_t a1)
{

}

void sub_1BE713A78(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;

  v3 = a2;
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v12 = (char *)v3;
  if (!v8)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v3, v4, v5, v6, v7);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    v3 = v12;
    v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  objc_msgSend_addObject_(v8, v3, (uint64_t)v3, v5, v6, v7);

}

BOOL sub_1BE713AF8(uint64_t a1, void *a2, uint64_t *a3, void *a4, uint64_t a5, void *a6, id *a7)
{
  id v11;
  id v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  int v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  _BOOL4 v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char isTopOriginal;
  char v96;
  void *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  char v109;
  char v110;
  void *v111;
  const char *v112;
  void *v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  void *v123;
  const char *v124;
  unint64_t v125;
  _BOOL4 v126;
  _BOOL4 v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id *v134;
  _BOOL4 v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  int64_t v147;
  void *v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  double *v165;
  unint64_t v166;
  id *v167;
  void *v168;
  uint64_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  __int128 v173;
  int64x2_t v174;
  unint64_t v175;
  double *v176;
  int64x2_t v177;
  double *v178;
  double *v179;
  char *v180;
  uint64_t v181;
  id v182;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  uint64_t v188;
  uint64_t *v189;
  void *v190;
  id v191;
  id v192;
  uint64_t *v193;
  id *v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  _QWORD v198[4];
  id v199;
  __int128 *v200;
  __int128 v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  float64x2x3_t v205;

  v194 = a7;
  v195 = a1;
  v204 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a4;
  v13 = a6;
  v201 = *(_OWORD *)a3;
  v193 = a3;
  v202 = a3[2];
  objc_msgSend_tokenAtLocation_(v11, v14, (uint64_t)&v201, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&v201 = 0;
  *((_QWORD *)&v201 + 1) = &v201;
  v202 = 0x2020000000;
  v203 = 1;
  v198[0] = MEMORY[0x1E0C809B0];
  v198[1] = 3221225472;
  v198[2] = sub_1BE71443C;
  v198[3] = &unk_1E77F4188;
  v19 = v18;
  v199 = v19;
  v200 = &v201;
  objc_msgSend_enumerateRangesUsingBlock_(v13, v20, (uint64_t)v198, v21, v22, v23);
  v29 = *(unsigned __int8 *)(*((_QWORD *)&v201 + 1) + 24);
  v192 = v19;
  if (v29)
  {
    v30 = *v193;
    v31 = v193[2];
    v32 = v19;
    v33 = v11;
    v39 = v12;
    if (v30 > 0 || v31 >= 1)
    {
      objc_msgSend_precedingSeparatorForToken_(v33, v34, (uint64_t)v32, v36, v37, v38);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend_length(v40, v47, v48, v49, v50, v51);
    }
    else
    {
      v40 = 0;
      v41 = objc_msgSend_length(0, v34, v35, v36, v37, v38);
    }
    if (v41)
    {
      v52 = objc_msgSend_length(v40, v42, v43, v44, v45, v46);
      if (objc_msgSend_length(v39, v53, v54, v55, v56, v57) >= (unint64_t)(v52 + a5))
      {
        v66 = objc_msgSend_rangeOfString_options_range_(v39, v58, (uint64_t)v40, 0, a5, v52) == a5
           && v61 == (const char *)v52;
        v60 = v66;
        if (v66)
          v59 = objc_msgSend_length(v40, v61, v62, v63, v64, v65);
        else
          v59 = 0;
        if (!a5)
          v60 = 1;
      }
      else
      {
        v59 = 0;
        v60 = 0;
      }
    }
    else
    {
      v59 = 0;
      v60 = 1;
    }

    *(_BYTE *)(*((_QWORD *)&v201 + 1) + 24) = v60;
    a5 += v59;
    if (v60)
    {
      v191 = v32;
      v72 = v39;
      if (a5 <= 0)
      {
        v74 = v195;
        v73 = *(_BYTE *)(v195 + 73) != 0;
      }
      else
      {
        v73 = 1;
        v74 = v195;
      }
      v76 = *(unsigned __int8 *)(v74 + 72);
      v77 = 256;
      if (!*(_BYTE *)(v74 + 72))
        v77 = 257;
      v188 = v77;
      objc_msgSend_string(v191, v67, v68, v69, v70, v71);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      v189 = (uint64_t *)objc_msgSend_length(v78, v79, v80, v81, v82, v83);
      if (objc_msgSend_length(v72, v84, v85, v86, v87, v88) == a5)
      {
        v94 = 0;
        v190 = v72;
        if (v189)
        {
LABEL_30:
          if (v76)
          {
            isTopOriginal = objc_msgSend_isTopOriginal(v191, v89, v90, v91, v92, v93);
            if (v94)
              v96 = isTopOriginal;
            else
              v96 = 0;
            if ((v96 & 1) == 0)
              goto LABEL_35;
          }
          else if (!v94)
          {
LABEL_35:
            v97 = v78;
LABEL_36:
            v75 = 0;
            v98 = 0;
LABEL_73:

            a5 += v98;
            goto LABEL_74;
          }
          if (v73)
          {
            if ((unint64_t)v189 >= v94)
            {
              objc_msgSend_substringFromIndex_(v72, v89, a5, v91, v92, (uint64_t)v189);
              v123 = (void *)objc_claimAutoreleasedReturnValue();
              v99 = objc_msgSend_rangeOfString_options_range_(v78, v124, (uint64_t)v123, v188, 0, v94);
              v101 = v125;

              v102 = 0;
            }
            else
            {
              v99 = objc_msgSend_rangeOfString_options_range_(v72, v89, (uint64_t)v78, v188, a5, (uint64_t)v189);
              v101 = v100;
              v102 = a5;
              v94 = (unint64_t)v189;
            }
            v126 = v99 == v102;
            v127 = v101 == v94;
            v110 = v126 && v127;
            if (v126 && v127)
              v94 = v101;
            else
              v94 = 0;
          }
          else if ((unint64_t)v189 >= v94
                 && ((objc_msgSend_substringFromIndex_(v190, v89, a5, v91, v92, v93),
                      v103 = (void *)objc_claimAutoreleasedReturnValue(),
                      objc_msgSend_rangeOfString_options_(v78, v104, (uint64_t)v103, v188, v105, v106) != 0x7FFFFFFFFFFFFFFFLL)
                   ? (v108 = v107 == v94)
                   : (v108 = 0),
                     !v108 ? (v109 = 0) : (v109 = 1),
                     v103,
                     (v109 & 1) != 0))
          {
            v110 = 1;
          }
          else
          {
            v111 = v190;
            objc_msgSend_substringWithRange_(v190, v89, a5, 1, v92, v93);
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            if ((unint64_t)v189 >= v94)
              v114 = objc_msgSend_rangeOfString_options_range_(v78, v112, (uint64_t)v113, v188, (uint64_t)v189 - v94, v94);
            else
              v114 = objc_msgSend_rangeOfString_options_range_(v78, v112, (uint64_t)v113, v188, 0, (uint64_t)v189);
            v118 = v114;
            v187 = v113;
            v94 = 0;
            v110 = 0;
            if (v114 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v119 = (uint64_t)v189 - v114;
              if (v189 != (uint64_t *)v114)
              {
                while (1)
                {
                  objc_msgSend_substringWithRange_(v78, v115, v118, v119, v116, v117);
                  v120 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend_rangeOfString_options_range_(v111, v121, (uint64_t)v120, v188, a5, v119) == a5
                    && v119 == v122)
                  {
                    break;
                  }

                  ++v118;
                  --v119;
                  v111 = v190;
                  if (!v119)
                  {
                    v110 = 0;
                    v94 = 0;
                    goto LABEL_66;
                  }
                }

                v110 = 1;
                v94 = v119;
              }
            }
LABEL_66:

          }
          v97 = v78;
          if (*(_BYTE *)(v195 + 73))
          {
            v98 = 0;
            v75 = 0;
            if (!v110 || (uint64_t *)v94 != v189)
              goto LABEL_73;
          }
          else if (!v110)
          {
            goto LABEL_36;
          }
LABEL_72:
          v75 = 1;
          v98 = v94;
          goto LABEL_73;
        }
      }
      else
      {
        v94 = objc_msgSend_length(v72, v89, v90, v91, v92, v93) - a5;
        v190 = v72;
        if (v189)
          goto LABEL_30;
      }
      v97 = v78;
      v94 = 0;
      goto LABEL_72;
    }
  }
  v75 = 0;
LABEL_74:
  v128 = objc_msgSend_length(v12, v24, v25, v26, v27, v28);
  v134 = v194;
  v135 = a5 == v128;
  if (a5 != v128 && ((v75 ^ 1) & 1) == 0)
  {
    v136 = objc_msgSend_tokenColumnCount(v11, v129, v130, v131, v132, v133);
    v137 = *v193;
    objc_msgSend_tokenRowsAtColumnIndex_(v11, v138, *v193, v139, v140, v141);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    v147 = v137 + 1;
    if (v147 >= v136)
    {
      v148 = 0;
    }
    else
    {
      objc_msgSend_tokenRowsAtColumnIndex_(v11, v142, v147, v143, v144, v145);
      v148 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v149 = v193[2];
    objc_msgSend_objectAtIndexedSubscript_(v146, v142, v193[1], v143, v144, v145);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v149) = v149 == objc_msgSend_count(v150, v151, v152, v153, v154, v155) - 1;

    v191 = v148;
    if (!(_DWORD)v149)
    {
      LODWORD(v190) = v75;
      v168 = v146;
      v189 = &v186;
      MEMORY[0x1E0C80A78](v156);
      v165 = (double *)&v184;
      v167 = v194;
      v169 = v193[2] + 1;
      v184 = *(_OWORD *)v193;
      v185 = v169;
      v163 = 1;
      goto LABEL_91;
    }
    v162 = objc_msgSend_count(v148, v157, v158, v159, v160, v161);
    v163 = v162;
    if (v162 < 1)
    {
      v135 = 0;
LABEL_95:

      v134 = v194;
      goto LABEL_96;
    }
    v189 = &v186;
    MEMORY[0x1E0C80A78](v162);
    v165 = (double *)((char *)&v186 - ((v164 + 15) & 0xFFFFFFFFFFFFFFF0));
    LODWORD(v190) = v75;
    if (v163 >= 4)
    {
      v170 = vdupq_n_s64(v147);
      v166 = v163 & 0xFFFFFFFFFFFFFFFCLL;
      v171 = (int64x2_t)xmmword_1BE8D5080;
      v172 = vdupq_n_s64(2uLL);
      v173 = 0uLL;
      v174 = vdupq_n_s64(4uLL);
      v175 = v163 & 0xFFFFFFFFFFFFFFFCLL;
      v176 = v165;
      v167 = v194;
      do
      {
        v177 = v171;
        v178 = v176 + 12;
        vst3q_f64(v176, *(float64x2x3_t *)v170.i8);
        v179 = v176 + 6;
        v205.val[1] = (float64x2_t)vaddq_s64(v171, v172);
        v205.val[0] = (float64x2_t)v170;
        v205.val[2] = 0uLL;
        vst3q_f64(v179, v205);
        v171 = vaddq_s64(v171, v174);
        v176 = v178;
        v175 -= 4;
      }
      while (v175);
      if (v163 == v166)
        goto LABEL_90;
    }
    else
    {
      v166 = 0;
      v167 = v194;
    }
    v180 = (char *)&v165[3 * v166 + 2];
    do
    {
      *((_QWORD *)v180 - 2) = v147;
      *((_QWORD *)v180 - 1) = v166;
      *(_QWORD *)v180 = 0;
      v180 += 24;
      ++v166;
    }
    while (v163 != v166);
LABEL_90:
    v168 = v146;
LABEL_91:
    v181 = 0;
    v135 = 1;
    do
    {
      v196 = *(_OWORD *)v165;
      v197 = *((_QWORD *)v165 + 2);
      if ((sub_1BE713AF8(v195, v11, &v196, v12, a5, v13, v167) & 1) != 0)
        break;
      v135 = ++v181 < (uint64_t)v163;
      v165 += 3;
    }
    while (v163 != v181);
    v146 = v168;
    v75 = (int)v190;
    goto LABEL_95;
  }
LABEL_96:
  if ((v75 & v135 & (v134 != 0)) == 1)
  {
    v182 = *v134;
    if (!*v134)
    {
      objc_msgSend_array(MEMORY[0x1E0C99DE8], v129, v130, v131, v132, v133);
      v182 = (id)objc_claimAutoreleasedReturnValue();
      *v194 = v182;
    }
    objc_msgSend_addObject_(v182, v129, (uint64_t)v192, v131, v132, v133);
  }

  _Block_object_dispose(&v201, 8);
  return v135;
}

void sub_1BE714330(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE714348(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE714360(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE714378(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE714390(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE7143A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE7143C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE7143D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE7143F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE714408(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE714420(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE71443C(uint64_t a1, const char *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = a3;
  objc_msgSend_strokeIndexes(*(void **)(a1 + 32), a2, a3, (uint64_t)a4, a5, a6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v7) = objc_msgSend_intersectsIndexesInRange_(v10, v11, (uint64_t)a2, v7, v12, v13);

  if ((_DWORD)v7)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
}

uint64_t sub_1BE714548(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t result;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = *(_QWORD *)(a1 + 40);
  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
  if (result != v7)
  {
    result = objc_msgSend_isEqualToString_((void *)result, a2, v7, a4, a5, a6);
    if ((result & 1) == 0)
    {
      v14 = objc_msgSend_copy(*(void **)(a1 + 40), v9, v10, v11, v12, v13);
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(void **)(v15 + 88);
      *(_QWORD *)(v15 + 88) = v14;

      return objc_msgSend_q_setNeedsQueryResultUpdating(*(void **)(a1 + 32), v17, v18, v19, v20, v21);
    }
  }
  return result;
}

void sub_1BE714674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71468C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 88));
}

void sub_1BE714770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE714788(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 80));
}

id sub_1BE714E78(id a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  objc_super v44;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  if (a1)
  {
    v44.receiver = a1;
    v44.super_class = (Class)CHRemoteInventoryRequest;
    a1 = objc_msgSendSuper2(&v44, sel_init);
    if (a1)
    {
      v20 = objc_msgSend_copy(v11, v15, v16, v17, v18, v19);
      v21 = (void *)*((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = v20;

      v27 = objc_msgSend_copy(v12, v22, v23, v24, v25, v26);
      v28 = (void *)*((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v27;

      v34 = objc_msgSend_copy(v13, v29, v30, v31, v32, v33);
      v35 = (void *)*((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 4) = v34;

      v41 = objc_msgSend_copy(v14, v36, v37, v38, v39, v40);
      v42 = (void *)*((_QWORD *)a1 + 5);
      *((_QWORD *)a1 + 5) = v41;

      *((_BYTE *)a1 + 8) = a6;
    }
  }

  return a1;
}

void CoreHandwriting::drawingToInk(CoreHandwriting *this@<X0>, CHDrawing *a2@<X1>, uint64_t *a3@<X8>)
{
  CoreHandwriting *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = this;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  v7 = *(_OWORD *)&a2->super.isa;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = v7;
  a3[8] = 0;
  *((_BYTE *)a3 + 72) = 0;
  v23[0] = &off_1E77F1390;
  v24 = v23;
  sub_1BE715A4C(v6, (uint64_t)v23, (uint64_t)&v21);
  v10 = *a3;
  if (*a3)
  {
    v11 = a3[1];
    v12 = (void *)*a3;
    if (v11 != v10)
    {
      v13 = a3[1];
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = (void *)*a3;
    }
    a3[1] = v10;
    operator delete(v12);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  v16 = v21;
  *a3 = v21;
  v17 = v22;
  *(_OWORD *)(a3 + 1) = v22;
  v22 = 0uLL;
  v21 = 0;
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
  }
  else
  {
    if (!v24)
    {
      v20 = v17;
      goto LABEL_15;
    }
    v19 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v18 + 8 * v19))(v18, v8, v9);
  v16 = *a3;
  v20 = a3[1];
LABEL_15:
  sub_1BE6837E8((uint64_t)(a3 + 3), 0xAAAAAAAAAAAAAAABLL * ((v20 - v16) >> 3), 0);

}

void sub_1BE7159F8(_Unwind_Exception *a1)
{
  void *v1;
  void **v2;

  sub_1BE6FA2E4(v2);

  _Unwind_Resume(a1);
}

void sub_1BE715A4C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t i;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  void *v24;
  _BYTE *v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _OWORD *v41;
  __int128 v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  id v58;
  void *__p[2];
  __int128 v60;
  double v61[2];

  v57 = a2;
  v4 = a1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v58 = v4;
  v10 = objc_msgSend_strokeCount(v4, v5, v6, v7, v8, v9);
  sub_1BE6F6E10(a3, v10);
  for (i = 0; objc_msgSend_strokeCount(v58, v11, v12, v13, v14, v15, v57) > i; ++i)
  {
    v21 = objc_msgSend_pointCountForStrokeIndex_(v58, v17, i, v18, v19, v20);
    if (v21)
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v60 = 0;
      v22 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v22 >= *(_QWORD *)(a3 + 16))
      {
        v23 = sub_1BE6FC420((char **)a3, (uint64_t)__p);
        v24 = __p[0];
        *(_QWORD *)(a3 + 8) = v23;
        if (v24)
        {
          __p[1] = v24;
          operator delete(v24);
          v23 = *(char **)(a3 + 8);
        }
      }
      else
      {
        *v22 = 0;
        v22[1] = 0;
        v22[2] = 0;
        *(_OWORD *)v22 = *(_OWORD *)__p;
        v22[2] = v60;
        v23 = (char *)(v22 + 3);
        *(_QWORD *)(a3 + 8) = v22 + 3;
      }
      v25 = (_BYTE *)*((_QWORD *)v23 - 3);
      if (v21 > (uint64_t)(*((_QWORD *)v23 - 1) - (_QWORD)v25) >> 5)
      {
        if (v21 >> 59)
          sub_1BE6FB4B8();
        v26 = (_BYTE *)*((_QWORD *)v23 - 2);
        v27 = (char *)operator new(32 * v21);
        v28 = &v27[v26 - v25];
        v29 = v28;
        if (v26 != v25)
        {
          v30 = &v27[v26 - v25];
          do
          {
            v31 = *((_OWORD *)v26 - 2);
            v29 = v30 - 32;
            *(_OWORD *)(v30 - 23) = *(_OWORD *)(v26 - 23);
            *((_OWORD *)v30 - 2) = v31;
            v26 -= 32;
            v30 -= 32;
          }
          while (v26 != v25);
        }
        *((_QWORD *)v23 - 3) = v29;
        *((_QWORD *)v23 - 2) = v28;
        *((_QWORD *)v23 - 1) = &v27[32 * v21];
        if (v25)
          operator delete(v25);
      }
      v32 = 0;
      if (v21 <= 1)
        v33 = 1;
      else
        v33 = v21;
LABEL_19:
      objc_msgSend_pointForStrokeIndex_pointIndex_(v58, v11, i, v32, v14, v15);
      v61[0] = v34;
      v61[1] = v35;
      v36 = *(_QWORD *)(a3 + 8);
      v37 = (_QWORD *)(v36 - 24);
      v38 = *(_QWORD *)(v36 - 16);
      if (v38 != *(_QWORD *)(v36 - 24) && *(double *)(v38 - 32) == v34 && *(double *)(v38 - 24) == v35)
        goto LABEL_37;
      v39 = *(_QWORD *)(v57 + 24);
      if (!v39)
        sub_1BE716090();
      (*(void (**)(void **__return_ptr, uint64_t, double *))(*(_QWORD *)v39 + 48))(__p, v39, v61);
      v41 = *(_OWORD **)(v36 - 16);
      v40 = *(_QWORD *)(v36 - 8);
      if ((unint64_t)v41 < v40)
      {
        v42 = v60;
        *v41 = *(_OWORD *)__p;
        v41[1] = v42;
        v43 = v41 + 2;
        goto LABEL_36;
      }
      v44 = (_OWORD *)*v37;
      v45 = ((uint64_t)v41 - *v37) >> 5;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 59)
        sub_1BE6FB4B8();
      v47 = v40 - (_QWORD)v44;
      if (v47 >> 4 > v46)
        v46 = v47 >> 4;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
        v48 = 0x7FFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        if (v48 >> 59)
          sub_1BE61F100();
        v49 = (char *)operator new(32 * v48);
        v50 = v60;
        v51 = &v49[32 * v45];
        *(_OWORD *)v51 = *(_OWORD *)__p;
        *((_OWORD *)v51 + 1) = v50;
        v52 = (uint64_t)v51;
        if (v41 == v44)
        {
LABEL_34:
          v53 = &v49[32 * v48];
          v43 = v51 + 32;
          *(_QWORD *)(v36 - 24) = v52;
          *(_QWORD *)(v36 - 16) = v51 + 32;
          *(_QWORD *)(v36 - 8) = v53;
          if (v41)
            goto LABEL_35;
          goto LABEL_36;
        }
      }
      else
      {
        v49 = 0;
        v54 = v60;
        v51 = (char *)(32 * v45);
        *(_OWORD *)v51 = *(_OWORD *)__p;
        *((_OWORD *)v51 + 1) = v54;
        v52 = 32 * v45;
        if (v41 == v44)
          goto LABEL_34;
      }
      do
      {
        v55 = *(v41 - 2);
        *(_OWORD *)(v52 - 23) = *(_OWORD *)((char *)v41 - 23);
        *(_OWORD *)(v52 - 32) = v55;
        v52 -= 32;
        v41 -= 2;
      }
      while (v41 != v44);
      v41 = (_OWORD *)*v37;
      v56 = &v49[32 * v48];
      v43 = v51 + 32;
      *(_QWORD *)(v36 - 24) = v52;
      *(_QWORD *)(v36 - 16) = v51 + 32;
      *(_QWORD *)(v36 - 8) = v56;
      if (v41)
LABEL_35:
        operator delete(v41);
LABEL_36:
      *(_QWORD *)(v36 - 16) = v43;
LABEL_37:
      if (++v32 == v33)
        continue;
      goto LABEL_19;
    }
  }

}

void sub_1BE715D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12)
{
  void **v12;

  sub_1BE63CEBC(v12);

  _Unwind_Resume(a1);
}

void CoreHandwriting::drawingToInk(CoreHandwriting *this@<X0>, uint64_t *a2@<X8>)
{
  CoreHandwriting::drawingToInk(this, MEMORY[0x1E0C9D538], a2);
}

id CoreHandwriting::inkToDrawing(uint64_t **this, const CoreHandwriting::Ink *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (void *)objc_opt_new();
  v10 = *this;
  for (i = this[1]; v10 != i; v10 += 3)
  {
    v11 = *v10;
    v12 = v10[1];
    while (v11 != v12)
    {
      if (!*(_BYTE *)(v11 + 24))
        objc_msgSend_addPoint_(v8, v3, v4, v5, v6, v7, *(double *)v11, *(double *)(v11 + 8));
      v11 += 32;
    }
    objc_msgSend_endStroke(v8, v3, v4, v5, v6, v7);
  }
  return v8;
}

void sub_1BE715E64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE715E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id CoreHandwriting::getMLMultiArrayView(CoreHandwriting *this, CoreHandwriting::FeatureArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *i;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  const char *v42;
  void *v43;
  uint64_t v45;

  objc_msgSend_array(MEMORY[0x1E0C99DE8], (const char *)a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v7, v8, (uint64_t)&unk_1E78287F0, v9, v10, v11);
  v17 = *(uint64_t **)this;
  v18 = (uint64_t *)*((_QWORD *)this + 1);
  if (*(uint64_t **)this != v18)
  {
    do
    {
      objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, *v17, v14, v15, v16);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v7, v20, (uint64_t)v19, v21, v22, v23);

      ++v17;
    }
    while (v17 != v18);
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v12, v13, v14, v15, v16);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v24, v25, (uint64_t)&unk_1E78287F0, v26, v27, v28);
  v33 = (uint64_t *)*((_QWORD *)this + 3);
  for (i = (uint64_t *)*((_QWORD *)this + 4); v33 != i; ++v33)
  {
    objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v29, *v33, v30, v31, v32);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v24, v36, (uint64_t)v35, v37, v38, v39);

  }
  v40 = objc_alloc(MEMORY[0x1E0C9E970]);
  v41 = *((_QWORD *)this + 6);
  v45 = 0;
  v43 = (void *)objc_msgSend_initWithDataPointer_shape_dataType_strides_deallocator_error_(v40, v42, v41, (uint64_t)v7, 65568, (uint64_t)v24, 0, &v45);

  return v43;
}

void sub_1BE715FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE716008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double CoreHandwriting::boundingBoxFromRect(CGRect *this, const CGRect *a2)
{
  double MinX;

  MinX = CGRectGetMinX(*this);
  CGRectGetMaxX(*this);
  CGRectGetMinY(*this);
  CGRectGetMaxY(*this);
  return MinX;
}

void sub_1BE716090()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_1E77F13E8;
  __cxa_throw(exception, (struct type_info *)&unk_1E77F0620, (void (*)(void *))std::exception::~exception);
}

void sub_1BE7160C8(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1C3B812ECLL);
}

void sub_1BE7160F0()
{
  JUMPOUT(0x1C3B812ECLL);
}

_QWORD *sub_1BE716104()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E77F1390;
  return result;
}

void sub_1BE716128(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E77F1390;
}

__n128 sub_1BE716140@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u8[8] = 0;
  return result;
}

uint64_t sub_1BE716154(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN15CoreHandwriting12drawingToInkEP9CHDrawingRK7CGPointE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN15CoreHandwriting12drawingToInkEP9CHDrawingRK7CGPointE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN15CoreHandwriting12drawingToInkEP9CHDrawingRK7CGPointE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN15CoreHandwriting12drawingToInkEP9CHDrawingRK7CGPointE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_1BE7161C0()
{
  return &unk_1E77F0660;
}

void sub_1BE716390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE716470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7164F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7165E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7166E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE71671C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE716798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7168C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7169B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7169E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double CoreHandwriting::BoundingBox::BoundingBox(CoreHandwriting::BoundingBox *this)
{
  double result;

  result = 1.79769313e308;
  *(_OWORD *)this = xmmword_1BE8D68A0;
  *((_OWORD *)this + 1) = xmmword_1BE8D68A0;
  return result;
}

{
  double result;

  result = 1.79769313e308;
  *(_OWORD *)this = xmmword_1BE8D68A0;
  *((_OWORD *)this + 1) = xmmword_1BE8D68A0;
  return result;
}

uint64_t CoreHandwriting::BoundingBox::unionWith(uint64_t this, const CoreHandwriting::BoundingBox *a2)
{
  double v2;
  double v3;
  double v4;

  if (*(double *)this > *(double *)a2)
  {
    *(_QWORD *)this = *(_QWORD *)a2;
    v2 = *((double *)a2 + 1);
    if (*(double *)(this + 8) >= v2)
    {
LABEL_3:
      v3 = *((double *)a2 + 2);
      if (*(double *)(this + 16) <= v3)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v2 = *((double *)a2 + 1);
    if (*(double *)(this + 8) >= v2)
      goto LABEL_3;
  }
  *(double *)(this + 8) = v2;
  v3 = *((double *)a2 + 2);
  if (*(double *)(this + 16) <= v3)
  {
LABEL_4:
    v4 = *((double *)a2 + 3);
    if (*(double *)(this + 24) >= v4)
      return this;
LABEL_9:
    *(double *)(this + 24) = v4;
    return this;
  }
LABEL_8:
  *(double *)(this + 16) = v3;
  v4 = *((double *)a2 + 3);
  if (*(double *)(this + 24) < v4)
    goto LABEL_9;
  return this;
}

float64x2_t CoreHandwriting::BoundingBox::translate(float64x2_t *this, double a2, double a3)
{
  float64x2_t result;
  float64x2_t v4;

  result = vaddq_f64(*this, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  v4 = vaddq_f64(this[1], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0));
  *this = result;
  this[1] = v4;
  return result;
}

void sub_1BE716BB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1BE716BC0(unint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  double v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v2 = objc_alloc_init(MEMORY[0x1E0DBEC68]);
  v9 = v2;
  if (a1 < 2)
  {
    LODWORD(v8) = 0;
    objc_msgSend_setAngleThresholdForRotationCorrection_(v2, v3, v4, v5, v6, v7, v8);
    objc_msgSend_setFlatMergeJumps_(v9, v10, 1, v11, v12, v13);
    LODWORD(v14) = 1064514355;
    objc_msgSend_setAllowedOverlap_(v9, v15, v16, v17, v18, v19, v14);
    objc_msgSend_setMaxRegions_(v9, v20, 169, v21, v22, v23);
    objc_msgSend_setMaxQueueCapacity_(v9, v24, 0xFFFFFFFFLL, v25, v26, v27);
    LODWORD(v28) = 1061997773;
    objc_msgSend_setMinWhitespaceWidth_(v9, v29, v30, v31, v32, v33, v28);
    LODWORD(v34) = 1060320051;
    objc_msgSend_setMinWhitespaceHeight_(v9, v35, v36, v37, v38, v39, v34);
    objc_msgSend_setNumLookupElements_(v9, v40, 57, v41, v42, v43);
    objc_msgSend_setNumPointsForSegmentsIntersection_(v9, v44, 4, v45, v46, v47);
    v48 = 1.0;
    LODWORD(v49) = 1066192077;
    objc_msgSend_setQualityHeightFactor_(v9, v50, v51, v52, v53, v54, v49);
LABEL_5:
    *(float *)&v60 = v48;
    objc_msgSend_setQualityWidthFactor_(v9, v55, v56, v57, v58, v59, v60);
    LODWORD(v105) = 8.0;
    objc_msgSend_setMinSubRectangleSize_(v9, v106, v107, v108, v109, v110, v105);
    LODWORD(v111) = 1035122882;
    objc_msgSend_setMinQuadrilateralRotation_(v9, v112, v113, v114, v115, v116, v111);
    LODWORD(v117) = 1053609165;
    objc_msgSend_setMinWhitespaceHeightForReadingOrder_(v9, v118, v119, v120, v121, v122, v117);
    return v9;
  }
  if (a1 == 2)
  {
    LODWORD(v8) = 0;
    objc_msgSend_setAngleThresholdForRotationCorrection_(v2, v3, v4, v5, v6, v7, v8);
    objc_msgSend_setFlatMergeJumps_(v9, v61, 1, v62, v63, v64);
    LODWORD(v65) = 1063675494;
    objc_msgSend_setAllowedOverlap_(v9, v66, v67, v68, v69, v70, v65);
    objc_msgSend_setMaxRegions_(v9, v71, 169, v72, v73, v74);
    objc_msgSend_setMaxQueueCapacity_(v9, v75, 0xFFFFFFFFLL, v76, v77, v78);
    LODWORD(v79) = 1.0;
    objc_msgSend_setMinWhitespaceWidth_(v9, v80, v81, v82, v83, v84, v79);
    LODWORD(v85) = 1050253722;
    objc_msgSend_setMinWhitespaceHeight_(v9, v86, v87, v88, v89, v90, v85);
    objc_msgSend_setNumLookupElements_(v9, v91, 57, v92, v93, v94);
    objc_msgSend_setNumPointsForSegmentsIntersection_(v9, v95, 6, v96, v97, v98);
    v48 = 2.0;
    LODWORD(v99) = 1.0;
    objc_msgSend_setQualityHeightFactor_(v9, v100, v101, v102, v103, v104, v99);
    goto LABEL_5;
  }
  return v9;
}

void sub_1BE716D70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE716E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE716F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7170C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE717234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE71757C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE71775C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE7184F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;

  sub_1BE6B4610((uint64_t)&STACK[0x240], (_QWORD *)STACK[0x248]);
  sub_1BE6B4610((uint64_t)&STACK[0x500], (_QWORD *)STACK[0x508]);

  _Unwind_Resume(a1);
}

uint64_t sub_1BE718880(uint64_t a1, const char *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;

  v7 = objc_msgSend_containsObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if ((v7 & 1) == 0)
    *a3 = 1;
  return v7 ^ 1u;
}

uint64_t sub_1BE7188B8(uint64_t a1, const char *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;

  v7 = objc_msgSend_containsObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
  if ((v7 & 1) == 0)
    *a3 = 1;
  return v7 ^ 1u;
}

void sub_1BE718BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE718CA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = a2;
  v6 = a3;
  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v7, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(v12, v13, (uint64_t)v5, v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v18, v19, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_strokeIdentifierFromData_(v23, v24, (uint64_t)v6, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_strokeProvider(*(void **)(a1 + 32), v29, v30, v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_compareOrderOfStrokeWithIdentifier_toStrokeWithIdentifier_(v34, v35, (uint64_t)v17, (uint64_t)v28, v36, v37);

  return v38;
}

void sub_1BE718D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE718DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE718DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE718DD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  void *v11;

  v11 = *(void **)(a1 + 32);
  if (v11)
    objc_msgSend_addPoint_(v11, a2, a3, a4, a5, a6, a7, a8);
  return objc_msgSend_addPoint_(*(void **)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1BE718EDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE718FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE71968C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7196F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CHQuadCurvePointFIFO;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

unint64_t CoreHandwriting::Ink::numStrokes(CoreHandwriting::Ink *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
}

uint64_t CoreHandwriting::Ink::numPoints(CoreHandwriting::Ink *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  uint64_t v11;
  const double *v12;
  double v13;
  uint64_t v14;
  float64x2x3_t v15;
  float64x2x3_t v16;

  v2 = *(_QWORD *)this;
  v1 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v1)
    return 0;
  v3 = v1 - v2 - 24;
  if (v3 >= 0x60)
  {
    v5 = v3 / 0x18 + 1;
    v6 = v5 & 3;
    if ((v5 & 3) == 0)
      v6 = 4;
    v7 = v5 - v6;
    v8 = v2 + 24 * v7;
    v9 = 0uLL;
    v10 = 0uLL;
    do
    {
      v11 = v2 + 96;
      v15 = vld3q_f64((const double *)v2);
      v12 = (const double *)(v2 + 48);
      v9 = vsraq_n_s64(v9, vsubq_s64((int64x2_t)v15.val[1], (int64x2_t)v15.val[0]), 5uLL);
      v16 = vld3q_f64(v12);
      v10 = vsraq_n_s64(v10, vsubq_s64((int64x2_t)v16.val[1], (int64x2_t)v16.val[0]), 5uLL);
      v2 = v11;
      v7 -= 4;
    }
    while (v7);
    result = vaddvq_s64(vaddq_s64(v10, v9));
    v2 = v8;
  }
  else
  {
    result = 0;
  }
  do
  {
    v13 = *(double *)v2;
    v14 = *(_QWORD *)(v2 + 8);
    v2 += 24;
    result += (v14 - *(_QWORD *)&v13) >> 5;
  }
  while (v2 != v1);
  return result;
}

double CoreHandwriting::Ink::bounds(double ***this)
{
  double **v1;
  double **v2;
  double v3;
  double v4;
  double v5;
  double result;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v1 = *this;
  v2 = this[1];
  if (*this == v2)
    return 1.79769313e308;
  v3 = 1.79769313e308;
  v4 = -1.79769313e308;
  v5 = -1.79769313e308;
  result = 1.79769313e308;
  do
  {
    v8 = *v1;
    v9 = v1[1];
    if (*v1 == v9)
      goto LABEL_3;
    v10 = 1.79769313e308;
    v7 = -1.79769313e308;
    v11 = -1.79769313e308;
    v12 = 1.79769313e308;
    do
    {
      v13 = *v8;
      v14 = v8[1];
      v8 += 4;
      if (v12 > v13)
        v12 = v13;
      if (v11 < v13)
        v11 = v13;
      if (v10 > v14)
        v10 = v14;
      if (v7 < v14)
        v7 = v14;
    }
    while (v8 != v9);
    if (result > v12)
      result = v12;
    if (v5 < v11)
      v5 = v11;
    if (v3 > v10)
      v3 = v10;
    if (v4 >= v7)
LABEL_3:
      v7 = v4;
    v1 += 3;
    v4 = v7;
  }
  while (v1 != v2);
  return result;
}

BOOL CoreHandwriting::Ink::operator==(double ***a1, uint64_t *a2)
{
  double **v2;
  double **v3;
  uint64_t v4;
  double *v5;
  double *v6;
  char *v7;
  double *v8;
  char *v9;
  _BOOL8 result;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  if ((char *)v2 - (char *)*a1 != a2[1] - *a2)
    return 0;
  if (v3 == v2)
    return 1;
  do
  {
    v6 = *v3;
    v5 = v3[1];
    v7 = (char *)((char *)v5 - (char *)*v3);
    v8 = *(double **)v4;
    v9 = (char *)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4);
    result = v7 == v9;
    if (v7 != v9)
      break;
    if (v6 != v5)
    {
      while (*v6 == *v8 && v6[1] == v8[1] && v6[2] == v8[2])
      {
        v6 += 4;
        v8 += 4;
        if (v6 == v5)
          goto LABEL_9;
      }
      return 0;
    }
LABEL_9:
    v3 += 3;
    v4 += 24;
  }
  while (v3 != v2);
  return result;
}

double CoreHandwriting::Ink::getCumulativeStrokeLength(char ***this)
{
  char **v1;
  char **v2;
  double result;
  char *v4;
  char *v5;
  double v6;
  float64x2_t *v7;
  float64x2_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int64x2_t *v14;
  const double *i64;
  int64x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2x4_t v27;

  v1 = *this;
  v2 = this[1];
  result = 0.0;
  if (*this != v2)
  {
    do
    {
      v5 = *v1;
      v4 = v1[1];
      v6 = 0.0;
      if (*v1 != v4)
      {
        v7 = (float64x2_t *)(v5 + 32);
        if (v5 + 32 != v4)
        {
          v8 = *(float64x2_t *)v5;
          v9 = v4 - v5 - 64;
          if (v9 >= 0x80)
          {
            v10 = (v9 >> 5) + 1;
            v11 = v10 & 3;
            if ((v10 & 3) == 0)
              v11 = 4;
            v12 = v10 - v11;
            v7 += 2 * v12;
            v13 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0);
            v14 = (int64x2_t *)(v5 + 96);
            do
            {
              i64 = (const double *)v14[-4].i64;
              v27 = vld4q_f64(i64);
              v16 = v14[2];
              v17 = *v14;
              v14 += 8;
              v18 = (float64x2_t)vzip1q_s64(v17, v16);
              v19 = (float64x2_t)vzip2q_s64(v17, v16);
              v20 = vsubq_f64((float64x2_t)vextq_s8(v13, (int8x16_t)v27.val[0], 8uLL), v27.val[0]);
              v21 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v27.val[0], (int8x16_t)v18, 8uLL), v18);
              v22 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v27.val[1], 8uLL), v27.val[1]);
              v27.val[0] = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v27.val[1], (int8x16_t)v19, 8uLL), v19);
              v23 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v22, v22), v20, v20));
              v24 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v27.val[0], v27.val[0]), v21, v21));
              v6 = v6 + v23.f64[0] + v23.f64[1] + v24.f64[0] + v24.f64[1];
              v8 = v19;
              v13 = (int8x16_t)v18;
              v12 -= 4;
            }
            while (v12);
            v8 = (float64x2_t)v16;
          }
          do
          {
            v25 = *v7;
            v7 += 2;
            v26 = vsubq_f64(v8, v25);
            v6 = v6 + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v26, v26).f64[1]), v26.f64[0], v26.f64[0]));
            v8 = v25;
          }
          while (v7 != (float64x2_t *)v4);
        }
      }
      result = result + v6;
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t **CoreHandwriting::Ink::translate(uint64_t **this, double a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  v3 = *this;
  v4 = this[1];
  while (v3 != v4)
  {
    v5 = *v3;
    v6 = v3[1];
    while (v5 != v6)
    {
      if (!*(_BYTE *)(v5 + 24))
      {
        v7 = *(double *)(v5 + 8) + a3;
        *(double *)v5 = *(double *)v5 + a2;
        *(double *)(v5 + 8) = v7;
      }
      v5 += 32;
    }
    v3 += 3;
  }
  return this;
}

uint64_t **CoreHandwriting::Ink::scale(uint64_t **this, float64x2_t a2, float64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *this;
  v4 = this[1];
  if (*this != v4)
  {
    a2.f64[1] = a3;
    do
    {
      v5 = *v3;
      v6 = v3[1];
      while (v5 != v6)
      {
        if (!*(_BYTE *)(v5 + 24))
          *(float64x2_t *)v5 = vmulq_f64(*(float64x2_t *)v5, a2);
        v5 += 32;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  return this;
}

uint64_t **CoreHandwriting::Ink::scale(uint64_t **this, double a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *this;
  v3 = this[1];
  while (v2 != v3)
  {
    v4 = *v2;
    v5 = v2[1];
    while (v4 != v5)
    {
      if (!*(_BYTE *)(v4 + 24))
        *(float64x2_t *)v4 = vmulq_n_f64(*(float64x2_t *)v4, a2);
      v4 += 32;
    }
    v2 += 3;
  }
  return this;
}

void CoreHandwriting::Ink::rotate(uint64_t **this, double a2)
{
  __double2 v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;

  v3 = __sincos_stret(a2);
  v4 = *this;
  v5 = this[1];
  while (v4 != v5)
  {
    v6 = *v4;
    v7 = v4[1];
    while (v6 != v7)
    {
      if (!*(_BYTE *)(v6 + 24))
      {
        v8 = *(double *)(v6 + 8);
        v9 = v3.__cosval * v8 + *(double *)v6 * v3.__sinval;
        *(double *)v6 = *(double *)v6 * v3.__cosval - v8 * v3.__sinval;
        *(double *)(v6 + 8) = v9;
      }
      v6 += 32;
    }
    v4 += 3;
  }
}

uint64_t isSymbolStructural(NSString *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  uint64_t v6;

  v5 = a1;
  if (qword_1EF568C60 != -1)
    dispatch_once(&qword_1EF568C60, &unk_1E77F17B0);
  v6 = objc_msgSend_containsObject_((void *)qword_1EF568C58, v1, (uint64_t)v5, v2, v3, v4);

  return v6;
}

void sub_1BE71ADCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71ADDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("{"), a4, a5, a6, CFSTR("}"), CFSTR("["), CFSTR("]"), CFSTR("_"), CFSTR("^"), CFSTR("&"), CFSTR("\\"), CFSTR("\\,"), CFSTR("\\;"),
    CFSTR("\\\\"),
    CFSTR("\\\\[1em]"),
    CFSTR("\\mathbb"),
    CFSTR("\\mathcal"),
    CFSTR("\\mathfrak"),
    CFSTR("\\mathrm"),
    CFSTR("\\left."),
    CFSTR("\\right."),
    CFSTR("\\begin{matrix}"),
    CFSTR("\\end{matrix}"),
    CFSTR("\\begin{aligned}"),
    CFSTR("\\end{aligned}"),
    CFSTR("\\begin{array}{l}"),
    CFSTR("\\begin{array}{lr}"),
    CFSTR("\\end{array}"),
    0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568C58;
  qword_1EF568C58 = v6;

}

uint64_t isSymbolLeadingStructural(NSString *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  uint64_t v6;

  v5 = a1;
  if (qword_1EF568C70 != -1)
    dispatch_once(&qword_1EF568C70, &unk_1E77F4220);
  v6 = objc_msgSend_containsObject_((void *)qword_1EF568C68, v1, (uint64_t)v5, v2, v3, v4);

  return v6;
}

void sub_1BE71AF70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71AF80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("{"), a4, a5, a6, CFSTR("["), CFSTR("_"), CFSTR("^"), CFSTR("&"), CFSTR("\\"), CFSTR("\\,"), CFSTR("\\;"),
    CFSTR("\\\\"),
    CFSTR("\\\\[1em]"),
    CFSTR("\\left."),
    CFSTR("\\mathbb"),
    CFSTR("\\mathcal"),
    CFSTR("\\mathfrak"),
    CFSTR("\\mathrm"),
    CFSTR("\\color{orange}{+}"),
    CFSTR("\\begin{matrix}"),
    CFSTR("\\begin{aligned}"),
    CFSTR("\\begin{array}{l}"),
    CFSTR("\\begin{array}{lr}"),
    0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568C68;
  qword_1EF568C68 = v6;

}

uint64_t isSymbolTrailingStructural(NSString *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  uint64_t v6;

  v5 = a1;
  if (qword_1EF568C80 != -1)
    dispatch_once(&qword_1EF568C80, &unk_1E77F4240);
  v6 = objc_msgSend_containsObject_((void *)qword_1EF568C78, v1, (uint64_t)v5, v2, v3, v4);

  return v6;
}

void sub_1BE71B0E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71B0F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("}"), a4, a5, a6, CFSTR("]"), CFSTR("\\right."), CFSTR("\\end{matrix}"), CFSTR("\\end{aligned}"), CFSTR("\\end{array}"), 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568C78;
  qword_1EF568C78 = v6;

}

uint64_t isSymbolOperator(NSString *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  uint64_t v6;

  v5 = a1;
  if (qword_1EF568C88 != -1)
    dispatch_once(&qword_1EF568C88, &unk_1E77F4260);
  v6 = objc_msgSend_containsObject_((void *)qword_1EF568C90, v1, (uint64_t)v5, v2, v3, v4);

  return v6;
}

void sub_1BE71B1C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71B1D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("+"), a4, a5, a6, CFSTR("-"), CFSTR("\\times"), CFSTR("\\ast"), CFSTR("\\cdot"), CFSTR("\\div"), CFSTR("/"), CFSTR(":"), 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568C90;
  qword_1EF568C90 = v6;

}

id symbolTextTransliteration(NSString *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v5 = a1;
  if (qword_1EF568C98 != -1)
    dispatch_once(&qword_1EF568C98, &unk_1E77EFB98);
  objc_msgSend_objectForKeyedSubscript_((void *)qword_1EF568CA0, v1, (uint64_t)v5, v2, v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v6;
  if (v6)
  {
    v12 = v6;
  }
  else if (objc_msgSend_hasPrefix_(v5, v7, (uint64_t)CFSTR("\\text{"), v8, v9, v10)
         && objc_msgSend_hasSuffix_(v5, v13, (uint64_t)CFSTR("}"), v14, v15, v16))
  {
    v19 = objc_msgSend_length(v5, v13, v17, v18, v15, v16);
    objc_msgSend_substringWithRange_(v5, v20, 6, v19 - 7, v21, v22);
    v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v5, v13, (uint64_t)CFSTR("\\"), (uint64_t)&stru_1E77F6F28, v15, v16);
    v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  v23 = v12;

  return v23;
}

void sub_1BE71B340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71B350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71B360()
{
  void *v0;

  v0 = (void *)qword_1EF568CA0;
  qword_1EF568CA0 = (uint64_t)&unk_1E7827358;

}

long double symbolHeightCoefficient(NSString *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long double v22;
  void *v24;
  int v25;
  char v26;
  char v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t i;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;

  v7 = a1;
  if (qword_1EF568CA8 != -1)
    dispatch_once(&qword_1EF568CA8, &unk_1E77EF368);
  v12 = 1.0;
  if ((objc_msgSend_containsObject_((void *)qword_1EF568CB0, v3, (uint64_t)v7, v4, v5, v6) & 1) == 0)
  {
    if ((objc_msgSend_containsObject_((void *)qword_1EF568CB8, v8, (uint64_t)v7, v9, v10, v11) & 1) != 0)
    {
      v17 = 0x3FE3333333333333;
LABEL_8:
      v12 = *(double *)&v17;
      goto LABEL_9;
    }
    if ((objc_msgSend_containsObject_((void *)qword_1EF568CC0, v13, (uint64_t)v7, v14, v15, v16) & 1) != 0)
    {
      v17 = 0x3FF6666666666666;
      goto LABEL_8;
    }
    v12 = 0.0;
    if (objc_msgSend_hasPrefix_(v7, v18, (uint64_t)CFSTR("\\text{"), v19, v20, v21))
    {
      symbolTextTransliteration(v7);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      for (i = objc_msgSend_length(v24, v29, v30, v31, v32, v33);
            v28 < i;
            i = objc_msgSend_length(v24, v44, v45, v46, v47, v48))
      {
        v39 = objc_msgSend_characterAtIndex_(v24, v35, v28, v36, v37, v38);
        if ((objc_msgSend_characterIsMember_((void *)qword_1EF568CC8, v40, v39, v41, v42, v43) & 1) != 0)
        {
          v26 = 1;
          ++v28;
        }
        else
        {
          if ((objc_msgSend_characterIsMember_((void *)qword_1EF568CD0, v44, v39, v46, v47, v48) & 1) != 0)
            v27 = 1;
          else
            v25 |= objc_msgSend_characterIsMember_((void *)qword_1EF568CD8, v44, v39, v46, v47, v48) ^ 1;
          ++v28;
        }
      }
      v49 = 1.4;
      v50 = 0.6;
      if (((v25 | v26) & 1) != 0)
        v50 = 1.0;
      if ((v25 & v26 & 1) == 0)
        v49 = v50;
      if ((((v27 | v25) | v26) & 1) != 0)
        v12 = v49;
      else
        v12 = 0.0;

    }
  }
LABEL_9:
  v22 = exp2(-(double)a2) * v12;

  return v22;
}

void sub_1BE71B564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71B578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE71B58C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE71B5A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;

  v6 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4, a5, a6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_componentsSeparatedByCharactersInSet_(CFSTR("0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z b d f g h j k l p q t y ! \\% \\$ \\tan \\arctan \\sinh \\cosh \\tanh \\coth \\ln"), v8, (uint64_t)v7, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithArray_(v6, v13, (uint64_t)v12, v14, v15, v16);
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = (void *)qword_1EF568CB0;
  qword_1EF568CB0 = v17;

  v19 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v20, v21, v22, v23, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_componentsSeparatedByCharactersInSet_(CFSTR("a c e i m n o r s u v w x \\pi \\sin \\cos \\arcsin \\arccos \\sec \\csc"), v26, (uint64_t)v25, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithArray_(v19, v31, (uint64_t)v30, v32, v33, v34);
  v35 = objc_claimAutoreleasedReturnValue();
  v36 = (void *)qword_1EF568CB8;
  qword_1EF568CB8 = v35;

  v37 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v38, v39, v40, v41, v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_componentsSeparatedByCharactersInSet_(CFSTR("\\log \\lg"), v44, (uint64_t)v43, v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithArray_(v37, v49, (uint64_t)v48, v50, v51, v52);
  v53 = objc_claimAutoreleasedReturnValue();
  v54 = (void *)qword_1EF568CC0;
  qword_1EF568CC0 = v53;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v55, (uint64_t)CFSTR("gjpqy"), v56, v57, v58);
  v59 = objc_claimAutoreleasedReturnValue();
  v60 = (void *)qword_1EF568CC8;
  qword_1EF568CC8 = v59;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v61, (uint64_t)CFSTR("aceimnorsuvwxz+×*÷:¢="), v62, v63, v64);
  v65 = objc_claimAutoreleasedReturnValue();
  v66 = (void *)qword_1EF568CD0;
  qword_1EF568CD0 = v65;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v67, (uint64_t)CFSTR("-⋅.,°'\""), v68, v69, v70);
  v71 = objc_claimAutoreleasedReturnValue();
  v72 = (void *)qword_1EF568CD8;
  qword_1EF568CD8 = v71;

}

void sub_1BE71B72C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE71B76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71B878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71B888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE71B8A4(uint64_t a1, void *a2, char **a3, _QWORD *a4)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t j;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  int v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  char v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  CHTokenizedResultColumn *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  int v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  int v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  int v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  CHTokenizedResultColumn *v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  CHTokenizedResultColumn *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t m;
  void *v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  BOOL v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int isEqualToIndexSet;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  const char *v269;
  uint64_t v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t k;
  void *v279;
  void *v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  BOOL v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  const char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  const char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  unint64_t n;
  const char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  const char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  size_t v334;
  _QWORD *v335;
  char *v336;
  id v337;
  const char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  const char *v344;
  uint64_t v345;
  uint64_t v346;
  const char *v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  char *v351;
  id v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t ii;
  const char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  const char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  void *v379;
  const char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  const char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  const char *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  const char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  const char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  const char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  void *v411;
  const char *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  _QWORD *v416;
  unint64_t v417;
  const char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  const char *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  const char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void *v432;
  const char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  void *v437;
  const char *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  const char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  void *v449;
  const char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  void *v455;
  const char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  void *v461;
  const char *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  void *v467;
  const char *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  const char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  void *v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  const char *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  void *v487;
  const char *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  const char *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  void *v497;
  const char *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  const char *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  void *v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  const char *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  const char *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  const char *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  void *v526;
  const char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  const char *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  const char *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  void *v543;
  const char *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  const char *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  const char *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  const char *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t jj;
  const char *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  void *v567;
  const char *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  const char *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  NSObject *v578;
  uint64_t v579;
  const char *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  const char *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  const char *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  void *v594;
  const char *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  void *v599;
  const char *v600;
  uint64_t v601;
  uint64_t v602;
  const char *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  CHTokenizedResultColumn *v607;
  const char *v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  void *v612;
  const char *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  const char *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  const char *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t kk;
  const char *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  void *v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  const char *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  void *v641;
  const char *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  const char *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  void *v653;
  const char *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  const char *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  const char *v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  const char *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  NSObject *v675;
  const char *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  const char *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  void *v688;
  void *v689;
  const char *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  void *v694;
  const char *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t mm;
  const char *v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  void *v706;
  const char *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  char v711;
  void *v712;
  const char *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  const char *v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  const char *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  const char *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  void *v731;
  const char *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  const char *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  void *v742;
  unint64_t i1;
  const char *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  void *v748;
  const char *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  void *v754;
  const char *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  const char *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  void *v764;
  id v765;
  const char *v766;
  uint64_t v767;
  const char *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t i2;
  void *v776;
  const char *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  const char *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  NSObject *v785;
  const char *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  const char *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  const char *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  const char *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  void *v805;
  unint64_t i3;
  const char *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  void *v811;
  const char *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  const char *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  void *v822;
  unint64_t i4;
  void *v824;
  const char *v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  BOOL v830;
  unint64_t v831;
  const char *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  void *v836;
  const char *v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  BOOL v841;
  unint64_t i5;
  const char *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  void *v848;
  const char *v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  const char *v854;
  uint64_t v855;
  uint64_t v856;
  const char *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  const char *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  void *v867;
  const char *v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  void *v872;
  const char *v873;
  uint64_t v874;
  uint64_t v875;
  const char *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  const char *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  void *v885;
  const char *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  void *v891;
  const char *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  CHTokenizedResultColumn *v896;
  const char *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  void *v901;
  const char *v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  const char *v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  _QWORD *v910;
  char **v911;
  void *v912;
  void *v913;
  char *nn;
  void *v915;
  void *v916;
  void *v917;
  char *v918;
  void *v919;
  void *v920;
  void *v921;
  id v922;
  void *v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  _QWORD *v928;
  char *v929;
  char *v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  _BYTE v939[128];
  int v940;
  uint64_t v941;
  __int16 v942;
  uint64_t v943;
  void *v944;
  _BYTE v945[128];
  _BYTE v946[128];
  void *v947;
  void *v948;
  _QWORD v949[4];

  v910 = a4;
  v911 = a3;
  v949[1] = *MEMORY[0x1E0C80C00];
  v922 = a2;
  objc_opt_self();
  if (!objc_msgSend_count(v922, v4, v5, v6, v7, v8))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v14 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v928) = 0;
      _os_log_impl(&dword_1BE607000, v14, OS_LOG_TYPE_FAULT, "CHTokenizedMathResult must be initialized with at least one token path.", (uint8_t *)&v928, 2u);
    }

  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v9, v10, v11, v12, v13, v910);
  v921 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v15, v16, v17, v18, v19);
  v917 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i < objc_msgSend_count(v922, v20, v21, v22, v23, v24); ++i)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v26, v27, v28, v29, v30);
    v920 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v31, v32, v33, v34, v35);
    v923 = (void *)objc_claimAutoreleasedReturnValue();
    for (j = 0; ; ++j)
    {
      objc_msgSend_objectAtIndexedSubscript_(v922, v36, i, v37, v38, v39);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = j < objc_msgSend_count(v41, v42, v43, v44, v45, v46);

      if (!v47)
        break;
      objc_msgSend_objectAtIndexedSubscript_(v922, v48, i, v50, v51, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v53, v54, j, v55, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend_string(v58, v59, v60, v61, v62, v63);
      v68 = (id)objc_claimAutoreleasedReturnValue();
      if (qword_1EF568C70 != -1)
        dispatch_once(&qword_1EF568C70, &unk_1E77F4220);
      v69 = objc_msgSend_containsObject_((void *)qword_1EF568C68, v64, (uint64_t)v68, v65, v66, v67);

      if (v69)
      {
        objc_msgSend_lastObject(v923, v70, v71, v72, v73, v74);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_string(v75, v76, v77, v78, v79, v80);
        v85 = (id)objc_claimAutoreleasedReturnValue();
        if (qword_1EF568C70 != -1)
          dispatch_once(&qword_1EF568C70, &unk_1E77F4220);
        v86 = objc_msgSend_containsObject_((void *)qword_1EF568C68, v81, (uint64_t)v85, v82, v83, v84);

        if (objc_msgSend_count(v923, v87, v88, v89, v90, v91))
          v96 = v86;
        else
          v96 = 1;
        if ((v96 & 1) == 0)
        {
          v97 = [CHTokenizedResultColumn alloc];
          v103 = (void *)objc_msgSend_copy(v923, v98, v99, v100, v101, v102);
          v949[0] = v103;
          objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v104, (uint64_t)v949, 1, v105, v106);
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          v112 = (void *)objc_msgSend_initWithTokenRows_(v97, v108, (uint64_t)v107, v109, v110, v111);

          objc_msgSend_addObject_(v920, v113, (uint64_t)v112, v114, v115, v116);
          objc_msgSend_removeAllObjects(v923, v117, v118, v119, v120, v121);

        }
      }
      else
      {
        objc_msgSend_string(v58, v70, v71, v72, v73, v74);
        v126 = (id)objc_claimAutoreleasedReturnValue();
        if (qword_1EF568C80 != -1)
          dispatch_once(&qword_1EF568C80, &unk_1E77F4240);
        v127 = objc_msgSend_containsObject_((void *)qword_1EF568C78, v122, (uint64_t)v126, v123, v124, v125);

        if (!v127)
        {
          objc_msgSend_lastObject(v923, v92, v128, v93, v94, v95);
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_string(v129, v130, v131, v132, v133, v134);
          v139 = (id)objc_claimAutoreleasedReturnValue();
          if (qword_1EF568C70 != -1)
            dispatch_once(&qword_1EF568C70, &unk_1E77F4220);
          v140 = objc_msgSend_containsObject_((void *)qword_1EF568C68, v135, (uint64_t)v139, v136, v137, v138);

          objc_msgSend_objectAtIndexedSubscript_(v922, v141, i, v142, v143, v144);
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          if (j + 1 >= objc_msgSend_count(v145, v146, v147, v148, v149, v150))
          {
            v171 = 0;
          }
          else
          {
            objc_msgSend_objectAtIndexedSubscript_(v922, v151, i, v152, v153, v154);
            v155 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectAtIndexedSubscript_(v155, v156, j + 1, v157, v158, v159);
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_string(v160, v161, v162, v163, v164, v165);
            v170 = (id)objc_claimAutoreleasedReturnValue();
            if (qword_1EF568C80 != -1)
              dispatch_once(&qword_1EF568C80, &unk_1E77F4240);
            v171 = objc_msgSend_containsObject_((void *)qword_1EF568C78, v166, (uint64_t)v170, v167, v168, v169);

          }
          if (objc_msgSend_count(v923, v172, v173, v174, v175, v176))
            v177 = v140;
          else
            v177 = 1;
          if (((v177 | v171) & 1) == 0)
          {
            v178 = [CHTokenizedResultColumn alloc];
            v184 = (void *)objc_msgSend_copy(v923, v179, v180, v181, v182, v183);
            v948 = v184;
            objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v185, (uint64_t)&v948, 1, v186, v187);
            v188 = (void *)objc_claimAutoreleasedReturnValue();
            v193 = (void *)objc_msgSend_initWithTokenRows_(v178, v189, (uint64_t)v188, v190, v191, v192);

            objc_msgSend_addObject_(v920, v194, (uint64_t)v193, v195, v196, v197);
            objc_msgSend_removeAllObjects(v923, v198, v199, v200, v201, v202);

          }
        }
      }
      objc_msgSend_addObject_(v923, v92, (uint64_t)v58, v93, v94, v95);

    }
    if (objc_msgSend_count(v923, v48, v49, v50, v51, v52))
    {
      v208 = [CHTokenizedResultColumn alloc];
      v214 = (void *)objc_msgSend_copy(v923, v209, v210, v211, v212, v213);
      v947 = v214;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v215, (uint64_t)&v947, 1, v216, v217);
      v218 = (void *)objc_claimAutoreleasedReturnValue();
      v223 = (void *)objc_msgSend_initWithTokenRows_(v208, v219, (uint64_t)v218, v220, v221, v222);

      objc_msgSend_addObject_(v920, v224, (uint64_t)v223, v225, v226, v227);
    }
    if (!i)
    {
      v937 = 0u;
      v938 = 0u;
      v935 = 0u;
      v936 = 0u;
      v268 = v920;
      v276 = objc_msgSend_countByEnumeratingWithState_objects_count_(v268, v269, (uint64_t)&v935, (uint64_t)v946, 16, v270);
      if (v276)
      {
        v277 = *(_QWORD *)v936;
        while (2)
        {
          for (k = 0; k != v276; ++k)
          {
            if (*(_QWORD *)v936 != v277)
              objc_enumerationMutation(v268);
            v279 = *(void **)(*((_QWORD *)&v935 + 1) + 8 * k);
            objc_msgSend_strokeIndexes(v279, v271, v272, v273, v274, v275);
            v280 = (void *)objc_claimAutoreleasedReturnValue();
            v286 = objc_msgSend_count(v280, v281, v282, v283, v284, v285) == 0;

            if (v286)
            {

              goto LABEL_64;
            }
            objc_msgSend_strokeIndexes(v279, v287, v288, v289, v290, v291);
            v292 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addIndexes_(v917, v293, (uint64_t)v292, v294, v295, v296);

          }
          v276 = objc_msgSend_countByEnumeratingWithState_objects_count_(v268, v271, (uint64_t)&v935, (uint64_t)v946, 16, v275);
          if (v276)
            continue;
          break;
        }
      }

LABEL_62:
      objc_msgSend_addObject_(v921, v264, (uint64_t)v920, v265, v266, v267);
      goto LABEL_65;
    }
    objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v203, v204, v205, v206, v207);
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    v933 = 0u;
    v934 = 0u;
    v931 = 0u;
    v932 = 0u;
    v229 = v920;
    v237 = objc_msgSend_countByEnumeratingWithState_objects_count_(v229, v230, (uint64_t)&v931, (uint64_t)v945, 16, v231);
    if (v237)
    {
      v238 = *(_QWORD *)v932;
      while (2)
      {
        for (m = 0; m != v237; ++m)
        {
          if (*(_QWORD *)v932 != v238)
            objc_enumerationMutation(v229);
          v240 = *(void **)(*((_QWORD *)&v931 + 1) + 8 * m);
          objc_msgSend_strokeIndexes(v240, v232, v233, v234, v235, v236);
          v241 = (void *)objc_claimAutoreleasedReturnValue();
          v247 = objc_msgSend_count(v241, v242, v243, v244, v245, v246) == 0;

          if (v247)
          {
            v258 = 0;
            goto LABEL_51;
          }
          objc_msgSend_strokeIndexes(v240, v248, v249, v250, v251, v252);
          v253 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addIndexes_(v228, v254, (uint64_t)v253, v255, v256, v257);

        }
        v237 = objc_msgSend_countByEnumeratingWithState_objects_count_(v229, v232, (uint64_t)&v931, (uint64_t)v945, 16, v236);
        if (v237)
          continue;
        break;
      }
    }
    v258 = 1;
LABEL_51:

    isEqualToIndexSet = objc_msgSend_isEqualToIndexSet_(v228, v259, (uint64_t)v917, v260, v261, v262);
    if ((v258 & isEqualToIndexSet & 1) != 0)
      goto LABEL_62;
LABEL_64:
    if (!i)
    {
      objc_msgSend_addObject_(v921, v264, (uint64_t)v920, v265, v266, v267);

      break;
    }
LABEL_65:

  }
  if (objc_msgSend_count(v921, v26, v27, v28, v29, v30) == 1)
  {
    objc_msgSend_firstObject(v921, v297, v298, v299, v300, v301);
    v302 = (char *)objc_claimAutoreleasedReturnValue();
    nn = v302;
    v308 = objc_msgSend_count(v302, v303, v304, v305, v306, v307);
    MEMORY[0x1E0C80A78](v308);
    v315 = (char *)&v910 - ((v314 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (n = 0; n < objc_msgSend_count(v302, v309, v310, v311, v312, v313); ++n)
      *(_QWORD *)&v315[8 * n] = 0;
    v337 = objc_alloc(MEMORY[0x1E0CB36B0]);
    v343 = objc_msgSend_count(v302, v338, v339, v340, v341, v342);
    v350 = (void *)objc_msgSend_initWithIndexes_length_(v337, v344, (uint64_t)v315, v343, v345, v346);
    if (v911)
    {
      v351 = objc_retainAutorelease(v302);
      *v911 = v351;
    }
    if (v910)
    {
      v944 = v350;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v347, (uint64_t)&v944, 1, v348, v349);
      v352 = (id)objc_claimAutoreleasedReturnValue();
      *v910 = v352;
    }

    goto LABEL_184;
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v297, v298, v299, v300, v301);
  v918 = (char *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v317, v318, v319, v320, v321);
  v915 = (void *)objc_claimAutoreleasedReturnValue();
  v327 = objc_msgSend_count(v921, v322, v323, v324, v325, v326);
  v333 = v327;
  v928 = 0;
  v929 = 0;
  v930 = 0;
  if (v327)
  {
    if (v327 >> 61)
      sub_1BE61F930();
    v334 = 8 * v327;
    v335 = operator new(8 * v327);
    v336 = (char *)&v335[v333];
    v928 = v335;
    v930 = v336;
    bzero(v335, v334);
    v929 = v336;
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v328, v329, v330, v331, v332);
  v916 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v353, v354, v355, v356, v357);
  v923 = (void *)objc_claimAutoreleasedReturnValue();
  for (ii = 0; ii < objc_msgSend_count(v921, v358, v359, v360, v361, v362); ++ii)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v364, v365, v366, v367, v368);
    v369 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v923, v370, (uint64_t)v369, v371, v372, v373);

    objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v374, v375, v376, v377, v378);
    v379 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v916, v380, (uint64_t)v379, v381, v382, v383);

  }
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v364, v365, v366, v367, v368);
  v920 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v384, v385, v386, v387, v388);
  v919 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_83:
  nn = (char *)objc_msgSend_copy(v920, v389, v390, v391, v392, v393);
  v399 = 0;
  while (2)
  {
    if (v399 < objc_msgSend_count(v921, v394, v395, v396, v397, v398))
    {
      objc_msgSend_objectAtIndexedSubscript_(v916, v400, v399, v402, v403, v404);
      v405 = (void *)objc_claimAutoreleasedReturnValue();
      v411 = (void *)objc_msgSend_mutableCopy(v919, v406, v407, v408, v409, v410);
      objc_msgSend_removeIndexes_(v411, v412, (uint64_t)v405, v413, v414, v415);
      v416 = v928;
      v417 = v928[v399];
      objc_msgSend_objectAtIndexedSubscript_(v921, v418, v399, v419, v420, v421);
      v422 = (void *)objc_claimAutoreleasedReturnValue();
      if (v417 >= objc_msgSend_count(v422, v423, v424, v425, v426, v427))
        goto LABEL_94;
      objc_msgSend_objectAtIndexedSubscript_(v921, v428, v399, v429, v430, v431);
      v432 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectAtIndexedSubscript_(v432, v433, v417, v434, v435, v436);
      v437 = (void *)objc_claimAutoreleasedReturnValue();

      if (v437)
      {
        while (1)
        {
          if (objc_msgSend_count(v405, v438, v439, v440, v441, v442))
          {
            if (!objc_msgSend_count(v411, v443, v444, v445, v446, v447))
            {
              objc_msgSend_strokeIndexes(v437, v443, v448, v445, v446, v447);
              v449 = (void *)objc_claimAutoreleasedReturnValue();
              v454 = objc_msgSend_ch_intersectsIndexSet_(v449, v450, (uint64_t)v920, v451, v452, v453);

              if (!v454)
                break;
            }
          }
          objc_msgSend_objectAtIndexedSubscript_(v923, v443, v399, v445, v446, v447);
          v455 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_mathTokenRows(v437, v456, v457, v458, v459, v460);
          v461 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_firstObject(v461, v462, v463, v464, v465, v466);
          v467 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObjectsFromArray_(v455, v468, (uint64_t)v467, v469, v470, v471);

          objc_msgSend_strokeIndexes(v437, v472, v473, v474, v475, v476);
          v477 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addIndexes_(v405, v478, (uint64_t)v477, v479, v480, v481);

          objc_msgSend_strokeIndexes(v437, v482, v483, v484, v485, v486);
          v487 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addIndexes_(v919, v488, (uint64_t)v487, v489, v490, v491);

          objc_msgSend_strokeIndexes(v437, v492, v493, v494, v495, v496);
          v497 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addIndexes_(v920, v498, (uint64_t)v497, v499, v500, v501);

          objc_msgSend_strokeIndexes(v437, v502, v503, v504, v505, v506);
          v507 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_removeIndexes_(v411, v508, (uint64_t)v507, v509, v510, v511);

          v512 = v416[v399] + 1;
          v416[v399] = v512;
          objc_msgSend_objectAtIndexedSubscript_(v921, v513, v399, v514, v515, v516);
          v422 = (void *)objc_claimAutoreleasedReturnValue();
          if (v512 >= objc_msgSend_count(v422, v517, v518, v519, v520, v521))
          {

            goto LABEL_94;
          }
          objc_msgSend_objectAtIndexedSubscript_(v921, v522, v399, v523, v524, v525);
          v526 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectAtIndexedSubscript_(v526, v527, v512, v528, v529, v530);
          v531 = objc_claimAutoreleasedReturnValue();

          v437 = (void *)v531;
          if (!v531)
          {
            v422 = 0;
            goto LABEL_94;
          }
        }
        v422 = v437;
LABEL_94:

      }
      ++v399;
      continue;
    }
    break;
  }
  v532 = 0;
  while (v532 < objc_msgSend_count(v921, v400, v401, v402, v403, v404))
  {
    objc_msgSend_objectAtIndexedSubscript_(v916, v533, v532, v534, v535, v536);
    v537 = objc_claimAutoreleasedReturnValue();
    v543 = (void *)objc_msgSend_mutableCopy((void *)v537, v538, v539, v540, v541, v542);

    objc_msgSend_addIndexes_(v543, v544, (uint64_t)nn, v545, v546, v547);
    LOBYTE(v537) = objc_msgSend_isEqualToIndexSet_(v543, v548, (uint64_t)v920, v549, v550, v551);

    ++v532;
    if ((v537 & 1) == 0)
    {
LABEL_122:

      goto LABEL_83;
    }
  }

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v552, v553, v554, v555, v556);
  nn = (char *)objc_claimAutoreleasedReturnValue();
  for (jj = 0; jj < objc_msgSend_count(v923, v557, v558, v559, v560, v561); ++jj)
  {
    objc_msgSend_objectAtIndexedSubscript_(v923, v563, jj, v564, v565, v566);
    v567 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_count(v567, v568, v569, v570, v571, v572))
    {
      if (qword_1EF568E88 != -1)
        dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
      v578 = (id)qword_1EF568E18[0];
      if (os_log_type_enabled(v578, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v940) = 0;
        _os_log_impl(&dword_1BE607000, v578, OS_LOG_TYPE_FAULT, "Found empty row when creating result with best path tokens. It indicates that the given paths don't cover the same strokes.", (uint8_t *)&v940, 2u);
      }

    }
    v579 = objc_msgSend_count(nn, v573, v574, v575, v576, v577);
    if (objc_msgSend_count(v567, v580, v581, v582, v583, v584))
      v579 = objc_msgSend_mergeTokenRow_intoUniqueRows_(CHTokenizedMathResult, v585, (uint64_t)v567, (uint64_t)nn, v588, v589);
    if (objc_msgSend_count(v915, v585, v586, v587, v588, v589) <= jj)
    {
      objc_msgSend_indexPathWithIndex_(MEMORY[0x1E0CB36B0], v590, v579, v591, v592, v593);
      v594 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v915, v603, (uint64_t)v594, v604, v605, v606);
    }
    else
    {
      objc_msgSend_objectAtIndexedSubscript_(v915, v590, jj, v591, v592, v593);
      v594 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_indexPathByAddingIndex_(v594, v595, v579, v596, v597, v598);
      v599 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_atIndexedSubscript_(v915, v600, (uint64_t)v599, jj, v601, v602);

    }
  }
  v607 = [CHTokenizedResultColumn alloc];
  v612 = (void *)objc_msgSend_initWithTokenRows_(v607, v608, (uint64_t)nn, v609, v610, v611);
  objc_msgSend_addObject_(v918, v613, (uint64_t)v612, v614, v615, v616);
  objc_msgSend_removeAllIndexes(v919, v617, v618, v619, v620, v621);
  for (kk = 0; kk < objc_msgSend_count(v921, v622, v623, v624, v625, v626); ++kk)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v628, v629, v630, v631, v632);
    v633 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_atIndexedSubscript_(v923, v634, (uint64_t)v633, kk, v635, v636);

    objc_msgSend_objectAtIndexedSubscript_(v916, v637, kk, v638, v639, v640);
    v641 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeAllIndexes(v641, v642, v643, v644, v645, v646);

  }
  v647 = 0;
  while (v647 < objc_msgSend_count(v921, v628, v629, v630, v631, v632))
  {
    v652 = v928[v647];
    objc_msgSend_objectAtIndexedSubscript_(v921, v648, v647, v649, v650, v651);
    v653 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v652) = v652 == objc_msgSend_count(v653, v654, v655, v656, v657, v658);

    ++v647;
    if ((v652 & 1) == 0)
    {

      goto LABEL_122;
    }
  }

  v664 = objc_msgSend_count(v915, v659, v660, v661, v662, v663);
  if (v664 != objc_msgSend_count(v921, v665, v666, v667, v668, v669))
  {
    if (qword_1EF568E88 != -1)
      dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
    v675 = (id)qword_1EF568E18[0];
    if (os_log_type_enabled(v675, OS_LOG_TYPE_FAULT))
    {
      v681 = objc_msgSend_count(v915, v676, v677, v678, v679, v680);
      v687 = objc_msgSend_count(v921, v682, v683, v684, v685, v686);
      v940 = 134218240;
      v941 = v681;
      v942 = 2048;
      v943 = v687;
      _os_log_impl(&dword_1BE607000, v675, OS_LOG_TYPE_FAULT, "transcriptionPaths count (%ld) != transcriptions count (%ld) after tokenized result is built", (uint8_t *)&v940, 0x16u);
    }

  }
  v688 = (void *)MEMORY[0x1E0C99DE8];
  objc_msgSend_firstObject(v915, v670, v671, v672, v673, v674);
  v689 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_arrayWithObject_(v688, v690, (uint64_t)v689, v691, v692, v693);
  v694 = (void *)objc_claimAutoreleasedReturnValue();

  for (mm = 1; mm < objc_msgSend_count(v915, v695, v696, v697, v698, v699); ++mm)
  {
    objc_msgSend_objectAtIndexedSubscript_(v915, v701, mm, v703, v704, v705);
    v706 = (void *)objc_claimAutoreleasedReturnValue();
    v711 = objc_msgSend_containsObject_(v694, v707, (uint64_t)v706, v708, v709, v710);

    if ((v711 & 1) == 0)
    {
      objc_msgSend_objectAtIndexedSubscript_(v915, v695, mm, v697, v698, v699);
      v712 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v694, v713, (uint64_t)v712, v714, v715, v716);

    }
  }
  objc_msgSend_set(MEMORY[0x1E0C99E20], v701, v702, v703, v704, v705);
  v913 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v717, v718, v719, v720, v721);
  v912 = (void *)objc_claimAutoreleasedReturnValue();
  for (nn = 0; (unint64_t)nn < objc_msgSend_count(v694, v722, v723, v724, v725, v726); ++nn)
  {
    objc_msgSend_objectAtIndexedSubscript_(v694, v727, (uint64_t)nn, v728, v729, v730);
    v731 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_string(MEMORY[0x1E0CB37A0], v732, v733, v734, v735, v736);
    v742 = (void *)objc_claimAutoreleasedReturnValue();
    for (i1 = 0; i1 < objc_msgSend_count(v918, v737, v738, v739, v740, v741); ++i1)
    {
      objc_msgSend_objectAtIndexedSubscript_(v918, v744, i1, v745, v746, v747);
      v748 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_mathTokenRows(v748, v749, v750, v751, v752, v753);
      v754 = (void *)objc_claimAutoreleasedReturnValue();
      v759 = objc_msgSend_indexAtPosition_(v731, v755, i1, v756, v757, v758);
      objc_msgSend_objectAtIndexedSubscript_(v754, v760, v759, v761, v762, v763);
      v764 = (void *)objc_claimAutoreleasedReturnValue();

      v926 = 0u;
      v927 = 0u;
      v924 = 0u;
      v925 = 0u;
      v765 = v764;
      v773 = objc_msgSend_countByEnumeratingWithState_objects_count_(v765, v766, (uint64_t)&v924, (uint64_t)v939, 16, v767);
      if (v773)
      {
        v774 = *(_QWORD *)v925;
        do
        {
          for (i2 = 0; i2 != v773; ++i2)
          {
            if (*(_QWORD *)v925 != v774)
              objc_enumerationMutation(v765);
            objc_msgSend_string(*(void **)(*((_QWORD *)&v924 + 1) + 8 * i2), v768, v769, v770, v771, v772);
            v776 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_appendString_(v742, v777, (uint64_t)v776, v778, v779, v780);

          }
          v773 = objc_msgSend_countByEnumeratingWithState_objects_count_(v765, v768, (uint64_t)&v924, (uint64_t)v939, 16, v772);
        }
        while (v773);
      }

    }
    if (objc_msgSend_containsObject_(v913, v744, (uint64_t)v742, v745, v746, v747))
      objc_msgSend_addIndex_(v912, v781, (uint64_t)nn, v782, v783, v784);
    else
      objc_msgSend_addObject_(v913, v781, (uint64_t)v742, v782, v783, v784);

  }
  if (!objc_msgSend_count(v912, v727, (uint64_t)nn, v728, v729, v730))
  {
    nn = v918;
    v805 = v694;
    if (v911)
      goto LABEL_176;
LABEL_179:
    if (!v910)
      goto LABEL_181;
    goto LABEL_180;
  }
  if (qword_1EF568E88 != -1)
    dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
  v785 = (id)qword_1EF568E18[0];
  if (os_log_type_enabled(v785, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v940) = 0;
    _os_log_impl(&dword_1BE607000, v785, OS_LOG_TYPE_DEBUG, "Found different segmentation leading to the same transcription. Deduping keeping the transcription path closer to the top.", (uint8_t *)&v940, 2u);
  }

  objc_msgSend_removeObjectsAtIndexes_(v694, v786, (uint64_t)v912, v787, v788, v789);
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v790, v791, v792, v793, v794);
  nn = (char *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v795, v796, v797, v798, v799);
  v805 = (void *)objc_claimAutoreleasedReturnValue();
  for (i3 = 0; i3 < objc_msgSend_count(v918, v800, v801, v802, v803, v804); ++i3)
  {
    objc_msgSend_objectAtIndexedSubscript_(v918, v807, i3, v808, v809, v810);
    v811 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v812, v813, v814, v815, v816);
    v822 = (void *)objc_claimAutoreleasedReturnValue();
    for (i4 = 0; ; ++i4)
    {
      objc_msgSend_mathTokenRows(v811, v817, v818, v819, v820, v821);
      v824 = (void *)objc_claimAutoreleasedReturnValue();
      v830 = i4 < objc_msgSend_count(v824, v825, v826, v827, v828, v829);

      if (!v830)
        break;
      v831 = 0;
      while (v831 < objc_msgSend_count(v694, v817, v818, v819, v820, v821))
      {
        objc_msgSend_objectAtIndexedSubscript_(v694, v832, v831, v833, v834, v835);
        v836 = (void *)objc_claimAutoreleasedReturnValue();
        v841 = objc_msgSend_indexAtPosition_(v836, v837, i3, v838, v839, v840) == i4;

        ++v831;
        if (v841)
          goto LABEL_159;
      }
      objc_msgSend_addIndex_(v822, v832, i4, v833, v834, v835);
LABEL_159:
      ;
    }
    for (i5 = 0; i5 < objc_msgSend_count(v694, v817, v818, v819, v820, v821); ++i5)
    {
      objc_msgSend_objectAtIndexedSubscript_(v694, v843, i5, v845, v846, v847);
      v848 = (void *)objc_claimAutoreleasedReturnValue();
      v853 = objc_msgSend_indexAtPosition_(v848, v849, i3, v850, v851, v852);

      v866 = v853 - objc_msgSend_countOfIndexesInRange_(v822, v854, 0, v853, v855, v856);
      if (objc_msgSend_count(v805, v857, v858, v859, v860, v861) <= i5)
      {
        objc_msgSend_indexPathWithIndex_(MEMORY[0x1E0CB36B0], v862, v866, v863, v864, v865);
        v867 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v805, v876, (uint64_t)v867, v877, v878, v879);
      }
      else
      {
        objc_msgSend_objectAtIndexedSubscript_(v805, v862, i5, v863, v864, v865);
        v867 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_indexPathByAddingIndex_(v867, v868, v866, v869, v870, v871);
        v872 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_atIndexedSubscript_(v805, v873, (uint64_t)v872, i5, v874, v875);

      }
    }
    if (objc_msgSend_count(v822, v843, v844, v845, v846, v847))
    {
      objc_msgSend_mathTokenRows(v811, v880, v881, v882, v883, v884);
      v885 = (void *)objc_claimAutoreleasedReturnValue();
      v891 = (void *)objc_msgSend_mutableCopy(v885, v886, v887, v888, v889, v890);

      objc_msgSend_removeObjectsAtIndexes_(v891, v892, (uint64_t)v822, v893, v894, v895);
      v896 = [CHTokenizedResultColumn alloc];
      v901 = (void *)objc_msgSend_initWithTokenRows_(v896, v897, (uint64_t)v891, v898, v899, v900);
      objc_msgSend_addObject_(nn, v902, (uint64_t)v901, v903, v904, v905);

    }
    else
    {
      objc_msgSend_objectAtIndexedSubscript_(v918, v880, i3, v882, v883, v884);
      v891 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(nn, v906, (uint64_t)v891, v907, v908, v909);
    }

  }
  if (!v911)
    goto LABEL_179;
LABEL_176:
  *v911 = objc_retainAutorelease(nn);
  if (v910)
LABEL_180:
    *v910 = objc_retainAutorelease(v805);
LABEL_181:

  if (v928)
    operator delete(v928);

LABEL_184:
}

void sub_1BE71CE10(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  *(_QWORD *)(v1 + 8) = a1;

  v3 = *(void **)(v1 + 176);
  if (v3)
  {
    *(_QWORD *)(v1 + 184) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(*(_Unwind_Exception **)(v1 + 8));
}

void sub_1BE71D448(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t i;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  _QWORD v39[7];
  uint64_t v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  __n128 (*v47)(uint64_t, uint64_t);
  uint64_t (*v48)();
  void *v49;
  __int128 v50;
  __int128 v51;

  v44 = 0;
  v45 = &v44;
  v46 = 0x5012000000;
  v47 = sub_1BE71F588;
  v48 = nullsub_27;
  v49 = &unk_1BE94989A;
  v7 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v50 = *MEMORY[0x1E0C9D628];
  v51 = v7;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], a2, a3, a4, a5, a6);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i < objc_msgSend_count(*(void **)(a1 + 80), v8, v9, v10, v11, v12); ++i)
  {
    objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 80), v15, i, v16, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = 0;
    v41 = (double *)&v40;
    v42 = 0x2020000000;
    v43 = 0x3FF0000000000000;
    v25 = objc_msgSend_count(*(void **)(a1 + 32), v20, v21, v22, v23, v24);
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = sub_1BE71F598;
    v39[3] = &unk_1E77F4330;
    v39[5] = &v40;
    v39[6] = i;
    v39[4] = &v44;
    objc_msgSend_enumerateTokensInTranscriptionPath_columnRange_tokenProcessingBlock_((void *)a1, v26, (uint64_t)v19, 0, v25, (uint64_t)v39);
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v27, v28, v29, v30, v31, v41[3]);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v13, v33, (uint64_t)v32, v34, v35, v36);

    _Block_object_dispose(&v40, 8);
  }
  v37 = *((_OWORD *)v45 + 4);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)v45 + 3);
  *(_OWORD *)(a1 + 112) = v37;
  v38 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v13;

  _Block_object_dispose(&v44, 8);
}

void sub_1BE71D614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71D62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1BE71D9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE71DE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE71DF64(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t i;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  size_t v81;
  _BYTE *v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  CHTokenizedMathResultToken *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  uint64_t v113;
  id v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  CHTokenizedMathResultToken *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  double v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  double v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  const char *v171;
  uint64_t v172;
  void *v173;
  _QWORD v174[4];
  id v175;
  id v176;
  id v177;
  id v178;
  uint64_t v179;
  void *__dst[2];
  unint64_t v181;
  _QWORD v182[4];
  id v183;

  v3 = a2;
  v9 = v3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
  {
    objc_msgSend_strokeIndexes(v3, v4, v5, v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v182[0] = MEMORY[0x1E0C809B0];
    v182[1] = 3221225472;
    v182[2] = sub_1BE71E678;
    v182[3] = &unk_1E77F4288;
    v183 = *(id *)(a1 + 32);
    objc_msgSend_indexesPassingTest_(v10, v11, (uint64_t)v182, v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v173 = v15;
    if (objc_msgSend_count(v15, v16, v17, v18, v19, v20))
    {
      v26 = objc_msgSend_count(v15, v21, v22, v23, v24, v25);
      objc_msgSend_strokeIndexes(v9, v27, v28, v29, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend_count(v32, v33, v34, v35, v36, v37);

      if (v26 == v38)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
        v40 = v173;
        if (!*(_BYTE *)(v39 + 24) || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
        {
          *(_BYTE *)(v39 + 24) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 1;
LABEL_32:

          goto LABEL_33;
        }
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v170 = (id)qword_1EF568E18[0];
        if (!os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        LOWORD(__dst[0]) = 0;
        v171 = "Non-consecutive sequence of tokens encountered when replacing scrubbed value.";
      }
      else
      {
        if (qword_1EF568E88 != -1)
          dispatch_once(&qword_1EF568E88, &unk_1E77F1630);
        v170 = (id)qword_1EF568E18[0];
        if (!os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        LOWORD(__dst[0]) = 0;
        v171 = "Partially covered token encountered when replacing scrubbed value.";
      }
      _os_log_impl(&dword_1BE607000, v170, OS_LOG_TYPE_ERROR, v171, (uint8_t *)__dst, 2u);
LABEL_28:

      v172 = *(_QWORD *)(a1 + 80);
LABEL_31:
      *(_BYTE *)(*(_QWORD *)(v172 + 8) + 24) = 0;
      v40 = v173;
      goto LABEL_32;
    }
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
    {
LABEL_21:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24))
      {
        objc_msgSend_indexSet(MEMORY[0x1E0CB3788], v21, v22, v23, v24, v25);
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_strokeIndexes(v9, v105, v106, v107, v108, v109);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        v174[0] = MEMORY[0x1E0C809B0];
        v174[1] = 3221225472;
        v174[2] = sub_1BE71E684;
        v174[3] = &unk_1E77F42D0;
        v175 = *(id *)(a1 + 32);
        v111 = v9;
        v176 = v111;
        v112 = *(id *)(a1 + 72);
        v113 = *(_QWORD *)(a1 + 592);
        v177 = v112;
        v179 = v113;
        v114 = v104;
        v178 = v114;
        objc_msgSend_enumerateIndexesUsingBlock_(v110, v115, (uint64_t)v174, v116, v117, v118);

        v119 = [CHTokenizedMathResultToken alloc];
        objc_msgSend_string(v111, v120, v121, v122, v123, v124);
        v125 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_score(v111, v126, v127, v128, v129, v130);
        v132 = v131;
        objc_msgSend_bounds(v111, v133, v134, v135, v136, v137);
        v139 = v138;
        v141 = v140;
        v143 = v142;
        v145 = v144;
        v151 = objc_msgSend_properties(v111, v146, v147, v148, v149, v150);
        objc_msgSend_maskedAlternative(v111, v152, v153, v154, v155, v156);
        v157 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_maskedAlternativeScore(v111, v158, v159, v160, v161, v162);
        v165 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_maskedAlternative_maskedAlternativeScore_(v119, v163, (uint64_t)v125, (uint64_t)v114, v151, (uint64_t)v157, v132, v139, v141, v143, v145, v164);

        objc_msgSend_addObject_(*(void **)(a1 + 64), v166, (uint64_t)v165, v167, v168, v169);
      }
      else
      {
        objc_msgSend_addObject_(*(void **)(a1 + 64), v21, (uint64_t)v9, v23, v24, v25);
      }
      v172 = *(_QWORD *)(a1 + 88);
      goto LABEL_31;
    }
    for (i = 0; ; ++i)
    {
      if (i >= objc_msgSend_count(*(void **)(a1 + 40), v21, v22, v23, v24, v25))
        goto LABEL_21;
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v21, i, v23, v24, v25);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = (void *)objc_msgSend_mutableCopy(v42, v43, v44, v45, v46, v47);

      objc_msgSend_shiftIndexesStartingAtIndex_by_(v48, v49, 0, *(_QWORD *)(a1 + 104), v50, v51);
      v52 = *(void **)(a1 + 56);
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v53, i, v54, v55, v56);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_boundsForStrokeIndexes_(v52, v58, (uint64_t)v57, v59, v60, v61);
      v63 = v62;
      v65 = v64;
      v67 = v66;
      v69 = v68;

      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v70, i, v71, v72, v73);
      v74 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v80 = (const char *)objc_msgSend_UTF8String(v74, v75, v76, v77, v78, v79);
      v81 = strlen(v80);
      if (v81 >= 0x7FFFFFFFFFFFFFF8)
        sub_1BE61F1B4();
      v82 = (_BYTE *)v81;
      if (v81 >= 0x17)
        break;
      HIBYTE(v181) = v81;
      v83 = __dst;
      if (v81)
        goto LABEL_17;
LABEL_18:
      v82[(_QWORD)v83] = 0;
      v86 = sub_1BE61651C((_QWORD *)(a1 + 112), __dst);
      if (SHIBYTE(v181) < 0)
        operator delete(__dst[0]);

      v87 = [CHTokenizedMathResultToken alloc];
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v88, i, v89, v90, v91);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      v95 = (void *)objc_msgSend_initWithString_strokeIndexes_score_bounds_properties_(v87, v93, (uint64_t)v92, (uint64_t)v48, v86 | 0x100000, v94, 1.0, v63, v65, v67, v69);

      objc_msgSend_addObject_(*(void **)(a1 + 64), v96, (uint64_t)v95, v97, v98, v99);
      objc_msgSend_addIndexes_(*(void **)(a1 + 72), v100, (uint64_t)v48, v101, v102, v103);

    }
    v84 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v81 | 7) != 0x17)
      v84 = v81 | 7;
    v85 = v84 + 1;
    v83 = (void **)operator new(v84 + 1);
    __dst[1] = v82;
    v181 = v85 | 0x8000000000000000;
    __dst[0] = v83;
LABEL_17:
    memmove(v83, v80, (size_t)v82);
    goto LABEL_18;
  }
LABEL_33:

}

void sub_1BE71E508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE71E678(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_containsIndex_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

uint64_t sub_1BE71E684(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t Index;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[5];

  v8 = *(void **)(a1 + 32);
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = sub_1BE71E770;
  v39[3] = &unk_1E77F42A8;
  v39[4] = a2;
  objc_msgSend_indexesPassingTest_(v8, a2, (uint64_t)v39, a4, a5, a6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend_count(v9, v10, v11, v12, v13, v14);

  objc_msgSend_strokeIndexes(*(void **)(a1 + 40), v16, v17, v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  Index = objc_msgSend_lastIndex(v21, v22, v23, v24, v25, v26);
  if (Index >= objc_msgSend_firstIndex(*(void **)(a1 + 48), v28, v29, v30, v31, v32))
    v33 = *(_QWORD *)(a1 + 64);
  else
    v33 = 0;

  return objc_msgSend_addIndex_(*(void **)(a1 + 56), v34, (uint64_t)&a2[v33 - v15], v35, v36, v37);
}

void sub_1BE71E750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71E760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1BE71E770(uint64_t a1, unint64_t a2)
{
  return *(_QWORD *)(a1 + 32) > a2;
}

uint64_t sub_1BE71E780(uint64_t a1, uint64_t a2)
{
  return sub_1BE7284AC(a1 + 112, a2 + 112);
}

uint64_t sub_1BE71E78C(uint64_t a1)
{
  return sub_1BE61C7EC(a1 + 112);
}

void sub_1BE71EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE71ED60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE71F160(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE71F264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71F364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE71F398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71F3A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE71F534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 sub_1BE71F588(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1BE71F598(_QWORD *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  double v18;
  id v19;
  CGRect v20;
  CGRect v21;

  v3 = a2;
  v19 = v3;
  if (!a1[6])
  {
    v9 = *(double **)(a1[4] + 8);
    v10 = v9[6];
    v11 = v9[7];
    v12 = v9[8];
    v13 = v9[9];
    objc_msgSend_bounds(v3, v4, v5, v6, v7, v8);
    v21.origin.x = v14;
    v21.origin.y = v15;
    v21.size.width = v16;
    v21.size.height = v17;
    v20.origin.x = v10;
    v20.origin.y = v11;
    v20.size.width = v12;
    v20.size.height = v13;
    *(CGRect *)(*(_QWORD *)(a1[4] + 8) + 48) = CGRectUnion(v20, v21);
    v3 = v19;
  }
  objc_msgSend_score(v3, v4, v5, v6, v7, v8);
  *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = v18 * *(double *)(*(_QWORD *)(a1[5] + 8) + 24);

}

void sub_1BE71F644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE71F658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE71F7B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE71F82C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71F8B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE71F8CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71F958(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE71F978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71FA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE71FA24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_strokeIndexes(a2, (const char *)a2, a3, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE71FA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE71FB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE71FB18(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];

  v3 = a2;
  objc_msgSend_bounds(v3, v4, v5, v6, v7, v8);
  v22[0] = v9;
  v22[1] = v10;
  v22[2] = v11;
  v22[3] = v12;
  v13 = *(void **)(a1 + 32);
  objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E0CB3B18], v14, (uint64_t)v22, (uint64_t)"{CGRect={CGPoint=dd}{CGSize=dd}}", v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v13, v18, (uint64_t)v17, v19, v20, v21);

}

void sub_1BE71FB90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE71FBA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE71FD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1BE71FDAC()
{
  void *v0;

  v0 = (void *)qword_1EF568C38;
  qword_1EF568C38 = (uint64_t)&unk_1E7827380;

}

void sub_1BE71FDC4(_QWORD *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  id v57;

  v3 = a2;
  ++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v57 = v3;
  objc_msgSend_score(v3, v4, v5, v6, v7, v8);
  *(long double *)(*(_QWORD *)(a1[5] + 8) + 24) = log(v9) + *(double *)(*(_QWORD *)(a1[5] + 8) + 24);
  objc_msgSend_score(v57, v10, v11, v12, v13, v14);
  v21 = v20;
  v22 = *(_QWORD *)(a1[6] + 8);
  v23 = *(double *)(v22 + 24);
  if (v21 < v23)
  {
    objc_msgSend_score(v57, v15, v16, v17, v18, v19);
    v22 = *(_QWORD *)(a1[6] + 8);
  }
  *(double *)(v22 + 24) = v23;
  objc_msgSend_maskedAlternative(v57, v15, v16, v17, v18, v19);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    v30 = (void *)qword_1EF568C38;
    objc_msgSend_maskedAlternative(v57, v25, v26, v27, v28, v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v30, v32, (uint64_t)v31, v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    if (v36)
    {
      v42 = (void *)qword_1EF568C38;
      objc_msgSend_maskedAlternative(v57, v37, v38, v39, v40, v41);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v42, v44, (uint64_t)v43, v45, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_doubleValue(v48, v49, v50, v51, v52, v53);
      v55 = v54;

    }
    else
    {
      v55 = 0.9;
    }
    objc_msgSend_maskedAlternativeScore(v57, v37, v38, v39, v40, v41);
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) |= v56 > v55;
  }

}

void sub_1BE71FF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE71FF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE71FF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE71FF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE71FF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE72003C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE72005C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7202CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE720674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE7207D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE720938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE72094C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE72095C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE720974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE720988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE720998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7209AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7209BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7209D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE720A98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE720C74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE720C84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE720C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE720CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE720D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE720DAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE720DBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v6 = *(void **)(a1 + 32);
  objc_msgSend_string(a2, (const char *)a2, a3, a4, a5, a6);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v7, (uint64_t)v11, v8, v9, v10);

}

void sub_1BE720E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE720F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE721DAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE721DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE721F94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("\\left("), a4, a5, a6, CFSTR("\\left|"), CFSTR("\\left\\lceil"), CFSTR("\\left\\lfloor"), 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568CE0;
  qword_1EF568CE0 = v6;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], v8, (uint64_t)CFSTR("\\right)"), v9, v10, v11, CFSTR("\\right|"), CFSTR("\\right\\rceil"), CFSTR("\\right\\rfloor"), 0);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)qword_1EF568CE8;
  qword_1EF568CE8 = v12;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], v14, (uint64_t)CFSTR("{"), v15, v16, v17, CFSTR("["), CFSTR("\\begin{array}{lr}"), 0);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)qword_1EF568CF0;
  qword_1EF568CF0 = v18;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], v20, (uint64_t)CFSTR("}"), v21, v22, v23, CFSTR("]"), CFSTR("\\end{array}"), 0);
  v24 = objc_claimAutoreleasedReturnValue();
  v25 = (void *)qword_1EF568CF8;
  qword_1EF568CF8 = v24;

  v26 = (void *)qword_1EF568D00;
  qword_1EF568D00 = (uint64_t)&unk_1E78273A8;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], v27, (uint64_t)CFSTR("\\"), v28, v29, v30, CFSTR("\\,"), CFSTR("\\;"),
    CFSTR("\\\\"),
    CFSTR("\\color{orange}{+}"),
    0);
  v31 = objc_claimAutoreleasedReturnValue();
  v32 = (void *)qword_1EF568D08;
  qword_1EF568D08 = v31;

  v33 = (void *)qword_1EF568D10;
  qword_1EF568D10 = (uint64_t)&unk_1E78273D0;

}

uint64_t sub_1BE722120(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t i;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  char v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;

  v2 = a2;
  v3 = v2;
  objc_opt_self();
  v9 = (void *)objc_msgSend_mutableCopy(v2, v4, v5, v6, v7, v8);
  objc_msgSend_removeObject_(v9, v10, (uint64_t)&stru_1E77F6F28, v11, v12, v13);
  if (!objc_msgSend_count(v9, v14, v15, v16, v17, v18))
  {
    v29 = 0;
    goto LABEL_27;
  }
  objc_msgSend_objectAtIndex_(v9, v19, 0, v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend_isEqualToString_(v23, v24, (uint64_t)CFSTR("-"), v25, v26, v27) & 1) != 0)
  {
    v28 = v9;
    objc_opt_self();

  }
  else
  {
    v34 = v23;
    if (qword_1EF568C88 != -1)
      dispatch_once(&qword_1EF568C88, &unk_1E77F4260);
    v35 = objc_msgSend_containsObject_((void *)qword_1EF568C90, v30, (uint64_t)v34, v31, v32, v33);

    if ((v35 & 1) != 0)
      goto LABEL_26;
  }

  for (i = 1; ; ++i)
  {
    if (i >= objc_msgSend_count(v9, v36, v37, v38, v39, v40))
    {
      v2 = v3;
      v29 = 0;
      goto LABEL_27;
    }
    objc_msgSend_objectAtIndex_(v9, v42, i, v43, v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_isEqualToString_(v46, v47, (uint64_t)CFSTR("-"), v48, v49, v50))
    {
      v34 = v46;
      if (qword_1EF568C88 != -1)
        dispatch_once(&qword_1EF568C88, &unk_1E77F4260);
      v76 = objc_msgSend_containsObject_((void *)qword_1EF568C90, v72, (uint64_t)v34, v73, v74, v75);

      if (v76)
        goto LABEL_26;
      goto LABEL_10;
    }
    v51 = v9;
    objc_opt_self();
    if (objc_msgSend_count(v51, v52, v53, v54, v55, v56) <= i - 1)
    {

      goto LABEL_10;
    }
    if (objc_msgSend_count(v51, v57, v58, v59, v60, v61) <= i - 1)
      break;
    objc_msgSend_objectAtIndex_(v51, v62, i - 1, v63, v64, v65);
    v70 = (id)objc_claimAutoreleasedReturnValue();
    if (qword_1EF568C88 != -1)
      dispatch_once(&qword_1EF568C88, &unk_1E77F4260);
    v71 = objc_msgSend_containsObject_((void *)qword_1EF568C90, v66, (uint64_t)v70, v67, v68, v69);

    if ((v71 & 1) == 0)
      goto LABEL_25;
LABEL_10:

  }
LABEL_25:
  v34 = v46;
LABEL_26:

  v29 = 1;
  v2 = v3;
LABEL_27:

  return v29;
}

void sub_1BE722388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE722448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE722468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE722480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE722494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE723380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  sub_1BE61BEF4((uint64_t)&a23);
  sub_1BE61BEF4((uint64_t)&a29);

  _Unwind_Resume(a1);
}

void sub_1BE7234F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  uint64_t v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;

  objc_msgSend_setWithObjects_(MEMORY[0x1E0C99E60], a2, (uint64_t)CFSTR("\\frac"), a4, a5, a6, CFSTR("\\sqrt"), CFSTR("^"), CFSTR("_"), 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568D28;
  qword_1EF568D28 = v6;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v14, (uint64_t)CFSTR("°"), (uint64_t)CFSTR("^ { \\circ }"), v15, v16);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v17, (uint64_t)CFSTR("'"), (uint64_t)CFSTR("^ { \\prime }"), v18, v19);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v20, (uint64_t)CFSTR("\""), (uint64_t)CFSTR("^ { \\prime \\prime }"), v21, v22);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v23, (uint64_t)CFSTR("⁰"), (uint64_t)CFSTR("^ { 0 }"), v24, v25);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v26, (uint64_t)CFSTR("¹"), (uint64_t)CFSTR("^ { 1 }"), v27, v28);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v29, (uint64_t)CFSTR("²"), (uint64_t)CFSTR("^ { 2 }"), v30, v31);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v32, (uint64_t)CFSTR("³"), (uint64_t)CFSTR("^ { 3 }"), v33, v34);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v35, (uint64_t)CFSTR("%C"), v36, v37, v38, 8308);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v40, (uint64_t)CFSTR("^ { %lu }"), v41, v42, v43, 4);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v45, (uint64_t)v39, (uint64_t)v44, v46, v47);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v48, (uint64_t)CFSTR("%C"), v49, v50, v51, 8309);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v53, (uint64_t)CFSTR("^ { %lu }"), v54, v55, v56, 5);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v58, (uint64_t)v52, (uint64_t)v57, v59, v60);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v61, (uint64_t)CFSTR("%C"), v62, v63, v64, 8310);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v66, (uint64_t)CFSTR("^ { %lu }"), v67, v68, v69, 6);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v71, (uint64_t)v65, (uint64_t)v70, v72, v73);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v74, (uint64_t)CFSTR("%C"), v75, v76, v77, 8311);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v79, (uint64_t)CFSTR("^ { %lu }"), v80, v81, v82, 7);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v84, (uint64_t)v78, (uint64_t)v83, v85, v86);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v87, (uint64_t)CFSTR("%C"), v88, v89, v90, 8312);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v92, (uint64_t)CFSTR("^ { %lu }"), v93, v94, v95, 8);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v97, (uint64_t)v91, (uint64_t)v96, v98, v99);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v100, (uint64_t)CFSTR("%C"), v101, v102, v103, 8313);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v105, (uint64_t)CFSTR("^ { %lu }"), v106, v107, v108, 9);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v110, (uint64_t)v104, (uint64_t)v109, v111, v112);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v113, (uint64_t)CFSTR("%C"), v114, v115, v116, 8320);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v118, (uint64_t)CFSTR("_ { %lu }"), v119, v120, v121, 0);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v123, (uint64_t)v117, (uint64_t)v122, v124, v125);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v126, (uint64_t)CFSTR("%C"), v127, v128, v129, 8321);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v131, (uint64_t)CFSTR("_ { %lu }"), v132, v133, v134, 1);
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v136, (uint64_t)v130, (uint64_t)v135, v137, v138);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v139, (uint64_t)CFSTR("%C"), v140, v141, v142, 8322);
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v144, (uint64_t)CFSTR("_ { %lu }"), v145, v146, v147, 2);
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v149, (uint64_t)v143, (uint64_t)v148, v150, v151);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v152, (uint64_t)CFSTR("%C"), v153, v154, v155, 8323);
  v156 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v157, (uint64_t)CFSTR("_ { %lu }"), v158, v159, v160, 3);
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v162, (uint64_t)v156, (uint64_t)v161, v163, v164);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v165, (uint64_t)CFSTR("%C"), v166, v167, v168, 8324);
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v170, (uint64_t)CFSTR("_ { %lu }"), v171, v172, v173, 4);
  v174 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v175, (uint64_t)v169, (uint64_t)v174, v176, v177);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v178, (uint64_t)CFSTR("%C"), v179, v180, v181, 8325);
  v182 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v183, (uint64_t)CFSTR("_ { %lu }"), v184, v185, v186, 5);
  v187 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v188, (uint64_t)v182, (uint64_t)v187, v189, v190);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v191, (uint64_t)CFSTR("%C"), v192, v193, v194, 8326);
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v196, (uint64_t)CFSTR("_ { %lu }"), v197, v198, v199, 6);
  v200 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v201, (uint64_t)v195, (uint64_t)v200, v202, v203);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v204, (uint64_t)CFSTR("%C"), v205, v206, v207, 8327);
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v209, (uint64_t)CFSTR("_ { %lu }"), v210, v211, v212, 7);
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v214, (uint64_t)v208, (uint64_t)v213, v215, v216);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v217, (uint64_t)CFSTR("%C"), v218, v219, v220, 8328);
  v221 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v222, (uint64_t)CFSTR("_ { %lu }"), v223, v224, v225, 8);
  v226 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v227, (uint64_t)v221, (uint64_t)v226, v228, v229);

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v230, (uint64_t)CFSTR("%C"), v231, v232, v233, 8329);
  v234 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v235, (uint64_t)CFSTR("_ { %lu }"), v236, v237, v238, 9);
  v239 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v13, v240, (uint64_t)v234, (uint64_t)v239, v241, v242);

  objc_msgSend_setObject_forKeyedSubscript_(v13, v243, (uint64_t)CFSTR("\\\\ + &"), (uint64_t)CFSTR("\\\\ &"), v244, v245);
  objc_msgSend_setObject_forKeyedSubscript_(v13, v246, (uint64_t)CFSTR("+"), (uint64_t)CFSTR("\\color{orange}{+}"), v247, v248);
  v249 = (void *)qword_1EF568D30;
  qword_1EF568D30 = (uint64_t)v13;

}

void sub_1BE723BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE723BE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE723BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE723C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE723C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE723C30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE723C48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE723C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE723E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE723E80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5, a6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v7, (uint64_t)CFSTR("x"), (uint64_t)CFSTR("×"), v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v10, (uint64_t)CFSTR("*"), (uint64_t)CFSTR("⋅"), v11, v12);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v13, (uint64_t)CFSTR("/"), (uint64_t)CFSTR("÷"), v14, v15);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v16, (uint64_t)CFSTR("pi"), (uint64_t)CFSTR("π"), v17, v18);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v19, (uint64_t)&stru_1E77F6F28, (uint64_t)CFSTR("\n"), v20, v21);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v22, (uint64_t)CFSTR("="), (uint64_t)CFSTR("hline"), v23, v24);
  v25 = (void *)qword_1EF568D40;
  qword_1EF568D40 = (uint64_t)v6;

}

void sub_1BE723F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE723FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE723FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE724004(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend_componentsSeparatedByString_(CFSTR("!() + , - . / 0 1 2 3 4 5 6 7 8 9 : = \\\\ \\ \\$ \\% \\arccos \\arcsin \\arctan \\ast \\cdot \\circ \\cos \\cosh \\cot \\coth \\csc \\div \\lceil \\left( \\left\\lceil \\left\\lfloor \\left| \\lfloor \\lg \\ln \\log \\prime \\rceil \\rfloor \\right) \\right\\rceil \\right\\rfloor \\right| \\sec \\sin \\sinh \\tan \\tanh \\times a A b B c C d D e E f F g G H h i I j J k K L l m M n N o O p P q Q r R s S t T u U v V w W x X y Y z Z |"), a2, (uint64_t)CFSTR(" "), a4, a5, a6);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setWithArray_(v6, v7, (uint64_t)v13, v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)qword_1EF568C50;
  qword_1EF568C50 = v11;

}

void sub_1BE72406C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1BE724080(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_containsObject_((void *)qword_1EF568C50, a2, (uint64_t)a2, a4, a5, a6) ^ 1;
}

void sub_1BE724124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE724138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE724148(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR(" !()+-×*⋅÷:/.,0123456789=%°'\"aAbBcCdDeEfFgGHhiIjJkKLlmMnNoOpPqQrRsStTuUvVwWxXyYzZ|$¢£¥₩€₴₺₽"), a4, a5, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568D50;
  qword_1EF568D50 = v6;

}

void sub_1BE72439C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE7243FC(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = objc_alloc(MEMORY[0x1E0D09EC8]);
  v7 = objc_msgSend_initWithLocales_(v2, v3, *(_QWORD *)(a1 + 32), v4, v5, v6);
  v8 = (void *)qword_1EF568D60;
  qword_1EF568D60 = v7;

}

void sub_1BE7245A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE724604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE724614(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v7;

  objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E0CB38E8], a2, (uint64_t)CFSTR("^(?!0*(?:[,. ]0*)*$)(?:[$€£¥¢₺₴₽₩])?[\\d.]\\d*[\\d,. ]*(?:\\d*[,. ]\\d+)*[\\dA-Za-z,. ]*$"), 0, 0, a6);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)qword_1EF568D70;
  qword_1EF568D70 = v6;

}

void sub_1BE7246BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7246D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE724868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE724C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE724DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE724E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE724E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE724E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7250A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE725164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE72517C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE725190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7251A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE725220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE7253EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE7254E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE7254F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE72550C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE725704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

uint64_t sub_1BE725760(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4, a5, a6);
}

void sub_1BE725800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE725BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE725E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  _Block_object_dispose(&a18, 8);

  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a33, 8);
  sub_1BE61BEF4(v33);
  _Block_object_dispose((const void *)(v34 - 96), 8);
  _Unwind_Resume(a1);
}

double sub_1BE725EF4(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t sub_1BE725F34(uint64_t a1)
{
  return sub_1BE61BEF4(a1 + 48);
}

__n128 sub_1BE725F3C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1BE725F60(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1BE725F78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1BE725F88(uint64_t a1)
{

}

void sub_1BE725F90(_QWORD *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isEqualToString;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSString *v58;
  double v59;
  _QWORD *v60;
  unint64_t v61;
  double *v62;
  double v63;
  double v64;
  double *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  double *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  double *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  _OWORD *v81;
  double *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  id v86;
  CGRect v87;

  v86 = a2;
  objc_msgSend_string(v86, v3, v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  isEqualToString = objc_msgSend_isEqualToString_(v8, v9, (uint64_t)CFSTR("{"), v10, v11, v12);

  if (isEqualToString)
  {
    if ((objc_msgSend_isEqualToString_(*(void **)(*(_QWORD *)(a1[4] + 8) + 40), v14, (uint64_t)CFSTR("^"), v16, v17, v18) & 1) != 0|| objc_msgSend_isEqualToString_(*(void **)(*(_QWORD *)(a1[4] + 8) + 40), v19, (uint64_t)CFSTR("_"), v20, v21, v22))
    {
      ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    }
    v23 = *(_QWORD **)(a1[6] + 8);
    v24 = v23[7];
    v25 = v23[8];
    v26 = ((v25 - v24) << 6) - 1;
    v27 = *(_QWORD *)(a1[4] + 8);
    if (v25 == v24)
      v26 = 0;
    if (v26 == v23[11] + v23[10])
    {
      sub_1BE7287C4(v23 + 6);
      v24 = v23[7];
      v25 = v23[8];
    }
    if (v25 == v24)
    {
      v29 = 0;
    }
    else
    {
      v28 = v23[11] + v23[10];
      v29 = (_QWORD *)(*(_QWORD *)(v24 + ((v28 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v28 & 0x1FF));
    }
    *v29 = *(id *)(v27 + 40);
    ++v23[11];
  }
  else
  {
    objc_msgSend_string(v86, v14, v15, v16, v17, v18);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend_isEqualToString_(v30, v31, (uint64_t)CFSTR("}"), v32, v33, v34);

    if (v35)
    {
      v41 = *(_QWORD **)(a1[6] + 8);
      v42 = v41[11];
      if (v42)
      {
        if ((objc_msgSend_isEqualToString_(*(void **)(*(_QWORD *)(v41[7] + (((unint64_t)(v42 + v41[10] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v42 + v41[10] - 1) & 0x1FF)), v36, (uint64_t)CFSTR("^"), v38, v39, v40) & 1) != 0|| (v47 = *(_QWORD **)(a1[6] + 8), v48 = v47[11] + v47[10] - 1, objc_msgSend_isEqualToString_(*(void **)(*(_QWORD *)(v47[7] + ((v48 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v48 & 0x1FF)), v43, (uint64_t)CFSTR("_"), v44, v45, v46)))
        {
          --*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
        }
        v49 = *(_QWORD **)(a1[6] + 8);
        v50 = v49[11] + v49[10] - 1;

        v52 = v49[7];
        v51 = v49[8];
        v53 = v51 - v52;
        v54 = v51 == v52;
        v56 = v49[10];
        v55 = v49[11];
        v49[11] = v55 - 1;
        v57 = (v53 << 6) - 1;
        if (v54)
          v57 = 0;
        if ((unint64_t)(v57 - (v55 + v56) + 1) >= 0x400)
        {
          operator delete(*(void **)(v51 - 8));
          v49[8] -= 8;
        }
      }
    }
    else
    {
      objc_msgSend_string(v86, v36, v37, v38, v39, v40);
      v58 = (NSString *)objc_claimAutoreleasedReturnValue();
      v59 = symbolHeightCoefficient(v58, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24));

      if (v59 > 0.0)
      {
        objc_msgSend_bounds(v86, v36, v37, v38, v39, v40);
        if (!CGRectEqualToRect(v87, *MEMORY[0x1E0C9D628]))
        {
          v60 = *(_QWORD **)(a1[7] + 8);
          objc_msgSend_bounds(v86, v36, v37, v38, v39, v40);
          v62 = (double *)v60[7];
          v61 = v60[8];
          v64 = v63 / v59;
          if ((unint64_t)v62 >= v61)
          {
            v69 = (double *)v60[6];
            v70 = v62 - v69;
            v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 61)
              sub_1BE61F930();
            v72 = v61 - (_QWORD)v69;
            if (v72 >> 2 > v71)
              v71 = v72 >> 2;
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v71;
            if (v73)
            {
              if (v73 >> 61)
                sub_1BE61F100();
              v74 = operator new(8 * v73);
            }
            else
            {
              v74 = 0;
            }
            v75 = (double *)&v74[8 * v70];
            v76 = &v74[8 * v73];
            *v75 = v64;
            v65 = v75 + 1;
            if (v62 != v69)
            {
              v77 = (char *)v62 - (char *)v69 - 8;
              if (v77 < 0x58)
                goto LABEL_51;
              if ((unint64_t)((char *)v69 - v74) < 0x20)
                goto LABEL_51;
              v78 = (v77 >> 3) + 1;
              v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
              v80 = &v62[v79 / 0xFFFFFFFFFFFFFFF8];
              v75 = (double *)((char *)v75 - v79);
              v81 = &v74[8 * v70 - 16];
              v82 = v62 - 2;
              v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v84 = *(_OWORD *)v82;
                *(v81 - 1) = *((_OWORD *)v82 - 1);
                *v81 = v84;
                v81 -= 2;
                v82 -= 4;
                v83 -= 4;
              }
              while (v83);
              v62 = v80;
              if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_51:
                do
                {
                  v85 = *((_QWORD *)v62-- - 1);
                  *((_QWORD *)v75-- - 1) = v85;
                }
                while (v62 != v69);
              }
            }
            v60[6] = v75;
            v60[7] = v65;
            v60[8] = v76;
            if (v69)
              operator delete(v69);
          }
          else
          {
            *v62 = v64;
            v65 = v62 + 1;
          }
          v60[7] = v65;
        }
      }
    }
  }
  objc_msgSend_string(v86, v36, v37, v38, v39, v40);
  v66 = objc_claimAutoreleasedReturnValue();
  v67 = *(_QWORD *)(a1[4] + 8);
  v68 = *(void **)(v67 + 40);
  *(_QWORD *)(v67 + 40) = v66;

}

void sub_1BE7263C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7263D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE72640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE7266C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

